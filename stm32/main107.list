
main107.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 00 01 20 0d be 01 00 4d be 01 00 4d be 01 00     ... ....M...M...
      10:	4d be 01 00 4d be 01 00 4d be 01 00 00 00 00 00     M...M...M.......
	...
      2c:	4d be 01 00 4d be 01 00 00 00 00 00 4d be 01 00     M...M.......M...
      3c:	49 77 00 00 4d be 01 00 4d be 01 00 4d be 01 00     Iw..M...M...M...
      4c:	4d be 01 00 4d be 01 00 4d be 01 00 4d be 01 00     M...M...M...M...
      5c:	4d be 01 00 4d be 01 00 e1 d3 00 00 4d be 01 00     M...M.......M...
      6c:	4d be 01 00 4d be 01 00 4d be 01 00 4d be 01 00     M...M...M...M...
      7c:	4d be 01 00 4d be 01 00 4d be 01 00 4d be 01 00     M...M...M...M...
      8c:	4d be 01 00 4d be 01 00 4d be 01 00 4d be 01 00     M...M...M...M...
      9c:	4d be 01 00 4d be 01 00 4d be 01 00 4d be 01 00     M...M...M...M...
      ac:	4d be 01 00 4d be 01 00 4d be 01 00 4d be 01 00     M...M...M...M...
      bc:	4d be 01 00 4d be 01 00 4d be 01 00 4d be 01 00     M...M...M...M...
      cc:	4d be 01 00 4d be 01 00 4d be 01 00 4d be 01 00     M...M...M...M...
      dc:	4d be 01 00 4d be 01 00 4d be 01 00 4d be 01 00     M...M...M...M...
	...
     108:	4d be 01 00 4d be 01 00 4d be 01 00 4d be 01 00     M...M...M...M...
     118:	4d be 01 00 4d be 01 00 4d be 01 00 4d be 01 00     M...M...M...M...
     128:	4d be 01 00 4d be 01 00 4d be 01 00 4d be 01 00     M...M...M...M...
     138:	4d be 01 00 4d be 01 00 4d be 01 00 4d be 01 00     M...M...M...M...
     148:	4d be 01 00 4d be 01 00 00 00 00 00 00 00 00 00     M...M...........
	...
     1e0:	5f f8 e0 f1 50 37 02 00 00 00 00 20 34 00 00 20     _...P7..... 4.. 
     1f0:	48 05 00 20 78 06 00 20                             H.. x.. 

000001f8 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
     1f8:	b480      	push	{r7}
     1fa:	b083      	sub	sp, #12
     1fc:	af00      	add	r7, sp, #0
     1fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
     200:	4a05      	ldr	r2, [pc, #20]	(218 <NVIC_PriorityGroupConfig+0x20>)
     202:	687b      	ldr	r3, [r7, #4]
     204:	f043 63be 	orr.w	r3, r3, #99614720	; 0x5f00000
     208:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
     20c:	60d3      	str	r3, [r2, #12]
}
     20e:	f107 070c 	add.w	r7, r7, #12	; 0xc
     212:	46bd      	mov	sp, r7
     214:	bc80      	pop	{r7}
     216:	4770      	bx	lr
     218:	e000ed00 	.word	0xe000ed00

0000021c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *   the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
     21c:	b480      	push	{r7}
     21e:	b087      	sub	sp, #28
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
     224:	f04f 0300 	mov.w	r3, #0	; 0x0
     228:	60fb      	str	r3, [r7, #12]
     22a:	f04f 0300 	mov.w	r3, #0	; 0x0
     22e:	613b      	str	r3, [r7, #16]
     230:	f04f 030f 	mov.w	r3, #15	; 0xf
     234:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
     236:	687b      	ldr	r3, [r7, #4]
     238:	78db      	ldrb	r3, [r3, #3]
     23a:	2b00      	cmp	r3, #0
     23c:	d041      	beq.n	2c2 <NVIC_Init+0xa6>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
     23e:	4b2d      	ldr	r3, [pc, #180]	(2f4 <NVIC_Init+0xd8>)
     240:	68db      	ldr	r3, [r3, #12]
     242:	ea6f 0303 	mvn.w	r3, r3
     246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     24a:	ea4f 2313 	mov.w	r3, r3, lsr #8
     24e:	60fb      	str	r3, [r7, #12]
    tmppre = (0x4 - tmppriority);
     250:	68fb      	ldr	r3, [r7, #12]
     252:	f1c3 0304 	rsb	r3, r3, #4	; 0x4
     256:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
     258:	68fa      	ldr	r2, [r7, #12]
     25a:	697b      	ldr	r3, [r7, #20]
     25c:	fa23 f302 	lsr.w	r3, r3, r2
     260:	617b      	str	r3, [r7, #20]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
     262:	687b      	ldr	r3, [r7, #4]
     264:	785b      	ldrb	r3, [r3, #1]
     266:	461a      	mov	r2, r3
     268:	693b      	ldr	r3, [r7, #16]
     26a:	fa02 f303 	lsl.w	r3, r2, r3
     26e:	60fb      	str	r3, [r7, #12]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
     270:	687b      	ldr	r3, [r7, #4]
     272:	789b      	ldrb	r3, [r3, #2]
     274:	461a      	mov	r2, r3
     276:	697b      	ldr	r3, [r7, #20]
     278:	ea02 0203 	and.w	r2, r2, r3
     27c:	68fb      	ldr	r3, [r7, #12]
     27e:	ea43 0302 	orr.w	r3, r3, r2
     282:	60fb      	str	r3, [r7, #12]
    tmppriority = tmppriority << 0x04;
     284:	68fb      	ldr	r3, [r7, #12]
     286:	ea4f 1303 	mov.w	r3, r3, lsl #4
     28a:	60fb      	str	r3, [r7, #12]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
     28c:	491a      	ldr	r1, [pc, #104]	(2f8 <NVIC_Init+0xdc>)
     28e:	687b      	ldr	r3, [r7, #4]
     290:	781b      	ldrb	r3, [r3, #0]
     292:	461a      	mov	r2, r3
     294:	68fb      	ldr	r3, [r7, #12]
     296:	b2db      	uxtb	r3, r3
     298:	440a      	add	r2, r1
     29a:	f882 3300 	strb.w	r3, [r2, #768]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
     29e:	4816      	ldr	r0, [pc, #88]	(2f8 <NVIC_Init+0xdc>)
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	781b      	ldrb	r3, [r3, #0]
     2a4:	ea4f 1353 	mov.w	r3, r3, lsr #5
     2a8:	b2db      	uxtb	r3, r3
     2aa:	4619      	mov	r1, r3
     2ac:	687b      	ldr	r3, [r7, #4]
     2ae:	781b      	ldrb	r3, [r3, #0]
     2b0:	f003 021f 	and.w	r2, r3, #31	; 0x1f
     2b4:	f04f 0301 	mov.w	r3, #1	; 0x1
     2b8:	fa03 f302 	lsl.w	r3, r3, r2
     2bc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
     2c0:	e012      	b.n	2e8 <NVIC_Init+0xcc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
     2c2:	480d      	ldr	r0, [pc, #52]	(2f8 <NVIC_Init+0xdc>)
     2c4:	687b      	ldr	r3, [r7, #4]
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	ea4f 1353 	mov.w	r3, r3, lsr #5
     2cc:	b2db      	uxtb	r3, r3
     2ce:	4619      	mov	r1, r3
     2d0:	687b      	ldr	r3, [r7, #4]
     2d2:	781b      	ldrb	r3, [r3, #0]
     2d4:	f003 021f 	and.w	r2, r3, #31	; 0x1f
     2d8:	f04f 0301 	mov.w	r3, #1	; 0x1
     2dc:	fa03 f202 	lsl.w	r2, r3, r2
     2e0:	f101 0320 	add.w	r3, r1, #32	; 0x20
     2e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
     2e8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
     2ec:	46bd      	mov	sp, r7
     2ee:	bc80      	pop	{r7}
     2f0:	4770      	bx	lr
     2f2:	46c0      	nop			(mov r8, r8)
     2f4:	e000ed00 	.word	0xe000ed00
     2f8:	e000e100 	.word	0xe000e100

000002fc <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x100.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
     2fc:	b480      	push	{r7}
     2fe:	b083      	sub	sp, #12
     300:	af00      	add	r7, sp, #0
     302:	6078      	str	r0, [r7, #4]
     304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
     306:	4907      	ldr	r1, [pc, #28]	(324 <NVIC_SetVectorTable+0x28>)
     308:	683b      	ldr	r3, [r7, #0]
     30a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
     30e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     312:	687a      	ldr	r2, [r7, #4]
     314:	ea43 0302 	orr.w	r3, r3, r2
     318:	608b      	str	r3, [r1, #8]
}
     31a:	f107 070c 	add.w	r7, r7, #12	; 0xc
     31e:	46bd      	mov	sp, r7
     320:	bc80      	pop	{r7}
     322:	4770      	bx	lr
     324:	e000ed00 	.word	0xe000ed00

00000328 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
     328:	b480      	push	{r7}
     32a:	b083      	sub	sp, #12
     32c:	af00      	add	r7, sp, #0
     32e:	4603      	mov	r3, r0
     330:	460a      	mov	r2, r1
     332:	71fb      	strb	r3, [r7, #7]
     334:	4613      	mov	r3, r2
     336:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
     338:	79bb      	ldrb	r3, [r7, #6]
     33a:	2b00      	cmp	r3, #0
     33c:	d007      	beq.n	34e <NVIC_SystemLPConfig+0x26>
  {
    SCB->SCR |= LowPowerMode;
     33e:	490b      	ldr	r1, [pc, #44]	(36c <NVIC_SystemLPConfig+0x44>)
     340:	4b0a      	ldr	r3, [pc, #40]	(36c <NVIC_SystemLPConfig+0x44>)
     342:	691a      	ldr	r2, [r3, #16]
     344:	79fb      	ldrb	r3, [r7, #7]
     346:	ea42 0303 	orr.w	r3, r2, r3
     34a:	610b      	str	r3, [r1, #16]
     34c:	e008      	b.n	360 <NVIC_SystemLPConfig+0x38>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
     34e:	4907      	ldr	r1, [pc, #28]	(36c <NVIC_SystemLPConfig+0x44>)
     350:	4b06      	ldr	r3, [pc, #24]	(36c <NVIC_SystemLPConfig+0x44>)
     352:	691a      	ldr	r2, [r3, #16]
     354:	79fb      	ldrb	r3, [r7, #7]
     356:	ea6f 0303 	mvn.w	r3, r3
     35a:	ea02 0303 	and.w	r3, r2, r3
     35e:	610b      	str	r3, [r1, #16]
  }
}
     360:	f107 070c 	add.w	r7, r7, #12	; 0xc
     364:	46bd      	mov	sp, r7
     366:	bc80      	pop	{r7}
     368:	4770      	bx	lr
     36a:	46c0      	nop			(mov r8, r8)
     36c:	e000ed00 	.word	0xe000ed00

00000370 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
     370:	b480      	push	{r7}
     372:	b083      	sub	sp, #12
     374:	af00      	add	r7, sp, #0
     376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
     378:	687b      	ldr	r3, [r7, #4]
     37a:	2b04      	cmp	r3, #4
     37c:	d106      	bne.n	38c <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
     37e:	4a09      	ldr	r2, [pc, #36]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     380:	4b08      	ldr	r3, [pc, #32]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     382:	681b      	ldr	r3, [r3, #0]
     384:	f043 0304 	orr.w	r3, r3, #4	; 0x4
     388:	6013      	str	r3, [r2, #0]
     38a:	e005      	b.n	398 <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
     38c:	4a05      	ldr	r2, [pc, #20]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     38e:	4b05      	ldr	r3, [pc, #20]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     390:	681b      	ldr	r3, [r3, #0]
     392:	f023 0304 	bic.w	r3, r3, #4	; 0x4
     396:	6013      	str	r3, [r2, #0]
  }
}
     398:	f107 070c 	add.w	r7, r7, #12	; 0xc
     39c:	46bd      	mov	sp, r7
     39e:	bc80      	pop	{r7}
     3a0:	4770      	bx	lr
     3a2:	46c0      	nop			(mov r8, r8)
     3a4:	e000e010 	.word	0xe000e010

000003a8 <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
     3b0:	687a      	ldr	r2, [r7, #4]
     3b2:	4b1a      	ldr	r3, [pc, #104]	(41c <ADC_DeInit+0x74>)
     3b4:	429a      	cmp	r2, r3
     3b6:	d10c      	bne.n	3d2 <ADC_DeInit+0x2a>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
     3b8:	f44f 7000 	mov.w	r0, #512	; 0x200
     3bc:	f04f 0101 	mov.w	r1, #1	; 0x1
     3c0:	f002 f8a8 	bl	2514 <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
     3c4:	f44f 7000 	mov.w	r0, #512	; 0x200
     3c8:	f04f 0100 	mov.w	r1, #0	; 0x0
     3cc:	f002 f8a2 	bl	2514 <RCC_APB2PeriphResetCmd>
     3d0:	e020      	b.n	414 <ADC_DeInit+0x6c>
  }
  else if (ADCx == ADC2)
     3d2:	687a      	ldr	r2, [r7, #4]
     3d4:	4b12      	ldr	r3, [pc, #72]	(420 <ADC_DeInit+0x78>)
     3d6:	429a      	cmp	r2, r3
     3d8:	d10c      	bne.n	3f4 <ADC_DeInit+0x4c>
  {
    /* Enable ADC2 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
     3da:	f44f 6080 	mov.w	r0, #1024	; 0x400
     3de:	f04f 0101 	mov.w	r1, #1	; 0x1
     3e2:	f002 f897 	bl	2514 <RCC_APB2PeriphResetCmd>
    /* Release ADC2 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
     3e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
     3ea:	f04f 0100 	mov.w	r1, #0	; 0x0
     3ee:	f002 f891 	bl	2514 <RCC_APB2PeriphResetCmd>
     3f2:	e00f      	b.n	414 <ADC_DeInit+0x6c>
  }
  else
  {
    if (ADCx == ADC3)
     3f4:	687a      	ldr	r2, [r7, #4]
     3f6:	4b0b      	ldr	r3, [pc, #44]	(424 <ADC_DeInit+0x7c>)
     3f8:	429a      	cmp	r2, r3
     3fa:	d10b      	bne.n	414 <ADC_DeInit+0x6c>
    {
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
     3fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     400:	f04f 0101 	mov.w	r1, #1	; 0x1
     404:	f002 f886 	bl	2514 <RCC_APB2PeriphResetCmd>
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
     408:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     40c:	f04f 0100 	mov.w	r1, #0	; 0x0
     410:	f002 f880 	bl	2514 <RCC_APB2PeriphResetCmd>
    }
  }
}
     414:	f107 0708 	add.w	r7, r7, #8	; 0x8
     418:	46bd      	mov	sp, r7
     41a:	bd80      	pop	{r7, pc}
     41c:	40012400 	.word	0x40012400
     420:	40012800 	.word	0x40012800
     424:	40013c00 	.word	0x40013c00

00000428 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *   the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
     428:	b480      	push	{r7}
     42a:	b085      	sub	sp, #20
     42c:	af00      	add	r7, sp, #0
     42e:	6078      	str	r0, [r7, #4]
     430:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
     432:	f04f 0300 	mov.w	r3, #0	; 0x0
     436:	60bb      	str	r3, [r7, #8]
  uint8_t tmpreg2 = 0;
     438:	f04f 0300 	mov.w	r3, #0	; 0x0
     43c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
     43e:	687b      	ldr	r3, [r7, #4]
     440:	685b      	ldr	r3, [r3, #4]
     442:	60bb      	str	r3, [r7, #8]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
     444:	68bb      	ldr	r3, [r7, #8]
     446:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
     44a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     44e:	60bb      	str	r3, [r7, #8]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
     450:	683b      	ldr	r3, [r7, #0]
     452:	681a      	ldr	r2, [r3, #0]
     454:	683b      	ldr	r3, [r7, #0]
     456:	791b      	ldrb	r3, [r3, #4]
     458:	ea4f 2303 	mov.w	r3, r3, lsl #8
     45c:	ea42 0203 	orr.w	r2, r2, r3
     460:	68bb      	ldr	r3, [r7, #8]
     462:	ea43 0302 	orr.w	r3, r3, r2
     466:	60bb      	str	r3, [r7, #8]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
     468:	687a      	ldr	r2, [r7, #4]
     46a:	68bb      	ldr	r3, [r7, #8]
     46c:	6053      	str	r3, [r2, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
     46e:	687b      	ldr	r3, [r7, #4]
     470:	689b      	ldr	r3, [r3, #8]
     472:	60bb      	str	r3, [r7, #8]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
     474:	68ba      	ldr	r2, [r7, #8]
     476:	4b1b      	ldr	r3, [pc, #108]	(4e4 <ADC_Init+0xbc>)
     478:	ea02 0303 	and.w	r3, r2, r3
     47c:	60bb      	str	r3, [r7, #8]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
     47e:	683b      	ldr	r3, [r7, #0]
     480:	68da      	ldr	r2, [r3, #12]
     482:	683b      	ldr	r3, [r7, #0]
     484:	689b      	ldr	r3, [r3, #8]
     486:	ea42 0203 	orr.w	r2, r2, r3
     48a:	683b      	ldr	r3, [r7, #0]
     48c:	795b      	ldrb	r3, [r3, #5]
     48e:	ea4f 0343 	mov.w	r3, r3, lsl #1
     492:	ea42 0203 	orr.w	r2, r2, r3
     496:	68bb      	ldr	r3, [r7, #8]
     498:	ea43 0302 	orr.w	r3, r3, r2
     49c:	60bb      	str	r3, [r7, #8]
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
     49e:	687a      	ldr	r2, [r7, #4]
     4a0:	68bb      	ldr	r3, [r7, #8]
     4a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	6adb      	ldr	r3, [r3, #44]
     4a8:	60bb      	str	r3, [r7, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
     4aa:	68bb      	ldr	r3, [r7, #8]
     4ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
     4b0:	60bb      	str	r3, [r7, #8]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
     4b2:	683b      	ldr	r3, [r7, #0]
     4b4:	7c1b      	ldrb	r3, [r3, #16]
     4b6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     4ba:	b2da      	uxtb	r2, r3
     4bc:	7bfb      	ldrb	r3, [r7, #15]
     4be:	ea42 0303 	orr.w	r3, r2, r3
     4c2:	73fb      	strb	r3, [r7, #15]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
     4c4:	7bfb      	ldrb	r3, [r7, #15]
     4c6:	ea4f 5203 	mov.w	r2, r3, lsl #20
     4ca:	68bb      	ldr	r3, [r7, #8]
     4cc:	ea43 0302 	orr.w	r3, r3, r2
     4d0:	60bb      	str	r3, [r7, #8]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
     4d2:	687a      	ldr	r2, [r7, #4]
     4d4:	68bb      	ldr	r3, [r7, #8]
     4d6:	62d3      	str	r3, [r2, #44]
}
     4d8:	f107 0714 	add.w	r7, r7, #20	; 0x14
     4dc:	46bd      	mov	sp, r7
     4de:	bc80      	pop	{r7}
     4e0:	4770      	bx	lr
     4e2:	46c0      	nop			(mov r8, r8)
     4e4:	fff1f7fd 	.word	0xfff1f7fd

000004e8 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
     4e8:	b480      	push	{r7}
     4ea:	b083      	sub	sp, #12
     4ec:	af00      	add	r7, sp, #0
     4ee:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
     4f0:	687a      	ldr	r2, [r7, #4]
     4f2:	f04f 0300 	mov.w	r3, #0	; 0x0
     4f6:	6013      	str	r3, [r2, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
     4f8:	687a      	ldr	r2, [r7, #4]
     4fa:	f04f 0300 	mov.w	r3, #0	; 0x0
     4fe:	7113      	strb	r3, [r2, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
     500:	687a      	ldr	r2, [r7, #4]
     502:	f04f 0300 	mov.w	r3, #0	; 0x0
     506:	7153      	strb	r3, [r2, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
     508:	687a      	ldr	r2, [r7, #4]
     50a:	f04f 0300 	mov.w	r3, #0	; 0x0
     50e:	6093      	str	r3, [r2, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
     510:	687a      	ldr	r2, [r7, #4]
     512:	f04f 0300 	mov.w	r3, #0	; 0x0
     516:	60d3      	str	r3, [r2, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
     518:	687a      	ldr	r2, [r7, #4]
     51a:	f04f 0301 	mov.w	r3, #1	; 0x1
     51e:	7413      	strb	r3, [r2, #16]
}
     520:	f107 070c 	add.w	r7, r7, #12	; 0xc
     524:	46bd      	mov	sp, r7
     526:	bc80      	pop	{r7}
     528:	4770      	bx	lr
     52a:	46c0      	nop			(mov r8, r8)

0000052c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
     532:	6078      	str	r0, [r7, #4]
     534:	460b      	mov	r3, r1
     536:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     538:	78fb      	ldrb	r3, [r7, #3]
     53a:	2b00      	cmp	r3, #0
     53c:	d006      	beq.n	54c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
     53e:	687b      	ldr	r3, [r7, #4]
     540:	689b      	ldr	r3, [r3, #8]
     542:	f043 0201 	orr.w	r2, r3, #1	; 0x1
     546:	687b      	ldr	r3, [r7, #4]
     548:	609a      	str	r2, [r3, #8]
     54a:	e005      	b.n	558 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
     54c:	687b      	ldr	r3, [r7, #4]
     54e:	689b      	ldr	r3, [r3, #8]
     550:	f023 0201 	bic.w	r2, r3, #1	; 0x1
     554:	687b      	ldr	r3, [r7, #4]
     556:	609a      	str	r2, [r3, #8]
  }
}
     558:	f107 070c 	add.w	r7, r7, #12	; 0xc
     55c:	46bd      	mov	sp, r7
     55e:	bc80      	pop	{r7}
     560:	4770      	bx	lr
     562:	46c0      	nop			(mov r8, r8)

00000564 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     564:	b480      	push	{r7}
     566:	b083      	sub	sp, #12
     568:	af00      	add	r7, sp, #0
     56a:	6078      	str	r0, [r7, #4]
     56c:	460b      	mov	r3, r1
     56e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     570:	78fb      	ldrb	r3, [r7, #3]
     572:	2b00      	cmp	r3, #0
     574:	d006      	beq.n	584 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
     576:	687b      	ldr	r3, [r7, #4]
     578:	689b      	ldr	r3, [r3, #8]
     57a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     57e:	687b      	ldr	r3, [r7, #4]
     580:	609a      	str	r2, [r3, #8]
     582:	e005      	b.n	590 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
     584:	687b      	ldr	r3, [r7, #4]
     586:	689b      	ldr	r3, [r3, #8]
     588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
     58c:	687b      	ldr	r3, [r7, #4]
     58e:	609a      	str	r2, [r3, #8]
  }
}
     590:	f107 070c 	add.w	r7, r7, #12	; 0xc
     594:	46bd      	mov	sp, r7
     596:	bc80      	pop	{r7}
     598:	4770      	bx	lr
     59a:	46c0      	nop			(mov r8, r8)

0000059c <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
{
     59c:	b480      	push	{r7}
     59e:	b085      	sub	sp, #20
     5a0:	af00      	add	r7, sp, #0
     5a2:	6078      	str	r0, [r7, #4]
     5a4:	460b      	mov	r3, r1
     5a6:	807b      	strh	r3, [r7, #2]
     5a8:	4613      	mov	r3, r2
     5aa:	707b      	strb	r3, [r7, #1]
  uint8_t itmask = 0;
     5ac:	f04f 0300 	mov.w	r3, #0	; 0x0
     5b0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
     5b2:	887b      	ldrh	r3, [r7, #2]
     5b4:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
     5b6:	787b      	ldrb	r3, [r7, #1]
     5b8:	2b00      	cmp	r3, #0
     5ba:	d007      	beq.n	5cc <ADC_ITConfig+0x30>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
     5bc:	687b      	ldr	r3, [r7, #4]
     5be:	685a      	ldr	r2, [r3, #4]
     5c0:	7bfb      	ldrb	r3, [r7, #15]
     5c2:	ea42 0203 	orr.w	r2, r2, r3
     5c6:	687b      	ldr	r3, [r7, #4]
     5c8:	605a      	str	r2, [r3, #4]
     5ca:	e008      	b.n	5de <ADC_ITConfig+0x42>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
     5cc:	687b      	ldr	r3, [r7, #4]
     5ce:	685a      	ldr	r2, [r3, #4]
     5d0:	7bfb      	ldrb	r3, [r7, #15]
     5d2:	ea6f 0303 	mvn.w	r3, r3
     5d6:	ea02 0203 	and.w	r2, r2, r3
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	605a      	str	r2, [r3, #4]
  }
}
     5de:	f107 0714 	add.w	r7, r7, #20	; 0x14
     5e2:	46bd      	mov	sp, r7
     5e4:	bc80      	pop	{r7}
     5e6:	4770      	bx	lr

000005e8 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
     5e8:	b480      	push	{r7}
     5ea:	b083      	sub	sp, #12
     5ec:	af00      	add	r7, sp, #0
     5ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibartion registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
     5f0:	687b      	ldr	r3, [r7, #4]
     5f2:	689b      	ldr	r3, [r3, #8]
     5f4:	f043 0208 	orr.w	r2, r3, #8	; 0x8
     5f8:	687b      	ldr	r3, [r7, #4]
     5fa:	609a      	str	r2, [r3, #8]
}
     5fc:	f107 070c 	add.w	r7, r7, #12	; 0xc
     600:	46bd      	mov	sp, r7
     602:	bc80      	pop	{r7}
     604:	4770      	bx	lr
     606:	46c0      	nop			(mov r8, r8)

00000608 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
     608:	b480      	push	{r7}
     60a:	b085      	sub	sp, #20
     60c:	af00      	add	r7, sp, #0
     60e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     610:	f04f 0300 	mov.w	r3, #0	; 0x0
     614:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
     616:	687b      	ldr	r3, [r7, #4]
     618:	689b      	ldr	r3, [r3, #8]
     61a:	f003 0308 	and.w	r3, r3, #8	; 0x8
     61e:	2b00      	cmp	r3, #0
     620:	d003      	beq.n	62a <ADC_GetResetCalibrationStatus+0x22>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
     622:	f04f 0301 	mov.w	r3, #1	; 0x1
     626:	73fb      	strb	r3, [r7, #15]
     628:	e002      	b.n	630 <ADC_GetResetCalibrationStatus+0x28>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
     62a:	f04f 0300 	mov.w	r3, #0	; 0x0
     62e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
     630:	7bfb      	ldrb	r3, [r7, #15]
}
     632:	4618      	mov	r0, r3
     634:	f107 0714 	add.w	r7, r7, #20	; 0x14
     638:	46bd      	mov	sp, r7
     63a:	bc80      	pop	{r7}
     63c:	4770      	bx	lr
     63e:	46c0      	nop			(mov r8, r8)

00000640 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
     640:	b480      	push	{r7}
     642:	b083      	sub	sp, #12
     644:	af00      	add	r7, sp, #0
     646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
     648:	687b      	ldr	r3, [r7, #4]
     64a:	689b      	ldr	r3, [r3, #8]
     64c:	f043 0204 	orr.w	r2, r3, #4	; 0x4
     650:	687b      	ldr	r3, [r7, #4]
     652:	609a      	str	r2, [r3, #8]
}
     654:	f107 070c 	add.w	r7, r7, #12	; 0xc
     658:	46bd      	mov	sp, r7
     65a:	bc80      	pop	{r7}
     65c:	4770      	bx	lr
     65e:	46c0      	nop			(mov r8, r8)

00000660 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
     660:	b480      	push	{r7}
     662:	b085      	sub	sp, #20
     664:	af00      	add	r7, sp, #0
     666:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     668:	f04f 0300 	mov.w	r3, #0	; 0x0
     66c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
     66e:	687b      	ldr	r3, [r7, #4]
     670:	689b      	ldr	r3, [r3, #8]
     672:	f003 0304 	and.w	r3, r3, #4	; 0x4
     676:	2b00      	cmp	r3, #0
     678:	d003      	beq.n	682 <ADC_GetCalibrationStatus+0x22>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
     67a:	f04f 0301 	mov.w	r3, #1	; 0x1
     67e:	73fb      	strb	r3, [r7, #15]
     680:	e002      	b.n	688 <ADC_GetCalibrationStatus+0x28>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
     682:	f04f 0300 	mov.w	r3, #0	; 0x0
     686:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
     688:	7bfb      	ldrb	r3, [r7, #15]
}
     68a:	4618      	mov	r0, r3
     68c:	f107 0714 	add.w	r7, r7, #20	; 0x14
     690:	46bd      	mov	sp, r7
     692:	bc80      	pop	{r7}
     694:	4770      	bx	lr
     696:	46c0      	nop			(mov r8, r8)

00000698 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     698:	b480      	push	{r7}
     69a:	b083      	sub	sp, #12
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
     6a0:	460b      	mov	r3, r1
     6a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     6a4:	78fb      	ldrb	r3, [r7, #3]
     6a6:	2b00      	cmp	r3, #0
     6a8:	d006      	beq.n	6b8 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
     6aa:	687b      	ldr	r3, [r7, #4]
     6ac:	689b      	ldr	r3, [r3, #8]
     6ae:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
     6b2:	687b      	ldr	r3, [r7, #4]
     6b4:	609a      	str	r2, [r3, #8]
     6b6:	e005      	b.n	6c4 <ADC_SoftwareStartConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	689b      	ldr	r3, [r3, #8]
     6bc:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	609a      	str	r2, [r3, #8]
  }
}
     6c4:	f107 070c 	add.w	r7, r7, #12	; 0xc
     6c8:	46bd      	mov	sp, r7
     6ca:	bc80      	pop	{r7}
     6cc:	4770      	bx	lr
     6ce:	46c0      	nop			(mov r8, r8)

000006d0 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
     6d0:	b480      	push	{r7}
     6d2:	b085      	sub	sp, #20
     6d4:	af00      	add	r7, sp, #0
     6d6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     6d8:	f04f 0300 	mov.w	r3, #0	; 0x0
     6dc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	689b      	ldr	r3, [r3, #8]
     6e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
     6e6:	2b00      	cmp	r3, #0
     6e8:	d003      	beq.n	6f2 <ADC_GetSoftwareStartConvStatus+0x22>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
     6ea:	f04f 0301 	mov.w	r3, #1	; 0x1
     6ee:	73fb      	strb	r3, [r7, #15]
     6f0:	e002      	b.n	6f8 <ADC_GetSoftwareStartConvStatus+0x28>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
     6f2:	f04f 0300 	mov.w	r3, #0	; 0x0
     6f6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
     6f8:	7bfb      	ldrb	r3, [r7, #15]
}
     6fa:	4618      	mov	r0, r3
     6fc:	f107 0714 	add.w	r7, r7, #20	; 0x14
     700:	46bd      	mov	sp, r7
     702:	bc80      	pop	{r7}
     704:	4770      	bx	lr
     706:	46c0      	nop			(mov r8, r8)

00000708 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *   count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
     708:	b480      	push	{r7}
     70a:	b085      	sub	sp, #20
     70c:	af00      	add	r7, sp, #0
     70e:	6078      	str	r0, [r7, #4]
     710:	460b      	mov	r3, r1
     712:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
     714:	f04f 0300 	mov.w	r3, #0	; 0x0
     718:	60bb      	str	r3, [r7, #8]
  uint32_t tmpreg2 = 0;
     71a:	f04f 0300 	mov.w	r3, #0	; 0x0
     71e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
     720:	687b      	ldr	r3, [r7, #4]
     722:	685b      	ldr	r3, [r3, #4]
     724:	60bb      	str	r3, [r7, #8]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
     726:	68bb      	ldr	r3, [r7, #8]
     728:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
     72c:	60bb      	str	r3, [r7, #8]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
     72e:	78fb      	ldrb	r3, [r7, #3]
     730:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     734:	60fb      	str	r3, [r7, #12]
  tmpreg1 |= tmpreg2 << 13;
     736:	68fb      	ldr	r3, [r7, #12]
     738:	ea4f 3243 	mov.w	r2, r3, lsl #13
     73c:	68bb      	ldr	r3, [r7, #8]
     73e:	ea43 0302 	orr.w	r3, r3, r2
     742:	60bb      	str	r3, [r7, #8]
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
     744:	687a      	ldr	r2, [r7, #4]
     746:	68bb      	ldr	r3, [r7, #8]
     748:	6053      	str	r3, [r2, #4]
}
     74a:	f107 0714 	add.w	r7, r7, #20	; 0x14
     74e:	46bd      	mov	sp, r7
     750:	bc80      	pop	{r7}
     752:	4770      	bx	lr

00000754 <ADC_DiscModeCmd>:
  *   on regular group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     754:	b480      	push	{r7}
     756:	b083      	sub	sp, #12
     758:	af00      	add	r7, sp, #0
     75a:	6078      	str	r0, [r7, #4]
     75c:	460b      	mov	r3, r1
     75e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     760:	78fb      	ldrb	r3, [r7, #3]
     762:	2b00      	cmp	r3, #0
     764:	d006      	beq.n	774 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
     766:	687b      	ldr	r3, [r7, #4]
     768:	685b      	ldr	r3, [r3, #4]
     76a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     76e:	687b      	ldr	r3, [r7, #4]
     770:	605a      	str	r2, [r3, #4]
     772:	e005      	b.n	780 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
     774:	687b      	ldr	r3, [r7, #4]
     776:	685b      	ldr	r3, [r3, #4]
     778:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	605a      	str	r2, [r3, #4]
  }
}
     780:	f107 070c 	add.w	r7, r7, #12	; 0xc
     784:	46bd      	mov	sp, r7
     786:	bc80      	pop	{r7}
     788:	4770      	bx	lr
     78a:	46c0      	nop			(mov r8, r8)

0000078c <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
     78c:	b480      	push	{r7}
     78e:	b085      	sub	sp, #20
     790:	af00      	add	r7, sp, #0
     792:	6078      	str	r0, [r7, #4]
     794:	4618      	mov	r0, r3
     796:	460b      	mov	r3, r1
     798:	70fb      	strb	r3, [r7, #3]
     79a:	4613      	mov	r3, r2
     79c:	70bb      	strb	r3, [r7, #2]
     79e:	4603      	mov	r3, r0
     7a0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
     7a2:	f04f 0300 	mov.w	r3, #0	; 0x0
     7a6:	60bb      	str	r3, [r7, #8]
     7a8:	f04f 0300 	mov.w	r3, #0	; 0x0
     7ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
     7ae:	78fb      	ldrb	r3, [r7, #3]
     7b0:	2b09      	cmp	r3, #9
     7b2:	d929      	bls.n	808 <ADC_RegularChannelConfig+0x7c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	68db      	ldr	r3, [r3, #12]
     7b8:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
     7ba:	78fa      	ldrb	r2, [r7, #3]
     7bc:	4613      	mov	r3, r2
     7be:	ea4f 0343 	mov.w	r3, r3, lsl #1
     7c2:	4413      	add	r3, r2
     7c4:	f1a3 021e 	sub.w	r2, r3, #30	; 0x1e
     7c8:	f04f 0307 	mov.w	r3, #7	; 0x7
     7cc:	fa03 f302 	lsl.w	r3, r3, r2
     7d0:	60fb      	str	r3, [r7, #12]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     7d2:	68fb      	ldr	r3, [r7, #12]
     7d4:	ea6f 0203 	mvn.w	r2, r3
     7d8:	68bb      	ldr	r3, [r7, #8]
     7da:	ea03 0302 	and.w	r3, r3, r2
     7de:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
     7e0:	7879      	ldrb	r1, [r7, #1]
     7e2:	78fa      	ldrb	r2, [r7, #3]
     7e4:	4613      	mov	r3, r2
     7e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
     7ea:	4413      	add	r3, r2
     7ec:	f1a3 031e 	sub.w	r3, r3, #30	; 0x1e
     7f0:	fa01 f303 	lsl.w	r3, r1, r3
     7f4:	60fb      	str	r3, [r7, #12]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     7f6:	68ba      	ldr	r2, [r7, #8]
     7f8:	68fb      	ldr	r3, [r7, #12]
     7fa:	ea42 0303 	orr.w	r3, r2, r3
     7fe:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
     800:	687a      	ldr	r2, [r7, #4]
     802:	68bb      	ldr	r3, [r7, #8]
     804:	60d3      	str	r3, [r2, #12]
     806:	e024      	b.n	852 <ADC_RegularChannelConfig+0xc6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
     808:	687b      	ldr	r3, [r7, #4]
     80a:	691b      	ldr	r3, [r3, #16]
     80c:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
     80e:	78fa      	ldrb	r2, [r7, #3]
     810:	4613      	mov	r3, r2
     812:	ea4f 0343 	mov.w	r3, r3, lsl #1
     816:	441a      	add	r2, r3
     818:	f04f 0307 	mov.w	r3, #7	; 0x7
     81c:	fa03 f302 	lsl.w	r3, r3, r2
     820:	60fb      	str	r3, [r7, #12]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     822:	68fb      	ldr	r3, [r7, #12]
     824:	ea6f 0203 	mvn.w	r2, r3
     828:	68bb      	ldr	r3, [r7, #8]
     82a:	ea03 0302 	and.w	r3, r3, r2
     82e:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
     830:	7879      	ldrb	r1, [r7, #1]
     832:	78fa      	ldrb	r2, [r7, #3]
     834:	4613      	mov	r3, r2
     836:	ea4f 0343 	mov.w	r3, r3, lsl #1
     83a:	4413      	add	r3, r2
     83c:	fa01 f303 	lsl.w	r3, r1, r3
     840:	60fb      	str	r3, [r7, #12]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     842:	68ba      	ldr	r2, [r7, #8]
     844:	68fb      	ldr	r3, [r7, #12]
     846:	ea42 0303 	orr.w	r3, r2, r3
     84a:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
     84c:	687a      	ldr	r2, [r7, #4]
     84e:	68bb      	ldr	r3, [r7, #8]
     850:	6113      	str	r3, [r2, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
     852:	78bb      	ldrb	r3, [r7, #2]
     854:	2b06      	cmp	r3, #6
     856:	d829      	bhi.n	8ac <ADC_RegularChannelConfig+0x120>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
     858:	687b      	ldr	r3, [r7, #4]
     85a:	6b5b      	ldr	r3, [r3, #52]
     85c:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
     85e:	78bb      	ldrb	r3, [r7, #2]
     860:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
     864:	4613      	mov	r3, r2
     866:	ea4f 0383 	mov.w	r3, r3, lsl #2
     86a:	441a      	add	r2, r3
     86c:	f04f 031f 	mov.w	r3, #31	; 0x1f
     870:	fa03 f302 	lsl.w	r3, r3, r2
     874:	60fb      	str	r3, [r7, #12]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
     876:	68fb      	ldr	r3, [r7, #12]
     878:	ea6f 0203 	mvn.w	r2, r3
     87c:	68bb      	ldr	r3, [r7, #8]
     87e:	ea03 0302 	and.w	r3, r3, r2
     882:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
     884:	78f9      	ldrb	r1, [r7, #3]
     886:	78bb      	ldrb	r3, [r7, #2]
     888:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
     88c:	4613      	mov	r3, r2
     88e:	ea4f 0383 	mov.w	r3, r3, lsl #2
     892:	4413      	add	r3, r2
     894:	fa01 f303 	lsl.w	r3, r1, r3
     898:	60fb      	str	r3, [r7, #12]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
     89a:	68ba      	ldr	r2, [r7, #8]
     89c:	68fb      	ldr	r3, [r7, #12]
     89e:	ea42 0303 	orr.w	r3, r2, r3
     8a2:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
     8a4:	687a      	ldr	r2, [r7, #4]
     8a6:	68bb      	ldr	r3, [r7, #8]
     8a8:	6353      	str	r3, [r2, #52]
     8aa:	e055      	b.n	958 <ADC_RegularChannelConfig+0x1cc>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
     8ac:	78bb      	ldrb	r3, [r7, #2]
     8ae:	2b0c      	cmp	r3, #12
     8b0:	d829      	bhi.n	906 <ADC_RegularChannelConfig+0x17a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	6b1b      	ldr	r3, [r3, #48]
     8b6:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
     8b8:	78ba      	ldrb	r2, [r7, #2]
     8ba:	4613      	mov	r3, r2
     8bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
     8c0:	4413      	add	r3, r2
     8c2:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
     8c6:	f04f 031f 	mov.w	r3, #31	; 0x1f
     8ca:	fa03 f302 	lsl.w	r3, r3, r2
     8ce:	60fb      	str	r3, [r7, #12]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
     8d0:	68fb      	ldr	r3, [r7, #12]
     8d2:	ea6f 0203 	mvn.w	r2, r3
     8d6:	68bb      	ldr	r3, [r7, #8]
     8d8:	ea03 0302 	and.w	r3, r3, r2
     8dc:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
     8de:	78f9      	ldrb	r1, [r7, #3]
     8e0:	78ba      	ldrb	r2, [r7, #2]
     8e2:	4613      	mov	r3, r2
     8e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
     8e8:	4413      	add	r3, r2
     8ea:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
     8ee:	fa01 f303 	lsl.w	r3, r1, r3
     8f2:	60fb      	str	r3, [r7, #12]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
     8f4:	68ba      	ldr	r2, [r7, #8]
     8f6:	68fb      	ldr	r3, [r7, #12]
     8f8:	ea42 0303 	orr.w	r3, r2, r3
     8fc:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
     8fe:	687a      	ldr	r2, [r7, #4]
     900:	68bb      	ldr	r3, [r7, #8]
     902:	6313      	str	r3, [r2, #48]
     904:	e028      	b.n	958 <ADC_RegularChannelConfig+0x1cc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
     906:	687b      	ldr	r3, [r7, #4]
     908:	6adb      	ldr	r3, [r3, #44]
     90a:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
     90c:	78ba      	ldrb	r2, [r7, #2]
     90e:	4613      	mov	r3, r2
     910:	ea4f 0383 	mov.w	r3, r3, lsl #2
     914:	4413      	add	r3, r2
     916:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     91a:	f04f 031f 	mov.w	r3, #31	; 0x1f
     91e:	fa03 f302 	lsl.w	r3, r3, r2
     922:	60fb      	str	r3, [r7, #12]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
     924:	68fb      	ldr	r3, [r7, #12]
     926:	ea6f 0203 	mvn.w	r2, r3
     92a:	68bb      	ldr	r3, [r7, #8]
     92c:	ea03 0302 	and.w	r3, r3, r2
     930:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
     932:	78f9      	ldrb	r1, [r7, #3]
     934:	78ba      	ldrb	r2, [r7, #2]
     936:	4613      	mov	r3, r2
     938:	ea4f 0383 	mov.w	r3, r3, lsl #2
     93c:	4413      	add	r3, r2
     93e:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
     942:	fa01 f303 	lsl.w	r3, r1, r3
     946:	60fb      	str	r3, [r7, #12]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
     948:	68ba      	ldr	r2, [r7, #8]
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	ea42 0303 	orr.w	r3, r2, r3
     950:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
     952:	687a      	ldr	r2, [r7, #4]
     954:	68bb      	ldr	r3, [r7, #8]
     956:	62d3      	str	r3, [r2, #44]
  }
}
     958:	f107 0714 	add.w	r7, r7, #20	; 0x14
     95c:	46bd      	mov	sp, r7
     95e:	bc80      	pop	{r7}
     960:	4770      	bx	lr
     962:	46c0      	nop			(mov r8, r8)

00000964 <ADC_ExternalTrigConvCmd>:
  * @param  NewState: new state of the selected ADC external trigger start of conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     964:	b480      	push	{r7}
     966:	b083      	sub	sp, #12
     968:	af00      	add	r7, sp, #0
     96a:	6078      	str	r0, [r7, #4]
     96c:	460b      	mov	r3, r1
     96e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     970:	78fb      	ldrb	r3, [r7, #3]
     972:	2b00      	cmp	r3, #0
     974:	d006      	beq.n	984 <ADC_ExternalTrigConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
     976:	687b      	ldr	r3, [r7, #4]
     978:	689b      	ldr	r3, [r3, #8]
     97a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
     97e:	687b      	ldr	r3, [r7, #4]
     980:	609a      	str	r2, [r3, #8]
     982:	e005      	b.n	990 <ADC_ExternalTrigConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
     984:	687b      	ldr	r3, [r7, #4]
     986:	689b      	ldr	r3, [r3, #8]
     988:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
     98c:	687b      	ldr	r3, [r7, #4]
     98e:	609a      	str	r2, [r3, #8]
  }
}
     990:	f107 070c 	add.w	r7, r7, #12	; 0xc
     994:	46bd      	mov	sp, r7
     996:	bc80      	pop	{r7}
     998:	4770      	bx	lr
     99a:	46c0      	nop			(mov r8, r8)

0000099c <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
     99c:	b480      	push	{r7}
     99e:	b083      	sub	sp, #12
     9a0:	af00      	add	r7, sp, #0
     9a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
     9a4:	687b      	ldr	r3, [r7, #4]
     9a6:	6cdb      	ldr	r3, [r3, #76]
     9a8:	b29b      	uxth	r3, r3
}
     9aa:	4618      	mov	r0, r3
     9ac:	f107 070c 	add.w	r7, r7, #12	; 0xc
     9b0:	46bd      	mov	sp, r7
     9b2:	bc80      	pop	{r7}
     9b4:	4770      	bx	lr
     9b6:	46c0      	nop			(mov r8, r8)

000009b8 <ADC_GetDualModeConversionValue>:
/**
  * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
     9b8:	b480      	push	{r7}
     9ba:	af00      	add	r7, sp, #0
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
     9bc:	4b02      	ldr	r3, [pc, #8]	(9c8 <ADC_GetDualModeConversionValue+0x10>)
     9be:	681b      	ldr	r3, [r3, #0]
}
     9c0:	4618      	mov	r0, r3
     9c2:	46bd      	mov	sp, r7
     9c4:	bc80      	pop	{r7}
     9c6:	4770      	bx	lr
     9c8:	4001244c 	.word	0x4001244c

000009cc <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     9cc:	b480      	push	{r7}
     9ce:	b083      	sub	sp, #12
     9d0:	af00      	add	r7, sp, #0
     9d2:	6078      	str	r0, [r7, #4]
     9d4:	460b      	mov	r3, r1
     9d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     9d8:	78fb      	ldrb	r3, [r7, #3]
     9da:	2b00      	cmp	r3, #0
     9dc:	d006      	beq.n	9ec <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	685b      	ldr	r3, [r3, #4]
     9e2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     9e6:	687b      	ldr	r3, [r7, #4]
     9e8:	605a      	str	r2, [r3, #4]
     9ea:	e005      	b.n	9f8 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
     9ec:	687b      	ldr	r3, [r7, #4]
     9ee:	685b      	ldr	r3, [r3, #4]
     9f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
     9f4:	687b      	ldr	r3, [r7, #4]
     9f6:	605a      	str	r2, [r3, #4]
  }
}
     9f8:	f107 070c 	add.w	r7, r7, #12	; 0xc
     9fc:	46bd      	mov	sp, r7
     9fe:	bc80      	pop	{r7}
     a00:	4770      	bx	lr
     a02:	46c0      	nop			(mov r8, r8)

00000a04 <ADC_InjectedDiscModeCmd>:
  *   on injected group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     a04:	b480      	push	{r7}
     a06:	b083      	sub	sp, #12
     a08:	af00      	add	r7, sp, #0
     a0a:	6078      	str	r0, [r7, #4]
     a0c:	460b      	mov	r3, r1
     a0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a10:	78fb      	ldrb	r3, [r7, #3]
     a12:	2b00      	cmp	r3, #0
     a14:	d006      	beq.n	a24 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
     a16:	687b      	ldr	r3, [r7, #4]
     a18:	685b      	ldr	r3, [r3, #4]
     a1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     a1e:	687b      	ldr	r3, [r7, #4]
     a20:	605a      	str	r2, [r3, #4]
     a22:	e005      	b.n	a30 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
     a24:	687b      	ldr	r3, [r7, #4]
     a26:	685b      	ldr	r3, [r3, #4]
     a28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
     a2c:	687b      	ldr	r3, [r7, #4]
     a2e:	605a      	str	r2, [r3, #4]
  }
}
     a30:	f107 070c 	add.w	r7, r7, #12	; 0xc
     a34:	46bd      	mov	sp, r7
     a36:	bc80      	pop	{r7}
     a38:	4770      	bx	lr
     a3a:	46c0      	nop			(mov r8, r8)

00000a3c <ADC_ExternalTrigInjectedConvConfig>:
  *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
  *                                          by external trigger (for ADC1, ADC2 and ADC3)
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
     a3c:	b480      	push	{r7}
     a3e:	b085      	sub	sp, #20
     a40:	af00      	add	r7, sp, #0
     a42:	6078      	str	r0, [r7, #4]
     a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     a46:	f04f 0300 	mov.w	r3, #0	; 0x0
     a4a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
     a4c:	687b      	ldr	r3, [r7, #4]
     a4e:	689b      	ldr	r3, [r3, #8]
     a50:	60fb      	str	r3, [r7, #12]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
     a52:	68fb      	ldr	r3, [r7, #12]
     a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     a58:	60fb      	str	r3, [r7, #12]
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
     a5a:	68fa      	ldr	r2, [r7, #12]
     a5c:	683b      	ldr	r3, [r7, #0]
     a5e:	ea42 0303 	orr.w	r3, r2, r3
     a62:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
     a64:	687a      	ldr	r2, [r7, #4]
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	6093      	str	r3, [r2, #8]
}
     a6a:	f107 0714 	add.w	r7, r7, #20	; 0x14
     a6e:	46bd      	mov	sp, r7
     a70:	bc80      	pop	{r7}
     a72:	4770      	bx	lr

00000a74 <ADC_ExternalTrigInjectedConvCmd>:
  *   injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     a74:	b480      	push	{r7}
     a76:	b083      	sub	sp, #12
     a78:	af00      	add	r7, sp, #0
     a7a:	6078      	str	r0, [r7, #4]
     a7c:	460b      	mov	r3, r1
     a7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a80:	78fb      	ldrb	r3, [r7, #3]
     a82:	2b00      	cmp	r3, #0
     a84:	d006      	beq.n	a94 <ADC_ExternalTrigInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
     a86:	687b      	ldr	r3, [r7, #4]
     a88:	689b      	ldr	r3, [r3, #8]
     a8a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     a8e:	687b      	ldr	r3, [r7, #4]
     a90:	609a      	str	r2, [r3, #8]
     a92:	e005      	b.n	aa0 <ADC_ExternalTrigInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
     a94:	687b      	ldr	r3, [r7, #4]
     a96:	689b      	ldr	r3, [r3, #8]
     a98:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
     a9c:	687b      	ldr	r3, [r7, #4]
     a9e:	609a      	str	r2, [r3, #8]
  }
}
     aa0:	f107 070c 	add.w	r7, r7, #12	; 0xc
     aa4:	46bd      	mov	sp, r7
     aa6:	bc80      	pop	{r7}
     aa8:	4770      	bx	lr
     aaa:	46c0      	nop			(mov r8, r8)

00000aac <ADC_SoftwareStartInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC software start injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     aac:	b480      	push	{r7}
     aae:	b083      	sub	sp, #12
     ab0:	af00      	add	r7, sp, #0
     ab2:	6078      	str	r0, [r7, #4]
     ab4:	460b      	mov	r3, r1
     ab6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ab8:	78fb      	ldrb	r3, [r7, #3]
     aba:	2b00      	cmp	r3, #0
     abc:	d006      	beq.n	acc <ADC_SoftwareStartInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
     abe:	687b      	ldr	r3, [r7, #4]
     ac0:	689b      	ldr	r3, [r3, #8]
     ac2:	f443 1202 	orr.w	r2, r3, #2129920	; 0x208000
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	609a      	str	r2, [r3, #8]
     aca:	e005      	b.n	ad8 <ADC_SoftwareStartInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
     acc:	687b      	ldr	r3, [r7, #4]
     ace:	689b      	ldr	r3, [r3, #8]
     ad0:	f423 1202 	bic.w	r2, r3, #2129920	; 0x208000
     ad4:	687b      	ldr	r3, [r7, #4]
     ad6:	609a      	str	r2, [r3, #8]
  }
}
     ad8:	f107 070c 	add.w	r7, r7, #12	; 0xc
     adc:	46bd      	mov	sp, r7
     ade:	bc80      	pop	{r7}
     ae0:	4770      	bx	lr
     ae2:	46c0      	nop			(mov r8, r8)

00000ae4 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
     ae4:	b480      	push	{r7}
     ae6:	b085      	sub	sp, #20
     ae8:	af00      	add	r7, sp, #0
     aea:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     aec:	f04f 0300 	mov.w	r3, #0	; 0x0
     af0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
     af2:	687b      	ldr	r3, [r7, #4]
     af4:	689b      	ldr	r3, [r3, #8]
     af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
     afa:	2b00      	cmp	r3, #0
     afc:	d003      	beq.n	b06 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
     afe:	f04f 0301 	mov.w	r3, #1	; 0x1
     b02:	73fb      	strb	r3, [r7, #15]
     b04:	e002      	b.n	b0c <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
     b06:	f04f 0300 	mov.w	r3, #0	; 0x0
     b0a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
     b0c:	7bfb      	ldrb	r3, [r7, #15]
}
     b0e:	4618      	mov	r0, r3
     b10:	f107 0714 	add.w	r7, r7, #20	; 0x14
     b14:	46bd      	mov	sp, r7
     b16:	bc80      	pop	{r7}
     b18:	4770      	bx	lr
     b1a:	46c0      	nop			(mov r8, r8)

00000b1c <ADC_InjectedChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
     b1c:	b480      	push	{r7}
     b1e:	b087      	sub	sp, #28
     b20:	af00      	add	r7, sp, #0
     b22:	6078      	str	r0, [r7, #4]
     b24:	4618      	mov	r0, r3
     b26:	460b      	mov	r3, r1
     b28:	70fb      	strb	r3, [r7, #3]
     b2a:	4613      	mov	r3, r2
     b2c:	70bb      	strb	r3, [r7, #2]
     b2e:	4603      	mov	r3, r0
     b30:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
     b32:	f04f 0300 	mov.w	r3, #0	; 0x0
     b36:	60fb      	str	r3, [r7, #12]
     b38:	f04f 0300 	mov.w	r3, #0	; 0x0
     b3c:	613b      	str	r3, [r7, #16]
     b3e:	f04f 0300 	mov.w	r3, #0	; 0x0
     b42:	617b      	str	r3, [r7, #20]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
     b44:	78fb      	ldrb	r3, [r7, #3]
     b46:	2b09      	cmp	r3, #9
     b48:	d929      	bls.n	b9e <ADC_InjectedChannelConfig+0x82>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
     b4a:	687b      	ldr	r3, [r7, #4]
     b4c:	68db      	ldr	r3, [r3, #12]
     b4e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
     b50:	78fa      	ldrb	r2, [r7, #3]
     b52:	4613      	mov	r3, r2
     b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b58:	4413      	add	r3, r2
     b5a:	f1a3 021e 	sub.w	r2, r3, #30	; 0x1e
     b5e:	f04f 0307 	mov.w	r3, #7	; 0x7
     b62:	fa03 f302 	lsl.w	r3, r3, r2
     b66:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     b68:	693b      	ldr	r3, [r7, #16]
     b6a:	ea6f 0203 	mvn.w	r2, r3
     b6e:	68fb      	ldr	r3, [r7, #12]
     b70:	ea03 0302 	and.w	r3, r3, r2
     b74:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
     b76:	7879      	ldrb	r1, [r7, #1]
     b78:	78fa      	ldrb	r2, [r7, #3]
     b7a:	4613      	mov	r3, r2
     b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b80:	4413      	add	r3, r2
     b82:	f1a3 031e 	sub.w	r3, r3, #30	; 0x1e
     b86:	fa01 f303 	lsl.w	r3, r1, r3
     b8a:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     b8c:	68fa      	ldr	r2, [r7, #12]
     b8e:	693b      	ldr	r3, [r7, #16]
     b90:	ea42 0303 	orr.w	r3, r2, r3
     b94:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
     b96:	687a      	ldr	r2, [r7, #4]
     b98:	68fb      	ldr	r3, [r7, #12]
     b9a:	60d3      	str	r3, [r2, #12]
     b9c:	e024      	b.n	be8 <ADC_InjectedChannelConfig+0xcc>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	691b      	ldr	r3, [r3, #16]
     ba2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
     ba4:	78fa      	ldrb	r2, [r7, #3]
     ba6:	4613      	mov	r3, r2
     ba8:	ea4f 0343 	mov.w	r3, r3, lsl #1
     bac:	441a      	add	r2, r3
     bae:	f04f 0307 	mov.w	r3, #7	; 0x7
     bb2:	fa03 f302 	lsl.w	r3, r3, r2
     bb6:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     bb8:	693b      	ldr	r3, [r7, #16]
     bba:	ea6f 0203 	mvn.w	r2, r3
     bbe:	68fb      	ldr	r3, [r7, #12]
     bc0:	ea03 0302 	and.w	r3, r3, r2
     bc4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
     bc6:	7879      	ldrb	r1, [r7, #1]
     bc8:	78fa      	ldrb	r2, [r7, #3]
     bca:	4613      	mov	r3, r2
     bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
     bd0:	4413      	add	r3, r2
     bd2:	fa01 f303 	lsl.w	r3, r1, r3
     bd6:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     bd8:	68fa      	ldr	r2, [r7, #12]
     bda:	693b      	ldr	r3, [r7, #16]
     bdc:	ea42 0303 	orr.w	r3, r2, r3
     be0:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
     be2:	687a      	ldr	r2, [r7, #4]
     be4:	68fb      	ldr	r3, [r7, #12]
     be6:	6113      	str	r3, [r2, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
     be8:	687b      	ldr	r3, [r7, #4]
     bea:	6b9b      	ldr	r3, [r3, #56]
     bec:	60fb      	str	r3, [r7, #12]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
     bee:	68fb      	ldr	r3, [r7, #12]
     bf0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
     bf4:	ea4f 5313 	mov.w	r3, r3, lsr #20
     bf8:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
     bfa:	697b      	ldr	r3, [r7, #20]
     bfc:	b2db      	uxtb	r3, r3
     bfe:	ea6f 0303 	mvn.w	r3, r3
     c02:	b2da      	uxtb	r2, r3
     c04:	78bb      	ldrb	r3, [r7, #2]
     c06:	4413      	add	r3, r2
     c08:	b2db      	uxtb	r3, r3
     c0a:	f103 0303 	add.w	r3, r3, #3	; 0x3
     c0e:	b2db      	uxtb	r3, r3
     c10:	461a      	mov	r2, r3
     c12:	4613      	mov	r3, r2
     c14:	ea4f 0383 	mov.w	r3, r3, lsl #2
     c18:	441a      	add	r2, r3
     c1a:	f04f 031f 	mov.w	r3, #31	; 0x1f
     c1e:	fa03 f302 	lsl.w	r3, r3, r2
     c22:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
     c24:	693b      	ldr	r3, [r7, #16]
     c26:	ea6f 0203 	mvn.w	r2, r3
     c2a:	68fb      	ldr	r3, [r7, #12]
     c2c:	ea03 0302 	and.w	r3, r3, r2
     c30:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
     c32:	78f9      	ldrb	r1, [r7, #3]
     c34:	697b      	ldr	r3, [r7, #20]
     c36:	b2db      	uxtb	r3, r3
     c38:	ea6f 0303 	mvn.w	r3, r3
     c3c:	b2da      	uxtb	r2, r3
     c3e:	78bb      	ldrb	r3, [r7, #2]
     c40:	4413      	add	r3, r2
     c42:	b2db      	uxtb	r3, r3
     c44:	f103 0303 	add.w	r3, r3, #3	; 0x3
     c48:	b2db      	uxtb	r3, r3
     c4a:	461a      	mov	r2, r3
     c4c:	4613      	mov	r3, r2
     c4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
     c52:	4413      	add	r3, r2
     c54:	fa01 f303 	lsl.w	r3, r1, r3
     c58:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
     c5a:	68fa      	ldr	r2, [r7, #12]
     c5c:	693b      	ldr	r3, [r7, #16]
     c5e:	ea42 0303 	orr.w	r3, r2, r3
     c62:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
     c64:	687a      	ldr	r2, [r7, #4]
     c66:	68fb      	ldr	r3, [r7, #12]
     c68:	6393      	str	r3, [r2, #56]
}
     c6a:	f107 071c 	add.w	r7, r7, #28	; 0x1c
     c6e:	46bd      	mov	sp, r7
     c70:	bc80      	pop	{r7}
     c72:	4770      	bx	lr

00000c74 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *   This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
     c74:	b480      	push	{r7}
     c76:	b085      	sub	sp, #20
     c78:	af00      	add	r7, sp, #0
     c7a:	6078      	str	r0, [r7, #4]
     c7c:	460b      	mov	r3, r1
     c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
     c80:	f04f 0300 	mov.w	r3, #0	; 0x0
     c84:	60bb      	str	r3, [r7, #8]
  uint32_t tmpreg2 = 0;
     c86:	f04f 0300 	mov.w	r3, #0	; 0x0
     c8a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
     c8c:	687b      	ldr	r3, [r7, #4]
     c8e:	6b9b      	ldr	r3, [r3, #56]
     c90:	60bb      	str	r3, [r7, #8]
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
     c92:	68bb      	ldr	r3, [r7, #8]
     c94:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
     c98:	60bb      	str	r3, [r7, #8]
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
     c9a:	78fb      	ldrb	r3, [r7, #3]
     c9c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     ca0:	60fb      	str	r3, [r7, #12]
  tmpreg1 |= tmpreg2 << 20;
     ca2:	68fb      	ldr	r3, [r7, #12]
     ca4:	ea4f 5203 	mov.w	r2, r3, lsl #20
     ca8:	68bb      	ldr	r3, [r7, #8]
     caa:	ea43 0302 	orr.w	r3, r3, r2
     cae:	60bb      	str	r3, [r7, #8]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
     cb0:	687a      	ldr	r2, [r7, #4]
     cb2:	68bb      	ldr	r3, [r7, #8]
     cb4:	6393      	str	r3, [r2, #56]
}
     cb6:	f107 0714 	add.w	r7, r7, #20	; 0x14
     cba:	46bd      	mov	sp, r7
     cbc:	bc80      	pop	{r7}
     cbe:	4770      	bx	lr

00000cc0 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
     cc0:	b480      	push	{r7}
     cc2:	b085      	sub	sp, #20
     cc4:	af00      	add	r7, sp, #0
     cc6:	6078      	str	r0, [r7, #4]
     cc8:	460b      	mov	r3, r1
     cca:	70fb      	strb	r3, [r7, #3]
     ccc:	4613      	mov	r3, r2
     cce:	803b      	strh	r3, [r7, #0]
  __IO uint32_t tmp = 0;
     cd0:	f04f 0300 	mov.w	r3, #0	; 0x0
     cd4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
     cda:	78fa      	ldrb	r2, [r7, #3]
     cdc:	68fb      	ldr	r3, [r7, #12]
     cde:	4413      	add	r3, r2
     ce0:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
     ce2:	68fb      	ldr	r3, [r7, #12]
     ce4:	461a      	mov	r2, r3
     ce6:	883b      	ldrh	r3, [r7, #0]
     ce8:	6013      	str	r3, [r2, #0]
}
     cea:	f107 0714 	add.w	r7, r7, #20	; 0x14
     cee:	46bd      	mov	sp, r7
     cf0:	bc80      	pop	{r7}
     cf2:	4770      	bx	lr

00000cf4 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
     cf4:	b480      	push	{r7}
     cf6:	b085      	sub	sp, #20
     cf8:	af00      	add	r7, sp, #0
     cfa:	6078      	str	r0, [r7, #4]
     cfc:	460b      	mov	r3, r1
     cfe:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
     d00:	f04f 0300 	mov.w	r3, #0	; 0x0
     d04:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
     d06:	687b      	ldr	r3, [r7, #4]
     d08:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_Offset;
     d0a:	78fa      	ldrb	r2, [r7, #3]
     d0c:	68fb      	ldr	r3, [r7, #12]
     d0e:	4413      	add	r3, r2
     d10:	f103 0328 	add.w	r3, r3, #40	; 0x28
     d14:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
     d16:	68fb      	ldr	r3, [r7, #12]
     d18:	681b      	ldr	r3, [r3, #0]
     d1a:	b29b      	uxth	r3, r3
}
     d1c:	4618      	mov	r0, r3
     d1e:	f107 0714 	add.w	r7, r7, #20	; 0x14
     d22:	46bd      	mov	sp, r7
     d24:	bc80      	pop	{r7}
     d26:	4770      	bx	lr

00000d28 <ADC_AnalogWatchdogCmd>:
  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
     d28:	b480      	push	{r7}
     d2a:	b085      	sub	sp, #20
     d2c:	af00      	add	r7, sp, #0
     d2e:	6078      	str	r0, [r7, #4]
     d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     d32:	f04f 0300 	mov.w	r3, #0	; 0x0
     d36:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
     d38:	687b      	ldr	r3, [r7, #4]
     d3a:	685b      	ldr	r3, [r3, #4]
     d3c:	60fb      	str	r3, [r7, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
     d3e:	68fb      	ldr	r3, [r7, #12]
     d40:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
     d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
     d48:	60fb      	str	r3, [r7, #12]
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
     d4a:	68fa      	ldr	r2, [r7, #12]
     d4c:	683b      	ldr	r3, [r7, #0]
     d4e:	ea42 0303 	orr.w	r3, r2, r3
     d52:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
     d54:	687a      	ldr	r2, [r7, #4]
     d56:	68fb      	ldr	r3, [r7, #12]
     d58:	6053      	str	r3, [r2, #4]
}
     d5a:	f107 0714 	add.w	r7, r7, #20	; 0x14
     d5e:	46bd      	mov	sp, r7
     d60:	bc80      	pop	{r7}
     d62:	4770      	bx	lr

00000d64 <ADC_AnalogWatchdogThresholdsConfig>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
     d64:	b480      	push	{r7}
     d66:	b083      	sub	sp, #12
     d68:	af00      	add	r7, sp, #0
     d6a:	6078      	str	r0, [r7, #4]
     d6c:	460b      	mov	r3, r1
     d6e:	807b      	strh	r3, [r7, #2]
     d70:	4613      	mov	r3, r2
     d72:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
     d74:	887a      	ldrh	r2, [r7, #2]
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	625a      	str	r2, [r3, #36]
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
     d7a:	883a      	ldrh	r2, [r7, #0]
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	629a      	str	r2, [r3, #40]
}
     d80:	f107 070c 	add.w	r7, r7, #12	; 0xc
     d84:	46bd      	mov	sp, r7
     d86:	bc80      	pop	{r7}
     d88:	4770      	bx	lr
     d8a:	46c0      	nop			(mov r8, r8)

00000d8c <ADC_AnalogWatchdogSingleChannelConfig>:
  *     @arg ADC_Channel_16: ADC Channel16 selected
  *     @arg ADC_Channel_17: ADC Channel17 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
     d8c:	b480      	push	{r7}
     d8e:	b085      	sub	sp, #20
     d90:	af00      	add	r7, sp, #0
     d92:	6078      	str	r0, [r7, #4]
     d94:	460b      	mov	r3, r1
     d96:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
     d98:	f04f 0300 	mov.w	r3, #0	; 0x0
     d9c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
     d9e:	687b      	ldr	r3, [r7, #4]
     da0:	685b      	ldr	r3, [r3, #4]
     da2:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
     da4:	68fb      	ldr	r3, [r7, #12]
     da6:	f023 031f 	bic.w	r3, r3, #31	; 0x1f
     daa:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
     dac:	78fa      	ldrb	r2, [r7, #3]
     dae:	68fb      	ldr	r3, [r7, #12]
     db0:	ea43 0302 	orr.w	r3, r3, r2
     db4:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
     db6:	687a      	ldr	r2, [r7, #4]
     db8:	68fb      	ldr	r3, [r7, #12]
     dba:	6053      	str	r3, [r2, #4]
}
     dbc:	f107 0714 	add.w	r7, r7, #20	; 0x14
     dc0:	46bd      	mov	sp, r7
     dc2:	bc80      	pop	{r7}
     dc4:	4770      	bx	lr
     dc6:	46c0      	nop			(mov r8, r8)

00000dc8 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
     dc8:	b480      	push	{r7}
     dca:	b083      	sub	sp, #12
     dcc:	af00      	add	r7, sp, #0
     dce:	4603      	mov	r3, r0
     dd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dd2:	79fb      	ldrb	r3, [r7, #7]
     dd4:	2b00      	cmp	r3, #0
     dd6:	d006      	beq.n	de6 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
     dd8:	4a08      	ldr	r2, [pc, #32]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     dda:	4b08      	ldr	r3, [pc, #32]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     ddc:	689b      	ldr	r3, [r3, #8]
     dde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     de2:	6093      	str	r3, [r2, #8]
     de4:	e005      	b.n	df2 <ADC_TempSensorVrefintCmd+0x2a>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
     de6:	4a05      	ldr	r2, [pc, #20]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     de8:	4b04      	ldr	r3, [pc, #16]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     dea:	689b      	ldr	r3, [r3, #8]
     dec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
     df0:	6093      	str	r3, [r2, #8]
  }
}
     df2:	f107 070c 	add.w	r7, r7, #12	; 0xc
     df6:	46bd      	mov	sp, r7
     df8:	bc80      	pop	{r7}
     dfa:	4770      	bx	lr
     dfc:	40012400 	.word	0x40012400

00000e00 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
     e00:	b480      	push	{r7}
     e02:	b085      	sub	sp, #20
     e04:	af00      	add	r7, sp, #0
     e06:	6078      	str	r0, [r7, #4]
     e08:	460b      	mov	r3, r1
     e0a:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
     e0c:	f04f 0300 	mov.w	r3, #0	; 0x0
     e10:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	681a      	ldr	r2, [r3, #0]
     e16:	78fb      	ldrb	r3, [r7, #3]
     e18:	ea02 0303 	and.w	r3, r2, r3
     e1c:	2b00      	cmp	r3, #0
     e1e:	d003      	beq.n	e28 <ADC_GetFlagStatus+0x28>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
     e20:	f04f 0301 	mov.w	r3, #1	; 0x1
     e24:	73fb      	strb	r3, [r7, #15]
     e26:	e002      	b.n	e2e <ADC_GetFlagStatus+0x2e>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
     e28:	f04f 0300 	mov.w	r3, #0	; 0x0
     e2c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
     e2e:	7bfb      	ldrb	r3, [r7, #15]
}
     e30:	4618      	mov	r0, r3
     e32:	f107 0714 	add.w	r7, r7, #20	; 0x14
     e36:	46bd      	mov	sp, r7
     e38:	bc80      	pop	{r7}
     e3a:	4770      	bx	lr

00000e3c <ADC_ClearFlag>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
     e3c:	b480      	push	{r7}
     e3e:	b083      	sub	sp, #12
     e40:	af00      	add	r7, sp, #0
     e42:	6078      	str	r0, [r7, #4]
     e44:	460b      	mov	r3, r1
     e46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
     e48:	78fb      	ldrb	r3, [r7, #3]
     e4a:	ea6f 0203 	mvn.w	r2, r3
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	601a      	str	r2, [r3, #0]
}
     e52:	f107 070c 	add.w	r7, r7, #12	; 0xc
     e56:	46bd      	mov	sp, r7
     e58:	bc80      	pop	{r7}
     e5a:	4770      	bx	lr

00000e5c <ADC_GetITStatus>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
     e5c:	b480      	push	{r7}
     e5e:	b087      	sub	sp, #28
     e60:	af00      	add	r7, sp, #0
     e62:	6078      	str	r0, [r7, #4]
     e64:	460b      	mov	r3, r1
     e66:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
     e68:	f04f 0300 	mov.w	r3, #0	; 0x0
     e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t itmask = 0, enablestatus = 0;
     e6e:	f04f 0300 	mov.w	r3, #0	; 0x0
     e72:	613b      	str	r3, [r7, #16]
     e74:	f04f 0300 	mov.w	r3, #0	; 0x0
     e78:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
     e7a:	887b      	ldrh	r3, [r7, #2]
     e7c:	ea4f 2313 	mov.w	r3, r3, lsr #8
     e80:	b29b      	uxth	r3, r3
     e82:	613b      	str	r3, [r7, #16]
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
     e84:	687b      	ldr	r3, [r7, #4]
     e86:	685a      	ldr	r2, [r3, #4]
     e88:	887b      	ldrh	r3, [r7, #2]
     e8a:	b2db      	uxtb	r3, r3
     e8c:	ea02 0303 	and.w	r3, r2, r3
     e90:	617b      	str	r3, [r7, #20]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
     e92:	687b      	ldr	r3, [r7, #4]
     e94:	681a      	ldr	r2, [r3, #0]
     e96:	693b      	ldr	r3, [r7, #16]
     e98:	ea02 0303 	and.w	r3, r2, r3
     e9c:	2b00      	cmp	r3, #0
     e9e:	d006      	beq.n	eae <ADC_GetITStatus+0x52>
     ea0:	697b      	ldr	r3, [r7, #20]
     ea2:	2b00      	cmp	r3, #0
     ea4:	d003      	beq.n	eae <ADC_GetITStatus+0x52>
  {
    /* ADC_IT is set */
    bitstatus = SET;
     ea6:	f04f 0301 	mov.w	r3, #1	; 0x1
     eaa:	73fb      	strb	r3, [r7, #15]
     eac:	e002      	b.n	eb4 <ADC_GetITStatus+0x58>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
     eae:	f04f 0300 	mov.w	r3, #0	; 0x0
     eb2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
     eb4:	7bfb      	ldrb	r3, [r7, #15]
}
     eb6:	4618      	mov	r0, r3
     eb8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
     ebc:	46bd      	mov	sp, r7
     ebe:	bc80      	pop	{r7}
     ec0:	4770      	bx	lr
     ec2:	46c0      	nop			(mov r8, r8)

00000ec4 <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
     ec4:	b480      	push	{r7}
     ec6:	b085      	sub	sp, #20
     ec8:	af00      	add	r7, sp, #0
     eca:	6078      	str	r0, [r7, #4]
     ecc:	460b      	mov	r3, r1
     ece:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
     ed0:	f04f 0300 	mov.w	r3, #0	; 0x0
     ed4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
     ed6:	887b      	ldrh	r3, [r7, #2]
     ed8:	ea4f 2313 	mov.w	r3, r3, lsr #8
     edc:	b29b      	uxth	r3, r3
     ede:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
     ee0:	7bfb      	ldrb	r3, [r7, #15]
     ee2:	ea6f 0203 	mvn.w	r2, r3
     ee6:	687b      	ldr	r3, [r7, #4]
     ee8:	601a      	str	r2, [r3, #0]
}
     eea:	f107 0714 	add.w	r7, r7, #20	; 0x14
     eee:	46bd      	mov	sp, r7
     ef0:	bc80      	pop	{r7}
     ef2:	4770      	bx	lr

00000ef4 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
     ef4:	b480      	push	{r7}
     ef6:	b083      	sub	sp, #12
     ef8:	af00      	add	r7, sp, #0
     efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
     efc:	687b      	ldr	r3, [r7, #4]
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	f023 0201 	bic.w	r2, r3, #1	; 0x1
     f04:	687b      	ldr	r3, [r7, #4]
     f06:	601a      	str	r2, [r3, #0]
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
     f08:	687a      	ldr	r2, [r7, #4]
     f0a:	f04f 0300 	mov.w	r3, #0	; 0x0
     f0e:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
     f10:	687a      	ldr	r2, [r7, #4]
     f12:	f04f 0300 	mov.w	r3, #0	; 0x0
     f16:	6053      	str	r3, [r2, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
     f18:	687a      	ldr	r2, [r7, #4]
     f1a:	f04f 0300 	mov.w	r3, #0	; 0x0
     f1e:	6093      	str	r3, [r2, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
     f20:	687a      	ldr	r2, [r7, #4]
     f22:	f04f 0300 	mov.w	r3, #0	; 0x0
     f26:	60d3      	str	r3, [r2, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
     f28:	687a      	ldr	r2, [r7, #4]
     f2a:	4b43      	ldr	r3, [pc, #268]	(1038 <DMA_DeInit+0x144>)
     f2c:	429a      	cmp	r2, r3
     f2e:	d106      	bne.n	f3e <DMA_DeInit+0x4a>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
     f30:	4a42      	ldr	r2, [pc, #264]	(103c <DMA_DeInit+0x148>)
     f32:	4b42      	ldr	r3, [pc, #264]	(103c <DMA_DeInit+0x148>)
     f34:	685b      	ldr	r3, [r3, #4]
     f36:	f043 030f 	orr.w	r3, r3, #15	; 0xf
     f3a:	6053      	str	r3, [r2, #4]
     f3c:	e077      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
     f3e:	687a      	ldr	r2, [r7, #4]
     f40:	4b3f      	ldr	r3, [pc, #252]	(1040 <DMA_DeInit+0x14c>)
     f42:	429a      	cmp	r2, r3
     f44:	d106      	bne.n	f54 <DMA_DeInit+0x60>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
     f46:	4a3d      	ldr	r2, [pc, #244]	(103c <DMA_DeInit+0x148>)
     f48:	4b3c      	ldr	r3, [pc, #240]	(103c <DMA_DeInit+0x148>)
     f4a:	685b      	ldr	r3, [r3, #4]
     f4c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
     f50:	6053      	str	r3, [r2, #4]
     f52:	e06c      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
     f54:	687a      	ldr	r2, [r7, #4]
     f56:	4b3b      	ldr	r3, [pc, #236]	(1044 <DMA_DeInit+0x150>)
     f58:	429a      	cmp	r2, r3
     f5a:	d106      	bne.n	f6a <DMA_DeInit+0x76>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
     f5c:	4a37      	ldr	r2, [pc, #220]	(103c <DMA_DeInit+0x148>)
     f5e:	4b37      	ldr	r3, [pc, #220]	(103c <DMA_DeInit+0x148>)
     f60:	685b      	ldr	r3, [r3, #4]
     f62:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
     f66:	6053      	str	r3, [r2, #4]
     f68:	e061      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
     f6a:	687a      	ldr	r2, [r7, #4]
     f6c:	4b36      	ldr	r3, [pc, #216]	(1048 <DMA_DeInit+0x154>)
     f6e:	429a      	cmp	r2, r3
     f70:	d106      	bne.n	f80 <DMA_DeInit+0x8c>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
     f72:	4a32      	ldr	r2, [pc, #200]	(103c <DMA_DeInit+0x148>)
     f74:	4b31      	ldr	r3, [pc, #196]	(103c <DMA_DeInit+0x148>)
     f76:	685b      	ldr	r3, [r3, #4]
     f78:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
     f7c:	6053      	str	r3, [r2, #4]
     f7e:	e056      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
     f80:	687a      	ldr	r2, [r7, #4]
     f82:	4b32      	ldr	r3, [pc, #200]	(104c <DMA_DeInit+0x158>)
     f84:	429a      	cmp	r2, r3
     f86:	d106      	bne.n	f96 <DMA_DeInit+0xa2>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
     f88:	4a2c      	ldr	r2, [pc, #176]	(103c <DMA_DeInit+0x148>)
     f8a:	4b2c      	ldr	r3, [pc, #176]	(103c <DMA_DeInit+0x148>)
     f8c:	685b      	ldr	r3, [r3, #4]
     f8e:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
     f92:	6053      	str	r3, [r2, #4]
     f94:	e04b      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
     f96:	687a      	ldr	r2, [r7, #4]
     f98:	4b2d      	ldr	r3, [pc, #180]	(1050 <DMA_DeInit+0x15c>)
     f9a:	429a      	cmp	r2, r3
     f9c:	d106      	bne.n	fac <DMA_DeInit+0xb8>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
     f9e:	4a27      	ldr	r2, [pc, #156]	(103c <DMA_DeInit+0x148>)
     fa0:	4b26      	ldr	r3, [pc, #152]	(103c <DMA_DeInit+0x148>)
     fa2:	685b      	ldr	r3, [r3, #4]
     fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     fa8:	6053      	str	r3, [r2, #4]
     faa:	e040      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
     fac:	687a      	ldr	r2, [r7, #4]
     fae:	4b29      	ldr	r3, [pc, #164]	(1054 <DMA_DeInit+0x160>)
     fb0:	429a      	cmp	r2, r3
     fb2:	d106      	bne.n	fc2 <DMA_DeInit+0xce>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
     fb4:	4a21      	ldr	r2, [pc, #132]	(103c <DMA_DeInit+0x148>)
     fb6:	4b21      	ldr	r3, [pc, #132]	(103c <DMA_DeInit+0x148>)
     fb8:	685b      	ldr	r3, [r3, #4]
     fba:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
     fbe:	6053      	str	r3, [r2, #4]
     fc0:	e035      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
     fc2:	687a      	ldr	r2, [r7, #4]
     fc4:	4b24      	ldr	r3, [pc, #144]	(1058 <DMA_DeInit+0x164>)
     fc6:	429a      	cmp	r2, r3
     fc8:	d106      	bne.n	fd8 <DMA_DeInit+0xe4>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
     fca:	4a24      	ldr	r2, [pc, #144]	(105c <DMA_DeInit+0x168>)
     fcc:	4b23      	ldr	r3, [pc, #140]	(105c <DMA_DeInit+0x168>)
     fce:	685b      	ldr	r3, [r3, #4]
     fd0:	f043 030f 	orr.w	r3, r3, #15	; 0xf
     fd4:	6053      	str	r3, [r2, #4]
     fd6:	e02a      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
     fd8:	687a      	ldr	r2, [r7, #4]
     fda:	4b21      	ldr	r3, [pc, #132]	(1060 <DMA_DeInit+0x16c>)
     fdc:	429a      	cmp	r2, r3
     fde:	d106      	bne.n	fee <DMA_DeInit+0xfa>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
     fe0:	4a1e      	ldr	r2, [pc, #120]	(105c <DMA_DeInit+0x168>)
     fe2:	4b1e      	ldr	r3, [pc, #120]	(105c <DMA_DeInit+0x168>)
     fe4:	685b      	ldr	r3, [r3, #4]
     fe6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
     fea:	6053      	str	r3, [r2, #4]
     fec:	e01f      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
     fee:	687a      	ldr	r2, [r7, #4]
     ff0:	4b1c      	ldr	r3, [pc, #112]	(1064 <DMA_DeInit+0x170>)
     ff2:	429a      	cmp	r2, r3
     ff4:	d106      	bne.n	1004 <DMA_DeInit+0x110>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
     ff6:	4a19      	ldr	r2, [pc, #100]	(105c <DMA_DeInit+0x168>)
     ff8:	4b18      	ldr	r3, [pc, #96]	(105c <DMA_DeInit+0x168>)
     ffa:	685b      	ldr	r3, [r3, #4]
     ffc:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    1000:	6053      	str	r3, [r2, #4]
    1002:	e014      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
    1004:	687a      	ldr	r2, [r7, #4]
    1006:	4b18      	ldr	r3, [pc, #96]	(1068 <DMA_DeInit+0x174>)
    1008:	429a      	cmp	r2, r3
    100a:	d106      	bne.n	101a <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
    100c:	4a13      	ldr	r2, [pc, #76]	(105c <DMA_DeInit+0x168>)
    100e:	4b13      	ldr	r3, [pc, #76]	(105c <DMA_DeInit+0x168>)
    1010:	685b      	ldr	r3, [r3, #4]
    1012:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
    1016:	6053      	str	r3, [r2, #4]
    1018:	e009      	b.n	102e <DMA_DeInit+0x13a>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
    101a:	687a      	ldr	r2, [r7, #4]
    101c:	4b13      	ldr	r3, [pc, #76]	(106c <DMA_DeInit+0x178>)
    101e:	429a      	cmp	r2, r3
    1020:	d105      	bne.n	102e <DMA_DeInit+0x13a>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    1022:	4a0e      	ldr	r2, [pc, #56]	(105c <DMA_DeInit+0x168>)
    1024:	4b0d      	ldr	r3, [pc, #52]	(105c <DMA_DeInit+0x168>)
    1026:	685b      	ldr	r3, [r3, #4]
    1028:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    102c:	6053      	str	r3, [r2, #4]
    }
  }
}
    102e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1032:	46bd      	mov	sp, r7
    1034:	bc80      	pop	{r7}
    1036:	4770      	bx	lr
    1038:	40020008 	.word	0x40020008
    103c:	40020000 	.word	0x40020000
    1040:	4002001c 	.word	0x4002001c
    1044:	40020030 	.word	0x40020030
    1048:	40020044 	.word	0x40020044
    104c:	40020058 	.word	0x40020058
    1050:	4002006c 	.word	0x4002006c
    1054:	40020080 	.word	0x40020080
    1058:	40020408 	.word	0x40020408
    105c:	40020400 	.word	0x40020400
    1060:	4002041c 	.word	0x4002041c
    1064:	40020430 	.word	0x40020430
    1068:	40020444 	.word	0x40020444
    106c:	40020458 	.word	0x40020458

00001070 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *   contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
    1070:	b480      	push	{r7}
    1072:	b085      	sub	sp, #20
    1074:	af00      	add	r7, sp, #0
    1076:	6078      	str	r0, [r7, #4]
    1078:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    107a:	f04f 0300 	mov.w	r3, #0	; 0x0
    107e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
    1080:	687b      	ldr	r3, [r7, #4]
    1082:	681b      	ldr	r3, [r3, #0]
    1084:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
    1086:	68fb      	ldr	r3, [r7, #12]
    1088:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
    108c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1090:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
    1092:	683b      	ldr	r3, [r7, #0]
    1094:	689a      	ldr	r2, [r3, #8]
    1096:	683b      	ldr	r3, [r7, #0]
    1098:	6a1b      	ldr	r3, [r3, #32]
    109a:	ea42 0203 	orr.w	r2, r2, r3
    109e:	683b      	ldr	r3, [r7, #0]
    10a0:	691b      	ldr	r3, [r3, #16]
    10a2:	ea42 0203 	orr.w	r2, r2, r3
    10a6:	683b      	ldr	r3, [r7, #0]
    10a8:	695b      	ldr	r3, [r3, #20]
    10aa:	ea42 0203 	orr.w	r2, r2, r3
    10ae:	683b      	ldr	r3, [r7, #0]
    10b0:	699b      	ldr	r3, [r3, #24]
    10b2:	ea42 0203 	orr.w	r2, r2, r3
    10b6:	683b      	ldr	r3, [r7, #0]
    10b8:	69db      	ldr	r3, [r3, #28]
    10ba:	ea42 0203 	orr.w	r2, r2, r3
    10be:	683b      	ldr	r3, [r7, #0]
    10c0:	6a5b      	ldr	r3, [r3, #36]
    10c2:	ea42 0203 	orr.w	r2, r2, r3
    10c6:	683b      	ldr	r3, [r7, #0]
    10c8:	6a9b      	ldr	r3, [r3, #40]
    10ca:	ea42 0203 	orr.w	r2, r2, r3
    10ce:	68fb      	ldr	r3, [r7, #12]
    10d0:	ea43 0302 	orr.w	r3, r3, r2
    10d4:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
    10d6:	687a      	ldr	r2, [r7, #4]
    10d8:	68fb      	ldr	r3, [r7, #12]
    10da:	6013      	str	r3, [r2, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
    10dc:	683b      	ldr	r3, [r7, #0]
    10de:	68da      	ldr	r2, [r3, #12]
    10e0:	687b      	ldr	r3, [r7, #4]
    10e2:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
    10e4:	683b      	ldr	r3, [r7, #0]
    10e6:	681a      	ldr	r2, [r3, #0]
    10e8:	687b      	ldr	r3, [r7, #4]
    10ea:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
    10ec:	683b      	ldr	r3, [r7, #0]
    10ee:	685a      	ldr	r2, [r3, #4]
    10f0:	687b      	ldr	r3, [r7, #4]
    10f2:	60da      	str	r2, [r3, #12]
}
    10f4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    10f8:	46bd      	mov	sp, r7
    10fa:	bc80      	pop	{r7}
    10fc:	4770      	bx	lr
    10fe:	46c0      	nop			(mov r8, r8)

00001100 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
    1100:	b480      	push	{r7}
    1102:	b083      	sub	sp, #12
    1104:	af00      	add	r7, sp, #0
    1106:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f04f 0300 	mov.w	r3, #0	; 0x0
    110e:	6013      	str	r3, [r2, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
    1110:	687a      	ldr	r2, [r7, #4]
    1112:	f04f 0300 	mov.w	r3, #0	; 0x0
    1116:	6053      	str	r3, [r2, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
    1118:	687a      	ldr	r2, [r7, #4]
    111a:	f04f 0300 	mov.w	r3, #0	; 0x0
    111e:	6093      	str	r3, [r2, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
    1120:	687a      	ldr	r2, [r7, #4]
    1122:	f04f 0300 	mov.w	r3, #0	; 0x0
    1126:	60d3      	str	r3, [r2, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f04f 0300 	mov.w	r3, #0	; 0x0
    112e:	6113      	str	r3, [r2, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
    1130:	687a      	ldr	r2, [r7, #4]
    1132:	f04f 0300 	mov.w	r3, #0	; 0x0
    1136:	6153      	str	r3, [r2, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    1138:	687a      	ldr	r2, [r7, #4]
    113a:	f04f 0300 	mov.w	r3, #0	; 0x0
    113e:	6193      	str	r3, [r2, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    1140:	687a      	ldr	r2, [r7, #4]
    1142:	f04f 0300 	mov.w	r3, #0	; 0x0
    1146:	61d3      	str	r3, [r2, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
    1148:	687a      	ldr	r2, [r7, #4]
    114a:	f04f 0300 	mov.w	r3, #0	; 0x0
    114e:	6213      	str	r3, [r2, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
    1150:	687a      	ldr	r2, [r7, #4]
    1152:	f04f 0300 	mov.w	r3, #0	; 0x0
    1156:	6253      	str	r3, [r2, #36]
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
    1158:	687a      	ldr	r2, [r7, #4]
    115a:	f04f 0300 	mov.w	r3, #0	; 0x0
    115e:	6293      	str	r3, [r2, #40]
}
    1160:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1164:	46bd      	mov	sp, r7
    1166:	bc80      	pop	{r7}
    1168:	4770      	bx	lr
    116a:	46c0      	nop			(mov r8, r8)

0000116c <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
    116c:	b480      	push	{r7}
    116e:	b083      	sub	sp, #12
    1170:	af00      	add	r7, sp, #0
    1172:	6078      	str	r0, [r7, #4]
    1174:	460b      	mov	r3, r1
    1176:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1178:	78fb      	ldrb	r3, [r7, #3]
    117a:	2b00      	cmp	r3, #0
    117c:	d006      	beq.n	118c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= CCR_ENABLE_Set;
    117e:	687b      	ldr	r3, [r7, #4]
    1180:	681b      	ldr	r3, [r3, #0]
    1182:	f043 0201 	orr.w	r2, r3, #1	; 0x1
    1186:	687b      	ldr	r3, [r7, #4]
    1188:	601a      	str	r2, [r3, #0]
    118a:	e005      	b.n	1198 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
    118c:	687b      	ldr	r3, [r7, #4]
    118e:	681b      	ldr	r3, [r3, #0]
    1190:	f023 0201 	bic.w	r2, r3, #1	; 0x1
    1194:	687b      	ldr	r3, [r7, #4]
    1196:	601a      	str	r2, [r3, #0]
  }
}
    1198:	f107 070c 	add.w	r7, r7, #12	; 0xc
    119c:	46bd      	mov	sp, r7
    119e:	bc80      	pop	{r7}
    11a0:	4770      	bx	lr
    11a2:	46c0      	nop			(mov r8, r8)

000011a4 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
    11a4:	b480      	push	{r7}
    11a6:	b085      	sub	sp, #20
    11a8:	af00      	add	r7, sp, #0
    11aa:	60f8      	str	r0, [r7, #12]
    11ac:	60b9      	str	r1, [r7, #8]
    11ae:	4613      	mov	r3, r2
    11b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    11b2:	79fb      	ldrb	r3, [r7, #7]
    11b4:	2b00      	cmp	r3, #0
    11b6:	d007      	beq.n	11c8 <DMA_ITConfig+0x24>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
    11b8:	68fb      	ldr	r3, [r7, #12]
    11ba:	681a      	ldr	r2, [r3, #0]
    11bc:	68bb      	ldr	r3, [r7, #8]
    11be:	ea42 0203 	orr.w	r2, r2, r3
    11c2:	68fb      	ldr	r3, [r7, #12]
    11c4:	601a      	str	r2, [r3, #0]
    11c6:	e008      	b.n	11da <DMA_ITConfig+0x36>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
    11c8:	68fb      	ldr	r3, [r7, #12]
    11ca:	681a      	ldr	r2, [r3, #0]
    11cc:	68bb      	ldr	r3, [r7, #8]
    11ce:	ea6f 0303 	mvn.w	r3, r3
    11d2:	ea02 0203 	and.w	r2, r2, r3
    11d6:	68fb      	ldr	r3, [r7, #12]
    11d8:	601a      	str	r2, [r3, #0]
  }
}
    11da:	f107 0714 	add.w	r7, r7, #20	; 0x14
    11de:	46bd      	mov	sp, r7
    11e0:	bc80      	pop	{r7}
    11e2:	4770      	bx	lr

000011e4 <DMA_GetCurrDataCounter>:
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *   transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
    11e4:	b480      	push	{r7}
    11e6:	b083      	sub	sp, #12
    11e8:	af00      	add	r7, sp, #0
    11ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
    11ec:	687b      	ldr	r3, [r7, #4]
    11ee:	685b      	ldr	r3, [r3, #4]
    11f0:	b29b      	uxth	r3, r3
}
    11f2:	4618      	mov	r0, r3
    11f4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    11f8:	46bd      	mov	sp, r7
    11fa:	bc80      	pop	{r7}
    11fc:	4770      	bx	lr
    11fe:	46c0      	nop			(mov r8, r8)

00001200 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG)
{
    1200:	b480      	push	{r7}
    1202:	b085      	sub	sp, #20
    1204:	af00      	add	r7, sp, #0
    1206:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    1208:	f04f 0300 	mov.w	r3, #0	; 0x0
    120c:	72fb      	strb	r3, [r7, #11]
  uint32_t tmpreg = 0;
    120e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1212:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Calculate the used DMA */
  if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    121a:	2b00      	cmp	r3, #0
    121c:	d003      	beq.n	1226 <DMA_GetFlagStatus+0x26>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
    121e:	4b0d      	ldr	r3, [pc, #52]	(1254 <DMA_GetFlagStatus+0x54>)
    1220:	681b      	ldr	r3, [r3, #0]
    1222:	60fb      	str	r3, [r7, #12]
    1224:	e002      	b.n	122c <DMA_GetFlagStatus+0x2c>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
    1226:	4b0c      	ldr	r3, [pc, #48]	(1258 <DMA_GetFlagStatus+0x58>)
    1228:	681b      	ldr	r3, [r3, #0]
    122a:	60fb      	str	r3, [r7, #12]
  }

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
    122c:	68fb      	ldr	r3, [r7, #12]
    122e:	687a      	ldr	r2, [r7, #4]
    1230:	ea03 0302 	and.w	r3, r3, r2
    1234:	2b00      	cmp	r3, #0
    1236:	d003      	beq.n	1240 <DMA_GetFlagStatus+0x40>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
    1238:	f04f 0301 	mov.w	r3, #1	; 0x1
    123c:	72fb      	strb	r3, [r7, #11]
    123e:	e002      	b.n	1246 <DMA_GetFlagStatus+0x46>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
    1240:	f04f 0300 	mov.w	r3, #0	; 0x0
    1244:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Return the DMA_FLAG status */
  return  bitstatus;
    1246:	7afb      	ldrb	r3, [r7, #11]
}
    1248:	4618      	mov	r0, r3
    124a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    124e:	46bd      	mov	sp, r7
    1250:	bc80      	pop	{r7}
    1252:	4770      	bx	lr
    1254:	40020400 	.word	0x40020400
    1258:	40020000 	.word	0x40020000

0000125c <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMA_FLAG)
{
    125c:	b480      	push	{r7}
    125e:	b083      	sub	sp, #12
    1260:	af00      	add	r7, sp, #0
    1262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
  /* Calculate the used DMA */

  if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
    1264:	687b      	ldr	r3, [r7, #4]
    1266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    126a:	2b00      	cmp	r3, #0
    126c:	d003      	beq.n	1276 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMA flags */
    DMA2->IFCR = DMA_FLAG;
    126e:	4a06      	ldr	r2, [pc, #24]	(1288 <DMA_ClearFlag+0x2c>)
    1270:	687b      	ldr	r3, [r7, #4]
    1272:	6053      	str	r3, [r2, #4]
    1274:	e002      	b.n	127c <DMA_ClearFlag+0x20>
  }
  else
  {
    /* Clear the selected DMA flags */
    DMA1->IFCR = DMA_FLAG;
    1276:	4a05      	ldr	r2, [pc, #20]	(128c <DMA_ClearFlag+0x30>)
    1278:	687b      	ldr	r3, [r7, #4]
    127a:	6053      	str	r3, [r2, #4]
  }
}
    127c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1280:	46bd      	mov	sp, r7
    1282:	bc80      	pop	{r7}
    1284:	4770      	bx	lr
    1286:	46c0      	nop			(mov r8, r8)
    1288:	40020400 	.word	0x40020400
    128c:	40020000 	.word	0x40020000

00001290 <DMA_GetITStatus>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMA_IT)
{
    1290:	b480      	push	{r7}
    1292:	b085      	sub	sp, #20
    1294:	af00      	add	r7, sp, #0
    1296:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    1298:	f04f 0300 	mov.w	r3, #0	; 0x0
    129c:	72fb      	strb	r3, [r7, #11]
  uint32_t tmpreg = 0;
    129e:	f04f 0300 	mov.w	r3, #0	; 0x0
    12a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMA_IT));

  /* Calculate the used DMA */
  if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
    12a4:	687b      	ldr	r3, [r7, #4]
    12a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    12aa:	2b00      	cmp	r3, #0
    12ac:	d003      	beq.n	12b6 <DMA_GetITStatus+0x26>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
    12ae:	4b0d      	ldr	r3, [pc, #52]	(12e4 <DMA_GetITStatus+0x54>)
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	60fb      	str	r3, [r7, #12]
    12b4:	e002      	b.n	12bc <DMA_GetITStatus+0x2c>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
    12b6:	4b0c      	ldr	r3, [pc, #48]	(12e8 <DMA_GetITStatus+0x58>)
    12b8:	681b      	ldr	r3, [r3, #0]
    12ba:	60fb      	str	r3, [r7, #12]
  }

  /* Check the status of the specified DMA interrupt */
  if ((tmpreg & DMA_IT) != (uint32_t)RESET)
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	687a      	ldr	r2, [r7, #4]
    12c0:	ea03 0302 	and.w	r3, r3, r2
    12c4:	2b00      	cmp	r3, #0
    12c6:	d003      	beq.n	12d0 <DMA_GetITStatus+0x40>
  {
    /* DMA_IT is set */
    bitstatus = SET;
    12c8:	f04f 0301 	mov.w	r3, #1	; 0x1
    12cc:	72fb      	strb	r3, [r7, #11]
    12ce:	e002      	b.n	12d6 <DMA_GetITStatus+0x46>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
    12d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    12d4:	72fb      	strb	r3, [r7, #11]
  }
  /* Return the DMA_IT status */
  return  bitstatus;
    12d6:	7afb      	ldrb	r3, [r7, #11]
}
    12d8:	4618      	mov	r0, r3
    12da:	f107 0714 	add.w	r7, r7, #20	; 0x14
    12de:	46bd      	mov	sp, r7
    12e0:	bc80      	pop	{r7}
    12e2:	4770      	bx	lr
    12e4:	40020400 	.word	0x40020400
    12e8:	40020000 	.word	0x40020000

000012ec <DMA_ClearITPendingBit>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMA_IT)
{
    12ec:	b480      	push	{r7}
    12ee:	b083      	sub	sp, #12
    12f0:	af00      	add	r7, sp, #0
    12f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Calculate the used DMA */
  if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
    12f4:	687b      	ldr	r3, [r7, #4]
    12f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    12fa:	2b00      	cmp	r3, #0
    12fc:	d003      	beq.n	1306 <DMA_ClearITPendingBit+0x1a>
  {
    /* Clear the selected DMA interrupt pending bits */
    DMA2->IFCR = DMA_IT;
    12fe:	4a06      	ldr	r2, [pc, #24]	(1318 <DMA_ClearITPendingBit+0x2c>)
    1300:	687b      	ldr	r3, [r7, #4]
    1302:	6053      	str	r3, [r2, #4]
    1304:	e002      	b.n	130c <DMA_ClearITPendingBit+0x20>
  }
  else
  {
    /* Clear the selected DMA interrupt pending bits */
    DMA1->IFCR = DMA_IT;
    1306:	4a05      	ldr	r2, [pc, #20]	(131c <DMA_ClearITPendingBit+0x30>)
    1308:	687b      	ldr	r3, [r7, #4]
    130a:	6053      	str	r3, [r2, #4]
  }
}
    130c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1310:	46bd      	mov	sp, r7
    1312:	bc80      	pop	{r7}
    1314:	4770      	bx	lr
    1316:	46c0      	nop			(mov r8, r8)
    1318:	40020400 	.word	0x40020400
    131c:	40020000 	.word	0x40020000

00001320 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1320:	b480      	push	{r7}
    1322:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1324:	4a0a      	ldr	r2, [pc, #40]	(1350 <EXTI_DeInit+0x30>)
    1326:	f04f 0300 	mov.w	r3, #0	; 0x0
    132a:	6013      	str	r3, [r2, #0]
  EXTI->EMR = 0x00000000;
    132c:	4a08      	ldr	r2, [pc, #32]	(1350 <EXTI_DeInit+0x30>)
    132e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1332:	6053      	str	r3, [r2, #4]
  EXTI->RTSR = 0x00000000; 
    1334:	4a06      	ldr	r2, [pc, #24]	(1350 <EXTI_DeInit+0x30>)
    1336:	f04f 0300 	mov.w	r3, #0	; 0x0
    133a:	6093      	str	r3, [r2, #8]
  EXTI->FTSR = 0x00000000; 
    133c:	4a04      	ldr	r2, [pc, #16]	(1350 <EXTI_DeInit+0x30>)
    133e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1342:	60d3      	str	r3, [r2, #12]
  EXTI->PR = 0x000FFFFF;
    1344:	4a02      	ldr	r2, [pc, #8]	(1350 <EXTI_DeInit+0x30>)
    1346:	4b03      	ldr	r3, [pc, #12]	(1354 <EXTI_DeInit+0x34>)
    1348:	6153      	str	r3, [r2, #20]
}
    134a:	46bd      	mov	sp, r7
    134c:	bc80      	pop	{r7}
    134e:	4770      	bx	lr
    1350:	40010400 	.word	0x40010400
    1354:	000fffff 	.word	0x000fffff

00001358 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *   that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1360:	f04f 0300 	mov.w	r3, #0	; 0x0
    1364:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1366:	4b3b      	ldr	r3, [pc, #236]	(1454 <EXTI_Init+0xfc>)
    1368:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    136a:	687b      	ldr	r3, [r7, #4]
    136c:	799b      	ldrb	r3, [r3, #6]
    136e:	2b00      	cmp	r3, #0
    1370:	d05b      	beq.n	142a <EXTI_Init+0xd2>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1372:	4938      	ldr	r1, [pc, #224]	(1454 <EXTI_Init+0xfc>)
    1374:	4b37      	ldr	r3, [pc, #220]	(1454 <EXTI_Init+0xfc>)
    1376:	681a      	ldr	r2, [r3, #0]
    1378:	687b      	ldr	r3, [r7, #4]
    137a:	681b      	ldr	r3, [r3, #0]
    137c:	ea6f 0303 	mvn.w	r3, r3
    1380:	ea02 0303 	and.w	r3, r2, r3
    1384:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    1386:	4933      	ldr	r1, [pc, #204]	(1454 <EXTI_Init+0xfc>)
    1388:	4b32      	ldr	r3, [pc, #200]	(1454 <EXTI_Init+0xfc>)
    138a:	685a      	ldr	r2, [r3, #4]
    138c:	687b      	ldr	r3, [r7, #4]
    138e:	681b      	ldr	r3, [r3, #0]
    1390:	ea6f 0303 	mvn.w	r3, r3
    1394:	ea02 0303 	and.w	r3, r2, r3
    1398:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
    139a:	687b      	ldr	r3, [r7, #4]
    139c:	791b      	ldrb	r3, [r3, #4]
    139e:	461a      	mov	r2, r3
    13a0:	68fb      	ldr	r3, [r7, #12]
    13a2:	4413      	add	r3, r2
    13a4:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    13a6:	68f9      	ldr	r1, [r7, #12]
    13a8:	68fb      	ldr	r3, [r7, #12]
    13aa:	681a      	ldr	r2, [r3, #0]
    13ac:	687b      	ldr	r3, [r7, #4]
    13ae:	681b      	ldr	r3, [r3, #0]
    13b0:	ea42 0303 	orr.w	r3, r2, r3
    13b4:	600b      	str	r3, [r1, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    13b6:	4927      	ldr	r1, [pc, #156]	(1454 <EXTI_Init+0xfc>)
    13b8:	4b26      	ldr	r3, [pc, #152]	(1454 <EXTI_Init+0xfc>)
    13ba:	689a      	ldr	r2, [r3, #8]
    13bc:	687b      	ldr	r3, [r7, #4]
    13be:	681b      	ldr	r3, [r3, #0]
    13c0:	ea6f 0303 	mvn.w	r3, r3
    13c4:	ea02 0303 	and.w	r3, r2, r3
    13c8:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    13ca:	4922      	ldr	r1, [pc, #136]	(1454 <EXTI_Init+0xfc>)
    13cc:	4b21      	ldr	r3, [pc, #132]	(1454 <EXTI_Init+0xfc>)
    13ce:	68da      	ldr	r2, [r3, #12]
    13d0:	687b      	ldr	r3, [r7, #4]
    13d2:	681b      	ldr	r3, [r3, #0]
    13d4:	ea6f 0303 	mvn.w	r3, r3
    13d8:	ea02 0303 	and.w	r3, r2, r3
    13dc:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    13de:	687b      	ldr	r3, [r7, #4]
    13e0:	795b      	ldrb	r3, [r3, #5]
    13e2:	2b10      	cmp	r3, #16
    13e4:	d110      	bne.n	1408 <EXTI_Init+0xb0>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    13e6:	491b      	ldr	r1, [pc, #108]	(1454 <EXTI_Init+0xfc>)
    13e8:	4b1a      	ldr	r3, [pc, #104]	(1454 <EXTI_Init+0xfc>)
    13ea:	689a      	ldr	r2, [r3, #8]
    13ec:	687b      	ldr	r3, [r7, #4]
    13ee:	681b      	ldr	r3, [r3, #0]
    13f0:	ea42 0303 	orr.w	r3, r2, r3
    13f4:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    13f6:	4917      	ldr	r1, [pc, #92]	(1454 <EXTI_Init+0xfc>)
    13f8:	4b16      	ldr	r3, [pc, #88]	(1454 <EXTI_Init+0xfc>)
    13fa:	68da      	ldr	r2, [r3, #12]
    13fc:	687b      	ldr	r3, [r7, #4]
    13fe:	681b      	ldr	r3, [r3, #0]
    1400:	ea42 0303 	orr.w	r3, r2, r3
    1404:	60cb      	str	r3, [r1, #12]
    1406:	e020      	b.n	144a <EXTI_Init+0xf2>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    1408:	4b12      	ldr	r3, [pc, #72]	(1454 <EXTI_Init+0xfc>)
    140a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    140c:	687b      	ldr	r3, [r7, #4]
    140e:	795b      	ldrb	r3, [r3, #5]
    1410:	461a      	mov	r2, r3
    1412:	68fb      	ldr	r3, [r7, #12]
    1414:	4413      	add	r3, r2
    1416:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    1418:	68f9      	ldr	r1, [r7, #12]
    141a:	68fb      	ldr	r3, [r7, #12]
    141c:	681a      	ldr	r2, [r3, #0]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	681b      	ldr	r3, [r3, #0]
    1422:	ea42 0303 	orr.w	r3, r2, r3
    1426:	600b      	str	r3, [r1, #0]
    1428:	e00f      	b.n	144a <EXTI_Init+0xf2>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    142a:	687b      	ldr	r3, [r7, #4]
    142c:	791b      	ldrb	r3, [r3, #4]
    142e:	461a      	mov	r2, r3
    1430:	68fb      	ldr	r3, [r7, #12]
    1432:	4413      	add	r3, r2
    1434:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    1436:	68f9      	ldr	r1, [r7, #12]
    1438:	68fb      	ldr	r3, [r7, #12]
    143a:	681a      	ldr	r2, [r3, #0]
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	ea6f 0303 	mvn.w	r3, r3
    1444:	ea02 0303 	and.w	r3, r2, r3
    1448:	600b      	str	r3, [r1, #0]
  }
}
    144a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    144e:	46bd      	mov	sp, r7
    1450:	bc80      	pop	{r7}
    1452:	4770      	bx	lr
    1454:	40010400 	.word	0x40010400

00001458 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1458:	b480      	push	{r7}
    145a:	b083      	sub	sp, #12
    145c:	af00      	add	r7, sp, #0
    145e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LineNone;
    1460:	687a      	ldr	r2, [r7, #4]
    1462:	f04f 0300 	mov.w	r3, #0	; 0x0
    1466:	6013      	str	r3, [r2, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    1468:	687a      	ldr	r2, [r7, #4]
    146a:	f04f 0300 	mov.w	r3, #0	; 0x0
    146e:	7113      	strb	r3, [r2, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    1470:	687a      	ldr	r2, [r7, #4]
    1472:	f04f 030c 	mov.w	r3, #12	; 0xc
    1476:	7153      	strb	r3, [r2, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    1478:	687a      	ldr	r2, [r7, #4]
    147a:	f04f 0300 	mov.w	r3, #0	; 0x0
    147e:	7193      	strb	r3, [r2, #6]
}
    1480:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1484:	46bd      	mov	sp, r7
    1486:	bc80      	pop	{r7}
    1488:	4770      	bx	lr
    148a:	46c0      	nop			(mov r8, r8)

0000148c <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    148c:	b480      	push	{r7}
    148e:	b083      	sub	sp, #12
    1490:	af00      	add	r7, sp, #0
    1492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
    1494:	4905      	ldr	r1, [pc, #20]	(14ac <EXTI_GenerateSWInterrupt+0x20>)
    1496:	4b05      	ldr	r3, [pc, #20]	(14ac <EXTI_GenerateSWInterrupt+0x20>)
    1498:	691a      	ldr	r2, [r3, #16]
    149a:	687b      	ldr	r3, [r7, #4]
    149c:	ea42 0303 	orr.w	r3, r2, r3
    14a0:	610b      	str	r3, [r1, #16]
}
    14a2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    14a6:	46bd      	mov	sp, r7
    14a8:	bc80      	pop	{r7}
    14aa:	4770      	bx	lr
    14ac:	40010400 	.word	0x40010400

000014b0 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    14b0:	b480      	push	{r7}
    14b2:	b085      	sub	sp, #20
    14b4:	af00      	add	r7, sp, #0
    14b6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    14b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    14bc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    14be:	4b0a      	ldr	r3, [pc, #40]	(14e8 <EXTI_GetFlagStatus+0x38>)
    14c0:	695a      	ldr	r2, [r3, #20]
    14c2:	687b      	ldr	r3, [r7, #4]
    14c4:	ea02 0303 	and.w	r3, r2, r3
    14c8:	2b00      	cmp	r3, #0
    14ca:	d003      	beq.n	14d4 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    14cc:	f04f 0301 	mov.w	r3, #1	; 0x1
    14d0:	73fb      	strb	r3, [r7, #15]
    14d2:	e002      	b.n	14da <EXTI_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    14d4:	f04f 0300 	mov.w	r3, #0	; 0x0
    14d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    14da:	7bfb      	ldrb	r3, [r7, #15]
}
    14dc:	4618      	mov	r0, r3
    14de:	f107 0714 	add.w	r7, r7, #20	; 0x14
    14e2:	46bd      	mov	sp, r7
    14e4:	bc80      	pop	{r7}
    14e6:	4770      	bx	lr
    14e8:	40010400 	.word	0x40010400

000014ec <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    14ec:	b480      	push	{r7}
    14ee:	b083      	sub	sp, #12
    14f0:	af00      	add	r7, sp, #0
    14f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    14f4:	4a03      	ldr	r2, [pc, #12]	(1504 <EXTI_ClearFlag+0x18>)
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	6153      	str	r3, [r2, #20]
}
    14fa:	f107 070c 	add.w	r7, r7, #12	; 0xc
    14fe:	46bd      	mov	sp, r7
    1500:	bc80      	pop	{r7}
    1502:	4770      	bx	lr
    1504:	40010400 	.word	0x40010400

00001508 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    1508:	b480      	push	{r7}
    150a:	b085      	sub	sp, #20
    150c:	af00      	add	r7, sp, #0
    150e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    1510:	f04f 0300 	mov.w	r3, #0	; 0x0
    1514:	72fb      	strb	r3, [r7, #11]
  uint32_t enablestatus = 0;
    1516:	f04f 0300 	mov.w	r3, #0	; 0x0
    151a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
    151c:	4b0e      	ldr	r3, [pc, #56]	(1558 <EXTI_GetITStatus+0x50>)
    151e:	681a      	ldr	r2, [r3, #0]
    1520:	687b      	ldr	r3, [r7, #4]
    1522:	ea02 0303 	and.w	r3, r2, r3
    1526:	60fb      	str	r3, [r7, #12]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    1528:	4b0b      	ldr	r3, [pc, #44]	(1558 <EXTI_GetITStatus+0x50>)
    152a:	695a      	ldr	r2, [r3, #20]
    152c:	687b      	ldr	r3, [r7, #4]
    152e:	ea02 0303 	and.w	r3, r2, r3
    1532:	2b00      	cmp	r3, #0
    1534:	d006      	beq.n	1544 <EXTI_GetITStatus+0x3c>
    1536:	68fb      	ldr	r3, [r7, #12]
    1538:	2b00      	cmp	r3, #0
    153a:	d003      	beq.n	1544 <EXTI_GetITStatus+0x3c>
  {
    bitstatus = SET;
    153c:	f04f 0301 	mov.w	r3, #1	; 0x1
    1540:	72fb      	strb	r3, [r7, #11]
    1542:	e002      	b.n	154a <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    1544:	f04f 0300 	mov.w	r3, #0	; 0x0
    1548:	72fb      	strb	r3, [r7, #11]
  }
  return bitstatus;
    154a:	7afb      	ldrb	r3, [r7, #11]
}
    154c:	4618      	mov	r0, r3
    154e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1552:	46bd      	mov	sp, r7
    1554:	bc80      	pop	{r7}
    1556:	4770      	bx	lr
    1558:	40010400 	.word	0x40010400

0000155c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    155c:	b480      	push	{r7}
    155e:	b083      	sub	sp, #12
    1560:	af00      	add	r7, sp, #0
    1562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    1564:	4a03      	ldr	r2, [pc, #12]	(1574 <EXTI_ClearITPendingBit+0x18>)
    1566:	687b      	ldr	r3, [r7, #4]
    1568:	6153      	str	r3, [r2, #20]
}
    156a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    156e:	46bd      	mov	sp, r7
    1570:	bc80      	pop	{r7}
    1572:	4770      	bx	lr
    1574:	40010400 	.word	0x40010400

00001578 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1578:	b580      	push	{r7, lr}
    157a:	b082      	sub	sp, #8
    157c:	af00      	add	r7, sp, #0
    157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1580:	687a      	ldr	r2, [r7, #4]
    1582:	4b3c      	ldr	r3, [pc, #240]	(1674 <GPIO_DeInit+0xfc>)
    1584:	429a      	cmp	r2, r3
    1586:	d10c      	bne.n	15a2 <GPIO_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1588:	f04f 0004 	mov.w	r0, #4	; 0x4
    158c:	f04f 0101 	mov.w	r1, #1	; 0x1
    1590:	f000 ffc0 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    1594:	f04f 0004 	mov.w	r0, #4	; 0x4
    1598:	f04f 0100 	mov.w	r1, #0	; 0x0
    159c:	f000 ffba 	bl	2514 <RCC_APB2PeriphResetCmd>
    15a0:	e064      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOB)
    15a2:	687a      	ldr	r2, [r7, #4]
    15a4:	4b34      	ldr	r3, [pc, #208]	(1678 <GPIO_DeInit+0x100>)
    15a6:	429a      	cmp	r2, r3
    15a8:	d10c      	bne.n	15c4 <GPIO_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    15aa:	f04f 0008 	mov.w	r0, #8	; 0x8
    15ae:	f04f 0101 	mov.w	r1, #1	; 0x1
    15b2:	f000 ffaf 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    15b6:	f04f 0008 	mov.w	r0, #8	; 0x8
    15ba:	f04f 0100 	mov.w	r1, #0	; 0x0
    15be:	f000 ffa9 	bl	2514 <RCC_APB2PeriphResetCmd>
    15c2:	e053      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOC)
    15c4:	687a      	ldr	r2, [r7, #4]
    15c6:	4b2d      	ldr	r3, [pc, #180]	(167c <GPIO_DeInit+0x104>)
    15c8:	429a      	cmp	r2, r3
    15ca:	d10c      	bne.n	15e6 <GPIO_DeInit+0x6e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    15cc:	f04f 0010 	mov.w	r0, #16	; 0x10
    15d0:	f04f 0101 	mov.w	r1, #1	; 0x1
    15d4:	f000 ff9e 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    15d8:	f04f 0010 	mov.w	r0, #16	; 0x10
    15dc:	f04f 0100 	mov.w	r1, #0	; 0x0
    15e0:	f000 ff98 	bl	2514 <RCC_APB2PeriphResetCmd>
    15e4:	e042      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOD)
    15e6:	687a      	ldr	r2, [r7, #4]
    15e8:	4b25      	ldr	r3, [pc, #148]	(1680 <GPIO_DeInit+0x108>)
    15ea:	429a      	cmp	r2, r3
    15ec:	d10c      	bne.n	1608 <GPIO_DeInit+0x90>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    15ee:	f04f 0020 	mov.w	r0, #32	; 0x20
    15f2:	f04f 0101 	mov.w	r1, #1	; 0x1
    15f6:	f000 ff8d 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    15fa:	f04f 0020 	mov.w	r0, #32	; 0x20
    15fe:	f04f 0100 	mov.w	r1, #0	; 0x0
    1602:	f000 ff87 	bl	2514 <RCC_APB2PeriphResetCmd>
    1606:	e031      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOE)
    1608:	687a      	ldr	r2, [r7, #4]
    160a:	4b1e      	ldr	r3, [pc, #120]	(1684 <GPIO_DeInit+0x10c>)
    160c:	429a      	cmp	r2, r3
    160e:	d10c      	bne.n	162a <GPIO_DeInit+0xb2>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    1610:	f04f 0040 	mov.w	r0, #64	; 0x40
    1614:	f04f 0101 	mov.w	r1, #1	; 0x1
    1618:	f000 ff7c 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    161c:	f04f 0040 	mov.w	r0, #64	; 0x40
    1620:	f04f 0100 	mov.w	r1, #0	; 0x0
    1624:	f000 ff76 	bl	2514 <RCC_APB2PeriphResetCmd>
    1628:	e020      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOF)
    162a:	687a      	ldr	r2, [r7, #4]
    162c:	4b16      	ldr	r3, [pc, #88]	(1688 <GPIO_DeInit+0x110>)
    162e:	429a      	cmp	r2, r3
    1630:	d10c      	bne.n	164c <GPIO_DeInit+0xd4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1632:	f04f 0080 	mov.w	r0, #128	; 0x80
    1636:	f04f 0101 	mov.w	r1, #1	; 0x1
    163a:	f000 ff6b 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    163e:	f04f 0080 	mov.w	r0, #128	; 0x80
    1642:	f04f 0100 	mov.w	r1, #0	; 0x0
    1646:	f000 ff65 	bl	2514 <RCC_APB2PeriphResetCmd>
    164a:	e00f      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else
  {
    if (GPIOx == GPIOG)
    164c:	687a      	ldr	r2, [r7, #4]
    164e:	4b0f      	ldr	r3, [pc, #60]	(168c <GPIO_DeInit+0x114>)
    1650:	429a      	cmp	r2, r3
    1652:	d10b      	bne.n	166c <GPIO_DeInit+0xf4>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1654:	f44f 7080 	mov.w	r0, #256	; 0x100
    1658:	f04f 0101 	mov.w	r1, #1	; 0x1
    165c:	f000 ff5a 	bl	2514 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1660:	f44f 7080 	mov.w	r0, #256	; 0x100
    1664:	f04f 0100 	mov.w	r1, #0	; 0x0
    1668:	f000 ff54 	bl	2514 <RCC_APB2PeriphResetCmd>
    }
  }
}
    166c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    1670:	46bd      	mov	sp, r7
    1672:	bd80      	pop	{r7, pc}
    1674:	40010800 	.word	0x40010800
    1678:	40010c00 	.word	0x40010c00
    167c:	40011000 	.word	0x40011000
    1680:	40011400 	.word	0x40011400
    1684:	40011800 	.word	0x40011800
    1688:	40011c00 	.word	0x40011c00
    168c:	40012000 	.word	0x40012000

00001690 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1690:	b580      	push	{r7, lr}
    1692:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1694:	f04f 0001 	mov.w	r0, #1	; 0x1
    1698:	f04f 0101 	mov.w	r1, #1	; 0x1
    169c:	f000 ff3a 	bl	2514 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    16a0:	f04f 0001 	mov.w	r0, #1	; 0x1
    16a4:	f04f 0100 	mov.w	r1, #0	; 0x0
    16a8:	f000 ff34 	bl	2514 <RCC_APB2PeriphResetCmd>
}
    16ac:	46bd      	mov	sp, r7
    16ae:	bd80      	pop	{r7, pc}

000016b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *   contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    16b0:	b480      	push	{r7}
    16b2:	b089      	sub	sp, #36
    16b4:	af00      	add	r7, sp, #0
    16b6:	6078      	str	r0, [r7, #4]
    16b8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    16ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    16be:	60bb      	str	r3, [r7, #8]
    16c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    16c4:	60fb      	str	r3, [r7, #12]
    16c6:	f04f 0300 	mov.w	r3, #0	; 0x0
    16ca:	613b      	str	r3, [r7, #16]
    16cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    16d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    16d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    16d6:	61bb      	str	r3, [r7, #24]
    16d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    16dc:	61fb      	str	r3, [r7, #28]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    16de:	683b      	ldr	r3, [r7, #0]
    16e0:	78db      	ldrb	r3, [r3, #3]
    16e2:	f003 030f 	and.w	r3, r3, #15	; 0xf
    16e6:	60bb      	str	r3, [r7, #8]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    16e8:	683b      	ldr	r3, [r7, #0]
    16ea:	78db      	ldrb	r3, [r3, #3]
    16ec:	f003 0310 	and.w	r3, r3, #16	; 0x10
    16f0:	2b00      	cmp	r3, #0
    16f2:	d006      	beq.n	1702 <GPIO_Init+0x52>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    16f4:	683b      	ldr	r3, [r7, #0]
    16f6:	789b      	ldrb	r3, [r3, #2]
    16f8:	461a      	mov	r2, r3
    16fa:	68bb      	ldr	r3, [r7, #8]
    16fc:	ea43 0302 	orr.w	r3, r3, r2
    1700:	60bb      	str	r3, [r7, #8]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    1702:	683b      	ldr	r3, [r7, #0]
    1704:	881b      	ldrh	r3, [r3, #0]
    1706:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    170a:	2b00      	cmp	r3, #0
    170c:	d051      	beq.n	17b2 <GPIO_Init+0x102>
  {
    tmpreg = GPIOx->CRL;
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	61bb      	str	r3, [r7, #24]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1714:	f04f 0300 	mov.w	r3, #0	; 0x0
    1718:	613b      	str	r3, [r7, #16]
    171a:	e044      	b.n	17a6 <GPIO_Init+0xf6>
    {
      pos = ((uint32_t)0x01) << pinpos;
    171c:	693a      	ldr	r2, [r7, #16]
    171e:	f04f 0301 	mov.w	r3, #1	; 0x1
    1722:	fa03 f302 	lsl.w	r3, r3, r2
    1726:	617b      	str	r3, [r7, #20]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    1728:	683b      	ldr	r3, [r7, #0]
    172a:	881b      	ldrh	r3, [r3, #0]
    172c:	461a      	mov	r2, r3
    172e:	697b      	ldr	r3, [r7, #20]
    1730:	ea02 0303 	and.w	r3, r2, r3
    1734:	60fb      	str	r3, [r7, #12]
      if (currentpin == pos)
    1736:	68fa      	ldr	r2, [r7, #12]
    1738:	697b      	ldr	r3, [r7, #20]
    173a:	429a      	cmp	r2, r3
    173c:	d12f      	bne.n	179e <GPIO_Init+0xee>
      {
        pos = pinpos << 2;
    173e:	693b      	ldr	r3, [r7, #16]
    1740:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1744:	617b      	str	r3, [r7, #20]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1746:	697a      	ldr	r2, [r7, #20]
    1748:	f04f 030f 	mov.w	r3, #15	; 0xf
    174c:	fa03 f302 	lsl.w	r3, r3, r2
    1750:	61fb      	str	r3, [r7, #28]
        tmpreg &= ~pinmask;
    1752:	69fb      	ldr	r3, [r7, #28]
    1754:	ea6f 0203 	mvn.w	r2, r3
    1758:	69bb      	ldr	r3, [r7, #24]
    175a:	ea03 0302 	and.w	r3, r3, r2
    175e:	61bb      	str	r3, [r7, #24]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1760:	697a      	ldr	r2, [r7, #20]
    1762:	68bb      	ldr	r3, [r7, #8]
    1764:	fa03 f202 	lsl.w	r2, r3, r2
    1768:	69bb      	ldr	r3, [r7, #24]
    176a:	ea43 0302 	orr.w	r3, r3, r2
    176e:	61bb      	str	r3, [r7, #24]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1770:	683b      	ldr	r3, [r7, #0]
    1772:	78db      	ldrb	r3, [r3, #3]
    1774:	2b28      	cmp	r3, #40
    1776:	d107      	bne.n	1788 <GPIO_Init+0xd8>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    1778:	693a      	ldr	r2, [r7, #16]
    177a:	f04f 0301 	mov.w	r3, #1	; 0x1
    177e:	fa03 f202 	lsl.w	r2, r3, r2
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	615a      	str	r2, [r3, #20]
    1786:	e00a      	b.n	179e <GPIO_Init+0xee>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1788:	683b      	ldr	r3, [r7, #0]
    178a:	78db      	ldrb	r3, [r3, #3]
    178c:	2b48      	cmp	r3, #72
    178e:	d106      	bne.n	179e <GPIO_Init+0xee>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1790:	693a      	ldr	r2, [r7, #16]
    1792:	f04f 0301 	mov.w	r3, #1	; 0x1
    1796:	fa03 f202 	lsl.w	r2, r3, r2
    179a:	687b      	ldr	r3, [r7, #4]
    179c:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    179e:	693b      	ldr	r3, [r7, #16]
    17a0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    17a4:	613b      	str	r3, [r7, #16]
    17a6:	693b      	ldr	r3, [r7, #16]
    17a8:	2b07      	cmp	r3, #7
    17aa:	d9b7      	bls.n	171c <GPIO_Init+0x6c>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    17ac:	687a      	ldr	r2, [r7, #4]
    17ae:	69bb      	ldr	r3, [r7, #24]
    17b0:	6013      	str	r3, [r2, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    17b2:	683b      	ldr	r3, [r7, #0]
    17b4:	881b      	ldrh	r3, [r3, #0]
    17b6:	2bff      	cmp	r3, #255
    17b8:	d959      	bls.n	186e <GPIO_Init+0x1be>
  {
    tmpreg = GPIOx->CRH;
    17ba:	687b      	ldr	r3, [r7, #4]
    17bc:	685b      	ldr	r3, [r3, #4]
    17be:	61bb      	str	r3, [r7, #24]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    17c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    17c4:	613b      	str	r3, [r7, #16]
    17c6:	e04c      	b.n	1862 <GPIO_Init+0x1b2>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    17c8:	693b      	ldr	r3, [r7, #16]
    17ca:	f103 0308 	add.w	r3, r3, #8	; 0x8
    17ce:	461a      	mov	r2, r3
    17d0:	f04f 0301 	mov.w	r3, #1	; 0x1
    17d4:	fa03 f302 	lsl.w	r3, r3, r2
    17d8:	617b      	str	r3, [r7, #20]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    17da:	683b      	ldr	r3, [r7, #0]
    17dc:	881b      	ldrh	r3, [r3, #0]
    17de:	461a      	mov	r2, r3
    17e0:	697b      	ldr	r3, [r7, #20]
    17e2:	ea02 0303 	and.w	r3, r2, r3
    17e6:	60fb      	str	r3, [r7, #12]
      if (currentpin == pos)
    17e8:	68fa      	ldr	r2, [r7, #12]
    17ea:	697b      	ldr	r3, [r7, #20]
    17ec:	429a      	cmp	r2, r3
    17ee:	d134      	bne.n	185a <GPIO_Init+0x1aa>
      {
        pos = pinpos << 2;
    17f0:	693b      	ldr	r3, [r7, #16]
    17f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    17f6:	617b      	str	r3, [r7, #20]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    17f8:	697a      	ldr	r2, [r7, #20]
    17fa:	f04f 030f 	mov.w	r3, #15	; 0xf
    17fe:	fa03 f302 	lsl.w	r3, r3, r2
    1802:	61fb      	str	r3, [r7, #28]
        tmpreg &= ~pinmask;
    1804:	69fb      	ldr	r3, [r7, #28]
    1806:	ea6f 0203 	mvn.w	r2, r3
    180a:	69bb      	ldr	r3, [r7, #24]
    180c:	ea03 0302 	and.w	r3, r3, r2
    1810:	61bb      	str	r3, [r7, #24]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1812:	697a      	ldr	r2, [r7, #20]
    1814:	68bb      	ldr	r3, [r7, #8]
    1816:	fa03 f202 	lsl.w	r2, r3, r2
    181a:	69bb      	ldr	r3, [r7, #24]
    181c:	ea43 0302 	orr.w	r3, r3, r2
    1820:	61bb      	str	r3, [r7, #24]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1822:	683b      	ldr	r3, [r7, #0]
    1824:	78db      	ldrb	r3, [r3, #3]
    1826:	2b28      	cmp	r3, #40
    1828:	d109      	bne.n	183e <GPIO_Init+0x18e>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    182a:	693b      	ldr	r3, [r7, #16]
    182c:	f103 0308 	add.w	r3, r3, #8	; 0x8
    1830:	461a      	mov	r2, r3
    1832:	f04f 0301 	mov.w	r3, #1	; 0x1
    1836:	fa03 f202 	lsl.w	r2, r3, r2
    183a:	687b      	ldr	r3, [r7, #4]
    183c:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    183e:	683b      	ldr	r3, [r7, #0]
    1840:	78db      	ldrb	r3, [r3, #3]
    1842:	2b48      	cmp	r3, #72
    1844:	d109      	bne.n	185a <GPIO_Init+0x1aa>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1846:	693b      	ldr	r3, [r7, #16]
    1848:	f103 0308 	add.w	r3, r3, #8	; 0x8
    184c:	461a      	mov	r2, r3
    184e:	f04f 0301 	mov.w	r3, #1	; 0x1
    1852:	fa03 f202 	lsl.w	r2, r3, r2
    1856:	687b      	ldr	r3, [r7, #4]
    1858:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    185a:	693b      	ldr	r3, [r7, #16]
    185c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    1860:	613b      	str	r3, [r7, #16]
    1862:	693b      	ldr	r3, [r7, #16]
    1864:	2b07      	cmp	r3, #7
    1866:	d9af      	bls.n	17c8 <GPIO_Init+0x118>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    1868:	687a      	ldr	r2, [r7, #4]
    186a:	69bb      	ldr	r3, [r7, #24]
    186c:	6053      	str	r3, [r2, #4]
  }
}
    186e:	f107 0724 	add.w	r7, r7, #36	; 0x24
    1872:	46bd      	mov	sp, r7
    1874:	bc80      	pop	{r7}
    1876:	4770      	bx	lr

00001878 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    1878:	b480      	push	{r7}
    187a:	b083      	sub	sp, #12
    187c:	af00      	add	r7, sp, #0
    187e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    1880:	687a      	ldr	r2, [r7, #4]
    1882:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1886:	8013      	strh	r3, [r2, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    1888:	687a      	ldr	r2, [r7, #4]
    188a:	f04f 0302 	mov.w	r3, #2	; 0x2
    188e:	7093      	strb	r3, [r2, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1890:	687a      	ldr	r2, [r7, #4]
    1892:	f04f 0304 	mov.w	r3, #4	; 0x4
    1896:	70d3      	strb	r3, [r2, #3]
}
    1898:	f107 070c 	add.w	r7, r7, #12	; 0xc
    189c:	46bd      	mov	sp, r7
    189e:	bc80      	pop	{r7}
    18a0:	4770      	bx	lr
    18a2:	46c0      	nop			(mov r8, r8)

000018a4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    18a4:	b480      	push	{r7}
    18a6:	b085      	sub	sp, #20
    18a8:	af00      	add	r7, sp, #0
    18aa:	6078      	str	r0, [r7, #4]
    18ac:	460b      	mov	r3, r1
    18ae:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    18b0:	f04f 0300 	mov.w	r3, #0	; 0x0
    18b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    18b6:	687b      	ldr	r3, [r7, #4]
    18b8:	689a      	ldr	r2, [r3, #8]
    18ba:	887b      	ldrh	r3, [r7, #2]
    18bc:	ea02 0303 	and.w	r3, r2, r3
    18c0:	2b00      	cmp	r3, #0
    18c2:	d003      	beq.n	18cc <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
    18c4:	f04f 0301 	mov.w	r3, #1	; 0x1
    18c8:	73fb      	strb	r3, [r7, #15]
    18ca:	e002      	b.n	18d2 <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    18cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    18d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    18d2:	7bfb      	ldrb	r3, [r7, #15]
}
    18d4:	4618      	mov	r0, r3
    18d6:	f107 0714 	add.w	r7, r7, #20	; 0x14
    18da:	46bd      	mov	sp, r7
    18dc:	bc80      	pop	{r7}
    18de:	4770      	bx	lr

000018e0 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    18e0:	b480      	push	{r7}
    18e2:	b083      	sub	sp, #12
    18e4:	af00      	add	r7, sp, #0
    18e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    18e8:	687b      	ldr	r3, [r7, #4]
    18ea:	689b      	ldr	r3, [r3, #8]
    18ec:	b29b      	uxth	r3, r3
}
    18ee:	4618      	mov	r0, r3
    18f0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    18f4:	46bd      	mov	sp, r7
    18f6:	bc80      	pop	{r7}
    18f8:	4770      	bx	lr
    18fa:	46c0      	nop			(mov r8, r8)

000018fc <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    18fc:	b480      	push	{r7}
    18fe:	b085      	sub	sp, #20
    1900:	af00      	add	r7, sp, #0
    1902:	6078      	str	r0, [r7, #4]
    1904:	460b      	mov	r3, r1
    1906:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1908:	f04f 0300 	mov.w	r3, #0	; 0x0
    190c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	68da      	ldr	r2, [r3, #12]
    1912:	887b      	ldrh	r3, [r7, #2]
    1914:	ea02 0303 	and.w	r3, r2, r3
    1918:	2b00      	cmp	r3, #0
    191a:	d003      	beq.n	1924 <GPIO_ReadOutputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
    191c:	f04f 0301 	mov.w	r3, #1	; 0x1
    1920:	73fb      	strb	r3, [r7, #15]
    1922:	e002      	b.n	192a <GPIO_ReadOutputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1924:	f04f 0300 	mov.w	r3, #0	; 0x0
    1928:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    192a:	7bfb      	ldrb	r3, [r7, #15]
}
    192c:	4618      	mov	r0, r3
    192e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1932:	46bd      	mov	sp, r7
    1934:	bc80      	pop	{r7}
    1936:	4770      	bx	lr

00001938 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    1938:	b480      	push	{r7}
    193a:	b083      	sub	sp, #12
    193c:	af00      	add	r7, sp, #0
    193e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1940:	687b      	ldr	r3, [r7, #4]
    1942:	68db      	ldr	r3, [r3, #12]
    1944:	b29b      	uxth	r3, r3
}
    1946:	4618      	mov	r0, r3
    1948:	f107 070c 	add.w	r7, r7, #12	; 0xc
    194c:	46bd      	mov	sp, r7
    194e:	bc80      	pop	{r7}
    1950:	4770      	bx	lr
    1952:	46c0      	nop			(mov r8, r8)

00001954 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1954:	b480      	push	{r7}
    1956:	b083      	sub	sp, #12
    1958:	af00      	add	r7, sp, #0
    195a:	6078      	str	r0, [r7, #4]
    195c:	460b      	mov	r3, r1
    195e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    1960:	887a      	ldrh	r2, [r7, #2]
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	611a      	str	r2, [r3, #16]
}
    1966:	f107 070c 	add.w	r7, r7, #12	; 0xc
    196a:	46bd      	mov	sp, r7
    196c:	bc80      	pop	{r7}
    196e:	4770      	bx	lr

00001970 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1970:	b480      	push	{r7}
    1972:	b083      	sub	sp, #12
    1974:	af00      	add	r7, sp, #0
    1976:	6078      	str	r0, [r7, #4]
    1978:	460b      	mov	r3, r1
    197a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    197c:	887a      	ldrh	r2, [r7, #2]
    197e:	687b      	ldr	r3, [r7, #4]
    1980:	615a      	str	r2, [r3, #20]
}
    1982:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1986:	46bd      	mov	sp, r7
    1988:	bc80      	pop	{r7}
    198a:	4770      	bx	lr

0000198c <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    198c:	b480      	push	{r7}
    198e:	b083      	sub	sp, #12
    1990:	af00      	add	r7, sp, #0
    1992:	6078      	str	r0, [r7, #4]
    1994:	460b      	mov	r3, r1
    1996:	807b      	strh	r3, [r7, #2]
    1998:	4613      	mov	r3, r2
    199a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    199c:	787b      	ldrb	r3, [r7, #1]
    199e:	2b00      	cmp	r3, #0
    19a0:	d003      	beq.n	19aa <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    19a2:	887a      	ldrh	r2, [r7, #2]
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	611a      	str	r2, [r3, #16]
    19a8:	e002      	b.n	19b0 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    19aa:	887a      	ldrh	r2, [r7, #2]
    19ac:	687b      	ldr	r3, [r7, #4]
    19ae:	615a      	str	r2, [r3, #20]
  }
}
    19b0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    19b4:	46bd      	mov	sp, r7
    19b6:	bc80      	pop	{r7}
    19b8:	4770      	bx	lr
    19ba:	46c0      	nop			(mov r8, r8)

000019bc <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    19bc:	b480      	push	{r7}
    19be:	b083      	sub	sp, #12
    19c0:	af00      	add	r7, sp, #0
    19c2:	6078      	str	r0, [r7, #4]
    19c4:	460b      	mov	r3, r1
    19c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    19c8:	887a      	ldrh	r2, [r7, #2]
    19ca:	687b      	ldr	r3, [r7, #4]
    19cc:	60da      	str	r2, [r3, #12]
}
    19ce:	f107 070c 	add.w	r7, r7, #12	; 0xc
    19d2:	46bd      	mov	sp, r7
    19d4:	bc80      	pop	{r7}
    19d6:	4770      	bx	lr

000019d8 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    19d8:	b480      	push	{r7}
    19da:	b085      	sub	sp, #20
    19dc:	af00      	add	r7, sp, #0
    19de:	6078      	str	r0, [r7, #4]
    19e0:	460b      	mov	r3, r1
    19e2:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    19e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    19e8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    19ea:	887a      	ldrh	r2, [r7, #2]
    19ec:	68fb      	ldr	r3, [r7, #12]
    19ee:	ea43 0302 	orr.w	r3, r3, r2
    19f2:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    19f4:	687a      	ldr	r2, [r7, #4]
    19f6:	68fb      	ldr	r3, [r7, #12]
    19f8:	6193      	str	r3, [r2, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    19fa:	887a      	ldrh	r2, [r7, #2]
    19fc:	687b      	ldr	r3, [r7, #4]
    19fe:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1a00:	687a      	ldr	r2, [r7, #4]
    1a02:	68fb      	ldr	r3, [r7, #12]
    1a04:	6193      	str	r3, [r2, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	699b      	ldr	r3, [r3, #24]
    1a0a:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1a0c:	687b      	ldr	r3, [r7, #4]
    1a0e:	699b      	ldr	r3, [r3, #24]
    1a10:	60fb      	str	r3, [r7, #12]
}
    1a12:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1a16:	46bd      	mov	sp, r7
    1a18:	bc80      	pop	{r7}
    1a1a:	4770      	bx	lr

00001a1c <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1a1c:	b480      	push	{r7}
    1a1e:	b085      	sub	sp, #20
    1a20:	af00      	add	r7, sp, #0
    1a22:	4603      	mov	r3, r0
    1a24:	460a      	mov	r2, r1
    1a26:	71fb      	strb	r3, [r7, #7]
    1a28:	4613      	mov	r3, r2
    1a2a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    1a2c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1a30:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1a32:	4b0e      	ldr	r3, [pc, #56]	(1a6c <GPIO_EventOutputConfig+0x50>)
    1a34:	681b      	ldr	r3, [r3, #0]
    1a36:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    1a38:	68fa      	ldr	r2, [r7, #12]
    1a3a:	f64f 7380 	movw	r3, #65408	; 0xff80
    1a3e:	ea02 0303 	and.w	r3, r2, r3
    1a42:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1a44:	79fb      	ldrb	r3, [r7, #7]
    1a46:	ea4f 1203 	mov.w	r2, r3, lsl #4
    1a4a:	68fb      	ldr	r3, [r7, #12]
    1a4c:	ea43 0302 	orr.w	r3, r3, r2
    1a50:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    1a52:	79ba      	ldrb	r2, [r7, #6]
    1a54:	68fb      	ldr	r3, [r7, #12]
    1a56:	ea43 0302 	orr.w	r3, r3, r2
    1a5a:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    1a5c:	4a03      	ldr	r2, [pc, #12]	(1a6c <GPIO_EventOutputConfig+0x50>)
    1a5e:	68fb      	ldr	r3, [r7, #12]
    1a60:	6013      	str	r3, [r2, #0]
}
    1a62:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1a66:	46bd      	mov	sp, r7
    1a68:	bc80      	pop	{r7}
    1a6a:	4770      	bx	lr
    1a6c:	40010000 	.word	0x40010000

00001a70 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    1a70:	b480      	push	{r7}
    1a72:	b083      	sub	sp, #12
    1a74:	af00      	add	r7, sp, #0
    1a76:	4603      	mov	r3, r0
    1a78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    1a7a:	4a04      	ldr	r2, [pc, #16]	(1a8c <GPIO_EventOutputCmd+0x1c>)
    1a7c:	79fb      	ldrb	r3, [r7, #7]
    1a7e:	6013      	str	r3, [r2, #0]
}
    1a80:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1a84:	46bd      	mov	sp, r7
    1a86:	bc80      	pop	{r7}
    1a88:	4770      	bx	lr
    1a8a:	46c0      	nop			(mov r8, r8)
    1a8c:	4220001c 	.word	0x4220001c

00001a90 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    1a90:	b480      	push	{r7}
    1a92:	b087      	sub	sp, #28
    1a94:	af00      	add	r7, sp, #0
    1a96:	6078      	str	r0, [r7, #4]
    1a98:	460b      	mov	r3, r1
    1a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    1a9c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1aa0:	60bb      	str	r3, [r7, #8]
    1aa2:	f04f 0300 	mov.w	r3, #0	; 0x0
    1aa6:	60fb      	str	r3, [r7, #12]
    1aa8:	f04f 0300 	mov.w	r3, #0	; 0x0
    1aac:	613b      	str	r3, [r7, #16]
    1aae:	f04f 0300 	mov.w	r3, #0	; 0x0
    1ab2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  tmpreg = AFIO->MAPR;
    1ab4:	4b30      	ldr	r3, [pc, #192]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1ab6:	685b      	ldr	r3, [r3, #4]
    1ab8:	613b      	str	r3, [r7, #16]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1aba:	687b      	ldr	r3, [r7, #4]
    1abc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    1ac0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    1ac4:	617b      	str	r3, [r7, #20]
  tmp = GPIO_Remap & LSB_MASK;
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	ea4f 4303 	mov.w	r3, r3, lsl #16
    1acc:	ea4f 4313 	mov.w	r3, r3, lsr #16
    1ad0:	60bb      	str	r3, [r7, #8]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1ad2:	687b      	ldr	r3, [r7, #4]
    1ad4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    1ad8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    1adc:	d10a      	bne.n	1af4 <GPIO_PinRemapConfig+0x64>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1ade:	693b      	ldr	r3, [r7, #16]
    1ae0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1ae4:	613b      	str	r3, [r7, #16]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1ae6:	4a24      	ldr	r2, [pc, #144]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1ae8:	4b23      	ldr	r3, [pc, #140]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1aea:	685b      	ldr	r3, [r3, #4]
    1aec:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1af0:	6053      	str	r3, [r2, #4]
    1af2:	e029      	b.n	1b48 <GPIO_PinRemapConfig+0xb8>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1afa:	2b00      	cmp	r3, #0
    1afc:	d011      	beq.n	1b22 <GPIO_PinRemapConfig+0x92>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1afe:	697a      	ldr	r2, [r7, #20]
    1b00:	f04f 0303 	mov.w	r3, #3	; 0x3
    1b04:	fa03 f302 	lsl.w	r3, r3, r2
    1b08:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1b0a:	68fb      	ldr	r3, [r7, #12]
    1b0c:	ea6f 0203 	mvn.w	r2, r3
    1b10:	693b      	ldr	r3, [r7, #16]
    1b12:	ea03 0302 	and.w	r3, r3, r2
    1b16:	613b      	str	r3, [r7, #16]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1b18:	693b      	ldr	r3, [r7, #16]
    1b1a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1b1e:	613b      	str	r3, [r7, #16]
    1b20:	e012      	b.n	1b48 <GPIO_PinRemapConfig+0xb8>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	ea4f 5353 	mov.w	r3, r3, lsr #21
    1b28:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1b2c:	461a      	mov	r2, r3
    1b2e:	68bb      	ldr	r3, [r7, #8]
    1b30:	fa03 f302 	lsl.w	r3, r3, r2
    1b34:	ea6f 0203 	mvn.w	r2, r3
    1b38:	693b      	ldr	r3, [r7, #16]
    1b3a:	ea03 0302 	and.w	r3, r3, r2
    1b3e:	613b      	str	r3, [r7, #16]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1b40:	693b      	ldr	r3, [r7, #16]
    1b42:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1b46:	613b      	str	r3, [r7, #16]
  }

  if (NewState != DISABLE)
    1b48:	78fb      	ldrb	r3, [r7, #3]
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	d00c      	beq.n	1b68 <GPIO_PinRemapConfig+0xd8>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1b4e:	687b      	ldr	r3, [r7, #4]
    1b50:	ea4f 5353 	mov.w	r3, r3, lsr #21
    1b54:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1b58:	461a      	mov	r2, r3
    1b5a:	68bb      	ldr	r3, [r7, #8]
    1b5c:	fa03 f202 	lsl.w	r2, r3, r2
    1b60:	693b      	ldr	r3, [r7, #16]
    1b62:	ea43 0302 	orr.w	r3, r3, r2
    1b66:	613b      	str	r3, [r7, #16]
  }

  AFIO->MAPR = tmpreg;
    1b68:	4a03      	ldr	r2, [pc, #12]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1b6a:	693b      	ldr	r3, [r7, #16]
    1b6c:	6053      	str	r3, [r2, #4]
}
    1b6e:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    1b72:	46bd      	mov	sp, r7
    1b74:	bc80      	pop	{r7}
    1b76:	4770      	bx	lr
    1b78:	40010000 	.word	0x40010000

00001b7c <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1b7c:	b480      	push	{r7}
    1b7e:	b085      	sub	sp, #20
    1b80:	af00      	add	r7, sp, #0
    1b82:	4603      	mov	r3, r0
    1b84:	460a      	mov	r2, r1
    1b86:	71fb      	strb	r3, [r7, #7]
    1b88:	4613      	mov	r3, r2
    1b8a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    1b8c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1b90:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    1b92:	79bb      	ldrb	r3, [r7, #6]
    1b94:	f003 0303 	and.w	r3, r3, #3	; 0x3
    1b98:	ea4f 0283 	mov.w	r2, r3, lsl #2
    1b9c:	f04f 030f 	mov.w	r3, #15	; 0xf
    1ba0:	fa03 f302 	lsl.w	r3, r3, r2
    1ba4:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    1ba6:	491d      	ldr	r1, [pc, #116]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1ba8:	79bb      	ldrb	r3, [r7, #6]
    1baa:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bae:	b2db      	uxtb	r3, r3
    1bb0:	4618      	mov	r0, r3
    1bb2:	4a1a      	ldr	r2, [pc, #104]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1bb4:	79bb      	ldrb	r3, [r7, #6]
    1bb6:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bba:	b2db      	uxtb	r3, r3
    1bbc:	f103 0302 	add.w	r3, r3, #2	; 0x2
    1bc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1bc4:	68fb      	ldr	r3, [r7, #12]
    1bc6:	ea6f 0303 	mvn.w	r3, r3
    1bca:	ea02 0203 	and.w	r2, r2, r3
    1bce:	f100 0302 	add.w	r3, r0, #2	; 0x2
    1bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    1bd6:	4811      	ldr	r0, [pc, #68]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1bd8:	79bb      	ldrb	r3, [r7, #6]
    1bda:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bde:	b2db      	uxtb	r3, r3
    1be0:	469c      	mov	ip, r3
    1be2:	4a0e      	ldr	r2, [pc, #56]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1be4:	79bb      	ldrb	r3, [r7, #6]
    1be6:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bea:	b2db      	uxtb	r3, r3
    1bec:	f103 0302 	add.w	r3, r3, #2	; 0x2
    1bf0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    1bf4:	79fa      	ldrb	r2, [r7, #7]
    1bf6:	79bb      	ldrb	r3, [r7, #6]
    1bf8:	f003 0303 	and.w	r3, r3, #3	; 0x3
    1bfc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1c00:	fa02 f303 	lsl.w	r3, r2, r3
    1c04:	ea41 0203 	orr.w	r2, r1, r3
    1c08:	f10c 0302 	add.w	r3, ip, #2	; 0x2
    1c0c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    1c10:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1c14:	46bd      	mov	sp, r7
    1c16:	bc80      	pop	{r7}
    1c18:	4770      	bx	lr
    1c1a:	46c0      	nop			(mov r8, r8)
    1c1c:	40010000 	.word	0x40010000

00001c20 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    1c20:	b480      	push	{r7}
    1c22:	b083      	sub	sp, #12
    1c24:	af00      	add	r7, sp, #0
    1c26:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1c28:	4a03      	ldr	r2, [pc, #12]	(1c38 <GPIO_ETH_MediaInterfaceConfig+0x18>)
    1c2a:	687b      	ldr	r3, [r7, #4]
    1c2c:	6013      	str	r3, [r2, #0]
}
    1c2e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1c32:	46bd      	mov	sp, r7
    1c34:	bc80      	pop	{r7}
    1c36:	4770      	bx	lr
    1c38:	422000dc 	.word	0x422000dc

00001c3c <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
    1c3c:	b480      	push	{r7}
    1c3e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
    1c40:	4a18      	ldr	r2, [pc, #96]	(1ca4 <RCC_DeInit+0x68>)
    1c42:	4b18      	ldr	r3, [pc, #96]	(1ca4 <RCC_DeInit+0x68>)
    1c44:	681b      	ldr	r3, [r3, #0]
    1c46:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    1c4a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
    1c4c:	4915      	ldr	r1, [pc, #84]	(1ca4 <RCC_DeInit+0x68>)
    1c4e:	4b15      	ldr	r3, [pc, #84]	(1ca4 <RCC_DeInit+0x68>)
    1c50:	685a      	ldr	r2, [r3, #4]
    1c52:	4b15      	ldr	r3, [pc, #84]	(1ca8 <RCC_DeInit+0x6c>)
    1c54:	ea02 0303 	and.w	r3, r2, r3
    1c58:	604b      	str	r3, [r1, #4]
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
    1c5a:	4a12      	ldr	r2, [pc, #72]	(1ca4 <RCC_DeInit+0x68>)
    1c5c:	4b11      	ldr	r3, [pc, #68]	(1ca4 <RCC_DeInit+0x68>)
    1c5e:	681b      	ldr	r3, [r3, #0]
    1c60:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
    1c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1c68:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
    1c6a:	4a0e      	ldr	r2, [pc, #56]	(1ca4 <RCC_DeInit+0x68>)
    1c6c:	4b0d      	ldr	r3, [pc, #52]	(1ca4 <RCC_DeInit+0x68>)
    1c6e:	681b      	ldr	r3, [r3, #0]
    1c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1c74:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
    1c76:	4a0b      	ldr	r2, [pc, #44]	(1ca4 <RCC_DeInit+0x68>)
    1c78:	4b0a      	ldr	r3, [pc, #40]	(1ca4 <RCC_DeInit+0x68>)
    1c7a:	685b      	ldr	r3, [r3, #4]
    1c7c:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
    1c80:	6053      	str	r3, [r2, #4]
#ifndef STM32F10X_CL
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
#else
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
    1c82:	4a08      	ldr	r2, [pc, #32]	(1ca4 <RCC_DeInit+0x68>)
    1c84:	4b07      	ldr	r3, [pc, #28]	(1ca4 <RCC_DeInit+0x68>)
    1c86:	681b      	ldr	r3, [r3, #0]
    1c88:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
    1c8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
    1c8e:	4a05      	ldr	r2, [pc, #20]	(1ca4 <RCC_DeInit+0x68>)
    1c90:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    1c94:	6093      	str	r3, [r2, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
    1c96:	4a03      	ldr	r2, [pc, #12]	(1ca4 <RCC_DeInit+0x68>)
    1c98:	f04f 0300 	mov.w	r3, #0	; 0x0
    1c9c:	62d3      	str	r3, [r2, #44]
#endif /* STM32F10X_CL */
}
    1c9e:	46bd      	mov	sp, r7
    1ca0:	bc80      	pop	{r7}
    1ca2:	4770      	bx	lr
    1ca4:	40021000 	.word	0x40021000
    1ca8:	f0ff0000 	.word	0xf0ff0000

00001cac <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
    1cac:	b480      	push	{r7}
    1cae:	b083      	sub	sp, #12
    1cb0:	af00      	add	r7, sp, #0
    1cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
    1cb4:	4a14      	ldr	r2, [pc, #80]	(1d08 <RCC_HSEConfig+0x5c>)
    1cb6:	4b14      	ldr	r3, [pc, #80]	(1d08 <RCC_HSEConfig+0x5c>)
    1cb8:	681b      	ldr	r3, [r3, #0]
    1cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1cbe:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
    1cc0:	4a11      	ldr	r2, [pc, #68]	(1d08 <RCC_HSEConfig+0x5c>)
    1cc2:	4b11      	ldr	r3, [pc, #68]	(1d08 <RCC_HSEConfig+0x5c>)
    1cc4:	681b      	ldr	r3, [r3, #0]
    1cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1cca:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
    1ccc:	687b      	ldr	r3, [r7, #4]
    1cce:	603b      	str	r3, [r7, #0]
    1cd0:	683b      	ldr	r3, [r7, #0]
    1cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1cd6:	d004      	beq.n	1ce2 <RCC_HSEConfig+0x36>
    1cd8:	683b      	ldr	r3, [r7, #0]
    1cda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    1cde:	d007      	beq.n	1cf0 <RCC_HSEConfig+0x44>
    1ce0:	e00c      	b.n	1cfc <RCC_HSEConfig+0x50>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
    1ce2:	4a09      	ldr	r2, [pc, #36]	(1d08 <RCC_HSEConfig+0x5c>)
    1ce4:	4b08      	ldr	r3, [pc, #32]	(1d08 <RCC_HSEConfig+0x5c>)
    1ce6:	681b      	ldr	r3, [r3, #0]
    1ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1cec:	6013      	str	r3, [r2, #0]
    1cee:	e005      	b.n	1cfc <RCC_HSEConfig+0x50>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
    1cf0:	4a05      	ldr	r2, [pc, #20]	(1d08 <RCC_HSEConfig+0x5c>)
    1cf2:	4b05      	ldr	r3, [pc, #20]	(1d08 <RCC_HSEConfig+0x5c>)
    1cf4:	681b      	ldr	r3, [r3, #0]
    1cf6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
    1cfa:	6013      	str	r3, [r2, #0]
      break;
      
    default:
      break;
  }
}
    1cfc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1d00:	46bd      	mov	sp, r7
    1d02:	bc80      	pop	{r7}
    1d04:	4770      	bx	lr
    1d06:	46c0      	nop			(mov r8, r8)
    1d08:	40021000 	.word	0x40021000

00001d0c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
    1d0c:	b580      	push	{r7, lr}
    1d0e:	b082      	sub	sp, #8
    1d10:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
    1d12:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d16:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
    1d18:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d1c:	71bb      	strb	r3, [r7, #6]
  FlagStatus HSEStatus = RESET;
    1d1e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d22:	71fb      	strb	r3, [r7, #7]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    1d24:	f04f 0031 	mov.w	r0, #49	; 0x31
    1d28:	f000 fc68 	bl	25fc <RCC_GetFlagStatus>
    1d2c:	4603      	mov	r3, r0
    1d2e:	71fb      	strb	r3, [r7, #7]
    StartUpCounter++;  
    1d30:	683b      	ldr	r3, [r7, #0]
    1d32:	f103 0301 	add.w	r3, r3, #1	; 0x1
    1d36:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSEStartUp_TimeOut) && (HSEStatus == RESET));
    1d38:	683b      	ldr	r3, [r7, #0]
    1d3a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    1d3e:	d002      	beq.n	1d46 <RCC_WaitForHSEStartUp+0x3a>
    1d40:	79fb      	ldrb	r3, [r7, #7]
    1d42:	2b00      	cmp	r3, #0
    1d44:	d0ee      	beq.n	1d24 <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
    1d46:	f04f 0031 	mov.w	r0, #49	; 0x31
    1d4a:	f000 fc57 	bl	25fc <RCC_GetFlagStatus>
    1d4e:	4603      	mov	r3, r0
    1d50:	2b00      	cmp	r3, #0
    1d52:	d003      	beq.n	1d5c <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
    1d54:	f04f 0301 	mov.w	r3, #1	; 0x1
    1d58:	71bb      	strb	r3, [r7, #6]
    1d5a:	e002      	b.n	1d62 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
    1d5c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d60:	71bb      	strb	r3, [r7, #6]
  }  
  return (status);
    1d62:	79bb      	ldrb	r3, [r7, #6]
}
    1d64:	4618      	mov	r0, r3
    1d66:	f107 0708 	add.w	r7, r7, #8	; 0x8
    1d6a:	46bd      	mov	sp, r7
    1d6c:	bd80      	pop	{r7, pc}
    1d6e:	46c0      	nop			(mov r8, r8)

00001d70 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
    1d70:	b480      	push	{r7}
    1d72:	b085      	sub	sp, #20
    1d74:	af00      	add	r7, sp, #0
    1d76:	4603      	mov	r3, r0
    1d78:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
    1d7a:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d7e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
    1d80:	4b0a      	ldr	r3, [pc, #40]	(1dac <RCC_AdjustHSICalibrationValue+0x3c>)
    1d82:	681b      	ldr	r3, [r3, #0]
    1d84:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
    1d86:	68fb      	ldr	r3, [r7, #12]
    1d88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
    1d8c:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
    1d8e:	79fb      	ldrb	r3, [r7, #7]
    1d90:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    1d94:	68fb      	ldr	r3, [r7, #12]
    1d96:	ea43 0302 	orr.w	r3, r3, r2
    1d9a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
    1d9c:	4a03      	ldr	r2, [pc, #12]	(1dac <RCC_AdjustHSICalibrationValue+0x3c>)
    1d9e:	68fb      	ldr	r3, [r7, #12]
    1da0:	6013      	str	r3, [r2, #0]
}
    1da2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1da6:	46bd      	mov	sp, r7
    1da8:	bc80      	pop	{r7}
    1daa:	4770      	bx	lr
    1dac:	40021000 	.word	0x40021000

00001db0 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
    1db0:	b480      	push	{r7}
    1db2:	b083      	sub	sp, #12
    1db4:	af00      	add	r7, sp, #0
    1db6:	4603      	mov	r3, r0
    1db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
    1dba:	4a04      	ldr	r2, [pc, #16]	(1dcc <RCC_HSICmd+0x1c>)
    1dbc:	79fb      	ldrb	r3, [r7, #7]
    1dbe:	6013      	str	r3, [r2, #0]
}
    1dc0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1dc4:	46bd      	mov	sp, r7
    1dc6:	bc80      	pop	{r7}
    1dc8:	4770      	bx	lr
    1dca:	46c0      	nop			(mov r8, r8)
    1dcc:	42420000 	.word	0x42420000

00001dd0 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
    1dd0:	b480      	push	{r7}
    1dd2:	b085      	sub	sp, #20
    1dd4:	af00      	add	r7, sp, #0
    1dd6:	6078      	str	r0, [r7, #4]
    1dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    1dda:	f04f 0300 	mov.w	r3, #0	; 0x0
    1dde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
    1de0:	4b0b      	ldr	r3, [pc, #44]	(1e10 <RCC_PLLConfig+0x40>)
    1de2:	685b      	ldr	r3, [r3, #4]
    1de4:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
    1de6:	68fb      	ldr	r3, [r7, #12]
    1de8:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
    1dec:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
    1dee:	687a      	ldr	r2, [r7, #4]
    1df0:	683b      	ldr	r3, [r7, #0]
    1df2:	ea42 0203 	orr.w	r2, r2, r3
    1df6:	68fb      	ldr	r3, [r7, #12]
    1df8:	ea43 0302 	orr.w	r3, r3, r2
    1dfc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1dfe:	4a04      	ldr	r2, [pc, #16]	(1e10 <RCC_PLLConfig+0x40>)
    1e00:	68fb      	ldr	r3, [r7, #12]
    1e02:	6053      	str	r3, [r2, #4]
}
    1e04:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1e08:	46bd      	mov	sp, r7
    1e0a:	bc80      	pop	{r7}
    1e0c:	4770      	bx	lr
    1e0e:	46c0      	nop			(mov r8, r8)
    1e10:	40021000 	.word	0x40021000

00001e14 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
    1e14:	b480      	push	{r7}
    1e16:	b083      	sub	sp, #12
    1e18:	af00      	add	r7, sp, #0
    1e1a:	4603      	mov	r3, r0
    1e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
    1e1e:	4a04      	ldr	r2, [pc, #16]	(1e30 <RCC_PLLCmd+0x1c>)
    1e20:	79fb      	ldrb	r3, [r7, #7]
    1e22:	6013      	str	r3, [r2, #0]
}
    1e24:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1e28:	46bd      	mov	sp, r7
    1e2a:	bc80      	pop	{r7}
    1e2c:	4770      	bx	lr
    1e2e:	46c0      	nop			(mov r8, r8)
    1e30:	42420060 	.word	0x42420060

00001e34 <RCC_PREDIV1Config>:
  * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
  *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
{
    1e34:	b480      	push	{r7}
    1e36:	b085      	sub	sp, #20
    1e38:	af00      	add	r7, sp, #0
    1e3a:	6078      	str	r0, [r7, #4]
    1e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    1e3e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1e42:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
    1e44:	4b0c      	ldr	r3, [pc, #48]	(1e78 <RCC_PREDIV1Config+0x44>)
    1e46:	6adb      	ldr	r3, [r3, #44]
    1e48:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
  tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
    1e4a:	68fb      	ldr	r3, [r7, #12]
    1e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1e50:	f023 030f 	bic.w	r3, r3, #15	; 0xf
    1e54:	60fb      	str	r3, [r7, #12]
  /* Set the PREDIV1 clock source and division factor */
  tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
    1e56:	687a      	ldr	r2, [r7, #4]
    1e58:	683b      	ldr	r3, [r7, #0]
    1e5a:	ea42 0203 	orr.w	r2, r2, r3
    1e5e:	68fb      	ldr	r3, [r7, #12]
    1e60:	ea43 0302 	orr.w	r3, r3, r2
    1e64:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1e66:	4a04      	ldr	r2, [pc, #16]	(1e78 <RCC_PREDIV1Config+0x44>)
    1e68:	68fb      	ldr	r3, [r7, #12]
    1e6a:	62d3      	str	r3, [r2, #44]
}
    1e6c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1e70:	46bd      	mov	sp, r7
    1e72:	bc80      	pop	{r7}
    1e74:	4770      	bx	lr
    1e76:	46c0      	nop			(mov r8, r8)
    1e78:	40021000 	.word	0x40021000

00001e7c <RCC_PREDIV2Config>:
  * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
  *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
{
    1e7c:	b480      	push	{r7}
    1e7e:	b085      	sub	sp, #20
    1e80:	af00      	add	r7, sp, #0
    1e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1e84:	f04f 0300 	mov.w	r3, #0	; 0x0
    1e88:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));

  tmpreg = RCC->CFGR2;
    1e8a:	4b0a      	ldr	r3, [pc, #40]	(1eb4 <RCC_PREDIV2Config+0x38>)
    1e8c:	6adb      	ldr	r3, [r3, #44]
    1e8e:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV2[3:0] bits */
  tmpreg &= ~CFGR2_PREDIV2;
    1e90:	68fb      	ldr	r3, [r7, #12]
    1e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1e96:	60fb      	str	r3, [r7, #12]
  /* Set the PREDIV2 division factor */
  tmpreg |= RCC_PREDIV2_Div;
    1e98:	68fa      	ldr	r2, [r7, #12]
    1e9a:	687b      	ldr	r3, [r7, #4]
    1e9c:	ea42 0303 	orr.w	r3, r2, r3
    1ea0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1ea2:	4a04      	ldr	r2, [pc, #16]	(1eb4 <RCC_PREDIV2Config+0x38>)
    1ea4:	68fb      	ldr	r3, [r7, #12]
    1ea6:	62d3      	str	r3, [r2, #44]
}
    1ea8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1eac:	46bd      	mov	sp, r7
    1eae:	bc80      	pop	{r7}
    1eb0:	4770      	bx	lr
    1eb2:	46c0      	nop			(mov r8, r8)
    1eb4:	40021000 	.word	0x40021000

00001eb8 <RCC_PLL2Config>:
  * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
  *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
  * @retval None
  */
void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
{
    1eb8:	b480      	push	{r7}
    1eba:	b085      	sub	sp, #20
    1ebc:	af00      	add	r7, sp, #0
    1ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1ec0:	f04f 0300 	mov.w	r3, #0	; 0x0
    1ec4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));

  tmpreg = RCC->CFGR2;
    1ec6:	4b0a      	ldr	r3, [pc, #40]	(1ef0 <RCC_PLL2Config+0x38>)
    1ec8:	6adb      	ldr	r3, [r3, #44]
    1eca:	60fb      	str	r3, [r7, #12]
  /* Clear PLL2Mul[3:0] bits */
  tmpreg &= ~CFGR2_PLL2MUL;
    1ecc:	68fb      	ldr	r3, [r7, #12]
    1ece:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    1ed2:	60fb      	str	r3, [r7, #12]
  /* Set the PLL2 configuration bits */
  tmpreg |= RCC_PLL2Mul;
    1ed4:	68fa      	ldr	r2, [r7, #12]
    1ed6:	687b      	ldr	r3, [r7, #4]
    1ed8:	ea42 0303 	orr.w	r3, r2, r3
    1edc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1ede:	4a04      	ldr	r2, [pc, #16]	(1ef0 <RCC_PLL2Config+0x38>)
    1ee0:	68fb      	ldr	r3, [r7, #12]
    1ee2:	62d3      	str	r3, [r2, #44]
}
    1ee4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1ee8:	46bd      	mov	sp, r7
    1eea:	bc80      	pop	{r7}
    1eec:	4770      	bx	lr
    1eee:	46c0      	nop			(mov r8, r8)
    1ef0:	40021000 	.word	0x40021000

00001ef4 <RCC_PLL2Cmd>:
  *   - This function applies only to STM32 Connectivity line devices.
  * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLL2Cmd(FunctionalState NewState)
{
    1ef4:	b480      	push	{r7}
    1ef6:	b083      	sub	sp, #12
    1ef8:	af00      	add	r7, sp, #0
    1efa:	4603      	mov	r3, r0
    1efc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
    1efe:	4a04      	ldr	r2, [pc, #16]	(1f10 <RCC_PLL2Cmd+0x1c>)
    1f00:	79fb      	ldrb	r3, [r7, #7]
    1f02:	6013      	str	r3, [r2, #0]
}
    1f04:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1f08:	46bd      	mov	sp, r7
    1f0a:	bc80      	pop	{r7}
    1f0c:	4770      	bx	lr
    1f0e:	46c0      	nop			(mov r8, r8)
    1f10:	42420068 	.word	0x42420068

00001f14 <RCC_PLL3Config>:
  * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
  *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
  * @retval None
  */
void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
{
    1f14:	b480      	push	{r7}
    1f16:	b085      	sub	sp, #20
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1f1c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1f20:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));

  tmpreg = RCC->CFGR2;
    1f22:	4b0a      	ldr	r3, [pc, #40]	(1f4c <RCC_PLL3Config+0x38>)
    1f24:	6adb      	ldr	r3, [r3, #44]
    1f26:	60fb      	str	r3, [r7, #12]
  /* Clear PLL3Mul[3:0] bits */
  tmpreg &= ~CFGR2_PLL3MUL;
    1f28:	68fb      	ldr	r3, [r7, #12]
    1f2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
    1f2e:	60fb      	str	r3, [r7, #12]
  /* Set the PLL3 configuration bits */
  tmpreg |= RCC_PLL3Mul;
    1f30:	68fa      	ldr	r2, [r7, #12]
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	ea42 0303 	orr.w	r3, r2, r3
    1f38:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1f3a:	4a04      	ldr	r2, [pc, #16]	(1f4c <RCC_PLL3Config+0x38>)
    1f3c:	68fb      	ldr	r3, [r7, #12]
    1f3e:	62d3      	str	r3, [r2, #44]
}
    1f40:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1f44:	46bd      	mov	sp, r7
    1f46:	bc80      	pop	{r7}
    1f48:	4770      	bx	lr
    1f4a:	46c0      	nop			(mov r8, r8)
    1f4c:	40021000 	.word	0x40021000

00001f50 <RCC_PLL3Cmd>:
  * @note   This function applies only to STM32 Connectivity line devices.
  * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLL3Cmd(FunctionalState NewState)
{
    1f50:	b480      	push	{r7}
    1f52:	b083      	sub	sp, #12
    1f54:	af00      	add	r7, sp, #0
    1f56:	4603      	mov	r3, r0
    1f58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
    1f5a:	4a04      	ldr	r2, [pc, #16]	(1f6c <RCC_PLL3Cmd+0x1c>)
    1f5c:	79fb      	ldrb	r3, [r7, #7]
    1f5e:	6013      	str	r3, [r2, #0]
}
    1f60:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1f64:	46bd      	mov	sp, r7
    1f66:	bc80      	pop	{r7}
    1f68:	4770      	bx	lr
    1f6a:	46c0      	nop			(mov r8, r8)
    1f6c:	42420070 	.word	0x42420070

00001f70 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
    1f70:	b480      	push	{r7}
    1f72:	b085      	sub	sp, #20
    1f74:	af00      	add	r7, sp, #0
    1f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1f78:	f04f 0300 	mov.w	r3, #0	; 0x0
    1f7c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
    1f7e:	4b0a      	ldr	r3, [pc, #40]	(1fa8 <RCC_SYSCLKConfig+0x38>)
    1f80:	685b      	ldr	r3, [r3, #4]
    1f82:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
    1f84:	68fb      	ldr	r3, [r7, #12]
    1f86:	f023 0303 	bic.w	r3, r3, #3	; 0x3
    1f8a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
    1f8c:	68fa      	ldr	r2, [r7, #12]
    1f8e:	687b      	ldr	r3, [r7, #4]
    1f90:	ea42 0303 	orr.w	r3, r2, r3
    1f94:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1f96:	4a04      	ldr	r2, [pc, #16]	(1fa8 <RCC_SYSCLKConfig+0x38>)
    1f98:	68fb      	ldr	r3, [r7, #12]
    1f9a:	6053      	str	r3, [r2, #4]
}
    1f9c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1fa0:	46bd      	mov	sp, r7
    1fa2:	bc80      	pop	{r7}
    1fa4:	4770      	bx	lr
    1fa6:	46c0      	nop			(mov r8, r8)
    1fa8:	40021000 	.word	0x40021000

00001fac <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
    1fac:	b480      	push	{r7}
    1fae:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
    1fb0:	4b04      	ldr	r3, [pc, #16]	(1fc4 <RCC_GetSYSCLKSource+0x18>)
    1fb2:	685b      	ldr	r3, [r3, #4]
    1fb4:	b2db      	uxtb	r3, r3
    1fb6:	f003 030c 	and.w	r3, r3, #12	; 0xc
}
    1fba:	4618      	mov	r0, r3
    1fbc:	46bd      	mov	sp, r7
    1fbe:	bc80      	pop	{r7}
    1fc0:	4770      	bx	lr
    1fc2:	46c0      	nop			(mov r8, r8)
    1fc4:	40021000 	.word	0x40021000

00001fc8 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
    1fc8:	b480      	push	{r7}
    1fca:	b085      	sub	sp, #20
    1fcc:	af00      	add	r7, sp, #0
    1fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1fd0:	f04f 0300 	mov.w	r3, #0	; 0x0
    1fd4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
    1fd6:	4b0a      	ldr	r3, [pc, #40]	(2000 <RCC_HCLKConfig+0x38>)
    1fd8:	685b      	ldr	r3, [r3, #4]
    1fda:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
    1fdc:	68fb      	ldr	r3, [r7, #12]
    1fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1fe2:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
    1fe4:	68fa      	ldr	r2, [r7, #12]
    1fe6:	687b      	ldr	r3, [r7, #4]
    1fe8:	ea42 0303 	orr.w	r3, r2, r3
    1fec:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1fee:	4a04      	ldr	r2, [pc, #16]	(2000 <RCC_HCLKConfig+0x38>)
    1ff0:	68fb      	ldr	r3, [r7, #12]
    1ff2:	6053      	str	r3, [r2, #4]
}
    1ff4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1ff8:	46bd      	mov	sp, r7
    1ffa:	bc80      	pop	{r7}
    1ffc:	4770      	bx	lr
    1ffe:	46c0      	nop			(mov r8, r8)
    2000:	40021000 	.word	0x40021000

00002004 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
    2004:	b480      	push	{r7}
    2006:	b085      	sub	sp, #20
    2008:	af00      	add	r7, sp, #0
    200a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    200c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2010:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    2012:	4b0a      	ldr	r3, [pc, #40]	(203c <RCC_PCLK1Config+0x38>)
    2014:	685b      	ldr	r3, [r3, #4]
    2016:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
    2018:	68fb      	ldr	r3, [r7, #12]
    201a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    201e:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
    2020:	68fa      	ldr	r2, [r7, #12]
    2022:	687b      	ldr	r3, [r7, #4]
    2024:	ea42 0303 	orr.w	r3, r2, r3
    2028:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    202a:	4a04      	ldr	r2, [pc, #16]	(203c <RCC_PCLK1Config+0x38>)
    202c:	68fb      	ldr	r3, [r7, #12]
    202e:	6053      	str	r3, [r2, #4]
}
    2030:	f107 0714 	add.w	r7, r7, #20	; 0x14
    2034:	46bd      	mov	sp, r7
    2036:	bc80      	pop	{r7}
    2038:	4770      	bx	lr
    203a:	46c0      	nop			(mov r8, r8)
    203c:	40021000 	.word	0x40021000

00002040 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
    2040:	b480      	push	{r7}
    2042:	b085      	sub	sp, #20
    2044:	af00      	add	r7, sp, #0
    2046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    2048:	f04f 0300 	mov.w	r3, #0	; 0x0
    204c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    204e:	4b0b      	ldr	r3, [pc, #44]	(207c <RCC_PCLK2Config+0x3c>)
    2050:	685b      	ldr	r3, [r3, #4]
    2052:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
    2054:	68fb      	ldr	r3, [r7, #12]
    2056:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
    205a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
    205c:	687b      	ldr	r3, [r7, #4]
    205e:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    2062:	68fb      	ldr	r3, [r7, #12]
    2064:	ea43 0302 	orr.w	r3, r3, r2
    2068:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    206a:	4a04      	ldr	r2, [pc, #16]	(207c <RCC_PCLK2Config+0x3c>)
    206c:	68fb      	ldr	r3, [r7, #12]
    206e:	6053      	str	r3, [r2, #4]
}
    2070:	f107 0714 	add.w	r7, r7, #20	; 0x14
    2074:	46bd      	mov	sp, r7
    2076:	bc80      	pop	{r7}
    2078:	4770      	bx	lr
    207a:	46c0      	nop			(mov r8, r8)
    207c:	40021000 	.word	0x40021000

00002080 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
    2080:	b480      	push	{r7}
    2082:	b083      	sub	sp, #12
    2084:	af00      	add	r7, sp, #0
    2086:	4603      	mov	r3, r0
    2088:	460a      	mov	r2, r1
    208a:	71fb      	strb	r3, [r7, #7]
    208c:	4613      	mov	r3, r2
    208e:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2090:	79bb      	ldrb	r3, [r7, #6]
    2092:	2b00      	cmp	r3, #0
    2094:	d009      	beq.n	20aa <RCC_ITConfig+0x2a>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
    2096:	490d      	ldr	r1, [pc, #52]	(20cc <RCC_ITConfig+0x4c>)
    2098:	4b0c      	ldr	r3, [pc, #48]	(20cc <RCC_ITConfig+0x4c>)
    209a:	781b      	ldrb	r3, [r3, #0]
    209c:	b2da      	uxtb	r2, r3
    209e:	79fb      	ldrb	r3, [r7, #7]
    20a0:	ea42 0303 	orr.w	r3, r2, r3
    20a4:	b2db      	uxtb	r3, r3
    20a6:	700b      	strb	r3, [r1, #0]
    20a8:	e00b      	b.n	20c2 <RCC_ITConfig+0x42>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
    20aa:	4908      	ldr	r1, [pc, #32]	(20cc <RCC_ITConfig+0x4c>)
    20ac:	4b07      	ldr	r3, [pc, #28]	(20cc <RCC_ITConfig+0x4c>)
    20ae:	781b      	ldrb	r3, [r3, #0]
    20b0:	b2da      	uxtb	r2, r3
    20b2:	79fb      	ldrb	r3, [r7, #7]
    20b4:	ea6f 0303 	mvn.w	r3, r3
    20b8:	b2db      	uxtb	r3, r3
    20ba:	ea02 0303 	and.w	r3, r2, r3
    20be:	b2db      	uxtb	r3, r3
    20c0:	700b      	strb	r3, [r1, #0]
  }
}
    20c2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    20c6:	46bd      	mov	sp, r7
    20c8:	bc80      	pop	{r7}
    20ca:	4770      	bx	lr
    20cc:	40021009 	.word	0x40021009

000020d0 <RCC_OTGFSCLKConfig>:
  *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clock source
  *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clock source
  * @retval None
  */
void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
{
    20d0:	b480      	push	{r7}
    20d2:	b083      	sub	sp, #12
    20d4:	af00      	add	r7, sp, #0
    20d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));

  *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
    20d8:	4a03      	ldr	r2, [pc, #12]	(20e8 <RCC_OTGFSCLKConfig+0x18>)
    20da:	687b      	ldr	r3, [r7, #4]
    20dc:	6013      	str	r3, [r2, #0]
}
    20de:	f107 070c 	add.w	r7, r7, #12	; 0xc
    20e2:	46bd      	mov	sp, r7
    20e4:	bc80      	pop	{r7}
    20e6:	4770      	bx	lr
    20e8:	424200d8 	.word	0x424200d8

000020ec <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
    20ec:	b480      	push	{r7}
    20ee:	b085      	sub	sp, #20
    20f0:	af00      	add	r7, sp, #0
    20f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    20f4:	f04f 0300 	mov.w	r3, #0	; 0x0
    20f8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
    20fa:	4b0a      	ldr	r3, [pc, #40]	(2124 <RCC_ADCCLKConfig+0x38>)
    20fc:	685b      	ldr	r3, [r3, #4]
    20fe:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
    2100:	68fb      	ldr	r3, [r7, #12]
    2102:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    2106:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
    2108:	68fa      	ldr	r2, [r7, #12]
    210a:	687b      	ldr	r3, [r7, #4]
    210c:	ea42 0303 	orr.w	r3, r2, r3
    2110:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    2112:	4a04      	ldr	r2, [pc, #16]	(2124 <RCC_ADCCLKConfig+0x38>)
    2114:	68fb      	ldr	r3, [r7, #12]
    2116:	6053      	str	r3, [r2, #4]
}
    2118:	f107 0714 	add.w	r7, r7, #20	; 0x14
    211c:	46bd      	mov	sp, r7
    211e:	bc80      	pop	{r7}
    2120:	4770      	bx	lr
    2122:	46c0      	nop			(mov r8, r8)
    2124:	40021000 	.word	0x40021000

00002128 <RCC_I2S2CLKConfig>:
  *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
  *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
  * @retval None
  */
void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
{
    2128:	b480      	push	{r7}
    212a:	b083      	sub	sp, #12
    212c:	af00      	add	r7, sp, #0
    212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));

  *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
    2130:	4a03      	ldr	r2, [pc, #12]	(2140 <RCC_I2S2CLKConfig+0x18>)
    2132:	687b      	ldr	r3, [r7, #4]
    2134:	6013      	str	r3, [r2, #0]
}
    2136:	f107 070c 	add.w	r7, r7, #12	; 0xc
    213a:	46bd      	mov	sp, r7
    213c:	bc80      	pop	{r7}
    213e:	4770      	bx	lr
    2140:	424205c4 	.word	0x424205c4

00002144 <RCC_I2S3CLKConfig>:
  *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
  *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
  * @retval None
  */
void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
{
    2144:	b480      	push	{r7}
    2146:	b083      	sub	sp, #12
    2148:	af00      	add	r7, sp, #0
    214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));

  *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
    214c:	4a03      	ldr	r2, [pc, #12]	(215c <RCC_I2S3CLKConfig+0x18>)
    214e:	687b      	ldr	r3, [r7, #4]
    2150:	6013      	str	r3, [r2, #0]
}
    2152:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2156:	46bd      	mov	sp, r7
    2158:	bc80      	pop	{r7}
    215a:	4770      	bx	lr
    215c:	424205c8 	.word	0x424205c8

00002160 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
    2160:	b480      	push	{r7}
    2162:	b083      	sub	sp, #12
    2164:	af00      	add	r7, sp, #0
    2166:	4603      	mov	r3, r0
    2168:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    216a:	4a0f      	ldr	r2, [pc, #60]	(21a8 <RCC_LSEConfig+0x48>)
    216c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2170:	7013      	strb	r3, [r2, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    2172:	4a0d      	ldr	r2, [pc, #52]	(21a8 <RCC_LSEConfig+0x48>)
    2174:	f04f 0300 	mov.w	r3, #0	; 0x0
    2178:	7013      	strb	r3, [r2, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
    217a:	79fb      	ldrb	r3, [r7, #7]
    217c:	603b      	str	r3, [r7, #0]
    217e:	683b      	ldr	r3, [r7, #0]
    2180:	2b01      	cmp	r3, #1
    2182:	d003      	beq.n	218c <RCC_LSEConfig+0x2c>
    2184:	683b      	ldr	r3, [r7, #0]
    2186:	2b04      	cmp	r3, #4
    2188:	d005      	beq.n	2196 <RCC_LSEConfig+0x36>
    218a:	e008      	b.n	219e <RCC_LSEConfig+0x3e>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
    218c:	4b06      	ldr	r3, [pc, #24]	(21a8 <RCC_LSEConfig+0x48>)
    218e:	f04f 0201 	mov.w	r2, #1	; 0x1
    2192:	701a      	strb	r2, [r3, #0]
    2194:	e003      	b.n	219e <RCC_LSEConfig+0x3e>
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
    2196:	4b04      	ldr	r3, [pc, #16]	(21a8 <RCC_LSEConfig+0x48>)
    2198:	f04f 0205 	mov.w	r2, #5	; 0x5
    219c:	701a      	strb	r2, [r3, #0]
      break;            
      
    default:
      break;      
  }
}
    219e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    21a2:	46bd      	mov	sp, r7
    21a4:	bc80      	pop	{r7}
    21a6:	4770      	bx	lr
    21a8:	40021020 	.word	0x40021020

000021ac <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
    21ac:	b480      	push	{r7}
    21ae:	b083      	sub	sp, #12
    21b0:	af00      	add	r7, sp, #0
    21b2:	4603      	mov	r3, r0
    21b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
    21b6:	4a04      	ldr	r2, [pc, #16]	(21c8 <RCC_LSICmd+0x1c>)
    21b8:	79fb      	ldrb	r3, [r7, #7]
    21ba:	6013      	str	r3, [r2, #0]
}
    21bc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    21c0:	46bd      	mov	sp, r7
    21c2:	bc80      	pop	{r7}
    21c4:	4770      	bx	lr
    21c6:	46c0      	nop			(mov r8, r8)
    21c8:	42420480 	.word	0x42420480

000021cc <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
    21cc:	b480      	push	{r7}
    21ce:	b083      	sub	sp, #12
    21d0:	af00      	add	r7, sp, #0
    21d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
    21d4:	4905      	ldr	r1, [pc, #20]	(21ec <RCC_RTCCLKConfig+0x20>)
    21d6:	4b05      	ldr	r3, [pc, #20]	(21ec <RCC_RTCCLKConfig+0x20>)
    21d8:	6a1a      	ldr	r2, [r3, #32]
    21da:	687b      	ldr	r3, [r7, #4]
    21dc:	ea42 0303 	orr.w	r3, r2, r3
    21e0:	620b      	str	r3, [r1, #32]
}
    21e2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    21e6:	46bd      	mov	sp, r7
    21e8:	bc80      	pop	{r7}
    21ea:	4770      	bx	lr
    21ec:	40021000 	.word	0x40021000

000021f0 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
    21f0:	b480      	push	{r7}
    21f2:	b083      	sub	sp, #12
    21f4:	af00      	add	r7, sp, #0
    21f6:	4603      	mov	r3, r0
    21f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
    21fa:	4a04      	ldr	r2, [pc, #16]	(220c <RCC_RTCCLKCmd+0x1c>)
    21fc:	79fb      	ldrb	r3, [r7, #7]
    21fe:	6013      	str	r3, [r2, #0]
}
    2200:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2204:	46bd      	mov	sp, r7
    2206:	bc80      	pop	{r7}
    2208:	4770      	bx	lr
    220a:	46c0      	nop			(mov r8, r8)
    220c:	4242043c 	.word	0x4242043c

00002210 <RCC_GetClocksFreq>:
  * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
  *   the clocks frequencies.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
    2210:	b480      	push	{r7}
    2212:	b08b      	sub	sp, #44
    2214:	af00      	add	r7, sp, #0
    2216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
    2218:	f04f 0300 	mov.w	r3, #0	; 0x0
    221c:	60bb      	str	r3, [r7, #8]
    221e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2222:	60fb      	str	r3, [r7, #12]
    2224:	f04f 0300 	mov.w	r3, #0	; 0x0
    2228:	613b      	str	r3, [r7, #16]
    222a:	f04f 0300 	mov.w	r3, #0	; 0x0
    222e:	617b      	str	r3, [r7, #20]

#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
    2230:	f04f 0300 	mov.w	r3, #0	; 0x0
    2234:	61bb      	str	r3, [r7, #24]
    2236:	f04f 0300 	mov.w	r3, #0	; 0x0
    223a:	61fb      	str	r3, [r7, #28]
    223c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2240:	623b      	str	r3, [r7, #32]
    2242:	f04f 0300 	mov.w	r3, #0	; 0x0
    2246:	627b      	str	r3, [r7, #36]
#endif /* STM32F10X_CL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
    2248:	4b68      	ldr	r3, [pc, #416]	(23ec <RCC_GetClocksFreq+0x1dc>)
    224a:	685b      	ldr	r3, [r3, #4]
    224c:	f003 030c 	and.w	r3, r3, #12	; 0xc
    2250:	60bb      	str	r3, [r7, #8]
  
  switch (tmp)
    2252:	68bb      	ldr	r3, [r7, #8]
    2254:	603b      	str	r3, [r7, #0]
    2256:	683b      	ldr	r3, [r7, #0]
    2258:	2b04      	cmp	r3, #4
    225a:	d009      	beq.n	2270 <RCC_GetClocksFreq+0x60>
    225c:	683b      	ldr	r3, [r7, #0]
    225e:	2b08      	cmp	r3, #8
    2260:	d00a      	beq.n	2278 <RCC_GetClocksFreq+0x68>
    2262:	683b      	ldr	r3, [r7, #0]
    2264:	2b00      	cmp	r3, #0
    2266:	d165      	bne.n	2334 <RCC_GetClocksFreq+0x124>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
    2268:	687a      	ldr	r2, [r7, #4]
    226a:	4b61      	ldr	r3, [pc, #388]	(23f0 <RCC_GetClocksFreq+0x1e0>)
    226c:	6013      	str	r3, [r2, #0]
    226e:	e064      	b.n	233a <RCC_GetClocksFreq+0x12a>
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
    2270:	687a      	ldr	r2, [r7, #4]
    2272:	4b60      	ldr	r3, [pc, #384]	(23f4 <RCC_GetClocksFreq+0x1e4>)
    2274:	6013      	str	r3, [r2, #0]
    2276:	e060      	b.n	233a <RCC_GetClocksFreq+0x12a>
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
    2278:	4b5c      	ldr	r3, [pc, #368]	(23ec <RCC_GetClocksFreq+0x1dc>)
    227a:	685b      	ldr	r3, [r3, #4]
    227c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    2280:	60fb      	str	r3, [r7, #12]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
    2282:	4b5a      	ldr	r3, [pc, #360]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2284:	685b      	ldr	r3, [r3, #4]
    2286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    228a:	613b      	str	r3, [r7, #16]
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
        }
      }
#else
      pllmull = pllmull >> 18;
    228c:	68fb      	ldr	r3, [r7, #12]
    228e:	ea4f 4393 	mov.w	r3, r3, lsr #18
    2292:	60fb      	str	r3, [r7, #12]
      
      if (pllmull != 0x0D)
    2294:	68fb      	ldr	r3, [r7, #12]
    2296:	2b0d      	cmp	r3, #13
    2298:	d004      	beq.n	22a4 <RCC_GetClocksFreq+0x94>
      {
         pllmull += 2;
    229a:	68fb      	ldr	r3, [r7, #12]
    229c:	f103 0302 	add.w	r3, r3, #2	; 0x2
    22a0:	60fb      	str	r3, [r7, #12]
    22a2:	e002      	b.n	22aa <RCC_GetClocksFreq+0x9a>
      }
      else
      { /* PLL multiplication factor = PLL input clock * 6.5 */
        pllmull = 13 / 2; 
    22a4:	f04f 0306 	mov.w	r3, #6	; 0x6
    22a8:	60fb      	str	r3, [r7, #12]
      }
            
      if (pllsource == 0x00)
    22aa:	693b      	ldr	r3, [r7, #16]
    22ac:	2b00      	cmp	r3, #0
    22ae:	d106      	bne.n	22be <RCC_GetClocksFreq+0xae>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
    22b0:	68fa      	ldr	r2, [r7, #12]
    22b2:	4b51      	ldr	r3, [pc, #324]	(23f8 <RCC_GetClocksFreq+0x1e8>)
    22b4:	fb03 f202 	mul.w	r2, r3, r2
    22b8:	687b      	ldr	r3, [r7, #4]
    22ba:	601a      	str	r2, [r3, #0]
    22bc:	e03d      	b.n	233a <RCC_GetClocksFreq+0x12a>
      }
      else
      {/* PREDIV1 selected as PLL clock entry */
        
        /* Get PREDIV1 clock source and division factor */
        prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
    22be:	4b4b      	ldr	r3, [pc, #300]	(23ec <RCC_GetClocksFreq+0x1dc>)
    22c0:	6adb      	ldr	r3, [r3, #44]
    22c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    22c6:	61bb      	str	r3, [r7, #24]
        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
    22c8:	4b48      	ldr	r3, [pc, #288]	(23ec <RCC_GetClocksFreq+0x1dc>)
    22ca:	6adb      	ldr	r3, [r3, #44]
    22cc:	f003 030f 	and.w	r3, r3, #15	; 0xf
    22d0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    22d4:	61fb      	str	r3, [r7, #28]
        
        if (prediv1source == 0)
    22d6:	69bb      	ldr	r3, [r7, #24]
    22d8:	2b00      	cmp	r3, #0
    22da:	d109      	bne.n	22f0 <RCC_GetClocksFreq+0xe0>
        { /* HSE oscillator clock selected as PREDIV1 clock entry */
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value / prediv1factor) * pllmull;          
    22dc:	4a45      	ldr	r2, [pc, #276]	(23f4 <RCC_GetClocksFreq+0x1e4>)
    22de:	69fb      	ldr	r3, [r7, #28]
    22e0:	fbb2 f2f3 	udiv	r2, r2, r3
    22e4:	68fb      	ldr	r3, [r7, #12]
    22e6:	fb03 f202 	mul.w	r2, r3, r2
    22ea:	687b      	ldr	r3, [r7, #4]
    22ec:	601a      	str	r2, [r3, #0]
    22ee:	e024      	b.n	233a <RCC_GetClocksFreq+0x12a>
        }
        else
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
    22f0:	4b3e      	ldr	r3, [pc, #248]	(23ec <RCC_GetClocksFreq+0x1dc>)
    22f2:	6adb      	ldr	r3, [r3, #44]
    22f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    22f8:	ea4f 1313 	mov.w	r3, r3, lsr #4
    22fc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    2300:	623b      	str	r3, [r7, #32]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
    2302:	4b3a      	ldr	r3, [pc, #232]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2304:	6adb      	ldr	r3, [r3, #44]
    2306:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    230a:	ea4f 2313 	mov.w	r3, r3, lsr #8
    230e:	f103 0302 	add.w	r3, r3, #2	; 0x2
    2312:	627b      	str	r3, [r7, #36]
          RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
    2314:	4a37      	ldr	r2, [pc, #220]	(23f4 <RCC_GetClocksFreq+0x1e4>)
    2316:	6a3b      	ldr	r3, [r7, #32]
    2318:	fbb2 f2f3 	udiv	r2, r2, r3
    231c:	6a7b      	ldr	r3, [r7, #36]
    231e:	fb03 f202 	mul.w	r2, r3, r2
    2322:	69fb      	ldr	r3, [r7, #28]
    2324:	fbb2 f2f3 	udiv	r2, r2, r3
    2328:	68fb      	ldr	r3, [r7, #12]
    232a:	fb03 f202 	mul.w	r2, r3, r2
    232e:	687b      	ldr	r3, [r7, #4]
    2330:	601a      	str	r2, [r3, #0]
    2332:	e002      	b.n	233a <RCC_GetClocksFreq+0x12a>
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
    2334:	687a      	ldr	r2, [r7, #4]
    2336:	4b2e      	ldr	r3, [pc, #184]	(23f0 <RCC_GetClocksFreq+0x1e0>)
    2338:	6013      	str	r3, [r2, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
    233a:	4b2c      	ldr	r3, [pc, #176]	(23ec <RCC_GetClocksFreq+0x1dc>)
    233c:	685b      	ldr	r3, [r3, #4]
    233e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    2342:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 4;
    2344:	68bb      	ldr	r3, [r7, #8]
    2346:	ea4f 1313 	mov.w	r3, r3, lsr #4
    234a:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    234c:	68ba      	ldr	r2, [r7, #8]
    234e:	4b2b      	ldr	r3, [pc, #172]	(23fc <RCC_GetClocksFreq+0x1ec>)
    2350:	5c9b      	ldrb	r3, [r3, r2]
    2352:	b2db      	uxtb	r3, r3
    2354:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
    2356:	687b      	ldr	r3, [r7, #4]
    2358:	681a      	ldr	r2, [r3, #0]
    235a:	697b      	ldr	r3, [r7, #20]
    235c:	fa22 f203 	lsr.w	r2, r2, r3
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
    2364:	4b21      	ldr	r3, [pc, #132]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2366:	685b      	ldr	r3, [r3, #4]
    2368:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    236c:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 8;
    236e:	68bb      	ldr	r3, [r7, #8]
    2370:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2374:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    2376:	68ba      	ldr	r2, [r7, #8]
    2378:	4b20      	ldr	r3, [pc, #128]	(23fc <RCC_GetClocksFreq+0x1ec>)
    237a:	5c9b      	ldrb	r3, [r3, r2]
    237c:	b2db      	uxtb	r3, r3
    237e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    2380:	687b      	ldr	r3, [r7, #4]
    2382:	685a      	ldr	r2, [r3, #4]
    2384:	697b      	ldr	r3, [r7, #20]
    2386:	fa22 f203 	lsr.w	r2, r2, r3
    238a:	687b      	ldr	r3, [r7, #4]
    238c:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
    238e:	4b17      	ldr	r3, [pc, #92]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2390:	685b      	ldr	r3, [r3, #4]
    2392:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    2396:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 11;
    2398:	68bb      	ldr	r3, [r7, #8]
    239a:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    239e:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    23a0:	68ba      	ldr	r2, [r7, #8]
    23a2:	4b16      	ldr	r3, [pc, #88]	(23fc <RCC_GetClocksFreq+0x1ec>)
    23a4:	5c9b      	ldrb	r3, [r3, r2]
    23a6:	b2db      	uxtb	r3, r3
    23a8:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    23aa:	687b      	ldr	r3, [r7, #4]
    23ac:	685a      	ldr	r2, [r3, #4]
    23ae:	697b      	ldr	r3, [r7, #20]
    23b0:	fa22 f203 	lsr.w	r2, r2, r3
    23b4:	687b      	ldr	r3, [r7, #4]
    23b6:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
    23b8:	4b0c      	ldr	r3, [pc, #48]	(23ec <RCC_GetClocksFreq+0x1dc>)
    23ba:	685b      	ldr	r3, [r3, #4]
    23bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    23c0:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 14;
    23c2:	68bb      	ldr	r3, [r7, #8]
    23c4:	ea4f 3393 	mov.w	r3, r3, lsr #14
    23c8:	60bb      	str	r3, [r7, #8]
  presc = ADCPrescTable[tmp];
    23ca:	68ba      	ldr	r2, [r7, #8]
    23cc:	4b0c      	ldr	r3, [pc, #48]	(2400 <RCC_GetClocksFreq+0x1f0>)
    23ce:	5c9b      	ldrb	r3, [r3, r2]
    23d0:	b2db      	uxtb	r3, r3
    23d2:	617b      	str	r3, [r7, #20]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
    23d4:	687b      	ldr	r3, [r7, #4]
    23d6:	68da      	ldr	r2, [r3, #12]
    23d8:	697b      	ldr	r3, [r7, #20]
    23da:	fbb2 f2f3 	udiv	r2, r2, r3
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	611a      	str	r2, [r3, #16]
}
    23e2:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    23e6:	46bd      	mov	sp, r7
    23e8:	bc80      	pop	{r7}
    23ea:	4770      	bx	lr
    23ec:	40021000 	.word	0x40021000
    23f0:	007a1200 	.word	0x007a1200
    23f4:	017d7840 	.word	0x017d7840
    23f8:	003d0900 	.word	0x003d0900
    23fc:	20000000 	.word	0x20000000
    2400:	20000010 	.word	0x20000010

00002404 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    2404:	b480      	push	{r7}
    2406:	b083      	sub	sp, #12
    2408:	af00      	add	r7, sp, #0
    240a:	6078      	str	r0, [r7, #4]
    240c:	460b      	mov	r3, r1
    240e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    2410:	78fb      	ldrb	r3, [r7, #3]
    2412:	2b00      	cmp	r3, #0
    2414:	d007      	beq.n	2426 <RCC_AHBPeriphClockCmd+0x22>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
    2416:	490b      	ldr	r1, [pc, #44]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    2418:	4b0a      	ldr	r3, [pc, #40]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    241a:	695a      	ldr	r2, [r3, #20]
    241c:	687b      	ldr	r3, [r7, #4]
    241e:	ea42 0303 	orr.w	r3, r2, r3
    2422:	614b      	str	r3, [r1, #20]
    2424:	e008      	b.n	2438 <RCC_AHBPeriphClockCmd+0x34>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
    2426:	4907      	ldr	r1, [pc, #28]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    2428:	4b06      	ldr	r3, [pc, #24]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    242a:	695a      	ldr	r2, [r3, #20]
    242c:	687b      	ldr	r3, [r7, #4]
    242e:	ea6f 0303 	mvn.w	r3, r3
    2432:	ea02 0303 	and.w	r3, r2, r3
    2436:	614b      	str	r3, [r1, #20]
  }
}
    2438:	f107 070c 	add.w	r7, r7, #12	; 0xc
    243c:	46bd      	mov	sp, r7
    243e:	bc80      	pop	{r7}
    2440:	4770      	bx	lr
    2442:	46c0      	nop			(mov r8, r8)
    2444:	40021000 	.word	0x40021000

00002448 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    2448:	b480      	push	{r7}
    244a:	b083      	sub	sp, #12
    244c:	af00      	add	r7, sp, #0
    244e:	6078      	str	r0, [r7, #4]
    2450:	460b      	mov	r3, r1
    2452:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2454:	78fb      	ldrb	r3, [r7, #3]
    2456:	2b00      	cmp	r3, #0
    2458:	d007      	beq.n	246a <RCC_APB2PeriphClockCmd+0x22>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
    245a:	490b      	ldr	r1, [pc, #44]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    245c:	4b0a      	ldr	r3, [pc, #40]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    245e:	699a      	ldr	r2, [r3, #24]
    2460:	687b      	ldr	r3, [r7, #4]
    2462:	ea42 0303 	orr.w	r3, r2, r3
    2466:	618b      	str	r3, [r1, #24]
    2468:	e008      	b.n	247c <RCC_APB2PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
    246a:	4907      	ldr	r1, [pc, #28]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    246c:	4b06      	ldr	r3, [pc, #24]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    246e:	699a      	ldr	r2, [r3, #24]
    2470:	687b      	ldr	r3, [r7, #4]
    2472:	ea6f 0303 	mvn.w	r3, r3
    2476:	ea02 0303 	and.w	r3, r2, r3
    247a:	618b      	str	r3, [r1, #24]
  }
}
    247c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2480:	46bd      	mov	sp, r7
    2482:	bc80      	pop	{r7}
    2484:	4770      	bx	lr
    2486:	46c0      	nop			(mov r8, r8)
    2488:	40021000 	.word	0x40021000

0000248c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    248c:	b480      	push	{r7}
    248e:	b083      	sub	sp, #12
    2490:	af00      	add	r7, sp, #0
    2492:	6078      	str	r0, [r7, #4]
    2494:	460b      	mov	r3, r1
    2496:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2498:	78fb      	ldrb	r3, [r7, #3]
    249a:	2b00      	cmp	r3, #0
    249c:	d007      	beq.n	24ae <RCC_APB1PeriphClockCmd+0x22>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
    249e:	490b      	ldr	r1, [pc, #44]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24a0:	4b0a      	ldr	r3, [pc, #40]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24a2:	69da      	ldr	r2, [r3, #28]
    24a4:	687b      	ldr	r3, [r7, #4]
    24a6:	ea42 0303 	orr.w	r3, r2, r3
    24aa:	61cb      	str	r3, [r1, #28]
    24ac:	e008      	b.n	24c0 <RCC_APB1PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
    24ae:	4907      	ldr	r1, [pc, #28]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24b0:	4b06      	ldr	r3, [pc, #24]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24b2:	69da      	ldr	r2, [r3, #28]
    24b4:	687b      	ldr	r3, [r7, #4]
    24b6:	ea6f 0303 	mvn.w	r3, r3
    24ba:	ea02 0303 	and.w	r3, r2, r3
    24be:	61cb      	str	r3, [r1, #28]
  }
}
    24c0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    24c4:	46bd      	mov	sp, r7
    24c6:	bc80      	pop	{r7}
    24c8:	4770      	bx	lr
    24ca:	46c0      	nop			(mov r8, r8)
    24cc:	40021000 	.word	0x40021000

000024d0 <RCC_AHBPeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    24d0:	b480      	push	{r7}
    24d2:	b083      	sub	sp, #12
    24d4:	af00      	add	r7, sp, #0
    24d6:	6078      	str	r0, [r7, #4]
    24d8:	460b      	mov	r3, r1
    24da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    24dc:	78fb      	ldrb	r3, [r7, #3]
    24de:	2b00      	cmp	r3, #0
    24e0:	d007      	beq.n	24f2 <RCC_AHBPeriphResetCmd+0x22>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
    24e2:	490b      	ldr	r1, [pc, #44]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24e4:	4b0a      	ldr	r3, [pc, #40]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24e6:	6a9a      	ldr	r2, [r3, #40]
    24e8:	687b      	ldr	r3, [r7, #4]
    24ea:	ea42 0303 	orr.w	r3, r2, r3
    24ee:	628b      	str	r3, [r1, #40]
    24f0:	e008      	b.n	2504 <RCC_AHBPeriphResetCmd+0x34>
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
    24f2:	4907      	ldr	r1, [pc, #28]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24f4:	4b06      	ldr	r3, [pc, #24]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24f6:	6a9a      	ldr	r2, [r3, #40]
    24f8:	687b      	ldr	r3, [r7, #4]
    24fa:	ea6f 0303 	mvn.w	r3, r3
    24fe:	ea02 0303 	and.w	r3, r2, r3
    2502:	628b      	str	r3, [r1, #40]
  }
}
    2504:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2508:	46bd      	mov	sp, r7
    250a:	bc80      	pop	{r7}
    250c:	4770      	bx	lr
    250e:	46c0      	nop			(mov r8, r8)
    2510:	40021000 	.word	0x40021000

00002514 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    2514:	b480      	push	{r7}
    2516:	b083      	sub	sp, #12
    2518:	af00      	add	r7, sp, #0
    251a:	6078      	str	r0, [r7, #4]
    251c:	460b      	mov	r3, r1
    251e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2520:	78fb      	ldrb	r3, [r7, #3]
    2522:	2b00      	cmp	r3, #0
    2524:	d007      	beq.n	2536 <RCC_APB2PeriphResetCmd+0x22>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
    2526:	490b      	ldr	r1, [pc, #44]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    2528:	4b0a      	ldr	r3, [pc, #40]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    252a:	68da      	ldr	r2, [r3, #12]
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	ea42 0303 	orr.w	r3, r2, r3
    2532:	60cb      	str	r3, [r1, #12]
    2534:	e008      	b.n	2548 <RCC_APB2PeriphResetCmd+0x34>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
    2536:	4907      	ldr	r1, [pc, #28]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    2538:	4b06      	ldr	r3, [pc, #24]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    253a:	68da      	ldr	r2, [r3, #12]
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	ea6f 0303 	mvn.w	r3, r3
    2542:	ea02 0303 	and.w	r3, r2, r3
    2546:	60cb      	str	r3, [r1, #12]
  }
}
    2548:	f107 070c 	add.w	r7, r7, #12	; 0xc
    254c:	46bd      	mov	sp, r7
    254e:	bc80      	pop	{r7}
    2550:	4770      	bx	lr
    2552:	46c0      	nop			(mov r8, r8)
    2554:	40021000 	.word	0x40021000

00002558 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    2558:	b480      	push	{r7}
    255a:	b083      	sub	sp, #12
    255c:	af00      	add	r7, sp, #0
    255e:	6078      	str	r0, [r7, #4]
    2560:	460b      	mov	r3, r1
    2562:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2564:	78fb      	ldrb	r3, [r7, #3]
    2566:	2b00      	cmp	r3, #0
    2568:	d007      	beq.n	257a <RCC_APB1PeriphResetCmd+0x22>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
    256a:	490b      	ldr	r1, [pc, #44]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    256c:	4b0a      	ldr	r3, [pc, #40]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    256e:	691a      	ldr	r2, [r3, #16]
    2570:	687b      	ldr	r3, [r7, #4]
    2572:	ea42 0303 	orr.w	r3, r2, r3
    2576:	610b      	str	r3, [r1, #16]
    2578:	e008      	b.n	258c <RCC_APB1PeriphResetCmd+0x34>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
    257a:	4907      	ldr	r1, [pc, #28]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    257c:	4b06      	ldr	r3, [pc, #24]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    257e:	691a      	ldr	r2, [r3, #16]
    2580:	687b      	ldr	r3, [r7, #4]
    2582:	ea6f 0303 	mvn.w	r3, r3
    2586:	ea02 0303 	and.w	r3, r2, r3
    258a:	610b      	str	r3, [r1, #16]
  }
}
    258c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2590:	46bd      	mov	sp, r7
    2592:	bc80      	pop	{r7}
    2594:	4770      	bx	lr
    2596:	46c0      	nop			(mov r8, r8)
    2598:	40021000 	.word	0x40021000

0000259c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
    259c:	b480      	push	{r7}
    259e:	b083      	sub	sp, #12
    25a0:	af00      	add	r7, sp, #0
    25a2:	4603      	mov	r3, r0
    25a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
    25a6:	4a04      	ldr	r2, [pc, #16]	(25b8 <RCC_BackupResetCmd+0x1c>)
    25a8:	79fb      	ldrb	r3, [r7, #7]
    25aa:	6013      	str	r3, [r2, #0]
}
    25ac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    25b0:	46bd      	mov	sp, r7
    25b2:	bc80      	pop	{r7}
    25b4:	4770      	bx	lr
    25b6:	46c0      	nop			(mov r8, r8)
    25b8:	42420440 	.word	0x42420440

000025bc <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
    25bc:	b480      	push	{r7}
    25be:	b083      	sub	sp, #12
    25c0:	af00      	add	r7, sp, #0
    25c2:	4603      	mov	r3, r0
    25c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
    25c6:	4a04      	ldr	r2, [pc, #16]	(25d8 <RCC_ClockSecuritySystemCmd+0x1c>)
    25c8:	79fb      	ldrb	r3, [r7, #7]
    25ca:	6013      	str	r3, [r2, #0]
}
    25cc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    25d0:	46bd      	mov	sp, r7
    25d2:	bc80      	pop	{r7}
    25d4:	4770      	bx	lr
    25d6:	46c0      	nop			(mov r8, r8)
    25d8:	4242004c 	.word	0x4242004c

000025dc <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    25dc:	b480      	push	{r7}
    25de:	b083      	sub	sp, #12
    25e0:	af00      	add	r7, sp, #0
    25e2:	4603      	mov	r3, r0
    25e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    25e6:	4a04      	ldr	r2, [pc, #16]	(25f8 <RCC_MCOConfig+0x1c>)
    25e8:	79fb      	ldrb	r3, [r7, #7]
    25ea:	7013      	strb	r3, [r2, #0]
}
    25ec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    25f0:	46bd      	mov	sp, r7
    25f2:	bc80      	pop	{r7}
    25f4:	4770      	bx	lr
    25f6:	46c0      	nop			(mov r8, r8)
    25f8:	40021007 	.word	0x40021007

000025fc <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    25fc:	b480      	push	{r7}
    25fe:	b087      	sub	sp, #28
    2600:	af00      	add	r7, sp, #0
    2602:	4603      	mov	r3, r0
    2604:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
    2606:	f04f 0300 	mov.w	r3, #0	; 0x0
    260a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
    260c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2610:	613b      	str	r3, [r7, #16]
  FlagStatus bitstatus = RESET;
    2612:	f04f 0300 	mov.w	r3, #0	; 0x0
    2616:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    2618:	79fb      	ldrb	r3, [r7, #7]
    261a:	ea4f 1353 	mov.w	r3, r3, lsr #5
    261e:	b2db      	uxtb	r3, r3
    2620:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
    2622:	68fb      	ldr	r3, [r7, #12]
    2624:	2b01      	cmp	r3, #1
    2626:	d103      	bne.n	2630 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
    2628:	4b14      	ldr	r3, [pc, #80]	(267c <RCC_GetFlagStatus+0x80>)
    262a:	681b      	ldr	r3, [r3, #0]
    262c:	613b      	str	r3, [r7, #16]
    262e:	e009      	b.n	2644 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    2630:	68fb      	ldr	r3, [r7, #12]
    2632:	2b02      	cmp	r3, #2
    2634:	d103      	bne.n	263e <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
    2636:	4b11      	ldr	r3, [pc, #68]	(267c <RCC_GetFlagStatus+0x80>)
    2638:	6a1b      	ldr	r3, [r3, #32]
    263a:	613b      	str	r3, [r7, #16]
    263c:	e002      	b.n	2644 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    263e:	4b0f      	ldr	r3, [pc, #60]	(267c <RCC_GetFlagStatus+0x80>)
    2640:	6a5b      	ldr	r3, [r3, #36]
    2642:	613b      	str	r3, [r7, #16]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    2644:	79fb      	ldrb	r3, [r7, #7]
    2646:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    264a:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    264c:	68fa      	ldr	r2, [r7, #12]
    264e:	693b      	ldr	r3, [r7, #16]
    2650:	fa23 f302 	lsr.w	r3, r3, r2
    2654:	f003 0301 	and.w	r3, r3, #1	; 0x1
    2658:	b2db      	uxtb	r3, r3
    265a:	2b00      	cmp	r3, #0
    265c:	d003      	beq.n	2666 <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
    265e:	f04f 0301 	mov.w	r3, #1	; 0x1
    2662:	75fb      	strb	r3, [r7, #23]
    2664:	e002      	b.n	266c <RCC_GetFlagStatus+0x70>
  }
  else
  {
    bitstatus = RESET;
    2666:	f04f 0300 	mov.w	r3, #0	; 0x0
    266a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the flag status */
  return bitstatus;
    266c:	7dfb      	ldrb	r3, [r7, #23]
}
    266e:	4618      	mov	r0, r3
    2670:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2674:	46bd      	mov	sp, r7
    2676:	bc80      	pop	{r7}
    2678:	4770      	bx	lr
    267a:	46c0      	nop			(mov r8, r8)
    267c:	40021000 	.word	0x40021000

00002680 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    2680:	b480      	push	{r7}
    2682:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    2684:	4a04      	ldr	r2, [pc, #16]	(2698 <RCC_ClearFlag+0x18>)
    2686:	4b04      	ldr	r3, [pc, #16]	(2698 <RCC_ClearFlag+0x18>)
    2688:	6a5b      	ldr	r3, [r3, #36]
    268a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    268e:	6253      	str	r3, [r2, #36]
}
    2690:	46bd      	mov	sp, r7
    2692:	bc80      	pop	{r7}
    2694:	4770      	bx	lr
    2696:	46c0      	nop			(mov r8, r8)
    2698:	40021000 	.word	0x40021000

0000269c <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    269c:	b480      	push	{r7}
    269e:	b085      	sub	sp, #20
    26a0:	af00      	add	r7, sp, #0
    26a2:	4603      	mov	r3, r0
    26a4:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    26a6:	f04f 0300 	mov.w	r3, #0	; 0x0
    26aa:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    26ac:	4b0a      	ldr	r3, [pc, #40]	(26d8 <RCC_GetITStatus+0x3c>)
    26ae:	689a      	ldr	r2, [r3, #8]
    26b0:	79fb      	ldrb	r3, [r7, #7]
    26b2:	ea02 0303 	and.w	r3, r2, r3
    26b6:	2b00      	cmp	r3, #0
    26b8:	d003      	beq.n	26c2 <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    26ba:	f04f 0301 	mov.w	r3, #1	; 0x1
    26be:	73fb      	strb	r3, [r7, #15]
    26c0:	e002      	b.n	26c8 <RCC_GetITStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
    26c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    26c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    26c8:	7bfb      	ldrb	r3, [r7, #15]
}
    26ca:	4618      	mov	r0, r3
    26cc:	f107 0714 	add.w	r7, r7, #20	; 0x14
    26d0:	46bd      	mov	sp, r7
    26d2:	bc80      	pop	{r7}
    26d4:	4770      	bx	lr
    26d6:	46c0      	nop			(mov r8, r8)
    26d8:	40021000 	.word	0x40021000

000026dc <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    26dc:	b480      	push	{r7}
    26de:	b083      	sub	sp, #12
    26e0:	af00      	add	r7, sp, #0
    26e2:	4603      	mov	r3, r0
    26e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    26e6:	4a04      	ldr	r2, [pc, #16]	(26f8 <RCC_ClearITPendingBit+0x1c>)
    26e8:	79fb      	ldrb	r3, [r7, #7]
    26ea:	7013      	strb	r3, [r2, #0]
}
    26ec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    26f0:	46bd      	mov	sp, r7
    26f2:	bc80      	pop	{r7}
    26f4:	4770      	bx	lr
    26f6:	46c0      	nop			(mov r8, r8)
    26f8:	4002100a 	.word	0x4002100a

000026fc <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
    26fc:	b580      	push	{r7, lr}
    26fe:	b082      	sub	sp, #8
    2700:	af00      	add	r7, sp, #0
    2702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
    2704:	687a      	ldr	r2, [r7, #4]
    2706:	4b45      	ldr	r3, [pc, #276]	(281c <TIM_DeInit+0x120>)
    2708:	429a      	cmp	r2, r3
    270a:	d10c      	bne.n	2726 <TIM_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    270c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2710:	f04f 0101 	mov.w	r1, #1	; 0x1
    2714:	f7ff fefe 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
    2718:	f44f 6000 	mov.w	r0, #2048	; 0x800
    271c:	f04f 0100 	mov.w	r1, #0	; 0x0
    2720:	f7ff fef8 	bl	2514 <RCC_APB2PeriphResetCmd>
    2724:	e075      	b.n	2812 <TIM_DeInit+0x116>
  }     
  else if (TIMx == TIM2)
    2726:	687b      	ldr	r3, [r7, #4]
    2728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    272c:	d10c      	bne.n	2748 <TIM_DeInit+0x4c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    272e:	f04f 0001 	mov.w	r0, #1	; 0x1
    2732:	f04f 0101 	mov.w	r1, #1	; 0x1
    2736:	f7ff ff0f 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
    273a:	f04f 0001 	mov.w	r0, #1	; 0x1
    273e:	f04f 0100 	mov.w	r1, #0	; 0x0
    2742:	f7ff ff09 	bl	2558 <RCC_APB1PeriphResetCmd>
    2746:	e064      	b.n	2812 <TIM_DeInit+0x116>
  }
  else if (TIMx == TIM3)
    2748:	687a      	ldr	r2, [r7, #4]
    274a:	4b35      	ldr	r3, [pc, #212]	(2820 <TIM_DeInit+0x124>)
    274c:	429a      	cmp	r2, r3
    274e:	d10c      	bne.n	276a <TIM_DeInit+0x6e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    2750:	f04f 0002 	mov.w	r0, #2	; 0x2
    2754:	f04f 0101 	mov.w	r1, #1	; 0x1
    2758:	f7ff fefe 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
    275c:	f04f 0002 	mov.w	r0, #2	; 0x2
    2760:	f04f 0100 	mov.w	r1, #0	; 0x0
    2764:	f7ff fef8 	bl	2558 <RCC_APB1PeriphResetCmd>
    2768:	e053      	b.n	2812 <TIM_DeInit+0x116>
  }
  else if (TIMx == TIM4)
    276a:	687a      	ldr	r2, [r7, #4]
    276c:	4b2d      	ldr	r3, [pc, #180]	(2824 <TIM_DeInit+0x128>)
    276e:	429a      	cmp	r2, r3
    2770:	d10c      	bne.n	278c <TIM_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    2772:	f04f 0004 	mov.w	r0, #4	; 0x4
    2776:	f04f 0101 	mov.w	r1, #1	; 0x1
    277a:	f7ff feed 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
    277e:	f04f 0004 	mov.w	r0, #4	; 0x4
    2782:	f04f 0100 	mov.w	r1, #0	; 0x0
    2786:	f7ff fee7 	bl	2558 <RCC_APB1PeriphResetCmd>
    278a:	e042      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else if (TIMx == TIM5)
    278c:	687a      	ldr	r2, [r7, #4]
    278e:	4b26      	ldr	r3, [pc, #152]	(2828 <TIM_DeInit+0x12c>)
    2790:	429a      	cmp	r2, r3
    2792:	d10c      	bne.n	27ae <TIM_DeInit+0xb2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    2794:	f04f 0008 	mov.w	r0, #8	; 0x8
    2798:	f04f 0101 	mov.w	r1, #1	; 0x1
    279c:	f7ff fedc 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
    27a0:	f04f 0008 	mov.w	r0, #8	; 0x8
    27a4:	f04f 0100 	mov.w	r1, #0	; 0x0
    27a8:	f7ff fed6 	bl	2558 <RCC_APB1PeriphResetCmd>
    27ac:	e031      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else if (TIMx == TIM6)
    27ae:	687a      	ldr	r2, [r7, #4]
    27b0:	4b1e      	ldr	r3, [pc, #120]	(282c <TIM_DeInit+0x130>)
    27b2:	429a      	cmp	r2, r3
    27b4:	d10c      	bne.n	27d0 <TIM_DeInit+0xd4>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    27b6:	f04f 0010 	mov.w	r0, #16	; 0x10
    27ba:	f04f 0101 	mov.w	r1, #1	; 0x1
    27be:	f7ff fecb 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
    27c2:	f04f 0010 	mov.w	r0, #16	; 0x10
    27c6:	f04f 0100 	mov.w	r1, #0	; 0x0
    27ca:	f7ff fec5 	bl	2558 <RCC_APB1PeriphResetCmd>
    27ce:	e020      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else if (TIMx == TIM7)
    27d0:	687a      	ldr	r2, [r7, #4]
    27d2:	4b17      	ldr	r3, [pc, #92]	(2830 <TIM_DeInit+0x134>)
    27d4:	429a      	cmp	r2, r3
    27d6:	d10c      	bne.n	27f2 <TIM_DeInit+0xf6>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    27d8:	f04f 0020 	mov.w	r0, #32	; 0x20
    27dc:	f04f 0101 	mov.w	r1, #1	; 0x1
    27e0:	f7ff feba 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
    27e4:	f04f 0020 	mov.w	r0, #32	; 0x20
    27e8:	f04f 0100 	mov.w	r1, #0	; 0x0
    27ec:	f7ff feb4 	bl	2558 <RCC_APB1PeriphResetCmd>
    27f0:	e00f      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else
  {
    if (TIMx == TIM8)
    27f2:	687a      	ldr	r2, [r7, #4]
    27f4:	4b0f      	ldr	r3, [pc, #60]	(2834 <TIM_DeInit+0x138>)
    27f6:	429a      	cmp	r2, r3
    27f8:	d10b      	bne.n	2812 <TIM_DeInit+0x116>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    27fa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    27fe:	f04f 0101 	mov.w	r1, #1	; 0x1
    2802:	f7ff fe87 	bl	2514 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
    2806:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    280a:	f04f 0100 	mov.w	r1, #0	; 0x0
    280e:	f7ff fe81 	bl	2514 <RCC_APB2PeriphResetCmd>
    }  
  }
}
    2812:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2816:	46bd      	mov	sp, r7
    2818:	bd80      	pop	{r7, pc}
    281a:	46c0      	nop			(mov r8, r8)
    281c:	40012c00 	.word	0x40012c00
    2820:	40000400 	.word	0x40000400
    2824:	40000800 	.word	0x40000800
    2828:	40000c00 	.word	0x40000c00
    282c:	40001000 	.word	0x40001000
    2830:	40001400 	.word	0x40001400
    2834:	40013400 	.word	0x40013400

00002838 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef
  *   structure that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    2838:	b480      	push	{r7}
    283a:	b083      	sub	sp, #12
    283c:	af00      	add	r7, sp, #0
    283e:	6078      	str	r0, [r7, #4]
    2840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
    2842:	687b      	ldr	r3, [r7, #4]
    2844:	881b      	ldrh	r3, [r3, #0]
    2846:	b29b      	uxth	r3, r3
    2848:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    284c:	687a      	ldr	r2, [r7, #4]
    284e:	8013      	strh	r3, [r2, #0]
  TIMx->CR1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision |
    2850:	687b      	ldr	r3, [r7, #4]
    2852:	881b      	ldrh	r3, [r3, #0]
    2854:	b299      	uxth	r1, r3
    2856:	683b      	ldr	r3, [r7, #0]
    2858:	88da      	ldrh	r2, [r3, #6]
    285a:	683b      	ldr	r3, [r7, #0]
    285c:	885b      	ldrh	r3, [r3, #2]
    285e:	ea42 0303 	orr.w	r3, r2, r3
    2862:	b29b      	uxth	r3, r3
    2864:	ea41 0303 	orr.w	r3, r1, r3
    2868:	b29b      	uxth	r3, r3
    286a:	687a      	ldr	r2, [r7, #4]
    286c:	8013      	strh	r3, [r2, #0]
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
    286e:	683b      	ldr	r3, [r7, #0]
    2870:	889b      	ldrh	r3, [r3, #4]
    2872:	687a      	ldr	r2, [r7, #4]
    2874:	8593      	strh	r3, [r2, #44]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    2876:	683b      	ldr	r3, [r7, #0]
    2878:	881b      	ldrh	r3, [r3, #0]
    287a:	687a      	ldr	r2, [r7, #4]
    287c:	8513      	strh	r3, [r2, #40]
    
  if ((((uint32_t) TIMx) == TIM1_BASE) || (((uint32_t) TIMx) == TIM8_BASE))  
    287e:	687a      	ldr	r2, [r7, #4]
    2880:	4b09      	ldr	r3, [pc, #36]	(28a8 <TIM_TimeBaseInit+0x70>)
    2882:	429a      	cmp	r2, r3
    2884:	d003      	beq.n	288e <TIM_TimeBaseInit+0x56>
    2886:	687a      	ldr	r2, [r7, #4]
    2888:	4b08      	ldr	r3, [pc, #32]	(28ac <TIM_TimeBaseInit+0x74>)
    288a:	429a      	cmp	r2, r3
    288c:	d103      	bne.n	2896 <TIM_TimeBaseInit+0x5e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
    288e:	683b      	ldr	r3, [r7, #0]
    2890:	7a1b      	ldrb	r3, [r3, #8]
    2892:	687a      	ldr	r2, [r7, #4]
    2894:	8613      	strh	r3, [r2, #48]
  }

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
    2896:	687b      	ldr	r3, [r7, #4]
    2898:	f04f 0201 	mov.w	r2, #1	; 0x1
    289c:	829a      	strh	r2, [r3, #20]
}
    289e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    28a2:	46bd      	mov	sp, r7
    28a4:	bc80      	pop	{r7}
    28a6:	4770      	bx	lr
    28a8:	40012c00 	.word	0x40012c00
    28ac:	40013400 	.word	0x40013400

000028b0 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    28b0:	b480      	push	{r7}
    28b2:	b087      	sub	sp, #28
    28b4:	af00      	add	r7, sp, #0
    28b6:	60f8      	str	r0, [r7, #12]
    28b8:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    28ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    28be:	827b      	strh	r3, [r7, #18]
    28c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    28c4:	82bb      	strh	r3, [r7, #20]
    28c6:	f04f 0300 	mov.w	r3, #0	; 0x0
    28ca:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
    28cc:	68fb      	ldr	r3, [r7, #12]
    28ce:	8c1b      	ldrh	r3, [r3, #32]
    28d0:	b29b      	uxth	r3, r3
    28d2:	607b      	str	r3, [r7, #4]
    28d4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    28d8:	6879      	ldr	r1, [r7, #4]
    28da:	ea01 0303 	and.w	r3, r1, r3
    28de:	607b      	str	r3, [r7, #4]
    28e0:	68fa      	ldr	r2, [r7, #12]
    28e2:	6879      	ldr	r1, [r7, #4]
    28e4:	460b      	mov	r3, r1
    28e6:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    28e8:	68fb      	ldr	r3, [r7, #12]
    28ea:	8c1b      	ldrh	r3, [r3, #32]
    28ec:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    28ee:	68fb      	ldr	r3, [r7, #12]
    28f0:	889b      	ldrh	r3, [r3, #4]
    28f2:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    28f4:	68fb      	ldr	r3, [r7, #12]
    28f6:	8b1b      	ldrh	r3, [r3, #24]
    28f8:	827b      	strh	r3, [r7, #18]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC13M_Mask & CCMR_CC13S_Mask;
    28fa:	8a7b      	ldrh	r3, [r7, #18]
    28fc:	f023 0373 	bic.w	r3, r3, #115	; 0x73
    2900:	827b      	strh	r3, [r7, #18]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    2902:	68bb      	ldr	r3, [r7, #8]
    2904:	881a      	ldrh	r2, [r3, #0]
    2906:	8a7b      	ldrh	r3, [r7, #18]
    2908:	ea42 0303 	orr.w	r3, r2, r3
    290c:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
    290e:	8abb      	ldrh	r3, [r7, #20]
    2910:	f023 0302 	bic.w	r3, r3, #2	; 0x2
    2914:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
    2916:	68bb      	ldr	r3, [r7, #8]
    2918:	891a      	ldrh	r2, [r3, #8]
    291a:	8abb      	ldrh	r3, [r7, #20]
    291c:	ea42 0303 	orr.w	r3, r2, r3
    2920:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    2922:	68bb      	ldr	r3, [r7, #8]
    2924:	885a      	ldrh	r2, [r3, #2]
    2926:	8abb      	ldrh	r3, [r7, #20]
    2928:	ea42 0303 	orr.w	r3, r2, r3
    292c:	82bb      	strh	r3, [r7, #20]
 
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    292e:	68fa      	ldr	r2, [r7, #12]
    2930:	4b24      	ldr	r3, [pc, #144]	(29c4 <TIM_OC1Init+0x114>)
    2932:	429a      	cmp	r2, r3
    2934:	d003      	beq.n	293e <TIM_OC1Init+0x8e>
    2936:	68fa      	ldr	r2, [r7, #12]
    2938:	4b23      	ldr	r3, [pc, #140]	(29c8 <TIM_OC1Init+0x118>)
    293a:	429a      	cmp	r2, r3
    293c:	d12f      	bne.n	299e <TIM_OC1Init+0xee>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
    293e:	8abb      	ldrh	r3, [r7, #20]
    2940:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    2944:	82bb      	strh	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    2946:	68bb      	ldr	r3, [r7, #8]
    2948:	895a      	ldrh	r2, [r3, #10]
    294a:	8abb      	ldrh	r3, [r7, #20]
    294c:	ea42 0303 	orr.w	r3, r2, r3
    2950:	82bb      	strh	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
    2952:	8abb      	ldrh	r3, [r7, #20]
    2954:	f023 0304 	bic.w	r3, r3, #4	; 0x4
    2958:	82bb      	strh	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    295a:	68bb      	ldr	r3, [r7, #8]
    295c:	889a      	ldrh	r2, [r3, #4]
    295e:	8abb      	ldrh	r3, [r7, #20]
    2960:	ea42 0303 	orr.w	r3, r2, r3
    2964:	82bb      	strh	r3, [r7, #20]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    2966:	8afb      	ldrh	r3, [r7, #22]
    2968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    296c:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2970:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2974:	82fb      	strh	r3, [r7, #22]
    tmpcr2 &= CR2_OIS1N_Reset;
    2976:	8afb      	ldrh	r3, [r7, #22]
    2978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    297c:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2980:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2984:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    2986:	68bb      	ldr	r3, [r7, #8]
    2988:	899a      	ldrh	r2, [r3, #12]
    298a:	8afb      	ldrh	r3, [r7, #22]
    298c:	ea42 0303 	orr.w	r3, r2, r3
    2990:	82fb      	strh	r3, [r7, #22]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
    2992:	68bb      	ldr	r3, [r7, #8]
    2994:	89da      	ldrh	r2, [r3, #14]
    2996:	8afb      	ldrh	r3, [r7, #22]
    2998:	ea42 0303 	orr.w	r3, r2, r3
    299c:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    299e:	68fa      	ldr	r2, [r7, #12]
    29a0:	8afb      	ldrh	r3, [r7, #22]
    29a2:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    29a4:	68fa      	ldr	r2, [r7, #12]
    29a6:	8a7b      	ldrh	r3, [r7, #18]
    29a8:	8313      	strh	r3, [r2, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
    29aa:	68bb      	ldr	r3, [r7, #8]
    29ac:	88db      	ldrh	r3, [r3, #6]
    29ae:	68fa      	ldr	r2, [r7, #12]
    29b0:	8693      	strh	r3, [r2, #52]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    29b2:	68fa      	ldr	r2, [r7, #12]
    29b4:	8abb      	ldrh	r3, [r7, #20]
    29b6:	8413      	strh	r3, [r2, #32]
}
    29b8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    29bc:	46bd      	mov	sp, r7
    29be:	bc80      	pop	{r7}
    29c0:	4770      	bx	lr
    29c2:	46c0      	nop			(mov r8, r8)
    29c4:	40012c00 	.word	0x40012c00
    29c8:	40013400 	.word	0x40013400

000029cc <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    29cc:	b480      	push	{r7}
    29ce:	b087      	sub	sp, #28
    29d0:	af00      	add	r7, sp, #0
    29d2:	60f8      	str	r0, [r7, #12]
    29d4:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    29d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    29da:	827b      	strh	r3, [r7, #18]
    29dc:	f04f 0300 	mov.w	r3, #0	; 0x0
    29e0:	82bb      	strh	r3, [r7, #20]
    29e2:	f04f 0300 	mov.w	r3, #0	; 0x0
    29e6:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
    29e8:	68fb      	ldr	r3, [r7, #12]
    29ea:	8c1b      	ldrh	r3, [r3, #32]
    29ec:	b29b      	uxth	r3, r3
    29ee:	607b      	str	r3, [r7, #4]
    29f0:	f64f 73ef 	movw	r3, #65519	; 0xffef
    29f4:	6879      	ldr	r1, [r7, #4]
    29f6:	ea01 0303 	and.w	r3, r1, r3
    29fa:	607b      	str	r3, [r7, #4]
    29fc:	68fa      	ldr	r2, [r7, #12]
    29fe:	6879      	ldr	r1, [r7, #4]
    2a00:	460b      	mov	r3, r1
    2a02:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
    2a04:	68fb      	ldr	r3, [r7, #12]
    2a06:	8c1b      	ldrh	r3, [r3, #32]
    2a08:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    2a0a:	68fb      	ldr	r3, [r7, #12]
    2a0c:	889b      	ldrh	r3, [r3, #4]
    2a0e:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    2a10:	68fb      	ldr	r3, [r7, #12]
    2a12:	8b1b      	ldrh	r3, [r3, #24]
    2a14:	827b      	strh	r3, [r7, #18]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask;  
    2a16:	8a7b      	ldrh	r3, [r7, #18]
    2a18:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
    2a1c:	827b      	strh	r3, [r7, #18]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    2a1e:	68bb      	ldr	r3, [r7, #8]
    2a20:	881b      	ldrh	r3, [r3, #0]
    2a22:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2a26:	b29a      	uxth	r2, r3
    2a28:	8a7b      	ldrh	r3, [r7, #18]
    2a2a:	ea42 0303 	orr.w	r3, r2, r3
    2a2e:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
    2a30:	8abb      	ldrh	r3, [r7, #20]
    2a32:	f023 0320 	bic.w	r3, r3, #32	; 0x20
    2a36:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
    2a38:	68bb      	ldr	r3, [r7, #8]
    2a3a:	891b      	ldrh	r3, [r3, #8]
    2a3c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a40:	b29a      	uxth	r2, r3
    2a42:	8abb      	ldrh	r3, [r7, #20]
    2a44:	ea42 0303 	orr.w	r3, r2, r3
    2a48:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    2a4a:	68bb      	ldr	r3, [r7, #8]
    2a4c:	885b      	ldrh	r3, [r3, #2]
    2a4e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a52:	b29a      	uxth	r2, r3
    2a54:	8abb      	ldrh	r3, [r7, #20]
    2a56:	ea42 0303 	orr.w	r3, r2, r3
    2a5a:	82bb      	strh	r3, [r7, #20]
    
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    2a5c:	68fa      	ldr	r2, [r7, #12]
    2a5e:	4b2a      	ldr	r3, [pc, #168]	(2b08 <TIM_OC2Init+0x13c>)
    2a60:	429a      	cmp	r2, r3
    2a62:	d003      	beq.n	2a6c <TIM_OC2Init+0xa0>
    2a64:	68fa      	ldr	r2, [r7, #12]
    2a66:	4b29      	ldr	r3, [pc, #164]	(2b0c <TIM_OC2Init+0x140>)
    2a68:	429a      	cmp	r2, r3
    2a6a:	d13b      	bne.n	2ae4 <TIM_OC2Init+0x118>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
    2a6c:	8abb      	ldrh	r3, [r7, #20]
    2a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2a72:	82bb      	strh	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    2a74:	68bb      	ldr	r3, [r7, #8]
    2a76:	895b      	ldrh	r3, [r3, #10]
    2a78:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a7c:	b29a      	uxth	r2, r3
    2a7e:	8abb      	ldrh	r3, [r7, #20]
    2a80:	ea42 0303 	orr.w	r3, r2, r3
    2a84:	82bb      	strh	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
    2a86:	8abb      	ldrh	r3, [r7, #20]
    2a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    2a8c:	82bb      	strh	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    2a8e:	68bb      	ldr	r3, [r7, #8]
    2a90:	889b      	ldrh	r3, [r3, #4]
    2a92:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a96:	b29a      	uxth	r2, r3
    2a98:	8abb      	ldrh	r3, [r7, #20]
    2a9a:	ea42 0303 	orr.w	r3, r2, r3
    2a9e:	82bb      	strh	r3, [r7, #20]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    2aa0:	8afb      	ldrh	r3, [r7, #22]
    2aa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2aa6:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2aaa:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2aae:	82fb      	strh	r3, [r7, #22]
    tmpcr2 &= CR2_OIS2N_Reset;
    2ab0:	8afb      	ldrh	r3, [r7, #22]
    2ab2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2ab6:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2aba:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2abe:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    2ac0:	68bb      	ldr	r3, [r7, #8]
    2ac2:	899b      	ldrh	r3, [r3, #12]
    2ac4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ac8:	b29a      	uxth	r2, r3
    2aca:	8afb      	ldrh	r3, [r7, #22]
    2acc:	ea42 0303 	orr.w	r3, r2, r3
    2ad0:	82fb      	strh	r3, [r7, #22]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
    2ad2:	68bb      	ldr	r3, [r7, #8]
    2ad4:	89db      	ldrh	r3, [r3, #14]
    2ad6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ada:	b29a      	uxth	r2, r3
    2adc:	8afb      	ldrh	r3, [r7, #22]
    2ade:	ea42 0303 	orr.w	r3, r2, r3
    2ae2:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    2ae4:	68fa      	ldr	r2, [r7, #12]
    2ae6:	8afb      	ldrh	r3, [r7, #22]
    2ae8:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    2aea:	68fa      	ldr	r2, [r7, #12]
    2aec:	8a7b      	ldrh	r3, [r7, #18]
    2aee:	8313      	strh	r3, [r2, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
    2af0:	68bb      	ldr	r3, [r7, #8]
    2af2:	88db      	ldrh	r3, [r3, #6]
    2af4:	68fa      	ldr	r2, [r7, #12]
    2af6:	8713      	strh	r3, [r2, #56]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    2af8:	68fa      	ldr	r2, [r7, #12]
    2afa:	8abb      	ldrh	r3, [r7, #20]
    2afc:	8413      	strh	r3, [r2, #32]
}
    2afe:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2b02:	46bd      	mov	sp, r7
    2b04:	bc80      	pop	{r7}
    2b06:	4770      	bx	lr
    2b08:	40012c00 	.word	0x40012c00
    2b0c:	40013400 	.word	0x40013400

00002b10 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    2b10:	b480      	push	{r7}
    2b12:	b087      	sub	sp, #28
    2b14:	af00      	add	r7, sp, #0
    2b16:	60f8      	str	r0, [r7, #12]
    2b18:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    2b1a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2b1e:	827b      	strh	r3, [r7, #18]
    2b20:	f04f 0300 	mov.w	r3, #0	; 0x0
    2b24:	82bb      	strh	r3, [r7, #20]
    2b26:	f04f 0300 	mov.w	r3, #0	; 0x0
    2b2a:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
    2b2c:	68fb      	ldr	r3, [r7, #12]
    2b2e:	8c1b      	ldrh	r3, [r3, #32]
    2b30:	b29b      	uxth	r3, r3
    2b32:	607b      	str	r3, [r7, #4]
    2b34:	f64f 63ff 	movw	r3, #65279	; 0xfeff
    2b38:	6879      	ldr	r1, [r7, #4]
    2b3a:	ea01 0303 	and.w	r3, r1, r3
    2b3e:	607b      	str	r3, [r7, #4]
    2b40:	68fa      	ldr	r2, [r7, #12]
    2b42:	6879      	ldr	r1, [r7, #4]
    2b44:	460b      	mov	r3, r1
    2b46:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    2b48:	68fb      	ldr	r3, [r7, #12]
    2b4a:	8c1b      	ldrh	r3, [r3, #32]
    2b4c:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    2b4e:	68fb      	ldr	r3, [r7, #12]
    2b50:	889b      	ldrh	r3, [r3, #4]
    2b52:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    2b54:	68fb      	ldr	r3, [r7, #12]
    2b56:	8b9b      	ldrh	r3, [r3, #28]
    2b58:	827b      	strh	r3, [r7, #18]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC13M_Mask & CCMR_CC13S_Mask;  
    2b5a:	8a7b      	ldrh	r3, [r7, #18]
    2b5c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
    2b60:	827b      	strh	r3, [r7, #18]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    2b62:	68bb      	ldr	r3, [r7, #8]
    2b64:	881a      	ldrh	r2, [r3, #0]
    2b66:	8a7b      	ldrh	r3, [r7, #18]
    2b68:	ea42 0303 	orr.w	r3, r2, r3
    2b6c:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
    2b6e:	8abb      	ldrh	r3, [r7, #20]
    2b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    2b74:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
    2b76:	68bb      	ldr	r3, [r7, #8]
    2b78:	891b      	ldrh	r3, [r3, #8]
    2b7a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2b7e:	b29a      	uxth	r2, r3
    2b80:	8abb      	ldrh	r3, [r7, #20]
    2b82:	ea42 0303 	orr.w	r3, r2, r3
    2b86:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    2b88:	68bb      	ldr	r3, [r7, #8]
    2b8a:	885b      	ldrh	r3, [r3, #2]
    2b8c:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2b90:	b29a      	uxth	r2, r3
    2b92:	8abb      	ldrh	r3, [r7, #20]
    2b94:	ea42 0303 	orr.w	r3, r2, r3
    2b98:	82bb      	strh	r3, [r7, #20]
   
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    2b9a:	68fa      	ldr	r2, [r7, #12]
    2b9c:	4b2a      	ldr	r3, [pc, #168]	(2c48 <TIM_OC3Init+0x138>)
    2b9e:	429a      	cmp	r2, r3
    2ba0:	d003      	beq.n	2baa <TIM_OC3Init+0x9a>
    2ba2:	68fa      	ldr	r2, [r7, #12]
    2ba4:	4b29      	ldr	r3, [pc, #164]	(2c4c <TIM_OC3Init+0x13c>)
    2ba6:	429a      	cmp	r2, r3
    2ba8:	d13b      	bne.n	2c22 <TIM_OC3Init+0x112>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
    2baa:	8abb      	ldrh	r3, [r7, #20]
    2bac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2bb0:	82bb      	strh	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    2bb2:	68bb      	ldr	r3, [r7, #8]
    2bb4:	895b      	ldrh	r3, [r3, #10]
    2bb6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2bba:	b29a      	uxth	r2, r3
    2bbc:	8abb      	ldrh	r3, [r7, #20]
    2bbe:	ea42 0303 	orr.w	r3, r2, r3
    2bc2:	82bb      	strh	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    2bc4:	8abb      	ldrh	r3, [r7, #20]
    2bc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2bca:	82bb      	strh	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    2bcc:	68bb      	ldr	r3, [r7, #8]
    2bce:	889b      	ldrh	r3, [r3, #4]
    2bd0:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2bd4:	b29a      	uxth	r2, r3
    2bd6:	8abb      	ldrh	r3, [r7, #20]
    2bd8:	ea42 0303 	orr.w	r3, r2, r3
    2bdc:	82bb      	strh	r3, [r7, #20]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    2bde:	8afb      	ldrh	r3, [r7, #22]
    2be0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2be4:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2be8:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2bec:	82fb      	strh	r3, [r7, #22]
    tmpcr2 &= CR2_OIS3N_Reset;
    2bee:	8afb      	ldrh	r3, [r7, #22]
    2bf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2bf4:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2bf8:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2bfc:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    2bfe:	68bb      	ldr	r3, [r7, #8]
    2c00:	899b      	ldrh	r3, [r3, #12]
    2c02:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2c06:	b29a      	uxth	r2, r3
    2c08:	8afb      	ldrh	r3, [r7, #22]
    2c0a:	ea42 0303 	orr.w	r3, r2, r3
    2c0e:	82fb      	strh	r3, [r7, #22]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
    2c10:	68bb      	ldr	r3, [r7, #8]
    2c12:	89db      	ldrh	r3, [r3, #14]
    2c14:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2c18:	b29a      	uxth	r2, r3
    2c1a:	8afb      	ldrh	r3, [r7, #22]
    2c1c:	ea42 0303 	orr.w	r3, r2, r3
    2c20:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    2c22:	68fa      	ldr	r2, [r7, #12]
    2c24:	8afb      	ldrh	r3, [r7, #22]
    2c26:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
    2c28:	68fa      	ldr	r2, [r7, #12]
    2c2a:	8a7b      	ldrh	r3, [r7, #18]
    2c2c:	8393      	strh	r3, [r2, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
    2c2e:	68bb      	ldr	r3, [r7, #8]
    2c30:	88db      	ldrh	r3, [r3, #6]
    2c32:	68fa      	ldr	r2, [r7, #12]
    2c34:	8793      	strh	r3, [r2, #60]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    2c36:	68fa      	ldr	r2, [r7, #12]
    2c38:	8abb      	ldrh	r3, [r7, #20]
    2c3a:	8413      	strh	r3, [r2, #32]
}
    2c3c:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2c40:	46bd      	mov	sp, r7
    2c42:	bc80      	pop	{r7}
    2c44:	4770      	bx	lr
    2c46:	46c0      	nop			(mov r8, r8)
    2c48:	40012c00 	.word	0x40012c00
    2c4c:	40013400 	.word	0x40013400

00002c50 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    2c50:	b480      	push	{r7}
    2c52:	b087      	sub	sp, #28
    2c54:	af00      	add	r7, sp, #0
    2c56:	60f8      	str	r0, [r7, #12]
    2c58:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    2c5a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2c5e:	827b      	strh	r3, [r7, #18]
    2c60:	f04f 0300 	mov.w	r3, #0	; 0x0
    2c64:	82bb      	strh	r3, [r7, #20]
    2c66:	f04f 0300 	mov.w	r3, #0	; 0x0
    2c6a:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
    2c6c:	68fb      	ldr	r3, [r7, #12]
    2c6e:	8c1b      	ldrh	r3, [r3, #32]
    2c70:	b29b      	uxth	r3, r3
    2c72:	607b      	str	r3, [r7, #4]
    2c74:	f64e 73ff 	movw	r3, #61439	; 0xefff
    2c78:	6879      	ldr	r1, [r7, #4]
    2c7a:	ea01 0303 	and.w	r3, r1, r3
    2c7e:	607b      	str	r3, [r7, #4]
    2c80:	68fa      	ldr	r2, [r7, #12]
    2c82:	6879      	ldr	r1, [r7, #4]
    2c84:	460b      	mov	r3, r1
    2c86:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    2c88:	68fb      	ldr	r3, [r7, #12]
    2c8a:	8c1b      	ldrh	r3, [r3, #32]
    2c8c:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    2c8e:	68fb      	ldr	r3, [r7, #12]
    2c90:	889b      	ldrh	r3, [r3, #4]
    2c92:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    2c94:	68fb      	ldr	r3, [r7, #12]
    2c96:	8b9b      	ldrh	r3, [r3, #28]
    2c98:	827b      	strh	r3, [r7, #18]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask; 
    2c9a:	8a7b      	ldrh	r3, [r7, #18]
    2c9c:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
    2ca0:	827b      	strh	r3, [r7, #18]
   
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    2ca2:	68bb      	ldr	r3, [r7, #8]
    2ca4:	881b      	ldrh	r3, [r3, #0]
    2ca6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2caa:	b29a      	uxth	r2, r3
    2cac:	8a7b      	ldrh	r3, [r7, #18]
    2cae:	ea42 0303 	orr.w	r3, r2, r3
    2cb2:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
    2cb4:	8abb      	ldrh	r3, [r7, #20]
    2cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2cba:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
    2cbc:	68bb      	ldr	r3, [r7, #8]
    2cbe:	891b      	ldrh	r3, [r3, #8]
    2cc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    2cc4:	b29a      	uxth	r2, r3
    2cc6:	8abb      	ldrh	r3, [r7, #20]
    2cc8:	ea42 0303 	orr.w	r3, r2, r3
    2ccc:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    2cce:	68bb      	ldr	r3, [r7, #8]
    2cd0:	885b      	ldrh	r3, [r3, #2]
    2cd2:	ea4f 3303 	mov.w	r3, r3, lsl #12
    2cd6:	b29a      	uxth	r2, r3
    2cd8:	8abb      	ldrh	r3, [r7, #20]
    2cda:	ea42 0303 	orr.w	r3, r2, r3
    2cde:	82bb      	strh	r3, [r7, #20]
    
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    2ce0:	68fa      	ldr	r2, [r7, #12]
    2ce2:	4b14      	ldr	r3, [pc, #80]	(2d34 <TIM_OC4Init+0xe4>)
    2ce4:	429a      	cmp	r2, r3
    2ce6:	d003      	beq.n	2cf0 <TIM_OC4Init+0xa0>
    2ce8:	68fa      	ldr	r2, [r7, #12]
    2cea:	4b13      	ldr	r3, [pc, #76]	(2d38 <TIM_OC4Init+0xe8>)
    2cec:	429a      	cmp	r2, r3
    2cee:	d10e      	bne.n	2d0e <TIM_OC4Init+0xbe>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
    2cf0:	8afb      	ldrh	r3, [r7, #22]
    2cf2:	ea4f 4383 	mov.w	r3, r3, lsl #18
    2cf6:	ea4f 4393 	mov.w	r3, r3, lsr #18
    2cfa:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
    2cfc:	68bb      	ldr	r3, [r7, #8]
    2cfe:	899b      	ldrh	r3, [r3, #12]
    2d00:	ea4f 1383 	mov.w	r3, r3, lsl #6
    2d04:	b29a      	uxth	r2, r3
    2d06:	8afb      	ldrh	r3, [r7, #22]
    2d08:	ea42 0303 	orr.w	r3, r2, r3
    2d0c:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    2d0e:	68fa      	ldr	r2, [r7, #12]
    2d10:	8afb      	ldrh	r3, [r7, #22]
    2d12:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    2d14:	68fa      	ldr	r2, [r7, #12]
    2d16:	8a7b      	ldrh	r3, [r7, #18]
    2d18:	8393      	strh	r3, [r2, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
    2d1a:	68bb      	ldr	r3, [r7, #8]
    2d1c:	88db      	ldrh	r3, [r3, #6]
    2d1e:	68fa      	ldr	r2, [r7, #12]
    2d20:	f8a2 3040 	strh.w	r3, [r2, #64]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    2d24:	68fa      	ldr	r2, [r7, #12]
    2d26:	8abb      	ldrh	r3, [r7, #20]
    2d28:	8413      	strh	r3, [r2, #32]
}
    2d2a:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2d2e:	46bd      	mov	sp, r7
    2d30:	bc80      	pop	{r7}
    2d32:	4770      	bx	lr
    2d34:	40012c00 	.word	0x40012c00
    2d38:	40013400 	.word	0x40013400

00002d3c <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    2d3c:	b580      	push	{r7, lr}
    2d3e:	b082      	sub	sp, #8
    2d40:	af00      	add	r7, sp, #0
    2d42:	6078      	str	r0, [r7, #4]
    2d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    2d46:	683b      	ldr	r3, [r7, #0]
    2d48:	881b      	ldrh	r3, [r3, #0]
    2d4a:	2b00      	cmp	r3, #0
    2d4c:	d10f      	bne.n	2d6e <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    2d4e:	683b      	ldr	r3, [r7, #0]
    2d50:	8859      	ldrh	r1, [r3, #2]
    2d52:	683b      	ldr	r3, [r7, #0]
    2d54:	889a      	ldrh	r2, [r3, #4]
    2d56:	683b      	ldr	r3, [r7, #0]
    2d58:	891b      	ldrh	r3, [r3, #8]
    2d5a:	6878      	ldr	r0, [r7, #4]
    2d5c:	f001 faa2 	bl	42a4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2d60:	683b      	ldr	r3, [r7, #0]
    2d62:	88db      	ldrh	r3, [r3, #6]
    2d64:	6878      	ldr	r0, [r7, #4]
    2d66:	4619      	mov	r1, r3
    2d68:	f001 f926 	bl	3fb8 <TIM_SetIC1Prescaler>
    2d6c:	e036      	b.n	2ddc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
    2d6e:	683b      	ldr	r3, [r7, #0]
    2d70:	881b      	ldrh	r3, [r3, #0]
    2d72:	2b04      	cmp	r3, #4
    2d74:	d10f      	bne.n	2d96 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    2d76:	683b      	ldr	r3, [r7, #0]
    2d78:	8859      	ldrh	r1, [r3, #2]
    2d7a:	683b      	ldr	r3, [r7, #0]
    2d7c:	889a      	ldrh	r2, [r3, #4]
    2d7e:	683b      	ldr	r3, [r7, #0]
    2d80:	891b      	ldrh	r3, [r3, #8]
    2d82:	6878      	ldr	r0, [r7, #4]
    2d84:	f001 fada 	bl	433c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2d88:	683b      	ldr	r3, [r7, #0]
    2d8a:	88db      	ldrh	r3, [r3, #6]
    2d8c:	6878      	ldr	r0, [r7, #4]
    2d8e:	4619      	mov	r1, r3
    2d90:	f001 f934 	bl	3ffc <TIM_SetIC2Prescaler>
    2d94:	e022      	b.n	2ddc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
    2d96:	683b      	ldr	r3, [r7, #0]
    2d98:	881b      	ldrh	r3, [r3, #0]
    2d9a:	2b08      	cmp	r3, #8
    2d9c:	d10f      	bne.n	2dbe <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    2d9e:	683b      	ldr	r3, [r7, #0]
    2da0:	8859      	ldrh	r1, [r3, #2]
    2da2:	683b      	ldr	r3, [r7, #0]
    2da4:	889a      	ldrh	r2, [r3, #4]
    2da6:	683b      	ldr	r3, [r7, #0]
    2da8:	891b      	ldrh	r3, [r3, #8]
    2daa:	6878      	ldr	r0, [r7, #4]
    2dac:	f001 fb22 	bl	43f4 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2db0:	683b      	ldr	r3, [r7, #0]
    2db2:	88db      	ldrh	r3, [r3, #6]
    2db4:	6878      	ldr	r0, [r7, #4]
    2db6:	4619      	mov	r1, r3
    2db8:	f001 f946 	bl	4048 <TIM_SetIC3Prescaler>
    2dbc:	e00e      	b.n	2ddc <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    2dbe:	683b      	ldr	r3, [r7, #0]
    2dc0:	8859      	ldrh	r1, [r3, #2]
    2dc2:	683b      	ldr	r3, [r7, #0]
    2dc4:	889a      	ldrh	r2, [r3, #4]
    2dc6:	683b      	ldr	r3, [r7, #0]
    2dc8:	891b      	ldrh	r3, [r3, #8]
    2dca:	6878      	ldr	r0, [r7, #4]
    2dcc:	f001 fb66 	bl	449c <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2dd0:	683b      	ldr	r3, [r7, #0]
    2dd2:	88db      	ldrh	r3, [r3, #6]
    2dd4:	6878      	ldr	r0, [r7, #4]
    2dd6:	4619      	mov	r1, r3
    2dd8:	f001 f958 	bl	408c <TIM_SetIC4Prescaler>
  }
}
    2ddc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2de0:	46bd      	mov	sp, r7
    2de2:	bd80      	pop	{r7, pc}

00002de4 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    2de4:	b580      	push	{r7, lr}
    2de6:	b084      	sub	sp, #16
    2de8:	af00      	add	r7, sp, #0
    2dea:	6078      	str	r0, [r7, #4]
    2dec:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
    2dee:	f04f 0300 	mov.w	r3, #0	; 0x0
    2df2:	81bb      	strh	r3, [r7, #12]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
    2df4:	f04f 0301 	mov.w	r3, #1	; 0x1
    2df8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
    2dfa:	683b      	ldr	r3, [r7, #0]
    2dfc:	885b      	ldrh	r3, [r3, #2]
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d103      	bne.n	2e0a <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
    2e02:	f04f 0302 	mov.w	r3, #2	; 0x2
    2e06:	81bb      	strh	r3, [r7, #12]
    2e08:	e002      	b.n	2e10 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
    2e0a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2e0e:	81bb      	strh	r3, [r7, #12]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
    2e10:	683b      	ldr	r3, [r7, #0]
    2e12:	889b      	ldrh	r3, [r3, #4]
    2e14:	2b01      	cmp	r3, #1
    2e16:	d103      	bne.n	2e20 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
    2e18:	f04f 0302 	mov.w	r3, #2	; 0x2
    2e1c:	81fb      	strh	r3, [r7, #14]
    2e1e:	e002      	b.n	2e26 <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
    2e20:	f04f 0301 	mov.w	r3, #1	; 0x1
    2e24:	81fb      	strh	r3, [r7, #14]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    2e26:	683b      	ldr	r3, [r7, #0]
    2e28:	881b      	ldrh	r3, [r3, #0]
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d11f      	bne.n	2e6e <TIM_PWMIConfig+0x8a>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    2e2e:	683b      	ldr	r3, [r7, #0]
    2e30:	8859      	ldrh	r1, [r3, #2]
    2e32:	683b      	ldr	r3, [r7, #0]
    2e34:	889a      	ldrh	r2, [r3, #4]
    2e36:	683b      	ldr	r3, [r7, #0]
    2e38:	891b      	ldrh	r3, [r3, #8]
    2e3a:	6878      	ldr	r0, [r7, #4]
    2e3c:	f001 fa32 	bl	42a4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2e40:	683b      	ldr	r3, [r7, #0]
    2e42:	88db      	ldrh	r3, [r3, #6]
    2e44:	6878      	ldr	r0, [r7, #4]
    2e46:	4619      	mov	r1, r3
    2e48:	f001 f8b6 	bl	3fb8 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    2e4c:	683b      	ldr	r3, [r7, #0]
    2e4e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
    2e52:	89bb      	ldrh	r3, [r7, #12]
    2e54:	89fa      	ldrh	r2, [r7, #14]
    2e56:	6878      	ldr	r0, [r7, #4]
    2e58:	4619      	mov	r1, r3
    2e5a:	4663      	mov	r3, ip
    2e5c:	f001 fa6e 	bl	433c <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2e60:	683b      	ldr	r3, [r7, #0]
    2e62:	88db      	ldrh	r3, [r3, #6]
    2e64:	6878      	ldr	r0, [r7, #4]
    2e66:	4619      	mov	r1, r3
    2e68:	f001 f8c8 	bl	3ffc <TIM_SetIC2Prescaler>
    2e6c:	e01e      	b.n	2eac <TIM_PWMIConfig+0xc8>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    2e6e:	683b      	ldr	r3, [r7, #0]
    2e70:	8859      	ldrh	r1, [r3, #2]
    2e72:	683b      	ldr	r3, [r7, #0]
    2e74:	889a      	ldrh	r2, [r3, #4]
    2e76:	683b      	ldr	r3, [r7, #0]
    2e78:	891b      	ldrh	r3, [r3, #8]
    2e7a:	6878      	ldr	r0, [r7, #4]
    2e7c:	f001 fa5e 	bl	433c <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2e80:	683b      	ldr	r3, [r7, #0]
    2e82:	88db      	ldrh	r3, [r3, #6]
    2e84:	6878      	ldr	r0, [r7, #4]
    2e86:	4619      	mov	r1, r3
    2e88:	f001 f8b8 	bl	3ffc <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    2e8c:	683b      	ldr	r3, [r7, #0]
    2e8e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
    2e92:	89bb      	ldrh	r3, [r7, #12]
    2e94:	89fa      	ldrh	r2, [r7, #14]
    2e96:	6878      	ldr	r0, [r7, #4]
    2e98:	4619      	mov	r1, r3
    2e9a:	4663      	mov	r3, ip
    2e9c:	f001 fa02 	bl	42a4 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2ea0:	683b      	ldr	r3, [r7, #0]
    2ea2:	88db      	ldrh	r3, [r3, #6]
    2ea4:	6878      	ldr	r0, [r7, #4]
    2ea6:	4619      	mov	r1, r3
    2ea8:	f001 f886 	bl	3fb8 <TIM_SetIC1Prescaler>
  }
}
    2eac:	f107 0710 	add.w	r7, r7, #16	; 0x10
    2eb0:	46bd      	mov	sp, r7
    2eb2:	bd80      	pop	{r7, pc}

00002eb4 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *   contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
    2eb4:	b480      	push	{r7}
    2eb6:	b083      	sub	sp, #12
    2eb8:	af00      	add	r7, sp, #0
    2eba:	6078      	str	r0, [r7, #4]
    2ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    2ebe:	683b      	ldr	r3, [r7, #0]
    2ec0:	881a      	ldrh	r2, [r3, #0]
    2ec2:	683b      	ldr	r3, [r7, #0]
    2ec4:	885b      	ldrh	r3, [r3, #2]
    2ec6:	ea42 0303 	orr.w	r3, r2, r3
    2eca:	b29a      	uxth	r2, r3
    2ecc:	683b      	ldr	r3, [r7, #0]
    2ece:	889b      	ldrh	r3, [r3, #4]
    2ed0:	ea42 0303 	orr.w	r3, r2, r3
    2ed4:	b29a      	uxth	r2, r3
    2ed6:	683b      	ldr	r3, [r7, #0]
    2ed8:	88db      	ldrh	r3, [r3, #6]
    2eda:	ea42 0303 	orr.w	r3, r2, r3
    2ede:	b29a      	uxth	r2, r3
    2ee0:	683b      	ldr	r3, [r7, #0]
    2ee2:	891b      	ldrh	r3, [r3, #8]
    2ee4:	ea42 0303 	orr.w	r3, r2, r3
    2ee8:	b29a      	uxth	r2, r3
    2eea:	683b      	ldr	r3, [r7, #0]
    2eec:	895b      	ldrh	r3, [r3, #10]
    2eee:	ea42 0303 	orr.w	r3, r2, r3
    2ef2:	b29a      	uxth	r2, r3
    2ef4:	683b      	ldr	r3, [r7, #0]
    2ef6:	899b      	ldrh	r3, [r3, #12]
    2ef8:	ea42 0303 	orr.w	r3, r2, r3
    2efc:	b29b      	uxth	r3, r3
    2efe:	687a      	ldr	r2, [r7, #4]
    2f00:	f8a2 3044 	strh.w	r3, [r2, #68]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
    2f04:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2f08:	46bd      	mov	sp, r7
    2f0a:	bc80      	pop	{r7}
    2f0c:	4770      	bx	lr
    2f0e:	46c0      	nop			(mov r8, r8)

00002f10 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *   structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    2f10:	b480      	push	{r7}
    2f12:	b083      	sub	sp, #12
    2f14:	af00      	add	r7, sp, #0
    2f16:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
    2f18:	687a      	ldr	r2, [r7, #4]
    2f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2f1e:	8093      	strh	r3, [r2, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
    2f20:	687a      	ldr	r2, [r7, #4]
    2f22:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f26:	8013      	strh	r3, [r2, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
    2f28:	687a      	ldr	r2, [r7, #4]
    2f2a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f2e:	80d3      	strh	r3, [r2, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
    2f30:	687a      	ldr	r2, [r7, #4]
    2f32:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f36:	8053      	strh	r3, [r2, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
    2f38:	687a      	ldr	r2, [r7, #4]
    2f3a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f3e:	7213      	strb	r3, [r2, #8]
}
    2f40:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2f44:	46bd      	mov	sp, r7
    2f46:	bc80      	pop	{r7}
    2f48:	4770      	bx	lr
    2f4a:	46c0      	nop			(mov r8, r8)

00002f4c <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    2f4c:	b480      	push	{r7}
    2f4e:	b083      	sub	sp, #12
    2f50:	af00      	add	r7, sp, #0
    2f52:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
    2f54:	687a      	ldr	r2, [r7, #4]
    2f56:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f5a:	8013      	strh	r3, [r2, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
    2f5c:	687a      	ldr	r2, [r7, #4]
    2f5e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f62:	8053      	strh	r3, [r2, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
    2f64:	687a      	ldr	r2, [r7, #4]
    2f66:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f6a:	8093      	strh	r3, [r2, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
    2f6c:	687a      	ldr	r2, [r7, #4]
    2f6e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f72:	80d3      	strh	r3, [r2, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
    2f74:	687a      	ldr	r2, [r7, #4]
    2f76:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f7a:	8113      	strh	r3, [r2, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
    2f7c:	687a      	ldr	r2, [r7, #4]
    2f7e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f82:	8153      	strh	r3, [r2, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
    2f84:	687a      	ldr	r2, [r7, #4]
    2f86:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f8a:	8193      	strh	r3, [r2, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
    2f8c:	687a      	ldr	r2, [r7, #4]
    2f8e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f92:	81d3      	strh	r3, [r2, #14]
}
    2f94:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2f98:	46bd      	mov	sp, r7
    2f9a:	bc80      	pop	{r7}
    2f9c:	4770      	bx	lr
    2f9e:	46c0      	nop			(mov r8, r8)

00002fa0 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct : pointer to a TIM_ICInitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    2fa0:	b480      	push	{r7}
    2fa2:	b083      	sub	sp, #12
    2fa4:	af00      	add	r7, sp, #0
    2fa6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
    2fa8:	687a      	ldr	r2, [r7, #4]
    2faa:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fae:	8013      	strh	r3, [r2, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
    2fb0:	687a      	ldr	r2, [r7, #4]
    2fb2:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fb6:	8053      	strh	r3, [r2, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
    2fb8:	687a      	ldr	r2, [r7, #4]
    2fba:	f04f 0301 	mov.w	r3, #1	; 0x1
    2fbe:	8093      	strh	r3, [r2, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
    2fc0:	687a      	ldr	r2, [r7, #4]
    2fc2:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fc6:	80d3      	strh	r3, [r2, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
    2fc8:	687a      	ldr	r2, [r7, #4]
    2fca:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fce:	8113      	strh	r3, [r2, #8]
}
    2fd0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2fd4:	46bd      	mov	sp, r7
    2fd6:	bc80      	pop	{r7}
    2fd8:	4770      	bx	lr
    2fda:	46c0      	nop			(mov r8, r8)

00002fdc <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *   will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
    2fdc:	b480      	push	{r7}
    2fde:	b083      	sub	sp, #12
    2fe0:	af00      	add	r7, sp, #0
    2fe2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
    2fe4:	687a      	ldr	r2, [r7, #4]
    2fe6:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fea:	8013      	strh	r3, [r2, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
    2fec:	687a      	ldr	r2, [r7, #4]
    2fee:	f04f 0300 	mov.w	r3, #0	; 0x0
    2ff2:	8053      	strh	r3, [r2, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    2ff4:	687a      	ldr	r2, [r7, #4]
    2ff6:	f04f 0300 	mov.w	r3, #0	; 0x0
    2ffa:	8093      	strh	r3, [r2, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
    2ffc:	687a      	ldr	r2, [r7, #4]
    2ffe:	f04f 0300 	mov.w	r3, #0	; 0x0
    3002:	80d3      	strh	r3, [r2, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
    3004:	687a      	ldr	r2, [r7, #4]
    3006:	f04f 0300 	mov.w	r3, #0	; 0x0
    300a:	8113      	strh	r3, [r2, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
    300c:	687a      	ldr	r2, [r7, #4]
    300e:	f04f 0300 	mov.w	r3, #0	; 0x0
    3012:	8153      	strh	r3, [r2, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
    3014:	687a      	ldr	r2, [r7, #4]
    3016:	f04f 0300 	mov.w	r3, #0	; 0x0
    301a:	8193      	strh	r3, [r2, #12]
}
    301c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3020:	46bd      	mov	sp, r7
    3022:	bc80      	pop	{r7}
    3024:	4770      	bx	lr
    3026:	46c0      	nop			(mov r8, r8)

00003028 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3028:	b480      	push	{r7}
    302a:	b085      	sub	sp, #20
    302c:	af00      	add	r7, sp, #0
    302e:	60f8      	str	r0, [r7, #12]
    3030:	460b      	mov	r3, r1
    3032:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3034:	7afb      	ldrb	r3, [r7, #11]
    3036:	2b00      	cmp	r3, #0
    3038:	d008      	beq.n	304c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
    303a:	68fb      	ldr	r3, [r7, #12]
    303c:	881b      	ldrh	r3, [r3, #0]
    303e:	b29b      	uxth	r3, r3
    3040:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    3044:	b29b      	uxth	r3, r3
    3046:	68fa      	ldr	r2, [r7, #12]
    3048:	8013      	strh	r3, [r2, #0]
    304a:	e00d      	b.n	3068 <TIM_Cmd+0x40>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= CR1_CEN_Reset;
    304c:	68fb      	ldr	r3, [r7, #12]
    304e:	881b      	ldrh	r3, [r3, #0]
    3050:	b29b      	uxth	r3, r3
    3052:	607b      	str	r3, [r7, #4]
    3054:	f240 33fe 	movw	r3, #1022	; 0x3fe
    3058:	6879      	ldr	r1, [r7, #4]
    305a:	ea01 0303 	and.w	r3, r1, r3
    305e:	607b      	str	r3, [r7, #4]
    3060:	68fa      	ldr	r2, [r7, #12]
    3062:	6879      	ldr	r1, [r7, #4]
    3064:	460b      	mov	r3, r1
    3066:	8013      	strh	r3, [r2, #0]
  }
}
    3068:	f107 0714 	add.w	r7, r7, #20	; 0x14
    306c:	46bd      	mov	sp, r7
    306e:	bc80      	pop	{r7}
    3070:	4770      	bx	lr
    3072:	46c0      	nop			(mov r8, r8)

00003074 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3074:	b480      	push	{r7}
    3076:	b085      	sub	sp, #20
    3078:	af00      	add	r7, sp, #0
    307a:	60f8      	str	r0, [r7, #12]
    307c:	460b      	mov	r3, r1
    307e:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3080:	7afb      	ldrb	r3, [r7, #11]
    3082:	2b00      	cmp	r3, #0
    3084:	d00c      	beq.n	30a0 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
    3086:	68fb      	ldr	r3, [r7, #12]
    3088:	f8b3 3044 	ldrh.w	r3, [r3, #68]
    308c:	b29b      	uxth	r3, r3
    308e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    3092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    3096:	b29b      	uxth	r3, r3
    3098:	68fa      	ldr	r2, [r7, #12]
    309a:	f8a2 3044 	strh.w	r3, [r2, #68]
    309e:	e00f      	b.n	30c0 <TIM_CtrlPWMOutputs+0x4c>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= BDTR_MOE_Reset;
    30a0:	68fb      	ldr	r3, [r7, #12]
    30a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]
    30a6:	b29b      	uxth	r3, r3
    30a8:	607b      	str	r3, [r7, #4]
    30aa:	6879      	ldr	r1, [r7, #4]
    30ac:	ea4f 4341 	mov.w	r3, r1, lsl #17
    30b0:	ea4f 4353 	mov.w	r3, r3, lsr #17
    30b4:	607b      	str	r3, [r7, #4]
    30b6:	68fa      	ldr	r2, [r7, #12]
    30b8:	6879      	ldr	r1, [r7, #4]
    30ba:	460b      	mov	r3, r1
    30bc:	f8a2 3044 	strh.w	r3, [r2, #68]
  }  
}
    30c0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    30c4:	46bd      	mov	sp, r7
    30c6:	bc80      	pop	{r7}
    30c8:	4770      	bx	lr
    30ca:	46c0      	nop			(mov r8, r8)

000030cc <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
    30cc:	b480      	push	{r7}
    30ce:	b083      	sub	sp, #12
    30d0:	af00      	add	r7, sp, #0
    30d2:	6078      	str	r0, [r7, #4]
    30d4:	460b      	mov	r3, r1
    30d6:	807b      	strh	r3, [r7, #2]
    30d8:	4613      	mov	r3, r2
    30da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    30dc:	787b      	ldrb	r3, [r7, #1]
    30de:	2b00      	cmp	r3, #0
    30e0:	d009      	beq.n	30f6 <TIM_ITConfig+0x2a>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	899b      	ldrh	r3, [r3, #12]
    30e6:	b29a      	uxth	r2, r3
    30e8:	887b      	ldrh	r3, [r7, #2]
    30ea:	ea42 0303 	orr.w	r3, r2, r3
    30ee:	b29b      	uxth	r3, r3
    30f0:	687a      	ldr	r2, [r7, #4]
    30f2:	8193      	strh	r3, [r2, #12]
    30f4:	e00b      	b.n	310e <TIM_ITConfig+0x42>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
    30f6:	687b      	ldr	r3, [r7, #4]
    30f8:	899b      	ldrh	r3, [r3, #12]
    30fa:	b29a      	uxth	r2, r3
    30fc:	887b      	ldrh	r3, [r7, #2]
    30fe:	ea6f 0303 	mvn.w	r3, r3
    3102:	b29b      	uxth	r3, r3
    3104:	ea02 0303 	and.w	r3, r2, r3
    3108:	b29b      	uxth	r3, r3
    310a:	687a      	ldr	r2, [r7, #4]
    310c:	8193      	strh	r3, [r2, #12]
  }
}
    310e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3112:	46bd      	mov	sp, r7
    3114:	bc80      	pop	{r7}
    3116:	4770      	bx	lr

00003118 <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
    3118:	b480      	push	{r7}
    311a:	b083      	sub	sp, #12
    311c:	af00      	add	r7, sp, #0
    311e:	6078      	str	r0, [r7, #4]
    3120:	460b      	mov	r3, r1
    3122:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
    3124:	687a      	ldr	r2, [r7, #4]
    3126:	887b      	ldrh	r3, [r7, #2]
    3128:	8293      	strh	r3, [r2, #20]
}
    312a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    312e:	46bd      	mov	sp, r7
    3130:	bc80      	pop	{r7}
    3132:	4770      	bx	lr

00003134 <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Byte and TIM_DMABurstLength_18Bytes.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
    3134:	b480      	push	{r7}
    3136:	b083      	sub	sp, #12
    3138:	af00      	add	r7, sp, #0
    313a:	6078      	str	r0, [r7, #4]
    313c:	460b      	mov	r3, r1
    313e:	807b      	strh	r3, [r7, #2]
    3140:	4613      	mov	r3, r2
    3142:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
    3144:	887a      	ldrh	r2, [r7, #2]
    3146:	883b      	ldrh	r3, [r7, #0]
    3148:	ea42 0303 	orr.w	r3, r2, r3
    314c:	b29b      	uxth	r3, r3
    314e:	687a      	ldr	r2, [r7, #4]
    3150:	f8a2 3048 	strh.w	r3, [r2, #72]
}
    3154:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3158:	46bd      	mov	sp, r7
    315a:	bc80      	pop	{r7}
    315c:	4770      	bx	lr
    315e:	46c0      	nop			(mov r8, r8)

00003160 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
    3160:	b480      	push	{r7}
    3162:	b083      	sub	sp, #12
    3164:	af00      	add	r7, sp, #0
    3166:	6078      	str	r0, [r7, #4]
    3168:	460b      	mov	r3, r1
    316a:	807b      	strh	r3, [r7, #2]
    316c:	4613      	mov	r3, r2
    316e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3170:	787b      	ldrb	r3, [r7, #1]
    3172:	2b00      	cmp	r3, #0
    3174:	d009      	beq.n	318a <TIM_DMACmd+0x2a>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
    3176:	687b      	ldr	r3, [r7, #4]
    3178:	899b      	ldrh	r3, [r3, #12]
    317a:	b29a      	uxth	r2, r3
    317c:	887b      	ldrh	r3, [r7, #2]
    317e:	ea42 0303 	orr.w	r3, r2, r3
    3182:	b29b      	uxth	r3, r3
    3184:	687a      	ldr	r2, [r7, #4]
    3186:	8193      	strh	r3, [r2, #12]
    3188:	e00b      	b.n	31a2 <TIM_DMACmd+0x42>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
    318a:	687b      	ldr	r3, [r7, #4]
    318c:	899b      	ldrh	r3, [r3, #12]
    318e:	b29a      	uxth	r2, r3
    3190:	887b      	ldrh	r3, [r7, #2]
    3192:	ea6f 0303 	mvn.w	r3, r3
    3196:	b29b      	uxth	r3, r3
    3198:	ea02 0303 	and.w	r3, r2, r3
    319c:	b29b      	uxth	r3, r3
    319e:	687a      	ldr	r2, [r7, #4]
    31a0:	8193      	strh	r3, [r2, #12]
  }
}
    31a2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    31a6:	46bd      	mov	sp, r7
    31a8:	bc80      	pop	{r7}
    31aa:	4770      	bx	lr

000031ac <TIM_InternalClockConfig>:
  * @brief  Configures the TIMx interrnal Clock
  * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
    31ac:	b480      	push	{r7}
    31ae:	b083      	sub	sp, #12
    31b0:	af00      	add	r7, sp, #0
    31b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  SMCR_SMS_Mask;
    31b4:	687b      	ldr	r3, [r7, #4]
    31b6:	891b      	ldrh	r3, [r3, #8]
    31b8:	b29b      	uxth	r3, r3
    31ba:	603b      	str	r3, [r7, #0]
    31bc:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    31c0:	6839      	ldr	r1, [r7, #0]
    31c2:	ea01 0303 	and.w	r3, r1, r3
    31c6:	603b      	str	r3, [r7, #0]
    31c8:	687a      	ldr	r2, [r7, #4]
    31ca:	6839      	ldr	r1, [r7, #0]
    31cc:	460b      	mov	r3, r1
    31ce:	8113      	strh	r3, [r2, #8]
}
    31d0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    31d4:	46bd      	mov	sp, r7
    31d6:	bc80      	pop	{r7}
    31d8:	4770      	bx	lr
    31da:	46c0      	nop			(mov r8, r8)

000031dc <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    31dc:	b580      	push	{r7, lr}
    31de:	b082      	sub	sp, #8
    31e0:	af00      	add	r7, sp, #0
    31e2:	6078      	str	r0, [r7, #4]
    31e4:	460b      	mov	r3, r1
    31e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
    31e8:	887b      	ldrh	r3, [r7, #2]
    31ea:	6878      	ldr	r0, [r7, #4]
    31ec:	4619      	mov	r1, r3
    31ee:	f000 f8f7 	bl	33e0 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    31f2:	687b      	ldr	r3, [r7, #4]
    31f4:	891b      	ldrh	r3, [r3, #8]
    31f6:	b29b      	uxth	r3, r3
    31f8:	f043 0307 	orr.w	r3, r3, #7	; 0x7
    31fc:	b29b      	uxth	r3, r3
    31fe:	687a      	ldr	r2, [r7, #4]
    3200:	8113      	strh	r3, [r2, #8]
}
    3202:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3206:	46bd      	mov	sp, r7
    3208:	bd80      	pop	{r7, pc}
    320a:	46c0      	nop			(mov r8, r8)

0000320c <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
    320c:	b580      	push	{r7, lr}
    320e:	b084      	sub	sp, #16
    3210:	af00      	add	r7, sp, #0
    3212:	60f8      	str	r0, [r7, #12]
    3214:	4618      	mov	r0, r3
    3216:	460b      	mov	r3, r1
    3218:	817b      	strh	r3, [r7, #10]
    321a:	4613      	mov	r3, r2
    321c:	813b      	strh	r3, [r7, #8]
    321e:	4603      	mov	r3, r0
    3220:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
    3222:	897b      	ldrh	r3, [r7, #10]
    3224:	2b60      	cmp	r3, #96
    3226:	d10a      	bne.n	323e <TIM_TIxExternalClockConfig+0x32>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    3228:	893b      	ldrh	r3, [r7, #8]
    322a:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    322e:	68f8      	ldr	r0, [r7, #12]
    3230:	4619      	mov	r1, r3
    3232:	f04f 0201 	mov.w	r2, #1	; 0x1
    3236:	4663      	mov	r3, ip
    3238:	f001 f880 	bl	433c <TI2_Config>
    323c:	e009      	b.n	3252 <TIM_TIxExternalClockConfig+0x46>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    323e:	893b      	ldrh	r3, [r7, #8]
    3240:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    3244:	68f8      	ldr	r0, [r7, #12]
    3246:	4619      	mov	r1, r3
    3248:	f04f 0201 	mov.w	r2, #1	; 0x1
    324c:	4663      	mov	r3, ip
    324e:	f001 f829 	bl	42a4 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
    3252:	897b      	ldrh	r3, [r7, #10]
    3254:	68f8      	ldr	r0, [r7, #12]
    3256:	4619      	mov	r1, r3
    3258:	f000 f8c2 	bl	33e0 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    325c:	68fb      	ldr	r3, [r7, #12]
    325e:	891b      	ldrh	r3, [r3, #8]
    3260:	b29b      	uxth	r3, r3
    3262:	f043 0307 	orr.w	r3, r3, #7	; 0x7
    3266:	b29b      	uxth	r3, r3
    3268:	68fa      	ldr	r2, [r7, #12]
    326a:	8113      	strh	r3, [r2, #8]
}
    326c:	f107 0710 	add.w	r7, r7, #16	; 0x10
    3270:	46bd      	mov	sp, r7
    3272:	bd80      	pop	{r7, pc}

00003274 <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
    3274:	b580      	push	{r7, lr}
    3276:	b086      	sub	sp, #24
    3278:	af00      	add	r7, sp, #0
    327a:	60f8      	str	r0, [r7, #12]
    327c:	4618      	mov	r0, r3
    327e:	460b      	mov	r3, r1
    3280:	817b      	strh	r3, [r7, #10]
    3282:	4613      	mov	r3, r2
    3284:	813b      	strh	r3, [r7, #8]
    3286:	4603      	mov	r3, r0
    3288:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    328a:	f04f 0300 	mov.w	r3, #0	; 0x0
    328e:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    3290:	897b      	ldrh	r3, [r7, #10]
    3292:	893a      	ldrh	r2, [r7, #8]
    3294:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    3298:	68f8      	ldr	r0, [r7, #12]
    329a:	4619      	mov	r1, r3
    329c:	4663      	mov	r3, ip
    329e:	f000 f83b 	bl	3318 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    32a2:	68fb      	ldr	r3, [r7, #12]
    32a4:	891b      	ldrh	r3, [r3, #8]
    32a6:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= SMCR_SMS_Mask;
    32a8:	8afb      	ldrh	r3, [r7, #22]
    32aa:	f023 0307 	bic.w	r3, r3, #7	; 0x7
    32ae:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
    32b0:	8afb      	ldrh	r3, [r7, #22]
    32b2:	f043 0307 	orr.w	r3, r3, #7	; 0x7
    32b6:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= SMCR_TS_Mask;
    32b8:	8afb      	ldrh	r3, [r7, #22]
    32ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    32be:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
    32c0:	8afb      	ldrh	r3, [r7, #22]
    32c2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    32c6:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    32c8:	68fa      	ldr	r2, [r7, #12]
    32ca:	8afb      	ldrh	r3, [r7, #22]
    32cc:	8113      	strh	r3, [r2, #8]
}
    32ce:	f107 0718 	add.w	r7, r7, #24	; 0x18
    32d2:	46bd      	mov	sp, r7
    32d4:	bd80      	pop	{r7, pc}
    32d6:	46c0      	nop			(mov r8, r8)

000032d8 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
    32d8:	b580      	push	{r7, lr}
    32da:	b084      	sub	sp, #16
    32dc:	af00      	add	r7, sp, #0
    32de:	60f8      	str	r0, [r7, #12]
    32e0:	4618      	mov	r0, r3
    32e2:	460b      	mov	r3, r1
    32e4:	817b      	strh	r3, [r7, #10]
    32e6:	4613      	mov	r3, r2
    32e8:	813b      	strh	r3, [r7, #8]
    32ea:	4603      	mov	r3, r0
    32ec:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    32ee:	897b      	ldrh	r3, [r7, #10]
    32f0:	893a      	ldrh	r2, [r7, #8]
    32f2:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    32f6:	68f8      	ldr	r0, [r7, #12]
    32f8:	4619      	mov	r1, r3
    32fa:	4663      	mov	r3, ip
    32fc:	f000 f80c 	bl	3318 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= SMCR_ECE_Set;
    3300:	68fb      	ldr	r3, [r7, #12]
    3302:	891b      	ldrh	r3, [r3, #8]
    3304:	b29b      	uxth	r3, r3
    3306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    330a:	b29b      	uxth	r3, r3
    330c:	68fa      	ldr	r2, [r7, #12]
    330e:	8113      	strh	r3, [r2, #8]
}
    3310:	f107 0710 	add.w	r7, r7, #16	; 0x10
    3314:	46bd      	mov	sp, r7
    3316:	bd80      	pop	{r7, pc}

00003318 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
    3318:	b480      	push	{r7}
    331a:	b087      	sub	sp, #28
    331c:	af00      	add	r7, sp, #0
    331e:	60f8      	str	r0, [r7, #12]
    3320:	4618      	mov	r0, r3
    3322:	460b      	mov	r3, r1
    3324:	817b      	strh	r3, [r7, #10]
    3326:	4613      	mov	r3, r2
    3328:	813b      	strh	r3, [r7, #8]
    332a:	4603      	mov	r3, r0
    332c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    332e:	f04f 0300 	mov.w	r3, #0	; 0x0
    3332:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
    3334:	68fb      	ldr	r3, [r7, #12]
    3336:	891b      	ldrh	r3, [r3, #8]
    3338:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
    333a:	8afb      	ldrh	r3, [r7, #22]
    333c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    3340:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
    3342:	88fb      	ldrh	r3, [r7, #6]
    3344:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3348:	b29a      	uxth	r2, r3
    334a:	893b      	ldrh	r3, [r7, #8]
    334c:	ea42 0303 	orr.w	r3, r2, r3
    3350:	b29a      	uxth	r2, r3
    3352:	897b      	ldrh	r3, [r7, #10]
    3354:	ea42 0303 	orr.w	r3, r2, r3
    3358:	b29a      	uxth	r2, r3
    335a:	8afb      	ldrh	r3, [r7, #22]
    335c:	ea42 0303 	orr.w	r3, r2, r3
    3360:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    3362:	68fa      	ldr	r2, [r7, #12]
    3364:	8afb      	ldrh	r3, [r7, #22]
    3366:	8113      	strh	r3, [r2, #8]
}
    3368:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    336c:	46bd      	mov	sp, r7
    336e:	bc80      	pop	{r7}
    3370:	4770      	bx	lr
    3372:	46c0      	nop			(mov r8, r8)

00003374 <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
    3374:	b480      	push	{r7}
    3376:	b083      	sub	sp, #12
    3378:	af00      	add	r7, sp, #0
    337a:	6078      	str	r0, [r7, #4]
    337c:	460b      	mov	r3, r1
    337e:	807b      	strh	r3, [r7, #2]
    3380:	4613      	mov	r3, r2
    3382:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
    3384:	687a      	ldr	r2, [r7, #4]
    3386:	887b      	ldrh	r3, [r7, #2]
    3388:	8513      	strh	r3, [r2, #40]
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
    338a:	687a      	ldr	r2, [r7, #4]
    338c:	883b      	ldrh	r3, [r7, #0]
    338e:	8293      	strh	r3, [r2, #20]
}
    3390:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3394:	46bd      	mov	sp, r7
    3396:	bc80      	pop	{r7}
    3398:	4770      	bx	lr
    339a:	46c0      	nop			(mov r8, r8)

0000339c <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
    339c:	b480      	push	{r7}
    339e:	b085      	sub	sp, #20
    33a0:	af00      	add	r7, sp, #0
    33a2:	6078      	str	r0, [r7, #4]
    33a4:	460b      	mov	r3, r1
    33a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
    33a8:	f04f 0300 	mov.w	r3, #0	; 0x0
    33ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	881b      	ldrh	r3, [r3, #0]
    33b2:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= CR1_CounterMode_Mask;
    33b4:	89fb      	ldrh	r3, [r7, #14]
    33b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    33ba:	ea4f 5383 	mov.w	r3, r3, lsl #22
    33be:	ea4f 5393 	mov.w	r3, r3, lsr #22
    33c2:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
    33c4:	89fa      	ldrh	r2, [r7, #14]
    33c6:	887b      	ldrh	r3, [r7, #2]
    33c8:	ea42 0303 	orr.w	r3, r2, r3
    33cc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
    33ce:	687a      	ldr	r2, [r7, #4]
    33d0:	89fb      	ldrh	r3, [r7, #14]
    33d2:	8013      	strh	r3, [r2, #0]
}
    33d4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    33d8:	46bd      	mov	sp, r7
    33da:	bc80      	pop	{r7}
    33dc:	4770      	bx	lr
    33de:	46c0      	nop			(mov r8, r8)

000033e0 <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    33e0:	b480      	push	{r7}
    33e2:	b085      	sub	sp, #20
    33e4:	af00      	add	r7, sp, #0
    33e6:	6078      	str	r0, [r7, #4]
    33e8:	460b      	mov	r3, r1
    33ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
    33ec:	f04f 0300 	mov.w	r3, #0	; 0x0
    33f0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    33f2:	687b      	ldr	r3, [r7, #4]
    33f4:	891b      	ldrh	r3, [r3, #8]
    33f6:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
    33f8:	89fb      	ldrh	r3, [r7, #14]
    33fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    33fe:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
    3400:	89fa      	ldrh	r2, [r7, #14]
    3402:	887b      	ldrh	r3, [r7, #2]
    3404:	ea42 0303 	orr.w	r3, r2, r3
    3408:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    340a:	687a      	ldr	r2, [r7, #4]
    340c:	89fb      	ldrh	r3, [r7, #14]
    340e:	8113      	strh	r3, [r2, #8]
}
    3410:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3414:	46bd      	mov	sp, r7
    3416:	bc80      	pop	{r7}
    3418:	4770      	bx	lr
    341a:	46c0      	nop			(mov r8, r8)

0000341c <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
    341c:	b480      	push	{r7}
    341e:	b087      	sub	sp, #28
    3420:	af00      	add	r7, sp, #0
    3422:	60f8      	str	r0, [r7, #12]
    3424:	4618      	mov	r0, r3
    3426:	460b      	mov	r3, r1
    3428:	817b      	strh	r3, [r7, #10]
    342a:	4613      	mov	r3, r2
    342c:	813b      	strh	r3, [r7, #8]
    342e:	4603      	mov	r3, r0
    3430:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    3432:	f04f 0300 	mov.w	r3, #0	; 0x0
    3436:	827b      	strh	r3, [r7, #18]
  uint16_t tmpccmr1 = 0;
    3438:	f04f 0300 	mov.w	r3, #0	; 0x0
    343c:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
    343e:	f04f 0300 	mov.w	r3, #0	; 0x0
    3442:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    3444:	68fb      	ldr	r3, [r7, #12]
    3446:	891b      	ldrh	r3, [r3, #8]
    3448:	827b      	strh	r3, [r7, #18]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    344a:	68fb      	ldr	r3, [r7, #12]
    344c:	8b1b      	ldrh	r3, [r3, #24]
    344e:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    3450:	68fb      	ldr	r3, [r7, #12]
    3452:	8c1b      	ldrh	r3, [r3, #32]
    3454:	82fb      	strh	r3, [r7, #22]

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
    3456:	8a7b      	ldrh	r3, [r7, #18]
    3458:	f023 0307 	bic.w	r3, r3, #7	; 0x7
    345c:	827b      	strh	r3, [r7, #18]
  tmpsmcr |= TIM_EncoderMode;
    345e:	8a7a      	ldrh	r2, [r7, #18]
    3460:	897b      	ldrh	r3, [r7, #10]
    3462:	ea42 0303 	orr.w	r3, r2, r3
    3466:	827b      	strh	r3, [r7, #18]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
    3468:	8abb      	ldrh	r3, [r7, #20]
    346a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    346e:	f023 0303 	bic.w	r3, r3, #3	; 0x3
    3472:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
    3474:	8abb      	ldrh	r3, [r7, #20]
    3476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    347a:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    347e:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
    3480:	8afb      	ldrh	r3, [r7, #22]
    3482:	f023 0322 	bic.w	r3, r3, #34	; 0x22
    3486:	82fb      	strh	r3, [r7, #22]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
    3488:	88fb      	ldrh	r3, [r7, #6]
    348a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    348e:	b29a      	uxth	r2, r3
    3490:	893b      	ldrh	r3, [r7, #8]
    3492:	ea42 0303 	orr.w	r3, r2, r3
    3496:	b29a      	uxth	r2, r3
    3498:	8afb      	ldrh	r3, [r7, #22]
    349a:	ea42 0303 	orr.w	r3, r2, r3
    349e:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    34a0:	68fa      	ldr	r2, [r7, #12]
    34a2:	8a7b      	ldrh	r3, [r7, #18]
    34a4:	8113      	strh	r3, [r2, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    34a6:	68fa      	ldr	r2, [r7, #12]
    34a8:	8abb      	ldrh	r3, [r7, #20]
    34aa:	8313      	strh	r3, [r2, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    34ac:	68fa      	ldr	r2, [r7, #12]
    34ae:	8afb      	ldrh	r3, [r7, #22]
    34b0:	8413      	strh	r3, [r2, #32]
}
    34b2:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    34b6:	46bd      	mov	sp, r7
    34b8:	bc80      	pop	{r7}
    34ba:	4770      	bx	lr

000034bc <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    34bc:	b480      	push	{r7}
    34be:	b085      	sub	sp, #20
    34c0:	af00      	add	r7, sp, #0
    34c2:	6078      	str	r0, [r7, #4]
    34c4:	460b      	mov	r3, r1
    34c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    34c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    34cc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	8b1b      	ldrh	r3, [r3, #24]
    34d2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= CCMR_OC13M_Mask;
    34d4:	89fb      	ldrh	r3, [r7, #14]
    34d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    34da:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
    34dc:	89fa      	ldrh	r2, [r7, #14]
    34de:	887b      	ldrh	r3, [r7, #2]
    34e0:	ea42 0303 	orr.w	r3, r2, r3
    34e4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    34e6:	687a      	ldr	r2, [r7, #4]
    34e8:	89fb      	ldrh	r3, [r7, #14]
    34ea:	8313      	strh	r3, [r2, #24]
}
    34ec:	f107 0714 	add.w	r7, r7, #20	; 0x14
    34f0:	46bd      	mov	sp, r7
    34f2:	bc80      	pop	{r7}
    34f4:	4770      	bx	lr
    34f6:	46c0      	nop			(mov r8, r8)

000034f8 <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    34f8:	b480      	push	{r7}
    34fa:	b085      	sub	sp, #20
    34fc:	af00      	add	r7, sp, #0
    34fe:	6078      	str	r0, [r7, #4]
    3500:	460b      	mov	r3, r1
    3502:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    3504:	f04f 0300 	mov.w	r3, #0	; 0x0
    3508:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    350a:	687b      	ldr	r3, [r7, #4]
    350c:	8b1b      	ldrh	r3, [r3, #24]
    350e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= CCMR_OC24M_Mask;
    3510:	89fb      	ldrh	r3, [r7, #14]
    3512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3516:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
    3518:	887b      	ldrh	r3, [r7, #2]
    351a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    351e:	b29a      	uxth	r2, r3
    3520:	89fb      	ldrh	r3, [r7, #14]
    3522:	ea42 0303 	orr.w	r3, r2, r3
    3526:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3528:	687a      	ldr	r2, [r7, #4]
    352a:	89fb      	ldrh	r3, [r7, #14]
    352c:	8313      	strh	r3, [r2, #24]
}
    352e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3532:	46bd      	mov	sp, r7
    3534:	bc80      	pop	{r7}
    3536:	4770      	bx	lr

00003538 <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    3538:	b480      	push	{r7}
    353a:	b085      	sub	sp, #20
    353c:	af00      	add	r7, sp, #0
    353e:	6078      	str	r0, [r7, #4]
    3540:	460b      	mov	r3, r1
    3542:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3544:	f04f 0300 	mov.w	r3, #0	; 0x0
    3548:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    354a:	687b      	ldr	r3, [r7, #4]
    354c:	8b9b      	ldrh	r3, [r3, #28]
    354e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= CCMR_OC13M_Mask;
    3550:	89fb      	ldrh	r3, [r7, #14]
    3552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    3556:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
    3558:	89fa      	ldrh	r2, [r7, #14]
    355a:	887b      	ldrh	r3, [r7, #2]
    355c:	ea42 0303 	orr.w	r3, r2, r3
    3560:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    3562:	687a      	ldr	r2, [r7, #4]
    3564:	89fb      	ldrh	r3, [r7, #14]
    3566:	8393      	strh	r3, [r2, #28]
}
    3568:	f107 0714 	add.w	r7, r7, #20	; 0x14
    356c:	46bd      	mov	sp, r7
    356e:	bc80      	pop	{r7}
    3570:	4770      	bx	lr
    3572:	46c0      	nop			(mov r8, r8)

00003574 <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    3574:	b480      	push	{r7}
    3576:	b085      	sub	sp, #20
    3578:	af00      	add	r7, sp, #0
    357a:	6078      	str	r0, [r7, #4]
    357c:	460b      	mov	r3, r1
    357e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3580:	f04f 0300 	mov.w	r3, #0	; 0x0
    3584:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    3586:	687b      	ldr	r3, [r7, #4]
    3588:	8b9b      	ldrh	r3, [r3, #28]
    358a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= CCMR_OC24M_Mask;
    358c:	89fb      	ldrh	r3, [r7, #14]
    358e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3592:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
    3594:	887b      	ldrh	r3, [r7, #2]
    3596:	ea4f 2303 	mov.w	r3, r3, lsl #8
    359a:	b29a      	uxth	r2, r3
    359c:	89fb      	ldrh	r3, [r7, #14]
    359e:	ea42 0303 	orr.w	r3, r2, r3
    35a2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    35a4:	687a      	ldr	r2, [r7, #4]
    35a6:	89fb      	ldrh	r3, [r7, #14]
    35a8:	8393      	strh	r3, [r2, #28]
}
    35aa:	f107 0714 	add.w	r7, r7, #20	; 0x14
    35ae:	46bd      	mov	sp, r7
    35b0:	bc80      	pop	{r7}
    35b2:	4770      	bx	lr

000035b4 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    35b4:	b480      	push	{r7}
    35b6:	b085      	sub	sp, #20
    35b8:	af00      	add	r7, sp, #0
    35ba:	60f8      	str	r0, [r7, #12]
    35bc:	460b      	mov	r3, r1
    35be:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    35c0:	7afb      	ldrb	r3, [r7, #11]
    35c2:	2b00      	cmp	r3, #0
    35c4:	d008      	beq.n	35d8 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
    35c6:	68fb      	ldr	r3, [r7, #12]
    35c8:	881b      	ldrh	r3, [r3, #0]
    35ca:	b29b      	uxth	r3, r3
    35cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    35d0:	b29b      	uxth	r3, r3
    35d2:	68fa      	ldr	r2, [r7, #12]
    35d4:	8013      	strh	r3, [r2, #0]
    35d6:	e00d      	b.n	35f4 <TIM_ARRPreloadConfig+0x40>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= CR1_ARPE_Reset;
    35d8:	68fb      	ldr	r3, [r7, #12]
    35da:	881b      	ldrh	r3, [r3, #0]
    35dc:	b29b      	uxth	r3, r3
    35de:	607b      	str	r3, [r7, #4]
    35e0:	f240 337f 	movw	r3, #895	; 0x37f
    35e4:	6879      	ldr	r1, [r7, #4]
    35e6:	ea01 0303 	and.w	r3, r1, r3
    35ea:	607b      	str	r3, [r7, #4]
    35ec:	68fa      	ldr	r2, [r7, #12]
    35ee:	6879      	ldr	r1, [r7, #4]
    35f0:	460b      	mov	r3, r1
    35f2:	8013      	strh	r3, [r2, #0]
  }
}
    35f4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    35f8:	46bd      	mov	sp, r7
    35fa:	bc80      	pop	{r7}
    35fc:	4770      	bx	lr
    35fe:	46c0      	nop			(mov r8, r8)

00003600 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3600:	b480      	push	{r7}
    3602:	b085      	sub	sp, #20
    3604:	af00      	add	r7, sp, #0
    3606:	60f8      	str	r0, [r7, #12]
    3608:	460b      	mov	r3, r1
    360a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    360c:	7afb      	ldrb	r3, [r7, #11]
    360e:	2b00      	cmp	r3, #0
    3610:	d008      	beq.n	3624 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
    3612:	68fb      	ldr	r3, [r7, #12]
    3614:	889b      	ldrh	r3, [r3, #4]
    3616:	b29b      	uxth	r3, r3
    3618:	f043 0304 	orr.w	r3, r3, #4	; 0x4
    361c:	b29b      	uxth	r3, r3
    361e:	68fa      	ldr	r2, [r7, #12]
    3620:	8093      	strh	r3, [r2, #4]
    3622:	e00d      	b.n	3640 <TIM_SelectCOM+0x40>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= CR2_CCUS_Reset;
    3624:	68fb      	ldr	r3, [r7, #12]
    3626:	889b      	ldrh	r3, [r3, #4]
    3628:	b29b      	uxth	r3, r3
    362a:	607b      	str	r3, [r7, #4]
    362c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    3630:	6879      	ldr	r1, [r7, #4]
    3632:	ea01 0303 	and.w	r3, r1, r3
    3636:	607b      	str	r3, [r7, #4]
    3638:	68fa      	ldr	r2, [r7, #12]
    363a:	6879      	ldr	r1, [r7, #4]
    363c:	460b      	mov	r3, r1
    363e:	8093      	strh	r3, [r2, #4]
  }
}
    3640:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3644:	46bd      	mov	sp, r7
    3646:	bc80      	pop	{r7}
    3648:	4770      	bx	lr
    364a:	46c0      	nop			(mov r8, r8)

0000364c <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    364c:	b480      	push	{r7}
    364e:	b085      	sub	sp, #20
    3650:	af00      	add	r7, sp, #0
    3652:	60f8      	str	r0, [r7, #12]
    3654:	460b      	mov	r3, r1
    3656:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3658:	7afb      	ldrb	r3, [r7, #11]
    365a:	2b00      	cmp	r3, #0
    365c:	d008      	beq.n	3670 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
    365e:	68fb      	ldr	r3, [r7, #12]
    3660:	889b      	ldrh	r3, [r3, #4]
    3662:	b29b      	uxth	r3, r3
    3664:	f043 0308 	orr.w	r3, r3, #8	; 0x8
    3668:	b29b      	uxth	r3, r3
    366a:	68fa      	ldr	r2, [r7, #12]
    366c:	8093      	strh	r3, [r2, #4]
    366e:	e00d      	b.n	368c <TIM_SelectCCDMA+0x40>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= CR2_CCDS_Reset;
    3670:	68fb      	ldr	r3, [r7, #12]
    3672:	889b      	ldrh	r3, [r3, #4]
    3674:	b29b      	uxth	r3, r3
    3676:	607b      	str	r3, [r7, #4]
    3678:	f64f 73f7 	movw	r3, #65527	; 0xfff7
    367c:	6879      	ldr	r1, [r7, #4]
    367e:	ea01 0303 	and.w	r3, r1, r3
    3682:	607b      	str	r3, [r7, #4]
    3684:	68fa      	ldr	r2, [r7, #12]
    3686:	6879      	ldr	r1, [r7, #4]
    3688:	460b      	mov	r3, r1
    368a:	8093      	strh	r3, [r2, #4]
  }
}
    368c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3690:	46bd      	mov	sp, r7
    3692:	bc80      	pop	{r7}
    3694:	4770      	bx	lr
    3696:	46c0      	nop			(mov r8, r8)

00003698 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
    3698:	b480      	push	{r7}
    369a:	b085      	sub	sp, #20
    369c:	af00      	add	r7, sp, #0
    369e:	60f8      	str	r0, [r7, #12]
    36a0:	460b      	mov	r3, r1
    36a2:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    36a4:	7afb      	ldrb	r3, [r7, #11]
    36a6:	2b00      	cmp	r3, #0
    36a8:	d008      	beq.n	36bc <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
    36aa:	68fb      	ldr	r3, [r7, #12]
    36ac:	889b      	ldrh	r3, [r3, #4]
    36ae:	b29b      	uxth	r3, r3
    36b0:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    36b4:	b29b      	uxth	r3, r3
    36b6:	68fa      	ldr	r2, [r7, #12]
    36b8:	8093      	strh	r3, [r2, #4]
    36ba:	e00d      	b.n	36d8 <TIM_CCPreloadControl+0x40>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= CR2_CCPC_Reset;
    36bc:	68fb      	ldr	r3, [r7, #12]
    36be:	889b      	ldrh	r3, [r3, #4]
    36c0:	b29b      	uxth	r3, r3
    36c2:	607b      	str	r3, [r7, #4]
    36c4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    36c8:	6879      	ldr	r1, [r7, #4]
    36ca:	ea01 0303 	and.w	r3, r1, r3
    36ce:	607b      	str	r3, [r7, #4]
    36d0:	68fa      	ldr	r2, [r7, #12]
    36d2:	6879      	ldr	r1, [r7, #4]
    36d4:	460b      	mov	r3, r1
    36d6:	8093      	strh	r3, [r2, #4]
  }
}
    36d8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    36dc:	46bd      	mov	sp, r7
    36de:	bc80      	pop	{r7}
    36e0:	4770      	bx	lr
    36e2:	46c0      	nop			(mov r8, r8)

000036e4 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    36e4:	b480      	push	{r7}
    36e6:	b085      	sub	sp, #20
    36e8:	af00      	add	r7, sp, #0
    36ea:	6078      	str	r0, [r7, #4]
    36ec:	460b      	mov	r3, r1
    36ee:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    36f0:	f04f 0300 	mov.w	r3, #0	; 0x0
    36f4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    36f6:	687b      	ldr	r3, [r7, #4]
    36f8:	8b1b      	ldrh	r3, [r3, #24]
    36fa:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= CCMR_OC13PE_Reset;
    36fc:	89fb      	ldrh	r3, [r7, #14]
    36fe:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    3702:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
    3704:	89fa      	ldrh	r2, [r7, #14]
    3706:	887b      	ldrh	r3, [r7, #2]
    3708:	ea42 0303 	orr.w	r3, r2, r3
    370c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    370e:	687a      	ldr	r2, [r7, #4]
    3710:	89fb      	ldrh	r3, [r7, #14]
    3712:	8313      	strh	r3, [r2, #24]
}
    3714:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3718:	46bd      	mov	sp, r7
    371a:	bc80      	pop	{r7}
    371c:	4770      	bx	lr
    371e:	46c0      	nop			(mov r8, r8)

00003720 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    3720:	b480      	push	{r7}
    3722:	b085      	sub	sp, #20
    3724:	af00      	add	r7, sp, #0
    3726:	6078      	str	r0, [r7, #4]
    3728:	460b      	mov	r3, r1
    372a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    372c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3730:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    3732:	687b      	ldr	r3, [r7, #4]
    3734:	8b1b      	ldrh	r3, [r3, #24]
    3736:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= CCMR_OC24PE_Reset;
    3738:	89fb      	ldrh	r3, [r7, #14]
    373a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    373e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
    3740:	887b      	ldrh	r3, [r7, #2]
    3742:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3746:	b29a      	uxth	r2, r3
    3748:	89fb      	ldrh	r3, [r7, #14]
    374a:	ea42 0303 	orr.w	r3, r2, r3
    374e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3750:	687a      	ldr	r2, [r7, #4]
    3752:	89fb      	ldrh	r3, [r7, #14]
    3754:	8313      	strh	r3, [r2, #24]
}
    3756:	f107 0714 	add.w	r7, r7, #20	; 0x14
    375a:	46bd      	mov	sp, r7
    375c:	bc80      	pop	{r7}
    375e:	4770      	bx	lr

00003760 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    3760:	b480      	push	{r7}
    3762:	b085      	sub	sp, #20
    3764:	af00      	add	r7, sp, #0
    3766:	6078      	str	r0, [r7, #4]
    3768:	460b      	mov	r3, r1
    376a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    376c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3770:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    3772:	687b      	ldr	r3, [r7, #4]
    3774:	8b9b      	ldrh	r3, [r3, #28]
    3776:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= CCMR_OC13PE_Reset;
    3778:	89fb      	ldrh	r3, [r7, #14]
    377a:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    377e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
    3780:	89fa      	ldrh	r2, [r7, #14]
    3782:	887b      	ldrh	r3, [r7, #2]
    3784:	ea42 0303 	orr.w	r3, r2, r3
    3788:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    378a:	687a      	ldr	r2, [r7, #4]
    378c:	89fb      	ldrh	r3, [r7, #14]
    378e:	8393      	strh	r3, [r2, #28]
}
    3790:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3794:	46bd      	mov	sp, r7
    3796:	bc80      	pop	{r7}
    3798:	4770      	bx	lr
    379a:	46c0      	nop			(mov r8, r8)

0000379c <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    379c:	b480      	push	{r7}
    379e:	b085      	sub	sp, #20
    37a0:	af00      	add	r7, sp, #0
    37a2:	6078      	str	r0, [r7, #4]
    37a4:	460b      	mov	r3, r1
    37a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    37a8:	f04f 0300 	mov.w	r3, #0	; 0x0
    37ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    37ae:	687b      	ldr	r3, [r7, #4]
    37b0:	8b9b      	ldrh	r3, [r3, #28]
    37b2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= CCMR_OC24PE_Reset;
    37b4:	89fb      	ldrh	r3, [r7, #14]
    37b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    37ba:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
    37bc:	887b      	ldrh	r3, [r7, #2]
    37be:	ea4f 2303 	mov.w	r3, r3, lsl #8
    37c2:	b29a      	uxth	r2, r3
    37c4:	89fb      	ldrh	r3, [r7, #14]
    37c6:	ea42 0303 	orr.w	r3, r2, r3
    37ca:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    37cc:	687a      	ldr	r2, [r7, #4]
    37ce:	89fb      	ldrh	r3, [r7, #14]
    37d0:	8393      	strh	r3, [r2, #28]
}
    37d2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    37d6:	46bd      	mov	sp, r7
    37d8:	bc80      	pop	{r7}
    37da:	4770      	bx	lr

000037dc <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    37dc:	b480      	push	{r7}
    37de:	b085      	sub	sp, #20
    37e0:	af00      	add	r7, sp, #0
    37e2:	6078      	str	r0, [r7, #4]
    37e4:	460b      	mov	r3, r1
    37e6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    37e8:	f04f 0300 	mov.w	r3, #0	; 0x0
    37ec:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	8b1b      	ldrh	r3, [r3, #24]
    37f2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= CCMR_OC13FE_Reset;
    37f4:	89fb      	ldrh	r3, [r7, #14]
    37f6:	f023 0304 	bic.w	r3, r3, #4	; 0x4
    37fa:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
    37fc:	89fa      	ldrh	r2, [r7, #14]
    37fe:	887b      	ldrh	r3, [r7, #2]
    3800:	ea42 0303 	orr.w	r3, r2, r3
    3804:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    3806:	687a      	ldr	r2, [r7, #4]
    3808:	89fb      	ldrh	r3, [r7, #14]
    380a:	8313      	strh	r3, [r2, #24]
}
    380c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3810:	46bd      	mov	sp, r7
    3812:	bc80      	pop	{r7}
    3814:	4770      	bx	lr
    3816:	46c0      	nop			(mov r8, r8)

00003818 <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3818:	b480      	push	{r7}
    381a:	b085      	sub	sp, #20
    381c:	af00      	add	r7, sp, #0
    381e:	6078      	str	r0, [r7, #4]
    3820:	460b      	mov	r3, r1
    3822:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    3824:	f04f 0300 	mov.w	r3, #0	; 0x0
    3828:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    382a:	687b      	ldr	r3, [r7, #4]
    382c:	8b1b      	ldrh	r3, [r3, #24]
    382e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= CCMR_OC24FE_Reset;
    3830:	89fb      	ldrh	r3, [r7, #14]
    3832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3836:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
    3838:	887b      	ldrh	r3, [r7, #2]
    383a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    383e:	b29a      	uxth	r2, r3
    3840:	89fb      	ldrh	r3, [r7, #14]
    3842:	ea42 0303 	orr.w	r3, r2, r3
    3846:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    3848:	687a      	ldr	r2, [r7, #4]
    384a:	89fb      	ldrh	r3, [r7, #14]
    384c:	8313      	strh	r3, [r2, #24]
}
    384e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3852:	46bd      	mov	sp, r7
    3854:	bc80      	pop	{r7}
    3856:	4770      	bx	lr

00003858 <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3858:	b480      	push	{r7}
    385a:	b085      	sub	sp, #20
    385c:	af00      	add	r7, sp, #0
    385e:	6078      	str	r0, [r7, #4]
    3860:	460b      	mov	r3, r1
    3862:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3864:	f04f 0300 	mov.w	r3, #0	; 0x0
    3868:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    386a:	687b      	ldr	r3, [r7, #4]
    386c:	8b9b      	ldrh	r3, [r3, #28]
    386e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= CCMR_OC13FE_Reset;
    3870:	89fb      	ldrh	r3, [r7, #14]
    3872:	f023 0304 	bic.w	r3, r3, #4	; 0x4
    3876:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
    3878:	89fa      	ldrh	r2, [r7, #14]
    387a:	887b      	ldrh	r3, [r7, #2]
    387c:	ea42 0303 	orr.w	r3, r2, r3
    3880:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    3882:	687a      	ldr	r2, [r7, #4]
    3884:	89fb      	ldrh	r3, [r7, #14]
    3886:	8393      	strh	r3, [r2, #28]
}
    3888:	f107 0714 	add.w	r7, r7, #20	; 0x14
    388c:	46bd      	mov	sp, r7
    388e:	bc80      	pop	{r7}
    3890:	4770      	bx	lr
    3892:	46c0      	nop			(mov r8, r8)

00003894 <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3894:	b480      	push	{r7}
    3896:	b085      	sub	sp, #20
    3898:	af00      	add	r7, sp, #0
    389a:	6078      	str	r0, [r7, #4]
    389c:	460b      	mov	r3, r1
    389e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    38a0:	f04f 0300 	mov.w	r3, #0	; 0x0
    38a4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    38a6:	687b      	ldr	r3, [r7, #4]
    38a8:	8b9b      	ldrh	r3, [r3, #28]
    38aa:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= CCMR_OC24FE_Reset;
    38ac:	89fb      	ldrh	r3, [r7, #14]
    38ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    38b2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
    38b4:	887b      	ldrh	r3, [r7, #2]
    38b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    38ba:	b29a      	uxth	r2, r3
    38bc:	89fb      	ldrh	r3, [r7, #14]
    38be:	ea42 0303 	orr.w	r3, r2, r3
    38c2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    38c4:	687a      	ldr	r2, [r7, #4]
    38c6:	89fb      	ldrh	r3, [r7, #14]
    38c8:	8393      	strh	r3, [r2, #28]
}
    38ca:	f107 0714 	add.w	r7, r7, #20	; 0x14
    38ce:	46bd      	mov	sp, r7
    38d0:	bc80      	pop	{r7}
    38d2:	4770      	bx	lr

000038d4 <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    38d4:	b480      	push	{r7}
    38d6:	b085      	sub	sp, #20
    38d8:	af00      	add	r7, sp, #0
    38da:	6078      	str	r0, [r7, #4]
    38dc:	460b      	mov	r3, r1
    38de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    38e0:	f04f 0300 	mov.w	r3, #0	; 0x0
    38e4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    38e6:	687b      	ldr	r3, [r7, #4]
    38e8:	8b1b      	ldrh	r3, [r3, #24]
    38ea:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1CE Bit */
  tmpccmr1 &= CCMR_OC13CE_Reset;
    38ec:	89fb      	ldrh	r3, [r7, #14]
    38ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    38f2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
    38f4:	89fa      	ldrh	r2, [r7, #14]
    38f6:	887b      	ldrh	r3, [r7, #2]
    38f8:	ea42 0303 	orr.w	r3, r2, r3
    38fc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    38fe:	687a      	ldr	r2, [r7, #4]
    3900:	89fb      	ldrh	r3, [r7, #14]
    3902:	8313      	strh	r3, [r2, #24]
}
    3904:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3908:	46bd      	mov	sp, r7
    390a:	bc80      	pop	{r7}
    390c:	4770      	bx	lr
    390e:	46c0      	nop			(mov r8, r8)

00003910 <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3910:	b480      	push	{r7}
    3912:	b085      	sub	sp, #20
    3914:	af00      	add	r7, sp, #0
    3916:	6078      	str	r0, [r7, #4]
    3918:	460b      	mov	r3, r1
    391a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    391c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3920:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    3922:	687b      	ldr	r3, [r7, #4]
    3924:	8b1b      	ldrh	r3, [r3, #24]
    3926:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= CCMR_OC24CE_Reset;
    3928:	89fb      	ldrh	r3, [r7, #14]
    392a:	ea4f 4343 	mov.w	r3, r3, lsl #17
    392e:	ea4f 4353 	mov.w	r3, r3, lsr #17
    3932:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
    3934:	887b      	ldrh	r3, [r7, #2]
    3936:	ea4f 2303 	mov.w	r3, r3, lsl #8
    393a:	b29a      	uxth	r2, r3
    393c:	89fb      	ldrh	r3, [r7, #14]
    393e:	ea42 0303 	orr.w	r3, r2, r3
    3942:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3944:	687a      	ldr	r2, [r7, #4]
    3946:	89fb      	ldrh	r3, [r7, #14]
    3948:	8313      	strh	r3, [r2, #24]
}
    394a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    394e:	46bd      	mov	sp, r7
    3950:	bc80      	pop	{r7}
    3952:	4770      	bx	lr

00003954 <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3954:	b480      	push	{r7}
    3956:	b085      	sub	sp, #20
    3958:	af00      	add	r7, sp, #0
    395a:	6078      	str	r0, [r7, #4]
    395c:	460b      	mov	r3, r1
    395e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3960:	f04f 0300 	mov.w	r3, #0	; 0x0
    3964:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	8b9b      	ldrh	r3, [r3, #28]
    396a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= CCMR_OC13CE_Reset;
    396c:	89fb      	ldrh	r3, [r7, #14]
    396e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3972:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
    3974:	89fa      	ldrh	r2, [r7, #14]
    3976:	887b      	ldrh	r3, [r7, #2]
    3978:	ea42 0303 	orr.w	r3, r2, r3
    397c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    397e:	687a      	ldr	r2, [r7, #4]
    3980:	89fb      	ldrh	r3, [r7, #14]
    3982:	8393      	strh	r3, [r2, #28]
}
    3984:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3988:	46bd      	mov	sp, r7
    398a:	bc80      	pop	{r7}
    398c:	4770      	bx	lr
    398e:	46c0      	nop			(mov r8, r8)

00003990 <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3990:	b480      	push	{r7}
    3992:	b085      	sub	sp, #20
    3994:	af00      	add	r7, sp, #0
    3996:	6078      	str	r0, [r7, #4]
    3998:	460b      	mov	r3, r1
    399a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    399c:	f04f 0300 	mov.w	r3, #0	; 0x0
    39a0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    39a2:	687b      	ldr	r3, [r7, #4]
    39a4:	8b9b      	ldrh	r3, [r3, #28]
    39a6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= CCMR_OC24CE_Reset;
    39a8:	89fb      	ldrh	r3, [r7, #14]
    39aa:	ea4f 4343 	mov.w	r3, r3, lsl #17
    39ae:	ea4f 4353 	mov.w	r3, r3, lsr #17
    39b2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
    39b4:	887b      	ldrh	r3, [r7, #2]
    39b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    39ba:	b29a      	uxth	r2, r3
    39bc:	89fb      	ldrh	r3, [r7, #14]
    39be:	ea42 0303 	orr.w	r3, r2, r3
    39c2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    39c4:	687a      	ldr	r2, [r7, #4]
    39c6:	89fb      	ldrh	r3, [r7, #14]
    39c8:	8393      	strh	r3, [r2, #28]
}
    39ca:	f107 0714 	add.w	r7, r7, #20	; 0x14
    39ce:	46bd      	mov	sp, r7
    39d0:	bc80      	pop	{r7}
    39d2:	4770      	bx	lr

000039d4 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    39d4:	b480      	push	{r7}
    39d6:	b085      	sub	sp, #20
    39d8:	af00      	add	r7, sp, #0
    39da:	6078      	str	r0, [r7, #4]
    39dc:	460b      	mov	r3, r1
    39de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    39e0:	f04f 0300 	mov.w	r3, #0	; 0x0
    39e4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    39e6:	687b      	ldr	r3, [r7, #4]
    39e8:	8c1b      	ldrh	r3, [r3, #32]
    39ea:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= CCER_CC1P_Reset;
    39ec:	89fb      	ldrh	r3, [r7, #14]
    39ee:	f023 0302 	bic.w	r3, r3, #2	; 0x2
    39f2:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
    39f4:	89fa      	ldrh	r2, [r7, #14]
    39f6:	887b      	ldrh	r3, [r7, #2]
    39f8:	ea42 0303 	orr.w	r3, r2, r3
    39fc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    39fe:	687a      	ldr	r2, [r7, #4]
    3a00:	89fb      	ldrh	r3, [r7, #14]
    3a02:	8413      	strh	r3, [r2, #32]
}
    3a04:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3a08:	46bd      	mov	sp, r7
    3a0a:	bc80      	pop	{r7}
    3a0c:	4770      	bx	lr
    3a0e:	46c0      	nop			(mov r8, r8)

00003a10 <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3a10:	b480      	push	{r7}
    3a12:	b085      	sub	sp, #20
    3a14:	af00      	add	r7, sp, #0
    3a16:	6078      	str	r0, [r7, #4]
    3a18:	460b      	mov	r3, r1
    3a1a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3a1c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3a20:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
    3a22:	687b      	ldr	r3, [r7, #4]
    3a24:	8c1b      	ldrh	r3, [r3, #32]
    3a26:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= CCER_CC1NP_Reset;
    3a28:	89fb      	ldrh	r3, [r7, #14]
    3a2a:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    3a2e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
    3a30:	89fa      	ldrh	r2, [r7, #14]
    3a32:	887b      	ldrh	r3, [r7, #2]
    3a34:	ea42 0303 	orr.w	r3, r2, r3
    3a38:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3a3a:	687a      	ldr	r2, [r7, #4]
    3a3c:	89fb      	ldrh	r3, [r7, #14]
    3a3e:	8413      	strh	r3, [r2, #32]
}
    3a40:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3a44:	46bd      	mov	sp, r7
    3a46:	bc80      	pop	{r7}
    3a48:	4770      	bx	lr
    3a4a:	46c0      	nop			(mov r8, r8)

00003a4c <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3a4c:	b480      	push	{r7}
    3a4e:	b085      	sub	sp, #20
    3a50:	af00      	add	r7, sp, #0
    3a52:	6078      	str	r0, [r7, #4]
    3a54:	460b      	mov	r3, r1
    3a56:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3a58:	f04f 0300 	mov.w	r3, #0	; 0x0
    3a5c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3a5e:	687b      	ldr	r3, [r7, #4]
    3a60:	8c1b      	ldrh	r3, [r3, #32]
    3a62:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= CCER_CC2P_Reset;
    3a64:	89fb      	ldrh	r3, [r7, #14]
    3a66:	f023 0320 	bic.w	r3, r3, #32	; 0x20
    3a6a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
    3a6c:	887b      	ldrh	r3, [r7, #2]
    3a6e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3a72:	b29a      	uxth	r2, r3
    3a74:	89fb      	ldrh	r3, [r7, #14]
    3a76:	ea42 0303 	orr.w	r3, r2, r3
    3a7a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3a7c:	687a      	ldr	r2, [r7, #4]
    3a7e:	89fb      	ldrh	r3, [r7, #14]
    3a80:	8413      	strh	r3, [r2, #32]
}
    3a82:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3a86:	46bd      	mov	sp, r7
    3a88:	bc80      	pop	{r7}
    3a8a:	4770      	bx	lr

00003a8c <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3a8c:	b480      	push	{r7}
    3a8e:	b085      	sub	sp, #20
    3a90:	af00      	add	r7, sp, #0
    3a92:	6078      	str	r0, [r7, #4]
    3a94:	460b      	mov	r3, r1
    3a96:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3a98:	f04f 0300 	mov.w	r3, #0	; 0x0
    3a9c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
    3a9e:	687b      	ldr	r3, [r7, #4]
    3aa0:	8c1b      	ldrh	r3, [r3, #32]
    3aa2:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= CCER_CC2NP_Reset;
    3aa4:	89fb      	ldrh	r3, [r7, #14]
    3aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3aaa:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
    3aac:	887b      	ldrh	r3, [r7, #2]
    3aae:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3ab2:	b29a      	uxth	r2, r3
    3ab4:	89fb      	ldrh	r3, [r7, #14]
    3ab6:	ea42 0303 	orr.w	r3, r2, r3
    3aba:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3abc:	687a      	ldr	r2, [r7, #4]
    3abe:	89fb      	ldrh	r3, [r7, #14]
    3ac0:	8413      	strh	r3, [r2, #32]
}
    3ac2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3ac6:	46bd      	mov	sp, r7
    3ac8:	bc80      	pop	{r7}
    3aca:	4770      	bx	lr

00003acc <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3acc:	b480      	push	{r7}
    3ace:	b085      	sub	sp, #20
    3ad0:	af00      	add	r7, sp, #0
    3ad2:	6078      	str	r0, [r7, #4]
    3ad4:	460b      	mov	r3, r1
    3ad6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3ad8:	f04f 0300 	mov.w	r3, #0	; 0x0
    3adc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3ade:	687b      	ldr	r3, [r7, #4]
    3ae0:	8c1b      	ldrh	r3, [r3, #32]
    3ae2:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= CCER_CC3P_Reset;
    3ae4:	89fb      	ldrh	r3, [r7, #14]
    3ae6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3aea:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
    3aec:	887b      	ldrh	r3, [r7, #2]
    3aee:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3af2:	b29a      	uxth	r2, r3
    3af4:	89fb      	ldrh	r3, [r7, #14]
    3af6:	ea42 0303 	orr.w	r3, r2, r3
    3afa:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3afc:	687a      	ldr	r2, [r7, #4]
    3afe:	89fb      	ldrh	r3, [r7, #14]
    3b00:	8413      	strh	r3, [r2, #32]
}
    3b02:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3b06:	46bd      	mov	sp, r7
    3b08:	bc80      	pop	{r7}
    3b0a:	4770      	bx	lr

00003b0c <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3b0c:	b480      	push	{r7}
    3b0e:	b085      	sub	sp, #20
    3b10:	af00      	add	r7, sp, #0
    3b12:	6078      	str	r0, [r7, #4]
    3b14:	460b      	mov	r3, r1
    3b16:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3b18:	f04f 0300 	mov.w	r3, #0	; 0x0
    3b1c:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
    3b1e:	687b      	ldr	r3, [r7, #4]
    3b20:	8c1b      	ldrh	r3, [r3, #32]
    3b22:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= CCER_CC3NP_Reset;
    3b24:	89fb      	ldrh	r3, [r7, #14]
    3b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3b2a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
    3b2c:	887b      	ldrh	r3, [r7, #2]
    3b2e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3b32:	b29a      	uxth	r2, r3
    3b34:	89fb      	ldrh	r3, [r7, #14]
    3b36:	ea42 0303 	orr.w	r3, r2, r3
    3b3a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3b3c:	687a      	ldr	r2, [r7, #4]
    3b3e:	89fb      	ldrh	r3, [r7, #14]
    3b40:	8413      	strh	r3, [r2, #32]
}
    3b42:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3b46:	46bd      	mov	sp, r7
    3b48:	bc80      	pop	{r7}
    3b4a:	4770      	bx	lr

00003b4c <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3b4c:	b480      	push	{r7}
    3b4e:	b085      	sub	sp, #20
    3b50:	af00      	add	r7, sp, #0
    3b52:	6078      	str	r0, [r7, #4]
    3b54:	460b      	mov	r3, r1
    3b56:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3b58:	f04f 0300 	mov.w	r3, #0	; 0x0
    3b5c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3b5e:	687b      	ldr	r3, [r7, #4]
    3b60:	8c1b      	ldrh	r3, [r3, #32]
    3b62:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= CCER_CC4P_Reset;
    3b64:	89fb      	ldrh	r3, [r7, #14]
    3b66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3b6a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
    3b6c:	887b      	ldrh	r3, [r7, #2]
    3b6e:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3b72:	b29a      	uxth	r2, r3
    3b74:	89fb      	ldrh	r3, [r7, #14]
    3b76:	ea42 0303 	orr.w	r3, r2, r3
    3b7a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3b7c:	687a      	ldr	r2, [r7, #4]
    3b7e:	89fb      	ldrh	r3, [r7, #14]
    3b80:	8413      	strh	r3, [r2, #32]
}
    3b82:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3b86:	46bd      	mov	sp, r7
    3b88:	bc80      	pop	{r7}
    3b8a:	4770      	bx	lr

00003b8c <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
    3b8c:	b480      	push	{r7}
    3b8e:	b085      	sub	sp, #20
    3b90:	af00      	add	r7, sp, #0
    3b92:	6078      	str	r0, [r7, #4]
    3b94:	460b      	mov	r3, r1
    3b96:	807b      	strh	r3, [r7, #2]
    3b98:	4613      	mov	r3, r2
    3b9a:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    3b9c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3ba0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
    3ba2:	887a      	ldrh	r2, [r7, #2]
    3ba4:	f04f 0301 	mov.w	r3, #1	; 0x1
    3ba8:	fa03 f302 	lsl.w	r3, r3, r2
    3bac:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
    3bae:	687b      	ldr	r3, [r7, #4]
    3bb0:	8c1b      	ldrh	r3, [r3, #32]
    3bb2:	b29a      	uxth	r2, r3
    3bb4:	89fb      	ldrh	r3, [r7, #14]
    3bb6:	ea6f 0303 	mvn.w	r3, r3
    3bba:	b29b      	uxth	r3, r3
    3bbc:	ea02 0303 	and.w	r3, r2, r3
    3bc0:	b29b      	uxth	r3, r3
    3bc2:	687a      	ldr	r2, [r7, #4]
    3bc4:	8413      	strh	r3, [r2, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
    3bc6:	687b      	ldr	r3, [r7, #4]
    3bc8:	8c1b      	ldrh	r3, [r3, #32]
    3bca:	b299      	uxth	r1, r3
    3bcc:	883a      	ldrh	r2, [r7, #0]
    3bce:	887b      	ldrh	r3, [r7, #2]
    3bd0:	fa02 f303 	lsl.w	r3, r2, r3
    3bd4:	b29b      	uxth	r3, r3
    3bd6:	ea41 0303 	orr.w	r3, r1, r3
    3bda:	b29b      	uxth	r3, r3
    3bdc:	687a      	ldr	r2, [r7, #4]
    3bde:	8413      	strh	r3, [r2, #32]
}
    3be0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3be4:	46bd      	mov	sp, r7
    3be6:	bc80      	pop	{r7}
    3be8:	4770      	bx	lr
    3bea:	46c0      	nop			(mov r8, r8)

00003bec <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
    3bec:	b480      	push	{r7}
    3bee:	b085      	sub	sp, #20
    3bf0:	af00      	add	r7, sp, #0
    3bf2:	6078      	str	r0, [r7, #4]
    3bf4:	460b      	mov	r3, r1
    3bf6:	807b      	strh	r3, [r7, #2]
    3bf8:	4613      	mov	r3, r2
    3bfa:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    3bfc:	f04f 0300 	mov.w	r3, #0	; 0x0
    3c00:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
    3c02:	887a      	ldrh	r2, [r7, #2]
    3c04:	f04f 0304 	mov.w	r3, #4	; 0x4
    3c08:	fa03 f302 	lsl.w	r3, r3, r2
    3c0c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
    3c0e:	687b      	ldr	r3, [r7, #4]
    3c10:	8c1b      	ldrh	r3, [r3, #32]
    3c12:	b29a      	uxth	r2, r3
    3c14:	89fb      	ldrh	r3, [r7, #14]
    3c16:	ea6f 0303 	mvn.w	r3, r3
    3c1a:	b29b      	uxth	r3, r3
    3c1c:	ea02 0303 	and.w	r3, r2, r3
    3c20:	b29b      	uxth	r3, r3
    3c22:	687a      	ldr	r2, [r7, #4]
    3c24:	8413      	strh	r3, [r2, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	8c1b      	ldrh	r3, [r3, #32]
    3c2a:	b299      	uxth	r1, r3
    3c2c:	883a      	ldrh	r2, [r7, #0]
    3c2e:	887b      	ldrh	r3, [r7, #2]
    3c30:	fa02 f303 	lsl.w	r3, r2, r3
    3c34:	b29b      	uxth	r3, r3
    3c36:	ea41 0303 	orr.w	r3, r1, r3
    3c3a:	b29b      	uxth	r3, r3
    3c3c:	687a      	ldr	r2, [r7, #4]
    3c3e:	8413      	strh	r3, [r2, #32]
}
    3c40:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3c44:	46bd      	mov	sp, r7
    3c46:	bc80      	pop	{r7}
    3c48:	4770      	bx	lr
    3c4a:	46c0      	nop			(mov r8, r8)

00003c4c <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
    3c4c:	b480      	push	{r7}
    3c4e:	b085      	sub	sp, #20
    3c50:	af00      	add	r7, sp, #0
    3c52:	6078      	str	r0, [r7, #4]
    3c54:	460b      	mov	r3, r1
    3c56:	807b      	strh	r3, [r7, #2]
    3c58:	4613      	mov	r3, r2
    3c5a:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
    3c5c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3c60:	60bb      	str	r3, [r7, #8]
  uint16_t tmp1 = 0;
    3c62:	f04f 0300 	mov.w	r3, #0	; 0x0
    3c66:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
    3c68:	687b      	ldr	r3, [r7, #4]
    3c6a:	60bb      	str	r3, [r7, #8]
  tmp += CCMR_Offset;
    3c6c:	68bb      	ldr	r3, [r7, #8]
    3c6e:	f103 0318 	add.w	r3, r3, #24	; 0x18
    3c72:	60bb      	str	r3, [r7, #8]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
    3c74:	887a      	ldrh	r2, [r7, #2]
    3c76:	f04f 0301 	mov.w	r3, #1	; 0x1
    3c7a:	fa03 f302 	lsl.w	r3, r3, r2
    3c7e:	81fb      	strh	r3, [r7, #14]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
    3c80:	687b      	ldr	r3, [r7, #4]
    3c82:	8c1b      	ldrh	r3, [r3, #32]
    3c84:	b29a      	uxth	r2, r3
    3c86:	89fb      	ldrh	r3, [r7, #14]
    3c88:	ea6f 0303 	mvn.w	r3, r3
    3c8c:	b29b      	uxth	r3, r3
    3c8e:	ea02 0303 	and.w	r3, r2, r3
    3c92:	b29b      	uxth	r3, r3
    3c94:	687a      	ldr	r2, [r7, #4]
    3c96:	8413      	strh	r3, [r2, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
    3c98:	887b      	ldrh	r3, [r7, #2]
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d002      	beq.n	3ca4 <TIM_SelectOCxM+0x58>
    3c9e:	887b      	ldrh	r3, [r7, #2]
    3ca0:	2b08      	cmp	r3, #8
    3ca2:	d117      	bne.n	3cd4 <TIM_SelectOCxM+0x88>
  {
    tmp += (TIM_Channel>>1);
    3ca4:	887b      	ldrh	r3, [r7, #2]
    3ca6:	ea4f 0353 	mov.w	r3, r3, lsr #1
    3caa:	b29b      	uxth	r3, r3
    3cac:	461a      	mov	r2, r3
    3cae:	68bb      	ldr	r3, [r7, #8]
    3cb0:	4413      	add	r3, r2
    3cb2:	60bb      	str	r3, [r7, #8]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_Mask;
    3cb4:	68b9      	ldr	r1, [r7, #8]
    3cb6:	68bb      	ldr	r3, [r7, #8]
    3cb8:	681a      	ldr	r2, [r3, #0]
    3cba:	f64f 738f 	movw	r3, #65423	; 0xff8f
    3cbe:	ea02 0303 	and.w	r3, r2, r3
    3cc2:	600b      	str	r3, [r1, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
    3cc4:	68b9      	ldr	r1, [r7, #8]
    3cc6:	68bb      	ldr	r3, [r7, #8]
    3cc8:	681a      	ldr	r2, [r3, #0]
    3cca:	883b      	ldrh	r3, [r7, #0]
    3ccc:	ea42 0303 	orr.w	r3, r2, r3
    3cd0:	600b      	str	r3, [r1, #0]
    3cd2:	e01c      	b.n	3d0e <TIM_SelectOCxM+0xc2>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
    3cd4:	887b      	ldrh	r3, [r7, #2]
    3cd6:	f1a3 0304 	sub.w	r3, r3, #4	; 0x4
    3cda:	b29b      	uxth	r3, r3
    3cdc:	ea4f 0353 	mov.w	r3, r3, lsr #1
    3ce0:	b29b      	uxth	r3, r3
    3ce2:	461a      	mov	r2, r3
    3ce4:	68bb      	ldr	r3, [r7, #8]
    3ce6:	4413      	add	r3, r2
    3ce8:	60bb      	str	r3, [r7, #8]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_Mask;
    3cea:	68b9      	ldr	r1, [r7, #8]
    3cec:	68bb      	ldr	r3, [r7, #8]
    3cee:	681a      	ldr	r2, [r3, #0]
    3cf0:	f648 73ff 	movw	r3, #36863	; 0x8fff
    3cf4:	ea02 0303 	and.w	r3, r2, r3
    3cf8:	600b      	str	r3, [r1, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
    3cfa:	68b9      	ldr	r1, [r7, #8]
    3cfc:	68bb      	ldr	r3, [r7, #8]
    3cfe:	681a      	ldr	r2, [r3, #0]
    3d00:	883b      	ldrh	r3, [r7, #0]
    3d02:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3d06:	b29b      	uxth	r3, r3
    3d08:	ea42 0303 	orr.w	r3, r2, r3
    3d0c:	600b      	str	r3, [r1, #0]
  }
}
    3d0e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3d12:	46bd      	mov	sp, r7
    3d14:	bc80      	pop	{r7}
    3d16:	4770      	bx	lr

00003d18 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3d18:	b480      	push	{r7}
    3d1a:	b085      	sub	sp, #20
    3d1c:	af00      	add	r7, sp, #0
    3d1e:	60f8      	str	r0, [r7, #12]
    3d20:	460b      	mov	r3, r1
    3d22:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3d24:	7afb      	ldrb	r3, [r7, #11]
    3d26:	2b00      	cmp	r3, #0
    3d28:	d008      	beq.n	3d3c <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
    3d2a:	68fb      	ldr	r3, [r7, #12]
    3d2c:	881b      	ldrh	r3, [r3, #0]
    3d2e:	b29b      	uxth	r3, r3
    3d30:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    3d34:	b29b      	uxth	r3, r3
    3d36:	68fa      	ldr	r2, [r7, #12]
    3d38:	8013      	strh	r3, [r2, #0]
    3d3a:	e00d      	b.n	3d58 <TIM_UpdateDisableConfig+0x40>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= CR1_UDIS_Reset;
    3d3c:	68fb      	ldr	r3, [r7, #12]
    3d3e:	881b      	ldrh	r3, [r3, #0]
    3d40:	b29b      	uxth	r3, r3
    3d42:	607b      	str	r3, [r7, #4]
    3d44:	f240 33fd 	movw	r3, #1021	; 0x3fd
    3d48:	6879      	ldr	r1, [r7, #4]
    3d4a:	ea01 0303 	and.w	r3, r1, r3
    3d4e:	607b      	str	r3, [r7, #4]
    3d50:	68fa      	ldr	r2, [r7, #12]
    3d52:	6879      	ldr	r1, [r7, #4]
    3d54:	460b      	mov	r3, r1
    3d56:	8013      	strh	r3, [r2, #0]
  }
}
    3d58:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3d5c:	46bd      	mov	sp, r7
    3d5e:	bc80      	pop	{r7}
    3d60:	4770      	bx	lr
    3d62:	46c0      	nop			(mov r8, r8)

00003d64 <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
    3d64:	b480      	push	{r7}
    3d66:	b085      	sub	sp, #20
    3d68:	af00      	add	r7, sp, #0
    3d6a:	60f8      	str	r0, [r7, #12]
    3d6c:	460b      	mov	r3, r1
    3d6e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
    3d70:	897b      	ldrh	r3, [r7, #10]
    3d72:	2b00      	cmp	r3, #0
    3d74:	d008      	beq.n	3d88 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
    3d76:	68fb      	ldr	r3, [r7, #12]
    3d78:	881b      	ldrh	r3, [r3, #0]
    3d7a:	b29b      	uxth	r3, r3
    3d7c:	f043 0304 	orr.w	r3, r3, #4	; 0x4
    3d80:	b29b      	uxth	r3, r3
    3d82:	68fa      	ldr	r2, [r7, #12]
    3d84:	8013      	strh	r3, [r2, #0]
    3d86:	e00d      	b.n	3da4 <TIM_UpdateRequestConfig+0x40>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= CR1_URS_Reset;
    3d88:	68fb      	ldr	r3, [r7, #12]
    3d8a:	881b      	ldrh	r3, [r3, #0]
    3d8c:	b29b      	uxth	r3, r3
    3d8e:	607b      	str	r3, [r7, #4]
    3d90:	f240 33fb 	movw	r3, #1019	; 0x3fb
    3d94:	6879      	ldr	r1, [r7, #4]
    3d96:	ea01 0303 	and.w	r3, r1, r3
    3d9a:	607b      	str	r3, [r7, #4]
    3d9c:	68fa      	ldr	r2, [r7, #12]
    3d9e:	6879      	ldr	r1, [r7, #4]
    3da0:	460b      	mov	r3, r1
    3da2:	8013      	strh	r3, [r2, #0]
  }
}
    3da4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3da8:	46bd      	mov	sp, r7
    3daa:	bc80      	pop	{r7}
    3dac:	4770      	bx	lr
    3dae:	46c0      	nop			(mov r8, r8)

00003db0 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3db0:	b480      	push	{r7}
    3db2:	b085      	sub	sp, #20
    3db4:	af00      	add	r7, sp, #0
    3db6:	60f8      	str	r0, [r7, #12]
    3db8:	460b      	mov	r3, r1
    3dba:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3dbc:	7afb      	ldrb	r3, [r7, #11]
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	d008      	beq.n	3dd4 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
    3dc2:	68fb      	ldr	r3, [r7, #12]
    3dc4:	889b      	ldrh	r3, [r3, #4]
    3dc6:	b29b      	uxth	r3, r3
    3dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3dcc:	b29b      	uxth	r3, r3
    3dce:	68fa      	ldr	r2, [r7, #12]
    3dd0:	8093      	strh	r3, [r2, #4]
    3dd2:	e00d      	b.n	3df0 <TIM_SelectHallSensor+0x40>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= CR2_TI1S_Reset;
    3dd4:	68fb      	ldr	r3, [r7, #12]
    3dd6:	889b      	ldrh	r3, [r3, #4]
    3dd8:	b29b      	uxth	r3, r3
    3dda:	607b      	str	r3, [r7, #4]
    3ddc:	f64f 737f 	movw	r3, #65407	; 0xff7f
    3de0:	6879      	ldr	r1, [r7, #4]
    3de2:	ea01 0303 	and.w	r3, r1, r3
    3de6:	607b      	str	r3, [r7, #4]
    3de8:	68fa      	ldr	r2, [r7, #12]
    3dea:	6879      	ldr	r1, [r7, #4]
    3dec:	460b      	mov	r3, r1
    3dee:	8093      	strh	r3, [r2, #4]
  }
}
    3df0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3df4:	46bd      	mov	sp, r7
    3df6:	bc80      	pop	{r7}
    3df8:	4770      	bx	lr
    3dfa:	46c0      	nop			(mov r8, r8)

00003dfc <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
    3dfc:	b480      	push	{r7}
    3dfe:	b085      	sub	sp, #20
    3e00:	af00      	add	r7, sp, #0
    3e02:	60f8      	str	r0, [r7, #12]
    3e04:	460b      	mov	r3, r1
    3e06:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= CR1_OPM_Reset;
    3e08:	68fb      	ldr	r3, [r7, #12]
    3e0a:	881b      	ldrh	r3, [r3, #0]
    3e0c:	b29b      	uxth	r3, r3
    3e0e:	607b      	str	r3, [r7, #4]
    3e10:	f240 33f7 	movw	r3, #1015	; 0x3f7
    3e14:	6879      	ldr	r1, [r7, #4]
    3e16:	ea01 0303 	and.w	r3, r1, r3
    3e1a:	607b      	str	r3, [r7, #4]
    3e1c:	68fa      	ldr	r2, [r7, #12]
    3e1e:	6879      	ldr	r1, [r7, #4]
    3e20:	460b      	mov	r3, r1
    3e22:	8013      	strh	r3, [r2, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
    3e24:	68fb      	ldr	r3, [r7, #12]
    3e26:	881b      	ldrh	r3, [r3, #0]
    3e28:	b29a      	uxth	r2, r3
    3e2a:	897b      	ldrh	r3, [r7, #10]
    3e2c:	ea42 0303 	orr.w	r3, r2, r3
    3e30:	b29b      	uxth	r3, r3
    3e32:	68fa      	ldr	r2, [r7, #12]
    3e34:	8013      	strh	r3, [r2, #0]
}
    3e36:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3e3a:	46bd      	mov	sp, r7
    3e3c:	bc80      	pop	{r7}
    3e3e:	4770      	bx	lr

00003e40 <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
    3e40:	b480      	push	{r7}
    3e42:	b085      	sub	sp, #20
    3e44:	af00      	add	r7, sp, #0
    3e46:	60f8      	str	r0, [r7, #12]
    3e48:	460b      	mov	r3, r1
    3e4a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= CR2_MMS_Mask;
    3e4c:	68fb      	ldr	r3, [r7, #12]
    3e4e:	889b      	ldrh	r3, [r3, #4]
    3e50:	b29b      	uxth	r3, r3
    3e52:	607b      	str	r3, [r7, #4]
    3e54:	f64f 738f 	movw	r3, #65423	; 0xff8f
    3e58:	6879      	ldr	r1, [r7, #4]
    3e5a:	ea01 0303 	and.w	r3, r1, r3
    3e5e:	607b      	str	r3, [r7, #4]
    3e60:	68fa      	ldr	r2, [r7, #12]
    3e62:	6879      	ldr	r1, [r7, #4]
    3e64:	460b      	mov	r3, r1
    3e66:	8093      	strh	r3, [r2, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
    3e68:	68fb      	ldr	r3, [r7, #12]
    3e6a:	889b      	ldrh	r3, [r3, #4]
    3e6c:	b29a      	uxth	r2, r3
    3e6e:	897b      	ldrh	r3, [r7, #10]
    3e70:	ea42 0303 	orr.w	r3, r2, r3
    3e74:	b29b      	uxth	r3, r3
    3e76:	68fa      	ldr	r2, [r7, #12]
    3e78:	8093      	strh	r3, [r2, #4]
}
    3e7a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3e7e:	46bd      	mov	sp, r7
    3e80:	bc80      	pop	{r7}
    3e82:	4770      	bx	lr

00003e84 <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
    3e84:	b480      	push	{r7}
    3e86:	b085      	sub	sp, #20
    3e88:	af00      	add	r7, sp, #0
    3e8a:	60f8      	str	r0, [r7, #12]
    3e8c:	460b      	mov	r3, r1
    3e8e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
  /* Reset the SMS Bits */
  TIMx->SMCR &= SMCR_SMS_Mask;
    3e90:	68fb      	ldr	r3, [r7, #12]
    3e92:	891b      	ldrh	r3, [r3, #8]
    3e94:	b29b      	uxth	r3, r3
    3e96:	607b      	str	r3, [r7, #4]
    3e98:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    3e9c:	6879      	ldr	r1, [r7, #4]
    3e9e:	ea01 0303 	and.w	r3, r1, r3
    3ea2:	607b      	str	r3, [r7, #4]
    3ea4:	68fa      	ldr	r2, [r7, #12]
    3ea6:	6879      	ldr	r1, [r7, #4]
    3ea8:	460b      	mov	r3, r1
    3eaa:	8113      	strh	r3, [r2, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
    3eac:	68fb      	ldr	r3, [r7, #12]
    3eae:	891b      	ldrh	r3, [r3, #8]
    3eb0:	b29a      	uxth	r2, r3
    3eb2:	897b      	ldrh	r3, [r7, #10]
    3eb4:	ea42 0303 	orr.w	r3, r2, r3
    3eb8:	b29b      	uxth	r3, r3
    3eba:	68fa      	ldr	r2, [r7, #12]
    3ebc:	8113      	strh	r3, [r2, #8]
}
    3ebe:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3ec2:	46bd      	mov	sp, r7
    3ec4:	bc80      	pop	{r7}
    3ec6:	4770      	bx	lr

00003ec8 <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
    3ec8:	b480      	push	{r7}
    3eca:	b085      	sub	sp, #20
    3ecc:	af00      	add	r7, sp, #0
    3ece:	60f8      	str	r0, [r7, #12]
    3ed0:	460b      	mov	r3, r1
    3ed2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= SMCR_MSM_Reset;
    3ed4:	68fb      	ldr	r3, [r7, #12]
    3ed6:	891b      	ldrh	r3, [r3, #8]
    3ed8:	b29b      	uxth	r3, r3
    3eda:	607b      	str	r3, [r7, #4]
    3edc:	f64f 737f 	movw	r3, #65407	; 0xff7f
    3ee0:	6879      	ldr	r1, [r7, #4]
    3ee2:	ea01 0303 	and.w	r3, r1, r3
    3ee6:	607b      	str	r3, [r7, #4]
    3ee8:	68fa      	ldr	r2, [r7, #12]
    3eea:	6879      	ldr	r1, [r7, #4]
    3eec:	460b      	mov	r3, r1
    3eee:	8113      	strh	r3, [r2, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
    3ef0:	68fb      	ldr	r3, [r7, #12]
    3ef2:	891b      	ldrh	r3, [r3, #8]
    3ef4:	b29a      	uxth	r2, r3
    3ef6:	897b      	ldrh	r3, [r7, #10]
    3ef8:	ea42 0303 	orr.w	r3, r2, r3
    3efc:	b29b      	uxth	r3, r3
    3efe:	68fa      	ldr	r2, [r7, #12]
    3f00:	8113      	strh	r3, [r2, #8]
}
    3f02:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3f06:	46bd      	mov	sp, r7
    3f08:	bc80      	pop	{r7}
    3f0a:	4770      	bx	lr

00003f0c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
    3f0c:	b480      	push	{r7}
    3f0e:	b083      	sub	sp, #12
    3f10:	af00      	add	r7, sp, #0
    3f12:	6078      	str	r0, [r7, #4]
    3f14:	460b      	mov	r3, r1
    3f16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
    3f18:	687a      	ldr	r2, [r7, #4]
    3f1a:	887b      	ldrh	r3, [r7, #2]
    3f1c:	8493      	strh	r3, [r2, #36]
}
    3f1e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f22:	46bd      	mov	sp, r7
    3f24:	bc80      	pop	{r7}
    3f26:	4770      	bx	lr

00003f28 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
    3f28:	b480      	push	{r7}
    3f2a:	b083      	sub	sp, #12
    3f2c:	af00      	add	r7, sp, #0
    3f2e:	6078      	str	r0, [r7, #4]
    3f30:	460b      	mov	r3, r1
    3f32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
    3f34:	687a      	ldr	r2, [r7, #4]
    3f36:	887b      	ldrh	r3, [r7, #2]
    3f38:	8593      	strh	r3, [r2, #44]
}
    3f3a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f3e:	46bd      	mov	sp, r7
    3f40:	bc80      	pop	{r7}
    3f42:	4770      	bx	lr

00003f44 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
    3f44:	b480      	push	{r7}
    3f46:	b083      	sub	sp, #12
    3f48:	af00      	add	r7, sp, #0
    3f4a:	6078      	str	r0, [r7, #4]
    3f4c:	460b      	mov	r3, r1
    3f4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
    3f50:	687a      	ldr	r2, [r7, #4]
    3f52:	887b      	ldrh	r3, [r7, #2]
    3f54:	8693      	strh	r3, [r2, #52]
}
    3f56:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f5a:	46bd      	mov	sp, r7
    3f5c:	bc80      	pop	{r7}
    3f5e:	4770      	bx	lr

00003f60 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
    3f60:	b480      	push	{r7}
    3f62:	b083      	sub	sp, #12
    3f64:	af00      	add	r7, sp, #0
    3f66:	6078      	str	r0, [r7, #4]
    3f68:	460b      	mov	r3, r1
    3f6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
    3f6c:	687a      	ldr	r2, [r7, #4]
    3f6e:	887b      	ldrh	r3, [r7, #2]
    3f70:	8713      	strh	r3, [r2, #56]
}
    3f72:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f76:	46bd      	mov	sp, r7
    3f78:	bc80      	pop	{r7}
    3f7a:	4770      	bx	lr

00003f7c <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
    3f7c:	b480      	push	{r7}
    3f7e:	b083      	sub	sp, #12
    3f80:	af00      	add	r7, sp, #0
    3f82:	6078      	str	r0, [r7, #4]
    3f84:	460b      	mov	r3, r1
    3f86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
    3f88:	687a      	ldr	r2, [r7, #4]
    3f8a:	887b      	ldrh	r3, [r7, #2]
    3f8c:	8793      	strh	r3, [r2, #60]
}
    3f8e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f92:	46bd      	mov	sp, r7
    3f94:	bc80      	pop	{r7}
    3f96:	4770      	bx	lr

00003f98 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
    3f98:	b480      	push	{r7}
    3f9a:	b083      	sub	sp, #12
    3f9c:	af00      	add	r7, sp, #0
    3f9e:	6078      	str	r0, [r7, #4]
    3fa0:	460b      	mov	r3, r1
    3fa2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
    3fa4:	687a      	ldr	r2, [r7, #4]
    3fa6:	887b      	ldrh	r3, [r7, #2]
    3fa8:	f8a2 3040 	strh.w	r3, [r2, #64]
}
    3fac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3fb0:	46bd      	mov	sp, r7
    3fb2:	bc80      	pop	{r7}
    3fb4:	4770      	bx	lr
    3fb6:	46c0      	nop			(mov r8, r8)

00003fb8 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    3fb8:	b480      	push	{r7}
    3fba:	b085      	sub	sp, #20
    3fbc:	af00      	add	r7, sp, #0
    3fbe:	60f8      	str	r0, [r7, #12]
    3fc0:	460b      	mov	r3, r1
    3fc2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
    3fc4:	68fb      	ldr	r3, [r7, #12]
    3fc6:	8b1b      	ldrh	r3, [r3, #24]
    3fc8:	b29b      	uxth	r3, r3
    3fca:	607b      	str	r3, [r7, #4]
    3fcc:	f64f 73f3 	movw	r3, #65523	; 0xfff3
    3fd0:	6879      	ldr	r1, [r7, #4]
    3fd2:	ea01 0303 	and.w	r3, r1, r3
    3fd6:	607b      	str	r3, [r7, #4]
    3fd8:	68fa      	ldr	r2, [r7, #12]
    3fda:	6879      	ldr	r1, [r7, #4]
    3fdc:	460b      	mov	r3, r1
    3fde:	8313      	strh	r3, [r2, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
    3fe0:	68fb      	ldr	r3, [r7, #12]
    3fe2:	8b1b      	ldrh	r3, [r3, #24]
    3fe4:	b29a      	uxth	r2, r3
    3fe6:	897b      	ldrh	r3, [r7, #10]
    3fe8:	ea42 0303 	orr.w	r3, r2, r3
    3fec:	b29b      	uxth	r3, r3
    3fee:	68fa      	ldr	r2, [r7, #12]
    3ff0:	8313      	strh	r3, [r2, #24]
}
    3ff2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3ff6:	46bd      	mov	sp, r7
    3ff8:	bc80      	pop	{r7}
    3ffa:	4770      	bx	lr

00003ffc <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    3ffc:	b480      	push	{r7}
    3ffe:	b085      	sub	sp, #20
    4000:	af00      	add	r7, sp, #0
    4002:	60f8      	str	r0, [r7, #12]
    4004:	460b      	mov	r3, r1
    4006:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
    4008:	68fb      	ldr	r3, [r7, #12]
    400a:	8b1b      	ldrh	r3, [r3, #24]
    400c:	b29b      	uxth	r3, r3
    400e:	607b      	str	r3, [r7, #4]
    4010:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
    4014:	6879      	ldr	r1, [r7, #4]
    4016:	ea01 0303 	and.w	r3, r1, r3
    401a:	607b      	str	r3, [r7, #4]
    401c:	68fa      	ldr	r2, [r7, #12]
    401e:	6879      	ldr	r1, [r7, #4]
    4020:	460b      	mov	r3, r1
    4022:	8313      	strh	r3, [r2, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
    4024:	68fb      	ldr	r3, [r7, #12]
    4026:	8b1b      	ldrh	r3, [r3, #24]
    4028:	b29a      	uxth	r2, r3
    402a:	897b      	ldrh	r3, [r7, #10]
    402c:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4030:	b29b      	uxth	r3, r3
    4032:	ea42 0303 	orr.w	r3, r2, r3
    4036:	b29b      	uxth	r3, r3
    4038:	68fa      	ldr	r2, [r7, #12]
    403a:	8313      	strh	r3, [r2, #24]
}
    403c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4040:	46bd      	mov	sp, r7
    4042:	bc80      	pop	{r7}
    4044:	4770      	bx	lr
    4046:	46c0      	nop			(mov r8, r8)

00004048 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4048:	b480      	push	{r7}
    404a:	b085      	sub	sp, #20
    404c:	af00      	add	r7, sp, #0
    404e:	60f8      	str	r0, [r7, #12]
    4050:	460b      	mov	r3, r1
    4052:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
    4054:	68fb      	ldr	r3, [r7, #12]
    4056:	8b9b      	ldrh	r3, [r3, #28]
    4058:	b29b      	uxth	r3, r3
    405a:	607b      	str	r3, [r7, #4]
    405c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
    4060:	6879      	ldr	r1, [r7, #4]
    4062:	ea01 0303 	and.w	r3, r1, r3
    4066:	607b      	str	r3, [r7, #4]
    4068:	68fa      	ldr	r2, [r7, #12]
    406a:	6879      	ldr	r1, [r7, #4]
    406c:	460b      	mov	r3, r1
    406e:	8393      	strh	r3, [r2, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
    4070:	68fb      	ldr	r3, [r7, #12]
    4072:	8b9b      	ldrh	r3, [r3, #28]
    4074:	b29a      	uxth	r2, r3
    4076:	897b      	ldrh	r3, [r7, #10]
    4078:	ea42 0303 	orr.w	r3, r2, r3
    407c:	b29b      	uxth	r3, r3
    407e:	68fa      	ldr	r2, [r7, #12]
    4080:	8393      	strh	r3, [r2, #28]
}
    4082:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4086:	46bd      	mov	sp, r7
    4088:	bc80      	pop	{r7}
    408a:	4770      	bx	lr

0000408c <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
    408c:	b480      	push	{r7}
    408e:	b085      	sub	sp, #20
    4090:	af00      	add	r7, sp, #0
    4092:	60f8      	str	r0, [r7, #12]
    4094:	460b      	mov	r3, r1
    4096:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
    4098:	68fb      	ldr	r3, [r7, #12]
    409a:	8b9b      	ldrh	r3, [r3, #28]
    409c:	b29b      	uxth	r3, r3
    409e:	607b      	str	r3, [r7, #4]
    40a0:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
    40a4:	6879      	ldr	r1, [r7, #4]
    40a6:	ea01 0303 	and.w	r3, r1, r3
    40aa:	607b      	str	r3, [r7, #4]
    40ac:	68fa      	ldr	r2, [r7, #12]
    40ae:	6879      	ldr	r1, [r7, #4]
    40b0:	460b      	mov	r3, r1
    40b2:	8393      	strh	r3, [r2, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
    40b4:	68fb      	ldr	r3, [r7, #12]
    40b6:	8b9b      	ldrh	r3, [r3, #28]
    40b8:	b29a      	uxth	r2, r3
    40ba:	897b      	ldrh	r3, [r7, #10]
    40bc:	ea4f 2303 	mov.w	r3, r3, lsl #8
    40c0:	b29b      	uxth	r3, r3
    40c2:	ea42 0303 	orr.w	r3, r2, r3
    40c6:	b29b      	uxth	r3, r3
    40c8:	68fa      	ldr	r2, [r7, #12]
    40ca:	8393      	strh	r3, [r2, #28]
}
    40cc:	f107 0714 	add.w	r7, r7, #20	; 0x14
    40d0:	46bd      	mov	sp, r7
    40d2:	bc80      	pop	{r7}
    40d4:	4770      	bx	lr
    40d6:	46c0      	nop			(mov r8, r8)

000040d8 <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
    40d8:	b480      	push	{r7}
    40da:	b083      	sub	sp, #12
    40dc:	af00      	add	r7, sp, #0
    40de:	6078      	str	r0, [r7, #4]
    40e0:	460b      	mov	r3, r1
    40e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= CR1_CKD_Mask;
    40e4:	687b      	ldr	r3, [r7, #4]
    40e6:	881b      	ldrh	r3, [r3, #0]
    40e8:	b29b      	uxth	r3, r3
    40ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    40ee:	687a      	ldr	r2, [r7, #4]
    40f0:	8013      	strh	r3, [r2, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
    40f2:	687b      	ldr	r3, [r7, #4]
    40f4:	881b      	ldrh	r3, [r3, #0]
    40f6:	b29a      	uxth	r2, r3
    40f8:	887b      	ldrh	r3, [r7, #2]
    40fa:	ea42 0303 	orr.w	r3, r2, r3
    40fe:	b29b      	uxth	r3, r3
    4100:	687a      	ldr	r2, [r7, #4]
    4102:	8013      	strh	r3, [r2, #0]
}
    4104:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4108:	46bd      	mov	sp, r7
    410a:	bc80      	pop	{r7}
    410c:	4770      	bx	lr
    410e:	46c0      	nop			(mov r8, r8)

00004110 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
    4110:	b480      	push	{r7}
    4112:	b083      	sub	sp, #12
    4114:	af00      	add	r7, sp, #0
    4116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
    4118:	687b      	ldr	r3, [r7, #4]
    411a:	8e9b      	ldrh	r3, [r3, #52]
    411c:	b29b      	uxth	r3, r3
}
    411e:	4618      	mov	r0, r3
    4120:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4124:	46bd      	mov	sp, r7
    4126:	bc80      	pop	{r7}
    4128:	4770      	bx	lr
    412a:	46c0      	nop			(mov r8, r8)

0000412c <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
    412c:	b480      	push	{r7}
    412e:	b083      	sub	sp, #12
    4130:	af00      	add	r7, sp, #0
    4132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
    4134:	687b      	ldr	r3, [r7, #4]
    4136:	8f1b      	ldrh	r3, [r3, #56]
    4138:	b29b      	uxth	r3, r3
}
    413a:	4618      	mov	r0, r3
    413c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4140:	46bd      	mov	sp, r7
    4142:	bc80      	pop	{r7}
    4144:	4770      	bx	lr
    4146:	46c0      	nop			(mov r8, r8)

00004148 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
    4148:	b480      	push	{r7}
    414a:	b083      	sub	sp, #12
    414c:	af00      	add	r7, sp, #0
    414e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
    4150:	687b      	ldr	r3, [r7, #4]
    4152:	8f9b      	ldrh	r3, [r3, #60]
    4154:	b29b      	uxth	r3, r3
}
    4156:	4618      	mov	r0, r3
    4158:	f107 070c 	add.w	r7, r7, #12	; 0xc
    415c:	46bd      	mov	sp, r7
    415e:	bc80      	pop	{r7}
    4160:	4770      	bx	lr
    4162:	46c0      	nop			(mov r8, r8)

00004164 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
    4164:	b480      	push	{r7}
    4166:	b083      	sub	sp, #12
    4168:	af00      	add	r7, sp, #0
    416a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
    416c:	687b      	ldr	r3, [r7, #4]
    416e:	f8b3 3040 	ldrh.w	r3, [r3, #64]
    4172:	b29b      	uxth	r3, r3
}
    4174:	4618      	mov	r0, r3
    4176:	f107 070c 	add.w	r7, r7, #12	; 0xc
    417a:	46bd      	mov	sp, r7
    417c:	bc80      	pop	{r7}
    417e:	4770      	bx	lr

00004180 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
    4180:	b480      	push	{r7}
    4182:	b083      	sub	sp, #12
    4184:	af00      	add	r7, sp, #0
    4186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	8c9b      	ldrh	r3, [r3, #36]
    418c:	b29b      	uxth	r3, r3
}
    418e:	4618      	mov	r0, r3
    4190:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4194:	46bd      	mov	sp, r7
    4196:	bc80      	pop	{r7}
    4198:	4770      	bx	lr
    419a:	46c0      	nop			(mov r8, r8)

0000419c <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
    419c:	b480      	push	{r7}
    419e:	b083      	sub	sp, #12
    41a0:	af00      	add	r7, sp, #0
    41a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	8d1b      	ldrh	r3, [r3, #40]
    41a8:	b29b      	uxth	r3, r3
}
    41aa:	4618      	mov	r0, r3
    41ac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    41b0:	46bd      	mov	sp, r7
    41b2:	bc80      	pop	{r7}
    41b4:	4770      	bx	lr
    41b6:	46c0      	nop			(mov r8, r8)

000041b8 <TIM_GetFlagStatus>:
  *   - TIM6 and TIM7 can have only one update flag. 
  *   - TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
    41b8:	b480      	push	{r7}
    41ba:	b085      	sub	sp, #20
    41bc:	af00      	add	r7, sp, #0
    41be:	6078      	str	r0, [r7, #4]
    41c0:	460b      	mov	r3, r1
    41c2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    41c4:	f04f 0300 	mov.w	r3, #0	; 0x0
    41c8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
    41ca:	687b      	ldr	r3, [r7, #4]
    41cc:	8a1b      	ldrh	r3, [r3, #16]
    41ce:	b29a      	uxth	r2, r3
    41d0:	887b      	ldrh	r3, [r7, #2]
    41d2:	ea02 0303 	and.w	r3, r2, r3
    41d6:	b29b      	uxth	r3, r3
    41d8:	2b00      	cmp	r3, #0
    41da:	d003      	beq.n	41e4 <TIM_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
    41dc:	f04f 0301 	mov.w	r3, #1	; 0x1
    41e0:	73fb      	strb	r3, [r7, #15]
    41e2:	e002      	b.n	41ea <TIM_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
    41e4:	f04f 0300 	mov.w	r3, #0	; 0x0
    41e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    41ea:	7bfb      	ldrb	r3, [r7, #15]
}
    41ec:	4618      	mov	r0, r3
    41ee:	f107 0714 	add.w	r7, r7, #20	; 0x14
    41f2:	46bd      	mov	sp, r7
    41f4:	bc80      	pop	{r7}
    41f6:	4770      	bx	lr

000041f8 <TIM_ClearFlag>:
  *   - TIM6 and TIM7 can have only one update flag. 
  *   - TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.  
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
    41f8:	b480      	push	{r7}
    41fa:	b083      	sub	sp, #12
    41fc:	af00      	add	r7, sp, #0
    41fe:	6078      	str	r0, [r7, #4]
    4200:	460b      	mov	r3, r1
    4202:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
    4204:	887b      	ldrh	r3, [r7, #2]
    4206:	ea6f 0303 	mvn.w	r3, r3
    420a:	b29b      	uxth	r3, r3
    420c:	687a      	ldr	r2, [r7, #4]
    420e:	8213      	strh	r3, [r2, #16]
}
    4210:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4214:	46bd      	mov	sp, r7
    4216:	bc80      	pop	{r7}
    4218:	4770      	bx	lr
    421a:	46c0      	nop			(mov r8, r8)

0000421c <TIM_GetITStatus>:
  *   - TIM6 and TIM7 can generate only an update interrupt.
  *   - TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    421c:	b480      	push	{r7}
    421e:	b085      	sub	sp, #20
    4220:	af00      	add	r7, sp, #0
    4222:	6078      	str	r0, [r7, #4]
    4224:	460b      	mov	r3, r1
    4226:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    4228:	f04f 0300 	mov.w	r3, #0	; 0x0
    422c:	72fb      	strb	r3, [r7, #11]
  uint16_t itstatus = 0x0, itenable = 0x0;
    422e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4232:	81bb      	strh	r3, [r7, #12]
    4234:	f04f 0300 	mov.w	r3, #0	; 0x0
    4238:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
    423a:	687b      	ldr	r3, [r7, #4]
    423c:	8a1b      	ldrh	r3, [r3, #16]
    423e:	b29a      	uxth	r2, r3
    4240:	887b      	ldrh	r3, [r7, #2]
    4242:	ea02 0303 	and.w	r3, r2, r3
    4246:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
    4248:	687b      	ldr	r3, [r7, #4]
    424a:	899b      	ldrh	r3, [r3, #12]
    424c:	b29a      	uxth	r2, r3
    424e:	887b      	ldrh	r3, [r7, #2]
    4250:	ea02 0303 	and.w	r3, r2, r3
    4254:	81fb      	strh	r3, [r7, #14]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
    4256:	89bb      	ldrh	r3, [r7, #12]
    4258:	2b00      	cmp	r3, #0
    425a:	d006      	beq.n	426a <TIM_GetITStatus+0x4e>
    425c:	89fb      	ldrh	r3, [r7, #14]
    425e:	2b00      	cmp	r3, #0
    4260:	d003      	beq.n	426a <TIM_GetITStatus+0x4e>
  {
    bitstatus = SET;
    4262:	f04f 0301 	mov.w	r3, #1	; 0x1
    4266:	72fb      	strb	r3, [r7, #11]
    4268:	e002      	b.n	4270 <TIM_GetITStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
    426a:	f04f 0300 	mov.w	r3, #0	; 0x0
    426e:	72fb      	strb	r3, [r7, #11]
  }
  return bitstatus;
    4270:	7afb      	ldrb	r3, [r7, #11]
}
    4272:	4618      	mov	r0, r3
    4274:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4278:	46bd      	mov	sp, r7
    427a:	bc80      	pop	{r7}
    427c:	4770      	bx	lr
    427e:	46c0      	nop			(mov r8, r8)

00004280 <TIM_ClearITPendingBit>:
  *   - TIM6 and TIM7 can generate only an update interrupt.
  *   - TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    4280:	b480      	push	{r7}
    4282:	b083      	sub	sp, #12
    4284:	af00      	add	r7, sp, #0
    4286:	6078      	str	r0, [r7, #4]
    4288:	460b      	mov	r3, r1
    428a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
    428c:	887b      	ldrh	r3, [r7, #2]
    428e:	ea6f 0303 	mvn.w	r3, r3
    4292:	b29b      	uxth	r3, r3
    4294:	687a      	ldr	r2, [r7, #4]
    4296:	8213      	strh	r3, [r2, #16]
}
    4298:	f107 070c 	add.w	r7, r7, #12	; 0xc
    429c:	46bd      	mov	sp, r7
    429e:	bc80      	pop	{r7}
    42a0:	4770      	bx	lr
    42a2:	46c0      	nop			(mov r8, r8)

000042a4 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    42a4:	b480      	push	{r7}
    42a6:	b087      	sub	sp, #28
    42a8:	af00      	add	r7, sp, #0
    42aa:	60f8      	str	r0, [r7, #12]
    42ac:	4618      	mov	r0, r3
    42ae:	460b      	mov	r3, r1
    42b0:	817b      	strh	r3, [r7, #10]
    42b2:	4613      	mov	r3, r2
    42b4:	813b      	strh	r3, [r7, #8]
    42b6:	4603      	mov	r3, r0
    42b8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
    42ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    42be:	82bb      	strh	r3, [r7, #20]
    42c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    42c4:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
    42c6:	68fb      	ldr	r3, [r7, #12]
    42c8:	8c1b      	ldrh	r3, [r3, #32]
    42ca:	b29b      	uxth	r3, r3
    42cc:	603b      	str	r3, [r7, #0]
    42ce:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    42d2:	6839      	ldr	r1, [r7, #0]
    42d4:	ea01 0303 	and.w	r3, r1, r3
    42d8:	603b      	str	r3, [r7, #0]
    42da:	68fa      	ldr	r2, [r7, #12]
    42dc:	6839      	ldr	r1, [r7, #0]
    42de:	460b      	mov	r3, r1
    42e0:	8413      	strh	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
    42e2:	68fb      	ldr	r3, [r7, #12]
    42e4:	8b1b      	ldrh	r3, [r3, #24]
    42e6:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    42e8:	68fb      	ldr	r3, [r7, #12]
    42ea:	8c1b      	ldrh	r3, [r3, #32]
    42ec:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
    42ee:	8abb      	ldrh	r3, [r7, #20]
    42f0:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    42f4:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    42f6:	88fb      	ldrh	r3, [r7, #6]
    42f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    42fc:	b29a      	uxth	r2, r3
    42fe:	893b      	ldrh	r3, [r7, #8]
    4300:	ea42 0303 	orr.w	r3, r2, r3
    4304:	b29a      	uxth	r2, r3
    4306:	8abb      	ldrh	r3, [r7, #20]
    4308:	ea42 0303 	orr.w	r3, r2, r3
    430c:	82bb      	strh	r3, [r7, #20]
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
    430e:	8afb      	ldrh	r3, [r7, #22]
    4310:	f023 0302 	bic.w	r3, r3, #2	; 0x2
    4314:	82fb      	strh	r3, [r7, #22]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
    4316:	897a      	ldrh	r2, [r7, #10]
    4318:	8afb      	ldrh	r3, [r7, #22]
    431a:	ea42 0303 	orr.w	r3, r2, r3
    431e:	b29b      	uxth	r3, r3
    4320:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    4324:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
    4326:	68fa      	ldr	r2, [r7, #12]
    4328:	8abb      	ldrh	r3, [r7, #20]
    432a:	8313      	strh	r3, [r2, #24]
  TIMx->CCER = tmpccer;
    432c:	68fa      	ldr	r2, [r7, #12]
    432e:	8afb      	ldrh	r3, [r7, #22]
    4330:	8413      	strh	r3, [r2, #32]
}
    4332:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    4336:	46bd      	mov	sp, r7
    4338:	bc80      	pop	{r7}
    433a:	4770      	bx	lr

0000433c <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    433c:	b480      	push	{r7}
    433e:	b087      	sub	sp, #28
    4340:	af00      	add	r7, sp, #0
    4342:	60f8      	str	r0, [r7, #12]
    4344:	4618      	mov	r0, r3
    4346:	460b      	mov	r3, r1
    4348:	817b      	strh	r3, [r7, #10]
    434a:	4613      	mov	r3, r2
    434c:	813b      	strh	r3, [r7, #8]
    434e:	4603      	mov	r3, r0
    4350:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
    4352:	f04f 0300 	mov.w	r3, #0	; 0x0
    4356:	827b      	strh	r3, [r7, #18]
    4358:	f04f 0300 	mov.w	r3, #0	; 0x0
    435c:	82bb      	strh	r3, [r7, #20]
    435e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4362:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
    4364:	68fb      	ldr	r3, [r7, #12]
    4366:	8c1b      	ldrh	r3, [r3, #32]
    4368:	b29b      	uxth	r3, r3
    436a:	603b      	str	r3, [r7, #0]
    436c:	f64f 73ef 	movw	r3, #65519	; 0xffef
    4370:	6839      	ldr	r1, [r7, #0]
    4372:	ea01 0303 	and.w	r3, r1, r3
    4376:	603b      	str	r3, [r7, #0]
    4378:	68fa      	ldr	r2, [r7, #12]
    437a:	6839      	ldr	r1, [r7, #0]
    437c:	460b      	mov	r3, r1
    437e:	8413      	strh	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
    4380:	68fb      	ldr	r3, [r7, #12]
    4382:	8b1b      	ldrh	r3, [r3, #24]
    4384:	827b      	strh	r3, [r7, #18]
  tmpccer = TIMx->CCER;
    4386:	68fb      	ldr	r3, [r7, #12]
    4388:	8c1b      	ldrh	r3, [r3, #32]
    438a:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
    438c:	897b      	ldrh	r3, [r7, #10]
    438e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4392:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
    4394:	8a7b      	ldrh	r3, [r7, #18]
    4396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    439a:	ea4f 5303 	mov.w	r3, r3, lsl #20
    439e:	ea4f 5313 	mov.w	r3, r3, lsr #20
    43a2:	827b      	strh	r3, [r7, #18]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
    43a4:	88fb      	ldrh	r3, [r7, #6]
    43a6:	ea4f 3303 	mov.w	r3, r3, lsl #12
    43aa:	b29a      	uxth	r2, r3
    43ac:	8a7b      	ldrh	r3, [r7, #18]
    43ae:	ea42 0303 	orr.w	r3, r2, r3
    43b2:	827b      	strh	r3, [r7, #18]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
    43b4:	893b      	ldrh	r3, [r7, #8]
    43b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    43ba:	b29a      	uxth	r2, r3
    43bc:	8a7b      	ldrh	r3, [r7, #18]
    43be:	ea42 0303 	orr.w	r3, r2, r3
    43c2:	827b      	strh	r3, [r7, #18]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
    43c4:	8abb      	ldrh	r3, [r7, #20]
    43c6:	f023 0320 	bic.w	r3, r3, #32	; 0x20
    43ca:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
    43cc:	8afa      	ldrh	r2, [r7, #22]
    43ce:	8abb      	ldrh	r3, [r7, #20]
    43d0:	ea42 0303 	orr.w	r3, r2, r3
    43d4:	b29b      	uxth	r3, r3
    43d6:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    43da:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
    43dc:	68fa      	ldr	r2, [r7, #12]
    43de:	8a7b      	ldrh	r3, [r7, #18]
    43e0:	8313      	strh	r3, [r2, #24]
  TIMx->CCER = tmpccer;
    43e2:	68fa      	ldr	r2, [r7, #12]
    43e4:	8abb      	ldrh	r3, [r7, #20]
    43e6:	8413      	strh	r3, [r2, #32]
}
    43e8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    43ec:	46bd      	mov	sp, r7
    43ee:	bc80      	pop	{r7}
    43f0:	4770      	bx	lr
    43f2:	46c0      	nop			(mov r8, r8)

000043f4 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    43f4:	b480      	push	{r7}
    43f6:	b087      	sub	sp, #28
    43f8:	af00      	add	r7, sp, #0
    43fa:	60f8      	str	r0, [r7, #12]
    43fc:	4618      	mov	r0, r3
    43fe:	460b      	mov	r3, r1
    4400:	817b      	strh	r3, [r7, #10]
    4402:	4613      	mov	r3, r2
    4404:	813b      	strh	r3, [r7, #8]
    4406:	4603      	mov	r3, r0
    4408:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    440a:	f04f 0300 	mov.w	r3, #0	; 0x0
    440e:	827b      	strh	r3, [r7, #18]
    4410:	f04f 0300 	mov.w	r3, #0	; 0x0
    4414:	82bb      	strh	r3, [r7, #20]
    4416:	f04f 0300 	mov.w	r3, #0	; 0x0
    441a:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
    441c:	68fb      	ldr	r3, [r7, #12]
    441e:	8c1b      	ldrh	r3, [r3, #32]
    4420:	b29b      	uxth	r3, r3
    4422:	603b      	str	r3, [r7, #0]
    4424:	f64f 63ff 	movw	r3, #65279	; 0xfeff
    4428:	6839      	ldr	r1, [r7, #0]
    442a:	ea01 0303 	and.w	r3, r1, r3
    442e:	603b      	str	r3, [r7, #0]
    4430:	68fa      	ldr	r2, [r7, #12]
    4432:	6839      	ldr	r1, [r7, #0]
    4434:	460b      	mov	r3, r1
    4436:	8413      	strh	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
    4438:	68fb      	ldr	r3, [r7, #12]
    443a:	8b9b      	ldrh	r3, [r3, #28]
    443c:	827b      	strh	r3, [r7, #18]
  tmpccer = TIMx->CCER;
    443e:	68fb      	ldr	r3, [r7, #12]
    4440:	8c1b      	ldrh	r3, [r3, #32]
    4442:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
    4444:	897b      	ldrh	r3, [r7, #10]
    4446:	ea4f 2303 	mov.w	r3, r3, lsl #8
    444a:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
    444c:	8a7b      	ldrh	r3, [r7, #18]
    444e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    4452:	827b      	strh	r3, [r7, #18]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    4454:	88fb      	ldrh	r3, [r7, #6]
    4456:	ea4f 1303 	mov.w	r3, r3, lsl #4
    445a:	b29a      	uxth	r2, r3
    445c:	893b      	ldrh	r3, [r7, #8]
    445e:	ea42 0303 	orr.w	r3, r2, r3
    4462:	b29a      	uxth	r2, r3
    4464:	8a7b      	ldrh	r3, [r7, #18]
    4466:	ea42 0303 	orr.w	r3, r2, r3
    446a:	827b      	strh	r3, [r7, #18]
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
    446c:	8abb      	ldrh	r3, [r7, #20]
    446e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    4472:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC3E_Set);
    4474:	8afa      	ldrh	r2, [r7, #22]
    4476:	8abb      	ldrh	r3, [r7, #20]
    4478:	ea42 0303 	orr.w	r3, r2, r3
    447c:	b29b      	uxth	r3, r3
    447e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4482:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    4484:	68fa      	ldr	r2, [r7, #12]
    4486:	8a7b      	ldrh	r3, [r7, #18]
    4488:	8393      	strh	r3, [r2, #28]
  TIMx->CCER = tmpccer;
    448a:	68fa      	ldr	r2, [r7, #12]
    448c:	8abb      	ldrh	r3, [r7, #20]
    448e:	8413      	strh	r3, [r2, #32]
}
    4490:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    4494:	46bd      	mov	sp, r7
    4496:	bc80      	pop	{r7}
    4498:	4770      	bx	lr
    449a:	46c0      	nop			(mov r8, r8)

0000449c <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    449c:	b480      	push	{r7}
    449e:	b087      	sub	sp, #28
    44a0:	af00      	add	r7, sp, #0
    44a2:	60f8      	str	r0, [r7, #12]
    44a4:	4618      	mov	r0, r3
    44a6:	460b      	mov	r3, r1
    44a8:	817b      	strh	r3, [r7, #10]
    44aa:	4613      	mov	r3, r2
    44ac:	813b      	strh	r3, [r7, #8]
    44ae:	4603      	mov	r3, r0
    44b0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    44b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    44b6:	827b      	strh	r3, [r7, #18]
    44b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    44bc:	82bb      	strh	r3, [r7, #20]
    44be:	f04f 0300 	mov.w	r3, #0	; 0x0
    44c2:	82fb      	strh	r3, [r7, #22]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
    44c4:	68fb      	ldr	r3, [r7, #12]
    44c6:	8c1b      	ldrh	r3, [r3, #32]
    44c8:	b29b      	uxth	r3, r3
    44ca:	603b      	str	r3, [r7, #0]
    44cc:	f64e 73ff 	movw	r3, #61439	; 0xefff
    44d0:	6839      	ldr	r1, [r7, #0]
    44d2:	ea01 0303 	and.w	r3, r1, r3
    44d6:	603b      	str	r3, [r7, #0]
    44d8:	68fa      	ldr	r2, [r7, #12]
    44da:	6839      	ldr	r1, [r7, #0]
    44dc:	460b      	mov	r3, r1
    44de:	8413      	strh	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
    44e0:	68fb      	ldr	r3, [r7, #12]
    44e2:	8b9b      	ldrh	r3, [r3, #28]
    44e4:	827b      	strh	r3, [r7, #18]
  tmpccer = TIMx->CCER;
    44e6:	68fb      	ldr	r3, [r7, #12]
    44e8:	8c1b      	ldrh	r3, [r3, #32]
    44ea:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
    44ec:	897b      	ldrh	r3, [r7, #10]
    44ee:	ea4f 3303 	mov.w	r3, r3, lsl #12
    44f2:	82fb      	strh	r3, [r7, #22]

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
    44f4:	8a7b      	ldrh	r3, [r7, #18]
    44f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    44fa:	ea4f 5303 	mov.w	r3, r3, lsl #20
    44fe:	ea4f 5313 	mov.w	r3, r3, lsr #20
    4502:	827b      	strh	r3, [r7, #18]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
    4504:	893b      	ldrh	r3, [r7, #8]
    4506:	ea4f 2303 	mov.w	r3, r3, lsl #8
    450a:	b29a      	uxth	r2, r3
    450c:	8a7b      	ldrh	r3, [r7, #18]
    450e:	ea42 0303 	orr.w	r3, r2, r3
    4512:	827b      	strh	r3, [r7, #18]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
    4514:	88fb      	ldrh	r3, [r7, #6]
    4516:	ea4f 3303 	mov.w	r3, r3, lsl #12
    451a:	b29a      	uxth	r2, r3
    451c:	8a7b      	ldrh	r3, [r7, #18]
    451e:	ea42 0303 	orr.w	r3, r2, r3
    4522:	827b      	strh	r3, [r7, #18]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
    4524:	8abb      	ldrh	r3, [r7, #20]
    4526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    452a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC4E_Set);
    452c:	8afa      	ldrh	r2, [r7, #22]
    452e:	8abb      	ldrh	r3, [r7, #20]
    4530:	ea42 0303 	orr.w	r3, r2, r3
    4534:	b29b      	uxth	r3, r3
    4536:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    453a:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    453c:	68fa      	ldr	r2, [r7, #12]
    453e:	8a7b      	ldrh	r3, [r7, #18]
    4540:	8393      	strh	r3, [r2, #28]
  TIMx->CCER = tmpccer ;
    4542:	68fa      	ldr	r2, [r7, #12]
    4544:	8abb      	ldrh	r3, [r7, #20]
    4546:	8413      	strh	r3, [r2, #32]
}
    4548:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    454c:	46bd      	mov	sp, r7
    454e:	bc80      	pop	{r7}
    4550:	4770      	bx	lr
    4552:	46c0      	nop			(mov r8, r8)

00004554 <USART_DeInit>:
  * @param  USARTx: Select the USART or the UART peripheral. 
  *   This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    4554:	b580      	push	{r7, lr}
    4556:	b082      	sub	sp, #8
    4558:	af00      	add	r7, sp, #0
    455a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    455c:	687a      	ldr	r2, [r7, #4]
    455e:	4b2b      	ldr	r3, [pc, #172]	(460c <USART_DeInit+0xb8>)
    4560:	429a      	cmp	r2, r3
    4562:	d10c      	bne.n	457e <USART_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    4564:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    4568:	f04f 0101 	mov.w	r1, #1	; 0x1
    456c:	f7fd ffd2 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    4570:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    4574:	f04f 0100 	mov.w	r1, #0	; 0x0
    4578:	f7fd ffcc 	bl	2514 <RCC_APB2PeriphResetCmd>
    457c:	e042      	b.n	4604 <USART_DeInit+0xb0>
  }
  else if (USARTx == USART2)
    457e:	687a      	ldr	r2, [r7, #4]
    4580:	4b23      	ldr	r3, [pc, #140]	(4610 <USART_DeInit+0xbc>)
    4582:	429a      	cmp	r2, r3
    4584:	d10c      	bne.n	45a0 <USART_DeInit+0x4c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    4586:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    458a:	f04f 0101 	mov.w	r1, #1	; 0x1
    458e:	f7fd ffe3 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    4592:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    4596:	f04f 0100 	mov.w	r1, #0	; 0x0
    459a:	f7fd ffdd 	bl	2558 <RCC_APB1PeriphResetCmd>
    459e:	e031      	b.n	4604 <USART_DeInit+0xb0>
  }
  else if (USARTx == USART3)
    45a0:	687a      	ldr	r2, [r7, #4]
    45a2:	4b1c      	ldr	r3, [pc, #112]	(4614 <USART_DeInit+0xc0>)
    45a4:	429a      	cmp	r2, r3
    45a6:	d10c      	bne.n	45c2 <USART_DeInit+0x6e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    45a8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    45ac:	f04f 0101 	mov.w	r1, #1	; 0x1
    45b0:	f7fd ffd2 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    45b4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    45b8:	f04f 0100 	mov.w	r1, #0	; 0x0
    45bc:	f7fd ffcc 	bl	2558 <RCC_APB1PeriphResetCmd>
    45c0:	e020      	b.n	4604 <USART_DeInit+0xb0>
  }    
  else if (USARTx == UART4)
    45c2:	687a      	ldr	r2, [r7, #4]
    45c4:	4b14      	ldr	r3, [pc, #80]	(4618 <USART_DeInit+0xc4>)
    45c6:	429a      	cmp	r2, r3
    45c8:	d10c      	bne.n	45e4 <USART_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    45ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    45ce:	f04f 0101 	mov.w	r1, #1	; 0x1
    45d2:	f7fd ffc1 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    45d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    45da:	f04f 0100 	mov.w	r1, #0	; 0x0
    45de:	f7fd ffbb 	bl	2558 <RCC_APB1PeriphResetCmd>
    45e2:	e00f      	b.n	4604 <USART_DeInit+0xb0>
  }    
  else
  {
    if (USARTx == UART5)
    45e4:	687a      	ldr	r2, [r7, #4]
    45e6:	4b0d      	ldr	r3, [pc, #52]	(461c <USART_DeInit+0xc8>)
    45e8:	429a      	cmp	r2, r3
    45ea:	d10b      	bne.n	4604 <USART_DeInit+0xb0>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    45ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    45f0:	f04f 0101 	mov.w	r1, #1	; 0x1
    45f4:	f7fd ffb0 	bl	2558 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    45f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    45fc:	f04f 0100 	mov.w	r1, #0	; 0x0
    4600:	f7fd ffaa 	bl	2558 <RCC_APB1PeriphResetCmd>
    }
  }
}
    4604:	f107 0708 	add.w	r7, r7, #8	; 0x8
    4608:	46bd      	mov	sp, r7
    460a:	bd80      	pop	{r7, pc}
    460c:	40013800 	.word	0x40013800
    4610:	40004400 	.word	0x40004400
    4614:	40004800 	.word	0x40004800
    4618:	40004c00 	.word	0x40004c00
    461c:	40005000 	.word	0x40005000

00004620 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    4620:	b580      	push	{r7, lr}
    4622:	b08c      	sub	sp, #48
    4624:	af00      	add	r7, sp, #0
    4626:	6078      	str	r0, [r7, #4]
    4628:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    462a:	f04f 0300 	mov.w	r3, #0	; 0x0
    462e:	61fb      	str	r3, [r7, #28]
    4630:	f04f 0300 	mov.w	r3, #0	; 0x0
    4634:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
    4636:	f04f 0300 	mov.w	r3, #0	; 0x0
    463a:	627b      	str	r3, [r7, #36]
  uint32_t fractionaldivider = 0x00;
    463c:	f04f 0300 	mov.w	r3, #0	; 0x0
    4640:	62bb      	str	r3, [r7, #40]
  uint32_t usartxbase = 0;
    4642:	f04f 0300 	mov.w	r3, #0	; 0x0
    4646:	62fb      	str	r3, [r7, #44]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    4648:	687b      	ldr	r3, [r7, #4]
    464a:	62fb      	str	r3, [r7, #44]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    464c:	687b      	ldr	r3, [r7, #4]
    464e:	8a1b      	ldrh	r3, [r3, #16]
    4650:	b29b      	uxth	r3, r3
    4652:	61fb      	str	r3, [r7, #28]
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    4654:	69fa      	ldr	r2, [r7, #28]
    4656:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    465a:	ea02 0303 	and.w	r3, r2, r3
    465e:	61fb      	str	r3, [r7, #28]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    4660:	683b      	ldr	r3, [r7, #0]
    4662:	88db      	ldrh	r3, [r3, #6]
    4664:	461a      	mov	r2, r3
    4666:	69fb      	ldr	r3, [r7, #28]
    4668:	ea43 0302 	orr.w	r3, r3, r2
    466c:	61fb      	str	r3, [r7, #28]
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    466e:	69fb      	ldr	r3, [r7, #28]
    4670:	b29b      	uxth	r3, r3
    4672:	687a      	ldr	r2, [r7, #4]
    4674:	8213      	strh	r3, [r2, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    4676:	687b      	ldr	r3, [r7, #4]
    4678:	899b      	ldrh	r3, [r3, #12]
    467a:	b29b      	uxth	r3, r3
    467c:	61fb      	str	r3, [r7, #28]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    467e:	69fa      	ldr	r2, [r7, #28]
    4680:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    4684:	ea02 0303 	and.w	r3, r2, r3
    4688:	61fb      	str	r3, [r7, #28]
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    468a:	683b      	ldr	r3, [r7, #0]
    468c:	889a      	ldrh	r2, [r3, #4]
    468e:	683b      	ldr	r3, [r7, #0]
    4690:	891b      	ldrh	r3, [r3, #8]
    4692:	ea42 0303 	orr.w	r3, r2, r3
    4696:	b29a      	uxth	r2, r3
    4698:	683b      	ldr	r3, [r7, #0]
    469a:	895b      	ldrh	r3, [r3, #10]
    469c:	ea42 0303 	orr.w	r3, r2, r3
    46a0:	b29b      	uxth	r3, r3
    46a2:	461a      	mov	r2, r3
    46a4:	69fb      	ldr	r3, [r7, #28]
    46a6:	ea43 0302 	orr.w	r3, r3, r2
    46aa:	61fb      	str	r3, [r7, #28]
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    46ac:	69fb      	ldr	r3, [r7, #28]
    46ae:	b29b      	uxth	r3, r3
    46b0:	687a      	ldr	r2, [r7, #4]
    46b2:	8193      	strh	r3, [r2, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
    46b4:	687b      	ldr	r3, [r7, #4]
    46b6:	8a9b      	ldrh	r3, [r3, #20]
    46b8:	b29b      	uxth	r3, r3
    46ba:	61fb      	str	r3, [r7, #28]
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    46bc:	69fa      	ldr	r2, [r7, #28]
    46be:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    46c2:	ea02 0303 	and.w	r3, r2, r3
    46c6:	61fb      	str	r3, [r7, #28]
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    46c8:	683b      	ldr	r3, [r7, #0]
    46ca:	899b      	ldrh	r3, [r3, #12]
    46cc:	461a      	mov	r2, r3
    46ce:	69fb      	ldr	r3, [r7, #28]
    46d0:	ea43 0302 	orr.w	r3, r3, r2
    46d4:	61fb      	str	r3, [r7, #28]
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    46d6:	69fb      	ldr	r3, [r7, #28]
    46d8:	b29b      	uxth	r3, r3
    46da:	687a      	ldr	r2, [r7, #4]
    46dc:	8293      	strh	r3, [r2, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    46de:	f107 0308 	add.w	r3, r7, #8	; 0x8
    46e2:	4618      	mov	r0, r3
    46e4:	f7fd fd94 	bl	2210 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    46e8:	6afa      	ldr	r2, [r7, #44]
    46ea:	4b24      	ldr	r3, [pc, #144]	(477c <USART_Init+0x15c>)
    46ec:	429a      	cmp	r2, r3
    46ee:	d102      	bne.n	46f6 <USART_Init+0xd6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    46f0:	697b      	ldr	r3, [r7, #20]
    46f2:	623b      	str	r3, [r7, #32]
    46f4:	e001      	b.n	46fa <USART_Init+0xda>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    46f6:	693b      	ldr	r3, [r7, #16]
    46f8:	623b      	str	r3, [r7, #32]
  }
  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
    46fa:	6a39      	ldr	r1, [r7, #32]
    46fc:	460b      	mov	r3, r1
    46fe:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    4702:	ea4f 0382 	mov.w	r3, r2, lsl #2
    4706:	ebc2 0303 	rsb	r3, r2, r3
    470a:	eb03 0201 	add.w	r2, r3, r1
    470e:	683b      	ldr	r3, [r7, #0]
    4710:	681b      	ldr	r3, [r3, #0]
    4712:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4716:	fbb2 f3f3 	udiv	r3, r2, r3
    471a:	627b      	str	r3, [r7, #36]
  tmpreg = (integerdivider / 0x64) << 0x04;
    471c:	6a7a      	ldr	r2, [r7, #36]
    471e:	4b18      	ldr	r3, [pc, #96]	(4780 <USART_Init+0x160>)
    4720:	fba3 1302 	umull	r1, r3, r3, r2
    4724:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4728:	ea4f 1303 	mov.w	r3, r3, lsl #4
    472c:	61fb      	str	r3, [r7, #28]
  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
    472e:	69fb      	ldr	r3, [r7, #28]
    4730:	ea4f 1313 	mov.w	r3, r3, lsr #4
    4734:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4738:	ea4f 0283 	mov.w	r2, r3, lsl #2
    473c:	4413      	add	r3, r2
    473e:	ea4f 0283 	mov.w	r2, r3, lsl #2
    4742:	441a      	add	r2, r3
    4744:	6a7b      	ldr	r3, [r7, #36]
    4746:	ebc2 0303 	rsb	r3, r2, r3
    474a:	62bb      	str	r3, [r7, #40]
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((uint8_t)0x0F);
    474c:	6abb      	ldr	r3, [r7, #40]
    474e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4752:	f103 0232 	add.w	r2, r3, #50	; 0x32
    4756:	4b0a      	ldr	r3, [pc, #40]	(4780 <USART_Init+0x160>)
    4758:	fba3 1302 	umull	r1, r3, r3, r2
    475c:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4760:	f003 020f 	and.w	r2, r3, #15	; 0xf
    4764:	69fb      	ldr	r3, [r7, #28]
    4766:	ea43 0302 	orr.w	r3, r3, r2
    476a:	61fb      	str	r3, [r7, #28]
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    476c:	69fb      	ldr	r3, [r7, #28]
    476e:	b29b      	uxth	r3, r3
    4770:	687a      	ldr	r2, [r7, #4]
    4772:	8113      	strh	r3, [r2, #8]
}
    4774:	f107 0730 	add.w	r7, r7, #48	; 0x30
    4778:	46bd      	mov	sp, r7
    477a:	bd80      	pop	{r7, pc}
    477c:	40013800 	.word	0x40013800
    4780:	51eb851f 	.word	0x51eb851f

00004784 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    4784:	b480      	push	{r7}
    4786:	b083      	sub	sp, #12
    4788:	af00      	add	r7, sp, #0
    478a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    478c:	687a      	ldr	r2, [r7, #4]
    478e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    4792:	6013      	str	r3, [r2, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    4794:	687a      	ldr	r2, [r7, #4]
    4796:	f04f 0300 	mov.w	r3, #0	; 0x0
    479a:	8093      	strh	r3, [r2, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    479c:	687a      	ldr	r2, [r7, #4]
    479e:	f04f 0300 	mov.w	r3, #0	; 0x0
    47a2:	80d3      	strh	r3, [r2, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    47a4:	687a      	ldr	r2, [r7, #4]
    47a6:	f04f 0300 	mov.w	r3, #0	; 0x0
    47aa:	8113      	strh	r3, [r2, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    47ac:	687a      	ldr	r2, [r7, #4]
    47ae:	f04f 030c 	mov.w	r3, #12	; 0xc
    47b2:	8153      	strh	r3, [r2, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    47b4:	687a      	ldr	r2, [r7, #4]
    47b6:	f04f 0300 	mov.w	r3, #0	; 0x0
    47ba:	8193      	strh	r3, [r2, #12]
}
    47bc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    47c0:	46bd      	mov	sp, r7
    47c2:	bc80      	pop	{r7}
    47c4:	4770      	bx	lr
    47c6:	46c0      	nop			(mov r8, r8)

000047c8 <USART_ClockInit>:
  *   USART peripheral.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    47c8:	b480      	push	{r7}
    47ca:	b085      	sub	sp, #20
    47cc:	af00      	add	r7, sp, #0
    47ce:	6078      	str	r0, [r7, #4]
    47d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    47d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    47d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    47d8:	687b      	ldr	r3, [r7, #4]
    47da:	8a1b      	ldrh	r3, [r3, #16]
    47dc:	b29b      	uxth	r3, r3
    47de:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    47e0:	68fa      	ldr	r2, [r7, #12]
    47e2:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    47e6:	ea02 0303 	and.w	r3, r2, r3
    47ea:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    47ec:	683b      	ldr	r3, [r7, #0]
    47ee:	881a      	ldrh	r2, [r3, #0]
    47f0:	683b      	ldr	r3, [r7, #0]
    47f2:	885b      	ldrh	r3, [r3, #2]
    47f4:	ea42 0303 	orr.w	r3, r2, r3
    47f8:	b29a      	uxth	r2, r3
    47fa:	683b      	ldr	r3, [r7, #0]
    47fc:	889b      	ldrh	r3, [r3, #4]
    47fe:	ea42 0303 	orr.w	r3, r2, r3
    4802:	b29a      	uxth	r2, r3
    4804:	683b      	ldr	r3, [r7, #0]
    4806:	88db      	ldrh	r3, [r3, #6]
    4808:	ea42 0303 	orr.w	r3, r2, r3
    480c:	b29b      	uxth	r3, r3
    480e:	461a      	mov	r2, r3
    4810:	68fb      	ldr	r3, [r7, #12]
    4812:	ea43 0302 	orr.w	r3, r3, r2
    4816:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    4818:	68fb      	ldr	r3, [r7, #12]
    481a:	b29b      	uxth	r3, r3
    481c:	687a      	ldr	r2, [r7, #4]
    481e:	8213      	strh	r3, [r2, #16]
}
    4820:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4824:	46bd      	mov	sp, r7
    4826:	bc80      	pop	{r7}
    4828:	4770      	bx	lr
    482a:	46c0      	nop			(mov r8, r8)

0000482c <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *   structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    482c:	b480      	push	{r7}
    482e:	b083      	sub	sp, #12
    4830:	af00      	add	r7, sp, #0
    4832:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    4834:	687a      	ldr	r2, [r7, #4]
    4836:	f04f 0300 	mov.w	r3, #0	; 0x0
    483a:	8013      	strh	r3, [r2, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    483c:	687a      	ldr	r2, [r7, #4]
    483e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4842:	8053      	strh	r3, [r2, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    4844:	687a      	ldr	r2, [r7, #4]
    4846:	f04f 0300 	mov.w	r3, #0	; 0x0
    484a:	8093      	strh	r3, [r2, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    484c:	687a      	ldr	r2, [r7, #4]
    484e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4852:	80d3      	strh	r3, [r2, #6]
}
    4854:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4858:	46bd      	mov	sp, r7
    485a:	bc80      	pop	{r7}
    485c:	4770      	bx	lr
    485e:	46c0      	nop			(mov r8, r8)

00004860 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4860:	b480      	push	{r7}
    4862:	b085      	sub	sp, #20
    4864:	af00      	add	r7, sp, #0
    4866:	60f8      	str	r0, [r7, #12]
    4868:	460b      	mov	r3, r1
    486a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    486c:	7afb      	ldrb	r3, [r7, #11]
    486e:	2b00      	cmp	r3, #0
    4870:	d008      	beq.n	4884 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    4872:	68fb      	ldr	r3, [r7, #12]
    4874:	899b      	ldrh	r3, [r3, #12]
    4876:	b29b      	uxth	r3, r3
    4878:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    487c:	b29b      	uxth	r3, r3
    487e:	68fa      	ldr	r2, [r7, #12]
    4880:	8193      	strh	r3, [r2, #12]
    4882:	e00d      	b.n	48a0 <USART_Cmd+0x40>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    4884:	68fb      	ldr	r3, [r7, #12]
    4886:	899b      	ldrh	r3, [r3, #12]
    4888:	b29b      	uxth	r3, r3
    488a:	607b      	str	r3, [r7, #4]
    488c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
    4890:	6879      	ldr	r1, [r7, #4]
    4892:	ea01 0303 	and.w	r3, r1, r3
    4896:	607b      	str	r3, [r7, #4]
    4898:	68fa      	ldr	r2, [r7, #12]
    489a:	6879      	ldr	r1, [r7, #4]
    489c:	460b      	mov	r3, r1
    489e:	8193      	strh	r3, [r2, #12]
  }
}
    48a0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    48a4:	46bd      	mov	sp, r7
    48a6:	bc80      	pop	{r7}
    48a8:	4770      	bx	lr
    48aa:	46c0      	nop			(mov r8, r8)

000048ac <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    48ac:	b480      	push	{r7}
    48ae:	b087      	sub	sp, #28
    48b0:	af00      	add	r7, sp, #0
    48b2:	6078      	str	r0, [r7, #4]
    48b4:	460b      	mov	r3, r1
    48b6:	807b      	strh	r3, [r7, #2]
    48b8:	4613      	mov	r3, r2
    48ba:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    48bc:	f04f 0300 	mov.w	r3, #0	; 0x0
    48c0:	60bb      	str	r3, [r7, #8]
    48c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    48c6:	60fb      	str	r3, [r7, #12]
    48c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    48cc:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0x00;
    48ce:	f04f 0300 	mov.w	r3, #0	; 0x0
    48d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    48d8:	887b      	ldrh	r3, [r7, #2]
    48da:	b2db      	uxtb	r3, r3
    48dc:	ea4f 1353 	mov.w	r3, r3, lsr #5
    48e0:	b2db      	uxtb	r3, r3
    48e2:	60bb      	str	r3, [r7, #8]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    48e4:	887b      	ldrh	r3, [r7, #2]
    48e6:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    48ea:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    48ec:	68fa      	ldr	r2, [r7, #12]
    48ee:	f04f 0301 	mov.w	r3, #1	; 0x1
    48f2:	fa03 f302 	lsl.w	r3, r3, r2
    48f6:	613b      	str	r3, [r7, #16]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
    48f8:	68bb      	ldr	r3, [r7, #8]
    48fa:	2b01      	cmp	r3, #1
    48fc:	d104      	bne.n	4908 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
    48fe:	697b      	ldr	r3, [r7, #20]
    4900:	f103 030c 	add.w	r3, r3, #12	; 0xc
    4904:	617b      	str	r3, [r7, #20]
    4906:	e00b      	b.n	4920 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    4908:	68bb      	ldr	r3, [r7, #8]
    490a:	2b02      	cmp	r3, #2
    490c:	d104      	bne.n	4918 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
    490e:	697b      	ldr	r3, [r7, #20]
    4910:	f103 0310 	add.w	r3, r3, #16	; 0x10
    4914:	617b      	str	r3, [r7, #20]
    4916:	e003      	b.n	4920 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
    4918:	697b      	ldr	r3, [r7, #20]
    491a:	f103 0314 	add.w	r3, r3, #20	; 0x14
    491e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    4920:	787b      	ldrb	r3, [r7, #1]
    4922:	2b00      	cmp	r3, #0
    4924:	d007      	beq.n	4936 <USART_ITConfig+0x8a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    4926:	6979      	ldr	r1, [r7, #20]
    4928:	697b      	ldr	r3, [r7, #20]
    492a:	681a      	ldr	r2, [r3, #0]
    492c:	693b      	ldr	r3, [r7, #16]
    492e:	ea42 0303 	orr.w	r3, r2, r3
    4932:	600b      	str	r3, [r1, #0]
    4934:	e008      	b.n	4948 <USART_ITConfig+0x9c>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    4936:	6979      	ldr	r1, [r7, #20]
    4938:	697b      	ldr	r3, [r7, #20]
    493a:	681a      	ldr	r2, [r3, #0]
    493c:	693b      	ldr	r3, [r7, #16]
    493e:	ea6f 0303 	mvn.w	r3, r3
    4942:	ea02 0303 	and.w	r3, r2, r3
    4946:	600b      	str	r3, [r1, #0]
  }
}
    4948:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    494c:	46bd      	mov	sp, r7
    494e:	bc80      	pop	{r7}
    4950:	4770      	bx	lr
    4952:	46c0      	nop			(mov r8, r8)

00004954 <USART_DMACmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The DMA mode is not available for UART5.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    4954:	b480      	push	{r7}
    4956:	b083      	sub	sp, #12
    4958:	af00      	add	r7, sp, #0
    495a:	6078      	str	r0, [r7, #4]
    495c:	460b      	mov	r3, r1
    495e:	807b      	strh	r3, [r7, #2]
    4960:	4613      	mov	r3, r2
    4962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
    4964:	787b      	ldrb	r3, [r7, #1]
    4966:	2b00      	cmp	r3, #0
    4968:	d009      	beq.n	497e <USART_DMACmd+0x2a>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    496a:	687b      	ldr	r3, [r7, #4]
    496c:	8a9b      	ldrh	r3, [r3, #20]
    496e:	b29a      	uxth	r2, r3
    4970:	887b      	ldrh	r3, [r7, #2]
    4972:	ea42 0303 	orr.w	r3, r2, r3
    4976:	b29b      	uxth	r3, r3
    4978:	687a      	ldr	r2, [r7, #4]
    497a:	8293      	strh	r3, [r2, #20]
    497c:	e00b      	b.n	4996 <USART_DMACmd+0x42>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    497e:	687b      	ldr	r3, [r7, #4]
    4980:	8a9b      	ldrh	r3, [r3, #20]
    4982:	b29a      	uxth	r2, r3
    4984:	887b      	ldrh	r3, [r7, #2]
    4986:	ea6f 0303 	mvn.w	r3, r3
    498a:	b29b      	uxth	r3, r3
    498c:	ea02 0303 	and.w	r3, r2, r3
    4990:	b29b      	uxth	r3, r3
    4992:	687a      	ldr	r2, [r7, #4]
    4994:	8293      	strh	r3, [r2, #20]
  }
}
    4996:	f107 070c 	add.w	r7, r7, #12	; 0xc
    499a:	46bd      	mov	sp, r7
    499c:	bc80      	pop	{r7}
    499e:	4770      	bx	lr

000049a0 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    49a0:	b480      	push	{r7}
    49a2:	b085      	sub	sp, #20
    49a4:	af00      	add	r7, sp, #0
    49a6:	60f8      	str	r0, [r7, #12]
    49a8:	460b      	mov	r3, r1
    49aa:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    49ac:	68fb      	ldr	r3, [r7, #12]
    49ae:	8a1b      	ldrh	r3, [r3, #16]
    49b0:	b29b      	uxth	r3, r3
    49b2:	607b      	str	r3, [r7, #4]
    49b4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    49b8:	6879      	ldr	r1, [r7, #4]
    49ba:	ea01 0303 	and.w	r3, r1, r3
    49be:	607b      	str	r3, [r7, #4]
    49c0:	68fa      	ldr	r2, [r7, #12]
    49c2:	6879      	ldr	r1, [r7, #4]
    49c4:	460b      	mov	r3, r1
    49c6:	8213      	strh	r3, [r2, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    49c8:	68fb      	ldr	r3, [r7, #12]
    49ca:	8a1b      	ldrh	r3, [r3, #16]
    49cc:	b29a      	uxth	r2, r3
    49ce:	7afb      	ldrb	r3, [r7, #11]
    49d0:	ea42 0303 	orr.w	r3, r2, r3
    49d4:	b29b      	uxth	r3, r3
    49d6:	68fa      	ldr	r2, [r7, #12]
    49d8:	8213      	strh	r3, [r2, #16]
}
    49da:	f107 0714 	add.w	r7, r7, #20	; 0x14
    49de:	46bd      	mov	sp, r7
    49e0:	bc80      	pop	{r7}
    49e2:	4770      	bx	lr

000049e4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    49e4:	b480      	push	{r7}
    49e6:	b085      	sub	sp, #20
    49e8:	af00      	add	r7, sp, #0
    49ea:	60f8      	str	r0, [r7, #12]
    49ec:	460b      	mov	r3, r1
    49ee:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
    49f0:	68fb      	ldr	r3, [r7, #12]
    49f2:	899b      	ldrh	r3, [r3, #12]
    49f4:	b29b      	uxth	r3, r3
    49f6:	607b      	str	r3, [r7, #4]
    49f8:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
    49fc:	6879      	ldr	r1, [r7, #4]
    49fe:	ea01 0303 	and.w	r3, r1, r3
    4a02:	607b      	str	r3, [r7, #4]
    4a04:	68fa      	ldr	r2, [r7, #12]
    4a06:	6879      	ldr	r1, [r7, #4]
    4a08:	460b      	mov	r3, r1
    4a0a:	8193      	strh	r3, [r2, #12]
  USARTx->CR1 |= USART_WakeUp;
    4a0c:	68fb      	ldr	r3, [r7, #12]
    4a0e:	899b      	ldrh	r3, [r3, #12]
    4a10:	b29a      	uxth	r2, r3
    4a12:	897b      	ldrh	r3, [r7, #10]
    4a14:	ea42 0303 	orr.w	r3, r2, r3
    4a18:	b29b      	uxth	r3, r3
    4a1a:	68fa      	ldr	r2, [r7, #12]
    4a1c:	8193      	strh	r3, [r2, #12]
}
    4a1e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4a22:	46bd      	mov	sp, r7
    4a24:	bc80      	pop	{r7}
    4a26:	4770      	bx	lr

00004a28 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4a28:	b480      	push	{r7}
    4a2a:	b085      	sub	sp, #20
    4a2c:	af00      	add	r7, sp, #0
    4a2e:	60f8      	str	r0, [r7, #12]
    4a30:	460b      	mov	r3, r1
    4a32:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
    4a34:	7afb      	ldrb	r3, [r7, #11]
    4a36:	2b00      	cmp	r3, #0
    4a38:	d008      	beq.n	4a4c <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    4a3a:	68fb      	ldr	r3, [r7, #12]
    4a3c:	899b      	ldrh	r3, [r3, #12]
    4a3e:	b29b      	uxth	r3, r3
    4a40:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    4a44:	b29b      	uxth	r3, r3
    4a46:	68fa      	ldr	r2, [r7, #12]
    4a48:	8193      	strh	r3, [r2, #12]
    4a4a:	e00d      	b.n	4a68 <USART_ReceiverWakeUpCmd+0x40>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    4a4c:	68fb      	ldr	r3, [r7, #12]
    4a4e:	899b      	ldrh	r3, [r3, #12]
    4a50:	b29b      	uxth	r3, r3
    4a52:	607b      	str	r3, [r7, #4]
    4a54:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    4a58:	6879      	ldr	r1, [r7, #4]
    4a5a:	ea01 0303 	and.w	r3, r1, r3
    4a5e:	607b      	str	r3, [r7, #4]
    4a60:	68fa      	ldr	r2, [r7, #12]
    4a62:	6879      	ldr	r1, [r7, #4]
    4a64:	460b      	mov	r3, r1
    4a66:	8193      	strh	r3, [r2, #12]
  }
}
    4a68:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4a6c:	46bd      	mov	sp, r7
    4a6e:	bc80      	pop	{r7}
    4a70:	4770      	bx	lr
    4a72:	46c0      	nop			(mov r8, r8)

00004a74 <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    4a74:	b480      	push	{r7}
    4a76:	b085      	sub	sp, #20
    4a78:	af00      	add	r7, sp, #0
    4a7a:	60f8      	str	r0, [r7, #12]
    4a7c:	460b      	mov	r3, r1
    4a7e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
    4a80:	68fb      	ldr	r3, [r7, #12]
    4a82:	8a1b      	ldrh	r3, [r3, #16]
    4a84:	b29b      	uxth	r3, r3
    4a86:	607b      	str	r3, [r7, #4]
    4a88:	f64f 73df 	movw	r3, #65503	; 0xffdf
    4a8c:	6879      	ldr	r1, [r7, #4]
    4a8e:	ea01 0303 	and.w	r3, r1, r3
    4a92:	607b      	str	r3, [r7, #4]
    4a94:	68fa      	ldr	r2, [r7, #12]
    4a96:	6879      	ldr	r1, [r7, #4]
    4a98:	460b      	mov	r3, r1
    4a9a:	8213      	strh	r3, [r2, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
    4a9c:	68fb      	ldr	r3, [r7, #12]
    4a9e:	8a1b      	ldrh	r3, [r3, #16]
    4aa0:	b29a      	uxth	r2, r3
    4aa2:	897b      	ldrh	r3, [r7, #10]
    4aa4:	ea42 0303 	orr.w	r3, r2, r3
    4aa8:	b29b      	uxth	r3, r3
    4aaa:	68fa      	ldr	r2, [r7, #12]
    4aac:	8213      	strh	r3, [r2, #16]
}
    4aae:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4ab2:	46bd      	mov	sp, r7
    4ab4:	bc80      	pop	{r7}
    4ab6:	4770      	bx	lr

00004ab8 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4ab8:	b480      	push	{r7}
    4aba:	b085      	sub	sp, #20
    4abc:	af00      	add	r7, sp, #0
    4abe:	60f8      	str	r0, [r7, #12]
    4ac0:	460b      	mov	r3, r1
    4ac2:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4ac4:	7afb      	ldrb	r3, [r7, #11]
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	d008      	beq.n	4adc <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    4aca:	68fb      	ldr	r3, [r7, #12]
    4acc:	8a1b      	ldrh	r3, [r3, #16]
    4ace:	b29b      	uxth	r3, r3
    4ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    4ad4:	b29b      	uxth	r3, r3
    4ad6:	68fa      	ldr	r2, [r7, #12]
    4ad8:	8213      	strh	r3, [r2, #16]
    4ada:	e00d      	b.n	4af8 <USART_LINCmd+0x40>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    4adc:	68fb      	ldr	r3, [r7, #12]
    4ade:	8a1b      	ldrh	r3, [r3, #16]
    4ae0:	b29b      	uxth	r3, r3
    4ae2:	607b      	str	r3, [r7, #4]
    4ae4:	f64b 73ff 	movw	r3, #49151	; 0xbfff
    4ae8:	6879      	ldr	r1, [r7, #4]
    4aea:	ea01 0303 	and.w	r3, r1, r3
    4aee:	607b      	str	r3, [r7, #4]
    4af0:	68fa      	ldr	r2, [r7, #12]
    4af2:	6879      	ldr	r1, [r7, #4]
    4af4:	460b      	mov	r3, r1
    4af6:	8213      	strh	r3, [r2, #16]
  }
}
    4af8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4afc:	46bd      	mov	sp, r7
    4afe:	bc80      	pop	{r7}
    4b00:	4770      	bx	lr
    4b02:	46c0      	nop			(mov r8, r8)

00004b04 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    4b04:	b480      	push	{r7}
    4b06:	b085      	sub	sp, #20
    4b08:	af00      	add	r7, sp, #0
    4b0a:	60f8      	str	r0, [r7, #12]
    4b0c:	460b      	mov	r3, r1
    4b0e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    4b10:	8979      	ldrh	r1, [r7, #10]
    4b12:	6079      	str	r1, [r7, #4]
    4b14:	687a      	ldr	r2, [r7, #4]
    4b16:	ea4f 53c2 	mov.w	r3, r2, lsl #23
    4b1a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    4b1e:	607b      	str	r3, [r7, #4]
    4b20:	68fa      	ldr	r2, [r7, #12]
    4b22:	6879      	ldr	r1, [r7, #4]
    4b24:	460b      	mov	r3, r1
    4b26:	8093      	strh	r3, [r2, #4]
}
    4b28:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4b2c:	46bd      	mov	sp, r7
    4b2e:	bc80      	pop	{r7}
    4b30:	4770      	bx	lr
    4b32:	46c0      	nop			(mov r8, r8)

00004b34 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    4b34:	b480      	push	{r7}
    4b36:	b083      	sub	sp, #12
    4b38:	af00      	add	r7, sp, #0
    4b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    4b3c:	687b      	ldr	r3, [r7, #4]
    4b3e:	889b      	ldrh	r3, [r3, #4]
    4b40:	b29b      	uxth	r3, r3
    4b42:	603b      	str	r3, [r7, #0]
    4b44:	683a      	ldr	r2, [r7, #0]
    4b46:	ea4f 53c2 	mov.w	r3, r2, lsl #23
    4b4a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    4b4e:	603b      	str	r3, [r7, #0]
    4b50:	683b      	ldr	r3, [r7, #0]
}
    4b52:	4618      	mov	r0, r3
    4b54:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4b58:	46bd      	mov	sp, r7
    4b5a:	bc80      	pop	{r7}
    4b5c:	4770      	bx	lr
    4b5e:	46c0      	nop			(mov r8, r8)

00004b60 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    4b60:	b480      	push	{r7}
    4b62:	b083      	sub	sp, #12
    4b64:	af00      	add	r7, sp, #0
    4b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    4b68:	687b      	ldr	r3, [r7, #4]
    4b6a:	899b      	ldrh	r3, [r3, #12]
    4b6c:	b29b      	uxth	r3, r3
    4b6e:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    4b72:	b29b      	uxth	r3, r3
    4b74:	687a      	ldr	r2, [r7, #4]
    4b76:	8193      	strh	r3, [r2, #12]
}
    4b78:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4b7c:	46bd      	mov	sp, r7
    4b7e:	bc80      	pop	{r7}
    4b80:	4770      	bx	lr
    4b82:	46c0      	nop			(mov r8, r8)

00004b84 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
    4b84:	b480      	push	{r7}
    4b86:	b083      	sub	sp, #12
    4b88:	af00      	add	r7, sp, #0
    4b8a:	6078      	str	r0, [r7, #4]
    4b8c:	460b      	mov	r3, r1
    4b8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    4b90:	687b      	ldr	r3, [r7, #4]
    4b92:	8b1b      	ldrh	r3, [r3, #24]
    4b94:	b29b      	uxth	r3, r3
    4b96:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    4b9a:	687a      	ldr	r2, [r7, #4]
    4b9c:	8313      	strh	r3, [r2, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    4b9e:	687b      	ldr	r3, [r7, #4]
    4ba0:	8b1b      	ldrh	r3, [r3, #24]
    4ba2:	b29a      	uxth	r2, r3
    4ba4:	78fb      	ldrb	r3, [r7, #3]
    4ba6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4baa:	b29b      	uxth	r3, r3
    4bac:	ea42 0303 	orr.w	r3, r2, r3
    4bb0:	b29b      	uxth	r3, r3
    4bb2:	687a      	ldr	r2, [r7, #4]
    4bb4:	8313      	strh	r3, [r2, #24]
}
    4bb6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4bba:	46bd      	mov	sp, r7
    4bbc:	bc80      	pop	{r7}
    4bbe:	4770      	bx	lr

00004bc0 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
    4bc0:	b480      	push	{r7}
    4bc2:	b083      	sub	sp, #12
    4bc4:	af00      	add	r7, sp, #0
    4bc6:	6078      	str	r0, [r7, #4]
    4bc8:	460b      	mov	r3, r1
    4bca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	8b1b      	ldrh	r3, [r3, #24]
    4bd0:	b29b      	uxth	r3, r3
    4bd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    4bd6:	687a      	ldr	r2, [r7, #4]
    4bd8:	8313      	strh	r3, [r2, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    4bda:	687b      	ldr	r3, [r7, #4]
    4bdc:	8b1b      	ldrh	r3, [r3, #24]
    4bde:	b29a      	uxth	r2, r3
    4be0:	78fb      	ldrb	r3, [r7, #3]
    4be2:	ea42 0303 	orr.w	r3, r2, r3
    4be6:	b29b      	uxth	r3, r3
    4be8:	687a      	ldr	r2, [r7, #4]
    4bea:	8313      	strh	r3, [r2, #24]
}
    4bec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4bf0:	46bd      	mov	sp, r7
    4bf2:	bc80      	pop	{r7}
    4bf4:	4770      	bx	lr
    4bf6:	46c0      	nop			(mov r8, r8)

00004bf8 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4bf8:	b480      	push	{r7}
    4bfa:	b085      	sub	sp, #20
    4bfc:	af00      	add	r7, sp, #0
    4bfe:	60f8      	str	r0, [r7, #12]
    4c00:	460b      	mov	r3, r1
    4c02:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4c04:	7afb      	ldrb	r3, [r7, #11]
    4c06:	2b00      	cmp	r3, #0
    4c08:	d008      	beq.n	4c1c <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    4c0a:	68fb      	ldr	r3, [r7, #12]
    4c0c:	8a9b      	ldrh	r3, [r3, #20]
    4c0e:	b29b      	uxth	r3, r3
    4c10:	f043 0320 	orr.w	r3, r3, #32	; 0x20
    4c14:	b29b      	uxth	r3, r3
    4c16:	68fa      	ldr	r2, [r7, #12]
    4c18:	8293      	strh	r3, [r2, #20]
    4c1a:	e00d      	b.n	4c38 <USART_SmartCardCmd+0x40>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    4c1c:	68fb      	ldr	r3, [r7, #12]
    4c1e:	8a9b      	ldrh	r3, [r3, #20]
    4c20:	b29b      	uxth	r3, r3
    4c22:	607b      	str	r3, [r7, #4]
    4c24:	f64f 73df 	movw	r3, #65503	; 0xffdf
    4c28:	6879      	ldr	r1, [r7, #4]
    4c2a:	ea01 0303 	and.w	r3, r1, r3
    4c2e:	607b      	str	r3, [r7, #4]
    4c30:	68fa      	ldr	r2, [r7, #12]
    4c32:	6879      	ldr	r1, [r7, #4]
    4c34:	460b      	mov	r3, r1
    4c36:	8293      	strh	r3, [r2, #20]
  }
}
    4c38:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4c3c:	46bd      	mov	sp, r7
    4c3e:	bc80      	pop	{r7}
    4c40:	4770      	bx	lr
    4c42:	46c0      	nop			(mov r8, r8)

00004c44 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4c44:	b480      	push	{r7}
    4c46:	b085      	sub	sp, #20
    4c48:	af00      	add	r7, sp, #0
    4c4a:	60f8      	str	r0, [r7, #12]
    4c4c:	460b      	mov	r3, r1
    4c4e:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4c50:	7afb      	ldrb	r3, [r7, #11]
    4c52:	2b00      	cmp	r3, #0
    4c54:	d008      	beq.n	4c68 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    4c56:	68fb      	ldr	r3, [r7, #12]
    4c58:	8a9b      	ldrh	r3, [r3, #20]
    4c5a:	b29b      	uxth	r3, r3
    4c5c:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    4c60:	b29b      	uxth	r3, r3
    4c62:	68fa      	ldr	r2, [r7, #12]
    4c64:	8293      	strh	r3, [r2, #20]
    4c66:	e00d      	b.n	4c84 <USART_SmartCardNACKCmd+0x40>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    4c68:	68fb      	ldr	r3, [r7, #12]
    4c6a:	8a9b      	ldrh	r3, [r3, #20]
    4c6c:	b29b      	uxth	r3, r3
    4c6e:	607b      	str	r3, [r7, #4]
    4c70:	f64f 73ef 	movw	r3, #65519	; 0xffef
    4c74:	6879      	ldr	r1, [r7, #4]
    4c76:	ea01 0303 	and.w	r3, r1, r3
    4c7a:	607b      	str	r3, [r7, #4]
    4c7c:	68fa      	ldr	r2, [r7, #12]
    4c7e:	6879      	ldr	r1, [r7, #4]
    4c80:	460b      	mov	r3, r1
    4c82:	8293      	strh	r3, [r2, #20]
  }
}
    4c84:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4c88:	46bd      	mov	sp, r7
    4c8a:	bc80      	pop	{r7}
    4c8c:	4770      	bx	lr
    4c8e:	46c0      	nop			(mov r8, r8)

00004c90 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4c90:	b480      	push	{r7}
    4c92:	b085      	sub	sp, #20
    4c94:	af00      	add	r7, sp, #0
    4c96:	60f8      	str	r0, [r7, #12]
    4c98:	460b      	mov	r3, r1
    4c9a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4c9c:	7afb      	ldrb	r3, [r7, #11]
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	d008      	beq.n	4cb4 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    4ca2:	68fb      	ldr	r3, [r7, #12]
    4ca4:	8a9b      	ldrh	r3, [r3, #20]
    4ca6:	b29b      	uxth	r3, r3
    4ca8:	f043 0308 	orr.w	r3, r3, #8	; 0x8
    4cac:	b29b      	uxth	r3, r3
    4cae:	68fa      	ldr	r2, [r7, #12]
    4cb0:	8293      	strh	r3, [r2, #20]
    4cb2:	e00d      	b.n	4cd0 <USART_HalfDuplexCmd+0x40>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    4cb4:	68fb      	ldr	r3, [r7, #12]
    4cb6:	8a9b      	ldrh	r3, [r3, #20]
    4cb8:	b29b      	uxth	r3, r3
    4cba:	607b      	str	r3, [r7, #4]
    4cbc:	f64f 73f7 	movw	r3, #65527	; 0xfff7
    4cc0:	6879      	ldr	r1, [r7, #4]
    4cc2:	ea01 0303 	and.w	r3, r1, r3
    4cc6:	607b      	str	r3, [r7, #4]
    4cc8:	68fa      	ldr	r2, [r7, #12]
    4cca:	6879      	ldr	r1, [r7, #4]
    4ccc:	460b      	mov	r3, r1
    4cce:	8293      	strh	r3, [r2, #20]
  }
}
    4cd0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4cd4:	46bd      	mov	sp, r7
    4cd6:	bc80      	pop	{r7}
    4cd8:	4770      	bx	lr
    4cda:	46c0      	nop			(mov r8, r8)

00004cdc <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    4cdc:	b480      	push	{r7}
    4cde:	b085      	sub	sp, #20
    4ce0:	af00      	add	r7, sp, #0
    4ce2:	60f8      	str	r0, [r7, #12]
    4ce4:	460b      	mov	r3, r1
    4ce6:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
    4ce8:	68fb      	ldr	r3, [r7, #12]
    4cea:	8a9b      	ldrh	r3, [r3, #20]
    4cec:	b29b      	uxth	r3, r3
    4cee:	607b      	str	r3, [r7, #4]
    4cf0:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    4cf4:	6879      	ldr	r1, [r7, #4]
    4cf6:	ea01 0303 	and.w	r3, r1, r3
    4cfa:	607b      	str	r3, [r7, #4]
    4cfc:	68fa      	ldr	r2, [r7, #12]
    4cfe:	6879      	ldr	r1, [r7, #4]
    4d00:	460b      	mov	r3, r1
    4d02:	8293      	strh	r3, [r2, #20]
  USARTx->CR3 |= USART_IrDAMode;
    4d04:	68fb      	ldr	r3, [r7, #12]
    4d06:	8a9b      	ldrh	r3, [r3, #20]
    4d08:	b29a      	uxth	r2, r3
    4d0a:	897b      	ldrh	r3, [r7, #10]
    4d0c:	ea42 0303 	orr.w	r3, r2, r3
    4d10:	b29b      	uxth	r3, r3
    4d12:	68fa      	ldr	r2, [r7, #12]
    4d14:	8293      	strh	r3, [r2, #20]
}
    4d16:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4d1a:	46bd      	mov	sp, r7
    4d1c:	bc80      	pop	{r7}
    4d1e:	4770      	bx	lr

00004d20 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4d20:	b480      	push	{r7}
    4d22:	b085      	sub	sp, #20
    4d24:	af00      	add	r7, sp, #0
    4d26:	60f8      	str	r0, [r7, #12]
    4d28:	460b      	mov	r3, r1
    4d2a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
    4d2c:	7afb      	ldrb	r3, [r7, #11]
    4d2e:	2b00      	cmp	r3, #0
    4d30:	d008      	beq.n	4d44 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    4d32:	68fb      	ldr	r3, [r7, #12]
    4d34:	8a9b      	ldrh	r3, [r3, #20]
    4d36:	b29b      	uxth	r3, r3
    4d38:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    4d3c:	b29b      	uxth	r3, r3
    4d3e:	68fa      	ldr	r2, [r7, #12]
    4d40:	8293      	strh	r3, [r2, #20]
    4d42:	e00d      	b.n	4d60 <USART_IrDACmd+0x40>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    4d44:	68fb      	ldr	r3, [r7, #12]
    4d46:	8a9b      	ldrh	r3, [r3, #20]
    4d48:	b29b      	uxth	r3, r3
    4d4a:	607b      	str	r3, [r7, #4]
    4d4c:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    4d50:	6879      	ldr	r1, [r7, #4]
    4d52:	ea01 0303 	and.w	r3, r1, r3
    4d56:	607b      	str	r3, [r7, #4]
    4d58:	68fa      	ldr	r2, [r7, #12]
    4d5a:	6879      	ldr	r1, [r7, #4]
    4d5c:	460b      	mov	r3, r1
    4d5e:	8293      	strh	r3, [r2, #20]
  }
}
    4d60:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4d64:	46bd      	mov	sp, r7
    4d66:	bc80      	pop	{r7}
    4d68:	4770      	bx	lr
    4d6a:	46c0      	nop			(mov r8, r8)

00004d6c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    4d6c:	b480      	push	{r7}
    4d6e:	b085      	sub	sp, #20
    4d70:	af00      	add	r7, sp, #0
    4d72:	6078      	str	r0, [r7, #4]
    4d74:	460b      	mov	r3, r1
    4d76:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    4d78:	f04f 0300 	mov.w	r3, #0	; 0x0
    4d7c:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    4d7e:	687b      	ldr	r3, [r7, #4]
    4d80:	881b      	ldrh	r3, [r3, #0]
    4d82:	b29a      	uxth	r2, r3
    4d84:	887b      	ldrh	r3, [r7, #2]
    4d86:	ea02 0303 	and.w	r3, r2, r3
    4d8a:	b29b      	uxth	r3, r3
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d003      	beq.n	4d98 <USART_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
    4d90:	f04f 0301 	mov.w	r3, #1	; 0x1
    4d94:	73fb      	strb	r3, [r7, #15]
    4d96:	e002      	b.n	4d9e <USART_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
    4d98:	f04f 0300 	mov.w	r3, #0	; 0x0
    4d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    4d9e:	7bfb      	ldrb	r3, [r7, #15]
}
    4da0:	4618      	mov	r0, r3
    4da2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4da6:	46bd      	mov	sp, r7
    4da8:	bc80      	pop	{r7}
    4daa:	4770      	bx	lr

00004dac <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    4dac:	b480      	push	{r7}
    4dae:	b083      	sub	sp, #12
    4db0:	af00      	add	r7, sp, #0
    4db2:	6078      	str	r0, [r7, #4]
    4db4:	460b      	mov	r3, r1
    4db6:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
    4db8:	887b      	ldrh	r3, [r7, #2]
    4dba:	ea6f 0303 	mvn.w	r3, r3
    4dbe:	b29b      	uxth	r3, r3
    4dc0:	687a      	ldr	r2, [r7, #4]
    4dc2:	8013      	strh	r3, [r2, #0]
}
    4dc4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4dc8:	46bd      	mov	sp, r7
    4dca:	bc80      	pop	{r7}
    4dcc:	4770      	bx	lr
    4dce:	46c0      	nop			(mov r8, r8)

00004dd0 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    4dd0:	b480      	push	{r7}
    4dd2:	b087      	sub	sp, #28
    4dd4:	af00      	add	r7, sp, #0
    4dd6:	6078      	str	r0, [r7, #4]
    4dd8:	460b      	mov	r3, r1
    4dda:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    4ddc:	f04f 0300 	mov.w	r3, #0	; 0x0
    4de0:	60bb      	str	r3, [r7, #8]
    4de2:	f04f 0300 	mov.w	r3, #0	; 0x0
    4de6:	60fb      	str	r3, [r7, #12]
    4de8:	f04f 0300 	mov.w	r3, #0	; 0x0
    4dec:	613b      	str	r3, [r7, #16]
  ITStatus bitstatus = RESET;
    4dee:	f04f 0300 	mov.w	r3, #0	; 0x0
    4df2:	75fb      	strb	r3, [r7, #23]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    4df4:	887b      	ldrh	r3, [r7, #2]
    4df6:	b2db      	uxtb	r3, r3
    4df8:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4dfc:	b2db      	uxtb	r3, r3
    4dfe:	613b      	str	r3, [r7, #16]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    4e00:	887b      	ldrh	r3, [r7, #2]
    4e02:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    4e06:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;
    4e08:	68fa      	ldr	r2, [r7, #12]
    4e0a:	f04f 0301 	mov.w	r3, #1	; 0x1
    4e0e:	fa03 f302 	lsl.w	r3, r3, r2
    4e12:	60fb      	str	r3, [r7, #12]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
    4e14:	693b      	ldr	r3, [r7, #16]
    4e16:	2b01      	cmp	r3, #1
    4e18:	d108      	bne.n	4e2c <USART_GetITStatus+0x5c>
  {
    itmask &= USARTx->CR1;
    4e1a:	687b      	ldr	r3, [r7, #4]
    4e1c:	899b      	ldrh	r3, [r3, #12]
    4e1e:	b29b      	uxth	r3, r3
    4e20:	461a      	mov	r2, r3
    4e22:	68fb      	ldr	r3, [r7, #12]
    4e24:	ea03 0302 	and.w	r3, r3, r2
    4e28:	60fb      	str	r3, [r7, #12]
    4e2a:	e013      	b.n	4e54 <USART_GetITStatus+0x84>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    4e2c:	693b      	ldr	r3, [r7, #16]
    4e2e:	2b02      	cmp	r3, #2
    4e30:	d108      	bne.n	4e44 <USART_GetITStatus+0x74>
  {
    itmask &= USARTx->CR2;
    4e32:	687b      	ldr	r3, [r7, #4]
    4e34:	8a1b      	ldrh	r3, [r3, #16]
    4e36:	b29b      	uxth	r3, r3
    4e38:	461a      	mov	r2, r3
    4e3a:	68fb      	ldr	r3, [r7, #12]
    4e3c:	ea03 0302 	and.w	r3, r3, r2
    4e40:	60fb      	str	r3, [r7, #12]
    4e42:	e007      	b.n	4e54 <USART_GetITStatus+0x84>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    4e44:	687b      	ldr	r3, [r7, #4]
    4e46:	8a9b      	ldrh	r3, [r3, #20]
    4e48:	b29b      	uxth	r3, r3
    4e4a:	461a      	mov	r2, r3
    4e4c:	68fb      	ldr	r3, [r7, #12]
    4e4e:	ea03 0302 	and.w	r3, r3, r2
    4e52:	60fb      	str	r3, [r7, #12]
  }
  
  bitpos = USART_IT >> 0x08;
    4e54:	887b      	ldrh	r3, [r7, #2]
    4e56:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4e5a:	b29b      	uxth	r3, r3
    4e5c:	60bb      	str	r3, [r7, #8]
  bitpos = (uint32_t)0x01 << bitpos;
    4e5e:	68ba      	ldr	r2, [r7, #8]
    4e60:	f04f 0301 	mov.w	r3, #1	; 0x1
    4e64:	fa03 f302 	lsl.w	r3, r3, r2
    4e68:	60bb      	str	r3, [r7, #8]
  bitpos &= USARTx->SR;
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	881b      	ldrh	r3, [r3, #0]
    4e6e:	b29b      	uxth	r3, r3
    4e70:	461a      	mov	r2, r3
    4e72:	68bb      	ldr	r3, [r7, #8]
    4e74:	ea03 0302 	and.w	r3, r3, r2
    4e78:	60bb      	str	r3, [r7, #8]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    4e7a:	68fb      	ldr	r3, [r7, #12]
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	d006      	beq.n	4e8e <USART_GetITStatus+0xbe>
    4e80:	68bb      	ldr	r3, [r7, #8]
    4e82:	2b00      	cmp	r3, #0
    4e84:	d003      	beq.n	4e8e <USART_GetITStatus+0xbe>
  {
    bitstatus = SET;
    4e86:	f04f 0301 	mov.w	r3, #1	; 0x1
    4e8a:	75fb      	strb	r3, [r7, #23]
    4e8c:	e002      	b.n	4e94 <USART_GetITStatus+0xc4>
  }
  else
  {
    bitstatus = RESET;
    4e8e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4e92:	75fb      	strb	r3, [r7, #23]
  }
  
  return bitstatus;  
    4e94:	7dfb      	ldrb	r3, [r7, #23]
}
    4e96:	4618      	mov	r0, r3
    4e98:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    4e9c:	46bd      	mov	sp, r7
    4e9e:	bc80      	pop	{r7}
    4ea0:	4770      	bx	lr
    4ea2:	46c0      	nop			(mov r8, r8)

00004ea4 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    4ea4:	b480      	push	{r7}
    4ea6:	b085      	sub	sp, #20
    4ea8:	af00      	add	r7, sp, #0
    4eaa:	6078      	str	r0, [r7, #4]
    4eac:	460b      	mov	r3, r1
    4eae:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    4eb0:	f04f 0300 	mov.w	r3, #0	; 0x0
    4eb4:	81bb      	strh	r3, [r7, #12]
    4eb6:	f04f 0300 	mov.w	r3, #0	; 0x0
    4eba:	81fb      	strh	r3, [r7, #14]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
    4ebc:	887b      	ldrh	r3, [r7, #2]
    4ebe:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4ec2:	81bb      	strh	r3, [r7, #12]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    4ec4:	89ba      	ldrh	r2, [r7, #12]
    4ec6:	f04f 0301 	mov.w	r3, #1	; 0x1
    4eca:	fa03 f302 	lsl.w	r3, r3, r2
    4ece:	81fb      	strh	r3, [r7, #14]
  USARTx->SR = (uint16_t)~itmask;
    4ed0:	89fb      	ldrh	r3, [r7, #14]
    4ed2:	ea6f 0303 	mvn.w	r3, r3
    4ed6:	b29b      	uxth	r3, r3
    4ed8:	687a      	ldr	r2, [r7, #4]
    4eda:	8013      	strh	r3, [r2, #0]
}
    4edc:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4ee0:	46bd      	mov	sp, r7
    4ee2:	bc80      	pop	{r7}
    4ee4:	4770      	bx	lr
    4ee6:	46c0      	nop			(mov r8, r8)

00004ee8 <_ZN9AscenseurD2Ev>:
    vis->tourne(0.0f);
    m_ascenseur = this;
}

// destructeur
Ascenseur::~Ascenseur()
    4ee8:	b480      	push	{r7}
    4eea:	b083      	sub	sp, #12
    4eec:	af00      	add	r7, sp, #0
    4eee:	6078      	str	r0, [r7, #4]
{
    if (m_ascenseur == this)
    4ef0:	4b07      	ldr	r3, [pc, #28]	(4f10 <_ZN9AscenseurD2Ev+0x28>)
    4ef2:	681a      	ldr	r2, [r3, #0]
    4ef4:	687b      	ldr	r3, [r7, #4]
    4ef6:	429a      	cmp	r2, r3
    4ef8:	d103      	bne.n	4f02 <_ZN9AscenseurD2Ev+0x1a>
        m_ascenseur = NULL;
    4efa:	4a05      	ldr	r2, [pc, #20]	(4f10 <_ZN9AscenseurD2Ev+0x28>)
    4efc:	f04f 0300 	mov.w	r3, #0	; 0x0
    4f00:	6013      	str	r3, [r2, #0]
}
    4f02:	687b      	ldr	r3, [r7, #4]
    4f04:	4618      	mov	r0, r3
    4f06:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f0a:	46bd      	mov	sp, r7
    4f0c:	bc80      	pop	{r7}
    4f0e:	4770      	bx	lr
    4f10:	20000548 	.word	0x20000548

00004f14 <_ZN9AscenseurD1Ev>:
    vis->tourne(0.0f);
    m_ascenseur = this;
}

// destructeur
Ascenseur::~Ascenseur()
    4f14:	b480      	push	{r7}
    4f16:	b083      	sub	sp, #12
    4f18:	af00      	add	r7, sp, #0
    4f1a:	6078      	str	r0, [r7, #4]
{
    if (m_ascenseur == this)
    4f1c:	4b07      	ldr	r3, [pc, #28]	(4f3c <_ZN9AscenseurD1Ev+0x28>)
    4f1e:	681a      	ldr	r2, [r3, #0]
    4f20:	687b      	ldr	r3, [r7, #4]
    4f22:	429a      	cmp	r2, r3
    4f24:	d103      	bne.n	4f2e <_ZN9AscenseurD1Ev+0x1a>
        m_ascenseur = NULL;
    4f26:	4a05      	ldr	r2, [pc, #20]	(4f3c <_ZN9AscenseurD1Ev+0x28>)
    4f28:	f04f 0300 	mov.w	r3, #0	; 0x0
    4f2c:	6013      	str	r3, [r2, #0]
}
    4f2e:	687b      	ldr	r3, [r7, #4]
    4f30:	4618      	mov	r0, r3
    4f32:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f36:	46bd      	mov	sp, r7
    4f38:	bc80      	pop	{r7}
    4f3a:	4770      	bx	lr
    4f3c:	20000548 	.word	0x20000548

00004f40 <_ZNK9Ascenseur5aFiniEv>:
        }
    }
}

// est ce que l'ascenseur a fini sa montée/descente
bool Ascenseur::aFini() const
    4f40:	b480      	push	{r7}
    4f42:	b083      	sub	sp, #12
    4f44:	af00      	add	r7, sp, #0
    4f46:	6078      	str	r0, [r7, #4]
{
    return !m_tourne;
    4f48:	687b      	ldr	r3, [r7, #4]
    4f4a:	781b      	ldrb	r3, [r3, #0]
    4f4c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    4f50:	b2db      	uxtb	r3, r3
}
    4f52:	4618      	mov	r0, r3
    4f54:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f58:	46bd      	mov	sp, r7
    4f5a:	bc80      	pop	{r7}
    4f5c:	4770      	bx	lr
    4f5e:	46c0      	nop			(mov r8, r8)

00004f60 <_ZNK9Ascenseur8vaEnHautEv>:

// est ce que l'ascenseur va/est en haut ?
bool Ascenseur::vaEnHaut() const
    4f60:	b480      	push	{r7}
    4f62:	b083      	sub	sp, #12
    4f64:	af00      	add	r7, sp, #0
    4f66:	6078      	str	r0, [r7, #4]
{
    return m_vaEnHaut;
    4f68:	687b      	ldr	r3, [r7, #4]
    4f6a:	785b      	ldrb	r3, [r3, #1]
}
    4f6c:	4618      	mov	r0, r3
    4f6e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f72:	46bd      	mov	sp, r7
    4f74:	bc80      	pop	{r7}
    4f76:	4770      	bx	lr

00004f78 <_ZNK9Ascenseur10toutEnHautEv>:

// est ce que les fdc sont activés ?
bool Ascenseur::toutEnHaut() const
    4f78:	b580      	push	{r7, lr}
    4f7a:	b086      	sub	sp, #24
    4f7c:	af00      	add	r7, sp, #0
    4f7e:	6078      	str	r0, [r7, #4]
{
    return m_fdcHaut->getValue().b;
    4f80:	687b      	ldr	r3, [r7, #4]
    4f82:	689b      	ldr	r3, [r3, #8]
    4f84:	681b      	ldr	r3, [r3, #0]
    4f86:	f103 0308 	add.w	r3, r3, #8	; 0x8
    4f8a:	f8d3 c000 	ldr.w	ip, [r3]
    4f8e:	687b      	ldr	r3, [r7, #4]
    4f90:	689a      	ldr	r2, [r3, #8]
    4f92:	f107 030c 	add.w	r3, r7, #12	; 0xc
    4f96:	4618      	mov	r0, r3
    4f98:	4611      	mov	r1, r2
    4f9a:	47e0      	blx	ip
    4f9c:	7d3b      	ldrb	r3, [r7, #20]
}
    4f9e:	4618      	mov	r0, r3
    4fa0:	f107 0718 	add.w	r7, r7, #24	; 0x18
    4fa4:	46bd      	mov	sp, r7
    4fa6:	bd80      	pop	{r7, pc}

00004fa8 <_ZNK9Ascenseur9toutEnBasEv>:

bool Ascenseur::toutEnBas() const
    4fa8:	b580      	push	{r7, lr}
    4faa:	b086      	sub	sp, #24
    4fac:	af00      	add	r7, sp, #0
    4fae:	6078      	str	r0, [r7, #4]
{
    return m_fdcBas->getValue().b;
    4fb0:	687b      	ldr	r3, [r7, #4]
    4fb2:	68db      	ldr	r3, [r3, #12]
    4fb4:	681b      	ldr	r3, [r3, #0]
    4fb6:	f103 0308 	add.w	r3, r3, #8	; 0x8
    4fba:	f8d3 c000 	ldr.w	ip, [r3]
    4fbe:	687b      	ldr	r3, [r7, #4]
    4fc0:	68da      	ldr	r2, [r3, #12]
    4fc2:	f107 030c 	add.w	r3, r7, #12	; 0xc
    4fc6:	4618      	mov	r0, r3
    4fc8:	4611      	mov	r1, r2
    4fca:	47e0      	blx	ip
    4fcc:	7d3b      	ldrb	r3, [r7, #20]
}
    4fce:	4618      	mov	r0, r3
    4fd0:	f107 0718 	add.w	r7, r7, #24	; 0x18
    4fd4:	46bd      	mov	sp, r7
    4fd6:	bd80      	pop	{r7, pc}

00004fd8 <_ZN9Ascenseur3getEv>:

// renvoit l'ascenseur
Ascenseur* Ascenseur::get()
    4fd8:	b480      	push	{r7}
    4fda:	af00      	add	r7, sp, #0
{
    return m_ascenseur;
    4fdc:	4b02      	ldr	r3, [pc, #8]	(4fe8 <_ZN9Ascenseur3getEv+0x10>)
    4fde:	681b      	ldr	r3, [r3, #0]
}
    4fe0:	4618      	mov	r0, r3
    4fe2:	46bd      	mov	sp, r7
    4fe4:	bc80      	pop	{r7}
    4fe6:	4770      	bx	lr
    4fe8:	20000548 	.word	0x20000548

00004fec <_ZN9Ascenseur6updateEv>:
        m_vis->tourne(-0.5f);
    }
}

// met à jour l'état de l'ascenseur pour l'arreter si il est arrivé à son but
void Ascenseur::update()
    4fec:	b580      	push	{r7, lr}
    4fee:	b082      	sub	sp, #8
    4ff0:	af00      	add	r7, sp, #0
    4ff2:	6078      	str	r0, [r7, #4]
{
    if (m_tourne)
    4ff4:	687b      	ldr	r3, [r7, #4]
    4ff6:	781b      	ldrb	r3, [r3, #0]
    4ff8:	2b00      	cmp	r3, #0
    4ffa:	d01b      	beq.n	5034 <_ZN9Ascenseur6updateEv+0x48>
    {
        if (m_vaEnHaut ? toutEnHaut() : toutEnBas())
    4ffc:	687b      	ldr	r3, [r7, #4]
    4ffe:	785b      	ldrb	r3, [r3, #1]
    5000:	2b00      	cmp	r3, #0
    5002:	d005      	beq.n	5010 <_ZN9Ascenseur6updateEv+0x24>
    5004:	6878      	ldr	r0, [r7, #4]
    5006:	f7ff ffb7 	bl	4f78 <_ZNK9Ascenseur10toutEnHautEv>
    500a:	4603      	mov	r3, r0
    500c:	603b      	str	r3, [r7, #0]
    500e:	e004      	b.n	501a <_ZN9Ascenseur6updateEv+0x2e>
    5010:	6878      	ldr	r0, [r7, #4]
    5012:	f7ff ffc9 	bl	4fa8 <_ZNK9Ascenseur9toutEnBasEv>
    5016:	4603      	mov	r3, r0
    5018:	603b      	str	r3, [r7, #0]
    501a:	683b      	ldr	r3, [r7, #0]
    501c:	2b00      	cmp	r3, #0
    501e:	d009      	beq.n	5034 <_ZN9Ascenseur6updateEv+0x48>
        {
            m_tourne = false;
    5020:	687a      	ldr	r2, [r7, #4]
    5022:	f04f 0300 	mov.w	r3, #0	; 0x0
    5026:	7013      	strb	r3, [r2, #0]
            m_vis->tourne(0.0f);
    5028:	687b      	ldr	r3, [r7, #4]
    502a:	685b      	ldr	r3, [r3, #4]
    502c:	4618      	mov	r0, r3
    502e:	4903      	ldr	r1, [pc, #12]	(503c <_ZN9Ascenseur6updateEv+0x50>)
    5030:	f007 fdc6 	bl	cbc0 <_ZN4Roue6tourneEf>
        }
    }
}
    5034:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5038:	46bd      	mov	sp, r7
    503a:	bd80      	pop	{r7, pc}
    503c:	00000000 	.word	0x00000000

00005040 <_ZN9Ascenseur9descendreEv>:
        m_vis->tourne(0.5f);
    }
}

// l'ascenseur descend tout en bas
void Ascenseur::descendre()
    5040:	b580      	push	{r7, lr}
    5042:	b082      	sub	sp, #8
    5044:	af00      	add	r7, sp, #0
    5046:	6078      	str	r0, [r7, #4]
{
    m_vaEnHaut = false;
    5048:	687a      	ldr	r2, [r7, #4]
    504a:	f04f 0300 	mov.w	r3, #0	; 0x0
    504e:	7053      	strb	r3, [r2, #1]

    if (!toutEnHaut())
    5050:	6878      	ldr	r0, [r7, #4]
    5052:	f7ff ff91 	bl	4f78 <_ZNK9Ascenseur10toutEnHautEv>
    5056:	4603      	mov	r3, r0
    5058:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    505c:	b2db      	uxtb	r3, r3
    505e:	2b00      	cmp	r3, #0
    5060:	d009      	beq.n	5076 <_ZN9Ascenseur9descendreEv+0x36>
    {
        m_tourne = true;
    5062:	687a      	ldr	r2, [r7, #4]
    5064:	f04f 0301 	mov.w	r3, #1	; 0x1
    5068:	7013      	strb	r3, [r2, #0]
        m_vis->tourne(-0.5f);
    506a:	687b      	ldr	r3, [r7, #4]
    506c:	685b      	ldr	r3, [r3, #4]
    506e:	4618      	mov	r0, r3
    5070:	4903      	ldr	r1, [pc, #12]	(5080 <_ZN9Ascenseur9descendreEv+0x40>)
    5072:	f007 fda5 	bl	cbc0 <_ZN4Roue6tourneEf>
    }
}
    5076:	f107 0708 	add.w	r7, r7, #8	; 0x8
    507a:	46bd      	mov	sp, r7
    507c:	bd80      	pop	{r7, pc}
    507e:	46c0      	nop			(mov r8, r8)
    5080:	bf000000 	.word	0xbf000000

00005084 <_ZN9Ascenseur6monterEv>:
    if (m_ascenseur == this)
        m_ascenseur = NULL;
}

// l'ascenseur monte tout en haut
void Ascenseur::monter()
    5084:	b580      	push	{r7, lr}
    5086:	b082      	sub	sp, #8
    5088:	af00      	add	r7, sp, #0
    508a:	6078      	str	r0, [r7, #4]
{
    m_vaEnHaut = true;
    508c:	687a      	ldr	r2, [r7, #4]
    508e:	f04f 0301 	mov.w	r3, #1	; 0x1
    5092:	7053      	strb	r3, [r2, #1]

    if (!toutEnHaut())
    5094:	6878      	ldr	r0, [r7, #4]
    5096:	f7ff ff6f 	bl	4f78 <_ZNK9Ascenseur10toutEnHautEv>
    509a:	4603      	mov	r3, r0
    509c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    50a0:	b2db      	uxtb	r3, r3
    50a2:	2b00      	cmp	r3, #0
    50a4:	d009      	beq.n	50ba <_ZN9Ascenseur6monterEv+0x36>
    {
        m_tourne = true;
    50a6:	687a      	ldr	r2, [r7, #4]
    50a8:	f04f 0301 	mov.w	r3, #1	; 0x1
    50ac:	7013      	strb	r3, [r2, #0]
        m_vis->tourne(0.5f);
    50ae:	687b      	ldr	r3, [r7, #4]
    50b0:	685b      	ldr	r3, [r3, #4]
    50b2:	4618      	mov	r0, r3
    50b4:	4903      	ldr	r1, [pc, #12]	(50c4 <_ZN9Ascenseur6monterEv+0x40>)
    50b6:	f007 fd83 	bl	cbc0 <_ZN4Roue6tourneEf>
    }
}
    50ba:	f107 0708 	add.w	r7, r7, #8	; 0x8
    50be:	46bd      	mov	sp, r7
    50c0:	bd80      	pop	{r7, pc}
    50c2:	46c0      	nop			(mov r8, r8)
    50c4:	3f000000 	.word	0x3f000000

000050c8 <_ZN9AscenseurC1EP4RoueP17LimitSwitchSensorS3_>:
#include "ascenseur.h"

Ascenseur* Ascenseur::m_ascenseur = NULL;

// Constructeur
Ascenseur::Ascenseur(Roue* vis, LimitSwitchSensor* fdcHaut, LimitSwitchSensor* fdcBas)
    50c8:	b580      	push	{r7, lr}
    50ca:	b084      	sub	sp, #16
    50cc:	af00      	add	r7, sp, #0
    50ce:	60f8      	str	r0, [r7, #12]
    50d0:	60b9      	str	r1, [r7, #8]
    50d2:	607a      	str	r2, [r7, #4]
    50d4:	603b      	str	r3, [r7, #0]
    : m_tourne(false), m_vaEnHaut(true), m_vis(vis), m_fdcHaut(fdcHaut), m_fdcBas(fdcBas)
    50d6:	68fa      	ldr	r2, [r7, #12]
    50d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    50dc:	7013      	strb	r3, [r2, #0]
    50de:	68fa      	ldr	r2, [r7, #12]
    50e0:	f04f 0301 	mov.w	r3, #1	; 0x1
    50e4:	7053      	strb	r3, [r2, #1]
    50e6:	68fa      	ldr	r2, [r7, #12]
    50e8:	68bb      	ldr	r3, [r7, #8]
    50ea:	6053      	str	r3, [r2, #4]
    50ec:	68fa      	ldr	r2, [r7, #12]
    50ee:	687b      	ldr	r3, [r7, #4]
    50f0:	6093      	str	r3, [r2, #8]
    50f2:	68fa      	ldr	r2, [r7, #12]
    50f4:	683b      	ldr	r3, [r7, #0]
    50f6:	60d3      	str	r3, [r2, #12]
{
    vis->tourne(0.0f);
    50f8:	68b8      	ldr	r0, [r7, #8]
    50fa:	4906      	ldr	r1, [pc, #24]	(5114 <_ZN9AscenseurC1EP4RoueP17LimitSwitchSensorS3_+0x4c>)
    50fc:	f007 fd60 	bl	cbc0 <_ZN4Roue6tourneEf>
    m_ascenseur = this;
    5100:	4a05      	ldr	r2, [pc, #20]	(5118 <_ZN9AscenseurC1EP4RoueP17LimitSwitchSensorS3_+0x50>)
    5102:	68fb      	ldr	r3, [r7, #12]
    5104:	6013      	str	r3, [r2, #0]
}
    5106:	68fb      	ldr	r3, [r7, #12]
    5108:	4618      	mov	r0, r3
    510a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    510e:	46bd      	mov	sp, r7
    5110:	bd80      	pop	{r7, pc}
    5112:	46c0      	nop			(mov r8, r8)
    5114:	00000000 	.word	0x00000000
    5118:	20000548 	.word	0x20000548

0000511c <_ZN9AscenseurC2EP4RoueP17LimitSwitchSensorS3_>:
#include "ascenseur.h"

Ascenseur* Ascenseur::m_ascenseur = NULL;

// Constructeur
Ascenseur::Ascenseur(Roue* vis, LimitSwitchSensor* fdcHaut, LimitSwitchSensor* fdcBas)
    511c:	b580      	push	{r7, lr}
    511e:	b084      	sub	sp, #16
    5120:	af00      	add	r7, sp, #0
    5122:	60f8      	str	r0, [r7, #12]
    5124:	60b9      	str	r1, [r7, #8]
    5126:	607a      	str	r2, [r7, #4]
    5128:	603b      	str	r3, [r7, #0]
    : m_tourne(false), m_vaEnHaut(true), m_vis(vis), m_fdcHaut(fdcHaut), m_fdcBas(fdcBas)
    512a:	68fa      	ldr	r2, [r7, #12]
    512c:	f04f 0300 	mov.w	r3, #0	; 0x0
    5130:	7013      	strb	r3, [r2, #0]
    5132:	68fa      	ldr	r2, [r7, #12]
    5134:	f04f 0301 	mov.w	r3, #1	; 0x1
    5138:	7053      	strb	r3, [r2, #1]
    513a:	68fa      	ldr	r2, [r7, #12]
    513c:	68bb      	ldr	r3, [r7, #8]
    513e:	6053      	str	r3, [r2, #4]
    5140:	68fa      	ldr	r2, [r7, #12]
    5142:	687b      	ldr	r3, [r7, #4]
    5144:	6093      	str	r3, [r2, #8]
    5146:	68fa      	ldr	r2, [r7, #12]
    5148:	683b      	ldr	r3, [r7, #0]
    514a:	60d3      	str	r3, [r2, #12]
{
    vis->tourne(0.0f);
    514c:	68b8      	ldr	r0, [r7, #8]
    514e:	4906      	ldr	r1, [pc, #24]	(5168 <_ZN9AscenseurC2EP4RoueP17LimitSwitchSensorS3_+0x4c>)
    5150:	f007 fd36 	bl	cbc0 <_ZN4Roue6tourneEf>
    m_ascenseur = this;
    5154:	4a05      	ldr	r2, [pc, #20]	(516c <_ZN9AscenseurC2EP4RoueP17LimitSwitchSensorS3_+0x50>)
    5156:	68fb      	ldr	r3, [r7, #12]
    5158:	6013      	str	r3, [r2, #0]
}
    515a:	68fb      	ldr	r3, [r7, #12]
    515c:	4618      	mov	r0, r3
    515e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5162:	46bd      	mov	sp, r7
    5164:	bd80      	pop	{r7, pc}
    5166:	46c0      	nop			(mov r8, r8)
    5168:	00000000 	.word	0x00000000
    516c:	20000548 	.word	0x20000548

00005170 <_ZN9BrasKrabi5frontEv>:
    void BrasKrabi::collapse()
    {
        servo->goToAngle(angleCollapsed);
    }

    void BrasKrabi::front()
    5170:	b580      	push	{r7, lr}
    5172:	b082      	sub	sp, #8
    5174:	af00      	add	r7, sp, #0
    5176:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleFront);
    5178:	687b      	ldr	r3, [r7, #4]
    517a:	681a      	ldr	r2, [r3, #0]
    517c:	687b      	ldr	r3, [r7, #4]
    517e:	68db      	ldr	r3, [r3, #12]
    5180:	4610      	mov	r0, r2
    5182:	4619      	mov	r1, r3
    5184:	f001 fe60 	bl	6e48 <_ZN5Servo9goToAngleEf>
    }
    5188:	f107 0708 	add.w	r7, r7, #8	; 0x8
    518c:	46bd      	mov	sp, r7
    518e:	bd80      	pop	{r7, pc}

00005190 <_ZN9BrasKrabi8collapseEv>:
    void BrasKrabi::expand()
    {
        servo->goToAngle(angleExpanded);
    }

    void BrasKrabi::collapse()
    5190:	b580      	push	{r7, lr}
    5192:	b082      	sub	sp, #8
    5194:	af00      	add	r7, sp, #0
    5196:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleCollapsed);
    5198:	687b      	ldr	r3, [r7, #4]
    519a:	681a      	ldr	r2, [r3, #0]
    519c:	687b      	ldr	r3, [r7, #4]
    519e:	685b      	ldr	r3, [r3, #4]
    51a0:	4610      	mov	r0, r2
    51a2:	4619      	mov	r1, r3
    51a4:	f001 fe50 	bl	6e48 <_ZN5Servo9goToAngleEf>
    }
    51a8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    51ac:	46bd      	mov	sp, r7
    51ae:	bd80      	pop	{r7, pc}

000051b0 <_ZN9BrasKrabi6expandEv>:
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    {
        this->servo = new Servo(timer, OCx, RC0degre, RC180degres);
    }

    void BrasKrabi::expand()
    51b0:	b580      	push	{r7, lr}
    51b2:	b082      	sub	sp, #8
    51b4:	af00      	add	r7, sp, #0
    51b6:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleExpanded);
    51b8:	687b      	ldr	r3, [r7, #4]
    51ba:	681a      	ldr	r2, [r3, #0]
    51bc:	687b      	ldr	r3, [r7, #4]
    51be:	689b      	ldr	r3, [r3, #8]
    51c0:	4610      	mov	r0, r2
    51c2:	4619      	mov	r1, r3
    51c4:	f001 fe40 	bl	6e48 <_ZN5Servo9goToAngleEf>
    }
    51c8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    51cc:	46bd      	mov	sp, r7
    51ce:	bd80      	pop	{r7, pc}

000051d0 <_ZN9BrasKrabiC1EP5Timerhfffff>:
#include "brasKrabi.h"

#ifdef ROBOTHW

    BrasKrabi::BrasKrabi(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    51d0:	b580      	push	{r7, lr}
    51d2:	b088      	sub	sp, #32
    51d4:	af02      	add	r7, sp, #8
    51d6:	6178      	str	r0, [r7, #20]
    51d8:	6139      	str	r1, [r7, #16]
    51da:	60bb      	str	r3, [r7, #8]
    51dc:	4613      	mov	r3, r2
    51de:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    51e0:	697a      	ldr	r2, [r7, #20]
    51e2:	6a7b      	ldr	r3, [r7, #36]
    51e4:	6053      	str	r3, [r2, #4]
    51e6:	697a      	ldr	r2, [r7, #20]
    51e8:	6abb      	ldr	r3, [r7, #40]
    51ea:	6093      	str	r3, [r2, #8]
    51ec:	697a      	ldr	r2, [r7, #20]
    51ee:	6afb      	ldr	r3, [r7, #44]
    51f0:	60d3      	str	r3, [r2, #12]
    {
        this->servo = new Servo(timer, OCx, RC0degre, RC180degres);
    51f2:	f04f 0014 	mov.w	r0, #20	; 0x14
    51f6:	f009 f81b 	bl	e230 <_Znwj>
    51fa:	4603      	mov	r3, r0
    51fc:	603b      	str	r3, [r7, #0]
    51fe:	683a      	ldr	r2, [r7, #0]
    5200:	2a00      	cmp	r2, #0
    5202:	d00a      	beq.n	521a <_ZN9BrasKrabiC1EP5Timerhfffff+0x4a>
    5204:	7bfa      	ldrb	r2, [r7, #15]
    5206:	6a3b      	ldr	r3, [r7, #32]
    5208:	9300      	str	r3, [sp, #0]
    520a:	6838      	ldr	r0, [r7, #0]
    520c:	6939      	ldr	r1, [r7, #16]
    520e:	68bb      	ldr	r3, [r7, #8]
    5210:	f001 fe8a 	bl	6f28 <_ZN5ServoC1EP5Timerhff>
    5214:	683b      	ldr	r3, [r7, #0]
    5216:	607b      	str	r3, [r7, #4]
    5218:	e001      	b.n	521e <_ZN9BrasKrabiC1EP5Timerhfffff+0x4e>
    521a:	683a      	ldr	r2, [r7, #0]
    521c:	607a      	str	r2, [r7, #4]
    521e:	697b      	ldr	r3, [r7, #20]
    5220:	687a      	ldr	r2, [r7, #4]
    5222:	601a      	str	r2, [r3, #0]
    }
    5224:	697b      	ldr	r3, [r7, #20]
    5226:	4618      	mov	r0, r3
    5228:	f107 0718 	add.w	r7, r7, #24	; 0x18
    522c:	46bd      	mov	sp, r7
    522e:	bd80      	pop	{r7, pc}

00005230 <_ZN9BrasKrabiC2EP5Timerhfffff>:
#include "brasKrabi.h"

#ifdef ROBOTHW

    BrasKrabi::BrasKrabi(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    5230:	b580      	push	{r7, lr}
    5232:	b088      	sub	sp, #32
    5234:	af02      	add	r7, sp, #8
    5236:	6178      	str	r0, [r7, #20]
    5238:	6139      	str	r1, [r7, #16]
    523a:	60bb      	str	r3, [r7, #8]
    523c:	4613      	mov	r3, r2
    523e:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    5240:	697a      	ldr	r2, [r7, #20]
    5242:	6a7b      	ldr	r3, [r7, #36]
    5244:	6053      	str	r3, [r2, #4]
    5246:	697a      	ldr	r2, [r7, #20]
    5248:	6abb      	ldr	r3, [r7, #40]
    524a:	6093      	str	r3, [r2, #8]
    524c:	697a      	ldr	r2, [r7, #20]
    524e:	6afb      	ldr	r3, [r7, #44]
    5250:	60d3      	str	r3, [r2, #12]
    {
        this->servo = new Servo(timer, OCx, RC0degre, RC180degres);
    5252:	f04f 0014 	mov.w	r0, #20	; 0x14
    5256:	f008 ffeb 	bl	e230 <_Znwj>
    525a:	4603      	mov	r3, r0
    525c:	603b      	str	r3, [r7, #0]
    525e:	683a      	ldr	r2, [r7, #0]
    5260:	2a00      	cmp	r2, #0
    5262:	d00a      	beq.n	527a <_ZN9BrasKrabiC2EP5Timerhfffff+0x4a>
    5264:	7bfa      	ldrb	r2, [r7, #15]
    5266:	6a3b      	ldr	r3, [r7, #32]
    5268:	9300      	str	r3, [sp, #0]
    526a:	6838      	ldr	r0, [r7, #0]
    526c:	6939      	ldr	r1, [r7, #16]
    526e:	68bb      	ldr	r3, [r7, #8]
    5270:	f001 fe5a 	bl	6f28 <_ZN5ServoC1EP5Timerhff>
    5274:	683b      	ldr	r3, [r7, #0]
    5276:	607b      	str	r3, [r7, #4]
    5278:	e001      	b.n	527e <_ZN9BrasKrabiC2EP5Timerhfffff+0x4e>
    527a:	683a      	ldr	r2, [r7, #0]
    527c:	607a      	str	r2, [r7, #4]
    527e:	697b      	ldr	r3, [r7, #20]
    5280:	687a      	ldr	r2, [r7, #4]
    5282:	601a      	str	r2, [r3, #0]
    }
    5284:	697b      	ldr	r3, [r7, #20]
    5286:	4618      	mov	r0, r3
    5288:	f107 0718 	add.w	r7, r7, #24	; 0x18
    528c:	46bd      	mov	sp, r7
    528e:	bd80      	pop	{r7, pc}

00005290 <_ZN12BrasLateraux5frontEv>:
    void BrasLateraux::collapse()
    {
        servo->goToAngle(angleCollapsed);
    }

    void BrasLateraux::front()
    5290:	b580      	push	{r7, lr}
    5292:	b082      	sub	sp, #8
    5294:	af00      	add	r7, sp, #0
    5296:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleFront);
    5298:	687b      	ldr	r3, [r7, #4]
    529a:	681a      	ldr	r2, [r3, #0]
    529c:	687b      	ldr	r3, [r7, #4]
    529e:	68db      	ldr	r3, [r3, #12]
    52a0:	4610      	mov	r0, r2
    52a2:	4619      	mov	r1, r3
    52a4:	f001 fdd0 	bl	6e48 <_ZN5Servo9goToAngleEf>
    }
    52a8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    52ac:	46bd      	mov	sp, r7
    52ae:	bd80      	pop	{r7, pc}

000052b0 <_ZN12BrasLateraux8collapseEv>:
    void BrasLateraux::expand()
    {
        servo->goToAngle(angleExpanded);
    }

    void BrasLateraux::collapse()
    52b0:	b580      	push	{r7, lr}
    52b2:	b082      	sub	sp, #8
    52b4:	af00      	add	r7, sp, #0
    52b6:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleCollapsed);
    52b8:	687b      	ldr	r3, [r7, #4]
    52ba:	681a      	ldr	r2, [r3, #0]
    52bc:	687b      	ldr	r3, [r7, #4]
    52be:	685b      	ldr	r3, [r3, #4]
    52c0:	4610      	mov	r0, r2
    52c2:	4619      	mov	r1, r3
    52c4:	f001 fdc0 	bl	6e48 <_ZN5Servo9goToAngleEf>
    }
    52c8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    52cc:	46bd      	mov	sp, r7
    52ce:	bd80      	pop	{r7, pc}

000052d0 <_ZN12BrasLateraux6expandEv>:
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    {
        servo = new Servo(timer, OCx, RC0degre, RC180degres);
    }

    void BrasLateraux::expand()
    52d0:	b580      	push	{r7, lr}
    52d2:	b082      	sub	sp, #8
    52d4:	af00      	add	r7, sp, #0
    52d6:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleExpanded);
    52d8:	687b      	ldr	r3, [r7, #4]
    52da:	681a      	ldr	r2, [r3, #0]
    52dc:	687b      	ldr	r3, [r7, #4]
    52de:	689b      	ldr	r3, [r3, #8]
    52e0:	4610      	mov	r0, r2
    52e2:	4619      	mov	r1, r3
    52e4:	f001 fdb0 	bl	6e48 <_ZN5Servo9goToAngleEf>
    }
    52e8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    52ec:	46bd      	mov	sp, r7
    52ee:	bd80      	pop	{r7, pc}

000052f0 <_ZN12BrasLaterauxC1EP5Timerhfffff>:
BrasLateraux* BrasLateraux::left = 0;
BrasLateraux* BrasLateraux::right = 0;

#ifdef ROBOTHW

    BrasLateraux::BrasLateraux(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    52f0:	b580      	push	{r7, lr}
    52f2:	b088      	sub	sp, #32
    52f4:	af02      	add	r7, sp, #8
    52f6:	6178      	str	r0, [r7, #20]
    52f8:	6139      	str	r1, [r7, #16]
    52fa:	60bb      	str	r3, [r7, #8]
    52fc:	4613      	mov	r3, r2
    52fe:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    5300:	697a      	ldr	r2, [r7, #20]
    5302:	6a7b      	ldr	r3, [r7, #36]
    5304:	6053      	str	r3, [r2, #4]
    5306:	697a      	ldr	r2, [r7, #20]
    5308:	6abb      	ldr	r3, [r7, #40]
    530a:	6093      	str	r3, [r2, #8]
    530c:	697a      	ldr	r2, [r7, #20]
    530e:	6afb      	ldr	r3, [r7, #44]
    5310:	60d3      	str	r3, [r2, #12]
    {
        servo = new Servo(timer, OCx, RC0degre, RC180degres);
    5312:	f04f 0014 	mov.w	r0, #20	; 0x14
    5316:	f008 ff8b 	bl	e230 <_Znwj>
    531a:	4603      	mov	r3, r0
    531c:	603b      	str	r3, [r7, #0]
    531e:	683a      	ldr	r2, [r7, #0]
    5320:	2a00      	cmp	r2, #0
    5322:	d00a      	beq.n	533a <_ZN12BrasLaterauxC1EP5Timerhfffff+0x4a>
    5324:	7bfa      	ldrb	r2, [r7, #15]
    5326:	6a3b      	ldr	r3, [r7, #32]
    5328:	9300      	str	r3, [sp, #0]
    532a:	6838      	ldr	r0, [r7, #0]
    532c:	6939      	ldr	r1, [r7, #16]
    532e:	68bb      	ldr	r3, [r7, #8]
    5330:	f001 fdfa 	bl	6f28 <_ZN5ServoC1EP5Timerhff>
    5334:	683b      	ldr	r3, [r7, #0]
    5336:	607b      	str	r3, [r7, #4]
    5338:	e001      	b.n	533e <_ZN12BrasLaterauxC1EP5Timerhfffff+0x4e>
    533a:	683a      	ldr	r2, [r7, #0]
    533c:	607a      	str	r2, [r7, #4]
    533e:	697b      	ldr	r3, [r7, #20]
    5340:	687a      	ldr	r2, [r7, #4]
    5342:	601a      	str	r2, [r3, #0]
    }
    5344:	697b      	ldr	r3, [r7, #20]
    5346:	4618      	mov	r0, r3
    5348:	f107 0718 	add.w	r7, r7, #24	; 0x18
    534c:	46bd      	mov	sp, r7
    534e:	bd80      	pop	{r7, pc}

00005350 <_ZN12BrasLateraux16initBrasLaterauxEv>:
    void BrasLateraux::front()
    {
        servo->goToAngle(angleFront);
    }

    void BrasLateraux::initBrasLateraux()
    5350:	b580      	push	{r7, lr}
    5352:	b08c      	sub	sp, #48
    5354:	af04      	add	r7, sp, #16
            TIM_CtrlPWMOutputs(TIM3, ENABLE);

            left = new BrasLateraux(timer, 1, 0.01f, 0.11f, 87.f, 51.f, 15.f);
            right = new BrasLateraux(timer, 3, 0.01f, 0.11f, 0.f, 40.f, 77.f);
        #else // Krabi - STM32 H107
            Timer* timer = new Timer(TIM1, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    5356:	f04f 000c 	mov.w	r0, #12	; 0xc
    535a:	f008 ff69 	bl	e230 <_Znwj>
    535e:	4603      	mov	r3, r0
    5360:	603b      	str	r3, [r7, #0]
    5362:	683a      	ldr	r2, [r7, #0]
    5364:	2a00      	cmp	r2, #0
    5366:	d00d      	beq.n	5384 <_ZN12BrasLateraux16initBrasLaterauxEv+0x34>
    5368:	f04f 0300 	mov.w	r3, #0	; 0x0
    536c:	9300      	str	r3, [sp, #0]
    536e:	6838      	ldr	r0, [r7, #0]
    5370:	4930      	ldr	r1, [pc, #192]	(5434 <_ZN12BrasLateraux16initBrasLaterauxEv+0xe4>)
    5372:	f644 6220 	movw	r2, #20000	; 0x4e20
    5376:	f04f 0347 	mov.w	r3, #71	; 0x47
    537a:	f007 fecd 	bl	d118 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    537e:	683b      	ldr	r3, [r7, #0]
    5380:	607b      	str	r3, [r7, #4]
    5382:	e001      	b.n	5388 <_ZN12BrasLateraux16initBrasLaterauxEv+0x38>
    5384:	683a      	ldr	r2, [r7, #0]
    5386:	607a      	str	r2, [r7, #4]
    5388:	687b      	ldr	r3, [r7, #4]
    538a:	61fb      	str	r3, [r7, #28]
            TIM_CtrlPWMOutputs(TIM1, ENABLE);
    538c:	4829      	ldr	r0, [pc, #164]	(5434 <_ZN12BrasLateraux16initBrasLaterauxEv+0xe4>)
    538e:	f04f 0101 	mov.w	r1, #1	; 0x1
    5392:	f7fd fe6f 	bl	3074 <TIM_CtrlPWMOutputs>

            right = new BrasLateraux(timer, 2, 0.01f, 0.11f, 20.f, 86.f, 84.f);
    5396:	f04f 0010 	mov.w	r0, #16	; 0x10
    539a:	f008 ff49 	bl	e230 <_Znwj>
    539e:	4603      	mov	r3, r0
    53a0:	60bb      	str	r3, [r7, #8]
    53a2:	68ba      	ldr	r2, [r7, #8]
    53a4:	2a00      	cmp	r2, #0
    53a6:	d011      	beq.n	53cc <_ZN12BrasLateraux16initBrasLaterauxEv+0x7c>
    53a8:	4b23      	ldr	r3, [pc, #140]	(5438 <_ZN12BrasLateraux16initBrasLaterauxEv+0xe8>)
    53aa:	9300      	str	r3, [sp, #0]
    53ac:	4b23      	ldr	r3, [pc, #140]	(543c <_ZN12BrasLateraux16initBrasLaterauxEv+0xec>)
    53ae:	9301      	str	r3, [sp, #4]
    53b0:	4b23      	ldr	r3, [pc, #140]	(5440 <_ZN12BrasLateraux16initBrasLaterauxEv+0xf0>)
    53b2:	9302      	str	r3, [sp, #8]
    53b4:	4b23      	ldr	r3, [pc, #140]	(5444 <_ZN12BrasLateraux16initBrasLaterauxEv+0xf4>)
    53b6:	9303      	str	r3, [sp, #12]
    53b8:	68b8      	ldr	r0, [r7, #8]
    53ba:	69f9      	ldr	r1, [r7, #28]
    53bc:	f04f 0202 	mov.w	r2, #2	; 0x2
    53c0:	4b21      	ldr	r3, [pc, #132]	(5448 <_ZN12BrasLateraux16initBrasLaterauxEv+0xf8>)
    53c2:	f7ff ff95 	bl	52f0 <_ZN12BrasLaterauxC1EP5Timerhfffff>
    53c6:	68bb      	ldr	r3, [r7, #8]
    53c8:	60fb      	str	r3, [r7, #12]
    53ca:	e001      	b.n	53d0 <_ZN12BrasLateraux16initBrasLaterauxEv+0x80>
    53cc:	68ba      	ldr	r2, [r7, #8]
    53ce:	60fa      	str	r2, [r7, #12]
    53d0:	4b1e      	ldr	r3, [pc, #120]	(544c <_ZN12BrasLateraux16initBrasLaterauxEv+0xfc>)
    53d2:	68fa      	ldr	r2, [r7, #12]
    53d4:	601a      	str	r2, [r3, #0]
            left = new BrasLateraux(timer, 3, 0.01f, 0.11f, 120.f, 36.f, 1.f);
    53d6:	f04f 0010 	mov.w	r0, #16	; 0x10
    53da:	f008 ff29 	bl	e230 <_Znwj>
    53de:	4603      	mov	r3, r0
    53e0:	613b      	str	r3, [r7, #16]
    53e2:	693b      	ldr	r3, [r7, #16]
    53e4:	2b00      	cmp	r3, #0
    53e6:	d011      	beq.n	540c <_ZN12BrasLateraux16initBrasLaterauxEv+0xbc>
    53e8:	4b13      	ldr	r3, [pc, #76]	(5438 <_ZN12BrasLateraux16initBrasLaterauxEv+0xe8>)
    53ea:	9300      	str	r3, [sp, #0]
    53ec:	4b18      	ldr	r3, [pc, #96]	(5450 <_ZN12BrasLateraux16initBrasLaterauxEv+0x100>)
    53ee:	9301      	str	r3, [sp, #4]
    53f0:	4b18      	ldr	r3, [pc, #96]	(5454 <_ZN12BrasLateraux16initBrasLaterauxEv+0x104>)
    53f2:	9302      	str	r3, [sp, #8]
    53f4:	4b18      	ldr	r3, [pc, #96]	(5458 <_ZN12BrasLateraux16initBrasLaterauxEv+0x108>)
    53f6:	9303      	str	r3, [sp, #12]
    53f8:	6938      	ldr	r0, [r7, #16]
    53fa:	69f9      	ldr	r1, [r7, #28]
    53fc:	f04f 0203 	mov.w	r2, #3	; 0x3
    5400:	4b11      	ldr	r3, [pc, #68]	(5448 <_ZN12BrasLateraux16initBrasLaterauxEv+0xf8>)
    5402:	f7ff ff75 	bl	52f0 <_ZN12BrasLaterauxC1EP5Timerhfffff>
    5406:	693a      	ldr	r2, [r7, #16]
    5408:	617a      	str	r2, [r7, #20]
    540a:	e001      	b.n	5410 <_ZN12BrasLateraux16initBrasLaterauxEv+0xc0>
    540c:	693b      	ldr	r3, [r7, #16]
    540e:	617b      	str	r3, [r7, #20]
    5410:	4b12      	ldr	r3, [pc, #72]	(545c <_ZN12BrasLateraux16initBrasLaterauxEv+0x10c>)
    5412:	697a      	ldr	r2, [r7, #20]
    5414:	601a      	str	r2, [r3, #0]


        #endif

        left->collapse();
    5416:	4b11      	ldr	r3, [pc, #68]	(545c <_ZN12BrasLateraux16initBrasLaterauxEv+0x10c>)
    5418:	681b      	ldr	r3, [r3, #0]
    541a:	4618      	mov	r0, r3
    541c:	f7ff ff48 	bl	52b0 <_ZN12BrasLateraux8collapseEv>
        right->collapse();
    5420:	4b0a      	ldr	r3, [pc, #40]	(544c <_ZN12BrasLateraux16initBrasLaterauxEv+0xfc>)
    5422:	681b      	ldr	r3, [r3, #0]
    5424:	4618      	mov	r0, r3
    5426:	f7ff ff43 	bl	52b0 <_ZN12BrasLateraux8collapseEv>
    }
    542a:	f107 0720 	add.w	r7, r7, #32	; 0x20
    542e:	46bd      	mov	sp, r7
    5430:	bd80      	pop	{r7, pc}
    5432:	46c0      	nop			(mov r8, r8)
    5434:	40012c00 	.word	0x40012c00
    5438:	3de147ae 	.word	0x3de147ae
    543c:	41a00000 	.word	0x41a00000
    5440:	42ac0000 	.word	0x42ac0000
    5444:	42a80000 	.word	0x42a80000
    5448:	3c23d70a 	.word	0x3c23d70a
    544c:	20000550 	.word	0x20000550
    5450:	42f00000 	.word	0x42f00000
    5454:	42100000 	.word	0x42100000
    5458:	3f800000 	.word	0x3f800000
    545c:	2000054c 	.word	0x2000054c

00005460 <_ZN12BrasLateraux8getRightEv>:
        initBrasLateraux();

    return left;
}

BrasLateraux* BrasLateraux::getRight()
    5460:	b580      	push	{r7, lr}
    5462:	af00      	add	r7, sp, #0
{
    if (right==0)
    5464:	4b05      	ldr	r3, [pc, #20]	(547c <_ZN12BrasLateraux8getRightEv+0x1c>)
    5466:	681b      	ldr	r3, [r3, #0]
    5468:	2b00      	cmp	r3, #0
    546a:	d101      	bne.n	5470 <_ZN12BrasLateraux8getRightEv+0x10>
        initBrasLateraux();
    546c:	f7ff ff70 	bl	5350 <_ZN12BrasLateraux16initBrasLaterauxEv>

    return right;
    5470:	4b02      	ldr	r3, [pc, #8]	(547c <_ZN12BrasLateraux8getRightEv+0x1c>)
    5472:	681b      	ldr	r3, [r3, #0]
}
    5474:	4618      	mov	r0, r3
    5476:	46bd      	mov	sp, r7
    5478:	bd80      	pop	{r7, pc}
    547a:	46c0      	nop			(mov r8, r8)
    547c:	20000550 	.word	0x20000550

00005480 <_ZN12BrasLateraux7getLeftEv>:
        right = new BrasLateraux();
    }

#endif

BrasLateraux* BrasLateraux::getLeft()
    5480:	b580      	push	{r7, lr}
    5482:	af00      	add	r7, sp, #0
{
    if (left==0)
    5484:	4b05      	ldr	r3, [pc, #20]	(549c <_ZN12BrasLateraux7getLeftEv+0x1c>)
    5486:	681b      	ldr	r3, [r3, #0]
    5488:	2b00      	cmp	r3, #0
    548a:	d101      	bne.n	5490 <_ZN12BrasLateraux7getLeftEv+0x10>
        initBrasLateraux();
    548c:	f7ff ff60 	bl	5350 <_ZN12BrasLateraux16initBrasLaterauxEv>

    return left;
    5490:	4b02      	ldr	r3, [pc, #8]	(549c <_ZN12BrasLateraux7getLeftEv+0x1c>)
    5492:	681b      	ldr	r3, [r3, #0]
}
    5494:	4618      	mov	r0, r3
    5496:	46bd      	mov	sp, r7
    5498:	bd80      	pop	{r7, pc}
    549a:	46c0      	nop			(mov r8, r8)
    549c:	2000054c 	.word	0x2000054c

000054a0 <_ZN12BrasLaterauxC2EP5Timerhfffff>:
BrasLateraux* BrasLateraux::left = 0;
BrasLateraux* BrasLateraux::right = 0;

#ifdef ROBOTHW

    BrasLateraux::BrasLateraux(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    54a0:	b580      	push	{r7, lr}
    54a2:	b088      	sub	sp, #32
    54a4:	af02      	add	r7, sp, #8
    54a6:	6178      	str	r0, [r7, #20]
    54a8:	6139      	str	r1, [r7, #16]
    54aa:	60bb      	str	r3, [r7, #8]
    54ac:	4613      	mov	r3, r2
    54ae:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    54b0:	697a      	ldr	r2, [r7, #20]
    54b2:	6a7b      	ldr	r3, [r7, #36]
    54b4:	6053      	str	r3, [r2, #4]
    54b6:	697a      	ldr	r2, [r7, #20]
    54b8:	6abb      	ldr	r3, [r7, #40]
    54ba:	6093      	str	r3, [r2, #8]
    54bc:	697a      	ldr	r2, [r7, #20]
    54be:	6afb      	ldr	r3, [r7, #44]
    54c0:	60d3      	str	r3, [r2, #12]
    {
        servo = new Servo(timer, OCx, RC0degre, RC180degres);
    54c2:	f04f 0014 	mov.w	r0, #20	; 0x14
    54c6:	f008 feb3 	bl	e230 <_Znwj>
    54ca:	4603      	mov	r3, r0
    54cc:	603b      	str	r3, [r7, #0]
    54ce:	683a      	ldr	r2, [r7, #0]
    54d0:	2a00      	cmp	r2, #0
    54d2:	d00a      	beq.n	54ea <_ZN12BrasLaterauxC2EP5Timerhfffff+0x4a>
    54d4:	7bfa      	ldrb	r2, [r7, #15]
    54d6:	6a3b      	ldr	r3, [r7, #32]
    54d8:	9300      	str	r3, [sp, #0]
    54da:	6838      	ldr	r0, [r7, #0]
    54dc:	6939      	ldr	r1, [r7, #16]
    54de:	68bb      	ldr	r3, [r7, #8]
    54e0:	f001 fd22 	bl	6f28 <_ZN5ServoC1EP5Timerhff>
    54e4:	683b      	ldr	r3, [r7, #0]
    54e6:	607b      	str	r3, [r7, #4]
    54e8:	e001      	b.n	54ee <_ZN12BrasLaterauxC2EP5Timerhfffff+0x4e>
    54ea:	683a      	ldr	r2, [r7, #0]
    54ec:	607a      	str	r2, [r7, #4]
    54ee:	697b      	ldr	r3, [r7, #20]
    54f0:	687a      	ldr	r2, [r7, #4]
    54f2:	601a      	str	r2, [r3, #0]
    }
    54f4:	697b      	ldr	r3, [r7, #20]
    54f6:	4618      	mov	r0, r3
    54f8:	f107 0718 	add.w	r7, r7, #24	; 0x18
    54fc:	46bd      	mov	sp, r7
    54fe:	bd80      	pop	{r7, pc}

00005500 <_ZN9BrasTapis11fermerPinceEv>:
{
    ServosNumeriques::moveTo(positionPinceOuverte, moteurPinceHaut);
    ServosNumeriques::moveTo(positionPinceOuverte, moteurPinceBas);
}

void BrasTapis::fermerPince()
    5500:	b580      	push	{r7, lr}
    5502:	b082      	sub	sp, #8
    5504:	af00      	add	r7, sp, #0
    5506:	6078      	str	r0, [r7, #4]
{
    ServosNumeriques::moveTo(positionPinceFermee, moteurPinceHaut);
    5508:	687b      	ldr	r3, [r7, #4]
    550a:	68db      	ldr	r3, [r3, #12]
    550c:	b29a      	uxth	r2, r3
    550e:	687b      	ldr	r3, [r7, #4]
    5510:	695b      	ldr	r3, [r3, #20]
    5512:	b2db      	uxtb	r3, r3
    5514:	4610      	mov	r0, r2
    5516:	4619      	mov	r1, r3
    5518:	f008 fc5a 	bl	ddd0 <_ZN16ServosNumeriques6moveToEth>
    ServosNumeriques::moveTo(positionPinceFermee, moteurPinceBas);
    551c:	687b      	ldr	r3, [r7, #4]
    551e:	68db      	ldr	r3, [r3, #12]
    5520:	b29a      	uxth	r2, r3
    5522:	687b      	ldr	r3, [r7, #4]
    5524:	699b      	ldr	r3, [r3, #24]
    5526:	b2db      	uxtb	r3, r3
    5528:	4610      	mov	r0, r2
    552a:	4619      	mov	r1, r3
    552c:	f008 fc50 	bl	ddd0 <_ZN16ServosNumeriques6moveToEth>
}
    5530:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5534:	46bd      	mov	sp, r7
    5536:	bd80      	pop	{r7, pc}

00005538 <_ZN9BrasTapis11ouvrirPinceEv>:
void BrasTapis::fermerBras()
{
    ServosNumeriques::moveTo(positionBrasFerme, moteurBras);
}

void BrasTapis::ouvrirPince()
    5538:	b580      	push	{r7, lr}
    553a:	b082      	sub	sp, #8
    553c:	af00      	add	r7, sp, #0
    553e:	6078      	str	r0, [r7, #4]
{
    ServosNumeriques::moveTo(positionPinceOuverte, moteurPinceHaut);
    5540:	687b      	ldr	r3, [r7, #4]
    5542:	689b      	ldr	r3, [r3, #8]
    5544:	b29a      	uxth	r2, r3
    5546:	687b      	ldr	r3, [r7, #4]
    5548:	695b      	ldr	r3, [r3, #20]
    554a:	b2db      	uxtb	r3, r3
    554c:	4610      	mov	r0, r2
    554e:	4619      	mov	r1, r3
    5550:	f008 fc3e 	bl	ddd0 <_ZN16ServosNumeriques6moveToEth>
    ServosNumeriques::moveTo(positionPinceOuverte, moteurPinceBas);
    5554:	687b      	ldr	r3, [r7, #4]
    5556:	689b      	ldr	r3, [r3, #8]
    5558:	b29a      	uxth	r2, r3
    555a:	687b      	ldr	r3, [r7, #4]
    555c:	699b      	ldr	r3, [r3, #24]
    555e:	b2db      	uxtb	r3, r3
    5560:	4610      	mov	r0, r2
    5562:	4619      	mov	r1, r3
    5564:	f008 fc34 	bl	ddd0 <_ZN16ServosNumeriques6moveToEth>
}
    5568:	f107 0708 	add.w	r7, r7, #8	; 0x8
    556c:	46bd      	mov	sp, r7
    556e:	bd80      	pop	{r7, pc}

00005570 <_ZN9BrasTapis10fermerBrasEv>:
void BrasTapis::ouvrirBras()
{
    ServosNumeriques::moveTo(positionBrasOuvert, moteurBras);
}

void BrasTapis::fermerBras()
    5570:	b580      	push	{r7, lr}
    5572:	b082      	sub	sp, #8
    5574:	af00      	add	r7, sp, #0
    5576:	6078      	str	r0, [r7, #4]
{
    ServosNumeriques::moveTo(positionBrasFerme, moteurBras);
    5578:	687b      	ldr	r3, [r7, #4]
    557a:	685b      	ldr	r3, [r3, #4]
    557c:	b29a      	uxth	r2, r3
    557e:	687b      	ldr	r3, [r7, #4]
    5580:	691b      	ldr	r3, [r3, #16]
    5582:	b2db      	uxtb	r3, r3
    5584:	4610      	mov	r0, r2
    5586:	4619      	mov	r1, r3
    5588:	f008 fc22 	bl	ddd0 <_ZN16ServosNumeriques6moveToEth>
}
    558c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5590:	46bd      	mov	sp, r7
    5592:	bd80      	pop	{r7, pc}

00005594 <_ZN9BrasTapisC1Eb>:


BrasTapis* BrasTapis::singleton = 0;

#ifdef ROBOTHW
BrasTapis::BrasTapis(bool cote)
    5594:	b580      	push	{r7, lr}
    5596:	b082      	sub	sp, #8
    5598:	af00      	add	r7, sp, #0
    559a:	6078      	str	r0, [r7, #4]
    559c:	460b      	mov	r3, r1
    559e:	70fb      	strb	r3, [r7, #3]
{
    if (cote){   //cote est true on cree le bras droit, sinon on cree le bras gauche
    55a0:	78fb      	ldrb	r3, [r7, #3]
    55a2:	2b00      	cmp	r3, #0
    55a4:	d01c      	beq.n	55e0 <_ZN9BrasTapisC1Eb+0x4c>
        this->positionBrasOuvert = 0x00;
    55a6:	687a      	ldr	r2, [r7, #4]
    55a8:	f04f 0300 	mov.w	r3, #0	; 0x0
    55ac:	6013      	str	r3, [r2, #0]
        this->positionBrasFerme = 0x00;
    55ae:	687a      	ldr	r2, [r7, #4]
    55b0:	f04f 0300 	mov.w	r3, #0	; 0x0
    55b4:	6053      	str	r3, [r2, #4]
        this->positionPinceOuverte = 0x00;
    55b6:	687a      	ldr	r2, [r7, #4]
    55b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    55bc:	6093      	str	r3, [r2, #8]
        this->positionPinceFermee = 0x00;
    55be:	687a      	ldr	r2, [r7, #4]
    55c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    55c4:	60d3      	str	r3, [r2, #12]
        this->moteurBras = 0;
    55c6:	687a      	ldr	r2, [r7, #4]
    55c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    55cc:	6113      	str	r3, [r2, #16]
        this->moteurPinceHaut = 0;
    55ce:	687a      	ldr	r2, [r7, #4]
    55d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    55d4:	6153      	str	r3, [r2, #20]
        this->moteurPinceBas = 0;
    55d6:	687a      	ldr	r2, [r7, #4]
    55d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    55dc:	6193      	str	r3, [r2, #24]
    55de:	e01b      	b.n	5618 <_ZN9BrasTapisC1Eb+0x84>
    }
    else {
        this->positionBrasOuvert = 0x00;
    55e0:	687a      	ldr	r2, [r7, #4]
    55e2:	f04f 0300 	mov.w	r3, #0	; 0x0
    55e6:	6013      	str	r3, [r2, #0]
        this->positionBrasFerme = 0x00;
    55e8:	687a      	ldr	r2, [r7, #4]
    55ea:	f04f 0300 	mov.w	r3, #0	; 0x0
    55ee:	6053      	str	r3, [r2, #4]
        this->positionPinceOuverte = 0x00;
    55f0:	687a      	ldr	r2, [r7, #4]
    55f2:	f04f 0300 	mov.w	r3, #0	; 0x0
    55f6:	6093      	str	r3, [r2, #8]
        this->positionPinceFermee = 0x00;
    55f8:	687a      	ldr	r2, [r7, #4]
    55fa:	f04f 0300 	mov.w	r3, #0	; 0x0
    55fe:	60d3      	str	r3, [r2, #12]
        this->moteurBras = 0;
    5600:	687a      	ldr	r2, [r7, #4]
    5602:	f04f 0300 	mov.w	r3, #0	; 0x0
    5606:	6113      	str	r3, [r2, #16]
        this->moteurPinceHaut = 0;
    5608:	687a      	ldr	r2, [r7, #4]
    560a:	f04f 0300 	mov.w	r3, #0	; 0x0
    560e:	6153      	str	r3, [r2, #20]
        this->moteurPinceBas = 0;
    5610:	687a      	ldr	r2, [r7, #4]
    5612:	f04f 0300 	mov.w	r3, #0	; 0x0
    5616:	6193      	str	r3, [r2, #24]
    }
    this->fermerBras();
    5618:	6878      	ldr	r0, [r7, #4]
    561a:	f7ff ffa9 	bl	5570 <_ZN9BrasTapis10fermerBrasEv>
}
    561e:	687b      	ldr	r3, [r7, #4]
    5620:	4618      	mov	r0, r3
    5622:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5626:	46bd      	mov	sp, r7
    5628:	bd80      	pop	{r7, pc}
    562a:	46c0      	nop			(mov r8, r8)

0000562c <_ZN9BrasTapisC2Eb>:


BrasTapis* BrasTapis::singleton = 0;

#ifdef ROBOTHW
BrasTapis::BrasTapis(bool cote)
    562c:	b580      	push	{r7, lr}
    562e:	b082      	sub	sp, #8
    5630:	af00      	add	r7, sp, #0
    5632:	6078      	str	r0, [r7, #4]
    5634:	460b      	mov	r3, r1
    5636:	70fb      	strb	r3, [r7, #3]
{
    if (cote){   //cote est true on cree le bras droit, sinon on cree le bras gauche
    5638:	78fb      	ldrb	r3, [r7, #3]
    563a:	2b00      	cmp	r3, #0
    563c:	d01c      	beq.n	5678 <_ZN9BrasTapisC2Eb+0x4c>
        this->positionBrasOuvert = 0x00;
    563e:	687a      	ldr	r2, [r7, #4]
    5640:	f04f 0300 	mov.w	r3, #0	; 0x0
    5644:	6013      	str	r3, [r2, #0]
        this->positionBrasFerme = 0x00;
    5646:	687a      	ldr	r2, [r7, #4]
    5648:	f04f 0300 	mov.w	r3, #0	; 0x0
    564c:	6053      	str	r3, [r2, #4]
        this->positionPinceOuverte = 0x00;
    564e:	687a      	ldr	r2, [r7, #4]
    5650:	f04f 0300 	mov.w	r3, #0	; 0x0
    5654:	6093      	str	r3, [r2, #8]
        this->positionPinceFermee = 0x00;
    5656:	687a      	ldr	r2, [r7, #4]
    5658:	f04f 0300 	mov.w	r3, #0	; 0x0
    565c:	60d3      	str	r3, [r2, #12]
        this->moteurBras = 0;
    565e:	687a      	ldr	r2, [r7, #4]
    5660:	f04f 0300 	mov.w	r3, #0	; 0x0
    5664:	6113      	str	r3, [r2, #16]
        this->moteurPinceHaut = 0;
    5666:	687a      	ldr	r2, [r7, #4]
    5668:	f04f 0300 	mov.w	r3, #0	; 0x0
    566c:	6153      	str	r3, [r2, #20]
        this->moteurPinceBas = 0;
    566e:	687a      	ldr	r2, [r7, #4]
    5670:	f04f 0300 	mov.w	r3, #0	; 0x0
    5674:	6193      	str	r3, [r2, #24]
    5676:	e01b      	b.n	56b0 <_ZN9BrasTapisC2Eb+0x84>
    }
    else {
        this->positionBrasOuvert = 0x00;
    5678:	687a      	ldr	r2, [r7, #4]
    567a:	f04f 0300 	mov.w	r3, #0	; 0x0
    567e:	6013      	str	r3, [r2, #0]
        this->positionBrasFerme = 0x00;
    5680:	687a      	ldr	r2, [r7, #4]
    5682:	f04f 0300 	mov.w	r3, #0	; 0x0
    5686:	6053      	str	r3, [r2, #4]
        this->positionPinceOuverte = 0x00;
    5688:	687a      	ldr	r2, [r7, #4]
    568a:	f04f 0300 	mov.w	r3, #0	; 0x0
    568e:	6093      	str	r3, [r2, #8]
        this->positionPinceFermee = 0x00;
    5690:	687a      	ldr	r2, [r7, #4]
    5692:	f04f 0300 	mov.w	r3, #0	; 0x0
    5696:	60d3      	str	r3, [r2, #12]
        this->moteurBras = 0;
    5698:	687a      	ldr	r2, [r7, #4]
    569a:	f04f 0300 	mov.w	r3, #0	; 0x0
    569e:	6113      	str	r3, [r2, #16]
        this->moteurPinceHaut = 0;
    56a0:	687a      	ldr	r2, [r7, #4]
    56a2:	f04f 0300 	mov.w	r3, #0	; 0x0
    56a6:	6153      	str	r3, [r2, #20]
        this->moteurPinceBas = 0;
    56a8:	687a      	ldr	r2, [r7, #4]
    56aa:	f04f 0300 	mov.w	r3, #0	; 0x0
    56ae:	6193      	str	r3, [r2, #24]
    }
    this->fermerBras();
    56b0:	6878      	ldr	r0, [r7, #4]
    56b2:	f7ff ff5d 	bl	5570 <_ZN9BrasTapis10fermerBrasEv>
}
    56b6:	687b      	ldr	r3, [r7, #4]
    56b8:	4618      	mov	r0, r3
    56ba:	f107 0708 	add.w	r7, r7, #8	; 0x8
    56be:	46bd      	mov	sp, r7
    56c0:	bd80      	pop	{r7, pc}
    56c2:	46c0      	nop			(mov r8, r8)

000056c4 <_ZN9BrasTapis10ouvrirBrasEv>:
    singleton = new BrasTapis(cote);
    return singleton;
}


void BrasTapis::ouvrirBras()
    56c4:	b580      	push	{r7, lr}
    56c6:	b082      	sub	sp, #8
    56c8:	af00      	add	r7, sp, #0
    56ca:	6078      	str	r0, [r7, #4]
{
    ServosNumeriques::moveTo(positionBrasOuvert, moteurBras);
    56cc:	687b      	ldr	r3, [r7, #4]
    56ce:	681b      	ldr	r3, [r3, #0]
    56d0:	b29a      	uxth	r2, r3
    56d2:	687b      	ldr	r3, [r7, #4]
    56d4:	691b      	ldr	r3, [r3, #16]
    56d6:	b2db      	uxtb	r3, r3
    56d8:	4610      	mov	r0, r2
    56da:	4619      	mov	r1, r3
    56dc:	f008 fb78 	bl	ddd0 <_ZN16ServosNumeriques6moveToEth>
}
    56e0:	f107 0708 	add.w	r7, r7, #8	; 0x8
    56e4:	46bd      	mov	sp, r7
    56e6:	bd80      	pop	{r7, pc}

000056e8 <_ZN9BrasTapis12getSingletonEb>:
    this->fermerBras();
}

//TODO trouver une solution : comment discerner dans le singleton que l'on veut le bras droit ou le bras gauche? (2 getSingleton?)

BrasTapis* BrasTapis::getSingleton(bool cote)
    56e8:	b580      	push	{r7, lr}
    56ea:	b084      	sub	sp, #16
    56ec:	af00      	add	r7, sp, #0
    56ee:	4603      	mov	r3, r0
    56f0:	73fb      	strb	r3, [r7, #15]
{
    singleton = new BrasTapis(cote);
    56f2:	f04f 001c 	mov.w	r0, #28	; 0x1c
    56f6:	f008 fd9b 	bl	e230 <_Znwj>
    56fa:	4603      	mov	r3, r0
    56fc:	607b      	str	r3, [r7, #4]
    56fe:	687a      	ldr	r2, [r7, #4]
    5700:	2a00      	cmp	r2, #0
    5702:	d007      	beq.n	5714 <_ZN9BrasTapis12getSingletonEb+0x2c>
    5704:	7bfb      	ldrb	r3, [r7, #15]
    5706:	6878      	ldr	r0, [r7, #4]
    5708:	4619      	mov	r1, r3
    570a:	f7ff ff43 	bl	5594 <_ZN9BrasTapisC1Eb>
    570e:	687b      	ldr	r3, [r7, #4]
    5710:	60bb      	str	r3, [r7, #8]
    5712:	e001      	b.n	5718 <_ZN9BrasTapis12getSingletonEb+0x30>
    5714:	687a      	ldr	r2, [r7, #4]
    5716:	60ba      	str	r2, [r7, #8]
    5718:	4b04      	ldr	r3, [pc, #16]	(572c <_ZN9BrasTapis12getSingletonEb+0x44>)
    571a:	68ba      	ldr	r2, [r7, #8]
    571c:	601a      	str	r2, [r3, #0]
    return singleton;
    571e:	4b03      	ldr	r3, [pc, #12]	(572c <_ZN9BrasTapis12getSingletonEb+0x44>)
    5720:	681b      	ldr	r3, [r3, #0]
}
    5722:	4618      	mov	r0, r3
    5724:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5728:	46bd      	mov	sp, r7
    572a:	bd80      	pop	{r7, pc}
    572c:	20000554 	.word	0x20000554

00005730 <_ZN6Moteur6tourneEf>:
    #endif
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx_pwm, &GPIO_InitStructureSortie);
}

void Moteur::tourne(float rapport)
    5730:	b580      	push	{r7, lr}
    5732:	b082      	sub	sp, #8
    5734:	af00      	add	r7, sp, #0
    5736:	6078      	str	r0, [r7, #4]
    5738:	6039      	str	r1, [r7, #0]
{
    pwm.setDutyCycle(rapport);
    573a:	687b      	ldr	r3, [r7, #4]
    573c:	4618      	mov	r0, r3
    573e:	6839      	ldr	r1, [r7, #0]
    5740:	f006 fe08 	bl	c354 <_ZN10PWMHandler12setDutyCycleEf>
}
    5744:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5748:	46bd      	mov	sp, r7
    574a:	bd80      	pop	{r7, pc}

0000574c <_ZN6MoteurC1EP11TIM_TypeDefhP12GPIO_TypeDeft>:
    #include "stm32f4xx_gpio.h"
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_gpio.h"
#endif

Moteur::Moteur(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm)
    574c:	b5b0      	push	{r4, r5, r7, lr}
    574e:	b088      	sub	sp, #32
    5750:	af02      	add	r7, sp, #8
    5752:	60f8      	str	r0, [r7, #12]
    5754:	60b9      	str	r1, [r7, #8]
    5756:	603b      	str	r3, [r7, #0]
    5758:	4613      	mov	r3, r2
    575a:	71fb      	strb	r3, [r7, #7]
    : pwm(new Timer(TIMx, PERIOD_TIMER_MOTEUR, PRESCALER_TIMER_MOTEUR, CLOCK_TIMER_MOTEUR), OCx)
    575c:	68fd      	ldr	r5, [r7, #12]
    575e:	f04f 000c 	mov.w	r0, #12	; 0xc
    5762:	f008 fd65 	bl	e230 <_Znwj>
    5766:	4603      	mov	r3, r0
    5768:	461c      	mov	r4, r3
    576a:	f04f 0300 	mov.w	r3, #0	; 0x0
    576e:	9300      	str	r3, [sp, #0]
    5770:	4620      	mov	r0, r4
    5772:	68b9      	ldr	r1, [r7, #8]
    5774:	f04f 0228 	mov.w	r2, #40	; 0x28
    5778:	f04f 0347 	mov.w	r3, #71	; 0x47
    577c:	f007 fccc 	bl	d118 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    5780:	79fb      	ldrb	r3, [r7, #7]
    5782:	4628      	mov	r0, r5
    5784:	4621      	mov	r1, r4
    5786:	461a      	mov	r2, r3
    5788:	f006 fe06 	bl	c398 <_ZN10PWMHandlerC1EP5Timerh>
{
    GPIO_InitTypeDef GPIO_InitStructureSortie;
    GPIO_InitStructureSortie.GPIO_Pin = GPIO_Pin_pwm;
    578c:	8d3b      	ldrh	r3, [r7, #40]
    578e:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructureSortie.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF_PP;
    5790:	f04f 0318 	mov.w	r3, #24	; 0x18
    5794:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    5796:	f04f 0303 	mov.w	r3, #3	; 0x3
    579a:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_pwm, &GPIO_InitStructureSortie);
    579c:	f107 0314 	add.w	r3, r7, #20	; 0x14
    57a0:	6838      	ldr	r0, [r7, #0]
    57a2:	4619      	mov	r1, r3
    57a4:	f7fb ff84 	bl	16b0 <GPIO_Init>
}
    57a8:	68fb      	ldr	r3, [r7, #12]
    57aa:	4618      	mov	r0, r3
    57ac:	f107 0718 	add.w	r7, r7, #24	; 0x18
    57b0:	46bd      	mov	sp, r7
    57b2:	bdb0      	pop	{r4, r5, r7, pc}

000057b4 <_ZN6MoteurC2EP11TIM_TypeDefhP12GPIO_TypeDeft>:
    #include "stm32f4xx_gpio.h"
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_gpio.h"
#endif

Moteur::Moteur(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm)
    57b4:	b5b0      	push	{r4, r5, r7, lr}
    57b6:	b088      	sub	sp, #32
    57b8:	af02      	add	r7, sp, #8
    57ba:	60f8      	str	r0, [r7, #12]
    57bc:	60b9      	str	r1, [r7, #8]
    57be:	603b      	str	r3, [r7, #0]
    57c0:	4613      	mov	r3, r2
    57c2:	71fb      	strb	r3, [r7, #7]
    : pwm(new Timer(TIMx, PERIOD_TIMER_MOTEUR, PRESCALER_TIMER_MOTEUR, CLOCK_TIMER_MOTEUR), OCx)
    57c4:	68fd      	ldr	r5, [r7, #12]
    57c6:	f04f 000c 	mov.w	r0, #12	; 0xc
    57ca:	f008 fd31 	bl	e230 <_Znwj>
    57ce:	4603      	mov	r3, r0
    57d0:	461c      	mov	r4, r3
    57d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    57d6:	9300      	str	r3, [sp, #0]
    57d8:	4620      	mov	r0, r4
    57da:	68b9      	ldr	r1, [r7, #8]
    57dc:	f04f 0228 	mov.w	r2, #40	; 0x28
    57e0:	f04f 0347 	mov.w	r3, #71	; 0x47
    57e4:	f007 fc98 	bl	d118 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    57e8:	79fb      	ldrb	r3, [r7, #7]
    57ea:	4628      	mov	r0, r5
    57ec:	4621      	mov	r1, r4
    57ee:	461a      	mov	r2, r3
    57f0:	f006 fdd2 	bl	c398 <_ZN10PWMHandlerC1EP5Timerh>
{
    GPIO_InitTypeDef GPIO_InitStructureSortie;
    GPIO_InitStructureSortie.GPIO_Pin = GPIO_Pin_pwm;
    57f4:	8d3b      	ldrh	r3, [r7, #40]
    57f6:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructureSortie.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF_PP;
    57f8:	f04f 0318 	mov.w	r3, #24	; 0x18
    57fc:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    57fe:	f04f 0303 	mov.w	r3, #3	; 0x3
    5802:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_pwm, &GPIO_InitStructureSortie);
    5804:	f107 0314 	add.w	r3, r7, #20	; 0x14
    5808:	6838      	ldr	r0, [r7, #0]
    580a:	4619      	mov	r1, r3
    580c:	f7fb ff50 	bl	16b0 <GPIO_Init>
}
    5810:	68fb      	ldr	r3, [r7, #12]
    5812:	4618      	mov	r0, r3
    5814:	f107 0718 	add.w	r7, r7, #24	; 0x18
    5818:	46bd      	mov	sp, r7
    581a:	bdb0      	pop	{r4, r5, r7, pc}

0000581c <_ZN5RouesC1Ev>:
#include "roues.h"

Roues::Roues()
    581c:	b580      	push	{r7, lr}
    581e:	b086      	sub	sp, #24
    5820:	af04      	add	r7, sp, #16
    5822:	6078      	str	r0, [r7, #4]
 // pour la v3 :
#ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif
#ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
    : droite(TIM5, 4, GPIOA, GPIO_Pin_3, GPIOD, GPIO_Pin_4), gauche(TIM5, 2, GPIOA, GPIO_Pin_1, GPIOD, GPIO_Pin_6)
    5824:	687a      	ldr	r2, [r7, #4]
    5826:	f04f 0302 	mov.w	r3, #2	; 0x2
    582a:	9300      	str	r3, [sp, #0]
    582c:	4b11      	ldr	r3, [pc, #68]	(5874 <_ZN5RouesC1Ev+0x58>)
    582e:	9301      	str	r3, [sp, #4]
    5830:	f04f 0340 	mov.w	r3, #64	; 0x40
    5834:	9302      	str	r3, [sp, #8]
    5836:	4610      	mov	r0, r2
    5838:	490f      	ldr	r1, [pc, #60]	(5878 <_ZN5RouesC1Ev+0x5c>)
    583a:	f04f 0202 	mov.w	r2, #2	; 0x2
    583e:	4b0f      	ldr	r3, [pc, #60]	(587c <_ZN5RouesC1Ev+0x60>)
    5840:	f007 f9f2 	bl	cc28 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
    5844:	687b      	ldr	r3, [r7, #4]
    5846:	f103 0210 	add.w	r2, r3, #16	; 0x10
    584a:	f04f 0308 	mov.w	r3, #8	; 0x8
    584e:	9300      	str	r3, [sp, #0]
    5850:	4b08      	ldr	r3, [pc, #32]	(5874 <_ZN5RouesC1Ev+0x58>)
    5852:	9301      	str	r3, [sp, #4]
    5854:	f04f 0310 	mov.w	r3, #16	; 0x10
    5858:	9302      	str	r3, [sp, #8]
    585a:	4610      	mov	r0, r2
    585c:	4906      	ldr	r1, [pc, #24]	(5878 <_ZN5RouesC1Ev+0x5c>)
    585e:	f04f 0204 	mov.w	r2, #4	; 0x4
    5862:	4b06      	ldr	r3, [pc, #24]	(587c <_ZN5RouesC1Ev+0x60>)
    5864:	f007 f9e0 	bl	cc28 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
#ifdef STM32F40_41xxx // pour la STM32 H405 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif

{
}
    5868:	687b      	ldr	r3, [r7, #4]
    586a:	4618      	mov	r0, r3
    586c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5870:	46bd      	mov	sp, r7
    5872:	bd80      	pop	{r7, pc}
    5874:	40011400 	.word	0x40011400
    5878:	40000c00 	.word	0x40000c00
    587c:	40010800 	.word	0x40010800

00005880 <_ZN5RouesC2Ev>:
#include "roues.h"

Roues::Roues()
    5880:	b580      	push	{r7, lr}
    5882:	b086      	sub	sp, #24
    5884:	af04      	add	r7, sp, #16
    5886:	6078      	str	r0, [r7, #4]
 // pour la v3 :
#ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif
#ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
    : droite(TIM5, 4, GPIOA, GPIO_Pin_3, GPIOD, GPIO_Pin_4), gauche(TIM5, 2, GPIOA, GPIO_Pin_1, GPIOD, GPIO_Pin_6)
    5888:	687a      	ldr	r2, [r7, #4]
    588a:	f04f 0302 	mov.w	r3, #2	; 0x2
    588e:	9300      	str	r3, [sp, #0]
    5890:	4b11      	ldr	r3, [pc, #68]	(58d8 <_ZN5RouesC2Ev+0x58>)
    5892:	9301      	str	r3, [sp, #4]
    5894:	f04f 0340 	mov.w	r3, #64	; 0x40
    5898:	9302      	str	r3, [sp, #8]
    589a:	4610      	mov	r0, r2
    589c:	490f      	ldr	r1, [pc, #60]	(58dc <_ZN5RouesC2Ev+0x5c>)
    589e:	f04f 0202 	mov.w	r2, #2	; 0x2
    58a2:	4b0f      	ldr	r3, [pc, #60]	(58e0 <_ZN5RouesC2Ev+0x60>)
    58a4:	f007 f9c0 	bl	cc28 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
    58a8:	687b      	ldr	r3, [r7, #4]
    58aa:	f103 0210 	add.w	r2, r3, #16	; 0x10
    58ae:	f04f 0308 	mov.w	r3, #8	; 0x8
    58b2:	9300      	str	r3, [sp, #0]
    58b4:	4b08      	ldr	r3, [pc, #32]	(58d8 <_ZN5RouesC2Ev+0x58>)
    58b6:	9301      	str	r3, [sp, #4]
    58b8:	f04f 0310 	mov.w	r3, #16	; 0x10
    58bc:	9302      	str	r3, [sp, #8]
    58be:	4610      	mov	r0, r2
    58c0:	4906      	ldr	r1, [pc, #24]	(58dc <_ZN5RouesC2Ev+0x5c>)
    58c2:	f04f 0204 	mov.w	r2, #4	; 0x4
    58c6:	4b06      	ldr	r3, [pc, #24]	(58e0 <_ZN5RouesC2Ev+0x60>)
    58c8:	f007 f9ae 	bl	cc28 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
#ifdef STM32F40_41xxx // pour la STM32 H405 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif

{
}
    58cc:	687b      	ldr	r3, [r7, #4]
    58ce:	4618      	mov	r0, r3
    58d0:	f107 0708 	add.w	r7, r7, #8	; 0x8
    58d4:	46bd      	mov	sp, r7
    58d6:	bd80      	pop	{r7, pc}
    58d8:	40011400 	.word	0x40011400
    58dc:	40000c00 	.word	0x40000c00
    58e0:	40010800 	.word	0x40010800

000058e4 <_ZN6SensorC2Ev>:
#include "sensor.h"

Sensor::Sensor()
    58e4:	b480      	push	{r7}
    58e6:	b083      	sub	sp, #12
    58e8:	af00      	add	r7, sp, #0
    58ea:	6078      	str	r0, [r7, #4]
    58ec:	687a      	ldr	r2, [r7, #4]
    58ee:	4b04      	ldr	r3, [pc, #16]	(5900 <_ZN6SensorC2Ev+0x1c>)
    58f0:	6013      	str	r3, [r2, #0]
{
}
    58f2:	687b      	ldr	r3, [r7, #4]
    58f4:	4618      	mov	r0, r3
    58f6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    58fa:	46bd      	mov	sp, r7
    58fc:	bc80      	pop	{r7}
    58fe:	4770      	bx	lr
    5900:	000217f0 	.word	0x000217f0

00005904 <_ZN6SensorC1Ev>:
#include "sensor.h"

Sensor::Sensor()
    5904:	b480      	push	{r7}
    5906:	b083      	sub	sp, #12
    5908:	af00      	add	r7, sp, #0
    590a:	6078      	str	r0, [r7, #4]
    590c:	687a      	ldr	r2, [r7, #4]
    590e:	4b04      	ldr	r3, [pc, #16]	(5920 <_ZN6SensorC1Ev+0x1c>)
    5910:	6013      	str	r3, [r2, #0]
{
}
    5912:	687b      	ldr	r3, [r7, #4]
    5914:	4618      	mov	r0, r3
    5916:	f107 070c 	add.w	r7, r7, #12	; 0xc
    591a:	46bd      	mov	sp, r7
    591c:	bc80      	pop	{r7}
    591e:	4770      	bx	lr
    5920:	000217f0 	.word	0x000217f0

00005924 <_ZN6SensorD0Ev>:

Sensor::~Sensor()
    5924:	b580      	push	{r7, lr}
    5926:	b082      	sub	sp, #8
    5928:	af00      	add	r7, sp, #0
    592a:	6078      	str	r0, [r7, #4]
    592c:	687a      	ldr	r2, [r7, #4]
    592e:	4b08      	ldr	r3, [pc, #32]	(5950 <_ZN6SensorD0Ev+0x2c>)
    5930:	6013      	str	r3, [r2, #0]
{
}
    5932:	f04f 0301 	mov.w	r3, #1	; 0x1
    5936:	b2db      	uxtb	r3, r3
    5938:	2b00      	cmp	r3, #0
    593a:	d002      	beq.n	5942 <_ZN6SensorD0Ev+0x1e>
    593c:	6878      	ldr	r0, [r7, #4]
    593e:	f008 fd1d 	bl	e37c <_ZdlPv>
    5942:	687b      	ldr	r3, [r7, #4]
    5944:	4618      	mov	r0, r3
    5946:	f107 0708 	add.w	r7, r7, #8	; 0x8
    594a:	46bd      	mov	sp, r7
    594c:	bd80      	pop	{r7, pc}
    594e:	46c0      	nop			(mov r8, r8)
    5950:	000217f0 	.word	0x000217f0

00005954 <_ZN6SensorD1Ev>:

Sensor::Sensor()
{
}

Sensor::~Sensor()
    5954:	b580      	push	{r7, lr}
    5956:	b082      	sub	sp, #8
    5958:	af00      	add	r7, sp, #0
    595a:	6078      	str	r0, [r7, #4]
    595c:	687a      	ldr	r2, [r7, #4]
    595e:	4b08      	ldr	r3, [pc, #32]	(5980 <_ZN6SensorD1Ev+0x2c>)
    5960:	6013      	str	r3, [r2, #0]
{
}
    5962:	f04f 0300 	mov.w	r3, #0	; 0x0
    5966:	b2db      	uxtb	r3, r3
    5968:	2b00      	cmp	r3, #0
    596a:	d002      	beq.n	5972 <_ZN6SensorD1Ev+0x1e>
    596c:	6878      	ldr	r0, [r7, #4]
    596e:	f008 fd05 	bl	e37c <_ZdlPv>
    5972:	687b      	ldr	r3, [r7, #4]
    5974:	4618      	mov	r0, r3
    5976:	f107 0708 	add.w	r7, r7, #8	; 0x8
    597a:	46bd      	mov	sp, r7
    597c:	bd80      	pop	{r7, pc}
    597e:	46c0      	nop			(mov r8, r8)
    5980:	000217f0 	.word	0x000217f0

00005984 <_ZN6SensorD2Ev>:

Sensor::Sensor()
{
}

Sensor::~Sensor()
    5984:	b580      	push	{r7, lr}
    5986:	b082      	sub	sp, #8
    5988:	af00      	add	r7, sp, #0
    598a:	6078      	str	r0, [r7, #4]
    598c:	687a      	ldr	r2, [r7, #4]
    598e:	4b08      	ldr	r3, [pc, #32]	(59b0 <_ZN6SensorD2Ev+0x2c>)
    5990:	6013      	str	r3, [r2, #0]
{
}
    5992:	f04f 0300 	mov.w	r3, #0	; 0x0
    5996:	b2db      	uxtb	r3, r3
    5998:	2b00      	cmp	r3, #0
    599a:	d002      	beq.n	59a2 <_ZN6SensorD2Ev+0x1e>
    599c:	6878      	ldr	r0, [r7, #4]
    599e:	f008 fced 	bl	e37c <_ZdlPv>
    59a2:	687b      	ldr	r3, [r7, #4]
    59a4:	4618      	mov	r0, r3
    59a6:	f107 0708 	add.w	r7, r7, #8	; 0x8
    59aa:	46bd      	mov	sp, r7
    59ac:	bd80      	pop	{r7, pc}
    59ae:	46c0      	nop			(mov r8, r8)
    59b0:	000217f0 	.word	0x000217f0

000059b4 <_ZN7Sensors11sharpDetectEv>:
    }
   // sharpNameVector->resize();
    return sharpNameVector;
}
#include "leds.h"
bool Sensors::sharpDetect()
    59b4:	b580      	push	{r7, lr}
    59b6:	b086      	sub	sp, #24
    59b8:	af00      	add	r7, sp, #0
    59ba:	6078      	str	r0, [r7, #4]
{
    for (int i = 0; i< nbSharp; i++)
    59bc:	f04f 0300 	mov.w	r3, #0	; 0x0
    59c0:	617b      	str	r3, [r7, #20]
    59c2:	e022      	b.n	5a0a <_ZN7Sensors11sharpDetectEv+0x56>
    {
        if (sharps[i]->getValue().b == true)
    59c4:	687b      	ldr	r3, [r7, #4]
    59c6:	685a      	ldr	r2, [r3, #4]
    59c8:	697b      	ldr	r3, [r7, #20]
    59ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
    59ce:	4413      	add	r3, r2
    59d0:	681b      	ldr	r3, [r3, #0]
    59d2:	681b      	ldr	r3, [r3, #0]
    59d4:	f103 0308 	add.w	r3, r3, #8	; 0x8
    59d8:	f8d3 c000 	ldr.w	ip, [r3]
    59dc:	687b      	ldr	r3, [r7, #4]
    59de:	685a      	ldr	r2, [r3, #4]
    59e0:	697b      	ldr	r3, [r7, #20]
    59e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    59e6:	4413      	add	r3, r2
    59e8:	681a      	ldr	r2, [r3, #0]
    59ea:	f107 0308 	add.w	r3, r7, #8	; 0x8
    59ee:	4618      	mov	r0, r3
    59f0:	4611      	mov	r1, r2
    59f2:	47e0      	blx	ip
    59f4:	7c3b      	ldrb	r3, [r7, #16]
    59f6:	2b00      	cmp	r3, #0
    59f8:	d003      	beq.n	5a02 <_ZN7Sensors11sharpDetectEv+0x4e>
        {
            return true;
    59fa:	f04f 0301 	mov.w	r3, #1	; 0x1
    59fe:	603b      	str	r3, [r7, #0]
    5a00:	e00b      	b.n	5a1a <_ZN7Sensors11sharpDetectEv+0x66>
    return sharpNameVector;
}
#include "leds.h"
bool Sensors::sharpDetect()
{
    for (int i = 0; i< nbSharp; i++)
    5a02:	697b      	ldr	r3, [r7, #20]
    5a04:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5a08:	617b      	str	r3, [r7, #20]
    5a0a:	687b      	ldr	r3, [r7, #4]
    5a0c:	689a      	ldr	r2, [r3, #8]
    5a0e:	697b      	ldr	r3, [r7, #20]
    5a10:	429a      	cmp	r2, r3
    5a12:	dcd7      	bgt.n	59c4 <_ZN7Sensors11sharpDetectEv+0x10>
        if (sharps[i]->getValue().b == true)
        {
            return true;
        }
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
    5a14:	f04f 0300 	mov.w	r3, #0	; 0x0
    5a18:	603b      	str	r3, [r7, #0]
    5a1a:	683b      	ldr	r3, [r7, #0]
}
    5a1c:	4618      	mov	r0, r3
    5a1e:	f107 0718 	add.w	r7, r7, #24	; 0x18
    5a22:	46bd      	mov	sp, r7
    5a24:	bd80      	pop	{r7, pc}
    5a26:	46c0      	nop			(mov r8, r8)

00005a28 <_ZN7Sensors10getSensorsEv>:
    return outputSensorVector;
}

#endif

Sensors* Sensors::getSensors()
    5a28:	b480      	push	{r7}
    5a2a:	af00      	add	r7, sp, #0
{
    return Sensors::sensors;
    5a2c:	4b02      	ldr	r3, [pc, #8]	(5a38 <_ZN7Sensors10getSensorsEv+0x10>)
    5a2e:	681b      	ldr	r3, [r3, #0]
}
    5a30:	4618      	mov	r0, r3
    5a32:	46bd      	mov	sp, r7
    5a34:	bc80      	pop	{r7}
    5a36:	4770      	bx	lr
    5a38:	20000558 	.word	0x20000558

00005a3c <_ZN7Sensors19getSharpSensorsListEv>:
       sharps[i]->setActif();
    }
}


SharpSensor** Sensors::getSharpSensorsList()
    5a3c:	b480      	push	{r7}
    5a3e:	b083      	sub	sp, #12
    5a40:	af00      	add	r7, sp, #0
    5a42:	6078      	str	r0, [r7, #4]
{
    return Sensors::sharps;
    5a44:	687b      	ldr	r3, [r7, #4]
    5a46:	685b      	ldr	r3, [r3, #4]
}
    5a48:	4618      	mov	r0, r3
    5a4a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    5a4e:	46bd      	mov	sp, r7
    5a50:	bc80      	pop	{r7}
    5a52:	4770      	bx	lr

00005a54 <_ZN7Sensors14activeAllSharpEv>:
            sharps[i]->unsetActif();
            break;
        }
    }
}
void Sensors::activeAllSharp()
    5a54:	b580      	push	{r7, lr}
    5a56:	b084      	sub	sp, #16
    5a58:	af00      	add	r7, sp, #0
    5a5a:	6078      	str	r0, [r7, #4]
{
    for (int i=0; i<nbSharp;i++)
    5a5c:	f04f 0300 	mov.w	r3, #0	; 0x0
    5a60:	60fb      	str	r3, [r7, #12]
    5a62:	e00d      	b.n	5a80 <_ZN7Sensors14activeAllSharpEv+0x2c>
    {
       sharps[i]->setActif();
    5a64:	687b      	ldr	r3, [r7, #4]
    5a66:	685a      	ldr	r2, [r3, #4]
    5a68:	68fb      	ldr	r3, [r7, #12]
    5a6a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a6e:	4413      	add	r3, r2
    5a70:	681b      	ldr	r3, [r3, #0]
    5a72:	4618      	mov	r0, r3
    5a74:	f007 f970 	bl	cd58 <_ZN11SharpSensor8setActifEv>
        }
    }
}
void Sensors::activeAllSharp()
{
    for (int i=0; i<nbSharp;i++)
    5a78:	68fb      	ldr	r3, [r7, #12]
    5a7a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5a7e:	60fb      	str	r3, [r7, #12]
    5a80:	687b      	ldr	r3, [r7, #4]
    5a82:	689a      	ldr	r2, [r3, #8]
    5a84:	68fb      	ldr	r3, [r7, #12]
    5a86:	429a      	cmp	r2, r3
    5a88:	dcec      	bgt.n	5a64 <_ZN7Sensors14activeAllSharpEv+0x10>
    {
       sharps[i]->setActif();
    }
}
    5a8a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5a8e:	46bd      	mov	sp, r7
    5a90:	bd80      	pop	{r7, pc}
    5a92:	46c0      	nop			(mov r8, r8)

00005a94 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE>:
    }
    return false;
}
#endif

void Sensors::activeSharp(SharpSensor::SharpName name)
    5a94:	b580      	push	{r7, lr}
    5a96:	b084      	sub	sp, #16
    5a98:	af00      	add	r7, sp, #0
    5a9a:	6078      	str	r0, [r7, #4]
    5a9c:	460b      	mov	r3, r1
    5a9e:	70fb      	strb	r3, [r7, #3]
{
    for (int i=0; i<nbSharp;i++)
    5aa0:	f04f 0300 	mov.w	r3, #0	; 0x0
    5aa4:	60fb      	str	r3, [r7, #12]
    5aa6:	e022      	b.n	5aee <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x5a>
    {
        if (sharps[i]->getName() == name)
    5aa8:	687b      	ldr	r3, [r7, #4]
    5aaa:	685a      	ldr	r2, [r3, #4]
    5aac:	68fb      	ldr	r3, [r7, #12]
    5aae:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ab2:	4413      	add	r3, r2
    5ab4:	681b      	ldr	r3, [r3, #0]
    5ab6:	4618      	mov	r0, r3
    5ab8:	f007 f942 	bl	cd40 <_ZN11SharpSensor7getNameEv>
    5abc:	4603      	mov	r3, r0
    5abe:	461a      	mov	r2, r3
    5ac0:	78fb      	ldrb	r3, [r7, #3]
    5ac2:	4293      	cmp	r3, r2
    5ac4:	bf14      	ite	ne
    5ac6:	2300      	movne	r3, #0
    5ac8:	2301      	moveq	r3, #1
    5aca:	b2db      	uxtb	r3, r3
    5acc:	2b00      	cmp	r3, #0
    5ace:	d00a      	beq.n	5ae6 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x52>
        {
            sharps[i]->setActif();
    5ad0:	687b      	ldr	r3, [r7, #4]
    5ad2:	685a      	ldr	r2, [r3, #4]
    5ad4:	68fb      	ldr	r3, [r7, #12]
    5ad6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ada:	4413      	add	r3, r2
    5adc:	681b      	ldr	r3, [r3, #0]
    5ade:	4618      	mov	r0, r3
    5ae0:	f007 f93a 	bl	cd58 <_ZN11SharpSensor8setActifEv>
    5ae4:	e008      	b.n	5af8 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x64>
}
#endif

void Sensors::activeSharp(SharpSensor::SharpName name)
{
    for (int i=0; i<nbSharp;i++)
    5ae6:	68fb      	ldr	r3, [r7, #12]
    5ae8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5aec:	60fb      	str	r3, [r7, #12]
    5aee:	687b      	ldr	r3, [r7, #4]
    5af0:	689a      	ldr	r2, [r3, #8]
    5af2:	68fb      	ldr	r3, [r7, #12]
    5af4:	429a      	cmp	r2, r3
    5af6:	dcd7      	bgt.n	5aa8 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x14>
        {
            sharps[i]->setActif();
            break;
        }
    }
}
    5af8:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5afc:	46bd      	mov	sp, r7
    5afe:	bd80      	pop	{r7, pc}

00005b00 <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE>:
        }
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

bool Sensors::detectedSharp(SharpSensor::SharpName name)
    5b00:	b580      	push	{r7, lr}
    5b02:	b088      	sub	sp, #32
    5b04:	af00      	add	r7, sp, #0
    5b06:	60f8      	str	r0, [r7, #12]
    5b08:	460b      	mov	r3, r1
    5b0a:	72fb      	strb	r3, [r7, #11]
{
    for (int i = 0; i< nbSharp; i++)
    5b0c:	f04f 0300 	mov.w	r3, #0	; 0x0
    5b10:	61fb      	str	r3, [r7, #28]
    5b12:	e032      	b.n	5b7a <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x7a>
    {
        if (sharps[i]->getName() == name)
    5b14:	68fb      	ldr	r3, [r7, #12]
    5b16:	685a      	ldr	r2, [r3, #4]
    5b18:	69fb      	ldr	r3, [r7, #28]
    5b1a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b1e:	4413      	add	r3, r2
    5b20:	681b      	ldr	r3, [r3, #0]
    5b22:	4618      	mov	r0, r3
    5b24:	f007 f90c 	bl	cd40 <_ZN11SharpSensor7getNameEv>
    5b28:	4603      	mov	r3, r0
    5b2a:	461a      	mov	r2, r3
    5b2c:	7afb      	ldrb	r3, [r7, #11]
    5b2e:	4293      	cmp	r3, r2
    5b30:	bf14      	ite	ne
    5b32:	2300      	movne	r3, #0
    5b34:	2301      	moveq	r3, #1
    5b36:	b2db      	uxtb	r3, r3
    5b38:	2b00      	cmp	r3, #0
    5b3a:	d01a      	beq.n	5b72 <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x72>
            return sharps[i]->getValue().b;
    5b3c:	68fb      	ldr	r3, [r7, #12]
    5b3e:	685a      	ldr	r2, [r3, #4]
    5b40:	69fb      	ldr	r3, [r7, #28]
    5b42:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b46:	4413      	add	r3, r2
    5b48:	681b      	ldr	r3, [r3, #0]
    5b4a:	681b      	ldr	r3, [r3, #0]
    5b4c:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5b50:	f8d3 c000 	ldr.w	ip, [r3]
    5b54:	68fb      	ldr	r3, [r7, #12]
    5b56:	685a      	ldr	r2, [r3, #4]
    5b58:	69fb      	ldr	r3, [r7, #28]
    5b5a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b5e:	4413      	add	r3, r2
    5b60:	681a      	ldr	r2, [r3, #0]
    5b62:	f107 0310 	add.w	r3, r7, #16	; 0x10
    5b66:	4618      	mov	r0, r3
    5b68:	4611      	mov	r1, r2
    5b6a:	47e0      	blx	ip
    5b6c:	7e3b      	ldrb	r3, [r7, #24]
    5b6e:	607b      	str	r3, [r7, #4]
    5b70:	e00b      	b.n	5b8a <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x8a>
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

bool Sensors::detectedSharp(SharpSensor::SharpName name)
{
    for (int i = 0; i< nbSharp; i++)
    5b72:	69fb      	ldr	r3, [r7, #28]
    5b74:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5b78:	61fb      	str	r3, [r7, #28]
    5b7a:	68fb      	ldr	r3, [r7, #12]
    5b7c:	689a      	ldr	r2, [r3, #8]
    5b7e:	69fb      	ldr	r3, [r7, #28]
    5b80:	429a      	cmp	r2, r3
    5b82:	dcc7      	bgt.n	5b14 <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x14>
    {
        if (sharps[i]->getName() == name)
            return sharps[i]->getValue().b;
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
    5b84:	f04f 0300 	mov.w	r3, #0	; 0x0
    5b88:	607b      	str	r3, [r7, #4]
    5b8a:	687b      	ldr	r3, [r7, #4]
}
    5b8c:	4618      	mov	r0, r3
    5b8e:	f107 0720 	add.w	r7, r7, #32	; 0x20
    5b92:	46bd      	mov	sp, r7
    5b94:	bd80      	pop	{r7, pc}
    5b96:	46c0      	nop			(mov r8, r8)

00005b98 <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE>:
            break;
        }
    }
}

void Sensors::desactiveSharp(SharpSensor::SharpName name)
    5b98:	b580      	push	{r7, lr}
    5b9a:	b084      	sub	sp, #16
    5b9c:	af00      	add	r7, sp, #0
    5b9e:	6078      	str	r0, [r7, #4]
    5ba0:	460b      	mov	r3, r1
    5ba2:	70fb      	strb	r3, [r7, #3]
{
    for (int i=0; i<nbSharp;i++)
    5ba4:	f04f 0300 	mov.w	r3, #0	; 0x0
    5ba8:	60fb      	str	r3, [r7, #12]
    5baa:	e022      	b.n	5bf2 <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x5a>
    {
        if (sharps[i]->getName() == name)
    5bac:	687b      	ldr	r3, [r7, #4]
    5bae:	685a      	ldr	r2, [r3, #4]
    5bb0:	68fb      	ldr	r3, [r7, #12]
    5bb2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5bb6:	4413      	add	r3, r2
    5bb8:	681b      	ldr	r3, [r3, #0]
    5bba:	4618      	mov	r0, r3
    5bbc:	f007 f8c0 	bl	cd40 <_ZN11SharpSensor7getNameEv>
    5bc0:	4603      	mov	r3, r0
    5bc2:	461a      	mov	r2, r3
    5bc4:	78fb      	ldrb	r3, [r7, #3]
    5bc6:	4293      	cmp	r3, r2
    5bc8:	bf14      	ite	ne
    5bca:	2300      	movne	r3, #0
    5bcc:	2301      	moveq	r3, #1
    5bce:	b2db      	uxtb	r3, r3
    5bd0:	2b00      	cmp	r3, #0
    5bd2:	d00a      	beq.n	5bea <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x52>
        {
            sharps[i]->unsetActif();
    5bd4:	687b      	ldr	r3, [r7, #4]
    5bd6:	685a      	ldr	r2, [r3, #4]
    5bd8:	68fb      	ldr	r3, [r7, #12]
    5bda:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5bde:	4413      	add	r3, r2
    5be0:	681b      	ldr	r3, [r3, #0]
    5be2:	4618      	mov	r0, r3
    5be4:	f007 f8c6 	bl	cd74 <_ZN11SharpSensor10unsetActifEv>
    5be8:	e008      	b.n	5bfc <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x64>
    }
}

void Sensors::desactiveSharp(SharpSensor::SharpName name)
{
    for (int i=0; i<nbSharp;i++)
    5bea:	68fb      	ldr	r3, [r7, #12]
    5bec:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5bf0:	60fb      	str	r3, [r7, #12]
    5bf2:	687b      	ldr	r3, [r7, #4]
    5bf4:	689a      	ldr	r2, [r3, #8]
    5bf6:	68fb      	ldr	r3, [r7, #12]
    5bf8:	429a      	cmp	r2, r3
    5bfa:	dcd7      	bgt.n	5bac <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x14>
        {
            sharps[i]->unsetActif();
            break;
        }
    }
}
    5bfc:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5c00:	46bd      	mov	sp, r7
    5c02:	bd80      	pop	{r7, pc}

00005c04 <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE>:
#endif
    // Les autres n'ont pas besoin d'être mis à jour car on obtient la valeur directement en lisant la valeur de la pin
}

#ifdef ROBOTHW
bool Sensors::detectedLimitSwitch(LimitSwitchSensor::LimitSwitchName limitSwitchName)
    5c04:	b580      	push	{r7, lr}
    5c06:	b088      	sub	sp, #32
    5c08:	af00      	add	r7, sp, #0
    5c0a:	60f8      	str	r0, [r7, #12]
    5c0c:	460b      	mov	r3, r1
    5c0e:	72fb      	strb	r3, [r7, #11]
{
    for (int i = 0; i<nbLimitSwitch; i++)
    5c10:	f04f 0300 	mov.w	r3, #0	; 0x0
    5c14:	61fb      	str	r3, [r7, #28]
    5c16:	e032      	b.n	5c7e <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x7a>
    {
        if (limitSwitchs[i]->getName() == limitSwitchName)
    5c18:	68fb      	ldr	r3, [r7, #12]
    5c1a:	69da      	ldr	r2, [r3, #28]
    5c1c:	69fb      	ldr	r3, [r7, #28]
    5c1e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c22:	4413      	add	r3, r2
    5c24:	681b      	ldr	r3, [r3, #0]
    5c26:	4618      	mov	r0, r3
    5c28:	f006 fa42 	bl	c0b0 <_ZN17LimitSwitchSensor7getNameEv>
    5c2c:	4603      	mov	r3, r0
    5c2e:	461a      	mov	r2, r3
    5c30:	7afb      	ldrb	r3, [r7, #11]
    5c32:	4293      	cmp	r3, r2
    5c34:	bf14      	ite	ne
    5c36:	2300      	movne	r3, #0
    5c38:	2301      	moveq	r3, #1
    5c3a:	b2db      	uxtb	r3, r3
    5c3c:	2b00      	cmp	r3, #0
    5c3e:	d01a      	beq.n	5c76 <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x72>
        {
            return limitSwitchs[i]->getValue().b;
    5c40:	68fb      	ldr	r3, [r7, #12]
    5c42:	69da      	ldr	r2, [r3, #28]
    5c44:	69fb      	ldr	r3, [r7, #28]
    5c46:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c4a:	4413      	add	r3, r2
    5c4c:	681b      	ldr	r3, [r3, #0]
    5c4e:	681b      	ldr	r3, [r3, #0]
    5c50:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5c54:	f8d3 c000 	ldr.w	ip, [r3]
    5c58:	68fb      	ldr	r3, [r7, #12]
    5c5a:	69da      	ldr	r2, [r3, #28]
    5c5c:	69fb      	ldr	r3, [r7, #28]
    5c5e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c62:	4413      	add	r3, r2
    5c64:	681a      	ldr	r2, [r3, #0]
    5c66:	f107 0310 	add.w	r3, r7, #16	; 0x10
    5c6a:	4618      	mov	r0, r3
    5c6c:	4611      	mov	r1, r2
    5c6e:	47e0      	blx	ip
    5c70:	7e3b      	ldrb	r3, [r7, #24]
    5c72:	607b      	str	r3, [r7, #4]
    5c74:	e00b      	b.n	5c8e <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x8a>
}

#ifdef ROBOTHW
bool Sensors::detectedLimitSwitch(LimitSwitchSensor::LimitSwitchName limitSwitchName)
{
    for (int i = 0; i<nbLimitSwitch; i++)
    5c76:	69fb      	ldr	r3, [r7, #28]
    5c78:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5c7c:	61fb      	str	r3, [r7, #28]
    5c7e:	68fb      	ldr	r3, [r7, #12]
    5c80:	6a1a      	ldr	r2, [r3, #32]
    5c82:	69fb      	ldr	r3, [r7, #28]
    5c84:	429a      	cmp	r2, r3
    5c86:	dcc7      	bgt.n	5c18 <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x14>
        if (limitSwitchs[i]->getName() == limitSwitchName)
        {
            return limitSwitchs[i]->getValue().b;
        }
    }
    return false;
    5c88:	f04f 0300 	mov.w	r3, #0	; 0x0
    5c8c:	607b      	str	r3, [r7, #4]
    5c8e:	687b      	ldr	r3, [r7, #4]
}
    5c90:	4618      	mov	r0, r3
    5c92:	f107 0720 	add.w	r7, r7, #32	; 0x20
    5c96:	46bd      	mov	sp, r7
    5c98:	bd80      	pop	{r7, pc}
    5c9a:	46c0      	nop			(mov r8, r8)

00005c9c <_ZN7Sensors6updateEv>:
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

#endif

void Sensors::update()
    5c9c:	b580      	push	{r7, lr}
    5c9e:	b086      	sub	sp, #24
    5ca0:	af00      	add	r7, sp, #0
    5ca2:	6078      	str	r0, [r7, #4]
{
    for (int i=0; i<nbSharp; i++)
    5ca4:	f04f 0300 	mov.w	r3, #0	; 0x0
    5ca8:	60fb      	str	r3, [r7, #12]
    5caa:	e00d      	b.n	5cc8 <_ZN7Sensors6updateEv+0x2c>
    {
        sharps[i]->updateValue();
    5cac:	687b      	ldr	r3, [r7, #4]
    5cae:	685a      	ldr	r2, [r3, #4]
    5cb0:	68fb      	ldr	r3, [r7, #12]
    5cb2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5cb6:	4413      	add	r3, r2
    5cb8:	681b      	ldr	r3, [r3, #0]
    5cba:	4618      	mov	r0, r3
    5cbc:	f007 f868 	bl	cd90 <_ZN11SharpSensor11updateValueEv>

#endif

void Sensors::update()
{
    for (int i=0; i<nbSharp; i++)
    5cc0:	68fb      	ldr	r3, [r7, #12]
    5cc2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5cc6:	60fb      	str	r3, [r7, #12]
    5cc8:	687b      	ldr	r3, [r7, #4]
    5cca:	689a      	ldr	r2, [r3, #8]
    5ccc:	68fb      	ldr	r3, [r7, #12]
    5cce:	429a      	cmp	r2, r3
    5cd0:	dcec      	bgt.n	5cac <_ZN7Sensors6updateEv+0x10>
    {
        sharps[i]->updateValue();
    }
#ifdef ROBOTHW
    for (int i=0; i<nbLigthBarrier; i++)
    5cd2:	f04f 0300 	mov.w	r3, #0	; 0x0
    5cd6:	613b      	str	r3, [r7, #16]
    5cd8:	e00d      	b.n	5cf6 <_ZN7Sensors6updateEv+0x5a>
    {
        ligthBarriers[i]->updateValue();
    5cda:	687b      	ldr	r3, [r7, #4]
    5cdc:	695a      	ldr	r2, [r3, #20]
    5cde:	693b      	ldr	r3, [r7, #16]
    5ce0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ce4:	4413      	add	r3, r2
    5ce6:	681b      	ldr	r3, [r3, #0]
    5ce8:	4618      	mov	r0, r3
    5cea:	f006 f8c3 	bl	be74 <_ZN18LigthBarrierSensor11updateValueEv>
    for (int i=0; i<nbSharp; i++)
    {
        sharps[i]->updateValue();
    }
#ifdef ROBOTHW
    for (int i=0; i<nbLigthBarrier; i++)
    5cee:	693b      	ldr	r3, [r7, #16]
    5cf0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5cf4:	613b      	str	r3, [r7, #16]
    5cf6:	687b      	ldr	r3, [r7, #4]
    5cf8:	699a      	ldr	r2, [r3, #24]
    5cfa:	693b      	ldr	r3, [r7, #16]
    5cfc:	429a      	cmp	r2, r3
    5cfe:	dcec      	bgt.n	5cda <_ZN7Sensors6updateEv+0x3e>
    {
        ligthBarriers[i]->updateValue();
    }
    for (int i=0; i<nbLimitSwitch; i++)
    5d00:	f04f 0300 	mov.w	r3, #0	; 0x0
    5d04:	617b      	str	r3, [r7, #20]
    5d06:	e00d      	b.n	5d24 <_ZN7Sensors6updateEv+0x88>
    {
        limitSwitchs[i]->updateValue();
    5d08:	687b      	ldr	r3, [r7, #4]
    5d0a:	69da      	ldr	r2, [r3, #28]
    5d0c:	697b      	ldr	r3, [r7, #20]
    5d0e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d12:	4413      	add	r3, r2
    5d14:	681b      	ldr	r3, [r3, #0]
    5d16:	4618      	mov	r0, r3
    5d18:	f006 f9d6 	bl	c0c8 <_ZN17LimitSwitchSensor11updateValueEv>
#ifdef ROBOTHW
    for (int i=0; i<nbLigthBarrier; i++)
    {
        ligthBarriers[i]->updateValue();
    }
    for (int i=0; i<nbLimitSwitch; i++)
    5d1c:	697b      	ldr	r3, [r7, #20]
    5d1e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5d22:	617b      	str	r3, [r7, #20]
    5d24:	687b      	ldr	r3, [r7, #4]
    5d26:	6a1a      	ldr	r2, [r3, #32]
    5d28:	697b      	ldr	r3, [r7, #20]
    5d2a:	429a      	cmp	r2, r3
    5d2c:	dcec      	bgt.n	5d08 <_ZN7Sensors6updateEv+0x6c>
    {
        limitSwitchs[i]->updateValue();
    }
#endif
    // Les autres n'ont pas besoin d'être mis à jour car on obtient la valeur directement en lisant la valeur de la pin
}
    5d2e:	f107 0718 	add.w	r7, r7, #24	; 0x18
    5d32:	46bd      	mov	sp, r7
    5d34:	bd80      	pop	{r7, pc}
    5d36:	46c0      	nop			(mov r8, r8)

00005d38 <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE>:
    }
//    ligthBarrierNameVector->resize();
    return ligthBarrierNameVector;
}

bool Sensors::detectedLigthBarrier(LigthBarrierSensor::LigthBarrierName name)
    5d38:	b580      	push	{r7, lr}
    5d3a:	b088      	sub	sp, #32
    5d3c:	af00      	add	r7, sp, #0
    5d3e:	60f8      	str	r0, [r7, #12]
    5d40:	460b      	mov	r3, r1
    5d42:	72fb      	strb	r3, [r7, #11]
{
    for (int i=0; i<nbLigthBarrier; i++)
    5d44:	f04f 0300 	mov.w	r3, #0	; 0x0
    5d48:	61fb      	str	r3, [r7, #28]
    5d4a:	e032      	b.n	5db2 <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x7a>
    {
        if(ligthBarriers[i]->getName() == name)
    5d4c:	68fb      	ldr	r3, [r7, #12]
    5d4e:	695a      	ldr	r2, [r3, #20]
    5d50:	69fb      	ldr	r3, [r7, #28]
    5d52:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d56:	4413      	add	r3, r2
    5d58:	681b      	ldr	r3, [r3, #0]
    5d5a:	4618      	mov	r0, r3
    5d5c:	f006 f87e 	bl	be5c <_ZN18LigthBarrierSensor7getNameEv>
    5d60:	4603      	mov	r3, r0
    5d62:	461a      	mov	r2, r3
    5d64:	7afb      	ldrb	r3, [r7, #11]
    5d66:	4293      	cmp	r3, r2
    5d68:	bf14      	ite	ne
    5d6a:	2300      	movne	r3, #0
    5d6c:	2301      	moveq	r3, #1
    5d6e:	b2db      	uxtb	r3, r3
    5d70:	2b00      	cmp	r3, #0
    5d72:	d01a      	beq.n	5daa <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x72>
        {
            return ligthBarriers[i]->getValue().b;
    5d74:	68fb      	ldr	r3, [r7, #12]
    5d76:	695a      	ldr	r2, [r3, #20]
    5d78:	69fb      	ldr	r3, [r7, #28]
    5d7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d7e:	4413      	add	r3, r2
    5d80:	681b      	ldr	r3, [r3, #0]
    5d82:	681b      	ldr	r3, [r3, #0]
    5d84:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5d88:	f8d3 c000 	ldr.w	ip, [r3]
    5d8c:	68fb      	ldr	r3, [r7, #12]
    5d8e:	695a      	ldr	r2, [r3, #20]
    5d90:	69fb      	ldr	r3, [r7, #28]
    5d92:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d96:	4413      	add	r3, r2
    5d98:	681a      	ldr	r2, [r3, #0]
    5d9a:	f107 0310 	add.w	r3, r7, #16	; 0x10
    5d9e:	4618      	mov	r0, r3
    5da0:	4611      	mov	r1, r2
    5da2:	47e0      	blx	ip
    5da4:	7e3b      	ldrb	r3, [r7, #24]
    5da6:	607b      	str	r3, [r7, #4]
    5da8:	e00b      	b.n	5dc2 <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x8a>
    return ligthBarrierNameVector;
}

bool Sensors::detectedLigthBarrier(LigthBarrierSensor::LigthBarrierName name)
{
    for (int i=0; i<nbLigthBarrier; i++)
    5daa:	69fb      	ldr	r3, [r7, #28]
    5dac:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5db0:	61fb      	str	r3, [r7, #28]
    5db2:	68fb      	ldr	r3, [r7, #12]
    5db4:	699a      	ldr	r2, [r3, #24]
    5db6:	69fb      	ldr	r3, [r7, #28]
    5db8:	429a      	cmp	r2, r3
    5dba:	dcc7      	bgt.n	5d4c <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x14>
        if(ligthBarriers[i]->getName() == name)
        {
            return ligthBarriers[i]->getValue().b;
        }
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
    5dbc:	f04f 0300 	mov.w	r3, #0	; 0x0
    5dc0:	607b      	str	r3, [r7, #4]
    5dc2:	687b      	ldr	r3, [r7, #4]
}
    5dc4:	4618      	mov	r0, r3
    5dc6:	f107 0720 	add.w	r7, r7, #32	; 0x20
    5dca:	46bd      	mov	sp, r7
    5dcc:	bd80      	pop	{r7, pc}
    5dce:	46c0      	nop			(mov r8, r8)

00005dd0 <_ZN7Sensors20detectedLigthBarrierEv>:
    }
    return -1;
}

#ifdef ROBOTHW
Sensors::LigthBarrierNameVector* Sensors::detectedLigthBarrier()
    5dd0:	b590      	push	{r4, r7, lr}
    5dd2:	b089      	sub	sp, #36
    5dd4:	af00      	add	r7, sp, #0
    5dd6:	6078      	str	r0, [r7, #4]
{
    ligthBarrierNameVector->reset();
    5dd8:	687b      	ldr	r3, [r7, #4]
    5dda:	6adb      	ldr	r3, [r3, #44]
    5ddc:	4618      	mov	r0, r3
    5dde:	f016 f861 	bl	1bea4 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE5resetEv>
    for (int i=0; i<nbLigthBarrier; i++)
    5de2:	f04f 0300 	mov.w	r3, #0	; 0x0
    5de6:	61fb      	str	r3, [r7, #28]
    5de8:	e032      	b.n	5e50 <_ZN7Sensors20detectedLigthBarrierEv+0x80>
    {
        if(ligthBarriers[i]->getValue().b)
    5dea:	687b      	ldr	r3, [r7, #4]
    5dec:	695a      	ldr	r2, [r3, #20]
    5dee:	69fb      	ldr	r3, [r7, #28]
    5df0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5df4:	4413      	add	r3, r2
    5df6:	681b      	ldr	r3, [r3, #0]
    5df8:	681b      	ldr	r3, [r3, #0]
    5dfa:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5dfe:	f8d3 c000 	ldr.w	ip, [r3]
    5e02:	687b      	ldr	r3, [r7, #4]
    5e04:	695a      	ldr	r2, [r3, #20]
    5e06:	69fb      	ldr	r3, [r7, #28]
    5e08:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e0c:	4413      	add	r3, r2
    5e0e:	681a      	ldr	r2, [r3, #0]
    5e10:	f107 030c 	add.w	r3, r7, #12	; 0xc
    5e14:	4618      	mov	r0, r3
    5e16:	4611      	mov	r1, r2
    5e18:	47e0      	blx	ip
    5e1a:	7d3b      	ldrb	r3, [r7, #20]
    5e1c:	2b00      	cmp	r3, #0
    5e1e:	d013      	beq.n	5e48 <_ZN7Sensors20detectedLigthBarrierEv+0x78>
        {
            ligthBarrierNameVector->push_back(ligthBarriers[i]->getName());
    5e20:	687b      	ldr	r3, [r7, #4]
    5e22:	6adc      	ldr	r4, [r3, #44]
    5e24:	687b      	ldr	r3, [r7, #4]
    5e26:	695a      	ldr	r2, [r3, #20]
    5e28:	69fb      	ldr	r3, [r7, #28]
    5e2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e2e:	4413      	add	r3, r2
    5e30:	681b      	ldr	r3, [r3, #0]
    5e32:	4618      	mov	r0, r3
    5e34:	f006 f812 	bl	be5c <_ZN18LigthBarrierSensor7getNameEv>
    5e38:	4603      	mov	r3, r0
    5e3a:	76fb      	strb	r3, [r7, #27]
    5e3c:	f107 031b 	add.w	r3, r7, #27	; 0x1b
    5e40:	4620      	mov	r0, r4
    5e42:	4619      	mov	r1, r3
    5e44:	f016 f8a2 	bl	1bf8c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_>

#ifdef ROBOTHW
Sensors::LigthBarrierNameVector* Sensors::detectedLigthBarrier()
{
    ligthBarrierNameVector->reset();
    for (int i=0; i<nbLigthBarrier; i++)
    5e48:	69fb      	ldr	r3, [r7, #28]
    5e4a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5e4e:	61fb      	str	r3, [r7, #28]
    5e50:	687b      	ldr	r3, [r7, #4]
    5e52:	699a      	ldr	r2, [r3, #24]
    5e54:	69fb      	ldr	r3, [r7, #28]
    5e56:	429a      	cmp	r2, r3
    5e58:	dcc7      	bgt.n	5dea <_ZN7Sensors20detectedLigthBarrierEv+0x1a>
        {
            ligthBarrierNameVector->push_back(ligthBarriers[i]->getName());
        }
    }
//    ligthBarrierNameVector->resize();
    return ligthBarrierNameVector;
    5e5a:	687b      	ldr	r3, [r7, #4]
    5e5c:	6adb      	ldr	r3, [r3, #44]
}
    5e5e:	4618      	mov	r0, r3
    5e60:	f107 0724 	add.w	r7, r7, #36	; 0x24
    5e64:	46bd      	mov	sp, r7
    5e66:	bd90      	pop	{r4, r7, pc}

00005e68 <_ZN7Sensors18getValueUltrasoundEt>:
    return Sensors::sensors;
}



Sensors::OutputSensorVector* Sensors::getValueUltrasound(uint16_t distance)
    5e68:	b590      	push	{r4, r7, lr}
    5e6a:	b087      	sub	sp, #28
    5e6c:	af00      	add	r7, sp, #0
    5e6e:	6078      	str	r0, [r7, #4]
    5e70:	460b      	mov	r3, r1
    5e72:	807b      	strh	r3, [r7, #2]
{
    outputSensorVector->reset();
    5e74:	687b      	ldr	r3, [r7, #4]
    5e76:	6b1b      	ldr	r3, [r3, #48]
    5e78:	4618      	mov	r0, r3
    5e7a:	f016 f805 	bl	1be88 <_ZN6vectorIN6Sensor12OutputSensorEE5resetEv>
    for (int i = 0; i < nbUltrasound; i++)
    5e7e:	f04f 0300 	mov.w	r3, #0	; 0x0
    5e82:	617b      	str	r3, [r7, #20]
    5e84:	e030      	b.n	5ee8 <_ZN7Sensors18getValueUltrasoundEt+0x80>
    {
        Sensor::OutputSensor v = ultrasounds[i]->getValue();
    5e86:	687b      	ldr	r3, [r7, #4]
    5e88:	68da      	ldr	r2, [r3, #12]
    5e8a:	697b      	ldr	r3, [r7, #20]
    5e8c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e90:	4413      	add	r3, r2
    5e92:	681b      	ldr	r3, [r3, #0]
    5e94:	681b      	ldr	r3, [r3, #0]
    5e96:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5e9a:	f8d3 c000 	ldr.w	ip, [r3]
    5e9e:	687b      	ldr	r3, [r7, #4]
    5ea0:	68da      	ldr	r2, [r3, #12]
    5ea2:	697b      	ldr	r3, [r7, #20]
    5ea4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ea8:	4413      	add	r3, r2
    5eaa:	681a      	ldr	r2, [r3, #0]
    5eac:	f107 0308 	add.w	r3, r7, #8	; 0x8
    5eb0:	4618      	mov	r0, r3
    5eb2:	4611      	mov	r1, r2
    5eb4:	47e0      	blx	ip
         if (v.f < distance)
    5eb6:	68fc      	ldr	r4, [r7, #12]
    5eb8:	887b      	ldrh	r3, [r7, #2]
    5eba:	4618      	mov	r0, r3
    5ebc:	f014 fd42 	bl	1a944 <__aeabi_i2f>
    5ec0:	4603      	mov	r3, r0
    5ec2:	4620      	mov	r0, r4
    5ec4:	4619      	mov	r1, r3
    5ec6:	f014 ff2d 	bl	1ad24 <__aeabi_fcmplt>
    5eca:	4603      	mov	r3, r0
    5ecc:	2b00      	cmp	r3, #0
    5ece:	d007      	beq.n	5ee0 <_ZN7Sensors18getValueUltrasoundEt+0x78>
         {
             outputSensorVector->push_back(v);
    5ed0:	687b      	ldr	r3, [r7, #4]
    5ed2:	6b1b      	ldr	r3, [r3, #48]
    5ed4:	f107 0208 	add.w	r2, r7, #8	; 0x8
    5ed8:	4618      	mov	r0, r3
    5eda:	4611      	mov	r1, r2
    5edc:	f016 f8b2 	bl	1c044 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_>


Sensors::OutputSensorVector* Sensors::getValueUltrasound(uint16_t distance)
{
    outputSensorVector->reset();
    for (int i = 0; i < nbUltrasound; i++)
    5ee0:	697b      	ldr	r3, [r7, #20]
    5ee2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5ee6:	617b      	str	r3, [r7, #20]
    5ee8:	687b      	ldr	r3, [r7, #4]
    5eea:	691a      	ldr	r2, [r3, #16]
    5eec:	697b      	ldr	r3, [r7, #20]
    5eee:	429a      	cmp	r2, r3
    5ef0:	dcc9      	bgt.n	5e86 <_ZN7Sensors18getValueUltrasoundEt+0x1e>
         {
             outputSensorVector->push_back(v);
         }
    }
//    outputSensorVector->resize();
    return outputSensorVector;
    5ef2:	687b      	ldr	r3, [r7, #4]
    5ef4:	6b1b      	ldr	r3, [r3, #48]
}
    5ef6:	4618      	mov	r0, r3
    5ef8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    5efc:	46bd      	mov	sp, r7
    5efe:	bd90      	pop	{r4, r7, pc}

00005f00 <_ZN7Sensors18getValueUltrasoundEv>:
//    limitSwitchNameVector->resize();
    return limitSwitchNameVector;
}


Sensors::OutputSensorVector* Sensors::getValueUltrasound()
    5f00:	b590      	push	{r4, r7, lr}
    5f02:	b087      	sub	sp, #28
    5f04:	af00      	add	r7, sp, #0
    5f06:	6078      	str	r0, [r7, #4]
{
    outputSensorVector->reset();
    5f08:	687b      	ldr	r3, [r7, #4]
    5f0a:	6b1b      	ldr	r3, [r3, #48]
    5f0c:	4618      	mov	r0, r3
    5f0e:	f015 ffbb 	bl	1be88 <_ZN6vectorIN6Sensor12OutputSensorEE5resetEv>
    for (int i = 0; i < nbUltrasound; i++)
    5f12:	f04f 0300 	mov.w	r3, #0	; 0x0
    5f16:	617b      	str	r3, [r7, #20]
    5f18:	e023      	b.n	5f62 <_ZN7Sensors18getValueUltrasoundEv+0x62>
    {
        outputSensorVector->push_back(ultrasounds[i]->getValue());
    5f1a:	687b      	ldr	r3, [r7, #4]
    5f1c:	6b1c      	ldr	r4, [r3, #48]
    5f1e:	687b      	ldr	r3, [r7, #4]
    5f20:	68da      	ldr	r2, [r3, #12]
    5f22:	697b      	ldr	r3, [r7, #20]
    5f24:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5f28:	4413      	add	r3, r2
    5f2a:	681b      	ldr	r3, [r3, #0]
    5f2c:	681b      	ldr	r3, [r3, #0]
    5f2e:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5f32:	f8d3 c000 	ldr.w	ip, [r3]
    5f36:	687b      	ldr	r3, [r7, #4]
    5f38:	68da      	ldr	r2, [r3, #12]
    5f3a:	697b      	ldr	r3, [r7, #20]
    5f3c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5f40:	4413      	add	r3, r2
    5f42:	681a      	ldr	r2, [r3, #0]
    5f44:	f107 0308 	add.w	r3, r7, #8	; 0x8
    5f48:	4618      	mov	r0, r3
    5f4a:	4611      	mov	r1, r2
    5f4c:	47e0      	blx	ip
    5f4e:	f107 0308 	add.w	r3, r7, #8	; 0x8
    5f52:	4620      	mov	r0, r4
    5f54:	4619      	mov	r1, r3
    5f56:	f016 f875 	bl	1c044 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_>


Sensors::OutputSensorVector* Sensors::getValueUltrasound()
{
    outputSensorVector->reset();
    for (int i = 0; i < nbUltrasound; i++)
    5f5a:	697b      	ldr	r3, [r7, #20]
    5f5c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5f60:	617b      	str	r3, [r7, #20]
    5f62:	687b      	ldr	r3, [r7, #4]
    5f64:	691a      	ldr	r2, [r3, #16]
    5f66:	697b      	ldr	r3, [r7, #20]
    5f68:	429a      	cmp	r2, r3
    5f6a:	dcd6      	bgt.n	5f1a <_ZN7Sensors18getValueUltrasoundEv+0x1a>
    {
        outputSensorVector->push_back(ultrasounds[i]->getValue());
    }
//    outputSensorVector->resize();
    return outputSensorVector;
    5f6c:	687b      	ldr	r3, [r7, #4]
    5f6e:	6b1b      	ldr	r3, [r3, #48]
}
    5f70:	4618      	mov	r0, r3
    5f72:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    5f76:	46bd      	mov	sp, r7
    5f78:	bd90      	pop	{r4, r7, pc}
    5f7a:	46c0      	nop			(mov r8, r8)

00005f7c <_ZN7Sensors19detectedLimitSwitchEv>:
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

#ifdef ROBOTHW
Sensors::LimitSwitchNameVector* Sensors::detectedLimitSwitch()
    5f7c:	b590      	push	{r4, r7, lr}
    5f7e:	b089      	sub	sp, #36
    5f80:	af00      	add	r7, sp, #0
    5f82:	6078      	str	r0, [r7, #4]
{
    limitSwitchNameVector->reset();
    5f84:	687b      	ldr	r3, [r7, #4]
    5f86:	6a9b      	ldr	r3, [r3, #40]
    5f88:	4618      	mov	r0, r3
    5f8a:	f015 ff6f 	bl	1be6c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE5resetEv>
    for (int i = 0; i<nbLimitSwitch; i++)
    5f8e:	f04f 0300 	mov.w	r3, #0	; 0x0
    5f92:	61fb      	str	r3, [r7, #28]
    5f94:	e032      	b.n	5ffc <_ZN7Sensors19detectedLimitSwitchEv+0x80>
    {
        if (limitSwitchs[i]->getValue().b)
    5f96:	687b      	ldr	r3, [r7, #4]
    5f98:	69da      	ldr	r2, [r3, #28]
    5f9a:	69fb      	ldr	r3, [r7, #28]
    5f9c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5fa0:	4413      	add	r3, r2
    5fa2:	681b      	ldr	r3, [r3, #0]
    5fa4:	681b      	ldr	r3, [r3, #0]
    5fa6:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5faa:	f8d3 c000 	ldr.w	ip, [r3]
    5fae:	687b      	ldr	r3, [r7, #4]
    5fb0:	69da      	ldr	r2, [r3, #28]
    5fb2:	69fb      	ldr	r3, [r7, #28]
    5fb4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5fb8:	4413      	add	r3, r2
    5fba:	681a      	ldr	r2, [r3, #0]
    5fbc:	f107 030c 	add.w	r3, r7, #12	; 0xc
    5fc0:	4618      	mov	r0, r3
    5fc2:	4611      	mov	r1, r2
    5fc4:	47e0      	blx	ip
    5fc6:	7d3b      	ldrb	r3, [r7, #20]
    5fc8:	2b00      	cmp	r3, #0
    5fca:	d013      	beq.n	5ff4 <_ZN7Sensors19detectedLimitSwitchEv+0x78>
        {
            limitSwitchNameVector->push_back(limitSwitchs[i]->getName());
    5fcc:	687b      	ldr	r3, [r7, #4]
    5fce:	6a9c      	ldr	r4, [r3, #40]
    5fd0:	687b      	ldr	r3, [r7, #4]
    5fd2:	69da      	ldr	r2, [r3, #28]
    5fd4:	69fb      	ldr	r3, [r7, #28]
    5fd6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5fda:	4413      	add	r3, r2
    5fdc:	681b      	ldr	r3, [r3, #0]
    5fde:	4618      	mov	r0, r3
    5fe0:	f006 f866 	bl	c0b0 <_ZN17LimitSwitchSensor7getNameEv>
    5fe4:	4603      	mov	r3, r0
    5fe6:	76fb      	strb	r3, [r7, #27]
    5fe8:	f107 031b 	add.w	r3, r7, #27	; 0x1b
    5fec:	4620      	mov	r0, r4
    5fee:	4619      	mov	r1, r3
    5ff0:	f016 f8ac 	bl	1c14c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_>

#ifdef ROBOTHW
Sensors::LimitSwitchNameVector* Sensors::detectedLimitSwitch()
{
    limitSwitchNameVector->reset();
    for (int i = 0; i<nbLimitSwitch; i++)
    5ff4:	69fb      	ldr	r3, [r7, #28]
    5ff6:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5ffa:	61fb      	str	r3, [r7, #28]
    5ffc:	687b      	ldr	r3, [r7, #4]
    5ffe:	6a1a      	ldr	r2, [r3, #32]
    6000:	69fb      	ldr	r3, [r7, #28]
    6002:	429a      	cmp	r2, r3
    6004:	dcc7      	bgt.n	5f96 <_ZN7Sensors19detectedLimitSwitchEv+0x1a>
        {
            limitSwitchNameVector->push_back(limitSwitchs[i]->getName());
        }
    }
//    limitSwitchNameVector->resize();
    return limitSwitchNameVector;
    6006:	687b      	ldr	r3, [r7, #4]
    6008:	6a9b      	ldr	r3, [r3, #40]
}
    600a:	4618      	mov	r0, r3
    600c:	f107 0724 	add.w	r7, r7, #36	; 0x24
    6010:	46bd      	mov	sp, r7
    6012:	bd90      	pop	{r4, r7, pc}

00006014 <_ZN7Sensors13detectedSharpEv>:
    #endif
    if (outputSensorVector)
        delete outputSensorVector;
}

Sensors::SharpNameVector*  Sensors::detectedSharp()
    6014:	b590      	push	{r4, r7, lr}
    6016:	b089      	sub	sp, #36
    6018:	af00      	add	r7, sp, #0
    601a:	6078      	str	r0, [r7, #4]
{
    sharpNameVector->reset();
    601c:	687b      	ldr	r3, [r7, #4]
    601e:	6a5b      	ldr	r3, [r3, #36]
    6020:	4618      	mov	r0, r3
    6022:	f015 ff15 	bl	1be50 <_ZN6vectorIN11SharpSensor9SharpNameEE5resetEv>
    for (int i = 0; i< nbSharp; i++)
    6026:	f04f 0300 	mov.w	r3, #0	; 0x0
    602a:	61fb      	str	r3, [r7, #28]
    602c:	e032      	b.n	6094 <_ZN7Sensors13detectedSharpEv+0x80>
    {
       if (sharps[i]->getValue().b)
    602e:	687b      	ldr	r3, [r7, #4]
    6030:	685a      	ldr	r2, [r3, #4]
    6032:	69fb      	ldr	r3, [r7, #28]
    6034:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6038:	4413      	add	r3, r2
    603a:	681b      	ldr	r3, [r3, #0]
    603c:	681b      	ldr	r3, [r3, #0]
    603e:	f103 0308 	add.w	r3, r3, #8	; 0x8
    6042:	f8d3 c000 	ldr.w	ip, [r3]
    6046:	687b      	ldr	r3, [r7, #4]
    6048:	685a      	ldr	r2, [r3, #4]
    604a:	69fb      	ldr	r3, [r7, #28]
    604c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6050:	4413      	add	r3, r2
    6052:	681a      	ldr	r2, [r3, #0]
    6054:	f107 030c 	add.w	r3, r7, #12	; 0xc
    6058:	4618      	mov	r0, r3
    605a:	4611      	mov	r1, r2
    605c:	47e0      	blx	ip
    605e:	7d3b      	ldrb	r3, [r7, #20]
    6060:	2b00      	cmp	r3, #0
    6062:	d013      	beq.n	608c <_ZN7Sensors13detectedSharpEv+0x78>
       {
            sharpNameVector->push_back(sharps[i]->getName());
    6064:	687b      	ldr	r3, [r7, #4]
    6066:	6a5c      	ldr	r4, [r3, #36]
    6068:	687b      	ldr	r3, [r7, #4]
    606a:	685a      	ldr	r2, [r3, #4]
    606c:	69fb      	ldr	r3, [r7, #28]
    606e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6072:	4413      	add	r3, r2
    6074:	681b      	ldr	r3, [r3, #0]
    6076:	4618      	mov	r0, r3
    6078:	f006 fe62 	bl	cd40 <_ZN11SharpSensor7getNameEv>
    607c:	4603      	mov	r3, r0
    607e:	76fb      	strb	r3, [r7, #27]
    6080:	f107 031b 	add.w	r3, r7, #27	; 0x1b
    6084:	4620      	mov	r0, r4
    6086:	4619      	mov	r1, r3
    6088:	f016 f8bc 	bl	1c204 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_>
}

Sensors::SharpNameVector*  Sensors::detectedSharp()
{
    sharpNameVector->reset();
    for (int i = 0; i< nbSharp; i++)
    608c:	69fb      	ldr	r3, [r7, #28]
    608e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6092:	61fb      	str	r3, [r7, #28]
    6094:	687b      	ldr	r3, [r7, #4]
    6096:	689a      	ldr	r2, [r3, #8]
    6098:	69fb      	ldr	r3, [r7, #28]
    609a:	429a      	cmp	r2, r3
    609c:	dcc7      	bgt.n	602e <_ZN7Sensors13detectedSharpEv+0x1a>
       {
            sharpNameVector->push_back(sharps[i]->getName());
       }
    }
   // sharpNameVector->resize();
    return sharpNameVector;
    609e:	687b      	ldr	r3, [r7, #4]
    60a0:	6a5b      	ldr	r3, [r3, #36]
}
    60a2:	4618      	mov	r0, r3
    60a4:	f107 0724 	add.w	r7, r7, #36	; 0x24
    60a8:	46bd      	mov	sp, r7
    60aa:	bd90      	pop	{r4, r7, pc}

000060ac <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE>:
//    outputSensorVector->resize();
    return outputSensorVector;
}


float Sensors::getValueUltrasound(UltrasoundSensor::UltrasoundName name)
    60ac:	b580      	push	{r7, lr}
    60ae:	b08c      	sub	sp, #48
    60b0:	af00      	add	r7, sp, #0
    60b2:	60f8      	str	r0, [r7, #12]
    60b4:	460b      	mov	r3, r1
    60b6:	72fb      	strb	r3, [r7, #11]
{
    for (int i = 0; i < nbUltrasound; i++)
    60b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    60bc:	62fb      	str	r3, [r7, #44]
    60be:	e04a      	b.n	6156 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xaa>
    {
        ultrasounds[i]->getValue();
    60c0:	68fb      	ldr	r3, [r7, #12]
    60c2:	68da      	ldr	r2, [r3, #12]
    60c4:	6afb      	ldr	r3, [r7, #44]
    60c6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    60ca:	4413      	add	r3, r2
    60cc:	681b      	ldr	r3, [r3, #0]
    60ce:	681b      	ldr	r3, [r3, #0]
    60d0:	f103 0308 	add.w	r3, r3, #8	; 0x8
    60d4:	f8d3 c000 	ldr.w	ip, [r3]
    60d8:	68fb      	ldr	r3, [r7, #12]
    60da:	68da      	ldr	r2, [r3, #12]
    60dc:	6afb      	ldr	r3, [r7, #44]
    60de:	ea4f 0383 	mov.w	r3, r3, lsl #2
    60e2:	4413      	add	r3, r2
    60e4:	681a      	ldr	r2, [r3, #0]
    60e6:	f107 0314 	add.w	r3, r7, #20	; 0x14
    60ea:	4618      	mov	r0, r3
    60ec:	4611      	mov	r1, r2
    60ee:	47e0      	blx	ip
         if (ultrasounds[i]->getName() == name)
    60f0:	68fb      	ldr	r3, [r7, #12]
    60f2:	68da      	ldr	r2, [r3, #12]
    60f4:	6afb      	ldr	r3, [r7, #44]
    60f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    60fa:	4413      	add	r3, r2
    60fc:	681b      	ldr	r3, [r3, #0]
    60fe:	4618      	mov	r0, r3
    6100:	f007 fa3e 	bl	d580 <_ZN16UltrasoundSensor7getNameEv>
    6104:	4603      	mov	r3, r0
    6106:	461a      	mov	r2, r3
    6108:	7afb      	ldrb	r3, [r7, #11]
    610a:	4293      	cmp	r3, r2
    610c:	bf14      	ite	ne
    610e:	2300      	movne	r3, #0
    6110:	2301      	moveq	r3, #1
    6112:	b2db      	uxtb	r3, r3
    6114:	2b00      	cmp	r3, #0
    6116:	d01a      	beq.n	614e <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xa2>
         {
             return ultrasounds[i]->getValue().f;
    6118:	68fb      	ldr	r3, [r7, #12]
    611a:	68da      	ldr	r2, [r3, #12]
    611c:	6afb      	ldr	r3, [r7, #44]
    611e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6122:	4413      	add	r3, r2
    6124:	681b      	ldr	r3, [r3, #0]
    6126:	681b      	ldr	r3, [r3, #0]
    6128:	f103 0308 	add.w	r3, r3, #8	; 0x8
    612c:	f8d3 c000 	ldr.w	ip, [r3]
    6130:	68fb      	ldr	r3, [r7, #12]
    6132:	68da      	ldr	r2, [r3, #12]
    6134:	6afb      	ldr	r3, [r7, #44]
    6136:	ea4f 0383 	mov.w	r3, r3, lsl #2
    613a:	4413      	add	r3, r2
    613c:	681a      	ldr	r2, [r3, #0]
    613e:	f107 0320 	add.w	r3, r7, #32	; 0x20
    6142:	4618      	mov	r0, r3
    6144:	4611      	mov	r1, r2
    6146:	47e0      	blx	ip
    6148:	6a7b      	ldr	r3, [r7, #36]
    614a:	607b      	str	r3, [r7, #4]
    614c:	e00a      	b.n	6164 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xb8>
}


float Sensors::getValueUltrasound(UltrasoundSensor::UltrasoundName name)
{
    for (int i = 0; i < nbUltrasound; i++)
    614e:	6afb      	ldr	r3, [r7, #44]
    6150:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6154:	62fb      	str	r3, [r7, #44]
    6156:	68fb      	ldr	r3, [r7, #12]
    6158:	691a      	ldr	r2, [r3, #16]
    615a:	6afb      	ldr	r3, [r7, #44]
    615c:	429a      	cmp	r2, r3
    615e:	dcaf      	bgt.n	60c0 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0x14>
         if (ultrasounds[i]->getName() == name)
         {
             return ultrasounds[i]->getValue().f;
         }
    }
    return -1;
    6160:	4b03      	ldr	r3, [pc, #12]	(6170 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xc4>)
    6162:	607b      	str	r3, [r7, #4]
    6164:	687b      	ldr	r3, [r7, #4]
}
    6166:	4618      	mov	r0, r3
    6168:	f107 0730 	add.w	r7, r7, #48	; 0x30
    616c:	46bd      	mov	sp, r7
    616e:	bd80      	pop	{r7, pc}
    6170:	bf800000 	.word	0xbf800000

00006174 <_ZN7SensorsD0Ev>:
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}

Sensors::~Sensors()
    6174:	b580      	push	{r7, lr}
    6176:	b086      	sub	sp, #24
    6178:	af00      	add	r7, sp, #0
    617a:	6078      	str	r0, [r7, #4]
    617c:	687b      	ldr	r3, [r7, #4]
    617e:	4a92      	ldr	r2, [pc, #584]	(63c8 <_ZN7SensorsD0Ev+0x254>)
    6180:	601a      	str	r2, [r3, #0]
{
    for (int i = 0; i< nbSharp; i++)
    6182:	f04f 0300 	mov.w	r3, #0	; 0x0
    6186:	60bb      	str	r3, [r7, #8]
    6188:	e020      	b.n	61cc <_ZN7SensorsD0Ev+0x58>
        delete sharps[i];
    618a:	687b      	ldr	r3, [r7, #4]
    618c:	685a      	ldr	r2, [r3, #4]
    618e:	68bb      	ldr	r3, [r7, #8]
    6190:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6194:	4413      	add	r3, r2
    6196:	681b      	ldr	r3, [r3, #0]
    6198:	2b00      	cmp	r3, #0
    619a:	d013      	beq.n	61c4 <_ZN7SensorsD0Ev+0x50>
    619c:	687b      	ldr	r3, [r7, #4]
    619e:	685a      	ldr	r2, [r3, #4]
    61a0:	68bb      	ldr	r3, [r7, #8]
    61a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    61a6:	4413      	add	r3, r2
    61a8:	681b      	ldr	r3, [r3, #0]
    61aa:	681b      	ldr	r3, [r3, #0]
    61ac:	f103 0304 	add.w	r3, r3, #4	; 0x4
    61b0:	6819      	ldr	r1, [r3, #0]
    61b2:	687b      	ldr	r3, [r7, #4]
    61b4:	685a      	ldr	r2, [r3, #4]
    61b6:	68bb      	ldr	r3, [r7, #8]
    61b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    61bc:	4413      	add	r3, r2
    61be:	681b      	ldr	r3, [r3, #0]
    61c0:	4618      	mov	r0, r3
    61c2:	4788      	blx	r1
 #endif //ROBOTHW
}

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
    61c4:	68bb      	ldr	r3, [r7, #8]
    61c6:	f103 0301 	add.w	r3, r3, #1	; 0x1
    61ca:	60bb      	str	r3, [r7, #8]
    61cc:	687b      	ldr	r3, [r7, #4]
    61ce:	689a      	ldr	r2, [r3, #8]
    61d0:	68bb      	ldr	r3, [r7, #8]
    61d2:	429a      	cmp	r2, r3
    61d4:	dcd9      	bgt.n	618a <_ZN7SensorsD0Ev+0x16>
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    61d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    61da:	60fb      	str	r3, [r7, #12]
    61dc:	e020      	b.n	6220 <_ZN7SensorsD0Ev+0xac>
        delete ultrasounds[i];
    61de:	687b      	ldr	r3, [r7, #4]
    61e0:	68da      	ldr	r2, [r3, #12]
    61e2:	68fb      	ldr	r3, [r7, #12]
    61e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    61e8:	4413      	add	r3, r2
    61ea:	681b      	ldr	r3, [r3, #0]
    61ec:	2b00      	cmp	r3, #0
    61ee:	d013      	beq.n	6218 <_ZN7SensorsD0Ev+0xa4>
    61f0:	687b      	ldr	r3, [r7, #4]
    61f2:	68da      	ldr	r2, [r3, #12]
    61f4:	68fb      	ldr	r3, [r7, #12]
    61f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    61fa:	4413      	add	r3, r2
    61fc:	681b      	ldr	r3, [r3, #0]
    61fe:	681b      	ldr	r3, [r3, #0]
    6200:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6204:	6819      	ldr	r1, [r3, #0]
    6206:	687b      	ldr	r3, [r7, #4]
    6208:	68da      	ldr	r2, [r3, #12]
    620a:	68fb      	ldr	r3, [r7, #12]
    620c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6210:	4413      	add	r3, r2
    6212:	681b      	ldr	r3, [r3, #0]
    6214:	4618      	mov	r0, r3
    6216:	4788      	blx	r1

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    6218:	68fb      	ldr	r3, [r7, #12]
    621a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    621e:	60fb      	str	r3, [r7, #12]
    6220:	687b      	ldr	r3, [r7, #4]
    6222:	691a      	ldr	r2, [r3, #16]
    6224:	68fb      	ldr	r3, [r7, #12]
    6226:	429a      	cmp	r2, r3
    6228:	dcd9      	bgt.n	61de <_ZN7SensorsD0Ev+0x6a>
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    622a:	f04f 0300 	mov.w	r3, #0	; 0x0
    622e:	613b      	str	r3, [r7, #16]
    6230:	e020      	b.n	6274 <_ZN7SensorsD0Ev+0x100>
        delete limitSwitchs[i];
    6232:	687b      	ldr	r3, [r7, #4]
    6234:	69da      	ldr	r2, [r3, #28]
    6236:	693b      	ldr	r3, [r7, #16]
    6238:	ea4f 0383 	mov.w	r3, r3, lsl #2
    623c:	4413      	add	r3, r2
    623e:	681b      	ldr	r3, [r3, #0]
    6240:	2b00      	cmp	r3, #0
    6242:	d013      	beq.n	626c <_ZN7SensorsD0Ev+0xf8>
    6244:	687b      	ldr	r3, [r7, #4]
    6246:	69da      	ldr	r2, [r3, #28]
    6248:	693b      	ldr	r3, [r7, #16]
    624a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    624e:	4413      	add	r3, r2
    6250:	681b      	ldr	r3, [r3, #0]
    6252:	681b      	ldr	r3, [r3, #0]
    6254:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6258:	6819      	ldr	r1, [r3, #0]
    625a:	687b      	ldr	r3, [r7, #4]
    625c:	69da      	ldr	r2, [r3, #28]
    625e:	693b      	ldr	r3, [r7, #16]
    6260:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6264:	4413      	add	r3, r2
    6266:	681b      	ldr	r3, [r3, #0]
    6268:	4618      	mov	r0, r3
    626a:	4788      	blx	r1
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    626c:	693b      	ldr	r3, [r7, #16]
    626e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6272:	613b      	str	r3, [r7, #16]
    6274:	687b      	ldr	r3, [r7, #4]
    6276:	6a1a      	ldr	r2, [r3, #32]
    6278:	693b      	ldr	r3, [r7, #16]
    627a:	429a      	cmp	r2, r3
    627c:	dcd9      	bgt.n	6232 <_ZN7SensorsD0Ev+0xbe>
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    627e:	f04f 0300 	mov.w	r3, #0	; 0x0
    6282:	617b      	str	r3, [r7, #20]
    6284:	e020      	b.n	62c8 <_ZN7SensorsD0Ev+0x154>
        delete ligthBarriers[i];
    6286:	687b      	ldr	r3, [r7, #4]
    6288:	695a      	ldr	r2, [r3, #20]
    628a:	697b      	ldr	r3, [r7, #20]
    628c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6290:	4413      	add	r3, r2
    6292:	681b      	ldr	r3, [r3, #0]
    6294:	2b00      	cmp	r3, #0
    6296:	d013      	beq.n	62c0 <_ZN7SensorsD0Ev+0x14c>
    6298:	687b      	ldr	r3, [r7, #4]
    629a:	695a      	ldr	r2, [r3, #20]
    629c:	697b      	ldr	r3, [r7, #20]
    629e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    62a2:	4413      	add	r3, r2
    62a4:	681b      	ldr	r3, [r3, #0]
    62a6:	681b      	ldr	r3, [r3, #0]
    62a8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    62ac:	6819      	ldr	r1, [r3, #0]
    62ae:	687b      	ldr	r3, [r7, #4]
    62b0:	695a      	ldr	r2, [r3, #20]
    62b2:	697b      	ldr	r3, [r7, #20]
    62b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    62b8:	4413      	add	r3, r2
    62ba:	681b      	ldr	r3, [r3, #0]
    62bc:	4618      	mov	r0, r3
    62be:	4788      	blx	r1
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    62c0:	697b      	ldr	r3, [r7, #20]
    62c2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    62c6:	617b      	str	r3, [r7, #20]
    62c8:	687b      	ldr	r3, [r7, #4]
    62ca:	699a      	ldr	r2, [r3, #24]
    62cc:	697b      	ldr	r3, [r7, #20]
    62ce:	429a      	cmp	r2, r3
    62d0:	dcd9      	bgt.n	6286 <_ZN7SensorsD0Ev+0x112>
        delete ligthBarriers[i];
    #endif
    delete[] sharps;
    62d2:	687b      	ldr	r3, [r7, #4]
    62d4:	685b      	ldr	r3, [r3, #4]
    62d6:	2b00      	cmp	r3, #0
    62d8:	d004      	beq.n	62e4 <_ZN7SensorsD0Ev+0x170>
    62da:	687b      	ldr	r3, [r7, #4]
    62dc:	685b      	ldr	r3, [r3, #4]
    62de:	4618      	mov	r0, r3
    62e0:	f008 f8c4 	bl	e46c <_ZdaPv>
    delete[] ultrasounds;
    62e4:	687b      	ldr	r3, [r7, #4]
    62e6:	68db      	ldr	r3, [r3, #12]
    62e8:	2b00      	cmp	r3, #0
    62ea:	d004      	beq.n	62f6 <_ZN7SensorsD0Ev+0x182>
    62ec:	687b      	ldr	r3, [r7, #4]
    62ee:	68db      	ldr	r3, [r3, #12]
    62f0:	4618      	mov	r0, r3
    62f2:	f008 f8bb 	bl	e46c <_ZdaPv>
    #ifdef ROBOTHW
    delete[] limitSwitchs;
    62f6:	687b      	ldr	r3, [r7, #4]
    62f8:	69db      	ldr	r3, [r3, #28]
    62fa:	2b00      	cmp	r3, #0
    62fc:	d004      	beq.n	6308 <_ZN7SensorsD0Ev+0x194>
    62fe:	687b      	ldr	r3, [r7, #4]
    6300:	69db      	ldr	r3, [r3, #28]
    6302:	4618      	mov	r0, r3
    6304:	f008 f8b2 	bl	e46c <_ZdaPv>
    delete[] ligthBarriers;
    6308:	687b      	ldr	r3, [r7, #4]
    630a:	695b      	ldr	r3, [r3, #20]
    630c:	2b00      	cmp	r3, #0
    630e:	d004      	beq.n	631a <_ZN7SensorsD0Ev+0x1a6>
    6310:	687b      	ldr	r3, [r7, #4]
    6312:	695b      	ldr	r3, [r3, #20]
    6314:	4618      	mov	r0, r3
    6316:	f008 f8a9 	bl	e46c <_ZdaPv>
    #endif

    if (sharpNameVector)
    631a:	687b      	ldr	r3, [r7, #4]
    631c:	6a5b      	ldr	r3, [r3, #36]
    631e:	2b00      	cmp	r3, #0
    6320:	d00d      	beq.n	633e <_ZN7SensorsD0Ev+0x1ca>
        delete sharpNameVector;
    6322:	687b      	ldr	r3, [r7, #4]
    6324:	6a5b      	ldr	r3, [r3, #36]
    6326:	2b00      	cmp	r3, #0
    6328:	d009      	beq.n	633e <_ZN7SensorsD0Ev+0x1ca>
    632a:	687b      	ldr	r3, [r7, #4]
    632c:	6a5b      	ldr	r3, [r3, #36]
    632e:	681b      	ldr	r3, [r3, #0]
    6330:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6334:	681a      	ldr	r2, [r3, #0]
    6336:	687b      	ldr	r3, [r7, #4]
    6338:	6a5b      	ldr	r3, [r3, #36]
    633a:	4618      	mov	r0, r3
    633c:	4790      	blx	r2
    #ifdef ROBOTHW
    if (ligthBarrierNameVector)
    633e:	687b      	ldr	r3, [r7, #4]
    6340:	6adb      	ldr	r3, [r3, #44]
    6342:	2b00      	cmp	r3, #0
    6344:	d00d      	beq.n	6362 <_ZN7SensorsD0Ev+0x1ee>
        delete ligthBarrierNameVector;
    6346:	687b      	ldr	r3, [r7, #4]
    6348:	6adb      	ldr	r3, [r3, #44]
    634a:	2b00      	cmp	r3, #0
    634c:	d009      	beq.n	6362 <_ZN7SensorsD0Ev+0x1ee>
    634e:	687b      	ldr	r3, [r7, #4]
    6350:	6adb      	ldr	r3, [r3, #44]
    6352:	681b      	ldr	r3, [r3, #0]
    6354:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6358:	681a      	ldr	r2, [r3, #0]
    635a:	687b      	ldr	r3, [r7, #4]
    635c:	6adb      	ldr	r3, [r3, #44]
    635e:	4618      	mov	r0, r3
    6360:	4790      	blx	r2
    if (limitSwitchNameVector)
    6362:	687b      	ldr	r3, [r7, #4]
    6364:	6a9b      	ldr	r3, [r3, #40]
    6366:	2b00      	cmp	r3, #0
    6368:	d00d      	beq.n	6386 <_ZN7SensorsD0Ev+0x212>
        delete limitSwitchNameVector;
    636a:	687b      	ldr	r3, [r7, #4]
    636c:	6a9b      	ldr	r3, [r3, #40]
    636e:	2b00      	cmp	r3, #0
    6370:	d009      	beq.n	6386 <_ZN7SensorsD0Ev+0x212>
    6372:	687b      	ldr	r3, [r7, #4]
    6374:	6a9b      	ldr	r3, [r3, #40]
    6376:	681b      	ldr	r3, [r3, #0]
    6378:	f103 0304 	add.w	r3, r3, #4	; 0x4
    637c:	681a      	ldr	r2, [r3, #0]
    637e:	687b      	ldr	r3, [r7, #4]
    6380:	6a9b      	ldr	r3, [r3, #40]
    6382:	4618      	mov	r0, r3
    6384:	4790      	blx	r2
    #endif
    if (outputSensorVector)
    6386:	687b      	ldr	r3, [r7, #4]
    6388:	6b1b      	ldr	r3, [r3, #48]
    638a:	2b00      	cmp	r3, #0
    638c:	d00d      	beq.n	63aa <_ZN7SensorsD0Ev+0x236>
        delete outputSensorVector;
    638e:	687b      	ldr	r3, [r7, #4]
    6390:	6b1b      	ldr	r3, [r3, #48]
    6392:	2b00      	cmp	r3, #0
    6394:	d009      	beq.n	63aa <_ZN7SensorsD0Ev+0x236>
    6396:	687b      	ldr	r3, [r7, #4]
    6398:	6b1b      	ldr	r3, [r3, #48]
    639a:	681b      	ldr	r3, [r3, #0]
    639c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    63a0:	681a      	ldr	r2, [r3, #0]
    63a2:	687b      	ldr	r3, [r7, #4]
    63a4:	6b1b      	ldr	r3, [r3, #48]
    63a6:	4618      	mov	r0, r3
    63a8:	4790      	blx	r2
}
    63aa:	f04f 0301 	mov.w	r3, #1	; 0x1
    63ae:	b2db      	uxtb	r3, r3
    63b0:	2b00      	cmp	r3, #0
    63b2:	d002      	beq.n	63ba <_ZN7SensorsD0Ev+0x246>
    63b4:	6878      	ldr	r0, [r7, #4]
    63b6:	f007 ffe1 	bl	e37c <_ZdlPv>
    63ba:	687b      	ldr	r3, [r7, #4]
    63bc:	4618      	mov	r0, r3
    63be:	f107 0718 	add.w	r7, r7, #24	; 0x18
    63c2:	46bd      	mov	sp, r7
    63c4:	bd80      	pop	{r7, pc}
    63c6:	46c0      	nop			(mov r8, r8)
    63c8:	00021808 	.word	0x00021808

000063cc <_ZN7SensorsD1Ev>:
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}

Sensors::~Sensors()
    63cc:	b580      	push	{r7, lr}
    63ce:	b086      	sub	sp, #24
    63d0:	af00      	add	r7, sp, #0
    63d2:	6078      	str	r0, [r7, #4]
    63d4:	687b      	ldr	r3, [r7, #4]
    63d6:	4a92      	ldr	r2, [pc, #584]	(6620 <_ZN7SensorsD1Ev+0x254>)
    63d8:	601a      	str	r2, [r3, #0]
{
    for (int i = 0; i< nbSharp; i++)
    63da:	f04f 0300 	mov.w	r3, #0	; 0x0
    63de:	60bb      	str	r3, [r7, #8]
    63e0:	e020      	b.n	6424 <_ZN7SensorsD1Ev+0x58>
        delete sharps[i];
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	685a      	ldr	r2, [r3, #4]
    63e6:	68bb      	ldr	r3, [r7, #8]
    63e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    63ec:	4413      	add	r3, r2
    63ee:	681b      	ldr	r3, [r3, #0]
    63f0:	2b00      	cmp	r3, #0
    63f2:	d013      	beq.n	641c <_ZN7SensorsD1Ev+0x50>
    63f4:	687b      	ldr	r3, [r7, #4]
    63f6:	685a      	ldr	r2, [r3, #4]
    63f8:	68bb      	ldr	r3, [r7, #8]
    63fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    63fe:	4413      	add	r3, r2
    6400:	681b      	ldr	r3, [r3, #0]
    6402:	681b      	ldr	r3, [r3, #0]
    6404:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6408:	6819      	ldr	r1, [r3, #0]
    640a:	687b      	ldr	r3, [r7, #4]
    640c:	685a      	ldr	r2, [r3, #4]
    640e:	68bb      	ldr	r3, [r7, #8]
    6410:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6414:	4413      	add	r3, r2
    6416:	681b      	ldr	r3, [r3, #0]
    6418:	4618      	mov	r0, r3
    641a:	4788      	blx	r1
 #endif //ROBOTHW
}

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
    641c:	68bb      	ldr	r3, [r7, #8]
    641e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6422:	60bb      	str	r3, [r7, #8]
    6424:	687b      	ldr	r3, [r7, #4]
    6426:	689a      	ldr	r2, [r3, #8]
    6428:	68bb      	ldr	r3, [r7, #8]
    642a:	429a      	cmp	r2, r3
    642c:	dcd9      	bgt.n	63e2 <_ZN7SensorsD1Ev+0x16>
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    642e:	f04f 0300 	mov.w	r3, #0	; 0x0
    6432:	60fb      	str	r3, [r7, #12]
    6434:	e020      	b.n	6478 <_ZN7SensorsD1Ev+0xac>
        delete ultrasounds[i];
    6436:	687b      	ldr	r3, [r7, #4]
    6438:	68da      	ldr	r2, [r3, #12]
    643a:	68fb      	ldr	r3, [r7, #12]
    643c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6440:	4413      	add	r3, r2
    6442:	681b      	ldr	r3, [r3, #0]
    6444:	2b00      	cmp	r3, #0
    6446:	d013      	beq.n	6470 <_ZN7SensorsD1Ev+0xa4>
    6448:	687b      	ldr	r3, [r7, #4]
    644a:	68da      	ldr	r2, [r3, #12]
    644c:	68fb      	ldr	r3, [r7, #12]
    644e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6452:	4413      	add	r3, r2
    6454:	681b      	ldr	r3, [r3, #0]
    6456:	681b      	ldr	r3, [r3, #0]
    6458:	f103 0304 	add.w	r3, r3, #4	; 0x4
    645c:	6819      	ldr	r1, [r3, #0]
    645e:	687b      	ldr	r3, [r7, #4]
    6460:	68da      	ldr	r2, [r3, #12]
    6462:	68fb      	ldr	r3, [r7, #12]
    6464:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6468:	4413      	add	r3, r2
    646a:	681b      	ldr	r3, [r3, #0]
    646c:	4618      	mov	r0, r3
    646e:	4788      	blx	r1

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    6470:	68fb      	ldr	r3, [r7, #12]
    6472:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6476:	60fb      	str	r3, [r7, #12]
    6478:	687b      	ldr	r3, [r7, #4]
    647a:	691a      	ldr	r2, [r3, #16]
    647c:	68fb      	ldr	r3, [r7, #12]
    647e:	429a      	cmp	r2, r3
    6480:	dcd9      	bgt.n	6436 <_ZN7SensorsD1Ev+0x6a>
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    6482:	f04f 0300 	mov.w	r3, #0	; 0x0
    6486:	613b      	str	r3, [r7, #16]
    6488:	e020      	b.n	64cc <_ZN7SensorsD1Ev+0x100>
        delete limitSwitchs[i];
    648a:	687b      	ldr	r3, [r7, #4]
    648c:	69da      	ldr	r2, [r3, #28]
    648e:	693b      	ldr	r3, [r7, #16]
    6490:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6494:	4413      	add	r3, r2
    6496:	681b      	ldr	r3, [r3, #0]
    6498:	2b00      	cmp	r3, #0
    649a:	d013      	beq.n	64c4 <_ZN7SensorsD1Ev+0xf8>
    649c:	687b      	ldr	r3, [r7, #4]
    649e:	69da      	ldr	r2, [r3, #28]
    64a0:	693b      	ldr	r3, [r7, #16]
    64a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    64a6:	4413      	add	r3, r2
    64a8:	681b      	ldr	r3, [r3, #0]
    64aa:	681b      	ldr	r3, [r3, #0]
    64ac:	f103 0304 	add.w	r3, r3, #4	; 0x4
    64b0:	6819      	ldr	r1, [r3, #0]
    64b2:	687b      	ldr	r3, [r7, #4]
    64b4:	69da      	ldr	r2, [r3, #28]
    64b6:	693b      	ldr	r3, [r7, #16]
    64b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    64bc:	4413      	add	r3, r2
    64be:	681b      	ldr	r3, [r3, #0]
    64c0:	4618      	mov	r0, r3
    64c2:	4788      	blx	r1
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    64c4:	693b      	ldr	r3, [r7, #16]
    64c6:	f103 0301 	add.w	r3, r3, #1	; 0x1
    64ca:	613b      	str	r3, [r7, #16]
    64cc:	687b      	ldr	r3, [r7, #4]
    64ce:	6a1a      	ldr	r2, [r3, #32]
    64d0:	693b      	ldr	r3, [r7, #16]
    64d2:	429a      	cmp	r2, r3
    64d4:	dcd9      	bgt.n	648a <_ZN7SensorsD1Ev+0xbe>
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    64d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    64da:	617b      	str	r3, [r7, #20]
    64dc:	e020      	b.n	6520 <_ZN7SensorsD1Ev+0x154>
        delete ligthBarriers[i];
    64de:	687b      	ldr	r3, [r7, #4]
    64e0:	695a      	ldr	r2, [r3, #20]
    64e2:	697b      	ldr	r3, [r7, #20]
    64e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    64e8:	4413      	add	r3, r2
    64ea:	681b      	ldr	r3, [r3, #0]
    64ec:	2b00      	cmp	r3, #0
    64ee:	d013      	beq.n	6518 <_ZN7SensorsD1Ev+0x14c>
    64f0:	687b      	ldr	r3, [r7, #4]
    64f2:	695a      	ldr	r2, [r3, #20]
    64f4:	697b      	ldr	r3, [r7, #20]
    64f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    64fa:	4413      	add	r3, r2
    64fc:	681b      	ldr	r3, [r3, #0]
    64fe:	681b      	ldr	r3, [r3, #0]
    6500:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6504:	6819      	ldr	r1, [r3, #0]
    6506:	687b      	ldr	r3, [r7, #4]
    6508:	695a      	ldr	r2, [r3, #20]
    650a:	697b      	ldr	r3, [r7, #20]
    650c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6510:	4413      	add	r3, r2
    6512:	681b      	ldr	r3, [r3, #0]
    6514:	4618      	mov	r0, r3
    6516:	4788      	blx	r1
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6518:	697b      	ldr	r3, [r7, #20]
    651a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    651e:	617b      	str	r3, [r7, #20]
    6520:	687b      	ldr	r3, [r7, #4]
    6522:	699a      	ldr	r2, [r3, #24]
    6524:	697b      	ldr	r3, [r7, #20]
    6526:	429a      	cmp	r2, r3
    6528:	dcd9      	bgt.n	64de <_ZN7SensorsD1Ev+0x112>
        delete ligthBarriers[i];
    #endif
    delete[] sharps;
    652a:	687b      	ldr	r3, [r7, #4]
    652c:	685b      	ldr	r3, [r3, #4]
    652e:	2b00      	cmp	r3, #0
    6530:	d004      	beq.n	653c <_ZN7SensorsD1Ev+0x170>
    6532:	687b      	ldr	r3, [r7, #4]
    6534:	685b      	ldr	r3, [r3, #4]
    6536:	4618      	mov	r0, r3
    6538:	f007 ff98 	bl	e46c <_ZdaPv>
    delete[] ultrasounds;
    653c:	687b      	ldr	r3, [r7, #4]
    653e:	68db      	ldr	r3, [r3, #12]
    6540:	2b00      	cmp	r3, #0
    6542:	d004      	beq.n	654e <_ZN7SensorsD1Ev+0x182>
    6544:	687b      	ldr	r3, [r7, #4]
    6546:	68db      	ldr	r3, [r3, #12]
    6548:	4618      	mov	r0, r3
    654a:	f007 ff8f 	bl	e46c <_ZdaPv>
    #ifdef ROBOTHW
    delete[] limitSwitchs;
    654e:	687b      	ldr	r3, [r7, #4]
    6550:	69db      	ldr	r3, [r3, #28]
    6552:	2b00      	cmp	r3, #0
    6554:	d004      	beq.n	6560 <_ZN7SensorsD1Ev+0x194>
    6556:	687b      	ldr	r3, [r7, #4]
    6558:	69db      	ldr	r3, [r3, #28]
    655a:	4618      	mov	r0, r3
    655c:	f007 ff86 	bl	e46c <_ZdaPv>
    delete[] ligthBarriers;
    6560:	687b      	ldr	r3, [r7, #4]
    6562:	695b      	ldr	r3, [r3, #20]
    6564:	2b00      	cmp	r3, #0
    6566:	d004      	beq.n	6572 <_ZN7SensorsD1Ev+0x1a6>
    6568:	687b      	ldr	r3, [r7, #4]
    656a:	695b      	ldr	r3, [r3, #20]
    656c:	4618      	mov	r0, r3
    656e:	f007 ff7d 	bl	e46c <_ZdaPv>
    #endif

    if (sharpNameVector)
    6572:	687b      	ldr	r3, [r7, #4]
    6574:	6a5b      	ldr	r3, [r3, #36]
    6576:	2b00      	cmp	r3, #0
    6578:	d00d      	beq.n	6596 <_ZN7SensorsD1Ev+0x1ca>
        delete sharpNameVector;
    657a:	687b      	ldr	r3, [r7, #4]
    657c:	6a5b      	ldr	r3, [r3, #36]
    657e:	2b00      	cmp	r3, #0
    6580:	d009      	beq.n	6596 <_ZN7SensorsD1Ev+0x1ca>
    6582:	687b      	ldr	r3, [r7, #4]
    6584:	6a5b      	ldr	r3, [r3, #36]
    6586:	681b      	ldr	r3, [r3, #0]
    6588:	f103 0304 	add.w	r3, r3, #4	; 0x4
    658c:	681a      	ldr	r2, [r3, #0]
    658e:	687b      	ldr	r3, [r7, #4]
    6590:	6a5b      	ldr	r3, [r3, #36]
    6592:	4618      	mov	r0, r3
    6594:	4790      	blx	r2
    #ifdef ROBOTHW
    if (ligthBarrierNameVector)
    6596:	687b      	ldr	r3, [r7, #4]
    6598:	6adb      	ldr	r3, [r3, #44]
    659a:	2b00      	cmp	r3, #0
    659c:	d00d      	beq.n	65ba <_ZN7SensorsD1Ev+0x1ee>
        delete ligthBarrierNameVector;
    659e:	687b      	ldr	r3, [r7, #4]
    65a0:	6adb      	ldr	r3, [r3, #44]
    65a2:	2b00      	cmp	r3, #0
    65a4:	d009      	beq.n	65ba <_ZN7SensorsD1Ev+0x1ee>
    65a6:	687b      	ldr	r3, [r7, #4]
    65a8:	6adb      	ldr	r3, [r3, #44]
    65aa:	681b      	ldr	r3, [r3, #0]
    65ac:	f103 0304 	add.w	r3, r3, #4	; 0x4
    65b0:	681a      	ldr	r2, [r3, #0]
    65b2:	687b      	ldr	r3, [r7, #4]
    65b4:	6adb      	ldr	r3, [r3, #44]
    65b6:	4618      	mov	r0, r3
    65b8:	4790      	blx	r2
    if (limitSwitchNameVector)
    65ba:	687b      	ldr	r3, [r7, #4]
    65bc:	6a9b      	ldr	r3, [r3, #40]
    65be:	2b00      	cmp	r3, #0
    65c0:	d00d      	beq.n	65de <_ZN7SensorsD1Ev+0x212>
        delete limitSwitchNameVector;
    65c2:	687b      	ldr	r3, [r7, #4]
    65c4:	6a9b      	ldr	r3, [r3, #40]
    65c6:	2b00      	cmp	r3, #0
    65c8:	d009      	beq.n	65de <_ZN7SensorsD1Ev+0x212>
    65ca:	687b      	ldr	r3, [r7, #4]
    65cc:	6a9b      	ldr	r3, [r3, #40]
    65ce:	681b      	ldr	r3, [r3, #0]
    65d0:	f103 0304 	add.w	r3, r3, #4	; 0x4
    65d4:	681a      	ldr	r2, [r3, #0]
    65d6:	687b      	ldr	r3, [r7, #4]
    65d8:	6a9b      	ldr	r3, [r3, #40]
    65da:	4618      	mov	r0, r3
    65dc:	4790      	blx	r2
    #endif
    if (outputSensorVector)
    65de:	687b      	ldr	r3, [r7, #4]
    65e0:	6b1b      	ldr	r3, [r3, #48]
    65e2:	2b00      	cmp	r3, #0
    65e4:	d00d      	beq.n	6602 <_ZN7SensorsD1Ev+0x236>
        delete outputSensorVector;
    65e6:	687b      	ldr	r3, [r7, #4]
    65e8:	6b1b      	ldr	r3, [r3, #48]
    65ea:	2b00      	cmp	r3, #0
    65ec:	d009      	beq.n	6602 <_ZN7SensorsD1Ev+0x236>
    65ee:	687b      	ldr	r3, [r7, #4]
    65f0:	6b1b      	ldr	r3, [r3, #48]
    65f2:	681b      	ldr	r3, [r3, #0]
    65f4:	f103 0304 	add.w	r3, r3, #4	; 0x4
    65f8:	681a      	ldr	r2, [r3, #0]
    65fa:	687b      	ldr	r3, [r7, #4]
    65fc:	6b1b      	ldr	r3, [r3, #48]
    65fe:	4618      	mov	r0, r3
    6600:	4790      	blx	r2
}
    6602:	f04f 0300 	mov.w	r3, #0	; 0x0
    6606:	b2db      	uxtb	r3, r3
    6608:	2b00      	cmp	r3, #0
    660a:	d002      	beq.n	6612 <_ZN7SensorsD1Ev+0x246>
    660c:	6878      	ldr	r0, [r7, #4]
    660e:	f007 feb5 	bl	e37c <_ZdlPv>
    6612:	687b      	ldr	r3, [r7, #4]
    6614:	4618      	mov	r0, r3
    6616:	f107 0718 	add.w	r7, r7, #24	; 0x18
    661a:	46bd      	mov	sp, r7
    661c:	bd80      	pop	{r7, pc}
    661e:	46c0      	nop			(mov r8, r8)
    6620:	00021808 	.word	0x00021808

00006624 <_ZN7SensorsD2Ev>:
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}

Sensors::~Sensors()
    6624:	b580      	push	{r7, lr}
    6626:	b086      	sub	sp, #24
    6628:	af00      	add	r7, sp, #0
    662a:	6078      	str	r0, [r7, #4]
    662c:	687b      	ldr	r3, [r7, #4]
    662e:	4a92      	ldr	r2, [pc, #584]	(6878 <_ZN7SensorsD2Ev+0x254>)
    6630:	601a      	str	r2, [r3, #0]
{
    for (int i = 0; i< nbSharp; i++)
    6632:	f04f 0300 	mov.w	r3, #0	; 0x0
    6636:	60bb      	str	r3, [r7, #8]
    6638:	e020      	b.n	667c <_ZN7SensorsD2Ev+0x58>
        delete sharps[i];
    663a:	687b      	ldr	r3, [r7, #4]
    663c:	685a      	ldr	r2, [r3, #4]
    663e:	68bb      	ldr	r3, [r7, #8]
    6640:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6644:	4413      	add	r3, r2
    6646:	681b      	ldr	r3, [r3, #0]
    6648:	2b00      	cmp	r3, #0
    664a:	d013      	beq.n	6674 <_ZN7SensorsD2Ev+0x50>
    664c:	687b      	ldr	r3, [r7, #4]
    664e:	685a      	ldr	r2, [r3, #4]
    6650:	68bb      	ldr	r3, [r7, #8]
    6652:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6656:	4413      	add	r3, r2
    6658:	681b      	ldr	r3, [r3, #0]
    665a:	681b      	ldr	r3, [r3, #0]
    665c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6660:	6819      	ldr	r1, [r3, #0]
    6662:	687b      	ldr	r3, [r7, #4]
    6664:	685a      	ldr	r2, [r3, #4]
    6666:	68bb      	ldr	r3, [r7, #8]
    6668:	ea4f 0383 	mov.w	r3, r3, lsl #2
    666c:	4413      	add	r3, r2
    666e:	681b      	ldr	r3, [r3, #0]
    6670:	4618      	mov	r0, r3
    6672:	4788      	blx	r1
 #endif //ROBOTHW
}

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
    6674:	68bb      	ldr	r3, [r7, #8]
    6676:	f103 0301 	add.w	r3, r3, #1	; 0x1
    667a:	60bb      	str	r3, [r7, #8]
    667c:	687b      	ldr	r3, [r7, #4]
    667e:	689a      	ldr	r2, [r3, #8]
    6680:	68bb      	ldr	r3, [r7, #8]
    6682:	429a      	cmp	r2, r3
    6684:	dcd9      	bgt.n	663a <_ZN7SensorsD2Ev+0x16>
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    6686:	f04f 0300 	mov.w	r3, #0	; 0x0
    668a:	60fb      	str	r3, [r7, #12]
    668c:	e020      	b.n	66d0 <_ZN7SensorsD2Ev+0xac>
        delete ultrasounds[i];
    668e:	687b      	ldr	r3, [r7, #4]
    6690:	68da      	ldr	r2, [r3, #12]
    6692:	68fb      	ldr	r3, [r7, #12]
    6694:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6698:	4413      	add	r3, r2
    669a:	681b      	ldr	r3, [r3, #0]
    669c:	2b00      	cmp	r3, #0
    669e:	d013      	beq.n	66c8 <_ZN7SensorsD2Ev+0xa4>
    66a0:	687b      	ldr	r3, [r7, #4]
    66a2:	68da      	ldr	r2, [r3, #12]
    66a4:	68fb      	ldr	r3, [r7, #12]
    66a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    66aa:	4413      	add	r3, r2
    66ac:	681b      	ldr	r3, [r3, #0]
    66ae:	681b      	ldr	r3, [r3, #0]
    66b0:	f103 0304 	add.w	r3, r3, #4	; 0x4
    66b4:	6819      	ldr	r1, [r3, #0]
    66b6:	687b      	ldr	r3, [r7, #4]
    66b8:	68da      	ldr	r2, [r3, #12]
    66ba:	68fb      	ldr	r3, [r7, #12]
    66bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    66c0:	4413      	add	r3, r2
    66c2:	681b      	ldr	r3, [r3, #0]
    66c4:	4618      	mov	r0, r3
    66c6:	4788      	blx	r1

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    66c8:	68fb      	ldr	r3, [r7, #12]
    66ca:	f103 0301 	add.w	r3, r3, #1	; 0x1
    66ce:	60fb      	str	r3, [r7, #12]
    66d0:	687b      	ldr	r3, [r7, #4]
    66d2:	691a      	ldr	r2, [r3, #16]
    66d4:	68fb      	ldr	r3, [r7, #12]
    66d6:	429a      	cmp	r2, r3
    66d8:	dcd9      	bgt.n	668e <_ZN7SensorsD2Ev+0x6a>
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    66da:	f04f 0300 	mov.w	r3, #0	; 0x0
    66de:	613b      	str	r3, [r7, #16]
    66e0:	e020      	b.n	6724 <_ZN7SensorsD2Ev+0x100>
        delete limitSwitchs[i];
    66e2:	687b      	ldr	r3, [r7, #4]
    66e4:	69da      	ldr	r2, [r3, #28]
    66e6:	693b      	ldr	r3, [r7, #16]
    66e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    66ec:	4413      	add	r3, r2
    66ee:	681b      	ldr	r3, [r3, #0]
    66f0:	2b00      	cmp	r3, #0
    66f2:	d013      	beq.n	671c <_ZN7SensorsD2Ev+0xf8>
    66f4:	687b      	ldr	r3, [r7, #4]
    66f6:	69da      	ldr	r2, [r3, #28]
    66f8:	693b      	ldr	r3, [r7, #16]
    66fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    66fe:	4413      	add	r3, r2
    6700:	681b      	ldr	r3, [r3, #0]
    6702:	681b      	ldr	r3, [r3, #0]
    6704:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6708:	6819      	ldr	r1, [r3, #0]
    670a:	687b      	ldr	r3, [r7, #4]
    670c:	69da      	ldr	r2, [r3, #28]
    670e:	693b      	ldr	r3, [r7, #16]
    6710:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6714:	4413      	add	r3, r2
    6716:	681b      	ldr	r3, [r3, #0]
    6718:	4618      	mov	r0, r3
    671a:	4788      	blx	r1
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    671c:	693b      	ldr	r3, [r7, #16]
    671e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6722:	613b      	str	r3, [r7, #16]
    6724:	687b      	ldr	r3, [r7, #4]
    6726:	6a1a      	ldr	r2, [r3, #32]
    6728:	693b      	ldr	r3, [r7, #16]
    672a:	429a      	cmp	r2, r3
    672c:	dcd9      	bgt.n	66e2 <_ZN7SensorsD2Ev+0xbe>
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    672e:	f04f 0300 	mov.w	r3, #0	; 0x0
    6732:	617b      	str	r3, [r7, #20]
    6734:	e020      	b.n	6778 <_ZN7SensorsD2Ev+0x154>
        delete ligthBarriers[i];
    6736:	687b      	ldr	r3, [r7, #4]
    6738:	695a      	ldr	r2, [r3, #20]
    673a:	697b      	ldr	r3, [r7, #20]
    673c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6740:	4413      	add	r3, r2
    6742:	681b      	ldr	r3, [r3, #0]
    6744:	2b00      	cmp	r3, #0
    6746:	d013      	beq.n	6770 <_ZN7SensorsD2Ev+0x14c>
    6748:	687b      	ldr	r3, [r7, #4]
    674a:	695a      	ldr	r2, [r3, #20]
    674c:	697b      	ldr	r3, [r7, #20]
    674e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6752:	4413      	add	r3, r2
    6754:	681b      	ldr	r3, [r3, #0]
    6756:	681b      	ldr	r3, [r3, #0]
    6758:	f103 0304 	add.w	r3, r3, #4	; 0x4
    675c:	6819      	ldr	r1, [r3, #0]
    675e:	687b      	ldr	r3, [r7, #4]
    6760:	695a      	ldr	r2, [r3, #20]
    6762:	697b      	ldr	r3, [r7, #20]
    6764:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6768:	4413      	add	r3, r2
    676a:	681b      	ldr	r3, [r3, #0]
    676c:	4618      	mov	r0, r3
    676e:	4788      	blx	r1
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6770:	697b      	ldr	r3, [r7, #20]
    6772:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6776:	617b      	str	r3, [r7, #20]
    6778:	687b      	ldr	r3, [r7, #4]
    677a:	699a      	ldr	r2, [r3, #24]
    677c:	697b      	ldr	r3, [r7, #20]
    677e:	429a      	cmp	r2, r3
    6780:	dcd9      	bgt.n	6736 <_ZN7SensorsD2Ev+0x112>
        delete ligthBarriers[i];
    #endif
    delete[] sharps;
    6782:	687b      	ldr	r3, [r7, #4]
    6784:	685b      	ldr	r3, [r3, #4]
    6786:	2b00      	cmp	r3, #0
    6788:	d004      	beq.n	6794 <_ZN7SensorsD2Ev+0x170>
    678a:	687b      	ldr	r3, [r7, #4]
    678c:	685b      	ldr	r3, [r3, #4]
    678e:	4618      	mov	r0, r3
    6790:	f007 fe6c 	bl	e46c <_ZdaPv>
    delete[] ultrasounds;
    6794:	687b      	ldr	r3, [r7, #4]
    6796:	68db      	ldr	r3, [r3, #12]
    6798:	2b00      	cmp	r3, #0
    679a:	d004      	beq.n	67a6 <_ZN7SensorsD2Ev+0x182>
    679c:	687b      	ldr	r3, [r7, #4]
    679e:	68db      	ldr	r3, [r3, #12]
    67a0:	4618      	mov	r0, r3
    67a2:	f007 fe63 	bl	e46c <_ZdaPv>
    #ifdef ROBOTHW
    delete[] limitSwitchs;
    67a6:	687b      	ldr	r3, [r7, #4]
    67a8:	69db      	ldr	r3, [r3, #28]
    67aa:	2b00      	cmp	r3, #0
    67ac:	d004      	beq.n	67b8 <_ZN7SensorsD2Ev+0x194>
    67ae:	687b      	ldr	r3, [r7, #4]
    67b0:	69db      	ldr	r3, [r3, #28]
    67b2:	4618      	mov	r0, r3
    67b4:	f007 fe5a 	bl	e46c <_ZdaPv>
    delete[] ligthBarriers;
    67b8:	687b      	ldr	r3, [r7, #4]
    67ba:	695b      	ldr	r3, [r3, #20]
    67bc:	2b00      	cmp	r3, #0
    67be:	d004      	beq.n	67ca <_ZN7SensorsD2Ev+0x1a6>
    67c0:	687b      	ldr	r3, [r7, #4]
    67c2:	695b      	ldr	r3, [r3, #20]
    67c4:	4618      	mov	r0, r3
    67c6:	f007 fe51 	bl	e46c <_ZdaPv>
    #endif

    if (sharpNameVector)
    67ca:	687b      	ldr	r3, [r7, #4]
    67cc:	6a5b      	ldr	r3, [r3, #36]
    67ce:	2b00      	cmp	r3, #0
    67d0:	d00d      	beq.n	67ee <_ZN7SensorsD2Ev+0x1ca>
        delete sharpNameVector;
    67d2:	687b      	ldr	r3, [r7, #4]
    67d4:	6a5b      	ldr	r3, [r3, #36]
    67d6:	2b00      	cmp	r3, #0
    67d8:	d009      	beq.n	67ee <_ZN7SensorsD2Ev+0x1ca>
    67da:	687b      	ldr	r3, [r7, #4]
    67dc:	6a5b      	ldr	r3, [r3, #36]
    67de:	681b      	ldr	r3, [r3, #0]
    67e0:	f103 0304 	add.w	r3, r3, #4	; 0x4
    67e4:	681a      	ldr	r2, [r3, #0]
    67e6:	687b      	ldr	r3, [r7, #4]
    67e8:	6a5b      	ldr	r3, [r3, #36]
    67ea:	4618      	mov	r0, r3
    67ec:	4790      	blx	r2
    #ifdef ROBOTHW
    if (ligthBarrierNameVector)
    67ee:	687b      	ldr	r3, [r7, #4]
    67f0:	6adb      	ldr	r3, [r3, #44]
    67f2:	2b00      	cmp	r3, #0
    67f4:	d00d      	beq.n	6812 <_ZN7SensorsD2Ev+0x1ee>
        delete ligthBarrierNameVector;
    67f6:	687b      	ldr	r3, [r7, #4]
    67f8:	6adb      	ldr	r3, [r3, #44]
    67fa:	2b00      	cmp	r3, #0
    67fc:	d009      	beq.n	6812 <_ZN7SensorsD2Ev+0x1ee>
    67fe:	687b      	ldr	r3, [r7, #4]
    6800:	6adb      	ldr	r3, [r3, #44]
    6802:	681b      	ldr	r3, [r3, #0]
    6804:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6808:	681a      	ldr	r2, [r3, #0]
    680a:	687b      	ldr	r3, [r7, #4]
    680c:	6adb      	ldr	r3, [r3, #44]
    680e:	4618      	mov	r0, r3
    6810:	4790      	blx	r2
    if (limitSwitchNameVector)
    6812:	687b      	ldr	r3, [r7, #4]
    6814:	6a9b      	ldr	r3, [r3, #40]
    6816:	2b00      	cmp	r3, #0
    6818:	d00d      	beq.n	6836 <_ZN7SensorsD2Ev+0x212>
        delete limitSwitchNameVector;
    681a:	687b      	ldr	r3, [r7, #4]
    681c:	6a9b      	ldr	r3, [r3, #40]
    681e:	2b00      	cmp	r3, #0
    6820:	d009      	beq.n	6836 <_ZN7SensorsD2Ev+0x212>
    6822:	687b      	ldr	r3, [r7, #4]
    6824:	6a9b      	ldr	r3, [r3, #40]
    6826:	681b      	ldr	r3, [r3, #0]
    6828:	f103 0304 	add.w	r3, r3, #4	; 0x4
    682c:	681a      	ldr	r2, [r3, #0]
    682e:	687b      	ldr	r3, [r7, #4]
    6830:	6a9b      	ldr	r3, [r3, #40]
    6832:	4618      	mov	r0, r3
    6834:	4790      	blx	r2
    #endif
    if (outputSensorVector)
    6836:	687b      	ldr	r3, [r7, #4]
    6838:	6b1b      	ldr	r3, [r3, #48]
    683a:	2b00      	cmp	r3, #0
    683c:	d00d      	beq.n	685a <_ZN7SensorsD2Ev+0x236>
        delete outputSensorVector;
    683e:	687b      	ldr	r3, [r7, #4]
    6840:	6b1b      	ldr	r3, [r3, #48]
    6842:	2b00      	cmp	r3, #0
    6844:	d009      	beq.n	685a <_ZN7SensorsD2Ev+0x236>
    6846:	687b      	ldr	r3, [r7, #4]
    6848:	6b1b      	ldr	r3, [r3, #48]
    684a:	681b      	ldr	r3, [r3, #0]
    684c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6850:	681a      	ldr	r2, [r3, #0]
    6852:	687b      	ldr	r3, [r7, #4]
    6854:	6b1b      	ldr	r3, [r3, #48]
    6856:	4618      	mov	r0, r3
    6858:	4790      	blx	r2
}
    685a:	f04f 0300 	mov.w	r3, #0	; 0x0
    685e:	b2db      	uxtb	r3, r3
    6860:	2b00      	cmp	r3, #0
    6862:	d002      	beq.n	686a <_ZN7SensorsD2Ev+0x246>
    6864:	6878      	ldr	r0, [r7, #4]
    6866:	f007 fd89 	bl	e37c <_ZdlPv>
    686a:	687b      	ldr	r3, [r7, #4]
    686c:	4618      	mov	r0, r3
    686e:	f107 0718 	add.w	r7, r7, #24	; 0x18
    6872:	46bd      	mov	sp, r7
    6874:	bd80      	pop	{r7, pc}
    6876:	46c0      	nop			(mov r8, r8)
    6878:	00021808 	.word	0x00021808

0000687c <_ZN7SensorsC1Ev>:
        singleton = new Sensors;
    }
    return singleton;
}

Sensors::Sensors()
    687c:	b5b0      	push	{r4, r5, r7, lr}
    687e:	b088      	sub	sp, #32
    6880:	af02      	add	r7, sp, #8
    6882:	6078      	str	r0, [r7, #4]
    6884:	687a      	ldr	r2, [r7, #4]
    6886:	4ba9      	ldr	r3, [pc, #676]	(6b2c <_ZN7SensorsC1Ev+0x2b0>)
    6888:	6013      	str	r3, [r2, #0]
{

    Sensors::sensors = this;
    688a:	4aa9      	ldr	r2, [pc, #676]	(6b30 <_ZN7SensorsC1Ev+0x2b4>)
    688c:	687b      	ldr	r3, [r7, #4]
    688e:	6013      	str	r3, [r2, #0]
    *  ce tableau car sinon on ne récupérera pas les données dans le bon emplacement dans la mémoire
    */
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,7,11,6,8,10,13,15}; // D2,G2,AG(AD?),F2,D1,G1,AD(AG?),F1 //{10,11,12,13,14,15}; //
    #else // K - H107
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,14,13,11,5,4,15,12,8,10};
    6890:	4ba8      	ldr	r3, [pc, #672]	(6b34 <_ZN7SensorsC1Ev+0x2b8>)
    6892:	f107 020a 	add.w	r2, r7, #10	; 0xa
    6896:	f04f 0c0a 	mov.w	ip, #10	; 0xa
    689a:	4610      	mov	r0, r2
    689c:	4619      	mov	r1, r3
    689e:	4662      	mov	r2, ip
    68a0:	f019 fe20 	bl	204e4 <memcpy>
    #endif


    DMA_MEMORY_TYPE* data = AnalogSensor::initialiserADC(NB_CAPTEUR_A_ADC, channels);
    68a4:	f107 030a 	add.w	r3, r7, #10	; 0xa
    68a8:	f04f 000a 	mov.w	r0, #10	; 0xa
    68ac:	4619      	mov	r1, r3
    68ae:	f003 fee1 	bl	a674 <_ZN12AnalogSensor14initialiserADCEhPh>
    68b2:	4603      	mov	r3, r0
    68b4:	617b      	str	r3, [r7, #20]

    // On initialise le nombre de capteur de chaque type
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        nbSharp = 8;
    #else // K - H107
        nbSharp = 10;
    68b6:	687a      	ldr	r2, [r7, #4]
    68b8:	f04f 030a 	mov.w	r3, #10	; 0xa
    68bc:	6093      	str	r3, [r2, #8]
    #endif

    #ifdef ROBOTHW
        nbUltrasound = 0;
    68be:	687a      	ldr	r2, [r7, #4]
    68c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    68c4:	6113      	str	r3, [r2, #16]
        nbLimitSwitch = 0;
    68c6:	687a      	ldr	r2, [r7, #4]
    68c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    68cc:	6213      	str	r3, [r2, #32]
        nbLigthBarrier = 0;
    68ce:	687a      	ldr	r2, [r7, #4]
    68d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    68d4:	6193      	str	r3, [r2, #24]
    #endif

    //sharpNameVector = new SharpNameVector(nbSharp);
#ifdef ROBOTHW
    outputSensorVector = new OutputSensorVector(nbUltrasound);
    68d6:	f04f 0010 	mov.w	r0, #16	; 0x10
    68da:	f007 fca9 	bl	e230 <_Znwj>
    68de:	4603      	mov	r3, r0
    68e0:	461c      	mov	r4, r3
    68e2:	687b      	ldr	r3, [r7, #4]
    68e4:	691b      	ldr	r3, [r3, #16]
    68e6:	4620      	mov	r0, r4
    68e8:	4619      	mov	r1, r3
    68ea:	f015 fae9 	bl	1bec0 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei>
    68ee:	687b      	ldr	r3, [r7, #4]
    68f0:	631c      	str	r4, [r3, #48]
    limitSwitchNameVector = new LimitSwitchNameVector(nbLimitSwitch);
    68f2:	f04f 0010 	mov.w	r0, #16	; 0x10
    68f6:	f007 fc9b 	bl	e230 <_Znwj>
    68fa:	4603      	mov	r3, r0
    68fc:	461c      	mov	r4, r3
    68fe:	687b      	ldr	r3, [r7, #4]
    6900:	6a1b      	ldr	r3, [r3, #32]
    6902:	4620      	mov	r0, r4
    6904:	4619      	mov	r1, r3
    6906:	f015 fb01 	bl	1bf0c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei>
    690a:	687b      	ldr	r3, [r7, #4]
    690c:	629c      	str	r4, [r3, #40]
    ligthBarrierNameVector = new LigthBarrierNameVector(nbLigthBarrier);
    690e:	f04f 0010 	mov.w	r0, #16	; 0x10
    6912:	f007 fc8d 	bl	e230 <_Znwj>
    6916:	4603      	mov	r3, r0
    6918:	461c      	mov	r4, r3
    691a:	687b      	ldr	r3, [r7, #4]
    691c:	699b      	ldr	r3, [r3, #24]
    691e:	4620      	mov	r0, r4
    6920:	4619      	mov	r1, r3
    6922:	f015 fb13 	bl	1bf4c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei>
    6926:	687b      	ldr	r3, [r7, #4]
    6928:	62dc      	str	r4, [r3, #44]
#endif

    // On initialise les tableaux de pointeur qui contiendront les capteurs
    sharps = new SharpSensor*[nbSharp];
    692a:	687b      	ldr	r3, [r7, #4]
    692c:	689b      	ldr	r3, [r3, #8]
    692e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6932:	4618      	mov	r0, r3
    6934:	f007 fd14 	bl	e360 <_Znaj>
    6938:	4603      	mov	r3, r0
    693a:	461a      	mov	r2, r3
    693c:	687b      	ldr	r3, [r7, #4]
    693e:	605a      	str	r2, [r3, #4]
        sharps[7] = new SharpSensor(SharpSensor::NONE, 15, data);           // rien
        /*sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);*/           // rien
    #endif
    #ifdef STM32F10X_CL // Pin pour le stm32 h107
        sharps[0] = new SharpSensor(SharpSensor::FRONT_LEFT, 9, data);      // F1 - 9
    6940:	687b      	ldr	r3, [r7, #4]
    6942:	685d      	ldr	r5, [r3, #4]
    6944:	f04f 0018 	mov.w	r0, #24	; 0x18
    6948:	f007 fc72 	bl	e230 <_Znwj>
    694c:	4603      	mov	r3, r0
    694e:	461c      	mov	r4, r3
    6950:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6954:	9300      	str	r3, [sp, #0]
    6956:	4620      	mov	r0, r4
    6958:	f04f 0102 	mov.w	r1, #2	; 0x2
    695c:	f04f 0209 	mov.w	r2, #9	; 0x9
    6960:	697b      	ldr	r3, [r7, #20]
    6962:	f006 fab1 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6966:	602c      	str	r4, [r5, #0]
        sharps[1] = new SharpSensor(SharpSensor::FRONT_RIGHT, 14, data);    // F2 - 14
    6968:	687b      	ldr	r3, [r7, #4]
    696a:	685b      	ldr	r3, [r3, #4]
    696c:	f103 0504 	add.w	r5, r3, #4	; 0x4
    6970:	f04f 0018 	mov.w	r0, #24	; 0x18
    6974:	f007 fc5c 	bl	e230 <_Znwj>
    6978:	4603      	mov	r3, r0
    697a:	461c      	mov	r4, r3
    697c:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6980:	9300      	str	r3, [sp, #0]
    6982:	4620      	mov	r0, r4
    6984:	f04f 0103 	mov.w	r1, #3	; 0x3
    6988:	f04f 020e 	mov.w	r2, #14	; 0xe
    698c:	697b      	ldr	r3, [r7, #20]
    698e:	f006 fa9b 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6992:	602c      	str	r4, [r5, #0]
        sharps[2] = new SharpSensor(SharpSensor::LEFT_FRONT, 13, data);     // G2 - 13
    6994:	687b      	ldr	r3, [r7, #4]
    6996:	685b      	ldr	r3, [r3, #4]
    6998:	f103 0508 	add.w	r5, r3, #8	; 0x8
    699c:	f04f 0018 	mov.w	r0, #24	; 0x18
    69a0:	f007 fc46 	bl	e230 <_Znwj>
    69a4:	4603      	mov	r3, r0
    69a6:	461c      	mov	r4, r3
    69a8:	f640 13c4 	movw	r3, #2500	; 0x9c4
    69ac:	9300      	str	r3, [sp, #0]
    69ae:	4620      	mov	r0, r4
    69b0:	f04f 0104 	mov.w	r1, #4	; 0x4
    69b4:	f04f 020d 	mov.w	r2, #13	; 0xd
    69b8:	697b      	ldr	r3, [r7, #20]
    69ba:	f006 fa85 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    69be:	602c      	str	r4, [r5, #0]
        sharps[3] = new SharpSensor(SharpSensor::LEFT_BACK, 11, data);      // G1 - 11
    69c0:	687b      	ldr	r3, [r7, #4]
    69c2:	685b      	ldr	r3, [r3, #4]
    69c4:	f103 050c 	add.w	r5, r3, #12	; 0xc
    69c8:	f04f 0018 	mov.w	r0, #24	; 0x18
    69cc:	f007 fc30 	bl	e230 <_Znwj>
    69d0:	4603      	mov	r3, r0
    69d2:	461c      	mov	r4, r3
    69d4:	f640 13c4 	movw	r3, #2500	; 0x9c4
    69d8:	9300      	str	r3, [sp, #0]
    69da:	4620      	mov	r0, r4
    69dc:	f04f 0105 	mov.w	r1, #5	; 0x5
    69e0:	f04f 020b 	mov.w	r2, #11	; 0xb
    69e4:	697b      	ldr	r3, [r7, #20]
    69e6:	f006 fa6f 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    69ea:	602c      	str	r4, [r5, #0]
        sharps[4] = new SharpSensor(SharpSensor::BACK_RIGHT, 5, data);      // AD - 5
    69ec:	687b      	ldr	r3, [r7, #4]
    69ee:	685b      	ldr	r3, [r3, #4]
    69f0:	f103 0510 	add.w	r5, r3, #16	; 0x10
    69f4:	f04f 0018 	mov.w	r0, #24	; 0x18
    69f8:	f007 fc1a 	bl	e230 <_Znwj>
    69fc:	4603      	mov	r3, r0
    69fe:	461c      	mov	r4, r3
    6a00:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6a04:	9300      	str	r3, [sp, #0]
    6a06:	4620      	mov	r0, r4
    6a08:	f04f 0100 	mov.w	r1, #0	; 0x0
    6a0c:	f04f 0205 	mov.w	r2, #5	; 0x5
    6a10:	697b      	ldr	r3, [r7, #20]
    6a12:	f006 fa59 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6a16:	602c      	str	r4, [r5, #0]
        sharps[5] = new SharpSensor(SharpSensor::BACK_LEFT, 4, data);       // AG - 4
    6a18:	687b      	ldr	r3, [r7, #4]
    6a1a:	685b      	ldr	r3, [r3, #4]
    6a1c:	f103 0514 	add.w	r5, r3, #20	; 0x14
    6a20:	f04f 0018 	mov.w	r0, #24	; 0x18
    6a24:	f007 fc04 	bl	e230 <_Znwj>
    6a28:	4603      	mov	r3, r0
    6a2a:	461c      	mov	r4, r3
    6a2c:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6a30:	9300      	str	r3, [sp, #0]
    6a32:	4620      	mov	r0, r4
    6a34:	f04f 0101 	mov.w	r1, #1	; 0x1
    6a38:	f04f 0204 	mov.w	r2, #4	; 0x4
    6a3c:	697b      	ldr	r3, [r7, #20]
    6a3e:	f006 fa43 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6a42:	602c      	str	r4, [r5, #0]
        sharps[6] = new SharpSensor(SharpSensor::RIGHT_FRONT, 15, data);    // D1 - 15
    6a44:	687b      	ldr	r3, [r7, #4]
    6a46:	685b      	ldr	r3, [r3, #4]
    6a48:	f103 0518 	add.w	r5, r3, #24	; 0x18
    6a4c:	f04f 0018 	mov.w	r0, #24	; 0x18
    6a50:	f007 fbee 	bl	e230 <_Znwj>
    6a54:	4603      	mov	r3, r0
    6a56:	461c      	mov	r4, r3
    6a58:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6a5c:	9300      	str	r3, [sp, #0]
    6a5e:	4620      	mov	r0, r4
    6a60:	f04f 0106 	mov.w	r1, #6	; 0x6
    6a64:	f04f 020f 	mov.w	r2, #15	; 0xf
    6a68:	697b      	ldr	r3, [r7, #20]
    6a6a:	f006 fa2d 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6a6e:	602c      	str	r4, [r5, #0]
        sharps[7] = new SharpSensor(SharpSensor::RIGHT_BACK, 12, data);     // D2 - 12
    6a70:	687b      	ldr	r3, [r7, #4]
    6a72:	685b      	ldr	r3, [r3, #4]
    6a74:	f103 051c 	add.w	r5, r3, #28	; 0x1c
    6a78:	f04f 0018 	mov.w	r0, #24	; 0x18
    6a7c:	f007 fbd8 	bl	e230 <_Znwj>
    6a80:	4603      	mov	r3, r0
    6a82:	461c      	mov	r4, r3
    6a84:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6a88:	9300      	str	r3, [sp, #0]
    6a8a:	4620      	mov	r0, r4
    6a8c:	f04f 0107 	mov.w	r1, #7	; 0x7
    6a90:	f04f 020c 	mov.w	r2, #12	; 0xc
    6a94:	697b      	ldr	r3, [r7, #20]
    6a96:	f006 fa17 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6a9a:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
    6a9c:	687b      	ldr	r3, [r7, #4]
    6a9e:	685b      	ldr	r3, [r3, #4]
    6aa0:	f103 0520 	add.w	r5, r3, #32	; 0x20
    6aa4:	f04f 0018 	mov.w	r0, #24	; 0x18
    6aa8:	f007 fbc2 	bl	e230 <_Znwj>
    6aac:	4603      	mov	r3, r0
    6aae:	461c      	mov	r4, r3
    6ab0:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6ab4:	9300      	str	r3, [sp, #0]
    6ab6:	4620      	mov	r0, r4
    6ab8:	f04f 0108 	mov.w	r1, #8	; 0x8
    6abc:	f04f 0208 	mov.w	r2, #8	; 0x8
    6ac0:	697b      	ldr	r3, [r7, #20]
    6ac2:	f006 fa01 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6ac6:	602c      	str	r4, [r5, #0]
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);           // rien
    6ac8:	687b      	ldr	r3, [r7, #4]
    6aca:	685b      	ldr	r3, [r3, #4]
    6acc:	f103 0524 	add.w	r5, r3, #36	; 0x24
    6ad0:	f04f 0018 	mov.w	r0, #24	; 0x18
    6ad4:	f007 fbac 	bl	e230 <_Znwj>
    6ad8:	4603      	mov	r3, r0
    6ada:	461c      	mov	r4, r3
    6adc:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6ae0:	9300      	str	r3, [sp, #0]
    6ae2:	4620      	mov	r0, r4
    6ae4:	f04f 0108 	mov.w	r1, #8	; 0x8
    6ae8:	f04f 020a 	mov.w	r2, #10	; 0xa
    6aec:	697b      	ldr	r3, [r7, #20]
    6aee:	f006 f9eb 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6af2:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 14, data); // capteur bas ascenseur 14
        sharps[9] = new SharpSensor(SharpSensor::NONE, 15, data); // rien
    #endif
    //activeAllSharp();
#ifdef ROBOTHW
    ultrasounds = new UltrasoundSensor*[nbUltrasound];
    6af4:	687b      	ldr	r3, [r7, #4]
    6af6:	691b      	ldr	r3, [r3, #16]
    6af8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6afc:	4618      	mov	r0, r3
    6afe:	f007 fc2f 	bl	e360 <_Znaj>
    6b02:	4603      	mov	r3, r0
    6b04:	461a      	mov	r2, r3
    6b06:	687b      	ldr	r3, [r7, #4]
    6b08:	60da      	str	r2, [r3, #12]
    limitSwitchs = new  LimitSwitchSensor*[nbLimitSwitch];
    6b0a:	687b      	ldr	r3, [r7, #4]
    6b0c:	6a1b      	ldr	r3, [r3, #32]
    6b0e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6b12:	4618      	mov	r0, r3
    6b14:	f007 fc24 	bl	e360 <_Znaj>
    6b18:	4603      	mov	r3, r0
    6b1a:	461a      	mov	r2, r3
    6b1c:	687b      	ldr	r3, [r7, #4]
    6b1e:	61da      	str	r2, [r3, #28]
    limitSwitchs[2] = new LimitSwitchSensor(LimitSwitchSensor::FRONT, GPIO_Pin_11, GPIOC);
#endif
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}
    6b20:	687b      	ldr	r3, [r7, #4]
    6b22:	4618      	mov	r0, r3
    6b24:	f107 0718 	add.w	r7, r7, #24	; 0x18
    6b28:	46bd      	mov	sp, r7
    6b2a:	bdb0      	pop	{r4, r5, r7, pc}
    6b2c:	00021808 	.word	0x00021808
    6b30:	20000558 	.word	0x20000558
    6b34:	00021810 	.word	0x00021810

00006b38 <_ZN7Sensors12getSingletonEv>:
#include "sensors.h"

Sensors* Sensors::sensors = NULL;
Sensors* Sensors::singleton = 0;

Sensors* Sensors::getSingleton()
    6b38:	b590      	push	{r4, r7, lr}
    6b3a:	b081      	sub	sp, #4
    6b3c:	af00      	add	r7, sp, #0
{
    if(singleton == 0)
    6b3e:	4b0b      	ldr	r3, [pc, #44]	(6b6c <_ZN7Sensors12getSingletonEv+0x34>)
    6b40:	681b      	ldr	r3, [r3, #0]
    6b42:	2b00      	cmp	r3, #0
    6b44:	d10a      	bne.n	6b5c <_ZN7Sensors12getSingletonEv+0x24>
    {
        singleton = new Sensors;
    6b46:	f04f 0034 	mov.w	r0, #52	; 0x34
    6b4a:	f007 fb71 	bl	e230 <_Znwj>
    6b4e:	4603      	mov	r3, r0
    6b50:	461c      	mov	r4, r3
    6b52:	4620      	mov	r0, r4
    6b54:	f7ff fe92 	bl	687c <_ZN7SensorsC1Ev>
    6b58:	4b04      	ldr	r3, [pc, #16]	(6b6c <_ZN7Sensors12getSingletonEv+0x34>)
    6b5a:	601c      	str	r4, [r3, #0]
    }
    return singleton;
    6b5c:	4b03      	ldr	r3, [pc, #12]	(6b6c <_ZN7Sensors12getSingletonEv+0x34>)
    6b5e:	681b      	ldr	r3, [r3, #0]
}
    6b60:	4618      	mov	r0, r3
    6b62:	f107 0704 	add.w	r7, r7, #4	; 0x4
    6b66:	46bd      	mov	sp, r7
    6b68:	bd90      	pop	{r4, r7, pc}
    6b6a:	46c0      	nop			(mov r8, r8)
    6b6c:	2000055c 	.word	0x2000055c

00006b70 <_ZN7SensorsC2Ev>:

Sensors::Sensors()
    6b70:	b5b0      	push	{r4, r5, r7, lr}
    6b72:	b088      	sub	sp, #32
    6b74:	af02      	add	r7, sp, #8
    6b76:	6078      	str	r0, [r7, #4]
    6b78:	687a      	ldr	r2, [r7, #4]
    6b7a:	4ba9      	ldr	r3, [pc, #676]	(6e20 <_ZN7SensorsC2Ev+0x2b0>)
    6b7c:	6013      	str	r3, [r2, #0]
{

    Sensors::sensors = this;
    6b7e:	4aa9      	ldr	r2, [pc, #676]	(6e24 <_ZN7SensorsC2Ev+0x2b4>)
    6b80:	687b      	ldr	r3, [r7, #4]
    6b82:	6013      	str	r3, [r2, #0]
    *  ce tableau car sinon on ne récupérera pas les données dans le bon emplacement dans la mémoire
    */
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,7,11,6,8,10,13,15}; // D2,G2,AG(AD?),F2,D1,G1,AD(AG?),F1 //{10,11,12,13,14,15}; //
    #else // K - H107
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,14,13,11,5,4,15,12,8,10};
    6b84:	4ba8      	ldr	r3, [pc, #672]	(6e28 <_ZN7SensorsC2Ev+0x2b8>)
    6b86:	f107 020a 	add.w	r2, r7, #10	; 0xa
    6b8a:	f04f 0c0a 	mov.w	ip, #10	; 0xa
    6b8e:	4610      	mov	r0, r2
    6b90:	4619      	mov	r1, r3
    6b92:	4662      	mov	r2, ip
    6b94:	f019 fca6 	bl	204e4 <memcpy>
    #endif


    DMA_MEMORY_TYPE* data = AnalogSensor::initialiserADC(NB_CAPTEUR_A_ADC, channels);
    6b98:	f107 030a 	add.w	r3, r7, #10	; 0xa
    6b9c:	f04f 000a 	mov.w	r0, #10	; 0xa
    6ba0:	4619      	mov	r1, r3
    6ba2:	f003 fd67 	bl	a674 <_ZN12AnalogSensor14initialiserADCEhPh>
    6ba6:	4603      	mov	r3, r0
    6ba8:	617b      	str	r3, [r7, #20]

    // On initialise le nombre de capteur de chaque type
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        nbSharp = 8;
    #else // K - H107
        nbSharp = 10;
    6baa:	687a      	ldr	r2, [r7, #4]
    6bac:	f04f 030a 	mov.w	r3, #10	; 0xa
    6bb0:	6093      	str	r3, [r2, #8]
    #endif

    #ifdef ROBOTHW
        nbUltrasound = 0;
    6bb2:	687a      	ldr	r2, [r7, #4]
    6bb4:	f04f 0300 	mov.w	r3, #0	; 0x0
    6bb8:	6113      	str	r3, [r2, #16]
        nbLimitSwitch = 0;
    6bba:	687a      	ldr	r2, [r7, #4]
    6bbc:	f04f 0300 	mov.w	r3, #0	; 0x0
    6bc0:	6213      	str	r3, [r2, #32]
        nbLigthBarrier = 0;
    6bc2:	687a      	ldr	r2, [r7, #4]
    6bc4:	f04f 0300 	mov.w	r3, #0	; 0x0
    6bc8:	6193      	str	r3, [r2, #24]
    #endif

    //sharpNameVector = new SharpNameVector(nbSharp);
#ifdef ROBOTHW
    outputSensorVector = new OutputSensorVector(nbUltrasound);
    6bca:	f04f 0010 	mov.w	r0, #16	; 0x10
    6bce:	f007 fb2f 	bl	e230 <_Znwj>
    6bd2:	4603      	mov	r3, r0
    6bd4:	461c      	mov	r4, r3
    6bd6:	687b      	ldr	r3, [r7, #4]
    6bd8:	691b      	ldr	r3, [r3, #16]
    6bda:	4620      	mov	r0, r4
    6bdc:	4619      	mov	r1, r3
    6bde:	f015 f96f 	bl	1bec0 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei>
    6be2:	687b      	ldr	r3, [r7, #4]
    6be4:	631c      	str	r4, [r3, #48]
    limitSwitchNameVector = new LimitSwitchNameVector(nbLimitSwitch);
    6be6:	f04f 0010 	mov.w	r0, #16	; 0x10
    6bea:	f007 fb21 	bl	e230 <_Znwj>
    6bee:	4603      	mov	r3, r0
    6bf0:	461c      	mov	r4, r3
    6bf2:	687b      	ldr	r3, [r7, #4]
    6bf4:	6a1b      	ldr	r3, [r3, #32]
    6bf6:	4620      	mov	r0, r4
    6bf8:	4619      	mov	r1, r3
    6bfa:	f015 f987 	bl	1bf0c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei>
    6bfe:	687b      	ldr	r3, [r7, #4]
    6c00:	629c      	str	r4, [r3, #40]
    ligthBarrierNameVector = new LigthBarrierNameVector(nbLigthBarrier);
    6c02:	f04f 0010 	mov.w	r0, #16	; 0x10
    6c06:	f007 fb13 	bl	e230 <_Znwj>
    6c0a:	4603      	mov	r3, r0
    6c0c:	461c      	mov	r4, r3
    6c0e:	687b      	ldr	r3, [r7, #4]
    6c10:	699b      	ldr	r3, [r3, #24]
    6c12:	4620      	mov	r0, r4
    6c14:	4619      	mov	r1, r3
    6c16:	f015 f999 	bl	1bf4c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei>
    6c1a:	687b      	ldr	r3, [r7, #4]
    6c1c:	62dc      	str	r4, [r3, #44]
#endif

    // On initialise les tableaux de pointeur qui contiendront les capteurs
    sharps = new SharpSensor*[nbSharp];
    6c1e:	687b      	ldr	r3, [r7, #4]
    6c20:	689b      	ldr	r3, [r3, #8]
    6c22:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6c26:	4618      	mov	r0, r3
    6c28:	f007 fb9a 	bl	e360 <_Znaj>
    6c2c:	4603      	mov	r3, r0
    6c2e:	461a      	mov	r2, r3
    6c30:	687b      	ldr	r3, [r7, #4]
    6c32:	605a      	str	r2, [r3, #4]
        sharps[7] = new SharpSensor(SharpSensor::NONE, 15, data);           // rien
        /*sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);*/           // rien
    #endif
    #ifdef STM32F10X_CL // Pin pour le stm32 h107
        sharps[0] = new SharpSensor(SharpSensor::FRONT_LEFT, 9, data);      // F1 - 9
    6c34:	687b      	ldr	r3, [r7, #4]
    6c36:	685d      	ldr	r5, [r3, #4]
    6c38:	f04f 0018 	mov.w	r0, #24	; 0x18
    6c3c:	f007 faf8 	bl	e230 <_Znwj>
    6c40:	4603      	mov	r3, r0
    6c42:	461c      	mov	r4, r3
    6c44:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6c48:	9300      	str	r3, [sp, #0]
    6c4a:	4620      	mov	r0, r4
    6c4c:	f04f 0102 	mov.w	r1, #2	; 0x2
    6c50:	f04f 0209 	mov.w	r2, #9	; 0x9
    6c54:	697b      	ldr	r3, [r7, #20]
    6c56:	f006 f937 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6c5a:	602c      	str	r4, [r5, #0]
        sharps[1] = new SharpSensor(SharpSensor::FRONT_RIGHT, 14, data);    // F2 - 14
    6c5c:	687b      	ldr	r3, [r7, #4]
    6c5e:	685b      	ldr	r3, [r3, #4]
    6c60:	f103 0504 	add.w	r5, r3, #4	; 0x4
    6c64:	f04f 0018 	mov.w	r0, #24	; 0x18
    6c68:	f007 fae2 	bl	e230 <_Znwj>
    6c6c:	4603      	mov	r3, r0
    6c6e:	461c      	mov	r4, r3
    6c70:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6c74:	9300      	str	r3, [sp, #0]
    6c76:	4620      	mov	r0, r4
    6c78:	f04f 0103 	mov.w	r1, #3	; 0x3
    6c7c:	f04f 020e 	mov.w	r2, #14	; 0xe
    6c80:	697b      	ldr	r3, [r7, #20]
    6c82:	f006 f921 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6c86:	602c      	str	r4, [r5, #0]
        sharps[2] = new SharpSensor(SharpSensor::LEFT_FRONT, 13, data);     // G2 - 13
    6c88:	687b      	ldr	r3, [r7, #4]
    6c8a:	685b      	ldr	r3, [r3, #4]
    6c8c:	f103 0508 	add.w	r5, r3, #8	; 0x8
    6c90:	f04f 0018 	mov.w	r0, #24	; 0x18
    6c94:	f007 facc 	bl	e230 <_Znwj>
    6c98:	4603      	mov	r3, r0
    6c9a:	461c      	mov	r4, r3
    6c9c:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6ca0:	9300      	str	r3, [sp, #0]
    6ca2:	4620      	mov	r0, r4
    6ca4:	f04f 0104 	mov.w	r1, #4	; 0x4
    6ca8:	f04f 020d 	mov.w	r2, #13	; 0xd
    6cac:	697b      	ldr	r3, [r7, #20]
    6cae:	f006 f90b 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6cb2:	602c      	str	r4, [r5, #0]
        sharps[3] = new SharpSensor(SharpSensor::LEFT_BACK, 11, data);      // G1 - 11
    6cb4:	687b      	ldr	r3, [r7, #4]
    6cb6:	685b      	ldr	r3, [r3, #4]
    6cb8:	f103 050c 	add.w	r5, r3, #12	; 0xc
    6cbc:	f04f 0018 	mov.w	r0, #24	; 0x18
    6cc0:	f007 fab6 	bl	e230 <_Znwj>
    6cc4:	4603      	mov	r3, r0
    6cc6:	461c      	mov	r4, r3
    6cc8:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6ccc:	9300      	str	r3, [sp, #0]
    6cce:	4620      	mov	r0, r4
    6cd0:	f04f 0105 	mov.w	r1, #5	; 0x5
    6cd4:	f04f 020b 	mov.w	r2, #11	; 0xb
    6cd8:	697b      	ldr	r3, [r7, #20]
    6cda:	f006 f8f5 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6cde:	602c      	str	r4, [r5, #0]
        sharps[4] = new SharpSensor(SharpSensor::BACK_RIGHT, 5, data);      // AD - 5
    6ce0:	687b      	ldr	r3, [r7, #4]
    6ce2:	685b      	ldr	r3, [r3, #4]
    6ce4:	f103 0510 	add.w	r5, r3, #16	; 0x10
    6ce8:	f04f 0018 	mov.w	r0, #24	; 0x18
    6cec:	f007 faa0 	bl	e230 <_Znwj>
    6cf0:	4603      	mov	r3, r0
    6cf2:	461c      	mov	r4, r3
    6cf4:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6cf8:	9300      	str	r3, [sp, #0]
    6cfa:	4620      	mov	r0, r4
    6cfc:	f04f 0100 	mov.w	r1, #0	; 0x0
    6d00:	f04f 0205 	mov.w	r2, #5	; 0x5
    6d04:	697b      	ldr	r3, [r7, #20]
    6d06:	f006 f8df 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6d0a:	602c      	str	r4, [r5, #0]
        sharps[5] = new SharpSensor(SharpSensor::BACK_LEFT, 4, data);       // AG - 4
    6d0c:	687b      	ldr	r3, [r7, #4]
    6d0e:	685b      	ldr	r3, [r3, #4]
    6d10:	f103 0514 	add.w	r5, r3, #20	; 0x14
    6d14:	f04f 0018 	mov.w	r0, #24	; 0x18
    6d18:	f007 fa8a 	bl	e230 <_Znwj>
    6d1c:	4603      	mov	r3, r0
    6d1e:	461c      	mov	r4, r3
    6d20:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6d24:	9300      	str	r3, [sp, #0]
    6d26:	4620      	mov	r0, r4
    6d28:	f04f 0101 	mov.w	r1, #1	; 0x1
    6d2c:	f04f 0204 	mov.w	r2, #4	; 0x4
    6d30:	697b      	ldr	r3, [r7, #20]
    6d32:	f006 f8c9 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6d36:	602c      	str	r4, [r5, #0]
        sharps[6] = new SharpSensor(SharpSensor::RIGHT_FRONT, 15, data);    // D1 - 15
    6d38:	687b      	ldr	r3, [r7, #4]
    6d3a:	685b      	ldr	r3, [r3, #4]
    6d3c:	f103 0518 	add.w	r5, r3, #24	; 0x18
    6d40:	f04f 0018 	mov.w	r0, #24	; 0x18
    6d44:	f007 fa74 	bl	e230 <_Znwj>
    6d48:	4603      	mov	r3, r0
    6d4a:	461c      	mov	r4, r3
    6d4c:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6d50:	9300      	str	r3, [sp, #0]
    6d52:	4620      	mov	r0, r4
    6d54:	f04f 0106 	mov.w	r1, #6	; 0x6
    6d58:	f04f 020f 	mov.w	r2, #15	; 0xf
    6d5c:	697b      	ldr	r3, [r7, #20]
    6d5e:	f006 f8b3 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6d62:	602c      	str	r4, [r5, #0]
        sharps[7] = new SharpSensor(SharpSensor::RIGHT_BACK, 12, data);     // D2 - 12
    6d64:	687b      	ldr	r3, [r7, #4]
    6d66:	685b      	ldr	r3, [r3, #4]
    6d68:	f103 051c 	add.w	r5, r3, #28	; 0x1c
    6d6c:	f04f 0018 	mov.w	r0, #24	; 0x18
    6d70:	f007 fa5e 	bl	e230 <_Znwj>
    6d74:	4603      	mov	r3, r0
    6d76:	461c      	mov	r4, r3
    6d78:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6d7c:	9300      	str	r3, [sp, #0]
    6d7e:	4620      	mov	r0, r4
    6d80:	f04f 0107 	mov.w	r1, #7	; 0x7
    6d84:	f04f 020c 	mov.w	r2, #12	; 0xc
    6d88:	697b      	ldr	r3, [r7, #20]
    6d8a:	f006 f89d 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6d8e:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
    6d90:	687b      	ldr	r3, [r7, #4]
    6d92:	685b      	ldr	r3, [r3, #4]
    6d94:	f103 0520 	add.w	r5, r3, #32	; 0x20
    6d98:	f04f 0018 	mov.w	r0, #24	; 0x18
    6d9c:	f007 fa48 	bl	e230 <_Znwj>
    6da0:	4603      	mov	r3, r0
    6da2:	461c      	mov	r4, r3
    6da4:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6da8:	9300      	str	r3, [sp, #0]
    6daa:	4620      	mov	r0, r4
    6dac:	f04f 0108 	mov.w	r1, #8	; 0x8
    6db0:	f04f 0208 	mov.w	r2, #8	; 0x8
    6db4:	697b      	ldr	r3, [r7, #20]
    6db6:	f006 f887 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6dba:	602c      	str	r4, [r5, #0]
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);           // rien
    6dbc:	687b      	ldr	r3, [r7, #4]
    6dbe:	685b      	ldr	r3, [r3, #4]
    6dc0:	f103 0524 	add.w	r5, r3, #36	; 0x24
    6dc4:	f04f 0018 	mov.w	r0, #24	; 0x18
    6dc8:	f007 fa32 	bl	e230 <_Znwj>
    6dcc:	4603      	mov	r3, r0
    6dce:	461c      	mov	r4, r3
    6dd0:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6dd4:	9300      	str	r3, [sp, #0]
    6dd6:	4620      	mov	r0, r4
    6dd8:	f04f 0108 	mov.w	r1, #8	; 0x8
    6ddc:	f04f 020a 	mov.w	r2, #10	; 0xa
    6de0:	697b      	ldr	r3, [r7, #20]
    6de2:	f006 f871 	bl	cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6de6:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 14, data); // capteur bas ascenseur 14
        sharps[9] = new SharpSensor(SharpSensor::NONE, 15, data); // rien
    #endif
    //activeAllSharp();
#ifdef ROBOTHW
    ultrasounds = new UltrasoundSensor*[nbUltrasound];
    6de8:	687b      	ldr	r3, [r7, #4]
    6dea:	691b      	ldr	r3, [r3, #16]
    6dec:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6df0:	4618      	mov	r0, r3
    6df2:	f007 fab5 	bl	e360 <_Znaj>
    6df6:	4603      	mov	r3, r0
    6df8:	461a      	mov	r2, r3
    6dfa:	687b      	ldr	r3, [r7, #4]
    6dfc:	60da      	str	r2, [r3, #12]
    limitSwitchs = new  LimitSwitchSensor*[nbLimitSwitch];
    6dfe:	687b      	ldr	r3, [r7, #4]
    6e00:	6a1b      	ldr	r3, [r3, #32]
    6e02:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6e06:	4618      	mov	r0, r3
    6e08:	f007 faaa 	bl	e360 <_Znaj>
    6e0c:	4603      	mov	r3, r0
    6e0e:	461a      	mov	r2, r3
    6e10:	687b      	ldr	r3, [r7, #4]
    6e12:	61da      	str	r2, [r3, #28]
    limitSwitchs[2] = new LimitSwitchSensor(LimitSwitchSensor::FRONT, GPIO_Pin_11, GPIOC);
#endif
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}
    6e14:	687b      	ldr	r3, [r7, #4]
    6e16:	4618      	mov	r0, r3
    6e18:	f107 0718 	add.w	r7, r7, #24	; 0x18
    6e1c:	46bd      	mov	sp, r7
    6e1e:	bdb0      	pop	{r4, r5, r7, pc}
    6e20:	00021808 	.word	0x00021808
    6e24:	20000558 	.word	0x20000558
    6e28:	00021810 	.word	0x00021810

00006e2c <_ZN5Servo13shutDownServoEv>:

    float rc = m_RC0degre + m_coefRC * angle;
	pwm_handler.setDutyCycle(rc);
}

void Servo::shutDownServo()
    6e2c:	b580      	push	{r7, lr}
    6e2e:	b082      	sub	sp, #8
    6e30:	af00      	add	r7, sp, #0
    6e32:	6078      	str	r0, [r7, #4]
{
    pwm_handler.setPulseWidth(0);
    6e34:	687b      	ldr	r3, [r7, #4]
    6e36:	4618      	mov	r0, r3
    6e38:	f04f 0100 	mov.w	r1, #0	; 0x0
    6e3c:	f005 fa38 	bl	c2b0 <_ZN10PWMHandler13setPulseWidthEt>
}
    6e40:	f107 0708 	add.w	r7, r7, #8	; 0x8
    6e44:	46bd      	mov	sp, r7
    6e46:	bd80      	pop	{r7, pc}

00006e48 <_ZN5Servo9goToAngleEf>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx, &GPIO_InitStructure);
}

void Servo::goToAngle(Angle angle)
    6e48:	b590      	push	{r4, r7, lr}
    6e4a:	b085      	sub	sp, #20
    6e4c:	af00      	add	r7, sp, #0
    6e4e:	6078      	str	r0, [r7, #4]
    6e50:	6039      	str	r1, [r7, #0]
	float pulseWidth = angle*19.5f+1200.0f; // pour le servo ES 539 made in malaysia

    // Donner la rapport au PWM
	pwm_handler.setPulseWidth(pulseWidth);*/

    if (angle < 0.0)
    6e52:	6838      	ldr	r0, [r7, #0]
    6e54:	4914      	ldr	r1, [pc, #80]	(6ea8 <_ZN5Servo9goToAngleEf+0x60>)
    6e56:	f013 ff65 	bl	1ad24 <__aeabi_fcmplt>
    6e5a:	4603      	mov	r3, r0
    6e5c:	2b00      	cmp	r3, #0
    6e5e:	d002      	beq.n	6e66 <_ZN5Servo9goToAngleEf+0x1e>
        angle = 0.0f;
    6e60:	4b11      	ldr	r3, [pc, #68]	(6ea8 <_ZN5Servo9goToAngleEf+0x60>)
    6e62:	603b      	str	r3, [r7, #0]
    6e64:	e008      	b.n	6e78 <_ZN5Servo9goToAngleEf+0x30>
    else if (angle > 180.0f)
    6e66:	6838      	ldr	r0, [r7, #0]
    6e68:	4910      	ldr	r1, [pc, #64]	(6eac <_ZN5Servo9goToAngleEf+0x64>)
    6e6a:	f013 ff79 	bl	1ad60 <__aeabi_fcmpgt>
    6e6e:	4603      	mov	r3, r0
    6e70:	2b00      	cmp	r3, #0
    6e72:	d001      	beq.n	6e78 <_ZN5Servo9goToAngleEf+0x30>
        angle = 180.0f;
    6e74:	4b0d      	ldr	r3, [pc, #52]	(6eac <_ZN5Servo9goToAngleEf+0x64>)
    6e76:	603b      	str	r3, [r7, #0]

    float rc = m_RC0degre + m_coefRC * angle;
    6e78:	687b      	ldr	r3, [r7, #4]
    6e7a:	68dc      	ldr	r4, [r3, #12]
    6e7c:	687b      	ldr	r3, [r7, #4]
    6e7e:	691b      	ldr	r3, [r3, #16]
    6e80:	4618      	mov	r0, r3
    6e82:	6839      	ldr	r1, [r7, #0]
    6e84:	f013 fdb2 	bl	1a9ec <__aeabi_fmul>
    6e88:	4603      	mov	r3, r0
    6e8a:	4620      	mov	r0, r4
    6e8c:	4619      	mov	r1, r3
    6e8e:	f013 fca5 	bl	1a7dc <__addsf3>
    6e92:	4603      	mov	r3, r0
    6e94:	60fb      	str	r3, [r7, #12]
	pwm_handler.setDutyCycle(rc);
    6e96:	687b      	ldr	r3, [r7, #4]
    6e98:	4618      	mov	r0, r3
    6e9a:	68f9      	ldr	r1, [r7, #12]
    6e9c:	f005 fa5a 	bl	c354 <_ZN10PWMHandler12setDutyCycleEf>
}
    6ea0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    6ea4:	46bd      	mov	sp, r7
    6ea6:	bd90      	pop	{r4, r7, pc}
    6ea8:	00000000 	.word	0x00000000
    6eac:	43340000 	.word	0x43340000

00006eb0 <_ZN5Servo7initPinEP12GPIO_TypeDeft>:
{
    shutDownServo();
}

// initialise la pin du servo
void Servo::initPin(GPIO_TypeDef* GPIOx, uint16_t pinX)
    6eb0:	b580      	push	{r7, lr}
    6eb2:	b084      	sub	sp, #16
    6eb4:	af00      	add	r7, sp, #0
    6eb6:	6078      	str	r0, [r7, #4]
    6eb8:	460b      	mov	r3, r1
    6eba:	807b      	strh	r3, [r7, #2]
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = pinX;
    6ebc:	887b      	ldrh	r3, [r7, #2]
    6ebe:	81bb      	strh	r3, [r7, #12]

    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    6ec0:	f04f 0348 	mov.w	r3, #72	; 0x48
    6ec4:	73fb      	strb	r3, [r7, #15]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    6ec6:	f04f 0303 	mov.w	r3, #3	; 0x3
    6eca:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(GPIOx, &GPIO_InitStructure);
    6ecc:	f107 030c 	add.w	r3, r7, #12	; 0xc
    6ed0:	6878      	ldr	r0, [r7, #4]
    6ed2:	4619      	mov	r1, r3
    6ed4:	f7fa fbec 	bl	16b0 <GPIO_Init>
}
    6ed8:	f107 0710 	add.w	r7, r7, #16	; 0x10
    6edc:	46bd      	mov	sp, r7
    6ede:	bd80      	pop	{r7, pc}

00006ee0 <_ZN5ServoD1Ev>:
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
{
}

Servo::~Servo()
    6ee0:	b580      	push	{r7, lr}
    6ee2:	b082      	sub	sp, #8
    6ee4:	af00      	add	r7, sp, #0
    6ee6:	6078      	str	r0, [r7, #4]
{
    shutDownServo();
    6ee8:	6878      	ldr	r0, [r7, #4]
    6eea:	f7ff ff9f 	bl	6e2c <_ZN5Servo13shutDownServoEv>
}
    6eee:	687b      	ldr	r3, [r7, #4]
    6ef0:	4618      	mov	r0, r3
    6ef2:	f005 fa0f 	bl	c314 <_ZN10PWMHandlerD1Ev>
    6ef6:	687b      	ldr	r3, [r7, #4]
    6ef8:	4618      	mov	r0, r3
    6efa:	f107 0708 	add.w	r7, r7, #8	; 0x8
    6efe:	46bd      	mov	sp, r7
    6f00:	bd80      	pop	{r7, pc}
    6f02:	46c0      	nop			(mov r8, r8)

00006f04 <_ZN5ServoD2Ev>:
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
{
}

Servo::~Servo()
    6f04:	b580      	push	{r7, lr}
    6f06:	b082      	sub	sp, #8
    6f08:	af00      	add	r7, sp, #0
    6f0a:	6078      	str	r0, [r7, #4]
{
    shutDownServo();
    6f0c:	6878      	ldr	r0, [r7, #4]
    6f0e:	f7ff ff8d 	bl	6e2c <_ZN5Servo13shutDownServoEv>
}
    6f12:	687b      	ldr	r3, [r7, #4]
    6f14:	4618      	mov	r0, r3
    6f16:	f005 f9fd 	bl	c314 <_ZN10PWMHandlerD1Ev>
    6f1a:	687b      	ldr	r3, [r7, #4]
    6f1c:	4618      	mov	r0, r3
    6f1e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    6f22:	46bd      	mov	sp, r7
    6f24:	bd80      	pop	{r7, pc}
    6f26:	46c0      	nop			(mov r8, r8)

00006f28 <_ZN5ServoC1EP5Timerhff>:
#include "servo.h"

#ifdef ROBOTHW

// on donne le rapport cyclique de l'angle minimal (0 degré) et celui de l'angle maximal (180 degrés)
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    6f28:	b580      	push	{r7, lr}
    6f2a:	b084      	sub	sp, #16
    6f2c:	af00      	add	r7, sp, #0
    6f2e:	60f8      	str	r0, [r7, #12]
    6f30:	60b9      	str	r1, [r7, #8]
    6f32:	603b      	str	r3, [r7, #0]
    6f34:	4613      	mov	r3, r2
    6f36:	71fb      	strb	r3, [r7, #7]
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
    6f38:	68fb      	ldr	r3, [r7, #12]
    6f3a:	79fa      	ldrb	r2, [r7, #7]
    6f3c:	4618      	mov	r0, r3
    6f3e:	68b9      	ldr	r1, [r7, #8]
    6f40:	f005 fa2a 	bl	c398 <_ZN10PWMHandlerC1EP5Timerh>
    6f44:	68fa      	ldr	r2, [r7, #12]
    6f46:	68bb      	ldr	r3, [r7, #8]
    6f48:	6093      	str	r3, [r2, #8]
    6f4a:	68fa      	ldr	r2, [r7, #12]
    6f4c:	683b      	ldr	r3, [r7, #0]
    6f4e:	60d3      	str	r3, [r2, #12]
    6f50:	69b8      	ldr	r0, [r7, #24]
    6f52:	6839      	ldr	r1, [r7, #0]
    6f54:	f013 fc40 	bl	1a7d8 <__aeabi_fsub>
    6f58:	4603      	mov	r3, r0
    6f5a:	4618      	mov	r0, r3
    6f5c:	4906      	ldr	r1, [pc, #24]	(6f78 <_ZN5ServoC1EP5Timerhff+0x50>)
    6f5e:	f013 fdf9 	bl	1ab54 <__aeabi_fdiv>
    6f62:	4603      	mov	r3, r0
    6f64:	461a      	mov	r2, r3
    6f66:	68fb      	ldr	r3, [r7, #12]
    6f68:	611a      	str	r2, [r3, #16]
{
}
    6f6a:	68fb      	ldr	r3, [r7, #12]
    6f6c:	4618      	mov	r0, r3
    6f6e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    6f72:	46bd      	mov	sp, r7
    6f74:	bd80      	pop	{r7, pc}
    6f76:	46c0      	nop			(mov r8, r8)
    6f78:	43340000 	.word	0x43340000

00006f7c <_ZN5ServoC2EP5Timerhff>:
#include "servo.h"

#ifdef ROBOTHW

// on donne le rapport cyclique de l'angle minimal (0 degré) et celui de l'angle maximal (180 degrés)
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    6f7c:	b580      	push	{r7, lr}
    6f7e:	b084      	sub	sp, #16
    6f80:	af00      	add	r7, sp, #0
    6f82:	60f8      	str	r0, [r7, #12]
    6f84:	60b9      	str	r1, [r7, #8]
    6f86:	603b      	str	r3, [r7, #0]
    6f88:	4613      	mov	r3, r2
    6f8a:	71fb      	strb	r3, [r7, #7]
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
    6f8c:	68fb      	ldr	r3, [r7, #12]
    6f8e:	79fa      	ldrb	r2, [r7, #7]
    6f90:	4618      	mov	r0, r3
    6f92:	68b9      	ldr	r1, [r7, #8]
    6f94:	f005 fa00 	bl	c398 <_ZN10PWMHandlerC1EP5Timerh>
    6f98:	68fa      	ldr	r2, [r7, #12]
    6f9a:	68bb      	ldr	r3, [r7, #8]
    6f9c:	6093      	str	r3, [r2, #8]
    6f9e:	68fa      	ldr	r2, [r7, #12]
    6fa0:	683b      	ldr	r3, [r7, #0]
    6fa2:	60d3      	str	r3, [r2, #12]
    6fa4:	69b8      	ldr	r0, [r7, #24]
    6fa6:	6839      	ldr	r1, [r7, #0]
    6fa8:	f013 fc16 	bl	1a7d8 <__aeabi_fsub>
    6fac:	4603      	mov	r3, r0
    6fae:	4618      	mov	r0, r3
    6fb0:	4906      	ldr	r1, [pc, #24]	(6fcc <_ZN5ServoC2EP5Timerhff+0x50>)
    6fb2:	f013 fdcf 	bl	1ab54 <__aeabi_fdiv>
    6fb6:	4603      	mov	r3, r0
    6fb8:	461a      	mov	r2, r3
    6fba:	68fb      	ldr	r3, [r7, #12]
    6fbc:	611a      	str	r2, [r3, #16]
{
}
    6fbe:	68fb      	ldr	r3, [r7, #12]
    6fc0:	4618      	mov	r0, r3
    6fc2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    6fc6:	46bd      	mov	sp, r7
    6fc8:	bd80      	pop	{r7, pc}
    6fca:	46c0      	nop			(mov r8, r8)
    6fcc:	43340000 	.word	0x43340000

00006fd0 <_Z9wrapAnglef>:
#include "angle.h"
#include <math.h>

// Retourne la valeur de l'angle dans un float entre -PI et PI.
Angle wrapAngle(Angle angle)
    6fd0:	b580      	push	{r7, lr}
    6fd2:	b082      	sub	sp, #8
    6fd4:	af00      	add	r7, sp, #0
    6fd6:	6078      	str	r0, [r7, #4]
{
    static const Angle M_2PI = 6.283185307179586476925;

    if (angle > 0)
    6fd8:	6878      	ldr	r0, [r7, #4]
    6fda:	491f      	ldr	r1, [pc, #124]	(7058 <_Z9wrapAnglef+0x88>)
    6fdc:	f013 fec0 	bl	1ad60 <__aeabi_fcmpgt>
    6fe0:	4603      	mov	r3, r0
    6fe2:	2b00      	cmp	r3, #0
    6fe4:	d106      	bne.n	6ff4 <_Z9wrapAnglef+0x24>
    6fe6:	e01a      	b.n	701e <_Z9wrapAnglef+0x4e>
    {
        while (angle > M_PI)
            angle -= M_2PI;
    6fe8:	6878      	ldr	r0, [r7, #4]
    6fea:	491c      	ldr	r1, [pc, #112]	(705c <_Z9wrapAnglef+0x8c>)
    6fec:	f013 fbf4 	bl	1a7d8 <__aeabi_fsub>
    6ff0:	4603      	mov	r3, r0
    6ff2:	607b      	str	r3, [r7, #4]
{
    static const Angle M_2PI = 6.283185307179586476925;

    if (angle > 0)
    {
        while (angle > M_PI)
    6ff4:	6878      	ldr	r0, [r7, #4]
    6ff6:	f013 f887 	bl	1a108 <__aeabi_f2d>
    6ffa:	4602      	mov	r2, r0
    6ffc:	460b      	mov	r3, r1
    6ffe:	4610      	mov	r0, r2
    7000:	4619      	mov	r1, r3
    7002:	a211      	add	r2, pc, #68	(adr r2, 7048 <_Z9wrapAnglef+0x78>)
    7004:	ca0c      	ldmia	r2!, {r2, r3}
    7006:	f013 fb61 	bl	1a6cc <__aeabi_dcmpgt>
    700a:	4603      	mov	r3, r0
    700c:	2b00      	cmp	r3, #0
    700e:	d1eb      	bne.n	6fe8 <_Z9wrapAnglef+0x18>
    7010:	e013      	b.n	703a <_Z9wrapAnglef+0x6a>
            angle -= M_2PI;
    }
    else
    {
        while (angle < -M_PI)
            angle += M_2PI;
    7012:	6878      	ldr	r0, [r7, #4]
    7014:	4911      	ldr	r1, [pc, #68]	(705c <_Z9wrapAnglef+0x8c>)
    7016:	f013 fbe1 	bl	1a7dc <__addsf3>
    701a:	4603      	mov	r3, r0
    701c:	607b      	str	r3, [r7, #4]
        while (angle > M_PI)
            angle -= M_2PI;
    }
    else
    {
        while (angle < -M_PI)
    701e:	6878      	ldr	r0, [r7, #4]
    7020:	f013 f872 	bl	1a108 <__aeabi_f2d>
    7024:	4602      	mov	r2, r0
    7026:	460b      	mov	r3, r1
    7028:	4610      	mov	r0, r2
    702a:	4619      	mov	r1, r3
    702c:	a208      	add	r2, pc, #32	(adr r2, 7050 <_Z9wrapAnglef+0x80>)
    702e:	ca0c      	ldmia	r2!, {r2, r3}
    7030:	f013 fb2e 	bl	1a690 <__aeabi_dcmplt>
    7034:	4603      	mov	r3, r0
    7036:	2b00      	cmp	r3, #0
    7038:	d1eb      	bne.n	7012 <_Z9wrapAnglef+0x42>
            angle += M_2PI;
    }
    return angle;
    703a:	687b      	ldr	r3, [r7, #4]
}
    703c:	4618      	mov	r0, r3
    703e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    7042:	46bd      	mov	sp, r7
    7044:	bd80      	pop	{r7, pc}
    7046:	46c0      	nop			(mov r8, r8)
    7048:	54442d18 	.word	0x54442d18
    704c:	400921fb 	.word	0x400921fb
    7050:	54442d18 	.word	0x54442d18
    7054:	c00921fb 	.word	0xc00921fb
    7058:	00000000 	.word	0x00000000
    705c:	40c90fdb 	.word	0x40c90fdb

00007060 <_Z7angleEqff>:

// Vérifie s'il y a égalité ou presque entre deux angles.
bool angleEq(Angle a1, Angle a2)
    7060:	b580      	push	{r7, lr}
    7062:	b084      	sub	sp, #16
    7064:	af00      	add	r7, sp, #0
    7066:	60f8      	str	r0, [r7, #12]
    7068:	60b9      	str	r1, [r7, #8]
{
    static const Angle epsilon = 0.1;
    return (fabs(wrapAngle(a1 - a2)) < epsilon);
    706a:	68f8      	ldr	r0, [r7, #12]
    706c:	68b9      	ldr	r1, [r7, #8]
    706e:	f013 fbb3 	bl	1a7d8 <__aeabi_fsub>
    7072:	4603      	mov	r3, r0
    7074:	4618      	mov	r0, r3
    7076:	f7ff ffab 	bl	6fd0 <_Z9wrapAnglef>
    707a:	4603      	mov	r3, r0
    707c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    7080:	f04f 0300 	mov.w	r3, #0	; 0x0
    7084:	71fb      	strb	r3, [r7, #7]
    7086:	4610      	mov	r0, r2
    7088:	4907      	ldr	r1, [pc, #28]	(70a8 <_Z7angleEqff+0x48>)
    708a:	f013 fe4b 	bl	1ad24 <__aeabi_fcmplt>
    708e:	4603      	mov	r3, r0
    7090:	2b00      	cmp	r3, #0
    7092:	d002      	beq.n	709a <_Z7angleEqff+0x3a>
    7094:	f04f 0301 	mov.w	r3, #1	; 0x1
    7098:	71fb      	strb	r3, [r7, #7]
    709a:	79fb      	ldrb	r3, [r7, #7]
}
    709c:	4618      	mov	r0, r3
    709e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    70a2:	46bd      	mov	sp, r7
    70a4:	bd80      	pop	{r7, pc}
    70a6:	46c0      	nop			(mov r8, r8)
    70a8:	3dcccccd 	.word	0x3dcccccd
    70ac:	46c046c0 	.word	0x46c046c0

000070b0 <_ZN14Asservissement14setLinearSpeedEf>:
    SysTick_IRQ.NVIC_IRQChannelSubPriority = 1;
    NVIC_Init(&SysTick_IRQ);
#endif
}

void Asservissement::setLinearSpeed(Vitesse vitesse)
    70b0:	b480      	push	{r7}
    70b2:	b083      	sub	sp, #12
    70b4:	af00      	add	r7, sp, #0
    70b6:	6078      	str	r0, [r7, #4]
    70b8:	6039      	str	r1, [r7, #0]
{
    vitesseLineaire = vitesse;
    70ba:	687a      	ldr	r2, [r7, #4]
    70bc:	683b      	ldr	r3, [r7, #0]
    70be:	64d3      	str	r3, [r2, #76]
    //setEnabledPIDDistance(true);
}
    70c0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    70c4:	46bd      	mov	sp, r7
    70c6:	bc80      	pop	{r7}
    70c8:	4770      	bx	lr
    70ca:	46c0      	nop			(mov r8, r8)

000070cc <_ZN14Asservissement15setAngularSpeedEf>:

void Asservissement::setAngularSpeed(VitesseAngulaire vitesse)
    70cc:	b480      	push	{r7}
    70ce:	b083      	sub	sp, #12
    70d0:	af00      	add	r7, sp, #0
    70d2:	6078      	str	r0, [r7, #4]
    70d4:	6039      	str	r1, [r7, #0]
{
    vitesseAngulaire = vitesse;
    70d6:	687a      	ldr	r2, [r7, #4]
    70d8:	683b      	ldr	r3, [r7, #0]
    70da:	6513      	str	r3, [r2, #80]
    //setEnabledPIDAngle(true);
}
    70dc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    70e0:	46bd      	mov	sp, r7
    70e2:	bc80      	pop	{r7}
    70e4:	4770      	bx	lr
    70e6:	46c0      	nop			(mov r8, r8)

000070e8 <_ZN14Asservissement16setCommandSpeedsEP7Command>:

void Asservissement::setCommandSpeeds(Command* command)
    70e8:	b580      	push	{r7, lr}
    70ea:	b082      	sub	sp, #8
    70ec:	af00      	add	r7, sp, #0
    70ee:	6078      	str	r0, [r7, #4]
    70f0:	6039      	str	r1, [r7, #0]
{
    if (command != NULL)
    70f2:	683b      	ldr	r3, [r7, #0]
    70f4:	2b00      	cmp	r3, #0
    70f6:	d018      	beq.n	712a <_ZN14Asservissement16setCommandSpeedsEP7Command+0x42>
    {
        setLinearSpeed(command->getLinearSpeed());
    70f8:	683b      	ldr	r3, [r7, #0]
    70fa:	681b      	ldr	r3, [r3, #0]
    70fc:	f103 0310 	add.w	r3, r3, #16	; 0x10
    7100:	681b      	ldr	r3, [r3, #0]
    7102:	6838      	ldr	r0, [r7, #0]
    7104:	4798      	blx	r3
    7106:	4603      	mov	r3, r0
    7108:	6878      	ldr	r0, [r7, #4]
    710a:	4619      	mov	r1, r3
    710c:	f7ff ffd0 	bl	70b0 <_ZN14Asservissement14setLinearSpeedEf>
        setAngularSpeed(command->getAngularSpeed());
    7110:	683b      	ldr	r3, [r7, #0]
    7112:	681b      	ldr	r3, [r3, #0]
    7114:	f103 0314 	add.w	r3, r3, #20	; 0x14
    7118:	681b      	ldr	r3, [r3, #0]
    711a:	6838      	ldr	r0, [r7, #0]
    711c:	4798      	blx	r3
    711e:	4603      	mov	r3, r0
    7120:	6878      	ldr	r0, [r7, #4]
    7122:	4619      	mov	r1, r3
    7124:	f7ff ffd2 	bl	70cc <_ZN14Asservissement15setAngularSpeedEf>
    7128:	e007      	b.n	713a <_ZN14Asservissement16setCommandSpeedsEP7Command+0x52>
    }
    else
    {
        setLinearSpeed(0.0f);
    712a:	6878      	ldr	r0, [r7, #4]
    712c:	4905      	ldr	r1, [pc, #20]	(7144 <_ZN14Asservissement16setCommandSpeedsEP7Command+0x5c>)
    712e:	f7ff ffbf 	bl	70b0 <_ZN14Asservissement14setLinearSpeedEf>
        setAngularSpeed(0.0f);
    7132:	6878      	ldr	r0, [r7, #4]
    7134:	4903      	ldr	r1, [pc, #12]	(7144 <_ZN14Asservissement16setCommandSpeedsEP7Command+0x5c>)
    7136:	f7ff ffc9 	bl	70cc <_ZN14Asservissement15setAngularSpeedEf>
    }

    /*setEnabledPIDDistance(true);
    setEnabledPIDAngle(true);
    resetFixedDuty();*/
}
    713a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    713e:	46bd      	mov	sp, r7
    7140:	bd80      	pop	{r7, pc}
    7142:	46c0      	nop			(mov r8, r8)
    7144:	00000000 	.word	0x00000000

00007148 <_ZN14Asservissement14getLinearSpeedEv>:

Distance Asservissement::getLinearSpeed()
    7148:	b480      	push	{r7}
    714a:	b083      	sub	sp, #12
    714c:	af00      	add	r7, sp, #0
    714e:	6078      	str	r0, [r7, #4]
{
  /*  if (Remote::getSingleton()->isRemoteMode())
        return Remote::getSingleton()->getLeftPWM();
    else*/
        return vitesseLineaire;
    7150:	687b      	ldr	r3, [r7, #4]
    7152:	6cdb      	ldr	r3, [r3, #76]
}
    7154:	4618      	mov	r0, r3
    7156:	f107 070c 	add.w	r7, r7, #12	; 0xc
    715a:	46bd      	mov	sp, r7
    715c:	bc80      	pop	{r7}
    715e:	4770      	bx	lr

00007160 <_ZN14Asservissement15getAngularSpeedEv>:

Angle Asservissement::getAngularSpeed()
    7160:	b480      	push	{r7}
    7162:	b083      	sub	sp, #12
    7164:	af00      	add	r7, sp, #0
    7166:	6078      	str	r0, [r7, #4]
{
   /* if (Remote::getSingleton()->isRemoteMode())
        return Remote::getSingleton()->getRightPWM();
    else*/
        return vitesseAngulaire;
    7168:	687b      	ldr	r3, [r7, #4]
    716a:	6d1b      	ldr	r3, [r3, #80]
}
    716c:	4618      	mov	r0, r3
    716e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7172:	46bd      	mov	sp, r7
    7174:	bc80      	pop	{r7}
    7176:	4770      	bx	lr

00007178 <_ZN14Asservissement8finMatchEv>:
    Asservissement::asservissement->update();
}

#endif

void Asservissement::finMatch()
    7178:	b480      	push	{r7}
    717a:	af00      	add	r7, sp, #0
{
    Asservissement::matchFini = true;
    717c:	4b03      	ldr	r3, [pc, #12]	(718c <_ZN14Asservissement8finMatchEv+0x14>)
    717e:	f04f 0201 	mov.w	r2, #1	; 0x1
    7182:	701a      	strb	r2, [r3, #0]
    #ifdef ROBOTHW


    #endif
}
    7184:	46bd      	mov	sp, r7
    7186:	bc80      	pop	{r7}
    7188:	4770      	bx	lr
    718a:	46c0      	nop			(mov r8, r8)
    718c:	20000564 	.word	0x20000564

00007190 <_ZN14Asservissement21setEnabledPIDDistanceEb>:

void Asservissement::setEnabledPIDDistance(bool enabled)
    7190:	b480      	push	{r7}
    7192:	b083      	sub	sp, #12
    7194:	af00      	add	r7, sp, #0
    7196:	6078      	str	r0, [r7, #4]
    7198:	460b      	mov	r3, r1
    719a:	70fb      	strb	r3, [r7, #3]
{
    activePIDDistance = enabled;
    719c:	687a      	ldr	r2, [r7, #4]
    719e:	78fb      	ldrb	r3, [r7, #3]
    71a0:	f882 3054 	strb.w	r3, [r2, #84]
}
    71a4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    71a8:	46bd      	mov	sp, r7
    71aa:	bc80      	pop	{r7}
    71ac:	4770      	bx	lr
    71ae:	46c0      	nop			(mov r8, r8)

000071b0 <_ZN14Asservissement18setEnabledPIDAngleEb>:

void Asservissement::setEnabledPIDAngle(bool enabled)
    71b0:	b480      	push	{r7}
    71b2:	b083      	sub	sp, #12
    71b4:	af00      	add	r7, sp, #0
    71b6:	6078      	str	r0, [r7, #4]
    71b8:	460b      	mov	r3, r1
    71ba:	70fb      	strb	r3, [r7, #3]
{
    activePIDAngle = enabled;
    71bc:	687a      	ldr	r2, [r7, #4]
    71be:	78fb      	ldrb	r3, [r7, #3]
    71c0:	f882 3055 	strb.w	r3, [r2, #85]
}
    71c4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    71c8:	46bd      	mov	sp, r7
    71ca:	bc80      	pop	{r7}
    71cc:	4770      	bx	lr
    71ce:	46c0      	nop			(mov r8, r8)

000071d0 <_ZN14Asservissement13setLinearDutyEf>:

void Asservissement::setLinearDuty(float duty)
    71d0:	b580      	push	{r7, lr}
    71d2:	b086      	sub	sp, #24
    71d4:	af00      	add	r7, sp, #0
    71d6:	6178      	str	r0, [r7, #20]
    71d8:	6139      	str	r1, [r7, #16]
{
    setEnabledPIDDistance(false);
    71da:	6978      	ldr	r0, [r7, #20]
    71dc:	f04f 0100 	mov.w	r1, #0	; 0x0
    71e0:	f7ff ffd6 	bl	7190 <_ZN14Asservissement21setEnabledPIDDistanceEb>
    fixedLinearDuty = MAX( MIN( duty, FIXED_LINEAR_DUTY_MAX), -FIXED_LINEAR_DUTY_MAX);
    71e4:	6938      	ldr	r0, [r7, #16]
    71e6:	f012 ff8f 	bl	1a108 <__aeabi_f2d>
    71ea:	4602      	mov	r2, r0
    71ec:	460b      	mov	r3, r1
    71ee:	4610      	mov	r0, r2
    71f0:	4619      	mov	r1, r3
    71f2:	a221      	add	r2, pc, #132	(adr r2, 7278 <_ZN14Asservissement13setLinearDutyEf+0xa8>)
    71f4:	ca0c      	ldmia	r2!, {r2, r3}
    71f6:	f013 fa69 	bl	1a6cc <__aeabi_dcmpgt>
    71fa:	4603      	mov	r3, r0
    71fc:	2b00      	cmp	r3, #0
    71fe:	d003      	beq.n	7208 <_ZN14Asservissement13setLinearDutyEf+0x38>
    7200:	f04f 0200 	mov.w	r2, #0	; 0x0
    7204:	60ba      	str	r2, [r7, #8]
    7206:	e015      	b.n	7234 <_ZN14Asservissement13setLinearDutyEf+0x64>
    7208:	6938      	ldr	r0, [r7, #16]
    720a:	f012 ff7d 	bl	1a108 <__aeabi_f2d>
    720e:	4602      	mov	r2, r0
    7210:	460b      	mov	r3, r1
    7212:	f04f 0100 	mov.w	r1, #0	; 0x0
    7216:	70f9      	strb	r1, [r7, #3]
    7218:	4610      	mov	r0, r2
    721a:	4619      	mov	r1, r3
    721c:	a218      	add	r2, pc, #96	(adr r2, 7280 <_ZN14Asservissement13setLinearDutyEf+0xb0>)
    721e:	ca0c      	ldmia	r2!, {r2, r3}
    7220:	f013 fa36 	bl	1a690 <__aeabi_dcmplt>
    7224:	4603      	mov	r3, r0
    7226:	2b00      	cmp	r3, #0
    7228:	d002      	beq.n	7230 <_ZN14Asservissement13setLinearDutyEf+0x60>
    722a:	f04f 0301 	mov.w	r3, #1	; 0x1
    722e:	70fb      	strb	r3, [r7, #3]
    7230:	78fb      	ldrb	r3, [r7, #3]
    7232:	60bb      	str	r3, [r7, #8]
    7234:	68ba      	ldr	r2, [r7, #8]
    7236:	2a00      	cmp	r2, #0
    7238:	d002      	beq.n	7240 <_ZN14Asservissement13setLinearDutyEf+0x70>
    723a:	4b13      	ldr	r3, [pc, #76]	(7288 <_ZN14Asservissement13setLinearDutyEf+0xb8>)
    723c:	607b      	str	r3, [r7, #4]
    723e:	e014      	b.n	726a <_ZN14Asservissement13setLinearDutyEf+0x9a>
    7240:	6938      	ldr	r0, [r7, #16]
    7242:	f012 ff61 	bl	1a108 <__aeabi_f2d>
    7246:	4602      	mov	r2, r0
    7248:	460b      	mov	r3, r1
    724a:	4610      	mov	r0, r2
    724c:	4619      	mov	r1, r3
    724e:	a20a      	add	r2, pc, #40	(adr r2, 7278 <_ZN14Asservissement13setLinearDutyEf+0xa8>)
    7250:	ca0c      	ldmia	r2!, {r2, r3}
    7252:	f013 fa3b 	bl	1a6cc <__aeabi_dcmpgt>
    7256:	4603      	mov	r3, r0
    7258:	2b00      	cmp	r3, #0
    725a:	d002      	beq.n	7262 <_ZN14Asservissement13setLinearDutyEf+0x92>
    725c:	4a0b      	ldr	r2, [pc, #44]	(728c <_ZN14Asservissement13setLinearDutyEf+0xbc>)
    725e:	60fa      	str	r2, [r7, #12]
    7260:	e001      	b.n	7266 <_ZN14Asservissement13setLinearDutyEf+0x96>
    7262:	693b      	ldr	r3, [r7, #16]
    7264:	60fb      	str	r3, [r7, #12]
    7266:	68fa      	ldr	r2, [r7, #12]
    7268:	607a      	str	r2, [r7, #4]
    726a:	697b      	ldr	r3, [r7, #20]
    726c:	687a      	ldr	r2, [r7, #4]
    726e:	659a      	str	r2, [r3, #88]
}
    7270:	f107 0718 	add.w	r7, r7, #24	; 0x18
    7274:	46bd      	mov	sp, r7
    7276:	bd80      	pop	{r7, pc}
    7278:	9999999a 	.word	0x9999999a
    727c:	3fc99999 	.word	0x3fc99999
    7280:	9999999a 	.word	0x9999999a
    7284:	bfc99999 	.word	0xbfc99999
    7288:	be4ccccd 	.word	0xbe4ccccd
    728c:	3e4ccccd 	.word	0x3e4ccccd

00007290 <_ZN14Asservissement14setAngularDutyEf>:

void Asservissement::setAngularDuty(float duty)
    7290:	b580      	push	{r7, lr}
    7292:	b086      	sub	sp, #24
    7294:	af00      	add	r7, sp, #0
    7296:	6178      	str	r0, [r7, #20]
    7298:	6139      	str	r1, [r7, #16]
{
    setEnabledPIDAngle(false);
    729a:	6978      	ldr	r0, [r7, #20]
    729c:	f04f 0100 	mov.w	r1, #0	; 0x0
    72a0:	f7ff ff86 	bl	71b0 <_ZN14Asservissement18setEnabledPIDAngleEb>
    fixedAngularDuty = MAX( MIN( duty, FIXED_ANGULAR_DUTY_MAX), -FIXED_ANGULAR_DUTY_MAX);
    72a4:	6938      	ldr	r0, [r7, #16]
    72a6:	f012 ff2f 	bl	1a108 <__aeabi_f2d>
    72aa:	4602      	mov	r2, r0
    72ac:	460b      	mov	r3, r1
    72ae:	4610      	mov	r0, r2
    72b0:	4619      	mov	r1, r3
    72b2:	a221      	add	r2, pc, #132	(adr r2, 7338 <_ZN14Asservissement14setAngularDutyEf+0xa8>)
    72b4:	ca0c      	ldmia	r2!, {r2, r3}
    72b6:	f013 fa09 	bl	1a6cc <__aeabi_dcmpgt>
    72ba:	4603      	mov	r3, r0
    72bc:	2b00      	cmp	r3, #0
    72be:	d003      	beq.n	72c8 <_ZN14Asservissement14setAngularDutyEf+0x38>
    72c0:	f04f 0200 	mov.w	r2, #0	; 0x0
    72c4:	60ba      	str	r2, [r7, #8]
    72c6:	e015      	b.n	72f4 <_ZN14Asservissement14setAngularDutyEf+0x64>
    72c8:	6938      	ldr	r0, [r7, #16]
    72ca:	f012 ff1d 	bl	1a108 <__aeabi_f2d>
    72ce:	4602      	mov	r2, r0
    72d0:	460b      	mov	r3, r1
    72d2:	f04f 0100 	mov.w	r1, #0	; 0x0
    72d6:	70f9      	strb	r1, [r7, #3]
    72d8:	4610      	mov	r0, r2
    72da:	4619      	mov	r1, r3
    72dc:	a218      	add	r2, pc, #96	(adr r2, 7340 <_ZN14Asservissement14setAngularDutyEf+0xb0>)
    72de:	ca0c      	ldmia	r2!, {r2, r3}
    72e0:	f013 f9d6 	bl	1a690 <__aeabi_dcmplt>
    72e4:	4603      	mov	r3, r0
    72e6:	2b00      	cmp	r3, #0
    72e8:	d002      	beq.n	72f0 <_ZN14Asservissement14setAngularDutyEf+0x60>
    72ea:	f04f 0301 	mov.w	r3, #1	; 0x1
    72ee:	70fb      	strb	r3, [r7, #3]
    72f0:	78fb      	ldrb	r3, [r7, #3]
    72f2:	60bb      	str	r3, [r7, #8]
    72f4:	68ba      	ldr	r2, [r7, #8]
    72f6:	2a00      	cmp	r2, #0
    72f8:	d002      	beq.n	7300 <_ZN14Asservissement14setAngularDutyEf+0x70>
    72fa:	4b13      	ldr	r3, [pc, #76]	(7348 <_ZN14Asservissement14setAngularDutyEf+0xb8>)
    72fc:	607b      	str	r3, [r7, #4]
    72fe:	e014      	b.n	732a <_ZN14Asservissement14setAngularDutyEf+0x9a>
    7300:	6938      	ldr	r0, [r7, #16]
    7302:	f012 ff01 	bl	1a108 <__aeabi_f2d>
    7306:	4602      	mov	r2, r0
    7308:	460b      	mov	r3, r1
    730a:	4610      	mov	r0, r2
    730c:	4619      	mov	r1, r3
    730e:	a20a      	add	r2, pc, #40	(adr r2, 7338 <_ZN14Asservissement14setAngularDutyEf+0xa8>)
    7310:	ca0c      	ldmia	r2!, {r2, r3}
    7312:	f013 f9db 	bl	1a6cc <__aeabi_dcmpgt>
    7316:	4603      	mov	r3, r0
    7318:	2b00      	cmp	r3, #0
    731a:	d002      	beq.n	7322 <_ZN14Asservissement14setAngularDutyEf+0x92>
    731c:	4a0b      	ldr	r2, [pc, #44]	(734c <_ZN14Asservissement14setAngularDutyEf+0xbc>)
    731e:	60fa      	str	r2, [r7, #12]
    7320:	e001      	b.n	7326 <_ZN14Asservissement14setAngularDutyEf+0x96>
    7322:	693b      	ldr	r3, [r7, #16]
    7324:	60fb      	str	r3, [r7, #12]
    7326:	68fa      	ldr	r2, [r7, #12]
    7328:	607a      	str	r2, [r7, #4]
    732a:	697b      	ldr	r3, [r7, #20]
    732c:	687a      	ldr	r2, [r7, #4]
    732e:	65da      	str	r2, [r3, #92]
}
    7330:	f107 0718 	add.w	r7, r7, #24	; 0x18
    7334:	46bd      	mov	sp, r7
    7336:	bd80      	pop	{r7, pc}
    7338:	9999999a 	.word	0x9999999a
    733c:	3fc99999 	.word	0x3fc99999
    7340:	9999999a 	.word	0x9999999a
    7344:	bfc99999 	.word	0xbfc99999
    7348:	be4ccccd 	.word	0xbe4ccccd
    734c:	3e4ccccd 	.word	0x3e4ccccd

00007350 <_ZN14Asservissement14resetFixedDutyEv>:

void Asservissement::resetFixedDuty()
    7350:	b480      	push	{r7}
    7352:	b083      	sub	sp, #12
    7354:	af00      	add	r7, sp, #0
    7356:	6078      	str	r0, [r7, #4]
{
    fixedLinearDuty = 0.;
    7358:	687a      	ldr	r2, [r7, #4]
    735a:	4b05      	ldr	r3, [pc, #20]	(7370 <_ZN14Asservissement14resetFixedDutyEv+0x20>)
    735c:	6593      	str	r3, [r2, #88]
    fixedAngularDuty = 0.;
    735e:	687a      	ldr	r2, [r7, #4]
    7360:	4b03      	ldr	r3, [pc, #12]	(7370 <_ZN14Asservissement14resetFixedDutyEv+0x20>)
    7362:	65d3      	str	r3, [r2, #92]
}
    7364:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7368:	46bd      	mov	sp, r7
    736a:	bc80      	pop	{r7}
    736c:	4770      	bx	lr
    736e:	46c0      	nop			(mov r8, r8)
    7370:	00000000 	.word	0x00000000

00007374 <_ZN14Asservissement6updateEv>:
        return Remote::getSingleton()->getRightPWM();
    else*/
        return vitesseAngulaire;
}

void Asservissement::update(void)
    7374:	b590      	push	{r4, r7, lr}
    7376:	b09f      	sub	sp, #124
    7378:	af00      	add	r7, sp, #0
    737a:	6478      	str	r0, [r7, #68]
{
#ifdef ROBOTHW
    #if DEBUG_ODOMEDTRIE == 1
    PositionPlusAngle pos = Odometrie::odometrie->getPos();
    737c:	4bee      	ldr	r3, [pc, #952]	(7738 <_ZN14Asservissement6updateEv+0x3c4>)
    737e:	681a      	ldr	r2, [r3, #0]
    7380:	f107 0354 	add.w	r3, r7, #84	; 0x54
    7384:	4618      	mov	r0, r3
    7386:	4611      	mov	r1, r2
    7388:	f002 f9ea 	bl	9760 <_ZNK9Odometrie6getPosEv>
    Angle absAngle = Odometrie::odometrie->getAbsoluteAngle();
    738c:	4bea      	ldr	r3, [pc, #936]	(7738 <_ZN14Asservissement6updateEv+0x3c4>)
    738e:	681b      	ldr	r3, [r3, #0]
    7390:	4618      	mov	r0, r3
    7392:	f002 f9d9 	bl	9748 <_ZNK9Odometrie16getAbsoluteAngleEv>
    7396:	4603      	mov	r3, r0
    7398:	663b      	str	r3, [r7, #96]
    if ( pos.position.x > 400. /* absAngle > 3.14159265358979323846*2.*/)
    739a:	6d7b      	ldr	r3, [r7, #84]
    739c:	4618      	mov	r0, r3
    739e:	49e7      	ldr	r1, [pc, #924]	(773c <_ZN14Asservissement6updateEv+0x3c8>)
    73a0:	f013 fcde 	bl	1ad60 <__aeabi_fcmpgt>
    73a4:	4603      	mov	r3, r0
    73a6:	2b00      	cmp	r3, #0
    73a8:	d004      	beq.n	73b4 <_ZN14Asservissement6updateEv+0x40>
        Led::setOn(0);
    73aa:	f04f 0000 	mov.w	r0, #0	; 0x0
    73ae:	f004 fce3 	bl	bd78 <_ZN3Led5setOnEi>
    73b2:	e003      	b.n	73bc <_ZN14Asservissement6updateEv+0x48>
    else
        Led::setOff(0);
    73b4:	f04f 0000 	mov.w	r0, #0	; 0x0
    73b8:	f004 fc9e 	bl	bcf8 <_ZN3Led6setOffEi>
    #endif
#endif

    asserCount++;
    73bc:	6c7b      	ldr	r3, [r7, #68]
    73be:	6c9b      	ldr	r3, [r3, #72]
    73c0:	f103 0201 	add.w	r2, r3, #1	; 0x1
    73c4:	6c7b      	ldr	r3, [r7, #68]
    73c6:	649a      	str	r2, [r3, #72]

    if (true)
    {

        PositionPlusAngle positionPlusAngleActuelle = odometrie->getPos();      //Variable juste pour avoir un code plus lisible par la suite
    73c8:	6c7b      	ldr	r3, [r7, #68]
    73ca:	6c5a      	ldr	r2, [r3, #68]
    73cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
    73d0:	4618      	mov	r0, r3
    73d2:	4611      	mov	r1, r2
    73d4:	f002 f9c4 	bl	9760 <_ZNK9Odometrie6getPosEv>
        Angle vitesse_angulaire_atteinte = odometrie->getVitesseAngulaire();    //idem
    73d8:	6c7b      	ldr	r3, [r7, #68]
    73da:	6c5b      	ldr	r3, [r3, #68]
    73dc:	4618      	mov	r0, r3
    73de:	f002 f99b 	bl	9718 <_ZNK9Odometrie19getVitesseAngulaireEv>
    73e2:	4603      	mov	r3, r0
    73e4:	667b      	str	r3, [r7, #100]
        Distance vitesse_lineaire_atteinte = odometrie->getVitesseLineaire();   //idem
    73e6:	6c7b      	ldr	r3, [r7, #68]
    73e8:	6c5b      	ldr	r3, [r3, #68]
    73ea:	4618      	mov	r0, r3
    73ec:	f002 f9a0 	bl	9730 <_ZNK9Odometrie18getVitesseLineaireEv>
    73f0:	4603      	mov	r3, r0
    73f2:	66bb      	str	r3, [r7, #104]

        //Puis on les récupéres

        float vitesse_lineaire_a_atteindre = getLinearSpeed();
    73f4:	6c78      	ldr	r0, [r7, #68]
    73f6:	f7ff fea7 	bl	7148 <_ZN14Asservissement14getLinearSpeedEv>
    73fa:	4603      	mov	r3, r0
    73fc:	66fb      	str	r3, [r7, #108]
        float vitesse_angulaire_a_atteindre = getAngularSpeed();
    73fe:	6c78      	ldr	r0, [r7, #68]
    7400:	f7ff feae 	bl	7160 <_ZN14Asservissement15getAngularSpeedEv>
    7404:	4603      	mov	r3, r0
    7406:	673b      	str	r3, [r7, #112]

#ifdef ROUES


        //on filtre l'erreur de vitesse lineaire et angulaire
        linearDutySent = activePIDDistance ? pid_filter_distance.getFilteredValue(vitesse_lineaire_a_atteindre-vitesse_lineaire_atteinte) : fixedLinearDuty;
    7408:	6c7b      	ldr	r3, [r7, #68]
    740a:	f893 3054 	ldrb.w	r3, [r3, #84]
    740e:	2b00      	cmp	r3, #0
    7410:	d00e      	beq.n	7430 <_ZN14Asservissement6updateEv+0xbc>
    7412:	6c7b      	ldr	r3, [r7, #68]
    7414:	f103 0408 	add.w	r4, r3, #8	; 0x8
    7418:	6ef8      	ldr	r0, [r7, #108]
    741a:	6eb9      	ldr	r1, [r7, #104]
    741c:	f013 f9dc 	bl	1a7d8 <__aeabi_fsub>
    7420:	4603      	mov	r3, r0
    7422:	4620      	mov	r0, r4
    7424:	4619      	mov	r1, r3
    7426:	f002 feed 	bl	a204 <_ZN17PIDFilterDistance16getFilteredValueEf>
    742a:	4603      	mov	r3, r0
    742c:	607b      	str	r3, [r7, #4]
    742e:	e002      	b.n	7436 <_ZN14Asservissement6updateEv+0xc2>
    7430:	6c7b      	ldr	r3, [r7, #68]
    7432:	6d9b      	ldr	r3, [r3, #88]
    7434:	607b      	str	r3, [r7, #4]
    7436:	6c7b      	ldr	r3, [r7, #68]
    7438:	687a      	ldr	r2, [r7, #4]
    743a:	601a      	str	r2, [r3, #0]
        angularDutySent = activePIDAngle ? pid_filter_angle.getFilteredValue(vitesse_angulaire_a_atteindre-vitesse_angulaire_atteinte) : fixedAngularDuty;
    743c:	6c7b      	ldr	r3, [r7, #68]
    743e:	f893 3055 	ldrb.w	r3, [r3, #85]
    7442:	2b00      	cmp	r3, #0
    7444:	d00e      	beq.n	7464 <_ZN14Asservissement6updateEv+0xf0>
    7446:	6c7b      	ldr	r3, [r7, #68]
    7448:	f103 0410 	add.w	r4, r3, #16	; 0x10
    744c:	6f38      	ldr	r0, [r7, #112]
    744e:	6e79      	ldr	r1, [r7, #100]
    7450:	f013 f9c2 	bl	1a7d8 <__aeabi_fsub>
    7454:	4603      	mov	r3, r0
    7456:	4620      	mov	r0, r4
    7458:	4619      	mov	r1, r3
    745a:	f002 fe65 	bl	a128 <_ZN14PIDFilterAngle16getFilteredValueEf>
    745e:	4603      	mov	r3, r0
    7460:	60bb      	str	r3, [r7, #8]
    7462:	e002      	b.n	746a <_ZN14Asservissement6updateEv+0xf6>
    7464:	6c7b      	ldr	r3, [r7, #68]
    7466:	6ddb      	ldr	r3, [r3, #92]
    7468:	60bb      	str	r3, [r7, #8]
    746a:	6c7b      	ldr	r3, [r7, #68]
    746c:	68ba      	ldr	r2, [r7, #8]
    746e:	605a      	str	r2, [r3, #4]

        //Et on borne la somme de ces valeurs filtrée entre -> voir ci dessous
        float limit = 1.0f;
    7470:	4bb3      	ldr	r3, [pc, #716]	(7740 <_ZN14Asservissement6updateEv+0x3cc>)
    7472:	677b      	str	r3, [r7, #116]
        linearDutySent =  MIN(MAX(linearDutySent, -limit),limit);
    7474:	6c7b      	ldr	r3, [r7, #68]
    7476:	681a      	ldr	r2, [r3, #0]
    7478:	6f7b      	ldr	r3, [r7, #116]
    747a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    747e:	4610      	mov	r0, r2
    7480:	4619      	mov	r1, r3
    7482:	f013 fc4f 	bl	1ad24 <__aeabi_fcmplt>
    7486:	4603      	mov	r3, r0
    7488:	2b00      	cmp	r3, #0
    748a:	d004      	beq.n	7496 <_ZN14Asservissement6updateEv+0x122>
    748c:	6f7b      	ldr	r3, [r7, #116]
    748e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7492:	613b      	str	r3, [r7, #16]
    7494:	e002      	b.n	749c <_ZN14Asservissement6updateEv+0x128>
    7496:	6c7b      	ldr	r3, [r7, #68]
    7498:	681b      	ldr	r3, [r3, #0]
    749a:	613b      	str	r3, [r7, #16]
    749c:	6938      	ldr	r0, [r7, #16]
    749e:	6f79      	ldr	r1, [r7, #116]
    74a0:	f013 fc5e 	bl	1ad60 <__aeabi_fcmpgt>
    74a4:	4603      	mov	r3, r0
    74a6:	2b00      	cmp	r3, #0
    74a8:	d002      	beq.n	74b0 <_ZN14Asservissement6updateEv+0x13c>
    74aa:	6f7b      	ldr	r3, [r7, #116]
    74ac:	60fb      	str	r3, [r7, #12]
    74ae:	e015      	b.n	74dc <_ZN14Asservissement6updateEv+0x168>
    74b0:	6c7b      	ldr	r3, [r7, #68]
    74b2:	681a      	ldr	r2, [r3, #0]
    74b4:	6f7b      	ldr	r3, [r7, #116]
    74b6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    74ba:	4610      	mov	r0, r2
    74bc:	4619      	mov	r1, r3
    74be:	f013 fc31 	bl	1ad24 <__aeabi_fcmplt>
    74c2:	4603      	mov	r3, r0
    74c4:	2b00      	cmp	r3, #0
    74c6:	d004      	beq.n	74d2 <_ZN14Asservissement6updateEv+0x15e>
    74c8:	6f7b      	ldr	r3, [r7, #116]
    74ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    74ce:	617b      	str	r3, [r7, #20]
    74d0:	e002      	b.n	74d8 <_ZN14Asservissement6updateEv+0x164>
    74d2:	6c7b      	ldr	r3, [r7, #68]
    74d4:	681b      	ldr	r3, [r3, #0]
    74d6:	617b      	str	r3, [r7, #20]
    74d8:	697a      	ldr	r2, [r7, #20]
    74da:	60fa      	str	r2, [r7, #12]
    74dc:	6c7b      	ldr	r3, [r7, #68]
    74de:	68fa      	ldr	r2, [r7, #12]
    74e0:	601a      	str	r2, [r3, #0]
        angularDutySent = MIN(MAX(angularDutySent, -limit),limit);
    74e2:	6c7b      	ldr	r3, [r7, #68]
    74e4:	685a      	ldr	r2, [r3, #4]
    74e6:	6f7b      	ldr	r3, [r7, #116]
    74e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    74ec:	4610      	mov	r0, r2
    74ee:	4619      	mov	r1, r3
    74f0:	f013 fc18 	bl	1ad24 <__aeabi_fcmplt>
    74f4:	4603      	mov	r3, r0
    74f6:	2b00      	cmp	r3, #0
    74f8:	d004      	beq.n	7504 <_ZN14Asservissement6updateEv+0x190>
    74fa:	6f7b      	ldr	r3, [r7, #116]
    74fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7500:	61fb      	str	r3, [r7, #28]
    7502:	e002      	b.n	750a <_ZN14Asservissement6updateEv+0x196>
    7504:	6c7b      	ldr	r3, [r7, #68]
    7506:	685b      	ldr	r3, [r3, #4]
    7508:	61fb      	str	r3, [r7, #28]
    750a:	69f8      	ldr	r0, [r7, #28]
    750c:	6f79      	ldr	r1, [r7, #116]
    750e:	f013 fc27 	bl	1ad60 <__aeabi_fcmpgt>
    7512:	4603      	mov	r3, r0
    7514:	2b00      	cmp	r3, #0
    7516:	d002      	beq.n	751e <_ZN14Asservissement6updateEv+0x1aa>
    7518:	6f7b      	ldr	r3, [r7, #116]
    751a:	61bb      	str	r3, [r7, #24]
    751c:	e015      	b.n	754a <_ZN14Asservissement6updateEv+0x1d6>
    751e:	6c7b      	ldr	r3, [r7, #68]
    7520:	685a      	ldr	r2, [r3, #4]
    7522:	6f7b      	ldr	r3, [r7, #116]
    7524:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7528:	4610      	mov	r0, r2
    752a:	4619      	mov	r1, r3
    752c:	f013 fbfa 	bl	1ad24 <__aeabi_fcmplt>
    7530:	4603      	mov	r3, r0
    7532:	2b00      	cmp	r3, #0
    7534:	d004      	beq.n	7540 <_ZN14Asservissement6updateEv+0x1cc>
    7536:	6f7b      	ldr	r3, [r7, #116]
    7538:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    753c:	623b      	str	r3, [r7, #32]
    753e:	e002      	b.n	7546 <_ZN14Asservissement6updateEv+0x1d2>
    7540:	6c7b      	ldr	r3, [r7, #68]
    7542:	685b      	ldr	r3, [r3, #4]
    7544:	623b      	str	r3, [r7, #32]
    7546:	6a3a      	ldr	r2, [r7, #32]
    7548:	61ba      	str	r2, [r7, #24]
    754a:	6c7b      	ldr	r3, [r7, #68]
    754c:	69ba      	ldr	r2, [r7, #24]
    754e:	605a      	str	r2, [r3, #4]
 //       linearDutySent = fabs(linearDutySent) > 0.05 || vitesse_lineaire_a_atteindre > 0.01 ? linearDutySent : 0;
 //       angularDutySent = fabs(angularDutySent) > 0.05 || vitesse_angulaire_a_atteindre > 0.0001 ? angularDutySent : 0;


        // test d'arret complet si c'est l'ordre qu'on lui donne
        if (vitesse_lineaire_a_atteindre == 0.0f && vitesse_angulaire_a_atteindre == 0.0f)
    7550:	6ef8      	ldr	r0, [r7, #108]
    7552:	497c      	ldr	r1, [pc, #496]	(7744 <_ZN14Asservissement6updateEv+0x3d0>)
    7554:	f013 fbdc 	bl	1ad10 <__aeabi_fcmpeq>
    7558:	4603      	mov	r3, r0
    755a:	2b00      	cmp	r3, #0
    755c:	d00c      	beq.n	7578 <_ZN14Asservissement6updateEv+0x204>
    755e:	6f38      	ldr	r0, [r7, #112]
    7560:	4978      	ldr	r1, [pc, #480]	(7744 <_ZN14Asservissement6updateEv+0x3d0>)
    7562:	f013 fbd5 	bl	1ad10 <__aeabi_fcmpeq>
    7566:	4603      	mov	r3, r0
    7568:	2b00      	cmp	r3, #0
    756a:	d005      	beq.n	7578 <_ZN14Asservissement6updateEv+0x204>
        {
            linearDutySent = 0.0f;
    756c:	6c7a      	ldr	r2, [r7, #68]
    756e:	4b75      	ldr	r3, [pc, #468]	(7744 <_ZN14Asservissement6updateEv+0x3d0>)
    7570:	6013      	str	r3, [r2, #0]
            angularDutySent = 0.0f;
    7572:	6c7a      	ldr	r2, [r7, #68]
    7574:	4b73      	ldr	r3, [pc, #460]	(7744 <_ZN14Asservissement6updateEv+0x3d0>)
    7576:	6053      	str	r3, [r2, #4]
        {
        #if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
            roues.droite.tourne(0.8*MIN(MAX(+linearDutySent-angularDutySent, -limit),limit));
            roues.gauche.tourne(0.8*MIN(MAX(+linearDutySent+angularDutySent, -limit),limit));
        #else
            roues.droite.tourne(0.95*MIN(MAX(+linearDutySent+angularDutySent, -limit),limit));//*1
    7578:	6c7b      	ldr	r3, [r7, #68]
    757a:	f103 0328 	add.w	r3, r3, #40	; 0x28
    757e:	627b      	str	r3, [r7, #36]
    7580:	6c7b      	ldr	r3, [r7, #68]
    7582:	681a      	ldr	r2, [r3, #0]
    7584:	6c7b      	ldr	r3, [r7, #68]
    7586:	685b      	ldr	r3, [r3, #4]
    7588:	4610      	mov	r0, r2
    758a:	4619      	mov	r1, r3
    758c:	f013 f926 	bl	1a7dc <__addsf3>
    7590:	4603      	mov	r3, r0
    7592:	461a      	mov	r2, r3
    7594:	6f7b      	ldr	r3, [r7, #116]
    7596:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    759a:	4610      	mov	r0, r2
    759c:	4619      	mov	r1, r3
    759e:	f013 fbc1 	bl	1ad24 <__aeabi_fcmplt>
    75a2:	4603      	mov	r3, r0
    75a4:	2b00      	cmp	r3, #0
    75a6:	d004      	beq.n	75b2 <_ZN14Asservissement6updateEv+0x23e>
    75a8:	6f7b      	ldr	r3, [r7, #116]
    75aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    75ae:	62fb      	str	r3, [r7, #44]
    75b0:	e009      	b.n	75c6 <_ZN14Asservissement6updateEv+0x252>
    75b2:	6c7b      	ldr	r3, [r7, #68]
    75b4:	681a      	ldr	r2, [r3, #0]
    75b6:	6c7b      	ldr	r3, [r7, #68]
    75b8:	685b      	ldr	r3, [r3, #4]
    75ba:	4610      	mov	r0, r2
    75bc:	4619      	mov	r1, r3
    75be:	f013 f90d 	bl	1a7dc <__addsf3>
    75c2:	4603      	mov	r3, r0
    75c4:	62fb      	str	r3, [r7, #44]
    75c6:	6af8      	ldr	r0, [r7, #44]
    75c8:	6f79      	ldr	r1, [r7, #116]
    75ca:	f013 fbc9 	bl	1ad60 <__aeabi_fcmpgt>
    75ce:	4603      	mov	r3, r0
    75d0:	2b00      	cmp	r3, #0
    75d2:	d002      	beq.n	75da <_ZN14Asservissement6updateEv+0x266>
    75d4:	6f7b      	ldr	r3, [r7, #116]
    75d6:	62bb      	str	r3, [r7, #40]
    75d8:	e024      	b.n	7624 <_ZN14Asservissement6updateEv+0x2b0>
    75da:	6c7b      	ldr	r3, [r7, #68]
    75dc:	681a      	ldr	r2, [r3, #0]
    75de:	6c7b      	ldr	r3, [r7, #68]
    75e0:	685b      	ldr	r3, [r3, #4]
    75e2:	4610      	mov	r0, r2
    75e4:	4619      	mov	r1, r3
    75e6:	f013 f8f9 	bl	1a7dc <__addsf3>
    75ea:	4603      	mov	r3, r0
    75ec:	461a      	mov	r2, r3
    75ee:	6f7b      	ldr	r3, [r7, #116]
    75f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    75f4:	4610      	mov	r0, r2
    75f6:	4619      	mov	r1, r3
    75f8:	f013 fb94 	bl	1ad24 <__aeabi_fcmplt>
    75fc:	4603      	mov	r3, r0
    75fe:	2b00      	cmp	r3, #0
    7600:	d004      	beq.n	760c <_ZN14Asservissement6updateEv+0x298>
    7602:	6f7b      	ldr	r3, [r7, #116]
    7604:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7608:	633b      	str	r3, [r7, #48]
    760a:	e009      	b.n	7620 <_ZN14Asservissement6updateEv+0x2ac>
    760c:	6c7b      	ldr	r3, [r7, #68]
    760e:	681a      	ldr	r2, [r3, #0]
    7610:	6c7b      	ldr	r3, [r7, #68]
    7612:	685b      	ldr	r3, [r3, #4]
    7614:	4610      	mov	r0, r2
    7616:	4619      	mov	r1, r3
    7618:	f013 f8e0 	bl	1a7dc <__addsf3>
    761c:	4603      	mov	r3, r0
    761e:	633b      	str	r3, [r7, #48]
    7620:	6b3a      	ldr	r2, [r7, #48]
    7622:	62ba      	str	r2, [r7, #40]
    7624:	6ab8      	ldr	r0, [r7, #40]
    7626:	f012 fd6f 	bl	1a108 <__aeabi_f2d>
    762a:	4602      	mov	r2, r0
    762c:	460b      	mov	r3, r1
    762e:	4610      	mov	r0, r2
    7630:	4619      	mov	r1, r3
    7632:	a23f      	add	r2, pc, #252	(adr r2, 7730 <_ZN14Asservissement6updateEv+0x3bc>)
    7634:	ca0c      	ldmia	r2!, {r2, r3}
    7636:	f012 fdbb 	bl	1a1b0 <__aeabi_dmul>
    763a:	4602      	mov	r2, r0
    763c:	460b      	mov	r3, r1
    763e:	4610      	mov	r0, r2
    7640:	4619      	mov	r1, r3
    7642:	f013 f875 	bl	1a730 <__aeabi_d2f>
    7646:	4603      	mov	r3, r0
    7648:	6a78      	ldr	r0, [r7, #36]
    764a:	4619      	mov	r1, r3
    764c:	f005 fab8 	bl	cbc0 <_ZN4Roue6tourneEf>
            roues.gauche.tourne(0.95*MIN(MAX(+linearDutySent-angularDutySent, -limit),limit));//*1
    7650:	6c7b      	ldr	r3, [r7, #68]
    7652:	f103 0318 	add.w	r3, r3, #24	; 0x18
    7656:	637b      	str	r3, [r7, #52]
    7658:	6c7b      	ldr	r3, [r7, #68]
    765a:	681a      	ldr	r2, [r3, #0]
    765c:	6c7b      	ldr	r3, [r7, #68]
    765e:	685b      	ldr	r3, [r3, #4]
    7660:	4610      	mov	r0, r2
    7662:	4619      	mov	r1, r3
    7664:	f013 f8b8 	bl	1a7d8 <__aeabi_fsub>
    7668:	4603      	mov	r3, r0
    766a:	461a      	mov	r2, r3
    766c:	6f7b      	ldr	r3, [r7, #116]
    766e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7672:	4610      	mov	r0, r2
    7674:	4619      	mov	r1, r3
    7676:	f013 fb55 	bl	1ad24 <__aeabi_fcmplt>
    767a:	4603      	mov	r3, r0
    767c:	2b00      	cmp	r3, #0
    767e:	d004      	beq.n	768a <_ZN14Asservissement6updateEv+0x316>
    7680:	6f7b      	ldr	r3, [r7, #116]
    7682:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7686:	63fb      	str	r3, [r7, #60]
    7688:	e009      	b.n	769e <_ZN14Asservissement6updateEv+0x32a>
    768a:	6c7b      	ldr	r3, [r7, #68]
    768c:	681a      	ldr	r2, [r3, #0]
    768e:	6c7b      	ldr	r3, [r7, #68]
    7690:	685b      	ldr	r3, [r3, #4]
    7692:	4610      	mov	r0, r2
    7694:	4619      	mov	r1, r3
    7696:	f013 f89f 	bl	1a7d8 <__aeabi_fsub>
    769a:	4603      	mov	r3, r0
    769c:	63fb      	str	r3, [r7, #60]
    769e:	6bf8      	ldr	r0, [r7, #60]
    76a0:	6f79      	ldr	r1, [r7, #116]
    76a2:	f013 fb5d 	bl	1ad60 <__aeabi_fcmpgt>
    76a6:	4603      	mov	r3, r0
    76a8:	2b00      	cmp	r3, #0
    76aa:	d002      	beq.n	76b2 <_ZN14Asservissement6updateEv+0x33e>
    76ac:	6f7b      	ldr	r3, [r7, #116]
    76ae:	63bb      	str	r3, [r7, #56]
    76b0:	e024      	b.n	76fc <_ZN14Asservissement6updateEv+0x388>
    76b2:	6c7b      	ldr	r3, [r7, #68]
    76b4:	681a      	ldr	r2, [r3, #0]
    76b6:	6c7b      	ldr	r3, [r7, #68]
    76b8:	685b      	ldr	r3, [r3, #4]
    76ba:	4610      	mov	r0, r2
    76bc:	4619      	mov	r1, r3
    76be:	f013 f88b 	bl	1a7d8 <__aeabi_fsub>
    76c2:	4603      	mov	r3, r0
    76c4:	461a      	mov	r2, r3
    76c6:	6f7b      	ldr	r3, [r7, #116]
    76c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    76cc:	4610      	mov	r0, r2
    76ce:	4619      	mov	r1, r3
    76d0:	f013 fb28 	bl	1ad24 <__aeabi_fcmplt>
    76d4:	4603      	mov	r3, r0
    76d6:	2b00      	cmp	r3, #0
    76d8:	d004      	beq.n	76e4 <_ZN14Asservissement6updateEv+0x370>
    76da:	6f7b      	ldr	r3, [r7, #116]
    76dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    76e0:	643b      	str	r3, [r7, #64]
    76e2:	e009      	b.n	76f8 <_ZN14Asservissement6updateEv+0x384>
    76e4:	6c7b      	ldr	r3, [r7, #68]
    76e6:	681a      	ldr	r2, [r3, #0]
    76e8:	6c7b      	ldr	r3, [r7, #68]
    76ea:	685b      	ldr	r3, [r3, #4]
    76ec:	4610      	mov	r0, r2
    76ee:	4619      	mov	r1, r3
    76f0:	f013 f872 	bl	1a7d8 <__aeabi_fsub>
    76f4:	4603      	mov	r3, r0
    76f6:	643b      	str	r3, [r7, #64]
    76f8:	6c3a      	ldr	r2, [r7, #64]
    76fa:	63ba      	str	r2, [r7, #56]
    76fc:	6bb8      	ldr	r0, [r7, #56]
    76fe:	f012 fd03 	bl	1a108 <__aeabi_f2d>
    7702:	4602      	mov	r2, r0
    7704:	460b      	mov	r3, r1
    7706:	4610      	mov	r0, r2
    7708:	4619      	mov	r1, r3
    770a:	a209      	add	r2, pc, #36	(adr r2, 7730 <_ZN14Asservissement6updateEv+0x3bc>)
    770c:	ca0c      	ldmia	r2!, {r2, r3}
    770e:	f012 fd4f 	bl	1a1b0 <__aeabi_dmul>
    7712:	4602      	mov	r2, r0
    7714:	460b      	mov	r3, r1
    7716:	4610      	mov	r0, r2
    7718:	4619      	mov	r1, r3
    771a:	f013 f809 	bl	1a730 <__aeabi_d2f>
    771e:	4603      	mov	r3, r0
    7720:	6b78      	ldr	r0, [r7, #52]
    7722:	4619      	mov	r1, r3
    7724:	f005 fa4c 	bl	cbc0 <_ZN4Roue6tourneEf>
        roues.droite.tourne(0.);
    }
#else
}
#endif
}
    7728:	f107 077c 	add.w	r7, r7, #124	; 0x7c
    772c:	46bd      	mov	sp, r7
    772e:	bd90      	pop	{r4, r7, pc}
    7730:	66666666 	.word	0x66666666
    7734:	3fee6666 	.word	0x3fee6666
    7738:	20000570 	.word	0x20000570
    773c:	43c80000 	.word	0x43c80000
    7740:	3f800000 	.word	0x3f800000
    7744:	00000000 	.word	0x00000000

00007748 <SysTick_Handler>:

#ifdef ROBOTHW
//pour lancer l'update à chaque tic d'horloge
extern "C" void SysTick_Handler()
    7748:	b580      	push	{r7, lr}
    774a:	af00      	add	r7, sp, #0
{
    // Count the number of SysTick_Handler call
    systick_count++;
    774c:	4b09      	ldr	r3, [pc, #36]	(7774 <SysTick_Handler+0x2c>)
    774e:	681b      	ldr	r3, [r3, #0]
    7750:	f103 0201 	add.w	r2, r3, #1	; 0x1
    7754:	4b07      	ldr	r3, [pc, #28]	(7774 <SysTick_Handler+0x2c>)
    7756:	601a      	str	r2, [r3, #0]
    if (systick_count%200 == 0){
        Led::toggle(0);
    }
#endif

    Odometrie::odometrie->update();
    7758:	4b07      	ldr	r3, [pc, #28]	(7778 <SysTick_Handler+0x30>)
    775a:	681b      	ldr	r3, [r3, #0]
    775c:	4618      	mov	r0, r3
    775e:	f002 f8e9 	bl	9934 <_ZN9Odometrie6updateEv>

    StrategieV2::update();
    7762:	f00e f9cd 	bl	15b00 <_ZN11StrategieV26updateEv>

    Asservissement::asservissement->update();
    7766:	4b05      	ldr	r3, [pc, #20]	(777c <SysTick_Handler+0x34>)
    7768:	681b      	ldr	r3, [r3, #0]
    776a:	4618      	mov	r0, r3
    776c:	f7ff fe02 	bl	7374 <_ZN14Asservissement6updateEv>
}
    7770:	46bd      	mov	sp, r7
    7772:	bd80      	pop	{r7, pc}
    7774:	20000568 	.word	0x20000568
    7778:	20000570 	.word	0x20000570
    777c:	20000560 	.word	0x20000560

00007780 <_ZN14AsservissementC1EP9Odometrie>:

Asservissement * Asservissement::asservissement = NULL; //Pour que nos variables static soient défini
bool Asservissement::matchFini = false;
const uint16_t Asservissement::nb_ms_between_updates = MS_BETWEEN_UPDATE;

Asservissement::Asservissement(Odometrie* _odometrie) :
    7780:	b580      	push	{r7, lr}
    7782:	b084      	sub	sp, #16
    7784:	af00      	add	r7, sp, #0
    7786:	6078      	str	r0, [r7, #4]
    7788:	6039      	str	r1, [r7, #0]
    seuil_collision(SEUIL_COLISION),
    buffer_collision(0xffffffff)
    778a:	687b      	ldr	r3, [r7, #4]
    778c:	f103 0308 	add.w	r3, r3, #8	; 0x8
    7790:	4618      	mov	r0, r3
    7792:	f002 fd23 	bl	a1dc <_ZN17PIDFilterDistanceC1Ev>
    7796:	687b      	ldr	r3, [r7, #4]
    7798:	f103 0310 	add.w	r3, r3, #16	; 0x10
    779c:	4618      	mov	r0, r3
    779e:	f002 fcaf 	bl	a100 <_ZN14PIDFilterAngleC1Ev>
    77a2:	687b      	ldr	r3, [r7, #4]
    77a4:	f103 0318 	add.w	r3, r3, #24	; 0x18
    77a8:	4618      	mov	r0, r3
    77aa:	f7fe f837 	bl	581c <_ZN5RouesC1Ev>
    77ae:	687a      	ldr	r2, [r7, #4]
    77b0:	4b26      	ldr	r3, [pc, #152]	(784c <_ZN14AsservissementC1EP9Odometrie+0xcc>)
    77b2:	63d3      	str	r3, [r2, #60]
    77b4:	687a      	ldr	r2, [r7, #4]
    77b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    77ba:	6413      	str	r3, [r2, #64]
{
    vitesseLineaire = 0;
    77bc:	687a      	ldr	r2, [r7, #4]
    77be:	4b24      	ldr	r3, [pc, #144]	(7850 <_ZN14AsservissementC1EP9Odometrie+0xd0>)
    77c0:	64d3      	str	r3, [r2, #76]
    vitesseAngulaire = 0;
    77c2:	687a      	ldr	r2, [r7, #4]
    77c4:	4b22      	ldr	r3, [pc, #136]	(7850 <_ZN14AsservissementC1EP9Odometrie+0xd0>)
    77c6:	6513      	str	r3, [r2, #80]
	odometrie = _odometrie;
    77c8:	687a      	ldr	r2, [r7, #4]
    77ca:	683b      	ldr	r3, [r7, #0]
    77cc:	6453      	str	r3, [r2, #68]

    activePIDDistance = true;
    77ce:	687a      	ldr	r2, [r7, #4]
    77d0:	f04f 0301 	mov.w	r3, #1	; 0x1
    77d4:	f882 3054 	strb.w	r3, [r2, #84]
    activePIDAngle = true;
    77d8:	687a      	ldr	r2, [r7, #4]
    77da:	f04f 0301 	mov.w	r3, #1	; 0x1
    77de:	f882 3055 	strb.w	r3, [r2, #85]

    resetFixedDuty();
    77e2:	6878      	ldr	r0, [r7, #4]
    77e4:	f7ff fdb4 	bl	7350 <_ZN14Asservissement14resetFixedDutyEv>

    linearDutySent = 0;
    77e8:	687a      	ldr	r2, [r7, #4]
    77ea:	4b19      	ldr	r3, [pc, #100]	(7850 <_ZN14AsservissementC1EP9Odometrie+0xd0>)
    77ec:	6013      	str	r3, [r2, #0]
    angularDutySent = 0;
    77ee:	687a      	ldr	r2, [r7, #4]
    77f0:	4b17      	ldr	r3, [pc, #92]	(7850 <_ZN14AsservissementC1EP9Odometrie+0xd0>)
    77f2:	6053      	str	r3, [r2, #4]
    Asservissement::asservissement = this;
    77f4:	4a17      	ldr	r2, [pc, #92]	(7854 <_ZN14AsservissementC1EP9Odometrie+0xd4>)
    77f6:	687b      	ldr	r3, [r7, #4]
    77f8:	6013      	str	r3, [r2, #0]
    asserCount = 0;
    77fa:	687a      	ldr	r2, [r7, #4]
    77fc:	f04f 0300 	mov.w	r3, #0	; 0x0
    7800:	6493      	str	r3, [r2, #72]
#ifdef CAPTEURS
    sensors = Sensors::getSensors();
    7802:	f7fe f911 	bl	5a28 <_ZN7Sensors10getSensorsEv>
    7806:	4602      	mov	r2, r0
    7808:	687b      	ldr	r3, [r7, #4]
    780a:	639a      	str	r2, [r3, #56]
#endif

#ifdef ROBOTHW  //on définie les interruptions possibles dues à certains ports
    *((uint32_t *)(STK_CTRL_ADDR)) = 0x03; // CLKSOURCE:0 ; TICKINT: 1 ; ENABLE:1
    780c:	4a12      	ldr	r2, [pc, #72]	(7858 <_ZN14AsservissementC1EP9Odometrie+0xd8>)
    780e:	f04f 0303 	mov.w	r3, #3	; 0x3
    7812:	6013      	str	r3, [r2, #0]
#ifdef STM32F40_41xxx
    *((uint32_t *)(STK_LOAD_ADDR)) = 21000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
#else
    *((uint32_t *)(STK_LOAD_ADDR)) = 9000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
    7814:	4a11      	ldr	r2, [pc, #68]	(785c <_ZN14AsservissementC1EP9Odometrie+0xdc>)
    7816:	f64a 73c8 	movw	r3, #45000	; 0xafc8
    781a:	6013      	str	r3, [r2, #0]
    // le micro controlleur tourne à une frequence f (72Mhz ici), la valeur à mettre est (0.001*(f/8))*(temps en ms entre chaque update)
    // voir p190 de la doc

    NVIC_InitTypeDef SysTick_IRQ;

    SysTick_IRQ.NVIC_IRQChannel = SysTick_IRQn;
    781c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7820:	733b      	strb	r3, [r7, #12]
    SysTick_IRQ.NVIC_IRQChannelCmd = ENABLE;
    7822:	f04f 0301 	mov.w	r3, #1	; 0x1
    7826:	73fb      	strb	r3, [r7, #15]
    SysTick_IRQ.NVIC_IRQChannelPreemptionPriority = 0;
    7828:	f04f 0300 	mov.w	r3, #0	; 0x0
    782c:	737b      	strb	r3, [r7, #13]
    SysTick_IRQ.NVIC_IRQChannelSubPriority = 1;
    782e:	f04f 0301 	mov.w	r3, #1	; 0x1
    7832:	73bb      	strb	r3, [r7, #14]
    NVIC_Init(&SysTick_IRQ);
    7834:	f107 030c 	add.w	r3, r7, #12	; 0xc
    7838:	4618      	mov	r0, r3
    783a:	f7f8 fcef 	bl	21c <NVIC_Init>
#endif
}
    783e:	687b      	ldr	r3, [r7, #4]
    7840:	4618      	mov	r0, r3
    7842:	f107 0710 	add.w	r7, r7, #16	; 0x10
    7846:	46bd      	mov	sp, r7
    7848:	bd80      	pop	{r7, pc}
    784a:	46c0      	nop			(mov r8, r8)
    784c:	3f800000 	.word	0x3f800000
    7850:	00000000 	.word	0x00000000
    7854:	20000560 	.word	0x20000560
    7858:	e000e010 	.word	0xe000e010
    785c:	e000e014 	.word	0xe000e014

00007860 <_ZN14AsservissementC2EP9Odometrie>:

Asservissement * Asservissement::asservissement = NULL; //Pour que nos variables static soient défini
bool Asservissement::matchFini = false;
const uint16_t Asservissement::nb_ms_between_updates = MS_BETWEEN_UPDATE;

Asservissement::Asservissement(Odometrie* _odometrie) :
    7860:	b580      	push	{r7, lr}
    7862:	b084      	sub	sp, #16
    7864:	af00      	add	r7, sp, #0
    7866:	6078      	str	r0, [r7, #4]
    7868:	6039      	str	r1, [r7, #0]
    seuil_collision(SEUIL_COLISION),
    buffer_collision(0xffffffff)
    786a:	687b      	ldr	r3, [r7, #4]
    786c:	f103 0308 	add.w	r3, r3, #8	; 0x8
    7870:	4618      	mov	r0, r3
    7872:	f002 fcb3 	bl	a1dc <_ZN17PIDFilterDistanceC1Ev>
    7876:	687b      	ldr	r3, [r7, #4]
    7878:	f103 0310 	add.w	r3, r3, #16	; 0x10
    787c:	4618      	mov	r0, r3
    787e:	f002 fc3f 	bl	a100 <_ZN14PIDFilterAngleC1Ev>
    7882:	687b      	ldr	r3, [r7, #4]
    7884:	f103 0318 	add.w	r3, r3, #24	; 0x18
    7888:	4618      	mov	r0, r3
    788a:	f7fd ffc7 	bl	581c <_ZN5RouesC1Ev>
    788e:	687a      	ldr	r2, [r7, #4]
    7890:	4b26      	ldr	r3, [pc, #152]	(792c <_ZN14AsservissementC2EP9Odometrie+0xcc>)
    7892:	63d3      	str	r3, [r2, #60]
    7894:	687a      	ldr	r2, [r7, #4]
    7896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    789a:	6413      	str	r3, [r2, #64]
{
    vitesseLineaire = 0;
    789c:	687a      	ldr	r2, [r7, #4]
    789e:	4b24      	ldr	r3, [pc, #144]	(7930 <_ZN14AsservissementC2EP9Odometrie+0xd0>)
    78a0:	64d3      	str	r3, [r2, #76]
    vitesseAngulaire = 0;
    78a2:	687a      	ldr	r2, [r7, #4]
    78a4:	4b22      	ldr	r3, [pc, #136]	(7930 <_ZN14AsservissementC2EP9Odometrie+0xd0>)
    78a6:	6513      	str	r3, [r2, #80]
	odometrie = _odometrie;
    78a8:	687a      	ldr	r2, [r7, #4]
    78aa:	683b      	ldr	r3, [r7, #0]
    78ac:	6453      	str	r3, [r2, #68]

    activePIDDistance = true;
    78ae:	687a      	ldr	r2, [r7, #4]
    78b0:	f04f 0301 	mov.w	r3, #1	; 0x1
    78b4:	f882 3054 	strb.w	r3, [r2, #84]
    activePIDAngle = true;
    78b8:	687a      	ldr	r2, [r7, #4]
    78ba:	f04f 0301 	mov.w	r3, #1	; 0x1
    78be:	f882 3055 	strb.w	r3, [r2, #85]

    resetFixedDuty();
    78c2:	6878      	ldr	r0, [r7, #4]
    78c4:	f7ff fd44 	bl	7350 <_ZN14Asservissement14resetFixedDutyEv>

    linearDutySent = 0;
    78c8:	687a      	ldr	r2, [r7, #4]
    78ca:	4b19      	ldr	r3, [pc, #100]	(7930 <_ZN14AsservissementC2EP9Odometrie+0xd0>)
    78cc:	6013      	str	r3, [r2, #0]
    angularDutySent = 0;
    78ce:	687a      	ldr	r2, [r7, #4]
    78d0:	4b17      	ldr	r3, [pc, #92]	(7930 <_ZN14AsservissementC2EP9Odometrie+0xd0>)
    78d2:	6053      	str	r3, [r2, #4]
    Asservissement::asservissement = this;
    78d4:	4a17      	ldr	r2, [pc, #92]	(7934 <_ZN14AsservissementC2EP9Odometrie+0xd4>)
    78d6:	687b      	ldr	r3, [r7, #4]
    78d8:	6013      	str	r3, [r2, #0]
    asserCount = 0;
    78da:	687a      	ldr	r2, [r7, #4]
    78dc:	f04f 0300 	mov.w	r3, #0	; 0x0
    78e0:	6493      	str	r3, [r2, #72]
#ifdef CAPTEURS
    sensors = Sensors::getSensors();
    78e2:	f7fe f8a1 	bl	5a28 <_ZN7Sensors10getSensorsEv>
    78e6:	4602      	mov	r2, r0
    78e8:	687b      	ldr	r3, [r7, #4]
    78ea:	639a      	str	r2, [r3, #56]
#endif

#ifdef ROBOTHW  //on définie les interruptions possibles dues à certains ports
    *((uint32_t *)(STK_CTRL_ADDR)) = 0x03; // CLKSOURCE:0 ; TICKINT: 1 ; ENABLE:1
    78ec:	4a12      	ldr	r2, [pc, #72]	(7938 <_ZN14AsservissementC2EP9Odometrie+0xd8>)
    78ee:	f04f 0303 	mov.w	r3, #3	; 0x3
    78f2:	6013      	str	r3, [r2, #0]
#ifdef STM32F40_41xxx
    *((uint32_t *)(STK_LOAD_ADDR)) = 21000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
#else
    *((uint32_t *)(STK_LOAD_ADDR)) = 9000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
    78f4:	4a11      	ldr	r2, [pc, #68]	(793c <_ZN14AsservissementC2EP9Odometrie+0xdc>)
    78f6:	f64a 73c8 	movw	r3, #45000	; 0xafc8
    78fa:	6013      	str	r3, [r2, #0]
    // le micro controlleur tourne à une frequence f (72Mhz ici), la valeur à mettre est (0.001*(f/8))*(temps en ms entre chaque update)
    // voir p190 de la doc

    NVIC_InitTypeDef SysTick_IRQ;

    SysTick_IRQ.NVIC_IRQChannel = SysTick_IRQn;
    78fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7900:	733b      	strb	r3, [r7, #12]
    SysTick_IRQ.NVIC_IRQChannelCmd = ENABLE;
    7902:	f04f 0301 	mov.w	r3, #1	; 0x1
    7906:	73fb      	strb	r3, [r7, #15]
    SysTick_IRQ.NVIC_IRQChannelPreemptionPriority = 0;
    7908:	f04f 0300 	mov.w	r3, #0	; 0x0
    790c:	737b      	strb	r3, [r7, #13]
    SysTick_IRQ.NVIC_IRQChannelSubPriority = 1;
    790e:	f04f 0301 	mov.w	r3, #1	; 0x1
    7912:	73bb      	strb	r3, [r7, #14]
    NVIC_Init(&SysTick_IRQ);
    7914:	f107 030c 	add.w	r3, r7, #12	; 0xc
    7918:	4618      	mov	r0, r3
    791a:	f7f8 fc7f 	bl	21c <NVIC_Init>
#endif
}
    791e:	687b      	ldr	r3, [r7, #4]
    7920:	4618      	mov	r0, r3
    7922:	f107 0710 	add.w	r7, r7, #16	; 0x10
    7926:	46bd      	mov	sp, r7
    7928:	bd80      	pop	{r7, pc}
    792a:	46c0      	nop			(mov r8, r8)
    792c:	3f800000 	.word	0x3f800000
    7930:	00000000 	.word	0x00000000
    7934:	20000560 	.word	0x20000560
    7938:	e000e010 	.word	0xe000e010
    793c:	e000e014 	.word	0xe000e014

00007940 <_ZN7CommandC2Ev>:
Acceleration Command::acceleration_angulaire = ACCELERATION_ANGULAIRE_MAX; // en radian par nb_ms_between_updates

bool Command::stop = false;
bool Command::limiter = false;

Command::Command()
    7940:	b480      	push	{r7}
    7942:	b083      	sub	sp, #12
    7944:	af00      	add	r7, sp, #0
    7946:	6078      	str	r0, [r7, #4]
    7948:	687a      	ldr	r2, [r7, #4]
    794a:	4b06      	ldr	r3, [pc, #24]	(7964 <_ZN7CommandC2Ev+0x24>)
    794c:	6013      	str	r3, [r2, #0]
{
    Command::stop = false;
    794e:	4a06      	ldr	r2, [pc, #24]	(7968 <_ZN7CommandC2Ev+0x28>)
    7950:	f04f 0300 	mov.w	r3, #0	; 0x0
    7954:	7013      	strb	r3, [r2, #0]
}
    7956:	687b      	ldr	r3, [r7, #4]
    7958:	4618      	mov	r0, r3
    795a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    795e:	46bd      	mov	sp, r7
    7960:	bc80      	pop	{r7}
    7962:	4770      	bx	lr
    7964:	00021830 	.word	0x00021830
    7968:	2000056c 	.word	0x2000056c

0000796c <_ZN7CommandC1Ev>:
Acceleration Command::acceleration_angulaire = ACCELERATION_ANGULAIRE_MAX; // en radian par nb_ms_between_updates

bool Command::stop = false;
bool Command::limiter = false;

Command::Command()
    796c:	b480      	push	{r7}
    796e:	b083      	sub	sp, #12
    7970:	af00      	add	r7, sp, #0
    7972:	6078      	str	r0, [r7, #4]
    7974:	687a      	ldr	r2, [r7, #4]
    7976:	4b06      	ldr	r3, [pc, #24]	(7990 <_ZN7CommandC1Ev+0x24>)
    7978:	6013      	str	r3, [r2, #0]
{
    Command::stop = false;
    797a:	4a06      	ldr	r2, [pc, #24]	(7994 <_ZN7CommandC1Ev+0x28>)
    797c:	f04f 0300 	mov.w	r3, #0	; 0x0
    7980:	7013      	strb	r3, [r2, #0]
}
    7982:	687b      	ldr	r3, [r7, #4]
    7984:	4618      	mov	r0, r3
    7986:	f107 070c 	add.w	r7, r7, #12	; 0xc
    798a:	46bd      	mov	sp, r7
    798c:	bc80      	pop	{r7}
    798e:	4770      	bx	lr
    7990:	00021830 	.word	0x00021830
    7994:	2000056c 	.word	0x2000056c

00007998 <_ZN7Command7getStopEv>:

Command::~Command()
{
}

bool Command::getStop(void)
    7998:	b480      	push	{r7}
    799a:	af00      	add	r7, sp, #0
{
    return Command::stop;
    799c:	4b02      	ldr	r3, [pc, #8]	(79a8 <_ZN7Command7getStopEv+0x10>)
    799e:	781b      	ldrb	r3, [r3, #0]
}
    79a0:	4618      	mov	r0, r3
    79a2:	46bd      	mov	sp, r7
    79a4:	bc80      	pop	{r7}
    79a6:	4770      	bx	lr
    79a8:	2000056c 	.word	0x2000056c

000079ac <_ZN7Command11resetSpeedsEv>:

void Command::resetSpeeds()
    79ac:	b480      	push	{r7}
    79ae:	b083      	sub	sp, #12
    79b0:	af00      	add	r7, sp, #0
    79b2:	6078      	str	r0, [r7, #4]
{

}
    79b4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    79b8:	46bd      	mov	sp, r7
    79ba:	bc80      	pop	{r7}
    79bc:	4770      	bx	lr
    79be:	46c0      	nop			(mov r8, r8)

000079c0 <_ZN7Command16freinageDUrgenceEb>:

void Command::freinageDUrgence(bool doitFreiner)
    79c0:	b480      	push	{r7}
    79c2:	b083      	sub	sp, #12
    79c4:	af00      	add	r7, sp, #0
    79c6:	4603      	mov	r3, r0
    79c8:	71fb      	strb	r3, [r7, #7]
{
    Command::stop = doitFreiner;
    79ca:	4a04      	ldr	r2, [pc, #16]	(79dc <_ZN7Command16freinageDUrgenceEb+0x1c>)
    79cc:	79fb      	ldrb	r3, [r7, #7]
    79ce:	7013      	strb	r3, [r2, #0]
}
    79d0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    79d4:	46bd      	mov	sp, r7
    79d6:	bc80      	pop	{r7}
    79d8:	4770      	bx	lr
    79da:	46c0      	nop			(mov r8, r8)
    79dc:	2000056c 	.word	0x2000056c

000079e0 <_ZNK7Command4finiEv>:

// est ce que la commande a fini ?
bool Command::fini() const
    79e0:	b480      	push	{r7}
    79e2:	b083      	sub	sp, #12
    79e4:	af00      	add	r7, sp, #0
    79e6:	6078      	str	r0, [r7, #4]
{
    return false;
    79e8:	f04f 0300 	mov.w	r3, #0	; 0x0
}
    79ec:	4618      	mov	r0, r3
    79ee:	f107 070c 	add.w	r7, r7, #12	; 0xc
    79f2:	46bd      	mov	sp, r7
    79f4:	bc80      	pop	{r7}
    79f6:	4770      	bx	lr

000079f8 <_ZN7Command10limitSpeedEb>:

void Command::limitSpeed(bool doitLimiter)
    79f8:	b480      	push	{r7}
    79fa:	b083      	sub	sp, #12
    79fc:	af00      	add	r7, sp, #0
    79fe:	4603      	mov	r3, r0
    7a00:	71fb      	strb	r3, [r7, #7]
{
    Command::limiter = doitLimiter;
    7a02:	4a04      	ldr	r2, [pc, #16]	(7a14 <_ZN7Command10limitSpeedEb+0x1c>)
    7a04:	79fb      	ldrb	r3, [r7, #7]
    7a06:	7013      	strb	r3, [r2, #0]
    //vitesseLinMax = 1;//TODO : mettre une valeur réaliste, ou bien sauvegarder la première valeure et la diviser
}
    7a08:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7a0c:	46bd      	mov	sp, r7
    7a0e:	bc80      	pop	{r7}
    7a10:	4770      	bx	lr
    7a12:	46c0      	nop			(mov r8, r8)
    7a14:	2000056d 	.word	0x2000056d

00007a18 <_ZN7Command8getLimitEv>:

bool Command::getLimit(void)
    7a18:	b480      	push	{r7}
    7a1a:	af00      	add	r7, sp, #0
{
    return Command::limiter;
    7a1c:	4b02      	ldr	r3, [pc, #8]	(7a28 <_ZN7Command8getLimitEv+0x10>)
    7a1e:	781b      	ldrb	r3, [r3, #0]
}
    7a20:	4618      	mov	r0, r3
    7a22:	46bd      	mov	sp, r7
    7a24:	bc80      	pop	{r7}
    7a26:	4770      	bx	lr
    7a28:	2000056d 	.word	0x2000056d

00007a2c <_ZN7Command11isLookingAtEff>:
    Position vect = pos - Odometrie::odometrie->getPos().getPosition();

    return (vect.getNorme() < (int) precision);
}

bool Command::isLookingAt(Angle a, float precision)
    7a2c:	b580      	push	{r7, lr}
    7a2e:	b088      	sub	sp, #32
    7a30:	af00      	add	r7, sp, #0
    7a32:	60f8      	str	r0, [r7, #12]
    7a34:	60b9      	str	r1, [r7, #8]
{
    Angle diff = a - Odometrie::odometrie->getPos().angle;
    7a36:	4b3a      	ldr	r3, [pc, #232]	(7b20 <_ZN7Command11isLookingAtEff+0xf4>)
    7a38:	681a      	ldr	r2, [r3, #0]
    7a3a:	f107 0310 	add.w	r3, r7, #16	; 0x10
    7a3e:	4618      	mov	r0, r3
    7a40:	4611      	mov	r1, r2
    7a42:	f001 fe8d 	bl	9760 <_ZNK9Odometrie6getPosEv>
    7a46:	69bb      	ldr	r3, [r7, #24]
    7a48:	68f8      	ldr	r0, [r7, #12]
    7a4a:	4619      	mov	r1, r3
    7a4c:	f012 fec4 	bl	1a7d8 <__aeabi_fsub>
    7a50:	4603      	mov	r3, r0
    7a52:	61fb      	str	r3, [r7, #28]
    7a54:	e012      	b.n	7a7c <_ZN7Command11isLookingAtEff+0x50>

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    7a56:	69f8      	ldr	r0, [r7, #28]
    7a58:	f012 fb56 	bl	1a108 <__aeabi_f2d>
    7a5c:	4602      	mov	r2, r0
    7a5e:	460b      	mov	r3, r1
    7a60:	4610      	mov	r0, r2
    7a62:	4619      	mov	r1, r3
    7a64:	a228      	add	r2, pc, #160	(adr r2, 7b08 <_ZN7Command11isLookingAtEff+0xdc>)
    7a66:	ca0c      	ldmia	r2!, {r2, r3}
    7a68:	f012 f9ee 	bl	19e48 <__aeabi_dsub>
    7a6c:	4602      	mov	r2, r0
    7a6e:	460b      	mov	r3, r1
    7a70:	4610      	mov	r0, r2
    7a72:	4619      	mov	r1, r3
    7a74:	f012 fe5c 	bl	1a730 <__aeabi_d2f>
    7a78:	4603      	mov	r3, r0
    7a7a:	61fb      	str	r3, [r7, #28]

bool Command::isLookingAt(Angle a, float precision)
{
    Angle diff = a - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
    7a7c:	69f8      	ldr	r0, [r7, #28]
    7a7e:	f012 fb43 	bl	1a108 <__aeabi_f2d>
    7a82:	4602      	mov	r2, r0
    7a84:	460b      	mov	r3, r1
    7a86:	4610      	mov	r0, r2
    7a88:	4619      	mov	r1, r3
    7a8a:	a221      	add	r2, pc, #132	(adr r2, 7b10 <_ZN7Command11isLookingAtEff+0xe4>)
    7a8c:	ca0c      	ldmia	r2!, {r2, r3}
    7a8e:	f012 fe13 	bl	1a6b8 <__aeabi_dcmpge>
    7a92:	4603      	mov	r3, r0
    7a94:	2b00      	cmp	r3, #0
    7a96:	d1de      	bne.n	7a56 <_ZN7Command11isLookingAtEff+0x2a>
    7a98:	e012      	b.n	7ac0 <_ZN7Command11isLookingAtEff+0x94>
        diff -= 2.*M_PI;
    while(diff < -M_PI)
        diff += 2.*M_PI;
    7a9a:	69f8      	ldr	r0, [r7, #28]
    7a9c:	f012 fb34 	bl	1a108 <__aeabi_f2d>
    7aa0:	4602      	mov	r2, r0
    7aa2:	460b      	mov	r3, r1
    7aa4:	4610      	mov	r0, r2
    7aa6:	4619      	mov	r1, r3
    7aa8:	a217      	add	r2, pc, #92	(adr r2, 7b08 <_ZN7Command11isLookingAtEff+0xdc>)
    7aaa:	ca0c      	ldmia	r2!, {r2, r3}
    7aac:	f012 f9ce 	bl	19e4c <__adddf3>
    7ab0:	4602      	mov	r2, r0
    7ab2:	460b      	mov	r3, r1
    7ab4:	4610      	mov	r0, r2
    7ab6:	4619      	mov	r1, r3
    7ab8:	f012 fe3a 	bl	1a730 <__aeabi_d2f>
    7abc:	4603      	mov	r3, r0
    7abe:	61fb      	str	r3, [r7, #28]
{
    Angle diff = a - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    while(diff < -M_PI)
    7ac0:	69f8      	ldr	r0, [r7, #28]
    7ac2:	f012 fb21 	bl	1a108 <__aeabi_f2d>
    7ac6:	4602      	mov	r2, r0
    7ac8:	460b      	mov	r3, r1
    7aca:	4610      	mov	r0, r2
    7acc:	4619      	mov	r1, r3
    7ace:	a212      	add	r2, pc, #72	(adr r2, 7b18 <_ZN7Command11isLookingAtEff+0xec>)
    7ad0:	ca0c      	ldmia	r2!, {r2, r3}
    7ad2:	f012 fddd 	bl	1a690 <__aeabi_dcmplt>
    7ad6:	4603      	mov	r3, r0
    7ad8:	2b00      	cmp	r3, #0
    7ada:	d1de      	bne.n	7a9a <_ZN7Command11isLookingAtEff+0x6e>
        diff += 2.*M_PI;

    return (fabs(diff) < precision);
    7adc:	69fb      	ldr	r3, [r7, #28]
    7ade:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    7ae2:	f04f 0300 	mov.w	r3, #0	; 0x0
    7ae6:	71fb      	strb	r3, [r7, #7]
    7ae8:	4610      	mov	r0, r2
    7aea:	68b9      	ldr	r1, [r7, #8]
    7aec:	f013 f91a 	bl	1ad24 <__aeabi_fcmplt>
    7af0:	4603      	mov	r3, r0
    7af2:	2b00      	cmp	r3, #0
    7af4:	d002      	beq.n	7afc <_ZN7Command11isLookingAtEff+0xd0>
    7af6:	f04f 0301 	mov.w	r3, #1	; 0x1
    7afa:	71fb      	strb	r3, [r7, #7]
    7afc:	79fb      	ldrb	r3, [r7, #7]
}
    7afe:	4618      	mov	r0, r3
    7b00:	f107 0720 	add.w	r7, r7, #32	; 0x20
    7b04:	46bd      	mov	sp, r7
    7b06:	bd80      	pop	{r7, pc}
    7b08:	54442d18 	.word	0x54442d18
    7b0c:	401921fb 	.word	0x401921fb
    7b10:	54442d18 	.word	0x54442d18
    7b14:	400921fb 	.word	0x400921fb
    7b18:	54442d18 	.word	0x54442d18
    7b1c:	c00921fb 	.word	0xc00921fb
    7b20:	20000570 	.word	0x20000570

00007b24 <_ZN7Command11isLookingAtE8Positionf>:

bool Command::isLookingAt(Position pos, float precision)
    7b24:	b5b0      	push	{r4, r5, r7, lr}
    7b26:	b090      	sub	sp, #64
    7b28:	af00      	add	r7, sp, #0
    7b2a:	f107 0308 	add.w	r3, r7, #8	; 0x8
    7b2e:	e883 0003 	stmia.w	r3, {r0, r1}
    7b32:	607a      	str	r2, [r7, #4]
{
    Position delta = pos - Odometrie::odometrie->getPos().getPosition();
    7b34:	4b58      	ldr	r3, [pc, #352]	(7c98 <_ZN7Command11isLookingAtE8Positionf+0x174>)
    7b36:	681a      	ldr	r2, [r3, #0]
    7b38:	f107 0320 	add.w	r3, r7, #32	; 0x20
    7b3c:	4618      	mov	r0, r3
    7b3e:	4611      	mov	r1, r2
    7b40:	f001 fe0e 	bl	9760 <_ZNK9Odometrie6getPosEv>
    7b44:	f107 0318 	add.w	r3, r7, #24	; 0x18
    7b48:	f107 0220 	add.w	r2, r7, #32	; 0x20
    7b4c:	4618      	mov	r0, r3
    7b4e:	4611      	mov	r1, r2
    7b50:	f006 ff10 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
    7b54:	f107 0310 	add.w	r3, r7, #16	; 0x10
    7b58:	f107 0208 	add.w	r2, r7, #8	; 0x8
    7b5c:	f107 0c18 	add.w	ip, r7, #24	; 0x18
    7b60:	4618      	mov	r0, r3
    7b62:	4611      	mov	r1, r2
    7b64:	4662      	mov	r2, ip
    7b66:	f006 fd37 	bl	e5d8 <_ZNK8PositionmiERKS_>
    Angle angleVise = atan2(delta.getY(),delta.getX());
    7b6a:	f107 0310 	add.w	r3, r7, #16	; 0x10
    7b6e:	4618      	mov	r0, r3
    7b70:	f006 fce4 	bl	e53c <_ZNK8Position4getYEv>
    7b74:	4603      	mov	r3, r0
    7b76:	4618      	mov	r0, r3
    7b78:	f012 fac6 	bl	1a108 <__aeabi_f2d>
    7b7c:	4604      	mov	r4, r0
    7b7e:	460d      	mov	r5, r1
    7b80:	f107 0310 	add.w	r3, r7, #16	; 0x10
    7b84:	4618      	mov	r0, r3
    7b86:	f006 fccd 	bl	e524 <_ZNK8Position4getXEv>
    7b8a:	4603      	mov	r3, r0
    7b8c:	4618      	mov	r0, r3
    7b8e:	f012 fabb 	bl	1a108 <__aeabi_f2d>
    7b92:	4602      	mov	r2, r0
    7b94:	460b      	mov	r3, r1
    7b96:	4620      	mov	r0, r4
    7b98:	4629      	mov	r1, r5
    7b9a:	f016 fbeb 	bl	1e374 <atan2>
    7b9e:	4602      	mov	r2, r0
    7ba0:	460b      	mov	r3, r1
    7ba2:	4610      	mov	r0, r2
    7ba4:	4619      	mov	r1, r3
    7ba6:	f012 fdc3 	bl	1a730 <__aeabi_d2f>
    7baa:	4603      	mov	r3, r0
    7bac:	63bb      	str	r3, [r7, #56]
    Angle diff = angleVise - Odometrie::odometrie->getPos().angle;
    7bae:	4b3a      	ldr	r3, [pc, #232]	(7c98 <_ZN7Command11isLookingAtE8Positionf+0x174>)
    7bb0:	681a      	ldr	r2, [r3, #0]
    7bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    7bb6:	4618      	mov	r0, r3
    7bb8:	4611      	mov	r1, r2
    7bba:	f001 fdd1 	bl	9760 <_ZNK9Odometrie6getPosEv>
    7bbe:	6b7b      	ldr	r3, [r7, #52]
    7bc0:	6bb8      	ldr	r0, [r7, #56]
    7bc2:	4619      	mov	r1, r3
    7bc4:	f012 fe08 	bl	1a7d8 <__aeabi_fsub>
    7bc8:	4603      	mov	r3, r0
    7bca:	63fb      	str	r3, [r7, #60]
    7bcc:	e012      	b.n	7bf4 <_ZN7Command11isLookingAtE8Positionf+0xd0>

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    7bce:	6bf8      	ldr	r0, [r7, #60]
    7bd0:	f012 fa9a 	bl	1a108 <__aeabi_f2d>
    7bd4:	4602      	mov	r2, r0
    7bd6:	460b      	mov	r3, r1
    7bd8:	4610      	mov	r0, r2
    7bda:	4619      	mov	r1, r3
    7bdc:	a228      	add	r2, pc, #160	(adr r2, 7c80 <_ZN7Command11isLookingAtE8Positionf+0x15c>)
    7bde:	ca0c      	ldmia	r2!, {r2, r3}
    7be0:	f012 f932 	bl	19e48 <__aeabi_dsub>
    7be4:	4602      	mov	r2, r0
    7be6:	460b      	mov	r3, r1
    7be8:	4610      	mov	r0, r2
    7bea:	4619      	mov	r1, r3
    7bec:	f012 fda0 	bl	1a730 <__aeabi_d2f>
    7bf0:	4603      	mov	r3, r0
    7bf2:	63fb      	str	r3, [r7, #60]
{
    Position delta = pos - Odometrie::odometrie->getPos().getPosition();
    Angle angleVise = atan2(delta.getY(),delta.getX());
    Angle diff = angleVise - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
    7bf4:	6bf8      	ldr	r0, [r7, #60]
    7bf6:	f012 fa87 	bl	1a108 <__aeabi_f2d>
    7bfa:	4602      	mov	r2, r0
    7bfc:	460b      	mov	r3, r1
    7bfe:	4610      	mov	r0, r2
    7c00:	4619      	mov	r1, r3
    7c02:	a221      	add	r2, pc, #132	(adr r2, 7c88 <_ZN7Command11isLookingAtE8Positionf+0x164>)
    7c04:	ca0c      	ldmia	r2!, {r2, r3}
    7c06:	f012 fd57 	bl	1a6b8 <__aeabi_dcmpge>
    7c0a:	4603      	mov	r3, r0
    7c0c:	2b00      	cmp	r3, #0
    7c0e:	d1de      	bne.n	7bce <_ZN7Command11isLookingAtE8Positionf+0xaa>
    7c10:	e012      	b.n	7c38 <_ZN7Command11isLookingAtE8Positionf+0x114>
        diff -= 2.*M_PI;
    while(diff < -M_PI)
        diff += 2.*M_PI;
    7c12:	6bf8      	ldr	r0, [r7, #60]
    7c14:	f012 fa78 	bl	1a108 <__aeabi_f2d>
    7c18:	4602      	mov	r2, r0
    7c1a:	460b      	mov	r3, r1
    7c1c:	4610      	mov	r0, r2
    7c1e:	4619      	mov	r1, r3
    7c20:	a217      	add	r2, pc, #92	(adr r2, 7c80 <_ZN7Command11isLookingAtE8Positionf+0x15c>)
    7c22:	ca0c      	ldmia	r2!, {r2, r3}
    7c24:	f012 f912 	bl	19e4c <__adddf3>
    7c28:	4602      	mov	r2, r0
    7c2a:	460b      	mov	r3, r1
    7c2c:	4610      	mov	r0, r2
    7c2e:	4619      	mov	r1, r3
    7c30:	f012 fd7e 	bl	1a730 <__aeabi_d2f>
    7c34:	4603      	mov	r3, r0
    7c36:	63fb      	str	r3, [r7, #60]
    Angle angleVise = atan2(delta.getY(),delta.getX());
    Angle diff = angleVise - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    while(diff < -M_PI)
    7c38:	6bf8      	ldr	r0, [r7, #60]
    7c3a:	f012 fa65 	bl	1a108 <__aeabi_f2d>
    7c3e:	4602      	mov	r2, r0
    7c40:	460b      	mov	r3, r1
    7c42:	4610      	mov	r0, r2
    7c44:	4619      	mov	r1, r3
    7c46:	a212      	add	r2, pc, #72	(adr r2, 7c90 <_ZN7Command11isLookingAtE8Positionf+0x16c>)
    7c48:	ca0c      	ldmia	r2!, {r2, r3}
    7c4a:	f012 fd21 	bl	1a690 <__aeabi_dcmplt>
    7c4e:	4603      	mov	r3, r0
    7c50:	2b00      	cmp	r3, #0
    7c52:	d1de      	bne.n	7c12 <_ZN7Command11isLookingAtE8Positionf+0xee>
        diff += 2.*M_PI;

    return (fabs(diff) < precision);
    7c54:	6bfb      	ldr	r3, [r7, #60]
    7c56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    7c5a:	f04f 0300 	mov.w	r3, #0	; 0x0
    7c5e:	70fb      	strb	r3, [r7, #3]
    7c60:	4610      	mov	r0, r2
    7c62:	6879      	ldr	r1, [r7, #4]
    7c64:	f013 f85e 	bl	1ad24 <__aeabi_fcmplt>
    7c68:	4603      	mov	r3, r0
    7c6a:	2b00      	cmp	r3, #0
    7c6c:	d002      	beq.n	7c74 <_ZN7Command11isLookingAtE8Positionf+0x150>
    7c6e:	f04f 0301 	mov.w	r3, #1	; 0x1
    7c72:	70fb      	strb	r3, [r7, #3]
    7c74:	78fb      	ldrb	r3, [r7, #3]
}
    7c76:	4618      	mov	r0, r3
    7c78:	f107 0740 	add.w	r7, r7, #64	; 0x40
    7c7c:	46bd      	mov	sp, r7
    7c7e:	bdb0      	pop	{r4, r5, r7, pc}
    7c80:	54442d18 	.word	0x54442d18
    7c84:	401921fb 	.word	0x401921fb
    7c88:	54442d18 	.word	0x54442d18
    7c8c:	400921fb 	.word	0x400921fb
    7c90:	54442d18 	.word	0x54442d18
    7c94:	c00921fb 	.word	0xc00921fb
    7c98:	20000570 	.word	0x20000570

00007c9c <_ZN7Command6isNearE8Positionf>:
bool Command::getLimit(void)
{
    return Command::limiter;
}

bool Command::isNear(Position pos, float precision)
    7c9c:	b590      	push	{r4, r7, lr}
    7c9e:	b08d      	sub	sp, #52
    7ca0:	af00      	add	r7, sp, #0
    7ca2:	f107 0308 	add.w	r3, r7, #8	; 0x8
    7ca6:	e883 0003 	stmia.w	r3, {r0, r1}
    7caa:	607a      	str	r2, [r7, #4]
{
    Position vect = pos - Odometrie::odometrie->getPos().getPosition();
    7cac:	4b1d      	ldr	r3, [pc, #116]	(7d24 <_ZN7Command6isNearE8Positionf+0x88>)
    7cae:	681a      	ldr	r2, [r3, #0]
    7cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
    7cb4:	4618      	mov	r0, r3
    7cb6:	4611      	mov	r1, r2
    7cb8:	f001 fd52 	bl	9760 <_ZNK9Odometrie6getPosEv>
    7cbc:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    7cc0:	f107 0224 	add.w	r2, r7, #36	; 0x24
    7cc4:	4618      	mov	r0, r3
    7cc6:	4611      	mov	r1, r2
    7cc8:	f006 fe54 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
    7ccc:	f107 0314 	add.w	r3, r7, #20	; 0x14
    7cd0:	f107 0208 	add.w	r2, r7, #8	; 0x8
    7cd4:	f107 0c1c 	add.w	ip, r7, #28	; 0x1c
    7cd8:	4618      	mov	r0, r3
    7cda:	4611      	mov	r1, r2
    7cdc:	4662      	mov	r2, ip
    7cde:	f006 fc7b 	bl	e5d8 <_ZNK8PositionmiERKS_>

    return (vect.getNorme() < (int) precision);
    7ce2:	f107 0314 	add.w	r3, r7, #20	; 0x14
    7ce6:	4618      	mov	r0, r3
    7ce8:	f006 fd84 	bl	e7f4 <_ZNK8Position8getNormeEv>
    7cec:	4604      	mov	r4, r0
    7cee:	6878      	ldr	r0, [r7, #4]
    7cf0:	f013 f840 	bl	1ad74 <__aeabi_f2iz>
    7cf4:	4603      	mov	r3, r0
    7cf6:	4618      	mov	r0, r3
    7cf8:	f012 fe24 	bl	1a944 <__aeabi_i2f>
    7cfc:	4602      	mov	r2, r0
    7cfe:	f04f 0300 	mov.w	r3, #0	; 0x0
    7d02:	70fb      	strb	r3, [r7, #3]
    7d04:	4620      	mov	r0, r4
    7d06:	4611      	mov	r1, r2
    7d08:	f013 f80c 	bl	1ad24 <__aeabi_fcmplt>
    7d0c:	4603      	mov	r3, r0
    7d0e:	2b00      	cmp	r3, #0
    7d10:	d002      	beq.n	7d18 <_ZN7Command6isNearE8Positionf+0x7c>
    7d12:	f04f 0301 	mov.w	r3, #1	; 0x1
    7d16:	70fb      	strb	r3, [r7, #3]
    7d18:	78fb      	ldrb	r3, [r7, #3]
}
    7d1a:	4618      	mov	r0, r3
    7d1c:	f107 0734 	add.w	r7, r7, #52	; 0x34
    7d20:	46bd      	mov	sp, r7
    7d22:	bd90      	pop	{r4, r7, pc}
    7d24:	20000570 	.word	0x20000570

00007d28 <_ZN7CommandD0Ev>:
Command::Command()
{
    Command::stop = false;
}

Command::~Command()
    7d28:	b580      	push	{r7, lr}
    7d2a:	b082      	sub	sp, #8
    7d2c:	af00      	add	r7, sp, #0
    7d2e:	6078      	str	r0, [r7, #4]
    7d30:	687a      	ldr	r2, [r7, #4]
    7d32:	4b08      	ldr	r3, [pc, #32]	(7d54 <_ZN7CommandD0Ev+0x2c>)
    7d34:	6013      	str	r3, [r2, #0]
{
}
    7d36:	f04f 0301 	mov.w	r3, #1	; 0x1
    7d3a:	b2db      	uxtb	r3, r3
    7d3c:	2b00      	cmp	r3, #0
    7d3e:	d002      	beq.n	7d46 <_ZN7CommandD0Ev+0x1e>
    7d40:	6878      	ldr	r0, [r7, #4]
    7d42:	f006 fb1b 	bl	e37c <_ZdlPv>
    7d46:	687b      	ldr	r3, [r7, #4]
    7d48:	4618      	mov	r0, r3
    7d4a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    7d4e:	46bd      	mov	sp, r7
    7d50:	bd80      	pop	{r7, pc}
    7d52:	46c0      	nop			(mov r8, r8)
    7d54:	00021830 	.word	0x00021830

00007d58 <_ZN7CommandD1Ev>:
Command::Command()
{
    Command::stop = false;
}

Command::~Command()
    7d58:	b580      	push	{r7, lr}
    7d5a:	b082      	sub	sp, #8
    7d5c:	af00      	add	r7, sp, #0
    7d5e:	6078      	str	r0, [r7, #4]
    7d60:	687a      	ldr	r2, [r7, #4]
    7d62:	4b08      	ldr	r3, [pc, #32]	(7d84 <_ZN7CommandD1Ev+0x2c>)
    7d64:	6013      	str	r3, [r2, #0]
{
}
    7d66:	f04f 0300 	mov.w	r3, #0	; 0x0
    7d6a:	b2db      	uxtb	r3, r3
    7d6c:	2b00      	cmp	r3, #0
    7d6e:	d002      	beq.n	7d76 <_ZN7CommandD1Ev+0x1e>
    7d70:	6878      	ldr	r0, [r7, #4]
    7d72:	f006 fb03 	bl	e37c <_ZdlPv>
    7d76:	687b      	ldr	r3, [r7, #4]
    7d78:	4618      	mov	r0, r3
    7d7a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    7d7e:	46bd      	mov	sp, r7
    7d80:	bd80      	pop	{r7, pc}
    7d82:	46c0      	nop			(mov r8, r8)
    7d84:	00021830 	.word	0x00021830

00007d88 <_ZN7CommandD2Ev>:
Command::Command()
{
    Command::stop = false;
}

Command::~Command()
    7d88:	b580      	push	{r7, lr}
    7d8a:	b082      	sub	sp, #8
    7d8c:	af00      	add	r7, sp, #0
    7d8e:	6078      	str	r0, [r7, #4]
    7d90:	687a      	ldr	r2, [r7, #4]
    7d92:	4b08      	ldr	r3, [pc, #32]	(7db4 <_ZN7CommandD2Ev+0x2c>)
    7d94:	6013      	str	r3, [r2, #0]
{
}
    7d96:	f04f 0300 	mov.w	r3, #0	; 0x0
    7d9a:	b2db      	uxtb	r3, r3
    7d9c:	2b00      	cmp	r3, #0
    7d9e:	d002      	beq.n	7da6 <_ZN7CommandD2Ev+0x1e>
    7da0:	6878      	ldr	r0, [r7, #4]
    7da2:	f006 faeb 	bl	e37c <_ZdlPv>
    7da6:	687b      	ldr	r3, [r7, #4]
    7da8:	4618      	mov	r0, r3
    7daa:	f107 0708 	add.w	r7, r7, #8	; 0x8
    7dae:	46bd      	mov	sp, r7
    7db0:	bd80      	pop	{r7, pc}
    7db2:	46c0      	nop			(mov r8, r8)
    7db4:	00021830 	.word	0x00021830

00007db8 <_Z9diffAngleff>:

#ifndef abs
#define abs(x) fabs(x)
#endif

float diffAngle(float a, float b)
    7db8:	b580      	push	{r7, lr}
    7dba:	b084      	sub	sp, #16
    7dbc:	af00      	add	r7, sp, #0
    7dbe:	6078      	str	r0, [r7, #4]
    7dc0:	6039      	str	r1, [r7, #0]
{
    float t = a-b;
    7dc2:	6878      	ldr	r0, [r7, #4]
    7dc4:	6839      	ldr	r1, [r7, #0]
    7dc6:	f012 fd07 	bl	1a7d8 <__aeabi_fsub>
    7dca:	4603      	mov	r3, r0
    7dcc:	60fb      	str	r3, [r7, #12]
    7dce:	e012      	b.n	7df6 <_Z9diffAngleff+0x3e>
    while (t > M_PI)
    {
        t -= 2*M_PI;
    7dd0:	68f8      	ldr	r0, [r7, #12]
    7dd2:	f012 f999 	bl	1a108 <__aeabi_f2d>
    7dd6:	4602      	mov	r2, r0
    7dd8:	460b      	mov	r3, r1
    7dda:	4610      	mov	r0, r2
    7ddc:	4619      	mov	r1, r3
    7dde:	a222      	add	r2, pc, #136	(adr r2, 7e68 <_Z9diffAngleff+0xb0>)
    7de0:	ca0c      	ldmia	r2!, {r2, r3}
    7de2:	f012 f831 	bl	19e48 <__aeabi_dsub>
    7de6:	4602      	mov	r2, r0
    7de8:	460b      	mov	r3, r1
    7dea:	4610      	mov	r0, r2
    7dec:	4619      	mov	r1, r3
    7dee:	f012 fc9f 	bl	1a730 <__aeabi_d2f>
    7df2:	4603      	mov	r3, r0
    7df4:	60fb      	str	r3, [r7, #12]
#endif

float diffAngle(float a, float b)
{
    float t = a-b;
    while (t > M_PI)
    7df6:	68f8      	ldr	r0, [r7, #12]
    7df8:	f012 f986 	bl	1a108 <__aeabi_f2d>
    7dfc:	4602      	mov	r2, r0
    7dfe:	460b      	mov	r3, r1
    7e00:	4610      	mov	r0, r2
    7e02:	4619      	mov	r1, r3
    7e04:	a21a      	add	r2, pc, #104	(adr r2, 7e70 <_Z9diffAngleff+0xb8>)
    7e06:	ca0c      	ldmia	r2!, {r2, r3}
    7e08:	f012 fc60 	bl	1a6cc <__aeabi_dcmpgt>
    7e0c:	4603      	mov	r3, r0
    7e0e:	2b00      	cmp	r3, #0
    7e10:	d1de      	bne.n	7dd0 <_Z9diffAngleff+0x18>
    7e12:	e012      	b.n	7e3a <_Z9diffAngleff+0x82>
    {
        t -= 2*M_PI;
    }
    while (t < -M_PI)
    {
        t += 2*M_PI;
    7e14:	68f8      	ldr	r0, [r7, #12]
    7e16:	f012 f977 	bl	1a108 <__aeabi_f2d>
    7e1a:	4602      	mov	r2, r0
    7e1c:	460b      	mov	r3, r1
    7e1e:	4610      	mov	r0, r2
    7e20:	4619      	mov	r1, r3
    7e22:	a211      	add	r2, pc, #68	(adr r2, 7e68 <_Z9diffAngleff+0xb0>)
    7e24:	ca0c      	ldmia	r2!, {r2, r3}
    7e26:	f012 f811 	bl	19e4c <__adddf3>
    7e2a:	4602      	mov	r2, r0
    7e2c:	460b      	mov	r3, r1
    7e2e:	4610      	mov	r0, r2
    7e30:	4619      	mov	r1, r3
    7e32:	f012 fc7d 	bl	1a730 <__aeabi_d2f>
    7e36:	4603      	mov	r3, r0
    7e38:	60fb      	str	r3, [r7, #12]
    float t = a-b;
    while (t > M_PI)
    {
        t -= 2*M_PI;
    }
    while (t < -M_PI)
    7e3a:	68f8      	ldr	r0, [r7, #12]
    7e3c:	f012 f964 	bl	1a108 <__aeabi_f2d>
    7e40:	4602      	mov	r2, r0
    7e42:	460b      	mov	r3, r1
    7e44:	4610      	mov	r0, r2
    7e46:	4619      	mov	r1, r3
    7e48:	a20b      	add	r2, pc, #44	(adr r2, 7e78 <_Z9diffAngleff+0xc0>)
    7e4a:	ca0c      	ldmia	r2!, {r2, r3}
    7e4c:	f012 fc20 	bl	1a690 <__aeabi_dcmplt>
    7e50:	4603      	mov	r3, r0
    7e52:	2b00      	cmp	r3, #0
    7e54:	d1de      	bne.n	7e14 <_Z9diffAngleff+0x5c>
    {
        t += 2*M_PI;
    }
    return t;
    7e56:	68fb      	ldr	r3, [r7, #12]
}
    7e58:	4618      	mov	r0, r3
    7e5a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    7e5e:	46bd      	mov	sp, r7
    7e60:	bd80      	pop	{r7, pc}
    7e62:	46c0      	nop			(mov r8, r8)
    7e64:	46c0      	nop			(mov r8, r8)
    7e66:	46c0      	nop			(mov r8, r8)
    7e68:	54442d18 	.word	0x54442d18
    7e6c:	401921fb 	.word	0x401921fb
    7e70:	54442d18 	.word	0x54442d18
    7e74:	400921fb 	.word	0x400921fb
    7e78:	54442d18 	.word	0x54442d18
    7e7c:	c00921fb 	.word	0xc00921fb

00007e80 <_ZN18CommandAllerEnArcA14getLinearSpeedEv>:
        linSpeed = rVise*angSpeed;*/


}

Vitesse CommandAllerEnArcA::getLinearSpeed()
    7e80:	b480      	push	{r7}
    7e82:	b083      	sub	sp, #12
    7e84:	af00      	add	r7, sp, #0
    7e86:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    7e88:	687b      	ldr	r3, [r7, #4]
    7e8a:	695b      	ldr	r3, [r3, #20]
}
    7e8c:	4618      	mov	r0, r3
    7e8e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7e92:	46bd      	mov	sp, r7
    7e94:	bc80      	pop	{r7}
    7e96:	4770      	bx	lr

00007e98 <_ZN18CommandAllerEnArcA15getAngularSpeedEv>:

Angle CommandAllerEnArcA::getAngularSpeed()
    7e98:	b480      	push	{r7}
    7e9a:	b083      	sub	sp, #12
    7e9c:	af00      	add	r7, sp, #0
    7e9e:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    7ea0:	687b      	ldr	r3, [r7, #4]
    7ea2:	699b      	ldr	r3, [r3, #24]
}
    7ea4:	4618      	mov	r0, r3
    7ea6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7eaa:	46bd      	mov	sp, r7
    7eac:	bc80      	pop	{r7}
    7eae:	4770      	bx	lr

00007eb0 <_ZNK18CommandAllerEnArcA4finiEv>:

// est ce que la commande a fini ?
bool CommandAllerEnArcA::fini() const
    7eb0:	b480      	push	{r7}
    7eb2:	b083      	sub	sp, #12
    7eb4:	af00      	add	r7, sp, #0
    7eb6:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    7eb8:	687b      	ldr	r3, [r7, #4]
    7eba:	f893 3028 	ldrb.w	r3, [r3, #40]
}
    7ebe:	4618      	mov	r0, r3
    7ec0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7ec4:	46bd      	mov	sp, r7
    7ec6:	bc80      	pop	{r7}
    7ec8:	4770      	bx	lr
    7eca:	46c0      	nop			(mov r8, r8)

00007ecc <_ZN13CommandAllerA14getLinearSpeedEv>:
{
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
}

Vitesse CommandAllerA::getLinearSpeed()
    7ecc:	b480      	push	{r7}
    7ece:	b083      	sub	sp, #12
    7ed0:	af00      	add	r7, sp, #0
    7ed2:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    7ed4:	687b      	ldr	r3, [r7, #4]
    7ed6:	699b      	ldr	r3, [r3, #24]
}
    7ed8:	4618      	mov	r0, r3
    7eda:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7ede:	46bd      	mov	sp, r7
    7ee0:	bc80      	pop	{r7}
    7ee2:	4770      	bx	lr

00007ee4 <_ZN13CommandAllerA15getAngularSpeedEv>:

Angle CommandAllerA::getAngularSpeed()
    7ee4:	b480      	push	{r7}
    7ee6:	b083      	sub	sp, #12
    7ee8:	af00      	add	r7, sp, #0
    7eea:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    7eec:	687b      	ldr	r3, [r7, #4]
    7eee:	69db      	ldr	r3, [r3, #28]
}
    7ef0:	4618      	mov	r0, r3
    7ef2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7ef6:	46bd      	mov	sp, r7
    7ef8:	bc80      	pop	{r7}
    7efa:	4770      	bx	lr

00007efc <_ZNK13CommandAllerA4finiEv>:

bool CommandAllerA::fini() const
    7efc:	b480      	push	{r7}
    7efe:	b083      	sub	sp, #12
    7f00:	af00      	add	r7, sp, #0
    7f02:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    7f04:	687b      	ldr	r3, [r7, #4]
    7f06:	f893 3028 	ldrb.w	r3, [r3, #40]
}
    7f0a:	4618      	mov	r0, r3
    7f0c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7f10:	46bd      	mov	sp, r7
    7f12:	bc80      	pop	{r7}
    7f14:	4770      	bx	lr
    7f16:	46c0      	nop			(mov r8, r8)

00007f18 <_ZN18CommandTournerVers14getLinearSpeedEv>:
            angSpeed = -sqrt(-2.0f*diff*accAngMax);
    }*/

}

Vitesse CommandTournerVers::getLinearSpeed()
    7f18:	b480      	push	{r7}
    7f1a:	b083      	sub	sp, #12
    7f1c:	af00      	add	r7, sp, #0
    7f1e:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    7f20:	4b03      	ldr	r3, [pc, #12]	(7f30 <_ZN18CommandTournerVers14getLinearSpeedEv+0x18>)
}
    7f22:	4618      	mov	r0, r3
    7f24:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7f28:	46bd      	mov	sp, r7
    7f2a:	bc80      	pop	{r7}
    7f2c:	4770      	bx	lr
    7f2e:	46c0      	nop			(mov r8, r8)
    7f30:	00000000 	.word	0x00000000

00007f34 <_ZN18CommandTournerVers15getAngularSpeedEv>:

Angle CommandTournerVers::getAngularSpeed()
    7f34:	b480      	push	{r7}
    7f36:	b083      	sub	sp, #12
    7f38:	af00      	add	r7, sp, #0
    7f3a:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    7f3c:	687b      	ldr	r3, [r7, #4]
    7f3e:	68db      	ldr	r3, [r3, #12]
}
    7f40:	4618      	mov	r0, r3
    7f42:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7f46:	46bd      	mov	sp, r7
    7f48:	bc80      	pop	{r7}
    7f4a:	4770      	bx	lr

00007f4c <_ZNK18CommandTournerVers4finiEv>:

bool CommandTournerVers::fini() const
    7f4c:	b480      	push	{r7}
    7f4e:	b083      	sub	sp, #12
    7f50:	af00      	add	r7, sp, #0
    7f52:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    7f54:	687b      	ldr	r3, [r7, #4]
    7f56:	7d1b      	ldrb	r3, [r3, #20]
}
    7f58:	4618      	mov	r0, r3
    7f5a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7f5e:	46bd      	mov	sp, r7
    7f60:	bc80      	pop	{r7}
    7f62:	4770      	bx	lr

00007f64 <_ZN13CommandVirage14getLinearSpeedEv>:

    // calcul de la vitesse angulaire
    angSpeed = linSpeed/rayonCourbure;
}

Vitesse CommandVirage::getLinearSpeed()
    7f64:	b480      	push	{r7}
    7f66:	b083      	sub	sp, #12
    7f68:	af00      	add	r7, sp, #0
    7f6a:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    7f6c:	687b      	ldr	r3, [r7, #4]
    7f6e:	689b      	ldr	r3, [r3, #8]
}
    7f70:	4618      	mov	r0, r3
    7f72:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7f76:	46bd      	mov	sp, r7
    7f78:	bc80      	pop	{r7}
    7f7a:	4770      	bx	lr

00007f7c <_ZN13CommandVirage15getAngularSpeedEv>:

Angle CommandVirage::getAngularSpeed()
    7f7c:	b480      	push	{r7}
    7f7e:	b083      	sub	sp, #12
    7f80:	af00      	add	r7, sp, #0
    7f82:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    7f84:	687b      	ldr	r3, [r7, #4]
    7f86:	68db      	ldr	r3, [r3, #12]
}
    7f88:	4618      	mov	r0, r3
    7f8a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7f8e:	46bd      	mov	sp, r7
    7f90:	bc80      	pop	{r7}
    7f92:	4770      	bx	lr

00007f94 <_ZNK13CommandVirage4finiEv>:

// est ce que la commande a fini ?
bool CommandVirage::fini() const
    7f94:	b480      	push	{r7}
    7f96:	b083      	sub	sp, #12
    7f98:	af00      	add	r7, sp, #0
    7f9a:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    7f9c:	687b      	ldr	r3, [r7, #4]
    7f9e:	7f1b      	ldrb	r3, [r3, #28]
}
    7fa0:	4618      	mov	r0, r3
    7fa2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7fa6:	46bd      	mov	sp, r7
    7fa8:	bc80      	pop	{r7}
    7faa:	4770      	bx	lr

00007fac <_ZN15CommandAttendre6updateEv>:
CommandAttendre::CommandAttendre(int nbUpdates)
    : Command(), compte(nbUpdates)
{
}

void CommandAttendre::update()
    7fac:	b480      	push	{r7}
    7fae:	b083      	sub	sp, #12
    7fb0:	af00      	add	r7, sp, #0
    7fb2:	6078      	str	r0, [r7, #4]
{
    compte--;
    7fb4:	687b      	ldr	r3, [r7, #4]
    7fb6:	685b      	ldr	r3, [r3, #4]
    7fb8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    7fbc:	687b      	ldr	r3, [r7, #4]
    7fbe:	605a      	str	r2, [r3, #4]
}
    7fc0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7fc4:	46bd      	mov	sp, r7
    7fc6:	bc80      	pop	{r7}
    7fc8:	4770      	bx	lr
    7fca:	46c0      	nop			(mov r8, r8)

00007fcc <_ZN15CommandAttendre14getLinearSpeedEv>:

Vitesse CommandAttendre::getLinearSpeed()
    7fcc:	b480      	push	{r7}
    7fce:	b083      	sub	sp, #12
    7fd0:	af00      	add	r7, sp, #0
    7fd2:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    7fd4:	4b03      	ldr	r3, [pc, #12]	(7fe4 <_ZN15CommandAttendre14getLinearSpeedEv+0x18>)
}
    7fd6:	4618      	mov	r0, r3
    7fd8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7fdc:	46bd      	mov	sp, r7
    7fde:	bc80      	pop	{r7}
    7fe0:	4770      	bx	lr
    7fe2:	46c0      	nop			(mov r8, r8)
    7fe4:	00000000 	.word	0x00000000

00007fe8 <_ZN15CommandAttendre15getAngularSpeedEv>:

Angle CommandAttendre::getAngularSpeed()
    7fe8:	b480      	push	{r7}
    7fea:	b083      	sub	sp, #12
    7fec:	af00      	add	r7, sp, #0
    7fee:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    7ff0:	4b03      	ldr	r3, [pc, #12]	(8000 <_ZN15CommandAttendre15getAngularSpeedEv+0x18>)
}
    7ff2:	4618      	mov	r0, r3
    7ff4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7ff8:	46bd      	mov	sp, r7
    7ffa:	bc80      	pop	{r7}
    7ffc:	4770      	bx	lr
    7ffe:	46c0      	nop			(mov r8, r8)
    8000:	00000000 	.word	0x00000000

00008004 <_ZNK15CommandAttendre4finiEv>:

bool CommandAttendre::fini() const
    8004:	b480      	push	{r7}
    8006:	b083      	sub	sp, #12
    8008:	af00      	add	r7, sp, #0
    800a:	6078      	str	r0, [r7, #4]
{
    return (compte <= 0);
    800c:	687b      	ldr	r3, [r7, #4]
    800e:	685b      	ldr	r3, [r3, #4]
    8010:	2b00      	cmp	r3, #0
    8012:	bfcc      	ite	gt
    8014:	2300      	movgt	r3, #0
    8016:	2301      	movle	r3, #1
    8018:	b2db      	uxtb	r3, r3
}
    801a:	4618      	mov	r0, r3
    801c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8020:	46bd      	mov	sp, r7
    8022:	bc80      	pop	{r7}
    8024:	4770      	bx	lr
    8026:	46c0      	nop			(mov r8, r8)

00008028 <_ZN18CommandTestAvancer6updateEv>:
CommandTestAvancer::CommandTestAvancer()
    : Command()
{
}

void CommandTestAvancer::update()
    8028:	b480      	push	{r7}
    802a:	b083      	sub	sp, #12
    802c:	af00      	add	r7, sp, #0
    802e:	6078      	str	r0, [r7, #4]
{
}
    8030:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8034:	46bd      	mov	sp, r7
    8036:	bc80      	pop	{r7}
    8038:	4770      	bx	lr
    803a:	46c0      	nop			(mov r8, r8)

0000803c <_ZN18CommandTestAvancer14getLinearSpeedEv>:

Vitesse CommandTestAvancer::getLinearSpeed()
    803c:	b480      	push	{r7}
    803e:	b083      	sub	sp, #12
    8040:	af00      	add	r7, sp, #0
    8042:	6078      	str	r0, [r7, #4]
{
    return VITESSE_LINEAIRE_MAX;
    8044:	4b03      	ldr	r3, [pc, #12]	(8054 <_ZN18CommandTestAvancer14getLinearSpeedEv+0x18>)
}
    8046:	4618      	mov	r0, r3
    8048:	f107 070c 	add.w	r7, r7, #12	; 0xc
    804c:	46bd      	mov	sp, r7
    804e:	bc80      	pop	{r7}
    8050:	4770      	bx	lr
    8052:	46c0      	nop			(mov r8, r8)
    8054:	00          	.byte	0x00
    8055:	00          	.byte	0x00
    8056:	4040      	.short	0x4040

00008058 <_ZN18CommandTestAvancer15getAngularSpeedEv>:

Angle CommandTestAvancer::getAngularSpeed()
    8058:	b480      	push	{r7}
    805a:	b083      	sub	sp, #12
    805c:	af00      	add	r7, sp, #0
    805e:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    8060:	4b03      	ldr	r3, [pc, #12]	(8070 <_ZN18CommandTestAvancer15getAngularSpeedEv+0x18>)
}
    8062:	4618      	mov	r0, r3
    8064:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8068:	46bd      	mov	sp, r7
    806a:	bc80      	pop	{r7}
    806c:	4770      	bx	lr
    806e:	46c0      	nop			(mov r8, r8)
    8070:	00000000 	.word	0x00000000

00008074 <_ZN24CommandTestTournerGauche6updateEv>:
CommandTestTournerGauche::CommandTestTournerGauche()
    : Command()
{
}

void CommandTestTournerGauche::update()
    8074:	b480      	push	{r7}
    8076:	b083      	sub	sp, #12
    8078:	af00      	add	r7, sp, #0
    807a:	6078      	str	r0, [r7, #4]
{
}
    807c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8080:	46bd      	mov	sp, r7
    8082:	bc80      	pop	{r7}
    8084:	4770      	bx	lr
    8086:	46c0      	nop			(mov r8, r8)

00008088 <_ZN24CommandTestTournerGauche14getLinearSpeedEv>:

Vitesse CommandTestTournerGauche::getLinearSpeed()
    8088:	b480      	push	{r7}
    808a:	b083      	sub	sp, #12
    808c:	af00      	add	r7, sp, #0
    808e:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    8090:	4b03      	ldr	r3, [pc, #12]	(80a0 <_ZN24CommandTestTournerGauche14getLinearSpeedEv+0x18>)
}
    8092:	4618      	mov	r0, r3
    8094:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8098:	46bd      	mov	sp, r7
    809a:	bc80      	pop	{r7}
    809c:	4770      	bx	lr
    809e:	46c0      	nop			(mov r8, r8)
    80a0:	00000000 	.word	0x00000000

000080a4 <_ZN24CommandTestTournerGauche15getAngularSpeedEv>:

Angle CommandTestTournerGauche::getAngularSpeed()
    80a4:	b480      	push	{r7}
    80a6:	b083      	sub	sp, #12
    80a8:	af00      	add	r7, sp, #0
    80aa:	6078      	str	r0, [r7, #4]
{
    return VITESSE_ANGULAIRE_MAX;
    80ac:	4b03      	ldr	r3, [pc, #12]	(80bc <_ZN24CommandTestTournerGauche15getAngularSpeedEv+0x18>)
}
    80ae:	4618      	mov	r0, r3
    80b0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    80b4:	46bd      	mov	sp, r7
    80b6:	bc80      	pop	{r7}
    80b8:	4770      	bx	lr
    80ba:	46c0      	nop			(mov r8, r8)
    80bc:	3cf5c28f 	.word	0x3cf5c28f

000080c0 <_ZN24CommandTestTournerGaucheC1Ev>:
    ////////////////////////////////
    //  CommandTestTournerGauche  //
    ////////////////////////////////


CommandTestTournerGauche::CommandTestTournerGauche()
    80c0:	b580      	push	{r7, lr}
    80c2:	b082      	sub	sp, #8
    80c4:	af00      	add	r7, sp, #0
    80c6:	6078      	str	r0, [r7, #4]
    : Command()
    80c8:	687b      	ldr	r3, [r7, #4]
    80ca:	4618      	mov	r0, r3
    80cc:	f7ff fc38 	bl	7940 <_ZN7CommandC2Ev>
    80d0:	687a      	ldr	r2, [r7, #4]
    80d2:	4b04      	ldr	r3, [pc, #16]	(80e4 <_ZN24CommandTestTournerGaucheC1Ev+0x24>)
    80d4:	6013      	str	r3, [r2, #0]
{
}
    80d6:	687b      	ldr	r3, [r7, #4]
    80d8:	4618      	mov	r0, r3
    80da:	f107 0708 	add.w	r7, r7, #8	; 0x8
    80de:	46bd      	mov	sp, r7
    80e0:	bd80      	pop	{r7, pc}
    80e2:	46c0      	nop			(mov r8, r8)
    80e4:	00021858 	.word	0x00021858

000080e8 <_ZN24CommandTestTournerGaucheC2Ev>:
    ////////////////////////////////
    //  CommandTestTournerGauche  //
    ////////////////////////////////


CommandTestTournerGauche::CommandTestTournerGauche()
    80e8:	b580      	push	{r7, lr}
    80ea:	b082      	sub	sp, #8
    80ec:	af00      	add	r7, sp, #0
    80ee:	6078      	str	r0, [r7, #4]
    : Command()
    80f0:	687b      	ldr	r3, [r7, #4]
    80f2:	4618      	mov	r0, r3
    80f4:	f7ff fc24 	bl	7940 <_ZN7CommandC2Ev>
    80f8:	687a      	ldr	r2, [r7, #4]
    80fa:	4b04      	ldr	r3, [pc, #16]	(810c <_ZN24CommandTestTournerGaucheC2Ev+0x24>)
    80fc:	6013      	str	r3, [r2, #0]
{
}
    80fe:	687b      	ldr	r3, [r7, #4]
    8100:	4618      	mov	r0, r3
    8102:	f107 0708 	add.w	r7, r7, #8	; 0x8
    8106:	46bd      	mov	sp, r7
    8108:	bd80      	pop	{r7, pc}
    810a:	46c0      	nop			(mov r8, r8)
    810c:	00021858 	.word	0x00021858

00008110 <_ZN18CommandTestAvancerC1Ev>:

    ////////////////////////////////
    //      CommandTestAvancer    //
    ////////////////////////////////

CommandTestAvancer::CommandTestAvancer()
    8110:	b580      	push	{r7, lr}
    8112:	b082      	sub	sp, #8
    8114:	af00      	add	r7, sp, #0
    8116:	6078      	str	r0, [r7, #4]
    : Command()
    8118:	687b      	ldr	r3, [r7, #4]
    811a:	4618      	mov	r0, r3
    811c:	f7ff fc10 	bl	7940 <_ZN7CommandC2Ev>
    8120:	687a      	ldr	r2, [r7, #4]
    8122:	4b04      	ldr	r3, [pc, #16]	(8134 <_ZN18CommandTestAvancerC1Ev+0x24>)
    8124:	6013      	str	r3, [r2, #0]
{
}
    8126:	687b      	ldr	r3, [r7, #4]
    8128:	4618      	mov	r0, r3
    812a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    812e:	46bd      	mov	sp, r7
    8130:	bd80      	pop	{r7, pc}
    8132:	46c0      	nop			(mov r8, r8)
    8134:	00021880 	.word	0x00021880

00008138 <_ZN18CommandTestAvancerC2Ev>:

    ////////////////////////////////
    //      CommandTestAvancer    //
    ////////////////////////////////

CommandTestAvancer::CommandTestAvancer()
    8138:	b580      	push	{r7, lr}
    813a:	b082      	sub	sp, #8
    813c:	af00      	add	r7, sp, #0
    813e:	6078      	str	r0, [r7, #4]
    : Command()
    8140:	687b      	ldr	r3, [r7, #4]
    8142:	4618      	mov	r0, r3
    8144:	f7ff fbfc 	bl	7940 <_ZN7CommandC2Ev>
    8148:	687a      	ldr	r2, [r7, #4]
    814a:	4b04      	ldr	r3, [pc, #16]	(815c <_ZN18CommandTestAvancerC2Ev+0x24>)
    814c:	6013      	str	r3, [r2, #0]
{
}
    814e:	687b      	ldr	r3, [r7, #4]
    8150:	4618      	mov	r0, r3
    8152:	f107 0708 	add.w	r7, r7, #8	; 0x8
    8156:	46bd      	mov	sp, r7
    8158:	bd80      	pop	{r7, pc}
    815a:	46c0      	nop			(mov r8, r8)
    815c:	00021880 	.word	0x00021880

00008160 <_ZN15CommandAttendreC1Ei>:

    ////////////////////////////////
    //      CommandAttendre       //
    ////////////////////////////////

CommandAttendre::CommandAttendre(int nbUpdates)
    8160:	b580      	push	{r7, lr}
    8162:	b082      	sub	sp, #8
    8164:	af00      	add	r7, sp, #0
    8166:	6078      	str	r0, [r7, #4]
    8168:	6039      	str	r1, [r7, #0]
    : Command(), compte(nbUpdates)
    816a:	687b      	ldr	r3, [r7, #4]
    816c:	4618      	mov	r0, r3
    816e:	f7ff fbe7 	bl	7940 <_ZN7CommandC2Ev>
    8172:	687a      	ldr	r2, [r7, #4]
    8174:	4b05      	ldr	r3, [pc, #20]	(818c <_ZN15CommandAttendreC1Ei+0x2c>)
    8176:	6013      	str	r3, [r2, #0]
    8178:	687a      	ldr	r2, [r7, #4]
    817a:	683b      	ldr	r3, [r7, #0]
    817c:	6053      	str	r3, [r2, #4]
{
}
    817e:	687b      	ldr	r3, [r7, #4]
    8180:	4618      	mov	r0, r3
    8182:	f107 0708 	add.w	r7, r7, #8	; 0x8
    8186:	46bd      	mov	sp, r7
    8188:	bd80      	pop	{r7, pc}
    818a:	46c0      	nop			(mov r8, r8)
    818c:	000218a8 	.word	0x000218a8

00008190 <_ZN15CommandAttendreC2Ei>:

    ////////////////////////////////
    //      CommandAttendre       //
    ////////////////////////////////

CommandAttendre::CommandAttendre(int nbUpdates)
    8190:	b580      	push	{r7, lr}
    8192:	b082      	sub	sp, #8
    8194:	af00      	add	r7, sp, #0
    8196:	6078      	str	r0, [r7, #4]
    8198:	6039      	str	r1, [r7, #0]
    : Command(), compte(nbUpdates)
    819a:	687b      	ldr	r3, [r7, #4]
    819c:	4618      	mov	r0, r3
    819e:	f7ff fbcf 	bl	7940 <_ZN7CommandC2Ev>
    81a2:	687a      	ldr	r2, [r7, #4]
    81a4:	4b05      	ldr	r3, [pc, #20]	(81bc <_ZN15CommandAttendreC2Ei+0x2c>)
    81a6:	6013      	str	r3, [r2, #0]
    81a8:	687a      	ldr	r2, [r7, #4]
    81aa:	683b      	ldr	r3, [r7, #0]
    81ac:	6053      	str	r3, [r2, #4]
{
}
    81ae:	687b      	ldr	r3, [r7, #4]
    81b0:	4618      	mov	r0, r3
    81b2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    81b6:	46bd      	mov	sp, r7
    81b8:	bd80      	pop	{r7, pc}
    81ba:	46c0      	nop			(mov r8, r8)
    81bc:	000218a8 	.word	0x000218a8

000081c0 <_ZN13CommandVirage6updateEv>:
    vitesseLinMax = vitesseLineaireMax;

    m_fini = false;
}

void CommandVirage::update()
    81c0:	b590      	push	{r4, r7, lr}
    81c2:	b091      	sub	sp, #68
    81c4:	af00      	add	r7, sp, #0
    81c6:	6178      	str	r0, [r7, #20]
{
    float accLinMax = ACCELERATION_LINEAIRE_MAX;
    81c8:	4b85      	ldr	r3, [pc, #532]	(83e0 <_ZN13CommandVirage6updateEv+0x220>)
    81ca:	62bb      	str	r3, [r7, #40]
    float decLinMax = DECELERATION_LINEAIRE_MAX;
    81cc:	4b85      	ldr	r3, [pc, #532]	(83e4 <_ZN13CommandVirage6updateEv+0x224>)
    81ce:	62fb      	str	r3, [r7, #44]
    float vitLinMax = vitesseLinMax;//VITESSE_LINEAIRE_MAX;
    81d0:	697b      	ldr	r3, [r7, #20]
    81d2:	695b      	ldr	r3, [r3, #20]
    81d4:	633b      	str	r3, [r7, #48]

    float distanceVitesseMax = 0.5f*(vitLinMax*vitLinMax-vFin2)/decLinMax;
    81d6:	6b38      	ldr	r0, [r7, #48]
    81d8:	6b39      	ldr	r1, [r7, #48]
    81da:	f012 fc07 	bl	1a9ec <__aeabi_fmul>
    81de:	4603      	mov	r3, r0
    81e0:	461a      	mov	r2, r3
    81e2:	697b      	ldr	r3, [r7, #20]
    81e4:	699b      	ldr	r3, [r3, #24]
    81e6:	4610      	mov	r0, r2
    81e8:	4619      	mov	r1, r3
    81ea:	f012 faf5 	bl	1a7d8 <__aeabi_fsub>
    81ee:	4603      	mov	r3, r0
    81f0:	4618      	mov	r0, r3
    81f2:	497d      	ldr	r1, [pc, #500]	(83e8 <_ZN13CommandVirage6updateEv+0x228>)
    81f4:	f012 fbfa 	bl	1a9ec <__aeabi_fmul>
    81f8:	4603      	mov	r3, r0
    81fa:	4618      	mov	r0, r3
    81fc:	6af9      	ldr	r1, [r7, #44]
    81fe:	f012 fca9 	bl	1ab54 <__aeabi_fdiv>
    8202:	4603      	mov	r3, r0
    8204:	637b      	str	r3, [r7, #52]

    float angleRestant = diffAngle(angleVise, Odometrie::odometrie->getPos().getAngle());
    8206:	697b      	ldr	r3, [r7, #20]
    8208:	691c      	ldr	r4, [r3, #16]
    820a:	4b78      	ldr	r3, [pc, #480]	(83ec <_ZN13CommandVirage6updateEv+0x22c>)
    820c:	681a      	ldr	r2, [r3, #0]
    820e:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    8212:	4618      	mov	r0, r3
    8214:	4611      	mov	r1, r2
    8216:	f001 faa3 	bl	9760 <_ZNK9Odometrie6getPosEv>
    821a:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    821e:	4618      	mov	r0, r3
    8220:	f006 fbba 	bl	e998 <_ZNK17PositionPlusAngle8getAngleEv>
    8224:	4603      	mov	r3, r0
    8226:	4620      	mov	r0, r4
    8228:	4619      	mov	r1, r3
    822a:	f7ff fdc5 	bl	7db8 <_Z9diffAngleff>
    822e:	4603      	mov	r3, r0
    8230:	63bb      	str	r3, [r7, #56]
    float distanceRestante = abs(rayonCourbure*angleRestant);
    8232:	697b      	ldr	r3, [r7, #20]
    8234:	685b      	ldr	r3, [r3, #4]
    8236:	4618      	mov	r0, r3
    8238:	6bb9      	ldr	r1, [r7, #56]
    823a:	f012 fbd7 	bl	1a9ec <__aeabi_fmul>
    823e:	4603      	mov	r3, r0
    8240:	4618      	mov	r0, r3
    8242:	496b      	ldr	r1, [pc, #428]	(83f0 <_ZN13CommandVirage6updateEv+0x230>)
    8244:	f012 fd8c 	bl	1ad60 <__aeabi_fcmpgt>
    8248:	4603      	mov	r3, r0
    824a:	2b00      	cmp	r3, #0
    824c:	d008      	beq.n	8260 <_ZN13CommandVirage6updateEv+0xa0>
    824e:	697b      	ldr	r3, [r7, #20]
    8250:	685b      	ldr	r3, [r3, #4]
    8252:	4618      	mov	r0, r3
    8254:	6bb9      	ldr	r1, [r7, #56]
    8256:	f012 fbc9 	bl	1a9ec <__aeabi_fmul>
    825a:	4603      	mov	r3, r0
    825c:	607b      	str	r3, [r7, #4]
    825e:	e009      	b.n	8274 <_ZN13CommandVirage6updateEv+0xb4>
    8260:	697b      	ldr	r3, [r7, #20]
    8262:	685b      	ldr	r3, [r3, #4]
    8264:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    8268:	4618      	mov	r0, r3
    826a:	6bb9      	ldr	r1, [r7, #56]
    826c:	f012 fbbe 	bl	1a9ec <__aeabi_fmul>
    8270:	4603      	mov	r3, r0
    8272:	607b      	str	r3, [r7, #4]
    8274:	687a      	ldr	r2, [r7, #4]
    8276:	63fa      	str	r2, [r7, #60]

    // gestion de si la commande a fini
    // si l'angle restant est bon ou si on a dépassé l'angle visé
    if (abs(angleRestant) < M_PI/90.0f || ((angleRestant > 0.0f) != (rayonCourbure > 0.0f)))
    8278:	6bb8      	ldr	r0, [r7, #56]
    827a:	495d      	ldr	r1, [pc, #372]	(83f0 <_ZN13CommandVirage6updateEv+0x230>)
    827c:	f012 fd70 	bl	1ad60 <__aeabi_fcmpgt>
    8280:	4603      	mov	r3, r0
    8282:	2b00      	cmp	r3, #0
    8284:	d00f      	beq.n	82a6 <_ZN13CommandVirage6updateEv+0xe6>
    8286:	f04f 0300 	mov.w	r3, #0	; 0x0
    828a:	70fb      	strb	r3, [r7, #3]
    828c:	6bb8      	ldr	r0, [r7, #56]
    828e:	4958      	ldr	r1, [pc, #352]	(83f0 <_ZN13CommandVirage6updateEv+0x230>)
    8290:	f012 fd3e 	bl	1ad10 <__aeabi_fcmpeq>
    8294:	4603      	mov	r3, r0
    8296:	2b00      	cmp	r3, #0
    8298:	d102      	bne.n	82a0 <_ZN13CommandVirage6updateEv+0xe0>
    829a:	f04f 0301 	mov.w	r3, #1	; 0x1
    829e:	70fb      	strb	r3, [r7, #3]
    82a0:	78fb      	ldrb	r3, [r7, #3]
    82a2:	60bb      	str	r3, [r7, #8]
    82a4:	e03e      	b.n	8324 <_ZN13CommandVirage6updateEv+0x164>
    82a6:	6bbb      	ldr	r3, [r7, #56]
    82a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    82ac:	4618      	mov	r0, r3
    82ae:	f011 ff2b 	bl	1a108 <__aeabi_f2d>
    82b2:	4602      	mov	r2, r0
    82b4:	460b      	mov	r3, r1
    82b6:	4610      	mov	r0, r2
    82b8:	4619      	mov	r1, r3
    82ba:	a247      	add	r2, pc, #284	(adr r2, 83d8 <_ZN13CommandVirage6updateEv+0x218>)
    82bc:	ca0c      	ldmia	r2!, {r2, r3}
    82be:	f012 f9e7 	bl	1a690 <__aeabi_dcmplt>
    82c2:	4603      	mov	r3, r0
    82c4:	2b00      	cmp	r3, #0
    82c6:	d124      	bne.n	8312 <_ZN13CommandVirage6updateEv+0x152>
    82c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    82cc:	70bb      	strb	r3, [r7, #2]
    82ce:	6bb8      	ldr	r0, [r7, #56]
    82d0:	4947      	ldr	r1, [pc, #284]	(83f0 <_ZN13CommandVirage6updateEv+0x230>)
    82d2:	f012 fd45 	bl	1ad60 <__aeabi_fcmpgt>
    82d6:	4603      	mov	r3, r0
    82d8:	2b00      	cmp	r3, #0
    82da:	d002      	beq.n	82e2 <_ZN13CommandVirage6updateEv+0x122>
    82dc:	f04f 0301 	mov.w	r3, #1	; 0x1
    82e0:	70bb      	strb	r3, [r7, #2]
    82e2:	78ba      	ldrb	r2, [r7, #2]
    82e4:	613a      	str	r2, [r7, #16]
    82e6:	697b      	ldr	r3, [r7, #20]
    82e8:	685a      	ldr	r2, [r3, #4]
    82ea:	f04f 0300 	mov.w	r3, #0	; 0x0
    82ee:	707b      	strb	r3, [r7, #1]
    82f0:	4610      	mov	r0, r2
    82f2:	493f      	ldr	r1, [pc, #252]	(83f0 <_ZN13CommandVirage6updateEv+0x230>)
    82f4:	f012 fd34 	bl	1ad60 <__aeabi_fcmpgt>
    82f8:	4603      	mov	r3, r0
    82fa:	2b00      	cmp	r3, #0
    82fc:	d002      	beq.n	8304 <_ZN13CommandVirage6updateEv+0x144>
    82fe:	f04f 0301 	mov.w	r3, #1	; 0x1
    8302:	707b      	strb	r3, [r7, #1]
    8304:	787b      	ldrb	r3, [r7, #1]
    8306:	693a      	ldr	r2, [r7, #16]
    8308:	ea82 0303 	eor.w	r3, r2, r3
    830c:	b2db      	uxtb	r3, r3
    830e:	2b00      	cmp	r3, #0
    8310:	d003      	beq.n	831a <_ZN13CommandVirage6updateEv+0x15a>
    8312:	f04f 0301 	mov.w	r3, #1	; 0x1
    8316:	60fb      	str	r3, [r7, #12]
    8318:	e002      	b.n	8320 <_ZN13CommandVirage6updateEv+0x160>
    831a:	f04f 0200 	mov.w	r2, #0	; 0x0
    831e:	60fa      	str	r2, [r7, #12]
    8320:	68fb      	ldr	r3, [r7, #12]
    8322:	60bb      	str	r3, [r7, #8]
    8324:	68ba      	ldr	r2, [r7, #8]
    8326:	2a00      	cmp	r2, #0
    8328:	d003      	beq.n	8332 <_ZN13CommandVirage6updateEv+0x172>
    {
        m_fini = true;
    832a:	697b      	ldr	r3, [r7, #20]
    832c:	f04f 0201 	mov.w	r2, #1	; 0x1
    8330:	771a      	strb	r2, [r3, #28]
    }

    // phase de vitesse max
    if (distanceRestante > distanceVitesseMax)
    8332:	6bf8      	ldr	r0, [r7, #60]
    8334:	6b79      	ldr	r1, [r7, #52]
    8336:	f012 fd13 	bl	1ad60 <__aeabi_fcmpgt>
    833a:	4603      	mov	r3, r0
    833c:	2b00      	cmp	r3, #0
    833e:	d016      	beq.n	836e <_ZN13CommandVirage6updateEv+0x1ae>
    {
            linSpeed += accLinMax;
    8340:	697b      	ldr	r3, [r7, #20]
    8342:	689b      	ldr	r3, [r3, #8]
    8344:	4618      	mov	r0, r3
    8346:	6ab9      	ldr	r1, [r7, #40]
    8348:	f012 fa48 	bl	1a7dc <__addsf3>
    834c:	4603      	mov	r3, r0
    834e:	461a      	mov	r2, r3
    8350:	697b      	ldr	r3, [r7, #20]
    8352:	609a      	str	r2, [r3, #8]
        if (linSpeed > vitLinMax)
    8354:	697b      	ldr	r3, [r7, #20]
    8356:	689b      	ldr	r3, [r3, #8]
    8358:	4618      	mov	r0, r3
    835a:	6b39      	ldr	r1, [r7, #48]
    835c:	f012 fd00 	bl	1ad60 <__aeabi_fcmpgt>
    8360:	4603      	mov	r3, r0
    8362:	2b00      	cmp	r3, #0
    8364:	d027      	beq.n	83b6 <_ZN13CommandVirage6updateEv+0x1f6>
            linSpeed = vitLinMax;
    8366:	697a      	ldr	r2, [r7, #20]
    8368:	6b3b      	ldr	r3, [r7, #48]
    836a:	6093      	str	r3, [r2, #8]
    836c:	e023      	b.n	83b6 <_ZN13CommandVirage6updateEv+0x1f6>
    }

    // phase de décéleration
    else
    {
        linSpeed = sqrt(vFin2+2.0f*distanceRestante*decLinMax);
    836e:	697b      	ldr	r3, [r7, #20]
    8370:	699c      	ldr	r4, [r3, #24]
    8372:	6bfb      	ldr	r3, [r7, #60]
    8374:	4618      	mov	r0, r3
    8376:	4619      	mov	r1, r3
    8378:	f012 fa30 	bl	1a7dc <__addsf3>
    837c:	4603      	mov	r3, r0
    837e:	4618      	mov	r0, r3
    8380:	6af9      	ldr	r1, [r7, #44]
    8382:	f012 fb33 	bl	1a9ec <__aeabi_fmul>
    8386:	4603      	mov	r3, r0
    8388:	4620      	mov	r0, r4
    838a:	4619      	mov	r1, r3
    838c:	f012 fa26 	bl	1a7dc <__addsf3>
    8390:	4603      	mov	r3, r0
    8392:	4618      	mov	r0, r3
    8394:	f011 feb8 	bl	1a108 <__aeabi_f2d>
    8398:	4602      	mov	r2, r0
    839a:	460b      	mov	r3, r1
    839c:	4610      	mov	r0, r2
    839e:	4619      	mov	r1, r3
    83a0:	f015 ffee 	bl	1e380 <sqrt>
    83a4:	4602      	mov	r2, r0
    83a6:	460b      	mov	r3, r1
    83a8:	4610      	mov	r0, r2
    83aa:	4619      	mov	r1, r3
    83ac:	f012 f9c0 	bl	1a730 <__aeabi_d2f>
    83b0:	4602      	mov	r2, r0
    83b2:	697b      	ldr	r3, [r7, #20]
    83b4:	609a      	str	r2, [r3, #8]
    }

    // calcul de la vitesse angulaire
    angSpeed = linSpeed/rayonCourbure;
    83b6:	697b      	ldr	r3, [r7, #20]
    83b8:	689a      	ldr	r2, [r3, #8]
    83ba:	697b      	ldr	r3, [r7, #20]
    83bc:	685b      	ldr	r3, [r3, #4]
    83be:	4610      	mov	r0, r2
    83c0:	4619      	mov	r1, r3
    83c2:	f012 fbc7 	bl	1ab54 <__aeabi_fdiv>
    83c6:	4603      	mov	r3, r0
    83c8:	461a      	mov	r2, r3
    83ca:	697b      	ldr	r3, [r7, #20]
    83cc:	60da      	str	r2, [r3, #12]
}
    83ce:	f107 0744 	add.w	r7, r7, #68	; 0x44
    83d2:	46bd      	mov	sp, r7
    83d4:	bd90      	pop	{r4, r7, pc}
    83d6:	46c0      	nop			(mov r8, r8)
    83d8:	a2529d39 	.word	0xa2529d39
    83dc:	3fa1df46 	.word	0x3fa1df46
    83e0:	3ccccccd 	.word	0x3ccccccd
    83e4:	3ca3d70a 	.word	0x3ca3d70a
    83e8:	3f000000 	.word	0x3f000000
    83ec:	20000570 	.word	0x20000570
    83f0:	00000000 	.word	0x00000000

000083f4 <_ZN13CommandVirageC1Effff>:
    ////////////////////////////////


// rayon > 0
// angle > 0 : vers la gauche, angle < 0 : vers la droite
CommandVirage::CommandVirage(float rayon, float angle, float vitesseLineaireMax, float vitesseFin)
    83f4:	b580      	push	{r7, lr}
    83f6:	b088      	sub	sp, #32
    83f8:	af00      	add	r7, sp, #0
    83fa:	60f8      	str	r0, [r7, #12]
    83fc:	60b9      	str	r1, [r7, #8]
    83fe:	607a      	str	r2, [r7, #4]
    8400:	603b      	str	r3, [r7, #0]
    8402:	68fb      	ldr	r3, [r7, #12]
    8404:	4618      	mov	r0, r3
    8406:	f7ff fa9b 	bl	7940 <_ZN7CommandC2Ev>
    840a:	68fa      	ldr	r2, [r7, #12]
    840c:	4b26      	ldr	r3, [pc, #152]	(84a8 <_ZN13CommandVirageC1Effff+0xb4>)
    840e:	6013      	str	r3, [r2, #0]
{
    if (angle > 0.0f)
    8410:	6878      	ldr	r0, [r7, #4]
    8412:	4926      	ldr	r1, [pc, #152]	(84ac <_ZN13CommandVirageC1Effff+0xb8>)
    8414:	f012 fca4 	bl	1ad60 <__aeabi_fcmpgt>
    8418:	4603      	mov	r3, r0
    841a:	2b00      	cmp	r3, #0
    841c:	d003      	beq.n	8426 <_ZN13CommandVirageC1Effff+0x32>
        rayonCourbure = rayon;
    841e:	68fa      	ldr	r2, [r7, #12]
    8420:	68bb      	ldr	r3, [r7, #8]
    8422:	6053      	str	r3, [r2, #4]
    8424:	e004      	b.n	8430 <_ZN13CommandVirageC1Effff+0x3c>
    else
        rayonCourbure = -rayon;
    8426:	68bb      	ldr	r3, [r7, #8]
    8428:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    842c:	68fb      	ldr	r3, [r7, #12]
    842e:	605a      	str	r2, [r3, #4]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8430:	4b1f      	ldr	r3, [pc, #124]	(84b0 <_ZN13CommandVirageC1Effff+0xbc>)
    8432:	681b      	ldr	r3, [r3, #0]
    8434:	4618      	mov	r0, r3
    8436:	f001 f97b 	bl	9730 <_ZNK9Odometrie18getVitesseLineaireEv>
    843a:	4602      	mov	r2, r0
    843c:	68fb      	ldr	r3, [r7, #12]
    843e:	609a      	str	r2, [r3, #8]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8440:	4b1b      	ldr	r3, [pc, #108]	(84b0 <_ZN13CommandVirageC1Effff+0xbc>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	4618      	mov	r0, r3
    8446:	f001 f967 	bl	9718 <_ZNK9Odometrie19getVitesseAngulaireEv>
    844a:	4602      	mov	r2, r0
    844c:	68fb      	ldr	r3, [r7, #12]
    844e:	60da      	str	r2, [r3, #12]
    angleVise = angle + Odometrie::odometrie->getPos().getAngle();
    8450:	4b17      	ldr	r3, [pc, #92]	(84b0 <_ZN13CommandVirageC1Effff+0xbc>)
    8452:	681a      	ldr	r2, [r3, #0]
    8454:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8458:	4618      	mov	r0, r3
    845a:	4611      	mov	r1, r2
    845c:	f001 f980 	bl	9760 <_ZNK9Odometrie6getPosEv>
    8460:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8464:	4618      	mov	r0, r3
    8466:	f006 fa97 	bl	e998 <_ZNK17PositionPlusAngle8getAngleEv>
    846a:	4603      	mov	r3, r0
    846c:	4618      	mov	r0, r3
    846e:	6879      	ldr	r1, [r7, #4]
    8470:	f012 f9b4 	bl	1a7dc <__addsf3>
    8474:	4603      	mov	r3, r0
    8476:	461a      	mov	r2, r3
    8478:	68fb      	ldr	r3, [r7, #12]
    847a:	611a      	str	r2, [r3, #16]
    vFin2 = vitesseFin*vitesseFin;
    847c:	6ab8      	ldr	r0, [r7, #40]
    847e:	6ab9      	ldr	r1, [r7, #40]
    8480:	f012 fab4 	bl	1a9ec <__aeabi_fmul>
    8484:	4603      	mov	r3, r0
    8486:	461a      	mov	r2, r3
    8488:	68fb      	ldr	r3, [r7, #12]
    848a:	619a      	str	r2, [r3, #24]
    vitesseLinMax = vitesseLineaireMax;
    848c:	68fa      	ldr	r2, [r7, #12]
    848e:	683b      	ldr	r3, [r7, #0]
    8490:	6153      	str	r3, [r2, #20]

    m_fini = false;
    8492:	68fa      	ldr	r2, [r7, #12]
    8494:	f04f 0300 	mov.w	r3, #0	; 0x0
    8498:	7713      	strb	r3, [r2, #28]
}
    849a:	68fb      	ldr	r3, [r7, #12]
    849c:	4618      	mov	r0, r3
    849e:	f107 0720 	add.w	r7, r7, #32	; 0x20
    84a2:	46bd      	mov	sp, r7
    84a4:	bd80      	pop	{r7, pc}
    84a6:	46c0      	nop			(mov r8, r8)
    84a8:	000218d0 	.word	0x000218d0
    84ac:	00000000 	.word	0x00000000
    84b0:	20000570 	.word	0x20000570

000084b4 <_ZN13CommandVirageC2Effff>:
    ////////////////////////////////


// rayon > 0
// angle > 0 : vers la gauche, angle < 0 : vers la droite
CommandVirage::CommandVirage(float rayon, float angle, float vitesseLineaireMax, float vitesseFin)
    84b4:	b580      	push	{r7, lr}
    84b6:	b088      	sub	sp, #32
    84b8:	af00      	add	r7, sp, #0
    84ba:	60f8      	str	r0, [r7, #12]
    84bc:	60b9      	str	r1, [r7, #8]
    84be:	607a      	str	r2, [r7, #4]
    84c0:	603b      	str	r3, [r7, #0]
    84c2:	68fb      	ldr	r3, [r7, #12]
    84c4:	4618      	mov	r0, r3
    84c6:	f7ff fa3b 	bl	7940 <_ZN7CommandC2Ev>
    84ca:	68fa      	ldr	r2, [r7, #12]
    84cc:	4b26      	ldr	r3, [pc, #152]	(8568 <_ZN13CommandVirageC2Effff+0xb4>)
    84ce:	6013      	str	r3, [r2, #0]
{
    if (angle > 0.0f)
    84d0:	6878      	ldr	r0, [r7, #4]
    84d2:	4926      	ldr	r1, [pc, #152]	(856c <_ZN13CommandVirageC2Effff+0xb8>)
    84d4:	f012 fc44 	bl	1ad60 <__aeabi_fcmpgt>
    84d8:	4603      	mov	r3, r0
    84da:	2b00      	cmp	r3, #0
    84dc:	d003      	beq.n	84e6 <_ZN13CommandVirageC2Effff+0x32>
        rayonCourbure = rayon;
    84de:	68fa      	ldr	r2, [r7, #12]
    84e0:	68bb      	ldr	r3, [r7, #8]
    84e2:	6053      	str	r3, [r2, #4]
    84e4:	e004      	b.n	84f0 <_ZN13CommandVirageC2Effff+0x3c>
    else
        rayonCourbure = -rayon;
    84e6:	68bb      	ldr	r3, [r7, #8]
    84e8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    84ec:	68fb      	ldr	r3, [r7, #12]
    84ee:	605a      	str	r2, [r3, #4]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    84f0:	4b1f      	ldr	r3, [pc, #124]	(8570 <_ZN13CommandVirageC2Effff+0xbc>)
    84f2:	681b      	ldr	r3, [r3, #0]
    84f4:	4618      	mov	r0, r3
    84f6:	f001 f91b 	bl	9730 <_ZNK9Odometrie18getVitesseLineaireEv>
    84fa:	4602      	mov	r2, r0
    84fc:	68fb      	ldr	r3, [r7, #12]
    84fe:	609a      	str	r2, [r3, #8]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8500:	4b1b      	ldr	r3, [pc, #108]	(8570 <_ZN13CommandVirageC2Effff+0xbc>)
    8502:	681b      	ldr	r3, [r3, #0]
    8504:	4618      	mov	r0, r3
    8506:	f001 f907 	bl	9718 <_ZNK9Odometrie19getVitesseAngulaireEv>
    850a:	4602      	mov	r2, r0
    850c:	68fb      	ldr	r3, [r7, #12]
    850e:	60da      	str	r2, [r3, #12]
    angleVise = angle + Odometrie::odometrie->getPos().getAngle();
    8510:	4b17      	ldr	r3, [pc, #92]	(8570 <_ZN13CommandVirageC2Effff+0xbc>)
    8512:	681a      	ldr	r2, [r3, #0]
    8514:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8518:	4618      	mov	r0, r3
    851a:	4611      	mov	r1, r2
    851c:	f001 f920 	bl	9760 <_ZNK9Odometrie6getPosEv>
    8520:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8524:	4618      	mov	r0, r3
    8526:	f006 fa37 	bl	e998 <_ZNK17PositionPlusAngle8getAngleEv>
    852a:	4603      	mov	r3, r0
    852c:	4618      	mov	r0, r3
    852e:	6879      	ldr	r1, [r7, #4]
    8530:	f012 f954 	bl	1a7dc <__addsf3>
    8534:	4603      	mov	r3, r0
    8536:	461a      	mov	r2, r3
    8538:	68fb      	ldr	r3, [r7, #12]
    853a:	611a      	str	r2, [r3, #16]
    vFin2 = vitesseFin*vitesseFin;
    853c:	6ab8      	ldr	r0, [r7, #40]
    853e:	6ab9      	ldr	r1, [r7, #40]
    8540:	f012 fa54 	bl	1a9ec <__aeabi_fmul>
    8544:	4603      	mov	r3, r0
    8546:	461a      	mov	r2, r3
    8548:	68fb      	ldr	r3, [r7, #12]
    854a:	619a      	str	r2, [r3, #24]
    vitesseLinMax = vitesseLineaireMax;
    854c:	68fa      	ldr	r2, [r7, #12]
    854e:	683b      	ldr	r3, [r7, #0]
    8550:	6153      	str	r3, [r2, #20]

    m_fini = false;
    8552:	68fa      	ldr	r2, [r7, #12]
    8554:	f04f 0300 	mov.w	r3, #0	; 0x0
    8558:	7713      	strb	r3, [r2, #28]
}
    855a:	68fb      	ldr	r3, [r7, #12]
    855c:	4618      	mov	r0, r3
    855e:	f107 0720 	add.w	r7, r7, #32	; 0x20
    8562:	46bd      	mov	sp, r7
    8564:	bd80      	pop	{r7, pc}
    8566:	46c0      	nop			(mov r8, r8)
    8568:	000218d0 	.word	0x000218d0
    856c:	00000000 	.word	0x00000000
    8570:	20000570 	.word	0x20000570

00008574 <_ZN13CommandAllerA11resetSpeedsEv>:
                linSpeed = linSpeedVisee;
        }
    }
}

void CommandAllerA::resetSpeeds()
    8574:	b580      	push	{r7, lr}
    8576:	b082      	sub	sp, #8
    8578:	af00      	add	r7, sp, #0
    857a:	6078      	str	r0, [r7, #4]
{
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    857c:	4b09      	ldr	r3, [pc, #36]	(85a4 <_ZN13CommandAllerA11resetSpeedsEv+0x30>)
    857e:	681b      	ldr	r3, [r3, #0]
    8580:	4618      	mov	r0, r3
    8582:	f001 f8d5 	bl	9730 <_ZNK9Odometrie18getVitesseLineaireEv>
    8586:	4602      	mov	r2, r0
    8588:	687b      	ldr	r3, [r7, #4]
    858a:	619a      	str	r2, [r3, #24]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    858c:	4b05      	ldr	r3, [pc, #20]	(85a4 <_ZN13CommandAllerA11resetSpeedsEv+0x30>)
    858e:	681b      	ldr	r3, [r3, #0]
    8590:	4618      	mov	r0, r3
    8592:	f001 f8c1 	bl	9718 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8596:	4602      	mov	r2, r0
    8598:	687b      	ldr	r3, [r7, #4]
    859a:	61da      	str	r2, [r3, #28]
}
    859c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    85a0:	46bd      	mov	sp, r7
    85a2:	bd80      	pop	{r7, pc}
    85a4:	20000570 	.word	0x20000570

000085a8 <_ZN18CommandTournerVers6updateEv>:
    signeAngle = SGN_UNDEF;

    maxAngSpeed = maxSpeed;
}

void CommandTournerVers::update()
    85a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    85ac:	b096      	sub	sp, #88
    85ae:	af00      	add	r7, sp, #0
    85b0:	60f8      	str	r0, [r7, #12]
{
    float accAngMax = ACCELERATION_ANGULAIRE_MAX;
    85b2:	4bbe      	ldr	r3, [pc, #760]	(88ac <_ZN18CommandTournerVers6updateEv+0x304>)
    85b4:	63fb      	str	r3, [r7, #60]
    float vitAngMax = maxAngSpeed;
    85b6:	68fb      	ldr	r3, [r7, #12]
    85b8:	69db      	ldr	r3, [r3, #28]
    85ba:	643b      	str	r3, [r7, #64]
    // float angleVitesseMax = M_PI/6.0f;
    float angleVitesseMax = 0.5f*vitAngMax*vitAngMax/accAngMax;
    85bc:	6c38      	ldr	r0, [r7, #64]
    85be:	49bc      	ldr	r1, [pc, #752]	(88b0 <_ZN18CommandTournerVers6updateEv+0x308>)
    85c0:	f012 fa14 	bl	1a9ec <__aeabi_fmul>
    85c4:	4603      	mov	r3, r0
    85c6:	4618      	mov	r0, r3
    85c8:	6c39      	ldr	r1, [r7, #64]
    85ca:	f012 fa0f 	bl	1a9ec <__aeabi_fmul>
    85ce:	4603      	mov	r3, r0
    85d0:	4618      	mov	r0, r3
    85d2:	6bf9      	ldr	r1, [r7, #60]
    85d4:	f012 fabe 	bl	1ab54 <__aeabi_fdiv>
    85d8:	4603      	mov	r3, r0
    85da:	647b      	str	r3, [r7, #68]
    float angle = Odometrie::odometrie->getPos().getAngle();
    85dc:	4bb5      	ldr	r3, [pc, #724]	(88b4 <_ZN18CommandTournerVers6updateEv+0x30c>)
    85de:	681a      	ldr	r2, [r3, #0]
    85e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
    85e4:	4618      	mov	r0, r3
    85e6:	4611      	mov	r1, r2
    85e8:	f001 f8ba 	bl	9760 <_ZNK9Odometrie6getPosEv>
    85ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
    85f0:	4618      	mov	r0, r3
    85f2:	f006 f9d1 	bl	e998 <_ZNK17PositionPlusAngle8getAngleEv>
    85f6:	4603      	mov	r3, r0
    85f8:	64bb      	str	r3, [r7, #72]
    Position pos = Odometrie::odometrie->getPos().getPosition();
    85fa:	4bae      	ldr	r3, [pc, #696]	(88b4 <_ZN18CommandTournerVers6updateEv+0x30c>)
    85fc:	681a      	ldr	r2, [r3, #0]
    85fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
    8602:	4618      	mov	r0, r3
    8604:	4611      	mov	r1, r2
    8606:	f001 f8ab 	bl	9760 <_ZNK9Odometrie6getPosEv>
    860a:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    860e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8612:	4618      	mov	r0, r3
    8614:	4611      	mov	r1, r2
    8616:	f006 f9ad 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
    float angleVise;
    if (!useAngle)
    861a:	68fb      	ldr	r3, [r7, #12]
    861c:	7d5b      	ldrb	r3, [r3, #21]
    861e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    8622:	b2db      	uxtb	r3, r3
    8624:	2b00      	cmp	r3, #0
    8626:	d02c      	beq.n	8682 <_ZN18CommandTournerVers6updateEv+0xda>
    {
        Position delta = but-pos;
    8628:	68fb      	ldr	r3, [r7, #12]
    862a:	f103 0104 	add.w	r1, r3, #4	; 0x4
    862e:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8632:	f107 021c 	add.w	r2, r7, #28	; 0x1c
    8636:	4618      	mov	r0, r3
    8638:	f005 ffce 	bl	e5d8 <_ZNK8PositionmiERKS_>
        angleVise = atan2(delta.getY(),delta.getX());
    863c:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8640:	4618      	mov	r0, r3
    8642:	f005 ff7b 	bl	e53c <_ZNK8Position4getYEv>
    8646:	4603      	mov	r3, r0
    8648:	4618      	mov	r0, r3
    864a:	f011 fd5d 	bl	1a108 <__aeabi_f2d>
    864e:	4604      	mov	r4, r0
    8650:	460d      	mov	r5, r1
    8652:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8656:	4618      	mov	r0, r3
    8658:	f005 ff64 	bl	e524 <_ZNK8Position4getXEv>
    865c:	4603      	mov	r3, r0
    865e:	4618      	mov	r0, r3
    8660:	f011 fd52 	bl	1a108 <__aeabi_f2d>
    8664:	4602      	mov	r2, r0
    8666:	460b      	mov	r3, r1
    8668:	4620      	mov	r0, r4
    866a:	4629      	mov	r1, r5
    866c:	f015 fe82 	bl	1e374 <atan2>
    8670:	4602      	mov	r2, r0
    8672:	460b      	mov	r3, r1
    8674:	4610      	mov	r0, r2
    8676:	4619      	mov	r1, r3
    8678:	f012 f85a 	bl	1a730 <__aeabi_d2f>
    867c:	4603      	mov	r3, r0
    867e:	64fb      	str	r3, [r7, #76]
    8680:	e002      	b.n	8688 <_ZN18CommandTournerVers6updateEv+0xe0>
    }
    else
    {
        angleVise = butAngle;
    8682:	68fb      	ldr	r3, [r7, #12]
    8684:	691b      	ldr	r3, [r3, #16]
    8686:	64fb      	str	r3, [r7, #76]
    }
    float diffAng = diffAngle(angleVise,angle);
    8688:	6cf8      	ldr	r0, [r7, #76]
    868a:	6cb9      	ldr	r1, [r7, #72]
    868c:	f7ff fb94 	bl	7db8 <_Z9diffAngleff>
    8690:	4603      	mov	r3, r0
    8692:	653b      	str	r3, [r7, #80]

    // Check sharps
    StrategieV2::setTourneSurSoiMeme(true);
    8694:	f04f 0001 	mov.w	r0, #1	; 0x1
    8698:	f00d f81e 	bl	156d8 <_ZN11StrategieV219setTourneSurSoiMemeEb>


    //qDebug() << abs(angleVise)*180./3.14 << angleVitesseMax;

    if (abs(diffAng) > angleVitesseMax)
    869c:	6d38      	ldr	r0, [r7, #80]
    869e:	4986      	ldr	r1, [pc, #536]	(88b8 <_ZN18CommandTournerVers6updateEv+0x310>)
    86a0:	f012 fb5e 	bl	1ad60 <__aeabi_fcmpgt>
    86a4:	4603      	mov	r3, r0
    86a6:	2b00      	cmp	r3, #0
    86a8:	d00f      	beq.n	86ca <_ZN18CommandTournerVers6updateEv+0x122>
    86aa:	f04f 0300 	mov.w	r3, #0	; 0x0
    86ae:	71fb      	strb	r3, [r7, #7]
    86b0:	6d38      	ldr	r0, [r7, #80]
    86b2:	4981      	ldr	r1, [pc, #516]	(88b8 <_ZN18CommandTournerVers6updateEv+0x310>)
    86b4:	f012 fb2c 	bl	1ad10 <__aeabi_fcmpeq>
    86b8:	4603      	mov	r3, r0
    86ba:	2b00      	cmp	r3, #0
    86bc:	d102      	bne.n	86c4 <_ZN18CommandTournerVers6updateEv+0x11c>
    86be:	f04f 0301 	mov.w	r3, #1	; 0x1
    86c2:	71fb      	strb	r3, [r7, #7]
    86c4:	79fb      	ldrb	r3, [r7, #7]
    86c6:	60bb      	str	r3, [r7, #8]
    86c8:	e011      	b.n	86ee <_ZN18CommandTournerVers6updateEv+0x146>
    86ca:	6d3b      	ldr	r3, [r7, #80]
    86cc:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    86d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    86d4:	71bb      	strb	r3, [r7, #6]
    86d6:	4610      	mov	r0, r2
    86d8:	6c79      	ldr	r1, [r7, #68]
    86da:	f012 fb41 	bl	1ad60 <__aeabi_fcmpgt>
    86de:	4603      	mov	r3, r0
    86e0:	2b00      	cmp	r3, #0
    86e2:	d002      	beq.n	86ea <_ZN18CommandTournerVers6updateEv+0x142>
    86e4:	f04f 0301 	mov.w	r3, #1	; 0x1
    86e8:	71bb      	strb	r3, [r7, #6]
    86ea:	79bb      	ldrb	r3, [r7, #6]
    86ec:	60bb      	str	r3, [r7, #8]
    86ee:	68bb      	ldr	r3, [r7, #8]
    86f0:	2b00      	cmp	r3, #0
    86f2:	f000 80c9 	beq.w	8888 <_ZN18CommandTournerVers6updateEv+0x2e0>
    {
        bool hasToDecelerate = (fabs(diffAng) < (angSpeed * angSpeed / accAngMax - accAngMax*2.));
    86f6:	6d3b      	ldr	r3, [r7, #80]
    86f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    86fc:	4618      	mov	r0, r3
    86fe:	f011 fd03 	bl	1a108 <__aeabi_f2d>
    8702:	4680      	mov	r8, r0
    8704:	4689      	mov	r9, r1
    8706:	68fb      	ldr	r3, [r7, #12]
    8708:	68da      	ldr	r2, [r3, #12]
    870a:	68fb      	ldr	r3, [r7, #12]
    870c:	68db      	ldr	r3, [r3, #12]
    870e:	4610      	mov	r0, r2
    8710:	4619      	mov	r1, r3
    8712:	f012 f96b 	bl	1a9ec <__aeabi_fmul>
    8716:	4603      	mov	r3, r0
    8718:	4618      	mov	r0, r3
    871a:	6bf9      	ldr	r1, [r7, #60]
    871c:	f012 fa1a 	bl	1ab54 <__aeabi_fdiv>
    8720:	4603      	mov	r3, r0
    8722:	4618      	mov	r0, r3
    8724:	f011 fcf0 	bl	1a108 <__aeabi_f2d>
    8728:	4604      	mov	r4, r0
    872a:	460d      	mov	r5, r1
    872c:	6bf8      	ldr	r0, [r7, #60]
    872e:	f011 fceb 	bl	1a108 <__aeabi_f2d>
    8732:	4602      	mov	r2, r0
    8734:	460b      	mov	r3, r1
    8736:	4610      	mov	r0, r2
    8738:	4619      	mov	r1, r3
    873a:	f04f 0200 	mov.w	r2, #0	; 0x0
    873e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    8742:	f011 fd35 	bl	1a1b0 <__aeabi_dmul>
    8746:	4602      	mov	r2, r0
    8748:	460b      	mov	r3, r1
    874a:	4620      	mov	r0, r4
    874c:	4629      	mov	r1, r5
    874e:	f011 fb7d 	bl	19e4c <__adddf3>
    8752:	4602      	mov	r2, r0
    8754:	460b      	mov	r3, r1
    8756:	4614      	mov	r4, r2
    8758:	461d      	mov	r5, r3
    875a:	f04f 0300 	mov.w	r3, #0	; 0x0
    875e:	f887 3057 	strb.w	r3, [r7, #87]
    8762:	4640      	mov	r0, r8
    8764:	4649      	mov	r1, r9
    8766:	4622      	mov	r2, r4
    8768:	462b      	mov	r3, r5
    876a:	f011 ff91 	bl	1a690 <__aeabi_dcmplt>
    876e:	4603      	mov	r3, r0
    8770:	2b00      	cmp	r3, #0
    8772:	d003      	beq.n	877c <_ZN18CommandTournerVers6updateEv+0x1d4>
    8774:	f04f 0301 	mov.w	r3, #1	; 0x1
    8778:	f887 3057 	strb.w	r3, [r7, #87]
        if (diffAng > 0)
    877c:	6d38      	ldr	r0, [r7, #80]
    877e:	494e      	ldr	r1, [pc, #312]	(88b8 <_ZN18CommandTournerVers6updateEv+0x310>)
    8780:	f012 faee 	bl	1ad60 <__aeabi_fcmpgt>
    8784:	4603      	mov	r3, r0
    8786:	2b00      	cmp	r3, #0
    8788:	d03c      	beq.n	8804 <_ZN18CommandTournerVers6updateEv+0x25c>
        {
            if (!hasToDecelerate)
    878a:	f897 3057 	ldrb.w	r3, [r7, #87]
    878e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    8792:	b2db      	uxtb	r3, r3
    8794:	2b00      	cmp	r3, #0
    8796:	d00a      	beq.n	87ae <_ZN18CommandTournerVers6updateEv+0x206>
                angSpeed += accAngMax;
    8798:	68fb      	ldr	r3, [r7, #12]
    879a:	68db      	ldr	r3, [r3, #12]
    879c:	4618      	mov	r0, r3
    879e:	6bf9      	ldr	r1, [r7, #60]
    87a0:	f012 f81c 	bl	1a7dc <__addsf3>
    87a4:	4603      	mov	r3, r0
    87a6:	461a      	mov	r2, r3
    87a8:	68fb      	ldr	r3, [r7, #12]
    87aa:	60da      	str	r2, [r3, #12]
    87ac:	e01d      	b.n	87ea <_ZN18CommandTournerVers6updateEv+0x242>
            else if (angSpeed > accAngMax*2)
    87ae:	68fb      	ldr	r3, [r7, #12]
    87b0:	68dc      	ldr	r4, [r3, #12]
    87b2:	6bfb      	ldr	r3, [r7, #60]
    87b4:	4618      	mov	r0, r3
    87b6:	4619      	mov	r1, r3
    87b8:	f012 f810 	bl	1a7dc <__addsf3>
    87bc:	4603      	mov	r3, r0
    87be:	4620      	mov	r0, r4
    87c0:	4619      	mov	r1, r3
    87c2:	f012 facd 	bl	1ad60 <__aeabi_fcmpgt>
    87c6:	4603      	mov	r3, r0
    87c8:	2b00      	cmp	r3, #0
    87ca:	d00e      	beq.n	87ea <_ZN18CommandTournerVers6updateEv+0x242>
                angSpeed -= accAngMax*2;
    87cc:	68fb      	ldr	r3, [r7, #12]
    87ce:	68dc      	ldr	r4, [r3, #12]
    87d0:	6bf8      	ldr	r0, [r7, #60]
    87d2:	493a      	ldr	r1, [pc, #232]	(88bc <_ZN18CommandTournerVers6updateEv+0x314>)
    87d4:	f012 f90a 	bl	1a9ec <__aeabi_fmul>
    87d8:	4603      	mov	r3, r0
    87da:	4620      	mov	r0, r4
    87dc:	4619      	mov	r1, r3
    87de:	f011 fffd 	bl	1a7dc <__addsf3>
    87e2:	4603      	mov	r3, r0
    87e4:	461a      	mov	r2, r3
    87e6:	68fb      	ldr	r3, [r7, #12]
    87e8:	60da      	str	r2, [r3, #12]

            if (angSpeed > vitAngMax)
    87ea:	68fb      	ldr	r3, [r7, #12]
    87ec:	68db      	ldr	r3, [r3, #12]
    87ee:	4618      	mov	r0, r3
    87f0:	6c39      	ldr	r1, [r7, #64]
    87f2:	f012 fab5 	bl	1ad60 <__aeabi_fcmpgt>
    87f6:	4603      	mov	r3, r0
    87f8:	2b00      	cmp	r3, #0
    87fa:	d052      	beq.n	88a2 <_ZN18CommandTournerVers6updateEv+0x2fa>
                angSpeed = vitAngMax;
    87fc:	68fa      	ldr	r2, [r7, #12]
    87fe:	6c3b      	ldr	r3, [r7, #64]
    8800:	60d3      	str	r3, [r2, #12]
    8802:	e04e      	b.n	88a2 <_ZN18CommandTournerVers6updateEv+0x2fa>
        }
        else
        {
            if (!hasToDecelerate)
    8804:	f897 3057 	ldrb.w	r3, [r7, #87]
    8808:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    880c:	b2db      	uxtb	r3, r3
    880e:	2b00      	cmp	r3, #0
    8810:	d00a      	beq.n	8828 <_ZN18CommandTournerVers6updateEv+0x280>
                angSpeed -= accAngMax;
    8812:	68fb      	ldr	r3, [r7, #12]
    8814:	68db      	ldr	r3, [r3, #12]
    8816:	4618      	mov	r0, r3
    8818:	6bf9      	ldr	r1, [r7, #60]
    881a:	f011 ffdd 	bl	1a7d8 <__aeabi_fsub>
    881e:	4603      	mov	r3, r0
    8820:	461a      	mov	r2, r3
    8822:	68fb      	ldr	r3, [r7, #12]
    8824:	60da      	str	r2, [r3, #12]
    8826:	e01d      	b.n	8864 <_ZN18CommandTournerVers6updateEv+0x2bc>
            else if (angSpeed < -accAngMax*2)
    8828:	68fb      	ldr	r3, [r7, #12]
    882a:	68dc      	ldr	r4, [r3, #12]
    882c:	6bf8      	ldr	r0, [r7, #60]
    882e:	4923      	ldr	r1, [pc, #140]	(88bc <_ZN18CommandTournerVers6updateEv+0x314>)
    8830:	f012 f8dc 	bl	1a9ec <__aeabi_fmul>
    8834:	4603      	mov	r3, r0
    8836:	4620      	mov	r0, r4
    8838:	4619      	mov	r1, r3
    883a:	f012 fa73 	bl	1ad24 <__aeabi_fcmplt>
    883e:	4603      	mov	r3, r0
    8840:	2b00      	cmp	r3, #0
    8842:	d00f      	beq.n	8864 <_ZN18CommandTournerVers6updateEv+0x2bc>
                angSpeed += accAngMax*2;
    8844:	68fb      	ldr	r3, [r7, #12]
    8846:	68dc      	ldr	r4, [r3, #12]
    8848:	6bfb      	ldr	r3, [r7, #60]
    884a:	4618      	mov	r0, r3
    884c:	4619      	mov	r1, r3
    884e:	f011 ffc5 	bl	1a7dc <__addsf3>
    8852:	4603      	mov	r3, r0
    8854:	4620      	mov	r0, r4
    8856:	4619      	mov	r1, r3
    8858:	f011 ffc0 	bl	1a7dc <__addsf3>
    885c:	4603      	mov	r3, r0
    885e:	461a      	mov	r2, r3
    8860:	68fb      	ldr	r3, [r7, #12]
    8862:	60da      	str	r2, [r3, #12]

            if (angSpeed < -vitAngMax)
    8864:	68fb      	ldr	r3, [r7, #12]
    8866:	68da      	ldr	r2, [r3, #12]
    8868:	6c3b      	ldr	r3, [r7, #64]
    886a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    886e:	4610      	mov	r0, r2
    8870:	4619      	mov	r1, r3
    8872:	f012 fa57 	bl	1ad24 <__aeabi_fcmplt>
    8876:	4603      	mov	r3, r0
    8878:	2b00      	cmp	r3, #0
    887a:	d012      	beq.n	88a2 <_ZN18CommandTournerVers6updateEv+0x2fa>
                angSpeed = -vitAngMax;
    887c:	6c3b      	ldr	r3, [r7, #64]
    887e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    8882:	68fb      	ldr	r3, [r7, #12]
    8884:	60da      	str	r2, [r3, #12]
    8886:	e00c      	b.n	88a2 <_ZN18CommandTournerVers6updateEv+0x2fa>
        }
    }
    else
    {
        angSpeed = diffAng*vitAngMax/angleVitesseMax;
    8888:	6d38      	ldr	r0, [r7, #80]
    888a:	6c39      	ldr	r1, [r7, #64]
    888c:	f012 f8ae 	bl	1a9ec <__aeabi_fmul>
    8890:	4603      	mov	r3, r0
    8892:	4618      	mov	r0, r3
    8894:	6c79      	ldr	r1, [r7, #68]
    8896:	f012 f95d 	bl	1ab54 <__aeabi_fdiv>
    889a:	4603      	mov	r3, r0
    889c:	461a      	mov	r2, r3
    889e:	68fb      	ldr	r3, [r7, #12]
    88a0:	60da      	str	r2, [r3, #12]
            angSpeed = sqrt(2.0f*diff*accAngMax);
        else
            angSpeed = -sqrt(-2.0f*diff*accAngMax);
    }*/

}
    88a2:	f107 0758 	add.w	r7, r7, #88	; 0x58
    88a6:	46bd      	mov	sp, r7
    88a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    88ac:	3983126f 	.word	0x3983126f
    88b0:	3f000000 	.word	0x3f000000
    88b4:	20000570 	.word	0x20000570
    88b8:	00000000 	.word	0x00000000
    88bc:	c0000000 	.word	0xc0000000

000088c0 <_ZN18CommandTournerVersC1Eff>:
    maxAngSpeed = maxSpeed;
}

//#include <QDebug>

CommandTournerVers::CommandTournerVers(Angle a, float maxSpeed)
    88c0:	b590      	push	{r4, r7, lr}
    88c2:	b087      	sub	sp, #28
    88c4:	af00      	add	r7, sp, #0
    88c6:	60f8      	str	r0, [r7, #12]
    88c8:	60b9      	str	r1, [r7, #8]
    88ca:	607a      	str	r2, [r7, #4]
    : Command()
    88cc:	68fb      	ldr	r3, [r7, #12]
    88ce:	4618      	mov	r0, r3
    88d0:	f7ff f836 	bl	7940 <_ZN7CommandC2Ev>
    88d4:	68fa      	ldr	r2, [r7, #12]
    88d6:	4b19      	ldr	r3, [pc, #100]	(893c <_ZN18CommandTournerVersC1Eff+0x7c>)
    88d8:	6013      	str	r3, [r2, #0]
    88da:	68fb      	ldr	r3, [r7, #12]
    88dc:	f103 0304 	add.w	r3, r3, #4	; 0x4
    88e0:	4618      	mov	r0, r3
    88e2:	f005 fde3 	bl	e4ac <_ZN8PositionC1Ev>
{
    but = Position();
    88e6:	68fb      	ldr	r3, [r7, #12]
    88e8:	f103 0404 	add.w	r4, r3, #4	; 0x4
    88ec:	f107 0310 	add.w	r3, r7, #16	; 0x10
    88f0:	4618      	mov	r0, r3
    88f2:	f005 fddb 	bl	e4ac <_ZN8PositionC1Ev>
    88f6:	4620      	mov	r0, r4
    88f8:	f107 0310 	add.w	r3, r7, #16	; 0x10
    88fc:	e893 0006 	ldmia.w	r3, {r1, r2}
    8900:	f005 fe90 	bl	e624 <_ZN8PositionaSES_>
    butAngle = a;
    8904:	68fa      	ldr	r2, [r7, #12]
    8906:	68bb      	ldr	r3, [r7, #8]
    8908:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    890a:	68fa      	ldr	r2, [r7, #12]
    890c:	4b0c      	ldr	r3, [pc, #48]	(8940 <_ZN18CommandTournerVersC1Eff+0x80>)
    890e:	60d3      	str	r3, [r2, #12]
    useAngle = true;
    8910:	68fa      	ldr	r2, [r7, #12]
    8912:	f04f 0301 	mov.w	r3, #1	; 0x1
    8916:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    8918:	68fa      	ldr	r2, [r7, #12]
    891a:	f04f 0300 	mov.w	r3, #0	; 0x0
    891e:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    8920:	68fa      	ldr	r2, [r7, #12]
    8922:	f04f 0300 	mov.w	r3, #0	; 0x0
    8926:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    8928:	68fa      	ldr	r2, [r7, #12]
    892a:	687b      	ldr	r3, [r7, #4]
    892c:	61d3      	str	r3, [r2, #28]
}
    892e:	68fb      	ldr	r3, [r7, #12]
    8930:	4618      	mov	r0, r3
    8932:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    8936:	46bd      	mov	sp, r7
    8938:	bd90      	pop	{r4, r7, pc}
    893a:	46c0      	nop			(mov r8, r8)
    893c:	000218f8 	.word	0x000218f8
    8940:	00000000 	.word	0x00000000

00008944 <_ZN18CommandTournerVersC2Eff>:
    maxAngSpeed = maxSpeed;
}

//#include <QDebug>

CommandTournerVers::CommandTournerVers(Angle a, float maxSpeed)
    8944:	b590      	push	{r4, r7, lr}
    8946:	b087      	sub	sp, #28
    8948:	af00      	add	r7, sp, #0
    894a:	60f8      	str	r0, [r7, #12]
    894c:	60b9      	str	r1, [r7, #8]
    894e:	607a      	str	r2, [r7, #4]
    : Command()
    8950:	68fb      	ldr	r3, [r7, #12]
    8952:	4618      	mov	r0, r3
    8954:	f7fe fff4 	bl	7940 <_ZN7CommandC2Ev>
    8958:	68fa      	ldr	r2, [r7, #12]
    895a:	4b19      	ldr	r3, [pc, #100]	(89c0 <_ZN18CommandTournerVersC2Eff+0x7c>)
    895c:	6013      	str	r3, [r2, #0]
    895e:	68fb      	ldr	r3, [r7, #12]
    8960:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8964:	4618      	mov	r0, r3
    8966:	f005 fda1 	bl	e4ac <_ZN8PositionC1Ev>
{
    but = Position();
    896a:	68fb      	ldr	r3, [r7, #12]
    896c:	f103 0404 	add.w	r4, r3, #4	; 0x4
    8970:	f107 0310 	add.w	r3, r7, #16	; 0x10
    8974:	4618      	mov	r0, r3
    8976:	f005 fd99 	bl	e4ac <_ZN8PositionC1Ev>
    897a:	4620      	mov	r0, r4
    897c:	f107 0310 	add.w	r3, r7, #16	; 0x10
    8980:	e893 0006 	ldmia.w	r3, {r1, r2}
    8984:	f005 fe4e 	bl	e624 <_ZN8PositionaSES_>
    butAngle = a;
    8988:	68fa      	ldr	r2, [r7, #12]
    898a:	68bb      	ldr	r3, [r7, #8]
    898c:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    898e:	68fa      	ldr	r2, [r7, #12]
    8990:	4b0c      	ldr	r3, [pc, #48]	(89c4 <_ZN18CommandTournerVersC2Eff+0x80>)
    8992:	60d3      	str	r3, [r2, #12]
    useAngle = true;
    8994:	68fa      	ldr	r2, [r7, #12]
    8996:	f04f 0301 	mov.w	r3, #1	; 0x1
    899a:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    899c:	68fa      	ldr	r2, [r7, #12]
    899e:	f04f 0300 	mov.w	r3, #0	; 0x0
    89a2:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    89a4:	68fa      	ldr	r2, [r7, #12]
    89a6:	f04f 0300 	mov.w	r3, #0	; 0x0
    89aa:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    89ac:	68fa      	ldr	r2, [r7, #12]
    89ae:	687b      	ldr	r3, [r7, #4]
    89b0:	61d3      	str	r3, [r2, #28]
}
    89b2:	68fb      	ldr	r3, [r7, #12]
    89b4:	4618      	mov	r0, r3
    89b6:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    89ba:	46bd      	mov	sp, r7
    89bc:	bd90      	pop	{r4, r7, pc}
    89be:	46c0      	nop			(mov r8, r8)
    89c0:	000218f8 	.word	0x000218f8
    89c4:	00000000 	.word	0x00000000

000089c8 <_ZN18CommandTournerVersC1E8Positionf>:

    ////////////////////////////////
    //    CommandTournerVers      //
    ////////////////////////////////

CommandTournerVers::CommandTournerVers(Position p, float maxSpeed)
    89c8:	b580      	push	{r7, lr}
    89ca:	b084      	sub	sp, #16
    89cc:	af00      	add	r7, sp, #0
    89ce:	60f8      	str	r0, [r7, #12]
    89d0:	f107 0004 	add.w	r0, r7, #4	; 0x4
    89d4:	e880 0006 	stmia.w	r0, {r1, r2}
    89d8:	603b      	str	r3, [r7, #0]
    : Command()
    89da:	68fb      	ldr	r3, [r7, #12]
    89dc:	4618      	mov	r0, r3
    89de:	f7fe ffaf 	bl	7940 <_ZN7CommandC2Ev>
    89e2:	68fa      	ldr	r2, [r7, #12]
    89e4:	4b16      	ldr	r3, [pc, #88]	(8a40 <_ZN18CommandTournerVersC1E8Positionf+0x78>)
    89e6:	6013      	str	r3, [r2, #0]
    89e8:	68fb      	ldr	r3, [r7, #12]
    89ea:	f103 0304 	add.w	r3, r3, #4	; 0x4
    89ee:	4618      	mov	r0, r3
    89f0:	f005 fd5c 	bl	e4ac <_ZN8PositionC1Ev>
{
    but = p;
    89f4:	68fb      	ldr	r3, [r7, #12]
    89f6:	f103 0304 	add.w	r3, r3, #4	; 0x4
    89fa:	4618      	mov	r0, r3
    89fc:	f107 0304 	add.w	r3, r7, #4	; 0x4
    8a00:	e893 0006 	ldmia.w	r3, {r1, r2}
    8a04:	f005 fe0e 	bl	e624 <_ZN8PositionaSES_>
    butAngle = 0;
    8a08:	68fa      	ldr	r2, [r7, #12]
    8a0a:	4b0e      	ldr	r3, [pc, #56]	(8a44 <_ZN18CommandTournerVersC1E8Positionf+0x7c>)
    8a0c:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    8a0e:	68fa      	ldr	r2, [r7, #12]
    8a10:	4b0c      	ldr	r3, [pc, #48]	(8a44 <_ZN18CommandTournerVersC1E8Positionf+0x7c>)
    8a12:	60d3      	str	r3, [r2, #12]
    useAngle = false;
    8a14:	68fa      	ldr	r2, [r7, #12]
    8a16:	f04f 0300 	mov.w	r3, #0	; 0x0
    8a1a:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    8a1c:	68fa      	ldr	r2, [r7, #12]
    8a1e:	f04f 0300 	mov.w	r3, #0	; 0x0
    8a22:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    8a24:	68fa      	ldr	r2, [r7, #12]
    8a26:	f04f 0300 	mov.w	r3, #0	; 0x0
    8a2a:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    8a2c:	68fa      	ldr	r2, [r7, #12]
    8a2e:	683b      	ldr	r3, [r7, #0]
    8a30:	61d3      	str	r3, [r2, #28]
}
    8a32:	68fb      	ldr	r3, [r7, #12]
    8a34:	4618      	mov	r0, r3
    8a36:	f107 0710 	add.w	r7, r7, #16	; 0x10
    8a3a:	46bd      	mov	sp, r7
    8a3c:	bd80      	pop	{r7, pc}
    8a3e:	46c0      	nop			(mov r8, r8)
    8a40:	000218f8 	.word	0x000218f8
    8a44:	00000000 	.word	0x00000000

00008a48 <_ZN18CommandTournerVersC2E8Positionf>:

    ////////////////////////////////
    //    CommandTournerVers      //
    ////////////////////////////////

CommandTournerVers::CommandTournerVers(Position p, float maxSpeed)
    8a48:	b580      	push	{r7, lr}
    8a4a:	b084      	sub	sp, #16
    8a4c:	af00      	add	r7, sp, #0
    8a4e:	60f8      	str	r0, [r7, #12]
    8a50:	f107 0004 	add.w	r0, r7, #4	; 0x4
    8a54:	e880 0006 	stmia.w	r0, {r1, r2}
    8a58:	603b      	str	r3, [r7, #0]
    : Command()
    8a5a:	68fb      	ldr	r3, [r7, #12]
    8a5c:	4618      	mov	r0, r3
    8a5e:	f7fe ff6f 	bl	7940 <_ZN7CommandC2Ev>
    8a62:	68fa      	ldr	r2, [r7, #12]
    8a64:	4b16      	ldr	r3, [pc, #88]	(8ac0 <_ZN18CommandTournerVersC2E8Positionf+0x78>)
    8a66:	6013      	str	r3, [r2, #0]
    8a68:	68fb      	ldr	r3, [r7, #12]
    8a6a:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8a6e:	4618      	mov	r0, r3
    8a70:	f005 fd1c 	bl	e4ac <_ZN8PositionC1Ev>
{
    but = p;
    8a74:	68fb      	ldr	r3, [r7, #12]
    8a76:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8a7a:	4618      	mov	r0, r3
    8a7c:	f107 0304 	add.w	r3, r7, #4	; 0x4
    8a80:	e893 0006 	ldmia.w	r3, {r1, r2}
    8a84:	f005 fdce 	bl	e624 <_ZN8PositionaSES_>
    butAngle = 0;
    8a88:	68fa      	ldr	r2, [r7, #12]
    8a8a:	4b0e      	ldr	r3, [pc, #56]	(8ac4 <_ZN18CommandTournerVersC2E8Positionf+0x7c>)
    8a8c:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    8a8e:	68fa      	ldr	r2, [r7, #12]
    8a90:	4b0c      	ldr	r3, [pc, #48]	(8ac4 <_ZN18CommandTournerVersC2E8Positionf+0x7c>)
    8a92:	60d3      	str	r3, [r2, #12]
    useAngle = false;
    8a94:	68fa      	ldr	r2, [r7, #12]
    8a96:	f04f 0300 	mov.w	r3, #0	; 0x0
    8a9a:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    8a9c:	68fa      	ldr	r2, [r7, #12]
    8a9e:	f04f 0300 	mov.w	r3, #0	; 0x0
    8aa2:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    8aa4:	68fa      	ldr	r2, [r7, #12]
    8aa6:	f04f 0300 	mov.w	r3, #0	; 0x0
    8aaa:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    8aac:	68fa      	ldr	r2, [r7, #12]
    8aae:	683b      	ldr	r3, [r7, #0]
    8ab0:	61d3      	str	r3, [r2, #28]
}
    8ab2:	68fb      	ldr	r3, [r7, #12]
    8ab4:	4618      	mov	r0, r3
    8ab6:	f107 0710 	add.w	r7, r7, #16	; 0x10
    8aba:	46bd      	mov	sp, r7
    8abc:	bd80      	pop	{r7, pc}
    8abe:	46c0      	nop			(mov r8, r8)
    8ac0:	000218f8 	.word	0x000218f8
    8ac4:	00000000 	.word	0x00000000

00008ac8 <_ZN13CommandAllerAC1E8Positionbfff>:

    ////////////////////////////////
    //       CommandAllerA        //
    ////////////////////////////////

CommandAllerA::CommandAllerA(Position p, bool reculer, float vitesseLineaireMax, float vitesseFin, float precisionAngle)
    8ac8:	b580      	push	{r7, lr}
    8aca:	b084      	sub	sp, #16
    8acc:	af00      	add	r7, sp, #0
    8ace:	60f8      	str	r0, [r7, #12]
    8ad0:	f107 0004 	add.w	r0, r7, #4	; 0x4
    8ad4:	e880 0006 	stmia.w	r0, {r1, r2}
    8ad8:	70fb      	strb	r3, [r7, #3]
    : Command()
    8ada:	68fb      	ldr	r3, [r7, #12]
    8adc:	4618      	mov	r0, r3
    8ade:	f7fe ff2f 	bl	7940 <_ZN7CommandC2Ev>
    8ae2:	68fa      	ldr	r2, [r7, #12]
    8ae4:	4b21      	ldr	r3, [pc, #132]	(8b6c <_ZN13CommandAllerAC1E8Positionbfff+0xa4>)
    8ae6:	6013      	str	r3, [r2, #0]
    8ae8:	68fb      	ldr	r3, [r7, #12]
    8aea:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8aee:	4618      	mov	r0, r3
    8af0:	f005 fcdc 	bl	e4ac <_ZN8PositionC1Ev>
{
    but = p;
    8af4:	68fb      	ldr	r3, [r7, #12]
    8af6:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8afa:	4618      	mov	r0, r3
    8afc:	f107 0304 	add.w	r3, r7, #4	; 0x4
    8b00:	e893 0006 	ldmia.w	r3, {r1, r2}
    8b04:	f005 fd8e 	bl	e624 <_ZN8PositionaSES_>
    vitesseLinMax = vitesseLineaireMax;
    8b08:	68fa      	ldr	r2, [r7, #12]
    8b0a:	69bb      	ldr	r3, [r7, #24]
    8b0c:	60d3      	str	r3, [r2, #12]
    vFin2 = vitesseFin*vitesseFin;
    8b0e:	69f8      	ldr	r0, [r7, #28]
    8b10:	69f9      	ldr	r1, [r7, #28]
    8b12:	f011 ff6b 	bl	1a9ec <__aeabi_fmul>
    8b16:	4603      	mov	r3, r0
    8b18:	461a      	mov	r2, r3
    8b1a:	68fb      	ldr	r3, [r7, #12]
    8b1c:	611a      	str	r2, [r3, #16]
    m_reculer = reculer;
    8b1e:	68fa      	ldr	r2, [r7, #12]
    8b20:	78fb      	ldrb	r3, [r7, #3]
    8b22:	f882 3020 	strb.w	r3, [r2, #32]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8b26:	4b12      	ldr	r3, [pc, #72]	(8b70 <_ZN13CommandAllerAC1E8Positionbfff+0xa8>)
    8b28:	681b      	ldr	r3, [r3, #0]
    8b2a:	4618      	mov	r0, r3
    8b2c:	f000 fe00 	bl	9730 <_ZNK9Odometrie18getVitesseLineaireEv>
    8b30:	4602      	mov	r2, r0
    8b32:	68fb      	ldr	r3, [r7, #12]
    8b34:	619a      	str	r2, [r3, #24]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8b36:	4b0e      	ldr	r3, [pc, #56]	(8b70 <_ZN13CommandAllerAC1E8Positionbfff+0xa8>)
    8b38:	681b      	ldr	r3, [r3, #0]
    8b3a:	4618      	mov	r0, r3
    8b3c:	f000 fdec 	bl	9718 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8b40:	4602      	mov	r2, r0
    8b42:	68fb      	ldr	r3, [r7, #12]
    8b44:	61da      	str	r2, [r3, #28]
    bonAngle = false;
    8b46:	68fa      	ldr	r2, [r7, #12]
    8b48:	f04f 0300 	mov.w	r3, #0	; 0x0
    8b4c:	7513      	strb	r3, [r2, #20]
    this->precisionAngle = -1.f;//precisionAngle;
    8b4e:	68fa      	ldr	r2, [r7, #12]
    8b50:	4b08      	ldr	r3, [pc, #32]	(8b74 <_ZN13CommandAllerAC1E8Positionbfff+0xac>)
    8b52:	62d3      	str	r3, [r2, #44]

    m_fini = false;
    8b54:	68fa      	ldr	r2, [r7, #12]
    8b56:	f04f 0300 	mov.w	r3, #0	; 0x0
    8b5a:	f882 3028 	strb.w	r3, [r2, #40]
}
    8b5e:	68fb      	ldr	r3, [r7, #12]
    8b60:	4618      	mov	r0, r3
    8b62:	f107 0710 	add.w	r7, r7, #16	; 0x10
    8b66:	46bd      	mov	sp, r7
    8b68:	bd80      	pop	{r7, pc}
    8b6a:	46c0      	nop			(mov r8, r8)
    8b6c:	00021920 	.word	0x00021920
    8b70:	20000570 	.word	0x20000570
    8b74:	bf800000 	.word	0xbf800000

00008b78 <_ZN13CommandAllerAC2E8Positionbfff>:

    ////////////////////////////////
    //       CommandAllerA        //
    ////////////////////////////////

CommandAllerA::CommandAllerA(Position p, bool reculer, float vitesseLineaireMax, float vitesseFin, float precisionAngle)
    8b78:	b580      	push	{r7, lr}
    8b7a:	b084      	sub	sp, #16
    8b7c:	af00      	add	r7, sp, #0
    8b7e:	60f8      	str	r0, [r7, #12]
    8b80:	f107 0004 	add.w	r0, r7, #4	; 0x4
    8b84:	e880 0006 	stmia.w	r0, {r1, r2}
    8b88:	70fb      	strb	r3, [r7, #3]
    : Command()
    8b8a:	68fb      	ldr	r3, [r7, #12]
    8b8c:	4618      	mov	r0, r3
    8b8e:	f7fe fed7 	bl	7940 <_ZN7CommandC2Ev>
    8b92:	68fa      	ldr	r2, [r7, #12]
    8b94:	4b21      	ldr	r3, [pc, #132]	(8c1c <_ZN13CommandAllerAC2E8Positionbfff+0xa4>)
    8b96:	6013      	str	r3, [r2, #0]
    8b98:	68fb      	ldr	r3, [r7, #12]
    8b9a:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8b9e:	4618      	mov	r0, r3
    8ba0:	f005 fc84 	bl	e4ac <_ZN8PositionC1Ev>
{
    but = p;
    8ba4:	68fb      	ldr	r3, [r7, #12]
    8ba6:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8baa:	4618      	mov	r0, r3
    8bac:	f107 0304 	add.w	r3, r7, #4	; 0x4
    8bb0:	e893 0006 	ldmia.w	r3, {r1, r2}
    8bb4:	f005 fd36 	bl	e624 <_ZN8PositionaSES_>
    vitesseLinMax = vitesseLineaireMax;
    8bb8:	68fa      	ldr	r2, [r7, #12]
    8bba:	69bb      	ldr	r3, [r7, #24]
    8bbc:	60d3      	str	r3, [r2, #12]
    vFin2 = vitesseFin*vitesseFin;
    8bbe:	69f8      	ldr	r0, [r7, #28]
    8bc0:	69f9      	ldr	r1, [r7, #28]
    8bc2:	f011 ff13 	bl	1a9ec <__aeabi_fmul>
    8bc6:	4603      	mov	r3, r0
    8bc8:	461a      	mov	r2, r3
    8bca:	68fb      	ldr	r3, [r7, #12]
    8bcc:	611a      	str	r2, [r3, #16]
    m_reculer = reculer;
    8bce:	68fa      	ldr	r2, [r7, #12]
    8bd0:	78fb      	ldrb	r3, [r7, #3]
    8bd2:	f882 3020 	strb.w	r3, [r2, #32]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8bd6:	4b12      	ldr	r3, [pc, #72]	(8c20 <_ZN13CommandAllerAC2E8Positionbfff+0xa8>)
    8bd8:	681b      	ldr	r3, [r3, #0]
    8bda:	4618      	mov	r0, r3
    8bdc:	f000 fda8 	bl	9730 <_ZNK9Odometrie18getVitesseLineaireEv>
    8be0:	4602      	mov	r2, r0
    8be2:	68fb      	ldr	r3, [r7, #12]
    8be4:	619a      	str	r2, [r3, #24]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8be6:	4b0e      	ldr	r3, [pc, #56]	(8c20 <_ZN13CommandAllerAC2E8Positionbfff+0xa8>)
    8be8:	681b      	ldr	r3, [r3, #0]
    8bea:	4618      	mov	r0, r3
    8bec:	f000 fd94 	bl	9718 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8bf0:	4602      	mov	r2, r0
    8bf2:	68fb      	ldr	r3, [r7, #12]
    8bf4:	61da      	str	r2, [r3, #28]
    bonAngle = false;
    8bf6:	68fa      	ldr	r2, [r7, #12]
    8bf8:	f04f 0300 	mov.w	r3, #0	; 0x0
    8bfc:	7513      	strb	r3, [r2, #20]
    this->precisionAngle = -1.f;//precisionAngle;
    8bfe:	68fa      	ldr	r2, [r7, #12]
    8c00:	4b08      	ldr	r3, [pc, #32]	(8c24 <_ZN13CommandAllerAC2E8Positionbfff+0xac>)
    8c02:	62d3      	str	r3, [r2, #44]

    m_fini = false;
    8c04:	68fa      	ldr	r2, [r7, #12]
    8c06:	f04f 0300 	mov.w	r3, #0	; 0x0
    8c0a:	f882 3028 	strb.w	r3, [r2, #40]
}
    8c0e:	68fb      	ldr	r3, [r7, #12]
    8c10:	4618      	mov	r0, r3
    8c12:	f107 0710 	add.w	r7, r7, #16	; 0x10
    8c16:	46bd      	mov	sp, r7
    8c18:	bd80      	pop	{r7, pc}
    8c1a:	46c0      	nop			(mov r8, r8)
    8c1c:	00021920 	.word	0x00021920
    8c20:	20000570 	.word	0x20000570
    8c24:	bf800000 	.word	0xbf800000

00008c28 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb>:

    ////////////////////////////////
    //    CommandAllerEnArcA      //
    ////////////////////////////////

CommandAllerEnArcA::CommandAllerEnArcA(Position p, Position c, float v, bool reculer)
    8c28:	b082      	sub	sp, #8
    8c2a:	b590      	push	{r4, r7, lr}
    8c2c:	b08f      	sub	sp, #60
    8c2e:	af00      	add	r7, sp, #0
    8c30:	60f8      	str	r0, [r7, #12]
    8c32:	f107 0004 	add.w	r0, r7, #4	; 0x4
    8c36:	e880 0006 	stmia.w	r0, {r1, r2}
    8c3a:	64fb      	str	r3, [r7, #76]
    : Command()
    8c3c:	68fb      	ldr	r3, [r7, #12]
    8c3e:	4618      	mov	r0, r3
    8c40:	f7fe fe7e 	bl	7940 <_ZN7CommandC2Ev>
    8c44:	68fa      	ldr	r2, [r7, #12]
    8c46:	4b50      	ldr	r3, [pc, #320]	(8d88 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x160>)
    8c48:	6013      	str	r3, [r2, #0]
    8c4a:	68fb      	ldr	r3, [r7, #12]
    8c4c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8c50:	4618      	mov	r0, r3
    8c52:	f005 fc2b 	bl	e4ac <_ZN8PositionC1Ev>
    8c56:	68fb      	ldr	r3, [r7, #12]
    8c58:	f103 0320 	add.w	r3, r3, #32	; 0x20
    8c5c:	4618      	mov	r0, r3
    8c5e:	f005 fc25 	bl	e4ac <_ZN8PositionC1Ev>
{
    but = p;
    8c62:	68fb      	ldr	r3, [r7, #12]
    8c64:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8c68:	4618      	mov	r0, r3
    8c6a:	f107 0304 	add.w	r3, r7, #4	; 0x4
    8c6e:	e893 0006 	ldmia.w	r3, {r1, r2}
    8c72:	f005 fcd7 	bl	e624 <_ZN8PositionaSES_>
    centre = c;
    8c76:	68fb      	ldr	r3, [r7, #12]
    8c78:	f103 0320 	add.w	r3, r3, #32	; 0x20
    8c7c:	4618      	mov	r0, r3
    8c7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    8c82:	e893 0006 	ldmia.w	r3, {r1, r2}
    8c86:	f005 fccd 	bl	e624 <_ZN8PositionaSES_>
    vMax = v;
    8c8a:	68fa      	ldr	r2, [r7, #12]
    8c8c:	6d7b      	ldr	r3, [r7, #84]
    8c8e:	60d3      	str	r3, [r2, #12]
    m_reculer = reculer;
    8c90:	68fa      	ldr	r2, [r7, #12]
    8c92:	f897 3058 	ldrb.w	r3, [r7, #88]
    8c96:	7713      	strb	r3, [r2, #28]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8c98:	4b3c      	ldr	r3, [pc, #240]	(8d8c <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x164>)
    8c9a:	681b      	ldr	r3, [r3, #0]
    8c9c:	4618      	mov	r0, r3
    8c9e:	f000 fd47 	bl	9730 <_ZNK9Odometrie18getVitesseLineaireEv>
    8ca2:	4602      	mov	r2, r0
    8ca4:	68fb      	ldr	r3, [r7, #12]
    8ca6:	615a      	str	r2, [r3, #20]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8ca8:	4b38      	ldr	r3, [pc, #224]	(8d8c <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x164>)
    8caa:	681b      	ldr	r3, [r3, #0]
    8cac:	4618      	mov	r0, r3
    8cae:	f000 fd33 	bl	9718 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8cb2:	4602      	mov	r2, r0
    8cb4:	68fb      	ldr	r3, [r7, #12]
    8cb6:	619a      	str	r2, [r3, #24]
    bonAngle = false;
    8cb8:	68fa      	ldr	r2, [r7, #12]
    8cba:	f04f 0300 	mov.w	r3, #0	; 0x0
    8cbe:	7413      	strb	r3, [r2, #16]

    m_fini = false;
    8cc0:	68fa      	ldr	r2, [r7, #12]
    8cc2:	f04f 0300 	mov.w	r3, #0	; 0x0
    8cc6:	f882 3028 	strb.w	r3, [r2, #40]

    Position pos = Odometrie::odometrie->getPos().getPosition();
    8cca:	4b30      	ldr	r3, [pc, #192]	(8d8c <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x164>)
    8ccc:	681a      	ldr	r2, [r3, #0]
    8cce:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    8cd2:	4618      	mov	r0, r3
    8cd4:	4611      	mov	r1, r2
    8cd6:	f000 fd43 	bl	9760 <_ZNK9Odometrie6getPosEv>
    8cda:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8cde:	f107 021c 	add.w	r2, r7, #28	; 0x1c
    8ce2:	4618      	mov	r0, r3
    8ce4:	4611      	mov	r1, r2
    8ce6:	f005 fe45 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
    float pmcx = pos.x-centre.x;
    8cea:	697a      	ldr	r2, [r7, #20]
    8cec:	68fb      	ldr	r3, [r7, #12]
    8cee:	6a1b      	ldr	r3, [r3, #32]
    8cf0:	4610      	mov	r0, r2
    8cf2:	4619      	mov	r1, r3
    8cf4:	f011 fd70 	bl	1a7d8 <__aeabi_fsub>
    8cf8:	4603      	mov	r3, r0
    8cfa:	62bb      	str	r3, [r7, #40]
    float pmcy = pos.y-centre.y;
    8cfc:	69ba      	ldr	r2, [r7, #24]
    8cfe:	68fb      	ldr	r3, [r7, #12]
    8d00:	6a5b      	ldr	r3, [r3, #36]
    8d02:	4610      	mov	r0, r2
    8d04:	4619      	mov	r1, r3
    8d06:	f011 fd67 	bl	1a7d8 <__aeabi_fsub>
    8d0a:	4603      	mov	r3, r0
    8d0c:	62fb      	str	r3, [r7, #44]
    float bmcx = but.x-centre.x;
    8d0e:	68fb      	ldr	r3, [r7, #12]
    8d10:	685a      	ldr	r2, [r3, #4]
    8d12:	68fb      	ldr	r3, [r7, #12]
    8d14:	6a1b      	ldr	r3, [r3, #32]
    8d16:	4610      	mov	r0, r2
    8d18:	4619      	mov	r1, r3
    8d1a:	f011 fd5d 	bl	1a7d8 <__aeabi_fsub>
    8d1e:	4603      	mov	r3, r0
    8d20:	633b      	str	r3, [r7, #48]
    float bmcy = but.y-centre.y;
    8d22:	68fb      	ldr	r3, [r7, #12]
    8d24:	689a      	ldr	r2, [r3, #8]
    8d26:	68fb      	ldr	r3, [r7, #12]
    8d28:	6a5b      	ldr	r3, [r3, #36]
    8d2a:	4610      	mov	r0, r2
    8d2c:	4619      	mov	r1, r3
    8d2e:	f011 fd53 	bl	1a7d8 <__aeabi_fsub>
    8d32:	4603      	mov	r3, r0
    8d34:	637b      	str	r3, [r7, #52]
    if (pmcx*bmcy-pmcy*bmcx > 0.0f)
    8d36:	6ab8      	ldr	r0, [r7, #40]
    8d38:	6b79      	ldr	r1, [r7, #52]
    8d3a:	f011 fe57 	bl	1a9ec <__aeabi_fmul>
    8d3e:	4603      	mov	r3, r0
    8d40:	461c      	mov	r4, r3
    8d42:	6af8      	ldr	r0, [r7, #44]
    8d44:	6b39      	ldr	r1, [r7, #48]
    8d46:	f011 fe51 	bl	1a9ec <__aeabi_fmul>
    8d4a:	4603      	mov	r3, r0
    8d4c:	4620      	mov	r0, r4
    8d4e:	4619      	mov	r1, r3
    8d50:	f011 fd42 	bl	1a7d8 <__aeabi_fsub>
    8d54:	4603      	mov	r3, r0
    8d56:	4618      	mov	r0, r3
    8d58:	490d      	ldr	r1, [pc, #52]	(8d90 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x168>)
    8d5a:	f012 f801 	bl	1ad60 <__aeabi_fcmpgt>
    8d5e:	4603      	mov	r3, r0
    8d60:	2b00      	cmp	r3, #0
    8d62:	d004      	beq.n	8d6e <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x146>
        cote = SGN_POS;
    8d64:	68fa      	ldr	r2, [r7, #12]
    8d66:	f04f 0301 	mov.w	r3, #1	; 0x1
    8d6a:	62d3      	str	r3, [r2, #44]
    8d6c:	e003      	b.n	8d76 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x14e>
    else
        cote = SGN_NEG;
    8d6e:	68fa      	ldr	r2, [r7, #12]
    8d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8d74:	62d3      	str	r3, [r2, #44]
}
    8d76:	68fb      	ldr	r3, [r7, #12]
    8d78:	4618      	mov	r0, r3
    8d7a:	f107 073c 	add.w	r7, r7, #60	; 0x3c
    8d7e:	46bd      	mov	sp, r7
    8d80:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    8d84:	b002      	add	sp, #8
    8d86:	4770      	bx	lr
    8d88:	00021948 	.word	0x00021948
    8d8c:	20000570 	.word	0x20000570
    8d90:	00000000 	.word	0x00000000

00008d94 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb>:

    ////////////////////////////////
    //    CommandAllerEnArcA      //
    ////////////////////////////////

CommandAllerEnArcA::CommandAllerEnArcA(Position p, Position c, float v, bool reculer)
    8d94:	b082      	sub	sp, #8
    8d96:	b590      	push	{r4, r7, lr}
    8d98:	b08f      	sub	sp, #60
    8d9a:	af00      	add	r7, sp, #0
    8d9c:	60f8      	str	r0, [r7, #12]
    8d9e:	f107 0004 	add.w	r0, r7, #4	; 0x4
    8da2:	e880 0006 	stmia.w	r0, {r1, r2}
    8da6:	64fb      	str	r3, [r7, #76]
    : Command()
    8da8:	68fb      	ldr	r3, [r7, #12]
    8daa:	4618      	mov	r0, r3
    8dac:	f7fe fdc8 	bl	7940 <_ZN7CommandC2Ev>
    8db0:	68fa      	ldr	r2, [r7, #12]
    8db2:	4b50      	ldr	r3, [pc, #320]	(8ef4 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x160>)
    8db4:	6013      	str	r3, [r2, #0]
    8db6:	68fb      	ldr	r3, [r7, #12]
    8db8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8dbc:	4618      	mov	r0, r3
    8dbe:	f005 fb75 	bl	e4ac <_ZN8PositionC1Ev>
    8dc2:	68fb      	ldr	r3, [r7, #12]
    8dc4:	f103 0320 	add.w	r3, r3, #32	; 0x20
    8dc8:	4618      	mov	r0, r3
    8dca:	f005 fb6f 	bl	e4ac <_ZN8PositionC1Ev>
{
    but = p;
    8dce:	68fb      	ldr	r3, [r7, #12]
    8dd0:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8dd4:	4618      	mov	r0, r3
    8dd6:	f107 0304 	add.w	r3, r7, #4	; 0x4
    8dda:	e893 0006 	ldmia.w	r3, {r1, r2}
    8dde:	f005 fc21 	bl	e624 <_ZN8PositionaSES_>
    centre = c;
    8de2:	68fb      	ldr	r3, [r7, #12]
    8de4:	f103 0320 	add.w	r3, r3, #32	; 0x20
    8de8:	4618      	mov	r0, r3
    8dea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    8dee:	e893 0006 	ldmia.w	r3, {r1, r2}
    8df2:	f005 fc17 	bl	e624 <_ZN8PositionaSES_>
    vMax = v;
    8df6:	68fa      	ldr	r2, [r7, #12]
    8df8:	6d7b      	ldr	r3, [r7, #84]
    8dfa:	60d3      	str	r3, [r2, #12]
    m_reculer = reculer;
    8dfc:	68fa      	ldr	r2, [r7, #12]
    8dfe:	f897 3058 	ldrb.w	r3, [r7, #88]
    8e02:	7713      	strb	r3, [r2, #28]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8e04:	4b3c      	ldr	r3, [pc, #240]	(8ef8 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x164>)
    8e06:	681b      	ldr	r3, [r3, #0]
    8e08:	4618      	mov	r0, r3
    8e0a:	f000 fc91 	bl	9730 <_ZNK9Odometrie18getVitesseLineaireEv>
    8e0e:	4602      	mov	r2, r0
    8e10:	68fb      	ldr	r3, [r7, #12]
    8e12:	615a      	str	r2, [r3, #20]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8e14:	4b38      	ldr	r3, [pc, #224]	(8ef8 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x164>)
    8e16:	681b      	ldr	r3, [r3, #0]
    8e18:	4618      	mov	r0, r3
    8e1a:	f000 fc7d 	bl	9718 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8e1e:	4602      	mov	r2, r0
    8e20:	68fb      	ldr	r3, [r7, #12]
    8e22:	619a      	str	r2, [r3, #24]
    bonAngle = false;
    8e24:	68fa      	ldr	r2, [r7, #12]
    8e26:	f04f 0300 	mov.w	r3, #0	; 0x0
    8e2a:	7413      	strb	r3, [r2, #16]

    m_fini = false;
    8e2c:	68fa      	ldr	r2, [r7, #12]
    8e2e:	f04f 0300 	mov.w	r3, #0	; 0x0
    8e32:	f882 3028 	strb.w	r3, [r2, #40]

    Position pos = Odometrie::odometrie->getPos().getPosition();
    8e36:	4b30      	ldr	r3, [pc, #192]	(8ef8 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x164>)
    8e38:	681a      	ldr	r2, [r3, #0]
    8e3a:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    8e3e:	4618      	mov	r0, r3
    8e40:	4611      	mov	r1, r2
    8e42:	f000 fc8d 	bl	9760 <_ZNK9Odometrie6getPosEv>
    8e46:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8e4a:	f107 021c 	add.w	r2, r7, #28	; 0x1c
    8e4e:	4618      	mov	r0, r3
    8e50:	4611      	mov	r1, r2
    8e52:	f005 fd8f 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
    float pmcx = pos.x-centre.x;
    8e56:	697a      	ldr	r2, [r7, #20]
    8e58:	68fb      	ldr	r3, [r7, #12]
    8e5a:	6a1b      	ldr	r3, [r3, #32]
    8e5c:	4610      	mov	r0, r2
    8e5e:	4619      	mov	r1, r3
    8e60:	f011 fcba 	bl	1a7d8 <__aeabi_fsub>
    8e64:	4603      	mov	r3, r0
    8e66:	62bb      	str	r3, [r7, #40]
    float pmcy = pos.y-centre.y;
    8e68:	69ba      	ldr	r2, [r7, #24]
    8e6a:	68fb      	ldr	r3, [r7, #12]
    8e6c:	6a5b      	ldr	r3, [r3, #36]
    8e6e:	4610      	mov	r0, r2
    8e70:	4619      	mov	r1, r3
    8e72:	f011 fcb1 	bl	1a7d8 <__aeabi_fsub>
    8e76:	4603      	mov	r3, r0
    8e78:	62fb      	str	r3, [r7, #44]
    float bmcx = but.x-centre.x;
    8e7a:	68fb      	ldr	r3, [r7, #12]
    8e7c:	685a      	ldr	r2, [r3, #4]
    8e7e:	68fb      	ldr	r3, [r7, #12]
    8e80:	6a1b      	ldr	r3, [r3, #32]
    8e82:	4610      	mov	r0, r2
    8e84:	4619      	mov	r1, r3
    8e86:	f011 fca7 	bl	1a7d8 <__aeabi_fsub>
    8e8a:	4603      	mov	r3, r0
    8e8c:	633b      	str	r3, [r7, #48]
    float bmcy = but.y-centre.y;
    8e8e:	68fb      	ldr	r3, [r7, #12]
    8e90:	689a      	ldr	r2, [r3, #8]
    8e92:	68fb      	ldr	r3, [r7, #12]
    8e94:	6a5b      	ldr	r3, [r3, #36]
    8e96:	4610      	mov	r0, r2
    8e98:	4619      	mov	r1, r3
    8e9a:	f011 fc9d 	bl	1a7d8 <__aeabi_fsub>
    8e9e:	4603      	mov	r3, r0
    8ea0:	637b      	str	r3, [r7, #52]
    if (pmcx*bmcy-pmcy*bmcx > 0.0f)
    8ea2:	6ab8      	ldr	r0, [r7, #40]
    8ea4:	6b79      	ldr	r1, [r7, #52]
    8ea6:	f011 fda1 	bl	1a9ec <__aeabi_fmul>
    8eaa:	4603      	mov	r3, r0
    8eac:	461c      	mov	r4, r3
    8eae:	6af8      	ldr	r0, [r7, #44]
    8eb0:	6b39      	ldr	r1, [r7, #48]
    8eb2:	f011 fd9b 	bl	1a9ec <__aeabi_fmul>
    8eb6:	4603      	mov	r3, r0
    8eb8:	4620      	mov	r0, r4
    8eba:	4619      	mov	r1, r3
    8ebc:	f011 fc8c 	bl	1a7d8 <__aeabi_fsub>
    8ec0:	4603      	mov	r3, r0
    8ec2:	4618      	mov	r0, r3
    8ec4:	490d      	ldr	r1, [pc, #52]	(8efc <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x168>)
    8ec6:	f011 ff4b 	bl	1ad60 <__aeabi_fcmpgt>
    8eca:	4603      	mov	r3, r0
    8ecc:	2b00      	cmp	r3, #0
    8ece:	d004      	beq.n	8eda <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x146>
        cote = SGN_POS;
    8ed0:	68fa      	ldr	r2, [r7, #12]
    8ed2:	f04f 0301 	mov.w	r3, #1	; 0x1
    8ed6:	62d3      	str	r3, [r2, #44]
    8ed8:	e003      	b.n	8ee2 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x14e>
    else
        cote = SGN_NEG;
    8eda:	68fa      	ldr	r2, [r7, #12]
    8edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8ee0:	62d3      	str	r3, [r2, #44]
}
    8ee2:	68fb      	ldr	r3, [r7, #12]
    8ee4:	4618      	mov	r0, r3
    8ee6:	f107 073c 	add.w	r7, r7, #60	; 0x3c
    8eea:	46bd      	mov	sp, r7
    8eec:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    8ef0:	b002      	add	sp, #8
    8ef2:	4770      	bx	lr
    8ef4:	00021948 	.word	0x00021948
    8ef8:	20000570 	.word	0x20000570
    8efc:	00000000 	.word	0x00000000

00008f00 <_ZN13CommandAllerA6updateEv>:
    this->precisionAngle = -1.f;//precisionAngle;

    m_fini = false;
}

void CommandAllerA::update()
    8f00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    8f04:	b09e      	sub	sp, #120
    8f06:	af00      	add	r7, sp, #0
    8f08:	6178      	str	r0, [r7, #20]
{
    float accAngMax = ACCELERATION_ANGULAIRE_MAX;
    8f0a:	4bcb      	ldr	r3, [pc, #812]	(9238 <_ZN13CommandAllerA6updateEv+0x338>)
    8f0c:	643b      	str	r3, [r7, #64]
    float vitAngMax = VITESSE_ANGULAIRE_MAX;
    8f0e:	4bcb      	ldr	r3, [pc, #812]	(923c <_ZN13CommandAllerA6updateEv+0x33c>)
    8f10:	647b      	str	r3, [r7, #68]
    float accLinMax = ACCELERATION_LINEAIRE_MAX;
    8f12:	4bcb      	ldr	r3, [pc, #812]	(9240 <_ZN13CommandAllerA6updateEv+0x340>)
    8f14:	64bb      	str	r3, [r7, #72]
    float decLinMax = DECELERATION_LINEAIRE_MAX;
    8f16:	4bcb      	ldr	r3, [pc, #812]	(9244 <_ZN13CommandAllerA6updateEv+0x344>)
    8f18:	64fb      	str	r3, [r7, #76]
    float vitLinMax = vitesseLinMax;//VITESSE_LINEAIRE_MAX;
    8f1a:	697b      	ldr	r3, [r7, #20]
    8f1c:	68db      	ldr	r3, [r3, #12]
    8f1e:	653b      	str	r3, [r7, #80]

    if(this->getLimit())
    8f20:	f7fe fd7a 	bl	7a18 <_ZN7Command8getLimitEv>
    8f24:	4603      	mov	r3, r0
    8f26:	2b00      	cmp	r3, #0
    8f28:	d00b      	beq.n	8f42 <_ZN13CommandAllerA6updateEv+0x42>
    {
        vitLinMax = vitesseLinMax/3;
    8f2a:	697b      	ldr	r3, [r7, #20]
    8f2c:	68db      	ldr	r3, [r3, #12]
    8f2e:	4618      	mov	r0, r3
    8f30:	49c5      	ldr	r1, [pc, #788]	(9248 <_ZN13CommandAllerA6updateEv+0x348>)
    8f32:	f011 fe0f 	bl	1ab54 <__aeabi_fdiv>
    8f36:	4603      	mov	r3, r0
    8f38:	653b      	str	r3, [r7, #80]
        allumerLED();
    8f3a:	f002 ff71 	bl	be20 <_Z10allumerLEDv>
        allumerLED2();
    8f3e:	f002 ff67 	bl	be10 <_Z11allumerLED2v>
    {
        //eteindreLED();
    }

    //float angleVitesseMax = M_PI/10.0f;
    float angleVitesseMax = 0.5f*vitAngMax*vitAngMax/accAngMax;
    8f42:	6c78      	ldr	r0, [r7, #68]
    8f44:	49c1      	ldr	r1, [pc, #772]	(924c <_ZN13CommandAllerA6updateEv+0x34c>)
    8f46:	f011 fd51 	bl	1a9ec <__aeabi_fmul>
    8f4a:	4603      	mov	r3, r0
    8f4c:	4618      	mov	r0, r3
    8f4e:	6c79      	ldr	r1, [r7, #68]
    8f50:	f011 fd4c 	bl	1a9ec <__aeabi_fmul>
    8f54:	4603      	mov	r3, r0
    8f56:	4618      	mov	r0, r3
    8f58:	6c39      	ldr	r1, [r7, #64]
    8f5a:	f011 fdfb 	bl	1ab54 <__aeabi_fdiv>
    8f5e:	4603      	mov	r3, r0
    8f60:	657b      	str	r3, [r7, #84]
    //float distanceVitesseMax = 350.0f;
    float distanceVitesseMax = 0.5f*(vitLinMax*vitLinMax-vFin2)/decLinMax;
    8f62:	6d38      	ldr	r0, [r7, #80]
    8f64:	6d39      	ldr	r1, [r7, #80]
    8f66:	f011 fd41 	bl	1a9ec <__aeabi_fmul>
    8f6a:	4603      	mov	r3, r0
    8f6c:	461a      	mov	r2, r3
    8f6e:	697b      	ldr	r3, [r7, #20]
    8f70:	691b      	ldr	r3, [r3, #16]
    8f72:	4610      	mov	r0, r2
    8f74:	4619      	mov	r1, r3
    8f76:	f011 fc2f 	bl	1a7d8 <__aeabi_fsub>
    8f7a:	4603      	mov	r3, r0
    8f7c:	4618      	mov	r0, r3
    8f7e:	49b3      	ldr	r1, [pc, #716]	(924c <_ZN13CommandAllerA6updateEv+0x34c>)
    8f80:	f011 fd34 	bl	1a9ec <__aeabi_fmul>
    8f84:	4603      	mov	r3, r0
    8f86:	4618      	mov	r0, r3
    8f88:	6cf9      	ldr	r1, [r7, #76]
    8f8a:	f011 fde3 	bl	1ab54 <__aeabi_fdiv>
    8f8e:	4603      	mov	r3, r0
    8f90:	65bb      	str	r3, [r7, #88]
    float angle = Odometrie::odometrie->getPos().getAngle();
    8f92:	4baf      	ldr	r3, [pc, #700]	(9250 <_ZN13CommandAllerA6updateEv+0x350>)
    8f94:	681a      	ldr	r2, [r3, #0]
    8f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
    8f9a:	4618      	mov	r0, r3
    8f9c:	4611      	mov	r1, r2
    8f9e:	f000 fbdf 	bl	9760 <_ZNK9Odometrie6getPosEv>
    8fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
    8fa6:	4618      	mov	r0, r3
    8fa8:	f005 fcf6 	bl	e998 <_ZNK17PositionPlusAngle8getAngleEv>
    8fac:	4603      	mov	r3, r0
    8fae:	65fb      	str	r3, [r7, #92]
    Position pos = Odometrie::odometrie->getPos().getPosition();
    8fb0:	4ba7      	ldr	r3, [pc, #668]	(9250 <_ZN13CommandAllerA6updateEv+0x350>)
    8fb2:	681a      	ldr	r2, [r3, #0]
    8fb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
    8fb8:	4618      	mov	r0, r3
    8fba:	4611      	mov	r1, r2
    8fbc:	f000 fbd0 	bl	9760 <_ZNK9Odometrie6getPosEv>
    8fc0:	f107 0320 	add.w	r3, r7, #32	; 0x20
    8fc4:	f107 0234 	add.w	r2, r7, #52	; 0x34
    8fc8:	4618      	mov	r0, r3
    8fca:	4611      	mov	r1, r2
    8fcc:	f005 fcd2 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
    Position delta = but-pos;
    8fd0:	697b      	ldr	r3, [r7, #20]
    8fd2:	f103 0104 	add.w	r1, r3, #4	; 0x4
    8fd6:	f107 0318 	add.w	r3, r7, #24	; 0x18
    8fda:	f107 0220 	add.w	r2, r7, #32	; 0x20
    8fde:	4618      	mov	r0, r3
    8fe0:	f005 fafa 	bl	e5d8 <_ZNK8PositionmiERKS_>
    float angleVise = atan2(delta.getY(),delta.getX());
    8fe4:	f107 0318 	add.w	r3, r7, #24	; 0x18
    8fe8:	4618      	mov	r0, r3
    8fea:	f005 faa7 	bl	e53c <_ZNK8Position4getYEv>
    8fee:	4603      	mov	r3, r0
    8ff0:	4618      	mov	r0, r3
    8ff2:	f011 f889 	bl	1a108 <__aeabi_f2d>
    8ff6:	4604      	mov	r4, r0
    8ff8:	460d      	mov	r5, r1
    8ffa:	f107 0318 	add.w	r3, r7, #24	; 0x18
    8ffe:	4618      	mov	r0, r3
    9000:	f005 fa90 	bl	e524 <_ZNK8Position4getXEv>
    9004:	4603      	mov	r3, r0
    9006:	4618      	mov	r0, r3
    9008:	f011 f87e 	bl	1a108 <__aeabi_f2d>
    900c:	4602      	mov	r2, r0
    900e:	460b      	mov	r3, r1
    9010:	4620      	mov	r0, r4
    9012:	4629      	mov	r1, r5
    9014:	f015 f9ae 	bl	1e374 <atan2>
    9018:	4602      	mov	r2, r0
    901a:	460b      	mov	r3, r1
    901c:	4610      	mov	r0, r2
    901e:	4619      	mov	r1, r3
    9020:	f011 fb86 	bl	1a730 <__aeabi_d2f>
    9024:	4603      	mov	r3, r0
    9026:	663b      	str	r3, [r7, #96]

    if (m_reculer)
    9028:	697b      	ldr	r3, [r7, #20]
    902a:	f893 3020 	ldrb.w	r3, [r3, #32]
    902e:	2b00      	cmp	r3, #0
    9030:	d012      	beq.n	9058 <_ZN13CommandAllerA6updateEv+0x158>
        angleVise += M_PI;
    9032:	6e38      	ldr	r0, [r7, #96]
    9034:	f011 f868 	bl	1a108 <__aeabi_f2d>
    9038:	4602      	mov	r2, r0
    903a:	460b      	mov	r3, r1
    903c:	4610      	mov	r0, r2
    903e:	4619      	mov	r1, r3
    9040:	a27b      	add	r2, pc, #492	(adr r2, 9230 <_ZN13CommandAllerA6updateEv+0x330>)
    9042:	ca0c      	ldmia	r2!, {r2, r3}
    9044:	f010 ff02 	bl	19e4c <__adddf3>
    9048:	4602      	mov	r2, r0
    904a:	460b      	mov	r3, r1
    904c:	4610      	mov	r0, r2
    904e:	4619      	mov	r1, r3
    9050:	f011 fb6e 	bl	1a730 <__aeabi_d2f>
    9054:	4603      	mov	r3, r0
    9056:	663b      	str	r3, [r7, #96]

    float diffAng = diffAngle(angleVise,angle);
    9058:	6e38      	ldr	r0, [r7, #96]
    905a:	6df9      	ldr	r1, [r7, #92]
    905c:	f7fe feac 	bl	7db8 <_Z9diffAngleff>
    9060:	4603      	mov	r3, r0
    9062:	667b      	str	r3, [r7, #100]

    // reste sur place tant que le robot n'a pas le bon angle
    float angleMaxPourAvancer;
    if (precisionAngle<0.)
    9064:	697b      	ldr	r3, [r7, #20]
    9066:	6adb      	ldr	r3, [r3, #44]
    9068:	4618      	mov	r0, r3
    906a:	497a      	ldr	r1, [pc, #488]	(9254 <_ZN13CommandAllerA6updateEv+0x354>)
    906c:	f011 fe5a 	bl	1ad24 <__aeabi_fcmplt>
    9070:	4603      	mov	r3, r0
    9072:	2b00      	cmp	r3, #0
    9074:	d002      	beq.n	907c <_ZN13CommandAllerA6updateEv+0x17c>
        angleMaxPourAvancer = M_PI/25.0f;//25.0f;
    9076:	4b78      	ldr	r3, [pc, #480]	(9258 <_ZN13CommandAllerA6updateEv+0x358>)
    9078:	66bb      	str	r3, [r7, #104]
    907a:	e001      	b.n	9080 <_ZN13CommandAllerA6updateEv+0x180>
    else
        angleMaxPourAvancer = DEGTORAD(3.);//25.0f;
    907c:	4b77      	ldr	r3, [pc, #476]	(925c <_ZN13CommandAllerA6updateEv+0x35c>)
    907e:	66bb      	str	r3, [r7, #104]
    if (!bonAngle)
    9080:	697b      	ldr	r3, [r7, #20]
    9082:	7d1b      	ldrb	r3, [r3, #20]
    9084:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9088:	b2db      	uxtb	r3, r3
    908a:	2b00      	cmp	r3, #0
    908c:	d01b      	beq.n	90c6 <_ZN13CommandAllerA6updateEv+0x1c6>
    {
        if (fabs(diffAng) < angleMaxPourAvancer)
    908e:	6e7b      	ldr	r3, [r7, #100]
    9090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9094:	4618      	mov	r0, r3
    9096:	6eb9      	ldr	r1, [r7, #104]
    9098:	f011 fe44 	bl	1ad24 <__aeabi_fcmplt>
    909c:	4603      	mov	r3, r0
    909e:	2b00      	cmp	r3, #0
    90a0:	d007      	beq.n	90b2 <_ZN13CommandAllerA6updateEv+0x1b2>
        {
            bonAngle = true;
    90a2:	697a      	ldr	r2, [r7, #20]
    90a4:	f04f 0301 	mov.w	r3, #1	; 0x1
    90a8:	7513      	strb	r3, [r2, #20]
            derniereDistance = 1000000.0f;
    90aa:	697a      	ldr	r2, [r7, #20]
    90ac:	4b6c      	ldr	r3, [pc, #432]	(9260 <_ZN13CommandAllerA6updateEv+0x360>)
    90ae:	6253      	str	r3, [r2, #36]
    90b0:	e009      	b.n	90c6 <_ZN13CommandAllerA6updateEv+0x1c6>
        }
        else
        {
            linSpeed *= 0.95f;
    90b2:	697b      	ldr	r3, [r7, #20]
    90b4:	699b      	ldr	r3, [r3, #24]
    90b6:	4618      	mov	r0, r3
    90b8:	496a      	ldr	r1, [pc, #424]	(9264 <_ZN13CommandAllerA6updateEv+0x364>)
    90ba:	f011 fc97 	bl	1a9ec <__aeabi_fmul>
    90be:	4603      	mov	r3, r0
    90c0:	461a      	mov	r2, r3
    90c2:	697b      	ldr	r3, [r7, #20]
    90c4:	619a      	str	r2, [r3, #24]
        }
    }

    // Check sharps
    StrategieV2::setTourneSurSoiMeme((!bonAngle)&&(abs(linSpeed)<0.2f));
    90c6:	697b      	ldr	r3, [r7, #20]
    90c8:	7d1b      	ldrb	r3, [r3, #20]
    90ca:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    90ce:	b2db      	uxtb	r3, r3
    90d0:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    90d4:	b2db      	uxtb	r3, r3
    90d6:	2b00      	cmp	r3, #0
    90d8:	d137      	bne.n	914a <_ZN13CommandAllerA6updateEv+0x24a>
    90da:	697b      	ldr	r3, [r7, #20]
    90dc:	699b      	ldr	r3, [r3, #24]
    90de:	4618      	mov	r0, r3
    90e0:	495c      	ldr	r1, [pc, #368]	(9254 <_ZN13CommandAllerA6updateEv+0x354>)
    90e2:	f011 fe3d 	bl	1ad60 <__aeabi_fcmpgt>
    90e6:	4603      	mov	r3, r0
    90e8:	2b00      	cmp	r3, #0
    90ea:	d015      	beq.n	9118 <_ZN13CommandAllerA6updateEv+0x218>
    90ec:	697b      	ldr	r3, [r7, #20]
    90ee:	699a      	ldr	r2, [r3, #24]
    90f0:	f04f 0300 	mov.w	r3, #0	; 0x0
    90f4:	71fb      	strb	r3, [r7, #7]
    90f6:	4610      	mov	r0, r2
    90f8:	4956      	ldr	r1, [pc, #344]	(9254 <_ZN13CommandAllerA6updateEv+0x354>)
    90fa:	f011 fe09 	bl	1ad10 <__aeabi_fcmpeq>
    90fe:	4603      	mov	r3, r0
    9100:	2b00      	cmp	r3, #0
    9102:	d102      	bne.n	910a <_ZN13CommandAllerA6updateEv+0x20a>
    9104:	f04f 0301 	mov.w	r3, #1	; 0x1
    9108:	71fb      	strb	r3, [r7, #7]
    910a:	79fb      	ldrb	r3, [r7, #7]
    910c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9110:	b2db      	uxtb	r3, r3
    9112:	2b00      	cmp	r3, #0
    9114:	d119      	bne.n	914a <_ZN13CommandAllerA6updateEv+0x24a>
    9116:	e014      	b.n	9142 <_ZN13CommandAllerA6updateEv+0x242>
    9118:	697b      	ldr	r3, [r7, #20]
    911a:	699a      	ldr	r2, [r3, #24]
    911c:	f04f 0300 	mov.w	r3, #0	; 0x0
    9120:	71bb      	strb	r3, [r7, #6]
    9122:	4610      	mov	r0, r2
    9124:	4950      	ldr	r1, [pc, #320]	(9268 <_ZN13CommandAllerA6updateEv+0x368>)
    9126:	f011 fe1b 	bl	1ad60 <__aeabi_fcmpgt>
    912a:	4603      	mov	r3, r0
    912c:	2b00      	cmp	r3, #0
    912e:	d002      	beq.n	9136 <_ZN13CommandAllerA6updateEv+0x236>
    9130:	f04f 0301 	mov.w	r3, #1	; 0x1
    9134:	71bb      	strb	r3, [r7, #6]
    9136:	79bb      	ldrb	r3, [r7, #6]
    9138:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    913c:	b2db      	uxtb	r3, r3
    913e:	2b00      	cmp	r3, #0
    9140:	d103      	bne.n	914a <_ZN13CommandAllerA6updateEv+0x24a>
    9142:	f04f 0301 	mov.w	r3, #1	; 0x1
    9146:	60bb      	str	r3, [r7, #8]
    9148:	e002      	b.n	9150 <_ZN13CommandAllerA6updateEv+0x250>
    914a:	f04f 0300 	mov.w	r3, #0	; 0x0
    914e:	60bb      	str	r3, [r7, #8]
    9150:	68b8      	ldr	r0, [r7, #8]
    9152:	f00c fac1 	bl	156d8 <_ZN11StrategieV219setTourneSurSoiMemeEb>

    if (linSpeed > 0.2f)
    9156:	697b      	ldr	r3, [r7, #20]
    9158:	699b      	ldr	r3, [r3, #24]
    915a:	4618      	mov	r0, r3
    915c:	4943      	ldr	r1, [pc, #268]	(926c <_ZN13CommandAllerA6updateEv+0x36c>)
    915e:	f011 fdff 	bl	1ad60 <__aeabi_fcmpgt>
    9162:	4603      	mov	r3, r0
    9164:	2b00      	cmp	r3, #0
    9166:	d004      	beq.n	9172 <_ZN13CommandAllerA6updateEv+0x272>
        StrategieV2::enableSharpsGroup(true);
    9168:	f04f 0001 	mov.w	r0, #1	; 0x1
    916c:	f00c fb58 	bl	15820 <_ZN11StrategieV217enableSharpsGroupEb>
    9170:	e00f      	b.n	9192 <_ZN13CommandAllerA6updateEv+0x292>
    else if (linSpeed < -0.2f)
    9172:	697b      	ldr	r3, [r7, #20]
    9174:	699b      	ldr	r3, [r3, #24]
    9176:	4618      	mov	r0, r3
    9178:	493b      	ldr	r1, [pc, #236]	(9268 <_ZN13CommandAllerA6updateEv+0x368>)
    917a:	f011 fdd3 	bl	1ad24 <__aeabi_fcmplt>
    917e:	4603      	mov	r3, r0
    9180:	2b00      	cmp	r3, #0
    9182:	d004      	beq.n	918e <_ZN13CommandAllerA6updateEv+0x28e>
        StrategieV2::enableSharpsGroup(false);
    9184:	f04f 0000 	mov.w	r0, #0	; 0x0
    9188:	f00c fb4a 	bl	15820 <_ZN11StrategieV217enableSharpsGroupEb>
    918c:	e001      	b.n	9192 <_ZN13CommandAllerA6updateEv+0x292>
    else
        StrategieV2::emptySharpsToCheck();
    918e:	f00c fa7b 	bl	15688 <_ZN11StrategieV218emptySharpsToCheckEv>

    float distanceBut = delta.getNorme();
    9192:	f107 0318 	add.w	r3, r7, #24	; 0x18
    9196:	4618      	mov	r0, r3
    9198:	f005 fb2c 	bl	e7f4 <_ZNK8Position8getNormeEv>
    919c:	4603      	mov	r3, r0
    919e:	66fb      	str	r3, [r7, #108]

    bool distanceOk = /*(distanceBut > derniereDistance) || */(distanceBut < 30.0f);
    91a0:	f04f 0300 	mov.w	r3, #0	; 0x0
    91a4:	f887 3072 	strb.w	r3, [r7, #114]
    91a8:	6ef8      	ldr	r0, [r7, #108]
    91aa:	4931      	ldr	r1, [pc, #196]	(9270 <_ZN13CommandAllerA6updateEv+0x370>)
    91ac:	f011 fdba 	bl	1ad24 <__aeabi_fcmplt>
    91b0:	4603      	mov	r3, r0
    91b2:	2b00      	cmp	r3, #0
    91b4:	d003      	beq.n	91be <_ZN13CommandAllerA6updateEv+0x2be>
    91b6:	f04f 0301 	mov.w	r3, #1	; 0x1
    91ba:	f887 3072 	strb.w	r3, [r7, #114]
    if (distanceOk)
    {
        //vitAngMax = VITESSE_ANGULAIRE_SLOW_MAX;
        //linSpeed = 0.;
    }
    if (bonAngle && precisionAngle>0.)
    91be:	697b      	ldr	r3, [r7, #20]
    91c0:	7d1b      	ldrb	r3, [r3, #20]
    91c2:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    91c6:	b2db      	uxtb	r3, r3
    91c8:	2b00      	cmp	r3, #0
    91ca:	d118      	bne.n	91fe <_ZN13CommandAllerA6updateEv+0x2fe>
    91cc:	697b      	ldr	r3, [r7, #20]
    91ce:	6ada      	ldr	r2, [r3, #44]
    91d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    91d4:	717b      	strb	r3, [r7, #5]
    91d6:	4610      	mov	r0, r2
    91d8:	491e      	ldr	r1, [pc, #120]	(9254 <_ZN13CommandAllerA6updateEv+0x354>)
    91da:	f011 fdc1 	bl	1ad60 <__aeabi_fcmpgt>
    91de:	4603      	mov	r3, r0
    91e0:	2b00      	cmp	r3, #0
    91e2:	d002      	beq.n	91ea <_ZN13CommandAllerA6updateEv+0x2ea>
    91e4:	f04f 0301 	mov.w	r3, #1	; 0x1
    91e8:	717b      	strb	r3, [r7, #5]
    91ea:	797b      	ldrb	r3, [r7, #5]
    91ec:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    91f0:	b2db      	uxtb	r3, r3
    91f2:	2b00      	cmp	r3, #0
    91f4:	d103      	bne.n	91fe <_ZN13CommandAllerA6updateEv+0x2fe>
    {
        angSpeed = 0.;
    91f6:	697a      	ldr	r2, [r7, #20]
    91f8:	4b16      	ldr	r3, [pc, #88]	(9254 <_ZN13CommandAllerA6updateEv+0x354>)
    91fa:	61d3      	str	r3, [r2, #28]
    91fc:	e126      	b.n	944c <_ZN13CommandAllerA6updateEv+0x54c>
    }
    else if (abs(diffAng) > angleVitesseMax)
    91fe:	6e78      	ldr	r0, [r7, #100]
    9200:	4914      	ldr	r1, [pc, #80]	(9254 <_ZN13CommandAllerA6updateEv+0x354>)
    9202:	f011 fdad 	bl	1ad60 <__aeabi_fcmpgt>
    9206:	4603      	mov	r3, r0
    9208:	2b00      	cmp	r3, #0
    920a:	d033      	beq.n	9274 <_ZN13CommandAllerA6updateEv+0x374>
    920c:	f04f 0300 	mov.w	r3, #0	; 0x0
    9210:	713b      	strb	r3, [r7, #4]
    9212:	6e78      	ldr	r0, [r7, #100]
    9214:	490f      	ldr	r1, [pc, #60]	(9254 <_ZN13CommandAllerA6updateEv+0x354>)
    9216:	f011 fd7b 	bl	1ad10 <__aeabi_fcmpeq>
    921a:	4603      	mov	r3, r0
    921c:	2b00      	cmp	r3, #0
    921e:	d102      	bne.n	9226 <_ZN13CommandAllerA6updateEv+0x326>
    9220:	f04f 0301 	mov.w	r3, #1	; 0x1
    9224:	713b      	strb	r3, [r7, #4]
    9226:	793b      	ldrb	r3, [r7, #4]
    9228:	60fb      	str	r3, [r7, #12]
    922a:	e035      	b.n	9298 <_ZN13CommandAllerA6updateEv+0x398>
    922c:	46c0      	nop			(mov r8, r8)
    922e:	46c0      	nop			(mov r8, r8)
    9230:	54442d18 	.word	0x54442d18
    9234:	400921fb 	.word	0x400921fb
    9238:	3983126f 	.word	0x3983126f
    923c:	3cf5c28f 	.word	0x3cf5c28f
    9240:	3ccccccd 	.word	0x3ccccccd
    9244:	3ca3d70a 	.word	0x3ca3d70a
    9248:	40400000 	.word	0x40400000
    924c:	3f000000 	.word	0x3f000000
    9250:	20000570 	.word	0x20000570
    9254:	00000000 	.word	0x00000000
    9258:	3e00adfd 	.word	0x3e00adfd
    925c:	3d567750 	.word	0x3d567750
    9260:	49742400 	.word	0x49742400
    9264:	3f733333 	.word	0x3f733333
    9268:	be4ccccd 	.word	0xbe4ccccd
    926c:	3e4ccccd 	.word	0x3e4ccccd
    9270:	41f00000 	.word	0x41f00000
    9274:	6e7b      	ldr	r3, [r7, #100]
    9276:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    927a:	f04f 0300 	mov.w	r3, #0	; 0x0
    927e:	70fb      	strb	r3, [r7, #3]
    9280:	4610      	mov	r0, r2
    9282:	6d79      	ldr	r1, [r7, #84]
    9284:	f011 fd6c 	bl	1ad60 <__aeabi_fcmpgt>
    9288:	4603      	mov	r3, r0
    928a:	2b00      	cmp	r3, #0
    928c:	d002      	beq.n	9294 <_ZN13CommandAllerA6updateEv+0x394>
    928e:	f04f 0301 	mov.w	r3, #1	; 0x1
    9292:	70fb      	strb	r3, [r7, #3]
    9294:	78fb      	ldrb	r3, [r7, #3]
    9296:	60fb      	str	r3, [r7, #12]
    9298:	68fb      	ldr	r3, [r7, #12]
    929a:	2b00      	cmp	r3, #0
    929c:	f000 80c9 	beq.w	9432 <_ZN13CommandAllerA6updateEv+0x532>
    {
        bool hasToDecelerate = /*(!distanceOk) && */(fabs(diffAng) < (angSpeed * angSpeed / accAngMax - accAngMax*2.));
    92a0:	6e7b      	ldr	r3, [r7, #100]
    92a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    92a6:	4618      	mov	r0, r3
    92a8:	f010 ff2e 	bl	1a108 <__aeabi_f2d>
    92ac:	4680      	mov	r8, r0
    92ae:	4689      	mov	r9, r1
    92b0:	697b      	ldr	r3, [r7, #20]
    92b2:	69da      	ldr	r2, [r3, #28]
    92b4:	697b      	ldr	r3, [r7, #20]
    92b6:	69db      	ldr	r3, [r3, #28]
    92b8:	4610      	mov	r0, r2
    92ba:	4619      	mov	r1, r3
    92bc:	f011 fb96 	bl	1a9ec <__aeabi_fmul>
    92c0:	4603      	mov	r3, r0
    92c2:	4618      	mov	r0, r3
    92c4:	6c39      	ldr	r1, [r7, #64]
    92c6:	f011 fc45 	bl	1ab54 <__aeabi_fdiv>
    92ca:	4603      	mov	r3, r0
    92cc:	4618      	mov	r0, r3
    92ce:	f010 ff1b 	bl	1a108 <__aeabi_f2d>
    92d2:	4604      	mov	r4, r0
    92d4:	460d      	mov	r5, r1
    92d6:	6c38      	ldr	r0, [r7, #64]
    92d8:	f010 ff16 	bl	1a108 <__aeabi_f2d>
    92dc:	4602      	mov	r2, r0
    92de:	460b      	mov	r3, r1
    92e0:	4610      	mov	r0, r2
    92e2:	4619      	mov	r1, r3
    92e4:	f04f 0200 	mov.w	r2, #0	; 0x0
    92e8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    92ec:	f010 ff60 	bl	1a1b0 <__aeabi_dmul>
    92f0:	4602      	mov	r2, r0
    92f2:	460b      	mov	r3, r1
    92f4:	4620      	mov	r0, r4
    92f6:	4629      	mov	r1, r5
    92f8:	f010 fda8 	bl	19e4c <__adddf3>
    92fc:	4602      	mov	r2, r0
    92fe:	460b      	mov	r3, r1
    9300:	4614      	mov	r4, r2
    9302:	461d      	mov	r5, r3
    9304:	f04f 0300 	mov.w	r3, #0	; 0x0
    9308:	f887 3073 	strb.w	r3, [r7, #115]
    930c:	4640      	mov	r0, r8
    930e:	4649      	mov	r1, r9
    9310:	4622      	mov	r2, r4
    9312:	462b      	mov	r3, r5
    9314:	f011 f9bc 	bl	1a690 <__aeabi_dcmplt>
    9318:	4603      	mov	r3, r0
    931a:	2b00      	cmp	r3, #0
    931c:	d003      	beq.n	9326 <_ZN13CommandAllerA6updateEv+0x426>
    931e:	f04f 0301 	mov.w	r3, #1	; 0x1
    9322:	f887 3073 	strb.w	r3, [r7, #115]
        if (diffAng > 0)
    9326:	6e78      	ldr	r0, [r7, #100]
    9328:	49cf      	ldr	r1, [pc, #828]	(9668 <_ZN13CommandAllerA6updateEv+0x768>)
    932a:	f011 fd19 	bl	1ad60 <__aeabi_fcmpgt>
    932e:	4603      	mov	r3, r0
    9330:	2b00      	cmp	r3, #0
    9332:	d03c      	beq.n	93ae <_ZN13CommandAllerA6updateEv+0x4ae>
        {
            if (!hasToDecelerate)
    9334:	f897 3073 	ldrb.w	r3, [r7, #115]
    9338:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    933c:	b2db      	uxtb	r3, r3
    933e:	2b00      	cmp	r3, #0
    9340:	d00a      	beq.n	9358 <_ZN13CommandAllerA6updateEv+0x458>
                angSpeed += accAngMax;
    9342:	697b      	ldr	r3, [r7, #20]
    9344:	69db      	ldr	r3, [r3, #28]
    9346:	4618      	mov	r0, r3
    9348:	6c39      	ldr	r1, [r7, #64]
    934a:	f011 fa47 	bl	1a7dc <__addsf3>
    934e:	4603      	mov	r3, r0
    9350:	461a      	mov	r2, r3
    9352:	697b      	ldr	r3, [r7, #20]
    9354:	61da      	str	r2, [r3, #28]
    9356:	e01d      	b.n	9394 <_ZN13CommandAllerA6updateEv+0x494>
            else if (angSpeed > accAngMax*2)
    9358:	697b      	ldr	r3, [r7, #20]
    935a:	69dc      	ldr	r4, [r3, #28]
    935c:	6c3b      	ldr	r3, [r7, #64]
    935e:	4618      	mov	r0, r3
    9360:	4619      	mov	r1, r3
    9362:	f011 fa3b 	bl	1a7dc <__addsf3>
    9366:	4603      	mov	r3, r0
    9368:	4620      	mov	r0, r4
    936a:	4619      	mov	r1, r3
    936c:	f011 fcf8 	bl	1ad60 <__aeabi_fcmpgt>
    9370:	4603      	mov	r3, r0
    9372:	2b00      	cmp	r3, #0
    9374:	d00e      	beq.n	9394 <_ZN13CommandAllerA6updateEv+0x494>
                angSpeed -= accAngMax*2;
    9376:	697b      	ldr	r3, [r7, #20]
    9378:	69dc      	ldr	r4, [r3, #28]
    937a:	6c38      	ldr	r0, [r7, #64]
    937c:	49bb      	ldr	r1, [pc, #748]	(966c <_ZN13CommandAllerA6updateEv+0x76c>)
    937e:	f011 fb35 	bl	1a9ec <__aeabi_fmul>
    9382:	4603      	mov	r3, r0
    9384:	4620      	mov	r0, r4
    9386:	4619      	mov	r1, r3
    9388:	f011 fa28 	bl	1a7dc <__addsf3>
    938c:	4603      	mov	r3, r0
    938e:	461a      	mov	r2, r3
    9390:	697b      	ldr	r3, [r7, #20]
    9392:	61da      	str	r2, [r3, #28]

            if (angSpeed > vitAngMax)
    9394:	697b      	ldr	r3, [r7, #20]
    9396:	69db      	ldr	r3, [r3, #28]
    9398:	4618      	mov	r0, r3
    939a:	6c79      	ldr	r1, [r7, #68]
    939c:	f011 fce0 	bl	1ad60 <__aeabi_fcmpgt>
    93a0:	4603      	mov	r3, r0
    93a2:	2b00      	cmp	r3, #0
    93a4:	d052      	beq.n	944c <_ZN13CommandAllerA6updateEv+0x54c>
                angSpeed = vitAngMax;
    93a6:	697a      	ldr	r2, [r7, #20]
    93a8:	6c7b      	ldr	r3, [r7, #68]
    93aa:	61d3      	str	r3, [r2, #28]
    93ac:	e04e      	b.n	944c <_ZN13CommandAllerA6updateEv+0x54c>
        }
        else
        {
            if (!hasToDecelerate)
    93ae:	f897 3073 	ldrb.w	r3, [r7, #115]
    93b2:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    93b6:	b2db      	uxtb	r3, r3
    93b8:	2b00      	cmp	r3, #0
    93ba:	d00a      	beq.n	93d2 <_ZN13CommandAllerA6updateEv+0x4d2>
                angSpeed -= accAngMax;
    93bc:	697b      	ldr	r3, [r7, #20]
    93be:	69db      	ldr	r3, [r3, #28]
    93c0:	4618      	mov	r0, r3
    93c2:	6c39      	ldr	r1, [r7, #64]
    93c4:	f011 fa08 	bl	1a7d8 <__aeabi_fsub>
    93c8:	4603      	mov	r3, r0
    93ca:	461a      	mov	r2, r3
    93cc:	697b      	ldr	r3, [r7, #20]
    93ce:	61da      	str	r2, [r3, #28]
    93d0:	e01d      	b.n	940e <_ZN13CommandAllerA6updateEv+0x50e>
            else if (angSpeed < -accAngMax*2)
    93d2:	697b      	ldr	r3, [r7, #20]
    93d4:	69dc      	ldr	r4, [r3, #28]
    93d6:	6c38      	ldr	r0, [r7, #64]
    93d8:	49a4      	ldr	r1, [pc, #656]	(966c <_ZN13CommandAllerA6updateEv+0x76c>)
    93da:	f011 fb07 	bl	1a9ec <__aeabi_fmul>
    93de:	4603      	mov	r3, r0
    93e0:	4620      	mov	r0, r4
    93e2:	4619      	mov	r1, r3
    93e4:	f011 fc9e 	bl	1ad24 <__aeabi_fcmplt>
    93e8:	4603      	mov	r3, r0
    93ea:	2b00      	cmp	r3, #0
    93ec:	d00f      	beq.n	940e <_ZN13CommandAllerA6updateEv+0x50e>
                angSpeed += accAngMax*2;
    93ee:	697b      	ldr	r3, [r7, #20]
    93f0:	69dc      	ldr	r4, [r3, #28]
    93f2:	6c3b      	ldr	r3, [r7, #64]
    93f4:	4618      	mov	r0, r3
    93f6:	4619      	mov	r1, r3
    93f8:	f011 f9f0 	bl	1a7dc <__addsf3>
    93fc:	4603      	mov	r3, r0
    93fe:	4620      	mov	r0, r4
    9400:	4619      	mov	r1, r3
    9402:	f011 f9eb 	bl	1a7dc <__addsf3>
    9406:	4603      	mov	r3, r0
    9408:	461a      	mov	r2, r3
    940a:	697b      	ldr	r3, [r7, #20]
    940c:	61da      	str	r2, [r3, #28]

            if (angSpeed < -vitAngMax)
    940e:	697b      	ldr	r3, [r7, #20]
    9410:	69da      	ldr	r2, [r3, #28]
    9412:	6c7b      	ldr	r3, [r7, #68]
    9414:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    9418:	4610      	mov	r0, r2
    941a:	4619      	mov	r1, r3
    941c:	f011 fc82 	bl	1ad24 <__aeabi_fcmplt>
    9420:	4603      	mov	r3, r0
    9422:	2b00      	cmp	r3, #0
    9424:	d012      	beq.n	944c <_ZN13CommandAllerA6updateEv+0x54c>
                angSpeed = -vitAngMax;
    9426:	6c7b      	ldr	r3, [r7, #68]
    9428:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    942c:	697b      	ldr	r3, [r7, #20]
    942e:	61da      	str	r2, [r3, #28]
    9430:	e00c      	b.n	944c <_ZN13CommandAllerA6updateEv+0x54c>
        }

    }
    else
    {
        angSpeed = diffAng*vitAngMax/angleVitesseMax;
    9432:	6e78      	ldr	r0, [r7, #100]
    9434:	6c79      	ldr	r1, [r7, #68]
    9436:	f011 fad9 	bl	1a9ec <__aeabi_fmul>
    943a:	4603      	mov	r3, r0
    943c:	4618      	mov	r0, r3
    943e:	6d79      	ldr	r1, [r7, #84]
    9440:	f011 fb88 	bl	1ab54 <__aeabi_fdiv>
    9444:	4603      	mov	r3, r0
    9446:	461a      	mov	r2, r3
    9448:	697b      	ldr	r3, [r7, #20]
    944a:	61da      	str	r2, [r3, #28]
    {
        angSpeed = diffAng*vitAngMax/angleVitesseMax;
    }*/

    // vitesse linéaire
    if (distanceBut > derniereDistance || distanceBut < 10.0f)
    944c:	697b      	ldr	r3, [r7, #20]
    944e:	6a5b      	ldr	r3, [r3, #36]
    9450:	4618      	mov	r0, r3
    9452:	6ef9      	ldr	r1, [r7, #108]
    9454:	f011 fc66 	bl	1ad24 <__aeabi_fcmplt>
    9458:	4603      	mov	r3, r0
    945a:	2b00      	cmp	r3, #0
    945c:	d106      	bne.n	946c <_ZN13CommandAllerA6updateEv+0x56c>
    945e:	6ef8      	ldr	r0, [r7, #108]
    9460:	4983      	ldr	r1, [pc, #524]	(9670 <_ZN13CommandAllerA6updateEv+0x770>)
    9462:	f011 fc5f 	bl	1ad24 <__aeabi_fcmplt>
    9466:	4603      	mov	r3, r0
    9468:	2b00      	cmp	r3, #0
    946a:	d004      	beq.n	9476 <_ZN13CommandAllerA6updateEv+0x576>
    {
        m_fini = true;
    946c:	697b      	ldr	r3, [r7, #20]
    946e:	f04f 0201 	mov.w	r2, #1	; 0x1
    9472:	f883 2028 	strb.w	r2, [r3, #40]
    }

    if (bonAngle)
    9476:	697b      	ldr	r3, [r7, #20]
    9478:	7d1b      	ldrb	r3, [r3, #20]
    947a:	2b00      	cmp	r3, #0
    947c:	f000 80ee 	beq.w	965c <_ZN13CommandAllerA6updateEv+0x75c>
    {

        if (fabs(diffAng) > angleMaxPourAvancer)
    9480:	6e7b      	ldr	r3, [r7, #100]
    9482:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9486:	4618      	mov	r0, r3
    9488:	6eb9      	ldr	r1, [r7, #104]
    948a:	f011 fc69 	bl	1ad60 <__aeabi_fcmpgt>
    948e:	4603      	mov	r3, r0
    9490:	2b00      	cmp	r3, #0
    9492:	d00a      	beq.n	94aa <_ZN13CommandAllerA6updateEv+0x5aa>
        {
            linSpeed *= 0.97f;
    9494:	697b      	ldr	r3, [r7, #20]
    9496:	699b      	ldr	r3, [r3, #24]
    9498:	4618      	mov	r0, r3
    949a:	4976      	ldr	r1, [pc, #472]	(9674 <_ZN13CommandAllerA6updateEv+0x774>)
    949c:	f011 faa6 	bl	1a9ec <__aeabi_fmul>
    94a0:	4603      	mov	r3, r0
    94a2:	461a      	mov	r2, r3
    94a4:	697b      	ldr	r3, [r7, #20]
    94a6:	619a      	str	r2, [r3, #24]
    94a8:	e0d8      	b.n	965c <_ZN13CommandAllerA6updateEv+0x75c>
        }
        else if (distanceBut > distanceVitesseMax)
    94aa:	6ef8      	ldr	r0, [r7, #108]
    94ac:	6db9      	ldr	r1, [r7, #88]
    94ae:	f011 fc57 	bl	1ad60 <__aeabi_fcmpgt>
    94b2:	4603      	mov	r3, r0
    94b4:	2b00      	cmp	r3, #0
    94b6:	d039      	beq.n	952c <_ZN13CommandAllerA6updateEv+0x62c>
        {
             if (m_reculer)
    94b8:	697b      	ldr	r3, [r7, #20]
    94ba:	f893 3020 	ldrb.w	r3, [r3, #32]
    94be:	2b00      	cmp	r3, #0
    94c0:	d00a      	beq.n	94d8 <_ZN13CommandAllerA6updateEv+0x5d8>
                linSpeed -= accLinMax;
    94c2:	697b      	ldr	r3, [r7, #20]
    94c4:	699b      	ldr	r3, [r3, #24]
    94c6:	4618      	mov	r0, r3
    94c8:	6cb9      	ldr	r1, [r7, #72]
    94ca:	f011 f985 	bl	1a7d8 <__aeabi_fsub>
    94ce:	4603      	mov	r3, r0
    94d0:	461a      	mov	r2, r3
    94d2:	697b      	ldr	r3, [r7, #20]
    94d4:	619a      	str	r2, [r3, #24]
    94d6:	e009      	b.n	94ec <_ZN13CommandAllerA6updateEv+0x5ec>
             else
                linSpeed += accLinMax;
    94d8:	697b      	ldr	r3, [r7, #20]
    94da:	699b      	ldr	r3, [r3, #24]
    94dc:	4618      	mov	r0, r3
    94de:	6cb9      	ldr	r1, [r7, #72]
    94e0:	f011 f97c 	bl	1a7dc <__addsf3>
    94e4:	4603      	mov	r3, r0
    94e6:	461a      	mov	r2, r3
    94e8:	697b      	ldr	r3, [r7, #20]
    94ea:	619a      	str	r2, [r3, #24]

            if (linSpeed > vitLinMax)
    94ec:	697b      	ldr	r3, [r7, #20]
    94ee:	699b      	ldr	r3, [r3, #24]
    94f0:	4618      	mov	r0, r3
    94f2:	6d39      	ldr	r1, [r7, #80]
    94f4:	f011 fc34 	bl	1ad60 <__aeabi_fcmpgt>
    94f8:	4603      	mov	r3, r0
    94fa:	2b00      	cmp	r3, #0
    94fc:	d003      	beq.n	9506 <_ZN13CommandAllerA6updateEv+0x606>
                linSpeed = vitLinMax;
    94fe:	697a      	ldr	r2, [r7, #20]
    9500:	6d3b      	ldr	r3, [r7, #80]
    9502:	6193      	str	r3, [r2, #24]
    9504:	e0aa      	b.n	965c <_ZN13CommandAllerA6updateEv+0x75c>
            else if (linSpeed < -vitLinMax)
    9506:	697b      	ldr	r3, [r7, #20]
    9508:	699a      	ldr	r2, [r3, #24]
    950a:	6d3b      	ldr	r3, [r7, #80]
    950c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    9510:	4610      	mov	r0, r2
    9512:	4619      	mov	r1, r3
    9514:	f011 fc06 	bl	1ad24 <__aeabi_fcmplt>
    9518:	4603      	mov	r3, r0
    951a:	2b00      	cmp	r3, #0
    951c:	f000 809e 	beq.w	965c <_ZN13CommandAllerA6updateEv+0x75c>
                linSpeed = -vitLinMax;
    9520:	6d3b      	ldr	r3, [r7, #80]
    9522:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    9526:	697b      	ldr	r3, [r7, #20]
    9528:	619a      	str	r2, [r3, #24]
    952a:	e097      	b.n	965c <_ZN13CommandAllerA6updateEv+0x75c>
        }
        else
        {
            float linSpeedVisee;
            if (m_reculer)
    952c:	697b      	ldr	r3, [r7, #20]
    952e:	f893 3020 	ldrb.w	r3, [r3, #32]
    9532:	2b00      	cmp	r3, #0
    9534:	d025      	beq.n	9582 <_ZN13CommandAllerA6updateEv+0x682>
                linSpeedVisee = -sqrt(vFin2+2.0f*distanceBut*decLinMax);
    9536:	697b      	ldr	r3, [r7, #20]
    9538:	691c      	ldr	r4, [r3, #16]
    953a:	6efb      	ldr	r3, [r7, #108]
    953c:	4618      	mov	r0, r3
    953e:	4619      	mov	r1, r3
    9540:	f011 f94c 	bl	1a7dc <__addsf3>
    9544:	4603      	mov	r3, r0
    9546:	4618      	mov	r0, r3
    9548:	6cf9      	ldr	r1, [r7, #76]
    954a:	f011 fa4f 	bl	1a9ec <__aeabi_fmul>
    954e:	4603      	mov	r3, r0
    9550:	4620      	mov	r0, r4
    9552:	4619      	mov	r1, r3
    9554:	f011 f942 	bl	1a7dc <__addsf3>
    9558:	4603      	mov	r3, r0
    955a:	4618      	mov	r0, r3
    955c:	f010 fdd4 	bl	1a108 <__aeabi_f2d>
    9560:	4602      	mov	r2, r0
    9562:	460b      	mov	r3, r1
    9564:	4610      	mov	r0, r2
    9566:	4619      	mov	r1, r3
    9568:	f014 ff0a 	bl	1e380 <sqrt>
    956c:	4602      	mov	r2, r0
    956e:	460b      	mov	r3, r1
    9570:	4610      	mov	r0, r2
    9572:	4619      	mov	r1, r3
    9574:	f011 f8dc 	bl	1a730 <__aeabi_d2f>
    9578:	4603      	mov	r3, r0
    957a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    957e:	677b      	str	r3, [r7, #116]
    9580:	e022      	b.n	95c8 <_ZN13CommandAllerA6updateEv+0x6c8>
            else
                linSpeedVisee = sqrt(vFin2+2.0f*distanceBut*decLinMax);
    9582:	697b      	ldr	r3, [r7, #20]
    9584:	691c      	ldr	r4, [r3, #16]
    9586:	6efb      	ldr	r3, [r7, #108]
    9588:	4618      	mov	r0, r3
    958a:	4619      	mov	r1, r3
    958c:	f011 f926 	bl	1a7dc <__addsf3>
    9590:	4603      	mov	r3, r0
    9592:	4618      	mov	r0, r3
    9594:	6cf9      	ldr	r1, [r7, #76]
    9596:	f011 fa29 	bl	1a9ec <__aeabi_fmul>
    959a:	4603      	mov	r3, r0
    959c:	4620      	mov	r0, r4
    959e:	4619      	mov	r1, r3
    95a0:	f011 f91c 	bl	1a7dc <__addsf3>
    95a4:	4603      	mov	r3, r0
    95a6:	4618      	mov	r0, r3
    95a8:	f010 fdae 	bl	1a108 <__aeabi_f2d>
    95ac:	4602      	mov	r2, r0
    95ae:	460b      	mov	r3, r1
    95b0:	4610      	mov	r0, r2
    95b2:	4619      	mov	r1, r3
    95b4:	f014 fee4 	bl	1e380 <sqrt>
    95b8:	4602      	mov	r2, r0
    95ba:	460b      	mov	r3, r1
    95bc:	4610      	mov	r0, r2
    95be:	4619      	mov	r1, r3
    95c0:	f011 f8b6 	bl	1a730 <__aeabi_d2f>
    95c4:	4603      	mov	r3, r0
    95c6:	677b      	str	r3, [r7, #116]

             if (m_reculer)
    95c8:	697b      	ldr	r3, [r7, #20]
    95ca:	f893 3020 	ldrb.w	r3, [r3, #32]
    95ce:	2b00      	cmp	r3, #0
    95d0:	d00a      	beq.n	95e8 <_ZN13CommandAllerA6updateEv+0x6e8>
                linSpeed -= accLinMax;
    95d2:	697b      	ldr	r3, [r7, #20]
    95d4:	699b      	ldr	r3, [r3, #24]
    95d6:	4618      	mov	r0, r3
    95d8:	6cb9      	ldr	r1, [r7, #72]
    95da:	f011 f8fd 	bl	1a7d8 <__aeabi_fsub>
    95de:	4603      	mov	r3, r0
    95e0:	461a      	mov	r2, r3
    95e2:	697b      	ldr	r3, [r7, #20]
    95e4:	619a      	str	r2, [r3, #24]
    95e6:	e009      	b.n	95fc <_ZN13CommandAllerA6updateEv+0x6fc>
             else
                linSpeed += accLinMax;
    95e8:	697b      	ldr	r3, [r7, #20]
    95ea:	699b      	ldr	r3, [r3, #24]
    95ec:	4618      	mov	r0, r3
    95ee:	6cb9      	ldr	r1, [r7, #72]
    95f0:	f011 f8f4 	bl	1a7dc <__addsf3>
    95f4:	4603      	mov	r3, r0
    95f6:	461a      	mov	r2, r3
    95f8:	697b      	ldr	r3, [r7, #20]
    95fa:	619a      	str	r2, [r3, #24]

            if (abs(linSpeed) > abs(linSpeedVisee))
    95fc:	697b      	ldr	r3, [r7, #20]
    95fe:	699b      	ldr	r3, [r3, #24]
    9600:	4618      	mov	r0, r3
    9602:	4919      	ldr	r1, [pc, #100]	(9668 <_ZN13CommandAllerA6updateEv+0x768>)
    9604:	f011 fbac 	bl	1ad60 <__aeabi_fcmpgt>
    9608:	4603      	mov	r3, r0
    960a:	2b00      	cmp	r3, #0
    960c:	d011      	beq.n	9632 <_ZN13CommandAllerA6updateEv+0x732>
    960e:	697b      	ldr	r3, [r7, #20]
    9610:	699a      	ldr	r2, [r3, #24]
    9612:	f04f 0300 	mov.w	r3, #0	; 0x0
    9616:	70bb      	strb	r3, [r7, #2]
    9618:	4610      	mov	r0, r2
    961a:	4913      	ldr	r1, [pc, #76]	(9668 <_ZN13CommandAllerA6updateEv+0x768>)
    961c:	f011 fb78 	bl	1ad10 <__aeabi_fcmpeq>
    9620:	4603      	mov	r3, r0
    9622:	2b00      	cmp	r3, #0
    9624:	d102      	bne.n	962c <_ZN13CommandAllerA6updateEv+0x72c>
    9626:	f04f 0301 	mov.w	r3, #1	; 0x1
    962a:	70bb      	strb	r3, [r7, #2]
    962c:	78bb      	ldrb	r3, [r7, #2]
    962e:	613b      	str	r3, [r7, #16]
    9630:	e00e      	b.n	9650 <_ZN13CommandAllerA6updateEv+0x750>
    9632:	f04f 0300 	mov.w	r3, #0	; 0x0
    9636:	707b      	strb	r3, [r7, #1]
    9638:	6f78      	ldr	r0, [r7, #116]
    963a:	490b      	ldr	r1, [pc, #44]	(9668 <_ZN13CommandAllerA6updateEv+0x768>)
    963c:	f011 fb68 	bl	1ad10 <__aeabi_fcmpeq>
    9640:	4603      	mov	r3, r0
    9642:	2b00      	cmp	r3, #0
    9644:	d102      	bne.n	964c <_ZN13CommandAllerA6updateEv+0x74c>
    9646:	f04f 0301 	mov.w	r3, #1	; 0x1
    964a:	707b      	strb	r3, [r7, #1]
    964c:	787b      	ldrb	r3, [r7, #1]
    964e:	613b      	str	r3, [r7, #16]
    9650:	693b      	ldr	r3, [r7, #16]
    9652:	2b00      	cmp	r3, #0
    9654:	d002      	beq.n	965c <_ZN13CommandAllerA6updateEv+0x75c>
                linSpeed = linSpeedVisee;
    9656:	697a      	ldr	r2, [r7, #20]
    9658:	6f7b      	ldr	r3, [r7, #116]
    965a:	6193      	str	r3, [r2, #24]
        }
    }
}
    965c:	f107 0778 	add.w	r7, r7, #120	; 0x78
    9660:	46bd      	mov	sp, r7
    9662:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    9666:	46c0      	nop			(mov r8, r8)
    9668:	00000000 	.word	0x00000000
    966c:	c0000000 	.word	0xc0000000
    9670:	41200000 	.word	0x41200000
    9674:	3f7851ec 	.word	0x3f7851ec

00009678 <_ZN18CommandAllerEnArcA6updateEv>:
        cote = SGN_POS;
    else
        cote = SGN_NEG;
}

void CommandAllerEnArcA::update()
    9678:	b580      	push	{r7, lr}
    967a:	b094      	sub	sp, #80
    967c:	af00      	add	r7, sp, #0
    967e:	6078      	str	r0, [r7, #4]
{
    float accAngMax = ACCELERATION_ANGULAIRE_MAX;
    9680:	4b20      	ldr	r3, [pc, #128]	(9704 <_ZN18CommandAllerEnArcA6updateEv+0x8c>)
    9682:	637b      	str	r3, [r7, #52]
    float vitAngMax = VITESSE_ANGULAIRE_MAX;
    9684:	4b20      	ldr	r3, [pc, #128]	(9708 <_ZN18CommandAllerEnArcA6updateEv+0x90>)
    9686:	63bb      	str	r3, [r7, #56]
    float accLinMax = ACCELERATION_LINEAIRE_MAX;
    9688:	4b20      	ldr	r3, [pc, #128]	(970c <_ZN18CommandAllerEnArcA6updateEv+0x94>)
    968a:	63fb      	str	r3, [r7, #60]
    float decLinMax = DECELERATION_LINEAIRE_MAX;
    968c:	4b20      	ldr	r3, [pc, #128]	(9710 <_ZN18CommandAllerEnArcA6updateEv+0x98>)
    968e:	643b      	str	r3, [r7, #64]
    float vitLinMax = vMax;//VITESSE_LINEAIRE_MAX;
    9690:	687b      	ldr	r3, [r7, #4]
    9692:	68db      	ldr	r3, [r3, #12]
    9694:	647b      	str	r3, [r7, #68]

    float angle = Odometrie::odometrie->getPos().getAngle();
    9696:	4b1f      	ldr	r3, [pc, #124]	(9714 <_ZN18CommandAllerEnArcA6updateEv+0x9c>)
    9698:	681a      	ldr	r2, [r3, #0]
    969a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    969e:	4618      	mov	r0, r3
    96a0:	4611      	mov	r1, r2
    96a2:	f000 f85d 	bl	9760 <_ZNK9Odometrie6getPosEv>
    96a6:	f107 0314 	add.w	r3, r7, #20	; 0x14
    96aa:	4618      	mov	r0, r3
    96ac:	f005 f974 	bl	e998 <_ZNK17PositionPlusAngle8getAngleEv>
    96b0:	4603      	mov	r3, r0
    96b2:	64bb      	str	r3, [r7, #72]
    Position pos = Odometrie::odometrie->getPos().getPosition();
    96b4:	4b17      	ldr	r3, [pc, #92]	(9714 <_ZN18CommandAllerEnArcA6updateEv+0x9c>)
    96b6:	681a      	ldr	r2, [r3, #0]
    96b8:	f107 0320 	add.w	r3, r7, #32	; 0x20
    96bc:	4618      	mov	r0, r3
    96be:	4611      	mov	r1, r2
    96c0:	f000 f84e 	bl	9760 <_ZNK9Odometrie6getPosEv>
    96c4:	f107 030c 	add.w	r3, r7, #12	; 0xc
    96c8:	f107 0220 	add.w	r2, r7, #32	; 0x20
    96cc:	4618      	mov	r0, r3
    96ce:	4611      	mov	r1, r2
    96d0:	f005 f950 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>

    float rayon = (centre-but).getNorme();
    96d4:	687b      	ldr	r3, [r7, #4]
    96d6:	f103 0220 	add.w	r2, r3, #32	; 0x20
    96da:	687b      	ldr	r3, [r7, #4]
    96dc:	f103 0c04 	add.w	ip, r3, #4	; 0x4
    96e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    96e4:	4618      	mov	r0, r3
    96e6:	4611      	mov	r1, r2
    96e8:	4662      	mov	r2, ip
    96ea:	f004 ff75 	bl	e5d8 <_ZNK8PositionmiERKS_>
    96ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    96f2:	4618      	mov	r0, r3
    96f4:	f005 f87e 	bl	e7f4 <_ZNK8Position8getNormeEv>
    96f8:	4603      	mov	r3, r0
    96fa:	64fb      	str	r3, [r7, #76]
        angSpeed = linSpeed/rVise;
    else if (abs(linSpeed) > abs(rVise*angSpeed))
        linSpeed = rVise*angSpeed;*/


}
    96fc:	f107 0750 	add.w	r7, r7, #80	; 0x50
    9700:	46bd      	mov	sp, r7
    9702:	bd80      	pop	{r7, pc}
    9704:	3983126f 	.word	0x3983126f
    9708:	3cf5c28f 	.word	0x3cf5c28f
    970c:	3ccccccd 	.word	0x3ccccccd
    9710:	3ca3d70a 	.word	0x3ca3d70a
    9714:	20000570 	.word	0x20000570

00009718 <_ZNK9Odometrie19getVitesseAngulaireEv>:
PositionPlusAngle Odometrie::getPos() const
{
    return positionPlusAngle;
}

Angle Odometrie::getVitesseAngulaire() const
    9718:	b480      	push	{r7}
    971a:	b083      	sub	sp, #12
    971c:	af00      	add	r7, sp, #0
    971e:	6078      	str	r0, [r7, #4]
{
    return vitesseAngulaire;
    9720:	687b      	ldr	r3, [r7, #4]
    9722:	699b      	ldr	r3, [r3, #24]
}
    9724:	4618      	mov	r0, r3
    9726:	f107 070c 	add.w	r7, r7, #12	; 0xc
    972a:	46bd      	mov	sp, r7
    972c:	bc80      	pop	{r7}
    972e:	4770      	bx	lr

00009730 <_ZNK9Odometrie18getVitesseLineaireEv>:

Distance Odometrie::getVitesseLineaire() const
    9730:	b480      	push	{r7}
    9732:	b083      	sub	sp, #12
    9734:	af00      	add	r7, sp, #0
    9736:	6078      	str	r0, [r7, #4]
{
    return vitesseLineaire;
    9738:	687b      	ldr	r3, [r7, #4]
    973a:	695b      	ldr	r3, [r3, #20]
}
    973c:	4618      	mov	r0, r3
    973e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    9742:	46bd      	mov	sp, r7
    9744:	bc80      	pop	{r7}
    9746:	4770      	bx	lr

00009748 <_ZNK9Odometrie16getAbsoluteAngleEv>:

Angle Odometrie::getAbsoluteAngle() const
    9748:	b480      	push	{r7}
    974a:	b083      	sub	sp, #12
    974c:	af00      	add	r7, sp, #0
    974e:	6078      	str	r0, [r7, #4]
{
    return absAngle;
    9750:	687b      	ldr	r3, [r7, #4]
    9752:	6f1b      	ldr	r3, [r3, #112]
}
    9754:	4618      	mov	r0, r3
    9756:	f107 070c 	add.w	r7, r7, #12	; 0xc
    975a:	46bd      	mov	sp, r7
    975c:	bc80      	pop	{r7}
    975e:	4770      	bx	lr

00009760 <_ZNK9Odometrie6getPosEv>:
    posY = p.getPosition().getY();
    ang = p.getAngle();
    positionPlusAngle = p;
}

PositionPlusAngle Odometrie::getPos() const
    9760:	b590      	push	{r4, r7, lr}
    9762:	b083      	sub	sp, #12
    9764:	af00      	add	r7, sp, #0
    9766:	4604      	mov	r4, r0
    9768:	6079      	str	r1, [r7, #4]
{
    return positionPlusAngle;
    976a:	4622      	mov	r2, r4
    976c:	687b      	ldr	r3, [r7, #4]
    976e:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9772:	4610      	mov	r0, r2
    9774:	4619      	mov	r1, r3
    9776:	f005 f8e5 	bl	e944 <_ZN17PositionPlusAngleC1ERKS_>
}
    977a:	4620      	mov	r0, r4
    977c:	4620      	mov	r0, r4
    977e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    9782:	46bd      	mov	sp, r7
    9784:	bd90      	pop	{r4, r7, pc}
    9786:	46c0      	nop			(mov r8, r8)

00009788 <_ZN9Odometrie6setPosERK17PositionPlusAngle>:
    positionPlusAngle.setX(posX);
    positionPlusAngle.setY(posY);

}

void Odometrie::setPos(const PositionPlusAngle& p)
    9788:	b580      	push	{r7, lr}
    978a:	b086      	sub	sp, #24
    978c:	af00      	add	r7, sp, #0
    978e:	6078      	str	r0, [r7, #4]
    9790:	6039      	str	r1, [r7, #0]
{
    posX = p.getPosition().getX();
    9792:	f107 0308 	add.w	r3, r7, #8	; 0x8
    9796:	4618      	mov	r0, r3
    9798:	6839      	ldr	r1, [r7, #0]
    979a:	f005 f8eb 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
    979e:	f107 0308 	add.w	r3, r7, #8	; 0x8
    97a2:	4618      	mov	r0, r3
    97a4:	f004 febe 	bl	e524 <_ZNK8Position4getXEv>
    97a8:	4603      	mov	r3, r0
    97aa:	4618      	mov	r0, r3
    97ac:	f010 fcac 	bl	1a108 <__aeabi_f2d>
    97b0:	4602      	mov	r2, r0
    97b2:	460b      	mov	r3, r1
    97b4:	6879      	ldr	r1, [r7, #4]
    97b6:	e9c1 2316 	strd	r2, r3, [r1, #88]
    posY = p.getPosition().getY();
    97ba:	f107 0310 	add.w	r3, r7, #16	; 0x10
    97be:	4618      	mov	r0, r3
    97c0:	6839      	ldr	r1, [r7, #0]
    97c2:	f005 f8d7 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
    97c6:	f107 0310 	add.w	r3, r7, #16	; 0x10
    97ca:	4618      	mov	r0, r3
    97cc:	f004 feb6 	bl	e53c <_ZNK8Position4getYEv>
    97d0:	4603      	mov	r3, r0
    97d2:	4618      	mov	r0, r3
    97d4:	f010 fc98 	bl	1a108 <__aeabi_f2d>
    97d8:	4602      	mov	r2, r0
    97da:	460b      	mov	r3, r1
    97dc:	6879      	ldr	r1, [r7, #4]
    97de:	e9c1 2318 	strd	r2, r3, [r1, #96]
    ang = p.getAngle();
    97e2:	6838      	ldr	r0, [r7, #0]
    97e4:	f005 f8d8 	bl	e998 <_ZNK17PositionPlusAngle8getAngleEv>
    97e8:	4603      	mov	r3, r0
    97ea:	4618      	mov	r0, r3
    97ec:	f010 fc8c 	bl	1a108 <__aeabi_f2d>
    97f0:	4602      	mov	r2, r0
    97f2:	460b      	mov	r3, r1
    97f4:	6879      	ldr	r1, [r7, #4]
    97f6:	e9c1 231a 	strd	r2, r3, [r1, #104]
    positionPlusAngle = p;
    97fa:	687b      	ldr	r3, [r7, #4]
    97fc:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9800:	4618      	mov	r0, r3
    9802:	6839      	ldr	r1, [r7, #0]
    9804:	f005 f90e 	bl	ea24 <_ZN17PositionPlusAngleaSERKS_>
}
    9808:	f107 0718 	add.w	r7, r7, #24	; 0x18
    980c:	46bd      	mov	sp, r7
    980e:	bd80      	pop	{r7, pc}

00009810 <_ZN9Odometrie8setAngleEf>:
    setPos(posPA);

    odometrie->posY = y;
}

void Odometrie::setAngle(Angle a)
    9810:	b590      	push	{r4, r7, lr}
    9812:	b087      	sub	sp, #28
    9814:	af00      	add	r7, sp, #0
    9816:	6078      	str	r0, [r7, #4]
    9818:	6039      	str	r1, [r7, #0]
{
    PositionPlusAngle posPA = getPos();
    981a:	f107 030c 	add.w	r3, r7, #12	; 0xc
    981e:	4618      	mov	r0, r3
    9820:	6879      	ldr	r1, [r7, #4]
    9822:	f7ff ff9d 	bl	9760 <_ZNK9Odometrie6getPosEv>
    posPA.setAngle(a);
    9826:	f107 030c 	add.w	r3, r7, #12	; 0xc
    982a:	4618      	mov	r0, r3
    982c:	6839      	ldr	r1, [r7, #0]
    982e:	f005 f8bf 	bl	e9b0 <_ZN17PositionPlusAngle8setAngleEf>
    setPos(posPA);
    9832:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9836:	6878      	ldr	r0, [r7, #4]
    9838:	4619      	mov	r1, r3
    983a:	f7ff ffa5 	bl	9788 <_ZN9Odometrie6setPosERK17PositionPlusAngle>

    odometrie->ang = a;
    983e:	4b06      	ldr	r3, [pc, #24]	(9858 <_ZN9Odometrie8setAngleEf+0x48>)
    9840:	681c      	ldr	r4, [r3, #0]
    9842:	6838      	ldr	r0, [r7, #0]
    9844:	f010 fc60 	bl	1a108 <__aeabi_f2d>
    9848:	4602      	mov	r2, r0
    984a:	460b      	mov	r3, r1
    984c:	e9c4 231a 	strd	r2, r3, [r4, #104]
}
    9850:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    9854:	46bd      	mov	sp, r7
    9856:	bd90      	pop	{r4, r7, pc}
    9858:	20000570 	.word	0x20000570

0000985c <_ZN9Odometrie4setYEf>:
    posPA.setPosition(pos);
    setPos(posPA);
    odometrie->posX = x;
}

void Odometrie::setY(Distance y)
    985c:	b590      	push	{r4, r7, lr}
    985e:	b089      	sub	sp, #36
    9860:	af00      	add	r7, sp, #0
    9862:	6078      	str	r0, [r7, #4]
    9864:	6039      	str	r1, [r7, #0]
{
    PositionPlusAngle posPA = getPos();
    9866:	f107 0314 	add.w	r3, r7, #20	; 0x14
    986a:	4618      	mov	r0, r3
    986c:	6879      	ldr	r1, [r7, #4]
    986e:	f7ff ff77 	bl	9760 <_ZNK9Odometrie6getPosEv>
    Position pos = posPA.getPosition();
    9872:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9876:	f107 0214 	add.w	r2, r7, #20	; 0x14
    987a:	4618      	mov	r0, r3
    987c:	4611      	mov	r1, r2
    987e:	f005 f879 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
    pos.setY(y);
    9882:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9886:	4618      	mov	r0, r3
    9888:	6839      	ldr	r1, [r7, #0]
    988a:	f004 fe71 	bl	e570 <_ZN8Position4setYEf>
    posPA.setPosition(pos);
    988e:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9892:	f107 020c 	add.w	r2, r7, #12	; 0xc
    9896:	4618      	mov	r0, r3
    9898:	4611      	mov	r1, r2
    989a:	f005 f8b3 	bl	ea04 <_ZN17PositionPlusAngle11setPositionERK8Position>
    setPos(posPA);
    989e:	f107 0314 	add.w	r3, r7, #20	; 0x14
    98a2:	6878      	ldr	r0, [r7, #4]
    98a4:	4619      	mov	r1, r3
    98a6:	f7ff ff6f 	bl	9788 <_ZN9Odometrie6setPosERK17PositionPlusAngle>

    odometrie->posY = y;
    98aa:	4b06      	ldr	r3, [pc, #24]	(98c4 <_ZN9Odometrie4setYEf+0x68>)
    98ac:	681c      	ldr	r4, [r3, #0]
    98ae:	6838      	ldr	r0, [r7, #0]
    98b0:	f010 fc2a 	bl	1a108 <__aeabi_f2d>
    98b4:	4602      	mov	r2, r0
    98b6:	460b      	mov	r3, r1
    98b8:	e9c4 2318 	strd	r2, r3, [r4, #96]
}
    98bc:	f107 0724 	add.w	r7, r7, #36	; 0x24
    98c0:	46bd      	mov	sp, r7
    98c2:	bd90      	pop	{r4, r7, pc}
    98c4:	20000570 	.word	0x20000570

000098c8 <_ZN9Odometrie4setXEf>:
Angle Odometrie::getAbsoluteAngle() const
{
    return absAngle;
}

void Odometrie::setX(Distance x)
    98c8:	b590      	push	{r4, r7, lr}
    98ca:	b089      	sub	sp, #36
    98cc:	af00      	add	r7, sp, #0
    98ce:	6078      	str	r0, [r7, #4]
    98d0:	6039      	str	r1, [r7, #0]
{
    PositionPlusAngle posPA = getPos();
    98d2:	f107 0314 	add.w	r3, r7, #20	; 0x14
    98d6:	4618      	mov	r0, r3
    98d8:	6879      	ldr	r1, [r7, #4]
    98da:	f7ff ff41 	bl	9760 <_ZNK9Odometrie6getPosEv>
    Position pos = posPA.getPosition();
    98de:	f107 030c 	add.w	r3, r7, #12	; 0xc
    98e2:	f107 0214 	add.w	r2, r7, #20	; 0x14
    98e6:	4618      	mov	r0, r3
    98e8:	4611      	mov	r1, r2
    98ea:	f005 f843 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
    pos.setX(x);
    98ee:	f107 030c 	add.w	r3, r7, #12	; 0xc
    98f2:	4618      	mov	r0, r3
    98f4:	6839      	ldr	r1, [r7, #0]
    98f6:	f004 fe2d 	bl	e554 <_ZN8Position4setXEf>
    posPA.setPosition(pos);
    98fa:	f107 0314 	add.w	r3, r7, #20	; 0x14
    98fe:	f107 020c 	add.w	r2, r7, #12	; 0xc
    9902:	4618      	mov	r0, r3
    9904:	4611      	mov	r1, r2
    9906:	f005 f87d 	bl	ea04 <_ZN17PositionPlusAngle11setPositionERK8Position>
    setPos(posPA);
    990a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    990e:	6878      	ldr	r0, [r7, #4]
    9910:	4619      	mov	r1, r3
    9912:	f7ff ff39 	bl	9788 <_ZN9Odometrie6setPosERK17PositionPlusAngle>
    odometrie->posX = x;
    9916:	4b06      	ldr	r3, [pc, #24]	(9930 <_ZN9Odometrie4setXEf+0x68>)
    9918:	681c      	ldr	r4, [r3, #0]
    991a:	6838      	ldr	r0, [r7, #0]
    991c:	f010 fbf4 	bl	1a108 <__aeabi_f2d>
    9920:	4602      	mov	r2, r0
    9922:	460b      	mov	r3, r1
    9924:	e9c4 2316 	strd	r2, r3, [r4, #88]
}
    9928:	f107 0724 	add.w	r7, r7, #36	; 0x24
    992c:	46bd      	mov	sp, r7
    992e:	bd90      	pop	{r4, r7, pc}
    9930:	20000570 	.word	0x20000570

00009934 <_ZN9Odometrie6updateEv>:
{
    delete roueCodeuseGauche;
    delete roueCodeuseDroite;
}

void Odometrie::update()
    9934:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    9938:	b094      	sub	sp, #80
    993a:	af00      	add	r7, sp, #0
    993c:	6078      	str	r0, [r7, #4]
{
    // pour filtrer les ticks
    for (int i = tailleTabPrevTicks-2 ; i >= 0; i--)
    993e:	f04f 0300 	mov.w	r3, #0	; 0x0
    9942:	633b      	str	r3, [r7, #48]
    9944:	e027      	b.n	9996 <_ZN9Odometrie6updateEv+0x62>
    {
        prevDeltaTicksRoueDroite[i+1] = prevDeltaTicksRoueDroite[i];
    9946:	6b3b      	ldr	r3, [r7, #48]
    9948:	f103 0001 	add.w	r0, r3, #1	; 0x1
    994c:	6b3b      	ldr	r3, [r7, #48]
    994e:	687a      	ldr	r2, [r7, #4]
    9950:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9954:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9958:	4413      	add	r3, r2
    995a:	6859      	ldr	r1, [r3, #4]
    995c:	687a      	ldr	r2, [r7, #4]
    995e:	f100 0308 	add.w	r3, r0, #8	; 0x8
    9962:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9966:	4413      	add	r3, r2
    9968:	6059      	str	r1, [r3, #4]
        prevDeltaTicksRoueGauche[i+1] = prevDeltaTicksRoueGauche[i];
    996a:	6b3b      	ldr	r3, [r7, #48]
    996c:	f103 0001 	add.w	r0, r3, #1	; 0x1
    9970:	6b3b      	ldr	r3, [r7, #48]
    9972:	687a      	ldr	r2, [r7, #4]
    9974:	f103 0306 	add.w	r3, r3, #6	; 0x6
    9978:	ea4f 0383 	mov.w	r3, r3, lsl #2
    997c:	4413      	add	r3, r2
    997e:	6859      	ldr	r1, [r3, #4]
    9980:	687a      	ldr	r2, [r7, #4]
    9982:	f100 0306 	add.w	r3, r0, #6	; 0x6
    9986:	ea4f 0383 	mov.w	r3, r3, lsl #2
    998a:	4413      	add	r3, r2
    998c:	6059      	str	r1, [r3, #4]
}

void Odometrie::update()
{
    // pour filtrer les ticks
    for (int i = tailleTabPrevTicks-2 ; i >= 0; i--)
    998e:	6b3b      	ldr	r3, [r7, #48]
    9990:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    9994:	633b      	str	r3, [r7, #48]
    9996:	6b3b      	ldr	r3, [r7, #48]
    9998:	2b00      	cmp	r3, #0
    999a:	dad4      	bge.n	9946 <_ZN9Odometrie6updateEv+0x12>
        prevDeltaTicksRoueDroite[i+1] = prevDeltaTicksRoueDroite[i];
        prevDeltaTicksRoueGauche[i+1] = prevDeltaTicksRoueGauche[i];
    }

    // On a le moins pour prendre en compte que les deux roux codeuses sont montées dans des sens opposés car pas du même coté du robot
    prevDeltaTicksRoueDroite[0] = -roueCodeuseDroite->getTickValue();
    999c:	687b      	ldr	r3, [r7, #4]
    999e:	681b      	ldr	r3, [r3, #0]
    99a0:	4618      	mov	r0, r3
    99a2:	f002 fdd5 	bl	c550 <_ZN22QuadratureCoderHandler12getTickValueEv>
    99a6:	4603      	mov	r3, r0
    99a8:	b29b      	uxth	r3, r3
    99aa:	b21b      	sxth	r3, r3
    99ac:	f1c3 0200 	rsb	r2, r3, #0	; 0x0
    99b0:	687b      	ldr	r3, [r7, #4]
    99b2:	625a      	str	r2, [r3, #36]
    #if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
        prevDeltaTicksRoueGauche[0] = -roueCodeuseGauche->getTickValue();
    #else
        prevDeltaTicksRoueGauche[0] = roueCodeuseGauche->getTickValue();
    99b4:	687b      	ldr	r3, [r7, #4]
    99b6:	685b      	ldr	r3, [r3, #4]
    99b8:	4618      	mov	r0, r3
    99ba:	f002 fdc9 	bl	c550 <_ZN22QuadratureCoderHandler12getTickValueEv>
    99be:	4603      	mov	r3, r0
    99c0:	b29b      	uxth	r3, r3
    99c2:	b21a      	sxth	r2, r3
    99c4:	687b      	ldr	r3, [r7, #4]
    99c6:	61da      	str	r2, [r3, #28]
    #endif

    int32_t sommeGauche = 0;
    99c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    99cc:	60bb      	str	r3, [r7, #8]
    int32_t sommeDroite = 0;
    99ce:	f04f 0300 	mov.w	r3, #0	; 0x0
    99d2:	60fb      	str	r3, [r7, #12]
    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    99d4:	f04f 0300 	mov.w	r3, #0	; 0x0
    99d8:	637b      	str	r3, [r7, #52]
    99da:	e019      	b.n	9a10 <_ZN9Odometrie6updateEv+0xdc>
    {
        sommeGauche += prevDeltaTicksRoueGauche[i];
    99dc:	6b7b      	ldr	r3, [r7, #52]
    99de:	687a      	ldr	r2, [r7, #4]
    99e0:	f103 0306 	add.w	r3, r3, #6	; 0x6
    99e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    99e8:	4413      	add	r3, r2
    99ea:	685a      	ldr	r2, [r3, #4]
    99ec:	68bb      	ldr	r3, [r7, #8]
    99ee:	4413      	add	r3, r2
    99f0:	60bb      	str	r3, [r7, #8]
        sommeDroite += prevDeltaTicksRoueDroite[i];
    99f2:	6b7b      	ldr	r3, [r7, #52]
    99f4:	687a      	ldr	r2, [r7, #4]
    99f6:	f103 0308 	add.w	r3, r3, #8	; 0x8
    99fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    99fe:	4413      	add	r3, r2
    9a00:	685a      	ldr	r2, [r3, #4]
    9a02:	68fb      	ldr	r3, [r7, #12]
    9a04:	4413      	add	r3, r2
    9a06:	60fb      	str	r3, [r7, #12]
        prevDeltaTicksRoueGauche[0] = roueCodeuseGauche->getTickValue();
    #endif

    int32_t sommeGauche = 0;
    int32_t sommeDroite = 0;
    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    9a08:	6b7b      	ldr	r3, [r7, #52]
    9a0a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    9a0e:	637b      	str	r3, [r7, #52]
    9a10:	6b7b      	ldr	r3, [r7, #52]
    9a12:	2b01      	cmp	r3, #1
    9a14:	dde2      	ble.n	99dc <_ZN9Odometrie6updateEv+0xa8>
        sommeGauche += prevDeltaTicksRoueGauche[i];
        sommeDroite += prevDeltaTicksRoueDroite[i];
    }

    // double filteredDeltaTicksRoueGauche = (deltaTicksRoueGauche+prevDeltaTicksRoueGauche)/2.0;
    double filteredDeltaTicksRoueGauche = (double)sommeGauche/(double)tailleTabPrevTicks;
    9a16:	68b8      	ldr	r0, [r7, #8]
    9a18:	f010 fb64 	bl	1a0e4 <__aeabi_i2d>
    9a1c:	4602      	mov	r2, r0
    9a1e:	460b      	mov	r3, r1
    9a20:	4610      	mov	r0, r2
    9a22:	4619      	mov	r1, r3
    9a24:	f04f 0200 	mov.w	r2, #0	; 0x0
    9a28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9a2c:	f010 fcea 	bl	1a404 <__aeabi_ddiv>
    9a30:	4602      	mov	r2, r0
    9a32:	460b      	mov	r3, r1
    9a34:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // double filteredDeltaTicksRoueDroite = (deltaTicksRoueDroite+prevDeltaTicksRoueDroite)/2.0;
    double filteredDeltaTicksRoueDroite = (double)sommeDroite/(double)tailleTabPrevTicks;
    9a38:	68f8      	ldr	r0, [r7, #12]
    9a3a:	f010 fb53 	bl	1a0e4 <__aeabi_i2d>
    9a3e:	4602      	mov	r2, r0
    9a40:	460b      	mov	r3, r1
    9a42:	4610      	mov	r0, r2
    9a44:	4619      	mov	r1, r3
    9a46:	f04f 0200 	mov.w	r2, #0	; 0x0
    9a4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9a4e:	f010 fcd9 	bl	1a404 <__aeabi_ddiv>
    9a52:	4602      	mov	r2, r0
    9a54:	460b      	mov	r3, r1
    9a56:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double tmpDeltaAngle = (filteredDeltaTicksRoueGauche-filteredDeltaTicksRoueDroite)*coeffAngle;  // cf coef angle
    9a5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    9a5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    9a62:	f010 f9f1 	bl	19e48 <__aeabi_dsub>
    9a66:	4602      	mov	r2, r0
    9a68:	460b      	mov	r3, r1
    9a6a:	4610      	mov	r0, r2
    9a6c:	4619      	mov	r1, r3
    9a6e:	687b      	ldr	r3, [r7, #4]
    9a70:	e9d3 2314 	ldrd	r2, r3, [r3, #80]
    9a74:	f010 fb9c 	bl	1a1b0 <__aeabi_dmul>
    9a78:	4602      	mov	r2, r0
    9a7a:	460b      	mov	r3, r1
    9a7c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	double tmpDist = (filteredDeltaTicksRoueGauche+filteredDeltaTicksRoueDroite)*coeffDistance;     // soit le nombre moyen de tours de roue * le perimetre de la roue
    9a80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    9a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    9a88:	f010 f9e0 	bl	19e4c <__adddf3>
    9a8c:	4602      	mov	r2, r0
    9a8e:	460b      	mov	r3, r1
    9a90:	4610      	mov	r0, r2
    9a92:	4619      	mov	r1, r3
    9a94:	687b      	ldr	r3, [r7, #4]
    9a96:	e9d3 2312 	ldrd	r2, r3, [r3, #72]
    9a9a:	f010 fb89 	bl	1a1b0 <__aeabi_dmul>
    9a9e:	4602      	mov	r2, r0
    9aa0:	460b      	mov	r3, r1
    9aa2:	e9c7 230a 	strd	r2, r3, [r7, #40]

    vitesseLineaire = Distance(tmpDist);
    9aa6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]
    9aaa:	f010 fe41 	bl	1a730 <__aeabi_d2f>
    9aae:	4602      	mov	r2, r0
    9ab0:	687b      	ldr	r3, [r7, #4]
    9ab2:	615a      	str	r2, [r3, #20]

    vitesseAngulaire = Angle(tmpDeltaAngle);
    9ab4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    9ab8:	f010 fe3a 	bl	1a730 <__aeabi_d2f>
    9abc:	4602      	mov	r2, r0
    9abe:	687b      	ldr	r3, [r7, #4]
    9ac0:	619a      	str	r2, [r3, #24]

	//positionPlusAngle.setAngle(positionPlusAngle.getAngle()+vitesseAngulaire);
	//positionPlusAngle.setPosition(positionPlusAngle.getPosition() + Position(tmpDist*cos(positionPlusAngle.getAngle()), tmpDist*sin(positionPlusAngle.getAngle())));    //mettre sinx si ça marche pas et non sin


    if (tmpDeltaAngle == 0.0)
    9ac2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    9ac6:	f04f 0200 	mov.w	r2, #0	; 0x0
    9aca:	f04f 0300 	mov.w	r3, #0	; 0x0
    9ace:	f010 fdd5 	bl	1a67c <__aeabi_dcmpeq>
    9ad2:	4603      	mov	r3, r0
    9ad4:	2b00      	cmp	r3, #0
    9ad6:	d03a      	beq.n	9b4e <_ZN9Odometrie6updateEv+0x21a>
    {
        posX += tmpDist*cos(ang);
    9ad8:	687b      	ldr	r3, [r7, #4]
    9ada:	e9d3 4516 	ldrd	r4, r5, [r3, #88]
    9ade:	687b      	ldr	r3, [r7, #4]
    9ae0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9ae4:	4610      	mov	r0, r2
    9ae6:	4619      	mov	r1, r3
    9ae8:	f014 fbbc 	bl	1e264 <cos>
    9aec:	4602      	mov	r2, r0
    9aee:	460b      	mov	r3, r1
    9af0:	4610      	mov	r0, r2
    9af2:	4619      	mov	r1, r3
    9af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]
    9af8:	f010 fb5a 	bl	1a1b0 <__aeabi_dmul>
    9afc:	4602      	mov	r2, r0
    9afe:	460b      	mov	r3, r1
    9b00:	4620      	mov	r0, r4
    9b02:	4629      	mov	r1, r5
    9b04:	f010 f9a2 	bl	19e4c <__adddf3>
    9b08:	4602      	mov	r2, r0
    9b0a:	460b      	mov	r3, r1
    9b0c:	6879      	ldr	r1, [r7, #4]
    9b0e:	e9c1 2316 	strd	r2, r3, [r1, #88]
        posY += tmpDist*sin(ang);
    9b12:	687b      	ldr	r3, [r7, #4]
    9b14:	e9d3 4518 	ldrd	r4, r5, [r3, #96]
    9b18:	687b      	ldr	r3, [r7, #4]
    9b1a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9b1e:	4610      	mov	r0, r2
    9b20:	4619      	mov	r1, r3
    9b22:	f014 fbe1 	bl	1e2e8 <sin>
    9b26:	4602      	mov	r2, r0
    9b28:	460b      	mov	r3, r1
    9b2a:	4610      	mov	r0, r2
    9b2c:	4619      	mov	r1, r3
    9b2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]
    9b32:	f010 fb3d 	bl	1a1b0 <__aeabi_dmul>
    9b36:	4602      	mov	r2, r0
    9b38:	460b      	mov	r3, r1
    9b3a:	4620      	mov	r0, r4
    9b3c:	4629      	mov	r1, r5
    9b3e:	f010 f985 	bl	19e4c <__adddf3>
    9b42:	4602      	mov	r2, r0
    9b44:	460b      	mov	r3, r1
    9b46:	6879      	ldr	r1, [r7, #4]
    9b48:	e9c1 2318 	strd	r2, r3, [r1, #96]
    9b4c:	e0f3      	b.n	9d36 <_ZN9Odometrie6updateEv+0x402>
    }
    else
    {
        double rayonCourbure = tmpDist/tmpDeltaAngle;
    9b4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]
    9b52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
    9b56:	f010 fc55 	bl	1a404 <__aeabi_ddiv>
    9b5a:	4602      	mov	r2, r0
    9b5c:	460b      	mov	r3, r1
    9b5e:	e9c7 230e 	strd	r2, r3, [r7, #56]
        double distAvancee = rayonCourbure*sin(tmpDeltaAngle);
    9b62:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    9b66:	f014 fbbf 	bl	1e2e8 <sin>
    9b6a:	4602      	mov	r2, r0
    9b6c:	460b      	mov	r3, r1
    9b6e:	4610      	mov	r0, r2
    9b70:	4619      	mov	r1, r3
    9b72:	e9d7 230e 	ldrd	r2, r3, [r7, #56]
    9b76:	f010 fb1b 	bl	1a1b0 <__aeabi_dmul>
    9b7a:	4602      	mov	r2, r0
    9b7c:	460b      	mov	r3, r1
    9b7e:	e9c7 2310 	strd	r2, r3, [r7, #64]
        double distTranslatee = rayonCourbure*(1.0-cos(tmpDeltaAngle));
    9b82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    9b86:	f014 fb6d 	bl	1e264 <cos>
    9b8a:	4602      	mov	r2, r0
    9b8c:	460b      	mov	r3, r1
    9b8e:	f04f 0000 	mov.w	r0, #0	; 0x0
    9b92:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    9b96:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
    9b9a:	f010 f955 	bl	19e48 <__aeabi_dsub>
    9b9e:	4602      	mov	r2, r0
    9ba0:	460b      	mov	r3, r1
    9ba2:	4610      	mov	r0, r2
    9ba4:	4619      	mov	r1, r3
    9ba6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]
    9baa:	f010 fb01 	bl	1a1b0 <__aeabi_dmul>
    9bae:	4602      	mov	r2, r0
    9bb0:	460b      	mov	r3, r1
    9bb2:	e9c7 2312 	strd	r2, r3, [r7, #72]

        posX += distAvancee*cos(ang)-distTranslatee*sin(ang);
    9bb6:	687b      	ldr	r3, [r7, #4]
    9bb8:	e9d3 8916 	ldrd	r8, r9, [r3, #88]
    9bbc:	687b      	ldr	r3, [r7, #4]
    9bbe:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9bc2:	4610      	mov	r0, r2
    9bc4:	4619      	mov	r1, r3
    9bc6:	f014 fb4d 	bl	1e264 <cos>
    9bca:	4602      	mov	r2, r0
    9bcc:	460b      	mov	r3, r1
    9bce:	4610      	mov	r0, r2
    9bd0:	4619      	mov	r1, r3
    9bd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]
    9bd6:	f010 faeb 	bl	1a1b0 <__aeabi_dmul>
    9bda:	4602      	mov	r2, r0
    9bdc:	460b      	mov	r3, r1
    9bde:	4614      	mov	r4, r2
    9be0:	461d      	mov	r5, r3
    9be2:	687b      	ldr	r3, [r7, #4]
    9be4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9be8:	4610      	mov	r0, r2
    9bea:	4619      	mov	r1, r3
    9bec:	f014 fb7c 	bl	1e2e8 <sin>
    9bf0:	4602      	mov	r2, r0
    9bf2:	460b      	mov	r3, r1
    9bf4:	4610      	mov	r0, r2
    9bf6:	4619      	mov	r1, r3
    9bf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]
    9bfc:	f010 fad8 	bl	1a1b0 <__aeabi_dmul>
    9c00:	4602      	mov	r2, r0
    9c02:	460b      	mov	r3, r1
    9c04:	4620      	mov	r0, r4
    9c06:	4629      	mov	r1, r5
    9c08:	f010 f91e 	bl	19e48 <__aeabi_dsub>
    9c0c:	4602      	mov	r2, r0
    9c0e:	460b      	mov	r3, r1
    9c10:	4640      	mov	r0, r8
    9c12:	4649      	mov	r1, r9
    9c14:	f010 f91a 	bl	19e4c <__adddf3>
    9c18:	4602      	mov	r2, r0
    9c1a:	460b      	mov	r3, r1
    9c1c:	6879      	ldr	r1, [r7, #4]
    9c1e:	e9c1 2316 	strd	r2, r3, [r1, #88]
        posY += distAvancee*sin(ang)+distTranslatee*cos(ang);
    9c22:	687b      	ldr	r3, [r7, #4]
    9c24:	e9d3 8918 	ldrd	r8, r9, [r3, #96]
    9c28:	687b      	ldr	r3, [r7, #4]
    9c2a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9c2e:	4610      	mov	r0, r2
    9c30:	4619      	mov	r1, r3
    9c32:	f014 fb59 	bl	1e2e8 <sin>
    9c36:	4602      	mov	r2, r0
    9c38:	460b      	mov	r3, r1
    9c3a:	4610      	mov	r0, r2
    9c3c:	4619      	mov	r1, r3
    9c3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]
    9c42:	f010 fab5 	bl	1a1b0 <__aeabi_dmul>
    9c46:	4602      	mov	r2, r0
    9c48:	460b      	mov	r3, r1
    9c4a:	4614      	mov	r4, r2
    9c4c:	461d      	mov	r5, r3
    9c4e:	687b      	ldr	r3, [r7, #4]
    9c50:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9c54:	4610      	mov	r0, r2
    9c56:	4619      	mov	r1, r3
    9c58:	f014 fb04 	bl	1e264 <cos>
    9c5c:	4602      	mov	r2, r0
    9c5e:	460b      	mov	r3, r1
    9c60:	4610      	mov	r0, r2
    9c62:	4619      	mov	r1, r3
    9c64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]
    9c68:	f010 faa2 	bl	1a1b0 <__aeabi_dmul>
    9c6c:	4602      	mov	r2, r0
    9c6e:	460b      	mov	r3, r1
    9c70:	4620      	mov	r0, r4
    9c72:	4629      	mov	r1, r5
    9c74:	f010 f8ea 	bl	19e4c <__adddf3>
    9c78:	4602      	mov	r2, r0
    9c7a:	460b      	mov	r3, r1
    9c7c:	4640      	mov	r0, r8
    9c7e:	4649      	mov	r1, r9
    9c80:	f010 f8e4 	bl	19e4c <__adddf3>
    9c84:	4602      	mov	r2, r0
    9c86:	460b      	mov	r3, r1
    9c88:	6879      	ldr	r1, [r7, #4]
    9c8a:	e9c1 2318 	strd	r2, r3, [r1, #96]

        ang += vitesseAngulaire;
    9c8e:	687b      	ldr	r3, [r7, #4]
    9c90:	e9d3 451a 	ldrd	r4, r5, [r3, #104]
    9c94:	687b      	ldr	r3, [r7, #4]
    9c96:	699b      	ldr	r3, [r3, #24]
    9c98:	4618      	mov	r0, r3
    9c9a:	f010 fa35 	bl	1a108 <__aeabi_f2d>
    9c9e:	4602      	mov	r2, r0
    9ca0:	460b      	mov	r3, r1
    9ca2:	4620      	mov	r0, r4
    9ca4:	4629      	mov	r1, r5
    9ca6:	f010 f8d1 	bl	19e4c <__adddf3>
    9caa:	4602      	mov	r2, r0
    9cac:	460b      	mov	r3, r1
    9cae:	6879      	ldr	r1, [r7, #4]
    9cb0:	e9c1 231a 	strd	r2, r3, [r1, #104]
        absAngle += vitesseAngulaire;
    9cb4:	687b      	ldr	r3, [r7, #4]
    9cb6:	6f1a      	ldr	r2, [r3, #112]
    9cb8:	687b      	ldr	r3, [r7, #4]
    9cba:	699b      	ldr	r3, [r3, #24]
    9cbc:	4610      	mov	r0, r2
    9cbe:	4619      	mov	r1, r3
    9cc0:	f010 fd8c 	bl	1a7dc <__addsf3>
    9cc4:	4603      	mov	r3, r0
    9cc6:	461a      	mov	r2, r3
    9cc8:	687b      	ldr	r3, [r7, #4]
    9cca:	671a      	str	r2, [r3, #112]
        if (ang > M_PI)
    9ccc:	687b      	ldr	r3, [r7, #4]
    9cce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9cd2:	4610      	mov	r0, r2
    9cd4:	4619      	mov	r1, r3
    9cd6:	a232      	add	r2, pc, #200	(adr r2, 9da0 <_ZN9Odometrie6updateEv+0x46c>)
    9cd8:	ca0c      	ldmia	r2!, {r2, r3}
    9cda:	f010 fcf7 	bl	1a6cc <__aeabi_dcmpgt>
    9cde:	4603      	mov	r3, r0
    9ce0:	2b00      	cmp	r3, #0
    9ce2:	d00e      	beq.n	9d02 <_ZN9Odometrie6updateEv+0x3ce>
            ang -= 2.0*M_PI;
    9ce4:	687b      	ldr	r3, [r7, #4]
    9ce6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9cea:	4610      	mov	r0, r2
    9cec:	4619      	mov	r1, r3
    9cee:	a22e      	add	r2, pc, #184	(adr r2, 9da8 <_ZN9Odometrie6updateEv+0x474>)
    9cf0:	ca0c      	ldmia	r2!, {r2, r3}
    9cf2:	f010 f8a9 	bl	19e48 <__aeabi_dsub>
    9cf6:	4602      	mov	r2, r0
    9cf8:	460b      	mov	r3, r1
    9cfa:	6879      	ldr	r1, [r7, #4]
    9cfc:	e9c1 231a 	strd	r2, r3, [r1, #104]
    9d00:	e019      	b.n	9d36 <_ZN9Odometrie6updateEv+0x402>
        else if (ang < -M_PI)
    9d02:	687b      	ldr	r3, [r7, #4]
    9d04:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9d08:	4610      	mov	r0, r2
    9d0a:	4619      	mov	r1, r3
    9d0c:	a228      	add	r2, pc, #160	(adr r2, 9db0 <_ZN9Odometrie6updateEv+0x47c>)
    9d0e:	ca0c      	ldmia	r2!, {r2, r3}
    9d10:	f010 fcbe 	bl	1a690 <__aeabi_dcmplt>
    9d14:	4603      	mov	r3, r0
    9d16:	2b00      	cmp	r3, #0
    9d18:	d00d      	beq.n	9d36 <_ZN9Odometrie6updateEv+0x402>
            ang += 2.0*M_PI;
    9d1a:	687b      	ldr	r3, [r7, #4]
    9d1c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9d20:	4610      	mov	r0, r2
    9d22:	4619      	mov	r1, r3
    9d24:	a220      	add	r2, pc, #128	(adr r2, 9da8 <_ZN9Odometrie6updateEv+0x474>)
    9d26:	ca0c      	ldmia	r2!, {r2, r3}
    9d28:	f010 f890 	bl	19e4c <__adddf3>
    9d2c:	4602      	mov	r2, r0
    9d2e:	460b      	mov	r3, r1
    9d30:	6879      	ldr	r1, [r7, #4]
    9d32:	e9c1 231a 	strd	r2, r3, [r1, #104]
    }

    positionPlusAngle.setAngle(ang);
    9d36:	687b      	ldr	r3, [r7, #4]
    9d38:	f103 0408 	add.w	r4, r3, #8	; 0x8
    9d3c:	687b      	ldr	r3, [r7, #4]
    9d3e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9d42:	4610      	mov	r0, r2
    9d44:	4619      	mov	r1, r3
    9d46:	f010 fcf3 	bl	1a730 <__aeabi_d2f>
    9d4a:	4603      	mov	r3, r0
    9d4c:	4620      	mov	r0, r4
    9d4e:	4619      	mov	r1, r3
    9d50:	f004 fe2e 	bl	e9b0 <_ZN17PositionPlusAngle8setAngleEf>
    positionPlusAngle.setX(posX);
    9d54:	687b      	ldr	r3, [r7, #4]
    9d56:	f103 0408 	add.w	r4, r3, #8	; 0x8
    9d5a:	687b      	ldr	r3, [r7, #4]
    9d5c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]
    9d60:	4610      	mov	r0, r2
    9d62:	4619      	mov	r1, r3
    9d64:	f010 fce4 	bl	1a730 <__aeabi_d2f>
    9d68:	4603      	mov	r3, r0
    9d6a:	4620      	mov	r0, r4
    9d6c:	4619      	mov	r1, r3
    9d6e:	f004 fe3b 	bl	e9e8 <_ZN17PositionPlusAngle4setXEf>
    positionPlusAngle.setY(posY);
    9d72:	687b      	ldr	r3, [r7, #4]
    9d74:	f103 0408 	add.w	r4, r3, #8	; 0x8
    9d78:	687b      	ldr	r3, [r7, #4]
    9d7a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]
    9d7e:	4610      	mov	r0, r2
    9d80:	4619      	mov	r1, r3
    9d82:	f010 fcd5 	bl	1a730 <__aeabi_d2f>
    9d86:	4603      	mov	r3, r0
    9d88:	4620      	mov	r0, r4
    9d8a:	4619      	mov	r1, r3
    9d8c:	f004 fe1e 	bl	e9cc <_ZN17PositionPlusAngle4setYEf>

}
    9d90:	f107 0750 	add.w	r7, r7, #80	; 0x50
    9d94:	46bd      	mov	sp, r7
    9d96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    9d9a:	46c0      	nop			(mov r8, r8)
    9d9c:	46c0      	nop			(mov r8, r8)
    9d9e:	46c0      	nop			(mov r8, r8)
    9da0:	54442d18 	.word	0x54442d18
    9da4:	400921fb 	.word	0x400921fb
    9da8:	54442d18 	.word	0x54442d18
    9dac:	401921fb 	.word	0x401921fb
    9db0:	54442d18 	.word	0x54442d18
    9db4:	c00921fb 	.word	0xc00921fb

00009db8 <_ZN9OdometrieD1Ev>:

    absAngle = 0.0;

}

Odometrie::~Odometrie()
    9db8:	b580      	push	{r7, lr}
    9dba:	b082      	sub	sp, #8
    9dbc:	af00      	add	r7, sp, #0
    9dbe:	6078      	str	r0, [r7, #4]
{
    delete roueCodeuseGauche;
    9dc0:	687b      	ldr	r3, [r7, #4]
    9dc2:	685b      	ldr	r3, [r3, #4]
    9dc4:	4618      	mov	r0, r3
    9dc6:	f004 fad9 	bl	e37c <_ZdlPv>
    delete roueCodeuseDroite;
    9dca:	687b      	ldr	r3, [r7, #4]
    9dcc:	681b      	ldr	r3, [r3, #0]
    9dce:	4618      	mov	r0, r3
    9dd0:	f004 fad4 	bl	e37c <_ZdlPv>
}
    9dd4:	687b      	ldr	r3, [r7, #4]
    9dd6:	4618      	mov	r0, r3
    9dd8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    9ddc:	46bd      	mov	sp, r7
    9dde:	bd80      	pop	{r7, pc}

00009de0 <_ZN9OdometrieD2Ev>:

    absAngle = 0.0;

}

Odometrie::~Odometrie()
    9de0:	b580      	push	{r7, lr}
    9de2:	b082      	sub	sp, #8
    9de4:	af00      	add	r7, sp, #0
    9de6:	6078      	str	r0, [r7, #4]
{
    delete roueCodeuseGauche;
    9de8:	687b      	ldr	r3, [r7, #4]
    9dea:	685b      	ldr	r3, [r3, #4]
    9dec:	4618      	mov	r0, r3
    9dee:	f004 fac5 	bl	e37c <_ZdlPv>
    delete roueCodeuseDroite;
    9df2:	687b      	ldr	r3, [r7, #4]
    9df4:	681b      	ldr	r3, [r3, #0]
    9df6:	4618      	mov	r0, r3
    9df8:	f004 fac0 	bl	e37c <_ZdlPv>
}
    9dfc:	687b      	ldr	r3, [r7, #4]
    9dfe:	4618      	mov	r0, r3
    9e00:	f107 0708 	add.w	r7, r7, #8	; 0x8
    9e04:	46bd      	mov	sp, r7
    9e06:	bd80      	pop	{r7, pc}

00009e08 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_>:

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

Odometrie::Odometrie(QuadratureCoderHandler* roueCodeuseGauche, QuadratureCoderHandler* roueCodeuseDroite)
    9e08:	b580      	push	{r7, lr}
    9e0a:	b086      	sub	sp, #24
    9e0c:	af00      	add	r7, sp, #0
    9e0e:	60f8      	str	r0, [r7, #12]
    9e10:	60b9      	str	r1, [r7, #8]
    9e12:	607a      	str	r2, [r7, #4]
: rayonRoueCodeuse(RAYON_ROUE)
    9e14:	68fb      	ldr	r3, [r7, #12]
    9e16:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9e1a:	4618      	mov	r0, r3
    9e1c:	f004 ff60 	bl	ece0 <_ZN17PositionPlusAngleC1Ev>
    9e20:	68f9      	ldr	r1, [r7, #12]
    9e22:	f04f 0200 	mov.w	r2, #0	; 0x0
    9e26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9e2a:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    9e2e:	e9c1 230e 	strd	r2, r3, [r1, #56]
{

    vitesseLineaire =0;
    9e32:	68fa      	ldr	r2, [r7, #12]
    9e34:	4b4c      	ldr	r3, [pc, #304]	(9f68 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x160>)
    9e36:	6153      	str	r3, [r2, #20]
    vitesseAngulaire=0;
    9e38:	68fa      	ldr	r2, [r7, #12]
    9e3a:	4b4b      	ldr	r3, [pc, #300]	(9f68 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x160>)
    9e3c:	6193      	str	r3, [r2, #24]
    entraxe=TAILLE_ENTRAXE;
    9e3e:	68f9      	ldr	r1, [r7, #12]
    9e40:	a245      	add	r2, pc, #276	(adr r2, 9f58 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x150>)
    9e42:	ca0c      	ldmia	r2!, {r2, r3}
    9e44:	e9c1 230c 	strd	r2, r3, [r1, #48]
    rayonRoueCodeuse=RAYON_ROUE;
    9e48:	68f9      	ldr	r1, [r7, #12]
    9e4a:	f04f 0200 	mov.w	r2, #0	; 0x0
    9e4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9e52:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    9e56:	e9c1 230e 	strd	r2, r3, [r1, #56]
    nbTicksParTour=NBR_TICK_PAR_TOUR;
    9e5a:	68f9      	ldr	r1, [r7, #12]
    9e5c:	f04f 0200 	mov.w	r2, #0	; 0x0
    9e60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9e64:	f503 0340 	add.w	r3, r3, #12582912	; 0xc00000
    9e68:	e9c1 2310 	strd	r2, r3, [r1, #64]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue
    9e6c:	68fb      	ldr	r3, [r7, #12]
    9e6e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]
    9e72:	4610      	mov	r0, r2
    9e74:	4619      	mov	r1, r3
    9e76:	a23a      	add	r2, pc, #232	(adr r2, 9f60 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x158>)
    9e78:	ca0c      	ldmia	r2!, {r2, r3}
    9e7a:	f010 f999 	bl	1a1b0 <__aeabi_dmul>
    9e7e:	4602      	mov	r2, r0
    9e80:	460b      	mov	r3, r1
    9e82:	4610      	mov	r0, r2
    9e84:	4619      	mov	r1, r3
    9e86:	68fb      	ldr	r3, [r7, #12]
    9e88:	e9d3 2310 	ldrd	r2, r3, [r3, #64]
    9e8c:	f010 faba 	bl	1a404 <__aeabi_ddiv>
    9e90:	4602      	mov	r2, r0
    9e92:	460b      	mov	r3, r1
    9e94:	68f9      	ldr	r1, [r7, #12]
    9e96:	e9c1 2312 	strd	r2, r3, [r1, #72]

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1
    9e9a:	68fb      	ldr	r3, [r7, #12]
    9e9c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]
    9ea0:	4610      	mov	r0, r2
    9ea2:	4619      	mov	r1, r3
    9ea4:	f04f 0200 	mov.w	r2, #0	; 0x0
    9ea8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    9eac:	f010 f980 	bl	1a1b0 <__aeabi_dmul>
    9eb0:	4602      	mov	r2, r0
    9eb2:	460b      	mov	r3, r1
    9eb4:	4610      	mov	r0, r2
    9eb6:	4619      	mov	r1, r3
    9eb8:	68fb      	ldr	r3, [r7, #12]
    9eba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]
    9ebe:	f010 faa1 	bl	1a404 <__aeabi_ddiv>
    9ec2:	4602      	mov	r2, r0
    9ec4:	460b      	mov	r3, r1
    9ec6:	68f9      	ldr	r1, [r7, #12]
    9ec8:	e9c1 2314 	strd	r2, r3, [r1, #80]

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    9ecc:	f04f 0300 	mov.w	r3, #0	; 0x0
    9ed0:	617b      	str	r3, [r7, #20]
    9ed2:	e017      	b.n	9f04 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0xfc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
    9ed4:	697b      	ldr	r3, [r7, #20]
    9ed6:	68fa      	ldr	r2, [r7, #12]
    9ed8:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9edc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9ee0:	4413      	add	r3, r2
    9ee2:	f04f 0200 	mov.w	r2, #0	; 0x0
    9ee6:	605a      	str	r2, [r3, #4]
        prevDeltaTicksRoueGauche[i] = 0;
    9ee8:	697b      	ldr	r3, [r7, #20]
    9eea:	68fa      	ldr	r2, [r7, #12]
    9eec:	f103 0306 	add.w	r3, r3, #6	; 0x6
    9ef0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9ef4:	4413      	add	r3, r2
    9ef6:	f04f 0200 	mov.w	r2, #0	; 0x0
    9efa:	605a      	str	r2, [r3, #4]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    9efc:	697b      	ldr	r3, [r7, #20]
    9efe:	f103 0301 	add.w	r3, r3, #1	; 0x1
    9f02:	617b      	str	r3, [r7, #20]
    9f04:	697b      	ldr	r3, [r7, #20]
    9f06:	2b01      	cmp	r3, #1
    9f08:	dde4      	ble.n	9ed4 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0xcc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
        prevDeltaTicksRoueGauche[i] = 0;
    }

    this->roueCodeuseGauche = roueCodeuseGauche;
    9f0a:	68fa      	ldr	r2, [r7, #12]
    9f0c:	68bb      	ldr	r3, [r7, #8]
    9f0e:	6053      	str	r3, [r2, #4]
    this->roueCodeuseDroite = roueCodeuseDroite;
    9f10:	68fa      	ldr	r2, [r7, #12]
    9f12:	687b      	ldr	r3, [r7, #4]
    9f14:	6013      	str	r3, [r2, #0]
    Odometrie::odometrie = this;
    9f16:	4a15      	ldr	r2, [pc, #84]	(9f6c <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x164>)
    9f18:	68fb      	ldr	r3, [r7, #12]
    9f1a:	6013      	str	r3, [r2, #0]

    posX = 0.0;
    9f1c:	68f9      	ldr	r1, [r7, #12]
    9f1e:	f04f 0200 	mov.w	r2, #0	; 0x0
    9f22:	f04f 0300 	mov.w	r3, #0	; 0x0
    9f26:	e9c1 2316 	strd	r2, r3, [r1, #88]
    posY = 0.0;
    9f2a:	68f9      	ldr	r1, [r7, #12]
    9f2c:	f04f 0200 	mov.w	r2, #0	; 0x0
    9f30:	f04f 0300 	mov.w	r3, #0	; 0x0
    9f34:	e9c1 2318 	strd	r2, r3, [r1, #96]
    ang = 0.0;
    9f38:	68f9      	ldr	r1, [r7, #12]
    9f3a:	f04f 0200 	mov.w	r2, #0	; 0x0
    9f3e:	f04f 0300 	mov.w	r3, #0	; 0x0
    9f42:	e9c1 231a 	strd	r2, r3, [r1, #104]

    absAngle = 0.0;
    9f46:	68fa      	ldr	r2, [r7, #12]
    9f48:	4b07      	ldr	r3, [pc, #28]	(9f68 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x160>)
    9f4a:	6713      	str	r3, [r2, #112]

}
    9f4c:	68fb      	ldr	r3, [r7, #12]
    9f4e:	4618      	mov	r0, r3
    9f50:	f107 0718 	add.w	r7, r7, #24	; 0x18
    9f54:	46bd      	mov	sp, r7
    9f56:	bd80      	pop	{r7, pc}
    9f58:	045fe111 	.word	0x045fe111
    9f5c:	4075908d 	.word	0x4075908d
    9f60:	54442d18 	.word	0x54442d18
    9f64:	400921fb 	.word	0x400921fb
    9f68:	00000000 	.word	0x00000000
    9f6c:	20000570 	.word	0x20000570

00009f70 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_>:

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

Odometrie::Odometrie(QuadratureCoderHandler* roueCodeuseGauche, QuadratureCoderHandler* roueCodeuseDroite)
    9f70:	b580      	push	{r7, lr}
    9f72:	b086      	sub	sp, #24
    9f74:	af00      	add	r7, sp, #0
    9f76:	60f8      	str	r0, [r7, #12]
    9f78:	60b9      	str	r1, [r7, #8]
    9f7a:	607a      	str	r2, [r7, #4]
: rayonRoueCodeuse(RAYON_ROUE)
    9f7c:	68fb      	ldr	r3, [r7, #12]
    9f7e:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9f82:	4618      	mov	r0, r3
    9f84:	f004 feac 	bl	ece0 <_ZN17PositionPlusAngleC1Ev>
    9f88:	68f9      	ldr	r1, [r7, #12]
    9f8a:	f04f 0200 	mov.w	r2, #0	; 0x0
    9f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9f92:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    9f96:	e9c1 230e 	strd	r2, r3, [r1, #56]
{

    vitesseLineaire =0;
    9f9a:	68fa      	ldr	r2, [r7, #12]
    9f9c:	4b4c      	ldr	r3, [pc, #304]	(a0d0 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x160>)
    9f9e:	6153      	str	r3, [r2, #20]
    vitesseAngulaire=0;
    9fa0:	68fa      	ldr	r2, [r7, #12]
    9fa2:	4b4b      	ldr	r3, [pc, #300]	(a0d0 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x160>)
    9fa4:	6193      	str	r3, [r2, #24]
    entraxe=TAILLE_ENTRAXE;
    9fa6:	68f9      	ldr	r1, [r7, #12]
    9fa8:	a245      	add	r2, pc, #276	(adr r2, a0c0 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x150>)
    9faa:	ca0c      	ldmia	r2!, {r2, r3}
    9fac:	e9c1 230c 	strd	r2, r3, [r1, #48]
    rayonRoueCodeuse=RAYON_ROUE;
    9fb0:	68f9      	ldr	r1, [r7, #12]
    9fb2:	f04f 0200 	mov.w	r2, #0	; 0x0
    9fb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9fba:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    9fbe:	e9c1 230e 	strd	r2, r3, [r1, #56]
    nbTicksParTour=NBR_TICK_PAR_TOUR;
    9fc2:	68f9      	ldr	r1, [r7, #12]
    9fc4:	f04f 0200 	mov.w	r2, #0	; 0x0
    9fc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9fcc:	f503 0340 	add.w	r3, r3, #12582912	; 0xc00000
    9fd0:	e9c1 2310 	strd	r2, r3, [r1, #64]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue
    9fd4:	68fb      	ldr	r3, [r7, #12]
    9fd6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]
    9fda:	4610      	mov	r0, r2
    9fdc:	4619      	mov	r1, r3
    9fde:	a23a      	add	r2, pc, #232	(adr r2, a0c8 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x158>)
    9fe0:	ca0c      	ldmia	r2!, {r2, r3}
    9fe2:	f010 f8e5 	bl	1a1b0 <__aeabi_dmul>
    9fe6:	4602      	mov	r2, r0
    9fe8:	460b      	mov	r3, r1
    9fea:	4610      	mov	r0, r2
    9fec:	4619      	mov	r1, r3
    9fee:	68fb      	ldr	r3, [r7, #12]
    9ff0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]
    9ff4:	f010 fa06 	bl	1a404 <__aeabi_ddiv>
    9ff8:	4602      	mov	r2, r0
    9ffa:	460b      	mov	r3, r1
    9ffc:	68f9      	ldr	r1, [r7, #12]
    9ffe:	e9c1 2312 	strd	r2, r3, [r1, #72]

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1
    a002:	68fb      	ldr	r3, [r7, #12]
    a004:	e9d3 2312 	ldrd	r2, r3, [r3, #72]
    a008:	4610      	mov	r0, r2
    a00a:	4619      	mov	r1, r3
    a00c:	f04f 0200 	mov.w	r2, #0	; 0x0
    a010:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    a014:	f010 f8cc 	bl	1a1b0 <__aeabi_dmul>
    a018:	4602      	mov	r2, r0
    a01a:	460b      	mov	r3, r1
    a01c:	4610      	mov	r0, r2
    a01e:	4619      	mov	r1, r3
    a020:	68fb      	ldr	r3, [r7, #12]
    a022:	e9d3 230c 	ldrd	r2, r3, [r3, #48]
    a026:	f010 f9ed 	bl	1a404 <__aeabi_ddiv>
    a02a:	4602      	mov	r2, r0
    a02c:	460b      	mov	r3, r1
    a02e:	68f9      	ldr	r1, [r7, #12]
    a030:	e9c1 2314 	strd	r2, r3, [r1, #80]

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a034:	f04f 0300 	mov.w	r3, #0	; 0x0
    a038:	617b      	str	r3, [r7, #20]
    a03a:	e017      	b.n	a06c <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0xfc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
    a03c:	697b      	ldr	r3, [r7, #20]
    a03e:	68fa      	ldr	r2, [r7, #12]
    a040:	f103 0308 	add.w	r3, r3, #8	; 0x8
    a044:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a048:	4413      	add	r3, r2
    a04a:	f04f 0200 	mov.w	r2, #0	; 0x0
    a04e:	605a      	str	r2, [r3, #4]
        prevDeltaTicksRoueGauche[i] = 0;
    a050:	697b      	ldr	r3, [r7, #20]
    a052:	68fa      	ldr	r2, [r7, #12]
    a054:	f103 0306 	add.w	r3, r3, #6	; 0x6
    a058:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a05c:	4413      	add	r3, r2
    a05e:	f04f 0200 	mov.w	r2, #0	; 0x0
    a062:	605a      	str	r2, [r3, #4]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a064:	697b      	ldr	r3, [r7, #20]
    a066:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a06a:	617b      	str	r3, [r7, #20]
    a06c:	697b      	ldr	r3, [r7, #20]
    a06e:	2b01      	cmp	r3, #1
    a070:	dde4      	ble.n	a03c <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0xcc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
        prevDeltaTicksRoueGauche[i] = 0;
    }

    this->roueCodeuseGauche = roueCodeuseGauche;
    a072:	68fa      	ldr	r2, [r7, #12]
    a074:	68bb      	ldr	r3, [r7, #8]
    a076:	6053      	str	r3, [r2, #4]
    this->roueCodeuseDroite = roueCodeuseDroite;
    a078:	68fa      	ldr	r2, [r7, #12]
    a07a:	687b      	ldr	r3, [r7, #4]
    a07c:	6013      	str	r3, [r2, #0]
    Odometrie::odometrie = this;
    a07e:	4a15      	ldr	r2, [pc, #84]	(a0d4 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x164>)
    a080:	68fb      	ldr	r3, [r7, #12]
    a082:	6013      	str	r3, [r2, #0]

    posX = 0.0;
    a084:	68f9      	ldr	r1, [r7, #12]
    a086:	f04f 0200 	mov.w	r2, #0	; 0x0
    a08a:	f04f 0300 	mov.w	r3, #0	; 0x0
    a08e:	e9c1 2316 	strd	r2, r3, [r1, #88]
    posY = 0.0;
    a092:	68f9      	ldr	r1, [r7, #12]
    a094:	f04f 0200 	mov.w	r2, #0	; 0x0
    a098:	f04f 0300 	mov.w	r3, #0	; 0x0
    a09c:	e9c1 2318 	strd	r2, r3, [r1, #96]
    ang = 0.0;
    a0a0:	68f9      	ldr	r1, [r7, #12]
    a0a2:	f04f 0200 	mov.w	r2, #0	; 0x0
    a0a6:	f04f 0300 	mov.w	r3, #0	; 0x0
    a0aa:	e9c1 231a 	strd	r2, r3, [r1, #104]

    absAngle = 0.0;
    a0ae:	68fa      	ldr	r2, [r7, #12]
    a0b0:	4b07      	ldr	r3, [pc, #28]	(a0d0 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x160>)
    a0b2:	6713      	str	r3, [r2, #112]

}
    a0b4:	68fb      	ldr	r3, [r7, #12]
    a0b6:	4618      	mov	r0, r3
    a0b8:	f107 0718 	add.w	r7, r7, #24	; 0x18
    a0bc:	46bd      	mov	sp, r7
    a0be:	bd80      	pop	{r7, pc}
    a0c0:	045fe111 	.word	0x045fe111
    a0c4:	4075908d 	.word	0x4075908d
    a0c8:	54442d18 	.word	0x54442d18
    a0cc:	400921fb 	.word	0x400921fb
    a0d0:	00000000 	.word	0x00000000
    a0d4:	20000570 	.word	0x20000570

0000a0d8 <_ZN14PIDFilterAngleC2Ev>:

const float PIDFilterAngle::Kp = FILTER_ANGLE_KP;
const float PIDFilterAngle::Kd = FILTER_ANGLE_KD;
const float PIDFilterAngle::Ki = FILTER_ANGLE_KI;

PIDFilterAngle::PIDFilterAngle() :
    a0d8:	b480      	push	{r7}
    a0da:	b083      	sub	sp, #12
    a0dc:	af00      	add	r7, sp, #0
    a0de:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a0e0:	687a      	ldr	r2, [r7, #4]
    a0e2:	4b06      	ldr	r3, [pc, #24]	(a0fc <_ZN14PIDFilterAngleC2Ev+0x24>)
    a0e4:	6013      	str	r3, [r2, #0]
    a0e6:	687a      	ldr	r2, [r7, #4]
    a0e8:	4b04      	ldr	r3, [pc, #16]	(a0fc <_ZN14PIDFilterAngleC2Ev+0x24>)
    a0ea:	6053      	str	r3, [r2, #4]
{
}
    a0ec:	687b      	ldr	r3, [r7, #4]
    a0ee:	4618      	mov	r0, r3
    a0f0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a0f4:	46bd      	mov	sp, r7
    a0f6:	bc80      	pop	{r7}
    a0f8:	4770      	bx	lr
    a0fa:	46c0      	nop			(mov r8, r8)
    a0fc:	00000000 	.word	0x00000000

0000a100 <_ZN14PIDFilterAngleC1Ev>:

const float PIDFilterAngle::Kp = FILTER_ANGLE_KP;
const float PIDFilterAngle::Kd = FILTER_ANGLE_KD;
const float PIDFilterAngle::Ki = FILTER_ANGLE_KI;

PIDFilterAngle::PIDFilterAngle() :
    a100:	b480      	push	{r7}
    a102:	b083      	sub	sp, #12
    a104:	af00      	add	r7, sp, #0
    a106:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a108:	687a      	ldr	r2, [r7, #4]
    a10a:	4b06      	ldr	r3, [pc, #24]	(a124 <_ZN14PIDFilterAngleC1Ev+0x24>)
    a10c:	6013      	str	r3, [r2, #0]
    a10e:	687a      	ldr	r2, [r7, #4]
    a110:	4b04      	ldr	r3, [pc, #16]	(a124 <_ZN14PIDFilterAngleC1Ev+0x24>)
    a112:	6053      	str	r3, [r2, #4]
{
}
    a114:	687b      	ldr	r3, [r7, #4]
    a116:	4618      	mov	r0, r3
    a118:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a11c:	46bd      	mov	sp, r7
    a11e:	bc80      	pop	{r7}
    a120:	4770      	bx	lr
    a122:	46c0      	nop			(mov r8, r8)
    a124:	00000000 	.word	0x00000000

0000a128 <_ZN14PIDFilterAngle16getFilteredValueEf>:

float PIDFilterAngle::getFilteredValue(Angle erreur){
    a128:	b590      	push	{r4, r7, lr}
    a12a:	b087      	sub	sp, #28
    a12c:	af00      	add	r7, sp, #0
    a12e:	6078      	str	r0, [r7, #4]
    a130:	6039      	str	r1, [r7, #0]
    sommeErreurs=sommeErreurs*FILTER_ANGLE_COEF+erreur;
    a132:	687b      	ldr	r3, [r7, #4]
    a134:	681b      	ldr	r3, [r3, #0]
    a136:	4618      	mov	r0, r3
    a138:	6839      	ldr	r1, [r7, #0]
    a13a:	f010 fb4f 	bl	1a7dc <__addsf3>
    a13e:	4603      	mov	r3, r0
    a140:	461a      	mov	r2, r3
    a142:	687b      	ldr	r3, [r7, #4]
    a144:	601a      	str	r2, [r3, #0]
    Angle proportionnel = erreur;
    a146:	683b      	ldr	r3, [r7, #0]
    a148:	60fb      	str	r3, [r7, #12]
    Angle integrale = sommeErreurs;
    a14a:	687b      	ldr	r3, [r7, #4]
    a14c:	681b      	ldr	r3, [r3, #0]
    a14e:	613b      	str	r3, [r7, #16]
    Angle derivee = erreur - erreurPrecedente;
    a150:	687b      	ldr	r3, [r7, #4]
    a152:	685b      	ldr	r3, [r3, #4]
    a154:	6838      	ldr	r0, [r7, #0]
    a156:	4619      	mov	r1, r3
    a158:	f010 fb3e 	bl	1a7d8 <__aeabi_fsub>
    a15c:	4603      	mov	r3, r0
    a15e:	617b      	str	r3, [r7, #20]
    erreurPrecedente=erreur;
    a160:	687a      	ldr	r2, [r7, #4]
    a162:	683b      	ldr	r3, [r7, #0]
    a164:	6053      	str	r3, [r2, #4]
    return proportionnel*Kp
         + integrale*Ki
         + derivee*Kd;
    a166:	68f8      	ldr	r0, [r7, #12]
    a168:	490f      	ldr	r1, [pc, #60]	(a1a8 <_ZN14PIDFilterAngle16getFilteredValueEf+0x80>)
    a16a:	f010 fc3f 	bl	1a9ec <__aeabi_fmul>
    a16e:	4603      	mov	r3, r0
    a170:	461c      	mov	r4, r3
    a172:	6938      	ldr	r0, [r7, #16]
    a174:	490d      	ldr	r1, [pc, #52]	(a1ac <_ZN14PIDFilterAngle16getFilteredValueEf+0x84>)
    a176:	f010 fc39 	bl	1a9ec <__aeabi_fmul>
    a17a:	4603      	mov	r3, r0
    a17c:	4620      	mov	r0, r4
    a17e:	4619      	mov	r1, r3
    a180:	f010 fb2c 	bl	1a7dc <__addsf3>
    a184:	4603      	mov	r3, r0
    a186:	461c      	mov	r4, r3
    a188:	6978      	ldr	r0, [r7, #20]
    a18a:	4909      	ldr	r1, [pc, #36]	(a1b0 <_ZN14PIDFilterAngle16getFilteredValueEf+0x88>)
    a18c:	f010 fc2e 	bl	1a9ec <__aeabi_fmul>
    a190:	4603      	mov	r3, r0
    a192:	4620      	mov	r0, r4
    a194:	4619      	mov	r1, r3
    a196:	f010 fb21 	bl	1a7dc <__addsf3>
    a19a:	4603      	mov	r3, r0
}
    a19c:	4618      	mov	r0, r3
    a19e:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    a1a2:	46bd      	mov	sp, r7
    a1a4:	bd90      	pop	{r4, r7, pc}
    a1a6:	46c0      	nop			(mov r8, r8)
    a1a8:	42960000 	.word	0x42960000
    a1ac:	3f333333 	.word	0x3f333333
    a1b0:	3f000000 	.word	0x3f000000

0000a1b4 <_ZN17PIDFilterDistanceC2Ev>:
const float PIDFilterDistance::Kp = FILTER_LINEAIRE_KP;
const float PIDFilterDistance::Kd = FILTER_LINEAIRE_KD;
const float PIDFilterDistance::Ki = FILTER_LINEAIRE_KI;


PIDFilterDistance::PIDFilterDistance() :
    a1b4:	b480      	push	{r7}
    a1b6:	b083      	sub	sp, #12
    a1b8:	af00      	add	r7, sp, #0
    a1ba:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a1bc:	687a      	ldr	r2, [r7, #4]
    a1be:	4b06      	ldr	r3, [pc, #24]	(a1d8 <_ZN17PIDFilterDistanceC2Ev+0x24>)
    a1c0:	6013      	str	r3, [r2, #0]
    a1c2:	687a      	ldr	r2, [r7, #4]
    a1c4:	4b04      	ldr	r3, [pc, #16]	(a1d8 <_ZN17PIDFilterDistanceC2Ev+0x24>)
    a1c6:	6053      	str	r3, [r2, #4]
{
}
    a1c8:	687b      	ldr	r3, [r7, #4]
    a1ca:	4618      	mov	r0, r3
    a1cc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a1d0:	46bd      	mov	sp, r7
    a1d2:	bc80      	pop	{r7}
    a1d4:	4770      	bx	lr
    a1d6:	46c0      	nop			(mov r8, r8)
    a1d8:	00000000 	.word	0x00000000

0000a1dc <_ZN17PIDFilterDistanceC1Ev>:
const float PIDFilterDistance::Kp = FILTER_LINEAIRE_KP;
const float PIDFilterDistance::Kd = FILTER_LINEAIRE_KD;
const float PIDFilterDistance::Ki = FILTER_LINEAIRE_KI;


PIDFilterDistance::PIDFilterDistance() :
    a1dc:	b480      	push	{r7}
    a1de:	b083      	sub	sp, #12
    a1e0:	af00      	add	r7, sp, #0
    a1e2:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a1e4:	687a      	ldr	r2, [r7, #4]
    a1e6:	4b06      	ldr	r3, [pc, #24]	(a200 <_ZN17PIDFilterDistanceC1Ev+0x24>)
    a1e8:	6013      	str	r3, [r2, #0]
    a1ea:	687a      	ldr	r2, [r7, #4]
    a1ec:	4b04      	ldr	r3, [pc, #16]	(a200 <_ZN17PIDFilterDistanceC1Ev+0x24>)
    a1ee:	6053      	str	r3, [r2, #4]
{
}
    a1f0:	687b      	ldr	r3, [r7, #4]
    a1f2:	4618      	mov	r0, r3
    a1f4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a1f8:	46bd      	mov	sp, r7
    a1fa:	bc80      	pop	{r7}
    a1fc:	4770      	bx	lr
    a1fe:	46c0      	nop			(mov r8, r8)
    a200:	00000000 	.word	0x00000000

0000a204 <_ZN17PIDFilterDistance16getFilteredValueEf>:

float PIDFilterDistance::getFilteredValue(Distance erreur){
    a204:	b590      	push	{r4, r7, lr}
    a206:	b087      	sub	sp, #28
    a208:	af00      	add	r7, sp, #0
    a20a:	6078      	str	r0, [r7, #4]
    a20c:	6039      	str	r1, [r7, #0]
    sommeErreurs=sommeErreurs*FILTER_LINEAIRE_COEF+erreur;
    a20e:	687b      	ldr	r3, [r7, #4]
    a210:	681b      	ldr	r3, [r3, #0]
    a212:	4618      	mov	r0, r3
    a214:	6839      	ldr	r1, [r7, #0]
    a216:	f010 fae1 	bl	1a7dc <__addsf3>
    a21a:	4603      	mov	r3, r0
    a21c:	461a      	mov	r2, r3
    a21e:	687b      	ldr	r3, [r7, #4]
    a220:	601a      	str	r2, [r3, #0]
    Distance proportionnel = erreur;
    a222:	683b      	ldr	r3, [r7, #0]
    a224:	60fb      	str	r3, [r7, #12]
    Distance integrale = sommeErreurs;
    a226:	687b      	ldr	r3, [r7, #4]
    a228:	681b      	ldr	r3, [r3, #0]
    a22a:	613b      	str	r3, [r7, #16]
    Distance derivee = erreur - erreurPrecedente;
    a22c:	687b      	ldr	r3, [r7, #4]
    a22e:	685b      	ldr	r3, [r3, #4]
    a230:	6838      	ldr	r0, [r7, #0]
    a232:	4619      	mov	r1, r3
    a234:	f010 fad0 	bl	1a7d8 <__aeabi_fsub>
    a238:	4603      	mov	r3, r0
    a23a:	617b      	str	r3, [r7, #20]
    erreurPrecedente=erreur;
    a23c:	687a      	ldr	r2, [r7, #4]
    a23e:	683b      	ldr	r3, [r7, #0]
    a240:	6053      	str	r3, [r2, #4]
    return proportionnel*Kp
         + integrale*Ki
         + derivee*Kd;
    a242:	68f8      	ldr	r0, [r7, #12]
    a244:	490f      	ldr	r1, [pc, #60]	(a284 <_ZN17PIDFilterDistance16getFilteredValueEf+0x80>)
    a246:	f010 fbd1 	bl	1a9ec <__aeabi_fmul>
    a24a:	4603      	mov	r3, r0
    a24c:	461c      	mov	r4, r3
    a24e:	6938      	ldr	r0, [r7, #16]
    a250:	490d      	ldr	r1, [pc, #52]	(a288 <_ZN17PIDFilterDistance16getFilteredValueEf+0x84>)
    a252:	f010 fbcb 	bl	1a9ec <__aeabi_fmul>
    a256:	4603      	mov	r3, r0
    a258:	4620      	mov	r0, r4
    a25a:	4619      	mov	r1, r3
    a25c:	f010 fabe 	bl	1a7dc <__addsf3>
    a260:	4603      	mov	r3, r0
    a262:	461c      	mov	r4, r3
    a264:	6978      	ldr	r0, [r7, #20]
    a266:	4909      	ldr	r1, [pc, #36]	(a28c <_ZN17PIDFilterDistance16getFilteredValueEf+0x88>)
    a268:	f010 fbc0 	bl	1a9ec <__aeabi_fmul>
    a26c:	4603      	mov	r3, r0
    a26e:	4620      	mov	r0, r4
    a270:	4619      	mov	r1, r3
    a272:	f010 fab3 	bl	1a7dc <__addsf3>
    a276:	4603      	mov	r3, r0
}
    a278:	4618      	mov	r0, r3
    a27a:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    a27e:	46bd      	mov	sp, r7
    a280:	bd90      	pop	{r4, r7, pc}
    a282:	46c0      	nop			(mov r8, r8)
    a284:	3e4ccccd 	.word	0x3e4ccccd
    a288:	3ba3d70a 	.word	0x3ba3d70a
    a28c:	3f333333 	.word	0x3f333333

0000a290 <_ZN5Debug3runEv>:
//#include "krabipacket.h"

// DMA
#define ADC3_DR_ADDRESS     ((uint32_t)0x4001224C)

void Debug::run()
    a290:	b480      	push	{r7}
    a292:	af00      	add	r7, sp, #0
{
    // test run
}
    a294:	46bd      	mov	sp, r7
    a296:	bc80      	pop	{r7}
    a298:	4770      	bx	lr
    a29a:	46c0      	nop			(mov r8, r8)

0000a29c <_ZN5Debug27__ADCSampleF4_adc_configureEv>:
    {
        convertedValue = __ADCSampleF4_adc_convert();//Read the ADC converted value
    }
}

void Debug::__ADCSampleF4_adc_configure()
    a29c:	b480      	push	{r7}
    a29e:	af00      	add	r7, sp, #0
    //Enable ADC conversion
    ADC_Cmd(ADC1,ENABLE);
    //Select the channel to be read from
    ADC_RegularChannelConfig(ADC1,ADC_Channel_10,1,ADC_SampleTime_144Cycles);
#endif
}
    a2a0:	46bd      	mov	sp, r7
    a2a2:	bc80      	pop	{r7}
    a2a4:	4770      	bx	lr
    a2a6:	46c0      	nop			(mov r8, r8)

0000a2a8 <_ZN5Debug25__ADCSampleF4_adc_convertEv>:

int Debug::__ADCSampleF4_adc_convert(){
    a2a8:	b480      	push	{r7}
    a2aa:	b083      	sub	sp, #12
    a2ac:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx)
    ADC_SoftwareStartConv(ADC1);//Start the conversion
    while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));//Processing the conversion
    return ADC_GetConversionValue(ADC1); //Return the converted data
#endif
}
    a2ae:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a2b2:	46bd      	mov	sp, r7
    a2b4:	bc80      	pop	{r7}
    a2b6:	4770      	bx	lr

0000a2b8 <_ZN5Debug15testADCSampleF4Ev>:
}

/**
    @brief Read the PC0 pin
*/
void Debug::testADCSampleF4()
    a2b8:	b580      	push	{r7, lr}
    a2ba:	b082      	sub	sp, #8
    a2bc:	af00      	add	r7, sp, #0
{
    __ADCSampleF4_adc_configure();//Start configuration
    a2be:	f7ff ffed 	bl	a29c <_ZN5Debug27__ADCSampleF4_adc_configureEv>

    int convertedValue = -1;
    a2c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a2c6:	607b      	str	r3, [r7, #4]
    while(true)
    {
        convertedValue = __ADCSampleF4_adc_convert();//Read the ADC converted value
    a2c8:	f7ff ffee 	bl	a2a8 <_ZN5Debug25__ADCSampleF4_adc_convertEv>
    a2cc:	4603      	mov	r3, r0
    a2ce:	607b      	str	r3, [r7, #4]
    a2d0:	e7fa      	b.n	a2c8 <_ZN5Debug15testADCSampleF4Ev+0x10>
    a2d2:	46c0      	nop			(mov r8, r8)

0000a2d4 <_ZN5Debug10testSharpsEv>:
    while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));//Processing the conversion
    return ADC_GetConversionValue(ADC1); //Return the converted data
#endif
}

void Debug::testSharps()
    a2d4:	b480      	push	{r7}
    a2d6:	af00      	add	r7, sp, #0
        for (int i = 0; i < 1000; i++)
        {
        }*/
  //  }

}
    a2d8:	46bd      	mov	sp, r7
    a2da:	bc80      	pop	{r7}
    a2dc:	4770      	bx	lr
    a2de:	46c0      	nop			(mov r8, r8)

0000a2e0 <_ZN5Debug19testADC_DMASampleF4Ev>:


//__IO uint32_t ADC3ConvertedValue[4];
__IO uint16_t ADC3ConvertedValueN = 0;

void Debug::testADC_DMASampleF4()
    a2e0:	b480      	push	{r7}
    a2e2:	af00      	add	r7, sp, #0
    while(true)
    {
        convertedValue = ADC3ConvertedValueN;//Read the ADC converted value
    }
#endif
}
    a2e4:	46bd      	mov	sp, r7
    a2e6:	bc80      	pop	{r7}
    a2e8:	4770      	bx	lr
    a2ea:	46c0      	nop			(mov r8, r8)

0000a2ec <_ZN5Debug22__ADC_DMASampleF4_initEv>:

void Debug::__ADC_DMASampleF4_init(void)
    a2ec:	b480      	push	{r7}
    a2ee:	af00      	add	r7, sp, #0
    ADC_DMACmd(ADC3, ENABLE);

    /* Enable ADC3 */
    ADC_Cmd(ADC3, ENABLE);
#endif
}
    a2f0:	46bd      	mov	sp, r7
    a2f2:	bc80      	pop	{r7}
    a2f4:	4770      	bx	lr
    a2f6:	46c0      	nop			(mov r8, r8)

0000a2f8 <_ZN5Debug10testRemoteEv>:
        else
            Led::setOn(0);
    }
}

void Debug::testRemote()
    a2f8:	b580      	push	{r7, lr}
    a2fa:	b082      	sub	sp, #8
    a2fc:	af00      	add	r7, sp, #0
{
    Remote::getSingleton();
    a2fe:	f002 fb33 	bl	c968 <_ZN6Remote12getSingletonEv>
//    packet.add(6);
//    packet.add(2048);

//    Remote::getSingleton()->sendData(&packet);

    int timer = 0;
    a302:	f04f 0300 	mov.w	r3, #0	; 0x0
    a306:	607b      	str	r3, [r7, #4]
    while(true)
    {
        if (Remote::getSingleton()->dataAvailable()) {
    a308:	f002 fb2e 	bl	c968 <_ZN6Remote12getSingletonEv>
    a30c:	4603      	mov	r3, r0
    a30e:	4618      	mov	r0, r3
    a310:	f002 f9ea 	bl	c6e8 <_ZN6Remote13dataAvailableEv>
    a314:	4603      	mov	r3, r0
    a316:	2b00      	cmp	r3, #0
    a318:	d009      	beq.n	a32e <_ZN5Debug10testRemoteEv+0x36>
            Remote::getSingleton()->receiveData();
    a31a:	f002 fb25 	bl	c968 <_ZN6Remote12getSingletonEv>
    a31e:	4603      	mov	r3, r0
    a320:	4618      	mov	r0, r3
    a322:	f002 f9f7 	bl	c714 <_ZN6Remote11receiveDataEv>
            Led::toggle(0);
    a326:	f04f 0000 	mov.w	r0, #0	; 0x0
    a32a:	f001 fd55 	bl	bdd8 <_ZN3Led6toggleEi>
        }

        if (timer==0) {
    a32e:	687b      	ldr	r3, [r7, #4]
    a330:	2b00      	cmp	r3, #0
    a332:	d10b      	bne.n	a34c <_ZN5Debug10testRemoteEv+0x54>
            Remote::getSingleton()->sendData('a');
    a334:	f002 fb18 	bl	c968 <_ZN6Remote12getSingletonEv>
    a338:	4603      	mov	r3, r0
    a33a:	4618      	mov	r0, r3
    a33c:	f04f 0161 	mov.w	r1, #97	; 0x61
    a340:	f002 fa2c 	bl	c79c <_ZN6Remote8sendDataEi>
            Led::toggle(0);
    a344:	f04f 0000 	mov.w	r0, #0	; 0x0
    a348:	f001 fd46 	bl	bdd8 <_ZN3Led6toggleEi>
        }

        timer++;
    a34c:	687b      	ldr	r3, [r7, #4]
    a34e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a352:	607b      	str	r3, [r7, #4]
        if (timer==1000000)
    a354:	687a      	ldr	r2, [r7, #4]
    a356:	4b03      	ldr	r3, [pc, #12]	(a364 <_ZN5Debug10testRemoteEv+0x6c>)
    a358:	429a      	cmp	r2, r3
    a35a:	d1d5      	bne.n	a308 <_ZN5Debug10testRemoteEv+0x10>
            timer = 0;
    a35c:	f04f 0300 	mov.w	r3, #0	; 0x0
    a360:	607b      	str	r3, [r7, #4]
    a362:	e7d1      	b.n	a308 <_ZN5Debug10testRemoteEv+0x10>
    a364:	000f4240 	.word	0x000f4240

0000a368 <_ZN5Debug11testTiretteEP7Tirette>:

        for(int i=0; i<10000000; i++);
    }
}*/

void Debug::testTirette(Tirette* t)
    a368:	b580      	push	{r7, lr}
    a36a:	b082      	sub	sp, #8
    a36c:	af00      	add	r7, sp, #0
    a36e:	6078      	str	r0, [r7, #4]
{
    while(true)
    {
        if (t->enlevee())
    a370:	6878      	ldr	r0, [r7, #4]
    a372:	f002 ff3d 	bl	d1f0 <_ZNK7Tirette7enleveeEv>
    a376:	4603      	mov	r3, r0
    a378:	2b00      	cmp	r3, #0
    a37a:	d004      	beq.n	a386 <_ZN5Debug11testTiretteEP7Tirette+0x1e>
            Led::setOff(0);
    a37c:	f04f 0000 	mov.w	r0, #0	; 0x0
    a380:	f001 fcba 	bl	bcf8 <_ZN3Led6setOffEi>
    a384:	e7f4      	b.n	a370 <_ZN5Debug11testTiretteEP7Tirette+0x8>
        else
            Led::setOn(0);
    a386:	f04f 0000 	mov.w	r0, #0	; 0x0
    a38a:	f001 fcf5 	bl	bd78 <_ZN3Led5setOnEi>
    a38e:	e7ef      	b.n	a370 <_ZN5Debug11testTiretteEP7Tirette+0x8>

0000a390 <_ZN5Debug16testBrasLaterauxEv>:
        l += rcg->getTickValue();
        for(int i=0; i<1000000; i++);
    }
}

void Debug::testBrasLateraux()
    a390:	b580      	push	{r7, lr}
    a392:	b082      	sub	sp, #8
    a394:	af00      	add	r7, sp, #0
        porteDroiteBas->goToAngle(90.0f);
        porteGaucheBas->goToAngle(90.0f);
        for (int i = 0; i < 10000000; i++);
    }*/

    BrasLateraux::initBrasLateraux();
    a396:	f7fa ffdb 	bl	5350 <_ZN12BrasLateraux16initBrasLaterauxEv>

    while(true)
    {
        BrasLateraux::getLeft()->expand();
    a39a:	f7fb f871 	bl	5480 <_ZN12BrasLateraux7getLeftEv>
    a39e:	4603      	mov	r3, r0
    a3a0:	4618      	mov	r0, r3
    a3a2:	f7fa ff95 	bl	52d0 <_ZN12BrasLateraux6expandEv>
        BrasLateraux::getRight()->expand();
    a3a6:	f7fb f85b 	bl	5460 <_ZN12BrasLateraux8getRightEv>
    a3aa:	4603      	mov	r3, r0
    a3ac:	4618      	mov	r0, r3
    a3ae:	f7fa ff8f 	bl	52d0 <_ZN12BrasLateraux6expandEv>
        Led::toggle(0);
    a3b2:	f04f 0000 	mov.w	r0, #0	; 0x0
    a3b6:	f001 fd0f 	bl	bdd8 <_ZN3Led6toggleEi>

        for(int i=0; i<10000000; i++);
    a3ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    a3be:	603b      	str	r3, [r7, #0]
    a3c0:	e003      	b.n	a3ca <_ZN5Debug16testBrasLaterauxEv+0x3a>
    a3c2:	683b      	ldr	r3, [r7, #0]
    a3c4:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a3c8:	603b      	str	r3, [r7, #0]
    a3ca:	683a      	ldr	r2, [r7, #0]
    a3cc:	4b0f      	ldr	r3, [pc, #60]	(a40c <_ZN5Debug16testBrasLaterauxEv+0x7c>)
    a3ce:	429a      	cmp	r2, r3
    a3d0:	ddf7      	ble.n	a3c2 <_ZN5Debug16testBrasLaterauxEv+0x32>
        /*BrasLateral::getRight()->front();
        Led::toggle(0);

        for(int i=0; i<10000000; i++);*/

        BrasLateraux::getLeft()->collapse();
    a3d2:	f7fb f855 	bl	5480 <_ZN12BrasLateraux7getLeftEv>
    a3d6:	4603      	mov	r3, r0
    a3d8:	4618      	mov	r0, r3
    a3da:	f7fa ff69 	bl	52b0 <_ZN12BrasLateraux8collapseEv>
        BrasLateraux::getRight()->collapse();
    a3de:	f7fb f83f 	bl	5460 <_ZN12BrasLateraux8getRightEv>
    a3e2:	4603      	mov	r3, r0
    a3e4:	4618      	mov	r0, r3
    a3e6:	f7fa ff63 	bl	52b0 <_ZN12BrasLateraux8collapseEv>
        Led::toggle(0);
    a3ea:	f04f 0000 	mov.w	r0, #0	; 0x0
    a3ee:	f001 fcf3 	bl	bdd8 <_ZN3Led6toggleEi>

        for(int i=0; i<10000000; i++);
    a3f2:	f04f 0300 	mov.w	r3, #0	; 0x0
    a3f6:	607b      	str	r3, [r7, #4]
    a3f8:	e003      	b.n	a402 <_ZN5Debug16testBrasLaterauxEv+0x72>
    a3fa:	687b      	ldr	r3, [r7, #4]
    a3fc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a400:	607b      	str	r3, [r7, #4]
    a402:	687a      	ldr	r2, [r7, #4]
    a404:	4b01      	ldr	r3, [pc, #4]	(a40c <_ZN5Debug16testBrasLaterauxEv+0x7c>)
    a406:	429a      	cmp	r2, r3
    a408:	ddf7      	ble.n	a3fa <_ZN5Debug16testBrasLaterauxEv+0x6a>
    a40a:	e7c6      	b.n	a39a <_ZN5Debug16testBrasLaterauxEv+0xa>
    a40c:	0098967f 	.word	0x0098967f

0000a410 <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_>:
    /* Enable ADC3 */
    ADC_Cmd(ADC3, ENABLE);
#endif
}

void Debug::testQuadrature(QuadratureCoderHandler* rcg, QuadratureCoderHandler* rcd)
    a410:	b580      	push	{r7, lr}
    a412:	b086      	sub	sp, #24
    a414:	af00      	add	r7, sp, #0
    a416:	6078      	str	r0, [r7, #4]
    a418:	6039      	str	r1, [r7, #0]
{
    long r = 0, l = 0;
    a41a:	f04f 0300 	mov.w	r3, #0	; 0x0
    a41e:	60fb      	str	r3, [r7, #12]
    a420:	f04f 0300 	mov.w	r3, #0	; 0x0
    a424:	613b      	str	r3, [r7, #16]
    while(true)
    {
        r += rcd->getTickValue();
    a426:	6838      	ldr	r0, [r7, #0]
    a428:	f002 f892 	bl	c550 <_ZN22QuadratureCoderHandler12getTickValueEv>
    a42c:	4603      	mov	r3, r0
    a42e:	b29b      	uxth	r3, r3
    a430:	b21a      	sxth	r2, r3
    a432:	68fb      	ldr	r3, [r7, #12]
    a434:	4413      	add	r3, r2
    a436:	60fb      	str	r3, [r7, #12]
        l += rcg->getTickValue();
    a438:	6878      	ldr	r0, [r7, #4]
    a43a:	f002 f889 	bl	c550 <_ZN22QuadratureCoderHandler12getTickValueEv>
    a43e:	4603      	mov	r3, r0
    a440:	b29b      	uxth	r3, r3
    a442:	b21a      	sxth	r2, r3
    a444:	693b      	ldr	r3, [r7, #16]
    a446:	4413      	add	r3, r2
    a448:	613b      	str	r3, [r7, #16]
        for(int i=0; i<1000000; i++);
    a44a:	f04f 0300 	mov.w	r3, #0	; 0x0
    a44e:	617b      	str	r3, [r7, #20]
    a450:	e003      	b.n	a45a <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x4a>
    a452:	697b      	ldr	r3, [r7, #20]
    a454:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a458:	617b      	str	r3, [r7, #20]
    a45a:	697a      	ldr	r2, [r7, #20]
    a45c:	4b01      	ldr	r3, [pc, #4]	(a464 <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x54>)
    a45e:	429a      	cmp	r2, r3
    a460:	ddf7      	ble.n	a452 <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x42>
    a462:	e7e0      	b.n	a426 <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x16>
    a464:	000f423f 	.word	0x000f423f

0000a468 <_ZN5Debug15testServoAnalogEv>:
void Debug::run()
{
    // test run
}

void Debug::testServoAnalog()
    a468:	b580      	push	{r7, lr}
    a46a:	b094      	sub	sp, #80
    a46c:	af02      	add	r7, sp, #8
{
    Timer* timer1 = new Timer(TIM1, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    a46e:	f04f 000c 	mov.w	r0, #12	; 0xc
    a472:	f003 fedd 	bl	e230 <_Znwj>
    a476:	4603      	mov	r3, r0
    a478:	603b      	str	r3, [r7, #0]
    a47a:	683b      	ldr	r3, [r7, #0]
    a47c:	2b00      	cmp	r3, #0
    a47e:	d00d      	beq.n	a49c <_ZN5Debug15testServoAnalogEv+0x34>
    a480:	f04f 0300 	mov.w	r3, #0	; 0x0
    a484:	9300      	str	r3, [sp, #0]
    a486:	6838      	ldr	r0, [r7, #0]
    a488:	4955      	ldr	r1, [pc, #340]	(a5e0 <_ZN5Debug15testServoAnalogEv+0x178>)
    a48a:	f644 6220 	movw	r2, #20000	; 0x4e20
    a48e:	f04f 0347 	mov.w	r3, #71	; 0x47
    a492:	f002 fe41 	bl	d118 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    a496:	683b      	ldr	r3, [r7, #0]
    a498:	607b      	str	r3, [r7, #4]
    a49a:	e001      	b.n	a4a0 <_ZN5Debug15testServoAnalogEv+0x38>
    a49c:	683b      	ldr	r3, [r7, #0]
    a49e:	607b      	str	r3, [r7, #4]
    a4a0:	687b      	ldr	r3, [r7, #4]
    a4a2:	62bb      	str	r3, [r7, #40]
    TIM_CtrlPWMOutputs(TIM1, ENABLE);
    a4a4:	484e      	ldr	r0, [pc, #312]	(a5e0 <_ZN5Debug15testServoAnalogEv+0x178>)
    a4a6:	f04f 0101 	mov.w	r1, #1	; 0x1
    a4aa:	f7f8 fde3 	bl	3074 <TIM_CtrlPWMOutputs>

    Servo* servo1 = new Servo(timer1, 1, 0.01f, 0.11f);
    a4ae:	f04f 0014 	mov.w	r0, #20	; 0x14
    a4b2:	f003 febd 	bl	e230 <_Znwj>
    a4b6:	4603      	mov	r3, r0
    a4b8:	60bb      	str	r3, [r7, #8]
    a4ba:	68bb      	ldr	r3, [r7, #8]
    a4bc:	2b00      	cmp	r3, #0
    a4be:	d00b      	beq.n	a4d8 <_ZN5Debug15testServoAnalogEv+0x70>
    a4c0:	4b48      	ldr	r3, [pc, #288]	(a5e4 <_ZN5Debug15testServoAnalogEv+0x17c>)
    a4c2:	9300      	str	r3, [sp, #0]
    a4c4:	68b8      	ldr	r0, [r7, #8]
    a4c6:	6ab9      	ldr	r1, [r7, #40]
    a4c8:	f04f 0201 	mov.w	r2, #1	; 0x1
    a4cc:	4b46      	ldr	r3, [pc, #280]	(a5e8 <_ZN5Debug15testServoAnalogEv+0x180>)
    a4ce:	f7fc fd2b 	bl	6f28 <_ZN5ServoC1EP5Timerhff>
    a4d2:	68bb      	ldr	r3, [r7, #8]
    a4d4:	60fb      	str	r3, [r7, #12]
    a4d6:	e001      	b.n	a4dc <_ZN5Debug15testServoAnalogEv+0x74>
    a4d8:	68bb      	ldr	r3, [r7, #8]
    a4da:	60fb      	str	r3, [r7, #12]
    a4dc:	68fb      	ldr	r3, [r7, #12]
    a4de:	62fb      	str	r3, [r7, #44]
    Servo* servo2 = new Servo(timer1, 2, 0.01f, 0.11f);
    a4e0:	f04f 0014 	mov.w	r0, #20	; 0x14
    a4e4:	f003 fea4 	bl	e230 <_Znwj>
    a4e8:	4603      	mov	r3, r0
    a4ea:	613b      	str	r3, [r7, #16]
    a4ec:	693b      	ldr	r3, [r7, #16]
    a4ee:	2b00      	cmp	r3, #0
    a4f0:	d00b      	beq.n	a50a <_ZN5Debug15testServoAnalogEv+0xa2>
    a4f2:	4b3c      	ldr	r3, [pc, #240]	(a5e4 <_ZN5Debug15testServoAnalogEv+0x17c>)
    a4f4:	9300      	str	r3, [sp, #0]
    a4f6:	6938      	ldr	r0, [r7, #16]
    a4f8:	6ab9      	ldr	r1, [r7, #40]
    a4fa:	f04f 0202 	mov.w	r2, #2	; 0x2
    a4fe:	4b3a      	ldr	r3, [pc, #232]	(a5e8 <_ZN5Debug15testServoAnalogEv+0x180>)
    a500:	f7fc fd12 	bl	6f28 <_ZN5ServoC1EP5Timerhff>
    a504:	693b      	ldr	r3, [r7, #16]
    a506:	617b      	str	r3, [r7, #20]
    a508:	e001      	b.n	a50e <_ZN5Debug15testServoAnalogEv+0xa6>
    a50a:	693b      	ldr	r3, [r7, #16]
    a50c:	617b      	str	r3, [r7, #20]
    a50e:	697b      	ldr	r3, [r7, #20]
    a510:	633b      	str	r3, [r7, #48]
    Servo* servo3 = new Servo(timer1, 3, 0.01f, 0.11f);
    a512:	f04f 0014 	mov.w	r0, #20	; 0x14
    a516:	f003 fe8b 	bl	e230 <_Znwj>
    a51a:	4603      	mov	r3, r0
    a51c:	61bb      	str	r3, [r7, #24]
    a51e:	69bb      	ldr	r3, [r7, #24]
    a520:	2b00      	cmp	r3, #0
    a522:	d00b      	beq.n	a53c <_ZN5Debug15testServoAnalogEv+0xd4>
    a524:	4b2f      	ldr	r3, [pc, #188]	(a5e4 <_ZN5Debug15testServoAnalogEv+0x17c>)
    a526:	9300      	str	r3, [sp, #0]
    a528:	69b8      	ldr	r0, [r7, #24]
    a52a:	6ab9      	ldr	r1, [r7, #40]
    a52c:	f04f 0203 	mov.w	r2, #3	; 0x3
    a530:	4b2d      	ldr	r3, [pc, #180]	(a5e8 <_ZN5Debug15testServoAnalogEv+0x180>)
    a532:	f7fc fcf9 	bl	6f28 <_ZN5ServoC1EP5Timerhff>
    a536:	69bb      	ldr	r3, [r7, #24]
    a538:	61fb      	str	r3, [r7, #28]
    a53a:	e001      	b.n	a540 <_ZN5Debug15testServoAnalogEv+0xd8>
    a53c:	69bb      	ldr	r3, [r7, #24]
    a53e:	61fb      	str	r3, [r7, #28]
    a540:	69fb      	ldr	r3, [r7, #28]
    a542:	637b      	str	r3, [r7, #52]
    Servo* servo4 = new Servo(timer1, 4, 0.01f, 0.11f);
    a544:	f04f 0014 	mov.w	r0, #20	; 0x14
    a548:	f003 fe72 	bl	e230 <_Znwj>
    a54c:	4603      	mov	r3, r0
    a54e:	623b      	str	r3, [r7, #32]
    a550:	6a3b      	ldr	r3, [r7, #32]
    a552:	2b00      	cmp	r3, #0
    a554:	d00b      	beq.n	a56e <_ZN5Debug15testServoAnalogEv+0x106>
    a556:	4b23      	ldr	r3, [pc, #140]	(a5e4 <_ZN5Debug15testServoAnalogEv+0x17c>)
    a558:	9300      	str	r3, [sp, #0]
    a55a:	6a38      	ldr	r0, [r7, #32]
    a55c:	6ab9      	ldr	r1, [r7, #40]
    a55e:	f04f 0204 	mov.w	r2, #4	; 0x4
    a562:	4b21      	ldr	r3, [pc, #132]	(a5e8 <_ZN5Debug15testServoAnalogEv+0x180>)
    a564:	f7fc fce0 	bl	6f28 <_ZN5ServoC1EP5Timerhff>
    a568:	6a3b      	ldr	r3, [r7, #32]
    a56a:	627b      	str	r3, [r7, #36]
    a56c:	e001      	b.n	a572 <_ZN5Debug15testServoAnalogEv+0x10a>
    a56e:	6a3b      	ldr	r3, [r7, #32]
    a570:	627b      	str	r3, [r7, #36]
    a572:	6a7b      	ldr	r3, [r7, #36]
    a574:	63bb      	str	r3, [r7, #56]

    for(int i=0; i<2000; i++)
    a576:	f04f 0300 	mov.w	r3, #0	; 0x0
    a57a:	63fb      	str	r3, [r7, #60]
    a57c:	e027      	b.n	a5ce <_ZN5Debug15testServoAnalogEv+0x166>
    {
        servo1->goToAngle(70);
    a57e:	6af8      	ldr	r0, [r7, #44]
    a580:	491a      	ldr	r1, [pc, #104]	(a5ec <_ZN5Debug15testServoAnalogEv+0x184>)
    a582:	f7fc fc61 	bl	6e48 <_ZN5Servo9goToAngleEf>
        /*servo2->goToAngle(BALAI_G_CLOSED);
        servo3->goToAngle(BALAI_G_CLOSED);
        servo4->goToAngle(BALAI_G_CLOSED);*/
        allumerLED();
    a586:	f001 fc4b 	bl	be20 <_Z10allumerLEDv>

        for(int j=0; j<10000000; j++);
    a58a:	f04f 0300 	mov.w	r3, #0	; 0x0
    a58e:	643b      	str	r3, [r7, #64]
    a590:	e003      	b.n	a59a <_ZN5Debug15testServoAnalogEv+0x132>
    a592:	6c3b      	ldr	r3, [r7, #64]
    a594:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a598:	643b      	str	r3, [r7, #64]
    a59a:	6c3a      	ldr	r2, [r7, #64]
    a59c:	4b14      	ldr	r3, [pc, #80]	(a5f0 <_ZN5Debug15testServoAnalogEv+0x188>)
    a59e:	429a      	cmp	r2, r3
    a5a0:	ddf7      	ble.n	a592 <_ZN5Debug15testServoAnalogEv+0x12a>

        servo1->goToAngle(165);
    a5a2:	6af8      	ldr	r0, [r7, #44]
    a5a4:	4913      	ldr	r1, [pc, #76]	(a5f4 <_ZN5Debug15testServoAnalogEv+0x18c>)
    a5a6:	f7fc fc4f 	bl	6e48 <_ZN5Servo9goToAngleEf>
        /*servo2->goToAngle(BALAI_G_OPEN);
        servo3->goToAngle(BALAI_G_OPEN);
        servo4->goToAngle(BALAI_G_OPEN);*/
        eteindreLED();
    a5aa:	f001 fbdd 	bl	bd68 <_Z11eteindreLEDv>

        for(int j=0; j<10000000; j++);
    a5ae:	f04f 0300 	mov.w	r3, #0	; 0x0
    a5b2:	647b      	str	r3, [r7, #68]
    a5b4:	e003      	b.n	a5be <_ZN5Debug15testServoAnalogEv+0x156>
    a5b6:	6c7b      	ldr	r3, [r7, #68]
    a5b8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a5bc:	647b      	str	r3, [r7, #68]
    a5be:	6c7a      	ldr	r2, [r7, #68]
    a5c0:	4b0b      	ldr	r3, [pc, #44]	(a5f0 <_ZN5Debug15testServoAnalogEv+0x188>)
    a5c2:	429a      	cmp	r2, r3
    a5c4:	ddf7      	ble.n	a5b6 <_ZN5Debug15testServoAnalogEv+0x14e>
    Servo* servo1 = new Servo(timer1, 1, 0.01f, 0.11f);
    Servo* servo2 = new Servo(timer1, 2, 0.01f, 0.11f);
    Servo* servo3 = new Servo(timer1, 3, 0.01f, 0.11f);
    Servo* servo4 = new Servo(timer1, 4, 0.01f, 0.11f);

    for(int i=0; i<2000; i++)
    a5c6:	6bfb      	ldr	r3, [r7, #60]
    a5c8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a5cc:	63fb      	str	r3, [r7, #60]
    a5ce:	6bfa      	ldr	r2, [r7, #60]
    a5d0:	f240 73cf 	movw	r3, #1999	; 0x7cf
    a5d4:	429a      	cmp	r2, r3
    a5d6:	ddd2      	ble.n	a57e <_ZN5Debug15testServoAnalogEv+0x116>
        servo4->goToAngle(BALAI_G_OPEN);*/
        eteindreLED();

        for(int j=0; j<10000000; j++);
    }
}
    a5d8:	f107 0748 	add.w	r7, r7, #72	; 0x48
    a5dc:	46bd      	mov	sp, r7
    a5de:	bd80      	pop	{r7, pc}
    a5e0:	40012c00 	.word	0x40012c00
    a5e4:	3de147ae 	.word	0x3de147ae
    a5e8:	3c23d70a 	.word	0x3c23d70a
    a5ec:	428c0000 	.word	0x428c0000
    a5f0:	0098967f 	.word	0x0098967f
    a5f4:	43250000 	.word	0x43250000

0000a5f8 <_Z21distancePresqueEgalesff>:
#include "distance.h"

#include <math.h>

// On vérifie qu'il y a égalité ou presque entre deux distances
bool distancePresqueEgales(Distance d1, Distance d2)
    a5f8:	b580      	push	{r7, lr}
    a5fa:	b084      	sub	sp, #16
    a5fc:	af00      	add	r7, sp, #0
    a5fe:	60f8      	str	r0, [r7, #12]
    a600:	60b9      	str	r1, [r7, #8]
{
    static const Distance epsilon = 10;
    return (fabs(d1 - d2) < epsilon);
    a602:	68f8      	ldr	r0, [r7, #12]
    a604:	68b9      	ldr	r1, [r7, #8]
    a606:	f010 f8e7 	bl	1a7d8 <__aeabi_fsub>
    a60a:	4603      	mov	r3, r0
    a60c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    a610:	f04f 0300 	mov.w	r3, #0	; 0x0
    a614:	71fb      	strb	r3, [r7, #7]
    a616:	4610      	mov	r0, r2
    a618:	4907      	ldr	r1, [pc, #28]	(a638 <_Z21distancePresqueEgalesff+0x40>)
    a61a:	f010 fb83 	bl	1ad24 <__aeabi_fcmplt>
    a61e:	4603      	mov	r3, r0
    a620:	2b00      	cmp	r3, #0
    a622:	d002      	beq.n	a62a <_Z21distancePresqueEgalesff+0x32>
    a624:	f04f 0301 	mov.w	r3, #1	; 0x1
    a628:	71fb      	strb	r3, [r7, #7]
    a62a:	79fb      	ldrb	r3, [r7, #7]
}
    a62c:	4618      	mov	r0, r3
    a62e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    a632:	46bd      	mov	sp, r7
    a634:	bd80      	pop	{r7, pc}
    a636:	46c0      	nop			(mov r8, r8)
    a638:	41200000 	.word	0x41200000

0000a63c <_ZN12AnalogSensor18conversionFinishedEv>:
    #else
        ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
    #endif
}

bool AnalogSensor::conversionFinished()
    a63c:	b580      	push	{r7, lr}
    a63e:	af00      	add	r7, sp, #0
   //return DMA_GetFlagStatus(DMA1_Stream1, DMA_FLAG_TCIF1);//I have no idea what I am doing
    //TOBECONTINUED
    #ifdef STM32F40_41xxx
        return true;
    #else
        return DMA_GetFlagStatus(DMA1_FLAG_TC1);
    a640:	f04f 0002 	mov.w	r0, #2	; 0x2
    a644:	f7f6 fddc 	bl	1200 <DMA_GetFlagStatus>
    a648:	4603      	mov	r3, r0
    a64a:	2b00      	cmp	r3, #0
    a64c:	bf0c      	ite	eq
    a64e:	2300      	moveq	r3, #0
    a650:	2301      	movne	r3, #1
    a652:	b2db      	uxtb	r3, r3
    #endif
}
    a654:	4618      	mov	r0, r3
    a656:	46bd      	mov	sp, r7
    a658:	bd80      	pop	{r7, pc}
    a65a:	46c0      	nop			(mov r8, r8)

0000a65c <_ZN12AnalogSensor15startConversionEv>:
        DMA_Cmd(DMA1_Channel1, ENABLE);
        return data;
    #endif
}

void AnalogSensor::startConversion()
    a65c:	b580      	push	{r7, lr}
    a65e:	af00      	add	r7, sp, #0
{
    #ifdef STM32F40_41xxx
        ADC_SoftwareStartConv(ADC1);
    #else
        ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
    a660:	4803      	ldr	r0, [pc, #12]	(a670 <_ZN12AnalogSensor15startConversionEv+0x14>)
    a662:	f04f 0101 	mov.w	r1, #1	; 0x1
    a666:	f7f6 f817 	bl	698 <ADC_SoftwareStartConvCmd>
    #endif
}
    a66a:	46bd      	mov	sp, r7
    a66c:	bd80      	pop	{r7, pc}
    a66e:	46c0      	nop			(mov r8, r8)
    a670:	40012400 	.word	0x40012400

0000a674 <_ZN12AnalogSensor14initialiserADCEhPh>:
{
}

#ifdef ROBOTHW // pour le vrai robot

DMA_MEMORY_TYPE* AnalogSensor::initialiserADC(uint8_t nbChannel, uint8_t* channels)
    a674:	b580      	push	{r7, lr}
    a676:	b094      	sub	sp, #80
    a678:	af00      	add	r7, sp, #0
    a67a:	4603      	mov	r3, r0
    a67c:	6039      	str	r1, [r7, #0]
    a67e:	71fb      	strb	r3, [r7, #7]
        /* Start ADC3 Software Conversion */
        ADC_SoftwareStartConv(ADC3);

        return data;
    #else
        DMA_MEMORY_TYPE* data = new DMA_MEMORY_TYPE[nbChannel];
    a680:	79fb      	ldrb	r3, [r7, #7]
    a682:	ea4f 0343 	mov.w	r3, r3, lsl #1
    a686:	4618      	mov	r0, r3
    a688:	f003 fe6a 	bl	e360 <_Znaj>
    a68c:	4603      	mov	r3, r0
    a68e:	64bb      	str	r3, [r7, #72]

        ADC_InitTypeDef ADC_InitStructure;
        // ADC1 fonctionne tout seul (on n'utilise ni ADC2 ni ADC3)
        ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    a690:	f04f 0300 	mov.w	r3, #0	; 0x0
    a694:	637b      	str	r3, [r7, #52]
        // On scanne tous les channels
        ADC_InitStructure.ADC_ScanConvMode = ENABLE;
    a696:	f04f 0301 	mov.w	r3, #1	; 0x1
    a69a:	f887 3038 	strb.w	r3, [r7, #56]
        // Single conversion mode
        ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    a69e:	f04f 0300 	mov.w	r3, #0	; 0x0
    a6a2:	f887 3039 	strb.w	r3, [r7, #57]
        // Pas d'external trigger (on lance la conversion à la main)
        ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    a6a6:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
    a6aa:	63fb      	str	r3, [r7, #60]
        ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    a6ac:	f04f 0300 	mov.w	r3, #0	; 0x0
    a6b0:	643b      	str	r3, [r7, #64]
        ADC_InitStructure.ADC_NbrOfChannel = nbChannel;
    a6b2:	79fb      	ldrb	r3, [r7, #7]
    a6b4:	f887 3044 	strb.w	r3, [r7, #68]
        ADC_Init(ADC1, &ADC_InitStructure);
    a6b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a6bc:	483b      	ldr	r0, [pc, #236]	(a7ac <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a6be:	4619      	mov	r1, r3
    a6c0:	f7f5 feb2 	bl	428 <ADC_Init>

        // Activation du périphérique
        ADC_Cmd(ADC1, ENABLE);
    a6c4:	4839      	ldr	r0, [pc, #228]	(a7ac <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a6c6:	f04f 0101 	mov.w	r1, #1	; 0x1
    a6ca:	f7f5 ff2f 	bl	52c <ADC_Cmd>

        // Calibrage
        // On remet la calibration à zéro
        ADC_ResetCalibration(ADC1);
    a6ce:	4837      	ldr	r0, [pc, #220]	(a7ac <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a6d0:	f7f5 ff8a 	bl	5e8 <ADC_ResetCalibration>
        while(ADC_GetResetCalibrationStatus(ADC1));
    a6d4:	4835      	ldr	r0, [pc, #212]	(a7ac <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a6d6:	f7f5 ff97 	bl	608 <ADC_GetResetCalibrationStatus>
    a6da:	4603      	mov	r3, r0
    a6dc:	2b00      	cmp	r3, #0
    a6de:	bf0c      	ite	eq
    a6e0:	2300      	moveq	r3, #0
    a6e2:	2301      	movne	r3, #1
    a6e4:	b2db      	uxtb	r3, r3
    a6e6:	2b00      	cmp	r3, #0
    a6e8:	d1f4      	bne.n	a6d4 <_ZN12AnalogSensor14initialiserADCEhPh+0x60>
        // On lance la calibration
        ADC_StartCalibration(ADC1);
    a6ea:	4830      	ldr	r0, [pc, #192]	(a7ac <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a6ec:	f7f5 ffa8 	bl	640 <ADC_StartCalibration>
        // Et on attend que ce soit fini
        while(ADC_GetCalibrationStatus(ADC1));
    a6f0:	482e      	ldr	r0, [pc, #184]	(a7ac <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a6f2:	f7f5 ffb5 	bl	660 <ADC_GetCalibrationStatus>
    a6f6:	4603      	mov	r3, r0
    a6f8:	2b00      	cmp	r3, #0
    a6fa:	bf0c      	ite	eq
    a6fc:	2300      	moveq	r3, #0
    a6fe:	2301      	movne	r3, #1
    a700:	b2db      	uxtb	r3, r3
    a702:	2b00      	cmp	r3, #0
    a704:	d1f4      	bne.n	a6f0 <_ZN12AnalogSensor14initialiserADCEhPh+0x7c>

        // Définition des canaux à convertir
        //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
        for (int i=0; i<nbChannel; i++)
    a706:	f04f 0300 	mov.w	r3, #0	; 0x0
    a70a:	64fb      	str	r3, [r7, #76]
    a70c:	e013      	b.n	a736 <_ZN12AnalogSensor14initialiserADCEhPh+0xc2>
            ADC_RegularChannelConfig (ADC1, channels[i], i+1, ADC_SampleTime_1Cycles5);
    a70e:	6cfa      	ldr	r2, [r7, #76]
    a710:	683b      	ldr	r3, [r7, #0]
    a712:	4413      	add	r3, r2
    a714:	781a      	ldrb	r2, [r3, #0]
    a716:	6cfb      	ldr	r3, [r7, #76]
    a718:	b2db      	uxtb	r3, r3
    a71a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a71e:	b2db      	uxtb	r3, r3
    a720:	4822      	ldr	r0, [pc, #136]	(a7ac <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a722:	4611      	mov	r1, r2
    a724:	461a      	mov	r2, r3
    a726:	f04f 0300 	mov.w	r3, #0	; 0x0
    a72a:	f7f6 f82f 	bl	78c <ADC_RegularChannelConfig>
        // Et on attend que ce soit fini
        while(ADC_GetCalibrationStatus(ADC1));

        // Définition des canaux à convertir
        //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
        for (int i=0; i<nbChannel; i++)
    a72e:	6cfb      	ldr	r3, [r7, #76]
    a730:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a734:	64fb      	str	r3, [r7, #76]
    a736:	79fa      	ldrb	r2, [r7, #7]
    a738:	6cfb      	ldr	r3, [r7, #76]
    a73a:	429a      	cmp	r2, r3
    a73c:	dce7      	bgt.n	a70e <_ZN12AnalogSensor14initialiserADCEhPh+0x9a>
            ADC_RegularChannelConfig (ADC1, channels[i], i+1, ADC_SampleTime_1Cycles5);

        // active le transfert des résultats de conversion en SRAM
        ADC_DMACmd(ADC1, ENABLE);
    a73e:	481b      	ldr	r0, [pc, #108]	(a7ac <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a740:	f04f 0101 	mov.w	r1, #1	; 0x1
    a744:	f7f5 ff0e 	bl	564 <ADC_DMACmd>

        DMA_InitTypeDef DMA_InitStructure;
        DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); // ADC regular data register contient le résultat de la conversion
    a748:	4b18      	ldr	r3, [pc, #96]	(a7ac <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a74a:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    a74e:	60bb      	str	r3, [r7, #8]
        DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)data ; // Adresse de destination
    a750:	6cbb      	ldr	r3, [r7, #72]
    a752:	60fb      	str	r3, [r7, #12]
        DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; // On transfère du périphérique (ADC) à la mémoire (SRAM)
    a754:	f04f 0300 	mov.w	r3, #0	; 0x0
    a758:	613b      	str	r3, [r7, #16]
        DMA_InitStructure.DMA_BufferSize = nbChannel; // Nombre de conversions à transférer
    a75a:	79fb      	ldrb	r3, [r7, #7]
    a75c:	617b      	str	r3, [r7, #20]
        DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; // L'adresse du résultat de la conversion ne change pas
    a75e:	f04f 0300 	mov.w	r3, #0	; 0x0
    a762:	61bb      	str	r3, [r7, #24]
        DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; // Incrémente le pointeur destination pour enregistrer les différentes conversions
    a764:	f04f 0380 	mov.w	r3, #128	; 0x80
    a768:	61fb      	str	r3, [r7, #28]
        DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    a76a:	f44f 7300 	mov.w	r3, #512	; 0x200
    a76e:	623b      	str	r3, [r7, #32]
        DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    a770:	f44f 6380 	mov.w	r3, #1024	; 0x400
    a774:	627b      	str	r3, [r7, #36]
        // Note : le registre ADC_DR fait 32 bits mais seuls les bits 0:15 nous intéressent
        // Ici tout devrait fonctionner correctement : cf doc p.189 (tableau 56) (malgré une petite erreur dans le tableau)
        DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    a776:	f04f 0320 	mov.w	r3, #32	; 0x20
    a77a:	62bb      	str	r3, [r7, #40]
        DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    a77c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a780:	62fb      	str	r3, [r7, #44]
        // On ne permet pas de lancer un transfert en software (car lancé par le périphérique ADC)
        DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    a782:	f04f 0300 	mov.w	r3, #0	; 0x0
    a786:	633b      	str	r3, [r7, #48]
        // Channel1 : cf p.192 tableau 58
        DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    a788:	f107 0308 	add.w	r3, r7, #8	; 0x8
    a78c:	4808      	ldr	r0, [pc, #32]	(a7b0 <_ZN12AnalogSensor14initialiserADCEhPh+0x13c>)
    a78e:	4619      	mov	r1, r3
    a790:	f7f6 fc6e 	bl	1070 <DMA_Init>
        DMA_Cmd(DMA1_Channel1, ENABLE);
    a794:	4806      	ldr	r0, [pc, #24]	(a7b0 <_ZN12AnalogSensor14initialiserADCEhPh+0x13c>)
    a796:	f04f 0101 	mov.w	r1, #1	; 0x1
    a79a:	f7f6 fce7 	bl	116c <DMA_Cmd>
        return data;
    a79e:	6cbb      	ldr	r3, [r7, #72]
    #endif
}
    a7a0:	4618      	mov	r0, r3
    a7a2:	f107 0750 	add.w	r7, r7, #80	; 0x50
    a7a6:	46bd      	mov	sp, r7
    a7a8:	bd80      	pop	{r7, pc}
    a7aa:	46c0      	nop			(mov r8, r8)
    a7ac:	40012400 	.word	0x40012400
    a7b0:	40020008 	.word	0x40020008

0000a7b4 <_ZN12AnalogSensorD0Ev>:
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;

    AnalogSensor::nbCapteurDejaInitialise++;
}

AnalogSensor::~AnalogSensor()
    a7b4:	b580      	push	{r7, lr}
    a7b6:	b082      	sub	sp, #8
    a7b8:	af00      	add	r7, sp, #0
    a7ba:	6078      	str	r0, [r7, #4]
    a7bc:	687a      	ldr	r2, [r7, #4]
    a7be:	4b0a      	ldr	r3, [pc, #40]	(a7e8 <_ZN12AnalogSensorD0Ev+0x34>)
    a7c0:	6013      	str	r3, [r2, #0]
{
}
    a7c2:	687b      	ldr	r3, [r7, #4]
    a7c4:	4618      	mov	r0, r3
    a7c6:	f7fb f8dd 	bl	5984 <_ZN6SensorD2Ev>
    a7ca:	f04f 0301 	mov.w	r3, #1	; 0x1
    a7ce:	b2db      	uxtb	r3, r3
    a7d0:	2b00      	cmp	r3, #0
    a7d2:	d002      	beq.n	a7da <_ZN12AnalogSensorD0Ev+0x26>
    a7d4:	6878      	ldr	r0, [r7, #4]
    a7d6:	f003 fdd1 	bl	e37c <_ZdlPv>
    a7da:	687b      	ldr	r3, [r7, #4]
    a7dc:	4618      	mov	r0, r3
    a7de:	f107 0708 	add.w	r7, r7, #8	; 0x8
    a7e2:	46bd      	mov	sp, r7
    a7e4:	bd80      	pop	{r7, pc}
    a7e6:	46c0      	nop			(mov r8, r8)
    a7e8:	00021988 	.word	0x00021988

0000a7ec <_ZN12AnalogSensorD1Ev>:
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;

    AnalogSensor::nbCapteurDejaInitialise++;
}

AnalogSensor::~AnalogSensor()
    a7ec:	b580      	push	{r7, lr}
    a7ee:	b082      	sub	sp, #8
    a7f0:	af00      	add	r7, sp, #0
    a7f2:	6078      	str	r0, [r7, #4]
    a7f4:	687a      	ldr	r2, [r7, #4]
    a7f6:	4b0a      	ldr	r3, [pc, #40]	(a820 <_ZN12AnalogSensorD1Ev+0x34>)
    a7f8:	6013      	str	r3, [r2, #0]
{
}
    a7fa:	687b      	ldr	r3, [r7, #4]
    a7fc:	4618      	mov	r0, r3
    a7fe:	f7fb f8c1 	bl	5984 <_ZN6SensorD2Ev>
    a802:	f04f 0300 	mov.w	r3, #0	; 0x0
    a806:	b2db      	uxtb	r3, r3
    a808:	2b00      	cmp	r3, #0
    a80a:	d002      	beq.n	a812 <_ZN12AnalogSensorD1Ev+0x26>
    a80c:	6878      	ldr	r0, [r7, #4]
    a80e:	f003 fdb5 	bl	e37c <_ZdlPv>
    a812:	687b      	ldr	r3, [r7, #4]
    a814:	4618      	mov	r0, r3
    a816:	f107 0708 	add.w	r7, r7, #8	; 0x8
    a81a:	46bd      	mov	sp, r7
    a81c:	bd80      	pop	{r7, pc}
    a81e:	46c0      	nop			(mov r8, r8)
    a820:	00021988 	.word	0x00021988

0000a824 <_ZN12AnalogSensorD2Ev>:
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;

    AnalogSensor::nbCapteurDejaInitialise++;
}

AnalogSensor::~AnalogSensor()
    a824:	b580      	push	{r7, lr}
    a826:	b082      	sub	sp, #8
    a828:	af00      	add	r7, sp, #0
    a82a:	6078      	str	r0, [r7, #4]
    a82c:	687a      	ldr	r2, [r7, #4]
    a82e:	4b0a      	ldr	r3, [pc, #40]	(a858 <_ZN12AnalogSensorD2Ev+0x34>)
    a830:	6013      	str	r3, [r2, #0]
{
}
    a832:	687b      	ldr	r3, [r7, #4]
    a834:	4618      	mov	r0, r3
    a836:	f7fb f8a5 	bl	5984 <_ZN6SensorD2Ev>
    a83a:	f04f 0300 	mov.w	r3, #0	; 0x0
    a83e:	b2db      	uxtb	r3, r3
    a840:	2b00      	cmp	r3, #0
    a842:	d002      	beq.n	a84a <_ZN12AnalogSensorD2Ev+0x26>
    a844:	6878      	ldr	r0, [r7, #4]
    a846:	f003 fd99 	bl	e37c <_ZdlPv>
    a84a:	687b      	ldr	r3, [r7, #4]
    a84c:	4618      	mov	r0, r3
    a84e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    a852:	46bd      	mov	sp, r7
    a854:	bd80      	pop	{r7, pc}
    a856:	46c0      	nop			(mov r8, r8)
    a858:	00021988 	.word	0x00021988

0000a85c <_ZN12AnalogSensorC1EhPt>:
#include "analogSensor.h"

int AnalogSensor::nbCapteurDejaInitialise = 0;

AnalogSensor::AnalogSensor(uint8_t channel, DMA_MEMORY_TYPE* pData)
    a85c:	b580      	push	{r7, lr}
    a85e:	b084      	sub	sp, #16
    a860:	af00      	add	r7, sp, #0
    a862:	60f8      	str	r0, [r7, #12]
    a864:	460b      	mov	r3, r1
    a866:	607a      	str	r2, [r7, #4]
    a868:	72fb      	strb	r3, [r7, #11]
    a86a:	68fb      	ldr	r3, [r7, #12]
    a86c:	4618      	mov	r0, r3
    a86e:	f7fb f839 	bl	58e4 <_ZN6SensorC2Ev>
    a872:	68fa      	ldr	r2, [r7, #12]
    a874:	4b0c      	ldr	r3, [pc, #48]	(a8a8 <_ZN12AnalogSensorC1EhPt+0x4c>)
    a876:	6013      	str	r3, [r2, #0]
{
    this->channel = channel;
    a878:	68fa      	ldr	r2, [r7, #12]
    a87a:	7afb      	ldrb	r3, [r7, #11]
    a87c:	7113      	strb	r3, [r2, #4]
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;
    a87e:	4b0b      	ldr	r3, [pc, #44]	(a8ac <_ZN12AnalogSensorC1EhPt+0x50>)
    a880:	681b      	ldr	r3, [r3, #0]
    a882:	ea4f 0243 	mov.w	r2, r3, lsl #1
    a886:	687b      	ldr	r3, [r7, #4]
    a888:	441a      	add	r2, r3
    a88a:	68fb      	ldr	r3, [r7, #12]
    a88c:	609a      	str	r2, [r3, #8]

    AnalogSensor::nbCapteurDejaInitialise++;
    a88e:	4b07      	ldr	r3, [pc, #28]	(a8ac <_ZN12AnalogSensorC1EhPt+0x50>)
    a890:	681b      	ldr	r3, [r3, #0]
    a892:	f103 0201 	add.w	r2, r3, #1	; 0x1
    a896:	4b05      	ldr	r3, [pc, #20]	(a8ac <_ZN12AnalogSensorC1EhPt+0x50>)
    a898:	601a      	str	r2, [r3, #0]
}
    a89a:	68fb      	ldr	r3, [r7, #12]
    a89c:	4618      	mov	r0, r3
    a89e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    a8a2:	46bd      	mov	sp, r7
    a8a4:	bd80      	pop	{r7, pc}
    a8a6:	46c0      	nop			(mov r8, r8)
    a8a8:	00021988 	.word	0x00021988
    a8ac:	20000578 	.word	0x20000578

0000a8b0 <_ZN12AnalogSensorC2EhPt>:
#include "analogSensor.h"

int AnalogSensor::nbCapteurDejaInitialise = 0;

AnalogSensor::AnalogSensor(uint8_t channel, DMA_MEMORY_TYPE* pData)
    a8b0:	b580      	push	{r7, lr}
    a8b2:	b084      	sub	sp, #16
    a8b4:	af00      	add	r7, sp, #0
    a8b6:	60f8      	str	r0, [r7, #12]
    a8b8:	460b      	mov	r3, r1
    a8ba:	607a      	str	r2, [r7, #4]
    a8bc:	72fb      	strb	r3, [r7, #11]
    a8be:	68fb      	ldr	r3, [r7, #12]
    a8c0:	4618      	mov	r0, r3
    a8c2:	f7fb f80f 	bl	58e4 <_ZN6SensorC2Ev>
    a8c6:	68fa      	ldr	r2, [r7, #12]
    a8c8:	4b0c      	ldr	r3, [pc, #48]	(a8fc <_ZN12AnalogSensorC2EhPt+0x4c>)
    a8ca:	6013      	str	r3, [r2, #0]
{
    this->channel = channel;
    a8cc:	68fa      	ldr	r2, [r7, #12]
    a8ce:	7afb      	ldrb	r3, [r7, #11]
    a8d0:	7113      	strb	r3, [r2, #4]
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;
    a8d2:	4b0b      	ldr	r3, [pc, #44]	(a900 <_ZN12AnalogSensorC2EhPt+0x50>)
    a8d4:	681b      	ldr	r3, [r3, #0]
    a8d6:	ea4f 0243 	mov.w	r2, r3, lsl #1
    a8da:	687b      	ldr	r3, [r7, #4]
    a8dc:	441a      	add	r2, r3
    a8de:	68fb      	ldr	r3, [r7, #12]
    a8e0:	609a      	str	r2, [r3, #8]

    AnalogSensor::nbCapteurDejaInitialise++;
    a8e2:	4b07      	ldr	r3, [pc, #28]	(a900 <_ZN12AnalogSensorC2EhPt+0x50>)
    a8e4:	681b      	ldr	r3, [r3, #0]
    a8e6:	f103 0201 	add.w	r2, r3, #1	; 0x1
    a8ea:	4b05      	ldr	r3, [pc, #20]	(a900 <_ZN12AnalogSensorC2EhPt+0x50>)
    a8ec:	601a      	str	r2, [r3, #0]
}
    a8ee:	68fb      	ldr	r3, [r7, #12]
    a8f0:	4618      	mov	r0, r3
    a8f2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    a8f6:	46bd      	mov	sp, r7
    a8f8:	bd80      	pop	{r7, pc}
    a8fa:	46c0      	nop			(mov r8, r8)
    a8fc:	00021988 	.word	0x00021988
    a900:	20000578 	.word	0x20000578

0000a904 <_Z12ax12ChecksumaPi>:
#include "ax12api.h"

int ax12Checksum(int8_t length, int* parameters)
    a904:	b480      	push	{r7}
    a906:	b085      	sub	sp, #20
    a908:	af00      	add	r7, sp, #0
    a90a:	4603      	mov	r3, r0
    a90c:	6039      	str	r1, [r7, #0]
    a90e:	71fb      	strb	r3, [r7, #7]
{
	int checksum = 0;
    a910:	f04f 0300 	mov.w	r3, #0	; 0x0
    a914:	60bb      	str	r3, [r7, #8]
    for(int i = 0; i < length+1; i++) {
    a916:	f04f 0300 	mov.w	r3, #0	; 0x0
    a91a:	60fb      	str	r3, [r7, #12]
    a91c:	e00c      	b.n	a938 <_Z12ax12ChecksumaPi+0x34>
		checksum += parameters[i];
    a91e:	68fb      	ldr	r3, [r7, #12]
    a920:	ea4f 0283 	mov.w	r2, r3, lsl #2
    a924:	683b      	ldr	r3, [r7, #0]
    a926:	4413      	add	r3, r2
    a928:	681a      	ldr	r2, [r3, #0]
    a92a:	68bb      	ldr	r3, [r7, #8]
    a92c:	4413      	add	r3, r2
    a92e:	60bb      	str	r3, [r7, #8]
#include "ax12api.h"

int ax12Checksum(int8_t length, int* parameters)
{
	int checksum = 0;
    for(int i = 0; i < length+1; i++) {
    a930:	68fb      	ldr	r3, [r7, #12]
    a932:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a936:	60fb      	str	r3, [r7, #12]
    a938:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a93c:	f103 0201 	add.w	r2, r3, #1	; 0x1
    a940:	68fb      	ldr	r3, [r7, #12]
    a942:	429a      	cmp	r2, r3
    a944:	dceb      	bgt.n	a91e <_Z12ax12ChecksumaPi+0x1a>
		checksum += parameters[i];
	}
	return (int)(int8_t)(~checksum); // ~ est l'opérateur NOT bit a bit
    a946:	68bb      	ldr	r3, [r7, #8]
    a948:	b2db      	uxtb	r3, r3
    a94a:	ea6f 0303 	mvn.w	r3, r3
    a94e:	b2db      	uxtb	r3, r3
    a950:	b25b      	sxtb	r3, r3
}
    a952:	4618      	mov	r0, r3
    a954:	f107 0714 	add.w	r7, r7, #20	; 0x14
    a958:	46bd      	mov	sp, r7
    a95a:	bc80      	pop	{r7}
    a95c:	4770      	bx	lr
    a95e:	46c0      	nop			(mov r8, r8)

0000a960 <_ZN4AX1217createWriteHeaderEPiii>:
    return 8;
}



void AX12::createWriteHeader(int* retour, int servo, int nombreParamsAjoutes)
    a960:	b480      	push	{r7}
    a962:	b085      	sub	sp, #20
    a964:	af00      	add	r7, sp, #0
    a966:	60f8      	str	r0, [r7, #12]
    a968:	60b9      	str	r1, [r7, #8]
    a96a:	607a      	str	r2, [r7, #4]
{
    retour[0] = 0xff;
    a96c:	68fa      	ldr	r2, [r7, #12]
    a96e:	f04f 03ff 	mov.w	r3, #255	; 0xff
    a972:	6013      	str	r3, [r2, #0]
    retour[1] = 0xff;
    a974:	68fb      	ldr	r3, [r7, #12]
    a976:	f103 0204 	add.w	r2, r3, #4	; 0x4
    a97a:	f04f 03ff 	mov.w	r3, #255	; 0xff
    a97e:	6013      	str	r3, [r2, #0]
    retour[2] = servo;
    a980:	68fb      	ldr	r3, [r7, #12]
    a982:	f103 0208 	add.w	r2, r3, #8	; 0x8
    a986:	68bb      	ldr	r3, [r7, #8]
    a988:	6013      	str	r3, [r2, #0]
    retour[3] = AX12_WRITE_DATA_PARAMS+2+nombreParamsAjoutes;
    a98a:	68fb      	ldr	r3, [r7, #12]
    a98c:	f103 020c 	add.w	r2, r3, #12	; 0xc
    a990:	687b      	ldr	r3, [r7, #4]
    a992:	f103 0304 	add.w	r3, r3, #4	; 0x4
    a996:	6013      	str	r3, [r2, #0]
    retour[4] = AX12_WRITE_DATA;
    a998:	68fb      	ldr	r3, [r7, #12]
    a99a:	f103 0210 	add.w	r2, r3, #16	; 0x10
    a99e:	f04f 0303 	mov.w	r3, #3	; 0x3
    a9a2:	6013      	str	r3, [r2, #0]
}
    a9a4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    a9a8:	46bd      	mov	sp, r7
    a9aa:	bc80      	pop	{r7}
    a9ac:	4770      	bx	lr
    a9ae:	46c0      	nop			(mov r8, r8)

0000a9b0 <_ZN4AX1222getBaudRateInstructionEPihi>:
    retour[5] = AX12_LED;
    retour[6] = ledOn;
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    return 8;
}
int AX12::getBaudRateInstruction(int* retour, uint8_t baudRate, int servo)
    a9b0:	b590      	push	{r4, r7, lr}
    a9b2:	b085      	sub	sp, #20
    a9b4:	af00      	add	r7, sp, #0
    a9b6:	60f8      	str	r0, [r7, #12]
    a9b8:	460b      	mov	r3, r1
    a9ba:	607a      	str	r2, [r7, #4]
    a9bc:	72fb      	strb	r3, [r7, #11]
{
    createWriteHeader(retour, servo, 0); // first, we create a write header with 3 more params (for low/high pos and low/high speed)
    a9be:	68f8      	ldr	r0, [r7, #12]
    a9c0:	6879      	ldr	r1, [r7, #4]
    a9c2:	f04f 0200 	mov.w	r2, #0	; 0x0
    a9c6:	f7ff ffcb 	bl	a960 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_BAUD_RATE;
    a9ca:	68fb      	ldr	r3, [r7, #12]
    a9cc:	f103 0214 	add.w	r2, r3, #20	; 0x14
    a9d0:	f04f 0304 	mov.w	r3, #4	; 0x4
    a9d4:	6013      	str	r3, [r2, #0]
    retour[6] = baudRate;
    a9d6:	68fb      	ldr	r3, [r7, #12]
    a9d8:	f103 0218 	add.w	r2, r3, #24	; 0x18
    a9dc:	7afb      	ldrb	r3, [r7, #11]
    a9de:	6013      	str	r3, [r2, #0]
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    a9e0:	68fb      	ldr	r3, [r7, #12]
    a9e2:	f103 041c 	add.w	r4, r3, #28	; 0x1c
    a9e6:	68fb      	ldr	r3, [r7, #12]
    a9e8:	f103 030c 	add.w	r3, r3, #12	; 0xc
    a9ec:	681b      	ldr	r3, [r3, #0]
    a9ee:	b2da      	uxtb	r2, r3
    a9f0:	68fb      	ldr	r3, [r7, #12]
    a9f2:	f103 0108 	add.w	r1, r3, #8	; 0x8
    a9f6:	b253      	sxtb	r3, r2
    a9f8:	4618      	mov	r0, r3
    a9fa:	f7ff ff83 	bl	a904 <_Z12ax12ChecksumaPi>
    a9fe:	4603      	mov	r3, r0
    aa00:	6023      	str	r3, [r4, #0]
    return 8;
    aa02:	f04f 0308 	mov.w	r3, #8	; 0x8
}
    aa06:	4618      	mov	r0, r3
    aa08:	f107 0714 	add.w	r7, r7, #20	; 0x14
    aa0c:	46bd      	mov	sp, r7
    aa0e:	bd90      	pop	{r4, r7, pc}

0000aa10 <_ZN4AX1217getLedInstructionEPihi>:
    retour[6] = (uint8_t)(maxTorque);
    retour[7] = (uint8_t)(maxTorque>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getLedInstruction(int* retour, uint8_t ledOn, int servo)
    aa10:	b590      	push	{r4, r7, lr}
    aa12:	b085      	sub	sp, #20
    aa14:	af00      	add	r7, sp, #0
    aa16:	60f8      	str	r0, [r7, #12]
    aa18:	460b      	mov	r3, r1
    aa1a:	607a      	str	r2, [r7, #4]
    aa1c:	72fb      	strb	r3, [r7, #11]
{
    createWriteHeader(retour, servo, 0); // first, we create a write header with 3 more params (for low/high pos and low/high speed)
    aa1e:	68f8      	ldr	r0, [r7, #12]
    aa20:	6879      	ldr	r1, [r7, #4]
    aa22:	f04f 0200 	mov.w	r2, #0	; 0x0
    aa26:	f7ff ff9b 	bl	a960 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_LED;
    aa2a:	68fb      	ldr	r3, [r7, #12]
    aa2c:	f103 0214 	add.w	r2, r3, #20	; 0x14
    aa30:	f04f 0319 	mov.w	r3, #25	; 0x19
    aa34:	6013      	str	r3, [r2, #0]
    retour[6] = ledOn;
    aa36:	68fb      	ldr	r3, [r7, #12]
    aa38:	f103 0218 	add.w	r2, r3, #24	; 0x18
    aa3c:	7afb      	ldrb	r3, [r7, #11]
    aa3e:	6013      	str	r3, [r2, #0]
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    aa40:	68fb      	ldr	r3, [r7, #12]
    aa42:	f103 041c 	add.w	r4, r3, #28	; 0x1c
    aa46:	68fb      	ldr	r3, [r7, #12]
    aa48:	f103 030c 	add.w	r3, r3, #12	; 0xc
    aa4c:	681b      	ldr	r3, [r3, #0]
    aa4e:	b2da      	uxtb	r2, r3
    aa50:	68fb      	ldr	r3, [r7, #12]
    aa52:	f103 0108 	add.w	r1, r3, #8	; 0x8
    aa56:	b253      	sxtb	r3, r2
    aa58:	4618      	mov	r0, r3
    aa5a:	f7ff ff53 	bl	a904 <_Z12ax12ChecksumaPi>
    aa5e:	4603      	mov	r3, r0
    aa60:	6023      	str	r3, [r4, #0]
    return 8;
    aa62:	f04f 0308 	mov.w	r3, #8	; 0x8
}
    aa66:	4618      	mov	r0, r3
    aa68:	f107 0714 	add.w	r7, r7, #20	; 0x14
    aa6c:	46bd      	mov	sp, r7
    aa6e:	bd90      	pop	{r4, r7, pc}

0000aa70 <_ZN4AX1223getMaxTorqueInstructionEPiti>:
    retour[6] = (uint8_t)(torqueLimite);
    retour[7] = (uint8_t)(torqueLimite>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getMaxTorqueInstruction(int* retour, uint16_t maxTorque, int servo) // torque dans l'eeprom (pour l'écrire dans la ram au démarrage)
    aa70:	b590      	push	{r4, r7, lr}
    aa72:	b085      	sub	sp, #20
    aa74:	af00      	add	r7, sp, #0
    aa76:	60f8      	str	r0, [r7, #12]
    aa78:	460b      	mov	r3, r1
    aa7a:	607a      	str	r2, [r7, #4]
    aa7c:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    aa7e:	68f8      	ldr	r0, [r7, #12]
    aa80:	6879      	ldr	r1, [r7, #4]
    aa82:	f04f 0201 	mov.w	r2, #1	; 0x1
    aa86:	f7ff ff6b 	bl	a960 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_MAX_TORQUE_L;
    aa8a:	68fb      	ldr	r3, [r7, #12]
    aa8c:	f103 0214 	add.w	r2, r3, #20	; 0x14
    aa90:	f04f 030e 	mov.w	r3, #14	; 0xe
    aa94:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(maxTorque);
    aa96:	68fb      	ldr	r3, [r7, #12]
    aa98:	f103 0218 	add.w	r2, r3, #24	; 0x18
    aa9c:	897b      	ldrh	r3, [r7, #10]
    aa9e:	b2db      	uxtb	r3, r3
    aaa0:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(maxTorque>>8); // high bits
    aaa2:	68fb      	ldr	r3, [r7, #12]
    aaa4:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    aaa8:	897b      	ldrh	r3, [r7, #10]
    aaaa:	ea4f 2323 	mov.w	r3, r3, asr #8
    aaae:	b2db      	uxtb	r3, r3
    aab0:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    aab2:	68fb      	ldr	r3, [r7, #12]
    aab4:	f103 0420 	add.w	r4, r3, #32	; 0x20
    aab8:	68fb      	ldr	r3, [r7, #12]
    aaba:	f103 030c 	add.w	r3, r3, #12	; 0xc
    aabe:	681b      	ldr	r3, [r3, #0]
    aac0:	b2da      	uxtb	r2, r3
    aac2:	68fb      	ldr	r3, [r7, #12]
    aac4:	f103 0108 	add.w	r1, r3, #8	; 0x8
    aac8:	b253      	sxtb	r3, r2
    aaca:	4618      	mov	r0, r3
    aacc:	f7ff ff1a 	bl	a904 <_Z12ax12ChecksumaPi>
    aad0:	4603      	mov	r3, r0
    aad2:	6023      	str	r3, [r4, #0]
    return 9;
    aad4:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    aad8:	4618      	mov	r0, r3
    aada:	f107 0714 	add.w	r7, r7, #20	; 0x14
    aade:	46bd      	mov	sp, r7
    aae0:	bd90      	pop	{r4, r7, pc}
    aae2:	46c0      	nop			(mov r8, r8)

0000aae4 <_ZN4AX1225getTorqueLimitInstructionEPiti>:
    retour[6] = (uint8_t)(angleLimite);
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getTorqueLimitInstruction(int* retour, uint16_t torqueLimite, int servo) // la torque dans la RAM
    aae4:	b590      	push	{r4, r7, lr}
    aae6:	b085      	sub	sp, #20
    aae8:	af00      	add	r7, sp, #0
    aaea:	60f8      	str	r0, [r7, #12]
    aaec:	460b      	mov	r3, r1
    aaee:	607a      	str	r2, [r7, #4]
    aaf0:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    aaf2:	68f8      	ldr	r0, [r7, #12]
    aaf4:	6879      	ldr	r1, [r7, #4]
    aaf6:	f04f 0201 	mov.w	r2, #1	; 0x1
    aafa:	f7ff ff31 	bl	a960 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_TORQUE_LIMIT_L;
    aafe:	68fb      	ldr	r3, [r7, #12]
    ab00:	f103 0214 	add.w	r2, r3, #20	; 0x14
    ab04:	f04f 0322 	mov.w	r3, #34	; 0x22
    ab08:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(torqueLimite);
    ab0a:	68fb      	ldr	r3, [r7, #12]
    ab0c:	f103 0218 	add.w	r2, r3, #24	; 0x18
    ab10:	897b      	ldrh	r3, [r7, #10]
    ab12:	b2db      	uxtb	r3, r3
    ab14:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(torqueLimite>>8); // high bits
    ab16:	68fb      	ldr	r3, [r7, #12]
    ab18:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    ab1c:	897b      	ldrh	r3, [r7, #10]
    ab1e:	ea4f 2323 	mov.w	r3, r3, asr #8
    ab22:	b2db      	uxtb	r3, r3
    ab24:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    ab26:	68fb      	ldr	r3, [r7, #12]
    ab28:	f103 0420 	add.w	r4, r3, #32	; 0x20
    ab2c:	68fb      	ldr	r3, [r7, #12]
    ab2e:	f103 030c 	add.w	r3, r3, #12	; 0xc
    ab32:	681b      	ldr	r3, [r3, #0]
    ab34:	b2da      	uxtb	r2, r3
    ab36:	68fb      	ldr	r3, [r7, #12]
    ab38:	f103 0108 	add.w	r1, r3, #8	; 0x8
    ab3c:	b253      	sxtb	r3, r2
    ab3e:	4618      	mov	r0, r3
    ab40:	f7ff fee0 	bl	a904 <_Z12ax12ChecksumaPi>
    ab44:	4603      	mov	r3, r0
    ab46:	6023      	str	r3, [r4, #0]
    return 9;
    ab48:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    ab4c:	4618      	mov	r0, r3
    ab4e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ab52:	46bd      	mov	sp, r7
    ab54:	bd90      	pop	{r4, r7, pc}
    ab56:	46c0      	nop			(mov r8, r8)

0000ab58 <_ZN4AX1229getAngleUpperLimitInstructionEPiti>:
    retour[6] = (uint8_t)(angleLimite);
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getAngleUpperLimitInstruction(int* retour, uint16_t angleLimite, int servo)
    ab58:	b590      	push	{r4, r7, lr}
    ab5a:	b085      	sub	sp, #20
    ab5c:	af00      	add	r7, sp, #0
    ab5e:	60f8      	str	r0, [r7, #12]
    ab60:	460b      	mov	r3, r1
    ab62:	607a      	str	r2, [r7, #4]
    ab64:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    ab66:	68f8      	ldr	r0, [r7, #12]
    ab68:	6879      	ldr	r1, [r7, #4]
    ab6a:	f04f 0201 	mov.w	r2, #1	; 0x1
    ab6e:	f7ff fef7 	bl	a960 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_CCW_ANGLE_LIMIT_L;
    ab72:	68fb      	ldr	r3, [r7, #12]
    ab74:	f103 0214 	add.w	r2, r3, #20	; 0x14
    ab78:	f04f 0308 	mov.w	r3, #8	; 0x8
    ab7c:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(angleLimite);
    ab7e:	68fb      	ldr	r3, [r7, #12]
    ab80:	f103 0218 	add.w	r2, r3, #24	; 0x18
    ab84:	897b      	ldrh	r3, [r7, #10]
    ab86:	b2db      	uxtb	r3, r3
    ab88:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    ab8a:	68fb      	ldr	r3, [r7, #12]
    ab8c:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    ab90:	897b      	ldrh	r3, [r7, #10]
    ab92:	ea4f 2323 	mov.w	r3, r3, asr #8
    ab96:	b2db      	uxtb	r3, r3
    ab98:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    ab9a:	68fb      	ldr	r3, [r7, #12]
    ab9c:	f103 0420 	add.w	r4, r3, #32	; 0x20
    aba0:	68fb      	ldr	r3, [r7, #12]
    aba2:	f103 030c 	add.w	r3, r3, #12	; 0xc
    aba6:	681b      	ldr	r3, [r3, #0]
    aba8:	b2da      	uxtb	r2, r3
    abaa:	68fb      	ldr	r3, [r7, #12]
    abac:	f103 0108 	add.w	r1, r3, #8	; 0x8
    abb0:	b253      	sxtb	r3, r2
    abb2:	4618      	mov	r0, r3
    abb4:	f7ff fea6 	bl	a904 <_Z12ax12ChecksumaPi>
    abb8:	4603      	mov	r3, r0
    abba:	6023      	str	r3, [r4, #0]
    return 9;
    abbc:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    abc0:	4618      	mov	r0, r3
    abc2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    abc6:	46bd      	mov	sp, r7
    abc8:	bd90      	pop	{r4, r7, pc}
    abca:	46c0      	nop			(mov r8, r8)

0000abcc <_ZN4AX1229getAngleLowerLimitInstructionEPiti>:
    retour[6] = (uint8_t)(vitesse);
    retour[7] = (uint8_t)(vitesse>>8);
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getAngleLowerLimitInstruction(int* retour, uint16_t angleLimite, int servo)
    abcc:	b590      	push	{r4, r7, lr}
    abce:	b085      	sub	sp, #20
    abd0:	af00      	add	r7, sp, #0
    abd2:	60f8      	str	r0, [r7, #12]
    abd4:	460b      	mov	r3, r1
    abd6:	607a      	str	r2, [r7, #4]
    abd8:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    abda:	68f8      	ldr	r0, [r7, #12]
    abdc:	6879      	ldr	r1, [r7, #4]
    abde:	f04f 0201 	mov.w	r2, #1	; 0x1
    abe2:	f7ff febd 	bl	a960 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_CW_ANGLE_LIMIT_L;
    abe6:	68fb      	ldr	r3, [r7, #12]
    abe8:	f103 0214 	add.w	r2, r3, #20	; 0x14
    abec:	f04f 0306 	mov.w	r3, #6	; 0x6
    abf0:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(angleLimite);
    abf2:	68fb      	ldr	r3, [r7, #12]
    abf4:	f103 0218 	add.w	r2, r3, #24	; 0x18
    abf8:	897b      	ldrh	r3, [r7, #10]
    abfa:	b2db      	uxtb	r3, r3
    abfc:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    abfe:	68fb      	ldr	r3, [r7, #12]
    ac00:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    ac04:	897b      	ldrh	r3, [r7, #10]
    ac06:	ea4f 2323 	mov.w	r3, r3, asr #8
    ac0a:	b2db      	uxtb	r3, r3
    ac0c:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    ac0e:	68fb      	ldr	r3, [r7, #12]
    ac10:	f103 0420 	add.w	r4, r3, #32	; 0x20
    ac14:	68fb      	ldr	r3, [r7, #12]
    ac16:	f103 030c 	add.w	r3, r3, #12	; 0xc
    ac1a:	681b      	ldr	r3, [r3, #0]
    ac1c:	b2da      	uxtb	r2, r3
    ac1e:	68fb      	ldr	r3, [r7, #12]
    ac20:	f103 0108 	add.w	r1, r3, #8	; 0x8
    ac24:	b253      	sxtb	r3, r2
    ac26:	4618      	mov	r0, r3
    ac28:	f7ff fe6c 	bl	a904 <_Z12ax12ChecksumaPi>
    ac2c:	4603      	mov	r3, r0
    ac2e:	6023      	str	r3, [r4, #0]
    return 9;
    ac30:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    ac34:	4618      	mov	r0, r3
    ac36:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ac3a:	46bd      	mov	sp, r7
    ac3c:	bd90      	pop	{r4, r7, pc}
    ac3e:	46c0      	nop			(mov r8, r8)

0000ac40 <_ZN4AX1223getMoveSpeedInstructionEPith>:
    retour[6] = (uint8_t)(position);
    retour[7] = (uint8_t)(position>>8);
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getMoveSpeedInstruction(int* retour, uint16_t vitesse, uint8_t servo)
    ac40:	b590      	push	{r4, r7, lr}
    ac42:	b083      	sub	sp, #12
    ac44:	af00      	add	r7, sp, #0
    ac46:	6078      	str	r0, [r7, #4]
    ac48:	460b      	mov	r3, r1
    ac4a:	807b      	strh	r3, [r7, #2]
    ac4c:	4613      	mov	r3, r2
    ac4e:	707b      	strb	r3, [r7, #1]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for high speed)
    ac50:	787b      	ldrb	r3, [r7, #1]
    ac52:	6878      	ldr	r0, [r7, #4]
    ac54:	4619      	mov	r1, r3
    ac56:	f04f 0201 	mov.w	r2, #1	; 0x1
    ac5a:	f7ff fe81 	bl	a960 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_MOVING_SPEED_L;
    ac5e:	687b      	ldr	r3, [r7, #4]
    ac60:	f103 0214 	add.w	r2, r3, #20	; 0x14
    ac64:	f04f 0320 	mov.w	r3, #32	; 0x20
    ac68:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(vitesse);
    ac6a:	687b      	ldr	r3, [r7, #4]
    ac6c:	f103 0218 	add.w	r2, r3, #24	; 0x18
    ac70:	887b      	ldrh	r3, [r7, #2]
    ac72:	b2db      	uxtb	r3, r3
    ac74:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(vitesse>>8);
    ac76:	687b      	ldr	r3, [r7, #4]
    ac78:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    ac7c:	887b      	ldrh	r3, [r7, #2]
    ac7e:	ea4f 2323 	mov.w	r3, r3, asr #8
    ac82:	b2db      	uxtb	r3, r3
    ac84:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    ac86:	687b      	ldr	r3, [r7, #4]
    ac88:	f103 0420 	add.w	r4, r3, #32	; 0x20
    ac8c:	687b      	ldr	r3, [r7, #4]
    ac8e:	f103 030c 	add.w	r3, r3, #12	; 0xc
    ac92:	681b      	ldr	r3, [r3, #0]
    ac94:	b2da      	uxtb	r2, r3
    ac96:	687b      	ldr	r3, [r7, #4]
    ac98:	f103 0108 	add.w	r1, r3, #8	; 0x8
    ac9c:	b253      	sxtb	r3, r2
    ac9e:	4618      	mov	r0, r3
    aca0:	f7ff fe30 	bl	a904 <_Z12ax12ChecksumaPi>
    aca4:	4603      	mov	r3, r0
    aca6:	6023      	str	r3, [r4, #0]
    return 9;
    aca8:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    acac:	4618      	mov	r0, r3
    acae:	f107 070c 	add.w	r7, r7, #12	; 0xc
    acb2:	46bd      	mov	sp, r7
    acb4:	bd90      	pop	{r4, r7, pc}
    acb6:	46c0      	nop			(mov r8, r8)

0000acb8 <_ZN4AX1220getMoveToInstructionEPith>:
    retour[8] = (uint8_t)(vitesse);
    retour[9] = (uint8_t)(vitesse>>8);
    retour[10] = ax12Checksum(retour[3], &retour[2]);
    return 11;
}
int AX12::getMoveToInstruction(int* retour, uint16_t position, uint8_t servo)
    acb8:	b590      	push	{r4, r7, lr}
    acba:	b083      	sub	sp, #12
    acbc:	af00      	add	r7, sp, #0
    acbe:	6078      	str	r0, [r7, #4]
    acc0:	460b      	mov	r3, r1
    acc2:	807b      	strh	r3, [r7, #2]
    acc4:	4613      	mov	r3, r2
    acc6:	707b      	strb	r3, [r7, #1]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for high position bits)
    acc8:	787b      	ldrb	r3, [r7, #1]
    acca:	6878      	ldr	r0, [r7, #4]
    accc:	4619      	mov	r1, r3
    acce:	f04f 0201 	mov.w	r2, #1	; 0x1
    acd2:	f7ff fe45 	bl	a960 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_GOAL_POSITION_L;
    acd6:	687b      	ldr	r3, [r7, #4]
    acd8:	f103 0214 	add.w	r2, r3, #20	; 0x14
    acdc:	f04f 031e 	mov.w	r3, #30	; 0x1e
    ace0:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(position);
    ace2:	687b      	ldr	r3, [r7, #4]
    ace4:	f103 0218 	add.w	r2, r3, #24	; 0x18
    ace8:	887b      	ldrh	r3, [r7, #2]
    acea:	b2db      	uxtb	r3, r3
    acec:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(position>>8);
    acee:	687b      	ldr	r3, [r7, #4]
    acf0:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    acf4:	887b      	ldrh	r3, [r7, #2]
    acf6:	ea4f 2323 	mov.w	r3, r3, asr #8
    acfa:	b2db      	uxtb	r3, r3
    acfc:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    acfe:	687b      	ldr	r3, [r7, #4]
    ad00:	f103 0420 	add.w	r4, r3, #32	; 0x20
    ad04:	687b      	ldr	r3, [r7, #4]
    ad06:	f103 030c 	add.w	r3, r3, #12	; 0xc
    ad0a:	681b      	ldr	r3, [r3, #0]
    ad0c:	b2da      	uxtb	r2, r3
    ad0e:	687b      	ldr	r3, [r7, #4]
    ad10:	f103 0108 	add.w	r1, r3, #8	; 0x8
    ad14:	b253      	sxtb	r3, r2
    ad16:	4618      	mov	r0, r3
    ad18:	f7ff fdf4 	bl	a904 <_Z12ax12ChecksumaPi>
    ad1c:	4603      	mov	r3, r0
    ad1e:	6023      	str	r3, [r4, #0]
    return 9;
    ad20:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    ad24:	4618      	mov	r0, r3
    ad26:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ad2a:	46bd      	mov	sp, r7
    ad2c:	bd90      	pop	{r4, r7, pc}
    ad2e:	46c0      	nop			(mov r8, r8)

0000ad30 <_ZN4AX1218getMoveInstructionEPitth>:
    for(int i = 0; i < length+1; i++) {
		checksum += parameters[i];
	}
	return (int)(int8_t)(~checksum); // ~ est l'opérateur NOT bit a bit
}
int AX12::getMoveInstruction(int* retour, uint16_t position, uint16_t vitesse, uint8_t servo)
    ad30:	b590      	push	{r4, r7, lr}
    ad32:	b085      	sub	sp, #20
    ad34:	af00      	add	r7, sp, #0
    ad36:	60f8      	str	r0, [r7, #12]
    ad38:	4618      	mov	r0, r3
    ad3a:	460b      	mov	r3, r1
    ad3c:	817b      	strh	r3, [r7, #10]
    ad3e:	4613      	mov	r3, r2
    ad40:	813b      	strh	r3, [r7, #8]
    ad42:	4603      	mov	r3, r0
    ad44:	71fb      	strb	r3, [r7, #7]
{
    createWriteHeader(retour, servo, 3); // first, we create a write header with 3 more params (for low/height pos and low/height speed)
    ad46:	79fb      	ldrb	r3, [r7, #7]
    ad48:	68f8      	ldr	r0, [r7, #12]
    ad4a:	4619      	mov	r1, r3
    ad4c:	f04f 0203 	mov.w	r2, #3	; 0x3
    ad50:	f7ff fe06 	bl	a960 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_GOAL_POSITION_L;
    ad54:	68fb      	ldr	r3, [r7, #12]
    ad56:	f103 0214 	add.w	r2, r3, #20	; 0x14
    ad5a:	f04f 031e 	mov.w	r3, #30	; 0x1e
    ad5e:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(position);
    ad60:	68fb      	ldr	r3, [r7, #12]
    ad62:	f103 0218 	add.w	r2, r3, #24	; 0x18
    ad66:	897b      	ldrh	r3, [r7, #10]
    ad68:	b2db      	uxtb	r3, r3
    ad6a:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(position>>8);
    ad6c:	68fb      	ldr	r3, [r7, #12]
    ad6e:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    ad72:	897b      	ldrh	r3, [r7, #10]
    ad74:	ea4f 2323 	mov.w	r3, r3, asr #8
    ad78:	b2db      	uxtb	r3, r3
    ad7a:	6013      	str	r3, [r2, #0]
    retour[8] = (uint8_t)(vitesse);
    ad7c:	68fb      	ldr	r3, [r7, #12]
    ad7e:	f103 0220 	add.w	r2, r3, #32	; 0x20
    ad82:	893b      	ldrh	r3, [r7, #8]
    ad84:	b2db      	uxtb	r3, r3
    ad86:	6013      	str	r3, [r2, #0]
    retour[9] = (uint8_t)(vitesse>>8);
    ad88:	68fb      	ldr	r3, [r7, #12]
    ad8a:	f103 0224 	add.w	r2, r3, #36	; 0x24
    ad8e:	893b      	ldrh	r3, [r7, #8]
    ad90:	ea4f 2323 	mov.w	r3, r3, asr #8
    ad94:	b2db      	uxtb	r3, r3
    ad96:	6013      	str	r3, [r2, #0]
    retour[10] = ax12Checksum(retour[3], &retour[2]);
    ad98:	68fb      	ldr	r3, [r7, #12]
    ad9a:	f103 0428 	add.w	r4, r3, #40	; 0x28
    ad9e:	68fb      	ldr	r3, [r7, #12]
    ada0:	f103 030c 	add.w	r3, r3, #12	; 0xc
    ada4:	681b      	ldr	r3, [r3, #0]
    ada6:	b2da      	uxtb	r2, r3
    ada8:	68fb      	ldr	r3, [r7, #12]
    adaa:	f103 0108 	add.w	r1, r3, #8	; 0x8
    adae:	b253      	sxtb	r3, r2
    adb0:	4618      	mov	r0, r3
    adb2:	f7ff fda7 	bl	a904 <_Z12ax12ChecksumaPi>
    adb6:	4603      	mov	r3, r0
    adb8:	6023      	str	r3, [r4, #0]
    return 11;
    adba:	f04f 030b 	mov.w	r3, #11	; 0xb
}
    adbe:	4618      	mov	r0, r3
    adc0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    adc4:	46bd      	mov	sp, r7
    adc6:	bd90      	pop	{r4, r7, pc}

0000adc8 <_ZN29CommandCalibrerCapteurCouleur14getLinearSpeedEv>:
            break;
    }
}

// renvoient 0
Vitesse CommandCalibrerCapteurCouleur::getLinearSpeed()
    adc8:	b480      	push	{r7}
    adca:	b083      	sub	sp, #12
    adcc:	af00      	add	r7, sp, #0
    adce:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    add0:	4b03      	ldr	r3, [pc, #12]	(ade0 <_ZN29CommandCalibrerCapteurCouleur14getLinearSpeedEv+0x18>)
}
    add2:	4618      	mov	r0, r3
    add4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    add8:	46bd      	mov	sp, r7
    adda:	bc80      	pop	{r7}
    addc:	4770      	bx	lr
    adde:	46c0      	nop			(mov r8, r8)
    ade0:	0000      	.short	0x0000
	...

0000ade4 <_ZN29CommandCalibrerCapteurCouleur15getAngularSpeedEv>:

Angle CommandCalibrerCapteurCouleur::getAngularSpeed()
    ade4:	b480      	push	{r7}
    ade6:	b083      	sub	sp, #12
    ade8:	af00      	add	r7, sp, #0
    adea:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    adec:	4b03      	ldr	r3, [pc, #12]	(adfc <_ZN29CommandCalibrerCapteurCouleur15getAngularSpeedEv+0x18>)
}
    adee:	4618      	mov	r0, r3
    adf0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    adf4:	46bd      	mov	sp, r7
    adf6:	bc80      	pop	{r7}
    adf8:	4770      	bx	lr
    adfa:	46c0      	nop			(mov r8, r8)
    adfc:	00000000 	.word	0x00000000

0000ae00 <_ZNK29CommandCalibrerCapteurCouleur4finiEv>:

// renvoit si le capteur a fini sa calibration
// le résultat est lisible dans getTicksMoyens()
bool CommandCalibrerCapteurCouleur::fini() const
    ae00:	b480      	push	{r7}
    ae02:	b083      	sub	sp, #12
    ae04:	af00      	add	r7, sp, #0
    ae06:	6078      	str	r0, [r7, #4]
{
    return (state > 4);
    ae08:	687b      	ldr	r3, [r7, #4]
    ae0a:	689b      	ldr	r3, [r3, #8]
    ae0c:	2b04      	cmp	r3, #4
    ae0e:	bfd4      	ite	le
    ae10:	2300      	movle	r3, #0
    ae12:	2301      	movgt	r3, #1
    ae14:	b2db      	uxtb	r3, r3
}
    ae16:	4618      	mov	r0, r3
    ae18:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ae1c:	46bd      	mov	sp, r7
    ae1e:	bc80      	pop	{r7}
    ae20:	4770      	bx	lr
    ae22:	46c0      	nop			(mov r8, r8)

0000ae24 <_ZNK29CommandCalibrerCapteurCouleur14getTicksMoyensEv>:

// une fois fini, renvoit le seuil calculé
uint16_t CommandCalibrerCapteurCouleur::getTicksMoyens() const
    ae24:	b480      	push	{r7}
    ae26:	b083      	sub	sp, #12
    ae28:	af00      	add	r7, sp, #0
    ae2a:	6078      	str	r0, [r7, #4]
{
    return resultat;
    ae2c:	687b      	ldr	r3, [r7, #4]
    ae2e:	899b      	ldrh	r3, [r3, #12]
}
    ae30:	4618      	mov	r0, r3
    ae32:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ae36:	46bd      	mov	sp, r7
    ae38:	bc80      	pop	{r7}
    ae3a:	4770      	bx	lr

0000ae3c <_ZN19CommandCheckCouleur14getLinearSpeedEv>:
            state++;
    }
}

// renvoient 0
Vitesse CommandCheckCouleur::getLinearSpeed()
    ae3c:	b480      	push	{r7}
    ae3e:	b083      	sub	sp, #12
    ae40:	af00      	add	r7, sp, #0
    ae42:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    ae44:	4b03      	ldr	r3, [pc, #12]	(ae54 <_ZN19CommandCheckCouleur14getLinearSpeedEv+0x18>)
}
    ae46:	4618      	mov	r0, r3
    ae48:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ae4c:	46bd      	mov	sp, r7
    ae4e:	bc80      	pop	{r7}
    ae50:	4770      	bx	lr
    ae52:	46c0      	nop			(mov r8, r8)
    ae54:	00000000 	.word	0x00000000

0000ae58 <_ZN19CommandCheckCouleur15getAngularSpeedEv>:

Angle CommandCheckCouleur::getAngularSpeed()
    ae58:	b480      	push	{r7}
    ae5a:	b083      	sub	sp, #12
    ae5c:	af00      	add	r7, sp, #0
    ae5e:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    ae60:	4b03      	ldr	r3, [pc, #12]	(ae70 <_ZN19CommandCheckCouleur15getAngularSpeedEv+0x18>)
}
    ae62:	4618      	mov	r0, r3
    ae64:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ae68:	46bd      	mov	sp, r7
    ae6a:	bc80      	pop	{r7}
    ae6c:	4770      	bx	lr
    ae6e:	46c0      	nop			(mov r8, r8)
    ae70:	00000000 	.word	0x00000000

0000ae74 <_ZNK19CommandCheckCouleur4finiEv>:

// renvoit si le capteur a fini de check la couleur
// le résultat est disponible dans les fonctions bleue() et rouge()
bool CommandCheckCouleur::fini() const
    ae74:	b480      	push	{r7}
    ae76:	b083      	sub	sp, #12
    ae78:	af00      	add	r7, sp, #0
    ae7a:	6078      	str	r0, [r7, #4]
{
    return (state >= 4);
    ae7c:	687b      	ldr	r3, [r7, #4]
    ae7e:	695b      	ldr	r3, [r3, #20]
    ae80:	2b03      	cmp	r3, #3
    ae82:	bfd4      	ite	le
    ae84:	2300      	movle	r3, #0
    ae86:	2301      	movgt	r3, #1
    ae88:	b2db      	uxtb	r3, r3
}
    ae8a:	4618      	mov	r0, r3
    ae8c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ae90:	46bd      	mov	sp, r7
    ae92:	bc80      	pop	{r7}
    ae94:	4770      	bx	lr
    ae96:	46c0      	nop			(mov r8, r8)

0000ae98 <_ZNK19CommandCheckCouleur5bleueEv>:

// une fois fini, renvoit la couleur
// les 2 peuvent renvoyer true si on est pas sur de la couleur
bool CommandCheckCouleur::bleue() const
    ae98:	b590      	push	{r4, r7, lr}
    ae9a:	b083      	sub	sp, #12
    ae9c:	af00      	add	r7, sp, #0
    ae9e:	6078      	str	r0, [r7, #4]
{
    return (float)bleuMesure > 1.15f*(float)seuilMoyenne;
    aea0:	687b      	ldr	r3, [r7, #4]
    aea2:	899b      	ldrh	r3, [r3, #12]
    aea4:	4618      	mov	r0, r3
    aea6:	f00f fd49 	bl	1a93c <__aeabi_ui2f>
    aeaa:	4604      	mov	r4, r0
    aeac:	687b      	ldr	r3, [r7, #4]
    aeae:	889b      	ldrh	r3, [r3, #4]
    aeb0:	4618      	mov	r0, r3
    aeb2:	f00f fd43 	bl	1a93c <__aeabi_ui2f>
    aeb6:	4603      	mov	r3, r0
    aeb8:	4618      	mov	r0, r3
    aeba:	490c      	ldr	r1, [pc, #48]	(aeec <_ZNK19CommandCheckCouleur5bleueEv+0x54>)
    aebc:	f00f fd96 	bl	1a9ec <__aeabi_fmul>
    aec0:	4603      	mov	r3, r0
    aec2:	461a      	mov	r2, r3
    aec4:	f04f 0300 	mov.w	r3, #0	; 0x0
    aec8:	70fb      	strb	r3, [r7, #3]
    aeca:	4620      	mov	r0, r4
    aecc:	4611      	mov	r1, r2
    aece:	f00f ff47 	bl	1ad60 <__aeabi_fcmpgt>
    aed2:	4603      	mov	r3, r0
    aed4:	2b00      	cmp	r3, #0
    aed6:	d002      	beq.n	aede <_ZNK19CommandCheckCouleur5bleueEv+0x46>
    aed8:	f04f 0301 	mov.w	r3, #1	; 0x1
    aedc:	70fb      	strb	r3, [r7, #3]
    aede:	78fb      	ldrb	r3, [r7, #3]
}
    aee0:	4618      	mov	r0, r3
    aee2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    aee6:	46bd      	mov	sp, r7
    aee8:	bd90      	pop	{r4, r7, pc}
    aeea:	46c0      	nop			(mov r8, r8)
    aeec:	3f933333 	.word	0x3f933333

0000aef0 <_ZNK19CommandCheckCouleur5rougeEv>:

bool CommandCheckCouleur::rouge() const
    aef0:	b590      	push	{r4, r7, lr}
    aef2:	b083      	sub	sp, #12
    aef4:	af00      	add	r7, sp, #0
    aef6:	6078      	str	r0, [r7, #4]
{
    return (float)rougeMesure > 1.15f*(float)seuilMoyenne;
    aef8:	687b      	ldr	r3, [r7, #4]
    aefa:	89db      	ldrh	r3, [r3, #14]
    aefc:	4618      	mov	r0, r3
    aefe:	f00f fd1d 	bl	1a93c <__aeabi_ui2f>
    af02:	4604      	mov	r4, r0
    af04:	687b      	ldr	r3, [r7, #4]
    af06:	889b      	ldrh	r3, [r3, #4]
    af08:	4618      	mov	r0, r3
    af0a:	f00f fd17 	bl	1a93c <__aeabi_ui2f>
    af0e:	4603      	mov	r3, r0
    af10:	4618      	mov	r0, r3
    af12:	490c      	ldr	r1, [pc, #48]	(af44 <_ZNK19CommandCheckCouleur5rougeEv+0x54>)
    af14:	f00f fd6a 	bl	1a9ec <__aeabi_fmul>
    af18:	4603      	mov	r3, r0
    af1a:	461a      	mov	r2, r3
    af1c:	f04f 0300 	mov.w	r3, #0	; 0x0
    af20:	70fb      	strb	r3, [r7, #3]
    af22:	4620      	mov	r0, r4
    af24:	4611      	mov	r1, r2
    af26:	f00f ff1b 	bl	1ad60 <__aeabi_fcmpgt>
    af2a:	4603      	mov	r3, r0
    af2c:	2b00      	cmp	r3, #0
    af2e:	d002      	beq.n	af36 <_ZNK19CommandCheckCouleur5rougeEv+0x46>
    af30:	f04f 0301 	mov.w	r3, #1	; 0x1
    af34:	70fb      	strb	r3, [r7, #3]
    af36:	78fb      	ldrb	r3, [r7, #3]
}
    af38:	4618      	mov	r0, r3
    af3a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    af3e:	46bd      	mov	sp, r7
    af40:	bd90      	pop	{r4, r7, pc}
    af42:	46c0      	nop			(mov r8, r8)
    af44:	3f933333 	.word	0x3f933333

0000af48 <_ZN29CommandCalibrerCapteurCouleurC1EP14CapteurCouleur>:


// permet de calibrer le capteur couleur en calculant la valeur moyenne de chaque capteur
// nécessite 5 updates chaque 5 ms
// la première update peut se faire juste après la construction
CommandCalibrerCapteurCouleur::CommandCalibrerCapteurCouleur(CapteurCouleur* capteur)
    af48:	b580      	push	{r7, lr}
    af4a:	b082      	sub	sp, #8
    af4c:	af00      	add	r7, sp, #0
    af4e:	6078      	str	r0, [r7, #4]
    af50:	6039      	str	r1, [r7, #0]
    : capteurCouleur(capteur), state(0), resultat(0)
    af52:	687b      	ldr	r3, [r7, #4]
    af54:	4618      	mov	r0, r3
    af56:	f7fc fcf3 	bl	7940 <_ZN7CommandC2Ev>
    af5a:	687a      	ldr	r2, [r7, #4]
    af5c:	4b09      	ldr	r3, [pc, #36]	(af84 <_ZN29CommandCalibrerCapteurCouleurC1EP14CapteurCouleur+0x3c>)
    af5e:	6013      	str	r3, [r2, #0]
    af60:	687a      	ldr	r2, [r7, #4]
    af62:	683b      	ldr	r3, [r7, #0]
    af64:	6053      	str	r3, [r2, #4]
    af66:	687a      	ldr	r2, [r7, #4]
    af68:	f04f 0300 	mov.w	r3, #0	; 0x0
    af6c:	6093      	str	r3, [r2, #8]
    af6e:	687a      	ldr	r2, [r7, #4]
    af70:	f04f 0300 	mov.w	r3, #0	; 0x0
    af74:	8193      	strh	r3, [r2, #12]
{
}
    af76:	687b      	ldr	r3, [r7, #4]
    af78:	4618      	mov	r0, r3
    af7a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    af7e:	46bd      	mov	sp, r7
    af80:	bd80      	pop	{r7, pc}
    af82:	46c0      	nop			(mov r8, r8)
    af84:	000219c8 	.word	0x000219c8

0000af88 <_ZN29CommandCalibrerCapteurCouleurC2EP14CapteurCouleur>:


// permet de calibrer le capteur couleur en calculant la valeur moyenne de chaque capteur
// nécessite 5 updates chaque 5 ms
// la première update peut se faire juste après la construction
CommandCalibrerCapteurCouleur::CommandCalibrerCapteurCouleur(CapteurCouleur* capteur)
    af88:	b580      	push	{r7, lr}
    af8a:	b082      	sub	sp, #8
    af8c:	af00      	add	r7, sp, #0
    af8e:	6078      	str	r0, [r7, #4]
    af90:	6039      	str	r1, [r7, #0]
    : capteurCouleur(capteur), state(0), resultat(0)
    af92:	687b      	ldr	r3, [r7, #4]
    af94:	4618      	mov	r0, r3
    af96:	f7fc fcd3 	bl	7940 <_ZN7CommandC2Ev>
    af9a:	687a      	ldr	r2, [r7, #4]
    af9c:	4b09      	ldr	r3, [pc, #36]	(afc4 <_ZN29CommandCalibrerCapteurCouleurC2EP14CapteurCouleur+0x3c>)
    af9e:	6013      	str	r3, [r2, #0]
    afa0:	687a      	ldr	r2, [r7, #4]
    afa2:	683b      	ldr	r3, [r7, #0]
    afa4:	6053      	str	r3, [r2, #4]
    afa6:	687a      	ldr	r2, [r7, #4]
    afa8:	f04f 0300 	mov.w	r3, #0	; 0x0
    afac:	6093      	str	r3, [r2, #8]
    afae:	687a      	ldr	r2, [r7, #4]
    afb0:	f04f 0300 	mov.w	r3, #0	; 0x0
    afb4:	8193      	strh	r3, [r2, #12]
{
}
    afb6:	687b      	ldr	r3, [r7, #4]
    afb8:	4618      	mov	r0, r3
    afba:	f107 0708 	add.w	r7, r7, #8	; 0x8
    afbe:	46bd      	mov	sp, r7
    afc0:	bd80      	pop	{r7, pc}
    afc2:	46c0      	nop			(mov r8, r8)
    afc4:	000219c8 	.word	0x000219c8

0000afc8 <_ZN14CapteurCouleur12getTickValueEv>:
    TIM_SetCounter(m_TIMx, 0);
}

// Permet de connaitre le nombre de ticks depuis le dernier appel de cette fonction
// ou depuis le dernier appel de la selection du capteur
uint16_t CapteurCouleur::getTickValue()
    afc8:	b580      	push	{r7, lr}
    afca:	b084      	sub	sp, #16
    afcc:	af00      	add	r7, sp, #0
    afce:	6078      	str	r0, [r7, #4]
{
    // récupère le nombre de ticks depuis la dernière mise à 0
    uint16_t tick = TIM_GetCounter(m_TIMx);
    afd0:	687b      	ldr	r3, [r7, #4]
    afd2:	681b      	ldr	r3, [r3, #0]
    afd4:	4618      	mov	r0, r3
    afd6:	f7f9 f8d3 	bl	4180 <TIM_GetCounter>
    afda:	4603      	mov	r3, r0
    afdc:	81fb      	strh	r3, [r7, #14]

    // remet à 0
    TIM_SetCounter(m_TIMx, 0);
    afde:	687b      	ldr	r3, [r7, #4]
    afe0:	681b      	ldr	r3, [r3, #0]
    afe2:	4618      	mov	r0, r3
    afe4:	f04f 0100 	mov.w	r1, #0	; 0x0
    afe8:	f7f8 ff90 	bl	3f0c <TIM_SetCounter>

    return tick;
    afec:	89fb      	ldrh	r3, [r7, #14]
}
    afee:	4618      	mov	r0, r3
    aff0:	f107 0710 	add.w	r7, r7, #16	; 0x10
    aff4:	46bd      	mov	sp, r7
    aff6:	bd80      	pop	{r7, pc}

0000aff8 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>:
            break;
    }
}

// selectionne le capteur
void CapteurCouleur::activerCapteur(PositionCapteurCouleur position)
    aff8:	b580      	push	{r7, lr}
    affa:	b082      	sub	sp, #8
    affc:	af00      	add	r7, sp, #0
    affe:	6078      	str	r0, [r7, #4]
    b000:	460b      	mov	r3, r1
    b002:	70fb      	strb	r3, [r7, #3]
{
    // selection du capteur
    switch (position)
    b004:	78fb      	ldrb	r3, [r7, #3]
    b006:	2b03      	cmp	r3, #3
    b008:	d85d      	bhi.n	b0c6 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
    b00a:	a201      	add	r2, pc, #4	(adr r2, b010 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0x18>)
    b00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b010:	0000b021 	.word	0x0000b021
    b014:	0000b04b 	.word	0x0000b04b
    b018:	0000b075 	.word	0x0000b075
    b01c:	0000b09f 	.word	0x0000b09f
    {
        case GAUCHE_HAUT:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_RESET);
    b020:	687b      	ldr	r3, [r7, #4]
    b022:	695a      	ldr	r2, [r3, #20]
    b024:	687b      	ldr	r3, [r7, #4]
    b026:	8b1b      	ldrh	r3, [r3, #24]
    b028:	4610      	mov	r0, r2
    b02a:	4619      	mov	r1, r3
    b02c:	f04f 0200 	mov.w	r2, #0	; 0x0
    b030:	f7f6 fcac 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_SET);
    b034:	687b      	ldr	r3, [r7, #4]
    b036:	69da      	ldr	r2, [r3, #28]
    b038:	687b      	ldr	r3, [r7, #4]
    b03a:	8c1b      	ldrh	r3, [r3, #32]
    b03c:	4610      	mov	r0, r2
    b03e:	4619      	mov	r1, r3
    b040:	f04f 0201 	mov.w	r2, #1	; 0x1
    b044:	f7f6 fca2 	bl	198c <GPIO_WriteBit>
    b048:	e03d      	b.n	b0c6 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
            break;
        case GAUCHE_BAS:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_SET);
    b04a:	687b      	ldr	r3, [r7, #4]
    b04c:	695a      	ldr	r2, [r3, #20]
    b04e:	687b      	ldr	r3, [r7, #4]
    b050:	8b1b      	ldrh	r3, [r3, #24]
    b052:	4610      	mov	r0, r2
    b054:	4619      	mov	r1, r3
    b056:	f04f 0201 	mov.w	r2, #1	; 0x1
    b05a:	f7f6 fc97 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_SET);
    b05e:	687b      	ldr	r3, [r7, #4]
    b060:	69da      	ldr	r2, [r3, #28]
    b062:	687b      	ldr	r3, [r7, #4]
    b064:	8c1b      	ldrh	r3, [r3, #32]
    b066:	4610      	mov	r0, r2
    b068:	4619      	mov	r1, r3
    b06a:	f04f 0201 	mov.w	r2, #1	; 0x1
    b06e:	f7f6 fc8d 	bl	198c <GPIO_WriteBit>
    b072:	e028      	b.n	b0c6 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
            break;
        case DROITE_HAUT:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_RESET);
    b074:	687b      	ldr	r3, [r7, #4]
    b076:	695a      	ldr	r2, [r3, #20]
    b078:	687b      	ldr	r3, [r7, #4]
    b07a:	8b1b      	ldrh	r3, [r3, #24]
    b07c:	4610      	mov	r0, r2
    b07e:	4619      	mov	r1, r3
    b080:	f04f 0200 	mov.w	r2, #0	; 0x0
    b084:	f7f6 fc82 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_RESET);
    b088:	687b      	ldr	r3, [r7, #4]
    b08a:	69da      	ldr	r2, [r3, #28]
    b08c:	687b      	ldr	r3, [r7, #4]
    b08e:	8c1b      	ldrh	r3, [r3, #32]
    b090:	4610      	mov	r0, r2
    b092:	4619      	mov	r1, r3
    b094:	f04f 0200 	mov.w	r2, #0	; 0x0
    b098:	f7f6 fc78 	bl	198c <GPIO_WriteBit>
    b09c:	e013      	b.n	b0c6 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
            break;
        case DROITE_BAS:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_SET);
    b09e:	687b      	ldr	r3, [r7, #4]
    b0a0:	695a      	ldr	r2, [r3, #20]
    b0a2:	687b      	ldr	r3, [r7, #4]
    b0a4:	8b1b      	ldrh	r3, [r3, #24]
    b0a6:	4610      	mov	r0, r2
    b0a8:	4619      	mov	r1, r3
    b0aa:	f04f 0201 	mov.w	r2, #1	; 0x1
    b0ae:	f7f6 fc6d 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_RESET);
    b0b2:	687b      	ldr	r3, [r7, #4]
    b0b4:	69da      	ldr	r2, [r3, #28]
    b0b6:	687b      	ldr	r3, [r7, #4]
    b0b8:	8c1b      	ldrh	r3, [r3, #32]
    b0ba:	4610      	mov	r0, r2
    b0bc:	4619      	mov	r1, r3
    b0be:	f04f 0200 	mov.w	r2, #0	; 0x0
    b0c2:	f7f6 fc63 	bl	198c <GPIO_WriteBit>
            break;
    }

    // remet à 0
    TIM_SetCounter(m_TIMx, 0);
    b0c6:	687b      	ldr	r3, [r7, #4]
    b0c8:	681b      	ldr	r3, [r3, #0]
    b0ca:	4618      	mov	r0, r3
    b0cc:	f04f 0100 	mov.w	r1, #0	; 0x0
    b0d0:	f7f8 ff1c 	bl	3f0c <TIM_SetCounter>
}
    b0d4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b0d8:	46bd      	mov	sp, r7
    b0da:	bd80      	pop	{r7, pc}

0000b0dc <_ZN29CommandCalibrerCapteurCouleur6updateEv>:
    : capteurCouleur(capteur), state(0), resultat(0)
{
}

// récupère la valeur d'un capteur et passe à un autre
void CommandCalibrerCapteurCouleur::update()
    b0dc:	b590      	push	{r4, r7, lr}
    b0de:	b083      	sub	sp, #12
    b0e0:	af00      	add	r7, sp, #0
    b0e2:	6078      	str	r0, [r7, #4]
{
    switch (state)
    b0e4:	687b      	ldr	r3, [r7, #4]
    b0e6:	689b      	ldr	r3, [r3, #8]
    b0e8:	2b04      	cmp	r3, #4
    b0ea:	f200 8082 	bhi.w	b1f2 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
    b0ee:	a201      	add	r2, pc, #4	(adr r2, b0f4 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x18>)
    b0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b0f4:	0000b109 	.word	0x0000b109
    b0f8:	0000b125 	.word	0x0000b125
    b0fc:	0000b159 	.word	0x0000b159
    b100:	0000b18d 	.word	0x0000b18d
    b104:	0000b1c1 	.word	0x0000b1c1
    {
        case 0:
            capteurCouleur->activerCapteur(GAUCHE_HAUT);
    b108:	687b      	ldr	r3, [r7, #4]
    b10a:	685b      	ldr	r3, [r3, #4]
    b10c:	4618      	mov	r0, r3
    b10e:	f04f 0100 	mov.w	r1, #0	; 0x0
    b112:	f7ff ff71 	bl	aff8 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    b116:	687b      	ldr	r3, [r7, #4]
    b118:	689b      	ldr	r3, [r3, #8]
    b11a:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b11e:	687b      	ldr	r3, [r7, #4]
    b120:	609a      	str	r2, [r3, #8]
    b122:	e066      	b.n	b1f2 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 1:
            resultat += capteurCouleur->getTickValue();
    b124:	687b      	ldr	r3, [r7, #4]
    b126:	899c      	ldrh	r4, [r3, #12]
    b128:	687b      	ldr	r3, [r7, #4]
    b12a:	685b      	ldr	r3, [r3, #4]
    b12c:	4618      	mov	r0, r3
    b12e:	f7ff ff4b 	bl	afc8 <_ZN14CapteurCouleur12getTickValueEv>
    b132:	4603      	mov	r3, r0
    b134:	4423      	add	r3, r4
    b136:	b29b      	uxth	r3, r3
    b138:	687a      	ldr	r2, [r7, #4]
    b13a:	8193      	strh	r3, [r2, #12]
            capteurCouleur->activerCapteur(GAUCHE_BAS);
    b13c:	687b      	ldr	r3, [r7, #4]
    b13e:	685b      	ldr	r3, [r3, #4]
    b140:	4618      	mov	r0, r3
    b142:	f04f 0101 	mov.w	r1, #1	; 0x1
    b146:	f7ff ff57 	bl	aff8 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    b14a:	687b      	ldr	r3, [r7, #4]
    b14c:	689b      	ldr	r3, [r3, #8]
    b14e:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b152:	687b      	ldr	r3, [r7, #4]
    b154:	609a      	str	r2, [r3, #8]
    b156:	e04c      	b.n	b1f2 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 2:
            resultat += capteurCouleur->getTickValue();
    b158:	687b      	ldr	r3, [r7, #4]
    b15a:	899c      	ldrh	r4, [r3, #12]
    b15c:	687b      	ldr	r3, [r7, #4]
    b15e:	685b      	ldr	r3, [r3, #4]
    b160:	4618      	mov	r0, r3
    b162:	f7ff ff31 	bl	afc8 <_ZN14CapteurCouleur12getTickValueEv>
    b166:	4603      	mov	r3, r0
    b168:	4423      	add	r3, r4
    b16a:	b29b      	uxth	r3, r3
    b16c:	687a      	ldr	r2, [r7, #4]
    b16e:	8193      	strh	r3, [r2, #12]
            capteurCouleur->activerCapteur(DROITE_HAUT);
    b170:	687b      	ldr	r3, [r7, #4]
    b172:	685b      	ldr	r3, [r3, #4]
    b174:	4618      	mov	r0, r3
    b176:	f04f 0102 	mov.w	r1, #2	; 0x2
    b17a:	f7ff ff3d 	bl	aff8 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    b17e:	687b      	ldr	r3, [r7, #4]
    b180:	689b      	ldr	r3, [r3, #8]
    b182:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b186:	687b      	ldr	r3, [r7, #4]
    b188:	609a      	str	r2, [r3, #8]
    b18a:	e032      	b.n	b1f2 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 3:
            resultat += capteurCouleur->getTickValue();
    b18c:	687b      	ldr	r3, [r7, #4]
    b18e:	899c      	ldrh	r4, [r3, #12]
    b190:	687b      	ldr	r3, [r7, #4]
    b192:	685b      	ldr	r3, [r3, #4]
    b194:	4618      	mov	r0, r3
    b196:	f7ff ff17 	bl	afc8 <_ZN14CapteurCouleur12getTickValueEv>
    b19a:	4603      	mov	r3, r0
    b19c:	4423      	add	r3, r4
    b19e:	b29b      	uxth	r3, r3
    b1a0:	687a      	ldr	r2, [r7, #4]
    b1a2:	8193      	strh	r3, [r2, #12]
            capteurCouleur->activerCapteur(DROITE_BAS);
    b1a4:	687b      	ldr	r3, [r7, #4]
    b1a6:	685b      	ldr	r3, [r3, #4]
    b1a8:	4618      	mov	r0, r3
    b1aa:	f04f 0103 	mov.w	r1, #3	; 0x3
    b1ae:	f7ff ff23 	bl	aff8 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    b1b2:	687b      	ldr	r3, [r7, #4]
    b1b4:	689b      	ldr	r3, [r3, #8]
    b1b6:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b1ba:	687b      	ldr	r3, [r7, #4]
    b1bc:	609a      	str	r2, [r3, #8]
    b1be:	e018      	b.n	b1f2 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 4:
            resultat += capteurCouleur->getTickValue();
    b1c0:	687b      	ldr	r3, [r7, #4]
    b1c2:	899c      	ldrh	r4, [r3, #12]
    b1c4:	687b      	ldr	r3, [r7, #4]
    b1c6:	685b      	ldr	r3, [r3, #4]
    b1c8:	4618      	mov	r0, r3
    b1ca:	f7ff fefd 	bl	afc8 <_ZN14CapteurCouleur12getTickValueEv>
    b1ce:	4603      	mov	r3, r0
    b1d0:	4423      	add	r3, r4
    b1d2:	b29b      	uxth	r3, r3
    b1d4:	687a      	ldr	r2, [r7, #4]
    b1d6:	8193      	strh	r3, [r2, #12]
            resultat /= 4;
    b1d8:	687b      	ldr	r3, [r7, #4]
    b1da:	899b      	ldrh	r3, [r3, #12]
    b1dc:	ea4f 0393 	mov.w	r3, r3, lsr #2
    b1e0:	b29b      	uxth	r3, r3
    b1e2:	687a      	ldr	r2, [r7, #4]
    b1e4:	8193      	strh	r3, [r2, #12]
            state++;
    b1e6:	687b      	ldr	r3, [r7, #4]
    b1e8:	689b      	ldr	r3, [r3, #8]
    b1ea:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b1ee:	687b      	ldr	r3, [r7, #4]
    b1f0:	609a      	str	r2, [r3, #8]
            break;
    }
}
    b1f2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b1f6:	46bd      	mov	sp, r7
    b1f8:	bd90      	pop	{r4, r7, pc}
    b1fa:	46c0      	nop			(mov r8, r8)

0000b1fc <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur>:
{
    GPIO_WriteBit(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues, allumer ? Bit_SET : Bit_RESET);
}

// selectionne un filtre
void CapteurCouleur::selectionnerFiltre(FiltreCapteurCouleur filtre)
    b1fc:	b580      	push	{r7, lr}
    b1fe:	b082      	sub	sp, #8
    b200:	af00      	add	r7, sp, #0
    b202:	6078      	str	r0, [r7, #4]
    b204:	460b      	mov	r3, r1
    b206:	70fb      	strb	r3, [r7, #3]
{
    switch (filtre)
    b208:	78fb      	ldrb	r3, [r7, #3]
    b20a:	2b03      	cmp	r3, #3
    b20c:	d85d      	bhi.n	b2ca <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>
    b20e:	a201      	add	r2, pc, #4	(adr r2, b214 <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0x18>)
    b210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b214:	0000b225 	.word	0x0000b225
    b218:	0000b2a3 	.word	0x0000b2a3
    b21c:	0000b24f 	.word	0x0000b24f
    b220:	0000b279 	.word	0x0000b279
    {
        case FILTRE_ROUGE:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_RESET);
    b224:	687b      	ldr	r3, [r7, #4]
    b226:	6a5a      	ldr	r2, [r3, #36]
    b228:	687b      	ldr	r3, [r7, #4]
    b22a:	8d1b      	ldrh	r3, [r3, #40]
    b22c:	4610      	mov	r0, r2
    b22e:	4619      	mov	r1, r3
    b230:	f04f 0200 	mov.w	r2, #0	; 0x0
    b234:	f7f6 fbaa 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_RESET);
    b238:	687b      	ldr	r3, [r7, #4]
    b23a:	6ada      	ldr	r2, [r3, #44]
    b23c:	687b      	ldr	r3, [r7, #4]
    b23e:	8e1b      	ldrh	r3, [r3, #48]
    b240:	4610      	mov	r0, r2
    b242:	4619      	mov	r1, r3
    b244:	f04f 0200 	mov.w	r2, #0	; 0x0
    b248:	f7f6 fba0 	bl	198c <GPIO_WriteBit>
    b24c:	e03d      	b.n	b2ca <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>

            break;
        case FILTRE_BLEU:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_SET);
    b24e:	687b      	ldr	r3, [r7, #4]
    b250:	6a5a      	ldr	r2, [r3, #36]
    b252:	687b      	ldr	r3, [r7, #4]
    b254:	8d1b      	ldrh	r3, [r3, #40]
    b256:	4610      	mov	r0, r2
    b258:	4619      	mov	r1, r3
    b25a:	f04f 0201 	mov.w	r2, #1	; 0x1
    b25e:	f7f6 fb95 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_RESET);
    b262:	687b      	ldr	r3, [r7, #4]
    b264:	6ada      	ldr	r2, [r3, #44]
    b266:	687b      	ldr	r3, [r7, #4]
    b268:	8e1b      	ldrh	r3, [r3, #48]
    b26a:	4610      	mov	r0, r2
    b26c:	4619      	mov	r1, r3
    b26e:	f04f 0200 	mov.w	r2, #0	; 0x0
    b272:	f7f6 fb8b 	bl	198c <GPIO_WriteBit>
    b276:	e028      	b.n	b2ca <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>
            break;
        case FILTRE_BLANC:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_RESET);
    b278:	687b      	ldr	r3, [r7, #4]
    b27a:	6a5a      	ldr	r2, [r3, #36]
    b27c:	687b      	ldr	r3, [r7, #4]
    b27e:	8d1b      	ldrh	r3, [r3, #40]
    b280:	4610      	mov	r0, r2
    b282:	4619      	mov	r1, r3
    b284:	f04f 0200 	mov.w	r2, #0	; 0x0
    b288:	f7f6 fb80 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_SET);
    b28c:	687b      	ldr	r3, [r7, #4]
    b28e:	6ada      	ldr	r2, [r3, #44]
    b290:	687b      	ldr	r3, [r7, #4]
    b292:	8e1b      	ldrh	r3, [r3, #48]
    b294:	4610      	mov	r0, r2
    b296:	4619      	mov	r1, r3
    b298:	f04f 0201 	mov.w	r2, #1	; 0x1
    b29c:	f7f6 fb76 	bl	198c <GPIO_WriteBit>
    b2a0:	e013      	b.n	b2ca <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>
            break;
        case FILTRE_VERT:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_SET);
    b2a2:	687b      	ldr	r3, [r7, #4]
    b2a4:	6a5a      	ldr	r2, [r3, #36]
    b2a6:	687b      	ldr	r3, [r7, #4]
    b2a8:	8d1b      	ldrh	r3, [r3, #40]
    b2aa:	4610      	mov	r0, r2
    b2ac:	4619      	mov	r1, r3
    b2ae:	f04f 0201 	mov.w	r2, #1	; 0x1
    b2b2:	f7f6 fb6b 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_SET);
    b2b6:	687b      	ldr	r3, [r7, #4]
    b2b8:	6ada      	ldr	r2, [r3, #44]
    b2ba:	687b      	ldr	r3, [r7, #4]
    b2bc:	8e1b      	ldrh	r3, [r3, #48]
    b2be:	4610      	mov	r0, r2
    b2c0:	4619      	mov	r1, r3
    b2c2:	f04f 0201 	mov.w	r2, #1	; 0x1
    b2c6:	f7f6 fb61 	bl	198c <GPIO_WriteBit>
            break;
    }
}
    b2ca:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b2ce:	46bd      	mov	sp, r7
    b2d0:	bd80      	pop	{r7, pc}
    b2d2:	46c0      	nop			(mov r8, r8)

0000b2d4 <_ZN14CapteurCouleur19allumerDiodesBleuesEb>:
void CapteurCouleur::allumerDiodesRouges(bool allumer)
{
    GPIO_WriteBit(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges, allumer ? Bit_SET : Bit_RESET);
}

void CapteurCouleur::allumerDiodesBleues(bool allumer)
    b2d4:	b580      	push	{r7, lr}
    b2d6:	b086      	sub	sp, #24
    b2d8:	af00      	add	r7, sp, #0
    b2da:	6178      	str	r0, [r7, #20]
    b2dc:	460b      	mov	r3, r1
    b2de:	74fb      	strb	r3, [r7, #19]
{
    GPIO_WriteBit(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues, allumer ? Bit_SET : Bit_RESET);
    b2e0:	697b      	ldr	r3, [r7, #20]
    b2e2:	68db      	ldr	r3, [r3, #12]
    b2e4:	607b      	str	r3, [r7, #4]
    b2e6:	697b      	ldr	r3, [r7, #20]
    b2e8:	8a1b      	ldrh	r3, [r3, #16]
    b2ea:	60bb      	str	r3, [r7, #8]
    b2ec:	7cfb      	ldrb	r3, [r7, #19]
    b2ee:	2b00      	cmp	r3, #0
    b2f0:	d003      	beq.n	b2fa <_ZN14CapteurCouleur19allumerDiodesBleuesEb+0x26>
    b2f2:	f04f 0301 	mov.w	r3, #1	; 0x1
    b2f6:	60fb      	str	r3, [r7, #12]
    b2f8:	e002      	b.n	b300 <_ZN14CapteurCouleur19allumerDiodesBleuesEb+0x2c>
    b2fa:	f04f 0300 	mov.w	r3, #0	; 0x0
    b2fe:	60fb      	str	r3, [r7, #12]
    b300:	6878      	ldr	r0, [r7, #4]
    b302:	68b9      	ldr	r1, [r7, #8]
    b304:	68fa      	ldr	r2, [r7, #12]
    b306:	f7f6 fb41 	bl	198c <GPIO_WriteBit>
}
    b30a:	f107 0718 	add.w	r7, r7, #24	; 0x18
    b30e:	46bd      	mov	sp, r7
    b310:	bd80      	pop	{r7, pc}
    b312:	46c0      	nop			(mov r8, r8)

0000b314 <_ZN14CapteurCouleur19allumerDiodesRougesEb>:
    initialiserPinCapteur(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1);
    initialiserPinCapteur(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2);
}

// allume/éteint les diodes
void CapteurCouleur::allumerDiodesRouges(bool allumer)
    b314:	b580      	push	{r7, lr}
    b316:	b086      	sub	sp, #24
    b318:	af00      	add	r7, sp, #0
    b31a:	6178      	str	r0, [r7, #20]
    b31c:	460b      	mov	r3, r1
    b31e:	74fb      	strb	r3, [r7, #19]
{
    GPIO_WriteBit(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges, allumer ? Bit_SET : Bit_RESET);
    b320:	697b      	ldr	r3, [r7, #20]
    b322:	685b      	ldr	r3, [r3, #4]
    b324:	607b      	str	r3, [r7, #4]
    b326:	697b      	ldr	r3, [r7, #20]
    b328:	891b      	ldrh	r3, [r3, #8]
    b32a:	60bb      	str	r3, [r7, #8]
    b32c:	7cfb      	ldrb	r3, [r7, #19]
    b32e:	2b00      	cmp	r3, #0
    b330:	d003      	beq.n	b33a <_ZN14CapteurCouleur19allumerDiodesRougesEb+0x26>
    b332:	f04f 0301 	mov.w	r3, #1	; 0x1
    b336:	60fb      	str	r3, [r7, #12]
    b338:	e002      	b.n	b340 <_ZN14CapteurCouleur19allumerDiodesRougesEb+0x2c>
    b33a:	f04f 0300 	mov.w	r3, #0	; 0x0
    b33e:	60fb      	str	r3, [r7, #12]
    b340:	6878      	ldr	r0, [r7, #4]
    b342:	68b9      	ldr	r1, [r7, #8]
    b344:	68fa      	ldr	r2, [r7, #12]
    b346:	f7f6 fb21 	bl	198c <GPIO_WriteBit>
}
    b34a:	f107 0718 	add.w	r7, r7, #24	; 0x18
    b34e:	46bd      	mov	sp, r7
    b350:	bd80      	pop	{r7, pc}
    b352:	46c0      	nop			(mov r8, r8)

0000b354 <_ZN19CommandCheckCouleur6updateEv>:
    capteur->activerCapteur(pos);
    nbUpdatesRestantes = nbUpdatePourAllumerLed;
}

// check la couleur
void CommandCheckCouleur::update()
    b354:	b580      	push	{r7, lr}
    b356:	b082      	sub	sp, #8
    b358:	af00      	add	r7, sp, #0
    b35a:	6078      	str	r0, [r7, #4]
{
    switch (state)
    b35c:	687b      	ldr	r3, [r7, #4]
    b35e:	695b      	ldr	r3, [r3, #20]
    b360:	2b03      	cmp	r3, #3
    b362:	d875      	bhi.n	b450 <_ZN19CommandCheckCouleur6updateEv+0xfc>
    b364:	a201      	add	r2, pc, #4	(adr r2, b36c <_ZN19CommandCheckCouleur6updateEv+0x18>)
    b366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b36a:	46c0      	nop			(mov r8, r8)
    b36c:	0000b37d 	.word	0x0000b37d
    b370:	0000b3ab 	.word	0x0000b3ab
    b374:	0000b3eb 	.word	0x0000b3eb
    b378:	0000b419 	.word	0x0000b419
    {
        // attente d'allumage de la diode bleu
        case 0:
            if (nbUpdatesRestantes >=0)
    b37c:	687b      	ldr	r3, [r7, #4]
    b37e:	691b      	ldr	r3, [r3, #16]
    b380:	2b00      	cmp	r3, #0
    b382:	db06      	blt.n	b392 <_ZN19CommandCheckCouleur6updateEv+0x3e>
                nbUpdatesRestantes--;
    b384:	687b      	ldr	r3, [r7, #4]
    b386:	691b      	ldr	r3, [r3, #16]
    b388:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    b38c:	687b      	ldr	r3, [r7, #4]
    b38e:	611a      	str	r2, [r3, #16]
    b390:	e05e      	b.n	b450 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            else
            {
                state++;
    b392:	687b      	ldr	r3, [r7, #4]
    b394:	695b      	ldr	r3, [r3, #20]
    b396:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b39a:	687b      	ldr	r3, [r7, #4]
    b39c:	615a      	str	r2, [r3, #20]
                capteurCouleur->getTickValue();
    b39e:	687b      	ldr	r3, [r7, #4]
    b3a0:	689b      	ldr	r3, [r3, #8]
    b3a2:	4618      	mov	r0, r3
    b3a4:	f7ff fe10 	bl	afc8 <_ZN14CapteurCouleur12getTickValueEv>
    b3a8:	e052      	b.n	b450 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            }
            break;

        // récupération de la valeur bleu
        case 1:
            bleuMesure = capteurCouleur->getTickValue();
    b3aa:	687b      	ldr	r3, [r7, #4]
    b3ac:	689b      	ldr	r3, [r3, #8]
    b3ae:	4618      	mov	r0, r3
    b3b0:	f7ff fe0a 	bl	afc8 <_ZN14CapteurCouleur12getTickValueEv>
    b3b4:	4603      	mov	r3, r0
    b3b6:	687a      	ldr	r2, [r7, #4]
    b3b8:	8193      	strh	r3, [r2, #12]
            capteurCouleur->allumerDiodesBleues(false);
    b3ba:	687b      	ldr	r3, [r7, #4]
    b3bc:	689b      	ldr	r3, [r3, #8]
    b3be:	4618      	mov	r0, r3
    b3c0:	f04f 0100 	mov.w	r1, #0	; 0x0
    b3c4:	f7ff ff86 	bl	b2d4 <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
            capteurCouleur->allumerDiodesRouges(true);
    b3c8:	687b      	ldr	r3, [r7, #4]
    b3ca:	689b      	ldr	r3, [r3, #8]
    b3cc:	4618      	mov	r0, r3
    b3ce:	f04f 0101 	mov.w	r1, #1	; 0x1
    b3d2:	f7ff ff9f 	bl	b314 <_ZN14CapteurCouleur19allumerDiodesRougesEb>
            nbUpdatesRestantes = nbUpdatePourAllumerLed;
    b3d6:	687a      	ldr	r2, [r7, #4]
    b3d8:	f04f 030a 	mov.w	r3, #10	; 0xa
    b3dc:	6113      	str	r3, [r2, #16]
            state++;
    b3de:	687b      	ldr	r3, [r7, #4]
    b3e0:	695b      	ldr	r3, [r3, #20]
    b3e2:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b3e6:	687b      	ldr	r3, [r7, #4]
    b3e8:	615a      	str	r2, [r3, #20]

        // attente d'allumage de la diode rouge
        case 2:
            if (nbUpdatesRestantes >=0)
    b3ea:	687b      	ldr	r3, [r7, #4]
    b3ec:	691b      	ldr	r3, [r3, #16]
    b3ee:	2b00      	cmp	r3, #0
    b3f0:	db06      	blt.n	b400 <_ZN19CommandCheckCouleur6updateEv+0xac>
                nbUpdatesRestantes--;
    b3f2:	687b      	ldr	r3, [r7, #4]
    b3f4:	691b      	ldr	r3, [r3, #16]
    b3f6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    b3fa:	687b      	ldr	r3, [r7, #4]
    b3fc:	611a      	str	r2, [r3, #16]
    b3fe:	e027      	b.n	b450 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            else
            {
                state++;
    b400:	687b      	ldr	r3, [r7, #4]
    b402:	695b      	ldr	r3, [r3, #20]
    b404:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b408:	687b      	ldr	r3, [r7, #4]
    b40a:	615a      	str	r2, [r3, #20]
                capteurCouleur->getTickValue();
    b40c:	687b      	ldr	r3, [r7, #4]
    b40e:	689b      	ldr	r3, [r3, #8]
    b410:	4618      	mov	r0, r3
    b412:	f7ff fdd9 	bl	afc8 <_ZN14CapteurCouleur12getTickValueEv>
    b416:	e01b      	b.n	b450 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            }
            break;
        // récupération de la valeur bleu
        case 3:
            rougeMesure = capteurCouleur->getTickValue();
    b418:	687b      	ldr	r3, [r7, #4]
    b41a:	689b      	ldr	r3, [r3, #8]
    b41c:	4618      	mov	r0, r3
    b41e:	f7ff fdd3 	bl	afc8 <_ZN14CapteurCouleur12getTickValueEv>
    b422:	4603      	mov	r3, r0
    b424:	687a      	ldr	r2, [r7, #4]
    b426:	81d3      	strh	r3, [r2, #14]
            capteurCouleur->allumerDiodesBleues(false);
    b428:	687b      	ldr	r3, [r7, #4]
    b42a:	689b      	ldr	r3, [r3, #8]
    b42c:	4618      	mov	r0, r3
    b42e:	f04f 0100 	mov.w	r1, #0	; 0x0
    b432:	f7ff ff4f 	bl	b2d4 <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
            capteurCouleur->allumerDiodesRouges(false);
    b436:	687b      	ldr	r3, [r7, #4]
    b438:	689b      	ldr	r3, [r3, #8]
    b43a:	4618      	mov	r0, r3
    b43c:	f04f 0100 	mov.w	r1, #0	; 0x0
    b440:	f7ff ff68 	bl	b314 <_ZN14CapteurCouleur19allumerDiodesRougesEb>
            state++;
    b444:	687b      	ldr	r3, [r7, #4]
    b446:	695b      	ldr	r3, [r3, #20]
    b448:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b44c:	687b      	ldr	r3, [r7, #4]
    b44e:	615a      	str	r2, [r3, #20]
    }
}
    b450:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b454:	46bd      	mov	sp, r7
    b456:	bd80      	pop	{r7, pc}

0000b458 <_ZN19CommandCheckCouleurC1EP14CapteurCouleur22PositionCapteurCouleurt>:
    //////////////////////////////
    //    CommandCheckCouleur   //
    //////////////////////////////

// check la couleur d'un capteur
CommandCheckCouleur::CommandCheckCouleur(CapteurCouleur* capteur, PositionCapteurCouleur pos, uint16_t seuil)
    b458:	b580      	push	{r7, lr}
    b45a:	b084      	sub	sp, #16
    b45c:	af00      	add	r7, sp, #0
    b45e:	60f8      	str	r0, [r7, #12]
    b460:	60b9      	str	r1, [r7, #8]
    b462:	4619      	mov	r1, r3
    b464:	4613      	mov	r3, r2
    b466:	71fb      	strb	r3, [r7, #7]
    b468:	460b      	mov	r3, r1
    b46a:	80bb      	strh	r3, [r7, #4]
    : seuilMoyenne(seuil), capteurCouleur(capteur), bleuMesure(0), rougeMesure(0)
    , nbUpdatesRestantes(nbUpdatePourAllumerLed), state(0)
    b46c:	68fb      	ldr	r3, [r7, #12]
    b46e:	4618      	mov	r0, r3
    b470:	f7fc fa66 	bl	7940 <_ZN7CommandC2Ev>
    b474:	68fa      	ldr	r2, [r7, #12]
    b476:	4b18      	ldr	r3, [pc, #96]	(b4d8 <_ZN19CommandCheckCouleurC1EP14CapteurCouleur22PositionCapteurCouleurt+0x80>)
    b478:	6013      	str	r3, [r2, #0]
    b47a:	68fa      	ldr	r2, [r7, #12]
    b47c:	88bb      	ldrh	r3, [r7, #4]
    b47e:	8093      	strh	r3, [r2, #4]
    b480:	68fa      	ldr	r2, [r7, #12]
    b482:	68bb      	ldr	r3, [r7, #8]
    b484:	6093      	str	r3, [r2, #8]
    b486:	68fa      	ldr	r2, [r7, #12]
    b488:	f04f 0300 	mov.w	r3, #0	; 0x0
    b48c:	8193      	strh	r3, [r2, #12]
    b48e:	68fa      	ldr	r2, [r7, #12]
    b490:	f04f 0300 	mov.w	r3, #0	; 0x0
    b494:	81d3      	strh	r3, [r2, #14]
    b496:	68fa      	ldr	r2, [r7, #12]
    b498:	f04f 030a 	mov.w	r3, #10	; 0xa
    b49c:	6113      	str	r3, [r2, #16]
    b49e:	68fa      	ldr	r2, [r7, #12]
    b4a0:	f04f 0300 	mov.w	r3, #0	; 0x0
    b4a4:	6153      	str	r3, [r2, #20]
{
    capteur->allumerDiodesBleues(true);
    b4a6:	68b8      	ldr	r0, [r7, #8]
    b4a8:	f04f 0101 	mov.w	r1, #1	; 0x1
    b4ac:	f7ff ff12 	bl	b2d4 <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
    capteur->allumerDiodesRouges(false);
    b4b0:	68b8      	ldr	r0, [r7, #8]
    b4b2:	f04f 0100 	mov.w	r1, #0	; 0x0
    b4b6:	f7ff ff2d 	bl	b314 <_ZN14CapteurCouleur19allumerDiodesRougesEb>
    capteur->activerCapteur(pos);
    b4ba:	79fb      	ldrb	r3, [r7, #7]
    b4bc:	68b8      	ldr	r0, [r7, #8]
    b4be:	4619      	mov	r1, r3
    b4c0:	f7ff fd9a 	bl	aff8 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
    nbUpdatesRestantes = nbUpdatePourAllumerLed;
    b4c4:	68fa      	ldr	r2, [r7, #12]
    b4c6:	f04f 030a 	mov.w	r3, #10	; 0xa
    b4ca:	6113      	str	r3, [r2, #16]
}
    b4cc:	68fb      	ldr	r3, [r7, #12]
    b4ce:	4618      	mov	r0, r3
    b4d0:	f107 0710 	add.w	r7, r7, #16	; 0x10
    b4d4:	46bd      	mov	sp, r7
    b4d6:	bd80      	pop	{r7, pc}
    b4d8:	000219a0 	.word	0x000219a0

0000b4dc <_ZN19CommandCheckCouleurC2EP14CapteurCouleur22PositionCapteurCouleurt>:
    //////////////////////////////
    //    CommandCheckCouleur   //
    //////////////////////////////

// check la couleur d'un capteur
CommandCheckCouleur::CommandCheckCouleur(CapteurCouleur* capteur, PositionCapteurCouleur pos, uint16_t seuil)
    b4dc:	b580      	push	{r7, lr}
    b4de:	b084      	sub	sp, #16
    b4e0:	af00      	add	r7, sp, #0
    b4e2:	60f8      	str	r0, [r7, #12]
    b4e4:	60b9      	str	r1, [r7, #8]
    b4e6:	4619      	mov	r1, r3
    b4e8:	4613      	mov	r3, r2
    b4ea:	71fb      	strb	r3, [r7, #7]
    b4ec:	460b      	mov	r3, r1
    b4ee:	80bb      	strh	r3, [r7, #4]
    : seuilMoyenne(seuil), capteurCouleur(capteur), bleuMesure(0), rougeMesure(0)
    , nbUpdatesRestantes(nbUpdatePourAllumerLed), state(0)
    b4f0:	68fb      	ldr	r3, [r7, #12]
    b4f2:	4618      	mov	r0, r3
    b4f4:	f7fc fa24 	bl	7940 <_ZN7CommandC2Ev>
    b4f8:	68fa      	ldr	r2, [r7, #12]
    b4fa:	4b18      	ldr	r3, [pc, #96]	(b55c <_ZN19CommandCheckCouleurC2EP14CapteurCouleur22PositionCapteurCouleurt+0x80>)
    b4fc:	6013      	str	r3, [r2, #0]
    b4fe:	68fa      	ldr	r2, [r7, #12]
    b500:	88bb      	ldrh	r3, [r7, #4]
    b502:	8093      	strh	r3, [r2, #4]
    b504:	68fa      	ldr	r2, [r7, #12]
    b506:	68bb      	ldr	r3, [r7, #8]
    b508:	6093      	str	r3, [r2, #8]
    b50a:	68fa      	ldr	r2, [r7, #12]
    b50c:	f04f 0300 	mov.w	r3, #0	; 0x0
    b510:	8193      	strh	r3, [r2, #12]
    b512:	68fa      	ldr	r2, [r7, #12]
    b514:	f04f 0300 	mov.w	r3, #0	; 0x0
    b518:	81d3      	strh	r3, [r2, #14]
    b51a:	68fa      	ldr	r2, [r7, #12]
    b51c:	f04f 030a 	mov.w	r3, #10	; 0xa
    b520:	6113      	str	r3, [r2, #16]
    b522:	68fa      	ldr	r2, [r7, #12]
    b524:	f04f 0300 	mov.w	r3, #0	; 0x0
    b528:	6153      	str	r3, [r2, #20]
{
    capteur->allumerDiodesBleues(true);
    b52a:	68b8      	ldr	r0, [r7, #8]
    b52c:	f04f 0101 	mov.w	r1, #1	; 0x1
    b530:	f7ff fed0 	bl	b2d4 <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
    capteur->allumerDiodesRouges(false);
    b534:	68b8      	ldr	r0, [r7, #8]
    b536:	f04f 0100 	mov.w	r1, #0	; 0x0
    b53a:	f7ff feeb 	bl	b314 <_ZN14CapteurCouleur19allumerDiodesRougesEb>
    capteur->activerCapteur(pos);
    b53e:	79fb      	ldrb	r3, [r7, #7]
    b540:	68b8      	ldr	r0, [r7, #8]
    b542:	4619      	mov	r1, r3
    b544:	f7ff fd58 	bl	aff8 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
    nbUpdatesRestantes = nbUpdatePourAllumerLed;
    b548:	68fa      	ldr	r2, [r7, #12]
    b54a:	f04f 030a 	mov.w	r3, #10	; 0xa
    b54e:	6113      	str	r3, [r2, #16]
}
    b550:	68fb      	ldr	r3, [r7, #12]
    b552:	4618      	mov	r0, r3
    b554:	f107 0710 	add.w	r7, r7, #16	; 0x10
    b558:	46bd      	mov	sp, r7
    b55a:	bd80      	pop	{r7, pc}
    b55c:	000219a0 	.word	0x000219a0

0000b560 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>:

#include "capteurCouleur.h"
#include "timerHandler.h"

// permet d'initialiser une pin
void initialiserPinCapteur(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x)
    b560:	b580      	push	{r7, lr}
    b562:	b084      	sub	sp, #16
    b564:	af00      	add	r7, sp, #0
    b566:	6078      	str	r0, [r7, #4]
    b568:	460b      	mov	r3, r1
    b56a:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStructure;
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    b56c:	f04f 0310 	mov.w	r3, #16	; 0x10
    b570:	73fb      	strb	r3, [r7, #15]
    #endif
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    b572:	f04f 0303 	mov.w	r3, #3	; 0x3
    b576:	73bb      	strb	r3, [r7, #14]
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_x;
    b578:	887b      	ldrh	r3, [r7, #2]
    b57a:	81bb      	strh	r3, [r7, #12]
    GPIO_Init(GPIOx, &GPIO_InitStructure);
    b57c:	f107 030c 	add.w	r3, r7, #12	; 0xc
    b580:	6878      	ldr	r0, [r7, #4]
    b582:	4619      	mov	r1, r3
    b584:	f7f6 f894 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOx, GPIO_Pin_x, Bit_RESET);
    b588:	887b      	ldrh	r3, [r7, #2]
    b58a:	6878      	ldr	r0, [r7, #4]
    b58c:	4619      	mov	r1, r3
    b58e:	f04f 0200 	mov.w	r2, #0	; 0x0
    b592:	f7f6 f9fb 	bl	198c <GPIO_WriteBit>
}
    b596:	f107 0710 	add.w	r7, r7, #16	; 0x10
    b59a:	46bd      	mov	sp, r7
    b59c:	bd80      	pop	{r7, pc}
    b59e:	46c0      	nop			(mov r8, r8)

0000b5a0 <_ZN14CapteurCouleurC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tS3_t>:
                               GPIO_TypeDef* GPIO_diodesRouges, uint16_t GPIO_Pin_diodesRouges,
                               GPIO_TypeDef* GPIO_diodesBleues, uint16_t GPIO_Pin_diodesBleues,
                               GPIO_TypeDef* GPIO_selectCapteur1, uint16_t GPIO_Pin_selectCapteur1,
                               GPIO_TypeDef* GPIO_selectCapteur2, uint16_t GPIO_Pin_selectCapteur2,
                               GPIO_TypeDef* GPIO_selectFiltre1, uint16_t GPIO_Pin_selectFiltre1,
                               GPIO_TypeDef* GPIO_selectFiltre2, uint16_t GPIO_Pin_selectFiltre2)
    b5a0:	b580      	push	{r7, lr}
    b5a2:	b088      	sub	sp, #32
    b5a4:	af00      	add	r7, sp, #0
    b5a6:	60f8      	str	r0, [r7, #12]
    b5a8:	60b9      	str	r1, [r7, #8]
    b5aa:	607a      	str	r2, [r7, #4]
    b5ac:	807b      	strh	r3, [r7, #2]
    , m_GPIO_diodesRouges(GPIO_diodesRouges), m_GPIO_Pin_diodesRouges(GPIO_Pin_diodesRouges)
    , m_GPIO_diodesBleues(GPIO_diodesBleues), m_GPIO_Pin_diodesBleues(GPIO_Pin_diodesBleues)
    , m_GPIO_selectCapteur1(GPIO_selectCapteur1), m_GPIO_Pin_selectCapteur1(GPIO_Pin_selectCapteur1)
    , m_GPIO_selectCapteur2(GPIO_selectCapteur2), m_GPIO_Pin_selectCapteur2(GPIO_Pin_selectCapteur2)
    , m_GPIO_selectFiltre1(GPIO_selectFiltre1), m_GPIO_Pin_selectFiltre1(GPIO_Pin_selectFiltre1)
    , m_GPIO_selectFiltre2(GPIO_selectFiltre2), m_GPIO_Pin_selectFiltre2(GPIO_Pin_selectFiltre2)
    b5ae:	68fa      	ldr	r2, [r7, #12]
    b5b0:	68bb      	ldr	r3, [r7, #8]
    b5b2:	6013      	str	r3, [r2, #0]
    b5b4:	68fa      	ldr	r2, [r7, #12]
    b5b6:	6abb      	ldr	r3, [r7, #40]
    b5b8:	6053      	str	r3, [r2, #4]
    b5ba:	68fa      	ldr	r2, [r7, #12]
    b5bc:	8dbb      	ldrh	r3, [r7, #44]
    b5be:	8113      	strh	r3, [r2, #8]
    b5c0:	68fa      	ldr	r2, [r7, #12]
    b5c2:	6b3b      	ldr	r3, [r7, #48]
    b5c4:	60d3      	str	r3, [r2, #12]
    b5c6:	68fa      	ldr	r2, [r7, #12]
    b5c8:	8ebb      	ldrh	r3, [r7, #52]
    b5ca:	8213      	strh	r3, [r2, #16]
    b5cc:	68fa      	ldr	r2, [r7, #12]
    b5ce:	6bbb      	ldr	r3, [r7, #56]
    b5d0:	6153      	str	r3, [r2, #20]
    b5d2:	68fa      	ldr	r2, [r7, #12]
    b5d4:	8fbb      	ldrh	r3, [r7, #60]
    b5d6:	8313      	strh	r3, [r2, #24]
    b5d8:	68fa      	ldr	r2, [r7, #12]
    b5da:	6c3b      	ldr	r3, [r7, #64]
    b5dc:	61d3      	str	r3, [r2, #28]
    b5de:	68fa      	ldr	r2, [r7, #12]
    b5e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]
    b5e4:	8413      	strh	r3, [r2, #32]
    b5e6:	68fa      	ldr	r2, [r7, #12]
    b5e8:	6cbb      	ldr	r3, [r7, #72]
    b5ea:	6253      	str	r3, [r2, #36]
    b5ec:	68fa      	ldr	r2, [r7, #12]
    b5ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]
    b5f2:	8513      	strh	r3, [r2, #40]
    b5f4:	68fa      	ldr	r2, [r7, #12]
    b5f6:	6d3b      	ldr	r3, [r7, #80]
    b5f8:	62d3      	str	r3, [r2, #44]
    b5fa:	68fa      	ldr	r2, [r7, #12]
    b5fc:	f8b7 3054 	ldrh.w	r3, [r7, #84]
    b600:	8613      	strh	r3, [r2, #48]
    GPIO_InitTypeDef GPIO_InitStructure;
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    b602:	f04f 0348 	mov.w	r3, #72	; 0x48
    b606:	77fb      	strb	r3, [r7, #31]
    #endif
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    b608:	f04f 0303 	mov.w	r3, #3	; 0x3
    b60c:	77bb      	strb	r3, [r7, #30]
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_timer;
    b60e:	887b      	ldrh	r3, [r7, #2]
    b610:	83bb      	strh	r3, [r7, #28]
    GPIO_Init(GPIO_timer, &GPIO_InitStructure);
    b612:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    b616:	6878      	ldr	r0, [r7, #4]
    b618:	4619      	mov	r1, r3
    b61a:	f7f6 f849 	bl	16b0 <GPIO_Init>

    // Active l'horloge du timer
    Timer::enableTimerClock(TIMx);
    b61e:	68b8      	ldr	r0, [r7, #8]
    b620:	f001 fcce 	bl	cfc0 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>

    // initialisation du timer
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    b624:	f04f 0300 	mov.w	r3, #0	; 0x0
    b628:	827b      	strh	r3, [r7, #18]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    b62a:	f04f 0300 	mov.w	r3, #0	; 0x0
    b62e:	82bb      	strh	r3, [r7, #20]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    b630:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b634:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    b636:	f04f 0300 	mov.w	r3, #0	; 0x0
    b63a:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    b63c:	f04f 0300 	mov.w	r3, #0	; 0x0
    b640:	76bb      	strb	r3, [r7, #26]
    TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
    b642:	f107 0312 	add.w	r3, r7, #18	; 0x12
    b646:	68b8      	ldr	r0, [r7, #8]
    b648:	4619      	mov	r1, r3
    b64a:	f7f7 f8f5 	bl	2838 <TIM_TimeBaseInit>

    // utilise une horloge externe
    // le counter est incrementé à chaque monté du signal sur le channel 1
    TIM_TIxExternalClockConfig(TIMx, TIM_TIxExternalCLK1Source_TI1ED, TIM_ICPolarity_Rising, 0);
    b64e:	68b8      	ldr	r0, [r7, #8]
    b650:	f04f 0140 	mov.w	r1, #64	; 0x40
    b654:	f04f 0200 	mov.w	r2, #0	; 0x0
    b658:	f04f 0300 	mov.w	r3, #0	; 0x0
    b65c:	f7f7 fdd6 	bl	320c <TIM_TIxExternalClockConfig>

    // met le timer à disposition
    TIM_Cmd(TIMx, ENABLE);
    b660:	68b8      	ldr	r0, [r7, #8]
    b662:	f04f 0101 	mov.w	r1, #1	; 0x1
    b666:	f7f7 fcdf 	bl	3028 <TIM_Cmd>

    // met le counter à 0
    TIM_SetCounter(TIMx, 0);
    b66a:	68b8      	ldr	r0, [r7, #8]
    b66c:	f04f 0100 	mov.w	r1, #0	; 0x0
    b670:	f7f8 fc4c 	bl	3f0c <TIM_SetCounter>

    // initialisation des autres pins
    initialiserPinCapteur(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges);
    b674:	68fb      	ldr	r3, [r7, #12]
    b676:	685a      	ldr	r2, [r3, #4]
    b678:	68fb      	ldr	r3, [r7, #12]
    b67a:	891b      	ldrh	r3, [r3, #8]
    b67c:	4610      	mov	r0, r2
    b67e:	4619      	mov	r1, r3
    b680:	f7ff ff6e 	bl	b560 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues);
    b684:	68fb      	ldr	r3, [r7, #12]
    b686:	68da      	ldr	r2, [r3, #12]
    b688:	68fb      	ldr	r3, [r7, #12]
    b68a:	8a1b      	ldrh	r3, [r3, #16]
    b68c:	4610      	mov	r0, r2
    b68e:	4619      	mov	r1, r3
    b690:	f7ff ff66 	bl	b560 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1);
    b694:	68fb      	ldr	r3, [r7, #12]
    b696:	695a      	ldr	r2, [r3, #20]
    b698:	68fb      	ldr	r3, [r7, #12]
    b69a:	8b1b      	ldrh	r3, [r3, #24]
    b69c:	4610      	mov	r0, r2
    b69e:	4619      	mov	r1, r3
    b6a0:	f7ff ff5e 	bl	b560 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2);
    b6a4:	68fb      	ldr	r3, [r7, #12]
    b6a6:	69da      	ldr	r2, [r3, #28]
    b6a8:	68fb      	ldr	r3, [r7, #12]
    b6aa:	8c1b      	ldrh	r3, [r3, #32]
    b6ac:	4610      	mov	r0, r2
    b6ae:	4619      	mov	r1, r3
    b6b0:	f7ff ff56 	bl	b560 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1);
    b6b4:	68fb      	ldr	r3, [r7, #12]
    b6b6:	6a5a      	ldr	r2, [r3, #36]
    b6b8:	68fb      	ldr	r3, [r7, #12]
    b6ba:	8d1b      	ldrh	r3, [r3, #40]
    b6bc:	4610      	mov	r0, r2
    b6be:	4619      	mov	r1, r3
    b6c0:	f7ff ff4e 	bl	b560 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2);
    b6c4:	68fb      	ldr	r3, [r7, #12]
    b6c6:	6ada      	ldr	r2, [r3, #44]
    b6c8:	68fb      	ldr	r3, [r7, #12]
    b6ca:	8e1b      	ldrh	r3, [r3, #48]
    b6cc:	4610      	mov	r0, r2
    b6ce:	4619      	mov	r1, r3
    b6d0:	f7ff ff46 	bl	b560 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
}
    b6d4:	68fb      	ldr	r3, [r7, #12]
    b6d6:	4618      	mov	r0, r3
    b6d8:	f107 0720 	add.w	r7, r7, #32	; 0x20
    b6dc:	46bd      	mov	sp, r7
    b6de:	bd80      	pop	{r7, pc}

0000b6e0 <_ZN14CapteurCouleurC2EP11TIM_TypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tS3_t>:
                               GPIO_TypeDef* GPIO_diodesRouges, uint16_t GPIO_Pin_diodesRouges,
                               GPIO_TypeDef* GPIO_diodesBleues, uint16_t GPIO_Pin_diodesBleues,
                               GPIO_TypeDef* GPIO_selectCapteur1, uint16_t GPIO_Pin_selectCapteur1,
                               GPIO_TypeDef* GPIO_selectCapteur2, uint16_t GPIO_Pin_selectCapteur2,
                               GPIO_TypeDef* GPIO_selectFiltre1, uint16_t GPIO_Pin_selectFiltre1,
                               GPIO_TypeDef* GPIO_selectFiltre2, uint16_t GPIO_Pin_selectFiltre2)
    b6e0:	b580      	push	{r7, lr}
    b6e2:	b088      	sub	sp, #32
    b6e4:	af00      	add	r7, sp, #0
    b6e6:	60f8      	str	r0, [r7, #12]
    b6e8:	60b9      	str	r1, [r7, #8]
    b6ea:	607a      	str	r2, [r7, #4]
    b6ec:	807b      	strh	r3, [r7, #2]
    , m_GPIO_diodesRouges(GPIO_diodesRouges), m_GPIO_Pin_diodesRouges(GPIO_Pin_diodesRouges)
    , m_GPIO_diodesBleues(GPIO_diodesBleues), m_GPIO_Pin_diodesBleues(GPIO_Pin_diodesBleues)
    , m_GPIO_selectCapteur1(GPIO_selectCapteur1), m_GPIO_Pin_selectCapteur1(GPIO_Pin_selectCapteur1)
    , m_GPIO_selectCapteur2(GPIO_selectCapteur2), m_GPIO_Pin_selectCapteur2(GPIO_Pin_selectCapteur2)
    , m_GPIO_selectFiltre1(GPIO_selectFiltre1), m_GPIO_Pin_selectFiltre1(GPIO_Pin_selectFiltre1)
    , m_GPIO_selectFiltre2(GPIO_selectFiltre2), m_GPIO_Pin_selectFiltre2(GPIO_Pin_selectFiltre2)
    b6ee:	68fa      	ldr	r2, [r7, #12]
    b6f0:	68bb      	ldr	r3, [r7, #8]
    b6f2:	6013      	str	r3, [r2, #0]
    b6f4:	68fa      	ldr	r2, [r7, #12]
    b6f6:	6abb      	ldr	r3, [r7, #40]
    b6f8:	6053      	str	r3, [r2, #4]
    b6fa:	68fa      	ldr	r2, [r7, #12]
    b6fc:	8dbb      	ldrh	r3, [r7, #44]
    b6fe:	8113      	strh	r3, [r2, #8]
    b700:	68fa      	ldr	r2, [r7, #12]
    b702:	6b3b      	ldr	r3, [r7, #48]
    b704:	60d3      	str	r3, [r2, #12]
    b706:	68fa      	ldr	r2, [r7, #12]
    b708:	8ebb      	ldrh	r3, [r7, #52]
    b70a:	8213      	strh	r3, [r2, #16]
    b70c:	68fa      	ldr	r2, [r7, #12]
    b70e:	6bbb      	ldr	r3, [r7, #56]
    b710:	6153      	str	r3, [r2, #20]
    b712:	68fa      	ldr	r2, [r7, #12]
    b714:	8fbb      	ldrh	r3, [r7, #60]
    b716:	8313      	strh	r3, [r2, #24]
    b718:	68fa      	ldr	r2, [r7, #12]
    b71a:	6c3b      	ldr	r3, [r7, #64]
    b71c:	61d3      	str	r3, [r2, #28]
    b71e:	68fa      	ldr	r2, [r7, #12]
    b720:	f8b7 3044 	ldrh.w	r3, [r7, #68]
    b724:	8413      	strh	r3, [r2, #32]
    b726:	68fa      	ldr	r2, [r7, #12]
    b728:	6cbb      	ldr	r3, [r7, #72]
    b72a:	6253      	str	r3, [r2, #36]
    b72c:	68fa      	ldr	r2, [r7, #12]
    b72e:	f8b7 304c 	ldrh.w	r3, [r7, #76]
    b732:	8513      	strh	r3, [r2, #40]
    b734:	68fa      	ldr	r2, [r7, #12]
    b736:	6d3b      	ldr	r3, [r7, #80]
    b738:	62d3      	str	r3, [r2, #44]
    b73a:	68fa      	ldr	r2, [r7, #12]
    b73c:	f8b7 3054 	ldrh.w	r3, [r7, #84]
    b740:	8613      	strh	r3, [r2, #48]
    GPIO_InitTypeDef GPIO_InitStructure;
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    b742:	f04f 0348 	mov.w	r3, #72	; 0x48
    b746:	77fb      	strb	r3, [r7, #31]
    #endif
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    b748:	f04f 0303 	mov.w	r3, #3	; 0x3
    b74c:	77bb      	strb	r3, [r7, #30]
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_timer;
    b74e:	887b      	ldrh	r3, [r7, #2]
    b750:	83bb      	strh	r3, [r7, #28]
    GPIO_Init(GPIO_timer, &GPIO_InitStructure);
    b752:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    b756:	6878      	ldr	r0, [r7, #4]
    b758:	4619      	mov	r1, r3
    b75a:	f7f5 ffa9 	bl	16b0 <GPIO_Init>

    // Active l'horloge du timer
    Timer::enableTimerClock(TIMx);
    b75e:	68b8      	ldr	r0, [r7, #8]
    b760:	f001 fc2e 	bl	cfc0 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>

    // initialisation du timer
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    b764:	f04f 0300 	mov.w	r3, #0	; 0x0
    b768:	827b      	strh	r3, [r7, #18]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    b76a:	f04f 0300 	mov.w	r3, #0	; 0x0
    b76e:	82bb      	strh	r3, [r7, #20]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    b770:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b774:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    b776:	f04f 0300 	mov.w	r3, #0	; 0x0
    b77a:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    b77c:	f04f 0300 	mov.w	r3, #0	; 0x0
    b780:	76bb      	strb	r3, [r7, #26]
    TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
    b782:	f107 0312 	add.w	r3, r7, #18	; 0x12
    b786:	68b8      	ldr	r0, [r7, #8]
    b788:	4619      	mov	r1, r3
    b78a:	f7f7 f855 	bl	2838 <TIM_TimeBaseInit>

    // utilise une horloge externe
    // le counter est incrementé à chaque monté du signal sur le channel 1
    TIM_TIxExternalClockConfig(TIMx, TIM_TIxExternalCLK1Source_TI1ED, TIM_ICPolarity_Rising, 0);
    b78e:	68b8      	ldr	r0, [r7, #8]
    b790:	f04f 0140 	mov.w	r1, #64	; 0x40
    b794:	f04f 0200 	mov.w	r2, #0	; 0x0
    b798:	f04f 0300 	mov.w	r3, #0	; 0x0
    b79c:	f7f7 fd36 	bl	320c <TIM_TIxExternalClockConfig>

    // met le timer à disposition
    TIM_Cmd(TIMx, ENABLE);
    b7a0:	68b8      	ldr	r0, [r7, #8]
    b7a2:	f04f 0101 	mov.w	r1, #1	; 0x1
    b7a6:	f7f7 fc3f 	bl	3028 <TIM_Cmd>

    // met le counter à 0
    TIM_SetCounter(TIMx, 0);
    b7aa:	68b8      	ldr	r0, [r7, #8]
    b7ac:	f04f 0100 	mov.w	r1, #0	; 0x0
    b7b0:	f7f8 fbac 	bl	3f0c <TIM_SetCounter>

    // initialisation des autres pins
    initialiserPinCapteur(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges);
    b7b4:	68fb      	ldr	r3, [r7, #12]
    b7b6:	685a      	ldr	r2, [r3, #4]
    b7b8:	68fb      	ldr	r3, [r7, #12]
    b7ba:	891b      	ldrh	r3, [r3, #8]
    b7bc:	4610      	mov	r0, r2
    b7be:	4619      	mov	r1, r3
    b7c0:	f7ff fece 	bl	b560 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues);
    b7c4:	68fb      	ldr	r3, [r7, #12]
    b7c6:	68da      	ldr	r2, [r3, #12]
    b7c8:	68fb      	ldr	r3, [r7, #12]
    b7ca:	8a1b      	ldrh	r3, [r3, #16]
    b7cc:	4610      	mov	r0, r2
    b7ce:	4619      	mov	r1, r3
    b7d0:	f7ff fec6 	bl	b560 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1);
    b7d4:	68fb      	ldr	r3, [r7, #12]
    b7d6:	695a      	ldr	r2, [r3, #20]
    b7d8:	68fb      	ldr	r3, [r7, #12]
    b7da:	8b1b      	ldrh	r3, [r3, #24]
    b7dc:	4610      	mov	r0, r2
    b7de:	4619      	mov	r1, r3
    b7e0:	f7ff febe 	bl	b560 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2);
    b7e4:	68fb      	ldr	r3, [r7, #12]
    b7e6:	69da      	ldr	r2, [r3, #28]
    b7e8:	68fb      	ldr	r3, [r7, #12]
    b7ea:	8c1b      	ldrh	r3, [r3, #32]
    b7ec:	4610      	mov	r0, r2
    b7ee:	4619      	mov	r1, r3
    b7f0:	f7ff feb6 	bl	b560 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1);
    b7f4:	68fb      	ldr	r3, [r7, #12]
    b7f6:	6a5a      	ldr	r2, [r3, #36]
    b7f8:	68fb      	ldr	r3, [r7, #12]
    b7fa:	8d1b      	ldrh	r3, [r3, #40]
    b7fc:	4610      	mov	r0, r2
    b7fe:	4619      	mov	r1, r3
    b800:	f7ff feae 	bl	b560 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2);
    b804:	68fb      	ldr	r3, [r7, #12]
    b806:	6ada      	ldr	r2, [r3, #44]
    b808:	68fb      	ldr	r3, [r7, #12]
    b80a:	8e1b      	ldrh	r3, [r3, #48]
    b80c:	4610      	mov	r0, r2
    b80e:	4619      	mov	r1, r3
    b810:	f7ff fea6 	bl	b560 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
}
    b814:	68fb      	ldr	r3, [r7, #12]
    b816:	4618      	mov	r0, r3
    b818:	f107 0720 	add.w	r7, r7, #32	; 0x20
    b81c:	46bd      	mov	sp, r7
    b81e:	bd80      	pop	{r7, pc}

0000b820 <_ZN8Capteurs15getNbrOfChannelEv>:
    if (!isConverted)
        convertirDonnees();
    return (output[direction] & 0xff) == 0xff;
}

uint8_t Capteurs::getNbrOfChannel(){
    b820:	b480      	push	{r7}
    b822:	b083      	sub	sp, #12
    b824:	af00      	add	r7, sp, #0
    b826:	6078      	str	r0, [r7, #4]
    return NbrOfChannel;
    b828:	687b      	ldr	r3, [r7, #4]
    b82a:	781b      	ldrb	r3, [r3, #0]
}
    b82c:	4618      	mov	r0, r3
    b82e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b832:	46bd      	mov	sp, r7
    b834:	bc80      	pop	{r7}
    b836:	4770      	bx	lr

0000b838 <_ZN8Capteurs18conversionFinishedEv>:
{
    isConverted = false;
    ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
}

bool Capteurs::conversionFinished()
    b838:	b580      	push	{r7, lr}
    b83a:	b082      	sub	sp, #8
    b83c:	af00      	add	r7, sp, #0
    b83e:	6078      	str	r0, [r7, #4]
{
    //return (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == SET);
    return DMA_GetFlagStatus(DMA1_FLAG_TC1);
    b840:	f04f 0002 	mov.w	r0, #2	; 0x2
    b844:	f7f5 fcdc 	bl	1200 <DMA_GetFlagStatus>
    b848:	4603      	mov	r3, r0
    b84a:	2b00      	cmp	r3, #0
    b84c:	bf0c      	ite	eq
    b84e:	2300      	moveq	r3, #0
    b850:	2301      	movne	r3, #1
    b852:	b2db      	uxtb	r3, r3
}
    b854:	4618      	mov	r0, r3
    b856:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b85a:	46bd      	mov	sp, r7
    b85c:	bd80      	pop	{r7, pc}
    b85e:	46c0      	nop			(mov r8, r8)

0000b860 <_ZN8Capteurs16convertirDonneesEv>:

void Capteurs::convertirDonnees()
    b860:	b580      	push	{r7, lr}
    b862:	b084      	sub	sp, #16
    b864:	af00      	add	r7, sp, #0
    b866:	6078      	str	r0, [r7, #4]
{
    isConverted = true;
    b868:	687b      	ldr	r3, [r7, #4]
    b86a:	f04f 0201 	mov.w	r2, #1	; 0x1
    b86e:	739a      	strb	r2, [r3, #14]
    while (!conversionFinished());    // au cas où l'interrupt de l'asservissement tombe avant la fin de l'acquisition/conversion
    b870:	6878      	ldr	r0, [r7, #4]
    b872:	f7ff ffe1 	bl	b838 <_ZN8Capteurs18conversionFinishedEv>
    b876:	4603      	mov	r3, r0
    b878:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    b87c:	b2db      	uxtb	r3, r3
    b87e:	2b00      	cmp	r3, #0
    b880:	d1f6      	bne.n	b870 <_ZN8Capteurs16convertirDonneesEv+0x10>
     ** C'EST ICI QU'IL FAUT METTRE LE BREAKPOINT **
     **     POUR AVOIR LA VALEUR DES CAPTEURS     **
     **                                           **
     **                                           **
     ***********************************************/
    for(int i=0;i<NbrOfChannel;i++)  { // Ceci est un compteur binaire, qui ajoute un bit à droite chaque fois qu'un objet est detecté
    b882:	f04f 0300 	mov.w	r3, #0	; 0x0
    b886:	60fb      	str	r3, [r7, #12]
    b888:	e032      	b.n	b8f0 <_ZN8Capteurs16convertirDonneesEv+0x90>
        output[i] <<= 1;
    b88a:	687b      	ldr	r3, [r7, #4]
    b88c:	689a      	ldr	r2, [r3, #8]
    b88e:	68fb      	ldr	r3, [r7, #12]
    b890:	ea4f 0383 	mov.w	r3, r3, lsl #2
    b894:	eb02 0103 	add.w	r1, r2, r3
    b898:	687b      	ldr	r3, [r7, #4]
    b89a:	689a      	ldr	r2, [r3, #8]
    b89c:	68fb      	ldr	r3, [r7, #12]
    b89e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    b8a2:	4413      	add	r3, r2
    b8a4:	681b      	ldr	r3, [r3, #0]
    b8a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    b8aa:	600b      	str	r3, [r1, #0]
        output[i] |= (data[i] > threshold);
    b8ac:	687b      	ldr	r3, [r7, #4]
    b8ae:	689a      	ldr	r2, [r3, #8]
    b8b0:	68fb      	ldr	r3, [r7, #12]
    b8b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    b8b6:	eb02 0103 	add.w	r1, r2, r3
    b8ba:	687b      	ldr	r3, [r7, #4]
    b8bc:	689a      	ldr	r2, [r3, #8]
    b8be:	68fb      	ldr	r3, [r7, #12]
    b8c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    b8c4:	4413      	add	r3, r2
    b8c6:	6818      	ldr	r0, [r3, #0]
    b8c8:	687b      	ldr	r3, [r7, #4]
    b8ca:	685a      	ldr	r2, [r3, #4]
    b8cc:	68fb      	ldr	r3, [r7, #12]
    b8ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
    b8d2:	4413      	add	r3, r2
    b8d4:	881a      	ldrh	r2, [r3, #0]
    b8d6:	687b      	ldr	r3, [r7, #4]
    b8d8:	899b      	ldrh	r3, [r3, #12]
    b8da:	429a      	cmp	r2, r3
    b8dc:	bf94      	ite	ls
    b8de:	2300      	movls	r3, #0
    b8e0:	2301      	movhi	r3, #1
    b8e2:	ea40 0303 	orr.w	r3, r0, r3
    b8e6:	600b      	str	r3, [r1, #0]
     ** C'EST ICI QU'IL FAUT METTRE LE BREAKPOINT **
     **     POUR AVOIR LA VALEUR DES CAPTEURS     **
     **                                           **
     **                                           **
     ***********************************************/
    for(int i=0;i<NbrOfChannel;i++)  { // Ceci est un compteur binaire, qui ajoute un bit à droite chaque fois qu'un objet est detecté
    b8e8:	68fb      	ldr	r3, [r7, #12]
    b8ea:	f103 0301 	add.w	r3, r3, #1	; 0x1
    b8ee:	60fb      	str	r3, [r7, #12]
    b8f0:	687b      	ldr	r3, [r7, #4]
    b8f2:	781b      	ldrb	r3, [r3, #0]
    b8f4:	461a      	mov	r2, r3
    b8f6:	68fb      	ldr	r3, [r7, #12]
    b8f8:	429a      	cmp	r2, r3
    b8fa:	dcc6      	bgt.n	b88a <_ZN8Capteurs16convertirDonneesEv+0x2a>
        output[i] <<= 1;
        output[i] |= (data[i] > threshold);
    }
}
    b8fc:	f107 0710 	add.w	r7, r7, #16	; 0x10
    b900:	46bd      	mov	sp, r7
    b902:	bd80      	pop	{r7, pc}

0000b904 <_ZN8Capteurs8getValueENS_9DirectionE>:

uint16_t Capteurs::getValue(Capteurs::Direction direction) // Retourne vrai si et seulement si le seuil du capteur a été dépassé pendant plus de 8 coups d'horloge car àxff = 8bits à 1
    b904:	b580      	push	{r7, lr}
    b906:	b082      	sub	sp, #8
    b908:	af00      	add	r7, sp, #0
    b90a:	6078      	str	r0, [r7, #4]
    b90c:	460b      	mov	r3, r1
    b90e:	70fb      	strb	r3, [r7, #3]
{
    if (!isConverted)
    b910:	687b      	ldr	r3, [r7, #4]
    b912:	7b9b      	ldrb	r3, [r3, #14]
    b914:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    b918:	b2db      	uxtb	r3, r3
    b91a:	2b00      	cmp	r3, #0
    b91c:	d002      	beq.n	b924 <_ZN8Capteurs8getValueENS_9DirectionE+0x20>
        convertirDonnees();
    b91e:	6878      	ldr	r0, [r7, #4]
    b920:	f7ff ff9e 	bl	b860 <_ZN8Capteurs16convertirDonneesEv>
    return (output[direction] & 0xff) == 0xff;
    b924:	687b      	ldr	r3, [r7, #4]
    b926:	689a      	ldr	r2, [r3, #8]
    b928:	78fb      	ldrb	r3, [r7, #3]
    b92a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    b92e:	4413      	add	r3, r2
    b930:	681b      	ldr	r3, [r3, #0]
    b932:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    b936:	2bff      	cmp	r3, #255
    b938:	bf14      	ite	ne
    b93a:	2300      	movne	r3, #0
    b93c:	2301      	moveq	r3, #1
}
    b93e:	4618      	mov	r0, r3
    b940:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b944:	46bd      	mov	sp, r7
    b946:	bd80      	pop	{r7, pc}

0000b948 <_ZN8Capteurs15startConversionEv>:
    // Channel1 : cf p.192 tableau 58
    DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    DMA_Cmd(DMA1_Channel1, ENABLE);
}

void Capteurs::startConversion()
    b948:	b580      	push	{r7, lr}
    b94a:	b082      	sub	sp, #8
    b94c:	af00      	add	r7, sp, #0
    b94e:	6078      	str	r0, [r7, #4]
{
    isConverted = false;
    b950:	687b      	ldr	r3, [r7, #4]
    b952:	f04f 0200 	mov.w	r2, #0	; 0x0
    b956:	739a      	strb	r2, [r3, #14]
    ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
    b958:	4804      	ldr	r0, [pc, #16]	(b96c <_ZN8Capteurs15startConversionEv+0x24>)
    b95a:	f04f 0101 	mov.w	r1, #1	; 0x1
    b95e:	f7f4 fe9b 	bl	698 <ADC_SoftwareStartConvCmd>
}
    b962:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b966:	46bd      	mov	sp, r7
    b968:	bd80      	pop	{r7, pc}
    b96a:	46c0      	nop			(mov r8, r8)
    b96c:	40012400 	.word	0x40012400

0000b970 <_ZN8CapteursC1Ev>:
#include "capteurs.h"

Capteurs::Capteurs(): threshold(SEUIL_DETECTION), isConverted(false)
    b970:	b580      	push	{r7, lr}
    b972:	b096      	sub	sp, #88
    b974:	af00      	add	r7, sp, #0
    b976:	6078      	str	r0, [r7, #4]
    b978:	687a      	ldr	r2, [r7, #4]
    b97a:	f640 13c4 	movw	r3, #2500	; 0x9c4
    b97e:	8193      	strh	r3, [r2, #12]
    b980:	687a      	ldr	r2, [r7, #4]
    b982:	f04f 0300 	mov.w	r3, #0	; 0x0
    b986:	7393      	strb	r3, [r2, #14]
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
       uint8_t Channels[] = {6,7,8,9,10,11,13,15};
       NbrOfChannel = 8;
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        uint8_t Channels[] = {10,11,12,13,15};
    b988:	4b67      	ldr	r3, [pc, #412]	(bb28 <_ZN8CapteursC1Ev+0x1b8>)
    b98a:	f107 024b 	add.w	r2, r7, #75	; 0x4b
    b98e:	f04f 0c05 	mov.w	ip, #5	; 0x5
    b992:	4610      	mov	r0, r2
    b994:	4619      	mov	r1, r3
    b996:	4662      	mov	r2, ip
    b998:	f014 fda4 	bl	204e4 <memcpy>
        NbrOfChannel = 5;
    b99c:	687a      	ldr	r2, [r7, #4]
    b99e:	f04f 0305 	mov.w	r3, #5	; 0x5
    b9a2:	7013      	strb	r3, [r2, #0]
    #endif

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    b9a4:	687b      	ldr	r3, [r7, #4]
    b9a6:	781b      	ldrb	r3, [r3, #0]
    b9a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    b9ac:	4618      	mov	r0, r3
    b9ae:	f002 fcd7 	bl	e360 <_Znaj>
    b9b2:	4603      	mov	r3, r0
    b9b4:	461a      	mov	r2, r3
    b9b6:	687b      	ldr	r3, [r7, #4]
    b9b8:	605a      	str	r2, [r3, #4]
    output = new uint32_t[NbrOfChannel];
    b9ba:	687b      	ldr	r3, [r7, #4]
    b9bc:	781b      	ldrb	r3, [r3, #0]
    b9be:	ea4f 0383 	mov.w	r3, r3, lsl #2
    b9c2:	4618      	mov	r0, r3
    b9c4:	f002 fccc 	bl	e360 <_Znaj>
    b9c8:	4603      	mov	r3, r0
    b9ca:	461a      	mov	r2, r3
    b9cc:	687b      	ldr	r3, [r7, #4]
    b9ce:	609a      	str	r2, [r3, #8]

    for(unsigned int i=0; i < NbrOfChannel; i++)
    b9d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    b9d4:	653b      	str	r3, [r7, #80]
    b9d6:	e00c      	b.n	b9f2 <_ZN8CapteursC1Ev+0x82>
        output[i] = 0;
    b9d8:	687b      	ldr	r3, [r7, #4]
    b9da:	689a      	ldr	r2, [r3, #8]
    b9dc:	6d3b      	ldr	r3, [r7, #80]
    b9de:	ea4f 0383 	mov.w	r3, r3, lsl #2
    b9e2:	441a      	add	r2, r3
    b9e4:	f04f 0300 	mov.w	r3, #0	; 0x0
    b9e8:	6013      	str	r3, [r2, #0]

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    output = new uint32_t[NbrOfChannel];

    for(unsigned int i=0; i < NbrOfChannel; i++)
    b9ea:	6d3b      	ldr	r3, [r7, #80]
    b9ec:	f103 0301 	add.w	r3, r3, #1	; 0x1
    b9f0:	653b      	str	r3, [r7, #80]
    b9f2:	687b      	ldr	r3, [r7, #4]
    b9f4:	781b      	ldrb	r3, [r3, #0]
    b9f6:	461a      	mov	r2, r3
    b9f8:	6d3b      	ldr	r3, [r7, #80]
    b9fa:	429a      	cmp	r2, r3
    b9fc:	d8ec      	bhi.n	b9d8 <_ZN8CapteursC1Ev+0x68>
        output[i] = 0;

    ADC_InitTypeDef ADC_InitStructure;
    // ADC1 fonctionne tout seul (on n'utilise ni ADC2 ni ADC3)
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    b9fe:	f04f 0300 	mov.w	r3, #0	; 0x0
    ba02:	637b      	str	r3, [r7, #52]
    // On scanne tous les channels
    ADC_InitStructure.ADC_ScanConvMode = ENABLE;
    ba04:	f04f 0301 	mov.w	r3, #1	; 0x1
    ba08:	f887 3038 	strb.w	r3, [r7, #56]
    // Single conversion mode
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    ba0c:	f04f 0300 	mov.w	r3, #0	; 0x0
    ba10:	f887 3039 	strb.w	r3, [r7, #57]
    // Pas d'external trigger (on lance la conversion à la main)
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    ba14:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
    ba18:	63fb      	str	r3, [r7, #60]
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    ba1a:	f04f 0300 	mov.w	r3, #0	; 0x0
    ba1e:	643b      	str	r3, [r7, #64]
    ADC_InitStructure.ADC_NbrOfChannel = NbrOfChannel;
    ba20:	687b      	ldr	r3, [r7, #4]
    ba22:	781b      	ldrb	r3, [r3, #0]
    ba24:	f887 3044 	strb.w	r3, [r7, #68]
    ADC_Init(ADC1, &ADC_InitStructure);
    ba28:	f107 0334 	add.w	r3, r7, #52	; 0x34
    ba2c:	483f      	ldr	r0, [pc, #252]	(bb2c <_ZN8CapteursC1Ev+0x1bc>)
    ba2e:	4619      	mov	r1, r3
    ba30:	f7f4 fcfa 	bl	428 <ADC_Init>

    // Activation du périphérique
    ADC_Cmd(ADC1, ENABLE);
    ba34:	483d      	ldr	r0, [pc, #244]	(bb2c <_ZN8CapteursC1Ev+0x1bc>)
    ba36:	f04f 0101 	mov.w	r1, #1	; 0x1
    ba3a:	f7f4 fd77 	bl	52c <ADC_Cmd>

    // Calibrage
    // On remet la calibration à zéro
    ADC_ResetCalibration(ADC1);
    ba3e:	483b      	ldr	r0, [pc, #236]	(bb2c <_ZN8CapteursC1Ev+0x1bc>)
    ba40:	f7f4 fdd2 	bl	5e8 <ADC_ResetCalibration>
    while(ADC_GetResetCalibrationStatus(ADC1));
    ba44:	4839      	ldr	r0, [pc, #228]	(bb2c <_ZN8CapteursC1Ev+0x1bc>)
    ba46:	f7f4 fddf 	bl	608 <ADC_GetResetCalibrationStatus>
    ba4a:	4603      	mov	r3, r0
    ba4c:	2b00      	cmp	r3, #0
    ba4e:	bf0c      	ite	eq
    ba50:	2300      	moveq	r3, #0
    ba52:	2301      	movne	r3, #1
    ba54:	b2db      	uxtb	r3, r3
    ba56:	2b00      	cmp	r3, #0
    ba58:	d1f4      	bne.n	ba44 <_ZN8CapteursC1Ev+0xd4>
    // On lance la calibration
    ADC_StartCalibration(ADC1);
    ba5a:	4834      	ldr	r0, [pc, #208]	(bb2c <_ZN8CapteursC1Ev+0x1bc>)
    ba5c:	f7f4 fdf0 	bl	640 <ADC_StartCalibration>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));
    ba60:	4832      	ldr	r0, [pc, #200]	(bb2c <_ZN8CapteursC1Ev+0x1bc>)
    ba62:	f7f4 fdfd 	bl	660 <ADC_GetCalibrationStatus>
    ba66:	4603      	mov	r3, r0
    ba68:	2b00      	cmp	r3, #0
    ba6a:	bf0c      	ite	eq
    ba6c:	2300      	moveq	r3, #0
    ba6e:	2301      	movne	r3, #1
    ba70:	b2db      	uxtb	r3, r3
    ba72:	2b00      	cmp	r3, #0
    ba74:	d1f4      	bne.n	ba60 <_ZN8CapteursC1Ev+0xf0>

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    ba76:	f04f 0300 	mov.w	r3, #0	; 0x0
    ba7a:	657b      	str	r3, [r7, #84]
    ba7c:	e015      	b.n	baaa <_ZN8CapteursC1Ev+0x13a>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    ba7e:	6d7b      	ldr	r3, [r7, #84]
    ba80:	f107 0258 	add.w	r2, r7, #88	; 0x58
    ba84:	4413      	add	r3, r2
    ba86:	f813 2c0d 	ldrb.w	r2, [r3, #-13]
    ba8a:	6d7b      	ldr	r3, [r7, #84]
    ba8c:	b2db      	uxtb	r3, r3
    ba8e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ba92:	b2db      	uxtb	r3, r3
    ba94:	4825      	ldr	r0, [pc, #148]	(bb2c <_ZN8CapteursC1Ev+0x1bc>)
    ba96:	4611      	mov	r1, r2
    ba98:	461a      	mov	r2, r3
    ba9a:	f04f 0300 	mov.w	r3, #0	; 0x0
    ba9e:	f7f4 fe75 	bl	78c <ADC_RegularChannelConfig>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    baa2:	6d7b      	ldr	r3, [r7, #84]
    baa4:	f103 0301 	add.w	r3, r3, #1	; 0x1
    baa8:	657b      	str	r3, [r7, #84]
    baaa:	687b      	ldr	r3, [r7, #4]
    baac:	781b      	ldrb	r3, [r3, #0]
    baae:	461a      	mov	r2, r3
    bab0:	6d7b      	ldr	r3, [r7, #84]
    bab2:	429a      	cmp	r2, r3
    bab4:	dce3      	bgt.n	ba7e <_ZN8CapteursC1Ev+0x10e>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    }
    // active le transfert des résultats de conversion en SRAM
    ADC_DMACmd(ADC1, ENABLE);
    bab6:	481d      	ldr	r0, [pc, #116]	(bb2c <_ZN8CapteursC1Ev+0x1bc>)
    bab8:	f04f 0101 	mov.w	r1, #1	; 0x1
    babc:	f7f4 fd52 	bl	564 <ADC_DMACmd>

    DMA_InitTypeDef DMA_InitStructure;
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); // ADC regular data register contient le résultat de la conversion
    bac0:	4b1a      	ldr	r3, [pc, #104]	(bb2c <_ZN8CapteursC1Ev+0x1bc>)
    bac2:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    bac6:	60bb      	str	r3, [r7, #8]
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)data ; // Adresse de destination
    bac8:	687b      	ldr	r3, [r7, #4]
    baca:	685b      	ldr	r3, [r3, #4]
    bacc:	60fb      	str	r3, [r7, #12]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; // On transfère du périphérique (ADC) à la mémoire (SRAM)
    bace:	f04f 0300 	mov.w	r3, #0	; 0x0
    bad2:	613b      	str	r3, [r7, #16]
    DMA_InitStructure.DMA_BufferSize = NbrOfChannel; // Nombre de conversions à transférer
    bad4:	687b      	ldr	r3, [r7, #4]
    bad6:	781b      	ldrb	r3, [r3, #0]
    bad8:	617b      	str	r3, [r7, #20]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; // L'adresse du résultat de la conversion ne change pas
    bada:	f04f 0300 	mov.w	r3, #0	; 0x0
    bade:	61bb      	str	r3, [r7, #24]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; // Incrémente le pointeur destination pour enregistrer les différentes conversions
    bae0:	f04f 0380 	mov.w	r3, #128	; 0x80
    bae4:	61fb      	str	r3, [r7, #28]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    bae6:	f44f 7300 	mov.w	r3, #512	; 0x200
    baea:	623b      	str	r3, [r7, #32]
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    baec:	f44f 6380 	mov.w	r3, #1024	; 0x400
    baf0:	627b      	str	r3, [r7, #36]
    // Note : le registre ADC_DR fait 32 bits mais seuls les bits 0:15 nous intéressent
    // Ici tout devrait fonctionner correctement : cf doc p.189 (tableau 56) (malgré une petite erreur dans le tableau)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    baf2:	f04f 0320 	mov.w	r3, #32	; 0x20
    baf6:	62bb      	str	r3, [r7, #40]
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    baf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    bafc:	62fb      	str	r3, [r7, #44]
    // On ne permet pas de lancer un transfert en software (car lancé par le périphérique ADC)
    DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    bafe:	f04f 0300 	mov.w	r3, #0	; 0x0
    bb02:	633b      	str	r3, [r7, #48]
    // Channel1 : cf p.192 tableau 58
    DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    bb04:	f107 0308 	add.w	r3, r7, #8	; 0x8
    bb08:	4809      	ldr	r0, [pc, #36]	(bb30 <_ZN8CapteursC1Ev+0x1c0>)
    bb0a:	4619      	mov	r1, r3
    bb0c:	f7f5 fab0 	bl	1070 <DMA_Init>
    DMA_Cmd(DMA1_Channel1, ENABLE);
    bb10:	4807      	ldr	r0, [pc, #28]	(bb30 <_ZN8CapteursC1Ev+0x1c0>)
    bb12:	f04f 0101 	mov.w	r1, #1	; 0x1
    bb16:	f7f5 fb29 	bl	116c <DMA_Cmd>
}
    bb1a:	687b      	ldr	r3, [r7, #4]
    bb1c:	4618      	mov	r0, r3
    bb1e:	f107 0758 	add.w	r7, r7, #88	; 0x58
    bb22:	46bd      	mov	sp, r7
    bb24:	bd80      	pop	{r7, pc}
    bb26:	46c0      	nop			(mov r8, r8)
    bb28:	000219e8 	.word	0x000219e8
    bb2c:	40012400 	.word	0x40012400
    bb30:	40020008 	.word	0x40020008

0000bb34 <_ZN8CapteursC2Ev>:
#include "capteurs.h"

Capteurs::Capteurs(): threshold(SEUIL_DETECTION), isConverted(false)
    bb34:	b580      	push	{r7, lr}
    bb36:	b096      	sub	sp, #88
    bb38:	af00      	add	r7, sp, #0
    bb3a:	6078      	str	r0, [r7, #4]
    bb3c:	687a      	ldr	r2, [r7, #4]
    bb3e:	f640 13c4 	movw	r3, #2500	; 0x9c4
    bb42:	8193      	strh	r3, [r2, #12]
    bb44:	687a      	ldr	r2, [r7, #4]
    bb46:	f04f 0300 	mov.w	r3, #0	; 0x0
    bb4a:	7393      	strb	r3, [r2, #14]
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
       uint8_t Channels[] = {6,7,8,9,10,11,13,15};
       NbrOfChannel = 8;
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        uint8_t Channels[] = {10,11,12,13,15};
    bb4c:	4b67      	ldr	r3, [pc, #412]	(bcec <_ZN8CapteursC2Ev+0x1b8>)
    bb4e:	f107 024b 	add.w	r2, r7, #75	; 0x4b
    bb52:	f04f 0c05 	mov.w	ip, #5	; 0x5
    bb56:	4610      	mov	r0, r2
    bb58:	4619      	mov	r1, r3
    bb5a:	4662      	mov	r2, ip
    bb5c:	f014 fcc2 	bl	204e4 <memcpy>
        NbrOfChannel = 5;
    bb60:	687a      	ldr	r2, [r7, #4]
    bb62:	f04f 0305 	mov.w	r3, #5	; 0x5
    bb66:	7013      	strb	r3, [r2, #0]
    #endif

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    bb68:	687b      	ldr	r3, [r7, #4]
    bb6a:	781b      	ldrb	r3, [r3, #0]
    bb6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    bb70:	4618      	mov	r0, r3
    bb72:	f002 fbf5 	bl	e360 <_Znaj>
    bb76:	4603      	mov	r3, r0
    bb78:	461a      	mov	r2, r3
    bb7a:	687b      	ldr	r3, [r7, #4]
    bb7c:	605a      	str	r2, [r3, #4]
    output = new uint32_t[NbrOfChannel];
    bb7e:	687b      	ldr	r3, [r7, #4]
    bb80:	781b      	ldrb	r3, [r3, #0]
    bb82:	ea4f 0383 	mov.w	r3, r3, lsl #2
    bb86:	4618      	mov	r0, r3
    bb88:	f002 fbea 	bl	e360 <_Znaj>
    bb8c:	4603      	mov	r3, r0
    bb8e:	461a      	mov	r2, r3
    bb90:	687b      	ldr	r3, [r7, #4]
    bb92:	609a      	str	r2, [r3, #8]

    for(unsigned int i=0; i < NbrOfChannel; i++)
    bb94:	f04f 0300 	mov.w	r3, #0	; 0x0
    bb98:	653b      	str	r3, [r7, #80]
    bb9a:	e00c      	b.n	bbb6 <_ZN8CapteursC2Ev+0x82>
        output[i] = 0;
    bb9c:	687b      	ldr	r3, [r7, #4]
    bb9e:	689a      	ldr	r2, [r3, #8]
    bba0:	6d3b      	ldr	r3, [r7, #80]
    bba2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    bba6:	441a      	add	r2, r3
    bba8:	f04f 0300 	mov.w	r3, #0	; 0x0
    bbac:	6013      	str	r3, [r2, #0]

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    output = new uint32_t[NbrOfChannel];

    for(unsigned int i=0; i < NbrOfChannel; i++)
    bbae:	6d3b      	ldr	r3, [r7, #80]
    bbb0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    bbb4:	653b      	str	r3, [r7, #80]
    bbb6:	687b      	ldr	r3, [r7, #4]
    bbb8:	781b      	ldrb	r3, [r3, #0]
    bbba:	461a      	mov	r2, r3
    bbbc:	6d3b      	ldr	r3, [r7, #80]
    bbbe:	429a      	cmp	r2, r3
    bbc0:	d8ec      	bhi.n	bb9c <_ZN8CapteursC2Ev+0x68>
        output[i] = 0;

    ADC_InitTypeDef ADC_InitStructure;
    // ADC1 fonctionne tout seul (on n'utilise ni ADC2 ni ADC3)
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    bbc2:	f04f 0300 	mov.w	r3, #0	; 0x0
    bbc6:	637b      	str	r3, [r7, #52]
    // On scanne tous les channels
    ADC_InitStructure.ADC_ScanConvMode = ENABLE;
    bbc8:	f04f 0301 	mov.w	r3, #1	; 0x1
    bbcc:	f887 3038 	strb.w	r3, [r7, #56]
    // Single conversion mode
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    bbd0:	f04f 0300 	mov.w	r3, #0	; 0x0
    bbd4:	f887 3039 	strb.w	r3, [r7, #57]
    // Pas d'external trigger (on lance la conversion à la main)
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    bbd8:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
    bbdc:	63fb      	str	r3, [r7, #60]
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    bbde:	f04f 0300 	mov.w	r3, #0	; 0x0
    bbe2:	643b      	str	r3, [r7, #64]
    ADC_InitStructure.ADC_NbrOfChannel = NbrOfChannel;
    bbe4:	687b      	ldr	r3, [r7, #4]
    bbe6:	781b      	ldrb	r3, [r3, #0]
    bbe8:	f887 3044 	strb.w	r3, [r7, #68]
    ADC_Init(ADC1, &ADC_InitStructure);
    bbec:	f107 0334 	add.w	r3, r7, #52	; 0x34
    bbf0:	483f      	ldr	r0, [pc, #252]	(bcf0 <_ZN8CapteursC2Ev+0x1bc>)
    bbf2:	4619      	mov	r1, r3
    bbf4:	f7f4 fc18 	bl	428 <ADC_Init>

    // Activation du périphérique
    ADC_Cmd(ADC1, ENABLE);
    bbf8:	483d      	ldr	r0, [pc, #244]	(bcf0 <_ZN8CapteursC2Ev+0x1bc>)
    bbfa:	f04f 0101 	mov.w	r1, #1	; 0x1
    bbfe:	f7f4 fc95 	bl	52c <ADC_Cmd>

    // Calibrage
    // On remet la calibration à zéro
    ADC_ResetCalibration(ADC1);
    bc02:	483b      	ldr	r0, [pc, #236]	(bcf0 <_ZN8CapteursC2Ev+0x1bc>)
    bc04:	f7f4 fcf0 	bl	5e8 <ADC_ResetCalibration>
    while(ADC_GetResetCalibrationStatus(ADC1));
    bc08:	4839      	ldr	r0, [pc, #228]	(bcf0 <_ZN8CapteursC2Ev+0x1bc>)
    bc0a:	f7f4 fcfd 	bl	608 <ADC_GetResetCalibrationStatus>
    bc0e:	4603      	mov	r3, r0
    bc10:	2b00      	cmp	r3, #0
    bc12:	bf0c      	ite	eq
    bc14:	2300      	moveq	r3, #0
    bc16:	2301      	movne	r3, #1
    bc18:	b2db      	uxtb	r3, r3
    bc1a:	2b00      	cmp	r3, #0
    bc1c:	d1f4      	bne.n	bc08 <_ZN8CapteursC2Ev+0xd4>
    // On lance la calibration
    ADC_StartCalibration(ADC1);
    bc1e:	4834      	ldr	r0, [pc, #208]	(bcf0 <_ZN8CapteursC2Ev+0x1bc>)
    bc20:	f7f4 fd0e 	bl	640 <ADC_StartCalibration>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));
    bc24:	4832      	ldr	r0, [pc, #200]	(bcf0 <_ZN8CapteursC2Ev+0x1bc>)
    bc26:	f7f4 fd1b 	bl	660 <ADC_GetCalibrationStatus>
    bc2a:	4603      	mov	r3, r0
    bc2c:	2b00      	cmp	r3, #0
    bc2e:	bf0c      	ite	eq
    bc30:	2300      	moveq	r3, #0
    bc32:	2301      	movne	r3, #1
    bc34:	b2db      	uxtb	r3, r3
    bc36:	2b00      	cmp	r3, #0
    bc38:	d1f4      	bne.n	bc24 <_ZN8CapteursC2Ev+0xf0>

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    bc3a:	f04f 0300 	mov.w	r3, #0	; 0x0
    bc3e:	657b      	str	r3, [r7, #84]
    bc40:	e015      	b.n	bc6e <_ZN8CapteursC2Ev+0x13a>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    bc42:	6d7b      	ldr	r3, [r7, #84]
    bc44:	f107 0258 	add.w	r2, r7, #88	; 0x58
    bc48:	4413      	add	r3, r2
    bc4a:	f813 2c0d 	ldrb.w	r2, [r3, #-13]
    bc4e:	6d7b      	ldr	r3, [r7, #84]
    bc50:	b2db      	uxtb	r3, r3
    bc52:	f103 0301 	add.w	r3, r3, #1	; 0x1
    bc56:	b2db      	uxtb	r3, r3
    bc58:	4825      	ldr	r0, [pc, #148]	(bcf0 <_ZN8CapteursC2Ev+0x1bc>)
    bc5a:	4611      	mov	r1, r2
    bc5c:	461a      	mov	r2, r3
    bc5e:	f04f 0300 	mov.w	r3, #0	; 0x0
    bc62:	f7f4 fd93 	bl	78c <ADC_RegularChannelConfig>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    bc66:	6d7b      	ldr	r3, [r7, #84]
    bc68:	f103 0301 	add.w	r3, r3, #1	; 0x1
    bc6c:	657b      	str	r3, [r7, #84]
    bc6e:	687b      	ldr	r3, [r7, #4]
    bc70:	781b      	ldrb	r3, [r3, #0]
    bc72:	461a      	mov	r2, r3
    bc74:	6d7b      	ldr	r3, [r7, #84]
    bc76:	429a      	cmp	r2, r3
    bc78:	dce3      	bgt.n	bc42 <_ZN8CapteursC2Ev+0x10e>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    }
    // active le transfert des résultats de conversion en SRAM
    ADC_DMACmd(ADC1, ENABLE);
    bc7a:	481d      	ldr	r0, [pc, #116]	(bcf0 <_ZN8CapteursC2Ev+0x1bc>)
    bc7c:	f04f 0101 	mov.w	r1, #1	; 0x1
    bc80:	f7f4 fc70 	bl	564 <ADC_DMACmd>

    DMA_InitTypeDef DMA_InitStructure;
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); // ADC regular data register contient le résultat de la conversion
    bc84:	4b1a      	ldr	r3, [pc, #104]	(bcf0 <_ZN8CapteursC2Ev+0x1bc>)
    bc86:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    bc8a:	60bb      	str	r3, [r7, #8]
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)data ; // Adresse de destination
    bc8c:	687b      	ldr	r3, [r7, #4]
    bc8e:	685b      	ldr	r3, [r3, #4]
    bc90:	60fb      	str	r3, [r7, #12]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; // On transfère du périphérique (ADC) à la mémoire (SRAM)
    bc92:	f04f 0300 	mov.w	r3, #0	; 0x0
    bc96:	613b      	str	r3, [r7, #16]
    DMA_InitStructure.DMA_BufferSize = NbrOfChannel; // Nombre de conversions à transférer
    bc98:	687b      	ldr	r3, [r7, #4]
    bc9a:	781b      	ldrb	r3, [r3, #0]
    bc9c:	617b      	str	r3, [r7, #20]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; // L'adresse du résultat de la conversion ne change pas
    bc9e:	f04f 0300 	mov.w	r3, #0	; 0x0
    bca2:	61bb      	str	r3, [r7, #24]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; // Incrémente le pointeur destination pour enregistrer les différentes conversions
    bca4:	f04f 0380 	mov.w	r3, #128	; 0x80
    bca8:	61fb      	str	r3, [r7, #28]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    bcaa:	f44f 7300 	mov.w	r3, #512	; 0x200
    bcae:	623b      	str	r3, [r7, #32]
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    bcb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    bcb4:	627b      	str	r3, [r7, #36]
    // Note : le registre ADC_DR fait 32 bits mais seuls les bits 0:15 nous intéressent
    // Ici tout devrait fonctionner correctement : cf doc p.189 (tableau 56) (malgré une petite erreur dans le tableau)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    bcb6:	f04f 0320 	mov.w	r3, #32	; 0x20
    bcba:	62bb      	str	r3, [r7, #40]
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    bcbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    bcc0:	62fb      	str	r3, [r7, #44]
    // On ne permet pas de lancer un transfert en software (car lancé par le périphérique ADC)
    DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    bcc2:	f04f 0300 	mov.w	r3, #0	; 0x0
    bcc6:	633b      	str	r3, [r7, #48]
    // Channel1 : cf p.192 tableau 58
    DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    bcc8:	f107 0308 	add.w	r3, r7, #8	; 0x8
    bccc:	4809      	ldr	r0, [pc, #36]	(bcf4 <_ZN8CapteursC2Ev+0x1c0>)
    bcce:	4619      	mov	r1, r3
    bcd0:	f7f5 f9ce 	bl	1070 <DMA_Init>
    DMA_Cmd(DMA1_Channel1, ENABLE);
    bcd4:	4807      	ldr	r0, [pc, #28]	(bcf4 <_ZN8CapteursC2Ev+0x1c0>)
    bcd6:	f04f 0101 	mov.w	r1, #1	; 0x1
    bcda:	f7f5 fa47 	bl	116c <DMA_Cmd>
}
    bcde:	687b      	ldr	r3, [r7, #4]
    bce0:	4618      	mov	r0, r3
    bce2:	f107 0758 	add.w	r7, r7, #88	; 0x58
    bce6:	46bd      	mov	sp, r7
    bce8:	bd80      	pop	{r7, pc}
    bcea:	46c0      	nop			(mov r8, r8)
    bcec:	000219e8 	.word	0x000219e8
    bcf0:	40012400 	.word	0x40012400
    bcf4:	40020008 	.word	0x40020008

0000bcf8 <_ZN3Led6setOffEi>:
        default:
            break;
    }
}

void Led::setOff(int index)
    bcf8:	b580      	push	{r7, lr}
    bcfa:	b082      	sub	sp, #8
    bcfc:	af00      	add	r7, sp, #0
    bcfe:	6078      	str	r0, [r7, #4]
{
    if (index>=0 and index<LED_NUMBER)
    bd00:	687b      	ldr	r3, [r7, #4]
    bd02:	2b00      	cmp	r3, #0
    bd04:	db07      	blt.n	bd16 <_ZN3Led6setOffEi+0x1e>
    bd06:	687b      	ldr	r3, [r7, #4]
    bd08:	2b01      	cmp	r3, #1
    bd0a:	dc04      	bgt.n	bd16 <_ZN3Led6setOffEi+0x1e>
        ledOn[index] = false;
    bd0c:	6879      	ldr	r1, [r7, #4]
    bd0e:	4a10      	ldr	r2, [pc, #64]	(bd50 <_ZN3Led6setOffEi+0x58>)
    bd10:	f04f 0300 	mov.w	r3, #0	; 0x0
    bd14:	5453      	strb	r3, [r2, r1]

    switch(index)
    bd16:	687b      	ldr	r3, [r7, #4]
    bd18:	603b      	str	r3, [r7, #0]
    bd1a:	683b      	ldr	r3, [r7, #0]
    bd1c:	2b00      	cmp	r3, #0
    bd1e:	d003      	beq.n	bd28 <_ZN3Led6setOffEi+0x30>
    bd20:	683b      	ldr	r3, [r7, #0]
    bd22:	2b01      	cmp	r3, #1
    bd24:	d008      	beq.n	bd38 <_ZN3Led6setOffEi+0x40>
    bd26:	e00e      	b.n	bd46 <_ZN3Led6setOffEi+0x4e>
        #ifdef ROBOTHW
            #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_12, Bit_SET); // LED verte
            #endif
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_RESET); // LED verte
    bd28:	480a      	ldr	r0, [pc, #40]	(bd54 <_ZN3Led6setOffEi+0x5c>)
    bd2a:	f04f 0140 	mov.w	r1, #64	; 0x40
    bd2e:	f04f 0200 	mov.w	r2, #0	; 0x0
    bd32:	f7f5 fe2b 	bl	198c <GPIO_WriteBit>
    bd36:	e006      	b.n	bd46 <_ZN3Led6setOffEi+0x4e>
            break;

        case 1:
        #ifdef ROBOTHW
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_7, Bit_RESET); // LED jaune
    bd38:	4806      	ldr	r0, [pc, #24]	(bd54 <_ZN3Led6setOffEi+0x5c>)
    bd3a:	f04f 0180 	mov.w	r1, #128	; 0x80
    bd3e:	f04f 0200 	mov.w	r2, #0	; 0x0
    bd42:	f7f5 fe23 	bl	198c <GPIO_WriteBit>
        #endif
            break;
        default:
            break;
    }
}
    bd46:	f107 0708 	add.w	r7, r7, #8	; 0x8
    bd4a:	46bd      	mov	sp, r7
    bd4c:	bd80      	pop	{r7, pc}
    bd4e:	46c0      	nop			(mov r8, r8)
    bd50:	2000057c 	.word	0x2000057c
    bd54:	40011000 	.word	0x40011000

0000bd58 <_Z12eteindreLED2v>:
void allumerLED2()
{
    Led::setOn(1);
}

void eteindreLED2()
    bd58:	b580      	push	{r7, lr}
    bd5a:	af00      	add	r7, sp, #0
{
    Led::setOff(1);
    bd5c:	f04f 0001 	mov.w	r0, #1	; 0x1
    bd60:	f7ff ffca 	bl	bcf8 <_ZN3Led6setOffEi>
}
    bd64:	46bd      	mov	sp, r7
    bd66:	bd80      	pop	{r7, pc}

0000bd68 <_Z11eteindreLEDv>:
void allumerLED()
{
    Led::setOn(0);
}

void eteindreLED()
    bd68:	b580      	push	{r7, lr}
    bd6a:	af00      	add	r7, sp, #0
{
    Led::setOff(0);
    bd6c:	f04f 0000 	mov.w	r0, #0	; 0x0
    bd70:	f7ff ffc2 	bl	bcf8 <_ZN3Led6setOffEi>
}
    bd74:	46bd      	mov	sp, r7
    bd76:	bd80      	pop	{r7, pc}

0000bd78 <_ZN3Led5setOnEi>:
        else
            setOn(index);
    }
}

void Led::setOn(int index)
    bd78:	b580      	push	{r7, lr}
    bd7a:	b082      	sub	sp, #8
    bd7c:	af00      	add	r7, sp, #0
    bd7e:	6078      	str	r0, [r7, #4]
{
    if (index>=0 and index<LED_NUMBER)
    bd80:	687b      	ldr	r3, [r7, #4]
    bd82:	2b00      	cmp	r3, #0
    bd84:	db07      	blt.n	bd96 <_ZN3Led5setOnEi+0x1e>
    bd86:	687b      	ldr	r3, [r7, #4]
    bd88:	2b01      	cmp	r3, #1
    bd8a:	dc04      	bgt.n	bd96 <_ZN3Led5setOnEi+0x1e>
        ledOn[index] = true;
    bd8c:	6879      	ldr	r1, [r7, #4]
    bd8e:	4a10      	ldr	r2, [pc, #64]	(bdd0 <_ZN3Led5setOnEi+0x58>)
    bd90:	f04f 0301 	mov.w	r3, #1	; 0x1
    bd94:	5453      	strb	r3, [r2, r1]

    switch(index)
    bd96:	687b      	ldr	r3, [r7, #4]
    bd98:	603b      	str	r3, [r7, #0]
    bd9a:	683b      	ldr	r3, [r7, #0]
    bd9c:	2b00      	cmp	r3, #0
    bd9e:	d003      	beq.n	bda8 <_ZN3Led5setOnEi+0x30>
    bda0:	683b      	ldr	r3, [r7, #0]
    bda2:	2b01      	cmp	r3, #1
    bda4:	d008      	beq.n	bdb8 <_ZN3Led5setOnEi+0x40>
    bda6:	e00e      	b.n	bdc6 <_ZN3Led5setOnEi+0x4e>
        #ifdef ROBOTHW
            #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_12, Bit_RESET); // LED verte
            #endif
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_SET); // LED verte
    bda8:	480a      	ldr	r0, [pc, #40]	(bdd4 <_ZN3Led5setOnEi+0x5c>)
    bdaa:	f04f 0140 	mov.w	r1, #64	; 0x40
    bdae:	f04f 0201 	mov.w	r2, #1	; 0x1
    bdb2:	f7f5 fdeb 	bl	198c <GPIO_WriteBit>
    bdb6:	e006      	b.n	bdc6 <_ZN3Led5setOnEi+0x4e>
        #ifdef ROBOTHW
            #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
               // Pas de LED jaune sur le H103 :'(
            #endif
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_7, Bit_SET); // LED jaune
    bdb8:	4806      	ldr	r0, [pc, #24]	(bdd4 <_ZN3Led5setOnEi+0x5c>)
    bdba:	f04f 0180 	mov.w	r1, #128	; 0x80
    bdbe:	f04f 0201 	mov.w	r2, #1	; 0x1
    bdc2:	f7f5 fde3 	bl	198c <GPIO_WriteBit>
            break;

        default:
            break;
    }
}
    bdc6:	f107 0708 	add.w	r7, r7, #8	; 0x8
    bdca:	46bd      	mov	sp, r7
    bdcc:	bd80      	pop	{r7, pc}
    bdce:	46c0      	nop			(mov r8, r8)
    bdd0:	2000057c 	.word	0x2000057c
    bdd4:	40011000 	.word	0x40011000

0000bdd8 <_ZN3Led6toggleEi>:
    Led::setOff(1);
}

bool Led::ledOn[LED_NUMBER] = {0};

void Led::toggle(int index)
    bdd8:	b580      	push	{r7, lr}
    bdda:	b082      	sub	sp, #8
    bddc:	af00      	add	r7, sp, #0
    bdde:	6078      	str	r0, [r7, #4]
{
    if (index>=0 and index<LED_NUMBER)
    bde0:	687b      	ldr	r3, [r7, #4]
    bde2:	2b00      	cmp	r3, #0
    bde4:	db0e      	blt.n	be04 <_ZN3Led6toggleEi+0x2c>
    bde6:	687b      	ldr	r3, [r7, #4]
    bde8:	2b01      	cmp	r3, #1
    bdea:	dc0b      	bgt.n	be04 <_ZN3Led6toggleEi+0x2c>
    {
        if (ledOn[index])
    bdec:	687b      	ldr	r3, [r7, #4]
    bdee:	4a07      	ldr	r2, [pc, #28]	(be0c <_ZN3Led6toggleEi+0x34>)
    bdf0:	5cd3      	ldrb	r3, [r2, r3]
    bdf2:	2b00      	cmp	r3, #0
    bdf4:	d003      	beq.n	bdfe <_ZN3Led6toggleEi+0x26>
            setOff(index);
    bdf6:	6878      	ldr	r0, [r7, #4]
    bdf8:	f7ff ff7e 	bl	bcf8 <_ZN3Led6setOffEi>
    bdfc:	e002      	b.n	be04 <_ZN3Led6toggleEi+0x2c>
        else
            setOn(index);
    bdfe:	6878      	ldr	r0, [r7, #4]
    be00:	f7ff ffba 	bl	bd78 <_ZN3Led5setOnEi>
    }
}
    be04:	f107 0708 	add.w	r7, r7, #8	; 0x8
    be08:	46bd      	mov	sp, r7
    be0a:	bd80      	pop	{r7, pc}
    be0c:	2000057c 	.word	0x2000057c

0000be10 <_Z11allumerLED2v>:
void eteindreLED()
{
    Led::setOff(0);
}

void allumerLED2()
    be10:	b580      	push	{r7, lr}
    be12:	af00      	add	r7, sp, #0
{
    Led::setOn(1);
    be14:	f04f 0001 	mov.w	r0, #1	; 0x1
    be18:	f7ff ffae 	bl	bd78 <_ZN3Led5setOnEi>
}
    be1c:	46bd      	mov	sp, r7
    be1e:	bd80      	pop	{r7, pc}

0000be20 <_Z10allumerLEDv>:
#include "leds.h"

// allume ou éteint une LED
void allumerLED()
    be20:	b580      	push	{r7, lr}
    be22:	af00      	add	r7, sp, #0
{
    Led::setOn(0);
    be24:	f04f 0000 	mov.w	r0, #0	; 0x0
    be28:	f7ff ffa6 	bl	bd78 <_ZN3Led5setOnEi>
}
    be2c:	46bd      	mov	sp, r7
    be2e:	bd80      	pop	{r7, pc}

0000be30 <_ZN18LigthBarrierSensor8getValueEv>:
    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de
    // retourner un true et que rien a été detecté au moins 8 fois pour retourner false.
    output = output ? !((counter & 0xff) == 0x00) : (counter & 0xff) == 0xff ;
}

Sensor::OutputSensor LigthBarrierSensor::getValue()
    be30:	b480      	push	{r7}
    be32:	b087      	sub	sp, #28
    be34:	af00      	add	r7, sp, #0
    be36:	4602      	mov	r2, r0
    be38:	6079      	str	r1, [r7, #4]
{
    OutputSensor outputR;
    outputR.type = LIMIT_SWITCH;
    be3a:	f04f 0302 	mov.w	r3, #2	; 0x2
    be3e:	7013      	strb	r3, [r2, #0]
    outputR.f = 0;
    be40:	4b05      	ldr	r3, [pc, #20]	(be58 <_ZN18LigthBarrierSensor8getValueEv+0x28>)
    be42:	6053      	str	r3, [r2, #4]
    outputR.b = output;
    be44:	687b      	ldr	r3, [r7, #4]
    be46:	7bdb      	ldrb	r3, [r3, #15]
    be48:	7213      	strb	r3, [r2, #8]
    return outputR;
}
    be4a:	4610      	mov	r0, r2
    be4c:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    be50:	46bd      	mov	sp, r7
    be52:	bc80      	pop	{r7}
    be54:	4770      	bx	lr
    be56:	46c0      	nop			(mov r8, r8)
    be58:	00000000 	.word	0x00000000

0000be5c <_ZN18LigthBarrierSensor7getNameEv>:

LigthBarrierSensor::LigthBarrierName LigthBarrierSensor::getName()
    be5c:	b480      	push	{r7}
    be5e:	b083      	sub	sp, #12
    be60:	af00      	add	r7, sp, #0
    be62:	6078      	str	r0, [r7, #4]
{
    return name;
    be64:	687b      	ldr	r3, [r7, #4]
    be66:	7b9b      	ldrb	r3, [r3, #14]
}
    be68:	4618      	mov	r0, r3
    be6a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    be6e:	46bd      	mov	sp, r7
    be70:	bc80      	pop	{r7}
    be72:	4770      	bx	lr

0000be74 <_ZN18LigthBarrierSensor11updateValueEv>:

LigthBarrierSensor::~LigthBarrierSensor()
{
}

void LigthBarrierSensor::updateValue()
    be74:	b590      	push	{r4, r7, lr}
    be76:	b083      	sub	sp, #12
    be78:	af00      	add	r7, sp, #0
    be7a:	6078      	str	r0, [r7, #4]
{
    counter <<=1;
    be7c:	687b      	ldr	r3, [r7, #4]
    be7e:	899b      	ldrh	r3, [r3, #12]
    be80:	ea4f 0343 	mov.w	r3, r3, lsl #1
    be84:	b29b      	uxth	r3, r3
    be86:	687a      	ldr	r2, [r7, #4]
    be88:	8193      	strh	r3, [r2, #12]
    counter |= (GPIO_ReadInputDataBit(group,pin)==SET);
    be8a:	687b      	ldr	r3, [r7, #4]
    be8c:	899b      	ldrh	r3, [r3, #12]
    be8e:	461c      	mov	r4, r3
    be90:	687b      	ldr	r3, [r7, #4]
    be92:	689a      	ldr	r2, [r3, #8]
    be94:	687b      	ldr	r3, [r7, #4]
    be96:	889b      	ldrh	r3, [r3, #4]
    be98:	4610      	mov	r0, r2
    be9a:	4619      	mov	r1, r3
    be9c:	f7f5 fd02 	bl	18a4 <GPIO_ReadInputDataBit>
    bea0:	4603      	mov	r3, r0
    bea2:	2b01      	cmp	r3, #1
    bea4:	bf14      	ite	ne
    bea6:	2300      	movne	r3, #0
    bea8:	2301      	moveq	r3, #1
    beaa:	4622      	mov	r2, r4
    beac:	ea42 0303 	orr.w	r3, r2, r3
    beb0:	b29b      	uxth	r3, r3
    beb2:	b29b      	uxth	r3, r3
    beb4:	687a      	ldr	r2, [r7, #4]
    beb6:	8193      	strh	r3, [r2, #12]

    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de
    // retourner un true et que rien a été detecté au moins 8 fois pour retourner false.
    output = output ? !((counter & 0xff) == 0x00) : (counter & 0xff) == 0xff ;
    beb8:	687b      	ldr	r3, [r7, #4]
    beba:	7bdb      	ldrb	r3, [r3, #15]
    bebc:	2b00      	cmp	r3, #0
    bebe:	d00a      	beq.n	bed6 <_ZN18LigthBarrierSensor11updateValueEv+0x62>
    bec0:	687b      	ldr	r3, [r7, #4]
    bec2:	899b      	ldrh	r3, [r3, #12]
    bec4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    bec8:	2b00      	cmp	r3, #0
    beca:	bf0c      	ite	eq
    becc:	2300      	moveq	r3, #0
    bece:	2301      	movne	r3, #1
    bed0:	b2db      	uxtb	r3, r3
    bed2:	603b      	str	r3, [r7, #0]
    bed4:	e009      	b.n	beea <_ZN18LigthBarrierSensor11updateValueEv+0x76>
    bed6:	687b      	ldr	r3, [r7, #4]
    bed8:	899b      	ldrh	r3, [r3, #12]
    beda:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    bede:	2bff      	cmp	r3, #255
    bee0:	bf14      	ite	ne
    bee2:	2300      	movne	r3, #0
    bee4:	2301      	moveq	r3, #1
    bee6:	b2db      	uxtb	r3, r3
    bee8:	603b      	str	r3, [r7, #0]
    beea:	687a      	ldr	r2, [r7, #4]
    beec:	6839      	ldr	r1, [r7, #0]
    beee:	460b      	mov	r3, r1
    bef0:	73d3      	strb	r3, [r2, #15]
}
    bef2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    bef6:	46bd      	mov	sp, r7
    bef8:	bd90      	pop	{r4, r7, pc}
    befa:	46c0      	nop			(mov r8, r8)

0000befc <_ZN18LigthBarrierSensorD0Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LigthBarrierSensor::~LigthBarrierSensor()
    befc:	b580      	push	{r7, lr}
    befe:	b082      	sub	sp, #8
    bf00:	af00      	add	r7, sp, #0
    bf02:	6078      	str	r0, [r7, #4]
    bf04:	687a      	ldr	r2, [r7, #4]
    bf06:	4b0a      	ldr	r3, [pc, #40]	(bf30 <_ZN18LigthBarrierSensorD0Ev+0x34>)
    bf08:	6013      	str	r3, [r2, #0]
{
}
    bf0a:	687b      	ldr	r3, [r7, #4]
    bf0c:	4618      	mov	r0, r3
    bf0e:	f7f9 fd39 	bl	5984 <_ZN6SensorD2Ev>
    bf12:	f04f 0301 	mov.w	r3, #1	; 0x1
    bf16:	b2db      	uxtb	r3, r3
    bf18:	2b00      	cmp	r3, #0
    bf1a:	d002      	beq.n	bf22 <_ZN18LigthBarrierSensorD0Ev+0x26>
    bf1c:	6878      	ldr	r0, [r7, #4]
    bf1e:	f002 fa2d 	bl	e37c <_ZdlPv>
    bf22:	687b      	ldr	r3, [r7, #4]
    bf24:	4618      	mov	r0, r3
    bf26:	f107 0708 	add.w	r7, r7, #8	; 0x8
    bf2a:	46bd      	mov	sp, r7
    bf2c:	bd80      	pop	{r7, pc}
    bf2e:	46c0      	nop			(mov r8, r8)
    bf30:	000219f8 	.word	0x000219f8

0000bf34 <_ZN18LigthBarrierSensorD1Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LigthBarrierSensor::~LigthBarrierSensor()
    bf34:	b580      	push	{r7, lr}
    bf36:	b082      	sub	sp, #8
    bf38:	af00      	add	r7, sp, #0
    bf3a:	6078      	str	r0, [r7, #4]
    bf3c:	687a      	ldr	r2, [r7, #4]
    bf3e:	4b0a      	ldr	r3, [pc, #40]	(bf68 <_ZN18LigthBarrierSensorD1Ev+0x34>)
    bf40:	6013      	str	r3, [r2, #0]
{
}
    bf42:	687b      	ldr	r3, [r7, #4]
    bf44:	4618      	mov	r0, r3
    bf46:	f7f9 fd1d 	bl	5984 <_ZN6SensorD2Ev>
    bf4a:	f04f 0300 	mov.w	r3, #0	; 0x0
    bf4e:	b2db      	uxtb	r3, r3
    bf50:	2b00      	cmp	r3, #0
    bf52:	d002      	beq.n	bf5a <_ZN18LigthBarrierSensorD1Ev+0x26>
    bf54:	6878      	ldr	r0, [r7, #4]
    bf56:	f002 fa11 	bl	e37c <_ZdlPv>
    bf5a:	687b      	ldr	r3, [r7, #4]
    bf5c:	4618      	mov	r0, r3
    bf5e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    bf62:	46bd      	mov	sp, r7
    bf64:	bd80      	pop	{r7, pc}
    bf66:	46c0      	nop			(mov r8, r8)
    bf68:	000219f8 	.word	0x000219f8

0000bf6c <_ZN18LigthBarrierSensorD2Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LigthBarrierSensor::~LigthBarrierSensor()
    bf6c:	b580      	push	{r7, lr}
    bf6e:	b082      	sub	sp, #8
    bf70:	af00      	add	r7, sp, #0
    bf72:	6078      	str	r0, [r7, #4]
    bf74:	687a      	ldr	r2, [r7, #4]
    bf76:	4b0a      	ldr	r3, [pc, #40]	(bfa0 <_ZN18LigthBarrierSensorD2Ev+0x34>)
    bf78:	6013      	str	r3, [r2, #0]
{
}
    bf7a:	687b      	ldr	r3, [r7, #4]
    bf7c:	4618      	mov	r0, r3
    bf7e:	f7f9 fd01 	bl	5984 <_ZN6SensorD2Ev>
    bf82:	f04f 0300 	mov.w	r3, #0	; 0x0
    bf86:	b2db      	uxtb	r3, r3
    bf88:	2b00      	cmp	r3, #0
    bf8a:	d002      	beq.n	bf92 <_ZN18LigthBarrierSensorD2Ev+0x26>
    bf8c:	6878      	ldr	r0, [r7, #4]
    bf8e:	f002 f9f5 	bl	e37c <_ZdlPv>
    bf92:	687b      	ldr	r3, [r7, #4]
    bf94:	4618      	mov	r0, r3
    bf96:	f107 0708 	add.w	r7, r7, #8	; 0x8
    bf9a:	46bd      	mov	sp, r7
    bf9c:	bd80      	pop	{r7, pc}
    bf9e:	46c0      	nop			(mov r8, r8)
    bfa0:	000219f8 	.word	0x000219f8

0000bfa4 <_ZN18LigthBarrierSensorC1ENS_16LigthBarrierNameEtP12GPIO_TypeDef>:
#include "ligthBarrierSensor.h"

#ifdef ROBOTHW

LigthBarrierSensor::LigthBarrierSensor(LigthBarrierName name, uint16_t pin, GPIO_TypeDef* group)
    bfa4:	b580      	push	{r7, lr}
    bfa6:	b086      	sub	sp, #24
    bfa8:	af00      	add	r7, sp, #0
    bfaa:	60f8      	str	r0, [r7, #12]
    bfac:	607b      	str	r3, [r7, #4]
    bfae:	460b      	mov	r3, r1
    bfb0:	72fb      	strb	r3, [r7, #11]
    bfb2:	4613      	mov	r3, r2
    bfb4:	813b      	strh	r3, [r7, #8]
    bfb6:	68fb      	ldr	r3, [r7, #12]
    bfb8:	4618      	mov	r0, r3
    bfba:	f7f9 fc93 	bl	58e4 <_ZN6SensorC2Ev>
    bfbe:	68fa      	ldr	r2, [r7, #12]
    bfc0:	4b13      	ldr	r3, [pc, #76]	(c010 <_ZN18LigthBarrierSensorC1ENS_16LigthBarrierNameEtP12GPIO_TypeDef+0x6c>)
    bfc2:	6013      	str	r3, [r2, #0]
{
    this->pin = pin;
    bfc4:	68fa      	ldr	r2, [r7, #12]
    bfc6:	893b      	ldrh	r3, [r7, #8]
    bfc8:	8093      	strh	r3, [r2, #4]
    this->group = group;
    bfca:	68fa      	ldr	r2, [r7, #12]
    bfcc:	687b      	ldr	r3, [r7, #4]
    bfce:	6093      	str	r3, [r2, #8]
    counter = 0;
    bfd0:	68fa      	ldr	r2, [r7, #12]
    bfd2:	f04f 0300 	mov.w	r3, #0	; 0x0
    bfd6:	8193      	strh	r3, [r2, #12]
    this->name = name;
    bfd8:	68fa      	ldr	r2, [r7, #12]
    bfda:	7afb      	ldrb	r3, [r7, #11]
    bfdc:	7393      	strb	r3, [r2, #14]
    output = false;
    bfde:	68fa      	ldr	r2, [r7, #12]
    bfe0:	f04f 0300 	mov.w	r3, #0	; 0x0
    bfe4:	73d3      	strb	r3, [r2, #15]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    bfe6:	893b      	ldrh	r3, [r7, #8]
    bfe8:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    bfea:	f04f 0348 	mov.w	r3, #72	; 0x48
    bfee:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    bff0:	f04f 0303 	mov.w	r3, #3	; 0x3
    bff4:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    bff6:	f107 0314 	add.w	r3, r7, #20	; 0x14
    bffa:	6878      	ldr	r0, [r7, #4]
    bffc:	4619      	mov	r1, r3
    bffe:	f7f5 fb57 	bl	16b0 <GPIO_Init>
}
    c002:	68fb      	ldr	r3, [r7, #12]
    c004:	4618      	mov	r0, r3
    c006:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c00a:	46bd      	mov	sp, r7
    c00c:	bd80      	pop	{r7, pc}
    c00e:	46c0      	nop			(mov r8, r8)
    c010:	000219f8 	.word	0x000219f8

0000c014 <_ZN18LigthBarrierSensorC2ENS_16LigthBarrierNameEtP12GPIO_TypeDef>:
#include "ligthBarrierSensor.h"

#ifdef ROBOTHW

LigthBarrierSensor::LigthBarrierSensor(LigthBarrierName name, uint16_t pin, GPIO_TypeDef* group)
    c014:	b580      	push	{r7, lr}
    c016:	b086      	sub	sp, #24
    c018:	af00      	add	r7, sp, #0
    c01a:	60f8      	str	r0, [r7, #12]
    c01c:	607b      	str	r3, [r7, #4]
    c01e:	460b      	mov	r3, r1
    c020:	72fb      	strb	r3, [r7, #11]
    c022:	4613      	mov	r3, r2
    c024:	813b      	strh	r3, [r7, #8]
    c026:	68fb      	ldr	r3, [r7, #12]
    c028:	4618      	mov	r0, r3
    c02a:	f7f9 fc5b 	bl	58e4 <_ZN6SensorC2Ev>
    c02e:	68fa      	ldr	r2, [r7, #12]
    c030:	4b13      	ldr	r3, [pc, #76]	(c080 <_ZN18LigthBarrierSensorC2ENS_16LigthBarrierNameEtP12GPIO_TypeDef+0x6c>)
    c032:	6013      	str	r3, [r2, #0]
{
    this->pin = pin;
    c034:	68fa      	ldr	r2, [r7, #12]
    c036:	893b      	ldrh	r3, [r7, #8]
    c038:	8093      	strh	r3, [r2, #4]
    this->group = group;
    c03a:	68fa      	ldr	r2, [r7, #12]
    c03c:	687b      	ldr	r3, [r7, #4]
    c03e:	6093      	str	r3, [r2, #8]
    counter = 0;
    c040:	68fa      	ldr	r2, [r7, #12]
    c042:	f04f 0300 	mov.w	r3, #0	; 0x0
    c046:	8193      	strh	r3, [r2, #12]
    this->name = name;
    c048:	68fa      	ldr	r2, [r7, #12]
    c04a:	7afb      	ldrb	r3, [r7, #11]
    c04c:	7393      	strb	r3, [r2, #14]
    output = false;
    c04e:	68fa      	ldr	r2, [r7, #12]
    c050:	f04f 0300 	mov.w	r3, #0	; 0x0
    c054:	73d3      	strb	r3, [r2, #15]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    c056:	893b      	ldrh	r3, [r7, #8]
    c058:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    c05a:	f04f 0348 	mov.w	r3, #72	; 0x48
    c05e:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c060:	f04f 0303 	mov.w	r3, #3	; 0x3
    c064:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    c066:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c06a:	6878      	ldr	r0, [r7, #4]
    c06c:	4619      	mov	r1, r3
    c06e:	f7f5 fb1f 	bl	16b0 <GPIO_Init>
}
    c072:	68fb      	ldr	r3, [r7, #12]
    c074:	4618      	mov	r0, r3
    c076:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c07a:	46bd      	mov	sp, r7
    c07c:	bd80      	pop	{r7, pc}
    c07e:	46c0      	nop			(mov r8, r8)
    c080:	000219f8 	.word	0x000219f8

0000c084 <_ZN17LimitSwitchSensor8getValueEv>:
    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de retourner un true
    // et que rien a été detecté au moins 8 fois pour retourner false.
    output = (counter == 0xff);/*output ? !((counter & 0xff) == 0x00) :*/
}

Sensor::OutputSensor LimitSwitchSensor::getValue()
    c084:	b480      	push	{r7}
    c086:	b087      	sub	sp, #28
    c088:	af00      	add	r7, sp, #0
    c08a:	4602      	mov	r2, r0
    c08c:	6079      	str	r1, [r7, #4]
{
    OutputSensor outputR;
    outputR.type = LIMIT_SWITCH;
    c08e:	f04f 0302 	mov.w	r3, #2	; 0x2
    c092:	7013      	strb	r3, [r2, #0]
    outputR.f = 0;
    c094:	4b05      	ldr	r3, [pc, #20]	(c0ac <_ZN17LimitSwitchSensor8getValueEv+0x28>)
    c096:	6053      	str	r3, [r2, #4]
    outputR.b = this->output;
    c098:	687b      	ldr	r3, [r7, #4]
    c09a:	7b9b      	ldrb	r3, [r3, #14]
    c09c:	7213      	strb	r3, [r2, #8]
    return outputR;
}
    c09e:	4610      	mov	r0, r2
    c0a0:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    c0a4:	46bd      	mov	sp, r7
    c0a6:	bc80      	pop	{r7}
    c0a8:	4770      	bx	lr
    c0aa:	46c0      	nop			(mov r8, r8)
    c0ac:	00000000 	.word	0x00000000

0000c0b0 <_ZN17LimitSwitchSensor7getNameEv>:

LimitSwitchSensor::LimitSwitchName LimitSwitchSensor::getName()
    c0b0:	b480      	push	{r7}
    c0b2:	b083      	sub	sp, #12
    c0b4:	af00      	add	r7, sp, #0
    c0b6:	6078      	str	r0, [r7, #4]
{
    return name;
    c0b8:	687b      	ldr	r3, [r7, #4]
    c0ba:	7b5b      	ldrb	r3, [r3, #13]
}
    c0bc:	4618      	mov	r0, r3
    c0be:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c0c2:	46bd      	mov	sp, r7
    c0c4:	bc80      	pop	{r7}
    c0c6:	4770      	bx	lr

0000c0c8 <_ZN17LimitSwitchSensor11updateValueEv>:

LimitSwitchSensor::~LimitSwitchSensor()
{
}

void  LimitSwitchSensor::updateValue()
    c0c8:	b590      	push	{r4, r7, lr}
    c0ca:	b083      	sub	sp, #12
    c0cc:	af00      	add	r7, sp, #0
    c0ce:	6078      	str	r0, [r7, #4]
{
    counter <<= 1;
    c0d0:	687b      	ldr	r3, [r7, #4]
    c0d2:	7b1b      	ldrb	r3, [r3, #12]
    c0d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c0d8:	b2db      	uxtb	r3, r3
    c0da:	687a      	ldr	r2, [r7, #4]
    c0dc:	7313      	strb	r3, [r2, #12]
    counter |= (GPIO_ReadInputDataBit(group,pin)== Bit_SET);
    c0de:	687b      	ldr	r3, [r7, #4]
    c0e0:	7b1b      	ldrb	r3, [r3, #12]
    c0e2:	461c      	mov	r4, r3
    c0e4:	687b      	ldr	r3, [r7, #4]
    c0e6:	689a      	ldr	r2, [r3, #8]
    c0e8:	687b      	ldr	r3, [r7, #4]
    c0ea:	889b      	ldrh	r3, [r3, #4]
    c0ec:	4610      	mov	r0, r2
    c0ee:	4619      	mov	r1, r3
    c0f0:	f7f5 fbd8 	bl	18a4 <GPIO_ReadInputDataBit>
    c0f4:	4603      	mov	r3, r0
    c0f6:	2b01      	cmp	r3, #1
    c0f8:	bf14      	ite	ne
    c0fa:	2300      	movne	r3, #0
    c0fc:	2301      	moveq	r3, #1
    c0fe:	4622      	mov	r2, r4
    c100:	ea42 0303 	orr.w	r3, r2, r3
    c104:	b2db      	uxtb	r3, r3
    c106:	b2db      	uxtb	r3, r3
    c108:	687a      	ldr	r2, [r7, #4]
    c10a:	7313      	strb	r3, [r2, #12]

    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de retourner un true
    // et que rien a été detecté au moins 8 fois pour retourner false.
    output = (counter == 0xff);/*output ? !((counter & 0xff) == 0x00) :*/
    c10c:	687b      	ldr	r3, [r7, #4]
    c10e:	7b1b      	ldrb	r3, [r3, #12]
    c110:	2bff      	cmp	r3, #255
    c112:	bf14      	ite	ne
    c114:	2300      	movne	r3, #0
    c116:	2301      	moveq	r3, #1
    c118:	b2db      	uxtb	r3, r3
    c11a:	687a      	ldr	r2, [r7, #4]
    c11c:	7393      	strb	r3, [r2, #14]
}
    c11e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c122:	46bd      	mov	sp, r7
    c124:	bd90      	pop	{r4, r7, pc}
    c126:	46c0      	nop			(mov r8, r8)

0000c128 <_ZN17LimitSwitchSensorD0Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LimitSwitchSensor::~LimitSwitchSensor()
    c128:	b580      	push	{r7, lr}
    c12a:	b082      	sub	sp, #8
    c12c:	af00      	add	r7, sp, #0
    c12e:	6078      	str	r0, [r7, #4]
    c130:	687a      	ldr	r2, [r7, #4]
    c132:	4b0a      	ldr	r3, [pc, #40]	(c15c <_ZN17LimitSwitchSensorD0Ev+0x34>)
    c134:	6013      	str	r3, [r2, #0]
{
}
    c136:	687b      	ldr	r3, [r7, #4]
    c138:	4618      	mov	r0, r3
    c13a:	f7f9 fc23 	bl	5984 <_ZN6SensorD2Ev>
    c13e:	f04f 0301 	mov.w	r3, #1	; 0x1
    c142:	b2db      	uxtb	r3, r3
    c144:	2b00      	cmp	r3, #0
    c146:	d002      	beq.n	c14e <_ZN17LimitSwitchSensorD0Ev+0x26>
    c148:	6878      	ldr	r0, [r7, #4]
    c14a:	f002 f917 	bl	e37c <_ZdlPv>
    c14e:	687b      	ldr	r3, [r7, #4]
    c150:	4618      	mov	r0, r3
    c152:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c156:	46bd      	mov	sp, r7
    c158:	bd80      	pop	{r7, pc}
    c15a:	46c0      	nop			(mov r8, r8)
    c15c:	00021a10 	.word	0x00021a10

0000c160 <_ZN17LimitSwitchSensorD1Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LimitSwitchSensor::~LimitSwitchSensor()
    c160:	b580      	push	{r7, lr}
    c162:	b082      	sub	sp, #8
    c164:	af00      	add	r7, sp, #0
    c166:	6078      	str	r0, [r7, #4]
    c168:	687a      	ldr	r2, [r7, #4]
    c16a:	4b0a      	ldr	r3, [pc, #40]	(c194 <_ZN17LimitSwitchSensorD1Ev+0x34>)
    c16c:	6013      	str	r3, [r2, #0]
{
}
    c16e:	687b      	ldr	r3, [r7, #4]
    c170:	4618      	mov	r0, r3
    c172:	f7f9 fc07 	bl	5984 <_ZN6SensorD2Ev>
    c176:	f04f 0300 	mov.w	r3, #0	; 0x0
    c17a:	b2db      	uxtb	r3, r3
    c17c:	2b00      	cmp	r3, #0
    c17e:	d002      	beq.n	c186 <_ZN17LimitSwitchSensorD1Ev+0x26>
    c180:	6878      	ldr	r0, [r7, #4]
    c182:	f002 f8fb 	bl	e37c <_ZdlPv>
    c186:	687b      	ldr	r3, [r7, #4]
    c188:	4618      	mov	r0, r3
    c18a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c18e:	46bd      	mov	sp, r7
    c190:	bd80      	pop	{r7, pc}
    c192:	46c0      	nop			(mov r8, r8)
    c194:	00021a10 	.word	0x00021a10

0000c198 <_ZN17LimitSwitchSensorD2Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LimitSwitchSensor::~LimitSwitchSensor()
    c198:	b580      	push	{r7, lr}
    c19a:	b082      	sub	sp, #8
    c19c:	af00      	add	r7, sp, #0
    c19e:	6078      	str	r0, [r7, #4]
    c1a0:	687a      	ldr	r2, [r7, #4]
    c1a2:	4b0a      	ldr	r3, [pc, #40]	(c1cc <_ZN17LimitSwitchSensorD2Ev+0x34>)
    c1a4:	6013      	str	r3, [r2, #0]
{
}
    c1a6:	687b      	ldr	r3, [r7, #4]
    c1a8:	4618      	mov	r0, r3
    c1aa:	f7f9 fbeb 	bl	5984 <_ZN6SensorD2Ev>
    c1ae:	f04f 0300 	mov.w	r3, #0	; 0x0
    c1b2:	b2db      	uxtb	r3, r3
    c1b4:	2b00      	cmp	r3, #0
    c1b6:	d002      	beq.n	c1be <_ZN17LimitSwitchSensorD2Ev+0x26>
    c1b8:	6878      	ldr	r0, [r7, #4]
    c1ba:	f002 f8df 	bl	e37c <_ZdlPv>
    c1be:	687b      	ldr	r3, [r7, #4]
    c1c0:	4618      	mov	r0, r3
    c1c2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c1c6:	46bd      	mov	sp, r7
    c1c8:	bd80      	pop	{r7, pc}
    c1ca:	46c0      	nop			(mov r8, r8)
    c1cc:	00021a10 	.word	0x00021a10

0000c1d0 <_ZN17LimitSwitchSensorC1ENS_15LimitSwitchNameEtP12GPIO_TypeDef>:
#include "limitSwitchSensor.h"

#ifdef ROBOTHW
LimitSwitchSensor::LimitSwitchSensor(LimitSwitchSensor::LimitSwitchName name, uint16_t pin, GPIO_TypeDef* group)
    c1d0:	b580      	push	{r7, lr}
    c1d2:	b086      	sub	sp, #24
    c1d4:	af00      	add	r7, sp, #0
    c1d6:	60f8      	str	r0, [r7, #12]
    c1d8:	607b      	str	r3, [r7, #4]
    c1da:	460b      	mov	r3, r1
    c1dc:	72fb      	strb	r3, [r7, #11]
    c1de:	4613      	mov	r3, r2
    c1e0:	813b      	strh	r3, [r7, #8]
    c1e2:	68fb      	ldr	r3, [r7, #12]
    c1e4:	4618      	mov	r0, r3
    c1e6:	f7f9 fb7d 	bl	58e4 <_ZN6SensorC2Ev>
    c1ea:	68fa      	ldr	r2, [r7, #12]
    c1ec:	4b13      	ldr	r3, [pc, #76]	(c23c <_ZN17LimitSwitchSensorC1ENS_15LimitSwitchNameEtP12GPIO_TypeDef+0x6c>)
    c1ee:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    c1f0:	68fa      	ldr	r2, [r7, #12]
    c1f2:	7afb      	ldrb	r3, [r7, #11]
    c1f4:	7353      	strb	r3, [r2, #13]
    this->pin = pin;
    c1f6:	68fa      	ldr	r2, [r7, #12]
    c1f8:	893b      	ldrh	r3, [r7, #8]
    c1fa:	8093      	strh	r3, [r2, #4]
    this->group = group;
    c1fc:	68fa      	ldr	r2, [r7, #12]
    c1fe:	687b      	ldr	r3, [r7, #4]
    c200:	6093      	str	r3, [r2, #8]
    counter = 0x0;
    c202:	68fa      	ldr	r2, [r7, #12]
    c204:	f04f 0300 	mov.w	r3, #0	; 0x0
    c208:	7313      	strb	r3, [r2, #12]
    output = false;
    c20a:	68fa      	ldr	r2, [r7, #12]
    c20c:	f04f 0300 	mov.w	r3, #0	; 0x0
    c210:	7393      	strb	r3, [r2, #14]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    c212:	893b      	ldrh	r3, [r7, #8]
    c214:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    c216:	f04f 0304 	mov.w	r3, #4	; 0x4
    c21a:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c21c:	f04f 0303 	mov.w	r3, #3	; 0x3
    c220:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    c222:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c226:	6878      	ldr	r0, [r7, #4]
    c228:	4619      	mov	r1, r3
    c22a:	f7f5 fa41 	bl	16b0 <GPIO_Init>
}
    c22e:	68fb      	ldr	r3, [r7, #12]
    c230:	4618      	mov	r0, r3
    c232:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c236:	46bd      	mov	sp, r7
    c238:	bd80      	pop	{r7, pc}
    c23a:	46c0      	nop			(mov r8, r8)
    c23c:	00021a10 	.word	0x00021a10

0000c240 <_ZN17LimitSwitchSensorC2ENS_15LimitSwitchNameEtP12GPIO_TypeDef>:
#include "limitSwitchSensor.h"

#ifdef ROBOTHW
LimitSwitchSensor::LimitSwitchSensor(LimitSwitchSensor::LimitSwitchName name, uint16_t pin, GPIO_TypeDef* group)
    c240:	b580      	push	{r7, lr}
    c242:	b086      	sub	sp, #24
    c244:	af00      	add	r7, sp, #0
    c246:	60f8      	str	r0, [r7, #12]
    c248:	607b      	str	r3, [r7, #4]
    c24a:	460b      	mov	r3, r1
    c24c:	72fb      	strb	r3, [r7, #11]
    c24e:	4613      	mov	r3, r2
    c250:	813b      	strh	r3, [r7, #8]
    c252:	68fb      	ldr	r3, [r7, #12]
    c254:	4618      	mov	r0, r3
    c256:	f7f9 fb45 	bl	58e4 <_ZN6SensorC2Ev>
    c25a:	68fa      	ldr	r2, [r7, #12]
    c25c:	4b13      	ldr	r3, [pc, #76]	(c2ac <_ZN17LimitSwitchSensorC2ENS_15LimitSwitchNameEtP12GPIO_TypeDef+0x6c>)
    c25e:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    c260:	68fa      	ldr	r2, [r7, #12]
    c262:	7afb      	ldrb	r3, [r7, #11]
    c264:	7353      	strb	r3, [r2, #13]
    this->pin = pin;
    c266:	68fa      	ldr	r2, [r7, #12]
    c268:	893b      	ldrh	r3, [r7, #8]
    c26a:	8093      	strh	r3, [r2, #4]
    this->group = group;
    c26c:	68fa      	ldr	r2, [r7, #12]
    c26e:	687b      	ldr	r3, [r7, #4]
    c270:	6093      	str	r3, [r2, #8]
    counter = 0x0;
    c272:	68fa      	ldr	r2, [r7, #12]
    c274:	f04f 0300 	mov.w	r3, #0	; 0x0
    c278:	7313      	strb	r3, [r2, #12]
    output = false;
    c27a:	68fa      	ldr	r2, [r7, #12]
    c27c:	f04f 0300 	mov.w	r3, #0	; 0x0
    c280:	7393      	strb	r3, [r2, #14]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    c282:	893b      	ldrh	r3, [r7, #8]
    c284:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    c286:	f04f 0304 	mov.w	r3, #4	; 0x4
    c28a:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c28c:	f04f 0303 	mov.w	r3, #3	; 0x3
    c290:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    c292:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c296:	6878      	ldr	r0, [r7, #4]
    c298:	4619      	mov	r1, r3
    c29a:	f7f5 fa09 	bl	16b0 <GPIO_Init>
}
    c29e:	68fb      	ldr	r3, [r7, #12]
    c2a0:	4618      	mov	r0, r3
    c2a2:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c2a6:	46bd      	mov	sp, r7
    c2a8:	bd80      	pop	{r7, pc}
    c2aa:	46c0      	nop			(mov r8, r8)
    c2ac:	00021a10 	.word	0x00021a10

0000c2b0 <_ZN10PWMHandler13setPulseWidthEt>:
{
    setPulseWidth(dutyCycle*timer->getPeriod());
}

// Change la taille de l’impulsion.
void PWMHandler::setPulseWidth(uint16_t pulseWidth)
    c2b0:	b580      	push	{r7, lr}
    c2b2:	b084      	sub	sp, #16
    c2b4:	af00      	add	r7, sp, #0
    c2b6:	6078      	str	r0, [r7, #4]
    c2b8:	460b      	mov	r3, r1
    c2ba:	807b      	strh	r3, [r7, #2]
{
    TIM_TypeDef* TIMx = timer->getTIMx();
    c2bc:	687b      	ldr	r3, [r7, #4]
    c2be:	681b      	ldr	r3, [r3, #0]
    c2c0:	4618      	mov	r0, r3
    c2c2:	f000 fe65 	bl	cf90 <_ZN5Timer7getTIMxEv>
    c2c6:	4603      	mov	r3, r0
    c2c8:	60fb      	str	r3, [r7, #12]
    if(OCx == 1)
    c2ca:	687b      	ldr	r3, [r7, #4]
    c2cc:	791b      	ldrb	r3, [r3, #4]
    c2ce:	2b01      	cmp	r3, #1
    c2d0:	d103      	bne.n	c2da <_ZN10PWMHandler13setPulseWidthEt+0x2a>
        TIMx->CCR1 = pulseWidth;
    c2d2:	68fa      	ldr	r2, [r7, #12]
    c2d4:	887b      	ldrh	r3, [r7, #2]
    c2d6:	8693      	strh	r3, [r2, #52]
    c2d8:	e017      	b.n	c30a <_ZN10PWMHandler13setPulseWidthEt+0x5a>
    else if(OCx == 2)
    c2da:	687b      	ldr	r3, [r7, #4]
    c2dc:	791b      	ldrb	r3, [r3, #4]
    c2de:	2b02      	cmp	r3, #2
    c2e0:	d103      	bne.n	c2ea <_ZN10PWMHandler13setPulseWidthEt+0x3a>
        TIMx->CCR2 = pulseWidth;
    c2e2:	68fa      	ldr	r2, [r7, #12]
    c2e4:	887b      	ldrh	r3, [r7, #2]
    c2e6:	8713      	strh	r3, [r2, #56]
    c2e8:	e00f      	b.n	c30a <_ZN10PWMHandler13setPulseWidthEt+0x5a>
    else if(OCx == 3)
    c2ea:	687b      	ldr	r3, [r7, #4]
    c2ec:	791b      	ldrb	r3, [r3, #4]
    c2ee:	2b03      	cmp	r3, #3
    c2f0:	d103      	bne.n	c2fa <_ZN10PWMHandler13setPulseWidthEt+0x4a>
        TIMx->CCR3 = pulseWidth;
    c2f2:	68fa      	ldr	r2, [r7, #12]
    c2f4:	887b      	ldrh	r3, [r7, #2]
    c2f6:	8793      	strh	r3, [r2, #60]
    c2f8:	e007      	b.n	c30a <_ZN10PWMHandler13setPulseWidthEt+0x5a>
    else if(OCx == 4)
    c2fa:	687b      	ldr	r3, [r7, #4]
    c2fc:	791b      	ldrb	r3, [r3, #4]
    c2fe:	2b04      	cmp	r3, #4
    c300:	d103      	bne.n	c30a <_ZN10PWMHandler13setPulseWidthEt+0x5a>
        TIMx->CCR4 = pulseWidth;
    c302:	68fa      	ldr	r2, [r7, #12]
    c304:	887b      	ldrh	r3, [r7, #2]
    c306:	f8a2 3040 	strh.w	r3, [r2, #64]
}
    c30a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    c30e:	46bd      	mov	sp, r7
    c310:	bd80      	pop	{r7, pc}
    c312:	46c0      	nop			(mov r8, r8)

0000c314 <_ZN10PWMHandlerD1Ev>:
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    TIM_Cmd(TIMx, ENABLE);
}

// Stoppe la génération de PWM et détruit le générateur de PWM
PWMHandler::~PWMHandler()
    c314:	b580      	push	{r7, lr}
    c316:	b082      	sub	sp, #8
    c318:	af00      	add	r7, sp, #0
    c31a:	6078      	str	r0, [r7, #4]
{
    setPulseWidth(0);
    c31c:	6878      	ldr	r0, [r7, #4]
    c31e:	f04f 0100 	mov.w	r1, #0	; 0x0
    c322:	f7ff ffc5 	bl	c2b0 <_ZN10PWMHandler13setPulseWidthEt>
}
    c326:	687b      	ldr	r3, [r7, #4]
    c328:	4618      	mov	r0, r3
    c32a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c32e:	46bd      	mov	sp, r7
    c330:	bd80      	pop	{r7, pc}
    c332:	46c0      	nop			(mov r8, r8)

0000c334 <_ZN10PWMHandlerD2Ev>:
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    TIM_Cmd(TIMx, ENABLE);
}

// Stoppe la génération de PWM et détruit le générateur de PWM
PWMHandler::~PWMHandler()
    c334:	b580      	push	{r7, lr}
    c336:	b082      	sub	sp, #8
    c338:	af00      	add	r7, sp, #0
    c33a:	6078      	str	r0, [r7, #4]
{
    setPulseWidth(0);
    c33c:	6878      	ldr	r0, [r7, #4]
    c33e:	f04f 0100 	mov.w	r1, #0	; 0x0
    c342:	f7ff ffb5 	bl	c2b0 <_ZN10PWMHandler13setPulseWidthEt>
}
    c346:	687b      	ldr	r3, [r7, #4]
    c348:	4618      	mov	r0, r3
    c34a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c34e:	46bd      	mov	sp, r7
    c350:	bd80      	pop	{r7, pc}
    c352:	46c0      	nop			(mov r8, r8)

0000c354 <_ZN10PWMHandler12setDutyCycleEf>:

//Change le rapport cyclique
void PWMHandler::setDutyCycle(float dutyCycle)
    c354:	b580      	push	{r7, lr}
    c356:	b082      	sub	sp, #8
    c358:	af00      	add	r7, sp, #0
    c35a:	6078      	str	r0, [r7, #4]
    c35c:	6039      	str	r1, [r7, #0]
{
    setPulseWidth(dutyCycle*timer->getPeriod());
    c35e:	687b      	ldr	r3, [r7, #4]
    c360:	681b      	ldr	r3, [r3, #0]
    c362:	4618      	mov	r0, r3
    c364:	f000 fe20 	bl	cfa8 <_ZN5Timer9getPeriodEv>
    c368:	4603      	mov	r3, r0
    c36a:	4618      	mov	r0, r3
    c36c:	f00e faea 	bl	1a944 <__aeabi_i2f>
    c370:	4603      	mov	r3, r0
    c372:	4618      	mov	r0, r3
    c374:	6839      	ldr	r1, [r7, #0]
    c376:	f00e fb39 	bl	1a9ec <__aeabi_fmul>
    c37a:	4603      	mov	r3, r0
    c37c:	4618      	mov	r0, r3
    c37e:	f00e fd1f 	bl	1adc0 <__aeabi_f2uiz>
    c382:	4603      	mov	r3, r0
    c384:	b29b      	uxth	r3, r3
    c386:	6878      	ldr	r0, [r7, #4]
    c388:	4619      	mov	r1, r3
    c38a:	f7ff ff91 	bl	c2b0 <_ZN10PWMHandler13setPulseWidthEt>
}
    c38e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c392:	46bd      	mov	sp, r7
    c394:	bd80      	pop	{r7, pc}
    c396:	46c0      	nop			(mov r8, r8)

0000c398 <_ZN10PWMHandlerC1EP5Timerh>:
#include "pwmHandler.h"

// Initialise un nouveau générateur de PWM sur la sortie OCx du timer TIMx.
PWMHandler::PWMHandler(Timer* tim, unsigned char OCx)
    c398:	b580      	push	{r7, lr}
    c39a:	b08a      	sub	sp, #40
    c39c:	af00      	add	r7, sp, #0
    c39e:	60f8      	str	r0, [r7, #12]
    c3a0:	60b9      	str	r1, [r7, #8]
    c3a2:	4613      	mov	r3, r2
    c3a4:	71fb      	strb	r3, [r7, #7]
{
    timer = tim;
    c3a6:	68fa      	ldr	r2, [r7, #12]
    c3a8:	68bb      	ldr	r3, [r7, #8]
    c3aa:	6013      	str	r3, [r2, #0]
    this->OCx = OCx;
    c3ac:	68fa      	ldr	r2, [r7, #12]
    c3ae:	79fb      	ldrb	r3, [r7, #7]
    c3b0:	7113      	strb	r3, [r2, #4]
    TIM_OCInitTypeDef timOCInit;
    timOCInit.TIM_OCMode = TIM_OCMode_PWM1; //TIM_OCMode_PWM2;
    c3b2:	f04f 0360 	mov.w	r3, #96	; 0x60
    c3b6:	82bb      	strh	r3, [r7, #20]
    timOCInit.TIM_OutputState = TIM_OutputState_Enable;
    c3b8:	f04f 0301 	mov.w	r3, #1	; 0x1
    c3bc:	82fb      	strh	r3, [r7, #22]
    timOCInit.TIM_Pulse = 0; // rapport cyclique
    c3be:	f04f 0300 	mov.w	r3, #0	; 0x0
    c3c2:	837b      	strh	r3, [r7, #26]
    timOCInit.TIM_OCPolarity = TIM_OCPolarity_High;
    c3c4:	f04f 0300 	mov.w	r3, #0	; 0x0
    c3c8:	83bb      	strh	r3, [r7, #28]

    TIM_TypeDef* TIMx = tim->getTIMx();
    c3ca:	68b8      	ldr	r0, [r7, #8]
    c3cc:	f000 fde0 	bl	cf90 <_ZN5Timer7getTIMxEv>
    c3d0:	4603      	mov	r3, r0
    c3d2:	627b      	str	r3, [r7, #36]

    switch(OCx)
    c3d4:	79fb      	ldrb	r3, [r7, #7]
    c3d6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    c3da:	2b03      	cmp	r3, #3
    c3dc:	d839      	bhi.n	c452 <_ZN10PWMHandlerC1EP5Timerh+0xba>
    c3de:	a201      	add	r2, pc, #4	(adr r2, c3e4 <_ZN10PWMHandlerC1EP5Timerh+0x4c>)
    c3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c3e4:	0000c3f5 	.word	0x0000c3f5
    c3e8:	0000c40d 	.word	0x0000c40d
    c3ec:	0000c425 	.word	0x0000c425
    c3f0:	0000c43d 	.word	0x0000c43d
    {
        case 1:
            TIM_OC1Init(TIMx, &timOCInit);
    c3f4:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c3f8:	6a78      	ldr	r0, [r7, #36]
    c3fa:	4619      	mov	r1, r3
    c3fc:	f7f6 fa58 	bl	28b0 <TIM_OC1Init>
            TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c400:	6a78      	ldr	r0, [r7, #36]
    c402:	f04f 0108 	mov.w	r1, #8	; 0x8
    c406:	f7f7 f96d 	bl	36e4 <TIM_OC1PreloadConfig>
    c40a:	e022      	b.n	c452 <_ZN10PWMHandlerC1EP5Timerh+0xba>
            break;
        case 2:
            TIM_OC2Init(TIMx, &timOCInit);
    c40c:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c410:	6a78      	ldr	r0, [r7, #36]
    c412:	4619      	mov	r1, r3
    c414:	f7f6 fada 	bl	29cc <TIM_OC2Init>
            TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c418:	6a78      	ldr	r0, [r7, #36]
    c41a:	f04f 0108 	mov.w	r1, #8	; 0x8
    c41e:	f7f7 f97f 	bl	3720 <TIM_OC2PreloadConfig>
    c422:	e016      	b.n	c452 <_ZN10PWMHandlerC1EP5Timerh+0xba>
            break;
        case 3:
            TIM_OC3Init(TIMx, &timOCInit);
    c424:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c428:	6a78      	ldr	r0, [r7, #36]
    c42a:	4619      	mov	r1, r3
    c42c:	f7f6 fb70 	bl	2b10 <TIM_OC3Init>
            TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c430:	6a78      	ldr	r0, [r7, #36]
    c432:	f04f 0108 	mov.w	r1, #8	; 0x8
    c436:	f7f7 f993 	bl	3760 <TIM_OC3PreloadConfig>
    c43a:	e00a      	b.n	c452 <_ZN10PWMHandlerC1EP5Timerh+0xba>
            break;
        case 4:
            TIM_OC4Init(TIMx, &timOCInit);
    c43c:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c440:	6a78      	ldr	r0, [r7, #36]
    c442:	4619      	mov	r1, r3
    c444:	f7f6 fc04 	bl	2c50 <TIM_OC4Init>
            TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c448:	6a78      	ldr	r0, [r7, #36]
    c44a:	f04f 0108 	mov.w	r1, #8	; 0x8
    c44e:	f7f7 f9a5 	bl	379c <TIM_OC4PreloadConfig>
            break;
    }
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    c452:	6a78      	ldr	r0, [r7, #36]
    c454:	f04f 0101 	mov.w	r1, #1	; 0x1
    c458:	f7f7 f8ac 	bl	35b4 <TIM_ARRPreloadConfig>
    TIM_Cmd(TIMx, ENABLE);
    c45c:	6a78      	ldr	r0, [r7, #36]
    c45e:	f04f 0101 	mov.w	r1, #1	; 0x1
    c462:	f7f6 fde1 	bl	3028 <TIM_Cmd>
}
    c466:	68fb      	ldr	r3, [r7, #12]
    c468:	4618      	mov	r0, r3
    c46a:	f107 0728 	add.w	r7, r7, #40	; 0x28
    c46e:	46bd      	mov	sp, r7
    c470:	bd80      	pop	{r7, pc}
    c472:	46c0      	nop			(mov r8, r8)

0000c474 <_ZN10PWMHandlerC2EP5Timerh>:
#include "pwmHandler.h"

// Initialise un nouveau générateur de PWM sur la sortie OCx du timer TIMx.
PWMHandler::PWMHandler(Timer* tim, unsigned char OCx)
    c474:	b580      	push	{r7, lr}
    c476:	b08a      	sub	sp, #40
    c478:	af00      	add	r7, sp, #0
    c47a:	60f8      	str	r0, [r7, #12]
    c47c:	60b9      	str	r1, [r7, #8]
    c47e:	4613      	mov	r3, r2
    c480:	71fb      	strb	r3, [r7, #7]
{
    timer = tim;
    c482:	68fa      	ldr	r2, [r7, #12]
    c484:	68bb      	ldr	r3, [r7, #8]
    c486:	6013      	str	r3, [r2, #0]
    this->OCx = OCx;
    c488:	68fa      	ldr	r2, [r7, #12]
    c48a:	79fb      	ldrb	r3, [r7, #7]
    c48c:	7113      	strb	r3, [r2, #4]
    TIM_OCInitTypeDef timOCInit;
    timOCInit.TIM_OCMode = TIM_OCMode_PWM1; //TIM_OCMode_PWM2;
    c48e:	f04f 0360 	mov.w	r3, #96	; 0x60
    c492:	82bb      	strh	r3, [r7, #20]
    timOCInit.TIM_OutputState = TIM_OutputState_Enable;
    c494:	f04f 0301 	mov.w	r3, #1	; 0x1
    c498:	82fb      	strh	r3, [r7, #22]
    timOCInit.TIM_Pulse = 0; // rapport cyclique
    c49a:	f04f 0300 	mov.w	r3, #0	; 0x0
    c49e:	837b      	strh	r3, [r7, #26]
    timOCInit.TIM_OCPolarity = TIM_OCPolarity_High;
    c4a0:	f04f 0300 	mov.w	r3, #0	; 0x0
    c4a4:	83bb      	strh	r3, [r7, #28]

    TIM_TypeDef* TIMx = tim->getTIMx();
    c4a6:	68b8      	ldr	r0, [r7, #8]
    c4a8:	f000 fd72 	bl	cf90 <_ZN5Timer7getTIMxEv>
    c4ac:	4603      	mov	r3, r0
    c4ae:	627b      	str	r3, [r7, #36]

    switch(OCx)
    c4b0:	79fb      	ldrb	r3, [r7, #7]
    c4b2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    c4b6:	2b03      	cmp	r3, #3
    c4b8:	d839      	bhi.n	c52e <_ZN10PWMHandlerC2EP5Timerh+0xba>
    c4ba:	a201      	add	r2, pc, #4	(adr r2, c4c0 <_ZN10PWMHandlerC2EP5Timerh+0x4c>)
    c4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c4c0:	0000c4d1 	.word	0x0000c4d1
    c4c4:	0000c4e9 	.word	0x0000c4e9
    c4c8:	0000c501 	.word	0x0000c501
    c4cc:	0000c519 	.word	0x0000c519
    {
        case 1:
            TIM_OC1Init(TIMx, &timOCInit);
    c4d0:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c4d4:	6a78      	ldr	r0, [r7, #36]
    c4d6:	4619      	mov	r1, r3
    c4d8:	f7f6 f9ea 	bl	28b0 <TIM_OC1Init>
            TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c4dc:	6a78      	ldr	r0, [r7, #36]
    c4de:	f04f 0108 	mov.w	r1, #8	; 0x8
    c4e2:	f7f7 f8ff 	bl	36e4 <TIM_OC1PreloadConfig>
    c4e6:	e022      	b.n	c52e <_ZN10PWMHandlerC2EP5Timerh+0xba>
            break;
        case 2:
            TIM_OC2Init(TIMx, &timOCInit);
    c4e8:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c4ec:	6a78      	ldr	r0, [r7, #36]
    c4ee:	4619      	mov	r1, r3
    c4f0:	f7f6 fa6c 	bl	29cc <TIM_OC2Init>
            TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c4f4:	6a78      	ldr	r0, [r7, #36]
    c4f6:	f04f 0108 	mov.w	r1, #8	; 0x8
    c4fa:	f7f7 f911 	bl	3720 <TIM_OC2PreloadConfig>
    c4fe:	e016      	b.n	c52e <_ZN10PWMHandlerC2EP5Timerh+0xba>
            break;
        case 3:
            TIM_OC3Init(TIMx, &timOCInit);
    c500:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c504:	6a78      	ldr	r0, [r7, #36]
    c506:	4619      	mov	r1, r3
    c508:	f7f6 fb02 	bl	2b10 <TIM_OC3Init>
            TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c50c:	6a78      	ldr	r0, [r7, #36]
    c50e:	f04f 0108 	mov.w	r1, #8	; 0x8
    c512:	f7f7 f925 	bl	3760 <TIM_OC3PreloadConfig>
    c516:	e00a      	b.n	c52e <_ZN10PWMHandlerC2EP5Timerh+0xba>
            break;
        case 4:
            TIM_OC4Init(TIMx, &timOCInit);
    c518:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c51c:	6a78      	ldr	r0, [r7, #36]
    c51e:	4619      	mov	r1, r3
    c520:	f7f6 fb96 	bl	2c50 <TIM_OC4Init>
            TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c524:	6a78      	ldr	r0, [r7, #36]
    c526:	f04f 0108 	mov.w	r1, #8	; 0x8
    c52a:	f7f7 f937 	bl	379c <TIM_OC4PreloadConfig>
            break;
    }
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    c52e:	6a78      	ldr	r0, [r7, #36]
    c530:	f04f 0101 	mov.w	r1, #1	; 0x1
    c534:	f7f7 f83e 	bl	35b4 <TIM_ARRPreloadConfig>
    TIM_Cmd(TIMx, ENABLE);
    c538:	6a78      	ldr	r0, [r7, #36]
    c53a:	f04f 0101 	mov.w	r1, #1	; 0x1
    c53e:	f7f6 fd73 	bl	3028 <TIM_Cmd>
}
    c542:	68fb      	ldr	r3, [r7, #12]
    c544:	4618      	mov	r0, r3
    c546:	f107 0728 	add.w	r7, r7, #40	; 0x28
    c54a:	46bd      	mov	sp, r7
    c54c:	bd80      	pop	{r7, pc}
    c54e:	46c0      	nop			(mov r8, r8)

0000c550 <_ZN22QuadratureCoderHandler12getTickValueEv>:

    // Met à disposition le timer
    TIM_Cmd(coder_tim_port, ENABLE);
}

int16_t QuadratureCoderHandler::getTickValue()
    c550:	b580      	push	{r7, lr}
    c552:	b084      	sub	sp, #16
    c554:	af00      	add	r7, sp, #0
    c556:	6078      	str	r0, [r7, #4]
{
    // On enregistre le nbr de tick depuis la dernière remise à zero
    int16_t tick = TIM_GetCounter(coder_tim_port);
    c558:	687b      	ldr	r3, [r7, #4]
    c55a:	681b      	ldr	r3, [r3, #0]
    c55c:	4618      	mov	r0, r3
    c55e:	f7f7 fe0f 	bl	4180 <TIM_GetCounter>
    c562:	4603      	mov	r3, r0
    c564:	81fb      	strh	r3, [r7, #14]

    // On remet à zero
    TIM_SetCounter(coder_tim_port, 0);
    c566:	687b      	ldr	r3, [r7, #4]
    c568:	681b      	ldr	r3, [r3, #0]
    c56a:	4618      	mov	r0, r3
    c56c:	f04f 0100 	mov.w	r1, #0	; 0x0
    c570:	f7f7 fccc 	bl	3f0c <TIM_SetCounter>

    // On retourne ces ticks
    return tick;
    c574:	89fb      	ldrh	r3, [r7, #14]
    c576:	b21b      	sxth	r3, r3
}
    c578:	4618      	mov	r0, r3
    c57a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    c57e:	46bd      	mov	sp, r7
    c580:	bd80      	pop	{r7, pc}
    c582:	46c0      	nop			(mov r8, r8)

0000c584 <_ZN22QuadratureCoderHandlerC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>:
#include "timerHandler.h"

// GPIO_ch1 et pin_Ch1 : pour la pin du channel 1 du timer
// GPIO_ch2 et pin_Ch2 : pour la pin du channel 2 du timer
QuadratureCoderHandler::QuadratureCoderHandler(TIM_TypeDef* TIMx, GPIO_TypeDef* GPIO_ch1, uint16_t pin_Ch1, GPIO_TypeDef* GPIO_ch2,
                                               uint16_t pin_Ch2, uint8_t TIMx_AF, uint8_t pinSource_Ch1, uint8_t pinSource_Ch2)
    c584:	b580      	push	{r7, lr}
    c586:	b088      	sub	sp, #32
    c588:	af00      	add	r7, sp, #0
    c58a:	60f8      	str	r0, [r7, #12]
    c58c:	60b9      	str	r1, [r7, #8]
    c58e:	607a      	str	r2, [r7, #4]
    c590:	807b      	strh	r3, [r7, #2]
{
    this->coder_tim_port = TIMx;
    c592:	68fa      	ldr	r2, [r7, #12]
    c594:	68bb      	ldr	r3, [r7, #8]
    c596:	6013      	str	r3, [r2, #0]

    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    // Enable timer clock
    Timer::enableTimerClock(TIMx);
    c598:	68b8      	ldr	r0, [r7, #8]
    c59a:	f000 fd11 	bl	cfc0 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    c59e:	f04f 0348 	mov.w	r3, #72	; 0x48
    c5a2:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    c5a4:	f04f 0301 	mov.w	r3, #1	; 0x1
    c5a8:	753b      	strb	r3, [r7, #20]
    #endif

    GPIO_InitStructure.GPIO_Pin     = pin_Ch1;
    c5aa:	887b      	ldrh	r3, [r7, #2]
    c5ac:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch1, &GPIO_InitStructure);
    c5ae:	f107 0312 	add.w	r3, r7, #18	; 0x12
    c5b2:	6878      	ldr	r0, [r7, #4]
    c5b4:	4619      	mov	r1, r3
    c5b6:	f7f5 f87b 	bl	16b0 <GPIO_Init>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    c5ba:	f04f 0348 	mov.w	r3, #72	; 0x48
    c5be:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    c5c0:	f04f 0301 	mov.w	r3, #1	; 0x1
    c5c4:	753b      	strb	r3, [r7, #20]
    #endif
    GPIO_InitStructure.GPIO_Pin     = pin_Ch2;
    c5c6:	8dbb      	ldrh	r3, [r7, #44]
    c5c8:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch2, &GPIO_InitStructure);
    c5ca:	f107 0312 	add.w	r3, r7, #18	; 0x12
    c5ce:	6ab8      	ldr	r0, [r7, #40]
    c5d0:	4619      	mov	r1, r3
    c5d2:	f7f5 f86d 	bl	16b0 <GPIO_Init>

    // Time Base configuration
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    c5d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    c5da:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    c5dc:	f04f 0300 	mov.w	r3, #0	; 0x0
    c5e0:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    c5e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c5e6:	837b      	strh	r3, [r7, #26]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    c5e8:	f04f 0300 	mov.w	r3, #0	; 0x0
    c5ec:	83bb      	strh	r3, [r7, #28]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    c5ee:	f04f 0300 	mov.w	r3, #0	; 0x0
    c5f2:	77bb      	strb	r3, [r7, #30]
    TIM_TimeBaseInit(coder_tim_port, &TIM_TimeBaseStructure);
    c5f4:	68fb      	ldr	r3, [r7, #12]
    c5f6:	681b      	ldr	r3, [r3, #0]
    c5f8:	f107 0216 	add.w	r2, r7, #22	; 0x16
    c5fc:	4618      	mov	r0, r3
    c5fe:	4611      	mov	r1, r2
    c600:	f7f6 f91a 	bl	2838 <TIM_TimeBaseInit>

    // Encoder Interface Configuration
    TIM_EncoderInterfaceConfig(coder_tim_port,
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    c604:	68fb      	ldr	r3, [r7, #12]
    c606:	681b      	ldr	r3, [r3, #0]
    c608:	4618      	mov	r0, r3
    c60a:	f04f 0103 	mov.w	r1, #3	; 0x3
    c60e:	f04f 0200 	mov.w	r2, #0	; 0x0
    c612:	f04f 0300 	mov.w	r3, #0	; 0x0
    c616:	f7f6 ff01 	bl	341c <TIM_EncoderInterfaceConfig>

    // Met à disposition le timer
    TIM_Cmd(coder_tim_port, ENABLE);
    c61a:	68fb      	ldr	r3, [r7, #12]
    c61c:	681b      	ldr	r3, [r3, #0]
    c61e:	4618      	mov	r0, r3
    c620:	f04f 0101 	mov.w	r1, #1	; 0x1
    c624:	f7f6 fd00 	bl	3028 <TIM_Cmd>
}
    c628:	68fb      	ldr	r3, [r7, #12]
    c62a:	4618      	mov	r0, r3
    c62c:	f107 0720 	add.w	r7, r7, #32	; 0x20
    c630:	46bd      	mov	sp, r7
    c632:	bd80      	pop	{r7, pc}

0000c634 <_ZN22QuadratureCoderHandlerC2EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>:
#include "timerHandler.h"

// GPIO_ch1 et pin_Ch1 : pour la pin du channel 1 du timer
// GPIO_ch2 et pin_Ch2 : pour la pin du channel 2 du timer
QuadratureCoderHandler::QuadratureCoderHandler(TIM_TypeDef* TIMx, GPIO_TypeDef* GPIO_ch1, uint16_t pin_Ch1, GPIO_TypeDef* GPIO_ch2,
                                               uint16_t pin_Ch2, uint8_t TIMx_AF, uint8_t pinSource_Ch1, uint8_t pinSource_Ch2)
    c634:	b580      	push	{r7, lr}
    c636:	b088      	sub	sp, #32
    c638:	af00      	add	r7, sp, #0
    c63a:	60f8      	str	r0, [r7, #12]
    c63c:	60b9      	str	r1, [r7, #8]
    c63e:	607a      	str	r2, [r7, #4]
    c640:	807b      	strh	r3, [r7, #2]
{
    this->coder_tim_port = TIMx;
    c642:	68fa      	ldr	r2, [r7, #12]
    c644:	68bb      	ldr	r3, [r7, #8]
    c646:	6013      	str	r3, [r2, #0]

    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    // Enable timer clock
    Timer::enableTimerClock(TIMx);
    c648:	68b8      	ldr	r0, [r7, #8]
    c64a:	f000 fcb9 	bl	cfc0 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    c64e:	f04f 0348 	mov.w	r3, #72	; 0x48
    c652:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    c654:	f04f 0301 	mov.w	r3, #1	; 0x1
    c658:	753b      	strb	r3, [r7, #20]
    #endif

    GPIO_InitStructure.GPIO_Pin     = pin_Ch1;
    c65a:	887b      	ldrh	r3, [r7, #2]
    c65c:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch1, &GPIO_InitStructure);
    c65e:	f107 0312 	add.w	r3, r7, #18	; 0x12
    c662:	6878      	ldr	r0, [r7, #4]
    c664:	4619      	mov	r1, r3
    c666:	f7f5 f823 	bl	16b0 <GPIO_Init>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    c66a:	f04f 0348 	mov.w	r3, #72	; 0x48
    c66e:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    c670:	f04f 0301 	mov.w	r3, #1	; 0x1
    c674:	753b      	strb	r3, [r7, #20]
    #endif
    GPIO_InitStructure.GPIO_Pin     = pin_Ch2;
    c676:	8dbb      	ldrh	r3, [r7, #44]
    c678:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch2, &GPIO_InitStructure);
    c67a:	f107 0312 	add.w	r3, r7, #18	; 0x12
    c67e:	6ab8      	ldr	r0, [r7, #40]
    c680:	4619      	mov	r1, r3
    c682:	f7f5 f815 	bl	16b0 <GPIO_Init>

    // Time Base configuration
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    c686:	f04f 0300 	mov.w	r3, #0	; 0x0
    c68a:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    c68c:	f04f 0300 	mov.w	r3, #0	; 0x0
    c690:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    c692:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c696:	837b      	strh	r3, [r7, #26]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    c698:	f04f 0300 	mov.w	r3, #0	; 0x0
    c69c:	83bb      	strh	r3, [r7, #28]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    c69e:	f04f 0300 	mov.w	r3, #0	; 0x0
    c6a2:	77bb      	strb	r3, [r7, #30]
    TIM_TimeBaseInit(coder_tim_port, &TIM_TimeBaseStructure);
    c6a4:	68fb      	ldr	r3, [r7, #12]
    c6a6:	681b      	ldr	r3, [r3, #0]
    c6a8:	f107 0216 	add.w	r2, r7, #22	; 0x16
    c6ac:	4618      	mov	r0, r3
    c6ae:	4611      	mov	r1, r2
    c6b0:	f7f6 f8c2 	bl	2838 <TIM_TimeBaseInit>

    // Encoder Interface Configuration
    TIM_EncoderInterfaceConfig(coder_tim_port,
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    c6b4:	68fb      	ldr	r3, [r7, #12]
    c6b6:	681b      	ldr	r3, [r3, #0]
    c6b8:	4618      	mov	r0, r3
    c6ba:	f04f 0103 	mov.w	r1, #3	; 0x3
    c6be:	f04f 0200 	mov.w	r2, #0	; 0x0
    c6c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    c6c6:	f7f6 fea9 	bl	341c <TIM_EncoderInterfaceConfig>

    // Met à disposition le timer
    TIM_Cmd(coder_tim_port, ENABLE);
    c6ca:	68fb      	ldr	r3, [r7, #12]
    c6cc:	681b      	ldr	r3, [r3, #0]
    c6ce:	4618      	mov	r0, r3
    c6d0:	f04f 0101 	mov.w	r1, #1	; 0x1
    c6d4:	f7f6 fca8 	bl	3028 <TIM_Cmd>
}
    c6d8:	68fb      	ldr	r3, [r7, #12]
    c6da:	4618      	mov	r0, r3
    c6dc:	f107 0720 	add.w	r7, r7, #32	; 0x20
    c6e0:	46bd      	mov	sp, r7
    c6e2:	bd80      	pop	{r7, pc}
    c6e4:	0000      	lsls	r0, r0, #0
	...

0000c6e8 <_ZN6Remote13dataAvailableEv>:
    }
    for(int i=0; i<10; i++)
        Remote::getSingleton()->sendData(' ');
}

bool Remote::dataAvailable()
    c6e8:	b480      	push	{r7}
    c6ea:	b083      	sub	sp, #12
    c6ec:	af00      	add	r7, sp, #0
    c6ee:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    return REMOTE_USART_INDEX->SR & USART_FLAG_RXNE;
    c6f0:	4b07      	ldr	r3, [pc, #28]	(c710 <_ZN6Remote13dataAvailableEv+0x28>)
    c6f2:	881b      	ldrh	r3, [r3, #0]
    c6f4:	b29b      	uxth	r3, r3
    c6f6:	f003 0320 	and.w	r3, r3, #32	; 0x20
    c6fa:	2b00      	cmp	r3, #0
    c6fc:	bf0c      	ite	eq
    c6fe:	2300      	moveq	r3, #0
    c700:	2301      	movne	r3, #1
    c702:	b2db      	uxtb	r3, r3
#else
    return false;
#endif
}
    c704:	4618      	mov	r0, r3
    c706:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c70a:	46bd      	mov	sp, r7
    c70c:	bc80      	pop	{r7}
    c70e:	4770      	bx	lr
    c710:	40013800 	.word	0x40013800

0000c714 <_ZN6Remote11receiveDataEv>:

int Remote::receiveData()
    c714:	b480      	push	{r7}
    c716:	b083      	sub	sp, #12
    c718:	af00      	add	r7, sp, #0
    c71a:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    while (!(REMOTE_USART_INDEX->SR & USART_FLAG_RXNE));
    c71c:	4b0c      	ldr	r3, [pc, #48]	(c750 <_ZN6Remote11receiveDataEv+0x3c>)
    c71e:	881b      	ldrh	r3, [r3, #0]
    c720:	b29b      	uxth	r3, r3
    c722:	f003 0320 	and.w	r3, r3, #32	; 0x20
    c726:	2b00      	cmp	r3, #0
    c728:	bf14      	ite	ne
    c72a:	2300      	movne	r3, #0
    c72c:	2301      	moveq	r3, #1
    c72e:	b2db      	uxtb	r3, r3
    c730:	2b00      	cmp	r3, #0
    c732:	d1f3      	bne.n	c71c <_ZN6Remote11receiveDataEv+0x8>

    return ((int)(REMOTE_USART_INDEX->DR & 0x1FF));
    c734:	4b06      	ldr	r3, [pc, #24]	(c750 <_ZN6Remote11receiveDataEv+0x3c>)
    c736:	889b      	ldrh	r3, [r3, #4]
    c738:	b29b      	uxth	r3, r3
    c73a:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    c73e:	ea4f 53d3 	mov.w	r3, r3, lsr #23
#else
    return 0;
#endif
}
    c742:	4618      	mov	r0, r3
    c744:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c748:	46bd      	mov	sp, r7
    c74a:	bc80      	pop	{r7}
    c74c:	4770      	bx	lr
    c74e:	46c0      	nop			(mov r8, r8)
    c750:	40013800 	.word	0x40013800

0000c754 <_ZN6Remote12isRemoteModeEv>:
        if (order>=51 and order<=101)
            angSpeed = -((float)(order-75)) / 25. * ANGULAR_REMOTE_SPEED_LIMIT;
    }
}

bool Remote::isRemoteMode()
    c754:	b480      	push	{r7}
    c756:	b083      	sub	sp, #12
    c758:	af00      	add	r7, sp, #0
    c75a:	6078      	str	r0, [r7, #4]
{
    return remoteMode;
    c75c:	687b      	ldr	r3, [r7, #4]
    c75e:	791b      	ldrb	r3, [r3, #4]
}
    c760:	4618      	mov	r0, r3
    c762:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c766:	46bd      	mov	sp, r7
    c768:	bc80      	pop	{r7}
    c76a:	4770      	bx	lr

0000c76c <_ZN6Remote10getLeftPWMEv>:

float Remote::getLeftPWM()
    c76c:	b480      	push	{r7}
    c76e:	b083      	sub	sp, #12
    c770:	af00      	add	r7, sp, #0
    c772:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    c774:	687b      	ldr	r3, [r7, #4]
    c776:	68db      	ldr	r3, [r3, #12]
#if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
    return linSpeed + angSpeed;
#else
    return linSpeed - angSpeed;
#endif
}
    c778:	4618      	mov	r0, r3
    c77a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c77e:	46bd      	mov	sp, r7
    c780:	bc80      	pop	{r7}
    c782:	4770      	bx	lr

0000c784 <_ZN6Remote11getRightPWMEv>:

float Remote::getRightPWM()
    c784:	b480      	push	{r7}
    c786:	b083      	sub	sp, #12
    c788:	af00      	add	r7, sp, #0
    c78a:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    c78c:	687b      	ldr	r3, [r7, #4]
    c78e:	691b      	ldr	r3, [r3, #16]
#if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
    return linSpeed - angSpeed;
#else
    return linSpeed + angSpeed;
#endif
}
    c790:	4618      	mov	r0, r3
    c792:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c796:	46bd      	mov	sp, r7
    c798:	bc80      	pop	{r7}
    c79a:	4770      	bx	lr

0000c79c <_ZN6Remote8sendDataEi>:

    USART_Cmd(REMOTE_USART_INDEX, ENABLE);
#endif
}

void Remote::sendData(int data)
    c79c:	b580      	push	{r7, lr}
    c79e:	b082      	sub	sp, #8
    c7a0:	af00      	add	r7, sp, #0
    c7a2:	6078      	str	r0, [r7, #4]
    c7a4:	6039      	str	r1, [r7, #0]
{
#ifdef ROBOTHW
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(REMOTE_USART_INDEX, USART_FLAG_TXE) == RESET);
    c7a6:	480b      	ldr	r0, [pc, #44]	(c7d4 <_ZN6Remote8sendDataEi+0x38>)
    c7a8:	f04f 0180 	mov.w	r1, #128	; 0x80
    c7ac:	f7f8 fade 	bl	4d6c <USART_GetFlagStatus>
    c7b0:	4603      	mov	r3, r0
    c7b2:	2b00      	cmp	r3, #0
    c7b4:	bf14      	ite	ne
    c7b6:	2300      	movne	r3, #0
    c7b8:	2301      	moveq	r3, #1
    c7ba:	b2db      	uxtb	r3, r3
    c7bc:	2b00      	cmp	r3, #0
    c7be:	d1f2      	bne.n	c7a6 <_ZN6Remote8sendDataEi+0xa>
    USART_SendData(REMOTE_USART_INDEX, (u16) data);
    c7c0:	683b      	ldr	r3, [r7, #0]
    c7c2:	b29b      	uxth	r3, r3
    c7c4:	4803      	ldr	r0, [pc, #12]	(c7d4 <_ZN6Remote8sendDataEi+0x38>)
    c7c6:	4619      	mov	r1, r3
    c7c8:	f7f8 f99c 	bl	4b04 <USART_SendData>
#endif
}
    c7cc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c7d0:	46bd      	mov	sp, r7
    c7d2:	bd80      	pop	{r7, pc}
    c7d4:	40013800 	.word	0x40013800

0000c7d8 <_ZN6Remote8initUARTEi>:

#endif

}

void Remote::initUART(int baudRate)
    c7d8:	b580      	push	{r7, lr}
    c7da:	b086      	sub	sp, #24
    c7dc:	af00      	add	r7, sp, #0
    c7de:	6078      	str	r0, [r7, #4]
    c7e0:	6039      	str	r1, [r7, #0]
{
#ifdef ROBOTHW
    USART_InitTypeDef USART_InitStructure;

    USART_InitStructure.USART_BaudRate = baudRate;
    c7e2:	683b      	ldr	r3, [r7, #0]
    c7e4:	60bb      	str	r3, [r7, #8]

    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    c7e6:	f04f 0300 	mov.w	r3, #0	; 0x0
    c7ea:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    c7ec:	f04f 0300 	mov.w	r3, #0	; 0x0
    c7f0:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    c7f2:	f04f 0300 	mov.w	r3, #0	; 0x0
    c7f6:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    c7f8:	f04f 0300 	mov.w	r3, #0	; 0x0
    c7fc:	82bb      	strh	r3, [r7, #20]

    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    c7fe:	f04f 030c 	mov.w	r3, #12	; 0xc
    c802:	827b      	strh	r3, [r7, #18]

    USART_Init(REMOTE_USART_INDEX, &USART_InitStructure);
    c804:	f107 0308 	add.w	r3, r7, #8	; 0x8
    c808:	4806      	ldr	r0, [pc, #24]	(c824 <_ZN6Remote8initUARTEi+0x4c>)
    c80a:	4619      	mov	r1, r3
    c80c:	f7f7 ff08 	bl	4620 <USART_Init>

    USART_Cmd(REMOTE_USART_INDEX, ENABLE);
    c810:	4804      	ldr	r0, [pc, #16]	(c824 <_ZN6Remote8initUARTEi+0x4c>)
    c812:	f04f 0101 	mov.w	r1, #1	; 0x1
    c816:	f7f8 f823 	bl	4860 <USART_Cmd>
#endif
}
    c81a:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c81e:	46bd      	mov	sp, r7
    c820:	bd80      	pop	{r7, pc}
    c822:	46c0      	nop			(mov r8, r8)
    c824:	40013800 	.word	0x40013800

0000c828 <_ZN6Remote22initClocksAndPortsGPIOEv>:

    linSpeed = 0.;
    angSpeed = 0.;
}

void Remote::initClocksAndPortsGPIO()
    c828:	b580      	push	{r7, lr}
    c82a:	b084      	sub	sp, #16
    c82c:	af00      	add	r7, sp, #0
    c82e:	6078      	str	r0, [r7, #4]
//    GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
//    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
#endif
#ifdef STM32F10X_CL // Pin pour le stm32 h107
    //RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
    c830:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    c834:	f04f 0101 	mov.w	r1, #1	; 0x1
    c838:	f7f5 fe06 	bl	2448 <RCC_APB2PeriphClockCmd>

    GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE);
    c83c:	f04f 0004 	mov.w	r0, #4	; 0x4
    c840:	f04f 0101 	mov.w	r1, #1	; 0x1
    c844:	f7f5 f924 	bl	1a90 <GPIO_PinRemapConfig>

    GPIO_InitTypeDef GPIO_InitStructure;
    // port D pin 8 TX : un servo numérique en Ecriture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
    c848:	f04f 0340 	mov.w	r3, #64	; 0x40
    c84c:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    c84e:	f04f 0318 	mov.w	r3, #24	; 0x18
    c852:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    c854:	f04f 0303 	mov.w	r3, #3	; 0x3
    c858:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    c85a:	f107 030c 	add.w	r3, r7, #12	; 0xc
    c85e:	480b      	ldr	r0, [pc, #44]	(c88c <_ZN6Remote22initClocksAndPortsGPIOEv+0x64>)
    c860:	4619      	mov	r1, r3
    c862:	f7f4 ff25 	bl	16b0 <GPIO_Init>

    // port D pin 9 RX : un servo numérique en Lecture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
    c866:	f04f 0380 	mov.w	r3, #128	; 0x80
    c86a:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    c86c:	f04f 0304 	mov.w	r3, #4	; 0x4
    c870:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    c872:	f04f 0303 	mov.w	r3, #3	; 0x3
    c876:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    c878:	f107 030c 	add.w	r3, r7, #12	; 0xc
    c87c:	4803      	ldr	r0, [pc, #12]	(c88c <_ZN6Remote22initClocksAndPortsGPIOEv+0x64>)
    c87e:	4619      	mov	r1, r3
    c880:	f7f4 ff16 	bl	16b0 <GPIO_Init>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3);*/     // Rx
#endif

#endif

}
    c884:	f107 0710 	add.w	r7, r7, #16	; 0x10
    c888:	46bd      	mov	sp, r7
    c88a:	bd80      	pop	{r7, pc}
    c88c:	40010c00 	.word	0x40010c00

0000c890 <_ZN6RemoteC1Ev>:

    return singleton;
}


Remote::Remote()
    c890:	b580      	push	{r7, lr}
    c892:	b082      	sub	sp, #8
    c894:	af00      	add	r7, sp, #0
    c896:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    initClocksAndPortsGPIO();
    c898:	6878      	ldr	r0, [r7, #4]
    c89a:	f7ff ffc5 	bl	c828 <_ZN6Remote22initClocksAndPortsGPIOEv>
    initUART(USART_BAUDRATE);
    c89e:	6878      	ldr	r0, [r7, #4]
    c8a0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    c8a4:	f7ff ff98 	bl	c7d8 <_ZN6Remote8initUARTEi>
#endif

    remoteMode = false;
    c8a8:	687a      	ldr	r2, [r7, #4]
    c8aa:	f04f 0300 	mov.w	r3, #0	; 0x0
    c8ae:	7113      	strb	r3, [r2, #4]

    isOpenContainer = false;
    c8b0:	687a      	ldr	r2, [r7, #4]
    c8b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    c8b6:	7153      	strb	r3, [r2, #5]
    isOpenLeftArm = false;
    c8b8:	687a      	ldr	r2, [r7, #4]
    c8ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    c8be:	7193      	strb	r3, [r2, #6]
    isOpenRightArm = false;
    c8c0:	687a      	ldr	r2, [r7, #4]
    c8c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    c8c6:	71d3      	strb	r3, [r2, #7]
    timerLances = -1;
    c8c8:	687a      	ldr	r2, [r7, #4]
    c8ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c8ce:	6013      	str	r3, [r2, #0]

    brakInv = false;
    c8d0:	687a      	ldr	r2, [r7, #4]
    c8d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    c8d6:	7213      	strb	r3, [r2, #8]
    brakOut = false;
    c8d8:	687a      	ldr	r2, [r7, #4]
    c8da:	f04f 0300 	mov.w	r3, #0	; 0x0
    c8de:	7253      	strb	r3, [r2, #9]

    linSpeed = 0.;
    c8e0:	687a      	ldr	r2, [r7, #4]
    c8e2:	4b05      	ldr	r3, [pc, #20]	(c8f8 <_ZN6RemoteC1Ev+0x68>)
    c8e4:	60d3      	str	r3, [r2, #12]
    angSpeed = 0.;
    c8e6:	687a      	ldr	r2, [r7, #4]
    c8e8:	4b03      	ldr	r3, [pc, #12]	(c8f8 <_ZN6RemoteC1Ev+0x68>)
    c8ea:	6113      	str	r3, [r2, #16]
}
    c8ec:	687b      	ldr	r3, [r7, #4]
    c8ee:	4618      	mov	r0, r3
    c8f0:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c8f4:	46bd      	mov	sp, r7
    c8f6:	bd80      	pop	{r7, pc}
    c8f8:	00000000 	.word	0x00000000

0000c8fc <_ZN6RemoteC2Ev>:

    return singleton;
}


Remote::Remote()
    c8fc:	b580      	push	{r7, lr}
    c8fe:	b082      	sub	sp, #8
    c900:	af00      	add	r7, sp, #0
    c902:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    initClocksAndPortsGPIO();
    c904:	6878      	ldr	r0, [r7, #4]
    c906:	f7ff ff8f 	bl	c828 <_ZN6Remote22initClocksAndPortsGPIOEv>
    initUART(USART_BAUDRATE);
    c90a:	6878      	ldr	r0, [r7, #4]
    c90c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    c910:	f7ff ff62 	bl	c7d8 <_ZN6Remote8initUARTEi>
#endif

    remoteMode = false;
    c914:	687a      	ldr	r2, [r7, #4]
    c916:	f04f 0300 	mov.w	r3, #0	; 0x0
    c91a:	7113      	strb	r3, [r2, #4]

    isOpenContainer = false;
    c91c:	687a      	ldr	r2, [r7, #4]
    c91e:	f04f 0300 	mov.w	r3, #0	; 0x0
    c922:	7153      	strb	r3, [r2, #5]
    isOpenLeftArm = false;
    c924:	687a      	ldr	r2, [r7, #4]
    c926:	f04f 0300 	mov.w	r3, #0	; 0x0
    c92a:	7193      	strb	r3, [r2, #6]
    isOpenRightArm = false;
    c92c:	687a      	ldr	r2, [r7, #4]
    c92e:	f04f 0300 	mov.w	r3, #0	; 0x0
    c932:	71d3      	strb	r3, [r2, #7]
    timerLances = -1;
    c934:	687a      	ldr	r2, [r7, #4]
    c936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c93a:	6013      	str	r3, [r2, #0]

    brakInv = false;
    c93c:	687a      	ldr	r2, [r7, #4]
    c93e:	f04f 0300 	mov.w	r3, #0	; 0x0
    c942:	7213      	strb	r3, [r2, #8]
    brakOut = false;
    c944:	687a      	ldr	r2, [r7, #4]
    c946:	f04f 0300 	mov.w	r3, #0	; 0x0
    c94a:	7253      	strb	r3, [r2, #9]

    linSpeed = 0.;
    c94c:	687a      	ldr	r2, [r7, #4]
    c94e:	4b05      	ldr	r3, [pc, #20]	(c964 <_ZN6RemoteC2Ev+0x68>)
    c950:	60d3      	str	r3, [r2, #12]
    angSpeed = 0.;
    c952:	687a      	ldr	r2, [r7, #4]
    c954:	4b03      	ldr	r3, [pc, #12]	(c964 <_ZN6RemoteC2Ev+0x68>)
    c956:	6113      	str	r3, [r2, #16]
}
    c958:	687b      	ldr	r3, [r7, #4]
    c95a:	4618      	mov	r0, r3
    c95c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c960:	46bd      	mov	sp, r7
    c962:	bd80      	pop	{r7, pc}
    c964:	00000000 	.word	0x00000000

0000c968 <_ZN6Remote12getSingletonEv>:
//#include "brak.h"
#include "brasLateraux.h"

Remote* Remote::singleton = 0;

Remote* Remote::getSingleton()
    c968:	b580      	push	{r7, lr}
    c96a:	b082      	sub	sp, #8
    c96c:	af00      	add	r7, sp, #0
{
    if (singleton==0)
    c96e:	4b0f      	ldr	r3, [pc, #60]	(c9ac <_ZN6Remote12getSingletonEv+0x44>)
    c970:	681b      	ldr	r3, [r3, #0]
    c972:	2b00      	cmp	r3, #0
    c974:	d113      	bne.n	c99e <_ZN6Remote12getSingletonEv+0x36>
        singleton = new Remote();
    c976:	f04f 0014 	mov.w	r0, #20	; 0x14
    c97a:	f001 fc59 	bl	e230 <_Znwj>
    c97e:	4603      	mov	r3, r0
    c980:	603b      	str	r3, [r7, #0]
    c982:	683a      	ldr	r2, [r7, #0]
    c984:	2a00      	cmp	r2, #0
    c986:	d005      	beq.n	c994 <_ZN6Remote12getSingletonEv+0x2c>
    c988:	6838      	ldr	r0, [r7, #0]
    c98a:	f7ff ff81 	bl	c890 <_ZN6RemoteC1Ev>
    c98e:	683b      	ldr	r3, [r7, #0]
    c990:	607b      	str	r3, [r7, #4]
    c992:	e001      	b.n	c998 <_ZN6Remote12getSingletonEv+0x30>
    c994:	683a      	ldr	r2, [r7, #0]
    c996:	607a      	str	r2, [r7, #4]
    c998:	4b04      	ldr	r3, [pc, #16]	(c9ac <_ZN6Remote12getSingletonEv+0x44>)
    c99a:	687a      	ldr	r2, [r7, #4]
    c99c:	601a      	str	r2, [r3, #0]

    return singleton;
    c99e:	4b03      	ldr	r3, [pc, #12]	(c9ac <_ZN6Remote12getSingletonEv+0x44>)
    c9a0:	681b      	ldr	r3, [r3, #0]
}
    c9a2:	4618      	mov	r0, r3
    c9a4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c9a8:	46bd      	mov	sp, r7
    c9aa:	bd80      	pop	{r7, pc}
    c9ac:	20000580 	.word	0x20000580

0000c9b0 <_ZN6Remote3logEPc>:
//        sendData(data[i]);

//    delete [] data;
//}

void Remote::log(char* msg)
    c9b0:	b580      	push	{r7, lr}
    c9b2:	b084      	sub	sp, #16
    c9b4:	af00      	add	r7, sp, #0
    c9b6:	6078      	str	r0, [r7, #4]
{
    int pos = 0;
    c9b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    c9bc:	60bb      	str	r3, [r7, #8]
    c9be:	e00e      	b.n	c9de <_ZN6Remote3logEPc+0x2e>
    while(msg[pos] != '\0' )
    {
        Remote::getSingleton()->sendData(msg[pos]);
    c9c0:	f7ff ffd2 	bl	c968 <_ZN6Remote12getSingletonEv>
    c9c4:	4601      	mov	r1, r0
    c9c6:	68ba      	ldr	r2, [r7, #8]
    c9c8:	687b      	ldr	r3, [r7, #4]
    c9ca:	4413      	add	r3, r2
    c9cc:	781b      	ldrb	r3, [r3, #0]
    c9ce:	4608      	mov	r0, r1
    c9d0:	4619      	mov	r1, r3
    c9d2:	f7ff fee3 	bl	c79c <_ZN6Remote8sendDataEi>
        pos++;
    c9d6:	68bb      	ldr	r3, [r7, #8]
    c9d8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c9dc:	60bb      	str	r3, [r7, #8]
//}

void Remote::log(char* msg)
{
    int pos = 0;
    while(msg[pos] != '\0' )
    c9de:	68ba      	ldr	r2, [r7, #8]
    c9e0:	687b      	ldr	r3, [r7, #4]
    c9e2:	4413      	add	r3, r2
    c9e4:	781b      	ldrb	r3, [r3, #0]
    c9e6:	2b00      	cmp	r3, #0
    c9e8:	d1ea      	bne.n	c9c0 <_ZN6Remote3logEPc+0x10>
    {
        Remote::getSingleton()->sendData(msg[pos]);
        pos++;
    }
    for(int i=0; i<10; i++)
    c9ea:	f04f 0300 	mov.w	r3, #0	; 0x0
    c9ee:	60fb      	str	r3, [r7, #12]
    c9f0:	e00b      	b.n	ca0a <_ZN6Remote3logEPc+0x5a>
        Remote::getSingleton()->sendData(' ');
    c9f2:	f7ff ffb9 	bl	c968 <_ZN6Remote12getSingletonEv>
    c9f6:	4603      	mov	r3, r0
    c9f8:	4618      	mov	r0, r3
    c9fa:	f04f 0120 	mov.w	r1, #32	; 0x20
    c9fe:	f7ff fecd 	bl	c79c <_ZN6Remote8sendDataEi>
    while(msg[pos] != '\0' )
    {
        Remote::getSingleton()->sendData(msg[pos]);
        pos++;
    }
    for(int i=0; i<10; i++)
    ca02:	68fb      	ldr	r3, [r7, #12]
    ca04:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ca08:	60fb      	str	r3, [r7, #12]
    ca0a:	68fb      	ldr	r3, [r7, #12]
    ca0c:	2b09      	cmp	r3, #9
    ca0e:	ddf0      	ble.n	c9f2 <_ZN6Remote3logEPc+0x42>
        Remote::getSingleton()->sendData(' ');
}
    ca10:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ca14:	46bd      	mov	sp, r7
    ca16:	bd80      	pop	{r7, pc}

0000ca18 <_ZN6Remote6updateEb>:
#else
    return 0;
#endif
}

void Remote::update(bool allowChangeMode)
    ca18:	b580      	push	{r7, lr}
    ca1a:	b086      	sub	sp, #24
    ca1c:	af00      	add	r7, sp, #0
    ca1e:	60f8      	str	r0, [r7, #12]
    ca20:	460b      	mov	r3, r1
    ca22:	72fb      	strb	r3, [r7, #11]
    }
#endif
*/
    //if (allowChangeMode)
    {
        if (dataAvailable() && !remoteMode)
    ca24:	68f8      	ldr	r0, [r7, #12]
    ca26:	f7ff fe5f 	bl	c6e8 <_ZN6Remote13dataAvailableEv>
    ca2a:	4603      	mov	r3, r0
    ca2c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ca30:	b2db      	uxtb	r3, r3
    ca32:	2b00      	cmp	r3, #0
    ca34:	d10d      	bne.n	ca52 <_ZN6Remote6updateEb+0x3a>
    ca36:	68fb      	ldr	r3, [r7, #12]
    ca38:	791b      	ldrb	r3, [r3, #4]
    ca3a:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ca3e:	b2db      	uxtb	r3, r3
    ca40:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ca44:	b2db      	uxtb	r3, r3
    ca46:	2b00      	cmp	r3, #0
    ca48:	d103      	bne.n	ca52 <_ZN6Remote6updateEb+0x3a>
    ca4a:	f04f 0301 	mov.w	r3, #1	; 0x1
    ca4e:	603b      	str	r3, [r7, #0]
    ca50:	e002      	b.n	ca58 <_ZN6Remote6updateEb+0x40>
    ca52:	f04f 0300 	mov.w	r3, #0	; 0x0
    ca56:	603b      	str	r3, [r7, #0]
    ca58:	683b      	ldr	r3, [r7, #0]
    ca5a:	2b00      	cmp	r3, #0
    ca5c:	d007      	beq.n	ca6e <_ZN6Remote6updateEb+0x56>
        {
            remoteMode = true;
    ca5e:	68fa      	ldr	r2, [r7, #12]
    ca60:	f04f 0301 	mov.w	r3, #1	; 0x1
    ca64:	7113      	strb	r3, [r2, #4]
            Remote::log("Reçu, avant toute commandant !");
    ca66:	4b54      	ldr	r3, [pc, #336]	(cbb8 <_ZN6Remote6updateEb+0x1a0>)
    ca68:	4618      	mov	r0, r3
    ca6a:	f7ff ffa1 	bl	c9b0 <_ZN6Remote3logEPc>
        }
        if (remoteMode)
    ca6e:	68fb      	ldr	r3, [r7, #12]
    ca70:	791b      	ldrb	r3, [r3, #4]
    ca72:	2b00      	cmp	r3, #0
    ca74:	d004      	beq.n	ca80 <_ZN6Remote6updateEb+0x68>
            Led::setOn(1);
    ca76:	f04f 0001 	mov.w	r0, #1	; 0x1
    ca7a:	f7ff f97d 	bl	bd78 <_ZN3Led5setOnEi>
    ca7e:	e003      	b.n	ca88 <_ZN6Remote6updateEb+0x70>
        else
            Led::setOff(1);
    ca80:	f04f 0001 	mov.w	r0, #1	; 0x1
    ca84:	f7ff f938 	bl	bcf8 <_ZN3Led6setOffEi>
    }

    if (!allowChangeMode && remoteMode && dataAvailable())
    ca88:	7afb      	ldrb	r3, [r7, #11]
    ca8a:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ca8e:	b2db      	uxtb	r3, r3
    ca90:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ca94:	b2db      	uxtb	r3, r3
    ca96:	2b00      	cmp	r3, #0
    ca98:	d113      	bne.n	cac2 <_ZN6Remote6updateEb+0xaa>
    ca9a:	68fb      	ldr	r3, [r7, #12]
    ca9c:	791b      	ldrb	r3, [r3, #4]
    ca9e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    caa2:	b2db      	uxtb	r3, r3
    caa4:	2b00      	cmp	r3, #0
    caa6:	d10c      	bne.n	cac2 <_ZN6Remote6updateEb+0xaa>
    caa8:	68f8      	ldr	r0, [r7, #12]
    caaa:	f7ff fe1d 	bl	c6e8 <_ZN6Remote13dataAvailableEv>
    caae:	4603      	mov	r3, r0
    cab0:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    cab4:	b2db      	uxtb	r3, r3
    cab6:	2b00      	cmp	r3, #0
    cab8:	d103      	bne.n	cac2 <_ZN6Remote6updateEb+0xaa>
    caba:	f04f 0301 	mov.w	r3, #1	; 0x1
    cabe:	607b      	str	r3, [r7, #4]
    cac0:	e002      	b.n	cac8 <_ZN6Remote6updateEb+0xb0>
    cac2:	f04f 0300 	mov.w	r3, #0	; 0x0
    cac6:	607b      	str	r3, [r7, #4]
    cac8:	687b      	ldr	r3, [r7, #4]
    caca:	2b00      	cmp	r3, #0
    cacc:	d069      	beq.n	cba2 <_ZN6Remote6updateEb+0x18a>
    {
        int order = receiveData();
    cace:	68f8      	ldr	r0, [r7, #12]
    cad0:	f7ff fe20 	bl	c714 <_ZN6Remote11receiveDataEv>
    cad4:	4603      	mov	r3, r0
    cad6:	617b      	str	r3, [r7, #20]
        Remote::log("Got:");
    cad8:	4b38      	ldr	r3, [pc, #224]	(cbbc <_ZN6Remote6updateEb+0x1a4>)
    cada:	4618      	mov	r0, r3
    cadc:	f7ff ff68 	bl	c9b0 <_ZN6Remote3logEPc>
        Remote::getSingleton()->sendData(order);
    cae0:	f7ff ff42 	bl	c968 <_ZN6Remote12getSingletonEv>
    cae4:	4603      	mov	r3, r0
    cae6:	4618      	mov	r0, r3
    cae8:	6979      	ldr	r1, [r7, #20]
    caea:	f7ff fe57 	bl	c79c <_ZN6Remote8sendDataEi>
            break;
        }
#endif
*/
        // Linear Speed
        if (order>=0 and order<=50)
    caee:	697b      	ldr	r3, [r7, #20]
    caf0:	2b00      	cmp	r3, #0
    caf2:	db27      	blt.n	cb44 <_ZN6Remote6updateEb+0x12c>
    caf4:	697b      	ldr	r3, [r7, #20]
    caf6:	2b32      	cmp	r3, #50
    caf8:	dc24      	bgt.n	cb44 <_ZN6Remote6updateEb+0x12c>
            linSpeed = ((float)(order-25)) / 25. * LINEAR_REMOTE_SPEED_LIMIT;
    cafa:	697b      	ldr	r3, [r7, #20]
    cafc:	f1a3 0319 	sub.w	r3, r3, #25	; 0x19
    cb00:	4618      	mov	r0, r3
    cb02:	f00d ff1f 	bl	1a944 <__aeabi_i2f>
    cb06:	4603      	mov	r3, r0
    cb08:	4618      	mov	r0, r3
    cb0a:	f00d fafd 	bl	1a108 <__aeabi_f2d>
    cb0e:	4602      	mov	r2, r0
    cb10:	460b      	mov	r3, r1
    cb12:	4610      	mov	r0, r2
    cb14:	4619      	mov	r1, r3
    cb16:	f04f 0200 	mov.w	r2, #0	; 0x0
    cb1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cb1e:	f503 1364 	add.w	r3, r3, #3735552	; 0x390000
    cb22:	f00d fc6f 	bl	1a404 <__aeabi_ddiv>
    cb26:	4602      	mov	r2, r0
    cb28:	460b      	mov	r3, r1
    cb2a:	4610      	mov	r0, r2
    cb2c:	4619      	mov	r1, r3
    cb2e:	f00d f98d 	bl	19e4c <__adddf3>
    cb32:	4602      	mov	r2, r0
    cb34:	460b      	mov	r3, r1
    cb36:	4610      	mov	r0, r2
    cb38:	4619      	mov	r1, r3
    cb3a:	f00d fdf9 	bl	1a730 <__aeabi_d2f>
    cb3e:	4602      	mov	r2, r0
    cb40:	68fb      	ldr	r3, [r7, #12]
    cb42:	60da      	str	r2, [r3, #12]

        // Angular Speed
        if (order>=51 and order<=101)
    cb44:	697b      	ldr	r3, [r7, #20]
    cb46:	2b32      	cmp	r3, #50
    cb48:	dd2b      	ble.n	cba2 <_ZN6Remote6updateEb+0x18a>
    cb4a:	697b      	ldr	r3, [r7, #20]
    cb4c:	2b65      	cmp	r3, #101
    cb4e:	dc28      	bgt.n	cba2 <_ZN6Remote6updateEb+0x18a>
            angSpeed = -((float)(order-75)) / 25. * ANGULAR_REMOTE_SPEED_LIMIT;
    cb50:	697b      	ldr	r3, [r7, #20]
    cb52:	f1a3 034b 	sub.w	r3, r3, #75	; 0x4b
    cb56:	4618      	mov	r0, r3
    cb58:	f00d fef4 	bl	1a944 <__aeabi_i2f>
    cb5c:	4603      	mov	r3, r0
    cb5e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    cb62:	4618      	mov	r0, r3
    cb64:	f00d fad0 	bl	1a108 <__aeabi_f2d>
    cb68:	4602      	mov	r2, r0
    cb6a:	460b      	mov	r3, r1
    cb6c:	4610      	mov	r0, r2
    cb6e:	4619      	mov	r1, r3
    cb70:	f04f 0200 	mov.w	r2, #0	; 0x0
    cb74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cb78:	f503 1364 	add.w	r3, r3, #3735552	; 0x390000
    cb7c:	f00d fc42 	bl	1a404 <__aeabi_ddiv>
    cb80:	4602      	mov	r2, r0
    cb82:	460b      	mov	r3, r1
    cb84:	4610      	mov	r0, r2
    cb86:	4619      	mov	r1, r3
    cb88:	a209      	add	r2, pc, #36	(adr r2, cbb0 <_ZN6Remote6updateEb+0x198>)
    cb8a:	ca0c      	ldmia	r2!, {r2, r3}
    cb8c:	f00d fb10 	bl	1a1b0 <__aeabi_dmul>
    cb90:	4602      	mov	r2, r0
    cb92:	460b      	mov	r3, r1
    cb94:	4610      	mov	r0, r2
    cb96:	4619      	mov	r1, r3
    cb98:	f00d fdca 	bl	1a730 <__aeabi_d2f>
    cb9c:	4602      	mov	r2, r0
    cb9e:	68fb      	ldr	r3, [r7, #12]
    cba0:	611a      	str	r2, [r3, #16]
    }
}
    cba2:	f107 0718 	add.w	r7, r7, #24	; 0x18
    cba6:	46bd      	mov	sp, r7
    cba8:	bd80      	pop	{r7, pc}
    cbaa:	46c0      	nop			(mov r8, r8)
    cbac:	46c0      	nop			(mov r8, r8)
    cbae:	46c0      	nop			(mov r8, r8)
    cbb0:	47ae147b 	.word	0x47ae147b
    cbb4:	3f847ae1 	.word	0x3f847ae1
    cbb8:	00021a20 	.word	0x00021a20
    cbbc:	00021a40 	.word	0x00021a40

0000cbc0 <_ZN4Roue6tourneEf>:
    GPIO_InitStructureSortie2.GPIO_Speed = GPIO_Speed_2MHz;        //La vitesse de rafraichissement du port
    GPIO_Init(GPIOx_Sens, &GPIO_InitStructureSortie2);

}

void Roue::tourne(float rapport)
    cbc0:	b580      	push	{r7, lr}
    cbc2:	b082      	sub	sp, #8
    cbc4:	af00      	add	r7, sp, #0
    cbc6:	6078      	str	r0, [r7, #4]
    cbc8:	6039      	str	r1, [r7, #0]
{
    //rapport = 1;
    if(rapport >=0)
    cbca:	6838      	ldr	r0, [r7, #0]
    cbcc:	4915      	ldr	r1, [pc, #84]	(cc24 <_ZN4Roue6tourneEf+0x64>)
    cbce:	f00e f8bd 	bl	1ad4c <__aeabi_fcmpge>
    cbd2:	4603      	mov	r3, r0
    cbd4:	2b00      	cmp	r3, #0
    cbd6:	d00f      	beq.n	cbf8 <_ZN4Roue6tourneEf+0x38>
    //if((rapport >= 0 && !oppositeDirection) || (rapport<0 && oppositeDirection))
    {
        GPIO_WriteBit(GPIOx_Sens, GPIO_Pin_Sens, Bit_RESET);
    cbd8:	687b      	ldr	r3, [r7, #4]
    cbda:	689a      	ldr	r2, [r3, #8]
    cbdc:	687b      	ldr	r3, [r7, #4]
    cbde:	899b      	ldrh	r3, [r3, #12]
    cbe0:	4610      	mov	r0, r2
    cbe2:	4619      	mov	r1, r3
    cbe4:	f04f 0200 	mov.w	r2, #0	; 0x0
    cbe8:	f7f4 fed0 	bl	198c <GPIO_WriteBit>
        pwm.setDutyCycle(rapport);
    cbec:	687b      	ldr	r3, [r7, #4]
    cbee:	4618      	mov	r0, r3
    cbf0:	6839      	ldr	r1, [r7, #0]
    cbf2:	f7ff fbaf 	bl	c354 <_ZN10PWMHandler12setDutyCycleEf>
    cbf6:	e011      	b.n	cc1c <_ZN4Roue6tourneEf+0x5c>
    }
    else
    {
        GPIO_WriteBit(GPIOx_Sens, GPIO_Pin_Sens, Bit_SET);
    cbf8:	687b      	ldr	r3, [r7, #4]
    cbfa:	689a      	ldr	r2, [r3, #8]
    cbfc:	687b      	ldr	r3, [r7, #4]
    cbfe:	899b      	ldrh	r3, [r3, #12]
    cc00:	4610      	mov	r0, r2
    cc02:	4619      	mov	r1, r3
    cc04:	f04f 0201 	mov.w	r2, #1	; 0x1
    cc08:	f7f4 fec0 	bl	198c <GPIO_WriteBit>
        pwm.setDutyCycle(-rapport);
    cc0c:	687a      	ldr	r2, [r7, #4]
    cc0e:	683b      	ldr	r3, [r7, #0]
    cc10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    cc14:	4610      	mov	r0, r2
    cc16:	4619      	mov	r1, r3
    cc18:	f7ff fb9c 	bl	c354 <_ZN10PWMHandler12setDutyCycleEf>
/*
    if(fabs(rapport) < RAPPORT_OK)
        pwm.setDutyCycle(0);
    else
        pwm.setDutyCycle(fabs(rapport)+RAPPORT_SUPPLEMENTAIRE);*/
}
    cc1c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    cc20:	46bd      	mov	sp, r7
    cc22:	bd80      	pop	{r7, pc}
    cc24:	00000000 	.word	0x00000000

0000cc28 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>:
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_rcc.h"
#endif
#include <math.h>

Roue::Roue(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm, GPIO_TypeDef* GPIOx_Sens, uint16_t GPIO_Pin_Sens)
    cc28:	b580      	push	{r7, lr}
    cc2a:	b088      	sub	sp, #32
    cc2c:	af02      	add	r7, sp, #8
    cc2e:	60f8      	str	r0, [r7, #12]
    cc30:	60b9      	str	r1, [r7, #8]
    cc32:	603b      	str	r3, [r7, #0]
    cc34:	4613      	mov	r3, r2
    cc36:	71fb      	strb	r3, [r7, #7]
    : Moteur(TIMx, OCx, GPIOx_pwm, GPIO_Pin_pwm)
    cc38:	68fa      	ldr	r2, [r7, #12]
    cc3a:	f897 c007 	ldrb.w	ip, [r7, #7]
    cc3e:	8c3b      	ldrh	r3, [r7, #32]
    cc40:	9300      	str	r3, [sp, #0]
    cc42:	4610      	mov	r0, r2
    cc44:	68b9      	ldr	r1, [r7, #8]
    cc46:	4662      	mov	r2, ip
    cc48:	683b      	ldr	r3, [r7, #0]
    cc4a:	f7f8 fdb3 	bl	57b4 <_ZN6MoteurC2EP11TIM_TypeDefhP12GPIO_TypeDeft>
{
    this->GPIOx_Sens = GPIOx_Sens;
    cc4e:	68fa      	ldr	r2, [r7, #12]
    cc50:	6a7b      	ldr	r3, [r7, #36]
    cc52:	6093      	str	r3, [r2, #8]
    this->GPIO_Pin_Sens = GPIO_Pin_Sens;
    cc54:	68fa      	ldr	r2, [r7, #12]
    cc56:	8d3b      	ldrh	r3, [r7, #40]
    cc58:	8193      	strh	r3, [r2, #12]
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOD, &GPIO_InitStructureSortie);
*/
    // initialiser pins d'entrée sur le STM du port x_sens
    GPIO_InitTypeDef GPIO_InitStructureSortie2;
    GPIO_InitStructureSortie2.GPIO_Pin =  GPIO_Pin_Sens;
    cc5a:	8d3b      	ldrh	r3, [r7, #40]
    cc5c:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructureSortie2.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_Out_PP;
    cc5e:	f04f 0310 	mov.w	r3, #16	; 0x10
    cc62:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie2.GPIO_Speed = GPIO_Speed_2MHz;        //La vitesse de rafraichissement du port
    cc64:	f04f 0302 	mov.w	r3, #2	; 0x2
    cc68:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_Sens, &GPIO_InitStructureSortie2);
    cc6a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cc6e:	6a78      	ldr	r0, [r7, #36]
    cc70:	4619      	mov	r1, r3
    cc72:	f7f4 fd1d 	bl	16b0 <GPIO_Init>

}
    cc76:	68fb      	ldr	r3, [r7, #12]
    cc78:	4618      	mov	r0, r3
    cc7a:	f107 0718 	add.w	r7, r7, #24	; 0x18
    cc7e:	46bd      	mov	sp, r7
    cc80:	bd80      	pop	{r7, pc}
    cc82:	46c0      	nop			(mov r8, r8)

0000cc84 <_ZN4RoueC2EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>:
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_rcc.h"
#endif
#include <math.h>

Roue::Roue(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm, GPIO_TypeDef* GPIOx_Sens, uint16_t GPIO_Pin_Sens)
    cc84:	b580      	push	{r7, lr}
    cc86:	b088      	sub	sp, #32
    cc88:	af02      	add	r7, sp, #8
    cc8a:	60f8      	str	r0, [r7, #12]
    cc8c:	60b9      	str	r1, [r7, #8]
    cc8e:	603b      	str	r3, [r7, #0]
    cc90:	4613      	mov	r3, r2
    cc92:	71fb      	strb	r3, [r7, #7]
    : Moteur(TIMx, OCx, GPIOx_pwm, GPIO_Pin_pwm)
    cc94:	68fa      	ldr	r2, [r7, #12]
    cc96:	f897 c007 	ldrb.w	ip, [r7, #7]
    cc9a:	8c3b      	ldrh	r3, [r7, #32]
    cc9c:	9300      	str	r3, [sp, #0]
    cc9e:	4610      	mov	r0, r2
    cca0:	68b9      	ldr	r1, [r7, #8]
    cca2:	4662      	mov	r2, ip
    cca4:	683b      	ldr	r3, [r7, #0]
    cca6:	f7f8 fd85 	bl	57b4 <_ZN6MoteurC2EP11TIM_TypeDefhP12GPIO_TypeDeft>
{
    this->GPIOx_Sens = GPIOx_Sens;
    ccaa:	68fa      	ldr	r2, [r7, #12]
    ccac:	6a7b      	ldr	r3, [r7, #36]
    ccae:	6093      	str	r3, [r2, #8]
    this->GPIO_Pin_Sens = GPIO_Pin_Sens;
    ccb0:	68fa      	ldr	r2, [r7, #12]
    ccb2:	8d3b      	ldrh	r3, [r7, #40]
    ccb4:	8193      	strh	r3, [r2, #12]
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOD, &GPIO_InitStructureSortie);
*/
    // initialiser pins d'entrée sur le STM du port x_sens
    GPIO_InitTypeDef GPIO_InitStructureSortie2;
    GPIO_InitStructureSortie2.GPIO_Pin =  GPIO_Pin_Sens;
    ccb6:	8d3b      	ldrh	r3, [r7, #40]
    ccb8:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructureSortie2.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_Out_PP;
    ccba:	f04f 0310 	mov.w	r3, #16	; 0x10
    ccbe:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie2.GPIO_Speed = GPIO_Speed_2MHz;        //La vitesse de rafraichissement du port
    ccc0:	f04f 0302 	mov.w	r3, #2	; 0x2
    ccc4:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_Sens, &GPIO_InitStructureSortie2);
    ccc6:	f107 0314 	add.w	r3, r7, #20	; 0x14
    ccca:	6a78      	ldr	r0, [r7, #36]
    cccc:	4619      	mov	r1, r3
    ccce:	f7f4 fcef 	bl	16b0 <GPIO_Init>

}
    ccd2:	68fb      	ldr	r3, [r7, #12]
    ccd4:	4618      	mov	r0, r3
    ccd6:	f107 0718 	add.w	r7, r7, #24	; 0x18
    ccda:	46bd      	mov	sp, r7
    ccdc:	bd80      	pop	{r7, pc}
    ccde:	46c0      	nop			(mov r8, r8)

0000cce0 <_ZN11SharpSensor8getValueEv>:
        output = false;
    #endif

}

Sensor::OutputSensor SharpSensor::getValue()
    cce0:	b580      	push	{r7, lr}
    cce2:	b088      	sub	sp, #32
    cce4:	af00      	add	r7, sp, #0
    cce6:	6078      	str	r0, [r7, #4]
    cce8:	60f9      	str	r1, [r7, #12]
{
    OutputSensor outputR;
    outputR.type = SHARP;
    ccea:	f04f 0300 	mov.w	r3, #0	; 0x0
    ccee:	687a      	ldr	r2, [r7, #4]
    ccf0:	7013      	strb	r3, [r2, #0]
    outputR.f = (float)value;
    ccf2:	68fb      	ldr	r3, [r7, #12]
    ccf4:	691b      	ldr	r3, [r3, #16]
    ccf6:	4618      	mov	r0, r3
    ccf8:	f00d fe24 	bl	1a944 <__aeabi_i2f>
    ccfc:	4603      	mov	r3, r0
    ccfe:	687a      	ldr	r2, [r7, #4]
    cd00:	6053      	str	r3, [r2, #4]
    outputR.b = (output && actif);// && actif && !SharpSensor::estDesactive);
    cd02:	68fb      	ldr	r3, [r7, #12]
    cd04:	7b9b      	ldrb	r3, [r3, #14]
    cd06:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    cd0a:	b2db      	uxtb	r3, r3
    cd0c:	2b00      	cmp	r3, #0
    cd0e:	d10a      	bne.n	cd26 <_ZN11SharpSensor8getValueEv+0x46>
    cd10:	68fb      	ldr	r3, [r7, #12]
    cd12:	7bdb      	ldrb	r3, [r3, #15]
    cd14:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    cd18:	b2db      	uxtb	r3, r3
    cd1a:	2b00      	cmp	r3, #0
    cd1c:	d103      	bne.n	cd26 <_ZN11SharpSensor8getValueEv+0x46>
    cd1e:	f04f 0301 	mov.w	r3, #1	; 0x1
    cd22:	60bb      	str	r3, [r7, #8]
    cd24:	e002      	b.n	cd2c <_ZN11SharpSensor8getValueEv+0x4c>
    cd26:	f04f 0200 	mov.w	r2, #0	; 0x0
    cd2a:	60ba      	str	r2, [r7, #8]
    cd2c:	68ba      	ldr	r2, [r7, #8]
    cd2e:	4613      	mov	r3, r2
    cd30:	687a      	ldr	r2, [r7, #4]
    cd32:	7213      	strb	r3, [r2, #8]
    return outputR;
}
    cd34:	6878      	ldr	r0, [r7, #4]
    cd36:	f107 0720 	add.w	r7, r7, #32	; 0x20
    cd3a:	46bd      	mov	sp, r7
    cd3c:	bd80      	pop	{r7, pc}
    cd3e:	46c0      	nop			(mov r8, r8)

0000cd40 <_ZN11SharpSensor7getNameEv>:

SharpSensor::SharpName SharpSensor::getName()
    cd40:	b480      	push	{r7}
    cd42:	b083      	sub	sp, #12
    cd44:	af00      	add	r7, sp, #0
    cd46:	6078      	str	r0, [r7, #4]
{
    return name;
    cd48:	687b      	ldr	r3, [r7, #4]
    cd4a:	7b5b      	ldrb	r3, [r3, #13]
}
    cd4c:	4618      	mov	r0, r3
    cd4e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    cd52:	46bd      	mov	sp, r7
    cd54:	bc80      	pop	{r7}
    cd56:	4770      	bx	lr

0000cd58 <_ZN11SharpSensor8setActifEv>:


void SharpSensor::setActif()
    cd58:	b480      	push	{r7}
    cd5a:	b083      	sub	sp, #12
    cd5c:	af00      	add	r7, sp, #0
    cd5e:	6078      	str	r0, [r7, #4]
{
    actif = true;
    cd60:	687b      	ldr	r3, [r7, #4]
    cd62:	f04f 0201 	mov.w	r2, #1	; 0x1
    cd66:	73da      	strb	r2, [r3, #15]
}
    cd68:	f107 070c 	add.w	r7, r7, #12	; 0xc
    cd6c:	46bd      	mov	sp, r7
    cd6e:	bc80      	pop	{r7}
    cd70:	4770      	bx	lr
    cd72:	46c0      	nop			(mov r8, r8)

0000cd74 <_ZN11SharpSensor10unsetActifEv>:

void SharpSensor::unsetActif()
    cd74:	b480      	push	{r7}
    cd76:	b083      	sub	sp, #12
    cd78:	af00      	add	r7, sp, #0
    cd7a:	6078      	str	r0, [r7, #4]
{
    actif = false;
    cd7c:	687b      	ldr	r3, [r7, #4]
    cd7e:	f04f 0200 	mov.w	r2, #0	; 0x0
    cd82:	73da      	strb	r2, [r3, #15]
}
    cd84:	f107 070c 	add.w	r7, r7, #12	; 0xc
    cd88:	46bd      	mov	sp, r7
    cd8a:	bc80      	pop	{r7}
    cd8c:	4770      	bx	lr
    cd8e:	46c0      	nop			(mov r8, r8)

0000cd90 <_ZN11SharpSensor11updateValueEv>:
SharpSensor::~SharpSensor()
{
    //dtor
}

void SharpSensor::updateValue()
    cd90:	b580      	push	{r7, lr}
    cd92:	b082      	sub	sp, #8
    cd94:	af00      	add	r7, sp, #0
    cd96:	6078      	str	r0, [r7, #4]
{
    #ifdef ROBOTHW
    while(!AnalogSensor::conversionFinished());    // au cas où l'interrupt de l'asservissement tombe avant la fin de l'acquisition/conversion
    cd98:	f7fd fc50 	bl	a63c <_ZN12AnalogSensor18conversionFinishedEv>
    cd9c:	4603      	mov	r3, r0
    cd9e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    cda2:	b2db      	uxtb	r3, r3
    cda4:	2b00      	cmp	r3, #0
    cda6:	d1f7      	bne.n	cd98 <_ZN11SharpSensor11updateValueEv+0x8>

    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        value = *data;
        value >>= 4;
    #else // K - H107
        value = *data;
    cda8:	687b      	ldr	r3, [r7, #4]
    cdaa:	689b      	ldr	r3, [r3, #8]
    cdac:	881b      	ldrh	r3, [r3, #0]
    cdae:	461a      	mov	r2, r3
    cdb0:	687b      	ldr	r3, [r7, #4]
    cdb2:	611a      	str	r2, [r3, #16]
    #endif

    counter <<= 1;
    cdb4:	687b      	ldr	r3, [r7, #4]
    cdb6:	7b1b      	ldrb	r3, [r3, #12]
    cdb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    cdbc:	b2db      	uxtb	r3, r3
    cdbe:	687a      	ldr	r2, [r7, #4]
    cdc0:	7313      	strb	r3, [r2, #12]
    counter |= (value > seuilDetection);
    cdc2:	687b      	ldr	r3, [r7, #4]
    cdc4:	7b1b      	ldrb	r3, [r3, #12]
    cdc6:	4619      	mov	r1, r3
    cdc8:	687b      	ldr	r3, [r7, #4]
    cdca:	691a      	ldr	r2, [r3, #16]
    cdcc:	687b      	ldr	r3, [r7, #4]
    cdce:	8a9b      	ldrh	r3, [r3, #20]
    cdd0:	429a      	cmp	r2, r3
    cdd2:	bfd4      	ite	le
    cdd4:	2300      	movle	r3, #0
    cdd6:	2301      	movgt	r3, #1
    cdd8:	460a      	mov	r2, r1
    cdda:	ea42 0303 	orr.w	r3, r2, r3
    cdde:	b2db      	uxtb	r3, r3
    cde0:	b2db      	uxtb	r3, r3
    cde2:	687a      	ldr	r2, [r7, #4]
    cde4:	7313      	strb	r3, [r2, #12]
    //if (*data > threshold)
    //    allumerLED();
    output = output ? !((counter & 0xff) == 0x00) : (counter & 0xff) == 0xff ; // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de retourner un true et que rien a été detecté au moins 8 fois pour retourner false.
    cde6:	687b      	ldr	r3, [r7, #4]
    cde8:	7b9b      	ldrb	r3, [r3, #14]
    cdea:	2b00      	cmp	r3, #0
    cdec:	d008      	beq.n	ce00 <_ZN11SharpSensor11updateValueEv+0x70>
    cdee:	687b      	ldr	r3, [r7, #4]
    cdf0:	7b1b      	ldrb	r3, [r3, #12]
    cdf2:	2b00      	cmp	r3, #0
    cdf4:	bf0c      	ite	eq
    cdf6:	2300      	moveq	r3, #0
    cdf8:	2301      	movne	r3, #1
    cdfa:	b2db      	uxtb	r3, r3
    cdfc:	603b      	str	r3, [r7, #0]
    cdfe:	e007      	b.n	ce10 <_ZN11SharpSensor11updateValueEv+0x80>
    ce00:	687b      	ldr	r3, [r7, #4]
    ce02:	7b1b      	ldrb	r3, [r3, #12]
    ce04:	2bff      	cmp	r3, #255
    ce06:	bf14      	ite	ne
    ce08:	2300      	movne	r3, #0
    ce0a:	2301      	moveq	r3, #1
    ce0c:	b2db      	uxtb	r3, r3
    ce0e:	603b      	str	r3, [r7, #0]
    ce10:	687a      	ldr	r2, [r7, #4]
    ce12:	6839      	ldr	r1, [r7, #0]
    ce14:	460b      	mov	r3, r1
    ce16:	7393      	strb	r3, [r2, #14]
    }
    else
        output = false;
    #endif

}
    ce18:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ce1c:	46bd      	mov	sp, r7
    ce1e:	bd80      	pop	{r7, pc}

0000ce20 <_ZN11SharpSensorD0Ev>:
    this->evt = false;
    #endif

}

SharpSensor::~SharpSensor()
    ce20:	b580      	push	{r7, lr}
    ce22:	b082      	sub	sp, #8
    ce24:	af00      	add	r7, sp, #0
    ce26:	6078      	str	r0, [r7, #4]
    ce28:	687a      	ldr	r2, [r7, #4]
    ce2a:	4b0a      	ldr	r3, [pc, #40]	(ce54 <_ZN11SharpSensorD0Ev+0x34>)
    ce2c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    ce2e:	687b      	ldr	r3, [r7, #4]
    ce30:	4618      	mov	r0, r3
    ce32:	f7fd fcf7 	bl	a824 <_ZN12AnalogSensorD2Ev>
    ce36:	f04f 0301 	mov.w	r3, #1	; 0x1
    ce3a:	b2db      	uxtb	r3, r3
    ce3c:	2b00      	cmp	r3, #0
    ce3e:	d002      	beq.n	ce46 <_ZN11SharpSensorD0Ev+0x26>
    ce40:	6878      	ldr	r0, [r7, #4]
    ce42:	f001 fa9b 	bl	e37c <_ZdlPv>
    ce46:	687b      	ldr	r3, [r7, #4]
    ce48:	4618      	mov	r0, r3
    ce4a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ce4e:	46bd      	mov	sp, r7
    ce50:	bd80      	pop	{r7, pc}
    ce52:	46c0      	nop			(mov r8, r8)
    ce54:	00021a50 	.word	0x00021a50

0000ce58 <_ZN11SharpSensorD1Ev>:
    this->evt = false;
    #endif

}

SharpSensor::~SharpSensor()
    ce58:	b580      	push	{r7, lr}
    ce5a:	b082      	sub	sp, #8
    ce5c:	af00      	add	r7, sp, #0
    ce5e:	6078      	str	r0, [r7, #4]
    ce60:	687a      	ldr	r2, [r7, #4]
    ce62:	4b0a      	ldr	r3, [pc, #40]	(ce8c <_ZN11SharpSensorD1Ev+0x34>)
    ce64:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    ce66:	687b      	ldr	r3, [r7, #4]
    ce68:	4618      	mov	r0, r3
    ce6a:	f7fd fcdb 	bl	a824 <_ZN12AnalogSensorD2Ev>
    ce6e:	f04f 0300 	mov.w	r3, #0	; 0x0
    ce72:	b2db      	uxtb	r3, r3
    ce74:	2b00      	cmp	r3, #0
    ce76:	d002      	beq.n	ce7e <_ZN11SharpSensorD1Ev+0x26>
    ce78:	6878      	ldr	r0, [r7, #4]
    ce7a:	f001 fa7f 	bl	e37c <_ZdlPv>
    ce7e:	687b      	ldr	r3, [r7, #4]
    ce80:	4618      	mov	r0, r3
    ce82:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ce86:	46bd      	mov	sp, r7
    ce88:	bd80      	pop	{r7, pc}
    ce8a:	46c0      	nop			(mov r8, r8)
    ce8c:	00021a50 	.word	0x00021a50

0000ce90 <_ZN11SharpSensorD2Ev>:
    this->evt = false;
    #endif

}

SharpSensor::~SharpSensor()
    ce90:	b580      	push	{r7, lr}
    ce92:	b082      	sub	sp, #8
    ce94:	af00      	add	r7, sp, #0
    ce96:	6078      	str	r0, [r7, #4]
    ce98:	687a      	ldr	r2, [r7, #4]
    ce9a:	4b0a      	ldr	r3, [pc, #40]	(cec4 <_ZN11SharpSensorD2Ev+0x34>)
    ce9c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    ce9e:	687b      	ldr	r3, [r7, #4]
    cea0:	4618      	mov	r0, r3
    cea2:	f7fd fcbf 	bl	a824 <_ZN12AnalogSensorD2Ev>
    cea6:	f04f 0300 	mov.w	r3, #0	; 0x0
    ceaa:	b2db      	uxtb	r3, r3
    ceac:	2b00      	cmp	r3, #0
    ceae:	d002      	beq.n	ceb6 <_ZN11SharpSensorD2Ev+0x26>
    ceb0:	6878      	ldr	r0, [r7, #4]
    ceb2:	f001 fa63 	bl	e37c <_ZdlPv>
    ceb6:	687b      	ldr	r3, [r7, #4]
    ceb8:	4618      	mov	r0, r3
    ceba:	f107 0708 	add.w	r7, r7, #8	; 0x8
    cebe:	46bd      	mov	sp, r7
    cec0:	bd80      	pop	{r7, pc}
    cec2:	46c0      	nop			(mov r8, r8)
    cec4:	00021a50 	.word	0x00021a50

0000cec8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>:
#include "leds.h"

int SharpSensor::threshold = SEUIL_DETECTION;
bool SharpSensor::estDesactive = false;

SharpSensor::SharpSensor(SharpName name, uint8_t channel, DMA_MEMORY_TYPE* pData, int seuil) : AnalogSensor(channel, pData)
    cec8:	b580      	push	{r7, lr}
    ceca:	b084      	sub	sp, #16
    cecc:	af00      	add	r7, sp, #0
    cece:	60f8      	str	r0, [r7, #12]
    ced0:	607b      	str	r3, [r7, #4]
    ced2:	460b      	mov	r3, r1
    ced4:	72fb      	strb	r3, [r7, #11]
    ced6:	4613      	mov	r3, r2
    ced8:	72bb      	strb	r3, [r7, #10]
    ceda:	68fb      	ldr	r3, [r7, #12]
    cedc:	7aba      	ldrb	r2, [r7, #10]
    cede:	4618      	mov	r0, r3
    cee0:	4611      	mov	r1, r2
    cee2:	687a      	ldr	r2, [r7, #4]
    cee4:	f7fd fce4 	bl	a8b0 <_ZN12AnalogSensorC2EhPt>
    cee8:	68fa      	ldr	r2, [r7, #12]
    ceea:	4b0f      	ldr	r3, [pc, #60]	(cf28 <_ZN11SharpSensorC1ENS_9SharpNameEhPti+0x60>)
    ceec:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    ceee:	68fa      	ldr	r2, [r7, #12]
    cef0:	7afb      	ldrb	r3, [r7, #11]
    cef2:	7353      	strb	r3, [r2, #13]
    counter = 0;
    cef4:	68fa      	ldr	r2, [r7, #12]
    cef6:	f04f 0300 	mov.w	r3, #0	; 0x0
    cefa:	7313      	strb	r3, [r2, #12]
    output = false;
    cefc:	68fa      	ldr	r2, [r7, #12]
    cefe:	f04f 0300 	mov.w	r3, #0	; 0x0
    cf02:	7393      	strb	r3, [r2, #14]
    actif = true;
    cf04:	68fa      	ldr	r2, [r7, #12]
    cf06:	f04f 0301 	mov.w	r3, #1	; 0x1
    cf0a:	73d3      	strb	r3, [r2, #15]
    seuilDetection = seuil;
    cf0c:	69bb      	ldr	r3, [r7, #24]
    cf0e:	b29b      	uxth	r3, r3
    cf10:	68fa      	ldr	r2, [r7, #12]
    cf12:	8293      	strh	r3, [r2, #20]
    value = 0;
    cf14:	68fa      	ldr	r2, [r7, #12]
    cf16:	f04f 0300 	mov.w	r3, #0	; 0x0
    cf1a:	6113      	str	r3, [r2, #16]
    #ifndef ROBOTHW
    this->evt = false;
    #endif

}
    cf1c:	68fb      	ldr	r3, [r7, #12]
    cf1e:	4618      	mov	r0, r3
    cf20:	f107 0710 	add.w	r7, r7, #16	; 0x10
    cf24:	46bd      	mov	sp, r7
    cf26:	bd80      	pop	{r7, pc}
    cf28:	00021a50 	.word	0x00021a50

0000cf2c <_ZN11SharpSensorC2ENS_9SharpNameEhPti>:
#include "leds.h"

int SharpSensor::threshold = SEUIL_DETECTION;
bool SharpSensor::estDesactive = false;

SharpSensor::SharpSensor(SharpName name, uint8_t channel, DMA_MEMORY_TYPE* pData, int seuil) : AnalogSensor(channel, pData)
    cf2c:	b580      	push	{r7, lr}
    cf2e:	b084      	sub	sp, #16
    cf30:	af00      	add	r7, sp, #0
    cf32:	60f8      	str	r0, [r7, #12]
    cf34:	607b      	str	r3, [r7, #4]
    cf36:	460b      	mov	r3, r1
    cf38:	72fb      	strb	r3, [r7, #11]
    cf3a:	4613      	mov	r3, r2
    cf3c:	72bb      	strb	r3, [r7, #10]
    cf3e:	68fb      	ldr	r3, [r7, #12]
    cf40:	7aba      	ldrb	r2, [r7, #10]
    cf42:	4618      	mov	r0, r3
    cf44:	4611      	mov	r1, r2
    cf46:	687a      	ldr	r2, [r7, #4]
    cf48:	f7fd fcb2 	bl	a8b0 <_ZN12AnalogSensorC2EhPt>
    cf4c:	68fa      	ldr	r2, [r7, #12]
    cf4e:	4b0f      	ldr	r3, [pc, #60]	(cf8c <_ZN11SharpSensorC2ENS_9SharpNameEhPti+0x60>)
    cf50:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    cf52:	68fa      	ldr	r2, [r7, #12]
    cf54:	7afb      	ldrb	r3, [r7, #11]
    cf56:	7353      	strb	r3, [r2, #13]
    counter = 0;
    cf58:	68fa      	ldr	r2, [r7, #12]
    cf5a:	f04f 0300 	mov.w	r3, #0	; 0x0
    cf5e:	7313      	strb	r3, [r2, #12]
    output = false;
    cf60:	68fa      	ldr	r2, [r7, #12]
    cf62:	f04f 0300 	mov.w	r3, #0	; 0x0
    cf66:	7393      	strb	r3, [r2, #14]
    actif = true;
    cf68:	68fa      	ldr	r2, [r7, #12]
    cf6a:	f04f 0301 	mov.w	r3, #1	; 0x1
    cf6e:	73d3      	strb	r3, [r2, #15]
    seuilDetection = seuil;
    cf70:	69bb      	ldr	r3, [r7, #24]
    cf72:	b29b      	uxth	r3, r3
    cf74:	68fa      	ldr	r2, [r7, #12]
    cf76:	8293      	strh	r3, [r2, #20]
    value = 0;
    cf78:	68fa      	ldr	r2, [r7, #12]
    cf7a:	f04f 0300 	mov.w	r3, #0	; 0x0
    cf7e:	6113      	str	r3, [r2, #16]
    #ifndef ROBOTHW
    this->evt = false;
    #endif

}
    cf80:	68fb      	ldr	r3, [r7, #12]
    cf82:	4618      	mov	r0, r3
    cf84:	f107 0710 	add.w	r7, r7, #16	; 0x10
    cf88:	46bd      	mov	sp, r7
    cf8a:	bd80      	pop	{r7, pc}
    cf8c:	00021a50 	.word	0x00021a50

0000cf90 <_ZN5Timer7getTIMxEv>:
    else if (m_TIMx == TIM5)
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5,ENABLE);
}

// Retourne le timer (TIM1, TIM2 ou TIM3), voir TIM_TypeDef.
TIM_TypeDef* Timer::getTIMx()
    cf90:	b480      	push	{r7}
    cf92:	b083      	sub	sp, #12
    cf94:	af00      	add	r7, sp, #0
    cf96:	6078      	str	r0, [r7, #4]
{
    return m_TIMx;
    cf98:	687b      	ldr	r3, [r7, #4]
    cf9a:	681b      	ldr	r3, [r3, #0]
}
    cf9c:	4618      	mov	r0, r3
    cf9e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    cfa2:	46bd      	mov	sp, r7
    cfa4:	bc80      	pop	{r7}
    cfa6:	4770      	bx	lr

0000cfa8 <_ZN5Timer9getPeriodEv>:
    timInit.TIM_RepetitionCounter = 0;

    TIM_TimeBaseInit(getTIMx(), &timInit);
}

uint16_t Timer::getPeriod()
    cfa8:	b480      	push	{r7}
    cfaa:	b083      	sub	sp, #12
    cfac:	af00      	add	r7, sp, #0
    cfae:	6078      	str	r0, [r7, #4]
{
    return m_period;
    cfb0:	687b      	ldr	r3, [r7, #4]
    cfb2:	891b      	ldrh	r3, [r3, #8]
}
    cfb4:	4618      	mov	r0, r3
    cfb6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    cfba:	46bd      	mov	sp, r7
    cfbc:	bc80      	pop	{r7}
    cfbe:	4770      	bx	lr

0000cfc0 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>:

void Timer::enableTimerClock(TIM_TypeDef* TIMx)
    cfc0:	b580      	push	{r7, lr}
    cfc2:	b082      	sub	sp, #8
    cfc4:	af00      	add	r7, sp, #0
    cfc6:	6078      	str	r0, [r7, #4]
{
    if (TIMx == TIM1)
    cfc8:	687a      	ldr	r2, [r7, #4]
    cfca:	4b27      	ldr	r3, [pc, #156]	(d068 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa8>)
    cfcc:	429a      	cmp	r2, r3
    cfce:	d106      	bne.n	cfde <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x1e>
    {
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
    cfd0:	f44f 6000 	mov.w	r0, #2048	; 0x800
    cfd4:	f04f 0101 	mov.w	r1, #1	; 0x1
    cfd8:	f7f5 fa36 	bl	2448 <RCC_APB2PeriphClockCmd>
    cfdc:	e040      	b.n	d060 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM2)
    cfde:	687b      	ldr	r3, [r7, #4]
    cfe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    cfe4:	d106      	bne.n	cff4 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x34>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
    cfe6:	f04f 0001 	mov.w	r0, #1	; 0x1
    cfea:	f04f 0101 	mov.w	r1, #1	; 0x1
    cfee:	f7f5 fa4d 	bl	248c <RCC_APB1PeriphClockCmd>
    cff2:	e035      	b.n	d060 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM3)
    cff4:	687a      	ldr	r2, [r7, #4]
    cff6:	4b1d      	ldr	r3, [pc, #116]	(d06c <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xac>)
    cff8:	429a      	cmp	r2, r3
    cffa:	d106      	bne.n	d00a <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x4a>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
    cffc:	f04f 0002 	mov.w	r0, #2	; 0x2
    d000:	f04f 0101 	mov.w	r1, #1	; 0x1
    d004:	f7f5 fa42 	bl	248c <RCC_APB1PeriphClockCmd>
    d008:	e02a      	b.n	d060 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM4)
    d00a:	687a      	ldr	r2, [r7, #4]
    d00c:	4b18      	ldr	r3, [pc, #96]	(d070 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xb0>)
    d00e:	429a      	cmp	r2, r3
    d010:	d106      	bne.n	d020 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x60>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
    d012:	f04f 0004 	mov.w	r0, #4	; 0x4
    d016:	f04f 0101 	mov.w	r1, #1	; 0x1
    d01a:	f7f5 fa37 	bl	248c <RCC_APB1PeriphClockCmd>
    d01e:	e01f      	b.n	d060 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM5)
    d020:	687a      	ldr	r2, [r7, #4]
    d022:	4b14      	ldr	r3, [pc, #80]	(d074 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xb4>)
    d024:	429a      	cmp	r2, r3
    d026:	d106      	bne.n	d036 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x76>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
    d028:	f04f 0008 	mov.w	r0, #8	; 0x8
    d02c:	f04f 0101 	mov.w	r1, #1	; 0x1
    d030:	f7f5 fa2c 	bl	248c <RCC_APB1PeriphClockCmd>
    d034:	e014      	b.n	d060 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM6)
    d036:	687a      	ldr	r2, [r7, #4]
    d038:	4b0f      	ldr	r3, [pc, #60]	(d078 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xb8>)
    d03a:	429a      	cmp	r2, r3
    d03c:	d106      	bne.n	d04c <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x8c>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
    d03e:	f04f 0010 	mov.w	r0, #16	; 0x10
    d042:	f04f 0101 	mov.w	r1, #1	; 0x1
    d046:	f7f5 fa21 	bl	248c <RCC_APB1PeriphClockCmd>
    d04a:	e009      	b.n	d060 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM7)
    d04c:	687a      	ldr	r2, [r7, #4]
    d04e:	4b0b      	ldr	r3, [pc, #44]	(d07c <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xbc>)
    d050:	429a      	cmp	r2, r3
    d052:	d105      	bne.n	d060 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
    d054:	f04f 0020 	mov.w	r0, #32	; 0x20
    d058:	f04f 0101 	mov.w	r1, #1	; 0x1
    d05c:	f7f5 fa16 	bl	248c <RCC_APB1PeriphClockCmd>
    }
}
    d060:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d064:	46bd      	mov	sp, r7
    d066:	bd80      	pop	{r7, pc}
    d068:	40012c00 	.word	0x40012c00
    d06c:	40000400 	.word	0x40000400
    d070:	40000800 	.word	0x40000800
    d074:	40000c00 	.word	0x40000c00
    d078:	40001000 	.word	0x40001000
    d07c:	40001400 	.word	0x40001400

0000d080 <_ZN5Timer11enableClockEv>:
#include "timerHandler.h"

// Propage le signal de l’horloge système au timer.
void Timer::enableClock()
    d080:	b580      	push	{r7, lr}
    d082:	b082      	sub	sp, #8
    d084:	af00      	add	r7, sp, #0
    d086:	6078      	str	r0, [r7, #4]
{
    if (m_TIMx == TIM1)
    d088:	687b      	ldr	r3, [r7, #4]
    d08a:	681a      	ldr	r2, [r3, #0]
    d08c:	4b1e      	ldr	r3, [pc, #120]	(d108 <_ZN5Timer11enableClockEv+0x88>)
    d08e:	429a      	cmp	r2, r3
    d090:	d106      	bne.n	d0a0 <_ZN5Timer11enableClockEv+0x20>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,ENABLE);
    d092:	f44f 6000 	mov.w	r0, #2048	; 0x800
    d096:	f04f 0101 	mov.w	r1, #1	; 0x1
    d09a:	f7f5 f9d5 	bl	2448 <RCC_APB2PeriphClockCmd>
    d09e:	e02e      	b.n	d0fe <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM2)
    d0a0:	687b      	ldr	r3, [r7, #4]
    d0a2:	681b      	ldr	r3, [r3, #0]
    d0a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    d0a8:	d106      	bne.n	d0b8 <_ZN5Timer11enableClockEv+0x38>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
    d0aa:	f04f 0001 	mov.w	r0, #1	; 0x1
    d0ae:	f04f 0101 	mov.w	r1, #1	; 0x1
    d0b2:	f7f5 f9eb 	bl	248c <RCC_APB1PeriphClockCmd>
    d0b6:	e022      	b.n	d0fe <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM3)
    d0b8:	687b      	ldr	r3, [r7, #4]
    d0ba:	681a      	ldr	r2, [r3, #0]
    d0bc:	4b13      	ldr	r3, [pc, #76]	(d10c <_ZN5Timer11enableClockEv+0x8c>)
    d0be:	429a      	cmp	r2, r3
    d0c0:	d106      	bne.n	d0d0 <_ZN5Timer11enableClockEv+0x50>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
    d0c2:	f04f 0002 	mov.w	r0, #2	; 0x2
    d0c6:	f04f 0101 	mov.w	r1, #1	; 0x1
    d0ca:	f7f5 f9df 	bl	248c <RCC_APB1PeriphClockCmd>
    d0ce:	e016      	b.n	d0fe <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM4)
    d0d0:	687b      	ldr	r3, [r7, #4]
    d0d2:	681a      	ldr	r2, [r3, #0]
    d0d4:	4b0e      	ldr	r3, [pc, #56]	(d110 <_ZN5Timer11enableClockEv+0x90>)
    d0d6:	429a      	cmp	r2, r3
    d0d8:	d106      	bne.n	d0e8 <_ZN5Timer11enableClockEv+0x68>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4,ENABLE);
    d0da:	f04f 0004 	mov.w	r0, #4	; 0x4
    d0de:	f04f 0101 	mov.w	r1, #1	; 0x1
    d0e2:	f7f5 f9d3 	bl	248c <RCC_APB1PeriphClockCmd>
    d0e6:	e00a      	b.n	d0fe <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM5)
    d0e8:	687b      	ldr	r3, [r7, #4]
    d0ea:	681a      	ldr	r2, [r3, #0]
    d0ec:	4b09      	ldr	r3, [pc, #36]	(d114 <_ZN5Timer11enableClockEv+0x94>)
    d0ee:	429a      	cmp	r2, r3
    d0f0:	d105      	bne.n	d0fe <_ZN5Timer11enableClockEv+0x7e>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5,ENABLE);
    d0f2:	f04f 0008 	mov.w	r0, #8	; 0x8
    d0f6:	f04f 0101 	mov.w	r1, #1	; 0x1
    d0fa:	f7f5 f9c7 	bl	248c <RCC_APB1PeriphClockCmd>
}
    d0fe:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d102:	46bd      	mov	sp, r7
    d104:	bd80      	pop	{r7, pc}
    d106:	46c0      	nop			(mov r8, r8)
    d108:	40012c00 	.word	0x40012c00
    d10c:	40000400 	.word	0x40000400
    d110:	40000800 	.word	0x40000800
    d114:	40000c00 	.word	0x40000c00

0000d118 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>:
TIM_TypeDef* Timer::getTIMx()
{
    return m_TIMx;
}

Timer::Timer(TIM_TypeDef* TIMx, uint16_t period, uint16_t prescaler, ClkDivision clockDivision)
    d118:	b580      	push	{r7, lr}
    d11a:	b088      	sub	sp, #32
    d11c:	af00      	add	r7, sp, #0
    d11e:	60f8      	str	r0, [r7, #12]
    d120:	60b9      	str	r1, [r7, #8]
    d122:	4619      	mov	r1, r3
    d124:	4613      	mov	r3, r2
    d126:	80fb      	strh	r3, [r7, #6]
    d128:	460b      	mov	r3, r1
    d12a:	80bb      	strh	r3, [r7, #4]
{
    m_TIMx = TIMx;
    d12c:	68fa      	ldr	r2, [r7, #12]
    d12e:	68bb      	ldr	r3, [r7, #8]
    d130:	6013      	str	r3, [r2, #0]
    m_period = period;
    d132:	68fa      	ldr	r2, [r7, #12]
    d134:	88fb      	ldrh	r3, [r7, #6]
    d136:	8113      	strh	r3, [r2, #8]
    m_prescaler = prescaler;
    d138:	68fa      	ldr	r2, [r7, #12]
    d13a:	88bb      	ldrh	r3, [r7, #4]
    d13c:	8093      	strh	r3, [r2, #4]
    m_div = clockDivision;
    d13e:	68fa      	ldr	r2, [r7, #12]
    d140:	8d3b      	ldrh	r3, [r7, #40]
    d142:	80d3      	strh	r3, [r2, #6]

    enableClock();
    d144:	68f8      	ldr	r0, [r7, #12]
    d146:	f7ff ff9b 	bl	d080 <_ZN5Timer11enableClockEv>

    TIM_TimeBaseInitTypeDef timInit;
    timInit.TIM_Prescaler = prescaler;
    d14a:	88bb      	ldrh	r3, [r7, #4]
    d14c:	82fb      	strh	r3, [r7, #22]
    timInit.TIM_CounterMode = TIM_CounterMode_Up;
    d14e:	f04f 0300 	mov.w	r3, #0	; 0x0
    d152:	833b      	strh	r3, [r7, #24]
    timInit.TIM_Period = period;
    d154:	88fb      	ldrh	r3, [r7, #6]
    d156:	837b      	strh	r3, [r7, #26]
    timInit.TIM_ClockDivision = clockDivision;
    d158:	8d3b      	ldrh	r3, [r7, #40]
    d15a:	83bb      	strh	r3, [r7, #28]
    timInit.TIM_RepetitionCounter = 0;
    d15c:	f04f 0300 	mov.w	r3, #0	; 0x0
    d160:	77bb      	strb	r3, [r7, #30]

    TIM_TimeBaseInit(getTIMx(), &timInit);
    d162:	68f8      	ldr	r0, [r7, #12]
    d164:	f7ff ff14 	bl	cf90 <_ZN5Timer7getTIMxEv>
    d168:	4603      	mov	r3, r0
    d16a:	f107 0216 	add.w	r2, r7, #22	; 0x16
    d16e:	4618      	mov	r0, r3
    d170:	4611      	mov	r1, r2
    d172:	f7f5 fb61 	bl	2838 <TIM_TimeBaseInit>
}
    d176:	68fb      	ldr	r3, [r7, #12]
    d178:	4618      	mov	r0, r3
    d17a:	f107 0720 	add.w	r7, r7, #32	; 0x20
    d17e:	46bd      	mov	sp, r7
    d180:	bd80      	pop	{r7, pc}
    d182:	46c0      	nop			(mov r8, r8)

0000d184 <_ZN5TimerC2EP11TIM_TypeDefttNS_11ClkDivisionE>:
TIM_TypeDef* Timer::getTIMx()
{
    return m_TIMx;
}

Timer::Timer(TIM_TypeDef* TIMx, uint16_t period, uint16_t prescaler, ClkDivision clockDivision)
    d184:	b580      	push	{r7, lr}
    d186:	b088      	sub	sp, #32
    d188:	af00      	add	r7, sp, #0
    d18a:	60f8      	str	r0, [r7, #12]
    d18c:	60b9      	str	r1, [r7, #8]
    d18e:	4619      	mov	r1, r3
    d190:	4613      	mov	r3, r2
    d192:	80fb      	strh	r3, [r7, #6]
    d194:	460b      	mov	r3, r1
    d196:	80bb      	strh	r3, [r7, #4]
{
    m_TIMx = TIMx;
    d198:	68fa      	ldr	r2, [r7, #12]
    d19a:	68bb      	ldr	r3, [r7, #8]
    d19c:	6013      	str	r3, [r2, #0]
    m_period = period;
    d19e:	68fa      	ldr	r2, [r7, #12]
    d1a0:	88fb      	ldrh	r3, [r7, #6]
    d1a2:	8113      	strh	r3, [r2, #8]
    m_prescaler = prescaler;
    d1a4:	68fa      	ldr	r2, [r7, #12]
    d1a6:	88bb      	ldrh	r3, [r7, #4]
    d1a8:	8093      	strh	r3, [r2, #4]
    m_div = clockDivision;
    d1aa:	68fa      	ldr	r2, [r7, #12]
    d1ac:	8d3b      	ldrh	r3, [r7, #40]
    d1ae:	80d3      	strh	r3, [r2, #6]

    enableClock();
    d1b0:	68f8      	ldr	r0, [r7, #12]
    d1b2:	f7ff ff65 	bl	d080 <_ZN5Timer11enableClockEv>

    TIM_TimeBaseInitTypeDef timInit;
    timInit.TIM_Prescaler = prescaler;
    d1b6:	88bb      	ldrh	r3, [r7, #4]
    d1b8:	82fb      	strh	r3, [r7, #22]
    timInit.TIM_CounterMode = TIM_CounterMode_Up;
    d1ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    d1be:	833b      	strh	r3, [r7, #24]
    timInit.TIM_Period = period;
    d1c0:	88fb      	ldrh	r3, [r7, #6]
    d1c2:	837b      	strh	r3, [r7, #26]
    timInit.TIM_ClockDivision = clockDivision;
    d1c4:	8d3b      	ldrh	r3, [r7, #40]
    d1c6:	83bb      	strh	r3, [r7, #28]
    timInit.TIM_RepetitionCounter = 0;
    d1c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    d1cc:	77bb      	strb	r3, [r7, #30]

    TIM_TimeBaseInit(getTIMx(), &timInit);
    d1ce:	68f8      	ldr	r0, [r7, #12]
    d1d0:	f7ff fede 	bl	cf90 <_ZN5Timer7getTIMxEv>
    d1d4:	4603      	mov	r3, r0
    d1d6:	f107 0216 	add.w	r2, r7, #22	; 0x16
    d1da:	4618      	mov	r0, r3
    d1dc:	4611      	mov	r1, r2
    d1de:	f7f5 fb2b 	bl	2838 <TIM_TimeBaseInit>
}
    d1e2:	68fb      	ldr	r3, [r7, #12]
    d1e4:	4618      	mov	r0, r3
    d1e6:	f107 0720 	add.w	r7, r7, #32	; 0x20
    d1ea:	46bd      	mov	sp, r7
    d1ec:	bd80      	pop	{r7, pc}
    d1ee:	46c0      	nop			(mov r8, r8)

0000d1f0 <_ZNK7Tirette7enleveeEv>:
        buffer |= enlevee();
    }
}

// est ce que la tirette est enlevée ?
bool Tirette::enlevee() const
    d1f0:	b580      	push	{r7, lr}
    d1f2:	b082      	sub	sp, #8
    d1f4:	af00      	add	r7, sp, #0
    d1f6:	6078      	str	r0, [r7, #4]
{
    #ifdef STM32F40_41xxx
        return GPIO_ReadInputDataBit(GPIOx, GPIO_Pin_x) == Bit_RESET;
    #else
        return GPIO_ReadInputDataBit(GPIOx, GPIO_Pin_x) == Bit_SET;
    d1f8:	687b      	ldr	r3, [r7, #4]
    d1fa:	681a      	ldr	r2, [r3, #0]
    d1fc:	687b      	ldr	r3, [r7, #4]
    d1fe:	889b      	ldrh	r3, [r3, #4]
    d200:	4610      	mov	r0, r2
    d202:	4619      	mov	r1, r3
    d204:	f7f4 fb4e 	bl	18a4 <GPIO_ReadInputDataBit>
    d208:	4603      	mov	r3, r0
    d20a:	2b01      	cmp	r3, #1
    d20c:	bf14      	ite	ne
    d20e:	2300      	movne	r3, #0
    d210:	2301      	moveq	r3, #1
    d212:	b2db      	uxtb	r3, r3
    #endif
}
    d214:	4618      	mov	r0, r3
    d216:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d21a:	46bd      	mov	sp, r7
    d21c:	bd80      	pop	{r7, pc}
    d21e:	46c0      	nop			(mov r8, r8)

0000d220 <_ZNK7Tirette14attendreRemiseEv>:
        buffer |= !enlevee();
    }
}

// attends jusqu'à ce que la tirette soit remise
void Tirette::attendreRemise() const
    d220:	b580      	push	{r7, lr}
    d222:	b084      	sub	sp, #16
    d224:	af00      	add	r7, sp, #0
    d226:	6078      	str	r0, [r7, #4]
{
    Remote::log("Waiting for 'tirette remise'");
    d228:	4b16      	ldr	r3, [pc, #88]	(d284 <_ZNK7Tirette14attendreRemiseEv+0x64>)
    d22a:	4618      	mov	r0, r3
    d22c:	f7ff fbc0 	bl	c9b0 <_ZN6Remote3logEPc>

    int buffer = 0xffffffff;
    d230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d234:	60fb      	str	r3, [r7, #12]
    d236:	e01d      	b.n	d274 <_ZNK7Tirette14attendreRemiseEv+0x54>
    while (buffer)
    {
        Remote::getSingleton()->update(true);
    d238:	f7ff fb96 	bl	c968 <_ZN6Remote12getSingletonEv>
    d23c:	4603      	mov	r3, r0
    d23e:	4618      	mov	r0, r3
    d240:	f04f 0101 	mov.w	r1, #1	; 0x1
    d244:	f7ff fbe8 	bl	ca18 <_ZN6Remote6updateEb>
        if (Remote::getSingleton()->isRemoteMode())
    d248:	f7ff fb8e 	bl	c968 <_ZN6Remote12getSingletonEv>
    d24c:	4603      	mov	r3, r0
    d24e:	4618      	mov	r0, r3
    d250:	f7ff fa80 	bl	c754 <_ZN6Remote12isRemoteModeEv>
    d254:	4603      	mov	r3, r0
    d256:	2b00      	cmp	r3, #0
    d258:	d10f      	bne.n	d27a <_ZNK7Tirette14attendreRemiseEv+0x5a>
            break;

        buffer <<= 1;
    d25a:	68fb      	ldr	r3, [r7, #12]
    d25c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d260:	60fb      	str	r3, [r7, #12]
        buffer |= enlevee();
    d262:	6878      	ldr	r0, [r7, #4]
    d264:	f7ff ffc4 	bl	d1f0 <_ZNK7Tirette7enleveeEv>
    d268:	4603      	mov	r3, r0
    d26a:	461a      	mov	r2, r3
    d26c:	68fb      	ldr	r3, [r7, #12]
    d26e:	ea43 0302 	orr.w	r3, r3, r2
    d272:	60fb      	str	r3, [r7, #12]
void Tirette::attendreRemise() const
{
    Remote::log("Waiting for 'tirette remise'");

    int buffer = 0xffffffff;
    while (buffer)
    d274:	68fb      	ldr	r3, [r7, #12]
    d276:	2b00      	cmp	r3, #0
    d278:	d1de      	bne.n	d238 <_ZNK7Tirette14attendreRemiseEv+0x18>
            break;

        buffer <<= 1;
        buffer |= enlevee();
    }
}
    d27a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d27e:	46bd      	mov	sp, r7
    d280:	bd80      	pop	{r7, pc}
    d282:	46c0      	nop			(mov r8, r8)
    d284:	00021a60 	.word	0x00021a60

0000d288 <_ZNK7Tirette15attendreEnleveeEv>:
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx_tirette, &GPIO_InitStructure);
}

// attends jusqu'à ce que la tirette soit enlevée
void Tirette::attendreEnlevee() const
    d288:	b580      	push	{r7, lr}
    d28a:	b084      	sub	sp, #16
    d28c:	af00      	add	r7, sp, #0
    d28e:	6078      	str	r0, [r7, #4]
{
    Remote::log("Waiting for 'tirette enleve'");
    d290:	4b17      	ldr	r3, [pc, #92]	(d2f0 <_ZNK7Tirette15attendreEnleveeEv+0x68>)
    d292:	4618      	mov	r0, r3
    d294:	f7ff fb8c 	bl	c9b0 <_ZN6Remote3logEPc>

    int buffer = 0xffffffff;
    d298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d29c:	60fb      	str	r3, [r7, #12]
    d29e:	e020      	b.n	d2e2 <_ZNK7Tirette15attendreEnleveeEv+0x5a>
    //int waiting = 0;
    while (buffer)
    {
        Remote::getSingleton()->update(true);
    d2a0:	f7ff fb62 	bl	c968 <_ZN6Remote12getSingletonEv>
    d2a4:	4603      	mov	r3, r0
    d2a6:	4618      	mov	r0, r3
    d2a8:	f04f 0101 	mov.w	r1, #1	; 0x1
    d2ac:	f7ff fbb4 	bl	ca18 <_ZN6Remote6updateEb>
        if (Remote::getSingleton()->isRemoteMode())
    d2b0:	f7ff fb5a 	bl	c968 <_ZN6Remote12getSingletonEv>
    d2b4:	4603      	mov	r3, r0
    d2b6:	4618      	mov	r0, r3
    d2b8:	f7ff fa4c 	bl	c754 <_ZN6Remote12isRemoteModeEv>
    d2bc:	4603      	mov	r3, r0
    d2be:	2b00      	cmp	r3, #0
    d2c0:	d112      	bne.n	d2e8 <_ZNK7Tirette15attendreEnleveeEv+0x60>
            break;

        buffer <<= 1;
    d2c2:	68fb      	ldr	r3, [r7, #12]
    d2c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d2c8:	60fb      	str	r3, [r7, #12]
        buffer |= !enlevee();
    d2ca:	6878      	ldr	r0, [r7, #4]
    d2cc:	f7ff ff90 	bl	d1f0 <_ZNK7Tirette7enleveeEv>
    d2d0:	4603      	mov	r3, r0
    d2d2:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d2d6:	b2db      	uxtb	r3, r3
    d2d8:	461a      	mov	r2, r3
    d2da:	68fb      	ldr	r3, [r7, #12]
    d2dc:	ea43 0302 	orr.w	r3, r3, r2
    d2e0:	60fb      	str	r3, [r7, #12]
{
    Remote::log("Waiting for 'tirette enleve'");

    int buffer = 0xffffffff;
    //int waiting = 0;
    while (buffer)
    d2e2:	68fb      	ldr	r3, [r7, #12]
    d2e4:	2b00      	cmp	r3, #0
    d2e6:	d1db      	bne.n	d2a0 <_ZNK7Tirette15attendreEnleveeEv+0x18>
            break;

        buffer <<= 1;
        buffer |= !enlevee();
    }
}
    d2e8:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d2ec:	46bd      	mov	sp, r7
    d2ee:	bd80      	pop	{r7, pc}
    d2f0:	00021a80 	.word	0x00021a80

0000d2f4 <_ZN7TiretteC1EP12GPIO_TypeDeft>:
#include "remote.h"
#include "leds.h"


// initialise la pin de la tirette
Tirette::Tirette(GPIO_TypeDef* GPIOx_tirette, uint16_t GPIO_Pin_x_tirette)
    d2f4:	b580      	push	{r7, lr}
    d2f6:	b086      	sub	sp, #24
    d2f8:	af00      	add	r7, sp, #0
    d2fa:	60f8      	str	r0, [r7, #12]
    d2fc:	60b9      	str	r1, [r7, #8]
    d2fe:	4613      	mov	r3, r2
    d300:	80fb      	strh	r3, [r7, #6]
    : GPIOx(GPIOx_tirette), GPIO_Pin_x(GPIO_Pin_x_tirette)
    d302:	68fa      	ldr	r2, [r7, #12]
    d304:	68bb      	ldr	r3, [r7, #8]
    d306:	6013      	str	r3, [r2, #0]
    d308:	68fa      	ldr	r2, [r7, #12]
    d30a:	88fb      	ldrh	r3, [r7, #6]
    d30c:	8093      	strh	r3, [r2, #4]
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_x_tirette;
    d30e:	88fb      	ldrh	r3, [r7, #6]
    d310:	82bb      	strh	r3, [r7, #20]

    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    d312:	f04f 0348 	mov.w	r3, #72	; 0x48
    d316:	75fb      	strb	r3, [r7, #23]
    #endif

    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    d318:	f04f 0303 	mov.w	r3, #3	; 0x3
    d31c:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_tirette, &GPIO_InitStructure);
    d31e:	f107 0314 	add.w	r3, r7, #20	; 0x14
    d322:	68b8      	ldr	r0, [r7, #8]
    d324:	4619      	mov	r1, r3
    d326:	f7f4 f9c3 	bl	16b0 <GPIO_Init>
}
    d32a:	68fb      	ldr	r3, [r7, #12]
    d32c:	4618      	mov	r0, r3
    d32e:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d332:	46bd      	mov	sp, r7
    d334:	bd80      	pop	{r7, pc}
    d336:	46c0      	nop			(mov r8, r8)

0000d338 <_ZN7TiretteC2EP12GPIO_TypeDeft>:
#include "remote.h"
#include "leds.h"


// initialise la pin de la tirette
Tirette::Tirette(GPIO_TypeDef* GPIOx_tirette, uint16_t GPIO_Pin_x_tirette)
    d338:	b580      	push	{r7, lr}
    d33a:	b086      	sub	sp, #24
    d33c:	af00      	add	r7, sp, #0
    d33e:	60f8      	str	r0, [r7, #12]
    d340:	60b9      	str	r1, [r7, #8]
    d342:	4613      	mov	r3, r2
    d344:	80fb      	strh	r3, [r7, #6]
    : GPIOx(GPIOx_tirette), GPIO_Pin_x(GPIO_Pin_x_tirette)
    d346:	68fa      	ldr	r2, [r7, #12]
    d348:	68bb      	ldr	r3, [r7, #8]
    d34a:	6013      	str	r3, [r2, #0]
    d34c:	68fa      	ldr	r2, [r7, #12]
    d34e:	88fb      	ldrh	r3, [r7, #6]
    d350:	8093      	strh	r3, [r2, #4]
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_x_tirette;
    d352:	88fb      	ldrh	r3, [r7, #6]
    d354:	82bb      	strh	r3, [r7, #20]

    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    d356:	f04f 0348 	mov.w	r3, #72	; 0x48
    d35a:	75fb      	strb	r3, [r7, #23]
    #endif

    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    d35c:	f04f 0303 	mov.w	r3, #3	; 0x3
    d360:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_tirette, &GPIO_InitStructure);
    d362:	f107 0314 	add.w	r3, r7, #20	; 0x14
    d366:	68b8      	ldr	r0, [r7, #8]
    d368:	4619      	mov	r1, r3
    d36a:	f7f4 f9a1 	bl	16b0 <GPIO_Init>
}
    d36e:	68fb      	ldr	r3, [r7, #12]
    d370:	4618      	mov	r0, r3
    d372:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d376:	46bd      	mov	sp, r7
    d378:	bd80      	pop	{r7, pc}
    d37a:	46c0      	nop			(mov r8, r8)

0000d37c <_ZN8Tourelle9getAlerteEv>:
//{
//    this->zonesCritiques[numeroZone][0] = (uint16_t) -1;
//    this->zonesCritiques[numeroZone][1] = (uint16_t) -1;
//}

bool Tourelle::getAlerte(void)
    d37c:	b480      	push	{r7}
    d37e:	b083      	sub	sp, #12
    d380:	af00      	add	r7, sp, #0
    d382:	6078      	str	r0, [r7, #4]
{
    return this->alerte;
    d384:	687b      	ldr	r3, [r7, #4]
    d386:	781b      	ldrb	r3, [r3, #0]
}
    d388:	4618      	mov	r0, r3
    d38a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d38e:	46bd      	mov	sp, r7
    d390:	bc80      	pop	{r7}
    d392:	4770      	bx	lr

0000d394 <_ZN8Tourelle12updateSimpleEv>:
//    this->alerte = newAlerte;
//
//    return newAlerte;
//}

bool Tourelle::updateSimple(void)
    d394:	b480      	push	{r7}
    d396:	b085      	sub	sp, #20
    d398:	af00      	add	r7, sp, #0
    d39a:	6078      	str	r0, [r7, #4]
{
    //Copie locale pour être thread-safe, et avoir une chance infime de louper un objet une fois
    uint8_t nombreObjets = nombreObjetDetecte;
    d39c:	4b0f      	ldr	r3, [pc, #60]	(d3dc <_ZN8Tourelle12updateSimpleEv+0x48>)
    d39e:	781b      	ldrb	r3, [r3, #0]
    d3a0:	73fb      	strb	r3, [r7, #15]
    nombreObjetDetecte = 0;
    d3a2:	4a0e      	ldr	r2, [pc, #56]	(d3dc <_ZN8Tourelle12updateSimpleEv+0x48>)
    d3a4:	f04f 0300 	mov.w	r3, #0	; 0x0
    d3a8:	7013      	strb	r3, [r2, #0]
    if(nombreObjets)
    d3aa:	7bfb      	ldrb	r3, [r7, #15]
    d3ac:	2b00      	cmp	r3, #0
    d3ae:	d007      	beq.n	d3c0 <_ZN8Tourelle12updateSimpleEv+0x2c>
    {
        this->alerte = true;
    d3b0:	687b      	ldr	r3, [r7, #4]
    d3b2:	f04f 0201 	mov.w	r2, #1	; 0x1
    d3b6:	701a      	strb	r2, [r3, #0]
        return true;
    d3b8:	f04f 0301 	mov.w	r3, #1	; 0x1
    d3bc:	603b      	str	r3, [r7, #0]
    d3be:	e006      	b.n	d3ce <_ZN8Tourelle12updateSimpleEv+0x3a>
    }
    else
    {
        this->alerte = false;
    d3c0:	687b      	ldr	r3, [r7, #4]
    d3c2:	f04f 0200 	mov.w	r2, #0	; 0x0
    d3c6:	701a      	strb	r2, [r3, #0]
        return false;
    d3c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    d3cc:	603b      	str	r3, [r7, #0]
    d3ce:	683b      	ldr	r3, [r7, #0]
    }
}
    d3d0:	4618      	mov	r0, r3
    d3d2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    d3d6:	46bd      	mov	sp, r7
    d3d8:	bc80      	pop	{r7}
    d3da:	4770      	bx	lr
    d3dc:	20000585 	.word	0x20000585

0000d3e0 <EXTI3_IRQHandler>:
/**
  * @brief  This function handles External line 3 interrupt request.
  * @param  None
  * @retval None
  */
extern "C" void EXTI3_IRQHandler(void)
    d3e0:	b580      	push	{r7, lr}
    d3e2:	af00      	add	r7, sp, #0
{
    if(EXTI_GetITStatus(EXTI_Line3) != RESET)
    d3e4:	f04f 0008 	mov.w	r0, #8	; 0x8
    d3e8:	f7f4 f88e 	bl	1508 <EXTI_GetITStatus>
    d3ec:	4603      	mov	r3, r0
    d3ee:	2b00      	cmp	r3, #0
    d3f0:	bf0c      	ite	eq
    d3f2:	2300      	moveq	r3, #0
    d3f4:	2301      	movne	r3, #1
    d3f6:	b2db      	uxtb	r3, r3
    d3f8:	2b00      	cmp	r3, #0
    d3fa:	d00c      	beq.n	d416 <EXTI3_IRQHandler+0x36>

//        if(nombreObjetDetecte < 20)
//        {
            //Stocke l'instant de détection de l'objet
            //objectDetectionInstant[nombreObjetDetecte] = TIM_GetCounter(TIM6);
            nombreObjetDetecte++;
    d3fc:	4b07      	ldr	r3, [pc, #28]	(d41c <EXTI3_IRQHandler+0x3c>)
    d3fe:	781b      	ldrb	r3, [r3, #0]
    d400:	f103 0301 	add.w	r3, r3, #1	; 0x1
    d404:	b2db      	uxtb	r3, r3
    d406:	4a05      	ldr	r2, [pc, #20]	(d41c <EXTI3_IRQHandler+0x3c>)
    d408:	7013      	strb	r3, [r2, #0]

            allumerLED2();
    d40a:	f7fe fd01 	bl	be10 <_Z11allumerLED2v>

//        }

        /* Clear the EXTI line 2 pending bit */
        EXTI_ClearITPendingBit(EXTI_Line3);
    d40e:	f04f 0008 	mov.w	r0, #8	; 0x8
    d412:	f7f4 f8a3 	bl	155c <EXTI_ClearITPendingBit>
    }
}
    d416:	46bd      	mov	sp, r7
    d418:	bd80      	pop	{r7, pc}
    d41a:	46c0      	nop			(mov r8, r8)
    d41c:	20000585 	.word	0x20000585

0000d420 <_Z16EXTILine5_Configv>:
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
#endif
}

void EXTILine5_Config(void)
    d420:	b580      	push	{r7, lr}
    d422:	b084      	sub	sp, #16
    d424:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef   NVIC_InitStructure;

    EXTI_InitTypeDef   EXTI_InitStructure;

    /* Enable GPIOA clock */
    RCC_AHBPeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
    d426:	f04f 0020 	mov.w	r0, #32	; 0x20
    d42a:	f04f 0101 	mov.w	r1, #1	; 0x1
    d42e:	f7f4 ffe9 	bl	2404 <RCC_AHBPeriphClockCmd>
    //RCC_AHBPeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    /* AFIO clock enabled dans initialisation.cpp */


    /* Configure PA3 pin as input floating */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
    d432:	f04f 0328 	mov.w	r3, #40	; 0x28
    d436:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
    d438:	f04f 0320 	mov.w	r3, #32	; 0x20
    d43c:	81bb      	strh	r3, [r7, #12]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    d43e:	f107 030c 	add.w	r3, r7, #12	; 0xc
    d442:	4817      	ldr	r0, [pc, #92]	(d4a0 <_Z16EXTILine5_Configv+0x80>)
    d444:	4619      	mov	r1, r3
    d446:	f7f4 f933 	bl	16b0 <GPIO_Init>

    /* Connect EXTI Line3 to PD5 pin */
    //GPIO_EventOutputConfig(GPIO_PortSourceGPIOA, GPIO_PinSource3);
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource5);
    d44a:	f04f 0003 	mov.w	r0, #3	; 0x3
    d44e:	f04f 0105 	mov.w	r1, #5	; 0x5
    d452:	f7f4 fb93 	bl	1b7c <GPIO_EXTILineConfig>

    /* Configure EXTI Line5 */
    EXTI_InitStructure.EXTI_Line = EXTI_Line5;
    d456:	f04f 0320 	mov.w	r3, #32	; 0x20
    d45a:	603b      	str	r3, [r7, #0]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    d45c:	f04f 0300 	mov.w	r3, #0	; 0x0
    d460:	713b      	strb	r3, [r7, #4]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    d462:	f04f 0308 	mov.w	r3, #8	; 0x8
    d466:	717b      	strb	r3, [r7, #5]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    d468:	f04f 0301 	mov.w	r3, #1	; 0x1
    d46c:	71bb      	strb	r3, [r7, #6]
    EXTI_Init(&EXTI_InitStructure);
    d46e:	463b      	mov	r3, r7
    d470:	4618      	mov	r0, r3
    d472:	f7f3 ff71 	bl	1358 <EXTI_Init>

    /* Enable and set EXTI Line5 Interrupt to the (not anymore) lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;//EXTI5_IRQn;
    d476:	f04f 0317 	mov.w	r3, #23	; 0x17
    d47a:	723b      	strb	r3, [r7, #8]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//0x01 for lowest priority
    d47c:	f04f 0301 	mov.w	r3, #1	; 0x1
    d480:	727b      	strb	r3, [r7, #9]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
    d482:	f04f 0301 	mov.w	r3, #1	; 0x1
    d486:	72bb      	strb	r3, [r7, #10]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    d488:	f04f 0301 	mov.w	r3, #1	; 0x1
    d48c:	72fb      	strb	r3, [r7, #11]
    NVIC_Init(&NVIC_InitStructure);
    d48e:	f107 0308 	add.w	r3, r7, #8	; 0x8
    d492:	4618      	mov	r0, r3
    d494:	f7f2 fec2 	bl	21c <NVIC_Init>
#endif
}
    d498:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d49c:	46bd      	mov	sp, r7
    d49e:	bd80      	pop	{r7, pc}
    d4a0:	40010800 	.word	0x40010800

0000d4a4 <_Z16EXTILine3_Configv>:
/**
  * @brief  Configures EXTI Line3 (connected to PA3 pin) in interrupt mode
  * @param  None
  * @retval None
  */
void EXTILine3_Config(void)
    d4a4:	b580      	push	{r7, lr}
    d4a6:	b084      	sub	sp, #16
    d4a8:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef   NVIC_InitStructure;

    EXTI_InitTypeDef   EXTI_InitStructure;

    /* Enable GPIOA clock */
    RCC_AHBPeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
    d4aa:	f04f 0020 	mov.w	r0, #32	; 0x20
    d4ae:	f04f 0101 	mov.w	r1, #1	; 0x1
    d4b2:	f7f4 ffa7 	bl	2404 <RCC_AHBPeriphClockCmd>
    //RCC_AHBPeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    /* AFIO clock enabled dans initialisation.cpp */


    /* Configure PA3 pin as input floating */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
    d4b6:	f04f 0328 	mov.w	r3, #40	; 0x28
    d4ba:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    d4bc:	f04f 0308 	mov.w	r3, #8	; 0x8
    d4c0:	81bb      	strh	r3, [r7, #12]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    d4c2:	f107 030c 	add.w	r3, r7, #12	; 0xc
    d4c6:	4817      	ldr	r0, [pc, #92]	(d524 <_Z16EXTILine3_Configv+0x80>)
    d4c8:	4619      	mov	r1, r3
    d4ca:	f7f4 f8f1 	bl	16b0 <GPIO_Init>

    /* Connect EXTI Line3 to PD5 pin */
    //GPIO_EventOutputConfig(GPIO_PortSourceGPIOA, GPIO_PinSource3);
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource3);
    d4ce:	f04f 0003 	mov.w	r0, #3	; 0x3
    d4d2:	f04f 0103 	mov.w	r1, #3	; 0x3
    d4d6:	f7f4 fb51 	bl	1b7c <GPIO_EXTILineConfig>

    /* Configure EXTI Line3 */
    EXTI_InitStructure.EXTI_Line = EXTI_Line3;
    d4da:	f04f 0308 	mov.w	r3, #8	; 0x8
    d4de:	603b      	str	r3, [r7, #0]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    d4e0:	f04f 0300 	mov.w	r3, #0	; 0x0
    d4e4:	713b      	strb	r3, [r7, #4]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    d4e6:	f04f 0308 	mov.w	r3, #8	; 0x8
    d4ea:	717b      	strb	r3, [r7, #5]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    d4ec:	f04f 0301 	mov.w	r3, #1	; 0x1
    d4f0:	71bb      	strb	r3, [r7, #6]
    EXTI_Init(&EXTI_InitStructure);
    d4f2:	463b      	mov	r3, r7
    d4f4:	4618      	mov	r0, r3
    d4f6:	f7f3 ff2f 	bl	1358 <EXTI_Init>

    /* Enable and set EXTI Line5 Interrupt to the (not anymore) lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn;//EXTI5_IRQn;
    d4fa:	f04f 0309 	mov.w	r3, #9	; 0x9
    d4fe:	723b      	strb	r3, [r7, #8]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x08;//0x01 for lowest priority
    d500:	f04f 0308 	mov.w	r3, #8	; 0x8
    d504:	727b      	strb	r3, [r7, #9]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
    d506:	f04f 0301 	mov.w	r3, #1	; 0x1
    d50a:	72bb      	strb	r3, [r7, #10]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    d50c:	f04f 0301 	mov.w	r3, #1	; 0x1
    d510:	72fb      	strb	r3, [r7, #11]
    NVIC_Init(&NVIC_InitStructure);
    d512:	f107 0308 	add.w	r3, r7, #8	; 0x8
    d516:	4618      	mov	r0, r3
    d518:	f7f2 fe80 	bl	21c <NVIC_Init>
#endif
}
    d51c:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d520:	46bd      	mov	sp, r7
    d522:	bd80      	pop	{r7, pc}
    d524:	40010800 	.word	0x40010800

0000d528 <_ZN8TourelleC1Ev>:
//uint16_t objectDetectionInstant[20];

/** @brief nombre d'objets détectés */
uint8_t nombreObjetDetecte;

Tourelle::Tourelle()
    d528:	b580      	push	{r7, lr}
    d52a:	b082      	sub	sp, #8
    d52c:	af00      	add	r7, sp, #0
    d52e:	6078      	str	r0, [r7, #4]
{
    alerte = false;
    d530:	687a      	ldr	r2, [r7, #4]
    d532:	f04f 0300 	mov.w	r3, #0	; 0x0
    d536:	7013      	strb	r3, [r2, #0]

    nombreObjetDetecte = 0;
    d538:	4a05      	ldr	r2, [pc, #20]	(d550 <_ZN8TourelleC1Ev+0x28>)
    d53a:	f04f 0300 	mov.w	r3, #0	; 0x0
    d53e:	7013      	strb	r3, [r2, #0]

    //EXTILine2_Config();
    EXTILine3_Config();
    d540:	f7ff ffb0 	bl	d4a4 <_Z16EXTILine3_Configv>
//        EXTILine3_Config();
//    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
//        EXTILine5_Config();
//    #endif

}
    d544:	687b      	ldr	r3, [r7, #4]
    d546:	4618      	mov	r0, r3
    d548:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d54c:	46bd      	mov	sp, r7
    d54e:	bd80      	pop	{r7, pc}
    d550:	20000585 	.word	0x20000585

0000d554 <_ZN8TourelleC2Ev>:
//uint16_t objectDetectionInstant[20];

/** @brief nombre d'objets détectés */
uint8_t nombreObjetDetecte;

Tourelle::Tourelle()
    d554:	b580      	push	{r7, lr}
    d556:	b082      	sub	sp, #8
    d558:	af00      	add	r7, sp, #0
    d55a:	6078      	str	r0, [r7, #4]
{
    alerte = false;
    d55c:	687a      	ldr	r2, [r7, #4]
    d55e:	f04f 0300 	mov.w	r3, #0	; 0x0
    d562:	7013      	strb	r3, [r2, #0]

    nombreObjetDetecte = 0;
    d564:	4a05      	ldr	r2, [pc, #20]	(d57c <_ZN8TourelleC2Ev+0x28>)
    d566:	f04f 0300 	mov.w	r3, #0	; 0x0
    d56a:	7013      	strb	r3, [r2, #0]

    //EXTILine2_Config();
    EXTILine3_Config();
    d56c:	f7ff ff9a 	bl	d4a4 <_Z16EXTILine3_Configv>
//        EXTILine3_Config();
//    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
//        EXTILine5_Config();
//    #endif

}
    d570:	687b      	ldr	r3, [r7, #4]
    d572:	4618      	mov	r0, r3
    d574:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d578:	46bd      	mov	sp, r7
    d57a:	bd80      	pop	{r7, pc}
    d57c:	20000585 	.word	0x20000585

0000d580 <_ZN16UltrasoundSensor7getNameEv>:
UltrasoundSensor::~UltrasoundSensor()
{
    //dtor
}

UltrasoundSensor::UltrasoundName UltrasoundSensor::getName()
    d580:	b480      	push	{r7}
    d582:	b083      	sub	sp, #12
    d584:	af00      	add	r7, sp, #0
    d586:	6078      	str	r0, [r7, #4]
{
    return name;
    d588:	687b      	ldr	r3, [r7, #4]
    d58a:	7b1b      	ldrb	r3, [r3, #12]
}
    d58c:	4618      	mov	r0, r3
    d58e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d592:	46bd      	mov	sp, r7
    d594:	bc80      	pop	{r7}
    d596:	4770      	bx	lr

0000d598 <_ZN16UltrasoundSensor8getValueEv>:


Sensor::OutputSensor UltrasoundSensor::getValue()
    d598:	b580      	push	{r7, lr}
    d59a:	b086      	sub	sp, #24
    d59c:	af00      	add	r7, sp, #0
    d59e:	6038      	str	r0, [r7, #0]
    d5a0:	6079      	str	r1, [r7, #4]
{
    while(!AnalogSensor::conversionFinished());    // au cas où l'interrupt de l'asservissement tombe avant la fin de l'acquisition/conversion
    d5a2:	f7fd f84b 	bl	a63c <_ZN12AnalogSensor18conversionFinishedEv>
    d5a6:	4603      	mov	r3, r0
    d5a8:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d5ac:	b2db      	uxtb	r3, r3
    d5ae:	2b00      	cmp	r3, #0
    d5b0:	d1f7      	bne.n	d5a2 <_ZN16UltrasoundSensor8getValueEv+0xa>
     **     POUR AVOIR LA VALEUR DES CAPTEURS     **
     **                                           **
     **                                           **
     ***********************************************/
    OutputSensor output;
    output.type = ULTRASOUND;
    d5b2:	f04f 0301 	mov.w	r3, #1	; 0x1
    d5b6:	683a      	ldr	r2, [r7, #0]
    d5b8:	7013      	strb	r3, [r2, #0]
    output.b = false;
    d5ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    d5be:	683a      	ldr	r2, [r7, #0]
    d5c0:	7213      	strb	r3, [r2, #8]
    #ifdef ROBOTHW
    output.f = coeff*(*data)/2.;
    d5c2:	687b      	ldr	r3, [r7, #4]
    d5c4:	689b      	ldr	r3, [r3, #8]
    d5c6:	881b      	ldrh	r3, [r3, #0]
    d5c8:	4618      	mov	r0, r3
    d5ca:	f00d f9bb 	bl	1a944 <__aeabi_i2f>
    d5ce:	4602      	mov	r2, r0
    d5d0:	4b09      	ldr	r3, [pc, #36]	(d5f8 <_ZN16UltrasoundSensor8getValueEv+0x60>)
    d5d2:	681b      	ldr	r3, [r3, #0]
    d5d4:	4610      	mov	r0, r2
    d5d6:	4619      	mov	r1, r3
    d5d8:	f00d fa08 	bl	1a9ec <__aeabi_fmul>
    d5dc:	4603      	mov	r3, r0
    d5de:	4618      	mov	r0, r3
    d5e0:	4906      	ldr	r1, [pc, #24]	(d5fc <_ZN16UltrasoundSensor8getValueEv+0x64>)
    d5e2:	f00d fab7 	bl	1ab54 <__aeabi_fdiv>
    d5e6:	4603      	mov	r3, r0
    d5e8:	683a      	ldr	r2, [r7, #0]
    d5ea:	6053      	str	r3, [r2, #4]
    #else
    output.f = 0;
    #endif
    return output;
}
    d5ec:	6838      	ldr	r0, [r7, #0]
    d5ee:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d5f2:	46bd      	mov	sp, r7
    d5f4:	bd80      	pop	{r7, pc}
    d5f6:	46c0      	nop			(mov r8, r8)
    d5f8:	20000028 	.word	0x20000028
    d5fc:	40000000 	.word	0x40000000

0000d600 <_ZN16UltrasoundSensorD0Ev>:
UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
{
    this->name = name;
}

UltrasoundSensor::~UltrasoundSensor()
    d600:	b580      	push	{r7, lr}
    d602:	b082      	sub	sp, #8
    d604:	af00      	add	r7, sp, #0
    d606:	6078      	str	r0, [r7, #4]
    d608:	687a      	ldr	r2, [r7, #4]
    d60a:	4b0a      	ldr	r3, [pc, #40]	(d634 <_ZN16UltrasoundSensorD0Ev+0x34>)
    d60c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    d60e:	687b      	ldr	r3, [r7, #4]
    d610:	4618      	mov	r0, r3
    d612:	f7fd f907 	bl	a824 <_ZN12AnalogSensorD2Ev>
    d616:	f04f 0301 	mov.w	r3, #1	; 0x1
    d61a:	b2db      	uxtb	r3, r3
    d61c:	2b00      	cmp	r3, #0
    d61e:	d002      	beq.n	d626 <_ZN16UltrasoundSensorD0Ev+0x26>
    d620:	6878      	ldr	r0, [r7, #4]
    d622:	f000 feab 	bl	e37c <_ZdlPv>
    d626:	687b      	ldr	r3, [r7, #4]
    d628:	4618      	mov	r0, r3
    d62a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d62e:	46bd      	mov	sp, r7
    d630:	bd80      	pop	{r7, pc}
    d632:	46c0      	nop			(mov r8, r8)
    d634:	00021aa8 	.word	0x00021aa8

0000d638 <_ZN16UltrasoundSensorD1Ev>:
UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
{
    this->name = name;
}

UltrasoundSensor::~UltrasoundSensor()
    d638:	b580      	push	{r7, lr}
    d63a:	b082      	sub	sp, #8
    d63c:	af00      	add	r7, sp, #0
    d63e:	6078      	str	r0, [r7, #4]
    d640:	687a      	ldr	r2, [r7, #4]
    d642:	4b0a      	ldr	r3, [pc, #40]	(d66c <_ZN16UltrasoundSensorD1Ev+0x34>)
    d644:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    d646:	687b      	ldr	r3, [r7, #4]
    d648:	4618      	mov	r0, r3
    d64a:	f7fd f8eb 	bl	a824 <_ZN12AnalogSensorD2Ev>
    d64e:	f04f 0300 	mov.w	r3, #0	; 0x0
    d652:	b2db      	uxtb	r3, r3
    d654:	2b00      	cmp	r3, #0
    d656:	d002      	beq.n	d65e <_ZN16UltrasoundSensorD1Ev+0x26>
    d658:	6878      	ldr	r0, [r7, #4]
    d65a:	f000 fe8f 	bl	e37c <_ZdlPv>
    d65e:	687b      	ldr	r3, [r7, #4]
    d660:	4618      	mov	r0, r3
    d662:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d666:	46bd      	mov	sp, r7
    d668:	bd80      	pop	{r7, pc}
    d66a:	46c0      	nop			(mov r8, r8)
    d66c:	00021aa8 	.word	0x00021aa8

0000d670 <_ZN16UltrasoundSensorD2Ev>:
UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
{
    this->name = name;
}

UltrasoundSensor::~UltrasoundSensor()
    d670:	b580      	push	{r7, lr}
    d672:	b082      	sub	sp, #8
    d674:	af00      	add	r7, sp, #0
    d676:	6078      	str	r0, [r7, #4]
    d678:	687a      	ldr	r2, [r7, #4]
    d67a:	4b0a      	ldr	r3, [pc, #40]	(d6a4 <_ZN16UltrasoundSensorD2Ev+0x34>)
    d67c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    d67e:	687b      	ldr	r3, [r7, #4]
    d680:	4618      	mov	r0, r3
    d682:	f7fd f8cf 	bl	a824 <_ZN12AnalogSensorD2Ev>
    d686:	f04f 0300 	mov.w	r3, #0	; 0x0
    d68a:	b2db      	uxtb	r3, r3
    d68c:	2b00      	cmp	r3, #0
    d68e:	d002      	beq.n	d696 <_ZN16UltrasoundSensorD2Ev+0x26>
    d690:	6878      	ldr	r0, [r7, #4]
    d692:	f000 fe73 	bl	e37c <_ZdlPv>
    d696:	687b      	ldr	r3, [r7, #4]
    d698:	4618      	mov	r0, r3
    d69a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d69e:	46bd      	mov	sp, r7
    d6a0:	bd80      	pop	{r7, pc}
    d6a2:	46c0      	nop			(mov r8, r8)
    d6a4:	00021aa8 	.word	0x00021aa8

0000d6a8 <_ZN16UltrasoundSensorC1ENS_14UltrasoundNameEhPt>:
#include "ultrasoundSensor.h"

float UltrasoundSensor::coeff = COEFFICIENT_LIN_ULTRASON;

UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
    d6a8:	b580      	push	{r7, lr}
    d6aa:	b084      	sub	sp, #16
    d6ac:	af00      	add	r7, sp, #0
    d6ae:	60f8      	str	r0, [r7, #12]
    d6b0:	607b      	str	r3, [r7, #4]
    d6b2:	460b      	mov	r3, r1
    d6b4:	72fb      	strb	r3, [r7, #11]
    d6b6:	4613      	mov	r3, r2
    d6b8:	72bb      	strb	r3, [r7, #10]
    d6ba:	68fb      	ldr	r3, [r7, #12]
    d6bc:	7aba      	ldrb	r2, [r7, #10]
    d6be:	4618      	mov	r0, r3
    d6c0:	4611      	mov	r1, r2
    d6c2:	687a      	ldr	r2, [r7, #4]
    d6c4:	f7fd f8f4 	bl	a8b0 <_ZN12AnalogSensorC2EhPt>
    d6c8:	68fa      	ldr	r2, [r7, #12]
    d6ca:	4b05      	ldr	r3, [pc, #20]	(d6e0 <_ZN16UltrasoundSensorC1ENS_14UltrasoundNameEhPt+0x38>)
    d6cc:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    d6ce:	68fa      	ldr	r2, [r7, #12]
    d6d0:	7afb      	ldrb	r3, [r7, #11]
    d6d2:	7313      	strb	r3, [r2, #12]
}
    d6d4:	68fb      	ldr	r3, [r7, #12]
    d6d6:	4618      	mov	r0, r3
    d6d8:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d6dc:	46bd      	mov	sp, r7
    d6de:	bd80      	pop	{r7, pc}
    d6e0:	00021aa8 	.word	0x00021aa8

0000d6e4 <_ZN16UltrasoundSensorC2ENS_14UltrasoundNameEhPt>:
#include "ultrasoundSensor.h"

float UltrasoundSensor::coeff = COEFFICIENT_LIN_ULTRASON;

UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
    d6e4:	b580      	push	{r7, lr}
    d6e6:	b084      	sub	sp, #16
    d6e8:	af00      	add	r7, sp, #0
    d6ea:	60f8      	str	r0, [r7, #12]
    d6ec:	607b      	str	r3, [r7, #4]
    d6ee:	460b      	mov	r3, r1
    d6f0:	72fb      	strb	r3, [r7, #11]
    d6f2:	4613      	mov	r3, r2
    d6f4:	72bb      	strb	r3, [r7, #10]
    d6f6:	68fb      	ldr	r3, [r7, #12]
    d6f8:	7aba      	ldrb	r2, [r7, #10]
    d6fa:	4618      	mov	r0, r3
    d6fc:	4611      	mov	r1, r2
    d6fe:	687a      	ldr	r2, [r7, #4]
    d700:	f7fd f8d6 	bl	a8b0 <_ZN12AnalogSensorC2EhPt>
    d704:	68fa      	ldr	r2, [r7, #12]
    d706:	4b05      	ldr	r3, [pc, #20]	(d71c <_ZN16UltrasoundSensorC2ENS_14UltrasoundNameEhPt+0x38>)
    d708:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    d70a:	68fa      	ldr	r2, [r7, #12]
    d70c:	7afb      	ldrb	r3, [r7, #11]
    d70e:	7313      	strb	r3, [r2, #12]
}
    d710:	68fb      	ldr	r3, [r7, #12]
    d712:	4618      	mov	r0, r3
    d714:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d718:	46bd      	mov	sp, r7
    d71a:	bd80      	pop	{r7, pc}
    d71c:	00021aa8 	.word	0x00021aa8

0000d720 <_Z20initialisationDesPINv>:



// Mettez toutes vos initialisations de PIN dans la fonction "initialisation"
// On l'appellera ensuite dans le main au tout début pour tout initialiser d'un coup
void initialisationDesPIN()
    d720:	b580      	push	{r7, lr}
    d722:	b082      	sub	sp, #8
    d724:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

#ifdef STM32F10X_CL // Pour le stm32 h107

    // Pompe à vide
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
    d726:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    d72a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    d72c:	f04f 0310 	mov.w	r3, #16	; 0x10
    d730:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    d732:	f04f 0302 	mov.w	r3, #2	; 0x2
    d736:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    d738:	f107 0304 	add.w	r3, r7, #4	; 0x4
    d73c:	4845      	ldr	r0, [pc, #276]	(d854 <_Z20initialisationDesPINv+0x134>)
    d73e:	4619      	mov	r1, r3
    d740:	f7f3 ffb6 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOD, GPIO_Pin_14, Bit_RESET);
    d744:	4843      	ldr	r0, [pc, #268]	(d854 <_Z20initialisationDesPINv+0x134>)
    d746:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    d74a:	f04f 0200 	mov.w	r2, #0	; 0x0
    d74e:	f7f4 f91d 	bl	198c <GPIO_WriteBit>

    // Patte coté de la partie bleu ou jaune
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
    d752:	f04f 0310 	mov.w	r3, #16	; 0x10
    d756:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    d758:	f04f 0304 	mov.w	r3, #4	; 0x4
    d75c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    d75e:	f04f 0303 	mov.w	r3, #3	; 0x3
    d762:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    d764:	f107 0304 	add.w	r3, r7, #4	; 0x4
    d768:	483b      	ldr	r0, [pc, #236]	(d858 <_Z20initialisationDesPINv+0x138>)
    d76a:	4619      	mov	r1, r3
    d76c:	f7f3 ffa0 	bl	16b0 <GPIO_Init>
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOB, &GPIO_InitStructure);
*/

    GPIO_PinRemapConfig(GPIO_FullRemap_TIM1, ENABLE);
    d770:	483a      	ldr	r0, [pc, #232]	(d85c <_Z20initialisationDesPINv+0x13c>)
    d772:	f04f 0101 	mov.w	r1, #1	; 0x1
    d776:	f7f4 f98b 	bl	1a90 <GPIO_PinRemapConfig>

    // Pattes des servos
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    d77a:	f44f 7300 	mov.w	r3, #512	; 0x200
    d77e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    d780:	f04f 0318 	mov.w	r3, #24	; 0x18
    d784:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    d786:	f04f 0303 	mov.w	r3, #3	; 0x3
    d78a:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    d78c:	f107 0304 	add.w	r3, r7, #4	; 0x4
    d790:	4831      	ldr	r0, [pc, #196]	(d858 <_Z20initialisationDesPINv+0x138>)
    d792:	4619      	mov	r1, r3
    d794:	f7f3 ff8c 	bl	16b0 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
    d798:	f44f 6300 	mov.w	r3, #2048	; 0x800
    d79c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    d79e:	f04f 0318 	mov.w	r3, #24	; 0x18
    d7a2:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    d7a4:	f04f 0303 	mov.w	r3, #3	; 0x3
    d7a8:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    d7aa:	f107 0304 	add.w	r3, r7, #4	; 0x4
    d7ae:	482a      	ldr	r0, [pc, #168]	(d858 <_Z20initialisationDesPINv+0x138>)
    d7b0:	4619      	mov	r1, r3
    d7b2:	f7f3 ff7d 	bl	16b0 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
    d7b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    d7ba:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    d7bc:	f04f 0318 	mov.w	r3, #24	; 0x18
    d7c0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    d7c2:	f04f 0303 	mov.w	r3, #3	; 0x3
    d7c6:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    d7c8:	f107 0304 	add.w	r3, r7, #4	; 0x4
    d7cc:	4822      	ldr	r0, [pc, #136]	(d858 <_Z20initialisationDesPINv+0x138>)
    d7ce:	4619      	mov	r1, r3
    d7d0:	f7f3 ff6e 	bl	16b0 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
    d7d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    d7d8:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    d7da:	f04f 0318 	mov.w	r3, #24	; 0x18
    d7de:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    d7e0:	f04f 0303 	mov.w	r3, #3	; 0x3
    d7e4:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    d7e6:	f107 0304 	add.w	r3, r7, #4	; 0x4
    d7ea:	481b      	ldr	r0, [pc, #108]	(d858 <_Z20initialisationDesPINv+0x138>)
    d7ec:	4619      	mov	r1, r3
    d7ee:	f7f3 ff5f 	bl	16b0 <GPIO_Init>

    // LED Verte
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
    d7f2:	f04f 0340 	mov.w	r3, #64	; 0x40
    d7f6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    d7f8:	f04f 0310 	mov.w	r3, #16	; 0x10
    d7fc:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    d7fe:	f04f 0302 	mov.w	r3, #2	; 0x2
    d802:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    d804:	f107 0304 	add.w	r3, r7, #4	; 0x4
    d808:	4815      	ldr	r0, [pc, #84]	(d860 <_Z20initialisationDesPINv+0x140>)
    d80a:	4619      	mov	r1, r3
    d80c:	f7f3 ff50 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_RESET);
    d810:	4813      	ldr	r0, [pc, #76]	(d860 <_Z20initialisationDesPINv+0x140>)
    d812:	f04f 0140 	mov.w	r1, #64	; 0x40
    d816:	f04f 0200 	mov.w	r2, #0	; 0x0
    d81a:	f7f4 f8b7 	bl	198c <GPIO_WriteBit>

    // LED Jaune
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
    d81e:	f04f 0380 	mov.w	r3, #128	; 0x80
    d822:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    d824:	f04f 0310 	mov.w	r3, #16	; 0x10
    d828:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    d82a:	f04f 0302 	mov.w	r3, #2	; 0x2
    d82e:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    d830:	f107 0304 	add.w	r3, r7, #4	; 0x4
    d834:	480a      	ldr	r0, [pc, #40]	(d860 <_Z20initialisationDesPINv+0x140>)
    d836:	4619      	mov	r1, r3
    d838:	f7f3 ff3a 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOC, GPIO_Pin_7, Bit_RESET);
    d83c:	4808      	ldr	r0, [pc, #32]	(d860 <_Z20initialisationDesPINv+0x140>)
    d83e:	f04f 0180 	mov.w	r1, #128	; 0x80
    d842:	f04f 0200 	mov.w	r2, #0	; 0x0
    d846:	f7f4 f8a1 	bl	198c <GPIO_WriteBit>
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    GPIO_WriteBit(GPIOC, GPIO_Pin_12, Bit_SET);

#endif //STM32F40_41xxx

}
    d84a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d84e:	46bd      	mov	sp, r7
    d850:	bd80      	pop	{r7, pc}
    d852:	46c0      	nop			(mov r8, r8)
    d854:	40011400 	.word	0x40011400
    d858:	40011800 	.word	0x40011800
    d85c:	001600c0 	.word	0x001600c0
    d860:	40011000 	.word	0x40011000

0000d864 <_Z18initAutresHorlogesv>:
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK); // system clock (SYSCLK) : 72MHz
    #endif
}

// Définit quelques horloges supplémentaires
void initAutresHorloges()
    d864:	b580      	push	{r7, lr}
    d866:	af00      	add	r7, sp, #0
        // Sharps
        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);

    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
    d868:	f04f 0001 	mov.w	r0, #1	; 0x1
    d86c:	f04f 0101 	mov.w	r1, #1	; 0x1
    d870:	f7f4 fdc8 	bl	2404 <RCC_AHBPeriphClockCmd>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
    d874:	f44f 7000 	mov.w	r0, #512	; 0x200
    d878:	f04f 0101 	mov.w	r1, #1	; 0x1
    d87c:	f7f4 fde4 	bl	2448 <RCC_APB2PeriphClockCmd>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    d880:	f04f 0001 	mov.w	r0, #1	; 0x1
    d884:	f04f 0101 	mov.w	r1, #1	; 0x1
    d888:	f7f4 fdde 	bl	2448 <RCC_APB2PeriphClockCmd>
        #ifdef STM32F10X_CL // stm h107
            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOE, ENABLE);
    d88c:	f04f 007c 	mov.w	r0, #124	; 0x7c
    d890:	f04f 0101 	mov.w	r1, #1	; 0x1
    d894:	f7f4 fdd8 	bl	2448 <RCC_APB2PeriphClockCmd>
        #endif
    #endif
}
    d898:	46bd      	mov	sp, r7
    d89a:	bd80      	pop	{r7, pc}

0000d89c <_Z8Clk_Initv>:
//#include "stm32f10x_remap.h"

#include "initialisation.h"

// Initialise le système d'horloge
void Clk_Init()
    d89c:	b580      	push	{r7, lr}
    d89e:	af00      	add	r7, sp, #0
{
    //Rien pour le STM32F4, tout est déjà fait dans SystemInit(), appelée implicitement
    #if defined(STM32F10X_MD) || defined(STM32F10X_CL)
        // Démarre l'horloge interne (8 MHz)
        RCC_HSICmd(ENABLE);
    d8a0:	f04f 0001 	mov.w	r0, #1	; 0x1
    d8a4:	f7f4 fa84 	bl	1db0 <RCC_HSICmd>
        // On attend qu'elle soit allumée
        while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
    d8a8:	f04f 0021 	mov.w	r0, #33	; 0x21
    d8ac:	f7f4 fea6 	bl	25fc <RCC_GetFlagStatus>
    d8b0:	4603      	mov	r3, r0
    d8b2:	2b00      	cmp	r3, #0
    d8b4:	bf14      	ite	ne
    d8b6:	2300      	movne	r3, #0
    d8b8:	2301      	moveq	r3, #1
    d8ba:	b2db      	uxtb	r3, r3
    d8bc:	2b00      	cmp	r3, #0
    d8be:	d1f3      	bne.n	d8a8 <_Z8Clk_Initv+0xc>
        // Une fois demarée, on utilise celle ci
        RCC_SYSCLKConfig(RCC_SYSCLKSource_HSI);
    d8c0:	f04f 0000 	mov.w	r0, #0	; 0x0
    d8c4:	f7f4 fb54 	bl	1f70 <RCC_SYSCLKConfig>

        // Démarre l'horloge externe à 25MHz
        RCC_HSEConfig(RCC_HSE_ON);
    d8c8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    d8cc:	f7f4 f9ee 	bl	1cac <RCC_HSEConfig>
        // On attend qu'elle soit allumée
        while(RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
    d8d0:	f04f 0031 	mov.w	r0, #49	; 0x31
    d8d4:	f7f4 fe92 	bl	25fc <RCC_GetFlagStatus>
    d8d8:	4603      	mov	r3, r0
    d8da:	2b00      	cmp	r3, #0
    d8dc:	bf14      	ite	ne
    d8de:	2300      	movne	r3, #0
    d8e0:	2301      	moveq	r3, #1
    d8e2:	b2db      	uxtb	r3, r3
    d8e4:	2b00      	cmp	r3, #0
    d8e6:	d1f3      	bne.n	d8d0 <_Z8Clk_Initv+0x34>


        // PLL2 à (8/5) * 25Mhz = 40 Mhz
        RCC_PREDIV2Config(RCC_PREDIV2_Div5);
    d8e8:	f04f 0040 	mov.w	r0, #64	; 0x40
    d8ec:	f7f4 fac6 	bl	1e7c <RCC_PREDIV2Config>
        RCC_PLL2Config(RCC_PLL2Mul_8);
    d8f0:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    d8f4:	f7f4 fae0 	bl	1eb8 <RCC_PLL2Config>
        // On démarre le PLL2 une fois la config entrée
        RCC_PLL2Cmd(ENABLE);
    d8f8:	f04f 0001 	mov.w	r0, #1	; 0x1
    d8fc:	f7f4 fafa 	bl	1ef4 <RCC_PLL2Cmd>
        // On attend qu'il soit vraiment allumé
        while(RCC_GetFlagStatus(RCC_FLAG_PLL2RDY) == RESET);
    d900:	f04f 003b 	mov.w	r0, #59	; 0x3b
    d904:	f7f4 fe7a 	bl	25fc <RCC_GetFlagStatus>
    d908:	4603      	mov	r3, r0
    d90a:	2b00      	cmp	r3, #0
    d90c:	bf14      	ite	ne
    d90e:	2300      	movne	r3, #0
    d910:	2301      	moveq	r3, #1
    d912:	b2db      	uxtb	r3, r3
    d914:	2b00      	cmp	r3, #0
    d916:	d1f3      	bne.n	d900 <_Z8Clk_Initv+0x64>

        // Initialisation du PL à (9/5) * 40MHz = 72MHz
        RCC_PREDIV1Config(RCC_PREDIV1_Source_PLL2, RCC_PREDIV1_Div5);
    d918:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    d91c:	f04f 0104 	mov.w	r1, #4	; 0x4
    d920:	f7f4 fa88 	bl	1e34 <RCC_PREDIV1Config>
        RCC_PLLConfig(RCC_PLLSource_PREDIV1, RCC_PLLMul_9);
    d924:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    d928:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
    d92c:	f7f4 fa50 	bl	1dd0 <RCC_PLLConfig>
        // On démarre le PLL une fois la config entrée
        RCC_PLLCmd(ENABLE);
    d930:	f04f 0001 	mov.w	r0, #1	; 0x1
    d934:	f7f4 fa6e 	bl	1e14 <RCC_PLLCmd>
        // On attend qu'il soit vraiment allumé
        while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
    d938:	f04f 0039 	mov.w	r0, #57	; 0x39
    d93c:	f7f4 fe5e 	bl	25fc <RCC_GetFlagStatus>
    d940:	4603      	mov	r3, r0
    d942:	2b00      	cmp	r3, #0
    d944:	bf14      	ite	ne
    d946:	2300      	movne	r3, #0
    d948:	2301      	moveq	r3, #1
    d94a:	b2db      	uxtb	r3, r3
    d94c:	2b00      	cmp	r3, #0
    d94e:	d1f3      	bne.n	d938 <_Z8Clk_Initv+0x9c>

        // On démarre les composants internes au microcontroleur
        RCC_OTGFSCLKConfig(RCC_OTGFSCLKSource_PLLVCO_Div3); // USB OTG FS clock (OTGFSCLK)
    d950:	f04f 0000 	mov.w	r0, #0	; 0x0
    d954:	f7f4 fbbc 	bl	20d0 <RCC_OTGFSCLKConfig>
        RCC_ADCCLKConfig(RCC_PCLK2_Div6); // ADC clock (ADCCLK) : 72MHz / 6 = 12MHz
    d958:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d95c:	f7f4 fbc6 	bl	20ec <RCC_ADCCLKConfig>
        RCC_PCLK2Config(RCC_HCLK_Div1); // High Speed APB clock (PCLK2) : 72Mhz
    d960:	f04f 0000 	mov.w	r0, #0	; 0x0
    d964:	f7f4 fb6c 	bl	2040 <RCC_PCLK2Config>
        RCC_PCLK1Config(RCC_HCLK_Div2); // Low Speed APB clock (PCLK1) : 72Mhz / 2 = 36MHz
    d968:	f44f 6080 	mov.w	r0, #1024	; 0x400
    d96c:	f7f4 fb4a 	bl	2004 <RCC_PCLK1Config>
        RCC_HCLKConfig(RCC_SYSCLK_Div1); // AHB clock (HCLK) : 72Mhz
    d970:	f04f 0000 	mov.w	r0, #0	; 0x0
    d974:	f7f4 fb28 	bl	1fc8 <RCC_HCLKConfig>
        // Flash 1 wait state
        *(vu32 *)0x40022000 = 0x12;
    d978:	4a04      	ldr	r2, [pc, #16]	(d98c <_Z8Clk_Initv+0xf0>)
    d97a:	f04f 0312 	mov.w	r3, #18	; 0x12
    d97e:	6013      	str	r3, [r2, #0]
        // On utilise le PLL comme horloge de référence
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK); // system clock (SYSCLK) : 72MHz
    d980:	f04f 0002 	mov.w	r0, #2	; 0x2
    d984:	f7f4 faf4 	bl	1f70 <RCC_SYSCLKConfig>
    #endif
}
    d988:	46bd      	mov	sp, r7
    d98a:	bd80      	pop	{r7, pc}
    d98c:	40022000 	.word	0x40022000

0000d990 <_ZN16ServosNumeriques11receiveDataEv>:
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
    USART_SendData(USART3, (u16) data);
}

int receiveData()
    d990:	b480      	push	{r7}
    d992:	af00      	add	r7, sp, #0
{
    while (!(USART3->SR & USART_FLAG_RXNE));
    d994:	4b0b      	ldr	r3, [pc, #44]	(d9c4 <_ZN16ServosNumeriques11receiveDataEv+0x34>)
    d996:	881b      	ldrh	r3, [r3, #0]
    d998:	b29b      	uxth	r3, r3
    d99a:	f003 0320 	and.w	r3, r3, #32	; 0x20
    d99e:	2b00      	cmp	r3, #0
    d9a0:	bf14      	ite	ne
    d9a2:	2300      	movne	r3, #0
    d9a4:	2301      	moveq	r3, #1
    d9a6:	b2db      	uxtb	r3, r3
    d9a8:	2b00      	cmp	r3, #0
    d9aa:	d1f3      	bne.n	d994 <_ZN16ServosNumeriques11receiveDataEv+0x4>

    return ((int)(USART3->DR & 0x1FF));
    d9ac:	4b05      	ldr	r3, [pc, #20]	(d9c4 <_ZN16ServosNumeriques11receiveDataEv+0x34>)
    d9ae:	889b      	ldrh	r3, [r3, #4]
    d9b0:	b29b      	uxth	r3, r3
    d9b2:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    d9b6:	ea4f 53d3 	mov.w	r3, r3, lsr #23
}
    d9ba:	4618      	mov	r0, r3
    d9bc:	46bd      	mov	sp, r7
    d9be:	bc80      	pop	{r7}
    d9c0:	4770      	bx	lr
    d9c2:	46c0      	nop			(mov r8, r8)
    d9c4:	40004800 	.word	0x40004800

0000d9c8 <_ZN16ServosNumeriques19receiveStatusPacketEPi>:

int receiveStatusPacket(int* tableau)
    d9c8:	b590      	push	{r4, r7, lr}
    d9ca:	b089      	sub	sp, #36
    d9cc:	af00      	add	r7, sp, #0
    d9ce:	6078      	str	r0, [r7, #4]
{
    int msg = receiveData();
    d9d0:	f7ff ffde 	bl	d990 <_ZN16ServosNumeriques11receiveDataEv>
    d9d4:	4603      	mov	r3, r0
    d9d6:	60fb      	str	r3, [r7, #12]
    int i = 0;
    d9d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    d9dc:	613b      	str	r3, [r7, #16]
    d9de:	e003      	b.n	d9e8 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x20>
    while(msg == 0) {
        msg = receiveData();
    d9e0:	f7ff ffd6 	bl	d990 <_ZN16ServosNumeriques11receiveDataEv>
    d9e4:	4603      	mov	r3, r0
    d9e6:	60fb      	str	r3, [r7, #12]

int receiveStatusPacket(int* tableau)
{
    int msg = receiveData();
    int i = 0;
    while(msg == 0) {
    d9e8:	68fb      	ldr	r3, [r7, #12]
    d9ea:	2b00      	cmp	r3, #0
    d9ec:	d0f8      	beq.n	d9e0 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x18>
        msg = receiveData();
    } // on attend de lire quelque chose
    if (msg == 0xff) { // début fanion
    d9ee:	68fb      	ldr	r3, [r7, #12]
    d9f0:	2bff      	cmp	r3, #255
    d9f2:	d176      	bne.n	dae2 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x11a>
        msg = receiveData();
    d9f4:	f7ff ffcc 	bl	d990 <_ZN16ServosNumeriques11receiveDataEv>
    d9f8:	4603      	mov	r3, r0
    d9fa:	60fb      	str	r3, [r7, #12]
        if (msg == 0xff) { // fin fanion
    d9fc:	68fb      	ldr	r3, [r7, #12]
    d9fe:	2bff      	cmp	r3, #255
    da00:	d16f      	bne.n	dae2 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x11a>
            tableau[i++] = receiveData(); // on lit quel servo a envoyé le msg
    da02:	693b      	ldr	r3, [r7, #16]
    da04:	ea4f 0283 	mov.w	r2, r3, lsl #2
    da08:	687b      	ldr	r3, [r7, #4]
    da0a:	eb03 0402 	add.w	r4, r3, r2
    da0e:	f7ff ffbf 	bl	d990 <_ZN16ServosNumeriques11receiveDataEv>
    da12:	4603      	mov	r3, r0
    da14:	6023      	str	r3, [r4, #0]
    da16:	693b      	ldr	r3, [r7, #16]
    da18:	f103 0301 	add.w	r3, r3, #1	; 0x1
    da1c:	613b      	str	r3, [r7, #16]
            tableau[i++] = receiveData(); // on lit la taille du message
    da1e:	693b      	ldr	r3, [r7, #16]
    da20:	ea4f 0283 	mov.w	r2, r3, lsl #2
    da24:	687b      	ldr	r3, [r7, #4]
    da26:	eb03 0402 	add.w	r4, r3, r2
    da2a:	f7ff ffb1 	bl	d990 <_ZN16ServosNumeriques11receiveDataEv>
    da2e:	4603      	mov	r3, r0
    da30:	6023      	str	r3, [r4, #0]
    da32:	693b      	ldr	r3, [r7, #16]
    da34:	f103 0301 	add.w	r3, r3, #1	; 0x1
    da38:	613b      	str	r3, [r7, #16]
            for (int i = 2; i < tableau[1]+2; i++) {
    da3a:	f04f 0302 	mov.w	r3, #2	; 0x2
    da3e:	61bb      	str	r3, [r7, #24]
    da40:	e00d      	b.n	da5e <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x96>
                tableau[i] = receiveData();
    da42:	69bb      	ldr	r3, [r7, #24]
    da44:	ea4f 0283 	mov.w	r2, r3, lsl #2
    da48:	687b      	ldr	r3, [r7, #4]
    da4a:	eb03 0402 	add.w	r4, r3, r2
    da4e:	f7ff ff9f 	bl	d990 <_ZN16ServosNumeriques11receiveDataEv>
    da52:	4603      	mov	r3, r0
    da54:	6023      	str	r3, [r4, #0]
    if (msg == 0xff) { // début fanion
        msg = receiveData();
        if (msg == 0xff) { // fin fanion
            tableau[i++] = receiveData(); // on lit quel servo a envoyé le msg
            tableau[i++] = receiveData(); // on lit la taille du message
            for (int i = 2; i < tableau[1]+2; i++) {
    da56:	69bb      	ldr	r3, [r7, #24]
    da58:	f103 0301 	add.w	r3, r3, #1	; 0x1
    da5c:	61bb      	str	r3, [r7, #24]
    da5e:	687b      	ldr	r3, [r7, #4]
    da60:	f103 0304 	add.w	r3, r3, #4	; 0x4
    da64:	681b      	ldr	r3, [r3, #0]
    da66:	f103 0202 	add.w	r2, r3, #2	; 0x2
    da6a:	69bb      	ldr	r3, [r7, #24]
    da6c:	429a      	cmp	r2, r3
    da6e:	dce8      	bgt.n	da42 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x7a>
                tableau[i] = receiveData();
            }
            // on a tout lu : check la checksum
            unsigned int sum = 0;
    da70:	f04f 0300 	mov.w	r3, #0	; 0x0
    da74:	617b      	str	r3, [r7, #20]
            for (int i = 0; i < tableau[1]+2; i++) {
    da76:	f04f 0300 	mov.w	r3, #0	; 0x0
    da7a:	61fb      	str	r3, [r7, #28]
    da7c:	e00d      	b.n	da9a <_ZN16ServosNumeriques19receiveStatusPacketEPi+0xd2>
                sum += tableau[i];
    da7e:	69fb      	ldr	r3, [r7, #28]
    da80:	ea4f 0283 	mov.w	r2, r3, lsl #2
    da84:	687b      	ldr	r3, [r7, #4]
    da86:	4413      	add	r3, r2
    da88:	681b      	ldr	r3, [r3, #0]
    da8a:	461a      	mov	r2, r3
    da8c:	697b      	ldr	r3, [r7, #20]
    da8e:	4413      	add	r3, r2
    da90:	617b      	str	r3, [r7, #20]
            for (int i = 2; i < tableau[1]+2; i++) {
                tableau[i] = receiveData();
            }
            // on a tout lu : check la checksum
            unsigned int sum = 0;
            for (int i = 0; i < tableau[1]+2; i++) {
    da92:	69fb      	ldr	r3, [r7, #28]
    da94:	f103 0301 	add.w	r3, r3, #1	; 0x1
    da98:	61fb      	str	r3, [r7, #28]
    da9a:	687b      	ldr	r3, [r7, #4]
    da9c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    daa0:	681b      	ldr	r3, [r3, #0]
    daa2:	f103 0202 	add.w	r2, r3, #2	; 0x2
    daa6:	69fb      	ldr	r3, [r7, #28]
    daa8:	429a      	cmp	r2, r3
    daaa:	dce8      	bgt.n	da7e <_ZN16ServosNumeriques19receiveStatusPacketEPi+0xb6>
                sum += tableau[i];
            }
            if ((int16_t)~(sum) != tableau[tableau[1]+1])
    daac:	697b      	ldr	r3, [r7, #20]
    daae:	b29b      	uxth	r3, r3
    dab0:	ea6f 0303 	mvn.w	r3, r3
    dab4:	b29b      	uxth	r3, r3
    dab6:	b219      	sxth	r1, r3
    dab8:	687b      	ldr	r3, [r7, #4]
    daba:	f103 0304 	add.w	r3, r3, #4	; 0x4
    dabe:	681b      	ldr	r3, [r3, #0]
    dac0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    dac4:	ea4f 0283 	mov.w	r2, r3, lsl #2
    dac8:	687b      	ldr	r3, [r7, #4]
    daca:	4413      	add	r3, r2
    dacc:	681b      	ldr	r3, [r3, #0]
    dace:	4299      	cmp	r1, r3
    dad0:	d003      	beq.n	dada <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x112>
                return -1;
    dad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dad6:	603b      	str	r3, [r7, #0]
    dad8:	e006      	b.n	dae8 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x120>
            return 0;
    dada:	f04f 0300 	mov.w	r3, #0	; 0x0
    dade:	603b      	str	r3, [r7, #0]
    dae0:	e002      	b.n	dae8 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x120>
        }
    }
    return 1;
    dae2:	f04f 0301 	mov.w	r3, #1	; 0x1
    dae6:	603b      	str	r3, [r7, #0]
    dae8:	683b      	ldr	r3, [r7, #0]
}
    daea:	4618      	mov	r0, r3
    daec:	f107 0724 	add.w	r7, r7, #36	; 0x24
    daf0:	46bd      	mov	sp, r7
    daf2:	bd90      	pop	{r4, r7, pc}

0000daf4 <_ZN16ServosNumeriques8sendDataEi>:
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}

void sendData(int data)
    daf4:	b580      	push	{r7, lr}
    daf6:	b082      	sub	sp, #8
    daf8:	af00      	add	r7, sp, #0
    dafa:	6078      	str	r0, [r7, #4]
{
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
    dafc:	480b      	ldr	r0, [pc, #44]	(db2c <_ZN16ServosNumeriques8sendDataEi+0x38>)
    dafe:	f04f 0180 	mov.w	r1, #128	; 0x80
    db02:	f7f7 f933 	bl	4d6c <USART_GetFlagStatus>
    db06:	4603      	mov	r3, r0
    db08:	2b00      	cmp	r3, #0
    db0a:	bf14      	ite	ne
    db0c:	2300      	movne	r3, #0
    db0e:	2301      	moveq	r3, #1
    db10:	b2db      	uxtb	r3, r3
    db12:	2b00      	cmp	r3, #0
    db14:	d1f2      	bne.n	dafc <_ZN16ServosNumeriques8sendDataEi+0x8>
    USART_SendData(USART3, (u16) data);
    db16:	687b      	ldr	r3, [r7, #4]
    db18:	b29b      	uxth	r3, r3
    db1a:	4804      	ldr	r0, [pc, #16]	(db2c <_ZN16ServosNumeriques8sendDataEi+0x38>)
    db1c:	4619      	mov	r1, r3
    db1e:	f7f6 fff1 	bl	4b04 <USART_SendData>
}
    db22:	f107 0708 	add.w	r7, r7, #8	; 0x8
    db26:	46bd      	mov	sp, r7
    db28:	bd80      	pop	{r7, pc}
    db2a:	46c0      	nop			(mov r8, r8)
    db2c:	40004800 	.word	0x40004800

0000db30 <_ZN16ServosNumeriques12setMaxTorqueEth>:
    int packetLength = AX12::getTorqueLimitInstruction(packet, torque, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void setMaxTorque(uint16_t torque, uint8_t servo) // EEPROM, automatiquement mis dans la RAM au démarrage
    db30:	b580      	push	{r7, lr}
    db32:	b094      	sub	sp, #80
    db34:	af00      	add	r7, sp, #0
    db36:	4603      	mov	r3, r0
    db38:	460a      	mov	r2, r1
    db3a:	80fb      	strh	r3, [r7, #6]
    db3c:	4613      	mov	r3, r2
    db3e:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getMaxTorqueInstruction(packet, torque, servo);
    db40:	f897 c005 	ldrb.w	ip, [r7, #5]
    db44:	f107 0308 	add.w	r3, r7, #8	; 0x8
    db48:	88fa      	ldrh	r2, [r7, #6]
    db4a:	4618      	mov	r0, r3
    db4c:	4611      	mov	r1, r2
    db4e:	4662      	mov	r2, ip
    db50:	f7fc ff8e 	bl	aa70 <_ZN4AX1223getMaxTorqueInstructionEPiti>
    db54:	4603      	mov	r3, r0
    db56:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    db58:	f04f 0300 	mov.w	r3, #0	; 0x0
    db5c:	64fb      	str	r3, [r7, #76]
    db5e:	e00e      	b.n	db7e <_ZN16ServosNumeriques12setMaxTorqueEth+0x4e>
        sendData(packet[i]);
    db60:	6cfb      	ldr	r3, [r7, #76]
    db62:	ea4f 0383 	mov.w	r3, r3, lsl #2
    db66:	f107 0250 	add.w	r2, r7, #80	; 0x50
    db6a:	4413      	add	r3, r2
    db6c:	f853 3c48 	ldr.w	r3, [r3, #-72]
    db70:	4618      	mov	r0, r3
    db72:	f7ff ffbf 	bl	daf4 <_ZN16ServosNumeriques8sendDataEi>
}
void setMaxTorque(uint16_t torque, uint8_t servo) // EEPROM, automatiquement mis dans la RAM au démarrage
{
    int packet[16];
    int packetLength = AX12::getMaxTorqueInstruction(packet, torque, servo);
    for (int i = 0; i < packetLength; i++) {
    db76:	6cfb      	ldr	r3, [r7, #76]
    db78:	f103 0301 	add.w	r3, r3, #1	; 0x1
    db7c:	64fb      	str	r3, [r7, #76]
    db7e:	6cfa      	ldr	r2, [r7, #76]
    db80:	6cbb      	ldr	r3, [r7, #72]
    db82:	429a      	cmp	r2, r3
    db84:	dbec      	blt.n	db60 <_ZN16ServosNumeriques12setMaxTorqueEth+0x30>
        sendData(packet[i]);
    }
}
    db86:	f107 0750 	add.w	r7, r7, #80	; 0x50
    db8a:	46bd      	mov	sp, r7
    db8c:	bd80      	pop	{r7, pc}
    db8e:	46c0      	nop			(mov r8, r8)

0000db90 <_ZN16ServosNumeriques15setTorqueLimiteEth>:
        sendData(packet[i]);
    }
}


void setTorqueLimite(uint16_t torque, uint8_t servo) // dans la RAM
    db90:	b580      	push	{r7, lr}
    db92:	b094      	sub	sp, #80
    db94:	af00      	add	r7, sp, #0
    db96:	4603      	mov	r3, r0
    db98:	460a      	mov	r2, r1
    db9a:	80fb      	strh	r3, [r7, #6]
    db9c:	4613      	mov	r3, r2
    db9e:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getTorqueLimitInstruction(packet, torque, servo);
    dba0:	f897 c005 	ldrb.w	ip, [r7, #5]
    dba4:	f107 0308 	add.w	r3, r7, #8	; 0x8
    dba8:	88fa      	ldrh	r2, [r7, #6]
    dbaa:	4618      	mov	r0, r3
    dbac:	4611      	mov	r1, r2
    dbae:	4662      	mov	r2, ip
    dbb0:	f7fc ff98 	bl	aae4 <_ZN4AX1225getTorqueLimitInstructionEPiti>
    dbb4:	4603      	mov	r3, r0
    dbb6:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    dbb8:	f04f 0300 	mov.w	r3, #0	; 0x0
    dbbc:	64fb      	str	r3, [r7, #76]
    dbbe:	e00e      	b.n	dbde <_ZN16ServosNumeriques15setTorqueLimiteEth+0x4e>
        sendData(packet[i]);
    dbc0:	6cfb      	ldr	r3, [r7, #76]
    dbc2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    dbc6:	f107 0250 	add.w	r2, r7, #80	; 0x50
    dbca:	4413      	add	r3, r2
    dbcc:	f853 3c48 	ldr.w	r3, [r3, #-72]
    dbd0:	4618      	mov	r0, r3
    dbd2:	f7ff ff8f 	bl	daf4 <_ZN16ServosNumeriques8sendDataEi>

void setTorqueLimite(uint16_t torque, uint8_t servo) // dans la RAM
{
    int packet[16];
    int packetLength = AX12::getTorqueLimitInstruction(packet, torque, servo);
    for (int i = 0; i < packetLength; i++) {
    dbd6:	6cfb      	ldr	r3, [r7, #76]
    dbd8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    dbdc:	64fb      	str	r3, [r7, #76]
    dbde:	6cfa      	ldr	r2, [r7, #76]
    dbe0:	6cbb      	ldr	r3, [r7, #72]
    dbe2:	429a      	cmp	r2, r3
    dbe4:	dbec      	blt.n	dbc0 <_ZN16ServosNumeriques15setTorqueLimiteEth+0x30>
        sendData(packet[i]);
    }
}
    dbe6:	f107 0750 	add.w	r7, r7, #80	; 0x50
    dbea:	46bd      	mov	sp, r7
    dbec:	bd80      	pop	{r7, pc}
    dbee:	46c0      	nop			(mov r8, r8)

0000dbf0 <_ZN16ServosNumeriques11setBaudRateEhh>:
    int packetLength = AX12::getAngleUpperLimitInstruction(packet, angle, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void setBaudRate(uint8_t baudRate, uint8_t servo)
    dbf0:	b580      	push	{r7, lr}
    dbf2:	b094      	sub	sp, #80
    dbf4:	af00      	add	r7, sp, #0
    dbf6:	4603      	mov	r3, r0
    dbf8:	460a      	mov	r2, r1
    dbfa:	71fb      	strb	r3, [r7, #7]
    dbfc:	4613      	mov	r3, r2
    dbfe:	71bb      	strb	r3, [r7, #6]
{
    int packet[16];
    int packetLength = AX12::getBaudRateInstruction(packet, baudRate, servo);
    dc00:	f897 c006 	ldrb.w	ip, [r7, #6]
    dc04:	f107 0308 	add.w	r3, r7, #8	; 0x8
    dc08:	79fa      	ldrb	r2, [r7, #7]
    dc0a:	4618      	mov	r0, r3
    dc0c:	4611      	mov	r1, r2
    dc0e:	4662      	mov	r2, ip
    dc10:	f7fc fece 	bl	a9b0 <_ZN4AX1222getBaudRateInstructionEPihi>
    dc14:	4603      	mov	r3, r0
    dc16:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    dc18:	f04f 0300 	mov.w	r3, #0	; 0x0
    dc1c:	64fb      	str	r3, [r7, #76]
    dc1e:	e00e      	b.n	dc3e <_ZN16ServosNumeriques11setBaudRateEhh+0x4e>
        sendData(packet[i]);
    dc20:	6cfb      	ldr	r3, [r7, #76]
    dc22:	ea4f 0383 	mov.w	r3, r3, lsl #2
    dc26:	f107 0250 	add.w	r2, r7, #80	; 0x50
    dc2a:	4413      	add	r3, r2
    dc2c:	f853 3c48 	ldr.w	r3, [r3, #-72]
    dc30:	4618      	mov	r0, r3
    dc32:	f7ff ff5f 	bl	daf4 <_ZN16ServosNumeriques8sendDataEi>
}
void setBaudRate(uint8_t baudRate, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getBaudRateInstruction(packet, baudRate, servo);
    for (int i = 0; i < packetLength; i++) {
    dc36:	6cfb      	ldr	r3, [r7, #76]
    dc38:	f103 0301 	add.w	r3, r3, #1	; 0x1
    dc3c:	64fb      	str	r3, [r7, #76]
    dc3e:	6cfa      	ldr	r2, [r7, #76]
    dc40:	6cbb      	ldr	r3, [r7, #72]
    dc42:	429a      	cmp	r2, r3
    dc44:	dbec      	blt.n	dc20 <_ZN16ServosNumeriques11setBaudRateEhh+0x30>
        sendData(packet[i]);
    }
}
    dc46:	f107 0750 	add.w	r7, r7, #80	; 0x50
    dc4a:	46bd      	mov	sp, r7
    dc4c:	bd80      	pop	{r7, pc}
    dc4e:	46c0      	nop			(mov r8, r8)

0000dc50 <_ZN16ServosNumeriques15setMaximumAngleEth>:
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}

void setMaximumAngle(uint16_t angle, uint8_t servo)
    dc50:	b580      	push	{r7, lr}
    dc52:	b094      	sub	sp, #80
    dc54:	af00      	add	r7, sp, #0
    dc56:	4603      	mov	r3, r0
    dc58:	460a      	mov	r2, r1
    dc5a:	80fb      	strh	r3, [r7, #6]
    dc5c:	4613      	mov	r3, r2
    dc5e:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getAngleUpperLimitInstruction(packet, angle, servo);
    dc60:	f897 c005 	ldrb.w	ip, [r7, #5]
    dc64:	f107 0308 	add.w	r3, r7, #8	; 0x8
    dc68:	88fa      	ldrh	r2, [r7, #6]
    dc6a:	4618      	mov	r0, r3
    dc6c:	4611      	mov	r1, r2
    dc6e:	4662      	mov	r2, ip
    dc70:	f7fc ff72 	bl	ab58 <_ZN4AX1229getAngleUpperLimitInstructionEPiti>
    dc74:	4603      	mov	r3, r0
    dc76:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    dc78:	f04f 0300 	mov.w	r3, #0	; 0x0
    dc7c:	64fb      	str	r3, [r7, #76]
    dc7e:	e00e      	b.n	dc9e <_ZN16ServosNumeriques15setMaximumAngleEth+0x4e>
        sendData(packet[i]);
    dc80:	6cfb      	ldr	r3, [r7, #76]
    dc82:	ea4f 0383 	mov.w	r3, r3, lsl #2
    dc86:	f107 0250 	add.w	r2, r7, #80	; 0x50
    dc8a:	4413      	add	r3, r2
    dc8c:	f853 3c48 	ldr.w	r3, [r3, #-72]
    dc90:	4618      	mov	r0, r3
    dc92:	f7ff ff2f 	bl	daf4 <_ZN16ServosNumeriques8sendDataEi>

void setMaximumAngle(uint16_t angle, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getAngleUpperLimitInstruction(packet, angle, servo);
    for (int i = 0; i < packetLength; i++) {
    dc96:	6cfb      	ldr	r3, [r7, #76]
    dc98:	f103 0301 	add.w	r3, r3, #1	; 0x1
    dc9c:	64fb      	str	r3, [r7, #76]
    dc9e:	6cfa      	ldr	r2, [r7, #76]
    dca0:	6cbb      	ldr	r3, [r7, #72]
    dca2:	429a      	cmp	r2, r3
    dca4:	dbec      	blt.n	dc80 <_ZN16ServosNumeriques15setMaximumAngleEth+0x30>
        sendData(packet[i]);
    }
}
    dca6:	f107 0750 	add.w	r7, r7, #80	; 0x50
    dcaa:	46bd      	mov	sp, r7
    dcac:	bd80      	pop	{r7, pc}
    dcae:	46c0      	nop			(mov r8, r8)

0000dcb0 <_ZN16ServosNumeriques15setMinimumAngleEth>:
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}

void setMinimumAngle(uint16_t angle, uint8_t servo)
    dcb0:	b580      	push	{r7, lr}
    dcb2:	b094      	sub	sp, #80
    dcb4:	af00      	add	r7, sp, #0
    dcb6:	4603      	mov	r3, r0
    dcb8:	460a      	mov	r2, r1
    dcba:	80fb      	strh	r3, [r7, #6]
    dcbc:	4613      	mov	r3, r2
    dcbe:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getAngleLowerLimitInstruction(packet, angle, servo);
    dcc0:	f897 c005 	ldrb.w	ip, [r7, #5]
    dcc4:	f107 0308 	add.w	r3, r7, #8	; 0x8
    dcc8:	88fa      	ldrh	r2, [r7, #6]
    dcca:	4618      	mov	r0, r3
    dccc:	4611      	mov	r1, r2
    dcce:	4662      	mov	r2, ip
    dcd0:	f7fc ff7c 	bl	abcc <_ZN4AX1229getAngleLowerLimitInstructionEPiti>
    dcd4:	4603      	mov	r3, r0
    dcd6:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    dcd8:	f04f 0300 	mov.w	r3, #0	; 0x0
    dcdc:	64fb      	str	r3, [r7, #76]
    dcde:	e00e      	b.n	dcfe <_ZN16ServosNumeriques15setMinimumAngleEth+0x4e>
        sendData(packet[i]);
    dce0:	6cfb      	ldr	r3, [r7, #76]
    dce2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    dce6:	f107 0250 	add.w	r2, r7, #80	; 0x50
    dcea:	4413      	add	r3, r2
    dcec:	f853 3c48 	ldr.w	r3, [r3, #-72]
    dcf0:	4618      	mov	r0, r3
    dcf2:	f7ff feff 	bl	daf4 <_ZN16ServosNumeriques8sendDataEi>

void setMinimumAngle(uint16_t angle, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getAngleLowerLimitInstruction(packet, angle, servo);
    for (int i = 0; i < packetLength; i++) {
    dcf6:	6cfb      	ldr	r3, [r7, #76]
    dcf8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    dcfc:	64fb      	str	r3, [r7, #76]
    dcfe:	6cfa      	ldr	r2, [r7, #76]
    dd00:	6cbb      	ldr	r3, [r7, #72]
    dd02:	429a      	cmp	r2, r3
    dd04:	dbec      	blt.n	dce0 <_ZN16ServosNumeriques15setMinimumAngleEth+0x30>
        sendData(packet[i]);
    }
}
    dd06:	f107 0750 	add.w	r7, r7, #80	; 0x50
    dd0a:	46bd      	mov	sp, r7
    dd0c:	bd80      	pop	{r7, pc}
    dd0e:	46c0      	nop			(mov r8, r8)

0000dd10 <_ZN16ServosNumeriques11setLedStateEhh>:
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}

void setLedState(uint8_t ledOn, uint8_t servo)
    dd10:	b580      	push	{r7, lr}
    dd12:	b094      	sub	sp, #80
    dd14:	af00      	add	r7, sp, #0
    dd16:	4603      	mov	r3, r0
    dd18:	460a      	mov	r2, r1
    dd1a:	71fb      	strb	r3, [r7, #7]
    dd1c:	4613      	mov	r3, r2
    dd1e:	71bb      	strb	r3, [r7, #6]
{
    int packet[16];
    int packetLength = AX12::getLedInstruction(packet, ledOn, servo);
    dd20:	f897 c006 	ldrb.w	ip, [r7, #6]
    dd24:	f107 0308 	add.w	r3, r7, #8	; 0x8
    dd28:	79fa      	ldrb	r2, [r7, #7]
    dd2a:	4618      	mov	r0, r3
    dd2c:	4611      	mov	r1, r2
    dd2e:	4662      	mov	r2, ip
    dd30:	f7fc fe6e 	bl	aa10 <_ZN4AX1217getLedInstructionEPihi>
    dd34:	4603      	mov	r3, r0
    dd36:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    dd38:	f04f 0300 	mov.w	r3, #0	; 0x0
    dd3c:	64fb      	str	r3, [r7, #76]
    dd3e:	e00e      	b.n	dd5e <_ZN16ServosNumeriques11setLedStateEhh+0x4e>
        sendData(packet[i]);
    dd40:	6cfb      	ldr	r3, [r7, #76]
    dd42:	ea4f 0383 	mov.w	r3, r3, lsl #2
    dd46:	f107 0250 	add.w	r2, r7, #80	; 0x50
    dd4a:	4413      	add	r3, r2
    dd4c:	f853 3c48 	ldr.w	r3, [r3, #-72]
    dd50:	4618      	mov	r0, r3
    dd52:	f7ff fecf 	bl	daf4 <_ZN16ServosNumeriques8sendDataEi>

void setLedState(uint8_t ledOn, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getLedInstruction(packet, ledOn, servo);
    for (int i = 0; i < packetLength; i++) {
    dd56:	6cfb      	ldr	r3, [r7, #76]
    dd58:	f103 0301 	add.w	r3, r3, #1	; 0x1
    dd5c:	64fb      	str	r3, [r7, #76]
    dd5e:	6cfa      	ldr	r2, [r7, #76]
    dd60:	6cbb      	ldr	r3, [r7, #72]
    dd62:	429a      	cmp	r2, r3
    dd64:	dbec      	blt.n	dd40 <_ZN16ServosNumeriques11setLedStateEhh+0x30>
        sendData(packet[i]);
    }
}
    dd66:	f107 0750 	add.w	r7, r7, #80	; 0x50
    dd6a:	46bd      	mov	sp, r7
    dd6c:	bd80      	pop	{r7, pc}
    dd6e:	46c0      	nop			(mov r8, r8)

0000dd70 <_ZN16ServosNumeriques11moveAtSpeedEth>:
    int packetLength = AX12::getMoveToInstruction(packet, position, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void moveAtSpeed(uint16_t vitesse, uint8_t servo)
    dd70:	b580      	push	{r7, lr}
    dd72:	b094      	sub	sp, #80
    dd74:	af00      	add	r7, sp, #0
    dd76:	4603      	mov	r3, r0
    dd78:	460a      	mov	r2, r1
    dd7a:	80fb      	strh	r3, [r7, #6]
    dd7c:	4613      	mov	r3, r2
    dd7e:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getMoveSpeedInstruction(packet, vitesse, servo);
    dd80:	f107 0308 	add.w	r3, r7, #8	; 0x8
    dd84:	88fa      	ldrh	r2, [r7, #6]
    dd86:	f897 c005 	ldrb.w	ip, [r7, #5]
    dd8a:	4618      	mov	r0, r3
    dd8c:	4611      	mov	r1, r2
    dd8e:	4662      	mov	r2, ip
    dd90:	f7fc ff56 	bl	ac40 <_ZN4AX1223getMoveSpeedInstructionEPith>
    dd94:	4603      	mov	r3, r0
    dd96:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    dd98:	f04f 0300 	mov.w	r3, #0	; 0x0
    dd9c:	64fb      	str	r3, [r7, #76]
    dd9e:	e00e      	b.n	ddbe <_ZN16ServosNumeriques11moveAtSpeedEth+0x4e>
        sendData(packet[i]);
    dda0:	6cfb      	ldr	r3, [r7, #76]
    dda2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    dda6:	f107 0250 	add.w	r2, r7, #80	; 0x50
    ddaa:	4413      	add	r3, r2
    ddac:	f853 3c48 	ldr.w	r3, [r3, #-72]
    ddb0:	4618      	mov	r0, r3
    ddb2:	f7ff fe9f 	bl	daf4 <_ZN16ServosNumeriques8sendDataEi>
}
void moveAtSpeed(uint16_t vitesse, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getMoveSpeedInstruction(packet, vitesse, servo);
    for (int i = 0; i < packetLength; i++) {
    ddb6:	6cfb      	ldr	r3, [r7, #76]
    ddb8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ddbc:	64fb      	str	r3, [r7, #76]
    ddbe:	6cfa      	ldr	r2, [r7, #76]
    ddc0:	6cbb      	ldr	r3, [r7, #72]
    ddc2:	429a      	cmp	r2, r3
    ddc4:	dbec      	blt.n	dda0 <_ZN16ServosNumeriques11moveAtSpeedEth+0x30>
        sendData(packet[i]);
    }
}
    ddc6:	f107 0750 	add.w	r7, r7, #80	; 0x50
    ddca:	46bd      	mov	sp, r7
    ddcc:	bd80      	pop	{r7, pc}
    ddce:	46c0      	nop			(mov r8, r8)

0000ddd0 <_ZN16ServosNumeriques6moveToEth>:
    int packetLength = AX12::getMoveInstruction(packet, position, vitesse, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void moveTo(uint16_t position, uint8_t servo)
    ddd0:	b580      	push	{r7, lr}
    ddd2:	b094      	sub	sp, #80
    ddd4:	af00      	add	r7, sp, #0
    ddd6:	4603      	mov	r3, r0
    ddd8:	460a      	mov	r2, r1
    ddda:	80fb      	strh	r3, [r7, #6]
    dddc:	4613      	mov	r3, r2
    ddde:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getMoveToInstruction(packet, position, servo);
    dde0:	f107 0308 	add.w	r3, r7, #8	; 0x8
    dde4:	88fa      	ldrh	r2, [r7, #6]
    dde6:	f897 c005 	ldrb.w	ip, [r7, #5]
    ddea:	4618      	mov	r0, r3
    ddec:	4611      	mov	r1, r2
    ddee:	4662      	mov	r2, ip
    ddf0:	f7fc ff62 	bl	acb8 <_ZN4AX1220getMoveToInstructionEPith>
    ddf4:	4603      	mov	r3, r0
    ddf6:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    ddf8:	f04f 0300 	mov.w	r3, #0	; 0x0
    ddfc:	64fb      	str	r3, [r7, #76]
    ddfe:	e00e      	b.n	de1e <_ZN16ServosNumeriques6moveToEth+0x4e>
        sendData(packet[i]);
    de00:	6cfb      	ldr	r3, [r7, #76]
    de02:	ea4f 0383 	mov.w	r3, r3, lsl #2
    de06:	f107 0250 	add.w	r2, r7, #80	; 0x50
    de0a:	4413      	add	r3, r2
    de0c:	f853 3c48 	ldr.w	r3, [r3, #-72]
    de10:	4618      	mov	r0, r3
    de12:	f7ff fe6f 	bl	daf4 <_ZN16ServosNumeriques8sendDataEi>
}
void moveTo(uint16_t position, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getMoveToInstruction(packet, position, servo);
    for (int i = 0; i < packetLength; i++) {
    de16:	6cfb      	ldr	r3, [r7, #76]
    de18:	f103 0301 	add.w	r3, r3, #1	; 0x1
    de1c:	64fb      	str	r3, [r7, #76]
    de1e:	6cfa      	ldr	r2, [r7, #76]
    de20:	6cbb      	ldr	r3, [r7, #72]
    de22:	429a      	cmp	r2, r3
    de24:	dbec      	blt.n	de00 <_ZN16ServosNumeriques6moveToEth+0x30>
        sendData(packet[i]);
    }
}
    de26:	f107 0750 	add.w	r7, r7, #80	; 0x50
    de2a:	46bd      	mov	sp, r7
    de2c:	bd80      	pop	{r7, pc}
    de2e:	46c0      	nop			(mov r8, r8)

0000de30 <_ZN16ServosNumeriques13moveToAtSpeedEtth>:
        }
    }
    return 1;
}

void moveToAtSpeed(uint16_t position, uint16_t vitesse, uint8_t servo)
    de30:	b580      	push	{r7, lr}
    de32:	b094      	sub	sp, #80
    de34:	af00      	add	r7, sp, #0
    de36:	4603      	mov	r3, r0
    de38:	80fb      	strh	r3, [r7, #6]
    de3a:	460b      	mov	r3, r1
    de3c:	80bb      	strh	r3, [r7, #4]
    de3e:	4613      	mov	r3, r2
    de40:	70fb      	strb	r3, [r7, #3]
{
    int packet[16];
    int packetLength = AX12::getMoveInstruction(packet, position, vitesse, servo);
    de42:	f107 0308 	add.w	r3, r7, #8	; 0x8
    de46:	88fa      	ldrh	r2, [r7, #6]
    de48:	f8b7 c004 	ldrh.w	ip, [r7, #4]
    de4c:	f897 e003 	ldrb.w	lr, [r7, #3]
    de50:	4618      	mov	r0, r3
    de52:	4611      	mov	r1, r2
    de54:	4662      	mov	r2, ip
    de56:	4673      	mov	r3, lr
    de58:	f7fc ff6a 	bl	ad30 <_ZN4AX1218getMoveInstructionEPitth>
    de5c:	4603      	mov	r3, r0
    de5e:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    de60:	f04f 0300 	mov.w	r3, #0	; 0x0
    de64:	64fb      	str	r3, [r7, #76]
    de66:	e00e      	b.n	de86 <_ZN16ServosNumeriques13moveToAtSpeedEtth+0x56>
        sendData(packet[i]);
    de68:	6cfb      	ldr	r3, [r7, #76]
    de6a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    de6e:	f107 0250 	add.w	r2, r7, #80	; 0x50
    de72:	4413      	add	r3, r2
    de74:	f853 3c48 	ldr.w	r3, [r3, #-72]
    de78:	4618      	mov	r0, r3
    de7a:	f7ff fe3b 	bl	daf4 <_ZN16ServosNumeriques8sendDataEi>

void moveToAtSpeed(uint16_t position, uint16_t vitesse, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getMoveInstruction(packet, position, vitesse, servo);
    for (int i = 0; i < packetLength; i++) {
    de7e:	6cfb      	ldr	r3, [r7, #76]
    de80:	f103 0301 	add.w	r3, r3, #1	; 0x1
    de84:	64fb      	str	r3, [r7, #76]
    de86:	6cfa      	ldr	r2, [r7, #76]
    de88:	6cbb      	ldr	r3, [r7, #72]
    de8a:	429a      	cmp	r2, r3
    de8c:	dbec      	blt.n	de68 <_ZN16ServosNumeriques13moveToAtSpeedEtth+0x38>
        sendData(packet[i]);
    }
}
    de8e:	f107 0750 	add.w	r7, r7, #80	; 0x50
    de92:	46bd      	mov	sp, r7
    de94:	bd80      	pop	{r7, pc}
    de96:	46c0      	nop			(mov r8, r8)

0000de98 <_Z25ServosNumeriques_sendDatai>:
#include "interfaceServosNumeriques.h"
//#include "stm32f4xx_usart.h"

void ServosNumeriques_sendData(int data)
    de98:	b580      	push	{r7, lr}
    de9a:	b082      	sub	sp, #8
    de9c:	af00      	add	r7, sp, #0
    de9e:	6078      	str	r0, [r7, #4]
{
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
    dea0:	480b      	ldr	r0, [pc, #44]	(ded0 <_Z25ServosNumeriques_sendDatai+0x38>)
    dea2:	f04f 0180 	mov.w	r1, #128	; 0x80
    dea6:	f7f6 ff61 	bl	4d6c <USART_GetFlagStatus>
    deaa:	4603      	mov	r3, r0
    deac:	2b00      	cmp	r3, #0
    deae:	bf14      	ite	ne
    deb0:	2300      	movne	r3, #0
    deb2:	2301      	moveq	r3, #1
    deb4:	b2db      	uxtb	r3, r3
    deb6:	2b00      	cmp	r3, #0
    deb8:	d1f2      	bne.n	dea0 <_Z25ServosNumeriques_sendDatai+0x8>
    USART_SendData(USART3, (u16) data);
    deba:	687b      	ldr	r3, [r7, #4]
    debc:	b29b      	uxth	r3, r3
    debe:	4804      	ldr	r0, [pc, #16]	(ded0 <_Z25ServosNumeriques_sendDatai+0x38>)
    dec0:	4619      	mov	r1, r3
    dec2:	f7f6 fe1f 	bl	4b04 <USART_SendData>
}
    dec6:	f107 0708 	add.w	r7, r7, #8	; 0x8
    deca:	46bd      	mov	sp, r7
    decc:	bd80      	pop	{r7, pc}
    dece:	46c0      	nop			(mov r8, r8)
    ded0:	40004800 	.word	0x40004800

0000ded4 <_ZN16ServosNumeriques11receiveModeEv>:
	GPIO_WriteBit(GPIOD, GPIO_Pin_10, Bit_SET);
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}
void receiveMode()
    ded4:	b580      	push	{r7, lr}
    ded6:	af00      	add	r7, sp, #0
{
	// on veut recevoir des paquets, on met le bit d'envoi à 0
	#ifdef STM32F10X_CL
	GPIO_WriteBit(GPIOD, GPIO_Pin_10, Bit_RESET);
    ded8:	4804      	ldr	r0, [pc, #16]	(deec <_ZN16ServosNumeriques11receiveModeEv+0x18>)
    deda:	f44f 6180 	mov.w	r1, #1024	; 0x400
    dede:	f04f 0200 	mov.w	r2, #0	; 0x0
    dee2:	f7f3 fd53 	bl	198c <GPIO_WriteBit>
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}
    dee6:	46bd      	mov	sp, r7
    dee8:	bd80      	pop	{r7, pc}
    deea:	46c0      	nop			(mov r8, r8)
    deec:	40011400 	.word	0x40011400

0000def0 <_ZN16ServosNumeriques8sendModeEv>:
	USART_Init(USART3, &USART_InitStruct);
	//USART_ClockInit(USART3, &USART_ClockInitStruct);
	USART_Cmd(USART3, ENABLE);
}

void sendMode()
    def0:	b580      	push	{r7, lr}
    def2:	af00      	add	r7, sp, #0
{
	// on veut envoyer des paquets, on met le bit d'envoi à 1
	#ifdef STM32F10X_CL
	GPIO_WriteBit(GPIOD, GPIO_Pin_10, Bit_SET);
    def4:	4804      	ldr	r0, [pc, #16]	(df08 <_ZN16ServosNumeriques8sendModeEv+0x18>)
    def6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    defa:	f04f 0201 	mov.w	r2, #1	; 0x1
    defe:	f7f3 fd45 	bl	198c <GPIO_WriteBit>
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}
    df02:	46bd      	mov	sp, r7
    df04:	bd80      	pop	{r7, pc}
    df06:	46c0      	nop			(mov r8, r8)
    df08:	40011400 	.word	0x40011400

0000df0c <_ZN16ServosNumeriques8initUARTEi>:
#endif


}

void initUART(int baudRate)
    df0c:	b580      	push	{r7, lr}
    df0e:	b086      	sub	sp, #24
    df10:	af00      	add	r7, sp, #0
    df12:	6078      	str	r0, [r7, #4]
{
    USART_InitTypeDef USART_InitStruct;
	// Protocole ax12 : Half duplex Asynchronous Serial Communication (8bit,1stop,No Parity)
 	/* Initialisation des caracteristiques USART_InitStruct */
 	USART_InitStruct.USART_BaudRate = baudRate;
    df14:	687b      	ldr	r3, [r7, #4]
    df16:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
    df18:	f04f 0300 	mov.w	r3, #0	; 0x0
    df1c:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
    df1e:	f04f 0300 	mov.w	r3, #0	; 0x0
    df22:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No ;
    df24:	f04f 0300 	mov.w	r3, #0	; 0x0
    df28:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    df2a:	f04f 0300 	mov.w	r3, #0	; 0x0
    df2e:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    df30:	f04f 030c 	mov.w	r3, #12	; 0xc
    df34:	827b      	strh	r3, [r7, #18]

	/* On configure et on lance */
	USART_Init(USART3, &USART_InitStruct);
    df36:	f107 0308 	add.w	r3, r7, #8	; 0x8
    df3a:	4806      	ldr	r0, [pc, #24]	(df54 <_ZN16ServosNumeriques8initUARTEi+0x48>)
    df3c:	4619      	mov	r1, r3
    df3e:	f7f6 fb6f 	bl	4620 <USART_Init>
	//USART_ClockInit(USART3, &USART_ClockInitStruct);
	USART_Cmd(USART3, ENABLE);
    df42:	4804      	ldr	r0, [pc, #16]	(df54 <_ZN16ServosNumeriques8initUARTEi+0x48>)
    df44:	f04f 0101 	mov.w	r1, #1	; 0x1
    df48:	f7f6 fc8a 	bl	4860 <USART_Cmd>
}
    df4c:	f107 0718 	add.w	r7, r7, #24	; 0x18
    df50:	46bd      	mov	sp, r7
    df52:	bd80      	pop	{r7, pc}
    df54:	40004800 	.word	0x40004800

0000df58 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv>:
}

namespace ServosNumeriques
{

void initClocksAndPortsGPIO()
    df58:	b580      	push	{r7, lr}
    df5a:	b082      	sub	sp, #8
    df5c:	af00      	add	r7, sp, #0
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    GPIO_Init(GPIOB, &GPIO_InitStructure);
#endif
#ifdef STM32F10X_CL // Pin pour le stm32 h107
    // bus APB1 : allow usart 3
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
    df5e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    df62:	f04f 0101 	mov.w	r1, #1	; 0x1
    df66:	f7f4 fa91 	bl	248c <RCC_APB1PeriphClockCmd>

    // on remap l'usart3 pour que le stm soit bien configuré sur les ports 8 9 et 10 du GPIOD
    GPIO_PinRemapConfig(GPIO_FullRemap_USART3, ENABLE);
    df6a:	481b      	ldr	r0, [pc, #108]	(dfd8 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x80>)
    df6c:	f04f 0101 	mov.w	r1, #1	; 0x1
    df70:	f7f3 fd8e 	bl	1a90 <GPIO_PinRemapConfig>

    GPIO_InitTypeDef GPIO_InitStructure;
 	// port D pin 8 TX : un servo numérique en Ecriture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
    df74:	f44f 7380 	mov.w	r3, #256	; 0x100
    df78:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    df7a:	f04f 0318 	mov.w	r3, #24	; 0x18
    df7e:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    df80:	f04f 0303 	mov.w	r3, #3	; 0x3
    df84:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    df86:	f107 0304 	add.w	r3, r7, #4	; 0x4
    df8a:	4814      	ldr	r0, [pc, #80]	(dfdc <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x84>)
    df8c:	4619      	mov	r1, r3
    df8e:	f7f3 fb8f 	bl	16b0 <GPIO_Init>

 	// port D pin 9 RX : un servo numérique en Lecture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    df92:	f44f 7300 	mov.w	r3, #512	; 0x200
    df96:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    df98:	f04f 0304 	mov.w	r3, #4	; 0x4
    df9c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    df9e:	f04f 0303 	mov.w	r3, #3	; 0x3
    dfa2:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    dfa4:	f107 0304 	add.w	r3, r7, #4	; 0x4
    dfa8:	480c      	ldr	r0, [pc, #48]	(dfdc <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x84>)
    dfaa:	4619      	mov	r1, r3
    dfac:	f7f3 fb80 	bl	16b0 <GPIO_Init>

 	// port D pin 10 : la direction (TX/RX)
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    dfb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    dfb4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    dfb6:	f04f 0310 	mov.w	r3, #16	; 0x10
    dfba:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    dfbc:	f04f 0302 	mov.w	r3, #2	; 0x2
    dfc0:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    dfc2:	f107 0304 	add.w	r3, r7, #4	; 0x4
    dfc6:	4805      	ldr	r0, [pc, #20]	(dfdc <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x84>)
    dfc8:	4619      	mov	r1, r3
    dfca:	f7f3 fb71 	bl	16b0 <GPIO_Init>
#endif


}
    dfce:	f107 0708 	add.w	r7, r7, #8	; 0x8
    dfd2:	46bd      	mov	sp, r7
    dfd4:	bd80      	pop	{r7, pc}
    dfd6:	46c0      	nop			(mov r8, r8)
    dfd8:	00140030 	.word	0x00140030
    dfdc:	40011400 	.word	0x40011400

0000dfe0 <_Z6isBluev>:


#define NVIC_CCR ((volatile unsigned long *)(0xE000ED14))

// Dit si on est du coté bleu
bool isBlue() // = ROUGE
    dfe0:	b580      	push	{r7, lr}
    dfe2:	af00      	add	r7, sp, #0
{
#ifdef STM32F40_41xxx // Pin pour le stm32 h103
    return GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_9) == Bit_RESET;
#endif
#ifdef STM32F10X_CL // Pin pour le stm32 h107
    return GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_4) == Bit_RESET;
    dfe4:	4806      	ldr	r0, [pc, #24]	(e000 <_Z6isBluev+0x20>)
    dfe6:	f04f 0110 	mov.w	r1, #16	; 0x10
    dfea:	f7f3 fc5b 	bl	18a4 <GPIO_ReadInputDataBit>
    dfee:	4603      	mov	r3, r0
    dff0:	2b00      	cmp	r3, #0
    dff2:	bf14      	ite	ne
    dff4:	2300      	movne	r3, #0
    dff6:	2301      	moveq	r3, #1
    dff8:	b2db      	uxtb	r3, r3
#endif
#ifdef STM32F10X_MD // Pin pour le stm32 h103
    return GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_9) == Bit_RESET;
#endif
}
    dffa:	4618      	mov	r0, r3
    dffc:	46bd      	mov	sp, r7
    dffe:	bd80      	pop	{r7, pc}
    e000:	40011800 	.word	0x40011800

0000e004 <main>:
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx, &GPIO_InitStructure);
}
*/

int main()
    e004:	b580      	push	{r7, lr}
    e006:	b0a2      	sub	sp, #136
    e008:	af06      	add	r7, sp, #24
{
    #if defined(STM32F10X_MD) || defined(STM32F10X_CL)
        *NVIC_CCR = *NVIC_CCR | 0x200; // Set STKALIGN in NVIC
    e00a:	4a7f      	ldr	r2, [pc, #508]	(e208 <main+0x204>)
    e00c:	4b7e      	ldr	r3, [pc, #504]	(e208 <main+0x204>)
    e00e:	681b      	ldr	r3, [r3, #0]
    e010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e014:	6013      	str	r3, [r2, #0]
    #else
        SystemInit(); // Appelée implicitement ?
    #endif

    // On initialise les horloges
    Clk_Init();
    e016:	f7ff fc41 	bl	d89c <_Z8Clk_Initv>

    // Définit quelques horloges supplémentaires
    initAutresHorloges();
    e01a:	f7ff fc23 	bl	d864 <_Z18initAutresHorlogesv>

    // Appel de la fonction qui permet d'initialiser tous les PINS
    initialisationDesPIN();
    e01e:	f7ff fb7f 	bl	d720 <_Z20initialisationDesPINv>

    Remote::log("Init");
    e022:	4b7a      	ldr	r3, [pc, #488]	(e20c <main+0x208>)
    e024:	4618      	mov	r0, r3
    e026:	f7fe fcc3 	bl	c9b0 <_ZN6Remote3logEPc>
    //Debug::testContainer();
    //Debug::testBrasLateraux();
    //Debug::testADC_DMASampleF4();
    //Debug::testSharps();
#endif
    allumerLED();
    e02a:	f7fd fef9 	bl	be20 <_Z10allumerLEDv>
    eteindreLED();
    e02e:	f7fd fe9b 	bl	bd68 <_Z11eteindreLEDv>
    allumerLED2();
    e032:	f7fd feed 	bl	be10 <_Z11allumerLED2v>
    eteindreLED2();
    e036:	f7fd fe8f 	bl	bd58 <_Z12eteindreLED2v>
    allumerLED();
    e03a:	f7fd fef1 	bl	be20 <_Z10allumerLEDv>
//    UartDebug::sendData(42);
//    UartDebug::sendData(50);
//    UartDebug::sendData(51);
//    UartDebug::sendData(52);

    ServosNumeriques::initClocksAndPortsGPIO();
    e03e:	f7ff ff8b 	bl	df58 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv>
    ServosNumeriques::initUART(19231);
    e042:	f644 301f 	movw	r0, #19231	; 0x4b1f
    e046:	f7ff ff61 	bl	df0c <_ZN16ServosNumeriques8initUARTEi>
    ServosNumeriques::sendMode();
    e04a:	f7ff ff51 	bl	def0 <_ZN16ServosNumeriques8sendModeEv>
    #endif
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
        Tirette tirette(GPIOA, GPIO_Pin_10);
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        Tirette tirette(GPIOE, GPIO_Pin_5);
    e04e:	f107 0344 	add.w	r3, r7, #68	; 0x44
    e052:	4618      	mov	r0, r3
    e054:	496e      	ldr	r1, [pc, #440]	(e210 <main+0x20c>)
    e056:	f04f 0220 	mov.w	r2, #32	; 0x20
    e05a:	f7ff f94b 	bl	d2f4 <_ZN7TiretteC1EP12GPIO_TypeDeft>
    // Initialisation des actionneurs 1
    #if defined(STM32F40_41xxx) || defined(STM32F10X_MD) // H405
        BrasLateraux::initBrasLateraux();
        Container::getSingleton();
    #elif defined(STM32F10X_CL) // H107
        BrasLateraux::initBrasLateraux();
    e05e:	f7f7 f977 	bl	5350 <_ZN12BrasLateraux16initBrasLaterauxEv>
#endif

//    tirette.attendreRemise();
//    tirette.attendreEnlevee();

    Remote::getSingleton();
    e062:	f7fe fc81 	bl	c968 <_ZN6Remote12getSingletonEv>
    // Initialisation des actionneurs 2
    #if defined(STM32F40_41xxx) || defined(STM32F10X_MD) // H405

    #elif defined(STM32F10X_CL) // H107
//        Brak* bracquemart = Brak::getSingleton();
        Sensors* sensors = Sensors::getSingleton();
    e066:	f7f8 fd67 	bl	6b38 <_ZN7Sensors12getSingletonEv>
    e06a:	4603      	mov	r3, r0
    e06c:	65bb      	str	r3, [r7, #88]
        ServosNumeriques::setLedState(1, 12);
    e06e:	f04f 0001 	mov.w	r0, #1	; 0x1
    e072:	f04f 010c 	mov.w	r1, #12	; 0xc
    e076:	f7ff fe4b 	bl	dd10 <_ZN16ServosNumeriques11setLedStateEhh>
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
        QuadratureCoderHandler* rcd = new QuadratureCoderHandler(TIM4, GPIOB, GPIO_Pin_6, GPIOB, GPIO_Pin_7);
        QuadratureCoderHandler* rcg = new QuadratureCoderHandler(TIM1, GPIOA, GPIO_Pin_8, GPIOA, GPIO_Pin_9);
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        QuadratureCoderHandler* rcd = new QuadratureCoderHandler(TIM4, GPIOD, GPIO_Pin_12, GPIOD, GPIO_Pin_13);
    e07a:	f04f 0004 	mov.w	r0, #4	; 0x4
    e07e:	f000 f8d7 	bl	e230 <_Znwj>
    e082:	4603      	mov	r3, r0
    e084:	607b      	str	r3, [r7, #4]
    e086:	687b      	ldr	r3, [r7, #4]
    e088:	2b00      	cmp	r3, #0
    e08a:	d017      	beq.n	e0bc <main+0xb8>
    e08c:	4b61      	ldr	r3, [pc, #388]	(e214 <main+0x210>)
    e08e:	9300      	str	r3, [sp, #0]
    e090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e094:	9301      	str	r3, [sp, #4]
    e096:	f04f 0300 	mov.w	r3, #0	; 0x0
    e09a:	9302      	str	r3, [sp, #8]
    e09c:	f04f 0300 	mov.w	r3, #0	; 0x0
    e0a0:	9303      	str	r3, [sp, #12]
    e0a2:	f04f 0300 	mov.w	r3, #0	; 0x0
    e0a6:	9304      	str	r3, [sp, #16]
    e0a8:	6878      	ldr	r0, [r7, #4]
    e0aa:	495b      	ldr	r1, [pc, #364]	(e218 <main+0x214>)
    e0ac:	4a59      	ldr	r2, [pc, #356]	(e214 <main+0x210>)
    e0ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    e0b2:	f7fe fa67 	bl	c584 <_ZN22QuadratureCoderHandlerC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>
    e0b6:	687b      	ldr	r3, [r7, #4]
    e0b8:	60bb      	str	r3, [r7, #8]
    e0ba:	e001      	b.n	e0c0 <main+0xbc>
    e0bc:	687b      	ldr	r3, [r7, #4]
    e0be:	60bb      	str	r3, [r7, #8]
    e0c0:	68bb      	ldr	r3, [r7, #8]
    e0c2:	65fb      	str	r3, [r7, #92]
        GPIO_PinRemapConfig(GPIO_Remap_TIM4, ENABLE);
    e0c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    e0c8:	f04f 0101 	mov.w	r1, #1	; 0x1
    e0cc:	f7f3 fce0 	bl	1a90 <GPIO_PinRemapConfig>
        QuadratureCoderHandler* rcg = new QuadratureCoderHandler(TIM3, GPIOA, GPIO_Pin_6, GPIOA, GPIO_Pin_7);
    e0d0:	f04f 0004 	mov.w	r0, #4	; 0x4
    e0d4:	f000 f8ac 	bl	e230 <_Znwj>
    e0d8:	4603      	mov	r3, r0
    e0da:	60fb      	str	r3, [r7, #12]
    e0dc:	68fb      	ldr	r3, [r7, #12]
    e0de:	2b00      	cmp	r3, #0
    e0e0:	d017      	beq.n	e112 <main+0x10e>
    e0e2:	4b4e      	ldr	r3, [pc, #312]	(e21c <main+0x218>)
    e0e4:	9300      	str	r3, [sp, #0]
    e0e6:	f04f 0380 	mov.w	r3, #128	; 0x80
    e0ea:	9301      	str	r3, [sp, #4]
    e0ec:	f04f 0300 	mov.w	r3, #0	; 0x0
    e0f0:	9302      	str	r3, [sp, #8]
    e0f2:	f04f 0300 	mov.w	r3, #0	; 0x0
    e0f6:	9303      	str	r3, [sp, #12]
    e0f8:	f04f 0300 	mov.w	r3, #0	; 0x0
    e0fc:	9304      	str	r3, [sp, #16]
    e0fe:	68f8      	ldr	r0, [r7, #12]
    e100:	4947      	ldr	r1, [pc, #284]	(e220 <main+0x21c>)
    e102:	4a46      	ldr	r2, [pc, #280]	(e21c <main+0x218>)
    e104:	f04f 0340 	mov.w	r3, #64	; 0x40
    e108:	f7fe fa3c 	bl	c584 <_ZN22QuadratureCoderHandlerC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>
    e10c:	68fb      	ldr	r3, [r7, #12]
    e10e:	613b      	str	r3, [r7, #16]
    e110:	e001      	b.n	e116 <main+0x112>
    e112:	68fb      	ldr	r3, [r7, #12]
    e114:	613b      	str	r3, [r7, #16]
    e116:	693b      	ldr	r3, [r7, #16]
    e118:	663b      	str	r3, [r7, #96]


// Pour la v1 :
//    QuadratureCoderHandler* rcd = new QuadratureCoderHandler(TIM2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_1);
 //   QuadratureCoderHandler* rcg = new QuadratureCoderHandler(TIM3, GPIOA, GPIO_Pin_6, GPIOA, GPIO_Pin_7);
    Odometrie* odometrie = new Odometrie(rcg, rcd);
    e11a:	f04f 0078 	mov.w	r0, #120	; 0x78
    e11e:	f000 f887 	bl	e230 <_Znwj>
    e122:	4603      	mov	r3, r0
    e124:	617b      	str	r3, [r7, #20]
    e126:	697b      	ldr	r3, [r7, #20]
    e128:	2b00      	cmp	r3, #0
    e12a:	d007      	beq.n	e13c <main+0x138>
    e12c:	6978      	ldr	r0, [r7, #20]
    e12e:	6e39      	ldr	r1, [r7, #96]
    e130:	6dfa      	ldr	r2, [r7, #92]
    e132:	f7fb fe69 	bl	9e08 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_>
    e136:	697b      	ldr	r3, [r7, #20]
    e138:	61bb      	str	r3, [r7, #24]
    e13a:	e001      	b.n	e140 <main+0x13c>
    e13c:	697b      	ldr	r3, [r7, #20]
    e13e:	61bb      	str	r3, [r7, #24]
    e140:	69bb      	ldr	r3, [r7, #24]
    e142:	667b      	str	r3, [r7, #100]
    Position pos(200,1850, isBlue());//1500, isBlue());
    e144:	f7ff ff4c 	bl	dfe0 <_Z6isBluev>
    e148:	4603      	mov	r3, r0
    e14a:	469c      	mov	ip, r3
    e14c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    e150:	4618      	mov	r0, r3
    e152:	4934      	ldr	r1, [pc, #208]	(e224 <main+0x220>)
    e154:	4a34      	ldr	r2, [pc, #208]	(e228 <main+0x224>)
    e156:	4663      	mov	r3, ip
    e158:	f000 f9d0 	bl	e4fc <_ZN8PositionC1Effb>
    PositionPlusAngle posPlusAngle(pos,-M_PI/2);
    e15c:	f107 0330 	add.w	r3, r7, #48	; 0x30
    e160:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    e164:	4618      	mov	r0, r3
    e166:	4611      	mov	r1, r2
    e168:	4a30      	ldr	r2, [pc, #192]	(e22c <main+0x228>)
    e16a:	f000 fbbb 	bl	e8e4 <_ZN17PositionPlusAngleC1ERK8Positionf>
    if (!isBlue())
    e16e:	f7ff ff37 	bl	dfe0 <_Z6isBluev>
    e172:	4603      	mov	r3, r0
    e174:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    e178:	b2db      	uxtb	r3, r3
    e17a:	2b00      	cmp	r3, #0
    e17c:	d010      	beq.n	e1a0 <main+0x19c>
        posPlusAngle = PositionPlusAngle(pos,-M_PI/2);
    e17e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    e182:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    e186:	4618      	mov	r0, r3
    e188:	4611      	mov	r1, r2
    e18a:	4a28      	ldr	r2, [pc, #160]	(e22c <main+0x228>)
    e18c:	f000 fbaa 	bl	e8e4 <_ZN17PositionPlusAngleC1ERK8Positionf>
    e190:	f107 0330 	add.w	r3, r7, #48	; 0x30
    e194:	f107 024c 	add.w	r2, r7, #76	; 0x4c
    e198:	4618      	mov	r0, r3
    e19a:	4611      	mov	r1, r2
    e19c:	f000 fc42 	bl	ea24 <_ZN17PositionPlusAngleaSERKS_>
    odometrie->setPos(posPlusAngle);
    e1a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
    e1a4:	6e78      	ldr	r0, [r7, #100]
    e1a6:	4619      	mov	r1, r3
    e1a8:	f7fb faee 	bl	9788 <_ZN9Odometrie6setPosERK17PositionPlusAngle>

    StrategieV2* strat = new StrategieV2(isBlue());
    e1ac:	f7ff ff18 	bl	dfe0 <_Z6isBluev>
    e1b0:	4603      	mov	r3, r0
    e1b2:	61fb      	str	r3, [r7, #28]
    e1b4:	f04f 0004 	mov.w	r0, #4	; 0x4
    e1b8:	f000 f83a 	bl	e230 <_Znwj>
    e1bc:	4603      	mov	r3, r0
    e1be:	623b      	str	r3, [r7, #32]
    e1c0:	6a3b      	ldr	r3, [r7, #32]
    e1c2:	2b00      	cmp	r3, #0
    e1c4:	d006      	beq.n	e1d4 <main+0x1d0>
    e1c6:	6a38      	ldr	r0, [r7, #32]
    e1c8:	69f9      	ldr	r1, [r7, #28]
    e1ca:	f007 ffcb 	bl	16164 <_ZN11StrategieV2C1Eb>
    e1ce:	6a3b      	ldr	r3, [r7, #32]
    e1d0:	627b      	str	r3, [r7, #36]
    e1d2:	e001      	b.n	e1d8 <main+0x1d4>
    e1d4:	6a3b      	ldr	r3, [r7, #32]
    e1d6:	627b      	str	r3, [r7, #36]
    e1d8:	6a7b      	ldr	r3, [r7, #36]
    e1da:	66bb      	str	r3, [r7, #104]
    Asservissement* asserv = new Asservissement(odometrie);
    e1dc:	f04f 0060 	mov.w	r0, #96	; 0x60
    e1e0:	f000 f826 	bl	e230 <_Znwj>
    e1e4:	4603      	mov	r3, r0
    e1e6:	62bb      	str	r3, [r7, #40]
    e1e8:	6abb      	ldr	r3, [r7, #40]
    e1ea:	2b00      	cmp	r3, #0
    e1ec:	d006      	beq.n	e1fc <main+0x1f8>
    e1ee:	6ab8      	ldr	r0, [r7, #40]
    e1f0:	6e79      	ldr	r1, [r7, #100]
    e1f2:	f7f9 fac5 	bl	7780 <_ZN14AsservissementC1EP9Odometrie>
    e1f6:	6abb      	ldr	r3, [r7, #40]
    e1f8:	62fb      	str	r3, [r7, #44]
    e1fa:	e001      	b.n	e200 <main+0x1fc>
    e1fc:	6abb      	ldr	r3, [r7, #40]
    e1fe:	62fb      	str	r3, [r7, #44]
    e200:	6afb      	ldr	r3, [r7, #44]
    e202:	66fb      	str	r3, [r7, #108]
    e204:	e7fe      	b.n	e204 <main+0x200>
    e206:	46c0      	nop			(mov r8, r8)
    e208:	e000ed14 	.word	0xe000ed14
    e20c:	00021ab8 	.word	0x00021ab8
    e210:	40011800 	.word	0x40011800
    e214:	40011400 	.word	0x40011400
    e218:	40000800 	.word	0x40000800
    e21c:	40010800 	.word	0x40010800
    e220:	40000400 	.word	0x40000400
    e224:	43480000 	.word	0x43480000
    e228:	44e74000 	.word	0x44e74000
    e22c:	bfc90fdb 	.word	0xbfc90fdb

0000e230 <_Znwj>:
static Header* nextFreeMemory;
static Header* base = NULL;
static int nbPlace = 0;
static int sizeM = 0;

void * operator new(size_t size) throw()
    e230:	b480      	push	{r7}
    e232:	b089      	sub	sp, #36
    e234:	af00      	add	r7, sp, #0
    e236:	6078      	str	r0, [r7, #4]
{
    nbPlace++;
    e238:	4b44      	ldr	r3, [pc, #272]	(e34c <_Znwj+0x11c>)
    e23a:	681b      	ldr	r3, [r3, #0]
    e23c:	f103 0201 	add.w	r2, r3, #1	; 0x1
    e240:	4b42      	ldr	r3, [pc, #264]	(e34c <_Znwj+0x11c>)
    e242:	601a      	str	r2, [r3, #0]
    if (base == NULL)
    e244:	4b42      	ldr	r3, [pc, #264]	(e350 <_Znwj+0x120>)
    e246:	681b      	ldr	r3, [r3, #0]
    e248:	2b00      	cmp	r3, #0
    e24a:	d111      	bne.n	e270 <_Znwj+0x40>
    {
        base = memory_ptr;
    e24c:	4b41      	ldr	r3, [pc, #260]	(e354 <_Znwj+0x124>)
    e24e:	681a      	ldr	r2, [r3, #0]
    e250:	4b3f      	ldr	r3, [pc, #252]	(e350 <_Znwj+0x120>)
    e252:	601a      	str	r2, [r3, #0]
        base->s.nextFree = memory_ptr;
    e254:	4b3e      	ldr	r3, [pc, #248]	(e350 <_Znwj+0x120>)
    e256:	681a      	ldr	r2, [r3, #0]
    e258:	4b3e      	ldr	r3, [pc, #248]	(e354 <_Znwj+0x124>)
    e25a:	681b      	ldr	r3, [r3, #0]
    e25c:	6013      	str	r3, [r2, #0]
        #endif
        #ifdef STM32F10X_MD // stm h103
        base->s.size = 5000;   // Initialisation de la mémoire = Taille disponible dans la ram en unit de base de la mémoire (une unité = 4 octets). Ici 20kB -> 5000 unit
        #endif
        #ifdef STM32F10X_CL // stm h107
        base->s.size = 16000;   // Initialisation de la mémoire = Taille disponible dans la ram en unit de base de la mémoire (une unité = 4 octets). Ici 64kB -> 16000 unit
    e25e:	4b3c      	ldr	r3, [pc, #240]	(e350 <_Znwj+0x120>)
    e260:	681a      	ldr	r2, [r3, #0]
    e262:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
    e266:	6053      	str	r3, [r2, #4]
        #endif
        nextFreeMemory = memory_ptr;
    e268:	4b3a      	ldr	r3, [pc, #232]	(e354 <_Znwj+0x124>)
    e26a:	681a      	ldr	r2, [r3, #0]
    e26c:	4b3a      	ldr	r3, [pc, #232]	(e358 <_Znwj+0x128>)
    e26e:	601a      	str	r2, [r3, #0]

    }
    unsigned nunit = (size + sizeof(Header)-1)/sizeof(Header)+1;
    e270:	687b      	ldr	r3, [r7, #4]
    e272:	f103 0307 	add.w	r3, r3, #7	; 0x7
    e276:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    e27a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e27e:	60fb      	str	r3, [r7, #12]
    sizeM += nunit;
    e280:	4b36      	ldr	r3, [pc, #216]	(e35c <_Znwj+0x12c>)
    e282:	681b      	ldr	r3, [r3, #0]
    e284:	461a      	mov	r2, r3
    e286:	68fb      	ldr	r3, [r7, #12]
    e288:	4413      	add	r3, r2
    e28a:	461a      	mov	r2, r3
    e28c:	4b33      	ldr	r3, [pc, #204]	(e35c <_Znwj+0x12c>)
    e28e:	601a      	str	r2, [r3, #0]
    Header *p = nextFreeMemory;
    e290:	4b31      	ldr	r3, [pc, #196]	(e358 <_Znwj+0x128>)
    e292:	681b      	ldr	r3, [r3, #0]
    e294:	613b      	str	r3, [r7, #16]
    Header  *oldP = p;
    e296:	693b      	ldr	r3, [r7, #16]
    e298:	617b      	str	r3, [r7, #20]
    Header *ip;
    for (ip = nextFreeMemory; ; p = ip, ip = ip->s.nextFree)
    e29a:	4b2f      	ldr	r3, [pc, #188]	(e358 <_Znwj+0x128>)
    e29c:	681b      	ldr	r3, [r3, #0]
    e29e:	61bb      	str	r3, [r7, #24]
    {
        if (nunit <= ip->s.size )
    e2a0:	69bb      	ldr	r3, [r7, #24]
    e2a2:	685a      	ldr	r2, [r3, #4]
    e2a4:	68fb      	ldr	r3, [r7, #12]
    e2a6:	429a      	cmp	r2, r3
    e2a8:	d33a      	bcc.n	e320 <_Znwj+0xf0>
        {
            if (nunit == ip->s.size)
    e2aa:	69bb      	ldr	r3, [r7, #24]
    e2ac:	685a      	ldr	r2, [r3, #4]
    e2ae:	68fb      	ldr	r3, [r7, #12]
    e2b0:	429a      	cmp	r2, r3
    e2b2:	d10e      	bne.n	e2d2 <_Znwj+0xa2>
            {
                if (ip->s.nextFree != ip)
    e2b4:	69bb      	ldr	r3, [r7, #24]
    e2b6:	681a      	ldr	r2, [r3, #0]
    e2b8:	69bb      	ldr	r3, [r7, #24]
    e2ba:	429a      	cmp	r2, r3
    e2bc:	d004      	beq.n	e2c8 <_Znwj+0x98>
                {
                    nextFreeMemory = ip->s.nextFree;
    e2be:	69bb      	ldr	r3, [r7, #24]
    e2c0:	681a      	ldr	r2, [r3, #0]
    e2c2:	4b25      	ldr	r3, [pc, #148]	(e358 <_Znwj+0x128>)
    e2c4:	601a      	str	r2, [r3, #0]
    e2c6:	e026      	b.n	e316 <_Znwj+0xe6>
                }
                else
                {
                    nextFreeMemory = NULL;
    e2c8:	4a23      	ldr	r2, [pc, #140]	(e358 <_Znwj+0x128>)
    e2ca:	f04f 0300 	mov.w	r3, #0	; 0x0
    e2ce:	6013      	str	r3, [r2, #0]
    e2d0:	e021      	b.n	e316 <_Znwj+0xe6>
                }
            }
            else
            {
                unsigned oldFreeUnit = p->s.size;
    e2d2:	693b      	ldr	r3, [r7, #16]
    e2d4:	685b      	ldr	r3, [r3, #4]
    e2d6:	61fb      	str	r3, [r7, #28]
                p->s.size = nunit;
    e2d8:	693a      	ldr	r2, [r7, #16]
    e2da:	68fb      	ldr	r3, [r7, #12]
    e2dc:	6053      	str	r3, [r2, #4]
                oldP = p;
    e2de:	693b      	ldr	r3, [r7, #16]
    e2e0:	617b      	str	r3, [r7, #20]
                p += nunit;
    e2e2:	68fb      	ldr	r3, [r7, #12]
    e2e4:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e2e8:	693b      	ldr	r3, [r7, #16]
    e2ea:	4413      	add	r3, r2
    e2ec:	613b      	str	r3, [r7, #16]
                oldP->s.nextFree = p;
    e2ee:	697a      	ldr	r2, [r7, #20]
    e2f0:	693b      	ldr	r3, [r7, #16]
    e2f2:	6013      	str	r3, [r2, #0]
                p->s.size = oldFreeUnit - nunit;
    e2f4:	69fa      	ldr	r2, [r7, #28]
    e2f6:	68fb      	ldr	r3, [r7, #12]
    e2f8:	ebc3 0202 	rsb	r2, r3, r2
    e2fc:	693b      	ldr	r3, [r7, #16]
    e2fe:	605a      	str	r2, [r3, #4]
                p->s.nextFree = p;
    e300:	693a      	ldr	r2, [r7, #16]
    e302:	693b      	ldr	r3, [r7, #16]
    e304:	6013      	str	r3, [r2, #0]
                if (ip == nextFreeMemory)
    e306:	4b14      	ldr	r3, [pc, #80]	(e358 <_Znwj+0x128>)
    e308:	681a      	ldr	r2, [r3, #0]
    e30a:	69bb      	ldr	r3, [r7, #24]
    e30c:	4293      	cmp	r3, r2
    e30e:	d102      	bne.n	e316 <_Znwj+0xe6>
                {
                   nextFreeMemory = p;
    e310:	4a11      	ldr	r2, [pc, #68]	(e358 <_Znwj+0x128>)
    e312:	693b      	ldr	r3, [r7, #16]
    e314:	6013      	str	r3, [r2, #0]
                }
            }

            return ip+1;
    e316:	69bb      	ldr	r3, [r7, #24]
    e318:	f103 0308 	add.w	r3, r3, #8	; 0x8
    e31c:	603b      	str	r3, [r7, #0]
    e31e:	e00d      	b.n	e33c <_Znwj+0x10c>
        }
        if (ip==oldP)
    e320:	69ba      	ldr	r2, [r7, #24]
    e322:	697b      	ldr	r3, [r7, #20]
    e324:	429a      	cmp	r2, r3
    e326:	d103      	bne.n	e330 <_Znwj+0x100>
        {
            return NULL;
    e328:	f04f 0300 	mov.w	r3, #0	; 0x0
    e32c:	603b      	str	r3, [r7, #0]
    e32e:	e005      	b.n	e33c <_Znwj+0x10c>
    unsigned nunit = (size + sizeof(Header)-1)/sizeof(Header)+1;
    sizeM += nunit;
    Header *p = nextFreeMemory;
    Header  *oldP = p;
    Header *ip;
    for (ip = nextFreeMemory; ; p = ip, ip = ip->s.nextFree)
    e330:	69bb      	ldr	r3, [r7, #24]
    e332:	613b      	str	r3, [r7, #16]
    e334:	69bb      	ldr	r3, [r7, #24]
    e336:	681b      	ldr	r3, [r3, #0]
    e338:	61bb      	str	r3, [r7, #24]
    e33a:	e7b1      	b.n	e2a0 <_Znwj+0x70>
    e33c:	683b      	ldr	r3, [r7, #0]
        if (ip==oldP)
        {
            return NULL;
        }
    }
}
    e33e:	4618      	mov	r0, r3
    e340:	f107 0724 	add.w	r7, r7, #36	; 0x24
    e344:	46bd      	mov	sp, r7
    e346:	bc80      	pop	{r7}
    e348:	4770      	bx	lr
    e34a:	46c0      	nop			(mov r8, r8)
    e34c:	20000588 	.word	0x20000588
    e350:	20000594 	.word	0x20000594
    e354:	2000002c 	.word	0x2000002c
    e358:	20000590 	.word	0x20000590
    e35c:	2000058c 	.word	0x2000058c

0000e360 <_Znaj>:

void * operator new[](size_t size) throw()
    e360:	b580      	push	{r7, lr}
    e362:	b082      	sub	sp, #8
    e364:	af00      	add	r7, sp, #0
    e366:	6078      	str	r0, [r7, #4]
{
  return operator new(size);
    e368:	6878      	ldr	r0, [r7, #4]
    e36a:	f7ff ff61 	bl	e230 <_Znwj>
    e36e:	4603      	mov	r3, r0
}
    e370:	4618      	mov	r0, r3
    e372:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e376:	46bd      	mov	sp, r7
    e378:	bd80      	pop	{r7, pc}
    e37a:	46c0      	nop			(mov r8, r8)

0000e37c <_ZdlPv>:

void operator delete(void * p)    throw()
    e37c:	b480      	push	{r7}
    e37e:	b085      	sub	sp, #20
    e380:	af00      	add	r7, sp, #0
    e382:	6078      	str	r0, [r7, #4]
{
    nbPlace--;
    e384:	4b36      	ldr	r3, [pc, #216]	(e460 <_ZdlPv+0xe4>)
    e386:	681b      	ldr	r3, [r3, #0]
    e388:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    e38c:	4b34      	ldr	r3, [pc, #208]	(e460 <_ZdlPv+0xe4>)
    e38e:	601a      	str	r2, [r3, #0]
    Header* d = (Header*)p -1;
    e390:	687b      	ldr	r3, [r7, #4]
    e392:	f1a3 0308 	sub.w	r3, r3, #8	; 0x8
    e396:	60bb      	str	r3, [r7, #8]
    sizeM -= d->s.size;
    e398:	4b32      	ldr	r3, [pc, #200]	(e464 <_ZdlPv+0xe8>)
    e39a:	681b      	ldr	r3, [r3, #0]
    e39c:	461a      	mov	r2, r3
    e39e:	68bb      	ldr	r3, [r7, #8]
    e3a0:	685b      	ldr	r3, [r3, #4]
    e3a2:	ebc3 0302 	rsb	r3, r3, r2
    e3a6:	461a      	mov	r2, r3
    e3a8:	4b2e      	ldr	r3, [pc, #184]	(e464 <_ZdlPv+0xe8>)
    e3aa:	601a      	str	r2, [r3, #0]
    Header* predFree;
    for(predFree = nextFreeMemory;  !((d > predFree)&&(d<predFree->s.nextFree)); predFree = predFree->s.nextFree )
    e3ac:	4b2e      	ldr	r3, [pc, #184]	(e468 <_ZdlPv+0xec>)
    e3ae:	681b      	ldr	r3, [r3, #0]
    e3b0:	60fb      	str	r3, [r7, #12]
    e3b2:	e010      	b.n	e3d6 <_ZdlPv+0x5a>
    {
        if(predFree>=predFree->s.nextFree && (d > predFree || d<predFree->s.nextFree))
    e3b4:	68fb      	ldr	r3, [r7, #12]
    e3b6:	681a      	ldr	r2, [r3, #0]
    e3b8:	68fb      	ldr	r3, [r7, #12]
    e3ba:	429a      	cmp	r2, r3
    e3bc:	d808      	bhi.n	e3d0 <_ZdlPv+0x54>
    e3be:	68ba      	ldr	r2, [r7, #8]
    e3c0:	68fb      	ldr	r3, [r7, #12]
    e3c2:	429a      	cmp	r2, r3
    e3c4:	d810      	bhi.n	e3e8 <_ZdlPv+0x6c>
    e3c6:	68fb      	ldr	r3, [r7, #12]
    e3c8:	681a      	ldr	r2, [r3, #0]
    e3ca:	68bb      	ldr	r3, [r7, #8]
    e3cc:	429a      	cmp	r2, r3
    e3ce:	d80b      	bhi.n	e3e8 <_ZdlPv+0x6c>
{
    nbPlace--;
    Header* d = (Header*)p -1;
    sizeM -= d->s.size;
    Header* predFree;
    for(predFree = nextFreeMemory;  !((d > predFree)&&(d<predFree->s.nextFree)); predFree = predFree->s.nextFree )
    e3d0:	68fb      	ldr	r3, [r7, #12]
    e3d2:	681b      	ldr	r3, [r3, #0]
    e3d4:	60fb      	str	r3, [r7, #12]
    e3d6:	68ba      	ldr	r2, [r7, #8]
    e3d8:	68fb      	ldr	r3, [r7, #12]
    e3da:	429a      	cmp	r2, r3
    e3dc:	d9ea      	bls.n	e3b4 <_ZdlPv+0x38>
    e3de:	68fb      	ldr	r3, [r7, #12]
    e3e0:	681a      	ldr	r2, [r3, #0]
    e3e2:	68bb      	ldr	r3, [r7, #8]
    e3e4:	429a      	cmp	r2, r3
    e3e6:	d9e5      	bls.n	e3b4 <_ZdlPv+0x38>
    {
        if(predFree>=predFree->s.nextFree && (d > predFree || d<predFree->s.nextFree))
        break;
    }

    if ( d + d->s.size == predFree->s.nextFree ) // si le prochain vide est collé au block libéré
    e3e8:	68bb      	ldr	r3, [r7, #8]
    e3ea:	685b      	ldr	r3, [r3, #4]
    e3ec:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e3f0:	68bb      	ldr	r3, [r7, #8]
    e3f2:	441a      	add	r2, r3
    e3f4:	68fb      	ldr	r3, [r7, #12]
    e3f6:	681b      	ldr	r3, [r3, #0]
    e3f8:	429a      	cmp	r2, r3
    e3fa:	d10d      	bne.n	e418 <_ZdlPv+0x9c>
    {
        d->s.size += predFree->s.nextFree->s.size;
    e3fc:	68bb      	ldr	r3, [r7, #8]
    e3fe:	685a      	ldr	r2, [r3, #4]
    e400:	68fb      	ldr	r3, [r7, #12]
    e402:	681b      	ldr	r3, [r3, #0]
    e404:	685b      	ldr	r3, [r3, #4]
    e406:	441a      	add	r2, r3
    e408:	68bb      	ldr	r3, [r7, #8]
    e40a:	605a      	str	r2, [r3, #4]
        d->s.nextFree = predFree->s.nextFree->s.nextFree;
    e40c:	68fb      	ldr	r3, [r7, #12]
    e40e:	681b      	ldr	r3, [r3, #0]
    e410:	681a      	ldr	r2, [r3, #0]
    e412:	68bb      	ldr	r3, [r7, #8]
    e414:	601a      	str	r2, [r3, #0]
    e416:	e003      	b.n	e420 <_ZdlPv+0xa4>
    }
    else
    {
        d->s.nextFree = predFree->s.nextFree;
    e418:	68fb      	ldr	r3, [r7, #12]
    e41a:	681a      	ldr	r2, [r3, #0]
    e41c:	68bb      	ldr	r3, [r7, #8]
    e41e:	601a      	str	r2, [r3, #0]
    }
    if (predFree+predFree->s.size == d)
    e420:	68fb      	ldr	r3, [r7, #12]
    e422:	685b      	ldr	r3, [r3, #4]
    e424:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e428:	68fb      	ldr	r3, [r7, #12]
    e42a:	441a      	add	r2, r3
    e42c:	68bb      	ldr	r3, [r7, #8]
    e42e:	429a      	cmp	r2, r3
    e430:	d10b      	bne.n	e44a <_ZdlPv+0xce>
    {
        predFree->s.nextFree = d->s.nextFree;
    e432:	68bb      	ldr	r3, [r7, #8]
    e434:	681a      	ldr	r2, [r3, #0]
    e436:	68fb      	ldr	r3, [r7, #12]
    e438:	601a      	str	r2, [r3, #0]
        predFree->s.size += d->s.size;
    e43a:	68fb      	ldr	r3, [r7, #12]
    e43c:	685a      	ldr	r2, [r3, #4]
    e43e:	68bb      	ldr	r3, [r7, #8]
    e440:	685b      	ldr	r3, [r3, #4]
    e442:	441a      	add	r2, r3
    e444:	68fb      	ldr	r3, [r7, #12]
    e446:	605a      	str	r2, [r3, #4]
    e448:	e002      	b.n	e450 <_ZdlPv+0xd4>
    }
    else
    {
        predFree->s.nextFree = d;
    e44a:	68fa      	ldr	r2, [r7, #12]
    e44c:	68bb      	ldr	r3, [r7, #8]
    e44e:	6013      	str	r3, [r2, #0]
    }
    nextFreeMemory = predFree;
    e450:	4a05      	ldr	r2, [pc, #20]	(e468 <_ZdlPv+0xec>)
    e452:	68fb      	ldr	r3, [r7, #12]
    e454:	6013      	str	r3, [r2, #0]

  /*  d--; // d est maintenant le Header de la zone mémoire contenant l'objet que l'on delete
    d->s.nextFree = nextFreeMemory; // On indique que la prochaîne mémoire vide sera la première mémoire vide au moment où on a lancé le delete
    nextFreeMemory = d;
    */
}
    e456:	f107 0714 	add.w	r7, r7, #20	; 0x14
    e45a:	46bd      	mov	sp, r7
    e45c:	bc80      	pop	{r7}
    e45e:	4770      	bx	lr
    e460:	20000588 	.word	0x20000588
    e464:	2000058c 	.word	0x2000058c
    e468:	20000590 	.word	0x20000590

0000e46c <_ZdaPv>:

void operator delete[](void * p)    throw()
    e46c:	b580      	push	{r7, lr}
    e46e:	b082      	sub	sp, #8
    e470:	af00      	add	r7, sp, #0
    e472:	6078      	str	r0, [r7, #4]
{
    return operator delete(p);
    e474:	6878      	ldr	r0, [r7, #4]
    e476:	f7ff ff81 	bl	e37c <_ZdlPv>
}
    e47a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e47e:	46bd      	mov	sp, r7
    e480:	bd80      	pop	{r7, pc}
    e482:	46c0      	nop			(mov r8, r8)

0000e484 <_ZN8PositionC2Ev>:

#include "position.h"


// Constructeur par défaut avec des coordonnées nulles.
Position::Position()
    e484:	b480      	push	{r7}
    e486:	b083      	sub	sp, #12
    e488:	af00      	add	r7, sp, #0
    e48a:	6078      	str	r0, [r7, #4]
    : x(0), y(0)
    e48c:	687a      	ldr	r2, [r7, #4]
    e48e:	4b06      	ldr	r3, [pc, #24]	(e4a8 <_ZN8PositionC2Ev+0x24>)
    e490:	6013      	str	r3, [r2, #0]
    e492:	687a      	ldr	r2, [r7, #4]
    e494:	4b04      	ldr	r3, [pc, #16]	(e4a8 <_ZN8PositionC2Ev+0x24>)
    e496:	6053      	str	r3, [r2, #4]
{
}
    e498:	687b      	ldr	r3, [r7, #4]
    e49a:	4618      	mov	r0, r3
    e49c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e4a0:	46bd      	mov	sp, r7
    e4a2:	bc80      	pop	{r7}
    e4a4:	4770      	bx	lr
    e4a6:	46c0      	nop			(mov r8, r8)
    e4a8:	00000000 	.word	0x00000000

0000e4ac <_ZN8PositionC1Ev>:

#include "position.h"


// Constructeur par défaut avec des coordonnées nulles.
Position::Position()
    e4ac:	b480      	push	{r7}
    e4ae:	b083      	sub	sp, #12
    e4b0:	af00      	add	r7, sp, #0
    e4b2:	6078      	str	r0, [r7, #4]
    : x(0), y(0)
    e4b4:	687a      	ldr	r2, [r7, #4]
    e4b6:	4b06      	ldr	r3, [pc, #24]	(e4d0 <_ZN8PositionC1Ev+0x24>)
    e4b8:	6013      	str	r3, [r2, #0]
    e4ba:	687a      	ldr	r2, [r7, #4]
    e4bc:	4b04      	ldr	r3, [pc, #16]	(e4d0 <_ZN8PositionC1Ev+0x24>)
    e4be:	6053      	str	r3, [r2, #4]
{
}
    e4c0:	687b      	ldr	r3, [r7, #4]
    e4c2:	4618      	mov	r0, r3
    e4c4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e4c8:	46bd      	mov	sp, r7
    e4ca:	bc80      	pop	{r7}
    e4cc:	4770      	bx	lr
    e4ce:	46c0      	nop			(mov r8, r8)
    e4d0:	00000000 	.word	0x00000000

0000e4d4 <_ZN8PositionC2Effb>:

Position::Position(Distance X, Distance Y, bool isBlue)
    e4d4:	b480      	push	{r7}
    e4d6:	b085      	sub	sp, #20
    e4d8:	af00      	add	r7, sp, #0
    e4da:	60f8      	str	r0, [r7, #12]
    e4dc:	60b9      	str	r1, [r7, #8]
    e4de:	607a      	str	r2, [r7, #4]
    e4e0:	70fb      	strb	r3, [r7, #3]
    : x(X), y(Y)
    e4e2:	68fa      	ldr	r2, [r7, #12]
    e4e4:	68bb      	ldr	r3, [r7, #8]
    e4e6:	6013      	str	r3, [r2, #0]
    e4e8:	68fa      	ldr	r2, [r7, #12]
    e4ea:	687b      	ldr	r3, [r7, #4]
    e4ec:	6053      	str	r3, [r2, #4]
{
    /*if (!isBlue)
    {
        x = 3000-x;
    }*/
}
    e4ee:	68fb      	ldr	r3, [r7, #12]
    e4f0:	4618      	mov	r0, r3
    e4f2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    e4f6:	46bd      	mov	sp, r7
    e4f8:	bc80      	pop	{r7}
    e4fa:	4770      	bx	lr

0000e4fc <_ZN8PositionC1Effb>:
Position::Position()
    : x(0), y(0)
{
}

Position::Position(Distance X, Distance Y, bool isBlue)
    e4fc:	b480      	push	{r7}
    e4fe:	b085      	sub	sp, #20
    e500:	af00      	add	r7, sp, #0
    e502:	60f8      	str	r0, [r7, #12]
    e504:	60b9      	str	r1, [r7, #8]
    e506:	607a      	str	r2, [r7, #4]
    e508:	70fb      	strb	r3, [r7, #3]
    : x(X), y(Y)
    e50a:	68fa      	ldr	r2, [r7, #12]
    e50c:	68bb      	ldr	r3, [r7, #8]
    e50e:	6013      	str	r3, [r2, #0]
    e510:	68fa      	ldr	r2, [r7, #12]
    e512:	687b      	ldr	r3, [r7, #4]
    e514:	6053      	str	r3, [r2, #4]
{
    /*if (!isBlue)
    {
        x = 3000-x;
    }*/
}
    e516:	68fb      	ldr	r3, [r7, #12]
    e518:	4618      	mov	r0, r3
    e51a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    e51e:	46bd      	mov	sp, r7
    e520:	bc80      	pop	{r7}
    e522:	4770      	bx	lr

0000e524 <_ZNK8Position4getXEv>:

Distance Position::getX() const
    e524:	b480      	push	{r7}
    e526:	b083      	sub	sp, #12
    e528:	af00      	add	r7, sp, #0
    e52a:	6078      	str	r0, [r7, #4]
{
    return x;
    e52c:	687b      	ldr	r3, [r7, #4]
    e52e:	681b      	ldr	r3, [r3, #0]
}
    e530:	4618      	mov	r0, r3
    e532:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e536:	46bd      	mov	sp, r7
    e538:	bc80      	pop	{r7}
    e53a:	4770      	bx	lr

0000e53c <_ZNK8Position4getYEv>:

Distance Position::getY() const
    e53c:	b480      	push	{r7}
    e53e:	b083      	sub	sp, #12
    e540:	af00      	add	r7, sp, #0
    e542:	6078      	str	r0, [r7, #4]
{
    return y;
    e544:	687b      	ldr	r3, [r7, #4]
    e546:	685b      	ldr	r3, [r3, #4]
}
    e548:	4618      	mov	r0, r3
    e54a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e54e:	46bd      	mov	sp, r7
    e550:	bc80      	pop	{r7}
    e552:	4770      	bx	lr

0000e554 <_ZN8Position4setXEf>:

void Position::setX(Distance X)
    e554:	b480      	push	{r7}
    e556:	b083      	sub	sp, #12
    e558:	af00      	add	r7, sp, #0
    e55a:	6078      	str	r0, [r7, #4]
    e55c:	6039      	str	r1, [r7, #0]
{
    x = X;
    e55e:	687a      	ldr	r2, [r7, #4]
    e560:	683b      	ldr	r3, [r7, #0]
    e562:	6013      	str	r3, [r2, #0]
}
    e564:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e568:	46bd      	mov	sp, r7
    e56a:	bc80      	pop	{r7}
    e56c:	4770      	bx	lr
    e56e:	46c0      	nop			(mov r8, r8)

0000e570 <_ZN8Position4setYEf>:

void Position::setY(Distance Y)
    e570:	b480      	push	{r7}
    e572:	b083      	sub	sp, #12
    e574:	af00      	add	r7, sp, #0
    e576:	6078      	str	r0, [r7, #4]
    e578:	6039      	str	r1, [r7, #0]
{
    y = Y;
    e57a:	687a      	ldr	r2, [r7, #4]
    e57c:	683b      	ldr	r3, [r7, #0]
    e57e:	6053      	str	r3, [r2, #4]
}
    e580:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e584:	46bd      	mov	sp, r7
    e586:	bc80      	pop	{r7}
    e588:	4770      	bx	lr
    e58a:	46c0      	nop			(mov r8, r8)

0000e58c <_ZNK8PositionplERKS_>:

Position Position::operator+(const Position &position) const
    e58c:	b5b0      	push	{r4, r5, r7, lr}
    e58e:	b084      	sub	sp, #16
    e590:	af00      	add	r7, sp, #0
    e592:	4604      	mov	r4, r0
    e594:	6079      	str	r1, [r7, #4]
    e596:	603a      	str	r2, [r7, #0]
{
    Position resultat(x+position.x,y+position.y);
    e598:	687b      	ldr	r3, [r7, #4]
    e59a:	681a      	ldr	r2, [r3, #0]
    e59c:	683b      	ldr	r3, [r7, #0]
    e59e:	681b      	ldr	r3, [r3, #0]
    e5a0:	4610      	mov	r0, r2
    e5a2:	4619      	mov	r1, r3
    e5a4:	f00c f91a 	bl	1a7dc <__addsf3>
    e5a8:	4603      	mov	r3, r0
    e5aa:	461d      	mov	r5, r3
    e5ac:	687b      	ldr	r3, [r7, #4]
    e5ae:	685a      	ldr	r2, [r3, #4]
    e5b0:	683b      	ldr	r3, [r7, #0]
    e5b2:	685b      	ldr	r3, [r3, #4]
    e5b4:	4610      	mov	r0, r2
    e5b6:	4619      	mov	r1, r3
    e5b8:	f00c f910 	bl	1a7dc <__addsf3>
    e5bc:	4603      	mov	r3, r0
    e5be:	4620      	mov	r0, r4
    e5c0:	4629      	mov	r1, r5
    e5c2:	461a      	mov	r2, r3
    e5c4:	f04f 0301 	mov.w	r3, #1	; 0x1
    e5c8:	f7ff ff98 	bl	e4fc <_ZN8PositionC1Effb>
    return resultat;
}
    e5cc:	4620      	mov	r0, r4
    e5ce:	f107 0710 	add.w	r7, r7, #16	; 0x10
    e5d2:	46bd      	mov	sp, r7
    e5d4:	bdb0      	pop	{r4, r5, r7, pc}
    e5d6:	46c0      	nop			(mov r8, r8)

0000e5d8 <_ZNK8PositionmiERKS_>:

Position Position::operator-(const Position &position) const
    e5d8:	b5b0      	push	{r4, r5, r7, lr}
    e5da:	b084      	sub	sp, #16
    e5dc:	af00      	add	r7, sp, #0
    e5de:	4604      	mov	r4, r0
    e5e0:	6079      	str	r1, [r7, #4]
    e5e2:	603a      	str	r2, [r7, #0]
{
    Position resultat(x-position.x,y-position.y);
    e5e4:	687b      	ldr	r3, [r7, #4]
    e5e6:	681a      	ldr	r2, [r3, #0]
    e5e8:	683b      	ldr	r3, [r7, #0]
    e5ea:	681b      	ldr	r3, [r3, #0]
    e5ec:	4610      	mov	r0, r2
    e5ee:	4619      	mov	r1, r3
    e5f0:	f00c f8f2 	bl	1a7d8 <__aeabi_fsub>
    e5f4:	4603      	mov	r3, r0
    e5f6:	461d      	mov	r5, r3
    e5f8:	687b      	ldr	r3, [r7, #4]
    e5fa:	685a      	ldr	r2, [r3, #4]
    e5fc:	683b      	ldr	r3, [r7, #0]
    e5fe:	685b      	ldr	r3, [r3, #4]
    e600:	4610      	mov	r0, r2
    e602:	4619      	mov	r1, r3
    e604:	f00c f8e8 	bl	1a7d8 <__aeabi_fsub>
    e608:	4603      	mov	r3, r0
    e60a:	4620      	mov	r0, r4
    e60c:	4629      	mov	r1, r5
    e60e:	461a      	mov	r2, r3
    e610:	f04f 0301 	mov.w	r3, #1	; 0x1
    e614:	f7ff ff72 	bl	e4fc <_ZN8PositionC1Effb>
    return resultat;
}
    e618:	4620      	mov	r0, r4
    e61a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    e61e:	46bd      	mov	sp, r7
    e620:	bdb0      	pop	{r4, r5, r7, pc}
    e622:	46c0      	nop			(mov r8, r8)

0000e624 <_ZN8PositionaSES_>:

void Position::operator=(Position position)
    e624:	b480      	push	{r7}
    e626:	b085      	sub	sp, #20
    e628:	af00      	add	r7, sp, #0
    e62a:	60f8      	str	r0, [r7, #12]
    e62c:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e630:	e883 0006 	stmia.w	r3, {r1, r2}
{

    x = position.x;
    e634:	687a      	ldr	r2, [r7, #4]
    e636:	68fb      	ldr	r3, [r7, #12]
    e638:	601a      	str	r2, [r3, #0]
    y = position.y;
    e63a:	68ba      	ldr	r2, [r7, #8]
    e63c:	68fb      	ldr	r3, [r7, #12]
    e63e:	605a      	str	r2, [r3, #4]

}
    e640:	f107 0714 	add.w	r7, r7, #20	; 0x14
    e644:	46bd      	mov	sp, r7
    e646:	bc80      	pop	{r7}
    e648:	4770      	bx	lr
    e64a:	46c0      	nop			(mov r8, r8)

0000e64c <_ZN8PositionpLERKS_>:

Position Position::operator+=(const Position &position)
    e64c:	b590      	push	{r4, r7, lr}
    e64e:	b083      	sub	sp, #12
    e650:	af00      	add	r7, sp, #0
    e652:	4604      	mov	r4, r0
    e654:	6079      	str	r1, [r7, #4]
    e656:	603a      	str	r2, [r7, #0]
{
    this->x+=position.x;
    e658:	687b      	ldr	r3, [r7, #4]
    e65a:	681a      	ldr	r2, [r3, #0]
    e65c:	683b      	ldr	r3, [r7, #0]
    e65e:	681b      	ldr	r3, [r3, #0]
    e660:	4610      	mov	r0, r2
    e662:	4619      	mov	r1, r3
    e664:	f00c f8ba 	bl	1a7dc <__addsf3>
    e668:	4603      	mov	r3, r0
    e66a:	461a      	mov	r2, r3
    e66c:	687b      	ldr	r3, [r7, #4]
    e66e:	601a      	str	r2, [r3, #0]
    this->y+=position.y;
    e670:	687b      	ldr	r3, [r7, #4]
    e672:	685a      	ldr	r2, [r3, #4]
    e674:	683b      	ldr	r3, [r7, #0]
    e676:	685b      	ldr	r3, [r3, #4]
    e678:	4610      	mov	r0, r2
    e67a:	4619      	mov	r1, r3
    e67c:	f00c f8ae 	bl	1a7dc <__addsf3>
    e680:	4603      	mov	r3, r0
    e682:	461a      	mov	r2, r3
    e684:	687b      	ldr	r3, [r7, #4]
    e686:	605a      	str	r2, [r3, #4]

    return *this;
    e688:	687b      	ldr	r3, [r7, #4]
    e68a:	4620      	mov	r0, r4
    e68c:	4619      	mov	r1, r3
    e68e:	f04f 0208 	mov.w	r2, #8	; 0x8
    e692:	f011 ff35 	bl	20500 <memmove>
}
    e696:	4620      	mov	r0, r4
    e698:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e69c:	46bd      	mov	sp, r7
    e69e:	bd90      	pop	{r4, r7, pc}

0000e6a0 <_ZN8PositionmIERKS_>:

Position Position::operator-=(const Position &position)
    e6a0:	b590      	push	{r4, r7, lr}
    e6a2:	b083      	sub	sp, #12
    e6a4:	af00      	add	r7, sp, #0
    e6a6:	4604      	mov	r4, r0
    e6a8:	6079      	str	r1, [r7, #4]
    e6aa:	603a      	str	r2, [r7, #0]
{
    this->x-=position.x;
    e6ac:	687b      	ldr	r3, [r7, #4]
    e6ae:	681a      	ldr	r2, [r3, #0]
    e6b0:	683b      	ldr	r3, [r7, #0]
    e6b2:	681b      	ldr	r3, [r3, #0]
    e6b4:	4610      	mov	r0, r2
    e6b6:	4619      	mov	r1, r3
    e6b8:	f00c f88e 	bl	1a7d8 <__aeabi_fsub>
    e6bc:	4603      	mov	r3, r0
    e6be:	461a      	mov	r2, r3
    e6c0:	687b      	ldr	r3, [r7, #4]
    e6c2:	601a      	str	r2, [r3, #0]
    this->y-=position.y;
    e6c4:	687b      	ldr	r3, [r7, #4]
    e6c6:	685a      	ldr	r2, [r3, #4]
    e6c8:	683b      	ldr	r3, [r7, #0]
    e6ca:	685b      	ldr	r3, [r3, #4]
    e6cc:	4610      	mov	r0, r2
    e6ce:	4619      	mov	r1, r3
    e6d0:	f00c f882 	bl	1a7d8 <__aeabi_fsub>
    e6d4:	4603      	mov	r3, r0
    e6d6:	461a      	mov	r2, r3
    e6d8:	687b      	ldr	r3, [r7, #4]
    e6da:	605a      	str	r2, [r3, #4]

    return *this;
    e6dc:	687b      	ldr	r3, [r7, #4]
    e6de:	4620      	mov	r0, r4
    e6e0:	4619      	mov	r1, r3
    e6e2:	f04f 0208 	mov.w	r2, #8	; 0x8
    e6e6:	f011 ff0b 	bl	20500 <memmove>
}
    e6ea:	4620      	mov	r0, r4
    e6ec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e6f0:	46bd      	mov	sp, r7
    e6f2:	bd90      	pop	{r4, r7, pc}

0000e6f4 <_ZNK8PositioneqERKS_>:
bool Position::presqueEgales(const Position &p) const
{
	return (distancePresqueEgales(x, p.x) && distancePresqueEgales(y,p.y));
}

bool Position::operator==(const Position &p) const
    e6f4:	b580      	push	{r7, lr}
    e6f6:	b084      	sub	sp, #16
    e6f8:	af00      	add	r7, sp, #0
    e6fa:	60f8      	str	r0, [r7, #12]
    e6fc:	60b9      	str	r1, [r7, #8]
{
    return (x == p.x && y == p.y);
    e6fe:	68fb      	ldr	r3, [r7, #12]
    e700:	681a      	ldr	r2, [r3, #0]
    e702:	68bb      	ldr	r3, [r7, #8]
    e704:	6819      	ldr	r1, [r3, #0]
    e706:	f04f 0300 	mov.w	r3, #0	; 0x0
    e70a:	70fb      	strb	r3, [r7, #3]
    e70c:	4610      	mov	r0, r2
    e70e:	f00c faff 	bl	1ad10 <__aeabi_fcmpeq>
    e712:	4603      	mov	r3, r0
    e714:	2b00      	cmp	r3, #0
    e716:	d002      	beq.n	e71e <_ZNK8PositioneqERKS_+0x2a>
    e718:	f04f 0301 	mov.w	r3, #1	; 0x1
    e71c:	70fb      	strb	r3, [r7, #3]
    e71e:	78fb      	ldrb	r3, [r7, #3]
    e720:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    e724:	b2db      	uxtb	r3, r3
    e726:	2b00      	cmp	r3, #0
    e728:	d119      	bne.n	e75e <_ZNK8PositioneqERKS_+0x6a>
    e72a:	68fb      	ldr	r3, [r7, #12]
    e72c:	685a      	ldr	r2, [r3, #4]
    e72e:	68bb      	ldr	r3, [r7, #8]
    e730:	6859      	ldr	r1, [r3, #4]
    e732:	f04f 0300 	mov.w	r3, #0	; 0x0
    e736:	70bb      	strb	r3, [r7, #2]
    e738:	4610      	mov	r0, r2
    e73a:	f00c fae9 	bl	1ad10 <__aeabi_fcmpeq>
    e73e:	4603      	mov	r3, r0
    e740:	2b00      	cmp	r3, #0
    e742:	d002      	beq.n	e74a <_ZNK8PositioneqERKS_+0x56>
    e744:	f04f 0301 	mov.w	r3, #1	; 0x1
    e748:	70bb      	strb	r3, [r7, #2]
    e74a:	78bb      	ldrb	r3, [r7, #2]
    e74c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    e750:	b2db      	uxtb	r3, r3
    e752:	2b00      	cmp	r3, #0
    e754:	d103      	bne.n	e75e <_ZNK8PositioneqERKS_+0x6a>
    e756:	f04f 0301 	mov.w	r3, #1	; 0x1
    e75a:	607b      	str	r3, [r7, #4]
    e75c:	e002      	b.n	e764 <_ZNK8PositioneqERKS_+0x70>
    e75e:	f04f 0300 	mov.w	r3, #0	; 0x0
    e762:	607b      	str	r3, [r7, #4]
    e764:	687b      	ldr	r3, [r7, #4]
}
    e766:	4618      	mov	r0, r3
    e768:	f107 0710 	add.w	r7, r7, #16	; 0x10
    e76c:	46bd      	mov	sp, r7
    e76e:	bd80      	pop	{r7, pc}

0000e770 <_ZN8PositionmLEf>:

bool Position::operator*=(float val)
    e770:	b580      	push	{r7, lr}
    e772:	b082      	sub	sp, #8
    e774:	af00      	add	r7, sp, #0
    e776:	6078      	str	r0, [r7, #4]
    e778:	6039      	str	r1, [r7, #0]
{
    this->x = this->x*val;
    e77a:	687b      	ldr	r3, [r7, #4]
    e77c:	681b      	ldr	r3, [r3, #0]
    e77e:	4618      	mov	r0, r3
    e780:	6839      	ldr	r1, [r7, #0]
    e782:	f00c f933 	bl	1a9ec <__aeabi_fmul>
    e786:	4603      	mov	r3, r0
    e788:	461a      	mov	r2, r3
    e78a:	687b      	ldr	r3, [r7, #4]
    e78c:	601a      	str	r2, [r3, #0]
    this->y = this->y*val;
    e78e:	687b      	ldr	r3, [r7, #4]
    e790:	685b      	ldr	r3, [r3, #4]
    e792:	4618      	mov	r0, r3
    e794:	6839      	ldr	r1, [r7, #0]
    e796:	f00c f929 	bl	1a9ec <__aeabi_fmul>
    e79a:	4603      	mov	r3, r0
    e79c:	461a      	mov	r2, r3
    e79e:	687b      	ldr	r3, [r7, #4]
    e7a0:	605a      	str	r2, [r3, #4]

    return true;
    e7a2:	f04f 0301 	mov.w	r3, #1	; 0x1
}
    e7a6:	4618      	mov	r0, r3
    e7a8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e7ac:	46bd      	mov	sp, r7
    e7ae:	bd80      	pop	{r7, pc}

0000e7b0 <_ZNK8Position8getAngleEv>:
Distance Position::getNorme() const
{
    return Distance(sqrt(x*x+y*y));
}

Angle Position::getAngle() const
    e7b0:	b5b0      	push	{r4, r5, r7, lr}
    e7b2:	b082      	sub	sp, #8
    e7b4:	af00      	add	r7, sp, #0
    e7b6:	6078      	str	r0, [r7, #4]
{
	return atan2(y,x);
    e7b8:	687b      	ldr	r3, [r7, #4]
    e7ba:	685b      	ldr	r3, [r3, #4]
    e7bc:	4618      	mov	r0, r3
    e7be:	f00b fca3 	bl	1a108 <__aeabi_f2d>
    e7c2:	4604      	mov	r4, r0
    e7c4:	460d      	mov	r5, r1
    e7c6:	687b      	ldr	r3, [r7, #4]
    e7c8:	681b      	ldr	r3, [r3, #0]
    e7ca:	4618      	mov	r0, r3
    e7cc:	f00b fc9c 	bl	1a108 <__aeabi_f2d>
    e7d0:	4602      	mov	r2, r0
    e7d2:	460b      	mov	r3, r1
    e7d4:	4620      	mov	r0, r4
    e7d6:	4629      	mov	r1, r5
    e7d8:	f00f fdcc 	bl	1e374 <atan2>
    e7dc:	4602      	mov	r2, r0
    e7de:	460b      	mov	r3, r1
    e7e0:	4610      	mov	r0, r2
    e7e2:	4619      	mov	r1, r3
    e7e4:	f00b ffa4 	bl	1a730 <__aeabi_d2f>
    e7e8:	4603      	mov	r3, r0
}
    e7ea:	4618      	mov	r0, r3
    e7ec:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e7f0:	46bd      	mov	sp, r7
    e7f2:	bdb0      	pop	{r4, r5, r7, pc}

0000e7f4 <_ZNK8Position8getNormeEv>:
    this->y = this->y*val;

    return true;
}

Distance Position::getNorme() const
    e7f4:	b590      	push	{r4, r7, lr}
    e7f6:	b083      	sub	sp, #12
    e7f8:	af00      	add	r7, sp, #0
    e7fa:	6078      	str	r0, [r7, #4]
{
    return Distance(sqrt(x*x+y*y));
    e7fc:	687b      	ldr	r3, [r7, #4]
    e7fe:	681a      	ldr	r2, [r3, #0]
    e800:	687b      	ldr	r3, [r7, #4]
    e802:	681b      	ldr	r3, [r3, #0]
    e804:	4610      	mov	r0, r2
    e806:	4619      	mov	r1, r3
    e808:	f00c f8f0 	bl	1a9ec <__aeabi_fmul>
    e80c:	4603      	mov	r3, r0
    e80e:	461c      	mov	r4, r3
    e810:	687b      	ldr	r3, [r7, #4]
    e812:	685a      	ldr	r2, [r3, #4]
    e814:	687b      	ldr	r3, [r7, #4]
    e816:	685b      	ldr	r3, [r3, #4]
    e818:	4610      	mov	r0, r2
    e81a:	4619      	mov	r1, r3
    e81c:	f00c f8e6 	bl	1a9ec <__aeabi_fmul>
    e820:	4603      	mov	r3, r0
    e822:	4620      	mov	r0, r4
    e824:	4619      	mov	r1, r3
    e826:	f00b ffd9 	bl	1a7dc <__addsf3>
    e82a:	4603      	mov	r3, r0
    e82c:	4618      	mov	r0, r3
    e82e:	f00b fc6b 	bl	1a108 <__aeabi_f2d>
    e832:	4602      	mov	r2, r0
    e834:	460b      	mov	r3, r1
    e836:	4610      	mov	r0, r2
    e838:	4619      	mov	r1, r3
    e83a:	f00f fda1 	bl	1e380 <sqrt>
    e83e:	4602      	mov	r2, r0
    e840:	460b      	mov	r3, r1
    e842:	4610      	mov	r0, r2
    e844:	4619      	mov	r1, r3
    e846:	f00b ff73 	bl	1a730 <__aeabi_d2f>
    e84a:	4603      	mov	r3, r0
}
    e84c:	4618      	mov	r0, r3
    e84e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e852:	46bd      	mov	sp, r7
    e854:	bd90      	pop	{r4, r7, pc}
    e856:	46c0      	nop			(mov r8, r8)

0000e858 <_ZNK8Position13presqueEgalesERKS_>:
    this->y-=position.y;

    return *this;
}

bool Position::presqueEgales(const Position &p) const
    e858:	b580      	push	{r7, lr}
    e85a:	b084      	sub	sp, #16
    e85c:	af00      	add	r7, sp, #0
    e85e:	60f8      	str	r0, [r7, #12]
    e860:	60b9      	str	r1, [r7, #8]
{
	return (distancePresqueEgales(x, p.x) && distancePresqueEgales(y,p.y));
    e862:	68fb      	ldr	r3, [r7, #12]
    e864:	681a      	ldr	r2, [r3, #0]
    e866:	68bb      	ldr	r3, [r7, #8]
    e868:	681b      	ldr	r3, [r3, #0]
    e86a:	4610      	mov	r0, r2
    e86c:	4619      	mov	r1, r3
    e86e:	f7fb fec3 	bl	a5f8 <_Z21distancePresqueEgalesff>
    e872:	4603      	mov	r3, r0
    e874:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    e878:	b2db      	uxtb	r3, r3
    e87a:	2b00      	cmp	r3, #0
    e87c:	d111      	bne.n	e8a2 <_ZNK8Position13presqueEgalesERKS_+0x4a>
    e87e:	68fb      	ldr	r3, [r7, #12]
    e880:	685a      	ldr	r2, [r3, #4]
    e882:	68bb      	ldr	r3, [r7, #8]
    e884:	685b      	ldr	r3, [r3, #4]
    e886:	4610      	mov	r0, r2
    e888:	4619      	mov	r1, r3
    e88a:	f7fb feb5 	bl	a5f8 <_Z21distancePresqueEgalesff>
    e88e:	4603      	mov	r3, r0
    e890:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    e894:	b2db      	uxtb	r3, r3
    e896:	2b00      	cmp	r3, #0
    e898:	d103      	bne.n	e8a2 <_ZNK8Position13presqueEgalesERKS_+0x4a>
    e89a:	f04f 0301 	mov.w	r3, #1	; 0x1
    e89e:	607b      	str	r3, [r7, #4]
    e8a0:	e002      	b.n	e8a8 <_ZNK8Position13presqueEgalesERKS_+0x50>
    e8a2:	f04f 0300 	mov.w	r3, #0	; 0x0
    e8a6:	607b      	str	r3, [r7, #4]
    e8a8:	687b      	ldr	r3, [r7, #4]
}
    e8aa:	4618      	mov	r0, r3
    e8ac:	f107 0710 	add.w	r7, r7, #16	; 0x10
    e8b0:	46bd      	mov	sp, r7
    e8b2:	bd80      	pop	{r7, pc}

0000e8b4 <_ZN17PositionPlusAngleC2ERK8Positionf>:

PositionPlusAngle::PositionPlusAngle()
{
}

PositionPlusAngle::PositionPlusAngle(const Position& pos, Angle ang)
    e8b4:	b480      	push	{r7}
    e8b6:	b085      	sub	sp, #20
    e8b8:	af00      	add	r7, sp, #0
    e8ba:	60f8      	str	r0, [r7, #12]
    e8bc:	60b9      	str	r1, [r7, #8]
    e8be:	607a      	str	r2, [r7, #4]
    : position(pos), angle(ang)
    e8c0:	68fb      	ldr	r3, [r7, #12]
    e8c2:	68ba      	ldr	r2, [r7, #8]
    e8c4:	469c      	mov	ip, r3
    e8c6:	4613      	mov	r3, r2
    e8c8:	e893 0003 	ldmia.w	r3, {r0, r1}
    e8cc:	e88c 0003 	stmia.w	ip, {r0, r1}
    e8d0:	68fa      	ldr	r2, [r7, #12]
    e8d2:	687b      	ldr	r3, [r7, #4]
    e8d4:	6093      	str	r3, [r2, #8]
{
}
    e8d6:	68fb      	ldr	r3, [r7, #12]
    e8d8:	4618      	mov	r0, r3
    e8da:	f107 0714 	add.w	r7, r7, #20	; 0x14
    e8de:	46bd      	mov	sp, r7
    e8e0:	bc80      	pop	{r7}
    e8e2:	4770      	bx	lr

0000e8e4 <_ZN17PositionPlusAngleC1ERK8Positionf>:

PositionPlusAngle::PositionPlusAngle()
{
}

PositionPlusAngle::PositionPlusAngle(const Position& pos, Angle ang)
    e8e4:	b480      	push	{r7}
    e8e6:	b085      	sub	sp, #20
    e8e8:	af00      	add	r7, sp, #0
    e8ea:	60f8      	str	r0, [r7, #12]
    e8ec:	60b9      	str	r1, [r7, #8]
    e8ee:	607a      	str	r2, [r7, #4]
    : position(pos), angle(ang)
    e8f0:	68fb      	ldr	r3, [r7, #12]
    e8f2:	68ba      	ldr	r2, [r7, #8]
    e8f4:	469c      	mov	ip, r3
    e8f6:	4613      	mov	r3, r2
    e8f8:	e893 0003 	ldmia.w	r3, {r0, r1}
    e8fc:	e88c 0003 	stmia.w	ip, {r0, r1}
    e900:	68fa      	ldr	r2, [r7, #12]
    e902:	687b      	ldr	r3, [r7, #4]
    e904:	6093      	str	r3, [r2, #8]
{
}
    e906:	68fb      	ldr	r3, [r7, #12]
    e908:	4618      	mov	r0, r3
    e90a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    e90e:	46bd      	mov	sp, r7
    e910:	bc80      	pop	{r7}
    e912:	4770      	bx	lr

0000e914 <_ZN17PositionPlusAngleC2ERKS_>:

PositionPlusAngle::PositionPlusAngle(const PositionPlusAngle& original)
    e914:	b480      	push	{r7}
    e916:	b083      	sub	sp, #12
    e918:	af00      	add	r7, sp, #0
    e91a:	6078      	str	r0, [r7, #4]
    e91c:	6039      	str	r1, [r7, #0]
    : position(original.position), angle(original.angle)
    e91e:	687b      	ldr	r3, [r7, #4]
    e920:	683a      	ldr	r2, [r7, #0]
    e922:	469c      	mov	ip, r3
    e924:	4613      	mov	r3, r2
    e926:	e893 0003 	ldmia.w	r3, {r0, r1}
    e92a:	e88c 0003 	stmia.w	ip, {r0, r1}
    e92e:	683b      	ldr	r3, [r7, #0]
    e930:	689a      	ldr	r2, [r3, #8]
    e932:	687b      	ldr	r3, [r7, #4]
    e934:	609a      	str	r2, [r3, #8]
{
}
    e936:	687b      	ldr	r3, [r7, #4]
    e938:	4618      	mov	r0, r3
    e93a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e93e:	46bd      	mov	sp, r7
    e940:	bc80      	pop	{r7}
    e942:	4770      	bx	lr

0000e944 <_ZN17PositionPlusAngleC1ERKS_>:
PositionPlusAngle::PositionPlusAngle(const Position& pos, Angle ang)
    : position(pos), angle(ang)
{
}

PositionPlusAngle::PositionPlusAngle(const PositionPlusAngle& original)
    e944:	b480      	push	{r7}
    e946:	b083      	sub	sp, #12
    e948:	af00      	add	r7, sp, #0
    e94a:	6078      	str	r0, [r7, #4]
    e94c:	6039      	str	r1, [r7, #0]
    : position(original.position), angle(original.angle)
    e94e:	687b      	ldr	r3, [r7, #4]
    e950:	683a      	ldr	r2, [r7, #0]
    e952:	469c      	mov	ip, r3
    e954:	4613      	mov	r3, r2
    e956:	e893 0003 	ldmia.w	r3, {r0, r1}
    e95a:	e88c 0003 	stmia.w	ip, {r0, r1}
    e95e:	683b      	ldr	r3, [r7, #0]
    e960:	689a      	ldr	r2, [r3, #8]
    e962:	687b      	ldr	r3, [r7, #4]
    e964:	609a      	str	r2, [r3, #8]
{
}
    e966:	687b      	ldr	r3, [r7, #4]
    e968:	4618      	mov	r0, r3
    e96a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e96e:	46bd      	mov	sp, r7
    e970:	bc80      	pop	{r7}
    e972:	4770      	bx	lr

0000e974 <_ZNK17PositionPlusAngle11getPositionEv>:
bool PositionPlusAngle::presqueEgales(const PositionPlusAngle& positionPlusAngle) const
{
    return(position.presqueEgales(positionPlusAngle.position) && angleEq(angle,positionPlusAngle.angle));
}

Position PositionPlusAngle::getPosition() const
    e974:	b480      	push	{r7}
    e976:	b083      	sub	sp, #12
    e978:	af00      	add	r7, sp, #0
    e97a:	4684      	mov	ip, r0
    e97c:	6079      	str	r1, [r7, #4]
{
    return position;
    e97e:	687b      	ldr	r3, [r7, #4]
    e980:	4662      	mov	r2, ip
    e982:	e893 0003 	ldmia.w	r3, {r0, r1}
    e986:	e882 0003 	stmia.w	r2, {r0, r1}
}
    e98a:	4660      	mov	r0, ip
    e98c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e990:	46bd      	mov	sp, r7
    e992:	bc80      	pop	{r7}
    e994:	4770      	bx	lr
    e996:	46c0      	nop			(mov r8, r8)

0000e998 <_ZNK17PositionPlusAngle8getAngleEv>:
void PositionPlusAngle::setPosition(const Position& p)
{
    position = p;
}

Angle PositionPlusAngle::getAngle() const
    e998:	b480      	push	{r7}
    e99a:	b083      	sub	sp, #12
    e99c:	af00      	add	r7, sp, #0
    e99e:	6078      	str	r0, [r7, #4]
{
    return angle;
    e9a0:	687b      	ldr	r3, [r7, #4]
    e9a2:	689b      	ldr	r3, [r3, #8]
}
    e9a4:	4618      	mov	r0, r3
    e9a6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e9aa:	46bd      	mov	sp, r7
    e9ac:	bc80      	pop	{r7}
    e9ae:	4770      	bx	lr

0000e9b0 <_ZN17PositionPlusAngle8setAngleEf>:

void PositionPlusAngle::setAngle(Angle a)
    e9b0:	b480      	push	{r7}
    e9b2:	b083      	sub	sp, #12
    e9b4:	af00      	add	r7, sp, #0
    e9b6:	6078      	str	r0, [r7, #4]
    e9b8:	6039      	str	r1, [r7, #0]
{
    angle = a;
    e9ba:	687a      	ldr	r2, [r7, #4]
    e9bc:	683b      	ldr	r3, [r7, #0]
    e9be:	6093      	str	r3, [r2, #8]
}
    e9c0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e9c4:	46bd      	mov	sp, r7
    e9c6:	bc80      	pop	{r7}
    e9c8:	4770      	bx	lr
    e9ca:	46c0      	nop			(mov r8, r8)

0000e9cc <_ZN17PositionPlusAngle4setYEf>:
void PositionPlusAngle::setX(Distance X)
{
    position.setX(X);
}

void PositionPlusAngle::setY(Distance Y)
    e9cc:	b580      	push	{r7, lr}
    e9ce:	b082      	sub	sp, #8
    e9d0:	af00      	add	r7, sp, #0
    e9d2:	6078      	str	r0, [r7, #4]
    e9d4:	6039      	str	r1, [r7, #0]
{
    position.setY(Y);
    e9d6:	687b      	ldr	r3, [r7, #4]
    e9d8:	4618      	mov	r0, r3
    e9da:	6839      	ldr	r1, [r7, #0]
    e9dc:	f7ff fdc8 	bl	e570 <_ZN8Position4setYEf>
}
    e9e0:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e9e4:	46bd      	mov	sp, r7
    e9e6:	bd80      	pop	{r7, pc}

0000e9e8 <_ZN17PositionPlusAngle4setXEf>:
void PositionPlusAngle::setAngle(Angle a)
{
    angle = a;
}

void PositionPlusAngle::setX(Distance X)
    e9e8:	b580      	push	{r7, lr}
    e9ea:	b082      	sub	sp, #8
    e9ec:	af00      	add	r7, sp, #0
    e9ee:	6078      	str	r0, [r7, #4]
    e9f0:	6039      	str	r1, [r7, #0]
{
    position.setX(X);
    e9f2:	687b      	ldr	r3, [r7, #4]
    e9f4:	4618      	mov	r0, r3
    e9f6:	6839      	ldr	r1, [r7, #0]
    e9f8:	f7ff fdac 	bl	e554 <_ZN8Position4setXEf>
}
    e9fc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ea00:	46bd      	mov	sp, r7
    ea02:	bd80      	pop	{r7, pc}

0000ea04 <_ZN17PositionPlusAngle11setPositionERK8Position>:
Position PositionPlusAngle::getPosition() const
{
    return position;
}

void PositionPlusAngle::setPosition(const Position& p)
    ea04:	b580      	push	{r7, lr}
    ea06:	b082      	sub	sp, #8
    ea08:	af00      	add	r7, sp, #0
    ea0a:	6078      	str	r0, [r7, #4]
    ea0c:	6039      	str	r1, [r7, #0]
{
    position = p;
    ea0e:	687a      	ldr	r2, [r7, #4]
    ea10:	683b      	ldr	r3, [r7, #0]
    ea12:	4610      	mov	r0, r2
    ea14:	e893 0006 	ldmia.w	r3, {r1, r2}
    ea18:	f7ff fe04 	bl	e624 <_ZN8PositionaSES_>
}
    ea1c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ea20:	46bd      	mov	sp, r7
    ea22:	bd80      	pop	{r7, pc}

0000ea24 <_ZN17PositionPlusAngleaSERKS_>:
PositionPlusAngle PositionPlusAngle::operator-(Distance distance) const
{
    return *this + (-distance);
}

const PositionPlusAngle& PositionPlusAngle::operator=(const PositionPlusAngle& positionPlusAngle)
    ea24:	b580      	push	{r7, lr}
    ea26:	b082      	sub	sp, #8
    ea28:	af00      	add	r7, sp, #0
    ea2a:	6078      	str	r0, [r7, #4]
    ea2c:	6039      	str	r1, [r7, #0]
{
    position = positionPlusAngle.position;
    ea2e:	687a      	ldr	r2, [r7, #4]
    ea30:	683b      	ldr	r3, [r7, #0]
    ea32:	4610      	mov	r0, r2
    ea34:	e893 0006 	ldmia.w	r3, {r1, r2}
    ea38:	f7ff fdf4 	bl	e624 <_ZN8PositionaSES_>
    angle = positionPlusAngle.angle;
    ea3c:	683b      	ldr	r3, [r7, #0]
    ea3e:	689a      	ldr	r2, [r3, #8]
    ea40:	687b      	ldr	r3, [r7, #4]
    ea42:	609a      	str	r2, [r3, #8]

    return *this;
    ea44:	687b      	ldr	r3, [r7, #4]
}
    ea46:	4618      	mov	r0, r3
    ea48:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ea4c:	46bd      	mov	sp, r7
    ea4e:	bd80      	pop	{r7, pc}

0000ea50 <_ZNK17PositionPlusAngle13presqueEgalesERKS_>:
bool PositionPlusAngle::operator==(const PositionPlusAngle& p) const
{
    return ((position==p.position) && (angle==p.angle));
}

bool PositionPlusAngle::presqueEgales(const PositionPlusAngle& positionPlusAngle) const
    ea50:	b580      	push	{r7, lr}
    ea52:	b084      	sub	sp, #16
    ea54:	af00      	add	r7, sp, #0
    ea56:	60f8      	str	r0, [r7, #12]
    ea58:	60b9      	str	r1, [r7, #8]
{
    return(position.presqueEgales(positionPlusAngle.position) && angleEq(angle,positionPlusAngle.angle));
    ea5a:	68fb      	ldr	r3, [r7, #12]
    ea5c:	68ba      	ldr	r2, [r7, #8]
    ea5e:	4618      	mov	r0, r3
    ea60:	4611      	mov	r1, r2
    ea62:	f7ff fef9 	bl	e858 <_ZNK8Position13presqueEgalesERKS_>
    ea66:	4603      	mov	r3, r0
    ea68:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ea6c:	b2db      	uxtb	r3, r3
    ea6e:	2b00      	cmp	r3, #0
    ea70:	d111      	bne.n	ea96 <_ZNK17PositionPlusAngle13presqueEgalesERKS_+0x46>
    ea72:	68fb      	ldr	r3, [r7, #12]
    ea74:	689a      	ldr	r2, [r3, #8]
    ea76:	68bb      	ldr	r3, [r7, #8]
    ea78:	689b      	ldr	r3, [r3, #8]
    ea7a:	4610      	mov	r0, r2
    ea7c:	4619      	mov	r1, r3
    ea7e:	f7f8 faef 	bl	7060 <_Z7angleEqff>
    ea82:	4603      	mov	r3, r0
    ea84:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ea88:	b2db      	uxtb	r3, r3
    ea8a:	2b00      	cmp	r3, #0
    ea8c:	d103      	bne.n	ea96 <_ZNK17PositionPlusAngle13presqueEgalesERKS_+0x46>
    ea8e:	f04f 0301 	mov.w	r3, #1	; 0x1
    ea92:	607b      	str	r3, [r7, #4]
    ea94:	e002      	b.n	ea9c <_ZNK17PositionPlusAngle13presqueEgalesERKS_+0x4c>
    ea96:	f04f 0300 	mov.w	r3, #0	; 0x0
    ea9a:	607b      	str	r3, [r7, #4]
    ea9c:	687b      	ldr	r3, [r7, #4]
}
    ea9e:	4618      	mov	r0, r3
    eaa0:	f107 0710 	add.w	r7, r7, #16	; 0x10
    eaa4:	46bd      	mov	sp, r7
    eaa6:	bd80      	pop	{r7, pc}

0000eaa8 <_ZNK17PositionPlusAngleeqERKS_>:
    angle = positionPlusAngle.angle;

    return *this;
}

bool PositionPlusAngle::operator==(const PositionPlusAngle& p) const
    eaa8:	b580      	push	{r7, lr}
    eaaa:	b084      	sub	sp, #16
    eaac:	af00      	add	r7, sp, #0
    eaae:	60f8      	str	r0, [r7, #12]
    eab0:	60b9      	str	r1, [r7, #8]
{
    return ((position==p.position) && (angle==p.angle));
    eab2:	68fb      	ldr	r3, [r7, #12]
    eab4:	68ba      	ldr	r2, [r7, #8]
    eab6:	4618      	mov	r0, r3
    eab8:	4611      	mov	r1, r2
    eaba:	f7ff fe1b 	bl	e6f4 <_ZNK8PositioneqERKS_>
    eabe:	4603      	mov	r3, r0
    eac0:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    eac4:	b2db      	uxtb	r3, r3
    eac6:	2b00      	cmp	r3, #0
    eac8:	d119      	bne.n	eafe <_ZNK17PositionPlusAngleeqERKS_+0x56>
    eaca:	68fb      	ldr	r3, [r7, #12]
    eacc:	689a      	ldr	r2, [r3, #8]
    eace:	68bb      	ldr	r3, [r7, #8]
    ead0:	6899      	ldr	r1, [r3, #8]
    ead2:	f04f 0300 	mov.w	r3, #0	; 0x0
    ead6:	70fb      	strb	r3, [r7, #3]
    ead8:	4610      	mov	r0, r2
    eada:	f00c f919 	bl	1ad10 <__aeabi_fcmpeq>
    eade:	4603      	mov	r3, r0
    eae0:	2b00      	cmp	r3, #0
    eae2:	d002      	beq.n	eaea <_ZNK17PositionPlusAngleeqERKS_+0x42>
    eae4:	f04f 0301 	mov.w	r3, #1	; 0x1
    eae8:	70fb      	strb	r3, [r7, #3]
    eaea:	78fb      	ldrb	r3, [r7, #3]
    eaec:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    eaf0:	b2db      	uxtb	r3, r3
    eaf2:	2b00      	cmp	r3, #0
    eaf4:	d103      	bne.n	eafe <_ZNK17PositionPlusAngleeqERKS_+0x56>
    eaf6:	f04f 0301 	mov.w	r3, #1	; 0x1
    eafa:	607b      	str	r3, [r7, #4]
    eafc:	e002      	b.n	eb04 <_ZNK17PositionPlusAngleeqERKS_+0x5c>
    eafe:	f04f 0300 	mov.w	r3, #0	; 0x0
    eb02:	607b      	str	r3, [r7, #4]
    eb04:	687b      	ldr	r3, [r7, #4]
}
    eb06:	4618      	mov	r0, r3
    eb08:	f107 0710 	add.w	r7, r7, #16	; 0x10
    eb0c:	46bd      	mov	sp, r7
    eb0e:	bd80      	pop	{r7, pc}

0000eb10 <_ZNK17PositionPlusAngleplERKS_>:
PositionPlusAngle PositionPlusAngle::operator+(Distance distance) const
{
    return PositionPlusAngle(Position(position.getX() + distance*cos(angle), position.getY() + distance*sin(angle)), angle);
}

PositionPlusAngle PositionPlusAngle::operator+(const PositionPlusAngle& posAngAdd) const
    eb10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb14:	b088      	sub	sp, #32
    eb16:	af00      	add	r7, sp, #0
    eb18:	4605      	mov	r5, r0
    eb1a:	6079      	str	r1, [r7, #4]
    eb1c:	603a      	str	r2, [r7, #0]
{
    return PositionPlusAngle(Position(position.getX() + posAngAdd.getPosition().getX(), position.getY() + posAngAdd.getPosition().getY()), angle + posAngAdd.getAngle());
    eb1e:	462e      	mov	r6, r5
    eb20:	687b      	ldr	r3, [r7, #4]
    eb22:	4618      	mov	r0, r3
    eb24:	f7ff fcfe 	bl	e524 <_ZNK8Position4getXEv>
    eb28:	4604      	mov	r4, r0
    eb2a:	f107 0310 	add.w	r3, r7, #16	; 0x10
    eb2e:	4618      	mov	r0, r3
    eb30:	6839      	ldr	r1, [r7, #0]
    eb32:	f7ff ff1f 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
    eb36:	f107 0310 	add.w	r3, r7, #16	; 0x10
    eb3a:	4618      	mov	r0, r3
    eb3c:	f7ff fcf2 	bl	e524 <_ZNK8Position4getXEv>
    eb40:	4603      	mov	r3, r0
    eb42:	4620      	mov	r0, r4
    eb44:	4619      	mov	r1, r3
    eb46:	f00b fe49 	bl	1a7dc <__addsf3>
    eb4a:	4603      	mov	r3, r0
    eb4c:	4698      	mov	r8, r3
    eb4e:	687b      	ldr	r3, [r7, #4]
    eb50:	4618      	mov	r0, r3
    eb52:	f7ff fcf3 	bl	e53c <_ZNK8Position4getYEv>
    eb56:	4604      	mov	r4, r0
    eb58:	f107 0318 	add.w	r3, r7, #24	; 0x18
    eb5c:	4618      	mov	r0, r3
    eb5e:	6839      	ldr	r1, [r7, #0]
    eb60:	f7ff ff08 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
    eb64:	f107 0318 	add.w	r3, r7, #24	; 0x18
    eb68:	4618      	mov	r0, r3
    eb6a:	f7ff fce7 	bl	e53c <_ZNK8Position4getYEv>
    eb6e:	4603      	mov	r3, r0
    eb70:	4620      	mov	r0, r4
    eb72:	4619      	mov	r1, r3
    eb74:	f00b fe32 	bl	1a7dc <__addsf3>
    eb78:	4603      	mov	r3, r0
    eb7a:	461a      	mov	r2, r3
    eb7c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    eb80:	4618      	mov	r0, r3
    eb82:	4641      	mov	r1, r8
    eb84:	f04f 0301 	mov.w	r3, #1	; 0x1
    eb88:	f7ff fcb8 	bl	e4fc <_ZN8PositionC1Effb>
    eb8c:	687b      	ldr	r3, [r7, #4]
    eb8e:	689c      	ldr	r4, [r3, #8]
    eb90:	6838      	ldr	r0, [r7, #0]
    eb92:	f7ff ff01 	bl	e998 <_ZNK17PositionPlusAngle8getAngleEv>
    eb96:	4603      	mov	r3, r0
    eb98:	4620      	mov	r0, r4
    eb9a:	4619      	mov	r1, r3
    eb9c:	f00b fe1e 	bl	1a7dc <__addsf3>
    eba0:	4603      	mov	r3, r0
    eba2:	461a      	mov	r2, r3
    eba4:	f107 0308 	add.w	r3, r7, #8	; 0x8
    eba8:	4630      	mov	r0, r6
    ebaa:	4619      	mov	r1, r3
    ebac:	f7ff fe9a 	bl	e8e4 <_ZN17PositionPlusAngleC1ERK8Positionf>
}
    ebb0:	4628      	mov	r0, r5
    ebb2:	4628      	mov	r0, r5
    ebb4:	f107 0720 	add.w	r7, r7, #32	; 0x20
    ebb8:	46bd      	mov	sp, r7
    ebba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ebbe:	46c0      	nop			(mov r8, r8)

0000ebc0 <_ZNK17PositionPlusAngleplEf>:
PositionPlusAngle::PositionPlusAngle(const PositionPlusAngle& original)
    : position(original.position), angle(original.angle)
{
}

PositionPlusAngle PositionPlusAngle::operator+(Distance distance) const
    ebc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebc4:	b085      	sub	sp, #20
    ebc6:	af00      	add	r7, sp, #0
    ebc8:	4606      	mov	r6, r0
    ebca:	6079      	str	r1, [r7, #4]
    ebcc:	603a      	str	r2, [r7, #0]
{
    return PositionPlusAngle(Position(position.getX() + distance*cos(angle), position.getY() + distance*sin(angle)), angle);
    ebce:	46b2      	mov	sl, r6
    ebd0:	687b      	ldr	r3, [r7, #4]
    ebd2:	4618      	mov	r0, r3
    ebd4:	f7ff fca6 	bl	e524 <_ZNK8Position4getXEv>
    ebd8:	4603      	mov	r3, r0
    ebda:	4618      	mov	r0, r3
    ebdc:	f00b fa94 	bl	1a108 <__aeabi_f2d>
    ebe0:	4680      	mov	r8, r0
    ebe2:	4689      	mov	r9, r1
    ebe4:	6838      	ldr	r0, [r7, #0]
    ebe6:	f00b fa8f 	bl	1a108 <__aeabi_f2d>
    ebea:	4604      	mov	r4, r0
    ebec:	460d      	mov	r5, r1
    ebee:	687b      	ldr	r3, [r7, #4]
    ebf0:	689b      	ldr	r3, [r3, #8]
    ebf2:	4618      	mov	r0, r3
    ebf4:	f00b fa88 	bl	1a108 <__aeabi_f2d>
    ebf8:	4602      	mov	r2, r0
    ebfa:	460b      	mov	r3, r1
    ebfc:	4610      	mov	r0, r2
    ebfe:	4619      	mov	r1, r3
    ec00:	f00f fb30 	bl	1e264 <cos>
    ec04:	4602      	mov	r2, r0
    ec06:	460b      	mov	r3, r1
    ec08:	4620      	mov	r0, r4
    ec0a:	4629      	mov	r1, r5
    ec0c:	f00b fad0 	bl	1a1b0 <__aeabi_dmul>
    ec10:	4602      	mov	r2, r0
    ec12:	460b      	mov	r3, r1
    ec14:	4640      	mov	r0, r8
    ec16:	4649      	mov	r1, r9
    ec18:	f00b f918 	bl	19e4c <__adddf3>
    ec1c:	4602      	mov	r2, r0
    ec1e:	460b      	mov	r3, r1
    ec20:	4610      	mov	r0, r2
    ec22:	4619      	mov	r1, r3
    ec24:	f00b fd84 	bl	1a730 <__aeabi_d2f>
    ec28:	4683      	mov	fp, r0
    ec2a:	687b      	ldr	r3, [r7, #4]
    ec2c:	4618      	mov	r0, r3
    ec2e:	f7ff fc85 	bl	e53c <_ZNK8Position4getYEv>
    ec32:	4603      	mov	r3, r0
    ec34:	4618      	mov	r0, r3
    ec36:	f00b fa67 	bl	1a108 <__aeabi_f2d>
    ec3a:	4680      	mov	r8, r0
    ec3c:	4689      	mov	r9, r1
    ec3e:	6838      	ldr	r0, [r7, #0]
    ec40:	f00b fa62 	bl	1a108 <__aeabi_f2d>
    ec44:	4604      	mov	r4, r0
    ec46:	460d      	mov	r5, r1
    ec48:	687b      	ldr	r3, [r7, #4]
    ec4a:	689b      	ldr	r3, [r3, #8]
    ec4c:	4618      	mov	r0, r3
    ec4e:	f00b fa5b 	bl	1a108 <__aeabi_f2d>
    ec52:	4602      	mov	r2, r0
    ec54:	460b      	mov	r3, r1
    ec56:	4610      	mov	r0, r2
    ec58:	4619      	mov	r1, r3
    ec5a:	f00f fb45 	bl	1e2e8 <sin>
    ec5e:	4602      	mov	r2, r0
    ec60:	460b      	mov	r3, r1
    ec62:	4620      	mov	r0, r4
    ec64:	4629      	mov	r1, r5
    ec66:	f00b faa3 	bl	1a1b0 <__aeabi_dmul>
    ec6a:	4602      	mov	r2, r0
    ec6c:	460b      	mov	r3, r1
    ec6e:	4640      	mov	r0, r8
    ec70:	4649      	mov	r1, r9
    ec72:	f00b f8eb 	bl	19e4c <__adddf3>
    ec76:	4602      	mov	r2, r0
    ec78:	460b      	mov	r3, r1
    ec7a:	4610      	mov	r0, r2
    ec7c:	4619      	mov	r1, r3
    ec7e:	f00b fd57 	bl	1a730 <__aeabi_d2f>
    ec82:	4602      	mov	r2, r0
    ec84:	f107 0308 	add.w	r3, r7, #8	; 0x8
    ec88:	4618      	mov	r0, r3
    ec8a:	4659      	mov	r1, fp
    ec8c:	f04f 0301 	mov.w	r3, #1	; 0x1
    ec90:	f7ff fc34 	bl	e4fc <_ZN8PositionC1Effb>
    ec94:	687b      	ldr	r3, [r7, #4]
    ec96:	689a      	ldr	r2, [r3, #8]
    ec98:	f107 0308 	add.w	r3, r7, #8	; 0x8
    ec9c:	4650      	mov	r0, sl
    ec9e:	4619      	mov	r1, r3
    eca0:	f7ff fe20 	bl	e8e4 <_ZN17PositionPlusAngleC1ERK8Positionf>
}
    eca4:	4630      	mov	r0, r6
    eca6:	4630      	mov	r0, r6
    eca8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ecac:	46bd      	mov	sp, r7
    ecae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ecb2:	46c0      	nop			(mov r8, r8)

0000ecb4 <_ZNK17PositionPlusAnglemiEf>:
PositionPlusAngle PositionPlusAngle::operator+(const PositionPlusAngle& posAngAdd) const
{
    return PositionPlusAngle(Position(position.getX() + posAngAdd.getPosition().getX(), position.getY() + posAngAdd.getPosition().getY()), angle + posAngAdd.getAngle());
}

PositionPlusAngle PositionPlusAngle::operator-(Distance distance) const
    ecb4:	b590      	push	{r4, r7, lr}
    ecb6:	b083      	sub	sp, #12
    ecb8:	af00      	add	r7, sp, #0
    ecba:	4604      	mov	r4, r0
    ecbc:	6079      	str	r1, [r7, #4]
    ecbe:	603a      	str	r2, [r7, #0]
{
    return *this + (-distance);
    ecc0:	4622      	mov	r2, r4
    ecc2:	683b      	ldr	r3, [r7, #0]
    ecc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ecc8:	4610      	mov	r0, r2
    ecca:	6879      	ldr	r1, [r7, #4]
    eccc:	461a      	mov	r2, r3
    ecce:	f7ff ff77 	bl	ebc0 <_ZNK17PositionPlusAngleplEf>
}
    ecd2:	4620      	mov	r0, r4
    ecd4:	4620      	mov	r0, r4
    ecd6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ecda:	46bd      	mov	sp, r7
    ecdc:	bd90      	pop	{r4, r7, pc}
    ecde:	46c0      	nop			(mov r8, r8)

0000ece0 <_ZN17PositionPlusAngleC1Ev>:
#include <math.h>

#include "positionPlusAngle.h"

PositionPlusAngle::PositionPlusAngle()
    ece0:	b580      	push	{r7, lr}
    ece2:	b082      	sub	sp, #8
    ece4:	af00      	add	r7, sp, #0
    ece6:	6078      	str	r0, [r7, #4]
    ece8:	687b      	ldr	r3, [r7, #4]
    ecea:	4618      	mov	r0, r3
    ecec:	f7ff fbde 	bl	e4ac <_ZN8PositionC1Ev>
{
}
    ecf0:	687b      	ldr	r3, [r7, #4]
    ecf2:	4618      	mov	r0, r3
    ecf4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ecf8:	46bd      	mov	sp, r7
    ecfa:	bd80      	pop	{r7, pc}

0000ecfc <_ZN17PositionPlusAngleC2Ev>:
#include <math.h>

#include "positionPlusAngle.h"

PositionPlusAngle::PositionPlusAngle()
    ecfc:	b580      	push	{r7, lr}
    ecfe:	b082      	sub	sp, #8
    ed00:	af00      	add	r7, sp, #0
    ed02:	6078      	str	r0, [r7, #4]
    ed04:	687b      	ldr	r3, [r7, #4]
    ed06:	4618      	mov	r0, r3
    ed08:	f7ff fbd0 	bl	e4ac <_ZN8PositionC1Ev>
{
}
    ed0c:	687b      	ldr	r3, [r7, #4]
    ed0e:	4618      	mov	r0, r3
    ed10:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ed14:	46bd      	mov	sp, r7
    ed16:	bd80      	pop	{r7, pc}

0000ed18 <_ZN10ActionGoTo16collisionAvoidedEv>:
            status = -1;
    }
    return status;
}

void ActionGoTo::collisionAvoided()
    ed18:	b480      	push	{r7}
    ed1a:	b083      	sub	sp, #12
    ed1c:	af00      	add	r7, sp, #0
    ed1e:	6078      	str	r0, [r7, #4]
{
    //if (status > 0)
        this->status = 0;
    ed20:	687a      	ldr	r2, [r7, #4]
    ed22:	f04f 0300 	mov.w	r3, #0	; 0x0
    ed26:	60d3      	str	r3, [r2, #12]
}
    ed28:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ed2c:	46bd      	mov	sp, r7
    ed2e:	bc80      	pop	{r7}
    ed30:	4770      	bx	lr
    ed32:	46c0      	nop			(mov r8, r8)

0000ed34 <_ZN10ActionGoTo5resetEv>:

void ActionGoTo::reset()
    ed34:	b480      	push	{r7}
    ed36:	b083      	sub	sp, #12
    ed38:	af00      	add	r7, sp, #0
    ed3a:	6078      	str	r0, [r7, #4]
{
    this->status = 0;
    ed3c:	687a      	ldr	r2, [r7, #4]
    ed3e:	f04f 0300 	mov.w	r3, #0	; 0x0
    ed42:	60d3      	str	r3, [r2, #12]
}
    ed44:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ed48:	46bd      	mov	sp, r7
    ed4a:	bc80      	pop	{r7}
    ed4c:	4770      	bx	lr
    ed4e:	46c0      	nop			(mov r8, r8)

0000ed50 <_ZN10ActionGoTo6updateEv>:
ActionGoTo::~ActionGoTo()
{
    //dtor
}

int ActionGoTo::update()
    ed50:	b590      	push	{r4, r7, lr}
    ed52:	b099      	sub	sp, #100
    ed54:	af02      	add	r7, sp, #8
    ed56:	6078      	str	r0, [r7, #4]
{
    if (status == 0)
    ed58:	687b      	ldr	r3, [r7, #4]
    ed5a:	68db      	ldr	r3, [r3, #12]
    ed5c:	2b00      	cmp	r3, #0
    ed5e:	d126      	bne.n	edae <_ZN10ActionGoTo6updateEv+0x5e>
    {
#ifndef ROBOTHW
        qDebug() << "actionGoTo";
#endif
        //allumerLED2();
        Position pos = Odometrie::odometrie->getPos().getPosition();
    ed60:	4b4c      	ldr	r3, [pc, #304]	(ee94 <_ZN10ActionGoTo6updateEv+0x144>)
    ed62:	681a      	ldr	r2, [r3, #0]
    ed64:	f107 0324 	add.w	r3, r7, #36	; 0x24
    ed68:	4618      	mov	r0, r3
    ed6a:	4611      	mov	r1, r2
    ed6c:	f7fa fcf8 	bl	9760 <_ZNK9Odometrie6getPosEv>
    ed70:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    ed74:	f107 0224 	add.w	r2, r7, #36	; 0x24
    ed78:	4618      	mov	r0, r3
    ed7a:	4611      	mov	r1, r2
    ed7c:	f7ff fdfa 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
        //Position vect = goalPosition - pos;
        //vect *= (1.f/vect.getNorme());

        goingCurve = false;//StrategieV2::getJustAvoided();
    ed80:	687a      	ldr	r2, [r7, #4]
    ed82:	f04f 0300 	mov.w	r3, #0	; 0x0
    ed86:	7713      	strb	r3, [r2, #28]
            StrategieV2::setCurrentGoal(intermediateGoalPosition, true); // a changer selon le servo qui détecte
            status = 1;
        }
        else*/
        {
            StrategieV2::setCurrentGoal(goalPosition, goBack);
    ed88:	687b      	ldr	r3, [r7, #4]
    ed8a:	f893 c010 	ldrb.w	ip, [r3, #16]
    ed8e:	687a      	ldr	r2, [r7, #4]
    ed90:	4b41      	ldr	r3, [pc, #260]	(ee98 <_ZN10ActionGoTo6updateEv+0x148>)
    ed92:	9300      	str	r3, [sp, #0]
    ed94:	f102 0304 	add.w	r3, r2, #4	; 0x4
    ed98:	e893 0003 	ldmia.w	r3, {r0, r1}
    ed9c:	4662      	mov	r2, ip
    ed9e:	4b3f      	ldr	r3, [pc, #252]	(ee9c <_ZN10ActionGoTo6updateEv+0x14c>)
    eda0:	f006 fe5c 	bl	15a5c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            status = 3;
    eda4:	687a      	ldr	r2, [r7, #4]
    eda6:	f04f 0303 	mov.w	r3, #3	; 0x3
    edaa:	60d3      	str	r3, [r2, #12]
    edac:	e06b      	b.n	ee86 <_ZN10ActionGoTo6updateEv+0x136>
        }

    }
    else if (status ==1) // on recule
    edae:	687b      	ldr	r3, [r7, #4]
    edb0:	68db      	ldr	r3, [r3, #12]
    edb2:	2b01      	cmp	r3, #1
    edb4:	d129      	bne.n	ee0a <_ZN10ActionGoTo6updateEv+0xba>
    {
        Position vect = intermediateGoalPosition - Odometrie::odometrie->getPos().getPosition();
    edb6:	687b      	ldr	r3, [r7, #4]
    edb8:	f103 0428 	add.w	r4, r3, #40	; 0x28
    edbc:	4b35      	ldr	r3, [pc, #212]	(ee94 <_ZN10ActionGoTo6updateEv+0x144>)
    edbe:	681a      	ldr	r2, [r3, #0]
    edc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
    edc4:	4618      	mov	r0, r3
    edc6:	4611      	mov	r1, r2
    edc8:	f7fa fcca 	bl	9760 <_ZNK9Odometrie6getPosEv>
    edcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
    edd0:	f107 0238 	add.w	r2, r7, #56	; 0x38
    edd4:	4618      	mov	r0, r3
    edd6:	4611      	mov	r1, r2
    edd8:	f7ff fdcc 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
    eddc:	f107 0314 	add.w	r3, r7, #20	; 0x14
    ede0:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ede4:	4618      	mov	r0, r3
    ede6:	4621      	mov	r1, r4
    ede8:	f7ff fbf6 	bl	e5d8 <_ZNK8PositionmiERKS_>
        //std::cout << "status = 1 " << vect.getNorme() << std::endl;
        if (vect.getNorme() < precision) // now we have
    edec:	f107 0314 	add.w	r3, r7, #20	; 0x14
    edf0:	4618      	mov	r0, r3
    edf2:	f7ff fcff 	bl	e7f4 <_ZNK8Position8getNormeEv>
    edf6:	4602      	mov	r2, r0
    edf8:	687b      	ldr	r3, [r7, #4]
    edfa:	6a5b      	ldr	r3, [r3, #36]
    edfc:	4610      	mov	r0, r2
    edfe:	4619      	mov	r1, r3
    ee00:	f00b ff90 	bl	1ad24 <__aeabi_fcmplt>
    ee04:	4603      	mov	r3, r0
    ee06:	2b00      	cmp	r3, #0
    ee08:	e03d      	b.n	ee86 <_ZN10ActionGoTo6updateEv+0x136>
                sign = -1;
            else if (vect.getX() < 0)
            vect = vect + Position(500*vect.getY(), 500*vect.getX());*/
        }
    }
    else if (status == 2)
    ee0a:	687b      	ldr	r3, [r7, #4]
    ee0c:	68db      	ldr	r3, [r3, #12]
    ee0e:	2b02      	cmp	r3, #2
    ee10:	d039      	beq.n	ee86 <_ZN10ActionGoTo6updateEv+0x136>
                StrategieV2::setCurrentGoal(goalPosition, goBack);
                status = 3;
            }
        }*/
    }
    else if (status == 3)
    ee12:	687b      	ldr	r3, [r7, #4]
    ee14:	68db      	ldr	r3, [r3, #12]
    ee16:	2b03      	cmp	r3, #3
    ee18:	d135      	bne.n	ee86 <_ZN10ActionGoTo6updateEv+0x136>
    {
//        allumerLED();
        //std::cout << "status = 3" << std::endl;
        Position vect = goalPosition - Odometrie::odometrie->getPos().getPosition();
    ee1a:	687b      	ldr	r3, [r7, #4]
    ee1c:	f103 0404 	add.w	r4, r3, #4	; 0x4
    ee20:	4b1c      	ldr	r3, [pc, #112]	(ee94 <_ZN10ActionGoTo6updateEv+0x144>)
    ee22:	681a      	ldr	r2, [r3, #0]
    ee24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    ee28:	4618      	mov	r0, r3
    ee2a:	4611      	mov	r1, r2
    ee2c:	f7fa fc98 	bl	9760 <_ZNK9Odometrie6getPosEv>
    ee30:	f107 0344 	add.w	r3, r7, #68	; 0x44
    ee34:	f107 024c 	add.w	r2, r7, #76	; 0x4c
    ee38:	4618      	mov	r0, r3
    ee3a:	4611      	mov	r1, r2
    ee3c:	f7ff fd9a 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
    ee40:	f107 030c 	add.w	r3, r7, #12	; 0xc
    ee44:	f107 0244 	add.w	r2, r7, #68	; 0x44
    ee48:	4618      	mov	r0, r3
    ee4a:	4621      	mov	r1, r4
    ee4c:	f7ff fbc4 	bl	e5d8 <_ZNK8PositionmiERKS_>
        //std::cout << vect.getNorme() << std::endl;
        //std::cout << Odometrie::odometrie->getPos().getPosition().getX() << " "<< Odometrie::odometrie->getPos().getPosition().getY()   << std::endl;
        if (vect.getNorme() < precision)
    ee50:	f107 030c 	add.w	r3, r7, #12	; 0xc
    ee54:	4618      	mov	r0, r3
    ee56:	f7ff fccd 	bl	e7f4 <_ZNK8Position8getNormeEv>
    ee5a:	4602      	mov	r2, r0
    ee5c:	687b      	ldr	r3, [r7, #4]
    ee5e:	6a59      	ldr	r1, [r3, #36]
    ee60:	f04f 0300 	mov.w	r3, #0	; 0x0
    ee64:	70fb      	strb	r3, [r7, #3]
    ee66:	4610      	mov	r0, r2
    ee68:	f00b ff5c 	bl	1ad24 <__aeabi_fcmplt>
    ee6c:	4603      	mov	r3, r0
    ee6e:	2b00      	cmp	r3, #0
    ee70:	d002      	beq.n	ee78 <_ZN10ActionGoTo6updateEv+0x128>
    ee72:	f04f 0301 	mov.w	r3, #1	; 0x1
    ee76:	70fb      	strb	r3, [r7, #3]
    ee78:	78fb      	ldrb	r3, [r7, #3]
    ee7a:	2b00      	cmp	r3, #0
    ee7c:	d003      	beq.n	ee86 <_ZN10ActionGoTo6updateEv+0x136>
            status = -1;
    ee7e:	687a      	ldr	r2, [r7, #4]
    ee80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ee84:	60d3      	str	r3, [r2, #12]
    }
    return status;
    ee86:	687b      	ldr	r3, [r7, #4]
    ee88:	68db      	ldr	r3, [r3, #12]
}
    ee8a:	4618      	mov	r0, r3
    ee8c:	f107 075c 	add.w	r7, r7, #92	; 0x5c
    ee90:	46bd      	mov	sp, r7
    ee92:	bd90      	pop	{r4, r7, pc}
    ee94:	20000570 	.word	0x20000570
    ee98:	c2c80000 	.word	0xc2c80000
    ee9c:	40400000 	.word	0x40400000

0000eea0 <_ZN10ActionGoToD0Ev>:
    goingCurve = false;
    curveFactor = 1;
    precision = _precision;
}

ActionGoTo::~ActionGoTo()
    eea0:	b580      	push	{r7, lr}
    eea2:	b082      	sub	sp, #8
    eea4:	af00      	add	r7, sp, #0
    eea6:	6078      	str	r0, [r7, #4]
    eea8:	687a      	ldr	r2, [r7, #4]
    eeaa:	4b0a      	ldr	r3, [pc, #40]	(eed4 <_ZN10ActionGoToD0Ev+0x34>)
    eeac:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    eeae:	687b      	ldr	r3, [r7, #4]
    eeb0:	4618      	mov	r0, r3
    eeb2:	f005 fde3 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
    eeb6:	f04f 0301 	mov.w	r3, #1	; 0x1
    eeba:	b2db      	uxtb	r3, r3
    eebc:	2b00      	cmp	r3, #0
    eebe:	d002      	beq.n	eec6 <_ZN10ActionGoToD0Ev+0x26>
    eec0:	6878      	ldr	r0, [r7, #4]
    eec2:	f7ff fa5b 	bl	e37c <_ZdlPv>
    eec6:	687b      	ldr	r3, [r7, #4]
    eec8:	4618      	mov	r0, r3
    eeca:	f107 0708 	add.w	r7, r7, #8	; 0x8
    eece:	46bd      	mov	sp, r7
    eed0:	bd80      	pop	{r7, pc}
    eed2:	46c0      	nop			(mov r8, r8)
    eed4:	00021ac8 	.word	0x00021ac8

0000eed8 <_ZN10ActionGoToD1Ev>:
    goingCurve = false;
    curveFactor = 1;
    precision = _precision;
}

ActionGoTo::~ActionGoTo()
    eed8:	b580      	push	{r7, lr}
    eeda:	b082      	sub	sp, #8
    eedc:	af00      	add	r7, sp, #0
    eede:	6078      	str	r0, [r7, #4]
    eee0:	687a      	ldr	r2, [r7, #4]
    eee2:	4b0a      	ldr	r3, [pc, #40]	(ef0c <_ZN10ActionGoToD1Ev+0x34>)
    eee4:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    eee6:	687b      	ldr	r3, [r7, #4]
    eee8:	4618      	mov	r0, r3
    eeea:	f005 fdc7 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
    eeee:	f04f 0300 	mov.w	r3, #0	; 0x0
    eef2:	b2db      	uxtb	r3, r3
    eef4:	2b00      	cmp	r3, #0
    eef6:	d002      	beq.n	eefe <_ZN10ActionGoToD1Ev+0x26>
    eef8:	6878      	ldr	r0, [r7, #4]
    eefa:	f7ff fa3f 	bl	e37c <_ZdlPv>
    eefe:	687b      	ldr	r3, [r7, #4]
    ef00:	4618      	mov	r0, r3
    ef02:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ef06:	46bd      	mov	sp, r7
    ef08:	bd80      	pop	{r7, pc}
    ef0a:	46c0      	nop			(mov r8, r8)
    ef0c:	00021ac8 	.word	0x00021ac8

0000ef10 <_ZN10ActionGoToD2Ev>:
    goingCurve = false;
    curveFactor = 1;
    precision = _precision;
}

ActionGoTo::~ActionGoTo()
    ef10:	b580      	push	{r7, lr}
    ef12:	b082      	sub	sp, #8
    ef14:	af00      	add	r7, sp, #0
    ef16:	6078      	str	r0, [r7, #4]
    ef18:	687a      	ldr	r2, [r7, #4]
    ef1a:	4b0a      	ldr	r3, [pc, #40]	(ef44 <_ZN10ActionGoToD2Ev+0x34>)
    ef1c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    ef1e:	687b      	ldr	r3, [r7, #4]
    ef20:	4618      	mov	r0, r3
    ef22:	f005 fdab 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
    ef26:	f04f 0300 	mov.w	r3, #0	; 0x0
    ef2a:	b2db      	uxtb	r3, r3
    ef2c:	2b00      	cmp	r3, #0
    ef2e:	d002      	beq.n	ef36 <_ZN10ActionGoToD2Ev+0x26>
    ef30:	6878      	ldr	r0, [r7, #4]
    ef32:	f7ff fa23 	bl	e37c <_ZdlPv>
    ef36:	687b      	ldr	r3, [r7, #4]
    ef38:	4618      	mov	r0, r3
    ef3a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ef3e:	46bd      	mov	sp, r7
    ef40:	bd80      	pop	{r7, pc}
    ef42:	46c0      	nop			(mov r8, r8)
    ef44:	00021ac8 	.word	0x00021ac8

0000ef48 <_ZN10ActionGoToC1E8Positionbf>:
        1, 1, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 1, 1, // 2
        1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 1, // 1
        3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, // 0
    };//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
    */
ActionGoTo::ActionGoTo(Position goalPos, bool goBack1, float _precision) : MediumLevelAction(goalPos)
    ef48:	b580      	push	{r7, lr}
    ef4a:	b084      	sub	sp, #16
    ef4c:	af00      	add	r7, sp, #0
    ef4e:	60f8      	str	r0, [r7, #12]
    ef50:	f107 0004 	add.w	r0, r7, #4	; 0x4
    ef54:	e880 0006 	stmia.w	r0, {r1, r2}
    ef58:	70fb      	strb	r3, [r7, #3]
    ef5a:	68fb      	ldr	r3, [r7, #12]
    ef5c:	4618      	mov	r0, r3
    ef5e:	f107 0304 	add.w	r3, r7, #4	; 0x4
    ef62:	e893 0006 	ldmia.w	r3, {r1, r2}
    ef66:	f005 fdc9 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
    ef6a:	68fa      	ldr	r2, [r7, #12]
    ef6c:	4b0f      	ldr	r3, [pc, #60]	(efac <_ZN10ActionGoToC1E8Positionbf+0x64>)
    ef6e:	6013      	str	r3, [r2, #0]
    ef70:	68fb      	ldr	r3, [r7, #12]
    ef72:	f103 0328 	add.w	r3, r3, #40	; 0x28
    ef76:	4618      	mov	r0, r3
    ef78:	f7ff fa98 	bl	e4ac <_ZN8PositionC1Ev>
{
    goBack = goBack1;
    ef7c:	68fa      	ldr	r2, [r7, #12]
    ef7e:	78fb      	ldrb	r3, [r7, #3]
    ef80:	7413      	strb	r3, [r2, #16]
    goalAngle = 0;
    ef82:	68fa      	ldr	r2, [r7, #12]
    ef84:	4b0a      	ldr	r3, [pc, #40]	(efb0 <_ZN10ActionGoToC1E8Positionbf+0x68>)
    ef86:	6193      	str	r3, [r2, #24]
    goingCurve = false;
    ef88:	68fa      	ldr	r2, [r7, #12]
    ef8a:	f04f 0300 	mov.w	r3, #0	; 0x0
    ef8e:	7713      	strb	r3, [r2, #28]
    curveFactor = 1;
    ef90:	68fa      	ldr	r2, [r7, #12]
    ef92:	f04f 0301 	mov.w	r3, #1	; 0x1
    ef96:	6213      	str	r3, [r2, #32]
    precision = _precision;
    ef98:	68fa      	ldr	r2, [r7, #12]
    ef9a:	69bb      	ldr	r3, [r7, #24]
    ef9c:	6253      	str	r3, [r2, #36]
}
    ef9e:	68fb      	ldr	r3, [r7, #12]
    efa0:	4618      	mov	r0, r3
    efa2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    efa6:	46bd      	mov	sp, r7
    efa8:	bd80      	pop	{r7, pc}
    efaa:	46c0      	nop			(mov r8, r8)
    efac:	00021ac8 	.word	0x00021ac8
    efb0:	00000000 	.word	0x00000000

0000efb4 <_ZN10ActionGoToC2E8Positionbf>:
        1, 1, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 1, 1, // 2
        1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 1, // 1
        3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, // 0
    };//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
    */
ActionGoTo::ActionGoTo(Position goalPos, bool goBack1, float _precision) : MediumLevelAction(goalPos)
    efb4:	b580      	push	{r7, lr}
    efb6:	b084      	sub	sp, #16
    efb8:	af00      	add	r7, sp, #0
    efba:	60f8      	str	r0, [r7, #12]
    efbc:	f107 0004 	add.w	r0, r7, #4	; 0x4
    efc0:	e880 0006 	stmia.w	r0, {r1, r2}
    efc4:	70fb      	strb	r3, [r7, #3]
    efc6:	68fb      	ldr	r3, [r7, #12]
    efc8:	4618      	mov	r0, r3
    efca:	f107 0304 	add.w	r3, r7, #4	; 0x4
    efce:	e893 0006 	ldmia.w	r3, {r1, r2}
    efd2:	f005 fd93 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
    efd6:	68fa      	ldr	r2, [r7, #12]
    efd8:	4b0f      	ldr	r3, [pc, #60]	(f018 <_ZN10ActionGoToC2E8Positionbf+0x64>)
    efda:	6013      	str	r3, [r2, #0]
    efdc:	68fb      	ldr	r3, [r7, #12]
    efde:	f103 0328 	add.w	r3, r3, #40	; 0x28
    efe2:	4618      	mov	r0, r3
    efe4:	f7ff fa62 	bl	e4ac <_ZN8PositionC1Ev>
{
    goBack = goBack1;
    efe8:	68fa      	ldr	r2, [r7, #12]
    efea:	78fb      	ldrb	r3, [r7, #3]
    efec:	7413      	strb	r3, [r2, #16]
    goalAngle = 0;
    efee:	68fa      	ldr	r2, [r7, #12]
    eff0:	4b0a      	ldr	r3, [pc, #40]	(f01c <_ZN10ActionGoToC2E8Positionbf+0x68>)
    eff2:	6193      	str	r3, [r2, #24]
    goingCurve = false;
    eff4:	68fa      	ldr	r2, [r7, #12]
    eff6:	f04f 0300 	mov.w	r3, #0	; 0x0
    effa:	7713      	strb	r3, [r2, #28]
    curveFactor = 1;
    effc:	68fa      	ldr	r2, [r7, #12]
    effe:	f04f 0301 	mov.w	r3, #1	; 0x1
    f002:	6213      	str	r3, [r2, #32]
    precision = _precision;
    f004:	68fa      	ldr	r2, [r7, #12]
    f006:	69bb      	ldr	r3, [r7, #24]
    f008:	6253      	str	r3, [r2, #36]
}
    f00a:	68fb      	ldr	r3, [r7, #12]
    f00c:	4618      	mov	r0, r3
    f00e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f012:	46bd      	mov	sp, r7
    f014:	bd80      	pop	{r7, pc}
    f016:	46c0      	nop			(mov r8, r8)
    f018:	00021ac8 	.word	0x00021ac8
    f01c:	00000000 	.word	0x00000000

0000f020 <_ZN4Clap6updateEv>:
}


Clap::~Clap(){}

int Clap::update()
    f020:	b590      	push	{r4, r7, lr}
    f022:	b085      	sub	sp, #20
    f024:	af02      	add	r7, sp, #8
    f026:	6078      	str	r0, [r7, #4]
{

    if (status == 0)
    f028:	687b      	ldr	r3, [r7, #4]
    f02a:	68db      	ldr	r3, [r3, #12]
    f02c:	2b00      	cmp	r3, #0
    f02e:	d106      	bne.n	f03e <_ZN4Clap6updateEv+0x1e>
    {
        #ifndef ROBOTHW
                qDebug() << "clap";
        #endif
        status++;
    f030:	687b      	ldr	r3, [r7, #4]
    f032:	68db      	ldr	r3, [r3, #12]
    f034:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f038:	687b      	ldr	r3, [r7, #4]
    f03a:	60da      	str	r2, [r3, #12]
    f03c:	e105      	b.n	f24a <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 1)
    f03e:	687b      	ldr	r3, [r7, #4]
    f040:	68db      	ldr	r3, [r3, #12]
    f042:	2b01      	cmp	r3, #1
    f044:	d114      	bne.n	f070 <_ZN4Clap6updateEv+0x50>
    {
        StrategieV2::setCurrentGoal(goalPosition, goBack);
    f046:	687b      	ldr	r3, [r7, #4]
    f048:	f893 c010 	ldrb.w	ip, [r3, #16]
    f04c:	687a      	ldr	r2, [r7, #4]
    f04e:	4b82      	ldr	r3, [pc, #520]	(f258 <_ZN4Clap6updateEv+0x238>)
    f050:	9300      	str	r3, [sp, #0]
    f052:	f102 0304 	add.w	r3, r2, #4	; 0x4
    f056:	e893 0003 	ldmia.w	r3, {r0, r1}
    f05a:	4662      	mov	r2, ip
    f05c:	4b7f      	ldr	r3, [pc, #508]	(f25c <_ZN4Clap6updateEv+0x23c>)
    f05e:	f006 fcfd 	bl	15a5c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
    f062:	687b      	ldr	r3, [r7, #4]
    f064:	68db      	ldr	r3, [r3, #12]
    f066:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f06a:	687b      	ldr	r3, [r7, #4]
    f06c:	60da      	str	r2, [r3, #12]
    f06e:	e0ec      	b.n	f24a <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 2)
    f070:	687b      	ldr	r3, [r7, #4]
    f072:	68db      	ldr	r3, [r3, #12]
    f074:	2b02      	cmp	r3, #2
    f076:	d11a      	bne.n	f0ae <_ZN4Clap6updateEv+0x8e>
    {
        if (Command::isNear(goalPosition))
    f078:	687b      	ldr	r3, [r7, #4]
    f07a:	f103 0304 	add.w	r3, r3, #4	; 0x4
    f07e:	e893 0003 	ldmia.w	r3, {r0, r1}
    f082:	4a77      	ldr	r2, [pc, #476]	(f260 <_ZN4Clap6updateEv+0x240>)
    f084:	f7f8 fe0a 	bl	7c9c <_ZN7Command6isNearE8Positionf>
    f088:	4603      	mov	r3, r0
    f08a:	2b00      	cmp	r3, #0
    f08c:	f000 80dd 	beq.w	f24a <_ZN4Clap6updateEv+0x22a>
        {
            StrategieV2::lookAt(positionArrivee);
    f090:	687b      	ldr	r3, [r7, #4]
    f092:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f096:	e893 0003 	ldmia.w	r3, {r0, r1}
    f09a:	4a72      	ldr	r2, [pc, #456]	(f264 <_ZN4Clap6updateEv+0x244>)
    f09c:	f006 fc46 	bl	1592c <_ZN11StrategieV26lookAtE8Positionf>
            status++;
    f0a0:	687b      	ldr	r3, [r7, #4]
    f0a2:	68db      	ldr	r3, [r3, #12]
    f0a4:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f0a8:	687b      	ldr	r3, [r7, #4]
    f0aa:	60da      	str	r2, [r3, #12]
    f0ac:	e0cd      	b.n	f24a <_ZN4Clap6updateEv+0x22a>
        }
    }

    else if (status == 3)
    f0ae:	687b      	ldr	r3, [r7, #4]
    f0b0:	68db      	ldr	r3, [r3, #12]
    f0b2:	2b03      	cmp	r3, #3
    f0b4:	d143      	bne.n	f13e <_ZN4Clap6updateEv+0x11e>
    {
        if (Command::isLookingAt(positionArrivee))
    f0b6:	687b      	ldr	r3, [r7, #4]
    f0b8:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f0bc:	e893 0003 	ldmia.w	r3, {r0, r1}
    f0c0:	4a69      	ldr	r2, [pc, #420]	(f268 <_ZN4Clap6updateEv+0x248>)
    f0c2:	f7f8 fd2f 	bl	7b24 <_ZN7Command11isLookingAtE8Positionf>
    f0c6:	4603      	mov	r3, r0
    f0c8:	2b00      	cmp	r3, #0
    f0ca:	f000 80be 	beq.w	f24a <_ZN4Clap6updateEv+0x22a>
        {
            //ouvrir le bras
            #ifndef ROBOTHW
            qDebug() << "On ouvre le bras";
            #endif
            if ((goalPosition.getX()-positionArrivee.getX())>0)
    f0ce:	687b      	ldr	r3, [r7, #4]
    f0d0:	f103 0304 	add.w	r3, r3, #4	; 0x4
    f0d4:	4618      	mov	r0, r3
    f0d6:	f7ff fa25 	bl	e524 <_ZNK8Position4getXEv>
    f0da:	4604      	mov	r4, r0
    f0dc:	687b      	ldr	r3, [r7, #4]
    f0de:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f0e2:	4618      	mov	r0, r3
    f0e4:	f7ff fa1e 	bl	e524 <_ZNK8Position4getXEv>
    f0e8:	4603      	mov	r3, r0
    f0ea:	4620      	mov	r0, r4
    f0ec:	4619      	mov	r1, r3
    f0ee:	f00b fb73 	bl	1a7d8 <__aeabi_fsub>
    f0f2:	4603      	mov	r3, r0
    f0f4:	461a      	mov	r2, r3
    f0f6:	f04f 0300 	mov.w	r3, #0	; 0x0
    f0fa:	70fb      	strb	r3, [r7, #3]
    f0fc:	4610      	mov	r0, r2
    f0fe:	495b      	ldr	r1, [pc, #364]	(f26c <_ZN4Clap6updateEv+0x24c>)
    f100:	f00b fe2e 	bl	1ad60 <__aeabi_fcmpgt>
    f104:	4603      	mov	r3, r0
    f106:	2b00      	cmp	r3, #0
    f108:	d002      	beq.n	f110 <_ZN4Clap6updateEv+0xf0>
    f10a:	f04f 0301 	mov.w	r3, #1	; 0x1
    f10e:	70fb      	strb	r3, [r7, #3]
    f110:	78fb      	ldrb	r3, [r7, #3]
    f112:	2b00      	cmp	r3, #0
    f114:	d006      	beq.n	f124 <_ZN4Clap6updateEv+0x104>
                BrasLateraux::getRight()->expand();
    f116:	f7f6 f9a3 	bl	5460 <_ZN12BrasLateraux8getRightEv>
    f11a:	4603      	mov	r3, r0
    f11c:	4618      	mov	r0, r3
    f11e:	f7f6 f8d7 	bl	52d0 <_ZN12BrasLateraux6expandEv>
    f122:	e005      	b.n	f130 <_ZN4Clap6updateEv+0x110>
            else
                BrasLateraux::getLeft()->expand();
    f124:	f7f6 f9ac 	bl	5480 <_ZN12BrasLateraux7getLeftEv>
    f128:	4603      	mov	r3, r0
    f12a:	4618      	mov	r0, r3
    f12c:	f7f6 f8d0 	bl	52d0 <_ZN12BrasLateraux6expandEv>
            status++;
    f130:	687b      	ldr	r3, [r7, #4]
    f132:	68db      	ldr	r3, [r3, #12]
    f134:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f138:	687b      	ldr	r3, [r7, #4]
    f13a:	60da      	str	r2, [r3, #12]
    f13c:	e085      	b.n	f24a <_ZN4Clap6updateEv+0x22a>
        }
    }

    else if ((status <= 53) && (status > -1 ))    //On attend que le bras du robot s'ouvre : 50ms par incrémentation du status
    f13e:	687b      	ldr	r3, [r7, #4]
    f140:	68db      	ldr	r3, [r3, #12]
    f142:	2b35      	cmp	r3, #53
    f144:	dc0a      	bgt.n	f15c <_ZN4Clap6updateEv+0x13c>
    f146:	687b      	ldr	r3, [r7, #4]
    f148:	68db      	ldr	r3, [r3, #12]
    f14a:	2b00      	cmp	r3, #0
    f14c:	db06      	blt.n	f15c <_ZN4Clap6updateEv+0x13c>
    {
        status++;
    f14e:	687b      	ldr	r3, [r7, #4]
    f150:	68db      	ldr	r3, [r3, #12]
    f152:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f156:	687b      	ldr	r3, [r7, #4]
    f158:	60da      	str	r2, [r3, #12]
    f15a:	e076      	b.n	f24a <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 54)
    f15c:	687b      	ldr	r3, [r7, #4]
    f15e:	68db      	ldr	r3, [r3, #12]
    f160:	2b36      	cmp	r3, #54
    f162:	d114      	bne.n	f18e <_ZN4Clap6updateEv+0x16e>
    {
        StrategieV2::setCurrentGoal(positionArrivee, goBack);
    f164:	687b      	ldr	r3, [r7, #4]
    f166:	f893 c010 	ldrb.w	ip, [r3, #16]
    f16a:	687a      	ldr	r2, [r7, #4]
    f16c:	4b3a      	ldr	r3, [pc, #232]	(f258 <_ZN4Clap6updateEv+0x238>)
    f16e:	9300      	str	r3, [sp, #0]
    f170:	f102 0320 	add.w	r3, r2, #32	; 0x20
    f174:	e893 0003 	ldmia.w	r3, {r0, r1}
    f178:	4662      	mov	r2, ip
    f17a:	4b38      	ldr	r3, [pc, #224]	(f25c <_ZN4Clap6updateEv+0x23c>)
    f17c:	f006 fc6e 	bl	15a5c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
    f180:	687b      	ldr	r3, [r7, #4]
    f182:	68db      	ldr	r3, [r3, #12]
    f184:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f188:	687b      	ldr	r3, [r7, #4]
    f18a:	60da      	str	r2, [r3, #12]
    f18c:	e05d      	b.n	f24a <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 55)
    f18e:	687b      	ldr	r3, [r7, #4]
    f190:	68db      	ldr	r3, [r3, #12]
    f192:	2b37      	cmp	r3, #55
    f194:	d142      	bne.n	f21c <_ZN4Clap6updateEv+0x1fc>
    {
        if (Command::isNear(positionArrivee))
    f196:	687b      	ldr	r3, [r7, #4]
    f198:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f19c:	e893 0003 	ldmia.w	r3, {r0, r1}
    f1a0:	4a2f      	ldr	r2, [pc, #188]	(f260 <_ZN4Clap6updateEv+0x240>)
    f1a2:	f7f8 fd7b 	bl	7c9c <_ZN7Command6isNearE8Positionf>
    f1a6:	4603      	mov	r3, r0
    f1a8:	2b00      	cmp	r3, #0
    f1aa:	d04e      	beq.n	f24a <_ZN4Clap6updateEv+0x22a>
        {
            //fermer bras
            #ifndef ROBOTHW
            qDebug() << "On ferme le bras";
            #endif
            if ((goalPosition.getX()-positionArrivee.getX())>0)
    f1ac:	687b      	ldr	r3, [r7, #4]
    f1ae:	f103 0304 	add.w	r3, r3, #4	; 0x4
    f1b2:	4618      	mov	r0, r3
    f1b4:	f7ff f9b6 	bl	e524 <_ZNK8Position4getXEv>
    f1b8:	4604      	mov	r4, r0
    f1ba:	687b      	ldr	r3, [r7, #4]
    f1bc:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f1c0:	4618      	mov	r0, r3
    f1c2:	f7ff f9af 	bl	e524 <_ZNK8Position4getXEv>
    f1c6:	4603      	mov	r3, r0
    f1c8:	4620      	mov	r0, r4
    f1ca:	4619      	mov	r1, r3
    f1cc:	f00b fb04 	bl	1a7d8 <__aeabi_fsub>
    f1d0:	4603      	mov	r3, r0
    f1d2:	461a      	mov	r2, r3
    f1d4:	f04f 0300 	mov.w	r3, #0	; 0x0
    f1d8:	70bb      	strb	r3, [r7, #2]
    f1da:	4610      	mov	r0, r2
    f1dc:	4923      	ldr	r1, [pc, #140]	(f26c <_ZN4Clap6updateEv+0x24c>)
    f1de:	f00b fdbf 	bl	1ad60 <__aeabi_fcmpgt>
    f1e2:	4603      	mov	r3, r0
    f1e4:	2b00      	cmp	r3, #0
    f1e6:	d002      	beq.n	f1ee <_ZN4Clap6updateEv+0x1ce>
    f1e8:	f04f 0301 	mov.w	r3, #1	; 0x1
    f1ec:	70bb      	strb	r3, [r7, #2]
    f1ee:	78bb      	ldrb	r3, [r7, #2]
    f1f0:	2b00      	cmp	r3, #0
    f1f2:	d006      	beq.n	f202 <_ZN4Clap6updateEv+0x1e2>
                BrasLateraux::getLeft()->collapse();
    f1f4:	f7f6 f944 	bl	5480 <_ZN12BrasLateraux7getLeftEv>
    f1f8:	4603      	mov	r3, r0
    f1fa:	4618      	mov	r0, r3
    f1fc:	f7f6 f858 	bl	52b0 <_ZN12BrasLateraux8collapseEv>
    f200:	e005      	b.n	f20e <_ZN4Clap6updateEv+0x1ee>
            else
                BrasLateraux::getRight()->collapse();
    f202:	f7f6 f92d 	bl	5460 <_ZN12BrasLateraux8getRightEv>
    f206:	4603      	mov	r3, r0
    f208:	4618      	mov	r0, r3
    f20a:	f7f6 f851 	bl	52b0 <_ZN12BrasLateraux8collapseEv>
            status++;
    f20e:	687b      	ldr	r3, [r7, #4]
    f210:	68db      	ldr	r3, [r3, #12]
    f212:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f216:	687b      	ldr	r3, [r7, #4]
    f218:	60da      	str	r2, [r3, #12]
    f21a:	e016      	b.n	f24a <_ZN4Clap6updateEv+0x22a>
        }
    }

    else if ((status <= 105) && (status > -1))
    f21c:	687b      	ldr	r3, [r7, #4]
    f21e:	68db      	ldr	r3, [r3, #12]
    f220:	2b69      	cmp	r3, #105
    f222:	dc0a      	bgt.n	f23a <_ZN4Clap6updateEv+0x21a>
    f224:	687b      	ldr	r3, [r7, #4]
    f226:	68db      	ldr	r3, [r3, #12]
    f228:	2b00      	cmp	r3, #0
    f22a:	db06      	blt.n	f23a <_ZN4Clap6updateEv+0x21a>
    {
        status++;
    f22c:	687b      	ldr	r3, [r7, #4]
    f22e:	68db      	ldr	r3, [r3, #12]
    f230:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f234:	687b      	ldr	r3, [r7, #4]
    f236:	60da      	str	r2, [r3, #12]
    f238:	e007      	b.n	f24a <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 106){
    f23a:	687b      	ldr	r3, [r7, #4]
    f23c:	68db      	ldr	r3, [r3, #12]
    f23e:	2b6a      	cmp	r3, #106
    f240:	d103      	bne.n	f24a <_ZN4Clap6updateEv+0x22a>
        status = -1;
    f242:	687a      	ldr	r2, [r7, #4]
    f244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f248:	60d3      	str	r3, [r2, #12]
#ifndef ROBOTHW
        qDebug() << "Etape clap finie";
#endif
    }

    return status;
    f24a:	687b      	ldr	r3, [r7, #4]
    f24c:	68db      	ldr	r3, [r3, #12]
}
    f24e:	4618      	mov	r0, r3
    f250:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f254:	46bd      	mov	sp, r7
    f256:	bd90      	pop	{r4, r7, pc}
    f258:	c2c80000 	.word	0xc2c80000
    f25c:	40400000 	.word	0x40400000
    f260:	41f00000 	.word	0x41f00000
    f264:	3cf5c28f 	.word	0x3cf5c28f
    f268:	3db2b8c2 	.word	0x3db2b8c2
    f26c:	00000000 	.word	0x00000000

0000f270 <_ZN4ClapD0Ev>:
    this->positionArrivee = positionArrivee;
    this->goBack = false;
}


Clap::~Clap(){}
    f270:	b580      	push	{r7, lr}
    f272:	b082      	sub	sp, #8
    f274:	af00      	add	r7, sp, #0
    f276:	6078      	str	r0, [r7, #4]
    f278:	687a      	ldr	r2, [r7, #4]
    f27a:	4b0a      	ldr	r3, [pc, #40]	(f2a4 <_ZN4ClapD0Ev+0x34>)
    f27c:	6013      	str	r3, [r2, #0]
    f27e:	687b      	ldr	r3, [r7, #4]
    f280:	4618      	mov	r0, r3
    f282:	f005 fbfb 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
    f286:	f04f 0301 	mov.w	r3, #1	; 0x1
    f28a:	b2db      	uxtb	r3, r3
    f28c:	2b00      	cmp	r3, #0
    f28e:	d002      	beq.n	f296 <_ZN4ClapD0Ev+0x26>
    f290:	6878      	ldr	r0, [r7, #4]
    f292:	f7ff f873 	bl	e37c <_ZdlPv>
    f296:	687b      	ldr	r3, [r7, #4]
    f298:	4618      	mov	r0, r3
    f29a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f29e:	46bd      	mov	sp, r7
    f2a0:	bd80      	pop	{r7, pc}
    f2a2:	46c0      	nop			(mov r8, r8)
    f2a4:	00021ae8 	.word	0x00021ae8

0000f2a8 <_ZN4ClapD1Ev>:
    f2a8:	b580      	push	{r7, lr}
    f2aa:	b082      	sub	sp, #8
    f2ac:	af00      	add	r7, sp, #0
    f2ae:	6078      	str	r0, [r7, #4]
    f2b0:	687a      	ldr	r2, [r7, #4]
    f2b2:	4b0a      	ldr	r3, [pc, #40]	(f2dc <_ZN4ClapD1Ev+0x34>)
    f2b4:	6013      	str	r3, [r2, #0]
    f2b6:	687b      	ldr	r3, [r7, #4]
    f2b8:	4618      	mov	r0, r3
    f2ba:	f005 fbdf 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
    f2be:	f04f 0300 	mov.w	r3, #0	; 0x0
    f2c2:	b2db      	uxtb	r3, r3
    f2c4:	2b00      	cmp	r3, #0
    f2c6:	d002      	beq.n	f2ce <_ZN4ClapD1Ev+0x26>
    f2c8:	6878      	ldr	r0, [r7, #4]
    f2ca:	f7ff f857 	bl	e37c <_ZdlPv>
    f2ce:	687b      	ldr	r3, [r7, #4]
    f2d0:	4618      	mov	r0, r3
    f2d2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f2d6:	46bd      	mov	sp, r7
    f2d8:	bd80      	pop	{r7, pc}
    f2da:	46c0      	nop			(mov r8, r8)
    f2dc:	00021ae8 	.word	0x00021ae8

0000f2e0 <_ZN4ClapD2Ev>:
    f2e0:	b580      	push	{r7, lr}
    f2e2:	b082      	sub	sp, #8
    f2e4:	af00      	add	r7, sp, #0
    f2e6:	6078      	str	r0, [r7, #4]
    f2e8:	687a      	ldr	r2, [r7, #4]
    f2ea:	4b0a      	ldr	r3, [pc, #40]	(f314 <_ZN4ClapD2Ev+0x34>)
    f2ec:	6013      	str	r3, [r2, #0]
    f2ee:	687b      	ldr	r3, [r7, #4]
    f2f0:	4618      	mov	r0, r3
    f2f2:	f005 fbc3 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
    f2f6:	f04f 0300 	mov.w	r3, #0	; 0x0
    f2fa:	b2db      	uxtb	r3, r3
    f2fc:	2b00      	cmp	r3, #0
    f2fe:	d002      	beq.n	f306 <_ZN4ClapD2Ev+0x26>
    f300:	6878      	ldr	r0, [r7, #4]
    f302:	f7ff f83b 	bl	e37c <_ZdlPv>
    f306:	687b      	ldr	r3, [r7, #4]
    f308:	4618      	mov	r0, r3
    f30a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f30e:	46bd      	mov	sp, r7
    f310:	bd80      	pop	{r7, pc}
    f312:	46c0      	nop			(mov r8, r8)
    f314:	00021ae8 	.word	0x00021ae8

0000f318 <_ZN4ClapC1E8PositionS0_>:
#include "brasLateraux.h"


Clap::Clap(){}

Clap::Clap(Position positionDepart, Position positionArrivee):MediumLevelAction(positionDepart)
    f318:	b082      	sub	sp, #8
    f31a:	b580      	push	{r7, lr}
    f31c:	b084      	sub	sp, #16
    f31e:	af00      	add	r7, sp, #0
    f320:	60f8      	str	r0, [r7, #12]
    f322:	f107 0004 	add.w	r0, r7, #4	; 0x4
    f326:	e880 0006 	stmia.w	r0, {r1, r2}
    f32a:	61fb      	str	r3, [r7, #28]
    f32c:	68fb      	ldr	r3, [r7, #12]
    f32e:	4618      	mov	r0, r3
    f330:	f107 0304 	add.w	r3, r7, #4	; 0x4
    f334:	e893 0006 	ldmia.w	r3, {r1, r2}
    f338:	f005 fbe0 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
    f33c:	68fa      	ldr	r2, [r7, #12]
    f33e:	4b12      	ldr	r3, [pc, #72]	(f388 <_ZN4ClapC1E8PositionS0_+0x70>)
    f340:	6013      	str	r3, [r2, #0]
    f342:	68fb      	ldr	r3, [r7, #12]
    f344:	f103 0318 	add.w	r3, r3, #24	; 0x18
    f348:	4618      	mov	r0, r3
    f34a:	f7ff f8af 	bl	e4ac <_ZN8PositionC1Ev>
    f34e:	68fb      	ldr	r3, [r7, #12]
    f350:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f354:	4618      	mov	r0, r3
    f356:	f7ff f8a9 	bl	e4ac <_ZN8PositionC1Ev>
{
    this->positionArrivee = positionArrivee;
    f35a:	68fb      	ldr	r3, [r7, #12]
    f35c:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f360:	4618      	mov	r0, r3
    f362:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    f366:	e893 0006 	ldmia.w	r3, {r1, r2}
    f36a:	f7ff f95b 	bl	e624 <_ZN8PositionaSES_>
    this->goBack = false;
    f36e:	68fa      	ldr	r2, [r7, #12]
    f370:	f04f 0300 	mov.w	r3, #0	; 0x0
    f374:	7413      	strb	r3, [r2, #16]
}
    f376:	68fb      	ldr	r3, [r7, #12]
    f378:	4618      	mov	r0, r3
    f37a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f37e:	46bd      	mov	sp, r7
    f380:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    f384:	b002      	add	sp, #8
    f386:	4770      	bx	lr
    f388:	00021ae8 	.word	0x00021ae8

0000f38c <_ZN4ClapC2E8PositionS0_>:
#include "brasLateraux.h"


Clap::Clap(){}

Clap::Clap(Position positionDepart, Position positionArrivee):MediumLevelAction(positionDepart)
    f38c:	b082      	sub	sp, #8
    f38e:	b580      	push	{r7, lr}
    f390:	b084      	sub	sp, #16
    f392:	af00      	add	r7, sp, #0
    f394:	60f8      	str	r0, [r7, #12]
    f396:	f107 0004 	add.w	r0, r7, #4	; 0x4
    f39a:	e880 0006 	stmia.w	r0, {r1, r2}
    f39e:	61fb      	str	r3, [r7, #28]
    f3a0:	68fb      	ldr	r3, [r7, #12]
    f3a2:	4618      	mov	r0, r3
    f3a4:	f107 0304 	add.w	r3, r7, #4	; 0x4
    f3a8:	e893 0006 	ldmia.w	r3, {r1, r2}
    f3ac:	f005 fba6 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
    f3b0:	68fa      	ldr	r2, [r7, #12]
    f3b2:	4b12      	ldr	r3, [pc, #72]	(f3fc <_ZN4ClapC2E8PositionS0_+0x70>)
    f3b4:	6013      	str	r3, [r2, #0]
    f3b6:	68fb      	ldr	r3, [r7, #12]
    f3b8:	f103 0318 	add.w	r3, r3, #24	; 0x18
    f3bc:	4618      	mov	r0, r3
    f3be:	f7ff f875 	bl	e4ac <_ZN8PositionC1Ev>
    f3c2:	68fb      	ldr	r3, [r7, #12]
    f3c4:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f3c8:	4618      	mov	r0, r3
    f3ca:	f7ff f86f 	bl	e4ac <_ZN8PositionC1Ev>
{
    this->positionArrivee = positionArrivee;
    f3ce:	68fb      	ldr	r3, [r7, #12]
    f3d0:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f3d4:	4618      	mov	r0, r3
    f3d6:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    f3da:	e893 0006 	ldmia.w	r3, {r1, r2}
    f3de:	f7ff f921 	bl	e624 <_ZN8PositionaSES_>
    this->goBack = false;
    f3e2:	68fa      	ldr	r2, [r7, #12]
    f3e4:	f04f 0300 	mov.w	r3, #0	; 0x0
    f3e8:	7413      	strb	r3, [r2, #16]
}
    f3ea:	68fb      	ldr	r3, [r7, #12]
    f3ec:	4618      	mov	r0, r3
    f3ee:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f3f2:	46bd      	mov	sp, r7
    f3f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    f3f8:	b002      	add	sp, #8
    f3fa:	4770      	bx	lr
    f3fc:	00021ae8 	.word	0x00021ae8

0000f400 <_ZN4ClapC1Ev>:
#include "command.h"
#include "position.h"
#include "brasLateraux.h"


Clap::Clap(){}
    f400:	b590      	push	{r4, r7, lr}
    f402:	b085      	sub	sp, #20
    f404:	af00      	add	r7, sp, #0
    f406:	6078      	str	r0, [r7, #4]
    f408:	687c      	ldr	r4, [r7, #4]
    f40a:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f40e:	4618      	mov	r0, r3
    f410:	4910      	ldr	r1, [pc, #64]	(f454 <_ZN4ClapC1Ev+0x54>)
    f412:	4a10      	ldr	r2, [pc, #64]	(f454 <_ZN4ClapC1Ev+0x54>)
    f414:	f04f 0301 	mov.w	r3, #1	; 0x1
    f418:	f7ff f870 	bl	e4fc <_ZN8PositionC1Effb>
    f41c:	4620      	mov	r0, r4
    f41e:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f422:	e893 0006 	ldmia.w	r3, {r1, r2}
    f426:	f005 fb69 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
    f42a:	687a      	ldr	r2, [r7, #4]
    f42c:	4b0a      	ldr	r3, [pc, #40]	(f458 <_ZN4ClapC1Ev+0x58>)
    f42e:	6013      	str	r3, [r2, #0]
    f430:	687b      	ldr	r3, [r7, #4]
    f432:	f103 0318 	add.w	r3, r3, #24	; 0x18
    f436:	4618      	mov	r0, r3
    f438:	f7ff f838 	bl	e4ac <_ZN8PositionC1Ev>
    f43c:	687b      	ldr	r3, [r7, #4]
    f43e:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f442:	4618      	mov	r0, r3
    f444:	f7ff f832 	bl	e4ac <_ZN8PositionC1Ev>
    f448:	687b      	ldr	r3, [r7, #4]
    f44a:	4618      	mov	r0, r3
    f44c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f450:	46bd      	mov	sp, r7
    f452:	bd90      	pop	{r4, r7, pc}
    f454:	00000000 	.word	0x00000000
    f458:	00021ae8 	.word	0x00021ae8

0000f45c <_ZN4ClapC2Ev>:
    f45c:	b590      	push	{r4, r7, lr}
    f45e:	b085      	sub	sp, #20
    f460:	af00      	add	r7, sp, #0
    f462:	6078      	str	r0, [r7, #4]
    f464:	687c      	ldr	r4, [r7, #4]
    f466:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f46a:	4618      	mov	r0, r3
    f46c:	4910      	ldr	r1, [pc, #64]	(f4b0 <_ZN4ClapC2Ev+0x54>)
    f46e:	4a10      	ldr	r2, [pc, #64]	(f4b0 <_ZN4ClapC2Ev+0x54>)
    f470:	f04f 0301 	mov.w	r3, #1	; 0x1
    f474:	f7ff f842 	bl	e4fc <_ZN8PositionC1Effb>
    f478:	4620      	mov	r0, r4
    f47a:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f47e:	e893 0006 	ldmia.w	r3, {r1, r2}
    f482:	f005 fb3b 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
    f486:	687a      	ldr	r2, [r7, #4]
    f488:	4b0a      	ldr	r3, [pc, #40]	(f4b4 <_ZN4ClapC2Ev+0x58>)
    f48a:	6013      	str	r3, [r2, #0]
    f48c:	687b      	ldr	r3, [r7, #4]
    f48e:	f103 0318 	add.w	r3, r3, #24	; 0x18
    f492:	4618      	mov	r0, r3
    f494:	f7ff f80a 	bl	e4ac <_ZN8PositionC1Ev>
    f498:	687b      	ldr	r3, [r7, #4]
    f49a:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f49e:	4618      	mov	r0, r3
    f4a0:	f7ff f804 	bl	e4ac <_ZN8PositionC1Ev>
    f4a4:	687b      	ldr	r3, [r7, #4]
    f4a6:	4618      	mov	r0, r3
    f4a8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f4ac:	46bd      	mov	sp, r7
    f4ae:	bd90      	pop	{r4, r7, pc}
    f4b0:	00000000 	.word	0x00000000
    f4b4:	00021ae8 	.word	0x00021ae8

0000f4b8 <_ZN8DijkstraC2Ev>:
//http://fr.wikipedia.org/wiki/Algorithme_de_Dijkstra

#include "dijkstra.h"
#include <math.h>

Dijkstra::Dijkstra(){}
    f4b8:	b480      	push	{r7}
    f4ba:	b083      	sub	sp, #12
    f4bc:	af00      	add	r7, sp, #0
    f4be:	6078      	str	r0, [r7, #4]
    f4c0:	687b      	ldr	r3, [r7, #4]
    f4c2:	4618      	mov	r0, r3
    f4c4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f4c8:	46bd      	mov	sp, r7
    f4ca:	bc80      	pop	{r7}
    f4cc:	4770      	bx	lr
    f4ce:	46c0      	nop			(mov r8, r8)

0000f4d0 <_ZN8DijkstraC1Ev>:
    f4d0:	b480      	push	{r7}
    f4d2:	b083      	sub	sp, #12
    f4d4:	af00      	add	r7, sp, #0
    f4d6:	6078      	str	r0, [r7, #4]
    f4d8:	687b      	ldr	r3, [r7, #4]
    f4da:	4618      	mov	r0, r3
    f4dc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f4e0:	46bd      	mov	sp, r7
    f4e2:	bc80      	pop	{r7}
    f4e4:	4770      	bx	lr
    f4e6:	46c0      	nop			(mov r8, r8)

0000f4e8 <_ZN8DijkstraC2EPP5Etapei>:


Dijkstra::Dijkstra(Etape** tableauEtapes, int nbEtapes)
    f4e8:	b480      	push	{r7}
    f4ea:	b085      	sub	sp, #20
    f4ec:	af00      	add	r7, sp, #0
    f4ee:	60f8      	str	r0, [r7, #12]
    f4f0:	60b9      	str	r1, [r7, #8]
    f4f2:	607a      	str	r2, [r7, #4]
{
    this->tableauEtapes = tableauEtapes;
    f4f4:	68fa      	ldr	r2, [r7, #12]
    f4f6:	68bb      	ldr	r3, [r7, #8]
    f4f8:	6013      	str	r3, [r2, #0]
    this->nombreEtapes = nbEtapes;
    f4fa:	68fa      	ldr	r2, [r7, #12]
    f4fc:	687b      	ldr	r3, [r7, #4]
    f4fe:	6053      	str	r3, [r2, #4]
}
    f500:	68fb      	ldr	r3, [r7, #12]
    f502:	4618      	mov	r0, r3
    f504:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f508:	46bd      	mov	sp, r7
    f50a:	bc80      	pop	{r7}
    f50c:	4770      	bx	lr
    f50e:	46c0      	nop			(mov r8, r8)

0000f510 <_ZN8DijkstraC1EPP5Etapei>:
#include <math.h>

Dijkstra::Dijkstra(){}


Dijkstra::Dijkstra(Etape** tableauEtapes, int nbEtapes)
    f510:	b480      	push	{r7}
    f512:	b085      	sub	sp, #20
    f514:	af00      	add	r7, sp, #0
    f516:	60f8      	str	r0, [r7, #12]
    f518:	60b9      	str	r1, [r7, #8]
    f51a:	607a      	str	r2, [r7, #4]
{
    this->tableauEtapes = tableauEtapes;
    f51c:	68fa      	ldr	r2, [r7, #12]
    f51e:	68bb      	ldr	r3, [r7, #8]
    f520:	6013      	str	r3, [r2, #0]
    this->nombreEtapes = nbEtapes;
    f522:	68fa      	ldr	r2, [r7, #12]
    f524:	687b      	ldr	r3, [r7, #4]
    f526:	6053      	str	r3, [r2, #4]
}
    f528:	68fb      	ldr	r3, [r7, #12]
    f52a:	4618      	mov	r0, r3
    f52c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f530:	46bd      	mov	sp, r7
    f532:	bc80      	pop	{r7}
    f534:	4770      	bx	lr
    f536:	46c0      	nop			(mov r8, r8)

0000f538 <_ZN8Dijkstra16getEtapeCouranteEv>:

Etape* Dijkstra::getEtapeCourante()
    f538:	b480      	push	{r7}
    f53a:	b083      	sub	sp, #12
    f53c:	af00      	add	r7, sp, #0
    f53e:	6078      	str	r0, [r7, #4]
{
    return tableauEtapes[this->numeroEtapeCourante];
    f540:	687b      	ldr	r3, [r7, #4]
    f542:	681a      	ldr	r2, [r3, #0]
    f544:	687b      	ldr	r3, [r7, #4]
    f546:	689b      	ldr	r3, [r3, #8]
    f548:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f54c:	4413      	add	r3, r2
    f54e:	681b      	ldr	r3, [r3, #0]
}
    f550:	4618      	mov	r0, r3
    f552:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f556:	46bd      	mov	sp, r7
    f558:	bc80      	pop	{r7}
    f55a:	4770      	bx	lr

0000f55c <_ZN8Dijkstra16setEtapeCouranteEi>:
                    pow(fabs((int) etapeDepart->getPosition().getX()-etapeArrivee->getPosition().getX()),2)+
                    pow(fabs((int) etapeDepart->getPosition().getY()-etapeArrivee->getPosition().getY()),2)
                    );
}

void Dijkstra::setEtapeCourante(int numeroEtapeCourante)
    f55c:	b480      	push	{r7}
    f55e:	b083      	sub	sp, #12
    f560:	af00      	add	r7, sp, #0
    f562:	6078      	str	r0, [r7, #4]
    f564:	6039      	str	r1, [r7, #0]
{
    this->numeroEtapeCourante = numeroEtapeCourante;
    f566:	687a      	ldr	r2, [r7, #4]
    f568:	683b      	ldr	r3, [r7, #0]
    f56a:	6093      	str	r3, [r2, #8]
}
    f56c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f570:	46bd      	mov	sp, r7
    f572:	bc80      	pop	{r7}
    f574:	4770      	bx	lr
    f576:	46c0      	nop			(mov r8, r8)

0000f578 <_ZN8Dijkstra13etapeRapporteEP5Etape>:
int Dijkstra::getDistance(Etape* etape)
{
    return etape->getDistance();
}

bool Dijkstra::etapeRapporte(Etape* etape)
    f578:	b580      	push	{r7, lr}
    f57a:	b082      	sub	sp, #8
    f57c:	af00      	add	r7, sp, #0
    f57e:	6078      	str	r0, [r7, #4]
    f580:	6039      	str	r1, [r7, #0]
{
    return (bool) etape->getScore();
    f582:	6838      	ldr	r0, [r7, #0]
    f584:	f000 fd6c 	bl	10060 <_ZN5Etape8getScoreEv>
    f588:	4603      	mov	r3, r0
    f58a:	2b00      	cmp	r3, #0
    f58c:	bf0c      	ite	eq
    f58e:	2300      	moveq	r3, #0
    f590:	2301      	movne	r3, #1
    f592:	b2db      	uxtb	r3, r3
}
    f594:	4618      	mov	r0, r3
    f596:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f59a:	46bd      	mov	sp, r7
    f59c:	bd80      	pop	{r7, pc}
    f59e:	46c0      	nop			(mov r8, r8)

0000f5a0 <_ZN8Dijkstra11getDistanceEP5Etape>:
int Dijkstra::getDistance(int numeroEtape)
{
    return tableauEtapes[numeroEtape]->getDistance();
}

int Dijkstra::getDistance(Etape* etape)
    f5a0:	b580      	push	{r7, lr}
    f5a2:	b082      	sub	sp, #8
    f5a4:	af00      	add	r7, sp, #0
    f5a6:	6078      	str	r0, [r7, #4]
    f5a8:	6039      	str	r1, [r7, #0]
{
    return etape->getDistance();
    f5aa:	6838      	ldr	r0, [r7, #0]
    f5ac:	f000 fc42 	bl	fe34 <_ZN5Etape11getDistanceEv>
    f5b0:	4603      	mov	r3, r0
}
    f5b2:	4618      	mov	r0, r3
    f5b4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f5b8:	46bd      	mov	sp, r7
    f5ba:	bd80      	pop	{r7, pc}

0000f5bc <_ZN8Dijkstra11getDistanceEi>:
            }
        }
    }
}

int Dijkstra::getDistance(int numeroEtape)
    f5bc:	b580      	push	{r7, lr}
    f5be:	b082      	sub	sp, #8
    f5c0:	af00      	add	r7, sp, #0
    f5c2:	6078      	str	r0, [r7, #4]
    f5c4:	6039      	str	r1, [r7, #0]
{
    return tableauEtapes[numeroEtape]->getDistance();
    f5c6:	687b      	ldr	r3, [r7, #4]
    f5c8:	681a      	ldr	r2, [r3, #0]
    f5ca:	683b      	ldr	r3, [r7, #0]
    f5cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f5d0:	4413      	add	r3, r2
    f5d2:	681b      	ldr	r3, [r3, #0]
    f5d4:	4618      	mov	r0, r3
    f5d6:	f000 fc2d 	bl	fe34 <_ZN5Etape11getDistanceEv>
    f5da:	4603      	mov	r3, r0
}
    f5dc:	4618      	mov	r0, r3
    f5de:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f5e2:	46bd      	mov	sp, r7
    f5e4:	bd80      	pop	{r7, pc}
    f5e6:	46c0      	nop			(mov r8, r8)

0000f5e8 <_ZN8Dijkstra18mettreAJourVoisinsEi>:
    this->tableauEtapes[numeroEtapeLaPlusProche]->setState(classementEtapeMinimale);
    return numeroEtapeLaPlusProche;
}

//Met à jour les voisin de l'étape spécifiée.
void Dijkstra::mettreAJourVoisins(int numeroEtape)
    f5e8:	b580      	push	{r7, lr}
    f5ea:	b086      	sub	sp, #24
    f5ec:	af00      	add	r7, sp, #0
    f5ee:	6078      	str	r0, [r7, #4]
    f5f0:	6039      	str	r1, [r7, #0]
{
    int distanceEtapeCourante = this->tableauEtapes[numeroEtape]->getDistance();
    f5f2:	687b      	ldr	r3, [r7, #4]
    f5f4:	681a      	ldr	r2, [r3, #0]
    f5f6:	683b      	ldr	r3, [r7, #0]
    f5f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f5fc:	4413      	add	r3, r2
    f5fe:	681b      	ldr	r3, [r3, #0]
    f600:	4618      	mov	r0, r3
    f602:	f000 fc17 	bl	fe34 <_ZN5Etape11getDistanceEv>
    f606:	4603      	mov	r3, r0
    f608:	60bb      	str	r3, [r7, #8]
    int distanceChildCourant;
    int distanceEtapeVersChild;

    for(int i = 0 ; i < this->tableauEtapes[numeroEtape]->getNbChildren() ; i++)
    f60a:	f04f 0300 	mov.w	r3, #0	; 0x0
    f60e:	617b      	str	r3, [r7, #20]
    f610:	e075      	b.n	f6fe <_ZN8Dijkstra18mettreAJourVoisinsEi+0x116>
    {
        //Si cette étape n'est pas bannie
        //if(this->tableauEtapes[numeroEtape]->getChild(i)->getState() > -2 && ((int) this->tableauEtapes[numeroEtape]->getChild(i)->getEtapeType() < 20))
        if(!(this->tableauEtapes[numeroEtape]->getChild(i)->aEviter()))
    f612:	687b      	ldr	r3, [r7, #4]
    f614:	681a      	ldr	r2, [r3, #0]
    f616:	683b      	ldr	r3, [r7, #0]
    f618:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f61c:	4413      	add	r3, r2
    f61e:	681b      	ldr	r3, [r3, #0]
    f620:	4618      	mov	r0, r3
    f622:	6979      	ldr	r1, [r7, #20]
    f624:	f000 fbae 	bl	fd84 <_ZN5Etape8getChildEi>
    f628:	4603      	mov	r3, r0
    f62a:	4618      	mov	r0, r3
    f62c:	f000 fc6a 	bl	ff04 <_ZN5Etape7aEviterEv>
    f630:	4603      	mov	r3, r0
    f632:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f636:	b2db      	uxtb	r3, r3
    f638:	2b00      	cmp	r3, #0
    f63a:	d05c      	beq.n	f6f6 <_ZN8Dijkstra18mettreAJourVoisinsEi+0x10e>
        {
            distanceChildCourant = this->tableauEtapes[numeroEtape]->getChild(i)->getDistance();
    f63c:	687b      	ldr	r3, [r7, #4]
    f63e:	681a      	ldr	r2, [r3, #0]
    f640:	683b      	ldr	r3, [r7, #0]
    f642:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f646:	4413      	add	r3, r2
    f648:	681b      	ldr	r3, [r3, #0]
    f64a:	4618      	mov	r0, r3
    f64c:	6979      	ldr	r1, [r7, #20]
    f64e:	f000 fb99 	bl	fd84 <_ZN5Etape8getChildEi>
    f652:	4603      	mov	r3, r0
    f654:	4618      	mov	r0, r3
    f656:	f000 fbed 	bl	fe34 <_ZN5Etape11getDistanceEv>
    f65a:	4603      	mov	r3, r0
    f65c:	60fb      	str	r3, [r7, #12]
            distanceEtapeVersChild = this->tableauEtapes[numeroEtape]->getDistances()[i];
    f65e:	687b      	ldr	r3, [r7, #4]
    f660:	681a      	ldr	r2, [r3, #0]
    f662:	683b      	ldr	r3, [r7, #0]
    f664:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f668:	4413      	add	r3, r2
    f66a:	681b      	ldr	r3, [r3, #0]
    f66c:	4618      	mov	r0, r3
    f66e:	f000 fc97 	bl	ffa0 <_ZN5Etape12getDistancesEv>
    f672:	4602      	mov	r2, r0
    f674:	697b      	ldr	r3, [r7, #20]
    f676:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f67a:	4413      	add	r3, r2
    f67c:	681b      	ldr	r3, [r3, #0]
    f67e:	613b      	str	r3, [r7, #16]
            //distanceEtapeVersChild = calculDistanceDirect(this->tableauEtapes[numeroEtape]->getChild(i), this->tableauEtapes[numeroEtape]);
            if(!distanceEtapeVersChild)
    f680:	693b      	ldr	r3, [r7, #16]
    f682:	2b00      	cmp	r3, #0
    f684:	d102      	bne.n	f68c <_ZN8Dijkstra18mettreAJourVoisinsEi+0xa4>
                distanceEtapeVersChild = 1;//Pas de distances nulles
    f686:	f04f 0301 	mov.w	r3, #1	; 0x1
    f68a:	613b      	str	r3, [r7, #16]
            //Si le chemin vers ce voisin est plus court en passant par l'étape actuelle, mise à jour de ce voisin
            //Si le voisin n'avait pas encore été atteind par un chemin, alors on le met à jour aussi (distanceChildCourant == -1)
            if(distanceChildCourant == -1 || distanceChildCourant > distanceEtapeCourante + distanceEtapeVersChild)
    f68c:	68fb      	ldr	r3, [r7, #12]
    f68e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f692:	d005      	beq.n	f6a0 <_ZN8Dijkstra18mettreAJourVoisinsEi+0xb8>
    f694:	68ba      	ldr	r2, [r7, #8]
    f696:	693b      	ldr	r3, [r7, #16]
    f698:	441a      	add	r2, r3
    f69a:	68fb      	ldr	r3, [r7, #12]
    f69c:	429a      	cmp	r2, r3
    f69e:	da2a      	bge.n	f6f6 <_ZN8Dijkstra18mettreAJourVoisinsEi+0x10e>
            {
                this->tableauEtapes[numeroEtape]->getChild(i)->setDistance(distanceEtapeCourante + distanceEtapeVersChild);
    f6a0:	687b      	ldr	r3, [r7, #4]
    f6a2:	681a      	ldr	r2, [r3, #0]
    f6a4:	683b      	ldr	r3, [r7, #0]
    f6a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f6aa:	4413      	add	r3, r2
    f6ac:	681b      	ldr	r3, [r3, #0]
    f6ae:	4618      	mov	r0, r3
    f6b0:	6979      	ldr	r1, [r7, #20]
    f6b2:	f000 fb67 	bl	fd84 <_ZN5Etape8getChildEi>
    f6b6:	4601      	mov	r1, r0
    f6b8:	68ba      	ldr	r2, [r7, #8]
    f6ba:	693b      	ldr	r3, [r7, #16]
    f6bc:	4413      	add	r3, r2
    f6be:	4608      	mov	r0, r1
    f6c0:	4619      	mov	r1, r3
    f6c2:	f000 fbc3 	bl	fe4c <_ZN5Etape11setDistanceEi>
                this->tableauEtapes[numeroEtape]->getChild(i)->setParent(this->tableauEtapes[this->numeroEtapeCourante]);
    f6c6:	687b      	ldr	r3, [r7, #4]
    f6c8:	681a      	ldr	r2, [r3, #0]
    f6ca:	683b      	ldr	r3, [r7, #0]
    f6cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f6d0:	4413      	add	r3, r2
    f6d2:	681b      	ldr	r3, [r3, #0]
    f6d4:	4618      	mov	r0, r3
    f6d6:	6979      	ldr	r1, [r7, #20]
    f6d8:	f000 fb54 	bl	fd84 <_ZN5Etape8getChildEi>
    f6dc:	4601      	mov	r1, r0
    f6de:	687b      	ldr	r3, [r7, #4]
    f6e0:	681a      	ldr	r2, [r3, #0]
    f6e2:	687b      	ldr	r3, [r7, #4]
    f6e4:	689b      	ldr	r3, [r3, #8]
    f6e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f6ea:	4413      	add	r3, r2
    f6ec:	681b      	ldr	r3, [r3, #0]
    f6ee:	4608      	mov	r0, r1
    f6f0:	4619      	mov	r1, r3
    f6f2:	f000 fbb9 	bl	fe68 <_ZN5Etape9setParentEPS_>
{
    int distanceEtapeCourante = this->tableauEtapes[numeroEtape]->getDistance();
    int distanceChildCourant;
    int distanceEtapeVersChild;

    for(int i = 0 ; i < this->tableauEtapes[numeroEtape]->getNbChildren() ; i++)
    f6f6:	697b      	ldr	r3, [r7, #20]
    f6f8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    f6fc:	617b      	str	r3, [r7, #20]
    f6fe:	687b      	ldr	r3, [r7, #4]
    f700:	681a      	ldr	r2, [r3, #0]
    f702:	683b      	ldr	r3, [r7, #0]
    f704:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f708:	4413      	add	r3, r2
    f70a:	681b      	ldr	r3, [r3, #0]
    f70c:	4618      	mov	r0, r3
    f70e:	f000 fbb9 	bl	fe84 <_ZN5Etape13getNbChildrenEv>
    f712:	4602      	mov	r2, r0
    f714:	697b      	ldr	r3, [r7, #20]
    f716:	429a      	cmp	r2, r3
    f718:	bfd4      	ite	le
    f71a:	2300      	movle	r3, #0
    f71c:	2301      	movgt	r3, #1
    f71e:	b2db      	uxtb	r3, r3
    f720:	2b00      	cmp	r3, #0
    f722:	f47f af76 	bne.w	f612 <_ZN8Dijkstra18mettreAJourVoisinsEi+0x2a>
                this->tableauEtapes[numeroEtape]->getChild(i)->setDistance(distanceEtapeCourante + distanceEtapeVersChild);
                this->tableauEtapes[numeroEtape]->getChild(i)->setParent(this->tableauEtapes[this->numeroEtapeCourante]);
            }
        }
    }
}
    f726:	f107 0718 	add.w	r7, r7, #24	; 0x18
    f72a:	46bd      	mov	sp, r7
    f72c:	bd80      	pop	{r7, pc}
    f72e:	46c0      	nop			(mov r8, r8)

0000f730 <_ZN8Dijkstra11initialiserEv>:
    }
    return 0;*/
}

//On réinitialise le tableau avant le commencer une nouvelle recherche
void Dijkstra::initialiser()
    f730:	b580      	push	{r7, lr}
    f732:	b084      	sub	sp, #16
    f734:	af00      	add	r7, sp, #0
    f736:	6078      	str	r0, [r7, #4]
{
    for(int i = 0 ; i<this->nombreEtapes ; i++)
    f738:	f04f 0300 	mov.w	r3, #0	; 0x0
    f73c:	60fb      	str	r3, [r7, #12]
    f73e:	e038      	b.n	f7b2 <_ZN8Dijkstra11initialiserEv+0x82>
    {
        this->tableauEtapes[i]->setDistance(-1);
    f740:	687b      	ldr	r3, [r7, #4]
    f742:	681a      	ldr	r2, [r3, #0]
    f744:	68fb      	ldr	r3, [r7, #12]
    f746:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f74a:	4413      	add	r3, r2
    f74c:	681b      	ldr	r3, [r3, #0]
    f74e:	4618      	mov	r0, r3
    f750:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f754:	f000 fb7a 	bl	fe4c <_ZN5Etape11setDistanceEi>
        if(!(this->tableauEtapes[i]->aEviter()))//getState() != -2)
    f758:	687b      	ldr	r3, [r7, #4]
    f75a:	681a      	ldr	r2, [r3, #0]
    f75c:	68fb      	ldr	r3, [r7, #12]
    f75e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f762:	4413      	add	r3, r2
    f764:	681b      	ldr	r3, [r3, #0]
    f766:	4618      	mov	r0, r3
    f768:	f000 fbcc 	bl	ff04 <_ZN5Etape7aEviterEv>
    f76c:	4603      	mov	r3, r0
    f76e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f772:	b2db      	uxtb	r3, r3
    f774:	2b00      	cmp	r3, #0
    f776:	d00c      	beq.n	f792 <_ZN8Dijkstra11initialiserEv+0x62>
        {
            this->tableauEtapes[i]->setState(-1);
    f778:	687b      	ldr	r3, [r7, #4]
    f77a:	681a      	ldr	r2, [r3, #0]
    f77c:	68fb      	ldr	r3, [r7, #12]
    f77e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f782:	4413      	add	r3, r2
    f784:	681b      	ldr	r3, [r3, #0]
    f786:	4618      	mov	r0, r3
    f788:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f78c:	f000 fb44 	bl	fe18 <_ZN5Etape8setStateEi>
    f790:	e00b      	b.n	f7aa <_ZN8Dijkstra11initialiserEv+0x7a>
        }
        else
        {
            this->tableauEtapes[i]->setState(-2);
    f792:	687b      	ldr	r3, [r7, #4]
    f794:	681a      	ldr	r2, [r3, #0]
    f796:	68fb      	ldr	r3, [r7, #12]
    f798:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f79c:	4413      	add	r3, r2
    f79e:	681b      	ldr	r3, [r3, #0]
    f7a0:	4618      	mov	r0, r3
    f7a2:	f06f 0101 	mvn.w	r1, #1	; 0x1
    f7a6:	f000 fb37 	bl	fe18 <_ZN5Etape8setStateEi>
}

//On réinitialise le tableau avant le commencer une nouvelle recherche
void Dijkstra::initialiser()
{
    for(int i = 0 ; i<this->nombreEtapes ; i++)
    f7aa:	68fb      	ldr	r3, [r7, #12]
    f7ac:	f103 0301 	add.w	r3, r3, #1	; 0x1
    f7b0:	60fb      	str	r3, [r7, #12]
    f7b2:	687b      	ldr	r3, [r7, #4]
    f7b4:	685a      	ldr	r2, [r3, #4]
    f7b6:	68fb      	ldr	r3, [r7, #12]
    f7b8:	429a      	cmp	r2, r3
    f7ba:	dcc1      	bgt.n	f740 <_ZN8Dijkstra11initialiserEv+0x10>
        else
        {
            this->tableauEtapes[i]->setState(-2);
        }
    }
    this->tableauEtapes[this->numeroEtapeCourante]->setDistance(0);
    f7bc:	687b      	ldr	r3, [r7, #4]
    f7be:	681a      	ldr	r2, [r3, #0]
    f7c0:	687b      	ldr	r3, [r7, #4]
    f7c2:	689b      	ldr	r3, [r3, #8]
    f7c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f7c8:	4413      	add	r3, r2
    f7ca:	681b      	ldr	r3, [r3, #0]
    f7cc:	4618      	mov	r0, r3
    f7ce:	f04f 0100 	mov.w	r1, #0	; 0x0
    f7d2:	f000 fb3b 	bl	fe4c <_ZN5Etape11setDistanceEi>
    this->tableauEtapes[this->numeroEtapeCourante]->setState(0);
    f7d6:	687b      	ldr	r3, [r7, #4]
    f7d8:	681a      	ldr	r2, [r3, #0]
    f7da:	687b      	ldr	r3, [r7, #4]
    f7dc:	689b      	ldr	r3, [r3, #8]
    f7de:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f7e2:	4413      	add	r3, r2
    f7e4:	681b      	ldr	r3, [r3, #0]
    f7e6:	4618      	mov	r0, r3
    f7e8:	f04f 0100 	mov.w	r1, #0	; 0x0
    f7ec:	f000 fb14 	bl	fe18 <_ZN5Etape8setStateEi>
}
    f7f0:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f7f4:	46bd      	mov	sp, r7
    f7f6:	bd80      	pop	{r7, pc}

0000f7f8 <_ZN8Dijkstra10trouverMinEi>:

// Renvoi le numéro de l'étape la plus proche dont on n'a pas encore mis à jour les voisins
int Dijkstra::trouverMin(int classementEtapeMinimale)
    f7f8:	b580      	push	{r7, lr}
    f7fa:	b0a2      	sub	sp, #136
    f7fc:	af00      	add	r7, sp, #0
    f7fe:	6178      	str	r0, [r7, #20]
    f800:	6139      	str	r1, [r7, #16]
{
    int minimum = -1;
    f802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f806:	61bb      	str	r3, [r7, #24]
    int numeroEtapeLaPlusProche = -1;
    f808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f80c:	61fb      	str	r3, [r7, #28]

    for(int i = 0 ; i < this->nombreEtapes ; i++)
    f80e:	f04f 0300 	mov.w	r3, #0	; 0x0
    f812:	67bb      	str	r3, [r7, #120]
    f814:	e05c      	b.n	f8d0 <_ZN8Dijkstra10trouverMinEi+0xd8>
    {
        if(this->tableauEtapes[i]->getState()==-1 && (!(this->tableauEtapes[i]->aEviter())) && (!(this->tableauEtapes[i]->getDistance()==-1)) && (minimum == -1 || this->tableauEtapes[i]->getDistance() < minimum))
    f816:	697b      	ldr	r3, [r7, #20]
    f818:	681a      	ldr	r2, [r3, #0]
    f81a:	6fbb      	ldr	r3, [r7, #120]
    f81c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f820:	4413      	add	r3, r2
    f822:	681b      	ldr	r3, [r3, #0]
    f824:	4618      	mov	r0, r3
    f826:	f000 faeb 	bl	fe00 <_ZN5Etape8getStateEv>
    f82a:	4603      	mov	r3, r0
    f82c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f830:	d136      	bne.n	f8a0 <_ZN8Dijkstra10trouverMinEi+0xa8>
    f832:	697b      	ldr	r3, [r7, #20]
    f834:	681a      	ldr	r2, [r3, #0]
    f836:	6fbb      	ldr	r3, [r7, #120]
    f838:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f83c:	4413      	add	r3, r2
    f83e:	681b      	ldr	r3, [r3, #0]
    f840:	4618      	mov	r0, r3
    f842:	f000 fb5f 	bl	ff04 <_ZN5Etape7aEviterEv>
    f846:	4603      	mov	r3, r0
    f848:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f84c:	b2db      	uxtb	r3, r3
    f84e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f852:	b2db      	uxtb	r3, r3
    f854:	2b00      	cmp	r3, #0
    f856:	d123      	bne.n	f8a0 <_ZN8Dijkstra10trouverMinEi+0xa8>
    f858:	697b      	ldr	r3, [r7, #20]
    f85a:	681a      	ldr	r2, [r3, #0]
    f85c:	6fbb      	ldr	r3, [r7, #120]
    f85e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f862:	4413      	add	r3, r2
    f864:	681b      	ldr	r3, [r3, #0]
    f866:	4618      	mov	r0, r3
    f868:	f000 fae4 	bl	fe34 <_ZN5Etape11getDistanceEv>
    f86c:	4603      	mov	r3, r0
    f86e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f872:	d015      	beq.n	f8a0 <_ZN8Dijkstra10trouverMinEi+0xa8>
    f874:	69bb      	ldr	r3, [r7, #24]
    f876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f87a:	d00d      	beq.n	f898 <_ZN8Dijkstra10trouverMinEi+0xa0>
    f87c:	697b      	ldr	r3, [r7, #20]
    f87e:	681a      	ldr	r2, [r3, #0]
    f880:	6fbb      	ldr	r3, [r7, #120]
    f882:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f886:	4413      	add	r3, r2
    f888:	681b      	ldr	r3, [r3, #0]
    f88a:	4618      	mov	r0, r3
    f88c:	f000 fad2 	bl	fe34 <_ZN5Etape11getDistanceEv>
    f890:	4602      	mov	r2, r0
    f892:	69bb      	ldr	r3, [r7, #24]
    f894:	429a      	cmp	r2, r3
    f896:	da03      	bge.n	f8a0 <_ZN8Dijkstra10trouverMinEi+0xa8>
    f898:	f04f 0301 	mov.w	r3, #1	; 0x1
    f89c:	607b      	str	r3, [r7, #4]
    f89e:	e002      	b.n	f8a6 <_ZN8Dijkstra10trouverMinEi+0xae>
    f8a0:	f04f 0300 	mov.w	r3, #0	; 0x0
    f8a4:	607b      	str	r3, [r7, #4]
    f8a6:	687b      	ldr	r3, [r7, #4]
    f8a8:	2b00      	cmp	r3, #0
    f8aa:	d00d      	beq.n	f8c8 <_ZN8Dijkstra10trouverMinEi+0xd0>
        {
            minimum = this->tableauEtapes[i]->getDistance();
    f8ac:	697b      	ldr	r3, [r7, #20]
    f8ae:	681a      	ldr	r2, [r3, #0]
    f8b0:	6fbb      	ldr	r3, [r7, #120]
    f8b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f8b6:	4413      	add	r3, r2
    f8b8:	681b      	ldr	r3, [r3, #0]
    f8ba:	4618      	mov	r0, r3
    f8bc:	f000 faba 	bl	fe34 <_ZN5Etape11getDistanceEv>
    f8c0:	4603      	mov	r3, r0
    f8c2:	61bb      	str	r3, [r7, #24]
            numeroEtapeLaPlusProche = i;
    f8c4:	6fbb      	ldr	r3, [r7, #120]
    f8c6:	61fb      	str	r3, [r7, #28]
int Dijkstra::trouverMin(int classementEtapeMinimale)
{
    int minimum = -1;
    int numeroEtapeLaPlusProche = -1;

    for(int i = 0 ; i < this->nombreEtapes ; i++)
    f8c8:	6fbb      	ldr	r3, [r7, #120]
    f8ca:	f103 0301 	add.w	r3, r3, #1	; 0x1
    f8ce:	67bb      	str	r3, [r7, #120]
    f8d0:	697b      	ldr	r3, [r7, #20]
    f8d2:	685a      	ldr	r2, [r3, #4]
    f8d4:	6fbb      	ldr	r3, [r7, #120]
    f8d6:	429a      	cmp	r2, r3
    f8d8:	dc9d      	bgt.n	f816 <_ZN8Dijkstra10trouverMinEi+0x1e>
        }
    }
    /*TODO: WHAT THE HELL IS THAT ???*/


    Etape* etape1 = this->tableauEtapes[0];
    f8da:	697b      	ldr	r3, [r7, #20]
    f8dc:	681b      	ldr	r3, [r3, #0]
    f8de:	681b      	ldr	r3, [r3, #0]
    f8e0:	623b      	str	r3, [r7, #32]
    Etape* etape2 = this->tableauEtapes[1];
    f8e2:	697b      	ldr	r3, [r7, #20]
    f8e4:	681b      	ldr	r3, [r3, #0]
    f8e6:	f103 0304 	add.w	r3, r3, #4	; 0x4
    f8ea:	681b      	ldr	r3, [r3, #0]
    f8ec:	627b      	str	r3, [r7, #36]
    Etape* etape3 = this->tableauEtapes[2];
    f8ee:	697b      	ldr	r3, [r7, #20]
    f8f0:	681b      	ldr	r3, [r3, #0]
    f8f2:	f103 0308 	add.w	r3, r3, #8	; 0x8
    f8f6:	681b      	ldr	r3, [r3, #0]
    f8f8:	62bb      	str	r3, [r7, #40]
    Etape* etape4 = this->tableauEtapes[3];
    f8fa:	697b      	ldr	r3, [r7, #20]
    f8fc:	681b      	ldr	r3, [r3, #0]
    f8fe:	f103 030c 	add.w	r3, r3, #12	; 0xc
    f902:	681b      	ldr	r3, [r3, #0]
    f904:	62fb      	str	r3, [r7, #44]
    Etape* etape5 = this->tableauEtapes[4];
    f906:	697b      	ldr	r3, [r7, #20]
    f908:	681b      	ldr	r3, [r3, #0]
    f90a:	f103 0310 	add.w	r3, r3, #16	; 0x10
    f90e:	681b      	ldr	r3, [r3, #0]
    f910:	633b      	str	r3, [r7, #48]
    Etape* etape6 = this->tableauEtapes[5];
    f912:	697b      	ldr	r3, [r7, #20]
    f914:	681b      	ldr	r3, [r3, #0]
    f916:	f103 0314 	add.w	r3, r3, #20	; 0x14
    f91a:	681b      	ldr	r3, [r3, #0]
    f91c:	637b      	str	r3, [r7, #52]
    Etape* etape7 = this->tableauEtapes[6];
    f91e:	697b      	ldr	r3, [r7, #20]
    f920:	681b      	ldr	r3, [r3, #0]
    f922:	f103 0318 	add.w	r3, r3, #24	; 0x18
    f926:	681b      	ldr	r3, [r3, #0]
    f928:	63bb      	str	r3, [r7, #56]
    Etape* etape8 = this->tableauEtapes[7];
    f92a:	697b      	ldr	r3, [r7, #20]
    f92c:	681b      	ldr	r3, [r3, #0]
    f92e:	f103 031c 	add.w	r3, r3, #28	; 0x1c
    f932:	681b      	ldr	r3, [r3, #0]
    f934:	63fb      	str	r3, [r7, #60]
    Etape* etape9 = this->tableauEtapes[8];
    f936:	697b      	ldr	r3, [r7, #20]
    f938:	681b      	ldr	r3, [r3, #0]
    f93a:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f93e:	681b      	ldr	r3, [r3, #0]
    f940:	643b      	str	r3, [r7, #64]
    Etape* etape10 = this->tableauEtapes[9];
    f942:	697b      	ldr	r3, [r7, #20]
    f944:	681b      	ldr	r3, [r3, #0]
    f946:	f103 0324 	add.w	r3, r3, #36	; 0x24
    f94a:	681b      	ldr	r3, [r3, #0]
    f94c:	647b      	str	r3, [r7, #68]
    Etape* etape11 = this->tableauEtapes[10];
    f94e:	697b      	ldr	r3, [r7, #20]
    f950:	681b      	ldr	r3, [r3, #0]
    f952:	f103 0328 	add.w	r3, r3, #40	; 0x28
    f956:	681b      	ldr	r3, [r3, #0]
    f958:	64bb      	str	r3, [r7, #72]
    Etape* etape12 = this->tableauEtapes[11];
    f95a:	697b      	ldr	r3, [r7, #20]
    f95c:	681b      	ldr	r3, [r3, #0]
    f95e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
    f962:	681b      	ldr	r3, [r3, #0]
    f964:	64fb      	str	r3, [r7, #76]
    Etape* etape13 = this->tableauEtapes[12];
    f966:	697b      	ldr	r3, [r7, #20]
    f968:	681b      	ldr	r3, [r3, #0]
    f96a:	f103 0330 	add.w	r3, r3, #48	; 0x30
    f96e:	681b      	ldr	r3, [r3, #0]
    f970:	653b      	str	r3, [r7, #80]
    Etape* etape14 = this->tableauEtapes[13];
    f972:	697b      	ldr	r3, [r7, #20]
    f974:	681b      	ldr	r3, [r3, #0]
    f976:	f103 0334 	add.w	r3, r3, #52	; 0x34
    f97a:	681b      	ldr	r3, [r3, #0]
    f97c:	657b      	str	r3, [r7, #84]
    Etape* etape15 = this->tableauEtapes[14];
    f97e:	697b      	ldr	r3, [r7, #20]
    f980:	681b      	ldr	r3, [r3, #0]
    f982:	f103 0338 	add.w	r3, r3, #56	; 0x38
    f986:	681b      	ldr	r3, [r3, #0]
    f988:	65bb      	str	r3, [r7, #88]
    Etape* etape16 = this->tableauEtapes[15];
    f98a:	697b      	ldr	r3, [r7, #20]
    f98c:	681b      	ldr	r3, [r3, #0]
    f98e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
    f992:	681b      	ldr	r3, [r3, #0]
    f994:	65fb      	str	r3, [r7, #92]
    Etape* etape17 = this->tableauEtapes[16];
    f996:	697b      	ldr	r3, [r7, #20]
    f998:	681b      	ldr	r3, [r3, #0]
    f99a:	f103 0340 	add.w	r3, r3, #64	; 0x40
    f99e:	681b      	ldr	r3, [r3, #0]
    f9a0:	663b      	str	r3, [r7, #96]
    Etape* etape18 = this->tableauEtapes[17];
    f9a2:	697b      	ldr	r3, [r7, #20]
    f9a4:	681b      	ldr	r3, [r3, #0]
    f9a6:	f103 0344 	add.w	r3, r3, #68	; 0x44
    f9aa:	681b      	ldr	r3, [r3, #0]
    f9ac:	667b      	str	r3, [r7, #100]
    Etape* etape19 = this->tableauEtapes[18];
    f9ae:	697b      	ldr	r3, [r7, #20]
    f9b0:	681b      	ldr	r3, [r3, #0]
    f9b2:	f103 0348 	add.w	r3, r3, #72	; 0x48
    f9b6:	681b      	ldr	r3, [r3, #0]
    f9b8:	66bb      	str	r3, [r7, #104]
    Etape* etape20 = this->tableauEtapes[19];
    f9ba:	697b      	ldr	r3, [r7, #20]
    f9bc:	681b      	ldr	r3, [r3, #0]
    f9be:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    f9c2:	681b      	ldr	r3, [r3, #0]
    f9c4:	66fb      	str	r3, [r7, #108]
    Etape* etape21 = this->tableauEtapes[20];
    f9c6:	697b      	ldr	r3, [r7, #20]
    f9c8:	681b      	ldr	r3, [r3, #0]
    f9ca:	f103 0350 	add.w	r3, r3, #80	; 0x50
    f9ce:	681b      	ldr	r3, [r3, #0]
    f9d0:	673b      	str	r3, [r7, #112]
    Etape* etape22= this->tableauEtapes[21];
    f9d2:	697b      	ldr	r3, [r7, #20]
    f9d4:	681b      	ldr	r3, [r3, #0]
    f9d6:	f103 0354 	add.w	r3, r3, #84	; 0x54
    f9da:	681b      	ldr	r3, [r3, #0]
    f9dc:	677b      	str	r3, [r7, #116]
    //Si on ne trouve pas d'étape la plus proche, alors c'est qu'on est coincé par les autres robots.
    //Il faut donc faire des allers-retours entre les différentes étapes possibles.
    //Pour cela, on change le status des étapes "robot vu" à "point de passage", puis relancer une passe de Dijkstra (récursion powa!!!).
    if(numeroEtapeLaPlusProche == -1)
    f9de:	69fb      	ldr	r3, [r7, #28]
    f9e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f9e4:	f040 80a9 	bne.w	fb3a <_ZN8Dijkstra10trouverMinEi+0x342>
    {
        //On check si on a encore des points à marquer dans la zone ou on est confiné
        bool onEstCoinceDansUnEndroitPourri = true;
    f9e8:	f04f 0301 	mov.w	r3, #1	; 0x1
    f9ec:	f887 307f 	strb.w	r3, [r7, #127]
        for(int i = 0 ; i < this->nombreEtapes ; i++)
    f9f0:	f04f 0300 	mov.w	r3, #0	; 0x0
    f9f4:	f8c7 3080 	str.w	r3, [r7, #128]
    f9f8:	e057      	b.n	faaa <_ZN8Dijkstra10trouverMinEi+0x2b2>
        {
            if(this->etapeRapporte(this->tableauEtapes[i]) && (!(this->tableauEtapes[i]->aEviter())) && this->tableauEtapes[i]->getDistance() != -1 && this->tableauEtapes[i]->getState() != -2)
    f9fa:	697b      	ldr	r3, [r7, #20]
    f9fc:	681a      	ldr	r2, [r3, #0]
    f9fe:	f8d7 3080 	ldr.w	r3, [r7, #128]
    fa02:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fa06:	4413      	add	r3, r2
    fa08:	681b      	ldr	r3, [r3, #0]
    fa0a:	6978      	ldr	r0, [r7, #20]
    fa0c:	4619      	mov	r1, r3
    fa0e:	f7ff fdb3 	bl	f578 <_ZN8Dijkstra13etapeRapporteEP5Etape>
    fa12:	4603      	mov	r3, r0
    fa14:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    fa18:	b2db      	uxtb	r3, r3
    fa1a:	2b00      	cmp	r3, #0
    fa1c:	d135      	bne.n	fa8a <_ZN8Dijkstra10trouverMinEi+0x292>
    fa1e:	697b      	ldr	r3, [r7, #20]
    fa20:	681a      	ldr	r2, [r3, #0]
    fa22:	f8d7 3080 	ldr.w	r3, [r7, #128]
    fa26:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fa2a:	4413      	add	r3, r2
    fa2c:	681b      	ldr	r3, [r3, #0]
    fa2e:	4618      	mov	r0, r3
    fa30:	f000 fa68 	bl	ff04 <_ZN5Etape7aEviterEv>
    fa34:	4603      	mov	r3, r0
    fa36:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    fa3a:	b2db      	uxtb	r3, r3
    fa3c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    fa40:	b2db      	uxtb	r3, r3
    fa42:	2b00      	cmp	r3, #0
    fa44:	d121      	bne.n	fa8a <_ZN8Dijkstra10trouverMinEi+0x292>
    fa46:	697b      	ldr	r3, [r7, #20]
    fa48:	681a      	ldr	r2, [r3, #0]
    fa4a:	f8d7 3080 	ldr.w	r3, [r7, #128]
    fa4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fa52:	4413      	add	r3, r2
    fa54:	681b      	ldr	r3, [r3, #0]
    fa56:	4618      	mov	r0, r3
    fa58:	f000 f9ec 	bl	fe34 <_ZN5Etape11getDistanceEv>
    fa5c:	4603      	mov	r3, r0
    fa5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fa62:	d012      	beq.n	fa8a <_ZN8Dijkstra10trouverMinEi+0x292>
    fa64:	697b      	ldr	r3, [r7, #20]
    fa66:	681a      	ldr	r2, [r3, #0]
    fa68:	f8d7 3080 	ldr.w	r3, [r7, #128]
    fa6c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fa70:	4413      	add	r3, r2
    fa72:	681b      	ldr	r3, [r3, #0]
    fa74:	4618      	mov	r0, r3
    fa76:	f000 f9c3 	bl	fe00 <_ZN5Etape8getStateEv>
    fa7a:	4603      	mov	r3, r0
    fa7c:	f113 0f02 	cmn.w	r3, #2	; 0x2
    fa80:	d003      	beq.n	fa8a <_ZN8Dijkstra10trouverMinEi+0x292>
    fa82:	f04f 0301 	mov.w	r3, #1	; 0x1
    fa86:	60bb      	str	r3, [r7, #8]
    fa88:	e002      	b.n	fa90 <_ZN8Dijkstra10trouverMinEi+0x298>
    fa8a:	f04f 0300 	mov.w	r3, #0	; 0x0
    fa8e:	60bb      	str	r3, [r7, #8]
    fa90:	68bb      	ldr	r3, [r7, #8]
    fa92:	2b00      	cmp	r3, #0
    fa94:	d003      	beq.n	fa9e <_ZN8Dijkstra10trouverMinEi+0x2a6>
            {
                onEstCoinceDansUnEndroitPourri = false;
    fa96:	f04f 0300 	mov.w	r3, #0	; 0x0
    fa9a:	f887 307f 	strb.w	r3, [r7, #127]
    //Pour cela, on change le status des étapes "robot vu" à "point de passage", puis relancer une passe de Dijkstra (récursion powa!!!).
    if(numeroEtapeLaPlusProche == -1)
    {
        //On check si on a encore des points à marquer dans la zone ou on est confiné
        bool onEstCoinceDansUnEndroitPourri = true;
        for(int i = 0 ; i < this->nombreEtapes ; i++)
    fa9e:	f8d7 3080 	ldr.w	r3, [r7, #128]
    faa2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    faa6:	f8c7 3080 	str.w	r3, [r7, #128]
    faaa:	697b      	ldr	r3, [r7, #20]
    faac:	685a      	ldr	r2, [r3, #4]
    faae:	f8d7 3080 	ldr.w	r3, [r7, #128]
    fab2:	429a      	cmp	r2, r3
    fab4:	dca1      	bgt.n	f9fa <_ZN8Dijkstra10trouverMinEi+0x202>
            {
                onEstCoinceDansUnEndroitPourri = false;
            }
        }
        //Sinon on supprime les barrières en oubliant qu'on a vu des robots
        if(onEstCoinceDansUnEndroitPourri)
    fab6:	f897 307f 	ldrb.w	r3, [r7, #127]
    faba:	2b00      	cmp	r3, #0
    fabc:	d039      	beq.n	fb32 <_ZN8Dijkstra10trouverMinEi+0x33a>
        {
            for(int i = 0 ; i < this->nombreEtapes ; i++)
    fabe:	f04f 0300 	mov.w	r3, #0	; 0x0
    fac2:	f8c7 3084 	str.w	r3, [r7, #132]
    fac6:	e027      	b.n	fb18 <_ZN8Dijkstra10trouverMinEi+0x320>
            {
                //On reset numeroEtapeEnCours à l'étape où on est actuellement
                if(this->tableauEtapes[i]->getDistance() == 0)
    fac8:	697b      	ldr	r3, [r7, #20]
    faca:	681a      	ldr	r2, [r3, #0]
    facc:	f8d7 3084 	ldr.w	r3, [r7, #132]
    fad0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fad4:	4413      	add	r3, r2
    fad6:	681b      	ldr	r3, [r3, #0]
    fad8:	4618      	mov	r0, r3
    fada:	f000 f9ab 	bl	fe34 <_ZN5Etape11getDistanceEv>
    fade:	4603      	mov	r3, r0
    fae0:	2b00      	cmp	r3, #0
    fae2:	bf14      	ite	ne
    fae4:	2300      	movne	r3, #0
    fae6:	2301      	moveq	r3, #1
    fae8:	b2db      	uxtb	r3, r3
    faea:	2b00      	cmp	r3, #0
    faec:	d003      	beq.n	faf6 <_ZN8Dijkstra10trouverMinEi+0x2fe>
                {
                    this->numeroEtapeCourante = i; //-1?
    faee:	697a      	ldr	r2, [r7, #20]
    faf0:	f8d7 3084 	ldr.w	r3, [r7, #132]
    faf4:	6093      	str	r3, [r2, #8]
                }

                this->tableauEtapes[i]->oublieRobotVu();
    faf6:	697b      	ldr	r3, [r7, #20]
    faf8:	681a      	ldr	r2, [r3, #0]
    fafa:	f8d7 3084 	ldr.w	r3, [r7, #132]
    fafe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fb02:	4413      	add	r3, r2
    fb04:	681b      	ldr	r3, [r3, #0]
    fb06:	4618      	mov	r0, r3
    fb08:	f000 fa30 	bl	ff6c <_ZN5Etape13oublieRobotVuEv>
            }
        }
        //Sinon on supprime les barrières en oubliant qu'on a vu des robots
        if(onEstCoinceDansUnEndroitPourri)
        {
            for(int i = 0 ; i < this->nombreEtapes ; i++)
    fb0c:	f8d7 3084 	ldr.w	r3, [r7, #132]
    fb10:	f103 0301 	add.w	r3, r3, #1	; 0x1
    fb14:	f8c7 3084 	str.w	r3, [r7, #132]
    fb18:	697b      	ldr	r3, [r7, #20]
    fb1a:	685a      	ldr	r2, [r3, #4]
    fb1c:	f8d7 3084 	ldr.w	r3, [r7, #132]
    fb20:	429a      	cmp	r2, r3
    fb22:	dcd1      	bgt.n	fac8 <_ZN8Dijkstra10trouverMinEi+0x2d0>
                }

                this->tableauEtapes[i]->oublieRobotVu();
            }

            this->run();
    fb24:	6978      	ldr	r0, [r7, #20]
    fb26:	f000 f81b 	bl	fb60 <_ZN8Dijkstra3runEv>
            return -1;
    fb2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fb2e:	60fb      	str	r3, [r7, #12]
    fb30:	e010      	b.n	fb54 <_ZN8Dijkstra10trouverMinEi+0x35c>
        }
        else
        {
            return -2;
    fb32:	f06f 0301 	mvn.w	r3, #1	; 0x1
    fb36:	60fb      	str	r3, [r7, #12]
    fb38:	e00c      	b.n	fb54 <_ZN8Dijkstra10trouverMinEi+0x35c>
        }
    }
    this->tableauEtapes[numeroEtapeLaPlusProche]->setState(classementEtapeMinimale);
    fb3a:	697b      	ldr	r3, [r7, #20]
    fb3c:	681a      	ldr	r2, [r3, #0]
    fb3e:	69fb      	ldr	r3, [r7, #28]
    fb40:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fb44:	4413      	add	r3, r2
    fb46:	681b      	ldr	r3, [r3, #0]
    fb48:	4618      	mov	r0, r3
    fb4a:	6939      	ldr	r1, [r7, #16]
    fb4c:	f000 f964 	bl	fe18 <_ZN5Etape8setStateEi>
    return numeroEtapeLaPlusProche;
    fb50:	69fb      	ldr	r3, [r7, #28]
    fb52:	60fb      	str	r3, [r7, #12]
    fb54:	68fb      	ldr	r3, [r7, #12]
}
    fb56:	4618      	mov	r0, r3
    fb58:	f107 0788 	add.w	r7, r7, #136	; 0x88
    fb5c:	46bd      	mov	sp, r7
    fb5e:	bd80      	pop	{r7, pc}

0000fb60 <_ZN8Dijkstra3runEv>:
{
    this->numeroEtapeCourante = numeroEtapeCourante;
}

//Calcul des distances de toutes les étapes par rapport à l'étape en cours (étape origine)
int Dijkstra::run()
    fb60:	b580      	push	{r7, lr}
    fb62:	b084      	sub	sp, #16
    fb64:	af00      	add	r7, sp, #0
    fb66:	6078      	str	r0, [r7, #4]
    else
        return 0;*/



    int min = -2;
    fb68:	f06f 0301 	mvn.w	r3, #1	; 0x1
    fb6c:	60bb      	str	r3, [r7, #8]
    initialiser();
    fb6e:	6878      	ldr	r0, [r7, #4]
    fb70:	f7ff fdde 	bl	f730 <_ZN8Dijkstra11initialiserEv>

    mettreAJourVoisins(this->numeroEtapeCourante);
    fb74:	687b      	ldr	r3, [r7, #4]
    fb76:	689b      	ldr	r3, [r3, #8]
    fb78:	6878      	ldr	r0, [r7, #4]
    fb7a:	4619      	mov	r1, r3
    fb7c:	f7ff fd34 	bl	f5e8 <_ZN8Dijkstra18mettreAJourVoisinsEi>

    for(int i = 0 ; i < this->nombreEtapes-2 ; i++)
    fb80:	f04f 0300 	mov.w	r3, #0	; 0x0
    fb84:	60fb      	str	r3, [r7, #12]
    fb86:	e025      	b.n	fbd4 <_ZN8Dijkstra3runEv+0x74>
    {
        min = trouverMin(i+1);
    fb88:	68fb      	ldr	r3, [r7, #12]
    fb8a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    fb8e:	6878      	ldr	r0, [r7, #4]
    fb90:	4619      	mov	r1, r3
    fb92:	f7ff fe31 	bl	f7f8 <_ZN8Dijkstra10trouverMinEi>
    fb96:	4603      	mov	r3, r0
    fb98:	60bb      	str	r3, [r7, #8]
        // Si min vaut -1, c'est que le robot était coincé, et donc qu'il a fallut réinitialiser la recherche
        // Donc on arrete la recherche en cours, une nouvelle a été lancée
        if(min == -1)
    fb9a:	68bb      	ldr	r3, [r7, #8]
    fb9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fba0:	d103      	bne.n	fbaa <_ZN8Dijkstra3runEv+0x4a>
        {
            return -1;
    fba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fba6:	603b      	str	r3, [r7, #0]
    fba8:	e01e      	b.n	fbe8 <_ZN8Dijkstra3runEv+0x88>
        }
        if(min == -2)
    fbaa:	68bb      	ldr	r3, [r7, #8]
    fbac:	f113 0f02 	cmn.w	r3, #2	; 0x2
    fbb0:	d103      	bne.n	fbba <_ZN8Dijkstra3runEv+0x5a>
        {
            return 0;
    fbb2:	f04f 0300 	mov.w	r3, #0	; 0x0
    fbb6:	603b      	str	r3, [r7, #0]
    fbb8:	e016      	b.n	fbe8 <_ZN8Dijkstra3runEv+0x88>
        }
        this->numeroEtapeCourante = min;
    fbba:	687a      	ldr	r2, [r7, #4]
    fbbc:	68bb      	ldr	r3, [r7, #8]
    fbbe:	6093      	str	r3, [r2, #8]
        mettreAJourVoisins(this->numeroEtapeCourante);
    fbc0:	687b      	ldr	r3, [r7, #4]
    fbc2:	689b      	ldr	r3, [r3, #8]
    fbc4:	6878      	ldr	r0, [r7, #4]
    fbc6:	4619      	mov	r1, r3
    fbc8:	f7ff fd0e 	bl	f5e8 <_ZN8Dijkstra18mettreAJourVoisinsEi>
    int min = -2;
    initialiser();

    mettreAJourVoisins(this->numeroEtapeCourante);

    for(int i = 0 ; i < this->nombreEtapes-2 ; i++)
    fbcc:	68fb      	ldr	r3, [r7, #12]
    fbce:	f103 0301 	add.w	r3, r3, #1	; 0x1
    fbd2:	60fb      	str	r3, [r7, #12]
    fbd4:	687b      	ldr	r3, [r7, #4]
    fbd6:	685b      	ldr	r3, [r3, #4]
    fbd8:	f1a3 0202 	sub.w	r2, r3, #2	; 0x2
    fbdc:	68fb      	ldr	r3, [r7, #12]
    fbde:	429a      	cmp	r2, r3
    fbe0:	dcd2      	bgt.n	fb88 <_ZN8Dijkstra3runEv+0x28>
            return 0;
        }
        this->numeroEtapeCourante = min;
        mettreAJourVoisins(this->numeroEtapeCourante);
    }
    return 0;
    fbe2:	f04f 0300 	mov.w	r3, #0	; 0x0
    fbe6:	603b      	str	r3, [r7, #0]
    fbe8:	683b      	ldr	r3, [r7, #0]
}
    fbea:	4618      	mov	r0, r3
    fbec:	f107 0710 	add.w	r7, r7, #16	; 0x10
    fbf0:	46bd      	mov	sp, r7
    fbf2:	bd80      	pop	{r7, pc}

0000fbf4 <_ZN8Dijkstra7miniRunEi>:

int Dijkstra::miniRun(int step)
    fbf4:	b580      	push	{r7, lr}
    fbf6:	b086      	sub	sp, #24
    fbf8:	af00      	add	r7, sp, #0
    fbfa:	60f8      	str	r0, [r7, #12]
    fbfc:	60b9      	str	r1, [r7, #8]
{
    if (step == 0)
    fbfe:	68bb      	ldr	r3, [r7, #8]
    fc00:	2b00      	cmp	r3, #0
    fc02:	d103      	bne.n	fc0c <_ZN8Dijkstra7miniRunEi+0x18>
    {
        initialiser();
    fc04:	68f8      	ldr	r0, [r7, #12]
    fc06:	f7ff fd93 	bl	f730 <_ZN8Dijkstra11initialiserEv>
    fc0a:	e02d      	b.n	fc68 <_ZN8Dijkstra7miniRunEi+0x74>
    }
    else if(step < this->nombreEtapes-2)
    fc0c:	68fb      	ldr	r3, [r7, #12]
    fc0e:	685b      	ldr	r3, [r3, #4]
    fc10:	f1a3 0202 	sub.w	r2, r3, #2	; 0x2
    fc14:	68bb      	ldr	r3, [r7, #8]
    fc16:	429a      	cmp	r2, r3
    fc18:	dd22      	ble.n	fc60 <_ZN8Dijkstra7miniRunEi+0x6c>
    {
        int min = trouverMin(step+1);
    fc1a:	68bb      	ldr	r3, [r7, #8]
    fc1c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    fc20:	68f8      	ldr	r0, [r7, #12]
    fc22:	4619      	mov	r1, r3
    fc24:	f7ff fde8 	bl	f7f8 <_ZN8Dijkstra10trouverMinEi>
    fc28:	4603      	mov	r3, r0
    fc2a:	617b      	str	r3, [r7, #20]
        // Si min vaut -1, c'est que le robot était coincé, et donc qu'il a fallut réinitialiser la recherche
        // Donc on arrete la recherche en cours, une nouvelle a été lancée
        if(min == -1)
    fc2c:	697b      	ldr	r3, [r7, #20]
    fc2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fc32:	d103      	bne.n	fc3c <_ZN8Dijkstra7miniRunEi+0x48>
        {
            return -1;
    fc34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fc38:	607b      	str	r3, [r7, #4]
    fc3a:	e018      	b.n	fc6e <_ZN8Dijkstra7miniRunEi+0x7a>
        }
        if(min == -2)
    fc3c:	697b      	ldr	r3, [r7, #20]
    fc3e:	f113 0f02 	cmn.w	r3, #2	; 0x2
    fc42:	d103      	bne.n	fc4c <_ZN8Dijkstra7miniRunEi+0x58>
        {
            return 0;
    fc44:	f04f 0300 	mov.w	r3, #0	; 0x0
    fc48:	607b      	str	r3, [r7, #4]
    fc4a:	e010      	b.n	fc6e <_ZN8Dijkstra7miniRunEi+0x7a>
        }
        this->numeroEtapeCourante = min;
    fc4c:	68fa      	ldr	r2, [r7, #12]
    fc4e:	697b      	ldr	r3, [r7, #20]
    fc50:	6093      	str	r3, [r2, #8]
        mettreAJourVoisins(this->numeroEtapeCourante);
    fc52:	68fb      	ldr	r3, [r7, #12]
    fc54:	689b      	ldr	r3, [r3, #8]
    fc56:	68f8      	ldr	r0, [r7, #12]
    fc58:	4619      	mov	r1, r3
    fc5a:	f7ff fcc5 	bl	f5e8 <_ZN8Dijkstra18mettreAJourVoisinsEi>
    fc5e:	e003      	b.n	fc68 <_ZN8Dijkstra7miniRunEi+0x74>
    }
    else
    {
        return 0;
    fc60:	f04f 0300 	mov.w	r3, #0	; 0x0
    fc64:	607b      	str	r3, [r7, #4]
    fc66:	e002      	b.n	fc6e <_ZN8Dijkstra7miniRunEi+0x7a>
    }
    return -2;
    fc68:	f06f 0301 	mvn.w	r3, #1	; 0x1
    fc6c:	607b      	str	r3, [r7, #4]
    fc6e:	687b      	ldr	r3, [r7, #4]
        }
        this->numeroEtapeCourante = min;
        mettreAJourVoisins(this->numeroEtapeCourante);
    }
    return 0;*/
}
    fc70:	4618      	mov	r0, r3
    fc72:	f107 0718 	add.w	r7, r7, #24	; 0x18
    fc76:	46bd      	mov	sp, r7
    fc78:	bd80      	pop	{r7, pc}
    fc7a:	46c0      	nop			(mov r8, r8)

0000fc7c <_ZN8Dijkstra20calculDistanceDirectEP5EtapeS1_>:
Etape* Dijkstra::getEtapeCourante()
{
    return tableauEtapes[this->numeroEtapeCourante];
}

int Dijkstra::calculDistanceDirect(Etape* etapeDepart, Etape* etapeArrivee)
    fc7c:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
    fc80:	b08b      	sub	sp, #44
    fc82:	af00      	add	r7, sp, #0
    fc84:	6078      	str	r0, [r7, #4]
    fc86:	6039      	str	r1, [r7, #0]
    //Une solution, vu que le STM32-H405 a plein de mémoire, serait de pré-calculer les distances, et de les stocker.
    //Cela permettrait aussi d'ajuster certaines distances si besoin, pour préférer certains passages à d'autres
    return sqrt(
                    pow(fabs((int) etapeDepart->getPosition().getX()-etapeArrivee->getPosition().getX()),2)+
                    pow(fabs((int) etapeDepart->getPosition().getY()-etapeArrivee->getPosition().getY()),2)
                    );
    fc88:	f107 0308 	add.w	r3, r7, #8	; 0x8
    fc8c:	4618      	mov	r0, r3
    fc8e:	6879      	ldr	r1, [r7, #4]
    fc90:	f000 f8a2 	bl	fdd8 <_ZN5Etape11getPositionEv>
    fc94:	f107 0308 	add.w	r3, r7, #8	; 0x8
    fc98:	4618      	mov	r0, r3
    fc9a:	f7fe fc43 	bl	e524 <_ZNK8Position4getXEv>
    fc9e:	4603      	mov	r3, r0
    fca0:	4618      	mov	r0, r3
    fca2:	f00b f867 	bl	1ad74 <__aeabi_f2iz>
    fca6:	4603      	mov	r3, r0
    fca8:	4618      	mov	r0, r3
    fcaa:	f00a fe4b 	bl	1a944 <__aeabi_i2f>
    fcae:	4604      	mov	r4, r0
    fcb0:	f107 0310 	add.w	r3, r7, #16	; 0x10
    fcb4:	4618      	mov	r0, r3
    fcb6:	6839      	ldr	r1, [r7, #0]
    fcb8:	f000 f88e 	bl	fdd8 <_ZN5Etape11getPositionEv>
    fcbc:	f107 0310 	add.w	r3, r7, #16	; 0x10
    fcc0:	4618      	mov	r0, r3
    fcc2:	f7fe fc2f 	bl	e524 <_ZNK8Position4getXEv>
    fcc6:	4603      	mov	r3, r0
    fcc8:	4620      	mov	r0, r4
    fcca:	4619      	mov	r1, r3
    fccc:	f00a fd84 	bl	1a7d8 <__aeabi_fsub>
    fcd0:	4603      	mov	r3, r0
    fcd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    fcd6:	4618      	mov	r0, r3
    fcd8:	f00a fa16 	bl	1a108 <__aeabi_f2d>
    fcdc:	4602      	mov	r2, r0
    fcde:	460b      	mov	r3, r1
    fce0:	4610      	mov	r0, r2
    fce2:	4619      	mov	r1, r3
    fce4:	f00a fa64 	bl	1a1b0 <__aeabi_dmul>
    fce8:	4602      	mov	r2, r0
    fcea:	460b      	mov	r3, r1
    fcec:	4690      	mov	r8, r2
    fcee:	4699      	mov	r9, r3
    fcf0:	f107 0318 	add.w	r3, r7, #24	; 0x18
    fcf4:	4618      	mov	r0, r3
    fcf6:	6879      	ldr	r1, [r7, #4]
    fcf8:	f000 f86e 	bl	fdd8 <_ZN5Etape11getPositionEv>
    fcfc:	f107 0318 	add.w	r3, r7, #24	; 0x18
    fd00:	4618      	mov	r0, r3
    fd02:	f7fe fc1b 	bl	e53c <_ZNK8Position4getYEv>
    fd06:	4603      	mov	r3, r0
    fd08:	4618      	mov	r0, r3
    fd0a:	f00b f833 	bl	1ad74 <__aeabi_f2iz>
    fd0e:	4603      	mov	r3, r0
    fd10:	4618      	mov	r0, r3
    fd12:	f00a fe17 	bl	1a944 <__aeabi_i2f>
    fd16:	4604      	mov	r4, r0
    fd18:	f107 0320 	add.w	r3, r7, #32	; 0x20
    fd1c:	4618      	mov	r0, r3
    fd1e:	6839      	ldr	r1, [r7, #0]
    fd20:	f000 f85a 	bl	fdd8 <_ZN5Etape11getPositionEv>
    fd24:	f107 0320 	add.w	r3, r7, #32	; 0x20
    fd28:	4618      	mov	r0, r3
    fd2a:	f7fe fc07 	bl	e53c <_ZNK8Position4getYEv>
    fd2e:	4603      	mov	r3, r0
    fd30:	4620      	mov	r0, r4
    fd32:	4619      	mov	r1, r3
    fd34:	f00a fd50 	bl	1a7d8 <__aeabi_fsub>
    fd38:	4603      	mov	r3, r0
    fd3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    fd3e:	4618      	mov	r0, r3
    fd40:	f00a f9e2 	bl	1a108 <__aeabi_f2d>
    fd44:	4602      	mov	r2, r0
    fd46:	460b      	mov	r3, r1
    fd48:	4610      	mov	r0, r2
    fd4a:	4619      	mov	r1, r3
    fd4c:	f00a fa30 	bl	1a1b0 <__aeabi_dmul>
    fd50:	4602      	mov	r2, r0
    fd52:	460b      	mov	r3, r1
    fd54:	4640      	mov	r0, r8
    fd56:	4649      	mov	r1, r9
    fd58:	f00a f878 	bl	19e4c <__adddf3>
    fd5c:	4602      	mov	r2, r0
    fd5e:	460b      	mov	r3, r1
    fd60:	4610      	mov	r0, r2
    fd62:	4619      	mov	r1, r3
    fd64:	f00e fb0c 	bl	1e380 <sqrt>
    fd68:	4602      	mov	r2, r0
    fd6a:	460b      	mov	r3, r1
    fd6c:	4610      	mov	r0, r2
    fd6e:	4619      	mov	r1, r3
    fd70:	f00a fcb6 	bl	1a6e0 <__aeabi_d2iz>
    fd74:	4603      	mov	r3, r0
}
    fd76:	4618      	mov	r0, r3
    fd78:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    fd7c:	46bd      	mov	sp, r7
    fd7e:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
    fd82:	46c0      	nop			(mov r8, r8)

0000fd84 <_ZN5Etape8getChildEi>:
    tableauEtapesTotal[numero] = this;
}

Etape::Etape(){}

Etape* Etape::getChild(int nb){
    fd84:	b480      	push	{r7}
    fd86:	b083      	sub	sp, #12
    fd88:	af00      	add	r7, sp, #0
    fd8a:	6078      	str	r0, [r7, #4]
    fd8c:	6039      	str	r1, [r7, #0]
    return this->children[nb];
    fd8e:	687b      	ldr	r3, [r7, #4]
    fd90:	681a      	ldr	r2, [r3, #0]
    fd92:	683b      	ldr	r3, [r7, #0]
    fd94:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fd98:	4413      	add	r3, r2
    fd9a:	681b      	ldr	r3, [r3, #0]
}
    fd9c:	4618      	mov	r0, r3
    fd9e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fda2:	46bd      	mov	sp, r7
    fda4:	bc80      	pop	{r7}
    fda6:	4770      	bx	lr

0000fda8 <_ZN5Etape11getChildrenEv>:

Etape** Etape::getChildren(){
    fda8:	b480      	push	{r7}
    fdaa:	b083      	sub	sp, #12
    fdac:	af00      	add	r7, sp, #0
    fdae:	6078      	str	r0, [r7, #4]
    return this->children;
    fdb0:	687b      	ldr	r3, [r7, #4]
    fdb2:	681b      	ldr	r3, [r3, #0]
}
    fdb4:	4618      	mov	r0, r3
    fdb6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fdba:	46bd      	mov	sp, r7
    fdbc:	bc80      	pop	{r7}
    fdbe:	4770      	bx	lr

0000fdc0 <_ZN5Etape9getParentEv>:

Etape* Etape::getParent(){
    fdc0:	b480      	push	{r7}
    fdc2:	b083      	sub	sp, #12
    fdc4:	af00      	add	r7, sp, #0
    fdc6:	6078      	str	r0, [r7, #4]
    return this->parent;
    fdc8:	687b      	ldr	r3, [r7, #4]
    fdca:	685b      	ldr	r3, [r3, #4]
}
    fdcc:	4618      	mov	r0, r3
    fdce:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fdd2:	46bd      	mov	sp, r7
    fdd4:	bc80      	pop	{r7}
    fdd6:	4770      	bx	lr

0000fdd8 <_ZN5Etape11getPositionEv>:

Position Etape::getPosition()
    fdd8:	b480      	push	{r7}
    fdda:	b083      	sub	sp, #12
    fddc:	af00      	add	r7, sp, #0
    fdde:	4684      	mov	ip, r0
    fde0:	6079      	str	r1, [r7, #4]
{
    return this->position;
    fde2:	687b      	ldr	r3, [r7, #4]
    fde4:	4662      	mov	r2, ip
    fde6:	f103 0308 	add.w	r3, r3, #8	; 0x8
    fdea:	e893 0003 	ldmia.w	r3, {r0, r1}
    fdee:	e882 0003 	stmia.w	r2, {r0, r1}
}
    fdf2:	4660      	mov	r0, ip
    fdf4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fdf8:	46bd      	mov	sp, r7
    fdfa:	bc80      	pop	{r7}
    fdfc:	4770      	bx	lr
    fdfe:	46c0      	nop			(mov r8, r8)

0000fe00 <_ZN5Etape8getStateEv>:

int Etape::getState(){
    fe00:	b480      	push	{r7}
    fe02:	b083      	sub	sp, #12
    fe04:	af00      	add	r7, sp, #0
    fe06:	6078      	str	r0, [r7, #4]
    return this->state;
    fe08:	687b      	ldr	r3, [r7, #4]
    fe0a:	691b      	ldr	r3, [r3, #16]
}
    fe0c:	4618      	mov	r0, r3
    fe0e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fe12:	46bd      	mov	sp, r7
    fe14:	bc80      	pop	{r7}
    fe16:	4770      	bx	lr

0000fe18 <_ZN5Etape8setStateEi>:

void Etape::setState(int state){
    fe18:	b480      	push	{r7}
    fe1a:	b083      	sub	sp, #12
    fe1c:	af00      	add	r7, sp, #0
    fe1e:	6078      	str	r0, [r7, #4]
    fe20:	6039      	str	r1, [r7, #0]
    this->state = state;
    fe22:	687a      	ldr	r2, [r7, #4]
    fe24:	683b      	ldr	r3, [r7, #0]
    fe26:	6113      	str	r3, [r2, #16]
}
    fe28:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fe2c:	46bd      	mov	sp, r7
    fe2e:	bc80      	pop	{r7}
    fe30:	4770      	bx	lr
    fe32:	46c0      	nop			(mov r8, r8)

0000fe34 <_ZN5Etape11getDistanceEv>:

int Etape::getDistance(){
    fe34:	b480      	push	{r7}
    fe36:	b083      	sub	sp, #12
    fe38:	af00      	add	r7, sp, #0
    fe3a:	6078      	str	r0, [r7, #4]
    return this->distance;
    fe3c:	687b      	ldr	r3, [r7, #4]
    fe3e:	695b      	ldr	r3, [r3, #20]
}
    fe40:	4618      	mov	r0, r3
    fe42:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fe46:	46bd      	mov	sp, r7
    fe48:	bc80      	pop	{r7}
    fe4a:	4770      	bx	lr

0000fe4c <_ZN5Etape11setDistanceEi>:

void Etape::setDistance(int distance){
    fe4c:	b480      	push	{r7}
    fe4e:	b083      	sub	sp, #12
    fe50:	af00      	add	r7, sp, #0
    fe52:	6078      	str	r0, [r7, #4]
    fe54:	6039      	str	r1, [r7, #0]
    this->distance = distance;
    fe56:	687a      	ldr	r2, [r7, #4]
    fe58:	683b      	ldr	r3, [r7, #0]
    fe5a:	6153      	str	r3, [r2, #20]
}
    fe5c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fe60:	46bd      	mov	sp, r7
    fe62:	bc80      	pop	{r7}
    fe64:	4770      	bx	lr
    fe66:	46c0      	nop			(mov r8, r8)

0000fe68 <_ZN5Etape9setParentEPS_>:

void Etape::setParent(Etape* parent){
    fe68:	b480      	push	{r7}
    fe6a:	b083      	sub	sp, #12
    fe6c:	af00      	add	r7, sp, #0
    fe6e:	6078      	str	r0, [r7, #4]
    fe70:	6039      	str	r1, [r7, #0]
    this->parent = parent;
    fe72:	687a      	ldr	r2, [r7, #4]
    fe74:	683b      	ldr	r3, [r7, #0]
    fe76:	6053      	str	r3, [r2, #4]
}
    fe78:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fe7c:	46bd      	mov	sp, r7
    fe7e:	bc80      	pop	{r7}
    fe80:	4770      	bx	lr
    fe82:	46c0      	nop			(mov r8, r8)

0000fe84 <_ZN5Etape13getNbChildrenEv>:

int Etape::getNbChildren(){
    fe84:	b480      	push	{r7}
    fe86:	b083      	sub	sp, #12
    fe88:	af00      	add	r7, sp, #0
    fe8a:	6078      	str	r0, [r7, #4]
    return this->nbChildren;
    fe8c:	687b      	ldr	r3, [r7, #4]
    fe8e:	69db      	ldr	r3, [r3, #28]
}
    fe90:	4618      	mov	r0, r3
    fe92:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fe96:	46bd      	mov	sp, r7
    fe98:	bc80      	pop	{r7}
    fe9a:	4770      	bx	lr

0000fe9c <_ZN5Etape11setChildrenEPPS_>:

void Etape::setChildren(Etape** children)
    fe9c:	b480      	push	{r7}
    fe9e:	b083      	sub	sp, #12
    fea0:	af00      	add	r7, sp, #0
    fea2:	6078      	str	r0, [r7, #4]
    fea4:	6039      	str	r1, [r7, #0]
{
    this->children = children;
    fea6:	687a      	ldr	r2, [r7, #4]
    fea8:	683b      	ldr	r3, [r7, #0]
    feaa:	6013      	str	r3, [r2, #0]
}
    feac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    feb0:	46bd      	mov	sp, r7
    feb2:	bc80      	pop	{r7}
    feb4:	4770      	bx	lr
    feb6:	46c0      	nop			(mov r8, r8)

0000feb8 <_ZN5Etape12getEtapeTypeEv>:

Etape::EtapeType Etape::getEtapeType()
    feb8:	b480      	push	{r7}
    feba:	b083      	sub	sp, #12
    febc:	af00      	add	r7, sp, #0
    febe:	6078      	str	r0, [r7, #4]
{
    return this->type;
    fec0:	687b      	ldr	r3, [r7, #4]
    fec2:	7e1b      	ldrb	r3, [r3, #24]
}
    fec4:	4618      	mov	r0, r3
    fec6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    feca:	46bd      	mov	sp, r7
    fecc:	bc80      	pop	{r7}
    fece:	4770      	bx	lr

0000fed0 <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>:

void Etape::setEtapeType(Etape::EtapeType type)
    fed0:	b480      	push	{r7}
    fed2:	b083      	sub	sp, #12
    fed4:	af00      	add	r7, sp, #0
    fed6:	6078      	str	r0, [r7, #4]
    fed8:	460b      	mov	r3, r1
    feda:	70fb      	strb	r3, [r7, #3]
{
    this->type = type;
    fedc:	687a      	ldr	r2, [r7, #4]
    fede:	78fb      	ldrb	r3, [r7, #3]
    fee0:	7613      	strb	r3, [r2, #24]
}
    fee2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fee6:	46bd      	mov	sp, r7
    fee8:	bc80      	pop	{r7}
    feea:	4770      	bx	lr

0000feec <_ZN5Etape9getNumeroEv>:
    {
        this->type = (EtapeType)(this->type + 20);
    }
}

int Etape::getNumero()
    feec:	b480      	push	{r7}
    feee:	b083      	sub	sp, #12
    fef0:	af00      	add	r7, sp, #0
    fef2:	6078      	str	r0, [r7, #4]
{
    return this->numero;
    fef4:	687b      	ldr	r3, [r7, #4]
    fef6:	6a1b      	ldr	r3, [r3, #32]
}
    fef8:	4618      	mov	r0, r3
    fefa:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fefe:	46bd      	mov	sp, r7
    ff00:	bc80      	pop	{r7}
    ff02:	4770      	bx	lr

0000ff04 <_ZN5Etape7aEviterEv>:

bool Etape::aEviter()
    ff04:	b580      	push	{r7, lr}
    ff06:	b082      	sub	sp, #8
    ff08:	af00      	add	r7, sp, #0
    ff0a:	6078      	str	r0, [r7, #4]
{
    if(((int) this->getEtapeType()) > 19)
    ff0c:	6878      	ldr	r0, [r7, #4]
    ff0e:	f7ff ffd3 	bl	feb8 <_ZN5Etape12getEtapeTypeEv>
    ff12:	4603      	mov	r3, r0
    ff14:	2b13      	cmp	r3, #19
    ff16:	bf94      	ite	ls
    ff18:	2300      	movls	r3, #0
    ff1a:	2301      	movhi	r3, #1
    ff1c:	b2db      	uxtb	r3, r3
    ff1e:	2b00      	cmp	r3, #0
    ff20:	d003      	beq.n	ff2a <_ZN5Etape7aEviterEv+0x26>
    {
        return true;
    ff22:	f04f 0301 	mov.w	r3, #1	; 0x1
    ff26:	603b      	str	r3, [r7, #0]
    ff28:	e002      	b.n	ff30 <_ZN5Etape7aEviterEv+0x2c>
    }
    else
    {
        return false;
    ff2a:	f04f 0300 	mov.w	r3, #0	; 0x0
    ff2e:	603b      	str	r3, [r7, #0]
    ff30:	683b      	ldr	r3, [r7, #0]
    }
}
    ff32:	4618      	mov	r0, r3
    ff34:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ff38:	46bd      	mov	sp, r7
    ff3a:	bd80      	pop	{r7, pc}

0000ff3c <_ZN5Etape7robotVuEv>:
void Etape::setEtapeType(Etape::EtapeType type)
{
    this->type = type;
}

void Etape::robotVu()
    ff3c:	b580      	push	{r7, lr}
    ff3e:	b082      	sub	sp, #8
    ff40:	af00      	add	r7, sp, #0
    ff42:	6078      	str	r0, [r7, #4]
{
    if(!aEviter())
    ff44:	6878      	ldr	r0, [r7, #4]
    ff46:	f7ff ffdd 	bl	ff04 <_ZN5Etape7aEviterEv>
    ff4a:	4603      	mov	r3, r0
    ff4c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ff50:	b2db      	uxtb	r3, r3
    ff52:	2b00      	cmp	r3, #0
    ff54:	d006      	beq.n	ff64 <_ZN5Etape7robotVuEv+0x28>
    {
        this->type = (EtapeType)(this->type + 20);
    ff56:	687b      	ldr	r3, [r7, #4]
    ff58:	7e1b      	ldrb	r3, [r3, #24]
    ff5a:	f103 0314 	add.w	r3, r3, #20	; 0x14
    ff5e:	b2db      	uxtb	r3, r3
    ff60:	687a      	ldr	r2, [r7, #4]
    ff62:	7613      	strb	r3, [r2, #24]
    }
}
    ff64:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ff68:	46bd      	mov	sp, r7
    ff6a:	bd80      	pop	{r7, pc}

0000ff6c <_ZN5Etape13oublieRobotVuEv>:
    {
        return false;
    }
}

void Etape::oublieRobotVu()
    ff6c:	b580      	push	{r7, lr}
    ff6e:	b082      	sub	sp, #8
    ff70:	af00      	add	r7, sp, #0
    ff72:	6078      	str	r0, [r7, #4]
{
    if(this->aEviter())
    ff74:	6878      	ldr	r0, [r7, #4]
    ff76:	f7ff ffc5 	bl	ff04 <_ZN5Etape7aEviterEv>
    ff7a:	4603      	mov	r3, r0
    ff7c:	2b00      	cmp	r3, #0
    ff7e:	d00a      	beq.n	ff96 <_ZN5Etape13oublieRobotVuEv+0x2a>
    {
        //On oublie qu'on a vu un robot
        this->setEtapeType((EtapeType) ((int)this->getEtapeType() - 20));
    ff80:	6878      	ldr	r0, [r7, #4]
    ff82:	f7ff ff99 	bl	feb8 <_ZN5Etape12getEtapeTypeEv>
    ff86:	4603      	mov	r3, r0
    ff88:	f1a3 0314 	sub.w	r3, r3, #20	; 0x14
    ff8c:	b2db      	uxtb	r3, r3
    ff8e:	6878      	ldr	r0, [r7, #4]
    ff90:	4619      	mov	r1, r3
    ff92:	f7ff ff9d 	bl	fed0 <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>
    }
}
    ff96:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ff9a:	46bd      	mov	sp, r7
    ff9c:	bd80      	pop	{r7, pc}
    ff9e:	46c0      	nop			(mov r8, r8)

0000ffa0 <_ZN5Etape12getDistancesEv>:

int* Etape::getDistances()
    ffa0:	b480      	push	{r7}
    ffa2:	b083      	sub	sp, #12
    ffa4:	af00      	add	r7, sp, #0
    ffa6:	6078      	str	r0, [r7, #4]
{
    return this->distances;
    ffa8:	687b      	ldr	r3, [r7, #4]
    ffaa:	6a5b      	ldr	r3, [r3, #36]
}
    ffac:	4618      	mov	r0, r3
    ffae:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ffb2:	46bd      	mov	sp, r7
    ffb4:	bc80      	pop	{r7}
    ffb6:	4770      	bx	lr

0000ffb8 <_ZN5Etape12setDistancesEPi>:

void Etape::setDistances(int* distances)
    ffb8:	b480      	push	{r7}
    ffba:	b083      	sub	sp, #12
    ffbc:	af00      	add	r7, sp, #0
    ffbe:	6078      	str	r0, [r7, #4]
    ffc0:	6039      	str	r1, [r7, #0]
{
    this->distances = distances;
    ffc2:	687a      	ldr	r2, [r7, #4]
    ffc4:	683b      	ldr	r3, [r7, #0]
    ffc6:	6253      	str	r3, [r2, #36]
}
    ffc8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ffcc:	46bd      	mov	sp, r7
    ffce:	bc80      	pop	{r7}
    ffd0:	4770      	bx	lr
    ffd2:	46c0      	nop			(mov r8, r8)

0000ffd4 <_ZN5Etape27getEtapesLieesParFinirEtapeEv>:
    {
        this->distances[i] = Dijkstra::calculDistanceDirect(this->children[i], this);
    }
}

int* Etape::getEtapesLieesParFinirEtape()
    ffd4:	b480      	push	{r7}
    ffd6:	b083      	sub	sp, #12
    ffd8:	af00      	add	r7, sp, #0
    ffda:	6078      	str	r0, [r7, #4]
{
    return this->numerosEtapesLieesParFinirEtape;
    ffdc:	687b      	ldr	r3, [r7, #4]
    ffde:	6adb      	ldr	r3, [r3, #44]
}
    ffe0:	4618      	mov	r0, r3
    ffe2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ffe6:	46bd      	mov	sp, r7
    ffe8:	bc80      	pop	{r7}
    ffea:	4770      	bx	lr

0000ffec <_ZN5Etape27setEtapesLieesParFinirEtapeEPi>:

void Etape::setEtapesLieesParFinirEtape(int* numerosEtapesLieesParFinirEtape)
    ffec:	b480      	push	{r7}
    ffee:	b083      	sub	sp, #12
    fff0:	af00      	add	r7, sp, #0
    fff2:	6078      	str	r0, [r7, #4]
    fff4:	6039      	str	r1, [r7, #0]
{
    this->numerosEtapesLieesParFinirEtape = numerosEtapesLieesParFinirEtape;
    fff6:	687a      	ldr	r2, [r7, #4]
    fff8:	683b      	ldr	r3, [r7, #0]
    fffa:	62d3      	str	r3, [r2, #44]
}
    fffc:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10000:	46bd      	mov	sp, r7
   10002:	bc80      	pop	{r7}
   10004:	4770      	bx	lr
   10006:	46c0      	nop			(mov r8, r8)

00010008 <_ZN5Etape33getNombreEtapesLieesParFinirEtapeEv>:

int Etape::getNombreEtapesLieesParFinirEtape()
   10008:	b480      	push	{r7}
   1000a:	b083      	sub	sp, #12
   1000c:	af00      	add	r7, sp, #0
   1000e:	6078      	str	r0, [r7, #4]
{
    return this->nombreEtapesLieesParFinirEtape;
   10010:	687b      	ldr	r3, [r7, #4]
   10012:	6a9b      	ldr	r3, [r3, #40]
}
   10014:	4618      	mov	r0, r3
   10016:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1001a:	46bd      	mov	sp, r7
   1001c:	bc80      	pop	{r7}
   1001e:	4770      	bx	lr

00010020 <_ZN5Etape5finirEv>:

void Etape::finir(void)
   10020:	b480      	push	{r7}
   10022:	b083      	sub	sp, #12
   10024:	af00      	add	r7, sp, #0
   10026:	6078      	str	r0, [r7, #4]
{
    if(this->type == FRUIT)
   10028:	687b      	ldr	r3, [r7, #4]
   1002a:	7e1b      	ldrb	r3, [r3, #24]
   1002c:	2b02      	cmp	r3, #2
   1002e:	d103      	bne.n	10038 <_ZN5Etape5finirEv+0x18>
    {
        this->type = POINT_PASSAGE;
   10030:	687b      	ldr	r3, [r7, #4]
   10032:	f04f 0200 	mov.w	r2, #0	; 0x0
   10036:	761a      	strb	r2, [r3, #24]
    }
}
   10038:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1003c:	46bd      	mov	sp, r7
   1003e:	bc80      	pop	{r7}
   10040:	4770      	bx	lr
   10042:	46c0      	nop			(mov r8, r8)

00010044 <_ZN5Etape8setScoreEi>:

void Etape::setScore(int score)
   10044:	b480      	push	{r7}
   10046:	b083      	sub	sp, #12
   10048:	af00      	add	r7, sp, #0
   1004a:	6078      	str	r0, [r7, #4]
   1004c:	6039      	str	r1, [r7, #0]
{
    this->score = score;
   1004e:	687a      	ldr	r2, [r7, #4]
   10050:	683b      	ldr	r3, [r7, #0]
   10052:	6313      	str	r3, [r2, #48]
}
   10054:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10058:	46bd      	mov	sp, r7
   1005a:	bc80      	pop	{r7}
   1005c:	4770      	bx	lr
   1005e:	46c0      	nop			(mov r8, r8)

00010060 <_ZN5Etape8getScoreEv>:

int Etape::getScore()
   10060:	b480      	push	{r7}
   10062:	b083      	sub	sp, #12
   10064:	af00      	add	r7, sp, #0
   10066:	6078      	str	r0, [r7, #4]
{
    return this->score;
   10068:	687b      	ldr	r3, [r7, #4]
   1006a:	6b1b      	ldr	r3, [r3, #48]
}
   1006c:	4618      	mov	r0, r3
   1006e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10072:	46bd      	mov	sp, r7
   10074:	bc80      	pop	{r7}
   10076:	4770      	bx	lr

00010078 <_ZN5Etape9addVoisinEPS_b>:

Etape* Etape::addVoisin(Etape* newVoisin, bool autreSens)
   10078:	b580      	push	{r7, lr}
   1007a:	b088      	sub	sp, #32
   1007c:	af00      	add	r7, sp, #0
   1007e:	60f8      	str	r0, [r7, #12]
   10080:	60b9      	str	r1, [r7, #8]
   10082:	4613      	mov	r3, r2
   10084:	71fb      	strb	r3, [r7, #7]
{
    if(this->nbChildren==0)
   10086:	68fb      	ldr	r3, [r7, #12]
   10088:	69db      	ldr	r3, [r3, #28]
   1008a:	2b00      	cmp	r3, #0
   1008c:	d112      	bne.n	100b4 <_ZN5Etape9addVoisinEPS_b+0x3c>
    {
        this->children = new Etape*[1];
   1008e:	f04f 0004 	mov.w	r0, #4	; 0x4
   10092:	f7fe f965 	bl	e360 <_Znaj>
   10096:	4603      	mov	r3, r0
   10098:	461a      	mov	r2, r3
   1009a:	68fb      	ldr	r3, [r7, #12]
   1009c:	601a      	str	r2, [r3, #0]
        this->children[0] = newVoisin;
   1009e:	68fb      	ldr	r3, [r7, #12]
   100a0:	681a      	ldr	r2, [r3, #0]
   100a2:	68bb      	ldr	r3, [r7, #8]
   100a4:	6013      	str	r3, [r2, #0]
        this->nbChildren++;
   100a6:	68fb      	ldr	r3, [r7, #12]
   100a8:	69db      	ldr	r3, [r3, #28]
   100aa:	f103 0201 	add.w	r2, r3, #1	; 0x1
   100ae:	68fb      	ldr	r3, [r7, #12]
   100b0:	61da      	str	r2, [r3, #28]
   100b2:	e060      	b.n	10176 <_ZN5Etape9addVoisinEPS_b+0xfe>
    }
    else
    {
        Etape** temp = new Etape*[nbChildren];
   100b4:	68fb      	ldr	r3, [r7, #12]
   100b6:	69db      	ldr	r3, [r3, #28]
   100b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   100bc:	4618      	mov	r0, r3
   100be:	f7fe f94f 	bl	e360 <_Znaj>
   100c2:	4603      	mov	r3, r0
   100c4:	617b      	str	r3, [r7, #20]
        for(int i=0; i<nbChildren; i++)
   100c6:	f04f 0300 	mov.w	r3, #0	; 0x0
   100ca:	61bb      	str	r3, [r7, #24]
   100cc:	e011      	b.n	100f2 <_ZN5Etape9addVoisinEPS_b+0x7a>
        {
            temp[i] = this->children[i];
   100ce:	69bb      	ldr	r3, [r7, #24]
   100d0:	ea4f 0283 	mov.w	r2, r3, lsl #2
   100d4:	697b      	ldr	r3, [r7, #20]
   100d6:	eb03 0102 	add.w	r1, r3, r2
   100da:	68fb      	ldr	r3, [r7, #12]
   100dc:	681a      	ldr	r2, [r3, #0]
   100de:	69bb      	ldr	r3, [r7, #24]
   100e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   100e4:	4413      	add	r3, r2
   100e6:	681b      	ldr	r3, [r3, #0]
   100e8:	600b      	str	r3, [r1, #0]
        this->nbChildren++;
    }
    else
    {
        Etape** temp = new Etape*[nbChildren];
        for(int i=0; i<nbChildren; i++)
   100ea:	69bb      	ldr	r3, [r7, #24]
   100ec:	f103 0301 	add.w	r3, r3, #1	; 0x1
   100f0:	61bb      	str	r3, [r7, #24]
   100f2:	68fb      	ldr	r3, [r7, #12]
   100f4:	69da      	ldr	r2, [r3, #28]
   100f6:	69bb      	ldr	r3, [r7, #24]
   100f8:	429a      	cmp	r2, r3
   100fa:	dce8      	bgt.n	100ce <_ZN5Etape9addVoisinEPS_b+0x56>
        {
            temp[i] = this->children[i];
        }
        this->children = new Etape*[nbChildren+1];
   100fc:	68fb      	ldr	r3, [r7, #12]
   100fe:	69db      	ldr	r3, [r3, #28]
   10100:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10104:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10108:	4618      	mov	r0, r3
   1010a:	f7fe f929 	bl	e360 <_Znaj>
   1010e:	4603      	mov	r3, r0
   10110:	461a      	mov	r2, r3
   10112:	68fb      	ldr	r3, [r7, #12]
   10114:	601a      	str	r2, [r3, #0]
        for(int i=0; i<nbChildren; i++)
   10116:	f04f 0300 	mov.w	r3, #0	; 0x0
   1011a:	61fb      	str	r3, [r7, #28]
   1011c:	e011      	b.n	10142 <_ZN5Etape9addVoisinEPS_b+0xca>
        {
            this->children[i] = temp[i];
   1011e:	68fb      	ldr	r3, [r7, #12]
   10120:	681a      	ldr	r2, [r3, #0]
   10122:	69fb      	ldr	r3, [r7, #28]
   10124:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10128:	eb02 0103 	add.w	r1, r2, r3
   1012c:	69fb      	ldr	r3, [r7, #28]
   1012e:	ea4f 0283 	mov.w	r2, r3, lsl #2
   10132:	697b      	ldr	r3, [r7, #20]
   10134:	4413      	add	r3, r2
   10136:	681b      	ldr	r3, [r3, #0]
   10138:	600b      	str	r3, [r1, #0]
        for(int i=0; i<nbChildren; i++)
        {
            temp[i] = this->children[i];
        }
        this->children = new Etape*[nbChildren+1];
        for(int i=0; i<nbChildren; i++)
   1013a:	69fb      	ldr	r3, [r7, #28]
   1013c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10140:	61fb      	str	r3, [r7, #28]
   10142:	68fb      	ldr	r3, [r7, #12]
   10144:	69da      	ldr	r2, [r3, #28]
   10146:	69fb      	ldr	r3, [r7, #28]
   10148:	429a      	cmp	r2, r3
   1014a:	dce8      	bgt.n	1011e <_ZN5Etape9addVoisinEPS_b+0xa6>
        {
            this->children[i] = temp[i];
        }
        delete[] temp;
   1014c:	697b      	ldr	r3, [r7, #20]
   1014e:	2b00      	cmp	r3, #0
   10150:	d002      	beq.n	10158 <_ZN5Etape9addVoisinEPS_b+0xe0>
   10152:	6978      	ldr	r0, [r7, #20]
   10154:	f7fe f98a 	bl	e46c <_ZdaPv>
        this->children[nbChildren] = newVoisin;
   10158:	68fb      	ldr	r3, [r7, #12]
   1015a:	681a      	ldr	r2, [r3, #0]
   1015c:	68fb      	ldr	r3, [r7, #12]
   1015e:	69db      	ldr	r3, [r3, #28]
   10160:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10164:	441a      	add	r2, r3
   10166:	68bb      	ldr	r3, [r7, #8]
   10168:	6013      	str	r3, [r2, #0]
        this->nbChildren++;
   1016a:	68fb      	ldr	r3, [r7, #12]
   1016c:	69db      	ldr	r3, [r3, #28]
   1016e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10172:	68fb      	ldr	r3, [r7, #12]
   10174:	61da      	str	r2, [r3, #28]
        qDebug() << "ERREUR, TROP DE VOISINS !!!";
#endif
    }
    this->children[i] = newVoisin;
    */
    if (autreSens)
   10176:	79fb      	ldrb	r3, [r7, #7]
   10178:	2b00      	cmp	r3, #0
   1017a:	d005      	beq.n	10188 <_ZN5Etape9addVoisinEPS_b+0x110>
    {
        newVoisin->addVoisin(this, false);
   1017c:	68b8      	ldr	r0, [r7, #8]
   1017e:	68f9      	ldr	r1, [r7, #12]
   10180:	f04f 0200 	mov.w	r2, #0	; 0x0
   10184:	f7ff ff78 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    }
}
   10188:	f107 0720 	add.w	r7, r7, #32	; 0x20
   1018c:	46bd      	mov	sp, r7
   1018e:	bd80      	pop	{r7, pc}

00010190 <_ZN5Etape21computeChildDistancesEv>:
void Etape::setDistances(int* distances)
{
    this->distances = distances;
}

void Etape::computeChildDistances(){
   10190:	b590      	push	{r4, r7, lr}
   10192:	b085      	sub	sp, #20
   10194:	af00      	add	r7, sp, #0
   10196:	6078      	str	r0, [r7, #4]
    this->distances = new int[this->nbChildren];
   10198:	687b      	ldr	r3, [r7, #4]
   1019a:	69db      	ldr	r3, [r3, #28]
   1019c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   101a0:	4618      	mov	r0, r3
   101a2:	f7fe f8dd 	bl	e360 <_Znaj>
   101a6:	4603      	mov	r3, r0
   101a8:	461a      	mov	r2, r3
   101aa:	687b      	ldr	r3, [r7, #4]
   101ac:	625a      	str	r2, [r3, #36]

    for(int i=0; i<this->nbChildren; i++)
   101ae:	f04f 0300 	mov.w	r3, #0	; 0x0
   101b2:	60fb      	str	r3, [r7, #12]
   101b4:	e017      	b.n	101e6 <_ZN5Etape21computeChildDistancesEv+0x56>
    {
        this->distances[i] = Dijkstra::calculDistanceDirect(this->children[i], this);
   101b6:	687b      	ldr	r3, [r7, #4]
   101b8:	6a5a      	ldr	r2, [r3, #36]
   101ba:	68fb      	ldr	r3, [r7, #12]
   101bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   101c0:	eb02 0403 	add.w	r4, r2, r3
   101c4:	687b      	ldr	r3, [r7, #4]
   101c6:	681a      	ldr	r2, [r3, #0]
   101c8:	68fb      	ldr	r3, [r7, #12]
   101ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
   101ce:	4413      	add	r3, r2
   101d0:	681b      	ldr	r3, [r3, #0]
   101d2:	4618      	mov	r0, r3
   101d4:	6879      	ldr	r1, [r7, #4]
   101d6:	f7ff fd51 	bl	fc7c <_ZN8Dijkstra20calculDistanceDirectEP5EtapeS1_>
   101da:	4603      	mov	r3, r0
   101dc:	6023      	str	r3, [r4, #0]
}

void Etape::computeChildDistances(){
    this->distances = new int[this->nbChildren];

    for(int i=0; i<this->nbChildren; i++)
   101de:	68fb      	ldr	r3, [r7, #12]
   101e0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   101e4:	60fb      	str	r3, [r7, #12]
   101e6:	687b      	ldr	r3, [r7, #4]
   101e8:	69da      	ldr	r2, [r3, #28]
   101ea:	68fb      	ldr	r3, [r7, #12]
   101ec:	429a      	cmp	r2, r3
   101ee:	dce2      	bgt.n	101b6 <_ZN5Etape21computeChildDistancesEv+0x26>
    {
        this->distances[i] = Dijkstra::calculDistanceDirect(this->children[i], this);
    }
}
   101f0:	f107 0714 	add.w	r7, r7, #20	; 0x14
   101f4:	46bd      	mov	sp, r7
   101f6:	bd90      	pop	{r4, r7, pc}

000101f8 <_ZN5EtapeC1Ev>:
    }

    tableauEtapesTotal[numero] = this;
}

Etape::Etape(){}
   101f8:	b580      	push	{r7, lr}
   101fa:	b082      	sub	sp, #8
   101fc:	af00      	add	r7, sp, #0
   101fe:	6078      	str	r0, [r7, #4]
   10200:	687b      	ldr	r3, [r7, #4]
   10202:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10206:	4618      	mov	r0, r3
   10208:	f7fe f950 	bl	e4ac <_ZN8PositionC1Ev>
   1020c:	687b      	ldr	r3, [r7, #4]
   1020e:	4618      	mov	r0, r3
   10210:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10214:	46bd      	mov	sp, r7
   10216:	bd80      	pop	{r7, pc}

00010218 <_ZN5EtapeC2Ev>:
   10218:	b580      	push	{r7, lr}
   1021a:	b082      	sub	sp, #8
   1021c:	af00      	add	r7, sp, #0
   1021e:	6078      	str	r0, [r7, #4]
   10220:	687b      	ldr	r3, [r7, #4]
   10222:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10226:	4618      	mov	r0, r3
   10228:	f7fe f940 	bl	e4ac <_ZN8PositionC1Ev>
   1022c:	687b      	ldr	r3, [r7, #4]
   1022e:	4618      	mov	r0, r3
   10230:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10234:	46bd      	mov	sp, r7
   10236:	bd80      	pop	{r7, pc}

00010238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>:
#include "dijkstra.h"
#ifndef ROBOTHW
    #include <QDebug>
#endif

Etape::Etape(Position position, /*int nbChildren, */int numero, Etape** tableauEtapesTotal, EtapeType type = POINT_PASSAGE, int state=-1, int nombreEtapesLieesParFinirEtape = 0)
   10238:	b580      	push	{r7, lr}
   1023a:	b086      	sub	sp, #24
   1023c:	af00      	add	r7, sp, #0
   1023e:	60f8      	str	r0, [r7, #12]
   10240:	f107 0004 	add.w	r0, r7, #4	; 0x4
   10244:	e880 0006 	stmia.w	r0, {r1, r2}
   10248:	603b      	str	r3, [r7, #0]
   1024a:	68fb      	ldr	r3, [r7, #12]
   1024c:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10250:	4618      	mov	r0, r3
   10252:	f7fe f92b 	bl	e4ac <_ZN8PositionC1Ev>
{
    this->position = position;
   10256:	68fb      	ldr	r3, [r7, #12]
   10258:	f103 0308 	add.w	r3, r3, #8	; 0x8
   1025c:	4618      	mov	r0, r3
   1025e:	f107 0304 	add.w	r3, r7, #4	; 0x4
   10262:	e893 0006 	ldmia.w	r3, {r1, r2}
   10266:	f7fe f9dd 	bl	e624 <_ZN8PositionaSES_>
    //this->children = new Etape*[nbChildren];
    this->type = type;
   1026a:	68fa      	ldr	r2, [r7, #12]
   1026c:	f897 3024 	ldrb.w	r3, [r7, #36]
   10270:	7613      	strb	r3, [r2, #24]
    this->state = state;
   10272:	68fa      	ldr	r2, [r7, #12]
   10274:	6abb      	ldr	r3, [r7, #40]
   10276:	6113      	str	r3, [r2, #16]
    //this->nbChildren = nbChildren;
    this->nbChildren = 0;
   10278:	68fa      	ldr	r2, [r7, #12]
   1027a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1027e:	61d3      	str	r3, [r2, #28]
    this->distance = -1;
   10280:	68fa      	ldr	r2, [r7, #12]
   10282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10286:	6153      	str	r3, [r2, #20]
    this->numero = numero;
   10288:	68fa      	ldr	r2, [r7, #12]
   1028a:	683b      	ldr	r3, [r7, #0]
   1028c:	6213      	str	r3, [r2, #32]
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
   1028e:	68fa      	ldr	r2, [r7, #12]
   10290:	6afb      	ldr	r3, [r7, #44]
   10292:	6293      	str	r3, [r2, #40]
    this->score = 0;
   10294:	68fa      	ldr	r2, [r7, #12]
   10296:	f04f 0300 	mov.w	r3, #0	; 0x0
   1029a:	6313      	str	r3, [r2, #48]

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   1029c:	f04f 0300 	mov.w	r3, #0	; 0x0
   102a0:	617b      	str	r3, [r7, #20]
   102a2:	e00c      	b.n	102be <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii+0x86>
    {
        this->children[i] = 0;
   102a4:	68fb      	ldr	r3, [r7, #12]
   102a6:	681a      	ldr	r2, [r3, #0]
   102a8:	697b      	ldr	r3, [r7, #20]
   102aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
   102ae:	441a      	add	r2, r3
   102b0:	f04f 0300 	mov.w	r3, #0	; 0x0
   102b4:	6013      	str	r3, [r2, #0]
    this->numero = numero;
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
    this->score = 0;

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   102b6:	697b      	ldr	r3, [r7, #20]
   102b8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   102bc:	617b      	str	r3, [r7, #20]
   102be:	68fb      	ldr	r3, [r7, #12]
   102c0:	69da      	ldr	r2, [r3, #28]
   102c2:	697b      	ldr	r3, [r7, #20]
   102c4:	429a      	cmp	r2, r3
   102c6:	dced      	bgt.n	102a4 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii+0x6c>
    {
        this->children[i] = 0;
    }

    tableauEtapesTotal[numero] = this;
   102c8:	683b      	ldr	r3, [r7, #0]
   102ca:	ea4f 0283 	mov.w	r2, r3, lsl #2
   102ce:	6a3b      	ldr	r3, [r7, #32]
   102d0:	441a      	add	r2, r3
   102d2:	68fb      	ldr	r3, [r7, #12]
   102d4:	6013      	str	r3, [r2, #0]
}
   102d6:	68fb      	ldr	r3, [r7, #12]
   102d8:	4618      	mov	r0, r3
   102da:	f107 0718 	add.w	r7, r7, #24	; 0x18
   102de:	46bd      	mov	sp, r7
   102e0:	bd80      	pop	{r7, pc}
   102e2:	46c0      	nop			(mov r8, r8)

000102e4 <_ZN5EtapeC2E8PositioniPPS_NS_9EtapeTypeEii>:
#include "dijkstra.h"
#ifndef ROBOTHW
    #include <QDebug>
#endif

Etape::Etape(Position position, /*int nbChildren, */int numero, Etape** tableauEtapesTotal, EtapeType type = POINT_PASSAGE, int state=-1, int nombreEtapesLieesParFinirEtape = 0)
   102e4:	b580      	push	{r7, lr}
   102e6:	b086      	sub	sp, #24
   102e8:	af00      	add	r7, sp, #0
   102ea:	60f8      	str	r0, [r7, #12]
   102ec:	f107 0004 	add.w	r0, r7, #4	; 0x4
   102f0:	e880 0006 	stmia.w	r0, {r1, r2}
   102f4:	603b      	str	r3, [r7, #0]
   102f6:	68fb      	ldr	r3, [r7, #12]
   102f8:	f103 0308 	add.w	r3, r3, #8	; 0x8
   102fc:	4618      	mov	r0, r3
   102fe:	f7fe f8d5 	bl	e4ac <_ZN8PositionC1Ev>
{
    this->position = position;
   10302:	68fb      	ldr	r3, [r7, #12]
   10304:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10308:	4618      	mov	r0, r3
   1030a:	f107 0304 	add.w	r3, r7, #4	; 0x4
   1030e:	e893 0006 	ldmia.w	r3, {r1, r2}
   10312:	f7fe f987 	bl	e624 <_ZN8PositionaSES_>
    //this->children = new Etape*[nbChildren];
    this->type = type;
   10316:	68fa      	ldr	r2, [r7, #12]
   10318:	f897 3024 	ldrb.w	r3, [r7, #36]
   1031c:	7613      	strb	r3, [r2, #24]
    this->state = state;
   1031e:	68fa      	ldr	r2, [r7, #12]
   10320:	6abb      	ldr	r3, [r7, #40]
   10322:	6113      	str	r3, [r2, #16]
    //this->nbChildren = nbChildren;
    this->nbChildren = 0;
   10324:	68fa      	ldr	r2, [r7, #12]
   10326:	f04f 0300 	mov.w	r3, #0	; 0x0
   1032a:	61d3      	str	r3, [r2, #28]
    this->distance = -1;
   1032c:	68fa      	ldr	r2, [r7, #12]
   1032e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10332:	6153      	str	r3, [r2, #20]
    this->numero = numero;
   10334:	68fa      	ldr	r2, [r7, #12]
   10336:	683b      	ldr	r3, [r7, #0]
   10338:	6213      	str	r3, [r2, #32]
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
   1033a:	68fa      	ldr	r2, [r7, #12]
   1033c:	6afb      	ldr	r3, [r7, #44]
   1033e:	6293      	str	r3, [r2, #40]
    this->score = 0;
   10340:	68fa      	ldr	r2, [r7, #12]
   10342:	f04f 0300 	mov.w	r3, #0	; 0x0
   10346:	6313      	str	r3, [r2, #48]

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   10348:	f04f 0300 	mov.w	r3, #0	; 0x0
   1034c:	617b      	str	r3, [r7, #20]
   1034e:	e00c      	b.n	1036a <_ZN5EtapeC2E8PositioniPPS_NS_9EtapeTypeEii+0x86>
    {
        this->children[i] = 0;
   10350:	68fb      	ldr	r3, [r7, #12]
   10352:	681a      	ldr	r2, [r3, #0]
   10354:	697b      	ldr	r3, [r7, #20]
   10356:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1035a:	441a      	add	r2, r3
   1035c:	f04f 0300 	mov.w	r3, #0	; 0x0
   10360:	6013      	str	r3, [r2, #0]
    this->numero = numero;
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
    this->score = 0;

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   10362:	697b      	ldr	r3, [r7, #20]
   10364:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10368:	617b      	str	r3, [r7, #20]
   1036a:	68fb      	ldr	r3, [r7, #12]
   1036c:	69da      	ldr	r2, [r3, #28]
   1036e:	697b      	ldr	r3, [r7, #20]
   10370:	429a      	cmp	r2, r3
   10372:	dced      	bgt.n	10350 <_ZN5EtapeC2E8PositioniPPS_NS_9EtapeTypeEii+0x6c>
    {
        this->children[i] = 0;
    }

    tableauEtapesTotal[numero] = this;
   10374:	683b      	ldr	r3, [r7, #0]
   10376:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1037a:	6a3b      	ldr	r3, [r7, #32]
   1037c:	441a      	add	r2, r3
   1037e:	68fb      	ldr	r3, [r7, #12]
   10380:	6013      	str	r3, [r2, #0]
}
   10382:	68fb      	ldr	r3, [r7, #12]
   10384:	4618      	mov	r0, r3
   10386:	f107 0718 	add.w	r7, r7, #24	; 0x18
   1038a:	46bd      	mov	sp, r7
   1038c:	bd80      	pop	{r7, pc}
   1038e:	46c0      	nop			(mov r8, r8)

00010390 <_ZN7Gobelet6updateEv>:

Gobelet::Gobelet(Position position):MediumLevelAction(position){}

Gobelet::~Gobelet(){}

int Gobelet::update()
   10390:	b580      	push	{r7, lr}
   10392:	b084      	sub	sp, #16
   10394:	af02      	add	r7, sp, #8
   10396:	6078      	str	r0, [r7, #4]
{
    if (status == 0)
   10398:	687b      	ldr	r3, [r7, #4]
   1039a:	68db      	ldr	r3, [r3, #12]
   1039c:	2b00      	cmp	r3, #0
   1039e:	d106      	bne.n	103ae <_ZN7Gobelet6updateEv+0x1e>
    {
        #ifndef ROBOTHW
            qDebug() << "gobelet";
        #endif
        status++;
   103a0:	687b      	ldr	r3, [r7, #4]
   103a2:	68db      	ldr	r3, [r3, #12]
   103a4:	f103 0201 	add.w	r2, r3, #1	; 0x1
   103a8:	687b      	ldr	r3, [r7, #4]
   103aa:	60da      	str	r2, [r3, #12]
   103ac:	e063      	b.n	10476 <_ZN7Gobelet6updateEv+0xe6>
    }

    else if (status == 1)
   103ae:	687b      	ldr	r3, [r7, #4]
   103b0:	68db      	ldr	r3, [r3, #12]
   103b2:	2b01      	cmp	r3, #1
   103b4:	d114      	bne.n	103e0 <_ZN7Gobelet6updateEv+0x50>
    {
        StrategieV2::setCurrentGoal(goalPosition, goBack);
   103b6:	687b      	ldr	r3, [r7, #4]
   103b8:	f893 c010 	ldrb.w	ip, [r3, #16]
   103bc:	687a      	ldr	r2, [r7, #4]
   103be:	4b31      	ldr	r3, [pc, #196]	(10484 <_ZN7Gobelet6updateEv+0xf4>)
   103c0:	9300      	str	r3, [sp, #0]
   103c2:	f102 0304 	add.w	r3, r2, #4	; 0x4
   103c6:	e893 0003 	ldmia.w	r3, {r0, r1}
   103ca:	4662      	mov	r2, ip
   103cc:	4b2e      	ldr	r3, [pc, #184]	(10488 <_ZN7Gobelet6updateEv+0xf8>)
   103ce:	f005 fb45 	bl	15a5c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
   103d2:	687b      	ldr	r3, [r7, #4]
   103d4:	68db      	ldr	r3, [r3, #12]
   103d6:	f103 0201 	add.w	r2, r3, #1	; 0x1
   103da:	687b      	ldr	r3, [r7, #4]
   103dc:	60da      	str	r2, [r3, #12]
   103de:	e04a      	b.n	10476 <_ZN7Gobelet6updateEv+0xe6>
    }

    else if (status == 2)
   103e0:	687b      	ldr	r3, [r7, #4]
   103e2:	68db      	ldr	r3, [r3, #12]
   103e4:	2b02      	cmp	r3, #2
   103e6:	d119      	bne.n	1041c <_ZN7Gobelet6updateEv+0x8c>
    {
        if (Command::isNear(goalPosition))
   103e8:	687b      	ldr	r3, [r7, #4]
   103ea:	f103 0304 	add.w	r3, r3, #4	; 0x4
   103ee:	e893 0003 	ldmia.w	r3, {r0, r1}
   103f2:	4a26      	ldr	r2, [pc, #152]	(1048c <_ZN7Gobelet6updateEv+0xfc>)
   103f4:	f7f7 fc52 	bl	7c9c <_ZN7Command6isNearE8Positionf>
   103f8:	4603      	mov	r3, r0
   103fa:	2b00      	cmp	r3, #0
   103fc:	d03b      	beq.n	10476 <_ZN7Gobelet6updateEv+0xe6>
        {
            StrategieV2::lookAt(goalPosition);
   103fe:	687b      	ldr	r3, [r7, #4]
   10400:	f103 0304 	add.w	r3, r3, #4	; 0x4
   10404:	e893 0003 	ldmia.w	r3, {r0, r1}
   10408:	4a21      	ldr	r2, [pc, #132]	(10490 <_ZN7Gobelet6updateEv+0x100>)
   1040a:	f005 fa8f 	bl	1592c <_ZN11StrategieV26lookAtE8Positionf>
            status++;
   1040e:	687b      	ldr	r3, [r7, #4]
   10410:	68db      	ldr	r3, [r3, #12]
   10412:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10416:	687b      	ldr	r3, [r7, #4]
   10418:	60da      	str	r2, [r3, #12]
   1041a:	e02c      	b.n	10476 <_ZN7Gobelet6updateEv+0xe6>
        }
    }

    else if (status == 3)
   1041c:	687b      	ldr	r3, [r7, #4]
   1041e:	68db      	ldr	r3, [r3, #12]
   10420:	2b03      	cmp	r3, #3
   10422:	d111      	bne.n	10448 <_ZN7Gobelet6updateEv+0xb8>
    {
        if (Command::isLookingAt(goalPosition))
   10424:	687b      	ldr	r3, [r7, #4]
   10426:	f103 0304 	add.w	r3, r3, #4	; 0x4
   1042a:	e893 0003 	ldmia.w	r3, {r0, r1}
   1042e:	4a19      	ldr	r2, [pc, #100]	(10494 <_ZN7Gobelet6updateEv+0x104>)
   10430:	f7f7 fb78 	bl	7b24 <_ZN7Command11isLookingAtE8Positionf>
   10434:	4603      	mov	r3, r0
   10436:	2b00      	cmp	r3, #0
   10438:	d01d      	beq.n	10476 <_ZN7Gobelet6updateEv+0xe6>
        {
            //recuperer le gobelet
            #ifndef ROBOTHW
            qDebug() << "On recupere le gobelet";
            #endif
            status++;
   1043a:	687b      	ldr	r3, [r7, #4]
   1043c:	68db      	ldr	r3, [r3, #12]
   1043e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10442:	687b      	ldr	r3, [r7, #4]
   10444:	60da      	str	r2, [r3, #12]
   10446:	e016      	b.n	10476 <_ZN7Gobelet6updateEv+0xe6>
        }
    }

    else if (status <=53 && status > -1)
   10448:	687b      	ldr	r3, [r7, #4]
   1044a:	68db      	ldr	r3, [r3, #12]
   1044c:	2b35      	cmp	r3, #53
   1044e:	dc0a      	bgt.n	10466 <_ZN7Gobelet6updateEv+0xd6>
   10450:	687b      	ldr	r3, [r7, #4]
   10452:	68db      	ldr	r3, [r3, #12]
   10454:	2b00      	cmp	r3, #0
   10456:	db06      	blt.n	10466 <_ZN7Gobelet6updateEv+0xd6>
    {
        status++;
   10458:	687b      	ldr	r3, [r7, #4]
   1045a:	68db      	ldr	r3, [r3, #12]
   1045c:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10460:	687b      	ldr	r3, [r7, #4]
   10462:	60da      	str	r2, [r3, #12]
   10464:	e007      	b.n	10476 <_ZN7Gobelet6updateEv+0xe6>
    }

    else if (status == 54)
   10466:	687b      	ldr	r3, [r7, #4]
   10468:	68db      	ldr	r3, [r3, #12]
   1046a:	2b36      	cmp	r3, #54
   1046c:	d103      	bne.n	10476 <_ZN7Gobelet6updateEv+0xe6>
    {
        status = -1;
   1046e:	687a      	ldr	r2, [r7, #4]
   10470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10474:	60d3      	str	r3, [r2, #12]
    }

    return status;
   10476:	687b      	ldr	r3, [r7, #4]
   10478:	68db      	ldr	r3, [r3, #12]
}
   1047a:	4618      	mov	r0, r3
   1047c:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10480:	46bd      	mov	sp, r7
   10482:	bd80      	pop	{r7, pc}
   10484:	c2c80000 	.word	0xc2c80000
   10488:	40400000 	.word	0x40400000
   1048c:	41f00000 	.word	0x41f00000
   10490:	3cf5c28f 	.word	0x3cf5c28f
   10494:	3db2b8c2 	.word	0x3db2b8c2

00010498 <_ZN7GobeletD0Ev>:

Gobelet::Gobelet(){}

Gobelet::Gobelet(Position position):MediumLevelAction(position){}

Gobelet::~Gobelet(){}
   10498:	b580      	push	{r7, lr}
   1049a:	b082      	sub	sp, #8
   1049c:	af00      	add	r7, sp, #0
   1049e:	6078      	str	r0, [r7, #4]
   104a0:	687a      	ldr	r2, [r7, #4]
   104a2:	4b0a      	ldr	r3, [pc, #40]	(104cc <_ZN7GobeletD0Ev+0x34>)
   104a4:	6013      	str	r3, [r2, #0]
   104a6:	687b      	ldr	r3, [r7, #4]
   104a8:	4618      	mov	r0, r3
   104aa:	f004 fae7 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
   104ae:	f04f 0301 	mov.w	r3, #1	; 0x1
   104b2:	b2db      	uxtb	r3, r3
   104b4:	2b00      	cmp	r3, #0
   104b6:	d002      	beq.n	104be <_ZN7GobeletD0Ev+0x26>
   104b8:	6878      	ldr	r0, [r7, #4]
   104ba:	f7fd ff5f 	bl	e37c <_ZdlPv>
   104be:	687b      	ldr	r3, [r7, #4]
   104c0:	4618      	mov	r0, r3
   104c2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   104c6:	46bd      	mov	sp, r7
   104c8:	bd80      	pop	{r7, pc}
   104ca:	46c0      	nop			(mov r8, r8)
   104cc:	00021b08 	.word	0x00021b08

000104d0 <_ZN7GobeletD1Ev>:
   104d0:	b580      	push	{r7, lr}
   104d2:	b082      	sub	sp, #8
   104d4:	af00      	add	r7, sp, #0
   104d6:	6078      	str	r0, [r7, #4]
   104d8:	687a      	ldr	r2, [r7, #4]
   104da:	4b0a      	ldr	r3, [pc, #40]	(10504 <_ZN7GobeletD1Ev+0x34>)
   104dc:	6013      	str	r3, [r2, #0]
   104de:	687b      	ldr	r3, [r7, #4]
   104e0:	4618      	mov	r0, r3
   104e2:	f004 facb 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
   104e6:	f04f 0300 	mov.w	r3, #0	; 0x0
   104ea:	b2db      	uxtb	r3, r3
   104ec:	2b00      	cmp	r3, #0
   104ee:	d002      	beq.n	104f6 <_ZN7GobeletD1Ev+0x26>
   104f0:	6878      	ldr	r0, [r7, #4]
   104f2:	f7fd ff43 	bl	e37c <_ZdlPv>
   104f6:	687b      	ldr	r3, [r7, #4]
   104f8:	4618      	mov	r0, r3
   104fa:	f107 0708 	add.w	r7, r7, #8	; 0x8
   104fe:	46bd      	mov	sp, r7
   10500:	bd80      	pop	{r7, pc}
   10502:	46c0      	nop			(mov r8, r8)
   10504:	00021b08 	.word	0x00021b08

00010508 <_ZN7GobeletD2Ev>:
   10508:	b580      	push	{r7, lr}
   1050a:	b082      	sub	sp, #8
   1050c:	af00      	add	r7, sp, #0
   1050e:	6078      	str	r0, [r7, #4]
   10510:	687a      	ldr	r2, [r7, #4]
   10512:	4b0a      	ldr	r3, [pc, #40]	(1053c <_ZN7GobeletD2Ev+0x34>)
   10514:	6013      	str	r3, [r2, #0]
   10516:	687b      	ldr	r3, [r7, #4]
   10518:	4618      	mov	r0, r3
   1051a:	f004 faaf 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
   1051e:	f04f 0300 	mov.w	r3, #0	; 0x0
   10522:	b2db      	uxtb	r3, r3
   10524:	2b00      	cmp	r3, #0
   10526:	d002      	beq.n	1052e <_ZN7GobeletD2Ev+0x26>
   10528:	6878      	ldr	r0, [r7, #4]
   1052a:	f7fd ff27 	bl	e37c <_ZdlPv>
   1052e:	687b      	ldr	r3, [r7, #4]
   10530:	4618      	mov	r0, r3
   10532:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10536:	46bd      	mov	sp, r7
   10538:	bd80      	pop	{r7, pc}
   1053a:	46c0      	nop			(mov r8, r8)
   1053c:	00021b08 	.word	0x00021b08

00010540 <_ZN7GobeletC1E8Position>:
#include "command.h"


Gobelet::Gobelet(){}

Gobelet::Gobelet(Position position):MediumLevelAction(position){}
   10540:	b580      	push	{r7, lr}
   10542:	b084      	sub	sp, #16
   10544:	af00      	add	r7, sp, #0
   10546:	60f8      	str	r0, [r7, #12]
   10548:	f107 0304 	add.w	r3, r7, #4	; 0x4
   1054c:	e883 0006 	stmia.w	r3, {r1, r2}
   10550:	68fb      	ldr	r3, [r7, #12]
   10552:	4618      	mov	r0, r3
   10554:	f107 0304 	add.w	r3, r7, #4	; 0x4
   10558:	e893 0006 	ldmia.w	r3, {r1, r2}
   1055c:	f004 face 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
   10560:	68fa      	ldr	r2, [r7, #12]
   10562:	4b07      	ldr	r3, [pc, #28]	(10580 <_ZN7GobeletC1E8Position+0x40>)
   10564:	6013      	str	r3, [r2, #0]
   10566:	68fb      	ldr	r3, [r7, #12]
   10568:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1056c:	4618      	mov	r0, r3
   1056e:	f7fd ff9d 	bl	e4ac <_ZN8PositionC1Ev>
   10572:	68fb      	ldr	r3, [r7, #12]
   10574:	4618      	mov	r0, r3
   10576:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1057a:	46bd      	mov	sp, r7
   1057c:	bd80      	pop	{r7, pc}
   1057e:	46c0      	nop			(mov r8, r8)
   10580:	00021b08 	.word	0x00021b08

00010584 <_ZN7GobeletC2E8Position>:
   10584:	b580      	push	{r7, lr}
   10586:	b084      	sub	sp, #16
   10588:	af00      	add	r7, sp, #0
   1058a:	60f8      	str	r0, [r7, #12]
   1058c:	f107 0304 	add.w	r3, r7, #4	; 0x4
   10590:	e883 0006 	stmia.w	r3, {r1, r2}
   10594:	68fb      	ldr	r3, [r7, #12]
   10596:	4618      	mov	r0, r3
   10598:	f107 0304 	add.w	r3, r7, #4	; 0x4
   1059c:	e893 0006 	ldmia.w	r3, {r1, r2}
   105a0:	f004 faac 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
   105a4:	68fa      	ldr	r2, [r7, #12]
   105a6:	4b07      	ldr	r3, [pc, #28]	(105c4 <_ZN7GobeletC2E8Position+0x40>)
   105a8:	6013      	str	r3, [r2, #0]
   105aa:	68fb      	ldr	r3, [r7, #12]
   105ac:	f103 0318 	add.w	r3, r3, #24	; 0x18
   105b0:	4618      	mov	r0, r3
   105b2:	f7fd ff7b 	bl	e4ac <_ZN8PositionC1Ev>
   105b6:	68fb      	ldr	r3, [r7, #12]
   105b8:	4618      	mov	r0, r3
   105ba:	f107 0710 	add.w	r7, r7, #16	; 0x10
   105be:	46bd      	mov	sp, r7
   105c0:	bd80      	pop	{r7, pc}
   105c2:	46c0      	nop			(mov r8, r8)
   105c4:	00021b08 	.word	0x00021b08

000105c8 <_ZN7GobeletC1Ev>:
#include "strategieV2.h"
#include "mediumLevelAction.h"
#include "command.h"


Gobelet::Gobelet(){}
   105c8:	b590      	push	{r4, r7, lr}
   105ca:	b085      	sub	sp, #20
   105cc:	af00      	add	r7, sp, #0
   105ce:	6078      	str	r0, [r7, #4]
   105d0:	687c      	ldr	r4, [r7, #4]
   105d2:	f107 0308 	add.w	r3, r7, #8	; 0x8
   105d6:	4618      	mov	r0, r3
   105d8:	490d      	ldr	r1, [pc, #52]	(10610 <_ZN7GobeletC1Ev+0x48>)
   105da:	4a0d      	ldr	r2, [pc, #52]	(10610 <_ZN7GobeletC1Ev+0x48>)
   105dc:	f04f 0301 	mov.w	r3, #1	; 0x1
   105e0:	f7fd ff8c 	bl	e4fc <_ZN8PositionC1Effb>
   105e4:	4620      	mov	r0, r4
   105e6:	f107 0308 	add.w	r3, r7, #8	; 0x8
   105ea:	e893 0006 	ldmia.w	r3, {r1, r2}
   105ee:	f004 fa85 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
   105f2:	687a      	ldr	r2, [r7, #4]
   105f4:	4b07      	ldr	r3, [pc, #28]	(10614 <_ZN7GobeletC1Ev+0x4c>)
   105f6:	6013      	str	r3, [r2, #0]
   105f8:	687b      	ldr	r3, [r7, #4]
   105fa:	f103 0318 	add.w	r3, r3, #24	; 0x18
   105fe:	4618      	mov	r0, r3
   10600:	f7fd ff54 	bl	e4ac <_ZN8PositionC1Ev>
   10604:	687b      	ldr	r3, [r7, #4]
   10606:	4618      	mov	r0, r3
   10608:	f107 0714 	add.w	r7, r7, #20	; 0x14
   1060c:	46bd      	mov	sp, r7
   1060e:	bd90      	pop	{r4, r7, pc}
   10610:	00000000 	.word	0x00000000
   10614:	00021b08 	.word	0x00021b08

00010618 <_ZN7GobeletC2Ev>:
   10618:	b590      	push	{r4, r7, lr}
   1061a:	b085      	sub	sp, #20
   1061c:	af00      	add	r7, sp, #0
   1061e:	6078      	str	r0, [r7, #4]
   10620:	687c      	ldr	r4, [r7, #4]
   10622:	f107 0308 	add.w	r3, r7, #8	; 0x8
   10626:	4618      	mov	r0, r3
   10628:	490d      	ldr	r1, [pc, #52]	(10660 <_ZN7GobeletC2Ev+0x48>)
   1062a:	4a0d      	ldr	r2, [pc, #52]	(10660 <_ZN7GobeletC2Ev+0x48>)
   1062c:	f04f 0301 	mov.w	r3, #1	; 0x1
   10630:	f7fd ff64 	bl	e4fc <_ZN8PositionC1Effb>
   10634:	4620      	mov	r0, r4
   10636:	f107 0308 	add.w	r3, r7, #8	; 0x8
   1063a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1063e:	f004 fa5d 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
   10642:	687a      	ldr	r2, [r7, #4]
   10644:	4b07      	ldr	r3, [pc, #28]	(10664 <_ZN7GobeletC2Ev+0x4c>)
   10646:	6013      	str	r3, [r2, #0]
   10648:	687b      	ldr	r3, [r7, #4]
   1064a:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1064e:	4618      	mov	r0, r3
   10650:	f7fd ff2c 	bl	e4ac <_ZN8PositionC1Ev>
   10654:	687b      	ldr	r3, [r7, #4]
   10656:	4618      	mov	r0, r3
   10658:	f107 0714 	add.w	r7, r7, #20	; 0x14
   1065c:	46bd      	mov	sp, r7
   1065e:	bd90      	pop	{r4, r7, pc}
   10660:	00000000 	.word	0x00000000
   10664:	00021b08 	.word	0x00021b08

00010668 <_ZN9Krabi201513getScoreEtapeEi>:
        default :
            this->tableauEtapes[this->etapeEnCours]->setEtapeType(Etape::POINT_PASSAGE);
    }
}

int Krabi2015::getScoreEtape(int i){
   10668:	b580      	push	{r7, lr}
   1066a:	b084      	sub	sp, #16
   1066c:	af00      	add	r7, sp, #0
   1066e:	60f8      	str	r0, [r7, #12]
   10670:	60b9      	str	r1, [r7, #8]
    /* TODO : Supprimer le modificateur temporel et inclure directement un coefficient dans le score pour les actions longues
       Plus tard : pourquoi pas changer le système en ayant les FEU etc... fils de Etape, ça éviterait aussi le switch dans updateStock().
       Juste faire attention à comment transmettre le stock à update.
     */
    switch (this->tableauEtapesTotal[i]->getEtapeType()){
   10672:	68fb      	ldr	r3, [r7, #12]
   10674:	6b5a      	ldr	r2, [r3, #52]
   10676:	68bb      	ldr	r3, [r7, #8]
   10678:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1067c:	4413      	add	r3, r2
   1067e:	681b      	ldr	r3, [r3, #0]
   10680:	4618      	mov	r0, r3
   10682:	f7ff fc19 	bl	feb8 <_ZN5Etape12getEtapeTypeEv>
   10686:	4603      	mov	r3, r0
   10688:	2b15      	cmp	r3, #21
   1068a:	d84b      	bhi.n	10724 <_ZN9Krabi201513getScoreEtapeEi+0xbc>
   1068c:	a201      	add	r2, pc, #4	(adr r2, 10694 <_ZN9Krabi201513getScoreEtapeEi+0x2c>)
   1068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10692:	46c0      	nop			(mov r8, r8)
   10694:	0001071d 	.word	0x0001071d
   10698:	00010725 	.word	0x00010725
   1069c:	00010725 	.word	0x00010725
   106a0:	00010725 	.word	0x00010725
   106a4:	00010725 	.word	0x00010725
   106a8:	000106ed 	.word	0x000106ed
   106ac:	00010725 	.word	0x00010725
   106b0:	00010725 	.word	0x00010725
   106b4:	00010725 	.word	0x00010725
   106b8:	00010725 	.word	0x00010725
   106bc:	00010725 	.word	0x00010725
   106c0:	00010725 	.word	0x00010725
   106c4:	00010725 	.word	0x00010725
   106c8:	00010725 	.word	0x00010725
   106cc:	00010725 	.word	0x00010725
   106d0:	00010725 	.word	0x00010725
   106d4:	00010725 	.word	0x00010725
   106d8:	000106f5 	.word	0x000106f5
   106dc:	000106fd 	.word	0x000106fd
   106e0:	0001070d 	.word	0x0001070d
   106e4:	00010705 	.word	0x00010705
   106e8:	00010715 	.word	0x00010715
        case Etape::DEPART :
            return 0;
   106ec:	f04f 0300 	mov.w	r3, #0	; 0x0
   106f0:	607b      	str	r3, [r7, #4]
   106f2:	e01a      	b.n	1072a <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::CLAP :
            return 50;
   106f4:	f04f 0232 	mov.w	r2, #50	; 0x32
   106f8:	607a      	str	r2, [r7, #4]
   106fa:	e016      	b.n	1072a <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::GOBELET :
            return 0;//ce devrait être 40
   106fc:	f04f 0300 	mov.w	r3, #0	; 0x0
   10700:	607b      	str	r3, [r7, #4]
   10702:	e012      	b.n	1072a <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::AMPOULE :
            return 10;
   10704:	f04f 020a 	mov.w	r2, #10	; 0xa
   10708:	607a      	str	r2, [r7, #4]
   1070a:	e00e      	b.n	1072a <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::PIED :
            return 0;//ce devrait être 20
   1070c:	f04f 0300 	mov.w	r3, #0	; 0x0
   10710:	607b      	str	r3, [r7, #4]
   10712:	e00a      	b.n	1072a <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::TAPIS :
            return 100;
   10714:	f04f 0264 	mov.w	r2, #100	; 0x64
   10718:	607a      	str	r2, [r7, #4]
   1071a:	e006      	b.n	1072a <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::POINT_PASSAGE :
            return 0;
   1071c:	f04f 0300 	mov.w	r3, #0	; 0x0
   10720:	607b      	str	r3, [r7, #4]
   10722:	e002      	b.n	1072a <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        default :
            return 0;
   10724:	f04f 0200 	mov.w	r2, #0	; 0x0
   10728:	607a      	str	r2, [r7, #4]
   1072a:	687b      	ldr	r3, [r7, #4]
            break;
    }
}
   1072c:	4618      	mov	r0, r3
   1072e:	f107 0710 	add.w	r7, r7, #16	; 0x10
   10732:	46bd      	mov	sp, r7
   10734:	bd80      	pop	{r7, pc}
   10736:	46c0      	nop			(mov r8, r8)

00010738 <_ZN9Krabi201511updateStockEv>:

    // Lancer Dijkstra
    startDijkstra();
}

void Krabi2015::updateStock(){
   10738:	b580      	push	{r7, lr}
   1073a:	b082      	sub	sp, #8
   1073c:	af00      	add	r7, sp, #0
   1073e:	6078      	str	r0, [r7, #4]
    switch(this->tableauEtapes[this->etapeEnCours]->getEtapeType()){
   10740:	687b      	ldr	r3, [r7, #4]
   10742:	6b1a      	ldr	r2, [r3, #48]
   10744:	687b      	ldr	r3, [r7, #4]
   10746:	699b      	ldr	r3, [r3, #24]
   10748:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1074c:	4413      	add	r3, r2
   1074e:	681b      	ldr	r3, [r3, #0]
   10750:	4618      	mov	r0, r3
   10752:	f7ff fbb1 	bl	feb8 <_ZN5Etape12getEtapeTypeEv>
   10756:	4603      	mov	r3, r0
   10758:	2b05      	cmp	r3, #5
   1075a:	d10d      	bne.n	10778 <_ZN9Krabi201511updateStockEv+0x40>
        case Etape::DEPART :
            this->tableauEtapes[this->etapeEnCours]->setEtapeType(Etape::POINT_PASSAGE);
   1075c:	687b      	ldr	r3, [r7, #4]
   1075e:	6b1a      	ldr	r2, [r3, #48]
   10760:	687b      	ldr	r3, [r7, #4]
   10762:	699b      	ldr	r3, [r3, #24]
   10764:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10768:	4413      	add	r3, r2
   1076a:	681b      	ldr	r3, [r3, #0]
   1076c:	4618      	mov	r0, r3
   1076e:	f04f 0100 	mov.w	r1, #0	; 0x0
   10772:	f7ff fbad 	bl	fed0 <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>
   10776:	e00c      	b.n	10792 <_ZN9Krabi201511updateStockEv+0x5a>
            break;
        default :
            this->tableauEtapes[this->etapeEnCours]->setEtapeType(Etape::POINT_PASSAGE);
   10778:	687b      	ldr	r3, [r7, #4]
   1077a:	6b1a      	ldr	r2, [r3, #48]
   1077c:	687b      	ldr	r3, [r7, #4]
   1077e:	699b      	ldr	r3, [r3, #24]
   10780:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10784:	4413      	add	r3, r2
   10786:	681b      	ldr	r3, [r3, #0]
   10788:	4618      	mov	r0, r3
   1078a:	f04f 0100 	mov.w	r1, #0	; 0x0
   1078e:	f7ff fb9f 	bl	fed0 <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>
    }
}
   10792:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10796:	46bd      	mov	sp, r7
   10798:	bd80      	pop	{r7, pc}
   1079a:	46c0      	nop			(mov r8, r8)

0001079c <_ZN9Krabi2015C1Eb>:
#include "krabi2015.h"

Krabi2015::Krabi2015(bool isYellow) : StrategieV3(isYellow)
   1079c:	b590      	push	{r4, r7, lr}
   1079e:	f5ad 6db8 	sub.w	sp, sp, #1472	; 0x5c0
   107a2:	b081      	sub	sp, #4
   107a4:	af04      	add	r7, sp, #16
   107a6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   107aa:	6018      	str	r0, [r3, #0]
   107ac:	460a      	mov	r2, r1
   107ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
   107b2:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   107b6:	701a      	strb	r2, [r3, #0]
   107b8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   107bc:	681a      	ldr	r2, [r3, #0]
   107be:	f507 7300 	add.w	r3, r7, #512	; 0x200
   107c2:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   107c6:	781b      	ldrb	r3, [r3, #0]
   107c8:	4610      	mov	r0, r2
   107ca:	4619      	mov	r1, r3
   107cc:	f006 f9d4 	bl	16b78 <_ZN11StrategieV3C2Eb>
   107d0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   107d4:	681a      	ldr	r2, [r3, #0]
   107d6:	f8df 3c70 	ldr.w	r3, [pc, #3184]	; 11448 <_ZN9Krabi2015C1Eb+0xcac>
   107da:	6013      	str	r3, [r2, #0]
   107dc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   107e0:	681b      	ldr	r3, [r3, #0]
   107e2:	f103 0348 	add.w	r3, r3, #72	; 0x48
   107e6:	607b      	str	r3, [r7, #4]
   107e8:	f04f 0302 	mov.w	r3, #2	; 0x2
   107ec:	60bb      	str	r3, [r7, #8]
   107ee:	e00a      	b.n	10806 <_ZN9Krabi2015C1Eb+0x6a>
   107f0:	6878      	ldr	r0, [r7, #4]
   107f2:	f7fe fe05 	bl	f400 <_ZN4ClapC1Ev>
   107f6:	687b      	ldr	r3, [r7, #4]
   107f8:	f103 0328 	add.w	r3, r3, #40	; 0x28
   107fc:	607b      	str	r3, [r7, #4]
   107fe:	68bb      	ldr	r3, [r7, #8]
   10800:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10804:	60bb      	str	r3, [r7, #8]
   10806:	68bb      	ldr	r3, [r7, #8]
   10808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1080c:	d1f0      	bne.n	107f0 <_ZN9Krabi2015C1Eb+0x54>
   1080e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10812:	681b      	ldr	r3, [r3, #0]
   10814:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   10818:	60fb      	str	r3, [r7, #12]
   1081a:	f04f 0304 	mov.w	r3, #4	; 0x4
   1081e:	613b      	str	r3, [r7, #16]
   10820:	e00a      	b.n	10838 <_ZN9Krabi2015C1Eb+0x9c>
   10822:	68f8      	ldr	r0, [r7, #12]
   10824:	f7ff fed0 	bl	105c8 <_ZN7GobeletC1Ev>
   10828:	68fb      	ldr	r3, [r7, #12]
   1082a:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1082e:	60fb      	str	r3, [r7, #12]
   10830:	693b      	ldr	r3, [r7, #16]
   10832:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10836:	613b      	str	r3, [r7, #16]
   10838:	693b      	ldr	r3, [r7, #16]
   1083a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1083e:	d1f0      	bne.n	10822 <_ZN9Krabi2015C1Eb+0x86>
   10840:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10844:	681b      	ldr	r3, [r3, #0]
   10846:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1084a:	617b      	str	r3, [r7, #20]
   1084c:	f04f 0300 	mov.w	r3, #0	; 0x0
   10850:	61bb      	str	r3, [r7, #24]
   10852:	e00a      	b.n	1086a <_ZN9Krabi2015C1Eb+0xce>
   10854:	6978      	ldr	r0, [r7, #20]
   10856:	f006 fadb 	bl	16e10 <_ZN5TapisC1Ev>
   1085a:	697b      	ldr	r3, [r7, #20]
   1085c:	f103 0328 	add.w	r3, r3, #40	; 0x28
   10860:	617b      	str	r3, [r7, #20]
   10862:	69bb      	ldr	r3, [r7, #24]
   10864:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10868:	61bb      	str	r3, [r7, #24]
   1086a:	69bb      	ldr	r3, [r7, #24]
   1086c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10870:	d1f0      	bne.n	10854 <_ZN9Krabi2015C1Eb+0xb8>
{
    // Initialisation des stocks

    //Initialisation des tableaux d'étapes
    this->nombreEtapes = NOMBRE_ETAPES;
   10872:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10876:	681a      	ldr	r2, [r3, #0]
   10878:	f04f 0326 	mov.w	r3, #38	; 0x26
   1087c:	61d3      	str	r3, [r2, #28]
    this->numeroEtapeGarage = ETAPE_GARAGE;
   1087e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10882:	681a      	ldr	r2, [r3, #0]
   10884:	f04f 0301 	mov.w	r3, #1	; 0x1
   10888:	6213      	str	r3, [r2, #32]
    tableauEtapesTotal = new Etape*[NOMBRE_ETAPES];
   1088a:	f04f 0098 	mov.w	r0, #152	; 0x98
   1088e:	f7fd fd67 	bl	e360 <_Znaj>
   10892:	4603      	mov	r3, r0
   10894:	461a      	mov	r2, r3
   10896:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1089a:	681b      	ldr	r3, [r3, #0]
   1089c:	635a      	str	r2, [r3, #52]
    actionEtape = new MediumLevelAction*[NOMBRE_ETAPES];
   1089e:	f04f 0098 	mov.w	r0, #152	; 0x98
   108a2:	f7fd fd5d 	bl	e360 <_Znaj>
   108a6:	4603      	mov	r3, r0
   108a8:	461a      	mov	r2, r3
   108aa:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   108ae:	681b      	ldr	r3, [r3, #0]
   108b0:	625a      	str	r2, [r3, #36]
    actionGoto = new ActionGoTo[NOMBRE_ETAPES];
   108b2:	f44f 60e5 	mov.w	r0, #1832	; 0x728
   108b6:	f7fd fd53 	bl	e360 <_Znaj>
   108ba:	4603      	mov	r3, r0
   108bc:	61fb      	str	r3, [r7, #28]
   108be:	69fb      	ldr	r3, [r7, #28]
   108c0:	2b00      	cmp	r3, #0
   108c2:	d03c      	beq.n	1093e <_ZN9Krabi2015C1Eb+0x1a2>
   108c4:	69fb      	ldr	r3, [r7, #28]
   108c6:	f103 0308 	add.w	r3, r3, #8	; 0x8
   108ca:	627b      	str	r3, [r7, #36]
   108cc:	6a7b      	ldr	r3, [r7, #36]
   108ce:	f1a3 0304 	sub.w	r3, r3, #4	; 0x4
   108d2:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   108d6:	f04f 0330 	mov.w	r3, #48	; 0x30
   108da:	6013      	str	r3, [r2, #0]
   108dc:	6a7b      	ldr	r3, [r7, #36]
   108de:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   108e2:	f04f 0326 	mov.w	r3, #38	; 0x26
   108e6:	6013      	str	r3, [r2, #0]
   108e8:	6a7b      	ldr	r3, [r7, #36]
   108ea:	62bb      	str	r3, [r7, #40]
   108ec:	f04f 0325 	mov.w	r3, #37	; 0x25
   108f0:	62fb      	str	r3, [r7, #44]
   108f2:	e01d      	b.n	10930 <_ZN9Krabi2015C1Eb+0x194>
   108f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
   108f8:	4618      	mov	r0, r3
   108fa:	f8df 1b50 	ldr.w	r1, [pc, #2896]	; 1144c <_ZN9Krabi2015C1Eb+0xcb0>
   108fe:	f8df 2b4c 	ldr.w	r2, [pc, #2892]	; 1144c <_ZN9Krabi2015C1Eb+0xcb0>
   10902:	f04f 0301 	mov.w	r3, #1	; 0x1
   10906:	f7fd fdf9 	bl	e4fc <_ZN8PositionC1Effb>
   1090a:	f507 7200 	add.w	r2, r7, #512	; 0x200
   1090e:	f8df 3b40 	ldr.w	r3, [pc, #2880]	; 11450 <_ZN9Krabi2015C1Eb+0xcb4>
   10912:	9300      	str	r3, [sp, #0]
   10914:	6ab8      	ldr	r0, [r7, #40]
   10916:	ca06      	ldmia	r2!, {r1, r2}
   10918:	f04f 0300 	mov.w	r3, #0	; 0x0
   1091c:	f7fe fb14 	bl	ef48 <_ZN10ActionGoToC1E8Positionbf>
   10920:	6abb      	ldr	r3, [r7, #40]
   10922:	f103 0330 	add.w	r3, r3, #48	; 0x30
   10926:	62bb      	str	r3, [r7, #40]
   10928:	6afb      	ldr	r3, [r7, #44]
   1092a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   1092e:	62fb      	str	r3, [r7, #44]
   10930:	6afb      	ldr	r3, [r7, #44]
   10932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10936:	d1dd      	bne.n	108f4 <_ZN9Krabi2015C1Eb+0x158>
   10938:	6a7b      	ldr	r3, [r7, #36]
   1093a:	623b      	str	r3, [r7, #32]
   1093c:	e001      	b.n	10942 <_ZN9Krabi2015C1Eb+0x1a6>
   1093e:	69fb      	ldr	r3, [r7, #28]
   10940:	623b      	str	r3, [r7, #32]
   10942:	6a3a      	ldr	r2, [r7, #32]
   10944:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10948:	681b      	ldr	r3, [r3, #0]
   1094a:	629a      	str	r2, [r3, #40]
    // TODO: A supprimer pour une variable statique dans Etape
    int numeroEtape = 0;
   1094c:	f04f 0300 	mov.w	r3, #0	; 0x0
   10950:	f8c7 3510 	str.w	r3, [r7, #1296]

    // Création des étapes
    // Arguments : Position, numéro étape, tableau des étapes, type d'étape, état de l'étape, nombre étapes liées
    Etape* etape0 = new Etape(Position(250, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPART, -1, 0); //départ au fond de la zone de départ
   10954:	f507 7202 	add.w	r2, r7, #520	; 0x208
   10958:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1095c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10960:	781b      	ldrb	r3, [r3, #0]
   10962:	4610      	mov	r0, r2
   10964:	f8df 1aec 	ldr.w	r1, [pc, #2796]	; 11454 <_ZN9Krabi2015C1Eb+0xcb8>
   10968:	f8df 2aec 	ldr.w	r2, [pc, #2796]	; 11458 <_ZN9Krabi2015C1Eb+0xcbc>
   1096c:	f7fd fdc6 	bl	e4fc <_ZN8PositionC1Effb>
   10970:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10974:	633b      	str	r3, [r7, #48]
   10976:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1097a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1097e:	f8c7 3510 	str.w	r3, [r7, #1296]
   10982:	f04f 0034 	mov.w	r0, #52	; 0x34
   10986:	f7fd fc53 	bl	e230 <_Znwj>
   1098a:	4603      	mov	r3, r0
   1098c:	637b      	str	r3, [r7, #52]
   1098e:	6b7b      	ldr	r3, [r7, #52]
   10990:	2b00      	cmp	r3, #0
   10992:	d017      	beq.n	109c4 <_ZN9Krabi2015C1Eb+0x228>
   10994:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10998:	681b      	ldr	r3, [r3, #0]
   1099a:	6b5b      	ldr	r3, [r3, #52]
   1099c:	f507 7202 	add.w	r2, r7, #520	; 0x208
   109a0:	9300      	str	r3, [sp, #0]
   109a2:	f04f 0305 	mov.w	r3, #5	; 0x5
   109a6:	9301      	str	r3, [sp, #4]
   109a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   109ac:	9302      	str	r3, [sp, #8]
   109ae:	f04f 0300 	mov.w	r3, #0	; 0x0
   109b2:	9303      	str	r3, [sp, #12]
   109b4:	6b78      	ldr	r0, [r7, #52]
   109b6:	ca06      	ldmia	r2!, {r1, r2}
   109b8:	6b3b      	ldr	r3, [r7, #48]
   109ba:	f7ff fc3d 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   109be:	6b7b      	ldr	r3, [r7, #52]
   109c0:	63bb      	str	r3, [r7, #56]
   109c2:	e001      	b.n	109c8 <_ZN9Krabi2015C1Eb+0x22c>
   109c4:	6b7b      	ldr	r3, [r7, #52]
   109c6:	63bb      	str	r3, [r7, #56]
   109c8:	6bbb      	ldr	r3, [r7, #56]
   109ca:	f8c7 3514 	str.w	r3, [r7, #1300]
    Etape* etape1 = new Etape(Position(700, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   109ce:	f507 7204 	add.w	r2, r7, #528	; 0x210
   109d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
   109d6:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   109da:	781b      	ldrb	r3, [r3, #0]
   109dc:	4610      	mov	r0, r2
   109de:	f8df 1a7c 	ldr.w	r1, [pc, #2684]	; 1145c <_ZN9Krabi2015C1Eb+0xcc0>
   109e2:	f8df 2a74 	ldr.w	r2, [pc, #2676]	; 11458 <_ZN9Krabi2015C1Eb+0xcbc>
   109e6:	f7fd fd89 	bl	e4fc <_ZN8PositionC1Effb>
   109ea:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   109ee:	63fb      	str	r3, [r7, #60]
   109f0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   109f4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   109f8:	f8c7 3510 	str.w	r3, [r7, #1296]
   109fc:	f04f 0034 	mov.w	r0, #52	; 0x34
   10a00:	f7fd fc16 	bl	e230 <_Znwj>
   10a04:	4603      	mov	r3, r0
   10a06:	643b      	str	r3, [r7, #64]
   10a08:	6c3b      	ldr	r3, [r7, #64]
   10a0a:	2b00      	cmp	r3, #0
   10a0c:	d017      	beq.n	10a3e <_ZN9Krabi2015C1Eb+0x2a2>
   10a0e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10a12:	681b      	ldr	r3, [r3, #0]
   10a14:	6b5b      	ldr	r3, [r3, #52]
   10a16:	f507 7204 	add.w	r2, r7, #528	; 0x210
   10a1a:	9300      	str	r3, [sp, #0]
   10a1c:	f04f 0300 	mov.w	r3, #0	; 0x0
   10a20:	9301      	str	r3, [sp, #4]
   10a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10a26:	9302      	str	r3, [sp, #8]
   10a28:	f04f 0300 	mov.w	r3, #0	; 0x0
   10a2c:	9303      	str	r3, [sp, #12]
   10a2e:	6c38      	ldr	r0, [r7, #64]
   10a30:	ca06      	ldmia	r2!, {r1, r2}
   10a32:	6bfb      	ldr	r3, [r7, #60]
   10a34:	f7ff fc00 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10a38:	6c3b      	ldr	r3, [r7, #64]
   10a3a:	647b      	str	r3, [r7, #68]
   10a3c:	e001      	b.n	10a42 <_ZN9Krabi2015C1Eb+0x2a6>
   10a3e:	6c3b      	ldr	r3, [r7, #64]
   10a40:	647b      	str	r3, [r7, #68]
   10a42:	6c7b      	ldr	r3, [r7, #68]
   10a44:	f8c7 3518 	str.w	r3, [r7, #1304]
    Etape* etape2 = new Etape(Position(836, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   10a48:	f507 7206 	add.w	r2, r7, #536	; 0x218
   10a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10a50:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10a54:	781b      	ldrb	r3, [r3, #0]
   10a56:	4610      	mov	r0, r2
   10a58:	f8df 1a04 	ldr.w	r1, [pc, #2564]	; 11460 <_ZN9Krabi2015C1Eb+0xcc4>
   10a5c:	f8df 2a04 	ldr.w	r2, [pc, #2564]	; 11464 <_ZN9Krabi2015C1Eb+0xcc8>
   10a60:	f7fd fd4c 	bl	e4fc <_ZN8PositionC1Effb>
   10a64:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10a68:	64bb      	str	r3, [r7, #72]
   10a6a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10a6e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10a72:	f8c7 3510 	str.w	r3, [r7, #1296]
   10a76:	f04f 0034 	mov.w	r0, #52	; 0x34
   10a7a:	f7fd fbd9 	bl	e230 <_Znwj>
   10a7e:	4603      	mov	r3, r0
   10a80:	64fb      	str	r3, [r7, #76]
   10a82:	6cfb      	ldr	r3, [r7, #76]
   10a84:	2b00      	cmp	r3, #0
   10a86:	d017      	beq.n	10ab8 <_ZN9Krabi2015C1Eb+0x31c>
   10a88:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10a8c:	681b      	ldr	r3, [r3, #0]
   10a8e:	6b5b      	ldr	r3, [r3, #52]
   10a90:	f507 7206 	add.w	r2, r7, #536	; 0x218
   10a94:	9300      	str	r3, [sp, #0]
   10a96:	f04f 0311 	mov.w	r3, #17	; 0x11
   10a9a:	9301      	str	r3, [sp, #4]
   10a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10aa0:	9302      	str	r3, [sp, #8]
   10aa2:	f04f 0300 	mov.w	r3, #0	; 0x0
   10aa6:	9303      	str	r3, [sp, #12]
   10aa8:	6cf8      	ldr	r0, [r7, #76]
   10aaa:	ca06      	ldmia	r2!, {r1, r2}
   10aac:	6cbb      	ldr	r3, [r7, #72]
   10aae:	f7ff fbc3 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10ab2:	6cfb      	ldr	r3, [r7, #76]
   10ab4:	653b      	str	r3, [r7, #80]
   10ab6:	e001      	b.n	10abc <_ZN9Krabi2015C1Eb+0x320>
   10ab8:	6cfb      	ldr	r3, [r7, #76]
   10aba:	653b      	str	r3, [r7, #80]
   10abc:	6d3b      	ldr	r3, [r7, #80]
   10abe:	f8c7 351c 	str.w	r3, [r7, #1308]
    Etape* etape3 = new Etape(Position(1000, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   10ac2:	f507 7208 	add.w	r2, r7, #544	; 0x220
   10ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10aca:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10ace:	781b      	ldrb	r3, [r3, #0]
   10ad0:	4610      	mov	r0, r2
   10ad2:	f8df 1984 	ldr.w	r1, [pc, #2436]	; 11458 <_ZN9Krabi2015C1Eb+0xcbc>
   10ad6:	f8df 298c 	ldr.w	r2, [pc, #2444]	; 11464 <_ZN9Krabi2015C1Eb+0xcc8>
   10ada:	f7fd fd0f 	bl	e4fc <_ZN8PositionC1Effb>
   10ade:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10ae2:	657b      	str	r3, [r7, #84]
   10ae4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10ae8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10aec:	f8c7 3510 	str.w	r3, [r7, #1296]
   10af0:	f04f 0034 	mov.w	r0, #52	; 0x34
   10af4:	f7fd fb9c 	bl	e230 <_Znwj>
   10af8:	4603      	mov	r3, r0
   10afa:	65bb      	str	r3, [r7, #88]
   10afc:	6dbb      	ldr	r3, [r7, #88]
   10afe:	2b00      	cmp	r3, #0
   10b00:	d017      	beq.n	10b32 <_ZN9Krabi2015C1Eb+0x396>
   10b02:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10b06:	681b      	ldr	r3, [r3, #0]
   10b08:	6b5b      	ldr	r3, [r3, #52]
   10b0a:	f507 7208 	add.w	r2, r7, #544	; 0x220
   10b0e:	9300      	str	r3, [sp, #0]
   10b10:	f04f 0300 	mov.w	r3, #0	; 0x0
   10b14:	9301      	str	r3, [sp, #4]
   10b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10b1a:	9302      	str	r3, [sp, #8]
   10b1c:	f04f 0300 	mov.w	r3, #0	; 0x0
   10b20:	9303      	str	r3, [sp, #12]
   10b22:	6db8      	ldr	r0, [r7, #88]
   10b24:	ca06      	ldmia	r2!, {r1, r2}
   10b26:	6d7b      	ldr	r3, [r7, #84]
   10b28:	f7ff fb86 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10b2c:	6dbb      	ldr	r3, [r7, #88]
   10b2e:	65fb      	str	r3, [r7, #92]
   10b30:	e001      	b.n	10b36 <_ZN9Krabi2015C1Eb+0x39a>
   10b32:	6dbb      	ldr	r3, [r7, #88]
   10b34:	65fb      	str	r3, [r7, #92]
   10b36:	6dfb      	ldr	r3, [r7, #92]
   10b38:	f8c7 3520 	str.w	r3, [r7, #1312]
    Etape* etape4 = new Etape(Position(236, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   10b3c:	f507 720a 	add.w	r2, r7, #552	; 0x228
   10b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10b44:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10b48:	781b      	ldrb	r3, [r3, #0]
   10b4a:	4610      	mov	r0, r2
   10b4c:	f8df 1918 	ldr.w	r1, [pc, #2328]	; 11468 <_ZN9Krabi2015C1Eb+0xccc>
   10b50:	f8df 2910 	ldr.w	r2, [pc, #2320]	; 11464 <_ZN9Krabi2015C1Eb+0xcc8>
   10b54:	f7fd fcd2 	bl	e4fc <_ZN8PositionC1Effb>
   10b58:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10b5c:	663b      	str	r3, [r7, #96]
   10b5e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10b62:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10b66:	f8c7 3510 	str.w	r3, [r7, #1296]
   10b6a:	f04f 0034 	mov.w	r0, #52	; 0x34
   10b6e:	f7fd fb5f 	bl	e230 <_Znwj>
   10b72:	4603      	mov	r3, r0
   10b74:	667b      	str	r3, [r7, #100]
   10b76:	6e7b      	ldr	r3, [r7, #100]
   10b78:	2b00      	cmp	r3, #0
   10b7a:	d017      	beq.n	10bac <_ZN9Krabi2015C1Eb+0x410>
   10b7c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10b80:	681b      	ldr	r3, [r3, #0]
   10b82:	6b5b      	ldr	r3, [r3, #52]
   10b84:	f507 720a 	add.w	r2, r7, #552	; 0x228
   10b88:	9300      	str	r3, [sp, #0]
   10b8a:	f04f 0311 	mov.w	r3, #17	; 0x11
   10b8e:	9301      	str	r3, [sp, #4]
   10b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10b94:	9302      	str	r3, [sp, #8]
   10b96:	f04f 0300 	mov.w	r3, #0	; 0x0
   10b9a:	9303      	str	r3, [sp, #12]
   10b9c:	6e78      	ldr	r0, [r7, #100]
   10b9e:	ca06      	ldmia	r2!, {r1, r2}
   10ba0:	6e3b      	ldr	r3, [r7, #96]
   10ba2:	f7ff fb49 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10ba6:	6e7b      	ldr	r3, [r7, #100]
   10ba8:	66bb      	str	r3, [r7, #104]
   10baa:	e001      	b.n	10bb0 <_ZN9Krabi2015C1Eb+0x414>
   10bac:	6e7b      	ldr	r3, [r7, #100]
   10bae:	66bb      	str	r3, [r7, #104]
   10bb0:	6ebb      	ldr	r3, [r7, #104]
   10bb2:	f8c7 3524 	str.w	r3, [r7, #1316]
    Etape* etape5 = new Etape(Position(400, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   10bb6:	f507 720c 	add.w	r2, r7, #560	; 0x230
   10bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10bbe:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10bc2:	781b      	ldrb	r3, [r3, #0]
   10bc4:	4610      	mov	r0, r2
   10bc6:	f8df 18a4 	ldr.w	r1, [pc, #2212]	; 1146c <_ZN9Krabi2015C1Eb+0xcd0>
   10bca:	f8df 2898 	ldr.w	r2, [pc, #2200]	; 11464 <_ZN9Krabi2015C1Eb+0xcc8>
   10bce:	f7fd fc95 	bl	e4fc <_ZN8PositionC1Effb>
   10bd2:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10bd6:	66fb      	str	r3, [r7, #108]
   10bd8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10bdc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10be0:	f8c7 3510 	str.w	r3, [r7, #1296]
   10be4:	f04f 0034 	mov.w	r0, #52	; 0x34
   10be8:	f7fd fb22 	bl	e230 <_Znwj>
   10bec:	4603      	mov	r3, r0
   10bee:	673b      	str	r3, [r7, #112]
   10bf0:	6f3b      	ldr	r3, [r7, #112]
   10bf2:	2b00      	cmp	r3, #0
   10bf4:	d017      	beq.n	10c26 <_ZN9Krabi2015C1Eb+0x48a>
   10bf6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10bfa:	681b      	ldr	r3, [r3, #0]
   10bfc:	6b5b      	ldr	r3, [r3, #52]
   10bfe:	f507 720c 	add.w	r2, r7, #560	; 0x230
   10c02:	9300      	str	r3, [sp, #0]
   10c04:	f04f 0300 	mov.w	r3, #0	; 0x0
   10c08:	9301      	str	r3, [sp, #4]
   10c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10c0e:	9302      	str	r3, [sp, #8]
   10c10:	f04f 0300 	mov.w	r3, #0	; 0x0
   10c14:	9303      	str	r3, [sp, #12]
   10c16:	6f38      	ldr	r0, [r7, #112]
   10c18:	ca06      	ldmia	r2!, {r1, r2}
   10c1a:	6efb      	ldr	r3, [r7, #108]
   10c1c:	f7ff fb0c 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10c20:	6f3b      	ldr	r3, [r7, #112]
   10c22:	677b      	str	r3, [r7, #116]
   10c24:	e001      	b.n	10c2a <_ZN9Krabi2015C1Eb+0x48e>
   10c26:	6f3b      	ldr	r3, [r7, #112]
   10c28:	677b      	str	r3, [r7, #116]
   10c2a:	6f7b      	ldr	r3, [r7, #116]
   10c2c:	f8c7 3528 	str.w	r3, [r7, #1320]
    Etape* etape6 = new Etape(Position(2500, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   10c30:	f507 720e 	add.w	r2, r7, #568	; 0x238
   10c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10c38:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10c3c:	781b      	ldrb	r3, [r3, #0]
   10c3e:	4610      	mov	r0, r2
   10c40:	f8df 182c 	ldr.w	r1, [pc, #2092]	; 11470 <_ZN9Krabi2015C1Eb+0xcd4>
   10c44:	f8df 281c 	ldr.w	r2, [pc, #2076]	; 11464 <_ZN9Krabi2015C1Eb+0xcc8>
   10c48:	f7fd fc58 	bl	e4fc <_ZN8PositionC1Effb>
   10c4c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10c50:	67bb      	str	r3, [r7, #120]
   10c52:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10c56:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10c5a:	f8c7 3510 	str.w	r3, [r7, #1296]
   10c5e:	f04f 0034 	mov.w	r0, #52	; 0x34
   10c62:	f7fd fae5 	bl	e230 <_Znwj>
   10c66:	4603      	mov	r3, r0
   10c68:	67fb      	str	r3, [r7, #124]
   10c6a:	6ffb      	ldr	r3, [r7, #124]
   10c6c:	2b00      	cmp	r3, #0
   10c6e:	d018      	beq.n	10ca2 <_ZN9Krabi2015C1Eb+0x506>
   10c70:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10c74:	681b      	ldr	r3, [r3, #0]
   10c76:	6b5b      	ldr	r3, [r3, #52]
   10c78:	f507 720e 	add.w	r2, r7, #568	; 0x238
   10c7c:	9300      	str	r3, [sp, #0]
   10c7e:	f04f 0311 	mov.w	r3, #17	; 0x11
   10c82:	9301      	str	r3, [sp, #4]
   10c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10c88:	9302      	str	r3, [sp, #8]
   10c8a:	f04f 0300 	mov.w	r3, #0	; 0x0
   10c8e:	9303      	str	r3, [sp, #12]
   10c90:	6ff8      	ldr	r0, [r7, #124]
   10c92:	ca06      	ldmia	r2!, {r1, r2}
   10c94:	6fbb      	ldr	r3, [r7, #120]
   10c96:	f7ff facf 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10c9a:	6ffb      	ldr	r3, [r7, #124]
   10c9c:	f8c7 3080 	str.w	r3, [r7, #128]
   10ca0:	e002      	b.n	10ca8 <_ZN9Krabi2015C1Eb+0x50c>
   10ca2:	6ffb      	ldr	r3, [r7, #124]
   10ca4:	f8c7 3080 	str.w	r3, [r7, #128]
   10ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]
   10cac:	f8c7 352c 	str.w	r3, [r7, #1324]
    Etape* etape7 = new Etape(Position(2300, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   10cb0:	f507 7210 	add.w	r2, r7, #576	; 0x240
   10cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10cb8:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10cbc:	781b      	ldrb	r3, [r3, #0]
   10cbe:	4610      	mov	r0, r2
   10cc0:	f8df 17b0 	ldr.w	r1, [pc, #1968]	; 11474 <_ZN9Krabi2015C1Eb+0xcd8>
   10cc4:	f8df 279c 	ldr.w	r2, [pc, #1948]	; 11464 <_ZN9Krabi2015C1Eb+0xcc8>
   10cc8:	f7fd fc18 	bl	e4fc <_ZN8PositionC1Effb>
   10ccc:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10cd0:	f8c7 3084 	str.w	r3, [r7, #132]
   10cd4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10cd8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10cdc:	f8c7 3510 	str.w	r3, [r7, #1296]
   10ce0:	f04f 0034 	mov.w	r0, #52	; 0x34
   10ce4:	f7fd faa4 	bl	e230 <_Znwj>
   10ce8:	4603      	mov	r3, r0
   10cea:	f8c7 3088 	str.w	r3, [r7, #136]
   10cee:	f8d7 3088 	ldr.w	r3, [r7, #136]
   10cf2:	2b00      	cmp	r3, #0
   10cf4:	d01b      	beq.n	10d2e <_ZN9Krabi2015C1Eb+0x592>
   10cf6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10cfa:	681b      	ldr	r3, [r3, #0]
   10cfc:	6b5b      	ldr	r3, [r3, #52]
   10cfe:	f507 7210 	add.w	r2, r7, #576	; 0x240
   10d02:	9300      	str	r3, [sp, #0]
   10d04:	f04f 0300 	mov.w	r3, #0	; 0x0
   10d08:	9301      	str	r3, [sp, #4]
   10d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10d0e:	9302      	str	r3, [sp, #8]
   10d10:	f04f 0300 	mov.w	r3, #0	; 0x0
   10d14:	9303      	str	r3, [sp, #12]
   10d16:	f8d7 0088 	ldr.w	r0, [r7, #136]
   10d1a:	ca06      	ldmia	r2!, {r1, r2}
   10d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]
   10d20:	f7ff fa8a 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10d24:	f8d7 3088 	ldr.w	r3, [r7, #136]
   10d28:	f8c7 308c 	str.w	r3, [r7, #140]
   10d2c:	e003      	b.n	10d36 <_ZN9Krabi2015C1Eb+0x59a>
   10d2e:	f8d7 3088 	ldr.w	r3, [r7, #136]
   10d32:	f8c7 308c 	str.w	r3, [r7, #140]
   10d36:	f8d7 308c 	ldr.w	r3, [r7, #140]
   10d3a:	f8c7 3530 	str.w	r3, [r7, #1328]
    Etape* etape8 = new Etape(Position(250, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   10d3e:	f507 7212 	add.w	r2, r7, #584	; 0x248
   10d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10d46:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10d4a:	781b      	ldrb	r3, [r3, #0]
   10d4c:	4610      	mov	r0, r2
   10d4e:	f8df 1704 	ldr.w	r1, [pc, #1796]	; 11454 <_ZN9Krabi2015C1Eb+0xcb8>
   10d52:	f8df 2724 	ldr.w	r2, [pc, #1828]	; 11478 <_ZN9Krabi2015C1Eb+0xcdc>
   10d56:	f7fd fbd1 	bl	e4fc <_ZN8PositionC1Effb>
   10d5a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10d5e:	f8c7 3090 	str.w	r3, [r7, #144]
   10d62:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10d66:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10d6a:	f8c7 3510 	str.w	r3, [r7, #1296]
   10d6e:	f04f 0034 	mov.w	r0, #52	; 0x34
   10d72:	f7fd fa5d 	bl	e230 <_Znwj>
   10d76:	4603      	mov	r3, r0
   10d78:	f8c7 3094 	str.w	r3, [r7, #148]
   10d7c:	f8d7 3094 	ldr.w	r3, [r7, #148]
   10d80:	2b00      	cmp	r3, #0
   10d82:	d01b      	beq.n	10dbc <_ZN9Krabi2015C1Eb+0x620>
   10d84:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10d88:	681b      	ldr	r3, [r3, #0]
   10d8a:	6b5b      	ldr	r3, [r3, #52]
   10d8c:	f507 7212 	add.w	r2, r7, #584	; 0x248
   10d90:	9300      	str	r3, [sp, #0]
   10d92:	f04f 0312 	mov.w	r3, #18	; 0x12
   10d96:	9301      	str	r3, [sp, #4]
   10d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10d9c:	9302      	str	r3, [sp, #8]
   10d9e:	f04f 0300 	mov.w	r3, #0	; 0x0
   10da2:	9303      	str	r3, [sp, #12]
   10da4:	f8d7 0094 	ldr.w	r0, [r7, #148]
   10da8:	ca06      	ldmia	r2!, {r1, r2}
   10daa:	f8d7 3090 	ldr.w	r3, [r7, #144]
   10dae:	f7ff fa43 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10db2:	f8d7 3094 	ldr.w	r3, [r7, #148]
   10db6:	f8c7 3098 	str.w	r3, [r7, #152]
   10dba:	e003      	b.n	10dc4 <_ZN9Krabi2015C1Eb+0x628>
   10dbc:	f8d7 3094 	ldr.w	r3, [r7, #148]
   10dc0:	f8c7 3098 	str.w	r3, [r7, #152]
   10dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]
   10dc8:	f8c7 3534 	str.w	r3, [r7, #1332]
    Etape* etape9 = new Etape(Position(910, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   10dcc:	f507 7214 	add.w	r2, r7, #592	; 0x250
   10dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10dd4:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10dd8:	781b      	ldrb	r3, [r3, #0]
   10dda:	4610      	mov	r0, r2
   10ddc:	f8df 169c 	ldr.w	r1, [pc, #1692]	; 1147c <_ZN9Krabi2015C1Eb+0xce0>
   10de0:	f8df 269c 	ldr.w	r2, [pc, #1692]	; 11480 <_ZN9Krabi2015C1Eb+0xce4>
   10de4:	f7fd fb8a 	bl	e4fc <_ZN8PositionC1Effb>
   10de8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10dec:	f8c7 309c 	str.w	r3, [r7, #156]
   10df0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10df4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10df8:	f8c7 3510 	str.w	r3, [r7, #1296]
   10dfc:	f04f 0034 	mov.w	r0, #52	; 0x34
   10e00:	f7fd fa16 	bl	e230 <_Znwj>
   10e04:	4603      	mov	r3, r0
   10e06:	f8c7 30a0 	str.w	r3, [r7, #160]
   10e0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   10e0e:	2b00      	cmp	r3, #0
   10e10:	d01b      	beq.n	10e4a <_ZN9Krabi2015C1Eb+0x6ae>
   10e12:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10e16:	681b      	ldr	r3, [r3, #0]
   10e18:	6b5b      	ldr	r3, [r3, #52]
   10e1a:	f507 7214 	add.w	r2, r7, #592	; 0x250
   10e1e:	9300      	str	r3, [sp, #0]
   10e20:	f04f 0312 	mov.w	r3, #18	; 0x12
   10e24:	9301      	str	r3, [sp, #4]
   10e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10e2a:	9302      	str	r3, [sp, #8]
   10e2c:	f04f 0300 	mov.w	r3, #0	; 0x0
   10e30:	9303      	str	r3, [sp, #12]
   10e32:	f8d7 00a0 	ldr.w	r0, [r7, #160]
   10e36:	ca06      	ldmia	r2!, {r1, r2}
   10e38:	f8d7 309c 	ldr.w	r3, [r7, #156]
   10e3c:	f7ff f9fc 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10e40:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   10e44:	f8c7 30a4 	str.w	r3, [r7, #164]
   10e48:	e003      	b.n	10e52 <_ZN9Krabi2015C1Eb+0x6b6>
   10e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   10e4e:	f8c7 30a4 	str.w	r3, [r7, #164]
   10e52:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   10e56:	f8c7 3538 	str.w	r3, [r7, #1336]
    Etape* etape10 = new Etape(Position(1500, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   10e5a:	f507 7216 	add.w	r2, r7, #600	; 0x258
   10e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10e62:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10e66:	781b      	ldrb	r3, [r3, #0]
   10e68:	4610      	mov	r0, r2
   10e6a:	f8df 1618 	ldr.w	r1, [pc, #1560]	; 11484 <_ZN9Krabi2015C1Eb+0xce8>
   10e6e:	f8df 2618 	ldr.w	r2, [pc, #1560]	; 11488 <_ZN9Krabi2015C1Eb+0xcec>
   10e72:	f7fd fb43 	bl	e4fc <_ZN8PositionC1Effb>
   10e76:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10e7a:	f8c7 30a8 	str.w	r3, [r7, #168]
   10e7e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10e82:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10e86:	f8c7 3510 	str.w	r3, [r7, #1296]
   10e8a:	f04f 0034 	mov.w	r0, #52	; 0x34
   10e8e:	f7fd f9cf 	bl	e230 <_Znwj>
   10e92:	4603      	mov	r3, r0
   10e94:	f8c7 30ac 	str.w	r3, [r7, #172]
   10e98:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   10e9c:	2b00      	cmp	r3, #0
   10e9e:	d01b      	beq.n	10ed8 <_ZN9Krabi2015C1Eb+0x73c>
   10ea0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10ea4:	681b      	ldr	r3, [r3, #0]
   10ea6:	6b5b      	ldr	r3, [r3, #52]
   10ea8:	f507 7216 	add.w	r2, r7, #600	; 0x258
   10eac:	9300      	str	r3, [sp, #0]
   10eae:	f04f 0312 	mov.w	r3, #18	; 0x12
   10eb2:	9301      	str	r3, [sp, #4]
   10eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10eb8:	9302      	str	r3, [sp, #8]
   10eba:	f04f 0300 	mov.w	r3, #0	; 0x0
   10ebe:	9303      	str	r3, [sp, #12]
   10ec0:	f8d7 00ac 	ldr.w	r0, [r7, #172]
   10ec4:	ca06      	ldmia	r2!, {r1, r2}
   10ec6:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   10eca:	f7ff f9b5 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   10ed2:	f8c7 30b0 	str.w	r3, [r7, #176]
   10ed6:	e003      	b.n	10ee0 <_ZN9Krabi2015C1Eb+0x744>
   10ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   10edc:	f8c7 30b0 	str.w	r3, [r7, #176]
   10ee0:	f8d7 30b0 	ldr.w	r3, [r7, #176]
   10ee4:	f8c7 353c 	str.w	r3, [r7, #1340]
    Etape* etape11 = new Etape(Position(2090, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   10ee8:	f507 7218 	add.w	r2, r7, #608	; 0x260
   10eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10ef0:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10ef4:	781b      	ldrb	r3, [r3, #0]
   10ef6:	4610      	mov	r0, r2
   10ef8:	f8df 1590 	ldr.w	r1, [pc, #1424]	; 1148c <_ZN9Krabi2015C1Eb+0xcf0>
   10efc:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 11480 <_ZN9Krabi2015C1Eb+0xce4>
   10f00:	f7fd fafc 	bl	e4fc <_ZN8PositionC1Effb>
   10f04:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10f08:	f8c7 30b4 	str.w	r3, [r7, #180]
   10f0c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10f10:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10f14:	f8c7 3510 	str.w	r3, [r7, #1296]
   10f18:	f04f 0034 	mov.w	r0, #52	; 0x34
   10f1c:	f7fd f988 	bl	e230 <_Znwj>
   10f20:	4603      	mov	r3, r0
   10f22:	f8c7 30b8 	str.w	r3, [r7, #184]
   10f26:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   10f2a:	2b00      	cmp	r3, #0
   10f2c:	d01b      	beq.n	10f66 <_ZN9Krabi2015C1Eb+0x7ca>
   10f2e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10f32:	681b      	ldr	r3, [r3, #0]
   10f34:	6b5b      	ldr	r3, [r3, #52]
   10f36:	f507 7218 	add.w	r2, r7, #608	; 0x260
   10f3a:	9300      	str	r3, [sp, #0]
   10f3c:	f04f 0312 	mov.w	r3, #18	; 0x12
   10f40:	9301      	str	r3, [sp, #4]
   10f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10f46:	9302      	str	r3, [sp, #8]
   10f48:	f04f 0300 	mov.w	r3, #0	; 0x0
   10f4c:	9303      	str	r3, [sp, #12]
   10f4e:	f8d7 00b8 	ldr.w	r0, [r7, #184]
   10f52:	ca06      	ldmia	r2!, {r1, r2}
   10f54:	f8d7 30b4 	ldr.w	r3, [r7, #180]
   10f58:	f7ff f96e 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10f5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   10f60:	f8c7 30bc 	str.w	r3, [r7, #188]
   10f64:	e003      	b.n	10f6e <_ZN9Krabi2015C1Eb+0x7d2>
   10f66:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   10f6a:	f8c7 30bc 	str.w	r3, [r7, #188]
   10f6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]
   10f72:	f8c7 3540 	str.w	r3, [r7, #1344]
    Etape* etape12 = new Etape(Position(2750, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   10f76:	f507 721a 	add.w	r2, r7, #616	; 0x268
   10f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10f7e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10f82:	781b      	ldrb	r3, [r3, #0]
   10f84:	4610      	mov	r0, r2
   10f86:	f8df 1508 	ldr.w	r1, [pc, #1288]	; 11490 <_ZN9Krabi2015C1Eb+0xcf4>
   10f8a:	f8df 24ec 	ldr.w	r2, [pc, #1260]	; 11478 <_ZN9Krabi2015C1Eb+0xcdc>
   10f8e:	f7fd fab5 	bl	e4fc <_ZN8PositionC1Effb>
   10f92:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10f96:	f8c7 30c0 	str.w	r3, [r7, #192]
   10f9a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10f9e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10fa2:	f8c7 3510 	str.w	r3, [r7, #1296]
   10fa6:	f04f 0034 	mov.w	r0, #52	; 0x34
   10faa:	f7fd f941 	bl	e230 <_Znwj>
   10fae:	4603      	mov	r3, r0
   10fb0:	f8c7 30c4 	str.w	r3, [r7, #196]
   10fb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   10fb8:	2b00      	cmp	r3, #0
   10fba:	d01b      	beq.n	10ff4 <_ZN9Krabi2015C1Eb+0x858>
   10fbc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10fc0:	681b      	ldr	r3, [r3, #0]
   10fc2:	6b5b      	ldr	r3, [r3, #52]
   10fc4:	f507 721a 	add.w	r2, r7, #616	; 0x268
   10fc8:	9300      	str	r3, [sp, #0]
   10fca:	f04f 0312 	mov.w	r3, #18	; 0x12
   10fce:	9301      	str	r3, [sp, #4]
   10fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10fd4:	9302      	str	r3, [sp, #8]
   10fd6:	f04f 0300 	mov.w	r3, #0	; 0x0
   10fda:	9303      	str	r3, [sp, #12]
   10fdc:	f8d7 00c4 	ldr.w	r0, [r7, #196]
   10fe0:	ca06      	ldmia	r2!, {r1, r2}
   10fe2:	f8d7 30c0 	ldr.w	r3, [r7, #192]
   10fe6:	f7ff f927 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10fea:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   10fee:	f8c7 30c8 	str.w	r3, [r7, #200]
   10ff2:	e003      	b.n	10ffc <_ZN9Krabi2015C1Eb+0x860>
   10ff4:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   10ff8:	f8c7 30c8 	str.w	r3, [r7, #200]
   10ffc:	f8d7 30c8 	ldr.w	r3, [r7, #200]
   11000:	f8c7 3544 	str.w	r3, [r7, #1348]
    Etape* etape13 = new Etape(Position(90, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   11004:	f507 721c 	add.w	r2, r7, #624	; 0x270
   11008:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1100c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11010:	781b      	ldrb	r3, [r3, #0]
   11012:	4610      	mov	r0, r2
   11014:	f8df 147c 	ldr.w	r1, [pc, #1148]	; 11494 <_ZN9Krabi2015C1Eb+0xcf8>
   11018:	f8df 245c 	ldr.w	r2, [pc, #1116]	; 11478 <_ZN9Krabi2015C1Eb+0xcdc>
   1101c:	f7fd fa6e 	bl	e4fc <_ZN8PositionC1Effb>
   11020:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11024:	f8c7 30cc 	str.w	r3, [r7, #204]
   11028:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1102c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11030:	f8c7 3510 	str.w	r3, [r7, #1296]
   11034:	f04f 0034 	mov.w	r0, #52	; 0x34
   11038:	f7fd f8fa 	bl	e230 <_Znwj>
   1103c:	4603      	mov	r3, r0
   1103e:	f8c7 30d0 	str.w	r3, [r7, #208]
   11042:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   11046:	2b00      	cmp	r3, #0
   11048:	d01b      	beq.n	11082 <_ZN9Krabi2015C1Eb+0x8e6>
   1104a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1104e:	681b      	ldr	r3, [r3, #0]
   11050:	6b5b      	ldr	r3, [r3, #52]
   11052:	f507 721c 	add.w	r2, r7, #624	; 0x270
   11056:	9300      	str	r3, [sp, #0]
   11058:	f04f 0313 	mov.w	r3, #19	; 0x13
   1105c:	9301      	str	r3, [sp, #4]
   1105e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11062:	9302      	str	r3, [sp, #8]
   11064:	f04f 0300 	mov.w	r3, #0	; 0x0
   11068:	9303      	str	r3, [sp, #12]
   1106a:	f8d7 00d0 	ldr.w	r0, [r7, #208]
   1106e:	ca06      	ldmia	r2!, {r1, r2}
   11070:	f8d7 30cc 	ldr.w	r3, [r7, #204]
   11074:	f7ff f8e0 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11078:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   1107c:	f8c7 30d4 	str.w	r3, [r7, #212]
   11080:	e003      	b.n	1108a <_ZN9Krabi2015C1Eb+0x8ee>
   11082:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   11086:	f8c7 30d4 	str.w	r3, [r7, #212]
   1108a:	f8d7 30d4 	ldr.w	r3, [r7, #212]
   1108e:	f8c7 3548 	str.w	r3, [r7, #1352]
    Etape* etape14 = new Etape(Position(90, 1850, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   11092:	f507 721e 	add.w	r2, r7, #632	; 0x278
   11096:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1109a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1109e:	781b      	ldrb	r3, [r3, #0]
   110a0:	4610      	mov	r0, r2
   110a2:	49fc      	ldr	r1, [pc, #1008]	(11494 <_ZN9Krabi2015C1Eb+0xcf8>)
   110a4:	4afc      	ldr	r2, [pc, #1008]	(11498 <_ZN9Krabi2015C1Eb+0xcfc>)
   110a6:	f7fd fa29 	bl	e4fc <_ZN8PositionC1Effb>
   110aa:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   110ae:	f8c7 30d8 	str.w	r3, [r7, #216]
   110b2:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   110b6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   110ba:	f8c7 3510 	str.w	r3, [r7, #1296]
   110be:	f04f 0034 	mov.w	r0, #52	; 0x34
   110c2:	f7fd f8b5 	bl	e230 <_Znwj>
   110c6:	4603      	mov	r3, r0
   110c8:	f8c7 30dc 	str.w	r3, [r7, #220]
   110cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   110d0:	2b00      	cmp	r3, #0
   110d2:	d01b      	beq.n	1110c <_ZN9Krabi2015C1Eb+0x970>
   110d4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   110d8:	681b      	ldr	r3, [r3, #0]
   110da:	6b5b      	ldr	r3, [r3, #52]
   110dc:	f507 721e 	add.w	r2, r7, #632	; 0x278
   110e0:	9300      	str	r3, [sp, #0]
   110e2:	f04f 0313 	mov.w	r3, #19	; 0x13
   110e6:	9301      	str	r3, [sp, #4]
   110e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   110ec:	9302      	str	r3, [sp, #8]
   110ee:	f04f 0300 	mov.w	r3, #0	; 0x0
   110f2:	9303      	str	r3, [sp, #12]
   110f4:	f8d7 00dc 	ldr.w	r0, [r7, #220]
   110f8:	ca06      	ldmia	r2!, {r1, r2}
   110fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]
   110fe:	f7ff f89b 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11102:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   11106:	f8c7 30e0 	str.w	r3, [r7, #224]
   1110a:	e003      	b.n	11114 <_ZN9Krabi2015C1Eb+0x978>
   1110c:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   11110:	f8c7 30e0 	str.w	r3, [r7, #224]
   11114:	f8d7 30e0 	ldr.w	r3, [r7, #224]
   11118:	f8c7 354c 	str.w	r3, [r7, #1356]
    Etape* etape15 = new Etape(Position(90, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   1111c:	f507 7220 	add.w	r2, r7, #640	; 0x280
   11120:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11124:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11128:	781b      	ldrb	r3, [r3, #0]
   1112a:	4610      	mov	r0, r2
   1112c:	49d9      	ldr	r1, [pc, #868]	(11494 <_ZN9Krabi2015C1Eb+0xcf8>)
   1112e:	4adb      	ldr	r2, [pc, #876]	(1149c <_ZN9Krabi2015C1Eb+0xd00>)
   11130:	f7fd f9e4 	bl	e4fc <_ZN8PositionC1Effb>
   11134:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11138:	f8c7 30e4 	str.w	r3, [r7, #228]
   1113c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11140:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11144:	f8c7 3510 	str.w	r3, [r7, #1296]
   11148:	f04f 0034 	mov.w	r0, #52	; 0x34
   1114c:	f7fd f870 	bl	e230 <_Znwj>
   11150:	4603      	mov	r3, r0
   11152:	f8c7 30e8 	str.w	r3, [r7, #232]
   11156:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   1115a:	2b00      	cmp	r3, #0
   1115c:	d01b      	beq.n	11196 <_ZN9Krabi2015C1Eb+0x9fa>
   1115e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11162:	681b      	ldr	r3, [r3, #0]
   11164:	6b5b      	ldr	r3, [r3, #52]
   11166:	f507 7220 	add.w	r2, r7, #640	; 0x280
   1116a:	9300      	str	r3, [sp, #0]
   1116c:	f04f 0313 	mov.w	r3, #19	; 0x13
   11170:	9301      	str	r3, [sp, #4]
   11172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11176:	9302      	str	r3, [sp, #8]
   11178:	f04f 0300 	mov.w	r3, #0	; 0x0
   1117c:	9303      	str	r3, [sp, #12]
   1117e:	f8d7 00e8 	ldr.w	r0, [r7, #232]
   11182:	ca06      	ldmia	r2!, {r1, r2}
   11184:	f8d7 30e4 	ldr.w	r3, [r7, #228]
   11188:	f7ff f856 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1118c:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   11190:	f8c7 30ec 	str.w	r3, [r7, #236]
   11194:	e003      	b.n	1119e <_ZN9Krabi2015C1Eb+0xa02>
   11196:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   1119a:	f8c7 30ec 	str.w	r3, [r7, #236]
   1119e:	f8d7 30ec 	ldr.w	r3, [r7, #236]
   111a2:	f8c7 3550 	str.w	r3, [r7, #1360]
    Etape* etape16 = new Etape(Position(850, 100, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   111a6:	f507 7222 	add.w	r2, r7, #648	; 0x288
   111aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
   111ae:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   111b2:	781b      	ldrb	r3, [r3, #0]
   111b4:	4610      	mov	r0, r2
   111b6:	49ba      	ldr	r1, [pc, #744]	(114a0 <_ZN9Krabi2015C1Eb+0xd04>)
   111b8:	4aba      	ldr	r2, [pc, #744]	(114a4 <_ZN9Krabi2015C1Eb+0xd08>)
   111ba:	f7fd f99f 	bl	e4fc <_ZN8PositionC1Effb>
   111be:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   111c2:	f8c7 30f0 	str.w	r3, [r7, #240]
   111c6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   111ca:	f103 0301 	add.w	r3, r3, #1	; 0x1
   111ce:	f8c7 3510 	str.w	r3, [r7, #1296]
   111d2:	f04f 0034 	mov.w	r0, #52	; 0x34
   111d6:	f7fd f82b 	bl	e230 <_Znwj>
   111da:	4603      	mov	r3, r0
   111dc:	f8c7 30f4 	str.w	r3, [r7, #244]
   111e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   111e4:	2b00      	cmp	r3, #0
   111e6:	d01b      	beq.n	11220 <_ZN9Krabi2015C1Eb+0xa84>
   111e8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   111ec:	681b      	ldr	r3, [r3, #0]
   111ee:	6b5b      	ldr	r3, [r3, #52]
   111f0:	f507 7222 	add.w	r2, r7, #648	; 0x288
   111f4:	9300      	str	r3, [sp, #0]
   111f6:	f04f 0313 	mov.w	r3, #19	; 0x13
   111fa:	9301      	str	r3, [sp, #4]
   111fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11200:	9302      	str	r3, [sp, #8]
   11202:	f04f 0300 	mov.w	r3, #0	; 0x0
   11206:	9303      	str	r3, [sp, #12]
   11208:	f8d7 00f4 	ldr.w	r0, [r7, #244]
   1120c:	ca06      	ldmia	r2!, {r1, r2}
   1120e:	f8d7 30f0 	ldr.w	r3, [r7, #240]
   11212:	f7ff f811 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11216:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   1121a:	f8c7 30f8 	str.w	r3, [r7, #248]
   1121e:	e003      	b.n	11228 <_ZN9Krabi2015C1Eb+0xa8c>
   11220:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   11224:	f8c7 30f8 	str.w	r3, [r7, #248]
   11228:	f8d7 30f8 	ldr.w	r3, [r7, #248]
   1122c:	f8c7 3554 	str.w	r3, [r7, #1364]
    Etape* etape17 = new Etape(Position(850, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   11230:	f507 7224 	add.w	r2, r7, #656	; 0x290
   11234:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11238:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1123c:	781b      	ldrb	r3, [r3, #0]
   1123e:	4610      	mov	r0, r2
   11240:	4997      	ldr	r1, [pc, #604]	(114a0 <_ZN9Krabi2015C1Eb+0xd04>)
   11242:	4a96      	ldr	r2, [pc, #600]	(1149c <_ZN9Krabi2015C1Eb+0xd00>)
   11244:	f7fd f95a 	bl	e4fc <_ZN8PositionC1Effb>
   11248:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1124c:	f8c7 30fc 	str.w	r3, [r7, #252]
   11250:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11254:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11258:	f8c7 3510 	str.w	r3, [r7, #1296]
   1125c:	f04f 0034 	mov.w	r0, #52	; 0x34
   11260:	f7fc ffe6 	bl	e230 <_Znwj>
   11264:	4603      	mov	r3, r0
   11266:	f8c7 3100 	str.w	r3, [r7, #256]
   1126a:	f8d7 3100 	ldr.w	r3, [r7, #256]
   1126e:	2b00      	cmp	r3, #0
   11270:	d01b      	beq.n	112aa <_ZN9Krabi2015C1Eb+0xb0e>
   11272:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11276:	681b      	ldr	r3, [r3, #0]
   11278:	6b5b      	ldr	r3, [r3, #52]
   1127a:	f507 7224 	add.w	r2, r7, #656	; 0x290
   1127e:	9300      	str	r3, [sp, #0]
   11280:	f04f 0313 	mov.w	r3, #19	; 0x13
   11284:	9301      	str	r3, [sp, #4]
   11286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1128a:	9302      	str	r3, [sp, #8]
   1128c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11290:	9303      	str	r3, [sp, #12]
   11292:	f8d7 0100 	ldr.w	r0, [r7, #256]
   11296:	ca06      	ldmia	r2!, {r1, r2}
   11298:	f8d7 30fc 	ldr.w	r3, [r7, #252]
   1129c:	f7fe ffcc 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   112a0:	f8d7 3100 	ldr.w	r3, [r7, #256]
   112a4:	f8c7 3104 	str.w	r3, [r7, #260]
   112a8:	e003      	b.n	112b2 <_ZN9Krabi2015C1Eb+0xb16>
   112aa:	f8d7 3100 	ldr.w	r3, [r7, #256]
   112ae:	f8c7 3104 	str.w	r3, [r7, #260]
   112b2:	f8d7 3104 	ldr.w	r3, [r7, #260]
   112b6:	f8c7 3558 	str.w	r3, [r7, #1368]
    Etape* etape18 = new Etape(Position(870, 1355, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   112ba:	f507 7226 	add.w	r2, r7, #664	; 0x298
   112be:	f507 7300 	add.w	r3, r7, #512	; 0x200
   112c2:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   112c6:	781b      	ldrb	r3, [r3, #0]
   112c8:	4610      	mov	r0, r2
   112ca:	4977      	ldr	r1, [pc, #476]	(114a8 <_ZN9Krabi2015C1Eb+0xd0c>)
   112cc:	4a77      	ldr	r2, [pc, #476]	(114ac <_ZN9Krabi2015C1Eb+0xd10>)
   112ce:	f7fd f915 	bl	e4fc <_ZN8PositionC1Effb>
   112d2:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   112d6:	f8c7 3108 	str.w	r3, [r7, #264]
   112da:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   112de:	f103 0301 	add.w	r3, r3, #1	; 0x1
   112e2:	f8c7 3510 	str.w	r3, [r7, #1296]
   112e6:	f04f 0034 	mov.w	r0, #52	; 0x34
   112ea:	f7fc ffa1 	bl	e230 <_Znwj>
   112ee:	4603      	mov	r3, r0
   112f0:	f8c7 310c 	str.w	r3, [r7, #268]
   112f4:	f8d7 310c 	ldr.w	r3, [r7, #268]
   112f8:	2b00      	cmp	r3, #0
   112fa:	d01b      	beq.n	11334 <_ZN9Krabi2015C1Eb+0xb98>
   112fc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11300:	681b      	ldr	r3, [r3, #0]
   11302:	6b5b      	ldr	r3, [r3, #52]
   11304:	f507 7226 	add.w	r2, r7, #664	; 0x298
   11308:	9300      	str	r3, [sp, #0]
   1130a:	f04f 0313 	mov.w	r3, #19	; 0x13
   1130e:	9301      	str	r3, [sp, #4]
   11310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11314:	9302      	str	r3, [sp, #8]
   11316:	f04f 0300 	mov.w	r3, #0	; 0x0
   1131a:	9303      	str	r3, [sp, #12]
   1131c:	f8d7 010c 	ldr.w	r0, [r7, #268]
   11320:	ca06      	ldmia	r2!, {r1, r2}
   11322:	f8d7 3108 	ldr.w	r3, [r7, #264]
   11326:	f7fe ff87 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1132a:	f8d7 310c 	ldr.w	r3, [r7, #268]
   1132e:	f8c7 3110 	str.w	r3, [r7, #272]
   11332:	e003      	b.n	1133c <_ZN9Krabi2015C1Eb+0xba0>
   11334:	f8d7 310c 	ldr.w	r3, [r7, #268]
   11338:	f8c7 3110 	str.w	r3, [r7, #272]
   1133c:	f8d7 3110 	ldr.w	r3, [r7, #272]
   11340:	f8c7 355c 	str.w	r3, [r7, #1372]
    Etape* etape19 = new Etape(Position(1100, 1770, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   11344:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   11348:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1134c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11350:	781b      	ldrb	r3, [r3, #0]
   11352:	4610      	mov	r0, r2
   11354:	4956      	ldr	r1, [pc, #344]	(114b0 <_ZN9Krabi2015C1Eb+0xd14>)
   11356:	4a57      	ldr	r2, [pc, #348]	(114b4 <_ZN9Krabi2015C1Eb+0xd18>)
   11358:	f7fd f8d0 	bl	e4fc <_ZN8PositionC1Effb>
   1135c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11360:	f8c7 3114 	str.w	r3, [r7, #276]
   11364:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11368:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1136c:	f8c7 3510 	str.w	r3, [r7, #1296]
   11370:	f04f 0034 	mov.w	r0, #52	; 0x34
   11374:	f7fc ff5c 	bl	e230 <_Znwj>
   11378:	4603      	mov	r3, r0
   1137a:	f8c7 3118 	str.w	r3, [r7, #280]
   1137e:	f8d7 3118 	ldr.w	r3, [r7, #280]
   11382:	2b00      	cmp	r3, #0
   11384:	d01b      	beq.n	113be <_ZN9Krabi2015C1Eb+0xc22>
   11386:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1138a:	681b      	ldr	r3, [r3, #0]
   1138c:	6b5b      	ldr	r3, [r3, #52]
   1138e:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   11392:	9300      	str	r3, [sp, #0]
   11394:	f04f 0313 	mov.w	r3, #19	; 0x13
   11398:	9301      	str	r3, [sp, #4]
   1139a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1139e:	9302      	str	r3, [sp, #8]
   113a0:	f04f 0300 	mov.w	r3, #0	; 0x0
   113a4:	9303      	str	r3, [sp, #12]
   113a6:	f8d7 0118 	ldr.w	r0, [r7, #280]
   113aa:	ca06      	ldmia	r2!, {r1, r2}
   113ac:	f8d7 3114 	ldr.w	r3, [r7, #276]
   113b0:	f7fe ff42 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   113b4:	f8d7 3118 	ldr.w	r3, [r7, #280]
   113b8:	f8c7 311c 	str.w	r3, [r7, #284]
   113bc:	e003      	b.n	113c6 <_ZN9Krabi2015C1Eb+0xc2a>
   113be:	f8d7 3118 	ldr.w	r3, [r7, #280]
   113c2:	f8c7 311c 	str.w	r3, [r7, #284]
   113c6:	f8d7 311c 	ldr.w	r3, [r7, #284]
   113ca:	f8c7 3560 	str.w	r3, [r7, #1376]
    Etape* etape20 = new Etape(Position(1300, 1400, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   113ce:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
   113d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
   113d6:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   113da:	781b      	ldrb	r3, [r3, #0]
   113dc:	4610      	mov	r0, r2
   113de:	4936      	ldr	r1, [pc, #216]	(114b8 <_ZN9Krabi2015C1Eb+0xd1c>)
   113e0:	4a36      	ldr	r2, [pc, #216]	(114bc <_ZN9Krabi2015C1Eb+0xd20>)
   113e2:	f7fd f88b 	bl	e4fc <_ZN8PositionC1Effb>
   113e6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   113ea:	f8c7 3120 	str.w	r3, [r7, #288]
   113ee:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   113f2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   113f6:	f8c7 3510 	str.w	r3, [r7, #1296]
   113fa:	f04f 0034 	mov.w	r0, #52	; 0x34
   113fe:	f7fc ff17 	bl	e230 <_Znwj>
   11402:	4603      	mov	r3, r0
   11404:	f8c7 3124 	str.w	r3, [r7, #292]
   11408:	f8d7 3124 	ldr.w	r3, [r7, #292]
   1140c:	2b00      	cmp	r3, #0
   1140e:	d057      	beq.n	114c0 <_ZN9Krabi2015C1Eb+0xd24>
   11410:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11414:	681b      	ldr	r3, [r3, #0]
   11416:	6b5b      	ldr	r3, [r3, #52]
   11418:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
   1141c:	9300      	str	r3, [sp, #0]
   1141e:	f04f 0313 	mov.w	r3, #19	; 0x13
   11422:	9301      	str	r3, [sp, #4]
   11424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11428:	9302      	str	r3, [sp, #8]
   1142a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1142e:	9303      	str	r3, [sp, #12]
   11430:	f8d7 0124 	ldr.w	r0, [r7, #292]
   11434:	ca06      	ldmia	r2!, {r1, r2}
   11436:	f8d7 3120 	ldr.w	r3, [r7, #288]
   1143a:	f7fe fefd 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1143e:	f8d7 3124 	ldr.w	r3, [r7, #292]
   11442:	f8c7 3128 	str.w	r3, [r7, #296]
   11446:	e03f      	b.n	114c8 <_ZN9Krabi2015C1Eb+0xd2c>
   11448:	00021b28 	.word	0x00021b28
   1144c:	00000000 	.word	0x00000000
   11450:	41f00000 	.word	0x41f00000
   11454:	437a0000 	.word	0x437a0000
   11458:	447a0000 	.word	0x447a0000
   1145c:	442f0000 	.word	0x442f0000
   11460:	44510000 	.word	0x44510000
   11464:	44de8000 	.word	0x44de8000
   11468:	436c0000 	.word	0x436c0000
   1146c:	43c80000 	.word	0x43c80000
   11470:	451c4000 	.word	0x451c4000
   11474:	450fc000 	.word	0x450fc000
   11478:	44dac000 	.word	0x44dac000
   1147c:	44638000 	.word	0x44638000
   11480:	444f8000 	.word	0x444f8000
   11484:	44bb8000 	.word	0x44bb8000
   11488:	44ce4000 	.word	0x44ce4000
   1148c:	4502a000 	.word	0x4502a000
   11490:	452be000 	.word	0x452be000
   11494:	42b40000 	.word	0x42b40000
   11498:	44e74000 	.word	0x44e74000
   1149c:	43480000 	.word	0x43480000
   114a0:	44548000 	.word	0x44548000
   114a4:	42c80000 	.word	0x42c80000
   114a8:	44598000 	.word	0x44598000
   114ac:	44a96000 	.word	0x44a96000
   114b0:	44898000 	.word	0x44898000
   114b4:	44dd4000 	.word	0x44dd4000
   114b8:	44a28000 	.word	0x44a28000
   114bc:	44af0000 	.word	0x44af0000
   114c0:	f8d7 3124 	ldr.w	r3, [r7, #292]
   114c4:	f8c7 3128 	str.w	r3, [r7, #296]
   114c8:	f8d7 3128 	ldr.w	r3, [r7, #296]
   114cc:	f8c7 3564 	str.w	r3, [r7, #1380]
    Etape* etape21 = new Etape(Position(1250, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   114d0:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
   114d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
   114d8:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   114dc:	781b      	ldrb	r3, [r3, #0]
   114de:	4610      	mov	r0, r2
   114e0:	f8df 194c 	ldr.w	r1, [pc, #2380]	; 11e30 <_ZN9Krabi2015C1Eb+0x1694>
   114e4:	f8df 294c 	ldr.w	r2, [pc, #2380]	; 11e34 <_ZN9Krabi2015C1Eb+0x1698>
   114e8:	f7fd f808 	bl	e4fc <_ZN8PositionC1Effb>
   114ec:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   114f0:	f8c7 312c 	str.w	r3, [r7, #300]
   114f4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   114f8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   114fc:	f8c7 3510 	str.w	r3, [r7, #1296]
   11500:	f04f 0034 	mov.w	r0, #52	; 0x34
   11504:	f7fc fe94 	bl	e230 <_Znwj>
   11508:	4603      	mov	r3, r0
   1150a:	f8c7 3130 	str.w	r3, [r7, #304]
   1150e:	f8d7 3130 	ldr.w	r3, [r7, #304]
   11512:	2b00      	cmp	r3, #0
   11514:	d01b      	beq.n	1154e <_ZN9Krabi2015C1Eb+0xdb2>
   11516:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1151a:	681b      	ldr	r3, [r3, #0]
   1151c:	6b5b      	ldr	r3, [r3, #52]
   1151e:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
   11522:	9300      	str	r3, [sp, #0]
   11524:	f04f 0314 	mov.w	r3, #20	; 0x14
   11528:	9301      	str	r3, [sp, #4]
   1152a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1152e:	9302      	str	r3, [sp, #8]
   11530:	f04f 0300 	mov.w	r3, #0	; 0x0
   11534:	9303      	str	r3, [sp, #12]
   11536:	f8d7 0130 	ldr.w	r0, [r7, #304]
   1153a:	ca06      	ldmia	r2!, {r1, r2}
   1153c:	f8d7 312c 	ldr.w	r3, [r7, #300]
   11540:	f7fe fe7a 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11544:	f8d7 3130 	ldr.w	r3, [r7, #304]
   11548:	f8c7 3134 	str.w	r3, [r7, #308]
   1154c:	e003      	b.n	11556 <_ZN9Krabi2015C1Eb+0xdba>
   1154e:	f8d7 3130 	ldr.w	r3, [r7, #304]
   11552:	f8c7 3134 	str.w	r3, [r7, #308]
   11556:	f8d7 3134 	ldr.w	r3, [r7, #308]
   1155a:	f8c7 3568 	str.w	r3, [r7, #1384]
    Etape* etape22 = new Etape(Position(1750, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   1155e:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
   11562:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11566:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1156a:	781b      	ldrb	r3, [r3, #0]
   1156c:	4610      	mov	r0, r2
   1156e:	f8df 18c8 	ldr.w	r1, [pc, #2248]	; 11e38 <_ZN9Krabi2015C1Eb+0x169c>
   11572:	f8df 28c0 	ldr.w	r2, [pc, #2240]	; 11e34 <_ZN9Krabi2015C1Eb+0x1698>
   11576:	f7fc ffc1 	bl	e4fc <_ZN8PositionC1Effb>
   1157a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1157e:	f8c7 3138 	str.w	r3, [r7, #312]
   11582:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11586:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1158a:	f8c7 3510 	str.w	r3, [r7, #1296]
   1158e:	f04f 0034 	mov.w	r0, #52	; 0x34
   11592:	f7fc fe4d 	bl	e230 <_Znwj>
   11596:	4603      	mov	r3, r0
   11598:	f8c7 313c 	str.w	r3, [r7, #316]
   1159c:	f8d7 313c 	ldr.w	r3, [r7, #316]
   115a0:	2b00      	cmp	r3, #0
   115a2:	d01b      	beq.n	115dc <_ZN9Krabi2015C1Eb+0xe40>
   115a4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   115a8:	681b      	ldr	r3, [r3, #0]
   115aa:	6b5b      	ldr	r3, [r3, #52]
   115ac:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
   115b0:	9300      	str	r3, [sp, #0]
   115b2:	f04f 0314 	mov.w	r3, #20	; 0x14
   115b6:	9301      	str	r3, [sp, #4]
   115b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   115bc:	9302      	str	r3, [sp, #8]
   115be:	f04f 0300 	mov.w	r3, #0	; 0x0
   115c2:	9303      	str	r3, [sp, #12]
   115c4:	f8d7 013c 	ldr.w	r0, [r7, #316]
   115c8:	ca06      	ldmia	r2!, {r1, r2}
   115ca:	f8d7 3138 	ldr.w	r3, [r7, #312]
   115ce:	f7fe fe33 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   115d2:	f8d7 313c 	ldr.w	r3, [r7, #316]
   115d6:	f8c7 3140 	str.w	r3, [r7, #320]
   115da:	e003      	b.n	115e4 <_ZN9Krabi2015C1Eb+0xe48>
   115dc:	f8d7 313c 	ldr.w	r3, [r7, #316]
   115e0:	f8c7 3140 	str.w	r3, [r7, #320]
   115e4:	f8d7 3140 	ldr.w	r3, [r7, #320]
   115e8:	f8c7 356c 	str.w	r3, [r7, #1388]
    Etape* etape23 = new Etape(Position(1230, 760, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::TAPIS, -1, 0);
   115ec:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
   115f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   115f4:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   115f8:	781b      	ldrb	r3, [r3, #0]
   115fa:	4610      	mov	r0, r2
   115fc:	f8df 183c 	ldr.w	r1, [pc, #2108]	; 11e3c <_ZN9Krabi2015C1Eb+0x16a0>
   11600:	f8df 283c 	ldr.w	r2, [pc, #2108]	; 11e40 <_ZN9Krabi2015C1Eb+0x16a4>
   11604:	f7fc ff7a 	bl	e4fc <_ZN8PositionC1Effb>
   11608:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1160c:	f8c7 3144 	str.w	r3, [r7, #324]
   11610:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11614:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11618:	f8c7 3510 	str.w	r3, [r7, #1296]
   1161c:	f04f 0034 	mov.w	r0, #52	; 0x34
   11620:	f7fc fe06 	bl	e230 <_Znwj>
   11624:	4603      	mov	r3, r0
   11626:	f8c7 3148 	str.w	r3, [r7, #328]
   1162a:	f8d7 3148 	ldr.w	r3, [r7, #328]
   1162e:	2b00      	cmp	r3, #0
   11630:	d01b      	beq.n	1166a <_ZN9Krabi2015C1Eb+0xece>
   11632:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11636:	681b      	ldr	r3, [r3, #0]
   11638:	6b5b      	ldr	r3, [r3, #52]
   1163a:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
   1163e:	9300      	str	r3, [sp, #0]
   11640:	f04f 0315 	mov.w	r3, #21	; 0x15
   11644:	9301      	str	r3, [sp, #4]
   11646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1164a:	9302      	str	r3, [sp, #8]
   1164c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11650:	9303      	str	r3, [sp, #12]
   11652:	f8d7 0148 	ldr.w	r0, [r7, #328]
   11656:	ca06      	ldmia	r2!, {r1, r2}
   11658:	f8d7 3144 	ldr.w	r3, [r7, #324]
   1165c:	f7fe fdec 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11660:	f8d7 3148 	ldr.w	r3, [r7, #328]
   11664:	f8c7 314c 	str.w	r3, [r7, #332]
   11668:	e003      	b.n	11672 <_ZN9Krabi2015C1Eb+0xed6>
   1166a:	f8d7 3148 	ldr.w	r3, [r7, #328]
   1166e:	f8c7 314c 	str.w	r3, [r7, #332]
   11672:	f8d7 314c 	ldr.w	r3, [r7, #332]
   11676:	f8c7 3570 	str.w	r3, [r7, #1392]
    Etape* etape24 = new Etape(Position(2300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1167a:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
   1167e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11682:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11686:	781b      	ldrb	r3, [r3, #0]
   11688:	4610      	mov	r0, r2
   1168a:	f8df 17b8 	ldr.w	r1, [pc, #1976]	; 11e44 <_ZN9Krabi2015C1Eb+0x16a8>
   1168e:	f8df 27b8 	ldr.w	r2, [pc, #1976]	; 11e48 <_ZN9Krabi2015C1Eb+0x16ac>
   11692:	f7fc ff33 	bl	e4fc <_ZN8PositionC1Effb>
   11696:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1169a:	f8c7 3150 	str.w	r3, [r7, #336]
   1169e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   116a2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   116a6:	f8c7 3510 	str.w	r3, [r7, #1296]
   116aa:	f04f 0034 	mov.w	r0, #52	; 0x34
   116ae:	f7fc fdbf 	bl	e230 <_Znwj>
   116b2:	4603      	mov	r3, r0
   116b4:	f8c7 3154 	str.w	r3, [r7, #340]
   116b8:	f8d7 3154 	ldr.w	r3, [r7, #340]
   116bc:	2b00      	cmp	r3, #0
   116be:	d01b      	beq.n	116f8 <_ZN9Krabi2015C1Eb+0xf5c>
   116c0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   116c4:	681b      	ldr	r3, [r3, #0]
   116c6:	6b5b      	ldr	r3, [r3, #52]
   116c8:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
   116cc:	9300      	str	r3, [sp, #0]
   116ce:	f04f 0300 	mov.w	r3, #0	; 0x0
   116d2:	9301      	str	r3, [sp, #4]
   116d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   116d8:	9302      	str	r3, [sp, #8]
   116da:	f04f 0300 	mov.w	r3, #0	; 0x0
   116de:	9303      	str	r3, [sp, #12]
   116e0:	f8d7 0154 	ldr.w	r0, [r7, #340]
   116e4:	ca06      	ldmia	r2!, {r1, r2}
   116e6:	f8d7 3150 	ldr.w	r3, [r7, #336]
   116ea:	f7fe fda5 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   116ee:	f8d7 3154 	ldr.w	r3, [r7, #340]
   116f2:	f8c7 3158 	str.w	r3, [r7, #344]
   116f6:	e003      	b.n	11700 <_ZN9Krabi2015C1Eb+0xf64>
   116f8:	f8d7 3154 	ldr.w	r3, [r7, #340]
   116fc:	f8c7 3158 	str.w	r3, [r7, #344]
   11700:	f8d7 3158 	ldr.w	r3, [r7, #344]
   11704:	f8c7 3574 	str.w	r3, [r7, #1396]
    Etape* etape25 = new Etape(Position(2710, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11708:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
   1170c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11710:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11714:	781b      	ldrb	r3, [r3, #0]
   11716:	4610      	mov	r0, r2
   11718:	f8df 1730 	ldr.w	r1, [pc, #1840]	; 11e4c <_ZN9Krabi2015C1Eb+0x16b0>
   1171c:	f8df 2728 	ldr.w	r2, [pc, #1832]	; 11e48 <_ZN9Krabi2015C1Eb+0x16ac>
   11720:	f7fc feec 	bl	e4fc <_ZN8PositionC1Effb>
   11724:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11728:	f8c7 315c 	str.w	r3, [r7, #348]
   1172c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11730:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11734:	f8c7 3510 	str.w	r3, [r7, #1296]
   11738:	f04f 0034 	mov.w	r0, #52	; 0x34
   1173c:	f7fc fd78 	bl	e230 <_Znwj>
   11740:	4603      	mov	r3, r0
   11742:	f8c7 3160 	str.w	r3, [r7, #352]
   11746:	f8d7 3160 	ldr.w	r3, [r7, #352]
   1174a:	2b00      	cmp	r3, #0
   1174c:	d01b      	beq.n	11786 <_ZN9Krabi2015C1Eb+0xfea>
   1174e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11752:	681b      	ldr	r3, [r3, #0]
   11754:	6b5b      	ldr	r3, [r3, #52]
   11756:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
   1175a:	9300      	str	r3, [sp, #0]
   1175c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11760:	9301      	str	r3, [sp, #4]
   11762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11766:	9302      	str	r3, [sp, #8]
   11768:	f04f 0300 	mov.w	r3, #0	; 0x0
   1176c:	9303      	str	r3, [sp, #12]
   1176e:	f8d7 0160 	ldr.w	r0, [r7, #352]
   11772:	ca06      	ldmia	r2!, {r1, r2}
   11774:	f8d7 315c 	ldr.w	r3, [r7, #348]
   11778:	f7fe fd5e 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1177c:	f8d7 3160 	ldr.w	r3, [r7, #352]
   11780:	f8c7 3164 	str.w	r3, [r7, #356]
   11784:	e003      	b.n	1178e <_ZN9Krabi2015C1Eb+0xff2>
   11786:	f8d7 3160 	ldr.w	r3, [r7, #352]
   1178a:	f8c7 3164 	str.w	r3, [r7, #356]
   1178e:	f8d7 3164 	ldr.w	r3, [r7, #356]
   11792:	f8c7 3578 	str.w	r3, [r7, #1400]
    Etape* etape26 = new Etape(Position(2630, 460, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11796:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
   1179a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1179e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   117a2:	781b      	ldrb	r3, [r3, #0]
   117a4:	4610      	mov	r0, r2
   117a6:	f8df 16a8 	ldr.w	r1, [pc, #1704]	; 11e50 <_ZN9Krabi2015C1Eb+0x16b4>
   117aa:	f8df 26a8 	ldr.w	r2, [pc, #1704]	; 11e54 <_ZN9Krabi2015C1Eb+0x16b8>
   117ae:	f7fc fea5 	bl	e4fc <_ZN8PositionC1Effb>
   117b2:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   117b6:	f8c7 3168 	str.w	r3, [r7, #360]
   117ba:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   117be:	f103 0301 	add.w	r3, r3, #1	; 0x1
   117c2:	f8c7 3510 	str.w	r3, [r7, #1296]
   117c6:	f04f 0034 	mov.w	r0, #52	; 0x34
   117ca:	f7fc fd31 	bl	e230 <_Znwj>
   117ce:	4603      	mov	r3, r0
   117d0:	f8c7 316c 	str.w	r3, [r7, #364]
   117d4:	f8d7 316c 	ldr.w	r3, [r7, #364]
   117d8:	2b00      	cmp	r3, #0
   117da:	d01b      	beq.n	11814 <_ZN9Krabi2015C1Eb+0x1078>
   117dc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   117e0:	681b      	ldr	r3, [r3, #0]
   117e2:	6b5b      	ldr	r3, [r3, #52]
   117e4:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
   117e8:	9300      	str	r3, [sp, #0]
   117ea:	f04f 0300 	mov.w	r3, #0	; 0x0
   117ee:	9301      	str	r3, [sp, #4]
   117f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   117f4:	9302      	str	r3, [sp, #8]
   117f6:	f04f 0300 	mov.w	r3, #0	; 0x0
   117fa:	9303      	str	r3, [sp, #12]
   117fc:	f8d7 016c 	ldr.w	r0, [r7, #364]
   11800:	ca06      	ldmia	r2!, {r1, r2}
   11802:	f8d7 3168 	ldr.w	r3, [r7, #360]
   11806:	f7fe fd17 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1180a:	f8d7 316c 	ldr.w	r3, [r7, #364]
   1180e:	f8c7 3170 	str.w	r3, [r7, #368]
   11812:	e003      	b.n	1181c <_ZN9Krabi2015C1Eb+0x1080>
   11814:	f8d7 316c 	ldr.w	r3, [r7, #364]
   11818:	f8c7 3170 	str.w	r3, [r7, #368]
   1181c:	f8d7 3170 	ldr.w	r3, [r7, #368]
   11820:	f8c7 357c 	str.w	r3, [r7, #1404]
    Etape* etape27 = new Etape(Position(1100, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11824:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
   11828:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1182c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11830:	781b      	ldrb	r3, [r3, #0]
   11832:	4610      	mov	r0, r2
   11834:	f8df 1620 	ldr.w	r1, [pc, #1568]	; 11e58 <_ZN9Krabi2015C1Eb+0x16bc>
   11838:	f8df 2620 	ldr.w	r2, [pc, #1568]	; 11e5c <_ZN9Krabi2015C1Eb+0x16c0>
   1183c:	f7fc fe5e 	bl	e4fc <_ZN8PositionC1Effb>
   11840:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11844:	f8c7 3174 	str.w	r3, [r7, #372]
   11848:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1184c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11850:	f8c7 3510 	str.w	r3, [r7, #1296]
   11854:	f04f 0034 	mov.w	r0, #52	; 0x34
   11858:	f7fc fcea 	bl	e230 <_Znwj>
   1185c:	4603      	mov	r3, r0
   1185e:	f8c7 3178 	str.w	r3, [r7, #376]
   11862:	f8d7 3178 	ldr.w	r3, [r7, #376]
   11866:	2b00      	cmp	r3, #0
   11868:	d01b      	beq.n	118a2 <_ZN9Krabi2015C1Eb+0x1106>
   1186a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1186e:	681b      	ldr	r3, [r3, #0]
   11870:	6b5b      	ldr	r3, [r3, #52]
   11872:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
   11876:	9300      	str	r3, [sp, #0]
   11878:	f04f 0300 	mov.w	r3, #0	; 0x0
   1187c:	9301      	str	r3, [sp, #4]
   1187e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11882:	9302      	str	r3, [sp, #8]
   11884:	f04f 0300 	mov.w	r3, #0	; 0x0
   11888:	9303      	str	r3, [sp, #12]
   1188a:	f8d7 0178 	ldr.w	r0, [r7, #376]
   1188e:	ca06      	ldmia	r2!, {r1, r2}
   11890:	f8d7 3174 	ldr.w	r3, [r7, #372]
   11894:	f7fe fcd0 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11898:	f8d7 3178 	ldr.w	r3, [r7, #376]
   1189c:	f8c7 317c 	str.w	r3, [r7, #380]
   118a0:	e003      	b.n	118aa <_ZN9Krabi2015C1Eb+0x110e>
   118a2:	f8d7 3178 	ldr.w	r3, [r7, #376]
   118a6:	f8c7 317c 	str.w	r3, [r7, #380]
   118aa:	f8d7 317c 	ldr.w	r3, [r7, #380]
   118ae:	f8c7 3580 	str.w	r3, [r7, #1408]
    Etape* etape28 = new Etape(Position(560, 1290, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   118b2:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
   118b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
   118ba:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   118be:	781b      	ldrb	r3, [r3, #0]
   118c0:	4610      	mov	r0, r2
   118c2:	f8df 159c 	ldr.w	r1, [pc, #1436]	; 11e60 <_ZN9Krabi2015C1Eb+0x16c4>
   118c6:	f8df 259c 	ldr.w	r2, [pc, #1436]	; 11e64 <_ZN9Krabi2015C1Eb+0x16c8>
   118ca:	f7fc fe17 	bl	e4fc <_ZN8PositionC1Effb>
   118ce:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   118d2:	f8c7 3180 	str.w	r3, [r7, #384]
   118d6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   118da:	f103 0301 	add.w	r3, r3, #1	; 0x1
   118de:	f8c7 3510 	str.w	r3, [r7, #1296]
   118e2:	f04f 0034 	mov.w	r0, #52	; 0x34
   118e6:	f7fc fca3 	bl	e230 <_Znwj>
   118ea:	4603      	mov	r3, r0
   118ec:	f8c7 3184 	str.w	r3, [r7, #388]
   118f0:	f8d7 3184 	ldr.w	r3, [r7, #388]
   118f4:	2b00      	cmp	r3, #0
   118f6:	d01b      	beq.n	11930 <_ZN9Krabi2015C1Eb+0x1194>
   118f8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   118fc:	681b      	ldr	r3, [r3, #0]
   118fe:	6b5b      	ldr	r3, [r3, #52]
   11900:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
   11904:	9300      	str	r3, [sp, #0]
   11906:	f04f 0300 	mov.w	r3, #0	; 0x0
   1190a:	9301      	str	r3, [sp, #4]
   1190c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11910:	9302      	str	r3, [sp, #8]
   11912:	f04f 0300 	mov.w	r3, #0	; 0x0
   11916:	9303      	str	r3, [sp, #12]
   11918:	f8d7 0184 	ldr.w	r0, [r7, #388]
   1191c:	ca06      	ldmia	r2!, {r1, r2}
   1191e:	f8d7 3180 	ldr.w	r3, [r7, #384]
   11922:	f7fe fc89 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11926:	f8d7 3184 	ldr.w	r3, [r7, #388]
   1192a:	f8c7 3188 	str.w	r3, [r7, #392]
   1192e:	e003      	b.n	11938 <_ZN9Krabi2015C1Eb+0x119c>
   11930:	f8d7 3184 	ldr.w	r3, [r7, #388]
   11934:	f8c7 3188 	str.w	r3, [r7, #392]
   11938:	f8d7 3188 	ldr.w	r3, [r7, #392]
   1193c:	f8c7 3584 	str.w	r3, [r7, #1412]
    Etape* etape29 = new Etape(Position(720, 1600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11940:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
   11944:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11948:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1194c:	781b      	ldrb	r3, [r3, #0]
   1194e:	4610      	mov	r0, r2
   11950:	f8df 1514 	ldr.w	r1, [pc, #1300]	; 11e68 <_ZN9Krabi2015C1Eb+0x16cc>
   11954:	f8df 2514 	ldr.w	r2, [pc, #1300]	; 11e6c <_ZN9Krabi2015C1Eb+0x16d0>
   11958:	f7fc fdd0 	bl	e4fc <_ZN8PositionC1Effb>
   1195c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11960:	f8c7 318c 	str.w	r3, [r7, #396]
   11964:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11968:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1196c:	f8c7 3510 	str.w	r3, [r7, #1296]
   11970:	f04f 0034 	mov.w	r0, #52	; 0x34
   11974:	f7fc fc5c 	bl	e230 <_Znwj>
   11978:	4603      	mov	r3, r0
   1197a:	f8c7 3190 	str.w	r3, [r7, #400]
   1197e:	f8d7 3190 	ldr.w	r3, [r7, #400]
   11982:	2b00      	cmp	r3, #0
   11984:	d01b      	beq.n	119be <_ZN9Krabi2015C1Eb+0x1222>
   11986:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1198a:	681b      	ldr	r3, [r3, #0]
   1198c:	6b5b      	ldr	r3, [r3, #52]
   1198e:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
   11992:	9300      	str	r3, [sp, #0]
   11994:	f04f 0300 	mov.w	r3, #0	; 0x0
   11998:	9301      	str	r3, [sp, #4]
   1199a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1199e:	9302      	str	r3, [sp, #8]
   119a0:	f04f 0300 	mov.w	r3, #0	; 0x0
   119a4:	9303      	str	r3, [sp, #12]
   119a6:	f8d7 0190 	ldr.w	r0, [r7, #400]
   119aa:	ca06      	ldmia	r2!, {r1, r2}
   119ac:	f8d7 318c 	ldr.w	r3, [r7, #396]
   119b0:	f7fe fc42 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   119b4:	f8d7 3190 	ldr.w	r3, [r7, #400]
   119b8:	f8c7 3194 	str.w	r3, [r7, #404]
   119bc:	e003      	b.n	119c6 <_ZN9Krabi2015C1Eb+0x122a>
   119be:	f8d7 3190 	ldr.w	r3, [r7, #400]
   119c2:	f8c7 3194 	str.w	r3, [r7, #404]
   119c6:	f8d7 3194 	ldr.w	r3, [r7, #404]
   119ca:	f8c7 3588 	str.w	r3, [r7, #1416]
    Etape* etape30 = new Etape(Position(420, 1600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   119ce:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
   119d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
   119d6:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   119da:	781b      	ldrb	r3, [r3, #0]
   119dc:	4610      	mov	r0, r2
   119de:	f8df 1490 	ldr.w	r1, [pc, #1168]	; 11e70 <_ZN9Krabi2015C1Eb+0x16d4>
   119e2:	f8df 2488 	ldr.w	r2, [pc, #1160]	; 11e6c <_ZN9Krabi2015C1Eb+0x16d0>
   119e6:	f7fc fd89 	bl	e4fc <_ZN8PositionC1Effb>
   119ea:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   119ee:	f8c7 3198 	str.w	r3, [r7, #408]
   119f2:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   119f6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   119fa:	f8c7 3510 	str.w	r3, [r7, #1296]
   119fe:	f04f 0034 	mov.w	r0, #52	; 0x34
   11a02:	f7fc fc15 	bl	e230 <_Znwj>
   11a06:	4603      	mov	r3, r0
   11a08:	f8c7 319c 	str.w	r3, [r7, #412]
   11a0c:	f8d7 319c 	ldr.w	r3, [r7, #412]
   11a10:	2b00      	cmp	r3, #0
   11a12:	d01b      	beq.n	11a4c <_ZN9Krabi2015C1Eb+0x12b0>
   11a14:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11a18:	681b      	ldr	r3, [r3, #0]
   11a1a:	6b5b      	ldr	r3, [r3, #52]
   11a1c:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
   11a20:	9300      	str	r3, [sp, #0]
   11a22:	f04f 0300 	mov.w	r3, #0	; 0x0
   11a26:	9301      	str	r3, [sp, #4]
   11a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11a2c:	9302      	str	r3, [sp, #8]
   11a2e:	f04f 0300 	mov.w	r3, #0	; 0x0
   11a32:	9303      	str	r3, [sp, #12]
   11a34:	f8d7 019c 	ldr.w	r0, [r7, #412]
   11a38:	ca06      	ldmia	r2!, {r1, r2}
   11a3a:	f8d7 3198 	ldr.w	r3, [r7, #408]
   11a3e:	f7fe fbfb 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11a42:	f8d7 319c 	ldr.w	r3, [r7, #412]
   11a46:	f8c7 31a0 	str.w	r3, [r7, #416]
   11a4a:	e003      	b.n	11a54 <_ZN9Krabi2015C1Eb+0x12b8>
   11a4c:	f8d7 319c 	ldr.w	r3, [r7, #412]
   11a50:	f8c7 31a0 	str.w	r3, [r7, #416]
   11a54:	f8d7 31a0 	ldr.w	r3, [r7, #416]
   11a58:	f8c7 358c 	str.w	r3, [r7, #1420]
    Etape* etape31 = new Etape(Position(300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11a5c:	f507 7240 	add.w	r2, r7, #768	; 0x300
   11a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11a64:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11a68:	781b      	ldrb	r3, [r3, #0]
   11a6a:	4610      	mov	r0, r2
   11a6c:	f8df 1404 	ldr.w	r1, [pc, #1028]	; 11e74 <_ZN9Krabi2015C1Eb+0x16d8>
   11a70:	4af5      	ldr	r2, [pc, #980]	(11e48 <_ZN9Krabi2015C1Eb+0x16ac>)
   11a72:	f7fc fd43 	bl	e4fc <_ZN8PositionC1Effb>
   11a76:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11a7a:	f8c7 31a4 	str.w	r3, [r7, #420]
   11a7e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11a82:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11a86:	f8c7 3510 	str.w	r3, [r7, #1296]
   11a8a:	f04f 0034 	mov.w	r0, #52	; 0x34
   11a8e:	f7fc fbcf 	bl	e230 <_Znwj>
   11a92:	4603      	mov	r3, r0
   11a94:	f8c7 31a8 	str.w	r3, [r7, #424]
   11a98:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   11a9c:	2b00      	cmp	r3, #0
   11a9e:	d01b      	beq.n	11ad8 <_ZN9Krabi2015C1Eb+0x133c>
   11aa0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11aa4:	681b      	ldr	r3, [r3, #0]
   11aa6:	6b5b      	ldr	r3, [r3, #52]
   11aa8:	f507 7240 	add.w	r2, r7, #768	; 0x300
   11aac:	9300      	str	r3, [sp, #0]
   11aae:	f04f 0300 	mov.w	r3, #0	; 0x0
   11ab2:	9301      	str	r3, [sp, #4]
   11ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11ab8:	9302      	str	r3, [sp, #8]
   11aba:	f04f 0300 	mov.w	r3, #0	; 0x0
   11abe:	9303      	str	r3, [sp, #12]
   11ac0:	f8d7 01a8 	ldr.w	r0, [r7, #424]
   11ac4:	ca06      	ldmia	r2!, {r1, r2}
   11ac6:	f8d7 31a4 	ldr.w	r3, [r7, #420]
   11aca:	f7fe fbb5 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11ace:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   11ad2:	f8c7 31ac 	str.w	r3, [r7, #428]
   11ad6:	e003      	b.n	11ae0 <_ZN9Krabi2015C1Eb+0x1344>
   11ad8:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   11adc:	f8c7 31ac 	str.w	r3, [r7, #428]
   11ae0:	f8d7 31ac 	ldr.w	r3, [r7, #428]
   11ae4:	f8c7 3590 	str.w	r3, [r7, #1424]
    Etape* etape32 = new Etape(Position(400, 430, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11ae8:	f507 7242 	add.w	r2, r7, #776	; 0x308
   11aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11af0:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11af4:	781b      	ldrb	r3, [r3, #0]
   11af6:	4610      	mov	r0, r2
   11af8:	49df      	ldr	r1, [pc, #892]	(11e78 <_ZN9Krabi2015C1Eb+0x16dc>)
   11afa:	4ae0      	ldr	r2, [pc, #896]	(11e7c <_ZN9Krabi2015C1Eb+0x16e0>)
   11afc:	f7fc fcfe 	bl	e4fc <_ZN8PositionC1Effb>
   11b00:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11b04:	f8c7 31b0 	str.w	r3, [r7, #432]
   11b08:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11b0c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11b10:	f8c7 3510 	str.w	r3, [r7, #1296]
   11b14:	f04f 0034 	mov.w	r0, #52	; 0x34
   11b18:	f7fc fb8a 	bl	e230 <_Znwj>
   11b1c:	4603      	mov	r3, r0
   11b1e:	f8c7 31b4 	str.w	r3, [r7, #436]
   11b22:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   11b26:	2b00      	cmp	r3, #0
   11b28:	d01b      	beq.n	11b62 <_ZN9Krabi2015C1Eb+0x13c6>
   11b2a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11b2e:	681b      	ldr	r3, [r3, #0]
   11b30:	6b5b      	ldr	r3, [r3, #52]
   11b32:	f507 7242 	add.w	r2, r7, #776	; 0x308
   11b36:	9300      	str	r3, [sp, #0]
   11b38:	f04f 0300 	mov.w	r3, #0	; 0x0
   11b3c:	9301      	str	r3, [sp, #4]
   11b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b42:	9302      	str	r3, [sp, #8]
   11b44:	f04f 0300 	mov.w	r3, #0	; 0x0
   11b48:	9303      	str	r3, [sp, #12]
   11b4a:	f8d7 01b4 	ldr.w	r0, [r7, #436]
   11b4e:	ca06      	ldmia	r2!, {r1, r2}
   11b50:	f8d7 31b0 	ldr.w	r3, [r7, #432]
   11b54:	f7fe fb70 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11b58:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   11b5c:	f8c7 31b8 	str.w	r3, [r7, #440]
   11b60:	e003      	b.n	11b6a <_ZN9Krabi2015C1Eb+0x13ce>
   11b62:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   11b66:	f8c7 31b8 	str.w	r3, [r7, #440]
   11b6a:	f8d7 31b8 	ldr.w	r3, [r7, #440]
   11b6e:	f8c7 3594 	str.w	r3, [r7, #1428]
    Etape* etape33 = new Etape(Position(1110, 1130, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11b72:	f507 7244 	add.w	r2, r7, #784	; 0x310
   11b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11b7a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11b7e:	781b      	ldrb	r3, [r3, #0]
   11b80:	4610      	mov	r0, r2
   11b82:	49bf      	ldr	r1, [pc, #764]	(11e80 <_ZN9Krabi2015C1Eb+0x16e4>)
   11b84:	4abf      	ldr	r2, [pc, #764]	(11e84 <_ZN9Krabi2015C1Eb+0x16e8>)
   11b86:	f7fc fcb9 	bl	e4fc <_ZN8PositionC1Effb>
   11b8a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11b8e:	f8c7 31bc 	str.w	r3, [r7, #444]
   11b92:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11b96:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11b9a:	f8c7 3510 	str.w	r3, [r7, #1296]
   11b9e:	f04f 0034 	mov.w	r0, #52	; 0x34
   11ba2:	f7fc fb45 	bl	e230 <_Znwj>
   11ba6:	4603      	mov	r3, r0
   11ba8:	f8c7 31c0 	str.w	r3, [r7, #448]
   11bac:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   11bb0:	2b00      	cmp	r3, #0
   11bb2:	d01b      	beq.n	11bec <_ZN9Krabi2015C1Eb+0x1450>
   11bb4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11bb8:	681b      	ldr	r3, [r3, #0]
   11bba:	6b5b      	ldr	r3, [r3, #52]
   11bbc:	f507 7244 	add.w	r2, r7, #784	; 0x310
   11bc0:	9300      	str	r3, [sp, #0]
   11bc2:	f04f 0300 	mov.w	r3, #0	; 0x0
   11bc6:	9301      	str	r3, [sp, #4]
   11bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11bcc:	9302      	str	r3, [sp, #8]
   11bce:	f04f 0300 	mov.w	r3, #0	; 0x0
   11bd2:	9303      	str	r3, [sp, #12]
   11bd4:	f8d7 01c0 	ldr.w	r0, [r7, #448]
   11bd8:	ca06      	ldmia	r2!, {r1, r2}
   11bda:	f8d7 31bc 	ldr.w	r3, [r7, #444]
   11bde:	f7fe fb2b 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11be2:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   11be6:	f8c7 31c4 	str.w	r3, [r7, #452]
   11bea:	e003      	b.n	11bf4 <_ZN9Krabi2015C1Eb+0x1458>
   11bec:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   11bf0:	f8c7 31c4 	str.w	r3, [r7, #452]
   11bf4:	f8d7 31c4 	ldr.w	r3, [r7, #452]
   11bf8:	f8c7 3598 	str.w	r3, [r7, #1432]
    Etape* etape34 = new Etape(Position(1480, 1150, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11bfc:	f507 7246 	add.w	r2, r7, #792	; 0x318
   11c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11c04:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11c08:	781b      	ldrb	r3, [r3, #0]
   11c0a:	4610      	mov	r0, r2
   11c0c:	499e      	ldr	r1, [pc, #632]	(11e88 <_ZN9Krabi2015C1Eb+0x16ec>)
   11c0e:	4a9f      	ldr	r2, [pc, #636]	(11e8c <_ZN9Krabi2015C1Eb+0x16f0>)
   11c10:	f7fc fc74 	bl	e4fc <_ZN8PositionC1Effb>
   11c14:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11c18:	f8c7 31c8 	str.w	r3, [r7, #456]
   11c1c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11c20:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11c24:	f8c7 3510 	str.w	r3, [r7, #1296]
   11c28:	f04f 0034 	mov.w	r0, #52	; 0x34
   11c2c:	f7fc fb00 	bl	e230 <_Znwj>
   11c30:	4603      	mov	r3, r0
   11c32:	f8c7 31cc 	str.w	r3, [r7, #460]
   11c36:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   11c3a:	2b00      	cmp	r3, #0
   11c3c:	d01b      	beq.n	11c76 <_ZN9Krabi2015C1Eb+0x14da>
   11c3e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11c42:	681b      	ldr	r3, [r3, #0]
   11c44:	6b5b      	ldr	r3, [r3, #52]
   11c46:	f507 7246 	add.w	r2, r7, #792	; 0x318
   11c4a:	9300      	str	r3, [sp, #0]
   11c4c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11c50:	9301      	str	r3, [sp, #4]
   11c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11c56:	9302      	str	r3, [sp, #8]
   11c58:	f04f 0300 	mov.w	r3, #0	; 0x0
   11c5c:	9303      	str	r3, [sp, #12]
   11c5e:	f8d7 01cc 	ldr.w	r0, [r7, #460]
   11c62:	ca06      	ldmia	r2!, {r1, r2}
   11c64:	f8d7 31c8 	ldr.w	r3, [r7, #456]
   11c68:	f7fe fae6 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11c6c:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   11c70:	f8c7 31d0 	str.w	r3, [r7, #464]
   11c74:	e003      	b.n	11c7e <_ZN9Krabi2015C1Eb+0x14e2>
   11c76:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   11c7a:	f8c7 31d0 	str.w	r3, [r7, #464]
   11c7e:	f8d7 31d0 	ldr.w	r3, [r7, #464]
   11c82:	f8c7 359c 	str.w	r3, [r7, #1436]
    Etape* etape35 = new Etape(Position(1850, 1160, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11c86:	f507 7248 	add.w	r2, r7, #800	; 0x320
   11c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11c8e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11c92:	781b      	ldrb	r3, [r3, #0]
   11c94:	4610      	mov	r0, r2
   11c96:	497e      	ldr	r1, [pc, #504]	(11e90 <_ZN9Krabi2015C1Eb+0x16f4>)
   11c98:	4a7e      	ldr	r2, [pc, #504]	(11e94 <_ZN9Krabi2015C1Eb+0x16f8>)
   11c9a:	f7fc fc2f 	bl	e4fc <_ZN8PositionC1Effb>
   11c9e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11ca2:	f8c7 31d4 	str.w	r3, [r7, #468]
   11ca6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11caa:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11cae:	f8c7 3510 	str.w	r3, [r7, #1296]
   11cb2:	f04f 0034 	mov.w	r0, #52	; 0x34
   11cb6:	f7fc fabb 	bl	e230 <_Znwj>
   11cba:	4603      	mov	r3, r0
   11cbc:	f8c7 31d8 	str.w	r3, [r7, #472]
   11cc0:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   11cc4:	2b00      	cmp	r3, #0
   11cc6:	d01b      	beq.n	11d00 <_ZN9Krabi2015C1Eb+0x1564>
   11cc8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11ccc:	681b      	ldr	r3, [r3, #0]
   11cce:	6b5b      	ldr	r3, [r3, #52]
   11cd0:	f507 7248 	add.w	r2, r7, #800	; 0x320
   11cd4:	9300      	str	r3, [sp, #0]
   11cd6:	f04f 0300 	mov.w	r3, #0	; 0x0
   11cda:	9301      	str	r3, [sp, #4]
   11cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11ce0:	9302      	str	r3, [sp, #8]
   11ce2:	f04f 0300 	mov.w	r3, #0	; 0x0
   11ce6:	9303      	str	r3, [sp, #12]
   11ce8:	f8d7 01d8 	ldr.w	r0, [r7, #472]
   11cec:	ca06      	ldmia	r2!, {r1, r2}
   11cee:	f8d7 31d4 	ldr.w	r3, [r7, #468]
   11cf2:	f7fe faa1 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11cf6:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   11cfa:	f8c7 31dc 	str.w	r3, [r7, #476]
   11cfe:	e003      	b.n	11d08 <_ZN9Krabi2015C1Eb+0x156c>
   11d00:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   11d04:	f8c7 31dc 	str.w	r3, [r7, #476]
   11d08:	f8d7 31dc 	ldr.w	r3, [r7, #476]
   11d0c:	f8c7 35a0 	str.w	r3, [r7, #1440]
    Etape* etape36 = new Etape(Position(1950, 1530, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11d10:	f507 724a 	add.w	r2, r7, #808	; 0x328
   11d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11d18:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11d1c:	781b      	ldrb	r3, [r3, #0]
   11d1e:	4610      	mov	r0, r2
   11d20:	495d      	ldr	r1, [pc, #372]	(11e98 <_ZN9Krabi2015C1Eb+0x16fc>)
   11d22:	4a5e      	ldr	r2, [pc, #376]	(11e9c <_ZN9Krabi2015C1Eb+0x1700>)
   11d24:	f7fc fbea 	bl	e4fc <_ZN8PositionC1Effb>
   11d28:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11d2c:	f8c7 31e0 	str.w	r3, [r7, #480]
   11d30:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11d34:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11d38:	f8c7 3510 	str.w	r3, [r7, #1296]
   11d3c:	f04f 0034 	mov.w	r0, #52	; 0x34
   11d40:	f7fc fa76 	bl	e230 <_Znwj>
   11d44:	4603      	mov	r3, r0
   11d46:	f8c7 31e4 	str.w	r3, [r7, #484]
   11d4a:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   11d4e:	2b00      	cmp	r3, #0
   11d50:	d01b      	beq.n	11d8a <_ZN9Krabi2015C1Eb+0x15ee>
   11d52:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11d56:	681b      	ldr	r3, [r3, #0]
   11d58:	6b5b      	ldr	r3, [r3, #52]
   11d5a:	f507 724a 	add.w	r2, r7, #808	; 0x328
   11d5e:	9300      	str	r3, [sp, #0]
   11d60:	f04f 0300 	mov.w	r3, #0	; 0x0
   11d64:	9301      	str	r3, [sp, #4]
   11d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11d6a:	9302      	str	r3, [sp, #8]
   11d6c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11d70:	9303      	str	r3, [sp, #12]
   11d72:	f8d7 01e4 	ldr.w	r0, [r7, #484]
   11d76:	ca06      	ldmia	r2!, {r1, r2}
   11d78:	f8d7 31e0 	ldr.w	r3, [r7, #480]
   11d7c:	f7fe fa5c 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11d80:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   11d84:	f8c7 31e8 	str.w	r3, [r7, #488]
   11d88:	e003      	b.n	11d92 <_ZN9Krabi2015C1Eb+0x15f6>
   11d8a:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   11d8e:	f8c7 31e8 	str.w	r3, [r7, #488]
   11d92:	f8d7 31e8 	ldr.w	r3, [r7, #488]
   11d96:	f8c7 35a4 	str.w	r3, [r7, #1444]
    Etape* etape37 = new Etape(Position(1890, 1365, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11d9a:	f507 724c 	add.w	r2, r7, #816	; 0x330
   11d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11da2:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11da6:	781b      	ldrb	r3, [r3, #0]
   11da8:	4610      	mov	r0, r2
   11daa:	493d      	ldr	r1, [pc, #244]	(11ea0 <_ZN9Krabi2015C1Eb+0x1704>)
   11dac:	4a3d      	ldr	r2, [pc, #244]	(11ea4 <_ZN9Krabi2015C1Eb+0x1708>)
   11dae:	f7fc fba5 	bl	e4fc <_ZN8PositionC1Effb>
   11db2:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11db6:	f8c7 31ec 	str.w	r3, [r7, #492]
   11dba:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11dbe:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11dc2:	f8c7 3510 	str.w	r3, [r7, #1296]
   11dc6:	f04f 0034 	mov.w	r0, #52	; 0x34
   11dca:	f7fc fa31 	bl	e230 <_Znwj>
   11dce:	4603      	mov	r3, r0
   11dd0:	f8c7 31f0 	str.w	r3, [r7, #496]
   11dd4:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   11dd8:	2b00      	cmp	r3, #0
   11dda:	d01b      	beq.n	11e14 <_ZN9Krabi2015C1Eb+0x1678>
   11ddc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11de0:	681b      	ldr	r3, [r3, #0]
   11de2:	6b5b      	ldr	r3, [r3, #52]
   11de4:	f507 724c 	add.w	r2, r7, #816	; 0x330
   11de8:	9300      	str	r3, [sp, #0]
   11dea:	f04f 0300 	mov.w	r3, #0	; 0x0
   11dee:	9301      	str	r3, [sp, #4]
   11df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11df4:	9302      	str	r3, [sp, #8]
   11df6:	f04f 0300 	mov.w	r3, #0	; 0x0
   11dfa:	9303      	str	r3, [sp, #12]
   11dfc:	f8d7 01f0 	ldr.w	r0, [r7, #496]
   11e00:	ca06      	ldmia	r2!, {r1, r2}
   11e02:	f8d7 31ec 	ldr.w	r3, [r7, #492]
   11e06:	f7fe fa17 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11e0a:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   11e0e:	f8c7 31f4 	str.w	r3, [r7, #500]
   11e12:	e003      	b.n	11e1c <_ZN9Krabi2015C1Eb+0x1680>
   11e14:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   11e18:	f8c7 31f4 	str.w	r3, [r7, #500]
   11e1c:	f8d7 31f4 	ldr.w	r3, [r7, #500]
   11e20:	f8c7 35a8 	str.w	r3, [r7, #1448]
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h



    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   11e24:	f04f 0300 	mov.w	r3, #0	; 0x0
   11e28:	f8c7 35ac 	str.w	r3, [r7, #1452]
   11e2c:	e0a6      	b.n	11f7c <_ZN9Krabi2015C1Eb+0x17e0>
   11e2e:	46c0      	nop			(mov r8, r8)
   11e30:	449c4000 	.word	0x449c4000
   11e34:	44e10000 	.word	0x44e10000
   11e38:	44dac000 	.word	0x44dac000
   11e3c:	4499c000 	.word	0x4499c000
   11e40:	443e0000 	.word	0x443e0000
   11e44:	450fc000 	.word	0x450fc000
   11e48:	44bb8000 	.word	0x44bb8000
   11e4c:	45296000 	.word	0x45296000
   11e50:	45246000 	.word	0x45246000
   11e54:	43e60000 	.word	0x43e60000
   11e58:	44898000 	.word	0x44898000
   11e5c:	44ce4000 	.word	0x44ce4000
   11e60:	440c0000 	.word	0x440c0000
   11e64:	44a14000 	.word	0x44a14000
   11e68:	44340000 	.word	0x44340000
   11e6c:	44c80000 	.word	0x44c80000
   11e70:	43d20000 	.word	0x43d20000
   11e74:	43960000 	.word	0x43960000
   11e78:	43c80000 	.word	0x43c80000
   11e7c:	43d70000 	.word	0x43d70000
   11e80:	448ac000 	.word	0x448ac000
   11e84:	448d4000 	.word	0x448d4000
   11e88:	44b90000 	.word	0x44b90000
   11e8c:	448fc000 	.word	0x448fc000
   11e90:	44e74000 	.word	0x44e74000
   11e94:	44910000 	.word	0x44910000
   11e98:	44f3c000 	.word	0x44f3c000
   11e9c:	44bf4000 	.word	0x44bf4000
   11ea0:	44ec4000 	.word	0x44ec4000
   11ea4:	44aaa000 	.word	0x44aaa000
    {
        if (tableauEtapesTotal[i]->getState() == -1)
   11ea8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11eac:	681b      	ldr	r3, [r3, #0]
   11eae:	6b5a      	ldr	r2, [r3, #52]
   11eb0:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   11eb4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   11eb8:	4413      	add	r3, r2
   11eba:	681b      	ldr	r3, [r3, #0]
   11ebc:	4618      	mov	r0, r3
   11ebe:	f7fd ff9f 	bl	fe00 <_ZN5Etape8getStateEv>
   11ec2:	4603      	mov	r3, r0
   11ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   11ec8:	bf14      	ite	ne
   11eca:	2300      	movne	r3, #0
   11ecc:	2301      	moveq	r3, #1
   11ece:	b2db      	uxtb	r3, r3
   11ed0:	2b00      	cmp	r3, #0
   11ed2:	d04d      	beq.n	11f70 <_ZN9Krabi2015C1Eb+0x17d4>
        {
            actionGoto[i] = ActionGoTo(tableauEtapesTotal[i]->getPosition());
   11ed4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11ed8:	681b      	ldr	r3, [r3, #0]
   11eda:	6a99      	ldr	r1, [r3, #40]
   11edc:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   11ee0:	ea4f 1203 	mov.w	r2, r3, lsl #4
   11ee4:	ea4f 0382 	mov.w	r3, r2, lsl #2
   11ee8:	ebc2 0303 	rsb	r3, r2, r3
   11eec:	eb01 0403 	add.w	r4, r1, r3
   11ef0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11ef4:	681b      	ldr	r3, [r3, #0]
   11ef6:	6b5a      	ldr	r2, [r3, #52]
   11ef8:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   11efc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   11f00:	4413      	add	r3, r2
   11f02:	681a      	ldr	r2, [r3, #0]
   11f04:	f507 735a 	add.w	r3, r7, #872	; 0x368
   11f08:	4618      	mov	r0, r3
   11f0a:	4611      	mov	r1, r2
   11f0c:	f7fd ff64 	bl	fdd8 <_ZN5Etape11getPositionEv>
   11f10:	f507 714e 	add.w	r1, r7, #824	; 0x338
   11f14:	f507 725a 	add.w	r2, r7, #872	; 0x368
   11f18:	f8df 3924 	ldr.w	r3, [pc, #2340]	; 12840 <_ZN9Krabi2015C1Eb+0x20a4>
   11f1c:	9300      	str	r3, [sp, #0]
   11f1e:	4608      	mov	r0, r1
   11f20:	ca06      	ldmia	r2!, {r1, r2}
   11f22:	f04f 0300 	mov.w	r3, #0	; 0x0
   11f26:	f7fd f80f 	bl	ef48 <_ZN10ActionGoToC1E8Positionbf>
   11f2a:	f507 734e 	add.w	r3, r7, #824	; 0x338
   11f2e:	4620      	mov	r0, r4
   11f30:	4619      	mov	r1, r3
   11f32:	f00a fd8d 	bl	1ca50 <_ZN10ActionGoToaSERKS_>
   11f36:	f507 734e 	add.w	r3, r7, #824	; 0x338
   11f3a:	4618      	mov	r0, r3
   11f3c:	f7fc ffcc 	bl	eed8 <_ZN10ActionGoToD1Ev>
            actionEtape[i] = &actionGoto[i];
   11f40:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11f44:	681b      	ldr	r3, [r3, #0]
   11f46:	6a5a      	ldr	r2, [r3, #36]
   11f48:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   11f4c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   11f50:	eb02 0003 	add.w	r0, r2, r3
   11f54:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11f58:	681b      	ldr	r3, [r3, #0]
   11f5a:	6a99      	ldr	r1, [r3, #40]
   11f5c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   11f60:	ea4f 1203 	mov.w	r2, r3, lsl #4
   11f64:	ea4f 0382 	mov.w	r3, r2, lsl #2
   11f68:	ebc2 0303 	rsb	r3, r2, r3
   11f6c:	440b      	add	r3, r1
   11f6e:	6003      	str	r3, [r0, #0]
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h



    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   11f70:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   11f74:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11f78:	f8c7 35ac 	str.w	r3, [r7, #1452]
   11f7c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   11f80:	2b25      	cmp	r3, #37
   11f82:	dd91      	ble.n	11ea8 <_ZN9Krabi2015C1Eb+0x170c>
            actionEtape[i] = &actionGoto[i];
        }

    }

    actionClap[0]= Clap(Position(836, 1780, isYellow),Position(1000, 1780, isYellow));
   11f84:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11f88:	681b      	ldr	r3, [r3, #0]
   11f8a:	f103 0448 	add.w	r4, r3, #72	; 0x48
   11f8e:	f507 7266 	add.w	r2, r7, #920	; 0x398
   11f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11f96:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11f9a:	781b      	ldrb	r3, [r3, #0]
   11f9c:	4610      	mov	r0, r2
   11f9e:	f8df 18a4 	ldr.w	r1, [pc, #2212]	; 12844 <_ZN9Krabi2015C1Eb+0x20a8>
   11fa2:	f8df 28a4 	ldr.w	r2, [pc, #2212]	; 12848 <_ZN9Krabi2015C1Eb+0x20ac>
   11fa6:	f7fc faa9 	bl	e4fc <_ZN8PositionC1Effb>
   11faa:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
   11fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11fb2:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11fb6:	781b      	ldrb	r3, [r3, #0]
   11fb8:	4610      	mov	r0, r2
   11fba:	f8df 1890 	ldr.w	r1, [pc, #2192]	; 1284c <_ZN9Krabi2015C1Eb+0x20b0>
   11fbe:	f8df 2888 	ldr.w	r2, [pc, #2184]	; 12848 <_ZN9Krabi2015C1Eb+0x20ac>
   11fc2:	f7fc fa9b 	bl	e4fc <_ZN8PositionC1Effb>
   11fc6:	f507 705c 	add.w	r0, r7, #880	; 0x370
   11fca:	f507 7166 	add.w	r1, r7, #920	; 0x398
   11fce:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
   11fd2:	6853      	ldr	r3, [r2, #4]
   11fd4:	9300      	str	r3, [sp, #0]
   11fd6:	6813      	ldr	r3, [r2, #0]
   11fd8:	c906      	ldmia	r1!, {r1, r2}
   11fda:	f7fd f99d 	bl	f318 <_ZN4ClapC1E8PositionS0_>
   11fde:	f507 735c 	add.w	r3, r7, #880	; 0x370
   11fe2:	4620      	mov	r0, r4
   11fe4:	4619      	mov	r1, r3
   11fe6:	f00a fd5f 	bl	1caa8 <_ZN4ClapaSERKS_>
   11fea:	f507 735c 	add.w	r3, r7, #880	; 0x370
   11fee:	4618      	mov	r0, r3
   11ff0:	f7fd f95a 	bl	f2a8 <_ZN4ClapD1Ev>
    actionEtape[2]= &actionClap[0];
   11ff4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11ff8:	681b      	ldr	r3, [r3, #0]
   11ffa:	6a5b      	ldr	r3, [r3, #36]
   11ffc:	f103 0208 	add.w	r2, r3, #8	; 0x8
   12000:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12004:	681b      	ldr	r3, [r3, #0]
   12006:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1200a:	6013      	str	r3, [r2, #0]
    actionClap[1] = Clap(Position(236, 1780, isYellow),Position(400, 1780, isYellow));
   1200c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12010:	681b      	ldr	r3, [r3, #0]
   12012:	f103 0470 	add.w	r4, r3, #112	; 0x70
   12016:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
   1201a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1201e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12022:	781b      	ldrb	r3, [r3, #0]
   12024:	4610      	mov	r0, r2
   12026:	f8df 1828 	ldr.w	r1, [pc, #2088]	; 12850 <_ZN9Krabi2015C1Eb+0x20b4>
   1202a:	f8df 281c 	ldr.w	r2, [pc, #2076]	; 12848 <_ZN9Krabi2015C1Eb+0x20ac>
   1202e:	f7fc fa65 	bl	e4fc <_ZN8PositionC1Effb>
   12032:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
   12036:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1203a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1203e:	781b      	ldrb	r3, [r3, #0]
   12040:	4610      	mov	r0, r2
   12042:	f8df 1810 	ldr.w	r1, [pc, #2064]	; 12854 <_ZN9Krabi2015C1Eb+0x20b8>
   12046:	f8df 2800 	ldr.w	r2, [pc, #2048]	; 12848 <_ZN9Krabi2015C1Eb+0x20ac>
   1204a:	f7fc fa57 	bl	e4fc <_ZN8PositionC1Effb>
   1204e:	f507 706a 	add.w	r0, r7, #936	; 0x3a8
   12052:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
   12056:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
   1205a:	6853      	ldr	r3, [r2, #4]
   1205c:	9300      	str	r3, [sp, #0]
   1205e:	6813      	ldr	r3, [r2, #0]
   12060:	c906      	ldmia	r1!, {r1, r2}
   12062:	f7fd f959 	bl	f318 <_ZN4ClapC1E8PositionS0_>
   12066:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
   1206a:	4620      	mov	r0, r4
   1206c:	4619      	mov	r1, r3
   1206e:	f00a fd1b 	bl	1caa8 <_ZN4ClapaSERKS_>
   12072:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
   12076:	4618      	mov	r0, r3
   12078:	f7fd f916 	bl	f2a8 <_ZN4ClapD1Ev>
    actionEtape[4] = &actionClap[1];
   1207c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12080:	681b      	ldr	r3, [r3, #0]
   12082:	6a5b      	ldr	r3, [r3, #36]
   12084:	f103 0210 	add.w	r2, r3, #16	; 0x10
   12088:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1208c:	681b      	ldr	r3, [r3, #0]
   1208e:	f103 0370 	add.w	r3, r3, #112	; 0x70
   12092:	6013      	str	r3, [r2, #0]
    actionClap[2] = Clap(Position(2500, 1780, isYellow),Position(2300, 1780, isYellow));
   12094:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12098:	681b      	ldr	r3, [r3, #0]
   1209a:	f103 0498 	add.w	r4, r3, #152	; 0x98
   1209e:	f507 6281 	add.w	r2, r7, #1032	; 0x408
   120a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
   120a6:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   120aa:	781b      	ldrb	r3, [r3, #0]
   120ac:	4610      	mov	r0, r2
   120ae:	f8df 17a8 	ldr.w	r1, [pc, #1960]	; 12858 <_ZN9Krabi2015C1Eb+0x20bc>
   120b2:	f8df 2794 	ldr.w	r2, [pc, #1940]	; 12848 <_ZN9Krabi2015C1Eb+0x20ac>
   120b6:	f7fc fa21 	bl	e4fc <_ZN8PositionC1Effb>
   120ba:	f507 6282 	add.w	r2, r7, #1040	; 0x410
   120be:	f507 7300 	add.w	r3, r7, #512	; 0x200
   120c2:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   120c6:	781b      	ldrb	r3, [r3, #0]
   120c8:	4610      	mov	r0, r2
   120ca:	f8df 1790 	ldr.w	r1, [pc, #1936]	; 1285c <_ZN9Krabi2015C1Eb+0x20c0>
   120ce:	f8df 2778 	ldr.w	r2, [pc, #1912]	; 12848 <_ZN9Krabi2015C1Eb+0x20ac>
   120d2:	f7fc fa13 	bl	e4fc <_ZN8PositionC1Effb>
   120d6:	f507 7078 	add.w	r0, r7, #992	; 0x3e0
   120da:	f507 6181 	add.w	r1, r7, #1032	; 0x408
   120de:	f507 6282 	add.w	r2, r7, #1040	; 0x410
   120e2:	6853      	ldr	r3, [r2, #4]
   120e4:	9300      	str	r3, [sp, #0]
   120e6:	6813      	ldr	r3, [r2, #0]
   120e8:	c906      	ldmia	r1!, {r1, r2}
   120ea:	f7fd f915 	bl	f318 <_ZN4ClapC1E8PositionS0_>
   120ee:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
   120f2:	4620      	mov	r0, r4
   120f4:	4619      	mov	r1, r3
   120f6:	f00a fcd7 	bl	1caa8 <_ZN4ClapaSERKS_>
   120fa:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
   120fe:	4618      	mov	r0, r3
   12100:	f7fd f8d2 	bl	f2a8 <_ZN4ClapD1Ev>
    actionEtape[6] = &actionClap[2];
   12104:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12108:	681b      	ldr	r3, [r3, #0]
   1210a:	6a5b      	ldr	r3, [r3, #36]
   1210c:	f103 0218 	add.w	r2, r3, #24	; 0x18
   12110:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12114:	681b      	ldr	r3, [r3, #0]
   12116:	f103 0398 	add.w	r3, r3, #152	; 0x98
   1211a:	6013      	str	r3, [r2, #0]
    actionGobelet[0] = Gobelet(Position(250, 1750, isYellow));
   1211c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12120:	681b      	ldr	r3, [r3, #0]
   12122:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
   12126:	f507 6287 	add.w	r2, r7, #1080	; 0x438
   1212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1212e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12132:	781b      	ldrb	r3, [r3, #0]
   12134:	4610      	mov	r0, r2
   12136:	f8df 1728 	ldr.w	r1, [pc, #1832]	; 12860 <_ZN9Krabi2015C1Eb+0x20c4>
   1213a:	f8df 2728 	ldr.w	r2, [pc, #1832]	; 12864 <_ZN9Krabi2015C1Eb+0x20c8>
   1213e:	f7fc f9dd 	bl	e4fc <_ZN8PositionC1Effb>
   12142:	f507 6283 	add.w	r2, r7, #1048	; 0x418
   12146:	f507 6387 	add.w	r3, r7, #1080	; 0x438
   1214a:	4610      	mov	r0, r2
   1214c:	e893 0006 	ldmia.w	r3, {r1, r2}
   12150:	f7fe f9f6 	bl	10540 <_ZN7GobeletC1E8Position>
   12154:	f507 6383 	add.w	r3, r7, #1048	; 0x418
   12158:	4620      	mov	r0, r4
   1215a:	4619      	mov	r1, r3
   1215c:	f00a fccc 	bl	1caf8 <_ZN7GobeletaSERKS_>
   12160:	f507 6383 	add.w	r3, r7, #1048	; 0x418
   12164:	4618      	mov	r0, r3
   12166:	f7fe f9b3 	bl	104d0 <_ZN7GobeletD1Ev>
    actionEtape[8] = &actionGobelet[0];
   1216a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1216e:	681b      	ldr	r3, [r3, #0]
   12170:	6a5b      	ldr	r3, [r3, #36]
   12172:	f103 0220 	add.w	r2, r3, #32	; 0x20
   12176:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1217a:	681b      	ldr	r3, [r3, #0]
   1217c:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   12180:	6013      	str	r3, [r2, #0]
    actionGobelet[1] = Gobelet(Position(910, 830, isYellow));
   12182:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12186:	681b      	ldr	r3, [r3, #0]
   12188:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
   1218c:	f507 628c 	add.w	r2, r7, #1120	; 0x460
   12190:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12194:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12198:	781b      	ldrb	r3, [r3, #0]
   1219a:	4610      	mov	r0, r2
   1219c:	f8df 16c8 	ldr.w	r1, [pc, #1736]	; 12868 <_ZN9Krabi2015C1Eb+0x20cc>
   121a0:	f8df 26c8 	ldr.w	r2, [pc, #1736]	; 1286c <_ZN9Krabi2015C1Eb+0x20d0>
   121a4:	f7fc f9aa 	bl	e4fc <_ZN8PositionC1Effb>
   121a8:	f507 6288 	add.w	r2, r7, #1088	; 0x440
   121ac:	f507 638c 	add.w	r3, r7, #1120	; 0x460
   121b0:	4610      	mov	r0, r2
   121b2:	e893 0006 	ldmia.w	r3, {r1, r2}
   121b6:	f7fe f9c3 	bl	10540 <_ZN7GobeletC1E8Position>
   121ba:	f507 6388 	add.w	r3, r7, #1088	; 0x440
   121be:	4620      	mov	r0, r4
   121c0:	4619      	mov	r1, r3
   121c2:	f00a fc99 	bl	1caf8 <_ZN7GobeletaSERKS_>
   121c6:	f507 6388 	add.w	r3, r7, #1088	; 0x440
   121ca:	4618      	mov	r0, r3
   121cc:	f7fe f980 	bl	104d0 <_ZN7GobeletD1Ev>
    actionEtape[9] = &actionGobelet[1];
   121d0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   121d4:	681b      	ldr	r3, [r3, #0]
   121d6:	6a5b      	ldr	r3, [r3, #36]
   121d8:	f103 0224 	add.w	r2, r3, #36	; 0x24
   121dc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   121e0:	681b      	ldr	r3, [r3, #0]
   121e2:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
   121e6:	6013      	str	r3, [r2, #0]
    actionGobelet[2] = Gobelet(Position(1500, 1650, isYellow));
   121e8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   121ec:	681b      	ldr	r3, [r3, #0]
   121ee:	f503 7480 	add.w	r4, r3, #256	; 0x100
   121f2:	f507 6291 	add.w	r2, r7, #1160	; 0x488
   121f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
   121fa:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   121fe:	781b      	ldrb	r3, [r3, #0]
   12200:	4610      	mov	r0, r2
   12202:	f8df 166c 	ldr.w	r1, [pc, #1644]	; 12870 <_ZN9Krabi2015C1Eb+0x20d4>
   12206:	f8df 266c 	ldr.w	r2, [pc, #1644]	; 12874 <_ZN9Krabi2015C1Eb+0x20d8>
   1220a:	f7fc f977 	bl	e4fc <_ZN8PositionC1Effb>
   1220e:	f507 628d 	add.w	r2, r7, #1128	; 0x468
   12212:	f507 6391 	add.w	r3, r7, #1160	; 0x488
   12216:	4610      	mov	r0, r2
   12218:	e893 0006 	ldmia.w	r3, {r1, r2}
   1221c:	f7fe f990 	bl	10540 <_ZN7GobeletC1E8Position>
   12220:	f507 638d 	add.w	r3, r7, #1128	; 0x468
   12224:	4620      	mov	r0, r4
   12226:	4619      	mov	r1, r3
   12228:	f00a fc66 	bl	1caf8 <_ZN7GobeletaSERKS_>
   1222c:	f507 638d 	add.w	r3, r7, #1128	; 0x468
   12230:	4618      	mov	r0, r3
   12232:	f7fe f94d 	bl	104d0 <_ZN7GobeletD1Ev>
    actionEtape[10] = &actionGobelet[2];
   12236:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1223a:	681b      	ldr	r3, [r3, #0]
   1223c:	6a5b      	ldr	r3, [r3, #36]
   1223e:	f103 0228 	add.w	r2, r3, #40	; 0x28
   12242:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12246:	681b      	ldr	r3, [r3, #0]
   12248:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1224c:	6013      	str	r3, [r2, #0]
    actionGobelet[3] = Gobelet(Position(2090, 830, isYellow));
   1224e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12252:	681b      	ldr	r3, [r3, #0]
   12254:	f503 7490 	add.w	r4, r3, #288	; 0x120
   12258:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
   1225c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12260:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12264:	781b      	ldrb	r3, [r3, #0]
   12266:	4610      	mov	r0, r2
   12268:	f8df 160c 	ldr.w	r1, [pc, #1548]	; 12878 <_ZN9Krabi2015C1Eb+0x20dc>
   1226c:	f8df 25fc 	ldr.w	r2, [pc, #1532]	; 1286c <_ZN9Krabi2015C1Eb+0x20d0>
   12270:	f7fc f944 	bl	e4fc <_ZN8PositionC1Effb>
   12274:	f507 6292 	add.w	r2, r7, #1168	; 0x490
   12278:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
   1227c:	4610      	mov	r0, r2
   1227e:	e893 0006 	ldmia.w	r3, {r1, r2}
   12282:	f7fe f95d 	bl	10540 <_ZN7GobeletC1E8Position>
   12286:	f507 6392 	add.w	r3, r7, #1168	; 0x490
   1228a:	4620      	mov	r0, r4
   1228c:	4619      	mov	r1, r3
   1228e:	f00a fc33 	bl	1caf8 <_ZN7GobeletaSERKS_>
   12292:	f507 6392 	add.w	r3, r7, #1168	; 0x490
   12296:	4618      	mov	r0, r3
   12298:	f7fe f91a 	bl	104d0 <_ZN7GobeletD1Ev>
    actionEtape[11] = &actionGobelet[3];
   1229c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   122a0:	681b      	ldr	r3, [r3, #0]
   122a2:	6a5b      	ldr	r3, [r3, #36]
   122a4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   122a8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   122ac:	681b      	ldr	r3, [r3, #0]
   122ae:	f503 7390 	add.w	r3, r3, #288	; 0x120
   122b2:	6013      	str	r3, [r2, #0]
    actionGobelet[4] = Gobelet(Position(2750, 1750, isYellow));
   122b4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   122b8:	681b      	ldr	r3, [r3, #0]
   122ba:	f503 74a0 	add.w	r4, r3, #320	; 0x140
   122be:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
   122c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
   122c6:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   122ca:	781b      	ldrb	r3, [r3, #0]
   122cc:	4610      	mov	r0, r2
   122ce:	f8df 15ac 	ldr.w	r1, [pc, #1452]	; 1287c <_ZN9Krabi2015C1Eb+0x20e0>
   122d2:	f8df 2590 	ldr.w	r2, [pc, #1424]	; 12864 <_ZN9Krabi2015C1Eb+0x20c8>
   122d6:	f7fc f911 	bl	e4fc <_ZN8PositionC1Effb>
   122da:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   122de:	4618      	mov	r0, r3
   122e0:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
   122e4:	e893 0006 	ldmia.w	r3, {r1, r2}
   122e8:	f7fe f92a 	bl	10540 <_ZN7GobeletC1E8Position>
   122ec:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   122f0:	4620      	mov	r0, r4
   122f2:	4619      	mov	r1, r3
   122f4:	f00a fc00 	bl	1caf8 <_ZN7GobeletaSERKS_>
   122f8:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   122fc:	4618      	mov	r0, r3
   122fe:	f7fe f8e7 	bl	104d0 <_ZN7GobeletD1Ev>
    actionEtape[12] = &actionGobelet[4];
   12302:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12306:	681b      	ldr	r3, [r3, #0]
   12308:	6a5b      	ldr	r3, [r3, #36]
   1230a:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1230e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12312:	681b      	ldr	r3, [r3, #0]
   12314:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   12318:	6013      	str	r3, [r2, #0]
    actionTapis[0] = Tapis(Position(1220, 760, isYellow));
   1231a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1231e:	681b      	ldr	r3, [r3, #0]
   12320:	f503 74b0 	add.w	r4, r3, #352	; 0x160
   12324:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
   12328:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1232c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12330:	781b      	ldrb	r3, [r3, #0]
   12332:	4610      	mov	r0, r2
   12334:	f8df 1548 	ldr.w	r1, [pc, #1352]	; 12880 <_ZN9Krabi2015C1Eb+0x20e4>
   12338:	f8df 2548 	ldr.w	r2, [pc, #1352]	; 12884 <_ZN9Krabi2015C1Eb+0x20e8>
   1233c:	f7fc f8de 	bl	e4fc <_ZN8PositionC1Effb>
   12340:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   12344:	4618      	mov	r0, r3
   12346:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
   1234a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1234e:	f004 fdbb 	bl	16ec8 <_ZN5TapisC1E8Position>
   12352:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   12356:	4620      	mov	r0, r4
   12358:	4619      	mov	r1, r3
   1235a:	f00a fbe9 	bl	1cb30 <_ZN5TapisaSERKS_>
   1235e:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   12362:	4618      	mov	r0, r3
   12364:	f004 fd1c 	bl	16da0 <_ZN5TapisD1Ev>
    actionEtape[23] = &actionTapis[0];
   12368:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1236c:	681b      	ldr	r3, [r3, #0]
   1236e:	6a5b      	ldr	r3, [r3, #36]
   12370:	f103 025c 	add.w	r2, r3, #92	; 0x5c
   12374:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12378:	681b      	ldr	r3, [r3, #0]
   1237a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1237e:	6013      	str	r3, [r2, #0]


    etape0->addVoisin(etape1);
   12380:	f8d7 0514 	ldr.w	r0, [r7, #1300]
   12384:	f8d7 1518 	ldr.w	r1, [r7, #1304]
   12388:	f04f 0201 	mov.w	r2, #1	; 0x1
   1238c:	f7fd fe74 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape2);
   12390:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   12394:	f8d7 151c 	ldr.w	r1, [r7, #1308]
   12398:	f04f 0201 	mov.w	r2, #1	; 0x1
   1239c:	f7fd fe6c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape9);
   123a0:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   123a4:	f8d7 1538 	ldr.w	r1, [r7, #1336]
   123a8:	f04f 0201 	mov.w	r2, #1	; 0x1
   123ac:	f7fd fe64 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape33);
   123b0:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   123b4:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   123b8:	f04f 0201 	mov.w	r2, #1	; 0x1
   123bc:	f7fd fe5c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape24);
   123c0:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   123c4:	f8d7 1574 	ldr.w	r1, [r7, #1396]
   123c8:	f04f 0201 	mov.w	r2, #1	; 0x1
   123cc:	f7fd fe54 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape4);
   123d0:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   123d4:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   123d8:	f04f 0201 	mov.w	r2, #1	; 0x1
   123dc:	f7fd fe4c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape3);
   123e0:	f8d7 051c 	ldr.w	r0, [r7, #1308]
   123e4:	f8d7 1520 	ldr.w	r1, [r7, #1312]
   123e8:	f04f 0201 	mov.w	r2, #1	; 0x1
   123ec:	f7fd fe44 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape4);
   123f0:	f8d7 0520 	ldr.w	r0, [r7, #1312]
   123f4:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   123f8:	f04f 0201 	mov.w	r2, #1	; 0x1
   123fc:	f7fd fe3c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape4);
   12400:	f8d7 051c 	ldr.w	r0, [r7, #1308]
   12404:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   12408:	f04f 0201 	mov.w	r2, #1	; 0x1
   1240c:	f7fd fe34 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape5);
   12410:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   12414:	f8d7 1528 	ldr.w	r1, [r7, #1320]
   12418:	f04f 0201 	mov.w	r2, #1	; 0x1
   1241c:	f7fd fe2c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape13);
   12420:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   12424:	f8d7 1548 	ldr.w	r1, [r7, #1352]
   12428:	f04f 0201 	mov.w	r2, #1	; 0x1
   1242c:	f7fd fe24 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape8);
   12430:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   12434:	f8d7 1534 	ldr.w	r1, [r7, #1332]
   12438:	f04f 0201 	mov.w	r2, #1	; 0x1
   1243c:	f7fd fe1c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape7);
   12440:	f8d7 052c 	ldr.w	r0, [r7, #1324]
   12444:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   12448:	f04f 0201 	mov.w	r2, #1	; 0x1
   1244c:	f7fd fe14 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape18);
   12450:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   12454:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   12458:	f04f 0201 	mov.w	r2, #1	; 0x1
   1245c:	f7fd fe0c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape2);
   12460:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   12464:	f8d7 151c 	ldr.w	r1, [r7, #1308]
   12468:	f04f 0201 	mov.w	r2, #1	; 0x1
   1246c:	f7fd fe04 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape13->addVoisin(etape14);
   12470:	f8d7 0548 	ldr.w	r0, [r7, #1352]
   12474:	f8d7 154c 	ldr.w	r1, [r7, #1356]
   12478:	f04f 0201 	mov.w	r2, #1	; 0x1
   1247c:	f7fd fdfc 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape14->addVoisin(etape8);
   12480:	f8d7 054c 	ldr.w	r0, [r7, #1356]
   12484:	f8d7 1534 	ldr.w	r1, [r7, #1332]
   12488:	f04f 0201 	mov.w	r2, #1	; 0x1
   1248c:	f7fd fdf4 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape20);
   12490:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   12494:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   12498:	f04f 0201 	mov.w	r2, #1	; 0x1
   1249c:	f7fd fdec 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape19);
   124a0:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   124a4:	f8d7 1560 	ldr.w	r1, [r7, #1376]
   124a8:	f04f 0201 	mov.w	r2, #1	; 0x1
   124ac:	f7fd fde4 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape19->addVoisin(etape27);
   124b0:	f8d7 0560 	ldr.w	r0, [r7, #1376]
   124b4:	f8d7 1580 	ldr.w	r1, [r7, #1408]
   124b8:	f04f 0201 	mov.w	r2, #1	; 0x1
   124bc:	f7fd fddc 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape27->addVoisin(etape21);
   124c0:	f8d7 0580 	ldr.w	r0, [r7, #1408]
   124c4:	f8d7 1568 	ldr.w	r1, [r7, #1384]
   124c8:	f04f 0201 	mov.w	r2, #1	; 0x1
   124cc:	f7fd fdd4 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape27);
   124d0:	f8d7 0520 	ldr.w	r0, [r7, #1312]
   124d4:	f8d7 1580 	ldr.w	r1, [r7, #1408]
   124d8:	f04f 0201 	mov.w	r2, #1	; 0x1
   124dc:	f7fd fdcc 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape33);
   124e0:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   124e4:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   124e8:	f04f 0201 	mov.w	r2, #1	; 0x1
   124ec:	f7fd fdc4 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape20);
   124f0:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   124f4:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   124f8:	f04f 0201 	mov.w	r2, #1	; 0x1
   124fc:	f7fd fdbc 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape18);
   12500:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   12504:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   12508:	f04f 0201 	mov.w	r2, #1	; 0x1
   1250c:	f7fd fdb4 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape21->addVoisin(etape22);
   12510:	f8d7 0568 	ldr.w	r0, [r7, #1384]
   12514:	f8d7 156c 	ldr.w	r1, [r7, #1388]
   12518:	f04f 0201 	mov.w	r2, #1	; 0x1
   1251c:	f7fd fdac 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape22);
   12520:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   12524:	f8d7 156c 	ldr.w	r1, [r7, #1388]
   12528:	f04f 0201 	mov.w	r2, #1	; 0x1
   1252c:	f7fd fda4 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape20->addVoisin(etape10);
   12530:	f8d7 0564 	ldr.w	r0, [r7, #1380]
   12534:	f8d7 153c 	ldr.w	r1, [r7, #1340]
   12538:	f04f 0201 	mov.w	r2, #1	; 0x1
   1253c:	f7fd fd9c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape35);
   12540:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   12544:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   12548:	f04f 0201 	mov.w	r2, #1	; 0x1
   1254c:	f7fd fd94 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape11);
   12550:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   12554:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   12558:	f04f 0201 	mov.w	r2, #1	; 0x1
   1255c:	f7fd fd8c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape31);
   12560:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   12564:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   12568:	f04f 0201 	mov.w	r2, #1	; 0x1
   1256c:	f7fd fd84 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape6);
   12570:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   12574:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   12578:	f04f 0201 	mov.w	r2, #1	; 0x1
   1257c:	f7fd fd7c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape6);
   12580:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   12584:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   12588:	f04f 0201 	mov.w	r2, #1	; 0x1
   1258c:	f7fd fd74 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape7);
   12590:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   12594:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   12598:	f04f 0201 	mov.w	r2, #1	; 0x1
   1259c:	f7fd fd6c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape12);
   125a0:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   125a4:	f8d7 1544 	ldr.w	r1, [r7, #1348]
   125a8:	f04f 0201 	mov.w	r2, #1	; 0x1
   125ac:	f7fd fd64 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape25);
   125b0:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   125b4:	f8d7 1578 	ldr.w	r1, [r7, #1400]
   125b8:	f04f 0201 	mov.w	r2, #1	; 0x1
   125bc:	f7fd fd5c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape12);
   125c0:	f8d7 052c 	ldr.w	r0, [r7, #1324]
   125c4:	f8d7 1544 	ldr.w	r1, [r7, #1348]
   125c8:	f04f 0201 	mov.w	r2, #1	; 0x1
   125cc:	f7fd fd54 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape12->addVoisin(etape25);
   125d0:	f8d7 0544 	ldr.w	r0, [r7, #1348]
   125d4:	f8d7 1578 	ldr.w	r1, [r7, #1400]
   125d8:	f04f 0201 	mov.w	r2, #1	; 0x1
   125dc:	f7fd fd4c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape11);
   125e0:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   125e4:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   125e8:	f04f 0201 	mov.w	r2, #1	; 0x1
   125ec:	f7fd fd44 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape20);
   125f0:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   125f4:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   125f8:	f04f 0201 	mov.w	r2, #1	; 0x1
   125fc:	f7fd fd3c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape11);
   12600:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   12604:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   12608:	f04f 0201 	mov.w	r2, #1	; 0x1
   1260c:	f7fd fd34 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape11);
   12610:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   12614:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   12618:	f04f 0201 	mov.w	r2, #1	; 0x1
   1261c:	f7fd fd2c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape26);
   12620:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   12624:	f8d7 157c 	ldr.w	r1, [r7, #1404]
   12628:	f04f 0201 	mov.w	r2, #1	; 0x1
   1262c:	f7fd fd24 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape32);
   12630:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   12634:	f8d7 1594 	ldr.w	r1, [r7, #1428]
   12638:	f04f 0201 	mov.w	r2, #1	; 0x1
   1263c:	f7fd fd1c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape32->addVoisin(etape15);
   12640:	f8d7 0594 	ldr.w	r0, [r7, #1428]
   12644:	f8d7 1550 	ldr.w	r1, [r7, #1360]
   12648:	f04f 0201 	mov.w	r2, #1	; 0x1
   1264c:	f7fd fd14 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape17);
   12650:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   12654:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   12658:	f04f 0201 	mov.w	r2, #1	; 0x1
   1265c:	f7fd fd0c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape17);
   12660:	f8d7 0554 	ldr.w	r0, [r7, #1364]
   12664:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   12668:	f04f 0201 	mov.w	r2, #1	; 0x1
   1266c:	f7fd fd04 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape15);
   12670:	f8d7 0554 	ldr.w	r0, [r7, #1364]
   12674:	f8d7 1550 	ldr.w	r1, [r7, #1360]
   12678:	f04f 0201 	mov.w	r2, #1	; 0x1
   1267c:	f7fd fcfc 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape15->addVoisin(etape17);
   12680:	f8d7 0550 	ldr.w	r0, [r7, #1360]
   12684:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   12688:	f04f 0201 	mov.w	r2, #1	; 0x1
   1268c:	f7fd fcf4 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape9);
   12690:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   12694:	f8d7 1538 	ldr.w	r1, [r7, #1336]
   12698:	f04f 0201 	mov.w	r2, #1	; 0x1
   1269c:	f7fd fcec 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape20);
   126a0:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   126a4:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   126a8:	f04f 0201 	mov.w	r2, #1	; 0x1
   126ac:	f7fd fce4 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape11);
   126b0:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   126b4:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   126b8:	f04f 0201 	mov.w	r2, #1	; 0x1
   126bc:	f7fd fcdc 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape28);
   126c0:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   126c4:	f8d7 1584 	ldr.w	r1, [r7, #1412]
   126c8:	f04f 0201 	mov.w	r2, #1	; 0x1
   126cc:	f7fd fcd4 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape29);
   126d0:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   126d4:	f8d7 1588 	ldr.w	r1, [r7, #1416]
   126d8:	f04f 0201 	mov.w	r2, #1	; 0x1
   126dc:	f7fd fccc 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape29->addVoisin(etape30);
   126e0:	f8d7 0588 	ldr.w	r0, [r7, #1416]
   126e4:	f8d7 158c 	ldr.w	r1, [r7, #1420]
   126e8:	f04f 0201 	mov.w	r2, #1	; 0x1
   126ec:	f7fd fcc4 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape29->addVoisin(etape31);
   126f0:	f8d7 0588 	ldr.w	r0, [r7, #1416]
   126f4:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   126f8:	f04f 0201 	mov.w	r2, #1	; 0x1
   126fc:	f7fd fcbc 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape31);
   12700:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   12704:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   12708:	f04f 0201 	mov.w	r2, #1	; 0x1
   1270c:	f7fd fcb4 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape18);
   12710:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   12714:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   12718:	f04f 0201 	mov.w	r2, #1	; 0x1
   1271c:	f7fd fcac 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape4);
   12720:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   12724:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   12728:	f04f 0201 	mov.w	r2, #1	; 0x1
   1272c:	f7fd fca4 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape29);
   12730:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   12734:	f8d7 1588 	ldr.w	r1, [r7, #1416]
   12738:	f04f 0201 	mov.w	r2, #1	; 0x1
   1273c:	f7fd fc9c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape30);
   12740:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   12744:	f8d7 158c 	ldr.w	r1, [r7, #1420]
   12748:	f04f 0201 	mov.w	r2, #1	; 0x1
   1274c:	f7fd fc94 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape31);
   12750:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   12754:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   12758:	f04f 0201 	mov.w	r2, #1	; 0x1
   1275c:	f7fd fc8c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape34);
   12760:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   12764:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   12768:	f04f 0201 	mov.w	r2, #1	; 0x1
   1276c:	f7fd fc84 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape34->addVoisin(etape35);
   12770:	f8d7 059c 	ldr.w	r0, [r7, #1436]
   12774:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   12778:	f04f 0201 	mov.w	r2, #1	; 0x1
   1277c:	f7fd fc7c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape24);
   12780:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   12784:	f8d7 1574 	ldr.w	r1, [r7, #1396]
   12788:	f04f 0201 	mov.w	r2, #1	; 0x1
   1278c:	f7fd fc74 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape37);
   12790:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   12794:	f8d7 15a8 	ldr.w	r1, [r7, #1448]
   12798:	f04f 0201 	mov.w	r2, #1	; 0x1
   1279c:	f7fd fc6c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape37->addVoisin(etape36);
   127a0:	f8d7 05a8 	ldr.w	r0, [r7, #1448]
   127a4:	f8d7 15a4 	ldr.w	r1, [r7, #1444]
   127a8:	f04f 0201 	mov.w	r2, #1	; 0x1
   127ac:	f7fd fc64 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape36->addVoisin(etape6);
   127b0:	f8d7 05a4 	ldr.w	r0, [r7, #1444]
   127b4:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   127b8:	f04f 0201 	mov.w	r2, #1	; 0x1
   127bc:	f7fd fc5c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape36->addVoisin(etape7);
   127c0:	f8d7 05a4 	ldr.w	r0, [r7, #1444]
   127c4:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   127c8:	f04f 0201 	mov.w	r2, #1	; 0x1
   127cc:	f7fd fc54 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape33);
   127d0:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   127d4:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   127d8:	f04f 0201 	mov.w	r2, #1	; 0x1
   127dc:	f7fd fc4c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape34);
   127e0:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   127e4:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   127e8:	f04f 0201 	mov.w	r2, #1	; 0x1
   127ec:	f7fd fc44 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape35);
   127f0:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   127f4:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   127f8:	f04f 0201 	mov.w	r2, #1	; 0x1
   127fc:	f7fd fc3c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape33);
   12800:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   12804:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   12808:	f04f 0201 	mov.w	r2, #1	; 0x1
   1280c:	f7fd fc34 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape34);
   12810:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   12814:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   12818:	f04f 0201 	mov.w	r2, #1	; 0x1
   1281c:	f7fd fc2c 	bl	10078 <_ZN5Etape9addVoisinEPS_b>

    // Lancer Dijkstra
    startDijkstra();
   12820:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12824:	681b      	ldr	r3, [r3, #0]
   12826:	4618      	mov	r0, r3
   12828:	f003 fdea 	bl	16400 <_ZN11StrategieV313startDijkstraEv>
}
   1282c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12830:	681b      	ldr	r3, [r3, #0]
   12832:	4618      	mov	r0, r3
   12834:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
   12838:	f507 6780 	add.w	r7, r7, #1024	; 0x400
   1283c:	46bd      	mov	sp, r7
   1283e:	bd90      	pop	{r4, r7, pc}
   12840:	41f00000 	.word	0x41f00000
   12844:	44510000 	.word	0x44510000
   12848:	44de8000 	.word	0x44de8000
   1284c:	447a0000 	.word	0x447a0000
   12850:	436c0000 	.word	0x436c0000
   12854:	43c80000 	.word	0x43c80000
   12858:	451c4000 	.word	0x451c4000
   1285c:	450fc000 	.word	0x450fc000
   12860:	437a0000 	.word	0x437a0000
   12864:	44dac000 	.word	0x44dac000
   12868:	44638000 	.word	0x44638000
   1286c:	444f8000 	.word	0x444f8000
   12870:	44bb8000 	.word	0x44bb8000
   12874:	44ce4000 	.word	0x44ce4000
   12878:	4502a000 	.word	0x4502a000
   1287c:	452be000 	.word	0x452be000
   12880:	44988000 	.word	0x44988000
   12884:	443e0000 	.word	0x443e0000

00012888 <_ZN9Krabi2015C2Eb>:
#include "krabi2015.h"

Krabi2015::Krabi2015(bool isYellow) : StrategieV3(isYellow)
   12888:	b590      	push	{r4, r7, lr}
   1288a:	f5ad 6db8 	sub.w	sp, sp, #1472	; 0x5c0
   1288e:	b081      	sub	sp, #4
   12890:	af04      	add	r7, sp, #16
   12892:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12896:	6018      	str	r0, [r3, #0]
   12898:	460a      	mov	r2, r1
   1289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1289e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   128a2:	701a      	strb	r2, [r3, #0]
   128a4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   128a8:	681a      	ldr	r2, [r3, #0]
   128aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
   128ae:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   128b2:	781b      	ldrb	r3, [r3, #0]
   128b4:	4610      	mov	r0, r2
   128b6:	4619      	mov	r1, r3
   128b8:	f004 f95e 	bl	16b78 <_ZN11StrategieV3C2Eb>
   128bc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   128c0:	681a      	ldr	r2, [r3, #0]
   128c2:	f8df 3c70 	ldr.w	r3, [pc, #3184]	; 13534 <_ZN9Krabi2015C2Eb+0xcac>
   128c6:	6013      	str	r3, [r2, #0]
   128c8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   128cc:	681b      	ldr	r3, [r3, #0]
   128ce:	f103 0348 	add.w	r3, r3, #72	; 0x48
   128d2:	607b      	str	r3, [r7, #4]
   128d4:	f04f 0302 	mov.w	r3, #2	; 0x2
   128d8:	60bb      	str	r3, [r7, #8]
   128da:	e00a      	b.n	128f2 <_ZN9Krabi2015C2Eb+0x6a>
   128dc:	6878      	ldr	r0, [r7, #4]
   128de:	f7fc fd8f 	bl	f400 <_ZN4ClapC1Ev>
   128e2:	687b      	ldr	r3, [r7, #4]
   128e4:	f103 0328 	add.w	r3, r3, #40	; 0x28
   128e8:	607b      	str	r3, [r7, #4]
   128ea:	68bb      	ldr	r3, [r7, #8]
   128ec:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   128f0:	60bb      	str	r3, [r7, #8]
   128f2:	68bb      	ldr	r3, [r7, #8]
   128f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   128f8:	d1f0      	bne.n	128dc <_ZN9Krabi2015C2Eb+0x54>
   128fa:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   128fe:	681b      	ldr	r3, [r3, #0]
   12900:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   12904:	60fb      	str	r3, [r7, #12]
   12906:	f04f 0304 	mov.w	r3, #4	; 0x4
   1290a:	613b      	str	r3, [r7, #16]
   1290c:	e00a      	b.n	12924 <_ZN9Krabi2015C2Eb+0x9c>
   1290e:	68f8      	ldr	r0, [r7, #12]
   12910:	f7fd fe5a 	bl	105c8 <_ZN7GobeletC1Ev>
   12914:	68fb      	ldr	r3, [r7, #12]
   12916:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1291a:	60fb      	str	r3, [r7, #12]
   1291c:	693b      	ldr	r3, [r7, #16]
   1291e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   12922:	613b      	str	r3, [r7, #16]
   12924:	693b      	ldr	r3, [r7, #16]
   12926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1292a:	d1f0      	bne.n	1290e <_ZN9Krabi2015C2Eb+0x86>
   1292c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12930:	681b      	ldr	r3, [r3, #0]
   12932:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   12936:	617b      	str	r3, [r7, #20]
   12938:	f04f 0300 	mov.w	r3, #0	; 0x0
   1293c:	61bb      	str	r3, [r7, #24]
   1293e:	e00a      	b.n	12956 <_ZN9Krabi2015C2Eb+0xce>
   12940:	6978      	ldr	r0, [r7, #20]
   12942:	f004 fa65 	bl	16e10 <_ZN5TapisC1Ev>
   12946:	697b      	ldr	r3, [r7, #20]
   12948:	f103 0328 	add.w	r3, r3, #40	; 0x28
   1294c:	617b      	str	r3, [r7, #20]
   1294e:	69bb      	ldr	r3, [r7, #24]
   12950:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   12954:	61bb      	str	r3, [r7, #24]
   12956:	69bb      	ldr	r3, [r7, #24]
   12958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1295c:	d1f0      	bne.n	12940 <_ZN9Krabi2015C2Eb+0xb8>
{
    // Initialisation des stocks

    //Initialisation des tableaux d'étapes
    this->nombreEtapes = NOMBRE_ETAPES;
   1295e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12962:	681a      	ldr	r2, [r3, #0]
   12964:	f04f 0326 	mov.w	r3, #38	; 0x26
   12968:	61d3      	str	r3, [r2, #28]
    this->numeroEtapeGarage = ETAPE_GARAGE;
   1296a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1296e:	681a      	ldr	r2, [r3, #0]
   12970:	f04f 0301 	mov.w	r3, #1	; 0x1
   12974:	6213      	str	r3, [r2, #32]
    tableauEtapesTotal = new Etape*[NOMBRE_ETAPES];
   12976:	f04f 0098 	mov.w	r0, #152	; 0x98
   1297a:	f7fb fcf1 	bl	e360 <_Znaj>
   1297e:	4603      	mov	r3, r0
   12980:	461a      	mov	r2, r3
   12982:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12986:	681b      	ldr	r3, [r3, #0]
   12988:	635a      	str	r2, [r3, #52]
    actionEtape = new MediumLevelAction*[NOMBRE_ETAPES];
   1298a:	f04f 0098 	mov.w	r0, #152	; 0x98
   1298e:	f7fb fce7 	bl	e360 <_Znaj>
   12992:	4603      	mov	r3, r0
   12994:	461a      	mov	r2, r3
   12996:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1299a:	681b      	ldr	r3, [r3, #0]
   1299c:	625a      	str	r2, [r3, #36]
    actionGoto = new ActionGoTo[NOMBRE_ETAPES];
   1299e:	f44f 60e5 	mov.w	r0, #1832	; 0x728
   129a2:	f7fb fcdd 	bl	e360 <_Znaj>
   129a6:	4603      	mov	r3, r0
   129a8:	61fb      	str	r3, [r7, #28]
   129aa:	69fb      	ldr	r3, [r7, #28]
   129ac:	2b00      	cmp	r3, #0
   129ae:	d03c      	beq.n	12a2a <_ZN9Krabi2015C2Eb+0x1a2>
   129b0:	69fb      	ldr	r3, [r7, #28]
   129b2:	f103 0308 	add.w	r3, r3, #8	; 0x8
   129b6:	627b      	str	r3, [r7, #36]
   129b8:	6a7b      	ldr	r3, [r7, #36]
   129ba:	f1a3 0304 	sub.w	r3, r3, #4	; 0x4
   129be:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   129c2:	f04f 0330 	mov.w	r3, #48	; 0x30
   129c6:	6013      	str	r3, [r2, #0]
   129c8:	6a7b      	ldr	r3, [r7, #36]
   129ca:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   129ce:	f04f 0326 	mov.w	r3, #38	; 0x26
   129d2:	6013      	str	r3, [r2, #0]
   129d4:	6a7b      	ldr	r3, [r7, #36]
   129d6:	62bb      	str	r3, [r7, #40]
   129d8:	f04f 0325 	mov.w	r3, #37	; 0x25
   129dc:	62fb      	str	r3, [r7, #44]
   129de:	e01d      	b.n	12a1c <_ZN9Krabi2015C2Eb+0x194>
   129e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   129e4:	4618      	mov	r0, r3
   129e6:	f8df 1b50 	ldr.w	r1, [pc, #2896]	; 13538 <_ZN9Krabi2015C2Eb+0xcb0>
   129ea:	f8df 2b4c 	ldr.w	r2, [pc, #2892]	; 13538 <_ZN9Krabi2015C2Eb+0xcb0>
   129ee:	f04f 0301 	mov.w	r3, #1	; 0x1
   129f2:	f7fb fd83 	bl	e4fc <_ZN8PositionC1Effb>
   129f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
   129fa:	f8df 3b40 	ldr.w	r3, [pc, #2880]	; 1353c <_ZN9Krabi2015C2Eb+0xcb4>
   129fe:	9300      	str	r3, [sp, #0]
   12a00:	6ab8      	ldr	r0, [r7, #40]
   12a02:	ca06      	ldmia	r2!, {r1, r2}
   12a04:	f04f 0300 	mov.w	r3, #0	; 0x0
   12a08:	f7fc fa9e 	bl	ef48 <_ZN10ActionGoToC1E8Positionbf>
   12a0c:	6abb      	ldr	r3, [r7, #40]
   12a0e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   12a12:	62bb      	str	r3, [r7, #40]
   12a14:	6afb      	ldr	r3, [r7, #44]
   12a16:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   12a1a:	62fb      	str	r3, [r7, #44]
   12a1c:	6afb      	ldr	r3, [r7, #44]
   12a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   12a22:	d1dd      	bne.n	129e0 <_ZN9Krabi2015C2Eb+0x158>
   12a24:	6a7b      	ldr	r3, [r7, #36]
   12a26:	623b      	str	r3, [r7, #32]
   12a28:	e001      	b.n	12a2e <_ZN9Krabi2015C2Eb+0x1a6>
   12a2a:	69fb      	ldr	r3, [r7, #28]
   12a2c:	623b      	str	r3, [r7, #32]
   12a2e:	6a3a      	ldr	r2, [r7, #32]
   12a30:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12a34:	681b      	ldr	r3, [r3, #0]
   12a36:	629a      	str	r2, [r3, #40]
    // TODO: A supprimer pour une variable statique dans Etape
    int numeroEtape = 0;
   12a38:	f04f 0300 	mov.w	r3, #0	; 0x0
   12a3c:	f8c7 3510 	str.w	r3, [r7, #1296]

    // Création des étapes
    // Arguments : Position, numéro étape, tableau des étapes, type d'étape, état de l'étape, nombre étapes liées
    Etape* etape0 = new Etape(Position(250, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPART, -1, 0); //départ au fond de la zone de départ
   12a40:	f507 7202 	add.w	r2, r7, #520	; 0x208
   12a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12a48:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12a4c:	781b      	ldrb	r3, [r3, #0]
   12a4e:	4610      	mov	r0, r2
   12a50:	f8df 1aec 	ldr.w	r1, [pc, #2796]	; 13540 <_ZN9Krabi2015C2Eb+0xcb8>
   12a54:	f8df 2aec 	ldr.w	r2, [pc, #2796]	; 13544 <_ZN9Krabi2015C2Eb+0xcbc>
   12a58:	f7fb fd50 	bl	e4fc <_ZN8PositionC1Effb>
   12a5c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12a60:	633b      	str	r3, [r7, #48]
   12a62:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12a66:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12a6a:	f8c7 3510 	str.w	r3, [r7, #1296]
   12a6e:	f04f 0034 	mov.w	r0, #52	; 0x34
   12a72:	f7fb fbdd 	bl	e230 <_Znwj>
   12a76:	4603      	mov	r3, r0
   12a78:	637b      	str	r3, [r7, #52]
   12a7a:	6b7b      	ldr	r3, [r7, #52]
   12a7c:	2b00      	cmp	r3, #0
   12a7e:	d017      	beq.n	12ab0 <_ZN9Krabi2015C2Eb+0x228>
   12a80:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12a84:	681b      	ldr	r3, [r3, #0]
   12a86:	6b5b      	ldr	r3, [r3, #52]
   12a88:	f507 7202 	add.w	r2, r7, #520	; 0x208
   12a8c:	9300      	str	r3, [sp, #0]
   12a8e:	f04f 0305 	mov.w	r3, #5	; 0x5
   12a92:	9301      	str	r3, [sp, #4]
   12a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a98:	9302      	str	r3, [sp, #8]
   12a9a:	f04f 0300 	mov.w	r3, #0	; 0x0
   12a9e:	9303      	str	r3, [sp, #12]
   12aa0:	6b78      	ldr	r0, [r7, #52]
   12aa2:	ca06      	ldmia	r2!, {r1, r2}
   12aa4:	6b3b      	ldr	r3, [r7, #48]
   12aa6:	f7fd fbc7 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12aaa:	6b7b      	ldr	r3, [r7, #52]
   12aac:	63bb      	str	r3, [r7, #56]
   12aae:	e001      	b.n	12ab4 <_ZN9Krabi2015C2Eb+0x22c>
   12ab0:	6b7b      	ldr	r3, [r7, #52]
   12ab2:	63bb      	str	r3, [r7, #56]
   12ab4:	6bbb      	ldr	r3, [r7, #56]
   12ab6:	f8c7 3514 	str.w	r3, [r7, #1300]
    Etape* etape1 = new Etape(Position(700, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12aba:	f507 7204 	add.w	r2, r7, #528	; 0x210
   12abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12ac2:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12ac6:	781b      	ldrb	r3, [r3, #0]
   12ac8:	4610      	mov	r0, r2
   12aca:	f8df 1a7c 	ldr.w	r1, [pc, #2684]	; 13548 <_ZN9Krabi2015C2Eb+0xcc0>
   12ace:	f8df 2a74 	ldr.w	r2, [pc, #2676]	; 13544 <_ZN9Krabi2015C2Eb+0xcbc>
   12ad2:	f7fb fd13 	bl	e4fc <_ZN8PositionC1Effb>
   12ad6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12ada:	63fb      	str	r3, [r7, #60]
   12adc:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12ae0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12ae4:	f8c7 3510 	str.w	r3, [r7, #1296]
   12ae8:	f04f 0034 	mov.w	r0, #52	; 0x34
   12aec:	f7fb fba0 	bl	e230 <_Znwj>
   12af0:	4603      	mov	r3, r0
   12af2:	643b      	str	r3, [r7, #64]
   12af4:	6c3b      	ldr	r3, [r7, #64]
   12af6:	2b00      	cmp	r3, #0
   12af8:	d017      	beq.n	12b2a <_ZN9Krabi2015C2Eb+0x2a2>
   12afa:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12afe:	681b      	ldr	r3, [r3, #0]
   12b00:	6b5b      	ldr	r3, [r3, #52]
   12b02:	f507 7204 	add.w	r2, r7, #528	; 0x210
   12b06:	9300      	str	r3, [sp, #0]
   12b08:	f04f 0300 	mov.w	r3, #0	; 0x0
   12b0c:	9301      	str	r3, [sp, #4]
   12b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b12:	9302      	str	r3, [sp, #8]
   12b14:	f04f 0300 	mov.w	r3, #0	; 0x0
   12b18:	9303      	str	r3, [sp, #12]
   12b1a:	6c38      	ldr	r0, [r7, #64]
   12b1c:	ca06      	ldmia	r2!, {r1, r2}
   12b1e:	6bfb      	ldr	r3, [r7, #60]
   12b20:	f7fd fb8a 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12b24:	6c3b      	ldr	r3, [r7, #64]
   12b26:	647b      	str	r3, [r7, #68]
   12b28:	e001      	b.n	12b2e <_ZN9Krabi2015C2Eb+0x2a6>
   12b2a:	6c3b      	ldr	r3, [r7, #64]
   12b2c:	647b      	str	r3, [r7, #68]
   12b2e:	6c7b      	ldr	r3, [r7, #68]
   12b30:	f8c7 3518 	str.w	r3, [r7, #1304]
    Etape* etape2 = new Etape(Position(836, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   12b34:	f507 7206 	add.w	r2, r7, #536	; 0x218
   12b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12b3c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12b40:	781b      	ldrb	r3, [r3, #0]
   12b42:	4610      	mov	r0, r2
   12b44:	f8df 1a04 	ldr.w	r1, [pc, #2564]	; 1354c <_ZN9Krabi2015C2Eb+0xcc4>
   12b48:	f8df 2a04 	ldr.w	r2, [pc, #2564]	; 13550 <_ZN9Krabi2015C2Eb+0xcc8>
   12b4c:	f7fb fcd6 	bl	e4fc <_ZN8PositionC1Effb>
   12b50:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12b54:	64bb      	str	r3, [r7, #72]
   12b56:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12b5a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12b5e:	f8c7 3510 	str.w	r3, [r7, #1296]
   12b62:	f04f 0034 	mov.w	r0, #52	; 0x34
   12b66:	f7fb fb63 	bl	e230 <_Znwj>
   12b6a:	4603      	mov	r3, r0
   12b6c:	64fb      	str	r3, [r7, #76]
   12b6e:	6cfb      	ldr	r3, [r7, #76]
   12b70:	2b00      	cmp	r3, #0
   12b72:	d017      	beq.n	12ba4 <_ZN9Krabi2015C2Eb+0x31c>
   12b74:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12b78:	681b      	ldr	r3, [r3, #0]
   12b7a:	6b5b      	ldr	r3, [r3, #52]
   12b7c:	f507 7206 	add.w	r2, r7, #536	; 0x218
   12b80:	9300      	str	r3, [sp, #0]
   12b82:	f04f 0311 	mov.w	r3, #17	; 0x11
   12b86:	9301      	str	r3, [sp, #4]
   12b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b8c:	9302      	str	r3, [sp, #8]
   12b8e:	f04f 0300 	mov.w	r3, #0	; 0x0
   12b92:	9303      	str	r3, [sp, #12]
   12b94:	6cf8      	ldr	r0, [r7, #76]
   12b96:	ca06      	ldmia	r2!, {r1, r2}
   12b98:	6cbb      	ldr	r3, [r7, #72]
   12b9a:	f7fd fb4d 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12b9e:	6cfb      	ldr	r3, [r7, #76]
   12ba0:	653b      	str	r3, [r7, #80]
   12ba2:	e001      	b.n	12ba8 <_ZN9Krabi2015C2Eb+0x320>
   12ba4:	6cfb      	ldr	r3, [r7, #76]
   12ba6:	653b      	str	r3, [r7, #80]
   12ba8:	6d3b      	ldr	r3, [r7, #80]
   12baa:	f8c7 351c 	str.w	r3, [r7, #1308]
    Etape* etape3 = new Etape(Position(1000, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12bae:	f507 7208 	add.w	r2, r7, #544	; 0x220
   12bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12bb6:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12bba:	781b      	ldrb	r3, [r3, #0]
   12bbc:	4610      	mov	r0, r2
   12bbe:	f8df 1984 	ldr.w	r1, [pc, #2436]	; 13544 <_ZN9Krabi2015C2Eb+0xcbc>
   12bc2:	f8df 298c 	ldr.w	r2, [pc, #2444]	; 13550 <_ZN9Krabi2015C2Eb+0xcc8>
   12bc6:	f7fb fc99 	bl	e4fc <_ZN8PositionC1Effb>
   12bca:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12bce:	657b      	str	r3, [r7, #84]
   12bd0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12bd4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12bd8:	f8c7 3510 	str.w	r3, [r7, #1296]
   12bdc:	f04f 0034 	mov.w	r0, #52	; 0x34
   12be0:	f7fb fb26 	bl	e230 <_Znwj>
   12be4:	4603      	mov	r3, r0
   12be6:	65bb      	str	r3, [r7, #88]
   12be8:	6dbb      	ldr	r3, [r7, #88]
   12bea:	2b00      	cmp	r3, #0
   12bec:	d017      	beq.n	12c1e <_ZN9Krabi2015C2Eb+0x396>
   12bee:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12bf2:	681b      	ldr	r3, [r3, #0]
   12bf4:	6b5b      	ldr	r3, [r3, #52]
   12bf6:	f507 7208 	add.w	r2, r7, #544	; 0x220
   12bfa:	9300      	str	r3, [sp, #0]
   12bfc:	f04f 0300 	mov.w	r3, #0	; 0x0
   12c00:	9301      	str	r3, [sp, #4]
   12c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12c06:	9302      	str	r3, [sp, #8]
   12c08:	f04f 0300 	mov.w	r3, #0	; 0x0
   12c0c:	9303      	str	r3, [sp, #12]
   12c0e:	6db8      	ldr	r0, [r7, #88]
   12c10:	ca06      	ldmia	r2!, {r1, r2}
   12c12:	6d7b      	ldr	r3, [r7, #84]
   12c14:	f7fd fb10 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12c18:	6dbb      	ldr	r3, [r7, #88]
   12c1a:	65fb      	str	r3, [r7, #92]
   12c1c:	e001      	b.n	12c22 <_ZN9Krabi2015C2Eb+0x39a>
   12c1e:	6dbb      	ldr	r3, [r7, #88]
   12c20:	65fb      	str	r3, [r7, #92]
   12c22:	6dfb      	ldr	r3, [r7, #92]
   12c24:	f8c7 3520 	str.w	r3, [r7, #1312]
    Etape* etape4 = new Etape(Position(236, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   12c28:	f507 720a 	add.w	r2, r7, #552	; 0x228
   12c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12c30:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12c34:	781b      	ldrb	r3, [r3, #0]
   12c36:	4610      	mov	r0, r2
   12c38:	f8df 1918 	ldr.w	r1, [pc, #2328]	; 13554 <_ZN9Krabi2015C2Eb+0xccc>
   12c3c:	f8df 2910 	ldr.w	r2, [pc, #2320]	; 13550 <_ZN9Krabi2015C2Eb+0xcc8>
   12c40:	f7fb fc5c 	bl	e4fc <_ZN8PositionC1Effb>
   12c44:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12c48:	663b      	str	r3, [r7, #96]
   12c4a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12c4e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12c52:	f8c7 3510 	str.w	r3, [r7, #1296]
   12c56:	f04f 0034 	mov.w	r0, #52	; 0x34
   12c5a:	f7fb fae9 	bl	e230 <_Znwj>
   12c5e:	4603      	mov	r3, r0
   12c60:	667b      	str	r3, [r7, #100]
   12c62:	6e7b      	ldr	r3, [r7, #100]
   12c64:	2b00      	cmp	r3, #0
   12c66:	d017      	beq.n	12c98 <_ZN9Krabi2015C2Eb+0x410>
   12c68:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12c6c:	681b      	ldr	r3, [r3, #0]
   12c6e:	6b5b      	ldr	r3, [r3, #52]
   12c70:	f507 720a 	add.w	r2, r7, #552	; 0x228
   12c74:	9300      	str	r3, [sp, #0]
   12c76:	f04f 0311 	mov.w	r3, #17	; 0x11
   12c7a:	9301      	str	r3, [sp, #4]
   12c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12c80:	9302      	str	r3, [sp, #8]
   12c82:	f04f 0300 	mov.w	r3, #0	; 0x0
   12c86:	9303      	str	r3, [sp, #12]
   12c88:	6e78      	ldr	r0, [r7, #100]
   12c8a:	ca06      	ldmia	r2!, {r1, r2}
   12c8c:	6e3b      	ldr	r3, [r7, #96]
   12c8e:	f7fd fad3 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12c92:	6e7b      	ldr	r3, [r7, #100]
   12c94:	66bb      	str	r3, [r7, #104]
   12c96:	e001      	b.n	12c9c <_ZN9Krabi2015C2Eb+0x414>
   12c98:	6e7b      	ldr	r3, [r7, #100]
   12c9a:	66bb      	str	r3, [r7, #104]
   12c9c:	6ebb      	ldr	r3, [r7, #104]
   12c9e:	f8c7 3524 	str.w	r3, [r7, #1316]
    Etape* etape5 = new Etape(Position(400, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12ca2:	f507 720c 	add.w	r2, r7, #560	; 0x230
   12ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12caa:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12cae:	781b      	ldrb	r3, [r3, #0]
   12cb0:	4610      	mov	r0, r2
   12cb2:	f8df 18a4 	ldr.w	r1, [pc, #2212]	; 13558 <_ZN9Krabi2015C2Eb+0xcd0>
   12cb6:	f8df 2898 	ldr.w	r2, [pc, #2200]	; 13550 <_ZN9Krabi2015C2Eb+0xcc8>
   12cba:	f7fb fc1f 	bl	e4fc <_ZN8PositionC1Effb>
   12cbe:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12cc2:	66fb      	str	r3, [r7, #108]
   12cc4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12cc8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12ccc:	f8c7 3510 	str.w	r3, [r7, #1296]
   12cd0:	f04f 0034 	mov.w	r0, #52	; 0x34
   12cd4:	f7fb faac 	bl	e230 <_Znwj>
   12cd8:	4603      	mov	r3, r0
   12cda:	673b      	str	r3, [r7, #112]
   12cdc:	6f3b      	ldr	r3, [r7, #112]
   12cde:	2b00      	cmp	r3, #0
   12ce0:	d017      	beq.n	12d12 <_ZN9Krabi2015C2Eb+0x48a>
   12ce2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12ce6:	681b      	ldr	r3, [r3, #0]
   12ce8:	6b5b      	ldr	r3, [r3, #52]
   12cea:	f507 720c 	add.w	r2, r7, #560	; 0x230
   12cee:	9300      	str	r3, [sp, #0]
   12cf0:	f04f 0300 	mov.w	r3, #0	; 0x0
   12cf4:	9301      	str	r3, [sp, #4]
   12cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12cfa:	9302      	str	r3, [sp, #8]
   12cfc:	f04f 0300 	mov.w	r3, #0	; 0x0
   12d00:	9303      	str	r3, [sp, #12]
   12d02:	6f38      	ldr	r0, [r7, #112]
   12d04:	ca06      	ldmia	r2!, {r1, r2}
   12d06:	6efb      	ldr	r3, [r7, #108]
   12d08:	f7fd fa96 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12d0c:	6f3b      	ldr	r3, [r7, #112]
   12d0e:	677b      	str	r3, [r7, #116]
   12d10:	e001      	b.n	12d16 <_ZN9Krabi2015C2Eb+0x48e>
   12d12:	6f3b      	ldr	r3, [r7, #112]
   12d14:	677b      	str	r3, [r7, #116]
   12d16:	6f7b      	ldr	r3, [r7, #116]
   12d18:	f8c7 3528 	str.w	r3, [r7, #1320]
    Etape* etape6 = new Etape(Position(2500, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   12d1c:	f507 720e 	add.w	r2, r7, #568	; 0x238
   12d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12d24:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12d28:	781b      	ldrb	r3, [r3, #0]
   12d2a:	4610      	mov	r0, r2
   12d2c:	f8df 182c 	ldr.w	r1, [pc, #2092]	; 1355c <_ZN9Krabi2015C2Eb+0xcd4>
   12d30:	f8df 281c 	ldr.w	r2, [pc, #2076]	; 13550 <_ZN9Krabi2015C2Eb+0xcc8>
   12d34:	f7fb fbe2 	bl	e4fc <_ZN8PositionC1Effb>
   12d38:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12d3c:	67bb      	str	r3, [r7, #120]
   12d3e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12d42:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12d46:	f8c7 3510 	str.w	r3, [r7, #1296]
   12d4a:	f04f 0034 	mov.w	r0, #52	; 0x34
   12d4e:	f7fb fa6f 	bl	e230 <_Znwj>
   12d52:	4603      	mov	r3, r0
   12d54:	67fb      	str	r3, [r7, #124]
   12d56:	6ffb      	ldr	r3, [r7, #124]
   12d58:	2b00      	cmp	r3, #0
   12d5a:	d018      	beq.n	12d8e <_ZN9Krabi2015C2Eb+0x506>
   12d5c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12d60:	681b      	ldr	r3, [r3, #0]
   12d62:	6b5b      	ldr	r3, [r3, #52]
   12d64:	f507 720e 	add.w	r2, r7, #568	; 0x238
   12d68:	9300      	str	r3, [sp, #0]
   12d6a:	f04f 0311 	mov.w	r3, #17	; 0x11
   12d6e:	9301      	str	r3, [sp, #4]
   12d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12d74:	9302      	str	r3, [sp, #8]
   12d76:	f04f 0300 	mov.w	r3, #0	; 0x0
   12d7a:	9303      	str	r3, [sp, #12]
   12d7c:	6ff8      	ldr	r0, [r7, #124]
   12d7e:	ca06      	ldmia	r2!, {r1, r2}
   12d80:	6fbb      	ldr	r3, [r7, #120]
   12d82:	f7fd fa59 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12d86:	6ffb      	ldr	r3, [r7, #124]
   12d88:	f8c7 3080 	str.w	r3, [r7, #128]
   12d8c:	e002      	b.n	12d94 <_ZN9Krabi2015C2Eb+0x50c>
   12d8e:	6ffb      	ldr	r3, [r7, #124]
   12d90:	f8c7 3080 	str.w	r3, [r7, #128]
   12d94:	f8d7 3080 	ldr.w	r3, [r7, #128]
   12d98:	f8c7 352c 	str.w	r3, [r7, #1324]
    Etape* etape7 = new Etape(Position(2300, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12d9c:	f507 7210 	add.w	r2, r7, #576	; 0x240
   12da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12da4:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12da8:	781b      	ldrb	r3, [r3, #0]
   12daa:	4610      	mov	r0, r2
   12dac:	f8df 17b0 	ldr.w	r1, [pc, #1968]	; 13560 <_ZN9Krabi2015C2Eb+0xcd8>
   12db0:	f8df 279c 	ldr.w	r2, [pc, #1948]	; 13550 <_ZN9Krabi2015C2Eb+0xcc8>
   12db4:	f7fb fba2 	bl	e4fc <_ZN8PositionC1Effb>
   12db8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12dbc:	f8c7 3084 	str.w	r3, [r7, #132]
   12dc0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12dc4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12dc8:	f8c7 3510 	str.w	r3, [r7, #1296]
   12dcc:	f04f 0034 	mov.w	r0, #52	; 0x34
   12dd0:	f7fb fa2e 	bl	e230 <_Znwj>
   12dd4:	4603      	mov	r3, r0
   12dd6:	f8c7 3088 	str.w	r3, [r7, #136]
   12dda:	f8d7 3088 	ldr.w	r3, [r7, #136]
   12dde:	2b00      	cmp	r3, #0
   12de0:	d01b      	beq.n	12e1a <_ZN9Krabi2015C2Eb+0x592>
   12de2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12de6:	681b      	ldr	r3, [r3, #0]
   12de8:	6b5b      	ldr	r3, [r3, #52]
   12dea:	f507 7210 	add.w	r2, r7, #576	; 0x240
   12dee:	9300      	str	r3, [sp, #0]
   12df0:	f04f 0300 	mov.w	r3, #0	; 0x0
   12df4:	9301      	str	r3, [sp, #4]
   12df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12dfa:	9302      	str	r3, [sp, #8]
   12dfc:	f04f 0300 	mov.w	r3, #0	; 0x0
   12e00:	9303      	str	r3, [sp, #12]
   12e02:	f8d7 0088 	ldr.w	r0, [r7, #136]
   12e06:	ca06      	ldmia	r2!, {r1, r2}
   12e08:	f8d7 3084 	ldr.w	r3, [r7, #132]
   12e0c:	f7fd fa14 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12e10:	f8d7 3088 	ldr.w	r3, [r7, #136]
   12e14:	f8c7 308c 	str.w	r3, [r7, #140]
   12e18:	e003      	b.n	12e22 <_ZN9Krabi2015C2Eb+0x59a>
   12e1a:	f8d7 3088 	ldr.w	r3, [r7, #136]
   12e1e:	f8c7 308c 	str.w	r3, [r7, #140]
   12e22:	f8d7 308c 	ldr.w	r3, [r7, #140]
   12e26:	f8c7 3530 	str.w	r3, [r7, #1328]
    Etape* etape8 = new Etape(Position(250, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   12e2a:	f507 7212 	add.w	r2, r7, #584	; 0x248
   12e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12e32:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12e36:	781b      	ldrb	r3, [r3, #0]
   12e38:	4610      	mov	r0, r2
   12e3a:	f8df 1704 	ldr.w	r1, [pc, #1796]	; 13540 <_ZN9Krabi2015C2Eb+0xcb8>
   12e3e:	f8df 2724 	ldr.w	r2, [pc, #1828]	; 13564 <_ZN9Krabi2015C2Eb+0xcdc>
   12e42:	f7fb fb5b 	bl	e4fc <_ZN8PositionC1Effb>
   12e46:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12e4a:	f8c7 3090 	str.w	r3, [r7, #144]
   12e4e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12e52:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12e56:	f8c7 3510 	str.w	r3, [r7, #1296]
   12e5a:	f04f 0034 	mov.w	r0, #52	; 0x34
   12e5e:	f7fb f9e7 	bl	e230 <_Znwj>
   12e62:	4603      	mov	r3, r0
   12e64:	f8c7 3094 	str.w	r3, [r7, #148]
   12e68:	f8d7 3094 	ldr.w	r3, [r7, #148]
   12e6c:	2b00      	cmp	r3, #0
   12e6e:	d01b      	beq.n	12ea8 <_ZN9Krabi2015C2Eb+0x620>
   12e70:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12e74:	681b      	ldr	r3, [r3, #0]
   12e76:	6b5b      	ldr	r3, [r3, #52]
   12e78:	f507 7212 	add.w	r2, r7, #584	; 0x248
   12e7c:	9300      	str	r3, [sp, #0]
   12e7e:	f04f 0312 	mov.w	r3, #18	; 0x12
   12e82:	9301      	str	r3, [sp, #4]
   12e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12e88:	9302      	str	r3, [sp, #8]
   12e8a:	f04f 0300 	mov.w	r3, #0	; 0x0
   12e8e:	9303      	str	r3, [sp, #12]
   12e90:	f8d7 0094 	ldr.w	r0, [r7, #148]
   12e94:	ca06      	ldmia	r2!, {r1, r2}
   12e96:	f8d7 3090 	ldr.w	r3, [r7, #144]
   12e9a:	f7fd f9cd 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12e9e:	f8d7 3094 	ldr.w	r3, [r7, #148]
   12ea2:	f8c7 3098 	str.w	r3, [r7, #152]
   12ea6:	e003      	b.n	12eb0 <_ZN9Krabi2015C2Eb+0x628>
   12ea8:	f8d7 3094 	ldr.w	r3, [r7, #148]
   12eac:	f8c7 3098 	str.w	r3, [r7, #152]
   12eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]
   12eb4:	f8c7 3534 	str.w	r3, [r7, #1332]
    Etape* etape9 = new Etape(Position(910, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   12eb8:	f507 7214 	add.w	r2, r7, #592	; 0x250
   12ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12ec0:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12ec4:	781b      	ldrb	r3, [r3, #0]
   12ec6:	4610      	mov	r0, r2
   12ec8:	f8df 169c 	ldr.w	r1, [pc, #1692]	; 13568 <_ZN9Krabi2015C2Eb+0xce0>
   12ecc:	f8df 269c 	ldr.w	r2, [pc, #1692]	; 1356c <_ZN9Krabi2015C2Eb+0xce4>
   12ed0:	f7fb fb14 	bl	e4fc <_ZN8PositionC1Effb>
   12ed4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12ed8:	f8c7 309c 	str.w	r3, [r7, #156]
   12edc:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12ee0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12ee4:	f8c7 3510 	str.w	r3, [r7, #1296]
   12ee8:	f04f 0034 	mov.w	r0, #52	; 0x34
   12eec:	f7fb f9a0 	bl	e230 <_Znwj>
   12ef0:	4603      	mov	r3, r0
   12ef2:	f8c7 30a0 	str.w	r3, [r7, #160]
   12ef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   12efa:	2b00      	cmp	r3, #0
   12efc:	d01b      	beq.n	12f36 <_ZN9Krabi2015C2Eb+0x6ae>
   12efe:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12f02:	681b      	ldr	r3, [r3, #0]
   12f04:	6b5b      	ldr	r3, [r3, #52]
   12f06:	f507 7214 	add.w	r2, r7, #592	; 0x250
   12f0a:	9300      	str	r3, [sp, #0]
   12f0c:	f04f 0312 	mov.w	r3, #18	; 0x12
   12f10:	9301      	str	r3, [sp, #4]
   12f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f16:	9302      	str	r3, [sp, #8]
   12f18:	f04f 0300 	mov.w	r3, #0	; 0x0
   12f1c:	9303      	str	r3, [sp, #12]
   12f1e:	f8d7 00a0 	ldr.w	r0, [r7, #160]
   12f22:	ca06      	ldmia	r2!, {r1, r2}
   12f24:	f8d7 309c 	ldr.w	r3, [r7, #156]
   12f28:	f7fd f986 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12f2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   12f30:	f8c7 30a4 	str.w	r3, [r7, #164]
   12f34:	e003      	b.n	12f3e <_ZN9Krabi2015C2Eb+0x6b6>
   12f36:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   12f3a:	f8c7 30a4 	str.w	r3, [r7, #164]
   12f3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   12f42:	f8c7 3538 	str.w	r3, [r7, #1336]
    Etape* etape10 = new Etape(Position(1500, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   12f46:	f507 7216 	add.w	r2, r7, #600	; 0x258
   12f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12f4e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12f52:	781b      	ldrb	r3, [r3, #0]
   12f54:	4610      	mov	r0, r2
   12f56:	f8df 1618 	ldr.w	r1, [pc, #1560]	; 13570 <_ZN9Krabi2015C2Eb+0xce8>
   12f5a:	f8df 2618 	ldr.w	r2, [pc, #1560]	; 13574 <_ZN9Krabi2015C2Eb+0xcec>
   12f5e:	f7fb facd 	bl	e4fc <_ZN8PositionC1Effb>
   12f62:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12f66:	f8c7 30a8 	str.w	r3, [r7, #168]
   12f6a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12f6e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12f72:	f8c7 3510 	str.w	r3, [r7, #1296]
   12f76:	f04f 0034 	mov.w	r0, #52	; 0x34
   12f7a:	f7fb f959 	bl	e230 <_Znwj>
   12f7e:	4603      	mov	r3, r0
   12f80:	f8c7 30ac 	str.w	r3, [r7, #172]
   12f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   12f88:	2b00      	cmp	r3, #0
   12f8a:	d01b      	beq.n	12fc4 <_ZN9Krabi2015C2Eb+0x73c>
   12f8c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12f90:	681b      	ldr	r3, [r3, #0]
   12f92:	6b5b      	ldr	r3, [r3, #52]
   12f94:	f507 7216 	add.w	r2, r7, #600	; 0x258
   12f98:	9300      	str	r3, [sp, #0]
   12f9a:	f04f 0312 	mov.w	r3, #18	; 0x12
   12f9e:	9301      	str	r3, [sp, #4]
   12fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12fa4:	9302      	str	r3, [sp, #8]
   12fa6:	f04f 0300 	mov.w	r3, #0	; 0x0
   12faa:	9303      	str	r3, [sp, #12]
   12fac:	f8d7 00ac 	ldr.w	r0, [r7, #172]
   12fb0:	ca06      	ldmia	r2!, {r1, r2}
   12fb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   12fb6:	f7fd f93f 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   12fbe:	f8c7 30b0 	str.w	r3, [r7, #176]
   12fc2:	e003      	b.n	12fcc <_ZN9Krabi2015C2Eb+0x744>
   12fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   12fc8:	f8c7 30b0 	str.w	r3, [r7, #176]
   12fcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]
   12fd0:	f8c7 353c 	str.w	r3, [r7, #1340]
    Etape* etape11 = new Etape(Position(2090, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   12fd4:	f507 7218 	add.w	r2, r7, #608	; 0x260
   12fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12fdc:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12fe0:	781b      	ldrb	r3, [r3, #0]
   12fe2:	4610      	mov	r0, r2
   12fe4:	f8df 1590 	ldr.w	r1, [pc, #1424]	; 13578 <_ZN9Krabi2015C2Eb+0xcf0>
   12fe8:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 1356c <_ZN9Krabi2015C2Eb+0xce4>
   12fec:	f7fb fa86 	bl	e4fc <_ZN8PositionC1Effb>
   12ff0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12ff4:	f8c7 30b4 	str.w	r3, [r7, #180]
   12ff8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12ffc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13000:	f8c7 3510 	str.w	r3, [r7, #1296]
   13004:	f04f 0034 	mov.w	r0, #52	; 0x34
   13008:	f7fb f912 	bl	e230 <_Znwj>
   1300c:	4603      	mov	r3, r0
   1300e:	f8c7 30b8 	str.w	r3, [r7, #184]
   13012:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   13016:	2b00      	cmp	r3, #0
   13018:	d01b      	beq.n	13052 <_ZN9Krabi2015C2Eb+0x7ca>
   1301a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1301e:	681b      	ldr	r3, [r3, #0]
   13020:	6b5b      	ldr	r3, [r3, #52]
   13022:	f507 7218 	add.w	r2, r7, #608	; 0x260
   13026:	9300      	str	r3, [sp, #0]
   13028:	f04f 0312 	mov.w	r3, #18	; 0x12
   1302c:	9301      	str	r3, [sp, #4]
   1302e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13032:	9302      	str	r3, [sp, #8]
   13034:	f04f 0300 	mov.w	r3, #0	; 0x0
   13038:	9303      	str	r3, [sp, #12]
   1303a:	f8d7 00b8 	ldr.w	r0, [r7, #184]
   1303e:	ca06      	ldmia	r2!, {r1, r2}
   13040:	f8d7 30b4 	ldr.w	r3, [r7, #180]
   13044:	f7fd f8f8 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13048:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   1304c:	f8c7 30bc 	str.w	r3, [r7, #188]
   13050:	e003      	b.n	1305a <_ZN9Krabi2015C2Eb+0x7d2>
   13052:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   13056:	f8c7 30bc 	str.w	r3, [r7, #188]
   1305a:	f8d7 30bc 	ldr.w	r3, [r7, #188]
   1305e:	f8c7 3540 	str.w	r3, [r7, #1344]
    Etape* etape12 = new Etape(Position(2750, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   13062:	f507 721a 	add.w	r2, r7, #616	; 0x268
   13066:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1306a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1306e:	781b      	ldrb	r3, [r3, #0]
   13070:	4610      	mov	r0, r2
   13072:	f8df 1508 	ldr.w	r1, [pc, #1288]	; 1357c <_ZN9Krabi2015C2Eb+0xcf4>
   13076:	f8df 24ec 	ldr.w	r2, [pc, #1260]	; 13564 <_ZN9Krabi2015C2Eb+0xcdc>
   1307a:	f7fb fa3f 	bl	e4fc <_ZN8PositionC1Effb>
   1307e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13082:	f8c7 30c0 	str.w	r3, [r7, #192]
   13086:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1308a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1308e:	f8c7 3510 	str.w	r3, [r7, #1296]
   13092:	f04f 0034 	mov.w	r0, #52	; 0x34
   13096:	f7fb f8cb 	bl	e230 <_Znwj>
   1309a:	4603      	mov	r3, r0
   1309c:	f8c7 30c4 	str.w	r3, [r7, #196]
   130a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   130a4:	2b00      	cmp	r3, #0
   130a6:	d01b      	beq.n	130e0 <_ZN9Krabi2015C2Eb+0x858>
   130a8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   130ac:	681b      	ldr	r3, [r3, #0]
   130ae:	6b5b      	ldr	r3, [r3, #52]
   130b0:	f507 721a 	add.w	r2, r7, #616	; 0x268
   130b4:	9300      	str	r3, [sp, #0]
   130b6:	f04f 0312 	mov.w	r3, #18	; 0x12
   130ba:	9301      	str	r3, [sp, #4]
   130bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   130c0:	9302      	str	r3, [sp, #8]
   130c2:	f04f 0300 	mov.w	r3, #0	; 0x0
   130c6:	9303      	str	r3, [sp, #12]
   130c8:	f8d7 00c4 	ldr.w	r0, [r7, #196]
   130cc:	ca06      	ldmia	r2!, {r1, r2}
   130ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]
   130d2:	f7fd f8b1 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   130d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   130da:	f8c7 30c8 	str.w	r3, [r7, #200]
   130de:	e003      	b.n	130e8 <_ZN9Krabi2015C2Eb+0x860>
   130e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   130e4:	f8c7 30c8 	str.w	r3, [r7, #200]
   130e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]
   130ec:	f8c7 3544 	str.w	r3, [r7, #1348]
    Etape* etape13 = new Etape(Position(90, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   130f0:	f507 721c 	add.w	r2, r7, #624	; 0x270
   130f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
   130f8:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   130fc:	781b      	ldrb	r3, [r3, #0]
   130fe:	4610      	mov	r0, r2
   13100:	f8df 147c 	ldr.w	r1, [pc, #1148]	; 13580 <_ZN9Krabi2015C2Eb+0xcf8>
   13104:	f8df 245c 	ldr.w	r2, [pc, #1116]	; 13564 <_ZN9Krabi2015C2Eb+0xcdc>
   13108:	f7fb f9f8 	bl	e4fc <_ZN8PositionC1Effb>
   1310c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13110:	f8c7 30cc 	str.w	r3, [r7, #204]
   13114:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13118:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1311c:	f8c7 3510 	str.w	r3, [r7, #1296]
   13120:	f04f 0034 	mov.w	r0, #52	; 0x34
   13124:	f7fb f884 	bl	e230 <_Znwj>
   13128:	4603      	mov	r3, r0
   1312a:	f8c7 30d0 	str.w	r3, [r7, #208]
   1312e:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   13132:	2b00      	cmp	r3, #0
   13134:	d01b      	beq.n	1316e <_ZN9Krabi2015C2Eb+0x8e6>
   13136:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1313a:	681b      	ldr	r3, [r3, #0]
   1313c:	6b5b      	ldr	r3, [r3, #52]
   1313e:	f507 721c 	add.w	r2, r7, #624	; 0x270
   13142:	9300      	str	r3, [sp, #0]
   13144:	f04f 0313 	mov.w	r3, #19	; 0x13
   13148:	9301      	str	r3, [sp, #4]
   1314a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1314e:	9302      	str	r3, [sp, #8]
   13150:	f04f 0300 	mov.w	r3, #0	; 0x0
   13154:	9303      	str	r3, [sp, #12]
   13156:	f8d7 00d0 	ldr.w	r0, [r7, #208]
   1315a:	ca06      	ldmia	r2!, {r1, r2}
   1315c:	f8d7 30cc 	ldr.w	r3, [r7, #204]
   13160:	f7fd f86a 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13164:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   13168:	f8c7 30d4 	str.w	r3, [r7, #212]
   1316c:	e003      	b.n	13176 <_ZN9Krabi2015C2Eb+0x8ee>
   1316e:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   13172:	f8c7 30d4 	str.w	r3, [r7, #212]
   13176:	f8d7 30d4 	ldr.w	r3, [r7, #212]
   1317a:	f8c7 3548 	str.w	r3, [r7, #1352]
    Etape* etape14 = new Etape(Position(90, 1850, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   1317e:	f507 721e 	add.w	r2, r7, #632	; 0x278
   13182:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13186:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1318a:	781b      	ldrb	r3, [r3, #0]
   1318c:	4610      	mov	r0, r2
   1318e:	49fc      	ldr	r1, [pc, #1008]	(13580 <_ZN9Krabi2015C2Eb+0xcf8>)
   13190:	4afc      	ldr	r2, [pc, #1008]	(13584 <_ZN9Krabi2015C2Eb+0xcfc>)
   13192:	f7fb f9b3 	bl	e4fc <_ZN8PositionC1Effb>
   13196:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1319a:	f8c7 30d8 	str.w	r3, [r7, #216]
   1319e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   131a2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   131a6:	f8c7 3510 	str.w	r3, [r7, #1296]
   131aa:	f04f 0034 	mov.w	r0, #52	; 0x34
   131ae:	f7fb f83f 	bl	e230 <_Znwj>
   131b2:	4603      	mov	r3, r0
   131b4:	f8c7 30dc 	str.w	r3, [r7, #220]
   131b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   131bc:	2b00      	cmp	r3, #0
   131be:	d01b      	beq.n	131f8 <_ZN9Krabi2015C2Eb+0x970>
   131c0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   131c4:	681b      	ldr	r3, [r3, #0]
   131c6:	6b5b      	ldr	r3, [r3, #52]
   131c8:	f507 721e 	add.w	r2, r7, #632	; 0x278
   131cc:	9300      	str	r3, [sp, #0]
   131ce:	f04f 0313 	mov.w	r3, #19	; 0x13
   131d2:	9301      	str	r3, [sp, #4]
   131d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   131d8:	9302      	str	r3, [sp, #8]
   131da:	f04f 0300 	mov.w	r3, #0	; 0x0
   131de:	9303      	str	r3, [sp, #12]
   131e0:	f8d7 00dc 	ldr.w	r0, [r7, #220]
   131e4:	ca06      	ldmia	r2!, {r1, r2}
   131e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]
   131ea:	f7fd f825 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   131ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   131f2:	f8c7 30e0 	str.w	r3, [r7, #224]
   131f6:	e003      	b.n	13200 <_ZN9Krabi2015C2Eb+0x978>
   131f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   131fc:	f8c7 30e0 	str.w	r3, [r7, #224]
   13200:	f8d7 30e0 	ldr.w	r3, [r7, #224]
   13204:	f8c7 354c 	str.w	r3, [r7, #1356]
    Etape* etape15 = new Etape(Position(90, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   13208:	f507 7220 	add.w	r2, r7, #640	; 0x280
   1320c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13210:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13214:	781b      	ldrb	r3, [r3, #0]
   13216:	4610      	mov	r0, r2
   13218:	49d9      	ldr	r1, [pc, #868]	(13580 <_ZN9Krabi2015C2Eb+0xcf8>)
   1321a:	4adb      	ldr	r2, [pc, #876]	(13588 <_ZN9Krabi2015C2Eb+0xd00>)
   1321c:	f7fb f96e 	bl	e4fc <_ZN8PositionC1Effb>
   13220:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13224:	f8c7 30e4 	str.w	r3, [r7, #228]
   13228:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1322c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13230:	f8c7 3510 	str.w	r3, [r7, #1296]
   13234:	f04f 0034 	mov.w	r0, #52	; 0x34
   13238:	f7fa fffa 	bl	e230 <_Znwj>
   1323c:	4603      	mov	r3, r0
   1323e:	f8c7 30e8 	str.w	r3, [r7, #232]
   13242:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   13246:	2b00      	cmp	r3, #0
   13248:	d01b      	beq.n	13282 <_ZN9Krabi2015C2Eb+0x9fa>
   1324a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1324e:	681b      	ldr	r3, [r3, #0]
   13250:	6b5b      	ldr	r3, [r3, #52]
   13252:	f507 7220 	add.w	r2, r7, #640	; 0x280
   13256:	9300      	str	r3, [sp, #0]
   13258:	f04f 0313 	mov.w	r3, #19	; 0x13
   1325c:	9301      	str	r3, [sp, #4]
   1325e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13262:	9302      	str	r3, [sp, #8]
   13264:	f04f 0300 	mov.w	r3, #0	; 0x0
   13268:	9303      	str	r3, [sp, #12]
   1326a:	f8d7 00e8 	ldr.w	r0, [r7, #232]
   1326e:	ca06      	ldmia	r2!, {r1, r2}
   13270:	f8d7 30e4 	ldr.w	r3, [r7, #228]
   13274:	f7fc ffe0 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13278:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   1327c:	f8c7 30ec 	str.w	r3, [r7, #236]
   13280:	e003      	b.n	1328a <_ZN9Krabi2015C2Eb+0xa02>
   13282:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   13286:	f8c7 30ec 	str.w	r3, [r7, #236]
   1328a:	f8d7 30ec 	ldr.w	r3, [r7, #236]
   1328e:	f8c7 3550 	str.w	r3, [r7, #1360]
    Etape* etape16 = new Etape(Position(850, 100, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   13292:	f507 7222 	add.w	r2, r7, #648	; 0x288
   13296:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1329a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1329e:	781b      	ldrb	r3, [r3, #0]
   132a0:	4610      	mov	r0, r2
   132a2:	49ba      	ldr	r1, [pc, #744]	(1358c <_ZN9Krabi2015C2Eb+0xd04>)
   132a4:	4aba      	ldr	r2, [pc, #744]	(13590 <_ZN9Krabi2015C2Eb+0xd08>)
   132a6:	f7fb f929 	bl	e4fc <_ZN8PositionC1Effb>
   132aa:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   132ae:	f8c7 30f0 	str.w	r3, [r7, #240]
   132b2:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   132b6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   132ba:	f8c7 3510 	str.w	r3, [r7, #1296]
   132be:	f04f 0034 	mov.w	r0, #52	; 0x34
   132c2:	f7fa ffb5 	bl	e230 <_Znwj>
   132c6:	4603      	mov	r3, r0
   132c8:	f8c7 30f4 	str.w	r3, [r7, #244]
   132cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   132d0:	2b00      	cmp	r3, #0
   132d2:	d01b      	beq.n	1330c <_ZN9Krabi2015C2Eb+0xa84>
   132d4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   132d8:	681b      	ldr	r3, [r3, #0]
   132da:	6b5b      	ldr	r3, [r3, #52]
   132dc:	f507 7222 	add.w	r2, r7, #648	; 0x288
   132e0:	9300      	str	r3, [sp, #0]
   132e2:	f04f 0313 	mov.w	r3, #19	; 0x13
   132e6:	9301      	str	r3, [sp, #4]
   132e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   132ec:	9302      	str	r3, [sp, #8]
   132ee:	f04f 0300 	mov.w	r3, #0	; 0x0
   132f2:	9303      	str	r3, [sp, #12]
   132f4:	f8d7 00f4 	ldr.w	r0, [r7, #244]
   132f8:	ca06      	ldmia	r2!, {r1, r2}
   132fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]
   132fe:	f7fc ff9b 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13302:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   13306:	f8c7 30f8 	str.w	r3, [r7, #248]
   1330a:	e003      	b.n	13314 <_ZN9Krabi2015C2Eb+0xa8c>
   1330c:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   13310:	f8c7 30f8 	str.w	r3, [r7, #248]
   13314:	f8d7 30f8 	ldr.w	r3, [r7, #248]
   13318:	f8c7 3554 	str.w	r3, [r7, #1364]
    Etape* etape17 = new Etape(Position(850, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   1331c:	f507 7224 	add.w	r2, r7, #656	; 0x290
   13320:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13324:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13328:	781b      	ldrb	r3, [r3, #0]
   1332a:	4610      	mov	r0, r2
   1332c:	4997      	ldr	r1, [pc, #604]	(1358c <_ZN9Krabi2015C2Eb+0xd04>)
   1332e:	4a96      	ldr	r2, [pc, #600]	(13588 <_ZN9Krabi2015C2Eb+0xd00>)
   13330:	f7fb f8e4 	bl	e4fc <_ZN8PositionC1Effb>
   13334:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13338:	f8c7 30fc 	str.w	r3, [r7, #252]
   1333c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13340:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13344:	f8c7 3510 	str.w	r3, [r7, #1296]
   13348:	f04f 0034 	mov.w	r0, #52	; 0x34
   1334c:	f7fa ff70 	bl	e230 <_Znwj>
   13350:	4603      	mov	r3, r0
   13352:	f8c7 3100 	str.w	r3, [r7, #256]
   13356:	f8d7 3100 	ldr.w	r3, [r7, #256]
   1335a:	2b00      	cmp	r3, #0
   1335c:	d01b      	beq.n	13396 <_ZN9Krabi2015C2Eb+0xb0e>
   1335e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13362:	681b      	ldr	r3, [r3, #0]
   13364:	6b5b      	ldr	r3, [r3, #52]
   13366:	f507 7224 	add.w	r2, r7, #656	; 0x290
   1336a:	9300      	str	r3, [sp, #0]
   1336c:	f04f 0313 	mov.w	r3, #19	; 0x13
   13370:	9301      	str	r3, [sp, #4]
   13372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13376:	9302      	str	r3, [sp, #8]
   13378:	f04f 0300 	mov.w	r3, #0	; 0x0
   1337c:	9303      	str	r3, [sp, #12]
   1337e:	f8d7 0100 	ldr.w	r0, [r7, #256]
   13382:	ca06      	ldmia	r2!, {r1, r2}
   13384:	f8d7 30fc 	ldr.w	r3, [r7, #252]
   13388:	f7fc ff56 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1338c:	f8d7 3100 	ldr.w	r3, [r7, #256]
   13390:	f8c7 3104 	str.w	r3, [r7, #260]
   13394:	e003      	b.n	1339e <_ZN9Krabi2015C2Eb+0xb16>
   13396:	f8d7 3100 	ldr.w	r3, [r7, #256]
   1339a:	f8c7 3104 	str.w	r3, [r7, #260]
   1339e:	f8d7 3104 	ldr.w	r3, [r7, #260]
   133a2:	f8c7 3558 	str.w	r3, [r7, #1368]
    Etape* etape18 = new Etape(Position(870, 1355, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   133a6:	f507 7226 	add.w	r2, r7, #664	; 0x298
   133aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
   133ae:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   133b2:	781b      	ldrb	r3, [r3, #0]
   133b4:	4610      	mov	r0, r2
   133b6:	4977      	ldr	r1, [pc, #476]	(13594 <_ZN9Krabi2015C2Eb+0xd0c>)
   133b8:	4a77      	ldr	r2, [pc, #476]	(13598 <_ZN9Krabi2015C2Eb+0xd10>)
   133ba:	f7fb f89f 	bl	e4fc <_ZN8PositionC1Effb>
   133be:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   133c2:	f8c7 3108 	str.w	r3, [r7, #264]
   133c6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   133ca:	f103 0301 	add.w	r3, r3, #1	; 0x1
   133ce:	f8c7 3510 	str.w	r3, [r7, #1296]
   133d2:	f04f 0034 	mov.w	r0, #52	; 0x34
   133d6:	f7fa ff2b 	bl	e230 <_Znwj>
   133da:	4603      	mov	r3, r0
   133dc:	f8c7 310c 	str.w	r3, [r7, #268]
   133e0:	f8d7 310c 	ldr.w	r3, [r7, #268]
   133e4:	2b00      	cmp	r3, #0
   133e6:	d01b      	beq.n	13420 <_ZN9Krabi2015C2Eb+0xb98>
   133e8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   133ec:	681b      	ldr	r3, [r3, #0]
   133ee:	6b5b      	ldr	r3, [r3, #52]
   133f0:	f507 7226 	add.w	r2, r7, #664	; 0x298
   133f4:	9300      	str	r3, [sp, #0]
   133f6:	f04f 0313 	mov.w	r3, #19	; 0x13
   133fa:	9301      	str	r3, [sp, #4]
   133fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13400:	9302      	str	r3, [sp, #8]
   13402:	f04f 0300 	mov.w	r3, #0	; 0x0
   13406:	9303      	str	r3, [sp, #12]
   13408:	f8d7 010c 	ldr.w	r0, [r7, #268]
   1340c:	ca06      	ldmia	r2!, {r1, r2}
   1340e:	f8d7 3108 	ldr.w	r3, [r7, #264]
   13412:	f7fc ff11 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13416:	f8d7 310c 	ldr.w	r3, [r7, #268]
   1341a:	f8c7 3110 	str.w	r3, [r7, #272]
   1341e:	e003      	b.n	13428 <_ZN9Krabi2015C2Eb+0xba0>
   13420:	f8d7 310c 	ldr.w	r3, [r7, #268]
   13424:	f8c7 3110 	str.w	r3, [r7, #272]
   13428:	f8d7 3110 	ldr.w	r3, [r7, #272]
   1342c:	f8c7 355c 	str.w	r3, [r7, #1372]
    Etape* etape19 = new Etape(Position(1100, 1770, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   13430:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   13434:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13438:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1343c:	781b      	ldrb	r3, [r3, #0]
   1343e:	4610      	mov	r0, r2
   13440:	4956      	ldr	r1, [pc, #344]	(1359c <_ZN9Krabi2015C2Eb+0xd14>)
   13442:	4a57      	ldr	r2, [pc, #348]	(135a0 <_ZN9Krabi2015C2Eb+0xd18>)
   13444:	f7fb f85a 	bl	e4fc <_ZN8PositionC1Effb>
   13448:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1344c:	f8c7 3114 	str.w	r3, [r7, #276]
   13450:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13454:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13458:	f8c7 3510 	str.w	r3, [r7, #1296]
   1345c:	f04f 0034 	mov.w	r0, #52	; 0x34
   13460:	f7fa fee6 	bl	e230 <_Znwj>
   13464:	4603      	mov	r3, r0
   13466:	f8c7 3118 	str.w	r3, [r7, #280]
   1346a:	f8d7 3118 	ldr.w	r3, [r7, #280]
   1346e:	2b00      	cmp	r3, #0
   13470:	d01b      	beq.n	134aa <_ZN9Krabi2015C2Eb+0xc22>
   13472:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13476:	681b      	ldr	r3, [r3, #0]
   13478:	6b5b      	ldr	r3, [r3, #52]
   1347a:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   1347e:	9300      	str	r3, [sp, #0]
   13480:	f04f 0313 	mov.w	r3, #19	; 0x13
   13484:	9301      	str	r3, [sp, #4]
   13486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1348a:	9302      	str	r3, [sp, #8]
   1348c:	f04f 0300 	mov.w	r3, #0	; 0x0
   13490:	9303      	str	r3, [sp, #12]
   13492:	f8d7 0118 	ldr.w	r0, [r7, #280]
   13496:	ca06      	ldmia	r2!, {r1, r2}
   13498:	f8d7 3114 	ldr.w	r3, [r7, #276]
   1349c:	f7fc fecc 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   134a0:	f8d7 3118 	ldr.w	r3, [r7, #280]
   134a4:	f8c7 311c 	str.w	r3, [r7, #284]
   134a8:	e003      	b.n	134b2 <_ZN9Krabi2015C2Eb+0xc2a>
   134aa:	f8d7 3118 	ldr.w	r3, [r7, #280]
   134ae:	f8c7 311c 	str.w	r3, [r7, #284]
   134b2:	f8d7 311c 	ldr.w	r3, [r7, #284]
   134b6:	f8c7 3560 	str.w	r3, [r7, #1376]
    Etape* etape20 = new Etape(Position(1300, 1400, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   134ba:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
   134be:	f507 7300 	add.w	r3, r7, #512	; 0x200
   134c2:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   134c6:	781b      	ldrb	r3, [r3, #0]
   134c8:	4610      	mov	r0, r2
   134ca:	4936      	ldr	r1, [pc, #216]	(135a4 <_ZN9Krabi2015C2Eb+0xd1c>)
   134cc:	4a36      	ldr	r2, [pc, #216]	(135a8 <_ZN9Krabi2015C2Eb+0xd20>)
   134ce:	f7fb f815 	bl	e4fc <_ZN8PositionC1Effb>
   134d2:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   134d6:	f8c7 3120 	str.w	r3, [r7, #288]
   134da:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   134de:	f103 0301 	add.w	r3, r3, #1	; 0x1
   134e2:	f8c7 3510 	str.w	r3, [r7, #1296]
   134e6:	f04f 0034 	mov.w	r0, #52	; 0x34
   134ea:	f7fa fea1 	bl	e230 <_Znwj>
   134ee:	4603      	mov	r3, r0
   134f0:	f8c7 3124 	str.w	r3, [r7, #292]
   134f4:	f8d7 3124 	ldr.w	r3, [r7, #292]
   134f8:	2b00      	cmp	r3, #0
   134fa:	d057      	beq.n	135ac <_ZN9Krabi2015C2Eb+0xd24>
   134fc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13500:	681b      	ldr	r3, [r3, #0]
   13502:	6b5b      	ldr	r3, [r3, #52]
   13504:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
   13508:	9300      	str	r3, [sp, #0]
   1350a:	f04f 0313 	mov.w	r3, #19	; 0x13
   1350e:	9301      	str	r3, [sp, #4]
   13510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13514:	9302      	str	r3, [sp, #8]
   13516:	f04f 0300 	mov.w	r3, #0	; 0x0
   1351a:	9303      	str	r3, [sp, #12]
   1351c:	f8d7 0124 	ldr.w	r0, [r7, #292]
   13520:	ca06      	ldmia	r2!, {r1, r2}
   13522:	f8d7 3120 	ldr.w	r3, [r7, #288]
   13526:	f7fc fe87 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1352a:	f8d7 3124 	ldr.w	r3, [r7, #292]
   1352e:	f8c7 3128 	str.w	r3, [r7, #296]
   13532:	e03f      	b.n	135b4 <_ZN9Krabi2015C2Eb+0xd2c>
   13534:	00021b28 	.word	0x00021b28
   13538:	00000000 	.word	0x00000000
   1353c:	41f00000 	.word	0x41f00000
   13540:	437a0000 	.word	0x437a0000
   13544:	447a0000 	.word	0x447a0000
   13548:	442f0000 	.word	0x442f0000
   1354c:	44510000 	.word	0x44510000
   13550:	44de8000 	.word	0x44de8000
   13554:	436c0000 	.word	0x436c0000
   13558:	43c80000 	.word	0x43c80000
   1355c:	451c4000 	.word	0x451c4000
   13560:	450fc000 	.word	0x450fc000
   13564:	44dac000 	.word	0x44dac000
   13568:	44638000 	.word	0x44638000
   1356c:	444f8000 	.word	0x444f8000
   13570:	44bb8000 	.word	0x44bb8000
   13574:	44ce4000 	.word	0x44ce4000
   13578:	4502a000 	.word	0x4502a000
   1357c:	452be000 	.word	0x452be000
   13580:	42b40000 	.word	0x42b40000
   13584:	44e74000 	.word	0x44e74000
   13588:	43480000 	.word	0x43480000
   1358c:	44548000 	.word	0x44548000
   13590:	42c80000 	.word	0x42c80000
   13594:	44598000 	.word	0x44598000
   13598:	44a96000 	.word	0x44a96000
   1359c:	44898000 	.word	0x44898000
   135a0:	44dd4000 	.word	0x44dd4000
   135a4:	44a28000 	.word	0x44a28000
   135a8:	44af0000 	.word	0x44af0000
   135ac:	f8d7 3124 	ldr.w	r3, [r7, #292]
   135b0:	f8c7 3128 	str.w	r3, [r7, #296]
   135b4:	f8d7 3128 	ldr.w	r3, [r7, #296]
   135b8:	f8c7 3564 	str.w	r3, [r7, #1380]
    Etape* etape21 = new Etape(Position(1250, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   135bc:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
   135c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   135c4:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   135c8:	781b      	ldrb	r3, [r3, #0]
   135ca:	4610      	mov	r0, r2
   135cc:	f8df 194c 	ldr.w	r1, [pc, #2380]	; 13f1c <_ZN9Krabi2015C2Eb+0x1694>
   135d0:	f8df 294c 	ldr.w	r2, [pc, #2380]	; 13f20 <_ZN9Krabi2015C2Eb+0x1698>
   135d4:	f7fa ff92 	bl	e4fc <_ZN8PositionC1Effb>
   135d8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   135dc:	f8c7 312c 	str.w	r3, [r7, #300]
   135e0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   135e4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   135e8:	f8c7 3510 	str.w	r3, [r7, #1296]
   135ec:	f04f 0034 	mov.w	r0, #52	; 0x34
   135f0:	f7fa fe1e 	bl	e230 <_Znwj>
   135f4:	4603      	mov	r3, r0
   135f6:	f8c7 3130 	str.w	r3, [r7, #304]
   135fa:	f8d7 3130 	ldr.w	r3, [r7, #304]
   135fe:	2b00      	cmp	r3, #0
   13600:	d01b      	beq.n	1363a <_ZN9Krabi2015C2Eb+0xdb2>
   13602:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13606:	681b      	ldr	r3, [r3, #0]
   13608:	6b5b      	ldr	r3, [r3, #52]
   1360a:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
   1360e:	9300      	str	r3, [sp, #0]
   13610:	f04f 0314 	mov.w	r3, #20	; 0x14
   13614:	9301      	str	r3, [sp, #4]
   13616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1361a:	9302      	str	r3, [sp, #8]
   1361c:	f04f 0300 	mov.w	r3, #0	; 0x0
   13620:	9303      	str	r3, [sp, #12]
   13622:	f8d7 0130 	ldr.w	r0, [r7, #304]
   13626:	ca06      	ldmia	r2!, {r1, r2}
   13628:	f8d7 312c 	ldr.w	r3, [r7, #300]
   1362c:	f7fc fe04 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13630:	f8d7 3130 	ldr.w	r3, [r7, #304]
   13634:	f8c7 3134 	str.w	r3, [r7, #308]
   13638:	e003      	b.n	13642 <_ZN9Krabi2015C2Eb+0xdba>
   1363a:	f8d7 3130 	ldr.w	r3, [r7, #304]
   1363e:	f8c7 3134 	str.w	r3, [r7, #308]
   13642:	f8d7 3134 	ldr.w	r3, [r7, #308]
   13646:	f8c7 3568 	str.w	r3, [r7, #1384]
    Etape* etape22 = new Etape(Position(1750, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   1364a:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
   1364e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13652:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13656:	781b      	ldrb	r3, [r3, #0]
   13658:	4610      	mov	r0, r2
   1365a:	f8df 18c8 	ldr.w	r1, [pc, #2248]	; 13f24 <_ZN9Krabi2015C2Eb+0x169c>
   1365e:	f8df 28c0 	ldr.w	r2, [pc, #2240]	; 13f20 <_ZN9Krabi2015C2Eb+0x1698>
   13662:	f7fa ff4b 	bl	e4fc <_ZN8PositionC1Effb>
   13666:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1366a:	f8c7 3138 	str.w	r3, [r7, #312]
   1366e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13672:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13676:	f8c7 3510 	str.w	r3, [r7, #1296]
   1367a:	f04f 0034 	mov.w	r0, #52	; 0x34
   1367e:	f7fa fdd7 	bl	e230 <_Znwj>
   13682:	4603      	mov	r3, r0
   13684:	f8c7 313c 	str.w	r3, [r7, #316]
   13688:	f8d7 313c 	ldr.w	r3, [r7, #316]
   1368c:	2b00      	cmp	r3, #0
   1368e:	d01b      	beq.n	136c8 <_ZN9Krabi2015C2Eb+0xe40>
   13690:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13694:	681b      	ldr	r3, [r3, #0]
   13696:	6b5b      	ldr	r3, [r3, #52]
   13698:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
   1369c:	9300      	str	r3, [sp, #0]
   1369e:	f04f 0314 	mov.w	r3, #20	; 0x14
   136a2:	9301      	str	r3, [sp, #4]
   136a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   136a8:	9302      	str	r3, [sp, #8]
   136aa:	f04f 0300 	mov.w	r3, #0	; 0x0
   136ae:	9303      	str	r3, [sp, #12]
   136b0:	f8d7 013c 	ldr.w	r0, [r7, #316]
   136b4:	ca06      	ldmia	r2!, {r1, r2}
   136b6:	f8d7 3138 	ldr.w	r3, [r7, #312]
   136ba:	f7fc fdbd 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   136be:	f8d7 313c 	ldr.w	r3, [r7, #316]
   136c2:	f8c7 3140 	str.w	r3, [r7, #320]
   136c6:	e003      	b.n	136d0 <_ZN9Krabi2015C2Eb+0xe48>
   136c8:	f8d7 313c 	ldr.w	r3, [r7, #316]
   136cc:	f8c7 3140 	str.w	r3, [r7, #320]
   136d0:	f8d7 3140 	ldr.w	r3, [r7, #320]
   136d4:	f8c7 356c 	str.w	r3, [r7, #1388]
    Etape* etape23 = new Etape(Position(1230, 760, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::TAPIS, -1, 0);
   136d8:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
   136dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
   136e0:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   136e4:	781b      	ldrb	r3, [r3, #0]
   136e6:	4610      	mov	r0, r2
   136e8:	f8df 183c 	ldr.w	r1, [pc, #2108]	; 13f28 <_ZN9Krabi2015C2Eb+0x16a0>
   136ec:	f8df 283c 	ldr.w	r2, [pc, #2108]	; 13f2c <_ZN9Krabi2015C2Eb+0x16a4>
   136f0:	f7fa ff04 	bl	e4fc <_ZN8PositionC1Effb>
   136f4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   136f8:	f8c7 3144 	str.w	r3, [r7, #324]
   136fc:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13700:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13704:	f8c7 3510 	str.w	r3, [r7, #1296]
   13708:	f04f 0034 	mov.w	r0, #52	; 0x34
   1370c:	f7fa fd90 	bl	e230 <_Znwj>
   13710:	4603      	mov	r3, r0
   13712:	f8c7 3148 	str.w	r3, [r7, #328]
   13716:	f8d7 3148 	ldr.w	r3, [r7, #328]
   1371a:	2b00      	cmp	r3, #0
   1371c:	d01b      	beq.n	13756 <_ZN9Krabi2015C2Eb+0xece>
   1371e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13722:	681b      	ldr	r3, [r3, #0]
   13724:	6b5b      	ldr	r3, [r3, #52]
   13726:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
   1372a:	9300      	str	r3, [sp, #0]
   1372c:	f04f 0315 	mov.w	r3, #21	; 0x15
   13730:	9301      	str	r3, [sp, #4]
   13732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13736:	9302      	str	r3, [sp, #8]
   13738:	f04f 0300 	mov.w	r3, #0	; 0x0
   1373c:	9303      	str	r3, [sp, #12]
   1373e:	f8d7 0148 	ldr.w	r0, [r7, #328]
   13742:	ca06      	ldmia	r2!, {r1, r2}
   13744:	f8d7 3144 	ldr.w	r3, [r7, #324]
   13748:	f7fc fd76 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1374c:	f8d7 3148 	ldr.w	r3, [r7, #328]
   13750:	f8c7 314c 	str.w	r3, [r7, #332]
   13754:	e003      	b.n	1375e <_ZN9Krabi2015C2Eb+0xed6>
   13756:	f8d7 3148 	ldr.w	r3, [r7, #328]
   1375a:	f8c7 314c 	str.w	r3, [r7, #332]
   1375e:	f8d7 314c 	ldr.w	r3, [r7, #332]
   13762:	f8c7 3570 	str.w	r3, [r7, #1392]
    Etape* etape24 = new Etape(Position(2300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13766:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
   1376a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1376e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13772:	781b      	ldrb	r3, [r3, #0]
   13774:	4610      	mov	r0, r2
   13776:	f8df 17b8 	ldr.w	r1, [pc, #1976]	; 13f30 <_ZN9Krabi2015C2Eb+0x16a8>
   1377a:	f8df 27b8 	ldr.w	r2, [pc, #1976]	; 13f34 <_ZN9Krabi2015C2Eb+0x16ac>
   1377e:	f7fa febd 	bl	e4fc <_ZN8PositionC1Effb>
   13782:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13786:	f8c7 3150 	str.w	r3, [r7, #336]
   1378a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1378e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13792:	f8c7 3510 	str.w	r3, [r7, #1296]
   13796:	f04f 0034 	mov.w	r0, #52	; 0x34
   1379a:	f7fa fd49 	bl	e230 <_Znwj>
   1379e:	4603      	mov	r3, r0
   137a0:	f8c7 3154 	str.w	r3, [r7, #340]
   137a4:	f8d7 3154 	ldr.w	r3, [r7, #340]
   137a8:	2b00      	cmp	r3, #0
   137aa:	d01b      	beq.n	137e4 <_ZN9Krabi2015C2Eb+0xf5c>
   137ac:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   137b0:	681b      	ldr	r3, [r3, #0]
   137b2:	6b5b      	ldr	r3, [r3, #52]
   137b4:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
   137b8:	9300      	str	r3, [sp, #0]
   137ba:	f04f 0300 	mov.w	r3, #0	; 0x0
   137be:	9301      	str	r3, [sp, #4]
   137c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   137c4:	9302      	str	r3, [sp, #8]
   137c6:	f04f 0300 	mov.w	r3, #0	; 0x0
   137ca:	9303      	str	r3, [sp, #12]
   137cc:	f8d7 0154 	ldr.w	r0, [r7, #340]
   137d0:	ca06      	ldmia	r2!, {r1, r2}
   137d2:	f8d7 3150 	ldr.w	r3, [r7, #336]
   137d6:	f7fc fd2f 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   137da:	f8d7 3154 	ldr.w	r3, [r7, #340]
   137de:	f8c7 3158 	str.w	r3, [r7, #344]
   137e2:	e003      	b.n	137ec <_ZN9Krabi2015C2Eb+0xf64>
   137e4:	f8d7 3154 	ldr.w	r3, [r7, #340]
   137e8:	f8c7 3158 	str.w	r3, [r7, #344]
   137ec:	f8d7 3158 	ldr.w	r3, [r7, #344]
   137f0:	f8c7 3574 	str.w	r3, [r7, #1396]
    Etape* etape25 = new Etape(Position(2710, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   137f4:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
   137f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
   137fc:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13800:	781b      	ldrb	r3, [r3, #0]
   13802:	4610      	mov	r0, r2
   13804:	f8df 1730 	ldr.w	r1, [pc, #1840]	; 13f38 <_ZN9Krabi2015C2Eb+0x16b0>
   13808:	f8df 2728 	ldr.w	r2, [pc, #1832]	; 13f34 <_ZN9Krabi2015C2Eb+0x16ac>
   1380c:	f7fa fe76 	bl	e4fc <_ZN8PositionC1Effb>
   13810:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13814:	f8c7 315c 	str.w	r3, [r7, #348]
   13818:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1381c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13820:	f8c7 3510 	str.w	r3, [r7, #1296]
   13824:	f04f 0034 	mov.w	r0, #52	; 0x34
   13828:	f7fa fd02 	bl	e230 <_Znwj>
   1382c:	4603      	mov	r3, r0
   1382e:	f8c7 3160 	str.w	r3, [r7, #352]
   13832:	f8d7 3160 	ldr.w	r3, [r7, #352]
   13836:	2b00      	cmp	r3, #0
   13838:	d01b      	beq.n	13872 <_ZN9Krabi2015C2Eb+0xfea>
   1383a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1383e:	681b      	ldr	r3, [r3, #0]
   13840:	6b5b      	ldr	r3, [r3, #52]
   13842:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
   13846:	9300      	str	r3, [sp, #0]
   13848:	f04f 0300 	mov.w	r3, #0	; 0x0
   1384c:	9301      	str	r3, [sp, #4]
   1384e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13852:	9302      	str	r3, [sp, #8]
   13854:	f04f 0300 	mov.w	r3, #0	; 0x0
   13858:	9303      	str	r3, [sp, #12]
   1385a:	f8d7 0160 	ldr.w	r0, [r7, #352]
   1385e:	ca06      	ldmia	r2!, {r1, r2}
   13860:	f8d7 315c 	ldr.w	r3, [r7, #348]
   13864:	f7fc fce8 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13868:	f8d7 3160 	ldr.w	r3, [r7, #352]
   1386c:	f8c7 3164 	str.w	r3, [r7, #356]
   13870:	e003      	b.n	1387a <_ZN9Krabi2015C2Eb+0xff2>
   13872:	f8d7 3160 	ldr.w	r3, [r7, #352]
   13876:	f8c7 3164 	str.w	r3, [r7, #356]
   1387a:	f8d7 3164 	ldr.w	r3, [r7, #356]
   1387e:	f8c7 3578 	str.w	r3, [r7, #1400]
    Etape* etape26 = new Etape(Position(2630, 460, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13882:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
   13886:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1388a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1388e:	781b      	ldrb	r3, [r3, #0]
   13890:	4610      	mov	r0, r2
   13892:	f8df 16a8 	ldr.w	r1, [pc, #1704]	; 13f3c <_ZN9Krabi2015C2Eb+0x16b4>
   13896:	f8df 26a8 	ldr.w	r2, [pc, #1704]	; 13f40 <_ZN9Krabi2015C2Eb+0x16b8>
   1389a:	f7fa fe2f 	bl	e4fc <_ZN8PositionC1Effb>
   1389e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   138a2:	f8c7 3168 	str.w	r3, [r7, #360]
   138a6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   138aa:	f103 0301 	add.w	r3, r3, #1	; 0x1
   138ae:	f8c7 3510 	str.w	r3, [r7, #1296]
   138b2:	f04f 0034 	mov.w	r0, #52	; 0x34
   138b6:	f7fa fcbb 	bl	e230 <_Znwj>
   138ba:	4603      	mov	r3, r0
   138bc:	f8c7 316c 	str.w	r3, [r7, #364]
   138c0:	f8d7 316c 	ldr.w	r3, [r7, #364]
   138c4:	2b00      	cmp	r3, #0
   138c6:	d01b      	beq.n	13900 <_ZN9Krabi2015C2Eb+0x1078>
   138c8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   138cc:	681b      	ldr	r3, [r3, #0]
   138ce:	6b5b      	ldr	r3, [r3, #52]
   138d0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
   138d4:	9300      	str	r3, [sp, #0]
   138d6:	f04f 0300 	mov.w	r3, #0	; 0x0
   138da:	9301      	str	r3, [sp, #4]
   138dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   138e0:	9302      	str	r3, [sp, #8]
   138e2:	f04f 0300 	mov.w	r3, #0	; 0x0
   138e6:	9303      	str	r3, [sp, #12]
   138e8:	f8d7 016c 	ldr.w	r0, [r7, #364]
   138ec:	ca06      	ldmia	r2!, {r1, r2}
   138ee:	f8d7 3168 	ldr.w	r3, [r7, #360]
   138f2:	f7fc fca1 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   138f6:	f8d7 316c 	ldr.w	r3, [r7, #364]
   138fa:	f8c7 3170 	str.w	r3, [r7, #368]
   138fe:	e003      	b.n	13908 <_ZN9Krabi2015C2Eb+0x1080>
   13900:	f8d7 316c 	ldr.w	r3, [r7, #364]
   13904:	f8c7 3170 	str.w	r3, [r7, #368]
   13908:	f8d7 3170 	ldr.w	r3, [r7, #368]
   1390c:	f8c7 357c 	str.w	r3, [r7, #1404]
    Etape* etape27 = new Etape(Position(1100, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13910:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
   13914:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13918:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1391c:	781b      	ldrb	r3, [r3, #0]
   1391e:	4610      	mov	r0, r2
   13920:	f8df 1620 	ldr.w	r1, [pc, #1568]	; 13f44 <_ZN9Krabi2015C2Eb+0x16bc>
   13924:	f8df 2620 	ldr.w	r2, [pc, #1568]	; 13f48 <_ZN9Krabi2015C2Eb+0x16c0>
   13928:	f7fa fde8 	bl	e4fc <_ZN8PositionC1Effb>
   1392c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13930:	f8c7 3174 	str.w	r3, [r7, #372]
   13934:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13938:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1393c:	f8c7 3510 	str.w	r3, [r7, #1296]
   13940:	f04f 0034 	mov.w	r0, #52	; 0x34
   13944:	f7fa fc74 	bl	e230 <_Znwj>
   13948:	4603      	mov	r3, r0
   1394a:	f8c7 3178 	str.w	r3, [r7, #376]
   1394e:	f8d7 3178 	ldr.w	r3, [r7, #376]
   13952:	2b00      	cmp	r3, #0
   13954:	d01b      	beq.n	1398e <_ZN9Krabi2015C2Eb+0x1106>
   13956:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1395a:	681b      	ldr	r3, [r3, #0]
   1395c:	6b5b      	ldr	r3, [r3, #52]
   1395e:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
   13962:	9300      	str	r3, [sp, #0]
   13964:	f04f 0300 	mov.w	r3, #0	; 0x0
   13968:	9301      	str	r3, [sp, #4]
   1396a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1396e:	9302      	str	r3, [sp, #8]
   13970:	f04f 0300 	mov.w	r3, #0	; 0x0
   13974:	9303      	str	r3, [sp, #12]
   13976:	f8d7 0178 	ldr.w	r0, [r7, #376]
   1397a:	ca06      	ldmia	r2!, {r1, r2}
   1397c:	f8d7 3174 	ldr.w	r3, [r7, #372]
   13980:	f7fc fc5a 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13984:	f8d7 3178 	ldr.w	r3, [r7, #376]
   13988:	f8c7 317c 	str.w	r3, [r7, #380]
   1398c:	e003      	b.n	13996 <_ZN9Krabi2015C2Eb+0x110e>
   1398e:	f8d7 3178 	ldr.w	r3, [r7, #376]
   13992:	f8c7 317c 	str.w	r3, [r7, #380]
   13996:	f8d7 317c 	ldr.w	r3, [r7, #380]
   1399a:	f8c7 3580 	str.w	r3, [r7, #1408]
    Etape* etape28 = new Etape(Position(560, 1290, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1399e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
   139a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
   139a6:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   139aa:	781b      	ldrb	r3, [r3, #0]
   139ac:	4610      	mov	r0, r2
   139ae:	f8df 159c 	ldr.w	r1, [pc, #1436]	; 13f4c <_ZN9Krabi2015C2Eb+0x16c4>
   139b2:	f8df 259c 	ldr.w	r2, [pc, #1436]	; 13f50 <_ZN9Krabi2015C2Eb+0x16c8>
   139b6:	f7fa fda1 	bl	e4fc <_ZN8PositionC1Effb>
   139ba:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   139be:	f8c7 3180 	str.w	r3, [r7, #384]
   139c2:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   139c6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   139ca:	f8c7 3510 	str.w	r3, [r7, #1296]
   139ce:	f04f 0034 	mov.w	r0, #52	; 0x34
   139d2:	f7fa fc2d 	bl	e230 <_Znwj>
   139d6:	4603      	mov	r3, r0
   139d8:	f8c7 3184 	str.w	r3, [r7, #388]
   139dc:	f8d7 3184 	ldr.w	r3, [r7, #388]
   139e0:	2b00      	cmp	r3, #0
   139e2:	d01b      	beq.n	13a1c <_ZN9Krabi2015C2Eb+0x1194>
   139e4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   139e8:	681b      	ldr	r3, [r3, #0]
   139ea:	6b5b      	ldr	r3, [r3, #52]
   139ec:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
   139f0:	9300      	str	r3, [sp, #0]
   139f2:	f04f 0300 	mov.w	r3, #0	; 0x0
   139f6:	9301      	str	r3, [sp, #4]
   139f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   139fc:	9302      	str	r3, [sp, #8]
   139fe:	f04f 0300 	mov.w	r3, #0	; 0x0
   13a02:	9303      	str	r3, [sp, #12]
   13a04:	f8d7 0184 	ldr.w	r0, [r7, #388]
   13a08:	ca06      	ldmia	r2!, {r1, r2}
   13a0a:	f8d7 3180 	ldr.w	r3, [r7, #384]
   13a0e:	f7fc fc13 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13a12:	f8d7 3184 	ldr.w	r3, [r7, #388]
   13a16:	f8c7 3188 	str.w	r3, [r7, #392]
   13a1a:	e003      	b.n	13a24 <_ZN9Krabi2015C2Eb+0x119c>
   13a1c:	f8d7 3184 	ldr.w	r3, [r7, #388]
   13a20:	f8c7 3188 	str.w	r3, [r7, #392]
   13a24:	f8d7 3188 	ldr.w	r3, [r7, #392]
   13a28:	f8c7 3584 	str.w	r3, [r7, #1412]
    Etape* etape29 = new Etape(Position(720, 1600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13a2c:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
   13a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13a34:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13a38:	781b      	ldrb	r3, [r3, #0]
   13a3a:	4610      	mov	r0, r2
   13a3c:	f8df 1514 	ldr.w	r1, [pc, #1300]	; 13f54 <_ZN9Krabi2015C2Eb+0x16cc>
   13a40:	f8df 2514 	ldr.w	r2, [pc, #1300]	; 13f58 <_ZN9Krabi2015C2Eb+0x16d0>
   13a44:	f7fa fd5a 	bl	e4fc <_ZN8PositionC1Effb>
   13a48:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13a4c:	f8c7 318c 	str.w	r3, [r7, #396]
   13a50:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13a54:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13a58:	f8c7 3510 	str.w	r3, [r7, #1296]
   13a5c:	f04f 0034 	mov.w	r0, #52	; 0x34
   13a60:	f7fa fbe6 	bl	e230 <_Znwj>
   13a64:	4603      	mov	r3, r0
   13a66:	f8c7 3190 	str.w	r3, [r7, #400]
   13a6a:	f8d7 3190 	ldr.w	r3, [r7, #400]
   13a6e:	2b00      	cmp	r3, #0
   13a70:	d01b      	beq.n	13aaa <_ZN9Krabi2015C2Eb+0x1222>
   13a72:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13a76:	681b      	ldr	r3, [r3, #0]
   13a78:	6b5b      	ldr	r3, [r3, #52]
   13a7a:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
   13a7e:	9300      	str	r3, [sp, #0]
   13a80:	f04f 0300 	mov.w	r3, #0	; 0x0
   13a84:	9301      	str	r3, [sp, #4]
   13a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a8a:	9302      	str	r3, [sp, #8]
   13a8c:	f04f 0300 	mov.w	r3, #0	; 0x0
   13a90:	9303      	str	r3, [sp, #12]
   13a92:	f8d7 0190 	ldr.w	r0, [r7, #400]
   13a96:	ca06      	ldmia	r2!, {r1, r2}
   13a98:	f8d7 318c 	ldr.w	r3, [r7, #396]
   13a9c:	f7fc fbcc 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13aa0:	f8d7 3190 	ldr.w	r3, [r7, #400]
   13aa4:	f8c7 3194 	str.w	r3, [r7, #404]
   13aa8:	e003      	b.n	13ab2 <_ZN9Krabi2015C2Eb+0x122a>
   13aaa:	f8d7 3190 	ldr.w	r3, [r7, #400]
   13aae:	f8c7 3194 	str.w	r3, [r7, #404]
   13ab2:	f8d7 3194 	ldr.w	r3, [r7, #404]
   13ab6:	f8c7 3588 	str.w	r3, [r7, #1416]
    Etape* etape30 = new Etape(Position(420, 1600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13aba:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
   13abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13ac2:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13ac6:	781b      	ldrb	r3, [r3, #0]
   13ac8:	4610      	mov	r0, r2
   13aca:	f8df 1490 	ldr.w	r1, [pc, #1168]	; 13f5c <_ZN9Krabi2015C2Eb+0x16d4>
   13ace:	f8df 2488 	ldr.w	r2, [pc, #1160]	; 13f58 <_ZN9Krabi2015C2Eb+0x16d0>
   13ad2:	f7fa fd13 	bl	e4fc <_ZN8PositionC1Effb>
   13ad6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13ada:	f8c7 3198 	str.w	r3, [r7, #408]
   13ade:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13ae2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13ae6:	f8c7 3510 	str.w	r3, [r7, #1296]
   13aea:	f04f 0034 	mov.w	r0, #52	; 0x34
   13aee:	f7fa fb9f 	bl	e230 <_Znwj>
   13af2:	4603      	mov	r3, r0
   13af4:	f8c7 319c 	str.w	r3, [r7, #412]
   13af8:	f8d7 319c 	ldr.w	r3, [r7, #412]
   13afc:	2b00      	cmp	r3, #0
   13afe:	d01b      	beq.n	13b38 <_ZN9Krabi2015C2Eb+0x12b0>
   13b00:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13b04:	681b      	ldr	r3, [r3, #0]
   13b06:	6b5b      	ldr	r3, [r3, #52]
   13b08:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
   13b0c:	9300      	str	r3, [sp, #0]
   13b0e:	f04f 0300 	mov.w	r3, #0	; 0x0
   13b12:	9301      	str	r3, [sp, #4]
   13b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13b18:	9302      	str	r3, [sp, #8]
   13b1a:	f04f 0300 	mov.w	r3, #0	; 0x0
   13b1e:	9303      	str	r3, [sp, #12]
   13b20:	f8d7 019c 	ldr.w	r0, [r7, #412]
   13b24:	ca06      	ldmia	r2!, {r1, r2}
   13b26:	f8d7 3198 	ldr.w	r3, [r7, #408]
   13b2a:	f7fc fb85 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13b2e:	f8d7 319c 	ldr.w	r3, [r7, #412]
   13b32:	f8c7 31a0 	str.w	r3, [r7, #416]
   13b36:	e003      	b.n	13b40 <_ZN9Krabi2015C2Eb+0x12b8>
   13b38:	f8d7 319c 	ldr.w	r3, [r7, #412]
   13b3c:	f8c7 31a0 	str.w	r3, [r7, #416]
   13b40:	f8d7 31a0 	ldr.w	r3, [r7, #416]
   13b44:	f8c7 358c 	str.w	r3, [r7, #1420]
    Etape* etape31 = new Etape(Position(300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13b48:	f507 7240 	add.w	r2, r7, #768	; 0x300
   13b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13b50:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13b54:	781b      	ldrb	r3, [r3, #0]
   13b56:	4610      	mov	r0, r2
   13b58:	f8df 1404 	ldr.w	r1, [pc, #1028]	; 13f60 <_ZN9Krabi2015C2Eb+0x16d8>
   13b5c:	4af5      	ldr	r2, [pc, #980]	(13f34 <_ZN9Krabi2015C2Eb+0x16ac>)
   13b5e:	f7fa fccd 	bl	e4fc <_ZN8PositionC1Effb>
   13b62:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13b66:	f8c7 31a4 	str.w	r3, [r7, #420]
   13b6a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13b6e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13b72:	f8c7 3510 	str.w	r3, [r7, #1296]
   13b76:	f04f 0034 	mov.w	r0, #52	; 0x34
   13b7a:	f7fa fb59 	bl	e230 <_Znwj>
   13b7e:	4603      	mov	r3, r0
   13b80:	f8c7 31a8 	str.w	r3, [r7, #424]
   13b84:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   13b88:	2b00      	cmp	r3, #0
   13b8a:	d01b      	beq.n	13bc4 <_ZN9Krabi2015C2Eb+0x133c>
   13b8c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13b90:	681b      	ldr	r3, [r3, #0]
   13b92:	6b5b      	ldr	r3, [r3, #52]
   13b94:	f507 7240 	add.w	r2, r7, #768	; 0x300
   13b98:	9300      	str	r3, [sp, #0]
   13b9a:	f04f 0300 	mov.w	r3, #0	; 0x0
   13b9e:	9301      	str	r3, [sp, #4]
   13ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13ba4:	9302      	str	r3, [sp, #8]
   13ba6:	f04f 0300 	mov.w	r3, #0	; 0x0
   13baa:	9303      	str	r3, [sp, #12]
   13bac:	f8d7 01a8 	ldr.w	r0, [r7, #424]
   13bb0:	ca06      	ldmia	r2!, {r1, r2}
   13bb2:	f8d7 31a4 	ldr.w	r3, [r7, #420]
   13bb6:	f7fc fb3f 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13bba:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   13bbe:	f8c7 31ac 	str.w	r3, [r7, #428]
   13bc2:	e003      	b.n	13bcc <_ZN9Krabi2015C2Eb+0x1344>
   13bc4:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   13bc8:	f8c7 31ac 	str.w	r3, [r7, #428]
   13bcc:	f8d7 31ac 	ldr.w	r3, [r7, #428]
   13bd0:	f8c7 3590 	str.w	r3, [r7, #1424]
    Etape* etape32 = new Etape(Position(400, 430, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13bd4:	f507 7242 	add.w	r2, r7, #776	; 0x308
   13bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13bdc:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13be0:	781b      	ldrb	r3, [r3, #0]
   13be2:	4610      	mov	r0, r2
   13be4:	49df      	ldr	r1, [pc, #892]	(13f64 <_ZN9Krabi2015C2Eb+0x16dc>)
   13be6:	4ae0      	ldr	r2, [pc, #896]	(13f68 <_ZN9Krabi2015C2Eb+0x16e0>)
   13be8:	f7fa fc88 	bl	e4fc <_ZN8PositionC1Effb>
   13bec:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13bf0:	f8c7 31b0 	str.w	r3, [r7, #432]
   13bf4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13bf8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13bfc:	f8c7 3510 	str.w	r3, [r7, #1296]
   13c00:	f04f 0034 	mov.w	r0, #52	; 0x34
   13c04:	f7fa fb14 	bl	e230 <_Znwj>
   13c08:	4603      	mov	r3, r0
   13c0a:	f8c7 31b4 	str.w	r3, [r7, #436]
   13c0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   13c12:	2b00      	cmp	r3, #0
   13c14:	d01b      	beq.n	13c4e <_ZN9Krabi2015C2Eb+0x13c6>
   13c16:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13c1a:	681b      	ldr	r3, [r3, #0]
   13c1c:	6b5b      	ldr	r3, [r3, #52]
   13c1e:	f507 7242 	add.w	r2, r7, #776	; 0x308
   13c22:	9300      	str	r3, [sp, #0]
   13c24:	f04f 0300 	mov.w	r3, #0	; 0x0
   13c28:	9301      	str	r3, [sp, #4]
   13c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c2e:	9302      	str	r3, [sp, #8]
   13c30:	f04f 0300 	mov.w	r3, #0	; 0x0
   13c34:	9303      	str	r3, [sp, #12]
   13c36:	f8d7 01b4 	ldr.w	r0, [r7, #436]
   13c3a:	ca06      	ldmia	r2!, {r1, r2}
   13c3c:	f8d7 31b0 	ldr.w	r3, [r7, #432]
   13c40:	f7fc fafa 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13c44:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   13c48:	f8c7 31b8 	str.w	r3, [r7, #440]
   13c4c:	e003      	b.n	13c56 <_ZN9Krabi2015C2Eb+0x13ce>
   13c4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   13c52:	f8c7 31b8 	str.w	r3, [r7, #440]
   13c56:	f8d7 31b8 	ldr.w	r3, [r7, #440]
   13c5a:	f8c7 3594 	str.w	r3, [r7, #1428]
    Etape* etape33 = new Etape(Position(1110, 1130, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13c5e:	f507 7244 	add.w	r2, r7, #784	; 0x310
   13c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13c66:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13c6a:	781b      	ldrb	r3, [r3, #0]
   13c6c:	4610      	mov	r0, r2
   13c6e:	49bf      	ldr	r1, [pc, #764]	(13f6c <_ZN9Krabi2015C2Eb+0x16e4>)
   13c70:	4abf      	ldr	r2, [pc, #764]	(13f70 <_ZN9Krabi2015C2Eb+0x16e8>)
   13c72:	f7fa fc43 	bl	e4fc <_ZN8PositionC1Effb>
   13c76:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13c7a:	f8c7 31bc 	str.w	r3, [r7, #444]
   13c7e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13c82:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13c86:	f8c7 3510 	str.w	r3, [r7, #1296]
   13c8a:	f04f 0034 	mov.w	r0, #52	; 0x34
   13c8e:	f7fa facf 	bl	e230 <_Znwj>
   13c92:	4603      	mov	r3, r0
   13c94:	f8c7 31c0 	str.w	r3, [r7, #448]
   13c98:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   13c9c:	2b00      	cmp	r3, #0
   13c9e:	d01b      	beq.n	13cd8 <_ZN9Krabi2015C2Eb+0x1450>
   13ca0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13ca4:	681b      	ldr	r3, [r3, #0]
   13ca6:	6b5b      	ldr	r3, [r3, #52]
   13ca8:	f507 7244 	add.w	r2, r7, #784	; 0x310
   13cac:	9300      	str	r3, [sp, #0]
   13cae:	f04f 0300 	mov.w	r3, #0	; 0x0
   13cb2:	9301      	str	r3, [sp, #4]
   13cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13cb8:	9302      	str	r3, [sp, #8]
   13cba:	f04f 0300 	mov.w	r3, #0	; 0x0
   13cbe:	9303      	str	r3, [sp, #12]
   13cc0:	f8d7 01c0 	ldr.w	r0, [r7, #448]
   13cc4:	ca06      	ldmia	r2!, {r1, r2}
   13cc6:	f8d7 31bc 	ldr.w	r3, [r7, #444]
   13cca:	f7fc fab5 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13cce:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   13cd2:	f8c7 31c4 	str.w	r3, [r7, #452]
   13cd6:	e003      	b.n	13ce0 <_ZN9Krabi2015C2Eb+0x1458>
   13cd8:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   13cdc:	f8c7 31c4 	str.w	r3, [r7, #452]
   13ce0:	f8d7 31c4 	ldr.w	r3, [r7, #452]
   13ce4:	f8c7 3598 	str.w	r3, [r7, #1432]
    Etape* etape34 = new Etape(Position(1480, 1150, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13ce8:	f507 7246 	add.w	r2, r7, #792	; 0x318
   13cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13cf0:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13cf4:	781b      	ldrb	r3, [r3, #0]
   13cf6:	4610      	mov	r0, r2
   13cf8:	499e      	ldr	r1, [pc, #632]	(13f74 <_ZN9Krabi2015C2Eb+0x16ec>)
   13cfa:	4a9f      	ldr	r2, [pc, #636]	(13f78 <_ZN9Krabi2015C2Eb+0x16f0>)
   13cfc:	f7fa fbfe 	bl	e4fc <_ZN8PositionC1Effb>
   13d00:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13d04:	f8c7 31c8 	str.w	r3, [r7, #456]
   13d08:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13d0c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13d10:	f8c7 3510 	str.w	r3, [r7, #1296]
   13d14:	f04f 0034 	mov.w	r0, #52	; 0x34
   13d18:	f7fa fa8a 	bl	e230 <_Znwj>
   13d1c:	4603      	mov	r3, r0
   13d1e:	f8c7 31cc 	str.w	r3, [r7, #460]
   13d22:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   13d26:	2b00      	cmp	r3, #0
   13d28:	d01b      	beq.n	13d62 <_ZN9Krabi2015C2Eb+0x14da>
   13d2a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13d2e:	681b      	ldr	r3, [r3, #0]
   13d30:	6b5b      	ldr	r3, [r3, #52]
   13d32:	f507 7246 	add.w	r2, r7, #792	; 0x318
   13d36:	9300      	str	r3, [sp, #0]
   13d38:	f04f 0300 	mov.w	r3, #0	; 0x0
   13d3c:	9301      	str	r3, [sp, #4]
   13d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13d42:	9302      	str	r3, [sp, #8]
   13d44:	f04f 0300 	mov.w	r3, #0	; 0x0
   13d48:	9303      	str	r3, [sp, #12]
   13d4a:	f8d7 01cc 	ldr.w	r0, [r7, #460]
   13d4e:	ca06      	ldmia	r2!, {r1, r2}
   13d50:	f8d7 31c8 	ldr.w	r3, [r7, #456]
   13d54:	f7fc fa70 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13d58:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   13d5c:	f8c7 31d0 	str.w	r3, [r7, #464]
   13d60:	e003      	b.n	13d6a <_ZN9Krabi2015C2Eb+0x14e2>
   13d62:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   13d66:	f8c7 31d0 	str.w	r3, [r7, #464]
   13d6a:	f8d7 31d0 	ldr.w	r3, [r7, #464]
   13d6e:	f8c7 359c 	str.w	r3, [r7, #1436]
    Etape* etape35 = new Etape(Position(1850, 1160, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13d72:	f507 7248 	add.w	r2, r7, #800	; 0x320
   13d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13d7a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13d7e:	781b      	ldrb	r3, [r3, #0]
   13d80:	4610      	mov	r0, r2
   13d82:	497e      	ldr	r1, [pc, #504]	(13f7c <_ZN9Krabi2015C2Eb+0x16f4>)
   13d84:	4a7e      	ldr	r2, [pc, #504]	(13f80 <_ZN9Krabi2015C2Eb+0x16f8>)
   13d86:	f7fa fbb9 	bl	e4fc <_ZN8PositionC1Effb>
   13d8a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13d8e:	f8c7 31d4 	str.w	r3, [r7, #468]
   13d92:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13d96:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13d9a:	f8c7 3510 	str.w	r3, [r7, #1296]
   13d9e:	f04f 0034 	mov.w	r0, #52	; 0x34
   13da2:	f7fa fa45 	bl	e230 <_Znwj>
   13da6:	4603      	mov	r3, r0
   13da8:	f8c7 31d8 	str.w	r3, [r7, #472]
   13dac:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   13db0:	2b00      	cmp	r3, #0
   13db2:	d01b      	beq.n	13dec <_ZN9Krabi2015C2Eb+0x1564>
   13db4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13db8:	681b      	ldr	r3, [r3, #0]
   13dba:	6b5b      	ldr	r3, [r3, #52]
   13dbc:	f507 7248 	add.w	r2, r7, #800	; 0x320
   13dc0:	9300      	str	r3, [sp, #0]
   13dc2:	f04f 0300 	mov.w	r3, #0	; 0x0
   13dc6:	9301      	str	r3, [sp, #4]
   13dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13dcc:	9302      	str	r3, [sp, #8]
   13dce:	f04f 0300 	mov.w	r3, #0	; 0x0
   13dd2:	9303      	str	r3, [sp, #12]
   13dd4:	f8d7 01d8 	ldr.w	r0, [r7, #472]
   13dd8:	ca06      	ldmia	r2!, {r1, r2}
   13dda:	f8d7 31d4 	ldr.w	r3, [r7, #468]
   13dde:	f7fc fa2b 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13de2:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   13de6:	f8c7 31dc 	str.w	r3, [r7, #476]
   13dea:	e003      	b.n	13df4 <_ZN9Krabi2015C2Eb+0x156c>
   13dec:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   13df0:	f8c7 31dc 	str.w	r3, [r7, #476]
   13df4:	f8d7 31dc 	ldr.w	r3, [r7, #476]
   13df8:	f8c7 35a0 	str.w	r3, [r7, #1440]
    Etape* etape36 = new Etape(Position(1950, 1530, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13dfc:	f507 724a 	add.w	r2, r7, #808	; 0x328
   13e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13e04:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13e08:	781b      	ldrb	r3, [r3, #0]
   13e0a:	4610      	mov	r0, r2
   13e0c:	495d      	ldr	r1, [pc, #372]	(13f84 <_ZN9Krabi2015C2Eb+0x16fc>)
   13e0e:	4a5e      	ldr	r2, [pc, #376]	(13f88 <_ZN9Krabi2015C2Eb+0x1700>)
   13e10:	f7fa fb74 	bl	e4fc <_ZN8PositionC1Effb>
   13e14:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13e18:	f8c7 31e0 	str.w	r3, [r7, #480]
   13e1c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13e20:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13e24:	f8c7 3510 	str.w	r3, [r7, #1296]
   13e28:	f04f 0034 	mov.w	r0, #52	; 0x34
   13e2c:	f7fa fa00 	bl	e230 <_Znwj>
   13e30:	4603      	mov	r3, r0
   13e32:	f8c7 31e4 	str.w	r3, [r7, #484]
   13e36:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   13e3a:	2b00      	cmp	r3, #0
   13e3c:	d01b      	beq.n	13e76 <_ZN9Krabi2015C2Eb+0x15ee>
   13e3e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13e42:	681b      	ldr	r3, [r3, #0]
   13e44:	6b5b      	ldr	r3, [r3, #52]
   13e46:	f507 724a 	add.w	r2, r7, #808	; 0x328
   13e4a:	9300      	str	r3, [sp, #0]
   13e4c:	f04f 0300 	mov.w	r3, #0	; 0x0
   13e50:	9301      	str	r3, [sp, #4]
   13e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13e56:	9302      	str	r3, [sp, #8]
   13e58:	f04f 0300 	mov.w	r3, #0	; 0x0
   13e5c:	9303      	str	r3, [sp, #12]
   13e5e:	f8d7 01e4 	ldr.w	r0, [r7, #484]
   13e62:	ca06      	ldmia	r2!, {r1, r2}
   13e64:	f8d7 31e0 	ldr.w	r3, [r7, #480]
   13e68:	f7fc f9e6 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13e6c:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   13e70:	f8c7 31e8 	str.w	r3, [r7, #488]
   13e74:	e003      	b.n	13e7e <_ZN9Krabi2015C2Eb+0x15f6>
   13e76:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   13e7a:	f8c7 31e8 	str.w	r3, [r7, #488]
   13e7e:	f8d7 31e8 	ldr.w	r3, [r7, #488]
   13e82:	f8c7 35a4 	str.w	r3, [r7, #1444]
    Etape* etape37 = new Etape(Position(1890, 1365, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13e86:	f507 724c 	add.w	r2, r7, #816	; 0x330
   13e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13e8e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13e92:	781b      	ldrb	r3, [r3, #0]
   13e94:	4610      	mov	r0, r2
   13e96:	493d      	ldr	r1, [pc, #244]	(13f8c <_ZN9Krabi2015C2Eb+0x1704>)
   13e98:	4a3d      	ldr	r2, [pc, #244]	(13f90 <_ZN9Krabi2015C2Eb+0x1708>)
   13e9a:	f7fa fb2f 	bl	e4fc <_ZN8PositionC1Effb>
   13e9e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13ea2:	f8c7 31ec 	str.w	r3, [r7, #492]
   13ea6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13eaa:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13eae:	f8c7 3510 	str.w	r3, [r7, #1296]
   13eb2:	f04f 0034 	mov.w	r0, #52	; 0x34
   13eb6:	f7fa f9bb 	bl	e230 <_Znwj>
   13eba:	4603      	mov	r3, r0
   13ebc:	f8c7 31f0 	str.w	r3, [r7, #496]
   13ec0:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   13ec4:	2b00      	cmp	r3, #0
   13ec6:	d01b      	beq.n	13f00 <_ZN9Krabi2015C2Eb+0x1678>
   13ec8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13ecc:	681b      	ldr	r3, [r3, #0]
   13ece:	6b5b      	ldr	r3, [r3, #52]
   13ed0:	f507 724c 	add.w	r2, r7, #816	; 0x330
   13ed4:	9300      	str	r3, [sp, #0]
   13ed6:	f04f 0300 	mov.w	r3, #0	; 0x0
   13eda:	9301      	str	r3, [sp, #4]
   13edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13ee0:	9302      	str	r3, [sp, #8]
   13ee2:	f04f 0300 	mov.w	r3, #0	; 0x0
   13ee6:	9303      	str	r3, [sp, #12]
   13ee8:	f8d7 01f0 	ldr.w	r0, [r7, #496]
   13eec:	ca06      	ldmia	r2!, {r1, r2}
   13eee:	f8d7 31ec 	ldr.w	r3, [r7, #492]
   13ef2:	f7fc f9a1 	bl	10238 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13ef6:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   13efa:	f8c7 31f4 	str.w	r3, [r7, #500]
   13efe:	e003      	b.n	13f08 <_ZN9Krabi2015C2Eb+0x1680>
   13f00:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   13f04:	f8c7 31f4 	str.w	r3, [r7, #500]
   13f08:	f8d7 31f4 	ldr.w	r3, [r7, #500]
   13f0c:	f8c7 35a8 	str.w	r3, [r7, #1448]
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h



    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   13f10:	f04f 0300 	mov.w	r3, #0	; 0x0
   13f14:	f8c7 35ac 	str.w	r3, [r7, #1452]
   13f18:	e0a6      	b.n	14068 <_ZN9Krabi2015C2Eb+0x17e0>
   13f1a:	46c0      	nop			(mov r8, r8)
   13f1c:	449c4000 	.word	0x449c4000
   13f20:	44e10000 	.word	0x44e10000
   13f24:	44dac000 	.word	0x44dac000
   13f28:	4499c000 	.word	0x4499c000
   13f2c:	443e0000 	.word	0x443e0000
   13f30:	450fc000 	.word	0x450fc000
   13f34:	44bb8000 	.word	0x44bb8000
   13f38:	45296000 	.word	0x45296000
   13f3c:	45246000 	.word	0x45246000
   13f40:	43e60000 	.word	0x43e60000
   13f44:	44898000 	.word	0x44898000
   13f48:	44ce4000 	.word	0x44ce4000
   13f4c:	440c0000 	.word	0x440c0000
   13f50:	44a14000 	.word	0x44a14000
   13f54:	44340000 	.word	0x44340000
   13f58:	44c80000 	.word	0x44c80000
   13f5c:	43d20000 	.word	0x43d20000
   13f60:	43960000 	.word	0x43960000
   13f64:	43c80000 	.word	0x43c80000
   13f68:	43d70000 	.word	0x43d70000
   13f6c:	448ac000 	.word	0x448ac000
   13f70:	448d4000 	.word	0x448d4000
   13f74:	44b90000 	.word	0x44b90000
   13f78:	448fc000 	.word	0x448fc000
   13f7c:	44e74000 	.word	0x44e74000
   13f80:	44910000 	.word	0x44910000
   13f84:	44f3c000 	.word	0x44f3c000
   13f88:	44bf4000 	.word	0x44bf4000
   13f8c:	44ec4000 	.word	0x44ec4000
   13f90:	44aaa000 	.word	0x44aaa000
    {
        if (tableauEtapesTotal[i]->getState() == -1)
   13f94:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13f98:	681b      	ldr	r3, [r3, #0]
   13f9a:	6b5a      	ldr	r2, [r3, #52]
   13f9c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   13fa0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   13fa4:	4413      	add	r3, r2
   13fa6:	681b      	ldr	r3, [r3, #0]
   13fa8:	4618      	mov	r0, r3
   13faa:	f7fb ff29 	bl	fe00 <_ZN5Etape8getStateEv>
   13fae:	4603      	mov	r3, r0
   13fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   13fb4:	bf14      	ite	ne
   13fb6:	2300      	movne	r3, #0
   13fb8:	2301      	moveq	r3, #1
   13fba:	b2db      	uxtb	r3, r3
   13fbc:	2b00      	cmp	r3, #0
   13fbe:	d04d      	beq.n	1405c <_ZN9Krabi2015C2Eb+0x17d4>
        {
            actionGoto[i] = ActionGoTo(tableauEtapesTotal[i]->getPosition());
   13fc0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13fc4:	681b      	ldr	r3, [r3, #0]
   13fc6:	6a99      	ldr	r1, [r3, #40]
   13fc8:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   13fcc:	ea4f 1203 	mov.w	r2, r3, lsl #4
   13fd0:	ea4f 0382 	mov.w	r3, r2, lsl #2
   13fd4:	ebc2 0303 	rsb	r3, r2, r3
   13fd8:	eb01 0403 	add.w	r4, r1, r3
   13fdc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13fe0:	681b      	ldr	r3, [r3, #0]
   13fe2:	6b5a      	ldr	r2, [r3, #52]
   13fe4:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   13fe8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   13fec:	4413      	add	r3, r2
   13fee:	681a      	ldr	r2, [r3, #0]
   13ff0:	f507 735a 	add.w	r3, r7, #872	; 0x368
   13ff4:	4618      	mov	r0, r3
   13ff6:	4611      	mov	r1, r2
   13ff8:	f7fb feee 	bl	fdd8 <_ZN5Etape11getPositionEv>
   13ffc:	f507 714e 	add.w	r1, r7, #824	; 0x338
   14000:	f507 725a 	add.w	r2, r7, #872	; 0x368
   14004:	f8df 3924 	ldr.w	r3, [pc, #2340]	; 1492c <_ZN9Krabi2015C2Eb+0x20a4>
   14008:	9300      	str	r3, [sp, #0]
   1400a:	4608      	mov	r0, r1
   1400c:	ca06      	ldmia	r2!, {r1, r2}
   1400e:	f04f 0300 	mov.w	r3, #0	; 0x0
   14012:	f7fa ff99 	bl	ef48 <_ZN10ActionGoToC1E8Positionbf>
   14016:	f507 734e 	add.w	r3, r7, #824	; 0x338
   1401a:	4620      	mov	r0, r4
   1401c:	4619      	mov	r1, r3
   1401e:	f008 fd17 	bl	1ca50 <_ZN10ActionGoToaSERKS_>
   14022:	f507 734e 	add.w	r3, r7, #824	; 0x338
   14026:	4618      	mov	r0, r3
   14028:	f7fa ff56 	bl	eed8 <_ZN10ActionGoToD1Ev>
            actionEtape[i] = &actionGoto[i];
   1402c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14030:	681b      	ldr	r3, [r3, #0]
   14032:	6a5a      	ldr	r2, [r3, #36]
   14034:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   14038:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1403c:	eb02 0003 	add.w	r0, r2, r3
   14040:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14044:	681b      	ldr	r3, [r3, #0]
   14046:	6a99      	ldr	r1, [r3, #40]
   14048:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   1404c:	ea4f 1203 	mov.w	r2, r3, lsl #4
   14050:	ea4f 0382 	mov.w	r3, r2, lsl #2
   14054:	ebc2 0303 	rsb	r3, r2, r3
   14058:	440b      	add	r3, r1
   1405a:	6003      	str	r3, [r0, #0]
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h



    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   1405c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   14060:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14064:	f8c7 35ac 	str.w	r3, [r7, #1452]
   14068:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   1406c:	2b25      	cmp	r3, #37
   1406e:	dd91      	ble.n	13f94 <_ZN9Krabi2015C2Eb+0x170c>
            actionEtape[i] = &actionGoto[i];
        }

    }

    actionClap[0]= Clap(Position(836, 1780, isYellow),Position(1000, 1780, isYellow));
   14070:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14074:	681b      	ldr	r3, [r3, #0]
   14076:	f103 0448 	add.w	r4, r3, #72	; 0x48
   1407a:	f507 7266 	add.w	r2, r7, #920	; 0x398
   1407e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14082:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14086:	781b      	ldrb	r3, [r3, #0]
   14088:	4610      	mov	r0, r2
   1408a:	f8df 18a4 	ldr.w	r1, [pc, #2212]	; 14930 <_ZN9Krabi2015C2Eb+0x20a8>
   1408e:	f8df 28a4 	ldr.w	r2, [pc, #2212]	; 14934 <_ZN9Krabi2015C2Eb+0x20ac>
   14092:	f7fa fa33 	bl	e4fc <_ZN8PositionC1Effb>
   14096:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
   1409a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1409e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   140a2:	781b      	ldrb	r3, [r3, #0]
   140a4:	4610      	mov	r0, r2
   140a6:	f8df 1890 	ldr.w	r1, [pc, #2192]	; 14938 <_ZN9Krabi2015C2Eb+0x20b0>
   140aa:	f8df 2888 	ldr.w	r2, [pc, #2184]	; 14934 <_ZN9Krabi2015C2Eb+0x20ac>
   140ae:	f7fa fa25 	bl	e4fc <_ZN8PositionC1Effb>
   140b2:	f507 705c 	add.w	r0, r7, #880	; 0x370
   140b6:	f507 7166 	add.w	r1, r7, #920	; 0x398
   140ba:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
   140be:	6853      	ldr	r3, [r2, #4]
   140c0:	9300      	str	r3, [sp, #0]
   140c2:	6813      	ldr	r3, [r2, #0]
   140c4:	c906      	ldmia	r1!, {r1, r2}
   140c6:	f7fb f927 	bl	f318 <_ZN4ClapC1E8PositionS0_>
   140ca:	f507 735c 	add.w	r3, r7, #880	; 0x370
   140ce:	4620      	mov	r0, r4
   140d0:	4619      	mov	r1, r3
   140d2:	f008 fce9 	bl	1caa8 <_ZN4ClapaSERKS_>
   140d6:	f507 735c 	add.w	r3, r7, #880	; 0x370
   140da:	4618      	mov	r0, r3
   140dc:	f7fb f8e4 	bl	f2a8 <_ZN4ClapD1Ev>
    actionEtape[2]= &actionClap[0];
   140e0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   140e4:	681b      	ldr	r3, [r3, #0]
   140e6:	6a5b      	ldr	r3, [r3, #36]
   140e8:	f103 0208 	add.w	r2, r3, #8	; 0x8
   140ec:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   140f0:	681b      	ldr	r3, [r3, #0]
   140f2:	f103 0348 	add.w	r3, r3, #72	; 0x48
   140f6:	6013      	str	r3, [r2, #0]
    actionClap[1] = Clap(Position(236, 1780, isYellow),Position(400, 1780, isYellow));
   140f8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   140fc:	681b      	ldr	r3, [r3, #0]
   140fe:	f103 0470 	add.w	r4, r3, #112	; 0x70
   14102:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
   14106:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1410a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1410e:	781b      	ldrb	r3, [r3, #0]
   14110:	4610      	mov	r0, r2
   14112:	f8df 1828 	ldr.w	r1, [pc, #2088]	; 1493c <_ZN9Krabi2015C2Eb+0x20b4>
   14116:	f8df 281c 	ldr.w	r2, [pc, #2076]	; 14934 <_ZN9Krabi2015C2Eb+0x20ac>
   1411a:	f7fa f9ef 	bl	e4fc <_ZN8PositionC1Effb>
   1411e:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
   14122:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14126:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1412a:	781b      	ldrb	r3, [r3, #0]
   1412c:	4610      	mov	r0, r2
   1412e:	f8df 1810 	ldr.w	r1, [pc, #2064]	; 14940 <_ZN9Krabi2015C2Eb+0x20b8>
   14132:	f8df 2800 	ldr.w	r2, [pc, #2048]	; 14934 <_ZN9Krabi2015C2Eb+0x20ac>
   14136:	f7fa f9e1 	bl	e4fc <_ZN8PositionC1Effb>
   1413a:	f507 706a 	add.w	r0, r7, #936	; 0x3a8
   1413e:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
   14142:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
   14146:	6853      	ldr	r3, [r2, #4]
   14148:	9300      	str	r3, [sp, #0]
   1414a:	6813      	ldr	r3, [r2, #0]
   1414c:	c906      	ldmia	r1!, {r1, r2}
   1414e:	f7fb f8e3 	bl	f318 <_ZN4ClapC1E8PositionS0_>
   14152:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
   14156:	4620      	mov	r0, r4
   14158:	4619      	mov	r1, r3
   1415a:	f008 fca5 	bl	1caa8 <_ZN4ClapaSERKS_>
   1415e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
   14162:	4618      	mov	r0, r3
   14164:	f7fb f8a0 	bl	f2a8 <_ZN4ClapD1Ev>
    actionEtape[4] = &actionClap[1];
   14168:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1416c:	681b      	ldr	r3, [r3, #0]
   1416e:	6a5b      	ldr	r3, [r3, #36]
   14170:	f103 0210 	add.w	r2, r3, #16	; 0x10
   14174:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14178:	681b      	ldr	r3, [r3, #0]
   1417a:	f103 0370 	add.w	r3, r3, #112	; 0x70
   1417e:	6013      	str	r3, [r2, #0]
    actionClap[2] = Clap(Position(2500, 1780, isYellow),Position(2300, 1780, isYellow));
   14180:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14184:	681b      	ldr	r3, [r3, #0]
   14186:	f103 0498 	add.w	r4, r3, #152	; 0x98
   1418a:	f507 6281 	add.w	r2, r7, #1032	; 0x408
   1418e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14192:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14196:	781b      	ldrb	r3, [r3, #0]
   14198:	4610      	mov	r0, r2
   1419a:	f8df 17a8 	ldr.w	r1, [pc, #1960]	; 14944 <_ZN9Krabi2015C2Eb+0x20bc>
   1419e:	f8df 2794 	ldr.w	r2, [pc, #1940]	; 14934 <_ZN9Krabi2015C2Eb+0x20ac>
   141a2:	f7fa f9ab 	bl	e4fc <_ZN8PositionC1Effb>
   141a6:	f507 6282 	add.w	r2, r7, #1040	; 0x410
   141aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
   141ae:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   141b2:	781b      	ldrb	r3, [r3, #0]
   141b4:	4610      	mov	r0, r2
   141b6:	f8df 1790 	ldr.w	r1, [pc, #1936]	; 14948 <_ZN9Krabi2015C2Eb+0x20c0>
   141ba:	f8df 2778 	ldr.w	r2, [pc, #1912]	; 14934 <_ZN9Krabi2015C2Eb+0x20ac>
   141be:	f7fa f99d 	bl	e4fc <_ZN8PositionC1Effb>
   141c2:	f507 7078 	add.w	r0, r7, #992	; 0x3e0
   141c6:	f507 6181 	add.w	r1, r7, #1032	; 0x408
   141ca:	f507 6282 	add.w	r2, r7, #1040	; 0x410
   141ce:	6853      	ldr	r3, [r2, #4]
   141d0:	9300      	str	r3, [sp, #0]
   141d2:	6813      	ldr	r3, [r2, #0]
   141d4:	c906      	ldmia	r1!, {r1, r2}
   141d6:	f7fb f89f 	bl	f318 <_ZN4ClapC1E8PositionS0_>
   141da:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
   141de:	4620      	mov	r0, r4
   141e0:	4619      	mov	r1, r3
   141e2:	f008 fc61 	bl	1caa8 <_ZN4ClapaSERKS_>
   141e6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
   141ea:	4618      	mov	r0, r3
   141ec:	f7fb f85c 	bl	f2a8 <_ZN4ClapD1Ev>
    actionEtape[6] = &actionClap[2];
   141f0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   141f4:	681b      	ldr	r3, [r3, #0]
   141f6:	6a5b      	ldr	r3, [r3, #36]
   141f8:	f103 0218 	add.w	r2, r3, #24	; 0x18
   141fc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14200:	681b      	ldr	r3, [r3, #0]
   14202:	f103 0398 	add.w	r3, r3, #152	; 0x98
   14206:	6013      	str	r3, [r2, #0]
    actionGobelet[0] = Gobelet(Position(250, 1750, isYellow));
   14208:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1420c:	681b      	ldr	r3, [r3, #0]
   1420e:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
   14212:	f507 6287 	add.w	r2, r7, #1080	; 0x438
   14216:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1421a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1421e:	781b      	ldrb	r3, [r3, #0]
   14220:	4610      	mov	r0, r2
   14222:	f8df 1728 	ldr.w	r1, [pc, #1832]	; 1494c <_ZN9Krabi2015C2Eb+0x20c4>
   14226:	f8df 2728 	ldr.w	r2, [pc, #1832]	; 14950 <_ZN9Krabi2015C2Eb+0x20c8>
   1422a:	f7fa f967 	bl	e4fc <_ZN8PositionC1Effb>
   1422e:	f507 6283 	add.w	r2, r7, #1048	; 0x418
   14232:	f507 6387 	add.w	r3, r7, #1080	; 0x438
   14236:	4610      	mov	r0, r2
   14238:	e893 0006 	ldmia.w	r3, {r1, r2}
   1423c:	f7fc f980 	bl	10540 <_ZN7GobeletC1E8Position>
   14240:	f507 6383 	add.w	r3, r7, #1048	; 0x418
   14244:	4620      	mov	r0, r4
   14246:	4619      	mov	r1, r3
   14248:	f008 fc56 	bl	1caf8 <_ZN7GobeletaSERKS_>
   1424c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
   14250:	4618      	mov	r0, r3
   14252:	f7fc f93d 	bl	104d0 <_ZN7GobeletD1Ev>
    actionEtape[8] = &actionGobelet[0];
   14256:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1425a:	681b      	ldr	r3, [r3, #0]
   1425c:	6a5b      	ldr	r3, [r3, #36]
   1425e:	f103 0220 	add.w	r2, r3, #32	; 0x20
   14262:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14266:	681b      	ldr	r3, [r3, #0]
   14268:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1426c:	6013      	str	r3, [r2, #0]
    actionGobelet[1] = Gobelet(Position(910, 830, isYellow));
   1426e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14272:	681b      	ldr	r3, [r3, #0]
   14274:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
   14278:	f507 628c 	add.w	r2, r7, #1120	; 0x460
   1427c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14280:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14284:	781b      	ldrb	r3, [r3, #0]
   14286:	4610      	mov	r0, r2
   14288:	f8df 16c8 	ldr.w	r1, [pc, #1736]	; 14954 <_ZN9Krabi2015C2Eb+0x20cc>
   1428c:	f8df 26c8 	ldr.w	r2, [pc, #1736]	; 14958 <_ZN9Krabi2015C2Eb+0x20d0>
   14290:	f7fa f934 	bl	e4fc <_ZN8PositionC1Effb>
   14294:	f507 6288 	add.w	r2, r7, #1088	; 0x440
   14298:	f507 638c 	add.w	r3, r7, #1120	; 0x460
   1429c:	4610      	mov	r0, r2
   1429e:	e893 0006 	ldmia.w	r3, {r1, r2}
   142a2:	f7fc f94d 	bl	10540 <_ZN7GobeletC1E8Position>
   142a6:	f507 6388 	add.w	r3, r7, #1088	; 0x440
   142aa:	4620      	mov	r0, r4
   142ac:	4619      	mov	r1, r3
   142ae:	f008 fc23 	bl	1caf8 <_ZN7GobeletaSERKS_>
   142b2:	f507 6388 	add.w	r3, r7, #1088	; 0x440
   142b6:	4618      	mov	r0, r3
   142b8:	f7fc f90a 	bl	104d0 <_ZN7GobeletD1Ev>
    actionEtape[9] = &actionGobelet[1];
   142bc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   142c0:	681b      	ldr	r3, [r3, #0]
   142c2:	6a5b      	ldr	r3, [r3, #36]
   142c4:	f103 0224 	add.w	r2, r3, #36	; 0x24
   142c8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   142cc:	681b      	ldr	r3, [r3, #0]
   142ce:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
   142d2:	6013      	str	r3, [r2, #0]
    actionGobelet[2] = Gobelet(Position(1500, 1650, isYellow));
   142d4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   142d8:	681b      	ldr	r3, [r3, #0]
   142da:	f503 7480 	add.w	r4, r3, #256	; 0x100
   142de:	f507 6291 	add.w	r2, r7, #1160	; 0x488
   142e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
   142e6:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   142ea:	781b      	ldrb	r3, [r3, #0]
   142ec:	4610      	mov	r0, r2
   142ee:	f8df 166c 	ldr.w	r1, [pc, #1644]	; 1495c <_ZN9Krabi2015C2Eb+0x20d4>
   142f2:	f8df 266c 	ldr.w	r2, [pc, #1644]	; 14960 <_ZN9Krabi2015C2Eb+0x20d8>
   142f6:	f7fa f901 	bl	e4fc <_ZN8PositionC1Effb>
   142fa:	f507 628d 	add.w	r2, r7, #1128	; 0x468
   142fe:	f507 6391 	add.w	r3, r7, #1160	; 0x488
   14302:	4610      	mov	r0, r2
   14304:	e893 0006 	ldmia.w	r3, {r1, r2}
   14308:	f7fc f91a 	bl	10540 <_ZN7GobeletC1E8Position>
   1430c:	f507 638d 	add.w	r3, r7, #1128	; 0x468
   14310:	4620      	mov	r0, r4
   14312:	4619      	mov	r1, r3
   14314:	f008 fbf0 	bl	1caf8 <_ZN7GobeletaSERKS_>
   14318:	f507 638d 	add.w	r3, r7, #1128	; 0x468
   1431c:	4618      	mov	r0, r3
   1431e:	f7fc f8d7 	bl	104d0 <_ZN7GobeletD1Ev>
    actionEtape[10] = &actionGobelet[2];
   14322:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14326:	681b      	ldr	r3, [r3, #0]
   14328:	6a5b      	ldr	r3, [r3, #36]
   1432a:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1432e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14332:	681b      	ldr	r3, [r3, #0]
   14334:	f503 7380 	add.w	r3, r3, #256	; 0x100
   14338:	6013      	str	r3, [r2, #0]
    actionGobelet[3] = Gobelet(Position(2090, 830, isYellow));
   1433a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1433e:	681b      	ldr	r3, [r3, #0]
   14340:	f503 7490 	add.w	r4, r3, #288	; 0x120
   14344:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
   14348:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1434c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14350:	781b      	ldrb	r3, [r3, #0]
   14352:	4610      	mov	r0, r2
   14354:	f8df 160c 	ldr.w	r1, [pc, #1548]	; 14964 <_ZN9Krabi2015C2Eb+0x20dc>
   14358:	f8df 25fc 	ldr.w	r2, [pc, #1532]	; 14958 <_ZN9Krabi2015C2Eb+0x20d0>
   1435c:	f7fa f8ce 	bl	e4fc <_ZN8PositionC1Effb>
   14360:	f507 6292 	add.w	r2, r7, #1168	; 0x490
   14364:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
   14368:	4610      	mov	r0, r2
   1436a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1436e:	f7fc f8e7 	bl	10540 <_ZN7GobeletC1E8Position>
   14372:	f507 6392 	add.w	r3, r7, #1168	; 0x490
   14376:	4620      	mov	r0, r4
   14378:	4619      	mov	r1, r3
   1437a:	f008 fbbd 	bl	1caf8 <_ZN7GobeletaSERKS_>
   1437e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
   14382:	4618      	mov	r0, r3
   14384:	f7fc f8a4 	bl	104d0 <_ZN7GobeletD1Ev>
    actionEtape[11] = &actionGobelet[3];
   14388:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1438c:	681b      	ldr	r3, [r3, #0]
   1438e:	6a5b      	ldr	r3, [r3, #36]
   14390:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   14394:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14398:	681b      	ldr	r3, [r3, #0]
   1439a:	f503 7390 	add.w	r3, r3, #288	; 0x120
   1439e:	6013      	str	r3, [r2, #0]
    actionGobelet[4] = Gobelet(Position(2750, 1750, isYellow));
   143a0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   143a4:	681b      	ldr	r3, [r3, #0]
   143a6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
   143aa:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
   143ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
   143b2:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   143b6:	781b      	ldrb	r3, [r3, #0]
   143b8:	4610      	mov	r0, r2
   143ba:	f8df 15ac 	ldr.w	r1, [pc, #1452]	; 14968 <_ZN9Krabi2015C2Eb+0x20e0>
   143be:	f8df 2590 	ldr.w	r2, [pc, #1424]	; 14950 <_ZN9Krabi2015C2Eb+0x20c8>
   143c2:	f7fa f89b 	bl	e4fc <_ZN8PositionC1Effb>
   143c6:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   143ca:	4618      	mov	r0, r3
   143cc:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
   143d0:	e893 0006 	ldmia.w	r3, {r1, r2}
   143d4:	f7fc f8b4 	bl	10540 <_ZN7GobeletC1E8Position>
   143d8:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   143dc:	4620      	mov	r0, r4
   143de:	4619      	mov	r1, r3
   143e0:	f008 fb8a 	bl	1caf8 <_ZN7GobeletaSERKS_>
   143e4:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   143e8:	4618      	mov	r0, r3
   143ea:	f7fc f871 	bl	104d0 <_ZN7GobeletD1Ev>
    actionEtape[12] = &actionGobelet[4];
   143ee:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   143f2:	681b      	ldr	r3, [r3, #0]
   143f4:	6a5b      	ldr	r3, [r3, #36]
   143f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
   143fa:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   143fe:	681b      	ldr	r3, [r3, #0]
   14400:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   14404:	6013      	str	r3, [r2, #0]
    actionTapis[0] = Tapis(Position(1220, 760, isYellow));
   14406:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1440a:	681b      	ldr	r3, [r3, #0]
   1440c:	f503 74b0 	add.w	r4, r3, #352	; 0x160
   14410:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
   14414:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14418:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1441c:	781b      	ldrb	r3, [r3, #0]
   1441e:	4610      	mov	r0, r2
   14420:	f8df 1548 	ldr.w	r1, [pc, #1352]	; 1496c <_ZN9Krabi2015C2Eb+0x20e4>
   14424:	f8df 2548 	ldr.w	r2, [pc, #1352]	; 14970 <_ZN9Krabi2015C2Eb+0x20e8>
   14428:	f7fa f868 	bl	e4fc <_ZN8PositionC1Effb>
   1442c:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   14430:	4618      	mov	r0, r3
   14432:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
   14436:	e893 0006 	ldmia.w	r3, {r1, r2}
   1443a:	f002 fd45 	bl	16ec8 <_ZN5TapisC1E8Position>
   1443e:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   14442:	4620      	mov	r0, r4
   14444:	4619      	mov	r1, r3
   14446:	f008 fb73 	bl	1cb30 <_ZN5TapisaSERKS_>
   1444a:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   1444e:	4618      	mov	r0, r3
   14450:	f002 fca6 	bl	16da0 <_ZN5TapisD1Ev>
    actionEtape[23] = &actionTapis[0];
   14454:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14458:	681b      	ldr	r3, [r3, #0]
   1445a:	6a5b      	ldr	r3, [r3, #36]
   1445c:	f103 025c 	add.w	r2, r3, #92	; 0x5c
   14460:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14464:	681b      	ldr	r3, [r3, #0]
   14466:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1446a:	6013      	str	r3, [r2, #0]


    etape0->addVoisin(etape1);
   1446c:	f8d7 0514 	ldr.w	r0, [r7, #1300]
   14470:	f8d7 1518 	ldr.w	r1, [r7, #1304]
   14474:	f04f 0201 	mov.w	r2, #1	; 0x1
   14478:	f7fb fdfe 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape2);
   1447c:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   14480:	f8d7 151c 	ldr.w	r1, [r7, #1308]
   14484:	f04f 0201 	mov.w	r2, #1	; 0x1
   14488:	f7fb fdf6 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape9);
   1448c:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   14490:	f8d7 1538 	ldr.w	r1, [r7, #1336]
   14494:	f04f 0201 	mov.w	r2, #1	; 0x1
   14498:	f7fb fdee 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape33);
   1449c:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   144a0:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   144a4:	f04f 0201 	mov.w	r2, #1	; 0x1
   144a8:	f7fb fde6 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape24);
   144ac:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   144b0:	f8d7 1574 	ldr.w	r1, [r7, #1396]
   144b4:	f04f 0201 	mov.w	r2, #1	; 0x1
   144b8:	f7fb fdde 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape4);
   144bc:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   144c0:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   144c4:	f04f 0201 	mov.w	r2, #1	; 0x1
   144c8:	f7fb fdd6 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape3);
   144cc:	f8d7 051c 	ldr.w	r0, [r7, #1308]
   144d0:	f8d7 1520 	ldr.w	r1, [r7, #1312]
   144d4:	f04f 0201 	mov.w	r2, #1	; 0x1
   144d8:	f7fb fdce 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape4);
   144dc:	f8d7 0520 	ldr.w	r0, [r7, #1312]
   144e0:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   144e4:	f04f 0201 	mov.w	r2, #1	; 0x1
   144e8:	f7fb fdc6 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape4);
   144ec:	f8d7 051c 	ldr.w	r0, [r7, #1308]
   144f0:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   144f4:	f04f 0201 	mov.w	r2, #1	; 0x1
   144f8:	f7fb fdbe 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape5);
   144fc:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   14500:	f8d7 1528 	ldr.w	r1, [r7, #1320]
   14504:	f04f 0201 	mov.w	r2, #1	; 0x1
   14508:	f7fb fdb6 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape13);
   1450c:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   14510:	f8d7 1548 	ldr.w	r1, [r7, #1352]
   14514:	f04f 0201 	mov.w	r2, #1	; 0x1
   14518:	f7fb fdae 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape8);
   1451c:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   14520:	f8d7 1534 	ldr.w	r1, [r7, #1332]
   14524:	f04f 0201 	mov.w	r2, #1	; 0x1
   14528:	f7fb fda6 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape7);
   1452c:	f8d7 052c 	ldr.w	r0, [r7, #1324]
   14530:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   14534:	f04f 0201 	mov.w	r2, #1	; 0x1
   14538:	f7fb fd9e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape18);
   1453c:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   14540:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   14544:	f04f 0201 	mov.w	r2, #1	; 0x1
   14548:	f7fb fd96 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape2);
   1454c:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   14550:	f8d7 151c 	ldr.w	r1, [r7, #1308]
   14554:	f04f 0201 	mov.w	r2, #1	; 0x1
   14558:	f7fb fd8e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape13->addVoisin(etape14);
   1455c:	f8d7 0548 	ldr.w	r0, [r7, #1352]
   14560:	f8d7 154c 	ldr.w	r1, [r7, #1356]
   14564:	f04f 0201 	mov.w	r2, #1	; 0x1
   14568:	f7fb fd86 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape14->addVoisin(etape8);
   1456c:	f8d7 054c 	ldr.w	r0, [r7, #1356]
   14570:	f8d7 1534 	ldr.w	r1, [r7, #1332]
   14574:	f04f 0201 	mov.w	r2, #1	; 0x1
   14578:	f7fb fd7e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape20);
   1457c:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   14580:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   14584:	f04f 0201 	mov.w	r2, #1	; 0x1
   14588:	f7fb fd76 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape19);
   1458c:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   14590:	f8d7 1560 	ldr.w	r1, [r7, #1376]
   14594:	f04f 0201 	mov.w	r2, #1	; 0x1
   14598:	f7fb fd6e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape19->addVoisin(etape27);
   1459c:	f8d7 0560 	ldr.w	r0, [r7, #1376]
   145a0:	f8d7 1580 	ldr.w	r1, [r7, #1408]
   145a4:	f04f 0201 	mov.w	r2, #1	; 0x1
   145a8:	f7fb fd66 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape27->addVoisin(etape21);
   145ac:	f8d7 0580 	ldr.w	r0, [r7, #1408]
   145b0:	f8d7 1568 	ldr.w	r1, [r7, #1384]
   145b4:	f04f 0201 	mov.w	r2, #1	; 0x1
   145b8:	f7fb fd5e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape27);
   145bc:	f8d7 0520 	ldr.w	r0, [r7, #1312]
   145c0:	f8d7 1580 	ldr.w	r1, [r7, #1408]
   145c4:	f04f 0201 	mov.w	r2, #1	; 0x1
   145c8:	f7fb fd56 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape33);
   145cc:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   145d0:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   145d4:	f04f 0201 	mov.w	r2, #1	; 0x1
   145d8:	f7fb fd4e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape20);
   145dc:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   145e0:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   145e4:	f04f 0201 	mov.w	r2, #1	; 0x1
   145e8:	f7fb fd46 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape18);
   145ec:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   145f0:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   145f4:	f04f 0201 	mov.w	r2, #1	; 0x1
   145f8:	f7fb fd3e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape21->addVoisin(etape22);
   145fc:	f8d7 0568 	ldr.w	r0, [r7, #1384]
   14600:	f8d7 156c 	ldr.w	r1, [r7, #1388]
   14604:	f04f 0201 	mov.w	r2, #1	; 0x1
   14608:	f7fb fd36 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape22);
   1460c:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   14610:	f8d7 156c 	ldr.w	r1, [r7, #1388]
   14614:	f04f 0201 	mov.w	r2, #1	; 0x1
   14618:	f7fb fd2e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape20->addVoisin(etape10);
   1461c:	f8d7 0564 	ldr.w	r0, [r7, #1380]
   14620:	f8d7 153c 	ldr.w	r1, [r7, #1340]
   14624:	f04f 0201 	mov.w	r2, #1	; 0x1
   14628:	f7fb fd26 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape35);
   1462c:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   14630:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   14634:	f04f 0201 	mov.w	r2, #1	; 0x1
   14638:	f7fb fd1e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape11);
   1463c:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   14640:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   14644:	f04f 0201 	mov.w	r2, #1	; 0x1
   14648:	f7fb fd16 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape31);
   1464c:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   14650:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   14654:	f04f 0201 	mov.w	r2, #1	; 0x1
   14658:	f7fb fd0e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape6);
   1465c:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   14660:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   14664:	f04f 0201 	mov.w	r2, #1	; 0x1
   14668:	f7fb fd06 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape6);
   1466c:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   14670:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   14674:	f04f 0201 	mov.w	r2, #1	; 0x1
   14678:	f7fb fcfe 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape7);
   1467c:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   14680:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   14684:	f04f 0201 	mov.w	r2, #1	; 0x1
   14688:	f7fb fcf6 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape12);
   1468c:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   14690:	f8d7 1544 	ldr.w	r1, [r7, #1348]
   14694:	f04f 0201 	mov.w	r2, #1	; 0x1
   14698:	f7fb fcee 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape25);
   1469c:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   146a0:	f8d7 1578 	ldr.w	r1, [r7, #1400]
   146a4:	f04f 0201 	mov.w	r2, #1	; 0x1
   146a8:	f7fb fce6 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape12);
   146ac:	f8d7 052c 	ldr.w	r0, [r7, #1324]
   146b0:	f8d7 1544 	ldr.w	r1, [r7, #1348]
   146b4:	f04f 0201 	mov.w	r2, #1	; 0x1
   146b8:	f7fb fcde 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape12->addVoisin(etape25);
   146bc:	f8d7 0544 	ldr.w	r0, [r7, #1348]
   146c0:	f8d7 1578 	ldr.w	r1, [r7, #1400]
   146c4:	f04f 0201 	mov.w	r2, #1	; 0x1
   146c8:	f7fb fcd6 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape11);
   146cc:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   146d0:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   146d4:	f04f 0201 	mov.w	r2, #1	; 0x1
   146d8:	f7fb fcce 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape20);
   146dc:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   146e0:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   146e4:	f04f 0201 	mov.w	r2, #1	; 0x1
   146e8:	f7fb fcc6 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape11);
   146ec:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   146f0:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   146f4:	f04f 0201 	mov.w	r2, #1	; 0x1
   146f8:	f7fb fcbe 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape11);
   146fc:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   14700:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   14704:	f04f 0201 	mov.w	r2, #1	; 0x1
   14708:	f7fb fcb6 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape26);
   1470c:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   14710:	f8d7 157c 	ldr.w	r1, [r7, #1404]
   14714:	f04f 0201 	mov.w	r2, #1	; 0x1
   14718:	f7fb fcae 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape32);
   1471c:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   14720:	f8d7 1594 	ldr.w	r1, [r7, #1428]
   14724:	f04f 0201 	mov.w	r2, #1	; 0x1
   14728:	f7fb fca6 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape32->addVoisin(etape15);
   1472c:	f8d7 0594 	ldr.w	r0, [r7, #1428]
   14730:	f8d7 1550 	ldr.w	r1, [r7, #1360]
   14734:	f04f 0201 	mov.w	r2, #1	; 0x1
   14738:	f7fb fc9e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape17);
   1473c:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   14740:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   14744:	f04f 0201 	mov.w	r2, #1	; 0x1
   14748:	f7fb fc96 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape17);
   1474c:	f8d7 0554 	ldr.w	r0, [r7, #1364]
   14750:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   14754:	f04f 0201 	mov.w	r2, #1	; 0x1
   14758:	f7fb fc8e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape15);
   1475c:	f8d7 0554 	ldr.w	r0, [r7, #1364]
   14760:	f8d7 1550 	ldr.w	r1, [r7, #1360]
   14764:	f04f 0201 	mov.w	r2, #1	; 0x1
   14768:	f7fb fc86 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape15->addVoisin(etape17);
   1476c:	f8d7 0550 	ldr.w	r0, [r7, #1360]
   14770:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   14774:	f04f 0201 	mov.w	r2, #1	; 0x1
   14778:	f7fb fc7e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape9);
   1477c:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   14780:	f8d7 1538 	ldr.w	r1, [r7, #1336]
   14784:	f04f 0201 	mov.w	r2, #1	; 0x1
   14788:	f7fb fc76 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape20);
   1478c:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   14790:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   14794:	f04f 0201 	mov.w	r2, #1	; 0x1
   14798:	f7fb fc6e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape11);
   1479c:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   147a0:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   147a4:	f04f 0201 	mov.w	r2, #1	; 0x1
   147a8:	f7fb fc66 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape28);
   147ac:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   147b0:	f8d7 1584 	ldr.w	r1, [r7, #1412]
   147b4:	f04f 0201 	mov.w	r2, #1	; 0x1
   147b8:	f7fb fc5e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape29);
   147bc:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   147c0:	f8d7 1588 	ldr.w	r1, [r7, #1416]
   147c4:	f04f 0201 	mov.w	r2, #1	; 0x1
   147c8:	f7fb fc56 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape29->addVoisin(etape30);
   147cc:	f8d7 0588 	ldr.w	r0, [r7, #1416]
   147d0:	f8d7 158c 	ldr.w	r1, [r7, #1420]
   147d4:	f04f 0201 	mov.w	r2, #1	; 0x1
   147d8:	f7fb fc4e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape29->addVoisin(etape31);
   147dc:	f8d7 0588 	ldr.w	r0, [r7, #1416]
   147e0:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   147e4:	f04f 0201 	mov.w	r2, #1	; 0x1
   147e8:	f7fb fc46 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape31);
   147ec:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   147f0:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   147f4:	f04f 0201 	mov.w	r2, #1	; 0x1
   147f8:	f7fb fc3e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape18);
   147fc:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   14800:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   14804:	f04f 0201 	mov.w	r2, #1	; 0x1
   14808:	f7fb fc36 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape4);
   1480c:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   14810:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   14814:	f04f 0201 	mov.w	r2, #1	; 0x1
   14818:	f7fb fc2e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape29);
   1481c:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   14820:	f8d7 1588 	ldr.w	r1, [r7, #1416]
   14824:	f04f 0201 	mov.w	r2, #1	; 0x1
   14828:	f7fb fc26 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape30);
   1482c:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   14830:	f8d7 158c 	ldr.w	r1, [r7, #1420]
   14834:	f04f 0201 	mov.w	r2, #1	; 0x1
   14838:	f7fb fc1e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape31);
   1483c:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   14840:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   14844:	f04f 0201 	mov.w	r2, #1	; 0x1
   14848:	f7fb fc16 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape34);
   1484c:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   14850:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   14854:	f04f 0201 	mov.w	r2, #1	; 0x1
   14858:	f7fb fc0e 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape34->addVoisin(etape35);
   1485c:	f8d7 059c 	ldr.w	r0, [r7, #1436]
   14860:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   14864:	f04f 0201 	mov.w	r2, #1	; 0x1
   14868:	f7fb fc06 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape24);
   1486c:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   14870:	f8d7 1574 	ldr.w	r1, [r7, #1396]
   14874:	f04f 0201 	mov.w	r2, #1	; 0x1
   14878:	f7fb fbfe 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape37);
   1487c:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   14880:	f8d7 15a8 	ldr.w	r1, [r7, #1448]
   14884:	f04f 0201 	mov.w	r2, #1	; 0x1
   14888:	f7fb fbf6 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape37->addVoisin(etape36);
   1488c:	f8d7 05a8 	ldr.w	r0, [r7, #1448]
   14890:	f8d7 15a4 	ldr.w	r1, [r7, #1444]
   14894:	f04f 0201 	mov.w	r2, #1	; 0x1
   14898:	f7fb fbee 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape36->addVoisin(etape6);
   1489c:	f8d7 05a4 	ldr.w	r0, [r7, #1444]
   148a0:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   148a4:	f04f 0201 	mov.w	r2, #1	; 0x1
   148a8:	f7fb fbe6 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape36->addVoisin(etape7);
   148ac:	f8d7 05a4 	ldr.w	r0, [r7, #1444]
   148b0:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   148b4:	f04f 0201 	mov.w	r2, #1	; 0x1
   148b8:	f7fb fbde 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape33);
   148bc:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   148c0:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   148c4:	f04f 0201 	mov.w	r2, #1	; 0x1
   148c8:	f7fb fbd6 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape34);
   148cc:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   148d0:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   148d4:	f04f 0201 	mov.w	r2, #1	; 0x1
   148d8:	f7fb fbce 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape35);
   148dc:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   148e0:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   148e4:	f04f 0201 	mov.w	r2, #1	; 0x1
   148e8:	f7fb fbc6 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape33);
   148ec:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   148f0:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   148f4:	f04f 0201 	mov.w	r2, #1	; 0x1
   148f8:	f7fb fbbe 	bl	10078 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape34);
   148fc:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   14900:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   14904:	f04f 0201 	mov.w	r2, #1	; 0x1
   14908:	f7fb fbb6 	bl	10078 <_ZN5Etape9addVoisinEPS_b>

    // Lancer Dijkstra
    startDijkstra();
   1490c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14910:	681b      	ldr	r3, [r3, #0]
   14912:	4618      	mov	r0, r3
   14914:	f001 fd74 	bl	16400 <_ZN11StrategieV313startDijkstraEv>
}
   14918:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1491c:	681b      	ldr	r3, [r3, #0]
   1491e:	4618      	mov	r0, r3
   14920:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
   14924:	f507 6780 	add.w	r7, r7, #1024	; 0x400
   14928:	46bd      	mov	sp, r7
   1492a:	bd90      	pop	{r4, r7, pc}
   1492c:	41f00000 	.word	0x41f00000
   14930:	44510000 	.word	0x44510000
   14934:	44de8000 	.word	0x44de8000
   14938:	447a0000 	.word	0x447a0000
   1493c:	436c0000 	.word	0x436c0000
   14940:	43c80000 	.word	0x43c80000
   14944:	451c4000 	.word	0x451c4000
   14948:	450fc000 	.word	0x450fc000
   1494c:	437a0000 	.word	0x437a0000
   14950:	44dac000 	.word	0x44dac000
   14954:	44638000 	.word	0x44638000
   14958:	444f8000 	.word	0x444f8000
   1495c:	44bb8000 	.word	0x44bb8000
   14960:	44ce4000 	.word	0x44ce4000
   14964:	4502a000 	.word	0x4502a000
   14968:	452be000 	.word	0x452be000
   1496c:	44988000 	.word	0x44988000
   14970:	443e0000 	.word	0x443e0000

00014974 <_ZN17MediumLevelAction15getGoalPositionEv>:
MediumLevelAction::~MediumLevelAction()
{
    //dtor
}

Position MediumLevelAction::getGoalPosition()
   14974:	b480      	push	{r7}
   14976:	b083      	sub	sp, #12
   14978:	af00      	add	r7, sp, #0
   1497a:	4684      	mov	ip, r0
   1497c:	6079      	str	r1, [r7, #4]
{
    return goalPosition;
   1497e:	687b      	ldr	r3, [r7, #4]
   14980:	4662      	mov	r2, ip
   14982:	f103 0304 	add.w	r3, r3, #4	; 0x4
   14986:	e893 0003 	ldmia.w	r3, {r0, r1}
   1498a:	e882 0003 	stmia.w	r2, {r0, r1}
}
   1498e:	4660      	mov	r0, ip
   14990:	f107 070c 	add.w	r7, r7, #12	; 0xc
   14994:	46bd      	mov	sp, r7
   14996:	bc80      	pop	{r7}
   14998:	4770      	bx	lr
   1499a:	46c0      	nop			(mov r8, r8)

0001499c <_ZN17MediumLevelAction9getGoBackEv>:

bool MediumLevelAction::getGoBack()
   1499c:	b480      	push	{r7}
   1499e:	b083      	sub	sp, #12
   149a0:	af00      	add	r7, sp, #0
   149a2:	6078      	str	r0, [r7, #4]
{
    return goBack;
   149a4:	687b      	ldr	r3, [r7, #4]
   149a6:	7c1b      	ldrb	r3, [r3, #16]
}
   149a8:	4618      	mov	r0, r3
   149aa:	f107 070c 	add.w	r7, r7, #12	; 0xc
   149ae:	46bd      	mov	sp, r7
   149b0:	bc80      	pop	{r7}
   149b2:	4770      	bx	lr

000149b4 <_ZN17MediumLevelAction16collisionAvoidedEv>:

void MediumLevelAction::collisionAvoided()
   149b4:	b480      	push	{r7}
   149b6:	b083      	sub	sp, #12
   149b8:	af00      	add	r7, sp, #0
   149ba:	6078      	str	r0, [r7, #4]
{
    status = 0; // reinitialize the status if function not overloaded
   149bc:	687a      	ldr	r2, [r7, #4]
   149be:	f04f 0300 	mov.w	r3, #0	; 0x0
   149c2:	60d3      	str	r3, [r2, #12]
}
   149c4:	f107 070c 	add.w	r7, r7, #12	; 0xc
   149c8:	46bd      	mov	sp, r7
   149ca:	bc80      	pop	{r7}
   149cc:	4770      	bx	lr
   149ce:	46c0      	nop			(mov r8, r8)

000149d0 <_ZN17MediumLevelAction9setGoBackEb>:

void MediumLevelAction::setGoBack(bool val)
   149d0:	b480      	push	{r7}
   149d2:	b083      	sub	sp, #12
   149d4:	af00      	add	r7, sp, #0
   149d6:	6078      	str	r0, [r7, #4]
   149d8:	460b      	mov	r3, r1
   149da:	70fb      	strb	r3, [r7, #3]
{
    goBack = val;
   149dc:	687a      	ldr	r2, [r7, #4]
   149de:	78fb      	ldrb	r3, [r7, #3]
   149e0:	7413      	strb	r3, [r2, #16]
}
   149e2:	f107 070c 	add.w	r7, r7, #12	; 0xc
   149e6:	46bd      	mov	sp, r7
   149e8:	bc80      	pop	{r7}
   149ea:	4770      	bx	lr

000149ec <_ZN17MediumLevelAction5resetEv>:

void MediumLevelAction::reset()
   149ec:	b480      	push	{r7}
   149ee:	b083      	sub	sp, #12
   149f0:	af00      	add	r7, sp, #0
   149f2:	6078      	str	r0, [r7, #4]
{

}
   149f4:	f107 070c 	add.w	r7, r7, #12	; 0xc
   149f8:	46bd      	mov	sp, r7
   149fa:	bc80      	pop	{r7}
   149fc:	4770      	bx	lr
   149fe:	46c0      	nop			(mov r8, r8)

00014a00 <_ZN17MediumLevelAction10updateTimeEi>:
{

}
#endif

void MediumLevelAction::updateTime(int millisecondesRestantes)
   14a00:	b480      	push	{r7}
   14a02:	b083      	sub	sp, #12
   14a04:	af00      	add	r7, sp, #0
   14a06:	6078      	str	r0, [r7, #4]
   14a08:	6039      	str	r1, [r7, #0]
{
    this->millisecondesRestantes = millisecondesRestantes;
   14a0a:	687a      	ldr	r2, [r7, #4]
   14a0c:	683b      	ldr	r3, [r7, #0]
   14a0e:	6153      	str	r3, [r2, #20]
}
   14a10:	f107 070c 	add.w	r7, r7, #12	; 0xc
   14a14:	46bd      	mov	sp, r7
   14a16:	bc80      	pop	{r7}
   14a18:	4770      	bx	lr
   14a1a:	46c0      	nop			(mov r8, r8)

00014a1c <_ZN17MediumLevelActionD0Ev>:
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
    status = 0;
}

MediumLevelAction::~MediumLevelAction()
   14a1c:	b580      	push	{r7, lr}
   14a1e:	b082      	sub	sp, #8
   14a20:	af00      	add	r7, sp, #0
   14a22:	6078      	str	r0, [r7, #4]
   14a24:	687a      	ldr	r2, [r7, #4]
   14a26:	4b08      	ldr	r3, [pc, #32]	(14a48 <_ZN17MediumLevelActionD0Ev+0x2c>)
   14a28:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   14a2a:	f04f 0301 	mov.w	r3, #1	; 0x1
   14a2e:	b2db      	uxtb	r3, r3
   14a30:	2b00      	cmp	r3, #0
   14a32:	d002      	beq.n	14a3a <_ZN17MediumLevelActionD0Ev+0x1e>
   14a34:	6878      	ldr	r0, [r7, #4]
   14a36:	f7f9 fca1 	bl	e37c <_ZdlPv>
   14a3a:	687b      	ldr	r3, [r7, #4]
   14a3c:	4618      	mov	r0, r3
   14a3e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   14a42:	46bd      	mov	sp, r7
   14a44:	bd80      	pop	{r7, pc}
   14a46:	46c0      	nop			(mov r8, r8)
   14a48:	00021b50 	.word	0x00021b50

00014a4c <_ZN17MediumLevelActionD1Ev>:
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
    status = 0;
}

MediumLevelAction::~MediumLevelAction()
   14a4c:	b580      	push	{r7, lr}
   14a4e:	b082      	sub	sp, #8
   14a50:	af00      	add	r7, sp, #0
   14a52:	6078      	str	r0, [r7, #4]
   14a54:	687a      	ldr	r2, [r7, #4]
   14a56:	4b08      	ldr	r3, [pc, #32]	(14a78 <_ZN17MediumLevelActionD1Ev+0x2c>)
   14a58:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   14a5a:	f04f 0300 	mov.w	r3, #0	; 0x0
   14a5e:	b2db      	uxtb	r3, r3
   14a60:	2b00      	cmp	r3, #0
   14a62:	d002      	beq.n	14a6a <_ZN17MediumLevelActionD1Ev+0x1e>
   14a64:	6878      	ldr	r0, [r7, #4]
   14a66:	f7f9 fc89 	bl	e37c <_ZdlPv>
   14a6a:	687b      	ldr	r3, [r7, #4]
   14a6c:	4618      	mov	r0, r3
   14a6e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   14a72:	46bd      	mov	sp, r7
   14a74:	bd80      	pop	{r7, pc}
   14a76:	46c0      	nop			(mov r8, r8)
   14a78:	00021b50 	.word	0x00021b50

00014a7c <_ZN17MediumLevelActionD2Ev>:
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
    status = 0;
}

MediumLevelAction::~MediumLevelAction()
   14a7c:	b580      	push	{r7, lr}
   14a7e:	b082      	sub	sp, #8
   14a80:	af00      	add	r7, sp, #0
   14a82:	6078      	str	r0, [r7, #4]
   14a84:	687a      	ldr	r2, [r7, #4]
   14a86:	4b08      	ldr	r3, [pc, #32]	(14aa8 <_ZN17MediumLevelActionD2Ev+0x2c>)
   14a88:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   14a8a:	f04f 0300 	mov.w	r3, #0	; 0x0
   14a8e:	b2db      	uxtb	r3, r3
   14a90:	2b00      	cmp	r3, #0
   14a92:	d002      	beq.n	14a9a <_ZN17MediumLevelActionD2Ev+0x1e>
   14a94:	6878      	ldr	r0, [r7, #4]
   14a96:	f7f9 fc71 	bl	e37c <_ZdlPv>
   14a9a:	687b      	ldr	r3, [r7, #4]
   14a9c:	4618      	mov	r0, r3
   14a9e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   14aa2:	46bd      	mov	sp, r7
   14aa4:	bd80      	pop	{r7, pc}
   14aa6:	46c0      	nop			(mov r8, r8)
   14aa8:	00021b50 	.word	0x00021b50

00014aac <_ZN17MediumLevelActionC1E8Position>:
#include "mediumLevelAction.h"
#include "strategieV2.h"

MediumLevelAction::MediumLevelAction(Position goalPos) 
   14aac:	b580      	push	{r7, lr}
   14aae:	b084      	sub	sp, #16
   14ab0:	af00      	add	r7, sp, #0
   14ab2:	60f8      	str	r0, [r7, #12]
   14ab4:	f107 0304 	add.w	r3, r7, #4	; 0x4
   14ab8:	e883 0006 	stmia.w	r3, {r1, r2}
   14abc:	68fa      	ldr	r2, [r7, #12]
   14abe:	4b0e      	ldr	r3, [pc, #56]	(14af8 <_ZN17MediumLevelActionC1E8Position+0x4c>)
   14ac0:	6013      	str	r3, [r2, #0]
   14ac2:	68fb      	ldr	r3, [r7, #12]
   14ac4:	f103 0304 	add.w	r3, r3, #4	; 0x4
   14ac8:	4618      	mov	r0, r3
   14aca:	f7f9 fcef 	bl	e4ac <_ZN8PositionC1Ev>
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
   14ace:	68fb      	ldr	r3, [r7, #12]
   14ad0:	f103 0304 	add.w	r3, r3, #4	; 0x4
   14ad4:	4618      	mov	r0, r3
   14ad6:	f107 0304 	add.w	r3, r7, #4	; 0x4
   14ada:	e893 0006 	ldmia.w	r3, {r1, r2}
   14ade:	f7f9 fda1 	bl	e624 <_ZN8PositionaSES_>
    status = 0;
   14ae2:	68fa      	ldr	r2, [r7, #12]
   14ae4:	f04f 0300 	mov.w	r3, #0	; 0x0
   14ae8:	60d3      	str	r3, [r2, #12]
}
   14aea:	68fb      	ldr	r3, [r7, #12]
   14aec:	4618      	mov	r0, r3
   14aee:	f107 0710 	add.w	r7, r7, #16	; 0x10
   14af2:	46bd      	mov	sp, r7
   14af4:	bd80      	pop	{r7, pc}
   14af6:	46c0      	nop			(mov r8, r8)
   14af8:	00021b50 	.word	0x00021b50

00014afc <_ZN17MediumLevelActionC2E8Position>:
#include "mediumLevelAction.h"
#include "strategieV2.h"

MediumLevelAction::MediumLevelAction(Position goalPos) 
   14afc:	b580      	push	{r7, lr}
   14afe:	b084      	sub	sp, #16
   14b00:	af00      	add	r7, sp, #0
   14b02:	60f8      	str	r0, [r7, #12]
   14b04:	f107 0304 	add.w	r3, r7, #4	; 0x4
   14b08:	e883 0006 	stmia.w	r3, {r1, r2}
   14b0c:	68fa      	ldr	r2, [r7, #12]
   14b0e:	4b0e      	ldr	r3, [pc, #56]	(14b48 <_ZN17MediumLevelActionC2E8Position+0x4c>)
   14b10:	6013      	str	r3, [r2, #0]
   14b12:	68fb      	ldr	r3, [r7, #12]
   14b14:	f103 0304 	add.w	r3, r3, #4	; 0x4
   14b18:	4618      	mov	r0, r3
   14b1a:	f7f9 fcc7 	bl	e4ac <_ZN8PositionC1Ev>
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
   14b1e:	68fb      	ldr	r3, [r7, #12]
   14b20:	f103 0304 	add.w	r3, r3, #4	; 0x4
   14b24:	4618      	mov	r0, r3
   14b26:	f107 0304 	add.w	r3, r7, #4	; 0x4
   14b2a:	e893 0006 	ldmia.w	r3, {r1, r2}
   14b2e:	f7f9 fd79 	bl	e624 <_ZN8PositionaSES_>
    status = 0;
   14b32:	68fa      	ldr	r2, [r7, #12]
   14b34:	f04f 0300 	mov.w	r3, #0	; 0x0
   14b38:	60d3      	str	r3, [r2, #12]
}
   14b3a:	68fb      	ldr	r3, [r7, #12]
   14b3c:	4618      	mov	r0, r3
   14b3e:	f107 0710 	add.w	r7, r7, #16	; 0x10
   14b42:	46bd      	mov	sp, r7
   14b44:	bd80      	pop	{r7, pc}
   14b46:	46c0      	nop			(mov r8, r8)
   14b48:	00021b50 	.word	0x00021b50

00014b4c <_ZN19RecalibrerOdometrie6updateEv>:
RecalibrerOdometrie::~RecalibrerOdometrie()
{
    //dtor
}

int RecalibrerOdometrie::update()
   14b4c:	b590      	push	{r4, r7, lr}
   14b4e:	b0d9      	sub	sp, #356
   14b50:	af02      	add	r7, sp, #8
   14b52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14b56:	6018      	str	r0, [r3, #0]
{
    allumerLED();
   14b58:	f7f7 f962 	bl	be20 <_Z10allumerLEDv>
    allumerLED2();
   14b5c:	f7f7 f958 	bl	be10 <_Z11allumerLED2v>
//#ifndef ROBOTHW
//    status = -1;
//    return -1;
//#else
    if (status == 0)
   14b60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14b64:	681b      	ldr	r3, [r3, #0]
   14b66:	68db      	ldr	r3, [r3, #12]
   14b68:	2b00      	cmp	r3, #0
   14b6a:	d115      	bne.n	14b98 <_ZN19RecalibrerOdometrie6updateEv+0x4c>
    {
#ifndef ROBOTHW
        qDebug() << "recalibrerOdometrie";
#endif
        StrategieV2::setCurrentGoal(positionDepart, false);//Position(700, 1360,isBlue), false);
   14b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14b70:	681a      	ldr	r2, [r3, #0]
   14b72:	f8df 37bc 	ldr.w	r3, [pc, #1980]	; 15330 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   14b76:	9300      	str	r3, [sp, #0]
   14b78:	f102 0318 	add.w	r3, r2, #24	; 0x18
   14b7c:	e893 0003 	ldmia.w	r3, {r0, r1}
   14b80:	f04f 0200 	mov.w	r2, #0	; 0x0
   14b84:	f8df 37ac 	ldr.w	r3, [pc, #1964]	; 15334 <_ZN19RecalibrerOdometrie6updateEv+0x7e8>
   14b88:	f000 ff68 	bl	15a5c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status = 1;
   14b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14b90:	681a      	ldr	r2, [r3, #0]
   14b92:	f04f 0301 	mov.w	r3, #1	; 0x1
   14b96:	60d3      	str	r3, [r2, #12]
    }
    if (status == 1) // attend d'être replacé
   14b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14b9c:	681b      	ldr	r3, [r3, #0]
   14b9e:	68db      	ldr	r3, [r3, #12]
   14ba0:	2b01      	cmp	r3, #1
   14ba2:	f040 808a 	bne.w	14cba <_ZN19RecalibrerOdometrie6updateEv+0x16e>
    {
        Position vect = positionDepart - Odometrie::odometrie->getPos().getPosition();
   14ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14baa:	681b      	ldr	r3, [r3, #0]
   14bac:	f103 0418 	add.w	r4, r3, #24	; 0x18
   14bb0:	f8df 3784 	ldr.w	r3, [pc, #1924]	; 15338 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   14bb4:	681a      	ldr	r2, [r3, #0]
   14bb6:	f107 0364 	add.w	r3, r7, #100	; 0x64
   14bba:	4618      	mov	r0, r3
   14bbc:	4611      	mov	r1, r2
   14bbe:	f7f4 fdcf 	bl	9760 <_ZNK9Odometrie6getPosEv>
   14bc2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
   14bc6:	f107 0264 	add.w	r2, r7, #100	; 0x64
   14bca:	4618      	mov	r0, r3
   14bcc:	4611      	mov	r1, r2
   14bce:	f7f9 fed1 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
   14bd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
   14bd6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
   14bda:	4618      	mov	r0, r3
   14bdc:	4621      	mov	r1, r4
   14bde:	f7f9 fcfb 	bl	e5d8 <_ZNK8PositionmiERKS_>
        if (vect.getNorme() < 40)
   14be2:	f107 0354 	add.w	r3, r7, #84	; 0x54
   14be6:	4618      	mov	r0, r3
   14be8:	f7f9 fe04 	bl	e7f4 <_ZNK8Position8getNormeEv>
   14bec:	4602      	mov	r2, r0
   14bee:	f04f 0300 	mov.w	r3, #0	; 0x0
   14bf2:	72fb      	strb	r3, [r7, #11]
   14bf4:	4610      	mov	r0, r2
   14bf6:	f8df 1744 	ldr.w	r1, [pc, #1860]	; 1533c <_ZN19RecalibrerOdometrie6updateEv+0x7f0>
   14bfa:	f006 f893 	bl	1ad24 <__aeabi_fcmplt>
   14bfe:	4603      	mov	r3, r0
   14c00:	2b00      	cmp	r3, #0
   14c02:	d002      	beq.n	14c0a <_ZN19RecalibrerOdometrie6updateEv+0xbe>
   14c04:	f04f 0301 	mov.w	r3, #1	; 0x1
   14c08:	72fb      	strb	r3, [r7, #11]
   14c0a:	7afb      	ldrb	r3, [r7, #11]
   14c0c:	2b00      	cmp	r3, #0
   14c0e:	d054      	beq.n	14cba <_ZN19RecalibrerOdometrie6updateEv+0x16e>
        {
            if(this->coinRecalage == COTE_NOTRE_DEPART_BAS || this->coinRecalage == COTE_NOTRE_DEPART_HAUT)
   14c10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14c14:	681b      	ldr	r3, [r3, #0]
   14c16:	6a9b      	ldr	r3, [r3, #40]
   14c18:	2b03      	cmp	r3, #3
   14c1a:	d005      	beq.n	14c28 <_ZN19RecalibrerOdometrie6updateEv+0xdc>
   14c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14c20:	681b      	ldr	r3, [r3, #0]
   14c22:	6a9b      	ldr	r3, [r3, #40]
   14c24:	2b02      	cmp	r3, #2
   14c26:	d11f      	bne.n	14c68 <_ZN19RecalibrerOdometrie6updateEv+0x11c>
            {
                StrategieV2::setCurrentGoal(Position(0, positionDepart.getY()), true, 0.5);
   14c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14c2c:	681b      	ldr	r3, [r3, #0]
   14c2e:	f103 0318 	add.w	r3, r3, #24	; 0x18
   14c32:	4618      	mov	r0, r3
   14c34:	f7f9 fc82 	bl	e53c <_ZNK8Position4getYEv>
   14c38:	4602      	mov	r2, r0
   14c3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
   14c3e:	4618      	mov	r0, r3
   14c40:	f8df 16fc 	ldr.w	r1, [pc, #1788]	; 15340 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>
   14c44:	f04f 0301 	mov.w	r3, #1	; 0x1
   14c48:	f7f9 fc58 	bl	e4fc <_ZN8PositionC1Effb>
   14c4c:	f8df 36e0 	ldr.w	r3, [pc, #1760]	; 15330 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   14c50:	9300      	str	r3, [sp, #0]
   14c52:	f107 0370 	add.w	r3, r7, #112	; 0x70
   14c56:	e893 0003 	ldmia.w	r3, {r0, r1}
   14c5a:	f04f 0201 	mov.w	r2, #1	; 0x1
   14c5e:	f8df 36e4 	ldr.w	r3, [pc, #1764]	; 15344 <_ZN19RecalibrerOdometrie6updateEv+0x7f8>
   14c62:	f000 fefb 	bl	15a5c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
   14c66:	e01e      	b.n	14ca6 <_ZN19RecalibrerOdometrie6updateEv+0x15a>
            }
            else
            {
                StrategieV2::setCurrentGoal(Position(3000, positionDepart.getY()), true, 0.5);
   14c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14c6c:	681b      	ldr	r3, [r3, #0]
   14c6e:	f103 0318 	add.w	r3, r3, #24	; 0x18
   14c72:	4618      	mov	r0, r3
   14c74:	f7f9 fc62 	bl	e53c <_ZNK8Position4getYEv>
   14c78:	4602      	mov	r2, r0
   14c7a:	f107 0378 	add.w	r3, r7, #120	; 0x78
   14c7e:	4618      	mov	r0, r3
   14c80:	f8df 16c4 	ldr.w	r1, [pc, #1732]	; 15348 <_ZN19RecalibrerOdometrie6updateEv+0x7fc>
   14c84:	f04f 0301 	mov.w	r3, #1	; 0x1
   14c88:	f7f9 fc38 	bl	e4fc <_ZN8PositionC1Effb>
   14c8c:	f8df 36a0 	ldr.w	r3, [pc, #1696]	; 15330 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   14c90:	9300      	str	r3, [sp, #0]
   14c92:	f107 0378 	add.w	r3, r7, #120	; 0x78
   14c96:	e893 0003 	ldmia.w	r3, {r0, r1}
   14c9a:	f04f 0201 	mov.w	r2, #1	; 0x1
   14c9e:	f8df 36a4 	ldr.w	r3, [pc, #1700]	; 15344 <_ZN19RecalibrerOdometrie6updateEv+0x7f8>
   14ca2:	f000 fedb 	bl	15a5c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            }
            StrategieV2::setEnTrainDeRecalibrer(true);
   14ca6:	f04f 0001 	mov.w	r0, #1	; 0x1
   14caa:	f000 fcdd 	bl	15668 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>
            status = 2;
   14cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14cb2:	681a      	ldr	r2, [r3, #0]
   14cb4:	f04f 0302 	mov.w	r3, #2	; 0x2
   14cb8:	60d3      	str	r3, [r2, #12]
        }
    }
    if (status == 2) // attend d'avoir synchro sur X
   14cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14cbe:	681b      	ldr	r3, [r3, #0]
   14cc0:	68db      	ldr	r3, [r3, #12]
   14cc2:	2b02      	cmp	r3, #2
   14cc4:	f040 8144 	bne.w	14f50 <_ZN19RecalibrerOdometrie6updateEv+0x404>
    {
        static int timeBlockedY = 0;
        //if (abs(Odometrie::odometrie->getVitesseLineaire()) < 0.005f) //if (fdc1->getValue().b && fdc2->getValue().b) // distance parcourue la derniere seconde
        Position vect = candidatPositionArrete - Odometrie::odometrie->getPos().getPosition();
   14cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14ccc:	681b      	ldr	r3, [r3, #0]
   14cce:	f103 0420 	add.w	r4, r3, #32	; 0x20
   14cd2:	f8df 3664 	ldr.w	r3, [pc, #1636]	; 15338 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   14cd6:	681a      	ldr	r2, [r3, #0]
   14cd8:	f107 0388 	add.w	r3, r7, #136	; 0x88
   14cdc:	4618      	mov	r0, r3
   14cde:	4611      	mov	r1, r2
   14ce0:	f7f4 fd3e 	bl	9760 <_ZNK9Odometrie6getPosEv>
   14ce4:	f107 0380 	add.w	r3, r7, #128	; 0x80
   14ce8:	f107 0288 	add.w	r2, r7, #136	; 0x88
   14cec:	4618      	mov	r0, r3
   14cee:	4611      	mov	r1, r2
   14cf0:	f7f9 fe40 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
   14cf4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   14cf8:	f107 0280 	add.w	r2, r7, #128	; 0x80
   14cfc:	4618      	mov	r0, r3
   14cfe:	4621      	mov	r1, r4
   14d00:	f7f9 fc6a 	bl	e5d8 <_ZNK8PositionmiERKS_>
        if(abs(vect.getNorme()) < 5)//Si on a pas bougé de plus de Xmm du dernier candidat de position où le robot s'est arrêté
   14d04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   14d08:	4618      	mov	r0, r3
   14d0a:	f7f9 fd73 	bl	e7f4 <_ZNK8Position8getNormeEv>
   14d0e:	4603      	mov	r3, r0
   14d10:	4618      	mov	r0, r3
   14d12:	f8df 162c 	ldr.w	r1, [pc, #1580]	; 15340 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>
   14d16:	f006 f823 	bl	1ad60 <__aeabi_fcmpgt>
   14d1a:	4603      	mov	r3, r0
   14d1c:	2b00      	cmp	r3, #0
   14d1e:	d016      	beq.n	14d4e <_ZN19RecalibrerOdometrie6updateEv+0x202>
   14d20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   14d24:	4618      	mov	r0, r3
   14d26:	f7f9 fd65 	bl	e7f4 <_ZNK8Position8getNormeEv>
   14d2a:	4602      	mov	r2, r0
   14d2c:	f04f 0300 	mov.w	r3, #0	; 0x0
   14d30:	72bb      	strb	r3, [r7, #10]
   14d32:	4610      	mov	r0, r2
   14d34:	f8df 1608 	ldr.w	r1, [pc, #1544]	; 15340 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>
   14d38:	f005 ffea 	bl	1ad10 <__aeabi_fcmpeq>
   14d3c:	4603      	mov	r3, r0
   14d3e:	2b00      	cmp	r3, #0
   14d40:	d102      	bne.n	14d48 <_ZN19RecalibrerOdometrie6updateEv+0x1fc>
   14d42:	f04f 0301 	mov.w	r3, #1	; 0x1
   14d46:	72bb      	strb	r3, [r7, #10]
   14d48:	7abb      	ldrb	r3, [r7, #10]
   14d4a:	60fb      	str	r3, [r7, #12]
   14d4c:	e015      	b.n	14d7a <_ZN19RecalibrerOdometrie6updateEv+0x22e>
   14d4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   14d52:	4618      	mov	r0, r3
   14d54:	f7f9 fd4e 	bl	e7f4 <_ZNK8Position8getNormeEv>
   14d58:	4602      	mov	r2, r0
   14d5a:	f04f 0300 	mov.w	r3, #0	; 0x0
   14d5e:	727b      	strb	r3, [r7, #9]
   14d60:	4610      	mov	r0, r2
   14d62:	f8df 15e8 	ldr.w	r1, [pc, #1512]	; 1534c <_ZN19RecalibrerOdometrie6updateEv+0x800>
   14d66:	f005 fffb 	bl	1ad60 <__aeabi_fcmpgt>
   14d6a:	4603      	mov	r3, r0
   14d6c:	2b00      	cmp	r3, #0
   14d6e:	d002      	beq.n	14d76 <_ZN19RecalibrerOdometrie6updateEv+0x22a>
   14d70:	f04f 0301 	mov.w	r3, #1	; 0x1
   14d74:	727b      	strb	r3, [r7, #9]
   14d76:	7a7b      	ldrb	r3, [r7, #9]
   14d78:	60fb      	str	r3, [r7, #12]
   14d7a:	68fb      	ldr	r3, [r7, #12]
   14d7c:	2b00      	cmp	r3, #0
   14d7e:	d008      	beq.n	14d92 <_ZN19RecalibrerOdometrie6updateEv+0x246>
        {
            timeBlockedY ++;
   14d80:	f8df 35cc 	ldr.w	r3, [pc, #1484]	; 15350 <_ZN19RecalibrerOdometrie6updateEv+0x804>
   14d84:	681b      	ldr	r3, [r3, #0]
   14d86:	f103 0201 	add.w	r2, r3, #1	; 0x1
   14d8a:	f8df 35c4 	ldr.w	r3, [pc, #1476]	; 15350 <_ZN19RecalibrerOdometrie6updateEv+0x804>
   14d8e:	601a      	str	r2, [r3, #0]
   14d90:	e023      	b.n	14dda <_ZN19RecalibrerOdometrie6updateEv+0x28e>
//            allumerLED2();
        }
        else {
            timeBlockedY = 0;
   14d92:	f8df 25bc 	ldr.w	r2, [pc, #1468]	; 15350 <_ZN19RecalibrerOdometrie6updateEv+0x804>
   14d96:	f04f 0300 	mov.w	r3, #0	; 0x0
   14d9a:	6013      	str	r3, [r2, #0]
            candidatPositionArrete = Odometrie::odometrie->getPos().getPosition();
   14d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14da0:	681b      	ldr	r3, [r3, #0]
   14da2:	f103 0420 	add.w	r4, r3, #32	; 0x20
   14da6:	f8df 3590 	ldr.w	r3, [pc, #1424]	; 15338 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   14daa:	681a      	ldr	r2, [r3, #0]
   14dac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   14db0:	4618      	mov	r0, r3
   14db2:	4611      	mov	r1, r2
   14db4:	f7f4 fcd4 	bl	9760 <_ZNK9Odometrie6getPosEv>
   14db8:	f107 0394 	add.w	r3, r7, #148	; 0x94
   14dbc:	f107 029c 	add.w	r2, r7, #156	; 0x9c
   14dc0:	4618      	mov	r0, r3
   14dc2:	4611      	mov	r1, r2
   14dc4:	f7f9 fdd6 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
   14dc8:	4620      	mov	r0, r4
   14dca:	f107 0394 	add.w	r3, r7, #148	; 0x94
   14dce:	e893 0006 	ldmia.w	r3, {r1, r2}
   14dd2:	f7f9 fc27 	bl	e624 <_ZN8PositionaSES_>
            eteindreLED2();
   14dd6:	f7f6 ffbf 	bl	bd58 <_Z12eteindreLED2v>
        }
        if (timeBlockedY > 100 &&
   14dda:	f8df 3574 	ldr.w	r3, [pc, #1396]	; 15350 <_ZN19RecalibrerOdometrie6updateEv+0x804>
   14dde:	681b      	ldr	r3, [r3, #0]
   14de0:	2b64      	cmp	r3, #100
   14de2:	dd59      	ble.n	14e98 <_ZN19RecalibrerOdometrie6updateEv+0x34c>
   14de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14de8:	681b      	ldr	r3, [r3, #0]
   14dea:	6a9b      	ldr	r3, [r3, #40]
   14dec:	2b00      	cmp	r3, #0
   14dee:	d005      	beq.n	14dfc <_ZN19RecalibrerOdometrie6updateEv+0x2b0>
   14df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14df4:	681b      	ldr	r3, [r3, #0]
   14df6:	6a9b      	ldr	r3, [r3, #40]
   14df8:	2b01      	cmp	r3, #1
   14dfa:	d11e      	bne.n	14e3a <_ZN19RecalibrerOdometrie6updateEv+0x2ee>
   14dfc:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 15338 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   14e00:	681a      	ldr	r2, [r3, #0]
   14e02:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
   14e06:	4618      	mov	r0, r3
   14e08:	4611      	mov	r1, r2
   14e0a:	f7f4 fca9 	bl	9760 <_ZNK9Odometrie6getPosEv>
   14e0e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
   14e12:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
   14e16:	4618      	mov	r0, r3
   14e18:	4611      	mov	r1, r2
   14e1a:	f7f9 fdab 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
   14e1e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
   14e22:	4618      	mov	r0, r3
   14e24:	f7f9 fb7e 	bl	e524 <_ZNK8Position4getXEv>
   14e28:	4603      	mov	r3, r0
   14e2a:	4618      	mov	r0, r3
   14e2c:	f8df 1524 	ldr.w	r1, [pc, #1316]	; 15354 <_ZN19RecalibrerOdometrie6updateEv+0x808>
   14e30:	f005 ff96 	bl	1ad60 <__aeabi_fcmpgt>
   14e34:	4603      	mov	r3, r0
   14e36:	2b00      	cmp	r3, #0
   14e38:	d12a      	bne.n	14e90 <_ZN19RecalibrerOdometrie6updateEv+0x344>
   14e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14e3e:	681b      	ldr	r3, [r3, #0]
   14e40:	6a9b      	ldr	r3, [r3, #40]
   14e42:	2b02      	cmp	r3, #2
   14e44:	d005      	beq.n	14e52 <_ZN19RecalibrerOdometrie6updateEv+0x306>
   14e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14e4a:	681b      	ldr	r3, [r3, #0]
   14e4c:	6a9b      	ldr	r3, [r3, #40]
   14e4e:	2b03      	cmp	r3, #3
   14e50:	d122      	bne.n	14e98 <_ZN19RecalibrerOdometrie6updateEv+0x34c>
   14e52:	f8df 34e4 	ldr.w	r3, [pc, #1252]	; 15338 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   14e56:	681a      	ldr	r2, [r3, #0]
   14e58:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
   14e5c:	4618      	mov	r0, r3
   14e5e:	4611      	mov	r1, r2
   14e60:	f7f4 fc7e 	bl	9760 <_ZNK9Odometrie6getPosEv>
   14e64:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
   14e68:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
   14e6c:	4618      	mov	r0, r3
   14e6e:	4611      	mov	r1, r2
   14e70:	f7f9 fd80 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
   14e74:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
   14e78:	4618      	mov	r0, r3
   14e7a:	f7f9 fb53 	bl	e524 <_ZNK8Position4getXEv>
   14e7e:	4603      	mov	r3, r0
   14e80:	4618      	mov	r0, r3
   14e82:	f8df 14d4 	ldr.w	r1, [pc, #1236]	; 15358 <_ZN19RecalibrerOdometrie6updateEv+0x80c>
   14e86:	f005 ff4d 	bl	1ad24 <__aeabi_fcmplt>
   14e8a:	4603      	mov	r3, r0
   14e8c:	2b00      	cmp	r3, #0
   14e8e:	d003      	beq.n	14e98 <_ZN19RecalibrerOdometrie6updateEv+0x34c>
   14e90:	f04f 0301 	mov.w	r3, #1	; 0x1
   14e94:	613b      	str	r3, [r7, #16]
   14e96:	e002      	b.n	14e9e <_ZN19RecalibrerOdometrie6updateEv+0x352>
   14e98:	f04f 0300 	mov.w	r3, #0	; 0x0
   14e9c:	613b      	str	r3, [r7, #16]
   14e9e:	693b      	ldr	r3, [r7, #16]
   14ea0:	2b00      	cmp	r3, #0
   14ea2:	f000 823b 	beq.w	1531c <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
                || ((this->coinRecalage == COTE_NOTRE_DEPART_HAUT || this->coinRecalage == COTE_NOTRE_DEPART_BAS)
                  && Odometrie::odometrie->getPos().getPosition().getX() < 150)
                 ))// && Odometrie::odometrie->getPos().getPosition().getY() > 1500)//1850)
        {
#ifdef ROBOTHW //A adapter à la taille du robot
            if(this->coinRecalage == COTE_DEPART_ADVERSAIRE_HAUT || this->coinRecalage == COTE_DEPART_ADVERSAIRE_BAS)
   14ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14eaa:	681b      	ldr	r3, [r3, #0]
   14eac:	6a9b      	ldr	r3, [r3, #40]
   14eae:	2b00      	cmp	r3, #0
   14eb0:	d005      	beq.n	14ebe <_ZN19RecalibrerOdometrie6updateEv+0x372>
   14eb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14eb6:	681b      	ldr	r3, [r3, #0]
   14eb8:	6a9b      	ldr	r3, [r3, #40]
   14eba:	2b01      	cmp	r3, #1
   14ebc:	d114      	bne.n	14ee8 <_ZN19RecalibrerOdometrie6updateEv+0x39c>
                Odometrie::odometrie->setX((StrategieV2::getIsBlue() ? 95 : 2905)); // robot = 319mm de large
   14ebe:	f8df 3478 	ldr.w	r3, [pc, #1144]	; 15338 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   14ec2:	681b      	ldr	r3, [r3, #0]
   14ec4:	617b      	str	r3, [r7, #20]
   14ec6:	f000 fba9 	bl	1561c <_ZN11StrategieV29getIsBlueEv>
   14eca:	4603      	mov	r3, r0
   14ecc:	2b00      	cmp	r3, #0
   14ece:	d003      	beq.n	14ed8 <_ZN19RecalibrerOdometrie6updateEv+0x38c>
   14ed0:	f8df 3488 	ldr.w	r3, [pc, #1160]	; 1535c <_ZN19RecalibrerOdometrie6updateEv+0x810>
   14ed4:	61bb      	str	r3, [r7, #24]
   14ed6:	e002      	b.n	14ede <_ZN19RecalibrerOdometrie6updateEv+0x392>
   14ed8:	f8df 3484 	ldr.w	r3, [pc, #1156]	; 15360 <_ZN19RecalibrerOdometrie6updateEv+0x814>
   14edc:	61bb      	str	r3, [r7, #24]
   14ede:	6978      	ldr	r0, [r7, #20]
   14ee0:	69b9      	ldr	r1, [r7, #24]
   14ee2:	f7f4 fcf1 	bl	98c8 <_ZN9Odometrie4setXEf>
   14ee6:	e013      	b.n	14f10 <_ZN19RecalibrerOdometrie6updateEv+0x3c4>
            else
                Odometrie::odometrie->setX((StrategieV2::getIsBlue() ? 2905 : 95)); // robot = 319mm de large
   14ee8:	f8df 344c 	ldr.w	r3, [pc, #1100]	; 15338 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   14eec:	681b      	ldr	r3, [r3, #0]
   14eee:	61fb      	str	r3, [r7, #28]
   14ef0:	f000 fb94 	bl	1561c <_ZN11StrategieV29getIsBlueEv>
   14ef4:	4603      	mov	r3, r0
   14ef6:	2b00      	cmp	r3, #0
   14ef8:	d003      	beq.n	14f02 <_ZN19RecalibrerOdometrie6updateEv+0x3b6>
   14efa:	f8df 3464 	ldr.w	r3, [pc, #1124]	; 15360 <_ZN19RecalibrerOdometrie6updateEv+0x814>
   14efe:	623b      	str	r3, [r7, #32]
   14f00:	e002      	b.n	14f08 <_ZN19RecalibrerOdometrie6updateEv+0x3bc>
   14f02:	f8df 3458 	ldr.w	r3, [pc, #1112]	; 1535c <_ZN19RecalibrerOdometrie6updateEv+0x810>
   14f06:	623b      	str	r3, [r7, #32]
   14f08:	69f8      	ldr	r0, [r7, #28]
   14f0a:	6a39      	ldr	r1, [r7, #32]
   14f0c:	f7f4 fcdc 	bl	98c8 <_ZN9Odometrie4setXEf>
#endif
            //StrategieV2::setCurrentGoal(Position(goalPosition1.getX(), 1360), false);
            StrategieV2::setCurrentGoal(positionDepart, false);
   14f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14f14:	681a      	ldr	r2, [r3, #0]
   14f16:	f8df 3418 	ldr.w	r3, [pc, #1048]	; 15330 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   14f1a:	9300      	str	r3, [sp, #0]
   14f1c:	f102 0318 	add.w	r3, r2, #24	; 0x18
   14f20:	e893 0003 	ldmia.w	r3, {r0, r1}
   14f24:	f04f 0200 	mov.w	r2, #0	; 0x0
   14f28:	f8df 3408 	ldr.w	r3, [pc, #1032]	; 15334 <_ZN19RecalibrerOdometrie6updateEv+0x7e8>
   14f2c:	f000 fd96 	bl	15a5c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            StrategieV2::setEnTrainDeRecalibrer(false);
   14f30:	f04f 0000 	mov.w	r0, #0	; 0x0
   14f34:	f000 fb98 	bl	15668 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>
            status = 3;
   14f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14f3c:	681a      	ldr	r2, [r3, #0]
   14f3e:	f04f 0303 	mov.w	r3, #3	; 0x3
   14f42:	60d3      	str	r3, [r2, #12]
            timeBlockedY = 0;
   14f44:	f8df 2408 	ldr.w	r2, [pc, #1032]	; 15350 <_ZN19RecalibrerOdometrie6updateEv+0x804>
   14f48:	f04f 0300 	mov.w	r3, #0	; 0x0
   14f4c:	6013      	str	r3, [r2, #0]
   14f4e:	e1e5      	b.n	1531c <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        }
    }
    else if (status == 3) // attend d'être replacé
   14f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14f54:	681b      	ldr	r3, [r3, #0]
   14f56:	68db      	ldr	r3, [r3, #12]
   14f58:	2b03      	cmp	r3, #3
   14f5a:	f040 8082 	bne.w	15062 <_ZN19RecalibrerOdometrie6updateEv+0x516>
    {
        Position vect = positionDepart - Odometrie::odometrie->getPos().getPosition();
   14f5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14f62:	681b      	ldr	r3, [r3, #0]
   14f64:	f103 0418 	add.w	r4, r3, #24	; 0x18
   14f68:	4bf3      	ldr	r3, [pc, #972]	(15338 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   14f6a:	681a      	ldr	r2, [r3, #0]
   14f6c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
   14f70:	4618      	mov	r0, r3
   14f72:	4611      	mov	r1, r2
   14f74:	f7f4 fbf4 	bl	9760 <_ZNK9Odometrie6getPosEv>
   14f78:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   14f7c:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
   14f80:	4618      	mov	r0, r3
   14f82:	4611      	mov	r1, r2
   14f84:	f7f9 fcf6 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
   14f88:	f107 0344 	add.w	r3, r7, #68	; 0x44
   14f8c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
   14f90:	4618      	mov	r0, r3
   14f92:	4621      	mov	r1, r4
   14f94:	f7f9 fb20 	bl	e5d8 <_ZNK8PositionmiERKS_>
        if (vect.getNorme() < 40)
   14f98:	f107 0344 	add.w	r3, r7, #68	; 0x44
   14f9c:	4618      	mov	r0, r3
   14f9e:	f7f9 fc29 	bl	e7f4 <_ZNK8Position8getNormeEv>
   14fa2:	4602      	mov	r2, r0
   14fa4:	f04f 0300 	mov.w	r3, #0	; 0x0
   14fa8:	723b      	strb	r3, [r7, #8]
   14faa:	4610      	mov	r0, r2
   14fac:	49e3      	ldr	r1, [pc, #908]	(1533c <_ZN19RecalibrerOdometrie6updateEv+0x7f0>)
   14fae:	f005 feb9 	bl	1ad24 <__aeabi_fcmplt>
   14fb2:	4603      	mov	r3, r0
   14fb4:	2b00      	cmp	r3, #0
   14fb6:	d002      	beq.n	14fbe <_ZN19RecalibrerOdometrie6updateEv+0x472>
   14fb8:	f04f 0301 	mov.w	r3, #1	; 0x1
   14fbc:	723b      	strb	r3, [r7, #8]
   14fbe:	7a3b      	ldrb	r3, [r7, #8]
   14fc0:	2b00      	cmp	r3, #0
   14fc2:	f000 81ab 	beq.w	1531c <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        {
            if(this->coinRecalage == COTE_NOTRE_DEPART_BAS || this->coinRecalage == COTE_DEPART_ADVERSAIRE_BAS)
   14fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14fca:	681b      	ldr	r3, [r3, #0]
   14fcc:	6a9b      	ldr	r3, [r3, #40]
   14fce:	2b03      	cmp	r3, #3
   14fd0:	d005      	beq.n	14fde <_ZN19RecalibrerOdometrie6updateEv+0x492>
   14fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14fd6:	681b      	ldr	r3, [r3, #0]
   14fd8:	6a9b      	ldr	r3, [r3, #40]
   14fda:	2b01      	cmp	r3, #1
   14fdc:	d11d      	bne.n	1501a <_ZN19RecalibrerOdometrie6updateEv+0x4ce>
            {
                StrategieV2::setCurrentGoal(Position(positionDepart.getX(), 0), true, 0.5);
   14fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14fe2:	681b      	ldr	r3, [r3, #0]
   14fe4:	f103 0318 	add.w	r3, r3, #24	; 0x18
   14fe8:	4618      	mov	r0, r3
   14fea:	f7f9 fa9b 	bl	e524 <_ZNK8Position4getXEv>
   14fee:	4602      	mov	r2, r0
   14ff0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
   14ff4:	4618      	mov	r0, r3
   14ff6:	4611      	mov	r1, r2
   14ff8:	4ad1      	ldr	r2, [pc, #836]	(15340 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>)
   14ffa:	f04f 0301 	mov.w	r3, #1	; 0x1
   14ffe:	f7f9 fa7d 	bl	e4fc <_ZN8PositionC1Effb>
   15002:	4bcb      	ldr	r3, [pc, #812]	(15330 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>)
   15004:	9300      	str	r3, [sp, #0]
   15006:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
   1500a:	e893 0003 	ldmia.w	r3, {r0, r1}
   1500e:	f04f 0201 	mov.w	r2, #1	; 0x1
   15012:	4bcc      	ldr	r3, [pc, #816]	(15344 <_ZN19RecalibrerOdometrie6updateEv+0x7f8>)
   15014:	f000 fd22 	bl	15a5c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
   15018:	e01c      	b.n	15054 <_ZN19RecalibrerOdometrie6updateEv+0x508>
            }
            else
            {
                StrategieV2::setCurrentGoal(Position(positionDepart.getX(), 2000), true, 0.5);
   1501a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1501e:	681b      	ldr	r3, [r3, #0]
   15020:	f103 0318 	add.w	r3, r3, #24	; 0x18
   15024:	4618      	mov	r0, r3
   15026:	f7f9 fa7d 	bl	e524 <_ZNK8Position4getXEv>
   1502a:	4602      	mov	r2, r0
   1502c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
   15030:	4618      	mov	r0, r3
   15032:	4611      	mov	r1, r2
   15034:	4acb      	ldr	r2, [pc, #812]	(15364 <_ZN19RecalibrerOdometrie6updateEv+0x818>)
   15036:	f04f 0301 	mov.w	r3, #1	; 0x1
   1503a:	f7f9 fa5f 	bl	e4fc <_ZN8PositionC1Effb>
   1503e:	4bbc      	ldr	r3, [pc, #752]	(15330 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>)
   15040:	9300      	str	r3, [sp, #0]
   15042:	f107 03ec 	add.w	r3, r7, #236	; 0xec
   15046:	e893 0003 	ldmia.w	r3, {r0, r1}
   1504a:	f04f 0201 	mov.w	r2, #1	; 0x1
   1504e:	4bbd      	ldr	r3, [pc, #756]	(15344 <_ZN19RecalibrerOdometrie6updateEv+0x7f8>)
   15050:	f000 fd04 	bl	15a5c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            }
            status  = 4;
   15054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15058:	681a      	ldr	r2, [r3, #0]
   1505a:	f04f 0304 	mov.w	r3, #4	; 0x4
   1505e:	60d3      	str	r3, [r2, #12]
   15060:	e15c      	b.n	1531c <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        }
    }
    else if (status == 4) // attend d'avoir synchro sur Y
   15062:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15066:	681b      	ldr	r3, [r3, #0]
   15068:	68db      	ldr	r3, [r3, #12]
   1506a:	2b04      	cmp	r3, #4
   1506c:	f040 8117 	bne.w	1529e <_ZN19RecalibrerOdometrie6updateEv+0x752>
    {

        static int timeBlockedX = 0;
        //if (abs(Odometrie::odometrie->getVitesseLineaire()) < 0.005f) // if (fdc1->getValue().b && fdc2->getValue().b) // distance parcourue la derniere seconde
        Position vect = candidatPositionArrete - Odometrie::odometrie->getPos().getPosition();
   15070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15074:	681b      	ldr	r3, [r3, #0]
   15076:	f103 0420 	add.w	r4, r3, #32	; 0x20
   1507a:	4baf      	ldr	r3, [pc, #700]	(15338 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   1507c:	681a      	ldr	r2, [r3, #0]
   1507e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
   15082:	4618      	mov	r0, r3
   15084:	4611      	mov	r1, r2
   15086:	f7f4 fb6b 	bl	9760 <_ZNK9Odometrie6getPosEv>
   1508a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
   1508e:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
   15092:	4618      	mov	r0, r3
   15094:	4611      	mov	r1, r2
   15096:	f7f9 fc6d 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
   1509a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1509e:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
   150a2:	4618      	mov	r0, r3
   150a4:	4621      	mov	r1, r4
   150a6:	f7f9 fa97 	bl	e5d8 <_ZNK8PositionmiERKS_>
        if(abs(vect.getNorme()) < 5)//Si on a pas bougé de plus de Xmm du dernier candidat de position où le robot s'est arrêté
   150aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   150ae:	4618      	mov	r0, r3
   150b0:	f7f9 fba0 	bl	e7f4 <_ZNK8Position8getNormeEv>
   150b4:	4603      	mov	r3, r0
   150b6:	4618      	mov	r0, r3
   150b8:	49a1      	ldr	r1, [pc, #644]	(15340 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>)
   150ba:	f005 fe51 	bl	1ad60 <__aeabi_fcmpgt>
   150be:	4603      	mov	r3, r0
   150c0:	2b00      	cmp	r3, #0
   150c2:	d015      	beq.n	150f0 <_ZN19RecalibrerOdometrie6updateEv+0x5a4>
   150c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   150c8:	4618      	mov	r0, r3
   150ca:	f7f9 fb93 	bl	e7f4 <_ZNK8Position8getNormeEv>
   150ce:	4602      	mov	r2, r0
   150d0:	f04f 0300 	mov.w	r3, #0	; 0x0
   150d4:	71fb      	strb	r3, [r7, #7]
   150d6:	4610      	mov	r0, r2
   150d8:	4999      	ldr	r1, [pc, #612]	(15340 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>)
   150da:	f005 fe19 	bl	1ad10 <__aeabi_fcmpeq>
   150de:	4603      	mov	r3, r0
   150e0:	2b00      	cmp	r3, #0
   150e2:	d102      	bne.n	150ea <_ZN19RecalibrerOdometrie6updateEv+0x59e>
   150e4:	f04f 0301 	mov.w	r3, #1	; 0x1
   150e8:	71fb      	strb	r3, [r7, #7]
   150ea:	79fb      	ldrb	r3, [r7, #7]
   150ec:	627b      	str	r3, [r7, #36]
   150ee:	e014      	b.n	1511a <_ZN19RecalibrerOdometrie6updateEv+0x5ce>
   150f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   150f4:	4618      	mov	r0, r3
   150f6:	f7f9 fb7d 	bl	e7f4 <_ZNK8Position8getNormeEv>
   150fa:	4602      	mov	r2, r0
   150fc:	f04f 0300 	mov.w	r3, #0	; 0x0
   15100:	71bb      	strb	r3, [r7, #6]
   15102:	4610      	mov	r0, r2
   15104:	4991      	ldr	r1, [pc, #580]	(1534c <_ZN19RecalibrerOdometrie6updateEv+0x800>)
   15106:	f005 fe2b 	bl	1ad60 <__aeabi_fcmpgt>
   1510a:	4603      	mov	r3, r0
   1510c:	2b00      	cmp	r3, #0
   1510e:	d002      	beq.n	15116 <_ZN19RecalibrerOdometrie6updateEv+0x5ca>
   15110:	f04f 0301 	mov.w	r3, #1	; 0x1
   15114:	71bb      	strb	r3, [r7, #6]
   15116:	79bb      	ldrb	r3, [r7, #6]
   15118:	627b      	str	r3, [r7, #36]
   1511a:	6a7b      	ldr	r3, [r7, #36]
   1511c:	2b00      	cmp	r3, #0
   1511e:	d006      	beq.n	1512e <_ZN19RecalibrerOdometrie6updateEv+0x5e2>
        {
            timeBlockedX ++;
   15120:	4b91      	ldr	r3, [pc, #580]	(15368 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   15122:	681b      	ldr	r3, [r3, #0]
   15124:	f103 0201 	add.w	r2, r3, #1	; 0x1
   15128:	4b8f      	ldr	r3, [pc, #572]	(15368 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   1512a:	601a      	str	r2, [r3, #0]
   1512c:	e021      	b.n	15172 <_ZN19RecalibrerOdometrie6updateEv+0x626>
//            allumerLED2();
        }
        else
        {
            timeBlockedX = 0;
   1512e:	4a8e      	ldr	r2, [pc, #568]	(15368 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   15130:	f04f 0300 	mov.w	r3, #0	; 0x0
   15134:	6013      	str	r3, [r2, #0]
            candidatPositionArrete = Odometrie::odometrie->getPos().getPosition();
   15136:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1513a:	681b      	ldr	r3, [r3, #0]
   1513c:	f103 0420 	add.w	r4, r3, #32	; 0x20
   15140:	4b7d      	ldr	r3, [pc, #500]	(15338 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   15142:	681a      	ldr	r2, [r3, #0]
   15144:	f507 7388 	add.w	r3, r7, #272	; 0x110
   15148:	4618      	mov	r0, r3
   1514a:	4611      	mov	r1, r2
   1514c:	f7f4 fb08 	bl	9760 <_ZNK9Odometrie6getPosEv>
   15150:	f507 7384 	add.w	r3, r7, #264	; 0x108
   15154:	f507 7288 	add.w	r2, r7, #272	; 0x110
   15158:	4618      	mov	r0, r3
   1515a:	4611      	mov	r1, r2
   1515c:	f7f9 fc0a 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
   15160:	4620      	mov	r0, r4
   15162:	f507 7384 	add.w	r3, r7, #264	; 0x108
   15166:	e893 0006 	ldmia.w	r3, {r1, r2}
   1516a:	f7f9 fa5b 	bl	e624 <_ZN8PositionaSES_>
            eteindreLED2();
   1516e:	f7f6 fdf3 	bl	bd58 <_Z12eteindreLED2v>
        }
        if (timeBlockedX > 100 &&
   15172:	4b7d      	ldr	r3, [pc, #500]	(15368 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   15174:	681b      	ldr	r3, [r3, #0]
   15176:	2b64      	cmp	r3, #100
   15178:	dd55      	ble.n	15226 <_ZN19RecalibrerOdometrie6updateEv+0x6da>
   1517a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1517e:	681b      	ldr	r3, [r3, #0]
   15180:	6a9b      	ldr	r3, [r3, #40]
   15182:	2b00      	cmp	r3, #0
   15184:	d005      	beq.n	15192 <_ZN19RecalibrerOdometrie6updateEv+0x646>
   15186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1518a:	681b      	ldr	r3, [r3, #0]
   1518c:	6a9b      	ldr	r3, [r3, #40]
   1518e:	2b02      	cmp	r3, #2
   15190:	d11c      	bne.n	151cc <_ZN19RecalibrerOdometrie6updateEv+0x680>
   15192:	4b69      	ldr	r3, [pc, #420]	(15338 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   15194:	681a      	ldr	r2, [r3, #0]
   15196:	f507 7392 	add.w	r3, r7, #292	; 0x124
   1519a:	4618      	mov	r0, r3
   1519c:	4611      	mov	r1, r2
   1519e:	f7f4 fadf 	bl	9760 <_ZNK9Odometrie6getPosEv>
   151a2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
   151a6:	f507 7292 	add.w	r2, r7, #292	; 0x124
   151aa:	4618      	mov	r0, r3
   151ac:	4611      	mov	r1, r2
   151ae:	f7f9 fbe1 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
   151b2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
   151b6:	4618      	mov	r0, r3
   151b8:	f7f9 f9c0 	bl	e53c <_ZNK8Position4getYEv>
   151bc:	4603      	mov	r3, r0
   151be:	4618      	mov	r0, r3
   151c0:	496a      	ldr	r1, [pc, #424]	(1536c <_ZN19RecalibrerOdometrie6updateEv+0x820>)
   151c2:	f005 fdcd 	bl	1ad60 <__aeabi_fcmpgt>
   151c6:	4603      	mov	r3, r0
   151c8:	2b00      	cmp	r3, #0
   151ca:	d128      	bne.n	1521e <_ZN19RecalibrerOdometrie6updateEv+0x6d2>
   151cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   151d0:	681b      	ldr	r3, [r3, #0]
   151d2:	6a9b      	ldr	r3, [r3, #40]
   151d4:	2b01      	cmp	r3, #1
   151d6:	d005      	beq.n	151e4 <_ZN19RecalibrerOdometrie6updateEv+0x698>
   151d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   151dc:	681b      	ldr	r3, [r3, #0]
   151de:	6a9b      	ldr	r3, [r3, #40]
   151e0:	2b03      	cmp	r3, #3
   151e2:	d120      	bne.n	15226 <_ZN19RecalibrerOdometrie6updateEv+0x6da>
   151e4:	4b54      	ldr	r3, [pc, #336]	(15338 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   151e6:	681a      	ldr	r2, [r3, #0]
   151e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
   151ec:	4618      	mov	r0, r3
   151ee:	4611      	mov	r1, r2
   151f0:	f7f4 fab6 	bl	9760 <_ZNK9Odometrie6getPosEv>
   151f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
   151f8:	f507 729c 	add.w	r2, r7, #312	; 0x138
   151fc:	4618      	mov	r0, r3
   151fe:	4611      	mov	r1, r2
   15200:	f7f9 fbb8 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
   15204:	f507 7398 	add.w	r3, r7, #304	; 0x130
   15208:	4618      	mov	r0, r3
   1520a:	f7f9 f997 	bl	e53c <_ZNK8Position4getYEv>
   1520e:	4603      	mov	r3, r0
   15210:	4618      	mov	r0, r3
   15212:	4951      	ldr	r1, [pc, #324]	(15358 <_ZN19RecalibrerOdometrie6updateEv+0x80c>)
   15214:	f005 fd86 	bl	1ad24 <__aeabi_fcmplt>
   15218:	4603      	mov	r3, r0
   1521a:	2b00      	cmp	r3, #0
   1521c:	d003      	beq.n	15226 <_ZN19RecalibrerOdometrie6updateEv+0x6da>
   1521e:	f04f 0301 	mov.w	r3, #1	; 0x1
   15222:	62bb      	str	r3, [r7, #40]
   15224:	e002      	b.n	1522c <_ZN19RecalibrerOdometrie6updateEv+0x6e0>
   15226:	f04f 0300 	mov.w	r3, #0	; 0x0
   1522a:	62bb      	str	r3, [r7, #40]
   1522c:	6abb      	ldr	r3, [r7, #40]
   1522e:	2b00      	cmp	r3, #0
   15230:	d074      	beq.n	1531c <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
              && Odometrie::odometrie->getPos().getPosition().getY() < 150)
             ))// && (StrategieV2::getIsBlue() ? Odometrie::odometrie->getPos().getPosition().getX() < 200 : Odometrie::odometrie->getPos().getPosition().getX() > 2800))
        {
#ifdef ROBOTHW //A adapter à la taille du robot

            if(this->coinRecalage == COTE_DEPART_ADVERSAIRE_HAUT || this->coinRecalage == COTE_NOTRE_DEPART_HAUT)
   15232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15236:	681b      	ldr	r3, [r3, #0]
   15238:	6a9b      	ldr	r3, [r3, #40]
   1523a:	2b00      	cmp	r3, #0
   1523c:	d005      	beq.n	1524a <_ZN19RecalibrerOdometrie6updateEv+0x6fe>
   1523e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15242:	681b      	ldr	r3, [r3, #0]
   15244:	6a9b      	ldr	r3, [r3, #40]
   15246:	2b02      	cmp	r3, #2
   15248:	d106      	bne.n	15258 <_ZN19RecalibrerOdometrie6updateEv+0x70c>
                Odometrie::odometrie->setY(2000-95);
   1524a:	4b3b      	ldr	r3, [pc, #236]	(15338 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   1524c:	681b      	ldr	r3, [r3, #0]
   1524e:	4618      	mov	r0, r3
   15250:	4947      	ldr	r1, [pc, #284]	(15370 <_ZN19RecalibrerOdometrie6updateEv+0x824>)
   15252:	f7f4 fb03 	bl	985c <_ZN9Odometrie4setYEf>
   15256:	e005      	b.n	15264 <_ZN19RecalibrerOdometrie6updateEv+0x718>
            else
                Odometrie::odometrie->setY(95);
   15258:	4b37      	ldr	r3, [pc, #220]	(15338 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   1525a:	681b      	ldr	r3, [r3, #0]
   1525c:	4618      	mov	r0, r3
   1525e:	493f      	ldr	r1, [pc, #252]	(1535c <_ZN19RecalibrerOdometrie6updateEv+0x810>)
   15260:	f7f4 fafc 	bl	985c <_ZN9Odometrie4setYEf>
#endif
            StrategieV2::setEnTrainDeRecalibrer(false);
   15264:	f04f 0000 	mov.w	r0, #0	; 0x0
   15268:	f000 f9fe 	bl	15668 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>
            StrategieV2::setCurrentGoal(positionDepart, false);
   1526c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15270:	681a      	ldr	r2, [r3, #0]
   15272:	4b2f      	ldr	r3, [pc, #188]	(15330 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>)
   15274:	9300      	str	r3, [sp, #0]
   15276:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1527a:	e893 0003 	ldmia.w	r3, {r0, r1}
   1527e:	f04f 0200 	mov.w	r2, #0	; 0x0
   15282:	4b2c      	ldr	r3, [pc, #176]	(15334 <_ZN19RecalibrerOdometrie6updateEv+0x7e8>)
   15284:	f000 fbea 	bl	15a5c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            //StrategieV2::setCurrentGoal(Odometrie::odometrie->getPos().getPosition()+Position((StrategieV2::getIsBlue()?200:-200), 0), false, 1); // on avance  encore un peu
            //goalPosition2 = Odometrie::odometrie->getPos().getPosition()+Position((StrategieV2::getIsBlue()?200:-200), 0);
            status = 5;
   15288:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1528c:	681a      	ldr	r2, [r3, #0]
   1528e:	f04f 0305 	mov.w	r3, #5	; 0x5
   15292:	60d3      	str	r3, [r2, #12]
            timeBlockedX = 0;
   15294:	4a34      	ldr	r2, [pc, #208]	(15368 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   15296:	f04f 0300 	mov.w	r3, #0	; 0x0
   1529a:	6013      	str	r3, [r2, #0]
   1529c:	e03e      	b.n	1531c <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        }
    }
    else if (status == 5)
   1529e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   152a2:	681b      	ldr	r3, [r3, #0]
   152a4:	68db      	ldr	r3, [r3, #12]
   152a6:	2b05      	cmp	r3, #5
   152a8:	d138      	bne.n	1531c <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
    {
        Position vect = positionDepart - Odometrie::odometrie->getPos().getPosition();//positionGoal2 -
   152aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   152ae:	681b      	ldr	r3, [r3, #0]
   152b0:	f103 0418 	add.w	r4, r3, #24	; 0x18
   152b4:	4b20      	ldr	r3, [pc, #128]	(15338 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   152b6:	681a      	ldr	r2, [r3, #0]
   152b8:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
   152bc:	4618      	mov	r0, r3
   152be:	4611      	mov	r1, r2
   152c0:	f7f4 fa4e 	bl	9760 <_ZNK9Odometrie6getPosEv>
   152c4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
   152c8:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
   152cc:	4618      	mov	r0, r3
   152ce:	4611      	mov	r1, r2
   152d0:	f7f9 fb50 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
   152d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
   152d8:	f507 72a2 	add.w	r2, r7, #324	; 0x144
   152dc:	4618      	mov	r0, r3
   152de:	4621      	mov	r1, r4
   152e0:	f7f9 f97a 	bl	e5d8 <_ZNK8PositionmiERKS_>
        if (vect.getNorme() < 40)
   152e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
   152e8:	4618      	mov	r0, r3
   152ea:	f7f9 fa83 	bl	e7f4 <_ZNK8Position8getNormeEv>
   152ee:	4602      	mov	r2, r0
   152f0:	f04f 0300 	mov.w	r3, #0	; 0x0
   152f4:	717b      	strb	r3, [r7, #5]
   152f6:	4610      	mov	r0, r2
   152f8:	4910      	ldr	r1, [pc, #64]	(1533c <_ZN19RecalibrerOdometrie6updateEv+0x7f0>)
   152fa:	f005 fd13 	bl	1ad24 <__aeabi_fcmplt>
   152fe:	4603      	mov	r3, r0
   15300:	2b00      	cmp	r3, #0
   15302:	d002      	beq.n	1530a <_ZN19RecalibrerOdometrie6updateEv+0x7be>
   15304:	f04f 0301 	mov.w	r3, #1	; 0x1
   15308:	717b      	strb	r3, [r7, #5]
   1530a:	797b      	ldrb	r3, [r7, #5]
   1530c:	2b00      	cmp	r3, #0
   1530e:	d005      	beq.n	1531c <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        {
            status = -1;
   15310:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15314:	681a      	ldr	r2, [r3, #0]
   15316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1531a:	60d3      	str	r3, [r2, #12]
        }
    }
    return status;
   1531c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15320:	681b      	ldr	r3, [r3, #0]
   15322:	68db      	ldr	r3, [r3, #12]
//#endif
}
   15324:	4618      	mov	r0, r3
   15326:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
   1532a:	46bd      	mov	sp, r7
   1532c:	bd90      	pop	{r4, r7, pc}
   1532e:	46c0      	nop			(mov r8, r8)
   15330:	c2c80000 	.word	0xc2c80000
   15334:	40400000 	.word	0x40400000
   15338:	20000570 	.word	0x20000570
   1533c:	42200000 	.word	0x42200000
   15340:	00000000 	.word	0x00000000
   15344:	3f000000 	.word	0x3f000000
   15348:	453b8000 	.word	0x453b8000
   1534c:	c0a00000 	.word	0xc0a00000
   15350:	2000059c 	.word	0x2000059c
   15354:	45322000 	.word	0x45322000
   15358:	43160000 	.word	0x43160000
   1535c:	42be0000 	.word	0x42be0000
   15360:	45359000 	.word	0x45359000
   15364:	44fa0000 	.word	0x44fa0000
   15368:	20000598 	.word	0x20000598
   1536c:	44e74000 	.word	0x44e74000
   15370:	44ee2000 	.word	0x44ee2000

00015374 <_ZN19RecalibrerOdometrieD0Ev>:
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
    this->coinRecalage = coinRecalage;
}

RecalibrerOdometrie::~RecalibrerOdometrie()
   15374:	b580      	push	{r7, lr}
   15376:	b082      	sub	sp, #8
   15378:	af00      	add	r7, sp, #0
   1537a:	6078      	str	r0, [r7, #4]
   1537c:	687a      	ldr	r2, [r7, #4]
   1537e:	4b0a      	ldr	r3, [pc, #40]	(153a8 <_ZN19RecalibrerOdometrieD0Ev+0x34>)
   15380:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   15382:	687b      	ldr	r3, [r7, #4]
   15384:	4618      	mov	r0, r3
   15386:	f7ff fb79 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
   1538a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1538e:	b2db      	uxtb	r3, r3
   15390:	2b00      	cmp	r3, #0
   15392:	d002      	beq.n	1539a <_ZN19RecalibrerOdometrieD0Ev+0x26>
   15394:	6878      	ldr	r0, [r7, #4]
   15396:	f7f8 fff1 	bl	e37c <_ZdlPv>
   1539a:	687b      	ldr	r3, [r7, #4]
   1539c:	4618      	mov	r0, r3
   1539e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   153a2:	46bd      	mov	sp, r7
   153a4:	bd80      	pop	{r7, pc}
   153a6:	46c0      	nop			(mov r8, r8)
   153a8:	00021b70 	.word	0x00021b70

000153ac <_ZN19RecalibrerOdometrieD1Ev>:
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
    this->coinRecalage = coinRecalage;
}

RecalibrerOdometrie::~RecalibrerOdometrie()
   153ac:	b580      	push	{r7, lr}
   153ae:	b082      	sub	sp, #8
   153b0:	af00      	add	r7, sp, #0
   153b2:	6078      	str	r0, [r7, #4]
   153b4:	687a      	ldr	r2, [r7, #4]
   153b6:	4b0a      	ldr	r3, [pc, #40]	(153e0 <_ZN19RecalibrerOdometrieD1Ev+0x34>)
   153b8:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   153ba:	687b      	ldr	r3, [r7, #4]
   153bc:	4618      	mov	r0, r3
   153be:	f7ff fb5d 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
   153c2:	f04f 0300 	mov.w	r3, #0	; 0x0
   153c6:	b2db      	uxtb	r3, r3
   153c8:	2b00      	cmp	r3, #0
   153ca:	d002      	beq.n	153d2 <_ZN19RecalibrerOdometrieD1Ev+0x26>
   153cc:	6878      	ldr	r0, [r7, #4]
   153ce:	f7f8 ffd5 	bl	e37c <_ZdlPv>
   153d2:	687b      	ldr	r3, [r7, #4]
   153d4:	4618      	mov	r0, r3
   153d6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   153da:	46bd      	mov	sp, r7
   153dc:	bd80      	pop	{r7, pc}
   153de:	46c0      	nop			(mov r8, r8)
   153e0:	00021b70 	.word	0x00021b70

000153e4 <_ZN19RecalibrerOdometrieD2Ev>:
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
    this->coinRecalage = coinRecalage;
}

RecalibrerOdometrie::~RecalibrerOdometrie()
   153e4:	b580      	push	{r7, lr}
   153e6:	b082      	sub	sp, #8
   153e8:	af00      	add	r7, sp, #0
   153ea:	6078      	str	r0, [r7, #4]
   153ec:	687a      	ldr	r2, [r7, #4]
   153ee:	4b0a      	ldr	r3, [pc, #40]	(15418 <_ZN19RecalibrerOdometrieD2Ev+0x34>)
   153f0:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   153f2:	687b      	ldr	r3, [r7, #4]
   153f4:	4618      	mov	r0, r3
   153f6:	f7ff fb41 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
   153fa:	f04f 0300 	mov.w	r3, #0	; 0x0
   153fe:	b2db      	uxtb	r3, r3
   15400:	2b00      	cmp	r3, #0
   15402:	d002      	beq.n	1540a <_ZN19RecalibrerOdometrieD2Ev+0x26>
   15404:	6878      	ldr	r0, [r7, #4]
   15406:	f7f8 ffb9 	bl	e37c <_ZdlPv>
   1540a:	687b      	ldr	r3, [r7, #4]
   1540c:	4618      	mov	r0, r3
   1540e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   15412:	46bd      	mov	sp, r7
   15414:	bd80      	pop	{r7, pc}
   15416:	46c0      	nop			(mov r8, r8)
   15418:	00021b70 	.word	0x00021b70

0001541c <_ZN19RecalibrerOdometrieC1Eb8Positioni>:
#include "leds.h"
#ifndef ROBOTHW
#include <QDebug>
#endif

RecalibrerOdometrie::RecalibrerOdometrie(bool blue, Position positionDepart, int coinRecalage) : MediumLevelAction()
   1541c:	b590      	push	{r4, r7, lr}
   1541e:	b089      	sub	sp, #36
   15420:	af00      	add	r7, sp, #0
   15422:	60f8      	str	r0, [r7, #12]
   15424:	4608      	mov	r0, r1
   15426:	4639      	mov	r1, r7
   15428:	e881 000c 	stmia.w	r1, {r2, r3}
   1542c:	4603      	mov	r3, r0
   1542e:	72fb      	strb	r3, [r7, #11]
   15430:	68fc      	ldr	r4, [r7, #12]
   15432:	f107 0310 	add.w	r3, r7, #16	; 0x10
   15436:	4618      	mov	r0, r3
   15438:	4923      	ldr	r1, [pc, #140]	(154c8 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   1543a:	4a23      	ldr	r2, [pc, #140]	(154c8 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   1543c:	f04f 0301 	mov.w	r3, #1	; 0x1
   15440:	f7f9 f85c 	bl	e4fc <_ZN8PositionC1Effb>
   15444:	4620      	mov	r0, r4
   15446:	f107 0310 	add.w	r3, r7, #16	; 0x10
   1544a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1544e:	f7ff fb55 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
   15452:	68fa      	ldr	r2, [r7, #12]
   15454:	4b1d      	ldr	r3, [pc, #116]	(154cc <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xb0>)
   15456:	6013      	str	r3, [r2, #0]
   15458:	68fb      	ldr	r3, [r7, #12]
   1545a:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1545e:	4618      	mov	r0, r3
   15460:	f7f9 f824 	bl	e4ac <_ZN8PositionC1Ev>
   15464:	68fb      	ldr	r3, [r7, #12]
   15466:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1546a:	4618      	mov	r0, r3
   1546c:	f7f9 f81e 	bl	e4ac <_ZN8PositionC1Ev>
{
    this->isBlue = blue;
   15470:	68fa      	ldr	r2, [r7, #12]
   15472:	7afb      	ldrb	r3, [r7, #11]
   15474:	f882 302c 	strb.w	r3, [r2, #44]
    this->positionDepart = positionDepart;//Position(700, 3000, isBlue);
   15478:	68fb      	ldr	r3, [r7, #12]
   1547a:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1547e:	4618      	mov	r0, r3
   15480:	463b      	mov	r3, r7
   15482:	e893 0006 	ldmia.w	r3, {r1, r2}
   15486:	f7f9 f8cd 	bl	e624 <_ZN8PositionaSES_>
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
   1548a:	68fb      	ldr	r3, [r7, #12]
   1548c:	f103 0420 	add.w	r4, r3, #32	; 0x20
   15490:	68fb      	ldr	r3, [r7, #12]
   15492:	f893 c02c 	ldrb.w	ip, [r3, #44]
   15496:	f107 0318 	add.w	r3, r7, #24	; 0x18
   1549a:	4618      	mov	r0, r3
   1549c:	490a      	ldr	r1, [pc, #40]	(154c8 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   1549e:	4a0a      	ldr	r2, [pc, #40]	(154c8 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   154a0:	4663      	mov	r3, ip
   154a2:	f7f9 f82b 	bl	e4fc <_ZN8PositionC1Effb>
   154a6:	4620      	mov	r0, r4
   154a8:	f107 0318 	add.w	r3, r7, #24	; 0x18
   154ac:	e893 0006 	ldmia.w	r3, {r1, r2}
   154b0:	f7f9 f8b8 	bl	e624 <_ZN8PositionaSES_>
    this->coinRecalage = coinRecalage;
   154b4:	68fa      	ldr	r2, [r7, #12]
   154b6:	6b3b      	ldr	r3, [r7, #48]
   154b8:	6293      	str	r3, [r2, #40]
}
   154ba:	68fb      	ldr	r3, [r7, #12]
   154bc:	4618      	mov	r0, r3
   154be:	f107 0724 	add.w	r7, r7, #36	; 0x24
   154c2:	46bd      	mov	sp, r7
   154c4:	bd90      	pop	{r4, r7, pc}
   154c6:	46c0      	nop			(mov r8, r8)
   154c8:	00000000 	.word	0x00000000
   154cc:	00021b70 	.word	0x00021b70

000154d0 <_ZN19RecalibrerOdometrieC2Eb8Positioni>:
#include "leds.h"
#ifndef ROBOTHW
#include <QDebug>
#endif

RecalibrerOdometrie::RecalibrerOdometrie(bool blue, Position positionDepart, int coinRecalage) : MediumLevelAction()
   154d0:	b590      	push	{r4, r7, lr}
   154d2:	b089      	sub	sp, #36
   154d4:	af00      	add	r7, sp, #0
   154d6:	60f8      	str	r0, [r7, #12]
   154d8:	4608      	mov	r0, r1
   154da:	4639      	mov	r1, r7
   154dc:	e881 000c 	stmia.w	r1, {r2, r3}
   154e0:	4603      	mov	r3, r0
   154e2:	72fb      	strb	r3, [r7, #11]
   154e4:	68fc      	ldr	r4, [r7, #12]
   154e6:	f107 0310 	add.w	r3, r7, #16	; 0x10
   154ea:	4618      	mov	r0, r3
   154ec:	4923      	ldr	r1, [pc, #140]	(1557c <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   154ee:	4a23      	ldr	r2, [pc, #140]	(1557c <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   154f0:	f04f 0301 	mov.w	r3, #1	; 0x1
   154f4:	f7f9 f802 	bl	e4fc <_ZN8PositionC1Effb>
   154f8:	4620      	mov	r0, r4
   154fa:	f107 0310 	add.w	r3, r7, #16	; 0x10
   154fe:	e893 0006 	ldmia.w	r3, {r1, r2}
   15502:	f7ff fafb 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
   15506:	68fa      	ldr	r2, [r7, #12]
   15508:	4b1d      	ldr	r3, [pc, #116]	(15580 <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xb0>)
   1550a:	6013      	str	r3, [r2, #0]
   1550c:	68fb      	ldr	r3, [r7, #12]
   1550e:	f103 0318 	add.w	r3, r3, #24	; 0x18
   15512:	4618      	mov	r0, r3
   15514:	f7f8 ffca 	bl	e4ac <_ZN8PositionC1Ev>
   15518:	68fb      	ldr	r3, [r7, #12]
   1551a:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1551e:	4618      	mov	r0, r3
   15520:	f7f8 ffc4 	bl	e4ac <_ZN8PositionC1Ev>
{
    this->isBlue = blue;
   15524:	68fa      	ldr	r2, [r7, #12]
   15526:	7afb      	ldrb	r3, [r7, #11]
   15528:	f882 302c 	strb.w	r3, [r2, #44]
    this->positionDepart = positionDepart;//Position(700, 3000, isBlue);
   1552c:	68fb      	ldr	r3, [r7, #12]
   1552e:	f103 0318 	add.w	r3, r3, #24	; 0x18
   15532:	4618      	mov	r0, r3
   15534:	463b      	mov	r3, r7
   15536:	e893 0006 	ldmia.w	r3, {r1, r2}
   1553a:	f7f9 f873 	bl	e624 <_ZN8PositionaSES_>
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
   1553e:	68fb      	ldr	r3, [r7, #12]
   15540:	f103 0420 	add.w	r4, r3, #32	; 0x20
   15544:	68fb      	ldr	r3, [r7, #12]
   15546:	f893 c02c 	ldrb.w	ip, [r3, #44]
   1554a:	f107 0318 	add.w	r3, r7, #24	; 0x18
   1554e:	4618      	mov	r0, r3
   15550:	490a      	ldr	r1, [pc, #40]	(1557c <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   15552:	4a0a      	ldr	r2, [pc, #40]	(1557c <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   15554:	4663      	mov	r3, ip
   15556:	f7f8 ffd1 	bl	e4fc <_ZN8PositionC1Effb>
   1555a:	4620      	mov	r0, r4
   1555c:	f107 0318 	add.w	r3, r7, #24	; 0x18
   15560:	e893 0006 	ldmia.w	r3, {r1, r2}
   15564:	f7f9 f85e 	bl	e624 <_ZN8PositionaSES_>
    this->coinRecalage = coinRecalage;
   15568:	68fa      	ldr	r2, [r7, #12]
   1556a:	6b3b      	ldr	r3, [r7, #48]
   1556c:	6293      	str	r3, [r2, #40]
}
   1556e:	68fb      	ldr	r3, [r7, #12]
   15570:	4618      	mov	r0, r3
   15572:	f107 0724 	add.w	r7, r7, #36	; 0x24
   15576:	46bd      	mov	sp, r7
   15578:	bd90      	pop	{r4, r7, pc}
   1557a:	46c0      	nop			(mov r8, r8)
   1557c:	00000000 	.word	0x00000000
   15580:	00021b70 	.word	0x00021b70

00015584 <_ZN11StrategieV212getTimeSpentEv>:
StrategieV2::~StrategieV2()
{
    //dtor
}

long StrategieV2::getTimeSpent()
   15584:	b480      	push	{r7}
   15586:	af00      	add	r7, sp, #0
{
    return updateCount * 5;
   15588:	4b04      	ldr	r3, [pc, #16]	(1559c <_ZN11StrategieV212getTimeSpentEv+0x18>)
   1558a:	681a      	ldr	r2, [r3, #0]
   1558c:	4613      	mov	r3, r2
   1558e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15592:	4413      	add	r3, r2
}
   15594:	4618      	mov	r0, r3
   15596:	46bd      	mov	sp, r7
   15598:	bc80      	pop	{r7}
   1559a:	4770      	bx	lr
   1559c:	200005a4 	.word	0x200005a4

000155a0 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>:
        delete currentCommand;
    currentCommand = new CommandTournerVers(a, maxSpeed); // create the command
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
    StrategieV2::emptySharpsToCheck();
}
void StrategieV2::addTemporaryAction(MediumLevelAction* action)
   155a0:	b480      	push	{r7}
   155a2:	b083      	sub	sp, #12
   155a4:	af00      	add	r7, sp, #0
   155a6:	6078      	str	r0, [r7, #4]
{
    currentAction = action;
   155a8:	4a05      	ldr	r2, [pc, #20]	(155c0 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction+0x20>)
   155aa:	687b      	ldr	r3, [r7, #4]
   155ac:	6013      	str	r3, [r2, #0]
    mustDeleteAction = true; // this is a temporary action that needs to be deleted
   155ae:	4a05      	ldr	r2, [pc, #20]	(155c4 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction+0x24>)
   155b0:	f04f 0301 	mov.w	r3, #1	; 0x1
   155b4:	7013      	strb	r3, [r2, #0]
}
   155b6:	f107 070c 	add.w	r7, r7, #12	; 0xc
   155ba:	46bd      	mov	sp, r7
   155bc:	bc80      	pop	{r7}
   155be:	4770      	bx	lr
   155c0:	200005ac 	.word	0x200005ac
   155c4:	2000063a 	.word	0x2000063a

000155c8 <_ZN11StrategieV214setJustAvoidedEb>:
void StrategieV2::setJustAvoided(bool avoided)
   155c8:	b480      	push	{r7}
   155ca:	b083      	sub	sp, #12
   155cc:	af00      	add	r7, sp, #0
   155ce:	4603      	mov	r3, r0
   155d0:	71fb      	strb	r3, [r7, #7]
{
    hasJustAvoided = avoided;
   155d2:	4a04      	ldr	r2, [pc, #16]	(155e4 <_ZN11StrategieV214setJustAvoidedEb+0x1c>)
   155d4:	79fb      	ldrb	r3, [r7, #7]
   155d6:	7013      	strb	r3, [r2, #0]
}
   155d8:	f107 070c 	add.w	r7, r7, #12	; 0xc
   155dc:	46bd      	mov	sp, r7
   155de:	bc80      	pop	{r7}
   155e0:	4770      	bx	lr
   155e2:	46c0      	nop			(mov r8, r8)
   155e4:	20000639 	.word	0x20000639

000155e8 <_ZN11StrategieV214getJustAvoidedEv>:
bool StrategieV2::getJustAvoided()
   155e8:	b480      	push	{r7}
   155ea:	af00      	add	r7, sp, #0
{
    return hasJustAvoided;
   155ec:	4b02      	ldr	r3, [pc, #8]	(155f8 <_ZN11StrategieV214getJustAvoidedEv+0x10>)
   155ee:	781b      	ldrb	r3, [r3, #0]
}
   155f0:	4618      	mov	r0, r3
   155f2:	46bd      	mov	sp, r7
   155f4:	bc80      	pop	{r7}
   155f6:	4770      	bx	lr
   155f8:	20000639 	.word	0x20000639

000155fc <_ZN11StrategieV29setIsBlueEb>:
{
    somethingDetected = true;
    Asservissement::asservissement->setCommandSpeeds(NULL); // stoppe le robot
}

void StrategieV2::setIsBlue(bool blue)
   155fc:	b480      	push	{r7}
   155fe:	b083      	sub	sp, #12
   15600:	af00      	add	r7, sp, #0
   15602:	4603      	mov	r3, r0
   15604:	71fb      	strb	r3, [r7, #7]
{
    isBlue = blue;
   15606:	4a04      	ldr	r2, [pc, #16]	(15618 <_ZN11StrategieV29setIsBlueEb+0x1c>)
   15608:	79fb      	ldrb	r3, [r7, #7]
   1560a:	7013      	strb	r3, [r2, #0]
}
   1560c:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15610:	46bd      	mov	sp, r7
   15612:	bc80      	pop	{r7}
   15614:	4770      	bx	lr
   15616:	46c0      	nop			(mov r8, r8)
   15618:	20000645 	.word	0x20000645

0001561c <_ZN11StrategieV29getIsBlueEv>:
bool StrategieV2::getIsBlue()
   1561c:	b480      	push	{r7}
   1561e:	af00      	add	r7, sp, #0
{
    return isBlue;
   15620:	4b02      	ldr	r3, [pc, #8]	(1562c <_ZN11StrategieV29getIsBlueEv+0x10>)
   15622:	781b      	ldrb	r3, [r3, #0]
}
   15624:	4618      	mov	r0, r3
   15626:	46bd      	mov	sp, r7
   15628:	bc80      	pop	{r7}
   1562a:	4770      	bx	lr
   1562c:	20000645 	.word	0x20000645

00015630 <_ZN11StrategieV211gatherGlassEv>:

void StrategieV2::gatherGlass()
   15630:	b480      	push	{r7}
   15632:	af00      	add	r7, sp, #0
{
    glassGathered++;
   15634:	4b0a      	ldr	r3, [pc, #40]	(15660 <_ZN11StrategieV211gatherGlassEv+0x30>)
   15636:	681b      	ldr	r3, [r3, #0]
   15638:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1563c:	4b08      	ldr	r3, [pc, #32]	(15660 <_ZN11StrategieV211gatherGlassEv+0x30>)
   1563e:	601a      	str	r2, [r3, #0]
    if (glassGathered > 0)
   15640:	4b07      	ldr	r3, [pc, #28]	(15660 <_ZN11StrategieV211gatherGlassEv+0x30>)
   15642:	681b      	ldr	r3, [r3, #0]
   15644:	2b00      	cmp	r3, #0
   15646:	dd07      	ble.n	15658 <_ZN11StrategieV211gatherGlassEv+0x28>
    {
        glassGathered = 0;
   15648:	4a05      	ldr	r2, [pc, #20]	(15660 <_ZN11StrategieV211gatherGlassEv+0x30>)
   1564a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1564e:	6013      	str	r3, [r2, #0]
        hasToGoBase = true;
   15650:	4a04      	ldr	r2, [pc, #16]	(15664 <_ZN11StrategieV211gatherGlassEv+0x34>)
   15652:	f04f 0301 	mov.w	r3, #1	; 0x1
   15656:	7013      	strb	r3, [r2, #0]
    }
}
   15658:	46bd      	mov	sp, r7
   1565a:	bc80      	pop	{r7}
   1565c:	4770      	bx	lr
   1565e:	46c0      	nop			(mov r8, r8)
   15660:	2000063c 	.word	0x2000063c
   15664:	20000638 	.word	0x20000638

00015668 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>:

void StrategieV2::setEnTrainDeRecalibrer(bool recalibre)
   15668:	b480      	push	{r7}
   1566a:	b083      	sub	sp, #12
   1566c:	af00      	add	r7, sp, #0
   1566e:	4603      	mov	r3, r0
   15670:	71fb      	strb	r3, [r7, #7]
{
    enTrainDeRecalibrerOdometrie = recalibre;
   15672:	4a04      	ldr	r2, [pc, #16]	(15684 <_ZN11StrategieV222setEnTrainDeRecalibrerEb+0x1c>)
   15674:	79fb      	ldrb	r3, [r7, #7]
   15676:	7013      	strb	r3, [r2, #0]
}
   15678:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1567c:	46bd      	mov	sp, r7
   1567e:	bc80      	pop	{r7}
   15680:	4770      	bx	lr
   15682:	46c0      	nop			(mov r8, r8)
   15684:	20000654 	.word	0x20000654

00015688 <_ZN11StrategieV218emptySharpsToCheckEv>:

void StrategieV2::emptySharpsToCheck()
   15688:	b480      	push	{r7}
   1568a:	b083      	sub	sp, #12
   1568c:	af00      	add	r7, sp, #0
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   1568e:	f04f 0300 	mov.w	r3, #0	; 0x0
   15692:	607b      	str	r3, [r7, #4]
   15694:	e008      	b.n	156a8 <_ZN11StrategieV218emptySharpsToCheckEv+0x20>
        sharpsToCheck[i] = false;
   15696:	6879      	ldr	r1, [r7, #4]
   15698:	4a07      	ldr	r2, [pc, #28]	(156b8 <_ZN11StrategieV218emptySharpsToCheckEv+0x30>)
   1569a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1569e:	5453      	strb	r3, [r2, r1]
    enTrainDeRecalibrerOdometrie = recalibre;
}

void StrategieV2::emptySharpsToCheck()
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   156a0:	687b      	ldr	r3, [r7, #4]
   156a2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   156a6:	607b      	str	r3, [r7, #4]
   156a8:	687b      	ldr	r3, [r7, #4]
   156aa:	2b07      	cmp	r3, #7
   156ac:	ddf3      	ble.n	15696 <_ZN11StrategieV218emptySharpsToCheckEv+0xe>
        sharpsToCheck[i] = false;
}
   156ae:	f107 070c 	add.w	r7, r7, #12	; 0xc
   156b2:	46bd      	mov	sp, r7
   156b4:	bc80      	pop	{r7}
   156b6:	4770      	bx	lr
   156b8:	20000646 	.word	0x20000646

000156bc <_ZN11StrategieV210setCommandEP7Command>:
#endif
    }

}

void StrategieV2::setCommand(Command* command)
   156bc:	b480      	push	{r7}
   156be:	b083      	sub	sp, #12
   156c0:	af00      	add	r7, sp, #0
   156c2:	6078      	str	r0, [r7, #4]
{
    currentCommand = command;
   156c4:	4a03      	ldr	r2, [pc, #12]	(156d4 <_ZN11StrategieV210setCommandEP7Command+0x18>)
   156c6:	687b      	ldr	r3, [r7, #4]
   156c8:	6013      	str	r3, [r2, #0]
}
   156ca:	f107 070c 	add.w	r7, r7, #12	; 0xc
   156ce:	46bd      	mov	sp, r7
   156d0:	bc80      	pop	{r7}
   156d2:	4770      	bx	lr
   156d4:	200005a8 	.word	0x200005a8

000156d8 <_ZN11StrategieV219setTourneSurSoiMemeEb>:
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
        if (sharps[i]->getName() == name && sharpsToCheck[i] == true && !tourneSurSoiMeme)
            return sharps[i]->getValue().b;
}

void StrategieV2::setTourneSurSoiMeme(bool tourne)
   156d8:	b480      	push	{r7}
   156da:	b083      	sub	sp, #12
   156dc:	af00      	add	r7, sp, #0
   156de:	4603      	mov	r3, r0
   156e0:	71fb      	strb	r3, [r7, #7]
{
    tourneSurSoiMeme = tourne;
   156e2:	4a04      	ldr	r2, [pc, #16]	(156f4 <_ZN11StrategieV219setTourneSurSoiMemeEb+0x1c>)
   156e4:	79fb      	ldrb	r3, [r7, #7]
   156e6:	7013      	strb	r3, [r2, #0]
}
   156e8:	f107 070c 	add.w	r7, r7, #12	; 0xc
   156ec:	46bd      	mov	sp, r7
   156ee:	bc80      	pop	{r7}
   156f0:	4770      	bx	lr
   156f2:	46c0      	nop			(mov r8, r8)
   156f4:	20000660 	.word	0x20000660

000156f8 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE>:
void StrategieV2::setCommand(Command* command)
{
    currentCommand = command;
}

bool StrategieV2::sharpDetects(SharpSensor::SharpName name)
   156f8:	b580      	push	{r7, lr}
   156fa:	b088      	sub	sp, #32
   156fc:	af00      	add	r7, sp, #0
   156fe:	4603      	mov	r3, r0
   15700:	73fb      	strb	r3, [r7, #15]
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   15702:	f04f 0300 	mov.w	r3, #0	; 0x0
   15706:	61fb      	str	r3, [r7, #28]
   15708:	e04a      	b.n	157a0 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xa8>
        if (sharps[i]->getName() == name && sharpsToCheck[i] == true && !tourneSurSoiMeme)
   1570a:	4b29      	ldr	r3, [pc, #164]	(157b0 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xb8>)
   1570c:	681a      	ldr	r2, [r3, #0]
   1570e:	69fb      	ldr	r3, [r7, #28]
   15710:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15714:	4413      	add	r3, r2
   15716:	681b      	ldr	r3, [r3, #0]
   15718:	4618      	mov	r0, r3
   1571a:	f7f7 fb11 	bl	cd40 <_ZN11SharpSensor7getNameEv>
   1571e:	4603      	mov	r3, r0
   15720:	461a      	mov	r2, r3
   15722:	7bfb      	ldrb	r3, [r7, #15]
   15724:	4293      	cmp	r3, r2
   15726:	d115      	bne.n	15754 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x5c>
   15728:	69fa      	ldr	r2, [r7, #28]
   1572a:	4b22      	ldr	r3, [pc, #136]	(157b4 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xbc>)
   1572c:	5c9b      	ldrb	r3, [r3, r2]
   1572e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   15732:	b2db      	uxtb	r3, r3
   15734:	2b00      	cmp	r3, #0
   15736:	d10d      	bne.n	15754 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x5c>
   15738:	4b1f      	ldr	r3, [pc, #124]	(157b8 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xc0>)
   1573a:	781b      	ldrb	r3, [r3, #0]
   1573c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   15740:	b2db      	uxtb	r3, r3
   15742:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   15746:	b2db      	uxtb	r3, r3
   15748:	2b00      	cmp	r3, #0
   1574a:	d103      	bne.n	15754 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x5c>
   1574c:	f04f 0301 	mov.w	r3, #1	; 0x1
   15750:	60bb      	str	r3, [r7, #8]
   15752:	e002      	b.n	1575a <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x62>
   15754:	f04f 0300 	mov.w	r3, #0	; 0x0
   15758:	60bb      	str	r3, [r7, #8]
   1575a:	68bb      	ldr	r3, [r7, #8]
   1575c:	2b00      	cmp	r3, #0
   1575e:	d01b      	beq.n	15798 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xa0>
            return sharps[i]->getValue().b;
   15760:	4b13      	ldr	r3, [pc, #76]	(157b0 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xb8>)
   15762:	681a      	ldr	r2, [r3, #0]
   15764:	69fb      	ldr	r3, [r7, #28]
   15766:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1576a:	4413      	add	r3, r2
   1576c:	681b      	ldr	r3, [r3, #0]
   1576e:	681b      	ldr	r3, [r3, #0]
   15770:	f103 0308 	add.w	r3, r3, #8	; 0x8
   15774:	f8d3 c000 	ldr.w	ip, [r3]
   15778:	4b0d      	ldr	r3, [pc, #52]	(157b0 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xb8>)
   1577a:	681a      	ldr	r2, [r3, #0]
   1577c:	69fb      	ldr	r3, [r7, #28]
   1577e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15782:	4413      	add	r3, r2
   15784:	681a      	ldr	r2, [r3, #0]
   15786:	f107 0310 	add.w	r3, r7, #16	; 0x10
   1578a:	4618      	mov	r0, r3
   1578c:	4611      	mov	r1, r2
   1578e:	47e0      	blx	ip
   15790:	7e3b      	ldrb	r3, [r7, #24]
   15792:	607b      	str	r3, [r7, #4]
}
   15794:	6878      	ldr	r0, [r7, #4]
   15796:	e006      	b.n	157a6 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xae>
    currentCommand = command;
}

bool StrategieV2::sharpDetects(SharpSensor::SharpName name)
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   15798:	69fb      	ldr	r3, [r7, #28]
   1579a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1579e:	61fb      	str	r3, [r7, #28]
   157a0:	69fb      	ldr	r3, [r7, #28]
   157a2:	2b07      	cmp	r3, #7
   157a4:	ddb1      	ble.n	1570a <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x12>
        if (sharps[i]->getName() == name && sharpsToCheck[i] == true && !tourneSurSoiMeme)
            return sharps[i]->getValue().b;
}
   157a6:	f107 0720 	add.w	r7, r7, #32	; 0x20
   157aa:	46bd      	mov	sp, r7
   157ac:	bd80      	pop	{r7, pc}
   157ae:	46c0      	nop			(mov r8, r8)
   157b0:	20000634 	.word	0x20000634
   157b4:	20000646 	.word	0x20000646
   157b8:	20000660 	.word	0x20000660

000157bc <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>:
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
        sharpsToCheck[i] = false;
}

void StrategieV2::enableSharp(SharpSensor::SharpName name)
   157bc:	b580      	push	{r7, lr}
   157be:	b084      	sub	sp, #16
   157c0:	af00      	add	r7, sp, #0
   157c2:	4603      	mov	r3, r0
   157c4:	71fb      	strb	r3, [r7, #7]
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   157c6:	f04f 0300 	mov.w	r3, #0	; 0x0
   157ca:	60fb      	str	r3, [r7, #12]
   157cc:	e01c      	b.n	15808 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x4c>
        if (sharps[i]->getName() == name)
   157ce:	4b12      	ldr	r3, [pc, #72]	(15818 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x5c>)
   157d0:	681a      	ldr	r2, [r3, #0]
   157d2:	68fb      	ldr	r3, [r7, #12]
   157d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   157d8:	4413      	add	r3, r2
   157da:	681b      	ldr	r3, [r3, #0]
   157dc:	4618      	mov	r0, r3
   157de:	f7f7 faaf 	bl	cd40 <_ZN11SharpSensor7getNameEv>
   157e2:	4603      	mov	r3, r0
   157e4:	461a      	mov	r2, r3
   157e6:	79fb      	ldrb	r3, [r7, #7]
   157e8:	4293      	cmp	r3, r2
   157ea:	bf14      	ite	ne
   157ec:	2300      	movne	r3, #0
   157ee:	2301      	moveq	r3, #1
   157f0:	b2db      	uxtb	r3, r3
   157f2:	2b00      	cmp	r3, #0
   157f4:	d004      	beq.n	15800 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x44>
            sharpsToCheck[i] = true;
   157f6:	68f9      	ldr	r1, [r7, #12]
   157f8:	4a08      	ldr	r2, [pc, #32]	(1581c <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x60>)
   157fa:	f04f 0301 	mov.w	r3, #1	; 0x1
   157fe:	5453      	strb	r3, [r2, r1]
        sharpsToCheck[i] = false;
}

void StrategieV2::enableSharp(SharpSensor::SharpName name)
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   15800:	68fb      	ldr	r3, [r7, #12]
   15802:	f103 0301 	add.w	r3, r3, #1	; 0x1
   15806:	60fb      	str	r3, [r7, #12]
   15808:	68fb      	ldr	r3, [r7, #12]
   1580a:	2b07      	cmp	r3, #7
   1580c:	dddf      	ble.n	157ce <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x12>
        if (sharps[i]->getName() == name)
            sharpsToCheck[i] = true;
}
   1580e:	f107 0710 	add.w	r7, r7, #16	; 0x10
   15812:	46bd      	mov	sp, r7
   15814:	bd80      	pop	{r7, pc}
   15816:	46c0      	nop			(mov r8, r8)
   15818:	20000634 	.word	0x20000634
   1581c:	20000646 	.word	0x20000646

00015820 <_ZN11StrategieV217enableSharpsGroupEb>:

void StrategieV2::enableSharpsGroup(bool front)
   15820:	b580      	push	{r7, lr}
   15822:	b082      	sub	sp, #8
   15824:	af00      	add	r7, sp, #0
   15826:	4603      	mov	r3, r0
   15828:	71fb      	strb	r3, [r7, #7]
{
    emptySharpsToCheck();
   1582a:	f7ff ff2d 	bl	15688 <_ZN11StrategieV218emptySharpsToCheckEv>

    if (front)
   1582e:	79fb      	ldrb	r3, [r7, #7]
   15830:	2b00      	cmp	r3, #0
   15832:	d010      	beq.n	15856 <_ZN11StrategieV217enableSharpsGroupEb+0x36>
#if defined(STM32F40_41xxx)
        enableSharp(SharpSensor::FRONT_LEFT);
        enableSharp(SharpSensor::FRONT_RIGHT);
        enableSharp(SharpSensor::FRONT_MIDDLE);
#else
        enableSharp(SharpSensor::FRONT_LEFT);
   15834:	f04f 0002 	mov.w	r0, #2	; 0x2
   15838:	f7ff ffc0 	bl	157bc <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::FRONT_RIGHT);
   1583c:	f04f 0003 	mov.w	r0, #3	; 0x3
   15840:	f7ff ffbc 	bl	157bc <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::LEFT_FRONT);
   15844:	f04f 0004 	mov.w	r0, #4	; 0x4
   15848:	f7ff ffb8 	bl	157bc <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::RIGHT_FRONT);
   1584c:	f04f 0006 	mov.w	r0, #6	; 0x6
   15850:	f7ff ffb4 	bl	157bc <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
   15854:	e00f      	b.n	15876 <_ZN11StrategieV217enableSharpsGroupEb+0x56>
#if defined(STM32F40_41xxx)
        enableSharp(SharpSensor::BACK_LEFT);
        enableSharp(SharpSensor::BACK_RIGHT);
        enableSharp(SharpSensor::BACK_MIDDLE);
#else
        enableSharp(SharpSensor::BACK_LEFT);
   15856:	f04f 0001 	mov.w	r0, #1	; 0x1
   1585a:	f7ff ffaf 	bl	157bc <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::BACK_RIGHT);
   1585e:	f04f 0000 	mov.w	r0, #0	; 0x0
   15862:	f7ff ffab 	bl	157bc <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::LEFT_BACK);
   15866:	f04f 0005 	mov.w	r0, #5	; 0x5
   1586a:	f7ff ffa7 	bl	157bc <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::RIGHT_BACK);
   1586e:	f04f 0007 	mov.w	r0, #7	; 0x7
   15872:	f7ff ffa3 	bl	157bc <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
#endif
    }

}
   15876:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1587a:	46bd      	mov	sp, r7
   1587c:	bd80      	pop	{r7, pc}
   1587e:	46c0      	nop			(mov r8, r8)

00015880 <_ZN11StrategieV211willCollideEv>:
}
bool StrategieV2::getJustAvoided()
{
    return hasJustAvoided;
}
bool StrategieV2::willCollide()
   15880:	b580      	push	{r7, lr}
   15882:	b082      	sub	sp, #8
   15884:	af00      	add	r7, sp, #0
{
    somethingDetected = true;
   15886:	4a07      	ldr	r2, [pc, #28]	(158a4 <_ZN11StrategieV211willCollideEv+0x24>)
   15888:	f04f 0301 	mov.w	r3, #1	; 0x1
   1588c:	7013      	strb	r3, [r2, #0]
    Asservissement::asservissement->setCommandSpeeds(NULL); // stoppe le robot
   1588e:	4b06      	ldr	r3, [pc, #24]	(158a8 <_ZN11StrategieV211willCollideEv+0x28>)
   15890:	681b      	ldr	r3, [r3, #0]
   15892:	4618      	mov	r0, r3
   15894:	f04f 0100 	mov.w	r1, #0	; 0x0
   15898:	f7f1 fc26 	bl	70e8 <_ZN14Asservissement16setCommandSpeedsEP7Command>
}
   1589c:	f107 0708 	add.w	r7, r7, #8	; 0x8
   158a0:	46bd      	mov	sp, r7
   158a2:	bd80      	pop	{r7, pc}
   158a4:	20000644 	.word	0x20000644
   158a8:	20000560 	.word	0x20000560

000158ac <_ZN11StrategieV26lookAtEff>:
        delete currentCommand;
    currentCommand = new CommandTournerVers(pos, maxSpeed); // create the command
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
    StrategieV2::emptySharpsToCheck();
}
void StrategieV2::lookAt(Angle a, float maxSpeed)
   158ac:	b580      	push	{r7, lr}
   158ae:	b084      	sub	sp, #16
   158b0:	af00      	add	r7, sp, #0
   158b2:	60f8      	str	r0, [r7, #12]
   158b4:	60b9      	str	r1, [r7, #8]
{
    if (currentCommand != NULL)
   158b6:	4b1b      	ldr	r3, [pc, #108]	(15924 <_ZN11StrategieV26lookAtEff+0x78>)
   158b8:	681b      	ldr	r3, [r3, #0]
   158ba:	2b00      	cmp	r3, #0
   158bc:	d00d      	beq.n	158da <_ZN11StrategieV26lookAtEff+0x2e>
        delete currentCommand;
   158be:	4b19      	ldr	r3, [pc, #100]	(15924 <_ZN11StrategieV26lookAtEff+0x78>)
   158c0:	681b      	ldr	r3, [r3, #0]
   158c2:	2b00      	cmp	r3, #0
   158c4:	d009      	beq.n	158da <_ZN11StrategieV26lookAtEff+0x2e>
   158c6:	4b17      	ldr	r3, [pc, #92]	(15924 <_ZN11StrategieV26lookAtEff+0x78>)
   158c8:	681b      	ldr	r3, [r3, #0]
   158ca:	681b      	ldr	r3, [r3, #0]
   158cc:	f103 0304 	add.w	r3, r3, #4	; 0x4
   158d0:	681a      	ldr	r2, [r3, #0]
   158d2:	4b14      	ldr	r3, [pc, #80]	(15924 <_ZN11StrategieV26lookAtEff+0x78>)
   158d4:	681b      	ldr	r3, [r3, #0]
   158d6:	4618      	mov	r0, r3
   158d8:	4790      	blx	r2
    currentCommand = new CommandTournerVers(a, maxSpeed); // create the command
   158da:	f04f 0020 	mov.w	r0, #32	; 0x20
   158de:	f7f8 fca7 	bl	e230 <_Znwj>
   158e2:	4603      	mov	r3, r0
   158e4:	603b      	str	r3, [r7, #0]
   158e6:	683b      	ldr	r3, [r7, #0]
   158e8:	2b00      	cmp	r3, #0
   158ea:	d007      	beq.n	158fc <_ZN11StrategieV26lookAtEff+0x50>
   158ec:	6838      	ldr	r0, [r7, #0]
   158ee:	68f9      	ldr	r1, [r7, #12]
   158f0:	68ba      	ldr	r2, [r7, #8]
   158f2:	f7f2 ffe5 	bl	88c0 <_ZN18CommandTournerVersC1Eff>
   158f6:	683b      	ldr	r3, [r7, #0]
   158f8:	607b      	str	r3, [r7, #4]
   158fa:	e001      	b.n	15900 <_ZN11StrategieV26lookAtEff+0x54>
   158fc:	683b      	ldr	r3, [r7, #0]
   158fe:	607b      	str	r3, [r7, #4]
   15900:	687a      	ldr	r2, [r7, #4]
   15902:	4b08      	ldr	r3, [pc, #32]	(15924 <_ZN11StrategieV26lookAtEff+0x78>)
   15904:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
   15906:	4b08      	ldr	r3, [pc, #32]	(15928 <_ZN11StrategieV26lookAtEff+0x7c>)
   15908:	681a      	ldr	r2, [r3, #0]
   1590a:	4b06      	ldr	r3, [pc, #24]	(15924 <_ZN11StrategieV26lookAtEff+0x78>)
   1590c:	681b      	ldr	r3, [r3, #0]
   1590e:	4610      	mov	r0, r2
   15910:	4619      	mov	r1, r3
   15912:	f7f1 fbe9 	bl	70e8 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    StrategieV2::emptySharpsToCheck();
   15916:	f7ff feb7 	bl	15688 <_ZN11StrategieV218emptySharpsToCheckEv>
}
   1591a:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1591e:	46bd      	mov	sp, r7
   15920:	bd80      	pop	{r7, pc}
   15922:	46c0      	nop			(mov r8, r8)
   15924:	200005a8 	.word	0x200005a8
   15928:	20000560 	.word	0x20000560

0001592c <_ZN11StrategieV26lookAtE8Positionf>:
    if (currentCommand != NULL)
        delete currentCommand;
    currentCommand = new CommandAllerEnArcA(goal, center, vitesse*5, goBack);
    Asservissement::asservissement->setCommandSpeeds(currentCommand);
}
void StrategieV2::lookAt(Position pos, float maxSpeed)
   1592c:	b580      	push	{r7, lr}
   1592e:	b086      	sub	sp, #24
   15930:	af00      	add	r7, sp, #0
   15932:	f107 0310 	add.w	r3, r7, #16	; 0x10
   15936:	e883 0003 	stmia.w	r3, {r0, r1}
   1593a:	60fa      	str	r2, [r7, #12]
{
    if (currentCommand != NULL)
   1593c:	4b1c      	ldr	r3, [pc, #112]	(159b0 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   1593e:	681b      	ldr	r3, [r3, #0]
   15940:	2b00      	cmp	r3, #0
   15942:	d00d      	beq.n	15960 <_ZN11StrategieV26lookAtE8Positionf+0x34>
        delete currentCommand;
   15944:	4b1a      	ldr	r3, [pc, #104]	(159b0 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   15946:	681b      	ldr	r3, [r3, #0]
   15948:	2b00      	cmp	r3, #0
   1594a:	d009      	beq.n	15960 <_ZN11StrategieV26lookAtE8Positionf+0x34>
   1594c:	4b18      	ldr	r3, [pc, #96]	(159b0 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   1594e:	681b      	ldr	r3, [r3, #0]
   15950:	681b      	ldr	r3, [r3, #0]
   15952:	f103 0304 	add.w	r3, r3, #4	; 0x4
   15956:	681a      	ldr	r2, [r3, #0]
   15958:	4b15      	ldr	r3, [pc, #84]	(159b0 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   1595a:	681b      	ldr	r3, [r3, #0]
   1595c:	4618      	mov	r0, r3
   1595e:	4790      	blx	r2
    currentCommand = new CommandTournerVers(pos, maxSpeed); // create the command
   15960:	f04f 0020 	mov.w	r0, #32	; 0x20
   15964:	f7f8 fc64 	bl	e230 <_Znwj>
   15968:	4603      	mov	r3, r0
   1596a:	607b      	str	r3, [r7, #4]
   1596c:	687b      	ldr	r3, [r7, #4]
   1596e:	2b00      	cmp	r3, #0
   15970:	d00a      	beq.n	15988 <_ZN11StrategieV26lookAtE8Positionf+0x5c>
   15972:	6878      	ldr	r0, [r7, #4]
   15974:	f107 0310 	add.w	r3, r7, #16	; 0x10
   15978:	e893 0006 	ldmia.w	r3, {r1, r2}
   1597c:	68fb      	ldr	r3, [r7, #12]
   1597e:	f7f3 f823 	bl	89c8 <_ZN18CommandTournerVersC1E8Positionf>
   15982:	687b      	ldr	r3, [r7, #4]
   15984:	60bb      	str	r3, [r7, #8]
   15986:	e001      	b.n	1598c <_ZN11StrategieV26lookAtE8Positionf+0x60>
   15988:	687b      	ldr	r3, [r7, #4]
   1598a:	60bb      	str	r3, [r7, #8]
   1598c:	68ba      	ldr	r2, [r7, #8]
   1598e:	4b08      	ldr	r3, [pc, #32]	(159b0 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   15990:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
   15992:	4b08      	ldr	r3, [pc, #32]	(159b4 <_ZN11StrategieV26lookAtE8Positionf+0x88>)
   15994:	681a      	ldr	r2, [r3, #0]
   15996:	4b06      	ldr	r3, [pc, #24]	(159b0 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   15998:	681b      	ldr	r3, [r3, #0]
   1599a:	4610      	mov	r0, r2
   1599c:	4619      	mov	r1, r3
   1599e:	f7f1 fba3 	bl	70e8 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    StrategieV2::emptySharpsToCheck();
   159a2:	f7ff fe71 	bl	15688 <_ZN11StrategieV218emptySharpsToCheckEv>
}
   159a6:	f107 0718 	add.w	r7, r7, #24	; 0x18
   159aa:	46bd      	mov	sp, r7
   159ac:	bd80      	pop	{r7, pc}
   159ae:	46c0      	nop			(mov r8, r8)
   159b0:	200005a8 	.word	0x200005a8
   159b4:	20000560 	.word	0x20000560

000159b8 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf>:
        //StrategieV2::sharpsToCheck[SharpSensor::LEFT_FRONT] = true;
        //StrategieV2::sharpsToCheck[SharpSensor::RIGHT_FRONT] = true;
    }*/
#endif
}
void StrategieV2::setCurrentGoal(Position goal, Position center, float vitesse, bool goBack, Angle precisionAngle)
   159b8:	b580      	push	{r7, lr}
   159ba:	b08a      	sub	sp, #40
   159bc:	af04      	add	r7, sp, #16
   159be:	f107 0c10 	add.w	ip, r7, #16	; 0x10
   159c2:	e88c 0003 	stmia.w	ip, {r0, r1}
   159c6:	f107 0108 	add.w	r1, r7, #8	; 0x8
   159ca:	e881 000c 	stmia.w	r1, {r2, r3}
{
    if (currentCommand != NULL)
   159ce:	4b20      	ldr	r3, [pc, #128]	(15a50 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   159d0:	681b      	ldr	r3, [r3, #0]
   159d2:	2b00      	cmp	r3, #0
   159d4:	d00d      	beq.n	159f2 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x3a>
        delete currentCommand;
   159d6:	4b1e      	ldr	r3, [pc, #120]	(15a50 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   159d8:	681b      	ldr	r3, [r3, #0]
   159da:	2b00      	cmp	r3, #0
   159dc:	d009      	beq.n	159f2 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x3a>
   159de:	4b1c      	ldr	r3, [pc, #112]	(15a50 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   159e0:	681b      	ldr	r3, [r3, #0]
   159e2:	681b      	ldr	r3, [r3, #0]
   159e4:	f103 0304 	add.w	r3, r3, #4	; 0x4
   159e8:	681a      	ldr	r2, [r3, #0]
   159ea:	4b19      	ldr	r3, [pc, #100]	(15a50 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   159ec:	681b      	ldr	r3, [r3, #0]
   159ee:	4618      	mov	r0, r3
   159f0:	4790      	blx	r2
    currentCommand = new CommandAllerEnArcA(goal, center, vitesse*5, goBack);
   159f2:	f04f 0030 	mov.w	r0, #48	; 0x30
   159f6:	f7f8 fc1b 	bl	e230 <_Znwj>
   159fa:	4603      	mov	r3, r0
   159fc:	603b      	str	r3, [r7, #0]
   159fe:	683b      	ldr	r3, [r7, #0]
   15a00:	2b00      	cmp	r3, #0
   15a02:	d014      	beq.n	15a2e <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x76>
   15a04:	6a38      	ldr	r0, [r7, #32]
   15a06:	4913      	ldr	r1, [pc, #76]	(15a54 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x9c>)
   15a08:	f004 fff0 	bl	1a9ec <__aeabi_fmul>
   15a0c:	4603      	mov	r3, r0
   15a0e:	9301      	str	r3, [sp, #4]
   15a10:	f897 3024 	ldrb.w	r3, [r7, #36]
   15a14:	9302      	str	r3, [sp, #8]
   15a16:	68fb      	ldr	r3, [r7, #12]
   15a18:	9300      	str	r3, [sp, #0]
   15a1a:	68bb      	ldr	r3, [r7, #8]
   15a1c:	6838      	ldr	r0, [r7, #0]
   15a1e:	f107 0210 	add.w	r2, r7, #16	; 0x10
   15a22:	ca06      	ldmia	r2!, {r1, r2}
   15a24:	f7f3 f900 	bl	8c28 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb>
   15a28:	683b      	ldr	r3, [r7, #0]
   15a2a:	607b      	str	r3, [r7, #4]
   15a2c:	e001      	b.n	15a32 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x7a>
   15a2e:	683b      	ldr	r3, [r7, #0]
   15a30:	607b      	str	r3, [r7, #4]
   15a32:	687a      	ldr	r2, [r7, #4]
   15a34:	4b06      	ldr	r3, [pc, #24]	(15a50 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   15a36:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand);
   15a38:	4b07      	ldr	r3, [pc, #28]	(15a58 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0xa0>)
   15a3a:	681a      	ldr	r2, [r3, #0]
   15a3c:	4b04      	ldr	r3, [pc, #16]	(15a50 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   15a3e:	681b      	ldr	r3, [r3, #0]
   15a40:	4610      	mov	r0, r2
   15a42:	4619      	mov	r1, r3
   15a44:	f7f1 fb50 	bl	70e8 <_ZN14Asservissement16setCommandSpeedsEP7Command>
}
   15a48:	f107 0718 	add.w	r7, r7, #24	; 0x18
   15a4c:	46bd      	mov	sp, r7
   15a4e:	bd80      	pop	{r7, pc}
   15a50:	200005a8 	.word	0x200005a8
   15a54:	40a00000 	.word	0x40a00000
   15a58:	20000560 	.word	0x20000560

00015a5c <_ZN11StrategieV214setCurrentGoalE8Positionbff>:
//    updateCount ++;
    //eteindreLED2();
    //eteindreLED();
}

void StrategieV2::setCurrentGoal(Position goal, bool goBack, float maxSpeed, Angle precisionAngle)
   15a5c:	b580      	push	{r7, lr}
   15a5e:	b08a      	sub	sp, #40
   15a60:	af04      	add	r7, sp, #16
   15a62:	f107 0c10 	add.w	ip, r7, #16	; 0x10
   15a66:	e88c 0003 	stmia.w	ip, {r0, r1}
   15a6a:	60bb      	str	r3, [r7, #8]
   15a6c:	4613      	mov	r3, r2
   15a6e:	73fb      	strb	r3, [r7, #15]
{
    if (currentCommand != NULL)
   15a70:	4b20      	ldr	r3, [pc, #128]	(15af4 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   15a72:	681b      	ldr	r3, [r3, #0]
   15a74:	2b00      	cmp	r3, #0
   15a76:	d00d      	beq.n	15a94 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x38>
        delete currentCommand;
   15a78:	4b1e      	ldr	r3, [pc, #120]	(15af4 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   15a7a:	681b      	ldr	r3, [r3, #0]
   15a7c:	2b00      	cmp	r3, #0
   15a7e:	d009      	beq.n	15a94 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x38>
   15a80:	4b1c      	ldr	r3, [pc, #112]	(15af4 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   15a82:	681b      	ldr	r3, [r3, #0]
   15a84:	681b      	ldr	r3, [r3, #0]
   15a86:	f103 0304 	add.w	r3, r3, #4	; 0x4
   15a8a:	681a      	ldr	r2, [r3, #0]
   15a8c:	4b19      	ldr	r3, [pc, #100]	(15af4 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   15a8e:	681b      	ldr	r3, [r3, #0]
   15a90:	4618      	mov	r0, r3
   15a92:	4790      	blx	r2
//    if (actionsCount == 0)
//        currentCommand = new CommandAllerA(goal, goBack, maxSpeed/2);
//    else
    currentCommand = new CommandAllerA(goal, goBack, maxSpeed, 0.0f, precisionAngle);
   15a94:	f04f 0030 	mov.w	r0, #48	; 0x30
   15a98:	f7f8 fbca 	bl	e230 <_Znwj>
   15a9c:	4603      	mov	r3, r0
   15a9e:	603b      	str	r3, [r7, #0]
   15aa0:	683b      	ldr	r3, [r7, #0]
   15aa2:	2b00      	cmp	r3, #0
   15aa4:	d012      	beq.n	15acc <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x70>
   15aa6:	f897 c00f 	ldrb.w	ip, [r7, #15]
   15aaa:	68bb      	ldr	r3, [r7, #8]
   15aac:	9300      	str	r3, [sp, #0]
   15aae:	4b12      	ldr	r3, [pc, #72]	(15af8 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x9c>)
   15ab0:	9301      	str	r3, [sp, #4]
   15ab2:	6a3b      	ldr	r3, [r7, #32]
   15ab4:	9302      	str	r3, [sp, #8]
   15ab6:	6838      	ldr	r0, [r7, #0]
   15ab8:	f107 0310 	add.w	r3, r7, #16	; 0x10
   15abc:	e893 0006 	ldmia.w	r3, {r1, r2}
   15ac0:	4663      	mov	r3, ip
   15ac2:	f7f3 f801 	bl	8ac8 <_ZN13CommandAllerAC1E8Positionbfff>
   15ac6:	683b      	ldr	r3, [r7, #0]
   15ac8:	607b      	str	r3, [r7, #4]
   15aca:	e001      	b.n	15ad0 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x74>
   15acc:	683b      	ldr	r3, [r7, #0]
   15ace:	607b      	str	r3, [r7, #4]
   15ad0:	687a      	ldr	r2, [r7, #4]
   15ad2:	4b08      	ldr	r3, [pc, #32]	(15af4 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   15ad4:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand);
   15ad6:	4b09      	ldr	r3, [pc, #36]	(15afc <_ZN11StrategieV214setCurrentGoalE8Positionbff+0xa0>)
   15ad8:	681a      	ldr	r2, [r3, #0]
   15ada:	4b06      	ldr	r3, [pc, #24]	(15af4 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   15adc:	681b      	ldr	r3, [r3, #0]
   15ade:	4610      	mov	r0, r2
   15ae0:	4619      	mov	r1, r3
   15ae2:	f7f1 fb01 	bl	70e8 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    StrategieV2::emptySharpsToCheck();
   15ae6:	f7ff fdcf 	bl	15688 <_ZN11StrategieV218emptySharpsToCheckEv>
        //StrategieV2::sharpsToCheck[SharpSensor::FRONT_RIGHT] = true;
        //StrategieV2::sharpsToCheck[SharpSensor::LEFT_FRONT] = true;
        //StrategieV2::sharpsToCheck[SharpSensor::RIGHT_FRONT] = true;
    }*/
#endif
}
   15aea:	f107 0718 	add.w	r7, r7, #24	; 0x18
   15aee:	46bd      	mov	sp, r7
   15af0:	bd80      	pop	{r7, pc}
   15af2:	46c0      	nop			(mov r8, r8)
   15af4:	200005a8 	.word	0x200005a8
   15af8:	00000000 	.word	0x00000000
   15afc:	20000560 	.word	0x20000560

00015b00 <_ZN11StrategieV26updateEv>:
{
    return updateCount * 5;
}


void StrategieV2::update()
   15b00:	b590      	push	{r4, r7, lr}
   15b02:	b0af      	sub	sp, #188
   15b04:	af02      	add	r7, sp, #8

        resultUpdate = tourelle->update();

    */

    if (StrategieV2::strategie == NULL)
   15b06:	f8df 3584 	ldr.w	r3, [pc, #1412]	; 1608c <_ZN11StrategieV26updateEv+0x58c>
   15b0a:	681b      	ldr	r3, [r3, #0]
   15b0c:	2b00      	cmp	r3, #0
   15b0e:	f000 82b8 	beq.w	16082 <_ZN11StrategieV26updateEv+0x582>
        return;
    updateCount++;
   15b12:	f8df 357c 	ldr.w	r3, [pc, #1404]	; 16090 <_ZN11StrategieV26updateEv+0x590>
   15b16:	681b      	ldr	r3, [r3, #0]
   15b18:	f103 0201 	add.w	r2, r3, #1	; 0x1
   15b1c:	f8df 3570 	ldr.w	r3, [pc, #1392]	; 16090 <_ZN11StrategieV26updateEv+0x590>
   15b20:	601a      	str	r2, [r3, #0]

    currentAction->updateTime(90*1000-updateCount*5);
   15b22:	f8df 3570 	ldr.w	r3, [pc, #1392]	; 16094 <_ZN11StrategieV26updateEv+0x594>
   15b26:	6819      	ldr	r1, [r3, #0]
   15b28:	f8df 3564 	ldr.w	r3, [pc, #1380]	; 16090 <_ZN11StrategieV26updateEv+0x590>
   15b2c:	681a      	ldr	r2, [r3, #0]
   15b2e:	4613      	mov	r3, r2
   15b30:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15b34:	4413      	add	r3, r2
   15b36:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   15b3a:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
   15b3e:	f503 7364 	add.w	r3, r3, #912	; 0x390
   15b42:	4608      	mov	r0, r1
   15b44:	4619      	mov	r1, r3
   15b46:	f7fe ff5b 	bl	14a00 <_ZN17MediumLevelAction10updateTimeEi>
//
//    //On donne l'ordre de ralentir, si besoin
//    currentCommand->limitSpeed(hysteresisTourelle);

#endif
    if (updateCount < 0)
   15b4a:	f8df 3544 	ldr.w	r3, [pc, #1348]	; 16090 <_ZN11StrategieV26updateEv+0x590>
   15b4e:	681b      	ldr	r3, [r3, #0]
   15b50:	2b00      	cmp	r3, #0
   15b52:	da04      	bge.n	15b5e <_ZN11StrategieV26updateEv+0x5e>
    {
        updateCount = 50000;
   15b54:	f8df 2538 	ldr.w	r2, [pc, #1336]	; 16090 <_ZN11StrategieV26updateEv+0x590>
   15b58:	f24c 3350 	movw	r3, #50000	; 0xc350
   15b5c:	6013      	str	r3, [r2, #0]

    if (updateCount <= 18000)
    {

    }
    if (updateCount >= 18000)
   15b5e:	f8df 3530 	ldr.w	r3, [pc, #1328]	; 16090 <_ZN11StrategieV26updateEv+0x590>
   15b62:	681a      	ldr	r2, [r3, #0]
   15b64:	f244 634f 	movw	r3, #17999	; 0x464f
   15b68:	429a      	cmp	r2, r3
   15b6a:	dd08      	ble.n	15b7e <_ZN11StrategieV26updateEv+0x7e>
    {
        Asservissement::asservissement->setCommandSpeeds(NULL);
   15b6c:	f8df 3528 	ldr.w	r3, [pc, #1320]	; 16098 <_ZN11StrategieV26updateEv+0x598>
   15b70:	681b      	ldr	r3, [r3, #0]
   15b72:	4618      	mov	r0, r3
   15b74:	f04f 0100 	mov.w	r1, #0	; 0x0
   15b78:	f7f1 fab6 	bl	70e8 <_ZN14Asservissement16setCommandSpeedsEP7Command>
   15b7c:	e281      	b.n	16082 <_ZN11StrategieV26updateEv+0x582>
    //if (updateCount > 6000 && updateCount < 10000) // attendre 15 secondes
    /*{
        Asservissement::asservissement->setCommandSpeeds(NULL);
        return;
    }*/
    if (actionsCount >= 1)
   15b7e:	f8df 351c 	ldr.w	r3, [pc, #1308]	; 1609c <_ZN11StrategieV26updateEv+0x59c>
   15b82:	681b      	ldr	r3, [r3, #0]
   15b84:	2b00      	cmp	r3, #0
   15b86:	dd05      	ble.n	15b94 <_ZN11StrategieV26updateEv+0x94>
    {
        updateCount = 20000;
   15b88:	f8df 2504 	ldr.w	r2, [pc, #1284]	; 16090 <_ZN11StrategieV26updateEv+0x590>
   15b8c:	f644 6320 	movw	r3, #20000	; 0x4e20
   15b90:	6013      	str	r3, [r2, #0]
   15b92:	e276      	b.n	16082 <_ZN11StrategieV26updateEv+0x582>
        enableSharp(SharpSensor::BACK_MIDDLE);
        enableSharp(SharpSensor::BACK_RIGHT);
        */
    //std::cout << "update" << std::endl;
    // check sensors:
    AnalogSensor::startConversion();
   15b94:	f7f4 fd62 	bl	a65c <_ZN12AnalogSensor15startConversionEv>

    //

    //allumerLED2();
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++) // update tous les sharps
   15b98:	f04f 0300 	mov.w	r3, #0	; 0x0
   15b9c:	f8c7 30a0 	str.w	r3, [r7, #160]
   15ba0:	e011      	b.n	15bc6 <_ZN11StrategieV26updateEv+0xc6>
    {
        sharps[i]->updateValue();
   15ba2:	f8df 34fc 	ldr.w	r3, [pc, #1276]	; 160a0 <_ZN11StrategieV26updateEv+0x5a0>
   15ba6:	681a      	ldr	r2, [r3, #0]
   15ba8:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   15bac:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15bb0:	4413      	add	r3, r2
   15bb2:	681b      	ldr	r3, [r3, #0]
   15bb4:	4618      	mov	r0, r3
   15bb6:	f7f7 f8eb 	bl	cd90 <_ZN11SharpSensor11updateValueEv>
    AnalogSensor::startConversion();

    //

    //allumerLED2();
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++) // update tous les sharps
   15bba:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   15bbe:	f103 0301 	add.w	r3, r3, #1	; 0x1
   15bc2:	f8c7 30a0 	str.w	r3, [r7, #160]
   15bc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   15bca:	2b07      	cmp	r3, #7
   15bcc:	dde9      	ble.n	15ba2 <_ZN11StrategieV26updateEv+0xa2>
    {
        sharps[i]->updateValue();
    }
    //sharps[9]->updateValue();
    bool allume = false;
   15bce:	f04f 0300 	mov.w	r3, #0	; 0x0
   15bd2:	f887 309f 	strb.w	r3, [r7, #159]
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   15bd6:	f04f 0300 	mov.w	r3, #0	; 0x0
   15bda:	f8c7 30a4 	str.w	r3, [r7, #164]
   15bde:	e038      	b.n	15c52 <_ZN11StrategieV26updateEv+0x152>
    {
        if (sharpsToCheck[i] && !tourneSurSoiMeme)
   15be0:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   15be4:	f8df 24bc 	ldr.w	r2, [pc, #1212]	; 160a4 <_ZN11StrategieV26updateEv+0x5a4>
   15be8:	5cd3      	ldrb	r3, [r2, r3]
   15bea:	2b00      	cmp	r3, #0
   15bec:	d02b      	beq.n	15c46 <_ZN11StrategieV26updateEv+0x146>
   15bee:	f8df 34b8 	ldr.w	r3, [pc, #1208]	; 160a8 <_ZN11StrategieV26updateEv+0x5a8>
   15bf2:	781b      	ldrb	r3, [r3, #0]
   15bf4:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   15bf8:	b2db      	uxtb	r3, r3
   15bfa:	2b00      	cmp	r3, #0
   15bfc:	d023      	beq.n	15c46 <_ZN11StrategieV26updateEv+0x146>
        {
            if (sharps[i]->getValue().b)
   15bfe:	f8df 34a0 	ldr.w	r3, [pc, #1184]	; 160a0 <_ZN11StrategieV26updateEv+0x5a0>
   15c02:	681a      	ldr	r2, [r3, #0]
   15c04:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   15c08:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15c0c:	4413      	add	r3, r2
   15c0e:	681b      	ldr	r3, [r3, #0]
   15c10:	681b      	ldr	r3, [r3, #0]
   15c12:	f103 0308 	add.w	r3, r3, #8	; 0x8
   15c16:	f8d3 c000 	ldr.w	ip, [r3]
   15c1a:	f8df 3484 	ldr.w	r3, [pc, #1156]	; 160a0 <_ZN11StrategieV26updateEv+0x5a0>
   15c1e:	681a      	ldr	r2, [r3, #0]
   15c20:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   15c24:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15c28:	4413      	add	r3, r2
   15c2a:	681a      	ldr	r2, [r3, #0]
   15c2c:	f107 0360 	add.w	r3, r7, #96	; 0x60
   15c30:	4618      	mov	r0, r3
   15c32:	4611      	mov	r1, r2
   15c34:	47e0      	blx	ip
   15c36:	f897 3068 	ldrb.w	r3, [r7, #104]
   15c3a:	2b00      	cmp	r3, #0
   15c3c:	d003      	beq.n	15c46 <_ZN11StrategieV26updateEv+0x146>
            {
                allume = true;
   15c3e:	f04f 0301 	mov.w	r3, #1	; 0x1
   15c42:	f887 309f 	strb.w	r3, [r7, #159]
    {
        sharps[i]->updateValue();
    }
    //sharps[9]->updateValue();
    bool allume = false;
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   15c46:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   15c4a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   15c4e:	f8c7 30a4 	str.w	r3, [r7, #164]
   15c52:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   15c56:	2b07      	cmp	r3, #7
   15c58:	ddc2      	ble.n	15be0 <_ZN11StrategieV26updateEv+0xe0>
                allume = true;
            }
        }
    }

    float values[10] = {0};
   15c5a:	f107 011c 	add.w	r1, r7, #28	; 0x1c
   15c5e:	60b9      	str	r1, [r7, #8]
   15c60:	f04f 0300 	mov.w	r3, #0	; 0x0
   15c64:	68ba      	ldr	r2, [r7, #8]
   15c66:	6013      	str	r3, [r2, #0]
   15c68:	68bb      	ldr	r3, [r7, #8]
   15c6a:	f103 0304 	add.w	r3, r3, #4	; 0x4
   15c6e:	60bb      	str	r3, [r7, #8]
   15c70:	f04f 0300 	mov.w	r3, #0	; 0x0
   15c74:	68b9      	ldr	r1, [r7, #8]
   15c76:	600b      	str	r3, [r1, #0]
   15c78:	68ba      	ldr	r2, [r7, #8]
   15c7a:	f102 0204 	add.w	r2, r2, #4	; 0x4
   15c7e:	60ba      	str	r2, [r7, #8]
   15c80:	f04f 0300 	mov.w	r3, #0	; 0x0
   15c84:	68b9      	ldr	r1, [r7, #8]
   15c86:	600b      	str	r3, [r1, #0]
   15c88:	68ba      	ldr	r2, [r7, #8]
   15c8a:	f102 0204 	add.w	r2, r2, #4	; 0x4
   15c8e:	60ba      	str	r2, [r7, #8]
   15c90:	f04f 0300 	mov.w	r3, #0	; 0x0
   15c94:	68b9      	ldr	r1, [r7, #8]
   15c96:	600b      	str	r3, [r1, #0]
   15c98:	68ba      	ldr	r2, [r7, #8]
   15c9a:	f102 0204 	add.w	r2, r2, #4	; 0x4
   15c9e:	60ba      	str	r2, [r7, #8]
   15ca0:	f04f 0300 	mov.w	r3, #0	; 0x0
   15ca4:	68b9      	ldr	r1, [r7, #8]
   15ca6:	600b      	str	r3, [r1, #0]
   15ca8:	68ba      	ldr	r2, [r7, #8]
   15caa:	f102 0204 	add.w	r2, r2, #4	; 0x4
   15cae:	60ba      	str	r2, [r7, #8]
   15cb0:	f04f 0300 	mov.w	r3, #0	; 0x0
   15cb4:	68b9      	ldr	r1, [r7, #8]
   15cb6:	600b      	str	r3, [r1, #0]
   15cb8:	68ba      	ldr	r2, [r7, #8]
   15cba:	f102 0204 	add.w	r2, r2, #4	; 0x4
   15cbe:	60ba      	str	r2, [r7, #8]
   15cc0:	f04f 0300 	mov.w	r3, #0	; 0x0
   15cc4:	68b9      	ldr	r1, [r7, #8]
   15cc6:	600b      	str	r3, [r1, #0]
   15cc8:	68ba      	ldr	r2, [r7, #8]
   15cca:	f102 0204 	add.w	r2, r2, #4	; 0x4
   15cce:	60ba      	str	r2, [r7, #8]
   15cd0:	f04f 0300 	mov.w	r3, #0	; 0x0
   15cd4:	68b9      	ldr	r1, [r7, #8]
   15cd6:	600b      	str	r3, [r1, #0]
   15cd8:	68ba      	ldr	r2, [r7, #8]
   15cda:	f102 0204 	add.w	r2, r2, #4	; 0x4
   15cde:	60ba      	str	r2, [r7, #8]
   15ce0:	f04f 0300 	mov.w	r3, #0	; 0x0
   15ce4:	68b9      	ldr	r1, [r7, #8]
   15ce6:	600b      	str	r3, [r1, #0]
   15ce8:	68ba      	ldr	r2, [r7, #8]
   15cea:	f102 0204 	add.w	r2, r2, #4	; 0x4
   15cee:	60ba      	str	r2, [r7, #8]
   15cf0:	f04f 0300 	mov.w	r3, #0	; 0x0
   15cf4:	68b9      	ldr	r1, [r7, #8]
   15cf6:	600b      	str	r3, [r1, #0]
   15cf8:	68ba      	ldr	r2, [r7, #8]
   15cfa:	f102 0204 	add.w	r2, r2, #4	; 0x4
    bool detected[10] = {false};
   15cfe:	f107 0356 	add.w	r3, r7, #86	; 0x56
   15d02:	607b      	str	r3, [r7, #4]
   15d04:	f04f 0300 	mov.w	r3, #0	; 0x0
   15d08:	6879      	ldr	r1, [r7, #4]
   15d0a:	800b      	strh	r3, [r1, #0]
   15d0c:	687a      	ldr	r2, [r7, #4]
   15d0e:	f102 0202 	add.w	r2, r2, #2	; 0x2
   15d12:	607a      	str	r2, [r7, #4]
   15d14:	f04f 0300 	mov.w	r3, #0	; 0x0
   15d18:	6879      	ldr	r1, [r7, #4]
   15d1a:	800b      	strh	r3, [r1, #0]
   15d1c:	687a      	ldr	r2, [r7, #4]
   15d1e:	f102 0202 	add.w	r2, r2, #2	; 0x2
   15d22:	607a      	str	r2, [r7, #4]
   15d24:	f04f 0300 	mov.w	r3, #0	; 0x0
   15d28:	6879      	ldr	r1, [r7, #4]
   15d2a:	800b      	strh	r3, [r1, #0]
   15d2c:	687a      	ldr	r2, [r7, #4]
   15d2e:	f102 0202 	add.w	r2, r2, #2	; 0x2
   15d32:	607a      	str	r2, [r7, #4]
   15d34:	f04f 0300 	mov.w	r3, #0	; 0x0
   15d38:	6879      	ldr	r1, [r7, #4]
   15d3a:	800b      	strh	r3, [r1, #0]
   15d3c:	687a      	ldr	r2, [r7, #4]
   15d3e:	f102 0202 	add.w	r2, r2, #2	; 0x2
   15d42:	607a      	str	r2, [r7, #4]
   15d44:	f04f 0300 	mov.w	r3, #0	; 0x0
   15d48:	6879      	ldr	r1, [r7, #4]
   15d4a:	800b      	strh	r3, [r1, #0]
   15d4c:	687a      	ldr	r2, [r7, #4]
   15d4e:	f102 0202 	add.w	r2, r2, #2	; 0x2

    //allumerLED2();
    for (int i = 0; i < 8; i++)
   15d52:	f04f 0300 	mov.w	r3, #0	; 0x0
   15d56:	f8c7 30a8 	str.w	r3, [r7, #168]
   15d5a:	e04d      	b.n	15df8 <_ZN11StrategieV26updateEv+0x2f8>
    {
        values[i] = sharps[i]->getValue().f;
   15d5c:	f8d7 40a8 	ldr.w	r4, [r7, #168]
   15d60:	4bcf      	ldr	r3, [pc, #828]	(160a0 <_ZN11StrategieV26updateEv+0x5a0>)
   15d62:	681a      	ldr	r2, [r3, #0]
   15d64:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   15d68:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15d6c:	4413      	add	r3, r2
   15d6e:	681b      	ldr	r3, [r3, #0]
   15d70:	681b      	ldr	r3, [r3, #0]
   15d72:	f103 0308 	add.w	r3, r3, #8	; 0x8
   15d76:	f8d3 c000 	ldr.w	ip, [r3]
   15d7a:	4bc9      	ldr	r3, [pc, #804]	(160a0 <_ZN11StrategieV26updateEv+0x5a0>)
   15d7c:	681a      	ldr	r2, [r3, #0]
   15d7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   15d82:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15d86:	4413      	add	r3, r2
   15d88:	681a      	ldr	r2, [r3, #0]
   15d8a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   15d8e:	4618      	mov	r0, r3
   15d90:	4611      	mov	r1, r2
   15d92:	47e0      	blx	ip
   15d94:	6f3a      	ldr	r2, [r7, #112]
   15d96:	ea4f 0384 	mov.w	r3, r4, lsl #2
   15d9a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
   15d9e:	440b      	add	r3, r1
   15da0:	f843 2c94 	str.w	r2, [r3, #-148]
        detected[i] = sharps[i]->getValue().b;
   15da4:	f8d7 40a8 	ldr.w	r4, [r7, #168]
   15da8:	4bbd      	ldr	r3, [pc, #756]	(160a0 <_ZN11StrategieV26updateEv+0x5a0>)
   15daa:	681a      	ldr	r2, [r3, #0]
   15dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   15db0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15db4:	4413      	add	r3, r2
   15db6:	681b      	ldr	r3, [r3, #0]
   15db8:	681b      	ldr	r3, [r3, #0]
   15dba:	f103 0308 	add.w	r3, r3, #8	; 0x8
   15dbe:	f8d3 c000 	ldr.w	ip, [r3]
   15dc2:	4bb7      	ldr	r3, [pc, #732]	(160a0 <_ZN11StrategieV26updateEv+0x5a0>)
   15dc4:	681a      	ldr	r2, [r3, #0]
   15dc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   15dca:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15dce:	4413      	add	r3, r2
   15dd0:	681a      	ldr	r2, [r3, #0]
   15dd2:	f107 0378 	add.w	r3, r7, #120	; 0x78
   15dd6:	4618      	mov	r0, r3
   15dd8:	4611      	mov	r1, r2
   15dda:	47e0      	blx	ip
   15ddc:	f897 3080 	ldrb.w	r3, [r7, #128]
   15de0:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
   15de4:	eb01 0204 	add.w	r2, r1, r4
   15de8:	f802 3c5a 	strb.w	r3, [r2, #-90]

    float values[10] = {0};
    bool detected[10] = {false};

    //allumerLED2();
    for (int i = 0; i < 8; i++)
   15dec:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   15df0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   15df4:	f8c7 30a8 	str.w	r3, [r7, #168]
   15df8:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   15dfc:	2b07      	cmp	r3, #7
   15dfe:	ddad      	ble.n	15d5c <_ZN11StrategieV26updateEv+0x25c>
        updateCount = 10;
        Led::setOff(1);
    }
    else
    {*/
        Led::setOn(1);
   15e00:	f04f 0001 	mov.w	r0, #1	; 0x1
   15e04:	f7f5 ffb8 	bl	bd78 <_ZN3Led5setOnEi>

        if (allume)
   15e08:	f897 309f 	ldrb.w	r3, [r7, #159]
   15e0c:	2b00      	cmp	r3, #0
   15e0e:	d00e      	beq.n	15e2e <_ZN11StrategieV26updateEv+0x32e>
        {
            Asservissement::asservissement->setCommandSpeeds(NULL);
   15e10:	4ba1      	ldr	r3, [pc, #644]	(16098 <_ZN11StrategieV26updateEv+0x598>)
   15e12:	681b      	ldr	r3, [r3, #0]
   15e14:	4618      	mov	r0, r3
   15e16:	f04f 0100 	mov.w	r1, #0	; 0x0
   15e1a:	f7f1 f965 	bl	70e8 <_ZN14Asservissement16setCommandSpeedsEP7Command>
            Asservissement::asservissement->update();
   15e1e:	4b9e      	ldr	r3, [pc, #632]	(16098 <_ZN11StrategieV26updateEv+0x598>)
   15e20:	681b      	ldr	r3, [r3, #0]
   15e22:	4618      	mov	r0, r3
   15e24:	f7f1 faa6 	bl	7374 <_ZN14Asservissement6updateEv>
            allumerLED2();
   15e28:	f7f5 fff2 	bl	be10 <_Z11allumerLED2v>
   15e2c:	e001      	b.n	15e32 <_ZN11StrategieV26updateEv+0x332>
        }
        else
        {
            eteindreLED2();
   15e2e:	f7f5 ff93 	bl	bd58 <_Z12eteindreLED2v>

        //allumerLED2();

        //allume = true;//(updateCount%30==0);
        //allume = false;
        if(timeToRestart)
   15e32:	4b9e      	ldr	r3, [pc, #632]	(160ac <_ZN11StrategieV26updateEv+0x5ac>)
   15e34:	681b      	ldr	r3, [r3, #0]
   15e36:	2b00      	cmp	r3, #0
   15e38:	d005      	beq.n	15e46 <_ZN11StrategieV26updateEv+0x346>
        {
            timeToRestart--;
   15e3a:	4b9c      	ldr	r3, [pc, #624]	(160ac <_ZN11StrategieV26updateEv+0x5ac>)
   15e3c:	681b      	ldr	r3, [r3, #0]
   15e3e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   15e42:	4b9a      	ldr	r3, [pc, #616]	(160ac <_ZN11StrategieV26updateEv+0x5ac>)
   15e44:	601a      	str	r2, [r3, #0]
        }
        if(timeToRestart == 1)//Dernière boucle d'évitement avant de repartir
   15e46:	4b99      	ldr	r3, [pc, #612]	(160ac <_ZN11StrategieV26updateEv+0x5ac>)
   15e48:	681b      	ldr	r3, [r3, #0]
   15e4a:	2b01      	cmp	r3, #1
   15e4c:	d169      	bne.n	15f22 <_ZN11StrategieV26updateEv+0x422>
        {
            if (currentAction)
   15e4e:	4b91      	ldr	r3, [pc, #580]	(16094 <_ZN11StrategieV26updateEv+0x594>)
   15e50:	681b      	ldr	r3, [r3, #0]
   15e52:	2b00      	cmp	r3, #0
   15e54:	d05e      	beq.n	15f14 <_ZN11StrategieV26updateEv+0x414>
            {
                //Pour changer de trajectoire, décommenter les lignes suivantes
                currentAction->collisionAvoided();
   15e56:	4b8f      	ldr	r3, [pc, #572]	(16094 <_ZN11StrategieV26updateEv+0x594>)
   15e58:	681b      	ldr	r3, [r3, #0]
   15e5a:	681b      	ldr	r3, [r3, #0]
   15e5c:	f103 0310 	add.w	r3, r3, #16	; 0x10
   15e60:	681a      	ldr	r2, [r3, #0]
   15e62:	4b8c      	ldr	r3, [pc, #560]	(16094 <_ZN11StrategieV26updateEv+0x594>)
   15e64:	681b      	ldr	r3, [r3, #0]
   15e66:	4618      	mov	r0, r3
   15e68:	4790      	blx	r2
                actionsToDo[actionsCount]->collisionAvoided();
   15e6a:	4b8c      	ldr	r3, [pc, #560]	(1609c <_ZN11StrategieV26updateEv+0x59c>)
   15e6c:	681a      	ldr	r2, [r3, #0]
   15e6e:	4b90      	ldr	r3, [pc, #576]	(160b0 <_ZN11StrategieV26updateEv+0x5b0>)
   15e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15e74:	681b      	ldr	r3, [r3, #0]
   15e76:	f103 0310 	add.w	r3, r3, #16	; 0x10
   15e7a:	6819      	ldr	r1, [r3, #0]
   15e7c:	4b87      	ldr	r3, [pc, #540]	(1609c <_ZN11StrategieV26updateEv+0x59c>)
   15e7e:	681a      	ldr	r2, [r3, #0]
   15e80:	4b8b      	ldr	r3, [pc, #556]	(160b0 <_ZN11StrategieV26updateEv+0x5b0>)
   15e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15e86:	4618      	mov	r0, r3
   15e88:	4788      	blx	r1
                //currentCommand->collisionAvoided();
                currentAction->update();
   15e8a:	4b82      	ldr	r3, [pc, #520]	(16094 <_ZN11StrategieV26updateEv+0x594>)
   15e8c:	681b      	ldr	r3, [r3, #0]
   15e8e:	681b      	ldr	r3, [r3, #0]
   15e90:	f103 0308 	add.w	r3, r3, #8	; 0x8
   15e94:	681a      	ldr	r2, [r3, #0]
   15e96:	4b7f      	ldr	r3, [pc, #508]	(16094 <_ZN11StrategieV26updateEv+0x594>)
   15e98:	681b      	ldr	r3, [r3, #0]
   15e9a:	4618      	mov	r0, r3
   15e9c:	4790      	blx	r2
                Position pos = Odometrie::odometrie->getPos().getPosition();
   15e9e:	4b85      	ldr	r3, [pc, #532]	(160b4 <_ZN11StrategieV26updateEv+0x5b4>)
   15ea0:	681a      	ldr	r2, [r3, #0]
   15ea2:	f107 0384 	add.w	r3, r7, #132	; 0x84
   15ea6:	4618      	mov	r0, r3
   15ea8:	4611      	mov	r1, r2
   15eaa:	f7f3 fc59 	bl	9760 <_ZNK9Odometrie6getPosEv>
   15eae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   15eb2:	f107 0284 	add.w	r2, r7, #132	; 0x84
   15eb6:	4618      	mov	r0, r3
   15eb8:	4611      	mov	r1, r2
   15eba:	f7f8 fd5b 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
                addTemporaryAction(new ActionGoTo(pos, true));
   15ebe:	f04f 0030 	mov.w	r0, #48	; 0x30
   15ec2:	f7f8 f9b5 	bl	e230 <_Znwj>
   15ec6:	4603      	mov	r3, r0
   15ec8:	60fb      	str	r3, [r7, #12]
   15eca:	68fa      	ldr	r2, [r7, #12]
   15ecc:	2a00      	cmp	r2, #0
   15ece:	d00d      	beq.n	15eec <_ZN11StrategieV26updateEv+0x3ec>
   15ed0:	4b79      	ldr	r3, [pc, #484]	(160b8 <_ZN11StrategieV26updateEv+0x5b8>)
   15ed2:	9300      	str	r3, [sp, #0]
   15ed4:	68f8      	ldr	r0, [r7, #12]
   15ed6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   15eda:	e893 0006 	ldmia.w	r3, {r1, r2}
   15ede:	f04f 0301 	mov.w	r3, #1	; 0x1
   15ee2:	f7f9 f831 	bl	ef48 <_ZN10ActionGoToC1E8Positionbf>
   15ee6:	68fb      	ldr	r3, [r7, #12]
   15ee8:	613b      	str	r3, [r7, #16]
   15eea:	e001      	b.n	15ef0 <_ZN11StrategieV26updateEv+0x3f0>
   15eec:	68f9      	ldr	r1, [r7, #12]
   15eee:	6139      	str	r1, [r7, #16]
   15ef0:	693b      	ldr	r3, [r7, #16]
   15ef2:	4618      	mov	r0, r3
   15ef4:	f7ff fb54 	bl	155a0 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>

                //On arrête le robot
                if (currentCommand)
   15ef8:	4b70      	ldr	r3, [pc, #448]	(160bc <_ZN11StrategieV26updateEv+0x5bc>)
   15efa:	681b      	ldr	r3, [r3, #0]
   15efc:	2b00      	cmp	r3, #0
   15efe:	d009      	beq.n	15f14 <_ZN11StrategieV26updateEv+0x414>
                    currentCommand->resetSpeeds();
   15f00:	4b6e      	ldr	r3, [pc, #440]	(160bc <_ZN11StrategieV26updateEv+0x5bc>)
   15f02:	681b      	ldr	r3, [r3, #0]
   15f04:	681b      	ldr	r3, [r3, #0]
   15f06:	f103 030c 	add.w	r3, r3, #12	; 0xc
   15f0a:	681a      	ldr	r2, [r3, #0]
   15f0c:	4b6b      	ldr	r3, [pc, #428]	(160bc <_ZN11StrategieV26updateEv+0x5bc>)
   15f0e:	681b      	ldr	r3, [r3, #0]
   15f10:	4618      	mov	r0, r3
   15f12:	4790      	blx	r2
            }
            timeToRestart--;
   15f14:	4b65      	ldr	r3, [pc, #404]	(160ac <_ZN11StrategieV26updateEv+0x5ac>)
   15f16:	681b      	ldr	r3, [r3, #0]
   15f18:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   15f1c:	4b63      	ldr	r3, [pc, #396]	(160ac <_ZN11StrategieV26updateEv+0x5ac>)
   15f1e:	601a      	str	r2, [r3, #0]
   15f20:	e022      	b.n	15f68 <_ZN11StrategieV26updateEv+0x468>
        }

        else if (allume || timeToRestart) // Si un des sharp voit un adversaire, ou qu'on doit être arrêté suite à une détection
   15f22:	f897 309f 	ldrb.w	r3, [r7, #159]
   15f26:	2b00      	cmp	r3, #0
   15f28:	d103      	bne.n	15f32 <_ZN11StrategieV26updateEv+0x432>
   15f2a:	4b60      	ldr	r3, [pc, #384]	(160ac <_ZN11StrategieV26updateEv+0x5ac>)
   15f2c:	681b      	ldr	r3, [r3, #0]
   15f2e:	2b00      	cmp	r3, #0
   15f30:	d01a      	beq.n	15f68 <_ZN11StrategieV26updateEv+0x468>
        {
            if(!timeToRestart)//Début de l'évitement
   15f32:	4b5e      	ldr	r3, [pc, #376]	(160ac <_ZN11StrategieV26updateEv+0x5ac>)
   15f34:	681b      	ldr	r3, [r3, #0]
   15f36:	2b00      	cmp	r3, #0
   15f38:	d10f      	bne.n	15f5a <_ZN11StrategieV26updateEv+0x45a>
            {
                timeToRestart = 400;
   15f3a:	4a5c      	ldr	r2, [pc, #368]	(160ac <_ZN11StrategieV26updateEv+0x5ac>)
   15f3c:	f44f 73c8 	mov.w	r3, #400	; 0x190
   15f40:	6013      	str	r3, [r2, #0]
                hasJustAvoided = true;
   15f42:	4a5f      	ldr	r2, [pc, #380]	(160c0 <_ZN11StrategieV26updateEv+0x5c0>)
   15f44:	f04f 0301 	mov.w	r3, #1	; 0x1
   15f48:	7013      	strb	r3, [r2, #0]

//            if (true) // if (canStillDoAction)
//            {

//            }
                hasJustAvoided = false;
   15f4a:	4a5d      	ldr	r2, [pc, #372]	(160c0 <_ZN11StrategieV26updateEv+0x5c0>)
   15f4c:	f04f 0300 	mov.w	r3, #0	; 0x0
   15f50:	7013      	strb	r3, [r2, #0]
                somethingDetected = false;
   15f52:	4a5c      	ldr	r2, [pc, #368]	(160c4 <_ZN11StrategieV26updateEv+0x5c4>)
   15f54:	f04f 0300 	mov.w	r3, #0	; 0x0
   15f58:	7013      	strb	r3, [r2, #0]
                // tentative d'évitement :
                //Position pos = Odometrie::odometrie->getPos().getPosition();
                //addTemporaryAction(new ActionGoTo(pos, true));

            }
            Asservissement::asservissement->setCommandSpeeds(NULL);
   15f5a:	4b4f      	ldr	r3, [pc, #316]	(16098 <_ZN11StrategieV26updateEv+0x598>)
   15f5c:	681b      	ldr	r3, [r3, #0]
   15f5e:	4618      	mov	r0, r3
   15f60:	f04f 0100 	mov.w	r1, #0	; 0x0
   15f64:	f7f1 f8c0 	bl	70e8 <_ZN14Asservissement16setCommandSpeedsEP7Command>
        //std::cout << robotBloque << "\n";
    }*/

//    else
//        robotBloque = 0;
    if (currentAction->update() == -1 || (robotBloque > 50))// && !enTrainDeRecalibrerOdometrie))
   15f68:	4b4a      	ldr	r3, [pc, #296]	(16094 <_ZN11StrategieV26updateEv+0x594>)
   15f6a:	681b      	ldr	r3, [r3, #0]
   15f6c:	681b      	ldr	r3, [r3, #0]
   15f6e:	f103 0308 	add.w	r3, r3, #8	; 0x8
   15f72:	681a      	ldr	r2, [r3, #0]
   15f74:	4b47      	ldr	r3, [pc, #284]	(16094 <_ZN11StrategieV26updateEv+0x594>)
   15f76:	681b      	ldr	r3, [r3, #0]
   15f78:	4618      	mov	r0, r3
   15f7a:	4790      	blx	r2
   15f7c:	4603      	mov	r3, r0
   15f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   15f82:	d003      	beq.n	15f8c <_ZN11StrategieV26updateEv+0x48c>
   15f84:	4b50      	ldr	r3, [pc, #320]	(160c8 <_ZN11StrategieV26updateEv+0x5c8>)
   15f86:	681b      	ldr	r3, [r3, #0]
   15f88:	2b32      	cmp	r3, #50
   15f8a:	dd03      	ble.n	15f94 <_ZN11StrategieV26updateEv+0x494>
   15f8c:	f04f 0201 	mov.w	r2, #1	; 0x1
   15f90:	617a      	str	r2, [r7, #20]
   15f92:	e002      	b.n	15f9a <_ZN11StrategieV26updateEv+0x49a>
   15f94:	f04f 0300 	mov.w	r3, #0	; 0x0
   15f98:	617b      	str	r3, [r7, #20]
   15f9a:	697b      	ldr	r3, [r7, #20]
   15f9c:	2b00      	cmp	r3, #0
   15f9e:	d056      	beq.n	1604e <_ZN11StrategieV26updateEv+0x54e>
    {
        if (robotBloque > 1000) // si le robot est bloqué 2 secondes
   15fa0:	4b49      	ldr	r3, [pc, #292]	(160c8 <_ZN11StrategieV26updateEv+0x5c8>)
   15fa2:	681b      	ldr	r3, [r3, #0]
   15fa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   15fa8:	dd14      	ble.n	15fd4 <_ZN11StrategieV26updateEv+0x4d4>
        {
            // on recule de 20 cm
            Asservissement::asservissement->setCommandSpeeds(NULL);
   15faa:	4b3b      	ldr	r3, [pc, #236]	(16098 <_ZN11StrategieV26updateEv+0x598>)
   15fac:	681b      	ldr	r3, [r3, #0]
   15fae:	4618      	mov	r0, r3
   15fb0:	f04f 0100 	mov.w	r1, #0	; 0x0
   15fb4:	f7f1 f898 	bl	70e8 <_ZN14Asservissement16setCommandSpeedsEP7Command>
            currentCommand = NULL;
   15fb8:	4a40      	ldr	r2, [pc, #256]	(160bc <_ZN11StrategieV26updateEv+0x5bc>)
   15fba:	f04f 0300 	mov.w	r3, #0	; 0x0
   15fbe:	6013      	str	r3, [r2, #0]
            actionsCount = 2;
   15fc0:	4a36      	ldr	r2, [pc, #216]	(1609c <_ZN11StrategieV26updateEv+0x59c>)
   15fc2:	f04f 0302 	mov.w	r3, #2	; 0x2
   15fc6:	6013      	str	r3, [r2, #0]
            bool mustGoBack = true;
   15fc8:	f04f 0301 	mov.w	r3, #1	; 0x1
   15fcc:	f887 30af 	strb.w	r3, [r7, #175]
            allumerLED();
   15fd0:	f7f5 ff26 	bl	be20 <_Z10allumerLEDv>
            //StrategieV2::addTemporaryAction(new ActionGoTo(Odometrie::odometrie->getPos().getPosition(), mustGoBack));
        }
        robotBloque = 0;
   15fd4:	4a3c      	ldr	r2, [pc, #240]	(160c8 <_ZN11StrategieV26updateEv+0x5c8>)
   15fd6:	f04f 0300 	mov.w	r3, #0	; 0x0
   15fda:	6013      	str	r3, [r2, #0]
        //std::cout << "Changing action" << std::endl;
        Position currentPos = Odometrie::odometrie->getPos().getPosition();
   15fdc:	4b35      	ldr	r3, [pc, #212]	(160b4 <_ZN11StrategieV26updateEv+0x5b4>)
   15fde:	681a      	ldr	r2, [r3, #0]
   15fe0:	f107 0390 	add.w	r3, r7, #144	; 0x90
   15fe4:	4618      	mov	r0, r3
   15fe6:	4611      	mov	r1, r2
   15fe8:	f7f3 fbba 	bl	9760 <_ZNK9Odometrie6getPosEv>
   15fec:	f107 0344 	add.w	r3, r7, #68	; 0x44
   15ff0:	f107 0290 	add.w	r2, r7, #144	; 0x90
   15ff4:	4618      	mov	r0, r3
   15ff6:	4611      	mov	r1, r2
   15ff8:	f7f8 fcbc 	bl	e974 <_ZNK17PositionPlusAngle11getPositionEv>
            mustDeleteAction = true;
            timeSinceLastRecalibration++;
        }*/
        //else
        //{
        if (mustDeleteAction) // temporary action
   15ffc:	4b33      	ldr	r3, [pc, #204]	(160cc <_ZN11StrategieV26updateEv+0x5cc>)
   15ffe:	781b      	ldrb	r3, [r3, #0]
   16000:	2b00      	cmp	r3, #0
   16002:	d004      	beq.n	1600e <_ZN11StrategieV26updateEv+0x50e>
            mustDeleteAction = false;
   16004:	4b31      	ldr	r3, [pc, #196]	(160cc <_ZN11StrategieV26updateEv+0x5cc>)
   16006:	f04f 0200 	mov.w	r2, #0	; 0x0
   1600a:	701a      	strb	r2, [r3, #0]
   1600c:	e005      	b.n	1601a <_ZN11StrategieV26updateEv+0x51a>
        else
            actionsCount++;
   1600e:	4b23      	ldr	r3, [pc, #140]	(1609c <_ZN11StrategieV26updateEv+0x59c>)
   16010:	681b      	ldr	r3, [r3, #0]
   16012:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16016:	4b21      	ldr	r3, [pc, #132]	(1609c <_ZN11StrategieV26updateEv+0x59c>)
   16018:	601a      	str	r2, [r3, #0]


        if (actionsCount == 2)
   1601a:	4b20      	ldr	r3, [pc, #128]	(1609c <_ZN11StrategieV26updateEv+0x59c>)
   1601c:	681b      	ldr	r3, [r3, #0]
   1601e:	2b02      	cmp	r3, #2
   16020:	d10e      	bne.n	16040 <_ZN11StrategieV26updateEv+0x540>
        {
            currentCommand = NULL;
   16022:	4a26      	ldr	r2, [pc, #152]	(160bc <_ZN11StrategieV26updateEv+0x5bc>)
   16024:	f04f 0300 	mov.w	r3, #0	; 0x0
   16028:	6013      	str	r3, [r2, #0]
            Asservissement::asservissement->setCommandSpeeds(NULL);
   1602a:	4b1b      	ldr	r3, [pc, #108]	(16098 <_ZN11StrategieV26updateEv+0x598>)
   1602c:	681b      	ldr	r3, [r3, #0]
   1602e:	4618      	mov	r0, r3
   16030:	f04f 0100 	mov.w	r1, #0	; 0x0
   16034:	f7f1 f858 	bl	70e8 <_ZN14Asservissement16setCommandSpeedsEP7Command>
            updateCount = 170000;//17000;
   16038:	4a15      	ldr	r2, [pc, #84]	(16090 <_ZN11StrategieV26updateEv+0x590>)
   1603a:	4b25      	ldr	r3, [pc, #148]	(160d0 <_ZN11StrategieV26updateEv+0x5d0>)
   1603c:	6013      	str	r3, [r2, #0]
   1603e:	e020      	b.n	16082 <_ZN11StrategieV26updateEv+0x582>
            return;
        }
        else
        {
            currentAction = actionsToDo[actionsCount];
   16040:	4b16      	ldr	r3, [pc, #88]	(1609c <_ZN11StrategieV26updateEv+0x59c>)
   16042:	681a      	ldr	r2, [r3, #0]
   16044:	4b1a      	ldr	r3, [pc, #104]	(160b0 <_ZN11StrategieV26updateEv+0x5b0>)
   16046:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1604a:	4b12      	ldr	r3, [pc, #72]	(16094 <_ZN11StrategieV26updateEv+0x594>)
   1604c:	601a      	str	r2, [r3, #0]
        //delete action;
        //if (currentAction)
        // currentAction->update();

    }
    if(!timeToRestart)
   1604e:	4b17      	ldr	r3, [pc, #92]	(160ac <_ZN11StrategieV26updateEv+0x5ac>)
   16050:	681b      	ldr	r3, [r3, #0]
   16052:	2b00      	cmp	r3, #0
   16054:	d115      	bne.n	16082 <_ZN11StrategieV26updateEv+0x582>
    {
        if (currentCommand)
   16056:	4b19      	ldr	r3, [pc, #100]	(160bc <_ZN11StrategieV26updateEv+0x5bc>)
   16058:	681b      	ldr	r3, [r3, #0]
   1605a:	2b00      	cmp	r3, #0
   1605c:	d009      	beq.n	16072 <_ZN11StrategieV26updateEv+0x572>
            currentCommand->update();
   1605e:	4b17      	ldr	r3, [pc, #92]	(160bc <_ZN11StrategieV26updateEv+0x5bc>)
   16060:	681b      	ldr	r3, [r3, #0]
   16062:	681b      	ldr	r3, [r3, #0]
   16064:	f103 0308 	add.w	r3, r3, #8	; 0x8
   16068:	681a      	ldr	r2, [r3, #0]
   1606a:	4b14      	ldr	r3, [pc, #80]	(160bc <_ZN11StrategieV26updateEv+0x5bc>)
   1606c:	681b      	ldr	r3, [r3, #0]
   1606e:	4618      	mov	r0, r3
   16070:	4790      	blx	r2
        Asservissement::asservissement->setCommandSpeeds(currentCommand);
   16072:	4b09      	ldr	r3, [pc, #36]	(16098 <_ZN11StrategieV26updateEv+0x598>)
   16074:	681a      	ldr	r2, [r3, #0]
   16076:	4b11      	ldr	r3, [pc, #68]	(160bc <_ZN11StrategieV26updateEv+0x5bc>)
   16078:	681b      	ldr	r3, [r3, #0]
   1607a:	4610      	mov	r0, r2
   1607c:	4619      	mov	r1, r3
   1607e:	f7f1 f833 	bl	70e8 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    }
//    updateCount ++;
    //eteindreLED2();
    //eteindreLED();
}
   16082:	f107 07b4 	add.w	r7, r7, #180	; 0xb4
   16086:	46bd      	mov	sp, r7
   16088:	bd90      	pop	{r4, r7, pc}
   1608a:	46c0      	nop			(mov r8, r8)
   1608c:	200005a0 	.word	0x200005a0
   16090:	200005a4 	.word	0x200005a4
   16094:	200005ac 	.word	0x200005ac
   16098:	20000560 	.word	0x20000560
   1609c:	200005b0 	.word	0x200005b0
   160a0:	20000634 	.word	0x20000634
   160a4:	20000646 	.word	0x20000646
   160a8:	20000660 	.word	0x20000660
   160ac:	20000664 	.word	0x20000664
   160b0:	200005b4 	.word	0x200005b4
   160b4:	20000570 	.word	0x20000570
   160b8:	41f00000 	.word	0x41f00000
   160bc:	200005a8 	.word	0x200005a8
   160c0:	20000639 	.word	0x20000639
   160c4:	20000644 	.word	0x20000644
   160c8:	20000650 	.word	0x20000650
   160cc:	2000063a 	.word	0x2000063a
   160d0:	00029810 	.word	0x00029810

000160d4 <_ZN11StrategieV2D0Ev>:
#endif

    updateCount = 0;
}

StrategieV2::~StrategieV2()
   160d4:	b580      	push	{r7, lr}
   160d6:	b082      	sub	sp, #8
   160d8:	af00      	add	r7, sp, #0
   160da:	6078      	str	r0, [r7, #4]
   160dc:	687a      	ldr	r2, [r7, #4]
   160de:	4b08      	ldr	r3, [pc, #32]	(16100 <_ZN11StrategieV2D0Ev+0x2c>)
   160e0:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   160e2:	f04f 0301 	mov.w	r3, #1	; 0x1
   160e6:	b2db      	uxtb	r3, r3
   160e8:	2b00      	cmp	r3, #0
   160ea:	d002      	beq.n	160f2 <_ZN11StrategieV2D0Ev+0x1e>
   160ec:	6878      	ldr	r0, [r7, #4]
   160ee:	f7f8 f945 	bl	e37c <_ZdlPv>
   160f2:	687b      	ldr	r3, [r7, #4]
   160f4:	4618      	mov	r0, r3
   160f6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   160fa:	46bd      	mov	sp, r7
   160fc:	bd80      	pop	{r7, pc}
   160fe:	46c0      	nop			(mov r8, r8)
   16100:	00021b90 	.word	0x00021b90

00016104 <_ZN11StrategieV2D1Ev>:
#endif

    updateCount = 0;
}

StrategieV2::~StrategieV2()
   16104:	b580      	push	{r7, lr}
   16106:	b082      	sub	sp, #8
   16108:	af00      	add	r7, sp, #0
   1610a:	6078      	str	r0, [r7, #4]
   1610c:	687a      	ldr	r2, [r7, #4]
   1610e:	4b08      	ldr	r3, [pc, #32]	(16130 <_ZN11StrategieV2D1Ev+0x2c>)
   16110:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   16112:	f04f 0300 	mov.w	r3, #0	; 0x0
   16116:	b2db      	uxtb	r3, r3
   16118:	2b00      	cmp	r3, #0
   1611a:	d002      	beq.n	16122 <_ZN11StrategieV2D1Ev+0x1e>
   1611c:	6878      	ldr	r0, [r7, #4]
   1611e:	f7f8 f92d 	bl	e37c <_ZdlPv>
   16122:	687b      	ldr	r3, [r7, #4]
   16124:	4618      	mov	r0, r3
   16126:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1612a:	46bd      	mov	sp, r7
   1612c:	bd80      	pop	{r7, pc}
   1612e:	46c0      	nop			(mov r8, r8)
   16130:	00021b90 	.word	0x00021b90

00016134 <_ZN11StrategieV2D2Ev>:
#endif

    updateCount = 0;
}

StrategieV2::~StrategieV2()
   16134:	b580      	push	{r7, lr}
   16136:	b082      	sub	sp, #8
   16138:	af00      	add	r7, sp, #0
   1613a:	6078      	str	r0, [r7, #4]
   1613c:	687a      	ldr	r2, [r7, #4]
   1613e:	4b08      	ldr	r3, [pc, #32]	(16160 <_ZN11StrategieV2D2Ev+0x2c>)
   16140:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   16142:	f04f 0300 	mov.w	r3, #0	; 0x0
   16146:	b2db      	uxtb	r3, r3
   16148:	2b00      	cmp	r3, #0
   1614a:	d002      	beq.n	16152 <_ZN11StrategieV2D2Ev+0x1e>
   1614c:	6878      	ldr	r0, [r7, #4]
   1614e:	f7f8 f915 	bl	e37c <_ZdlPv>
   16152:	687b      	ldr	r3, [r7, #4]
   16154:	4618      	mov	r0, r3
   16156:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1615a:	46bd      	mov	sp, r7
   1615c:	bd80      	pop	{r7, pc}
   1615e:	46c0      	nop			(mov r8, r8)
   16160:	00021b90 	.word	0x00021b90

00016164 <_ZN11StrategieV2C1Eb>:
#ifdef ROBOTHW
Tourelle* StrategieV2::tourelle = NULL;
int StrategieV2::hysteresisTourelle = 0;
#endif

StrategieV2::StrategieV2(bool blue)
   16164:	b580      	push	{r7, lr}
   16166:	b08a      	sub	sp, #40
   16168:	af00      	add	r7, sp, #0
   1616a:	6178      	str	r0, [r7, #20]
   1616c:	460b      	mov	r3, r1
   1616e:	74fb      	strb	r3, [r7, #19]
   16170:	697a      	ldr	r2, [r7, #20]
   16172:	4b33      	ldr	r3, [pc, #204]	(16240 <_ZN11StrategieV2C1Eb+0xdc>)
   16174:	6013      	str	r3, [r2, #0]
{
    isBlue = blue;
   16176:	4a33      	ldr	r2, [pc, #204]	(16244 <_ZN11StrategieV2C1Eb+0xe0>)
   16178:	7cfb      	ldrb	r3, [r7, #19]
   1617a:	7013      	strb	r3, [r2, #0]
    timeToRestart = 0;
   1617c:	4a32      	ldr	r2, [pc, #200]	(16248 <_ZN11StrategieV2C1Eb+0xe4>)
   1617e:	f04f 0300 	mov.w	r3, #0	; 0x0
   16182:	6013      	str	r3, [r2, #0]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   16184:	f04f 0300 	mov.w	r3, #0	; 0x0
   16188:	627b      	str	r3, [r7, #36]
   1618a:	e008      	b.n	1619e <_ZN11StrategieV2C1Eb+0x3a>
        sharpsToCheck[i] = false;
   1618c:	6a79      	ldr	r1, [r7, #36]
   1618e:	4a2f      	ldr	r2, [pc, #188]	(1624c <_ZN11StrategieV2C1Eb+0xe8>)
   16190:	f04f 0300 	mov.w	r3, #0	; 0x0
   16194:	5453      	strb	r3, [r2, r1]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   16196:	6a7b      	ldr	r3, [r7, #36]
   16198:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1619c:	627b      	str	r3, [r7, #36]
   1619e:	6a7b      	ldr	r3, [r7, #36]
   161a0:	2b07      	cmp	r3, #7
   161a2:	ddf3      	ble.n	1618c <_ZN11StrategieV2C1Eb+0x28>
        sharpsToCheck[i] = false;

    //actionsToDo[0] = new Evitement();
    //actionsToDo[0] = new ActionGoTo(Position(1000,230), false);
    int decalage = 0;
   161a4:	f04f 0300 	mov.w	r3, #0	; 0x0
   161a8:	61fb      	str	r3, [r7, #28]
    //actionsToDo[0] = new StrategieV3(blue);

    /* Appel des stratégies */

    //actionsToDo[0] = (MediumLevelAction*) new Krabi2014(blue);
    actionsToDo[0] = (MediumLevelAction*) new Krabi2015(blue);
   161aa:	f44f 70c4 	mov.w	r0, #392	; 0x188
   161ae:	f7f8 f83f 	bl	e230 <_Znwj>
   161b2:	4603      	mov	r3, r0
   161b4:	603b      	str	r3, [r7, #0]
   161b6:	683a      	ldr	r2, [r7, #0]
   161b8:	2a00      	cmp	r2, #0
   161ba:	d007      	beq.n	161cc <_ZN11StrategieV2C1Eb+0x68>
   161bc:	7cfb      	ldrb	r3, [r7, #19]
   161be:	6838      	ldr	r0, [r7, #0]
   161c0:	4619      	mov	r1, r3
   161c2:	f7fa faeb 	bl	1079c <_ZN9Krabi2015C1Eb>
   161c6:	683b      	ldr	r3, [r7, #0]
   161c8:	607b      	str	r3, [r7, #4]
   161ca:	e001      	b.n	161d0 <_ZN11StrategieV2C1Eb+0x6c>
   161cc:	683a      	ldr	r2, [r7, #0]
   161ce:	607a      	str	r2, [r7, #4]
   161d0:	687a      	ldr	r2, [r7, #4]
   161d2:	4b1f      	ldr	r3, [pc, #124]	(16250 <_ZN11StrategieV2C1Eb+0xec>)
   161d4:	601a      	str	r2, [r3, #0]
    actionsToDo[8] = new ActionGoTo(Position(2600,800), true);
    actionsToDo[9] = new ActionGoTo(Position(2600,1070), false);
    actionsToDo[10] = new ActionGoTo(Position(300,1070), false);*/

    //currentAction = new RecalibrerOdometrie(new LimitSwitchSensor(LimitSwitchSensor::BACK_LEFT, GPIO_Pin_14, GPIOD), new LimitSwitchSensor(LimitSwitchSensor::BACK_RIGHT, GPIO_Pin_1, GPIOD));
    currentAction = actionsToDo[actionsCount];
   161d6:	4b1f      	ldr	r3, [pc, #124]	(16254 <_ZN11StrategieV2C1Eb+0xf0>)
   161d8:	681a      	ldr	r2, [r3, #0]
   161da:	4b1d      	ldr	r3, [pc, #116]	(16250 <_ZN11StrategieV2C1Eb+0xec>)
   161dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   161e0:	4b1d      	ldr	r3, [pc, #116]	(16258 <_ZN11StrategieV2C1Eb+0xf4>)
   161e2:	601a      	str	r2, [r3, #0]
    //currentAction = new RecalibrerOdometrie();
    //hasJustAvoided = true;
    //currentAction->update();


    StrategieV2::strategie = this;
   161e4:	4a1d      	ldr	r2, [pc, #116]	(1625c <_ZN11StrategieV2C1Eb+0xf8>)
   161e6:	697b      	ldr	r3, [r7, #20]
   161e8:	6013      	str	r3, [r2, #0]

    /*uint8_t channels[10] = {9,13,8,11,5,10,4,12,14,15};
    uint16_t* data = AnalogSensor::initialiserADC(10, channels);
    int nbSharp = 10;*/

    Sensors* sensors = Sensors::getSingleton();
   161ea:	f7f0 fca5 	bl	6b38 <_ZN7Sensors12getSingletonEv>
   161ee:	4603      	mov	r3, r0
   161f0:	623b      	str	r3, [r7, #32]
    sharps = sensors->getSharpSensorsList();
   161f2:	6a38      	ldr	r0, [r7, #32]
   161f4:	f7ef fc22 	bl	5a3c <_ZN7Sensors19getSharpSensorsListEv>
   161f8:	4602      	mov	r2, r0
   161fa:	4b19      	ldr	r3, [pc, #100]	(16260 <_ZN11StrategieV2C1Eb+0xfc>)
   161fc:	601a      	str	r2, [r3, #0]
    sharps[6] = new SharpSensor(SharpSensor::NONE, 4, data); //
    sharps[7] = new SharpSensor(SharpSensor::ELEVATOR_TOP, 12, data); // capteur haut ascenseur 12
    sharps[8] = new SharpSensor(SharpSensor::ELEVATOR_DOWN, 14, data); // capteur bas ascenseur 14
    sharps[9] = new SharpSensor(SharpSensor::BACK_RIGHT, 15, data, 2000.0); //
    #endif*/
    emptySharpsToCheck();
   161fe:	f7ff fa43 	bl	15688 <_ZN11StrategieV218emptySharpsToCheckEv>
    enableSharp(SharpSensor::BACK_MIDDLE);
    enableSharp(SharpSensor::BACK_RIGHT);*/

#ifdef ROBOTHW
//        tourelle = new Tourelle(TIM6, 0);//TIM parameter is not implemented yet
    tourelle = new Tourelle();
   16202:	f04f 0001 	mov.w	r0, #1	; 0x1
   16206:	f7f8 f813 	bl	e230 <_Znwj>
   1620a:	4603      	mov	r3, r0
   1620c:	60bb      	str	r3, [r7, #8]
   1620e:	68bb      	ldr	r3, [r7, #8]
   16210:	2b00      	cmp	r3, #0
   16212:	d005      	beq.n	16220 <_ZN11StrategieV2C1Eb+0xbc>
   16214:	68b8      	ldr	r0, [r7, #8]
   16216:	f7f7 f987 	bl	d528 <_ZN8TourelleC1Ev>
   1621a:	68ba      	ldr	r2, [r7, #8]
   1621c:	60fa      	str	r2, [r7, #12]
   1621e:	e001      	b.n	16224 <_ZN11StrategieV2C1Eb+0xc0>
   16220:	68bb      	ldr	r3, [r7, #8]
   16222:	60fb      	str	r3, [r7, #12]
   16224:	4b0f      	ldr	r3, [pc, #60]	(16264 <_ZN11StrategieV2C1Eb+0x100>)
   16226:	68fa      	ldr	r2, [r7, #12]
   16228:	601a      	str	r2, [r3, #0]
    //tourelle->setZoneCritique(10, 27000);
#endif

    updateCount = 0;
   1622a:	4a0f      	ldr	r2, [pc, #60]	(16268 <_ZN11StrategieV2C1Eb+0x104>)
   1622c:	f04f 0300 	mov.w	r3, #0	; 0x0
   16230:	6013      	str	r3, [r2, #0]
}
   16232:	697b      	ldr	r3, [r7, #20]
   16234:	4618      	mov	r0, r3
   16236:	f107 0728 	add.w	r7, r7, #40	; 0x28
   1623a:	46bd      	mov	sp, r7
   1623c:	bd80      	pop	{r7, pc}
   1623e:	46c0      	nop			(mov r8, r8)
   16240:	00021b90 	.word	0x00021b90
   16244:	20000645 	.word	0x20000645
   16248:	20000664 	.word	0x20000664
   1624c:	20000646 	.word	0x20000646
   16250:	200005b4 	.word	0x200005b4
   16254:	200005b0 	.word	0x200005b0
   16258:	200005ac 	.word	0x200005ac
   1625c:	200005a0 	.word	0x200005a0
   16260:	20000634 	.word	0x20000634
   16264:	20000668 	.word	0x20000668
   16268:	200005a4 	.word	0x200005a4

0001626c <_ZN11StrategieV2C2Eb>:
#ifdef ROBOTHW
Tourelle* StrategieV2::tourelle = NULL;
int StrategieV2::hysteresisTourelle = 0;
#endif

StrategieV2::StrategieV2(bool blue)
   1626c:	b580      	push	{r7, lr}
   1626e:	b08a      	sub	sp, #40
   16270:	af00      	add	r7, sp, #0
   16272:	6178      	str	r0, [r7, #20]
   16274:	460b      	mov	r3, r1
   16276:	74fb      	strb	r3, [r7, #19]
   16278:	697a      	ldr	r2, [r7, #20]
   1627a:	4b33      	ldr	r3, [pc, #204]	(16348 <_ZN11StrategieV2C2Eb+0xdc>)
   1627c:	6013      	str	r3, [r2, #0]
{
    isBlue = blue;
   1627e:	4a33      	ldr	r2, [pc, #204]	(1634c <_ZN11StrategieV2C2Eb+0xe0>)
   16280:	7cfb      	ldrb	r3, [r7, #19]
   16282:	7013      	strb	r3, [r2, #0]
    timeToRestart = 0;
   16284:	4a32      	ldr	r2, [pc, #200]	(16350 <_ZN11StrategieV2C2Eb+0xe4>)
   16286:	f04f 0300 	mov.w	r3, #0	; 0x0
   1628a:	6013      	str	r3, [r2, #0]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   1628c:	f04f 0300 	mov.w	r3, #0	; 0x0
   16290:	627b      	str	r3, [r7, #36]
   16292:	e008      	b.n	162a6 <_ZN11StrategieV2C2Eb+0x3a>
        sharpsToCheck[i] = false;
   16294:	6a79      	ldr	r1, [r7, #36]
   16296:	4a2f      	ldr	r2, [pc, #188]	(16354 <_ZN11StrategieV2C2Eb+0xe8>)
   16298:	f04f 0300 	mov.w	r3, #0	; 0x0
   1629c:	5453      	strb	r3, [r2, r1]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   1629e:	6a7b      	ldr	r3, [r7, #36]
   162a0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   162a4:	627b      	str	r3, [r7, #36]
   162a6:	6a7b      	ldr	r3, [r7, #36]
   162a8:	2b07      	cmp	r3, #7
   162aa:	ddf3      	ble.n	16294 <_ZN11StrategieV2C2Eb+0x28>
        sharpsToCheck[i] = false;

    //actionsToDo[0] = new Evitement();
    //actionsToDo[0] = new ActionGoTo(Position(1000,230), false);
    int decalage = 0;
   162ac:	f04f 0300 	mov.w	r3, #0	; 0x0
   162b0:	61fb      	str	r3, [r7, #28]
    //actionsToDo[0] = new StrategieV3(blue);

    /* Appel des stratégies */

    //actionsToDo[0] = (MediumLevelAction*) new Krabi2014(blue);
    actionsToDo[0] = (MediumLevelAction*) new Krabi2015(blue);
   162b2:	f44f 70c4 	mov.w	r0, #392	; 0x188
   162b6:	f7f7 ffbb 	bl	e230 <_Znwj>
   162ba:	4603      	mov	r3, r0
   162bc:	603b      	str	r3, [r7, #0]
   162be:	683a      	ldr	r2, [r7, #0]
   162c0:	2a00      	cmp	r2, #0
   162c2:	d007      	beq.n	162d4 <_ZN11StrategieV2C2Eb+0x68>
   162c4:	7cfb      	ldrb	r3, [r7, #19]
   162c6:	6838      	ldr	r0, [r7, #0]
   162c8:	4619      	mov	r1, r3
   162ca:	f7fa fa67 	bl	1079c <_ZN9Krabi2015C1Eb>
   162ce:	683b      	ldr	r3, [r7, #0]
   162d0:	607b      	str	r3, [r7, #4]
   162d2:	e001      	b.n	162d8 <_ZN11StrategieV2C2Eb+0x6c>
   162d4:	683a      	ldr	r2, [r7, #0]
   162d6:	607a      	str	r2, [r7, #4]
   162d8:	687a      	ldr	r2, [r7, #4]
   162da:	4b1f      	ldr	r3, [pc, #124]	(16358 <_ZN11StrategieV2C2Eb+0xec>)
   162dc:	601a      	str	r2, [r3, #0]
    actionsToDo[8] = new ActionGoTo(Position(2600,800), true);
    actionsToDo[9] = new ActionGoTo(Position(2600,1070), false);
    actionsToDo[10] = new ActionGoTo(Position(300,1070), false);*/

    //currentAction = new RecalibrerOdometrie(new LimitSwitchSensor(LimitSwitchSensor::BACK_LEFT, GPIO_Pin_14, GPIOD), new LimitSwitchSensor(LimitSwitchSensor::BACK_RIGHT, GPIO_Pin_1, GPIOD));
    currentAction = actionsToDo[actionsCount];
   162de:	4b1f      	ldr	r3, [pc, #124]	(1635c <_ZN11StrategieV2C2Eb+0xf0>)
   162e0:	681a      	ldr	r2, [r3, #0]
   162e2:	4b1d      	ldr	r3, [pc, #116]	(16358 <_ZN11StrategieV2C2Eb+0xec>)
   162e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   162e8:	4b1d      	ldr	r3, [pc, #116]	(16360 <_ZN11StrategieV2C2Eb+0xf4>)
   162ea:	601a      	str	r2, [r3, #0]
    //currentAction = new RecalibrerOdometrie();
    //hasJustAvoided = true;
    //currentAction->update();


    StrategieV2::strategie = this;
   162ec:	4a1d      	ldr	r2, [pc, #116]	(16364 <_ZN11StrategieV2C2Eb+0xf8>)
   162ee:	697b      	ldr	r3, [r7, #20]
   162f0:	6013      	str	r3, [r2, #0]

    /*uint8_t channels[10] = {9,13,8,11,5,10,4,12,14,15};
    uint16_t* data = AnalogSensor::initialiserADC(10, channels);
    int nbSharp = 10;*/

    Sensors* sensors = Sensors::getSingleton();
   162f2:	f7f0 fc21 	bl	6b38 <_ZN7Sensors12getSingletonEv>
   162f6:	4603      	mov	r3, r0
   162f8:	623b      	str	r3, [r7, #32]
    sharps = sensors->getSharpSensorsList();
   162fa:	6a38      	ldr	r0, [r7, #32]
   162fc:	f7ef fb9e 	bl	5a3c <_ZN7Sensors19getSharpSensorsListEv>
   16300:	4602      	mov	r2, r0
   16302:	4b19      	ldr	r3, [pc, #100]	(16368 <_ZN11StrategieV2C2Eb+0xfc>)
   16304:	601a      	str	r2, [r3, #0]
    sharps[6] = new SharpSensor(SharpSensor::NONE, 4, data); //
    sharps[7] = new SharpSensor(SharpSensor::ELEVATOR_TOP, 12, data); // capteur haut ascenseur 12
    sharps[8] = new SharpSensor(SharpSensor::ELEVATOR_DOWN, 14, data); // capteur bas ascenseur 14
    sharps[9] = new SharpSensor(SharpSensor::BACK_RIGHT, 15, data, 2000.0); //
    #endif*/
    emptySharpsToCheck();
   16306:	f7ff f9bf 	bl	15688 <_ZN11StrategieV218emptySharpsToCheckEv>
    enableSharp(SharpSensor::BACK_MIDDLE);
    enableSharp(SharpSensor::BACK_RIGHT);*/

#ifdef ROBOTHW
//        tourelle = new Tourelle(TIM6, 0);//TIM parameter is not implemented yet
    tourelle = new Tourelle();
   1630a:	f04f 0001 	mov.w	r0, #1	; 0x1
   1630e:	f7f7 ff8f 	bl	e230 <_Znwj>
   16312:	4603      	mov	r3, r0
   16314:	60bb      	str	r3, [r7, #8]
   16316:	68bb      	ldr	r3, [r7, #8]
   16318:	2b00      	cmp	r3, #0
   1631a:	d005      	beq.n	16328 <_ZN11StrategieV2C2Eb+0xbc>
   1631c:	68b8      	ldr	r0, [r7, #8]
   1631e:	f7f7 f903 	bl	d528 <_ZN8TourelleC1Ev>
   16322:	68ba      	ldr	r2, [r7, #8]
   16324:	60fa      	str	r2, [r7, #12]
   16326:	e001      	b.n	1632c <_ZN11StrategieV2C2Eb+0xc0>
   16328:	68bb      	ldr	r3, [r7, #8]
   1632a:	60fb      	str	r3, [r7, #12]
   1632c:	4b0f      	ldr	r3, [pc, #60]	(1636c <_ZN11StrategieV2C2Eb+0x100>)
   1632e:	68fa      	ldr	r2, [r7, #12]
   16330:	601a      	str	r2, [r3, #0]
    //tourelle->setZoneCritique(10, 27000);
#endif

    updateCount = 0;
   16332:	4a0f      	ldr	r2, [pc, #60]	(16370 <_ZN11StrategieV2C2Eb+0x104>)
   16334:	f04f 0300 	mov.w	r3, #0	; 0x0
   16338:	6013      	str	r3, [r2, #0]
}
   1633a:	697b      	ldr	r3, [r7, #20]
   1633c:	4618      	mov	r0, r3
   1633e:	f107 0728 	add.w	r7, r7, #40	; 0x28
   16342:	46bd      	mov	sp, r7
   16344:	bd80      	pop	{r7, pc}
   16346:	46c0      	nop			(mov r8, r8)
   16348:	00021b90 	.word	0x00021b90
   1634c:	20000645 	.word	0x20000645
   16350:	20000664 	.word	0x20000664
   16354:	20000646 	.word	0x20000646
   16358:	200005b4 	.word	0x200005b4
   1635c:	200005b0 	.word	0x200005b0
   16360:	200005ac 	.word	0x200005ac
   16364:	200005a0 	.word	0x200005a0
   16368:	20000634 	.word	0x20000634
   1636c:	20000668 	.word	0x20000668
   16370:	200005a4 	.word	0x200005a4

00016374 <_ZN11StrategieV316collisionAvoidedEv>:
    for(int i = 0 ; i < 10 ; i++){
        this->tableauEtapes[i]->setState(0);
    }
}

void StrategieV3::collisionAvoided(){
   16374:	b480      	push	{r7}
   16376:	b083      	sub	sp, #12
   16378:	af00      	add	r7, sp, #0
   1637a:	6078      	str	r0, [r7, #4]
    this->avoiding = true;
   1637c:	687b      	ldr	r3, [r7, #4]
   1637e:	f04f 0201 	mov.w	r2, #1	; 0x1
   16382:	f883 2038 	strb.w	r2, [r3, #56]
}
   16386:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1638a:	46bd      	mov	sp, r7
   1638c:	bc80      	pop	{r7}
   1638e:	4770      	bx	lr

00016390 <_ZN11StrategieV312updateScoresEv>:
    // Mettre un point d'arrêt ici pour récupérer les distances dans la sortie standard du simu
    // ###########################################################################################
#endif
}

bool StrategieV3::updateScores() {
   16390:	b580      	push	{r7, lr}
   16392:	b086      	sub	sp, #24
   16394:	af00      	add	r7, sp, #0
   16396:	6078      	str	r0, [r7, #4]
    //le temps restant done
    //la trajectoire de notre autre robot
    //...
    //C'est aussi utilisé pour savoir si on est dans un sous-graphe sans objectif,
    //et qu'il faut oublier qu'on a vu des robots
    int scoreTypeEtape = 0;
   16398:	f04f 0300 	mov.w	r3, #0	; 0x0
   1639c:	60fb      	str	r3, [r7, #12]
    //float modificateurTemporel = 1.f;

    bool resteDesChosesAFaire = false;
   1639e:	f04f 0300 	mov.w	r3, #0	; 0x0
   163a2:	74fb      	strb	r3, [r7, #19]
    for(int i = 0 ; i < this->nombreEtapes ; i++)
   163a4:	f04f 0300 	mov.w	r3, #0	; 0x0
   163a8:	617b      	str	r3, [r7, #20]
   163aa:	e01e      	b.n	163ea <_ZN11StrategieV312updateScoresEv+0x5a>
    {
        scoreTypeEtape=this->getScoreEtape(i);
   163ac:	687b      	ldr	r3, [r7, #4]
   163ae:	681b      	ldr	r3, [r3, #0]
   163b0:	f103 031c 	add.w	r3, r3, #28	; 0x1c
   163b4:	681b      	ldr	r3, [r3, #0]
   163b6:	6878      	ldr	r0, [r7, #4]
   163b8:	6979      	ldr	r1, [r7, #20]
   163ba:	4798      	blx	r3
   163bc:	4603      	mov	r3, r0
   163be:	60fb      	str	r3, [r7, #12]
        if(scoreTypeEtape)
   163c0:	68fb      	ldr	r3, [r7, #12]
   163c2:	2b00      	cmp	r3, #0
   163c4:	d002      	beq.n	163cc <_ZN11StrategieV312updateScoresEv+0x3c>
        {
            resteDesChosesAFaire = true;
   163c6:	f04f 0301 	mov.w	r3, #1	; 0x1
   163ca:	74fb      	strb	r3, [r7, #19]
        }

        this->tableauEtapes[i]->setScore(scoreTypeEtape);
   163cc:	687b      	ldr	r3, [r7, #4]
   163ce:	6b1a      	ldr	r2, [r3, #48]
   163d0:	697b      	ldr	r3, [r7, #20]
   163d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
   163d6:	4413      	add	r3, r2
   163d8:	681b      	ldr	r3, [r3, #0]
   163da:	4618      	mov	r0, r3
   163dc:	68f9      	ldr	r1, [r7, #12]
   163de:	f7f9 fe31 	bl	10044 <_ZN5Etape8setScoreEi>
    //et qu'il faut oublier qu'on a vu des robots
    int scoreTypeEtape = 0;
    //float modificateurTemporel = 1.f;

    bool resteDesChosesAFaire = false;
    for(int i = 0 ; i < this->nombreEtapes ; i++)
   163e2:	697b      	ldr	r3, [r7, #20]
   163e4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   163e8:	617b      	str	r3, [r7, #20]
   163ea:	687b      	ldr	r3, [r7, #4]
   163ec:	69da      	ldr	r2, [r3, #28]
   163ee:	697b      	ldr	r3, [r7, #20]
   163f0:	429a      	cmp	r2, r3
   163f2:	dcdb      	bgt.n	163ac <_ZN11StrategieV312updateScoresEv+0x1c>
            resteDesChosesAFaire = true;
        }

        this->tableauEtapes[i]->setScore(scoreTypeEtape);
    }
    return resteDesChosesAFaire;
   163f4:	7cfb      	ldrb	r3, [r7, #19]
}
   163f6:	4618      	mov	r0, r3
   163f8:	f107 0718 	add.w	r7, r7, #24	; 0x18
   163fc:	46bd      	mov	sp, r7
   163fe:	bd80      	pop	{r7, pc}

00016400 <_ZN11StrategieV313startDijkstraEv>:
    }
    p->setOpacity(1);
}
#endif

void StrategieV3::startDijkstra(){
   16400:	b590      	push	{r4, r7, lr}
   16402:	b085      	sub	sp, #20
   16404:	af00      	add	r7, sp, #0
   16406:	6078      	str	r0, [r7, #4]
    for(int i=0; i<this->nombreEtapes; i++)
   16408:	f04f 0300 	mov.w	r3, #0	; 0x0
   1640c:	60fb      	str	r3, [r7, #12]
   1640e:	e00d      	b.n	1642c <_ZN11StrategieV313startDijkstraEv+0x2c>
        tableauEtapesTotal[i]->computeChildDistances();
   16410:	687b      	ldr	r3, [r7, #4]
   16412:	6b5a      	ldr	r2, [r3, #52]
   16414:	68fb      	ldr	r3, [r7, #12]
   16416:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1641a:	4413      	add	r3, r2
   1641c:	681b      	ldr	r3, [r3, #0]
   1641e:	4618      	mov	r0, r3
   16420:	f7f9 feb6 	bl	10190 <_ZN5Etape21computeChildDistancesEv>
    p->setOpacity(1);
}
#endif

void StrategieV3::startDijkstra(){
    for(int i=0; i<this->nombreEtapes; i++)
   16424:	68fb      	ldr	r3, [r7, #12]
   16426:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1642a:	60fb      	str	r3, [r7, #12]
   1642c:	687b      	ldr	r3, [r7, #4]
   1642e:	69da      	ldr	r2, [r3, #28]
   16430:	68fb      	ldr	r3, [r7, #12]
   16432:	429a      	cmp	r2, r3
   16434:	dcec      	bgt.n	16410 <_ZN11StrategieV313startDijkstraEv+0x10>
        tableauEtapesTotal[i]->computeChildDistances();

    this->dijkstra = new Dijkstra(tableauEtapesTotal, this->nombreEtapes);
   16436:	f04f 0024 	mov.w	r0, #36	; 0x24
   1643a:	f7f7 fef9 	bl	e230 <_Znwj>
   1643e:	4603      	mov	r3, r0
   16440:	461c      	mov	r4, r3
   16442:	687b      	ldr	r3, [r7, #4]
   16444:	6b5a      	ldr	r2, [r3, #52]
   16446:	687b      	ldr	r3, [r7, #4]
   16448:	69db      	ldr	r3, [r3, #28]
   1644a:	4620      	mov	r0, r4
   1644c:	4611      	mov	r1, r2
   1644e:	461a      	mov	r2, r3
   16450:	f7f9 f85e 	bl	f510 <_ZN8DijkstraC1EPP5Etapei>
   16454:	687b      	ldr	r3, [r7, #4]
   16456:	62dc      	str	r4, [r3, #44]

    this->tableauEtapes = tableauEtapesTotal;
   16458:	687b      	ldr	r3, [r7, #4]
   1645a:	6b5a      	ldr	r2, [r3, #52]
   1645c:	687b      	ldr	r3, [r7, #4]
   1645e:	631a      	str	r2, [r3, #48]
    this->tableauEtapes[0]->setParent(this->tableauEtapes[0]);// Evite de planter si on detecte dès la première boucle (dans le simu)
   16460:	687b      	ldr	r3, [r7, #4]
   16462:	6b1b      	ldr	r3, [r3, #48]
   16464:	681a      	ldr	r2, [r3, #0]
   16466:	687b      	ldr	r3, [r7, #4]
   16468:	6b1b      	ldr	r3, [r3, #48]
   1646a:	681b      	ldr	r3, [r3, #0]
   1646c:	4610      	mov	r0, r2
   1646e:	4619      	mov	r1, r3
   16470:	f7f9 fcfa 	bl	fe68 <_ZN5Etape9setParentEPS_>

    dijkstra->setEtapeCourante(0);
   16474:	687b      	ldr	r3, [r7, #4]
   16476:	6adb      	ldr	r3, [r3, #44]
   16478:	4618      	mov	r0, r3
   1647a:	f04f 0100 	mov.w	r1, #0	; 0x0
   1647e:	f7f9 f86d 	bl	f55c <_ZN8Dijkstra16setEtapeCouranteEi>
    }
    // ###########################################################################################
    // Mettre un point d'arrêt ici pour récupérer les distances dans la sortie standard du simu
    // ###########################################################################################
#endif
}
   16482:	f107 0714 	add.w	r7, r7, #20	; 0x14
   16486:	46bd      	mov	sp, r7
   16488:	bd90      	pop	{r4, r7, pc}
   1648a:	46c0      	nop			(mov r8, r8)

0001648c <_ZN11StrategieV318updateIntermedaireEv>:
void StrategieV3::collisionAvoided(){
    this->avoiding = true;
}


void StrategieV3::updateIntermedaire()
   1648c:	b580      	push	{r7, lr}
   1648e:	b086      	sub	sp, #24
   16490:	af00      	add	r7, sp, #0
   16492:	6078      	str	r0, [r7, #4]
    //(sauf peut être le parent de l'étape d'origine, mais on s'en fout

    #ifndef ROBOTHW
        qDebug() << "updateIntermedaire\n";
    #endif
    int etapeOuOnVientDArriver = this->etapeEnCours;
   16494:	687b      	ldr	r3, [r7, #4]
   16496:	699b      	ldr	r3, [r3, #24]
   16498:	60fb      	str	r3, [r7, #12]
    this->etapeEnCours = this->goal;
   1649a:	687b      	ldr	r3, [r7, #4]
   1649c:	6bda      	ldr	r2, [r3, #60]
   1649e:	687b      	ldr	r3, [r7, #4]
   164a0:	619a      	str	r2, [r3, #24]
    Etape* toto = this->tableauEtapes[1];
   164a2:	687b      	ldr	r3, [r7, #4]
   164a4:	6b1b      	ldr	r3, [r3, #48]
   164a6:	f103 0304 	add.w	r3, r3, #4	; 0x4
   164aa:	681b      	ldr	r3, [r3, #0]
   164ac:	613b      	str	r3, [r7, #16]
    Etape* toto2 = this->tableauEtapes[2];
   164ae:	687b      	ldr	r3, [r7, #4]
   164b0:	6b1b      	ldr	r3, [r3, #48]
   164b2:	f103 0308 	add.w	r3, r3, #8	; 0x8
   164b6:	681b      	ldr	r3, [r3, #0]
   164b8:	617b      	str	r3, [r7, #20]

    // Si la prochaine étape est le goal, alors au prochain update il faudra trouver un nouvel objectif -> status = 1;
    if(((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero())) == etapeOuOnVientDArriver)
   164ba:	687b      	ldr	r3, [r7, #4]
   164bc:	6b1a      	ldr	r2, [r3, #48]
   164be:	687b      	ldr	r3, [r7, #4]
   164c0:	699b      	ldr	r3, [r3, #24]
   164c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
   164c6:	4413      	add	r3, r2
   164c8:	681b      	ldr	r3, [r3, #0]
   164ca:	4618      	mov	r0, r3
   164cc:	f7f9 fc78 	bl	fdc0 <_ZN5Etape9getParentEv>
   164d0:	4603      	mov	r3, r0
   164d2:	4618      	mov	r0, r3
   164d4:	f7f9 fd0a 	bl	feec <_ZN5Etape9getNumeroEv>
   164d8:	4602      	mov	r2, r0
   164da:	68fb      	ldr	r3, [r7, #12]
   164dc:	429a      	cmp	r2, r3
   164de:	bf14      	ite	ne
   164e0:	2300      	movne	r3, #0
   164e2:	2301      	moveq	r3, #1
   164e4:	b2db      	uxtb	r3, r3
   164e6:	2b00      	cmp	r3, #0
   164e8:	d016      	beq.n	16518 <_ZN11StrategieV318updateIntermedaireEv+0x8c>
    {
        #ifndef ROBOTHW
            qDebug() << "la prochaine étape est le goal\n";
        #endif
        this->statusStrat = 1;
   164ea:	687a      	ldr	r2, [r7, #4]
   164ec:	f04f 0301 	mov.w	r3, #1	; 0x1
   164f0:	6413      	str	r3, [r2, #64]
   164f2:	e011      	b.n	16518 <_ZN11StrategieV318updateIntermedaireEv+0x8c>
    while(((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero())) != etapeOuOnVientDArriver)
    {
        #ifndef ROBOTHW
        qDebug() << "On cherche l'étape suivant vers l'etape - but" << this->etapeEnCours << "\n";
        #endif
        this->etapeEnCours = ((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero()));
   164f4:	687b      	ldr	r3, [r7, #4]
   164f6:	6b1a      	ldr	r2, [r3, #48]
   164f8:	687b      	ldr	r3, [r7, #4]
   164fa:	699b      	ldr	r3, [r3, #24]
   164fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16500:	4413      	add	r3, r2
   16502:	681b      	ldr	r3, [r3, #0]
   16504:	4618      	mov	r0, r3
   16506:	f7f9 fc5b 	bl	fdc0 <_ZN5Etape9getParentEv>
   1650a:	4603      	mov	r3, r0
   1650c:	4618      	mov	r0, r3
   1650e:	f7f9 fced 	bl	feec <_ZN5Etape9getNumeroEv>
   16512:	4602      	mov	r2, r0
   16514:	687b      	ldr	r3, [r7, #4]
   16516:	619a      	str	r2, [r3, #24]
        #endif
        this->statusStrat = 1;
    }

    //On cherche l'étape suivant vers l'etape - but
    while(((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero())) != etapeOuOnVientDArriver)
   16518:	687b      	ldr	r3, [r7, #4]
   1651a:	6b1a      	ldr	r2, [r3, #48]
   1651c:	687b      	ldr	r3, [r7, #4]
   1651e:	699b      	ldr	r3, [r3, #24]
   16520:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16524:	4413      	add	r3, r2
   16526:	681b      	ldr	r3, [r3, #0]
   16528:	4618      	mov	r0, r3
   1652a:	f7f9 fc49 	bl	fdc0 <_ZN5Etape9getParentEv>
   1652e:	4603      	mov	r3, r0
   16530:	4618      	mov	r0, r3
   16532:	f7f9 fcdb 	bl	feec <_ZN5Etape9getNumeroEv>
   16536:	4602      	mov	r2, r0
   16538:	68fb      	ldr	r3, [r7, #12]
   1653a:	429a      	cmp	r2, r3
   1653c:	bf0c      	ite	eq
   1653e:	2300      	moveq	r3, #0
   16540:	2301      	movne	r3, #1
   16542:	b2db      	uxtb	r3, r3
   16544:	2b00      	cmp	r3, #0
   16546:	d1d5      	bne.n	164f4 <_ZN11StrategieV318updateIntermedaireEv+0x68>
        qDebug() << "On cherche l'étape suivant vers l'etape - but" << this->etapeEnCours << "\n";
        #endif
        this->etapeEnCours = ((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero()));
    }

    if(this->statusStrat == 1)
   16548:	687b      	ldr	r3, [r7, #4]
   1654a:	6c1b      	ldr	r3, [r3, #64]
   1654c:	2b01      	cmp	r3, #1
   1654e:	d10b      	bne.n	16568 <_ZN11StrategieV318updateIntermedaireEv+0xdc>
    {
        //On réalise l'action de l'étape - but
        StrategieV2::addTemporaryAction(actionEtape[this->etapeEnCours]);
   16550:	687b      	ldr	r3, [r7, #4]
   16552:	6a5a      	ldr	r2, [r3, #36]
   16554:	687b      	ldr	r3, [r7, #4]
   16556:	699b      	ldr	r3, [r3, #24]
   16558:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1655c:	4413      	add	r3, r2
   1655e:	681b      	ldr	r3, [r3, #0]
   16560:	4618      	mov	r0, r3
   16562:	f7ff f81d 	bl	155a0 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>
   16566:	e00d      	b.n	16584 <_ZN11StrategieV318updateIntermedaireEv+0xf8>
    }
    else
    {
        //On ajoute l'action d'aller en ligne droite vers cette étape intermédiaire
        StrategieV2::addTemporaryAction(&actionGoto[this->etapeEnCours]);
   16568:	687b      	ldr	r3, [r7, #4]
   1656a:	6a99      	ldr	r1, [r3, #40]
   1656c:	687b      	ldr	r3, [r7, #4]
   1656e:	699b      	ldr	r3, [r3, #24]
   16570:	ea4f 1203 	mov.w	r2, r3, lsl #4
   16574:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16578:	ebc2 0303 	rsb	r3, r2, r3
   1657c:	440b      	add	r3, r1
   1657e:	4618      	mov	r0, r3
   16580:	f7ff f80e 	bl	155a0 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>
    }
}
   16584:	f107 0718 	add.w	r7, r7, #24	; 0x18
   16588:	46bd      	mov	sp, r7
   1658a:	bd80      	pop	{r7, pc}

0001658c <_ZN11StrategieV315resetEverythingEv>:
        }
    }
    return this->statusStrat;
}

void StrategieV3::resetEverything(){
   1658c:	b580      	push	{r7, lr}
   1658e:	b084      	sub	sp, #16
   16590:	af00      	add	r7, sp, #0
   16592:	6078      	str	r0, [r7, #4]
    for(int i = 0 ; i < 10 ; i++){
   16594:	f04f 0300 	mov.w	r3, #0	; 0x0
   16598:	60fb      	str	r3, [r7, #12]
   1659a:	e00f      	b.n	165bc <_ZN11StrategieV315resetEverythingEv+0x30>
        this->tableauEtapes[i]->setState(0);
   1659c:	687b      	ldr	r3, [r7, #4]
   1659e:	6b1a      	ldr	r2, [r3, #48]
   165a0:	68fb      	ldr	r3, [r7, #12]
   165a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
   165a6:	4413      	add	r3, r2
   165a8:	681b      	ldr	r3, [r3, #0]
   165aa:	4618      	mov	r0, r3
   165ac:	f04f 0100 	mov.w	r1, #0	; 0x0
   165b0:	f7f9 fc32 	bl	fe18 <_ZN5Etape8setStateEi>
    }
    return this->statusStrat;
}

void StrategieV3::resetEverything(){
    for(int i = 0 ; i < 10 ; i++){
   165b4:	68fb      	ldr	r3, [r7, #12]
   165b6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   165ba:	60fb      	str	r3, [r7, #12]
   165bc:	68fb      	ldr	r3, [r7, #12]
   165be:	2b09      	cmp	r3, #9
   165c0:	ddec      	ble.n	1659c <_ZN11StrategieV315resetEverythingEv+0x10>
        this->tableauEtapes[i]->setState(0);
    }
}
   165c2:	f107 0710 	add.w	r7, r7, #16	; 0x10
   165c6:	46bd      	mov	sp, r7
   165c8:	bd80      	pop	{r7, pc}
   165ca:	46c0      	nop			(mov r8, r8)

000165cc <_ZN11StrategieV36updateEv>:
    */


}

int StrategieV3::update()
   165cc:	b580      	push	{r7, lr}
   165ce:	b08e      	sub	sp, #56
   165d0:	af00      	add	r7, sp, #0
   165d2:	60f8      	str	r0, [r7, #12]
{

    this->actionEtape[this->etapeEnCours]->reset();
   165d4:	68fb      	ldr	r3, [r7, #12]
   165d6:	6a5a      	ldr	r2, [r3, #36]
   165d8:	68fb      	ldr	r3, [r7, #12]
   165da:	699b      	ldr	r3, [r3, #24]
   165dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   165e0:	4413      	add	r3, r2
   165e2:	681b      	ldr	r3, [r3, #0]
   165e4:	681b      	ldr	r3, [r3, #0]
   165e6:	f103 0314 	add.w	r3, r3, #20	; 0x14
   165ea:	6819      	ldr	r1, [r3, #0]
   165ec:	68fb      	ldr	r3, [r7, #12]
   165ee:	6a5a      	ldr	r2, [r3, #36]
   165f0:	68fb      	ldr	r3, [r7, #12]
   165f2:	699b      	ldr	r3, [r3, #24]
   165f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   165f8:	4413      	add	r3, r2
   165fa:	681b      	ldr	r3, [r3, #0]
   165fc:	4618      	mov	r0, r3
   165fe:	4788      	blx	r1
    this->actionGoto[this->etapeEnCours].reset();
   16600:	68fb      	ldr	r3, [r7, #12]
   16602:	6a99      	ldr	r1, [r3, #40]
   16604:	68fb      	ldr	r3, [r7, #12]
   16606:	699b      	ldr	r3, [r3, #24]
   16608:	ea4f 1203 	mov.w	r2, r3, lsl #4
   1660c:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16610:	ebc2 0303 	rsb	r3, r2, r3
   16614:	440b      	add	r3, r1
   16616:	681b      	ldr	r3, [r3, #0]
   16618:	f103 0314 	add.w	r3, r3, #20	; 0x14
   1661c:	f8d3 c000 	ldr.w	ip, [r3]
   16620:	68fb      	ldr	r3, [r7, #12]
   16622:	6a99      	ldr	r1, [r3, #40]
   16624:	68fb      	ldr	r3, [r7, #12]
   16626:	699b      	ldr	r3, [r3, #24]
   16628:	ea4f 1203 	mov.w	r2, r3, lsl #4
   1662c:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16630:	ebc2 0303 	rsb	r3, r2, r3
   16634:	440b      	add	r3, r1
   16636:	4618      	mov	r0, r3
   16638:	47e0      	blx	ip



    //Si on est en train d'éviter, on revient à l'étape précédente, et on marque l'étape comme à éviter
    if(this->avoiding)
   1663a:	68fb      	ldr	r3, [r7, #12]
   1663c:	f893 3038 	ldrb.w	r3, [r3, #56]
   16640:	2b00      	cmp	r3, #0
   16642:	f000 80cf 	beq.w	167e4 <_ZN11StrategieV36updateEv+0x218>
    {
        this->tableauEtapes[this->etapeEnCours]->robotVu();
   16646:	68fb      	ldr	r3, [r7, #12]
   16648:	6b1a      	ldr	r2, [r3, #48]
   1664a:	68fb      	ldr	r3, [r7, #12]
   1664c:	699b      	ldr	r3, [r3, #24]
   1664e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16652:	4413      	add	r3, r2
   16654:	681b      	ldr	r3, [r3, #0]
   16656:	4618      	mov	r0, r3
   16658:	f7f9 fc70 	bl	ff3c <_ZN5Etape7robotVuEv>
        //this->tableauEtapes[this->etapeEnCours]->setState(-2);
        this->tableauEtapes[etapeEnCours]->getParent()->setParent(this->tableauEtapes[this->etapeEnCours]);
   1665c:	68fb      	ldr	r3, [r7, #12]
   1665e:	6b1a      	ldr	r2, [r3, #48]
   16660:	68fb      	ldr	r3, [r7, #12]
   16662:	699b      	ldr	r3, [r3, #24]
   16664:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16668:	4413      	add	r3, r2
   1666a:	681b      	ldr	r3, [r3, #0]
   1666c:	4618      	mov	r0, r3
   1666e:	f7f9 fba7 	bl	fdc0 <_ZN5Etape9getParentEv>
   16672:	4601      	mov	r1, r0
   16674:	68fb      	ldr	r3, [r7, #12]
   16676:	6b1a      	ldr	r2, [r3, #48]
   16678:	68fb      	ldr	r3, [r7, #12]
   1667a:	699b      	ldr	r3, [r3, #24]
   1667c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16680:	4413      	add	r3, r2
   16682:	681b      	ldr	r3, [r3, #0]
   16684:	4608      	mov	r0, r1
   16686:	4619      	mov	r1, r3
   16688:	f7f9 fbee 	bl	fe68 <_ZN5Etape9setParentEPS_>
        this->etapeEnCours = this->tableauEtapes[etapeEnCours]->getParent()->getNumero();
   1668c:	68fb      	ldr	r3, [r7, #12]
   1668e:	6b1a      	ldr	r2, [r3, #48]
   16690:	68fb      	ldr	r3, [r7, #12]
   16692:	699b      	ldr	r3, [r3, #24]
   16694:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16698:	4413      	add	r3, r2
   1669a:	681b      	ldr	r3, [r3, #0]
   1669c:	4618      	mov	r0, r3
   1669e:	f7f9 fb8f 	bl	fdc0 <_ZN5Etape9getParentEv>
   166a2:	4603      	mov	r3, r0
   166a4:	4618      	mov	r0, r3
   166a6:	f7f9 fc21 	bl	feec <_ZN5Etape9getNumeroEv>
   166aa:	4602      	mov	r2, r0
   166ac:	68fb      	ldr	r3, [r7, #12]
   166ae:	619a      	str	r2, [r3, #24]



        //On recalcul les distances par rapport à l'étape où l'on vient d'arriver
        dijkstra->setEtapeCourante(this->etapeEnCours);
   166b0:	68fb      	ldr	r3, [r7, #12]
   166b2:	6ada      	ldr	r2, [r3, #44]
   166b4:	68fb      	ldr	r3, [r7, #12]
   166b6:	699b      	ldr	r3, [r3, #24]
   166b8:	4610      	mov	r0, r2
   166ba:	4619      	mov	r1, r3
   166bc:	f7f8 ff4e 	bl	f55c <_ZN8Dijkstra16setEtapeCouranteEi>

        if(this->enTrainEviterReculant)
   166c0:	68fb      	ldr	r3, [r7, #12]
   166c2:	f893 3044 	ldrb.w	r3, [r3, #68]
   166c6:	2b00      	cmp	r3, #0
   166c8:	d01a      	beq.n	16700 <_ZN11StrategieV36updateEv+0x134>
        {
            this->enTrainEviterReculant = false;
   166ca:	68fa      	ldr	r2, [r7, #12]
   166cc:	f04f 0300 	mov.w	r3, #0	; 0x0
   166d0:	f882 3044 	strb.w	r3, [r2, #68]
            this->enTrainEviterAvancant = true;
   166d4:	68fa      	ldr	r2, [r7, #12]
   166d6:	f04f 0301 	mov.w	r3, #1	; 0x1
   166da:	f882 3045 	strb.w	r3, [r2, #69]
            actionGoto[etapeEnCours].setGoBack(false);
   166de:	68fb      	ldr	r3, [r7, #12]
   166e0:	6a99      	ldr	r1, [r3, #40]
   166e2:	68fb      	ldr	r3, [r7, #12]
   166e4:	699b      	ldr	r3, [r3, #24]
   166e6:	ea4f 1203 	mov.w	r2, r3, lsl #4
   166ea:	ea4f 0382 	mov.w	r3, r2, lsl #2
   166ee:	ebc2 0303 	rsb	r3, r2, r3
   166f2:	440b      	add	r3, r1
   166f4:	4618      	mov	r0, r3
   166f6:	f04f 0100 	mov.w	r1, #0	; 0x0
   166fa:	f7fe f969 	bl	149d0 <_ZN17MediumLevelAction9setGoBackEb>
   166fe:	e019      	b.n	16734 <_ZN11StrategieV36updateEv+0x168>
            //actionEtape[etapeEnCours]->setGoBack(false);
        }
        else
        {
            this->enTrainEviterReculant = true;
   16700:	68fa      	ldr	r2, [r7, #12]
   16702:	f04f 0301 	mov.w	r3, #1	; 0x1
   16706:	f882 3044 	strb.w	r3, [r2, #68]
            this->enTrainEviterAvancant = false;
   1670a:	68fa      	ldr	r2, [r7, #12]
   1670c:	f04f 0300 	mov.w	r3, #0	; 0x0
   16710:	f882 3045 	strb.w	r3, [r2, #69]
            actionGoto[etapeEnCours].setGoBack(true);
   16714:	68fb      	ldr	r3, [r7, #12]
   16716:	6a99      	ldr	r1, [r3, #40]
   16718:	68fb      	ldr	r3, [r7, #12]
   1671a:	699b      	ldr	r3, [r3, #24]
   1671c:	ea4f 1203 	mov.w	r2, r3, lsl #4
   16720:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16724:	ebc2 0303 	rsb	r3, r2, r3
   16728:	440b      	add	r3, r1
   1672a:	4618      	mov	r0, r3
   1672c:	f04f 0101 	mov.w	r1, #1	; 0x1
   16730:	f7fe f94e 	bl	149d0 <_ZN17MediumLevelAction9setGoBackEb>
            //actionEtape[etapeEnCours]->setGoBack(true);
        }

        StrategieV2::addTemporaryAction(&actionGoto[etapeEnCours]);
   16734:	68fb      	ldr	r3, [r7, #12]
   16736:	6a99      	ldr	r1, [r3, #40]
   16738:	68fb      	ldr	r3, [r7, #12]
   1673a:	699b      	ldr	r3, [r3, #24]
   1673c:	ea4f 1203 	mov.w	r2, r3, lsl #4
   16740:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16744:	ebc2 0303 	rsb	r3, r2, r3
   16748:	440b      	add	r3, r1
   1674a:	4618      	mov	r0, r3
   1674c:	f7fe ff28 	bl	155a0 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>
        //StrategieV2::addTemporaryAction(actionEtape[etapeEnCours]);
        //dijkstra->setEtapeCourante((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero()));
        if(dijkstra->run() != 0)
   16750:	68fb      	ldr	r3, [r7, #12]
   16752:	6adb      	ldr	r3, [r3, #44]
   16754:	4618      	mov	r0, r3
   16756:	f7f9 fa03 	bl	fb60 <_ZN8Dijkstra3runEv>
   1675a:	4603      	mov	r3, r0
   1675c:	2b00      	cmp	r3, #0
   1675e:	bf0c      	ite	eq
   16760:	2300      	moveq	r3, #0
   16762:	2301      	movne	r3, #1
   16764:	b2db      	uxtb	r3, r3
   16766:	2b00      	cmp	r3, #0
   16768:	d032      	beq.n	167d0 <_ZN11StrategieV36updateEv+0x204>
        {
            // Si run renvoit autre chose que 0, c'est que l'étape en cours a changée.
            // Cela arrive pour débloquer le robot
            //Etape* ancienneEtape = this->tableauEtapes[this->etapeEnCours];
            //this->etapeEnCours = this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero();
            this->actionEtape[this->etapeEnCours]->reset();
   1676a:	68fb      	ldr	r3, [r7, #12]
   1676c:	6a5a      	ldr	r2, [r3, #36]
   1676e:	68fb      	ldr	r3, [r7, #12]
   16770:	699b      	ldr	r3, [r3, #24]
   16772:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16776:	4413      	add	r3, r2
   16778:	681b      	ldr	r3, [r3, #0]
   1677a:	681b      	ldr	r3, [r3, #0]
   1677c:	f103 0314 	add.w	r3, r3, #20	; 0x14
   16780:	6819      	ldr	r1, [r3, #0]
   16782:	68fb      	ldr	r3, [r7, #12]
   16784:	6a5a      	ldr	r2, [r3, #36]
   16786:	68fb      	ldr	r3, [r7, #12]
   16788:	699b      	ldr	r3, [r3, #24]
   1678a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1678e:	4413      	add	r3, r2
   16790:	681b      	ldr	r3, [r3, #0]
   16792:	4618      	mov	r0, r3
   16794:	4788      	blx	r1
            this->actionGoto[this->etapeEnCours].reset();
   16796:	68fb      	ldr	r3, [r7, #12]
   16798:	6a99      	ldr	r1, [r3, #40]
   1679a:	68fb      	ldr	r3, [r7, #12]
   1679c:	699b      	ldr	r3, [r3, #24]
   1679e:	ea4f 1203 	mov.w	r2, r3, lsl #4
   167a2:	ea4f 0382 	mov.w	r3, r2, lsl #2
   167a6:	ebc2 0303 	rsb	r3, r2, r3
   167aa:	440b      	add	r3, r1
   167ac:	681b      	ldr	r3, [r3, #0]
   167ae:	f103 0314 	add.w	r3, r3, #20	; 0x14
   167b2:	f8d3 c000 	ldr.w	ip, [r3]
   167b6:	68fb      	ldr	r3, [r7, #12]
   167b8:	6a99      	ldr	r1, [r3, #40]
   167ba:	68fb      	ldr	r3, [r7, #12]
   167bc:	699b      	ldr	r3, [r3, #24]
   167be:	ea4f 1203 	mov.w	r2, r3, lsl #4
   167c2:	ea4f 0382 	mov.w	r3, r2, lsl #2
   167c6:	ebc2 0303 	rsb	r3, r2, r3
   167ca:	440b      	add	r3, r1
   167cc:	4618      	mov	r0, r3
   167ce:	47e0      	blx	ip
        }

        //On retourne à l'étape intermédiaire précédente, en marche arrière

        this->avoiding = false;
   167d0:	68fa      	ldr	r2, [r7, #12]
   167d2:	f04f 0300 	mov.w	r3, #0	; 0x0
   167d6:	f882 3038 	strb.w	r3, [r2, #56]
        statusStrat=1;
   167da:	68fa      	ldr	r2, [r7, #12]
   167dc:	f04f 0301 	mov.w	r3, #1	; 0x1
   167e0:	6413      	str	r3, [r2, #64]
   167e2:	e17e      	b.n	16ae2 <_ZN11StrategieV36updateEv+0x516>
    }
    else
    {
        //On reset toute les directions à aller en marche avant
        for(int i = 0 ; i < this->nombreEtapes ; i++)
   167e4:	f04f 0300 	mov.w	r3, #0	; 0x0
   167e8:	613b      	str	r3, [r7, #16]
   167ea:	e01e      	b.n	1682a <_ZN11StrategieV36updateEv+0x25e>
        {
            actionGoto[i].setGoBack(false);
   167ec:	68fb      	ldr	r3, [r7, #12]
   167ee:	6a99      	ldr	r1, [r3, #40]
   167f0:	693b      	ldr	r3, [r7, #16]
   167f2:	ea4f 1203 	mov.w	r2, r3, lsl #4
   167f6:	ea4f 0382 	mov.w	r3, r2, lsl #2
   167fa:	ebc2 0303 	rsb	r3, r2, r3
   167fe:	440b      	add	r3, r1
   16800:	4618      	mov	r0, r3
   16802:	f04f 0100 	mov.w	r1, #0	; 0x0
   16806:	f7fe f8e3 	bl	149d0 <_ZN17MediumLevelAction9setGoBackEb>
            actionEtape[i]->setGoBack(false);
   1680a:	68fb      	ldr	r3, [r7, #12]
   1680c:	6a5a      	ldr	r2, [r3, #36]
   1680e:	693b      	ldr	r3, [r7, #16]
   16810:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16814:	4413      	add	r3, r2
   16816:	681b      	ldr	r3, [r3, #0]
   16818:	4618      	mov	r0, r3
   1681a:	f04f 0100 	mov.w	r1, #0	; 0x0
   1681e:	f7fe f8d7 	bl	149d0 <_ZN17MediumLevelAction9setGoBackEb>
        statusStrat=1;
    }
    else
    {
        //On reset toute les directions à aller en marche avant
        for(int i = 0 ; i < this->nombreEtapes ; i++)
   16822:	693b      	ldr	r3, [r7, #16]
   16824:	f103 0301 	add.w	r3, r3, #1	; 0x1
   16828:	613b      	str	r3, [r7, #16]
   1682a:	68fb      	ldr	r3, [r7, #12]
   1682c:	69da      	ldr	r2, [r3, #28]
   1682e:	693b      	ldr	r3, [r7, #16]
   16830:	429a      	cmp	r2, r3
   16832:	dcdb      	bgt.n	167ec <_ZN11StrategieV36updateEv+0x220>
        {
            actionGoto[i].setGoBack(false);
            actionEtape[i]->setGoBack(false);
        }
        this->enTrainEviterReculant = false;
   16834:	68fa      	ldr	r2, [r7, #12]
   16836:	f04f 0300 	mov.w	r3, #0	; 0x0
   1683a:	f882 3044 	strb.w	r3, [r2, #68]
        this->enTrainEviterAvancant = false;
   1683e:	68fa      	ldr	r2, [r7, #12]
   16840:	f04f 0300 	mov.w	r3, #0	; 0x0
   16844:	f882 3045 	strb.w	r3, [r2, #69]

        if(this->statusStrat==2)//Si on vient d'arriver à une étape intermédiare
   16848:	68fb      	ldr	r3, [r7, #12]
   1684a:	6c1b      	ldr	r3, [r3, #64]
   1684c:	2b02      	cmp	r3, #2
   1684e:	d103      	bne.n	16858 <_ZN11StrategieV36updateEv+0x28c>
        {
            this->updateIntermedaire();
   16850:	68f8      	ldr	r0, [r7, #12]
   16852:	f7ff fe1b 	bl	1648c <_ZN11StrategieV318updateIntermedaireEv>
   16856:	e144      	b.n	16ae2 <_ZN11StrategieV36updateEv+0x516>
        }
        else//Sinon, statusStrat==1, et il faut donc choisir un nouvel objectif
        {
            // Si on n'était pas en train d'éviter
            if(!(enTrainEviterReculant || enTrainEviterAvancant))
   16858:	68fb      	ldr	r3, [r7, #12]
   1685a:	f893 3044 	ldrb.w	r3, [r3, #68]
   1685e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   16862:	b2db      	uxtb	r3, r3
   16864:	2b00      	cmp	r3, #0
   16866:	d051      	beq.n	1690c <_ZN11StrategieV36updateEv+0x340>
   16868:	68fb      	ldr	r3, [r7, #12]
   1686a:	f893 3045 	ldrb.w	r3, [r3, #69]
   1686e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   16872:	b2db      	uxtb	r3, r3
   16874:	2b00      	cmp	r3, #0
   16876:	d049      	beq.n	1690c <_ZN11StrategieV36updateEv+0x340>
            {
                //L'objectif qu'on vient de remplir est maintenant un simple point de passage
                this->tableauEtapes[this->etapeEnCours]->finir();
   16878:	68fb      	ldr	r3, [r7, #12]
   1687a:	6b1a      	ldr	r2, [r3, #48]
   1687c:	68fb      	ldr	r3, [r7, #12]
   1687e:	699b      	ldr	r3, [r3, #24]
   16880:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16884:	4413      	add	r3, r2
   16886:	681b      	ldr	r3, [r3, #0]
   16888:	4618      	mov	r0, r3
   1688a:	f7f9 fbc9 	bl	10020 <_ZN5Etape5finirEv>
                //Idem pour les autres étapes correspondant au même objectif
                for(int etapeLiee = 0 ; etapeLiee < this->tableauEtapes[this->etapeEnCours]->getNombreEtapesLieesParFinirEtape() ; etapeLiee++)
   1688e:	f04f 0300 	mov.w	r3, #0	; 0x0
   16892:	62bb      	str	r3, [r7, #40]
   16894:	e01f      	b.n	168d6 <_ZN11StrategieV36updateEv+0x30a>
                {
                    int numeroEtapeLiee = this->tableauEtapes[this->etapeEnCours]->getEtapesLieesParFinirEtape()[etapeLiee];
   16896:	68fb      	ldr	r3, [r7, #12]
   16898:	6b1a      	ldr	r2, [r3, #48]
   1689a:	68fb      	ldr	r3, [r7, #12]
   1689c:	699b      	ldr	r3, [r3, #24]
   1689e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   168a2:	4413      	add	r3, r2
   168a4:	681b      	ldr	r3, [r3, #0]
   168a6:	4618      	mov	r0, r3
   168a8:	f7f9 fb94 	bl	ffd4 <_ZN5Etape27getEtapesLieesParFinirEtapeEv>
   168ac:	4602      	mov	r2, r0
   168ae:	6abb      	ldr	r3, [r7, #40]
   168b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   168b4:	4413      	add	r3, r2
   168b6:	681b      	ldr	r3, [r3, #0]
   168b8:	62fb      	str	r3, [r7, #44]
                    this->tableauEtapes[numeroEtapeLiee]->finir();
   168ba:	68fb      	ldr	r3, [r7, #12]
   168bc:	6b1a      	ldr	r2, [r3, #48]
   168be:	6afb      	ldr	r3, [r7, #44]
   168c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   168c4:	4413      	add	r3, r2
   168c6:	681b      	ldr	r3, [r3, #0]
   168c8:	4618      	mov	r0, r3
   168ca:	f7f9 fba9 	bl	10020 <_ZN5Etape5finirEv>
            if(!(enTrainEviterReculant || enTrainEviterAvancant))
            {
                //L'objectif qu'on vient de remplir est maintenant un simple point de passage
                this->tableauEtapes[this->etapeEnCours]->finir();
                //Idem pour les autres étapes correspondant au même objectif
                for(int etapeLiee = 0 ; etapeLiee < this->tableauEtapes[this->etapeEnCours]->getNombreEtapesLieesParFinirEtape() ; etapeLiee++)
   168ce:	6abb      	ldr	r3, [r7, #40]
   168d0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   168d4:	62bb      	str	r3, [r7, #40]
   168d6:	68fb      	ldr	r3, [r7, #12]
   168d8:	6b1a      	ldr	r2, [r3, #48]
   168da:	68fb      	ldr	r3, [r7, #12]
   168dc:	699b      	ldr	r3, [r3, #24]
   168de:	ea4f 0383 	mov.w	r3, r3, lsl #2
   168e2:	4413      	add	r3, r2
   168e4:	681b      	ldr	r3, [r3, #0]
   168e6:	4618      	mov	r0, r3
   168e8:	f7f9 fb8e 	bl	10008 <_ZN5Etape33getNombreEtapesLieesParFinirEtapeEv>
   168ec:	4602      	mov	r2, r0
   168ee:	6abb      	ldr	r3, [r7, #40]
   168f0:	429a      	cmp	r2, r3
   168f2:	bfd4      	ite	le
   168f4:	2300      	movle	r3, #0
   168f6:	2301      	movgt	r3, #1
   168f8:	b2db      	uxtb	r3, r3
   168fa:	2b00      	cmp	r3, #0
   168fc:	d1cb      	bne.n	16896 <_ZN11StrategieV36updateEv+0x2ca>
                    this->tableauEtapes[numeroEtapeLiee]->finir();
                }

                //Mise à jour du stock

                this->updateStock();
   168fe:	68fb      	ldr	r3, [r7, #12]
   16900:	681b      	ldr	r3, [r3, #0]
   16902:	f103 0318 	add.w	r3, r3, #24	; 0x18
   16906:	681b      	ldr	r3, [r3, #0]
   16908:	68f8      	ldr	r0, [r7, #12]
   1690a:	4798      	blx	r3

            }


            int score = 0;
   1690c:	f04f 0300 	mov.w	r3, #0	; 0x0
   16910:	617b      	str	r3, [r7, #20]
            bool resteDesChosesAFaire = updateScores();
   16912:	68f8      	ldr	r0, [r7, #12]
   16914:	f7ff fd3c 	bl	16390 <_ZN11StrategieV312updateScoresEv>
   16918:	4603      	mov	r3, r0
   1691a:	76fb      	strb	r3, [r7, #27]

            // S'il n'y a plus d'objectif dans tout le graphe, on se replit vers une position où on ne bloque pas l'adversaire.
            // Sinon, il y a risque de prendre un avertissement pour anti-jeu (évité de peu pour le premier match de Krabi 2014)
            if(!resteDesChosesAFaire)
   1691c:	7efb      	ldrb	r3, [r7, #27]
   1691e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   16922:	b2db      	uxtb	r3, r3
   16924:	2b00      	cmp	r3, #0
   16926:	d03c      	beq.n	169a2 <_ZN11StrategieV36updateEv+0x3d6>
            {
                for(int i = 0 ; i < this->nombreEtapes ; i++)
   16928:	f04f 0300 	mov.w	r3, #0	; 0x0
   1692c:	633b      	str	r3, [r7, #48]
   1692e:	e00d      	b.n	1694c <_ZN11StrategieV36updateEv+0x380>
                {
                    this->tableauEtapesTotal[i]->oublieRobotVu();
   16930:	68fb      	ldr	r3, [r7, #12]
   16932:	6b5a      	ldr	r2, [r3, #52]
   16934:	6b3b      	ldr	r3, [r7, #48]
   16936:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1693a:	4413      	add	r3, r2
   1693c:	681b      	ldr	r3, [r3, #0]
   1693e:	4618      	mov	r0, r3
   16940:	f7f9 fb14 	bl	ff6c <_ZN5Etape13oublieRobotVuEv>

            // S'il n'y a plus d'objectif dans tout le graphe, on se replit vers une position où on ne bloque pas l'adversaire.
            // Sinon, il y a risque de prendre un avertissement pour anti-jeu (évité de peu pour le premier match de Krabi 2014)
            if(!resteDesChosesAFaire)
            {
                for(int i = 0 ; i < this->nombreEtapes ; i++)
   16944:	6b3b      	ldr	r3, [r7, #48]
   16946:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1694a:	633b      	str	r3, [r7, #48]
   1694c:	68fb      	ldr	r3, [r7, #12]
   1694e:	69da      	ldr	r2, [r3, #28]
   16950:	6b3b      	ldr	r3, [r7, #48]
   16952:	429a      	cmp	r2, r3
   16954:	dcec      	bgt.n	16930 <_ZN11StrategieV36updateEv+0x364>
                {
                    this->tableauEtapesTotal[i]->oublieRobotVu();
                }
                resteDesChosesAFaire = updateScores();
   16956:	68f8      	ldr	r0, [r7, #12]
   16958:	f7ff fd1a 	bl	16390 <_ZN11StrategieV312updateScoresEv>
   1695c:	4603      	mov	r3, r0
   1695e:	76fb      	strb	r3, [r7, #27]

                //S'il n'y a VRAIMENT plus rien à faire
                if(!resteDesChosesAFaire)
   16960:	7efb      	ldrb	r3, [r7, #27]
   16962:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   16966:	b2db      	uxtb	r3, r3
   16968:	2b00      	cmp	r3, #0
   1696a:	d01a      	beq.n	169a2 <_ZN11StrategieV36updateEv+0x3d6>
                {
                    //Si on est au garage, on s'arrête
                    if(this->etapeEnCours == this->numeroEtapeGarage)
   1696c:	68fb      	ldr	r3, [r7, #12]
   1696e:	699a      	ldr	r2, [r3, #24]
   16970:	68fb      	ldr	r3, [r7, #12]
   16972:	6a1b      	ldr	r3, [r3, #32]
   16974:	429a      	cmp	r2, r3
   16976:	d107      	bne.n	16988 <_ZN11StrategieV36updateEv+0x3bc>
                    {
                        this->statusStrat=-1;//Plus rien à faire, on passe à l'action suivante de stratégieV2
   16978:	68fb      	ldr	r3, [r7, #12]
   1697a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1697e:	641a      	str	r2, [r3, #64]
                        return this->statusStrat;
   16980:	68fb      	ldr	r3, [r7, #12]
   16982:	6c1b      	ldr	r3, [r3, #64]
   16984:	607b      	str	r3, [r7, #4]
   16986:	e0af      	b.n	16ae8 <_ZN11StrategieV36updateEv+0x51c>
                    }
                    else
                    {
                        //Sinon on y va
                        this->tableauEtapes[this->numeroEtapeGarage]->setScore(1000);
   16988:	68fb      	ldr	r3, [r7, #12]
   1698a:	6b1a      	ldr	r2, [r3, #48]
   1698c:	68fb      	ldr	r3, [r7, #12]
   1698e:	6a1b      	ldr	r3, [r3, #32]
   16990:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16994:	4413      	add	r3, r2
   16996:	681b      	ldr	r3, [r3, #0]
   16998:	4618      	mov	r0, r3
   1699a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1699e:	f7f9 fb51 	bl	10044 <_ZN5Etape8setScoreEi>
                }

            }

            //On recalcul les distances par rapport à l'étape où l'on vient d'arriver
            dijkstra->setEtapeCourante(this->etapeEnCours);
   169a2:	68fb      	ldr	r3, [r7, #12]
   169a4:	6ada      	ldr	r2, [r3, #44]
   169a6:	68fb      	ldr	r3, [r7, #12]
   169a8:	699b      	ldr	r3, [r3, #24]
   169aa:	4610      	mov	r0, r2
   169ac:	4619      	mov	r1, r3
   169ae:	f7f8 fdd5 	bl	f55c <_ZN8Dijkstra16setEtapeCouranteEi>
            if(dijkstra->run() != 0)
   169b2:	68fb      	ldr	r3, [r7, #12]
   169b4:	6adb      	ldr	r3, [r3, #44]
   169b6:	4618      	mov	r0, r3
   169b8:	f7f9 f8d2 	bl	fb60 <_ZN8Dijkstra3runEv>
   169bc:	4603      	mov	r3, r0
   169be:	2b00      	cmp	r3, #0
   169c0:	bf0c      	ite	eq
   169c2:	2300      	moveq	r3, #0
   169c4:	2301      	movne	r3, #1
   169c6:	b2db      	uxtb	r3, r3
   169c8:	2b00      	cmp	r3, #0
   169ca:	d015      	beq.n	169f8 <_ZN11StrategieV36updateEv+0x42c>
            {
                // Si run renvoit autre chose que 0, c'est que l'étape en cours a changée.
                // Cela arrive pour débloquer le robot
                //Etape* ancienneEtape = this->tableauEtapes[this->etapeEnCours];
                //this->etapeEnCours = this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero();
                this->actionEtape[this->etapeEnCours]->reset();
   169cc:	68fb      	ldr	r3, [r7, #12]
   169ce:	6a5a      	ldr	r2, [r3, #36]
   169d0:	68fb      	ldr	r3, [r7, #12]
   169d2:	699b      	ldr	r3, [r3, #24]
   169d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   169d8:	4413      	add	r3, r2
   169da:	681b      	ldr	r3, [r3, #0]
   169dc:	681b      	ldr	r3, [r3, #0]
   169de:	f103 0314 	add.w	r3, r3, #20	; 0x14
   169e2:	6819      	ldr	r1, [r3, #0]
   169e4:	68fb      	ldr	r3, [r7, #12]
   169e6:	6a5a      	ldr	r2, [r3, #36]
   169e8:	68fb      	ldr	r3, [r7, #12]
   169ea:	699b      	ldr	r3, [r3, #24]
   169ec:	ea4f 0383 	mov.w	r3, r3, lsl #2
   169f0:	4413      	add	r3, r2
   169f2:	681b      	ldr	r3, [r3, #0]
   169f4:	4618      	mov	r0, r3
   169f6:	4788      	blx	r1
            }

            //On sélectionne l'objectif le plus prometteur : pas trop loin et qui rapporte
            int meilleurEtape = -1;
   169f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   169fc:	61fb      	str	r3, [r7, #28]
            int scoreMaxi = -100000;
   169fe:	4b3d      	ldr	r3, [pc, #244]	(16af4 <_ZN11StrategieV36updateEv+0x528>)
   16a00:	623b      	str	r3, [r7, #32]

            int scoreTypeEtape = 0;
   16a02:	f04f 0300 	mov.w	r3, #0	; 0x0
   16a06:	627b      	str	r3, [r7, #36]
            for(int i = 0 ; i < this->nombreEtapes ; i++)
   16a08:	f04f 0300 	mov.w	r3, #0	; 0x0
   16a0c:	637b      	str	r3, [r7, #52]
   16a0e:	e044      	b.n	16a9a <_ZN11StrategieV36updateEv+0x4ce>
            {
                scoreTypeEtape = this->tableauEtapes[i]->getScore();
   16a10:	68fb      	ldr	r3, [r7, #12]
   16a12:	6b1a      	ldr	r2, [r3, #48]
   16a14:	6b7b      	ldr	r3, [r7, #52]
   16a16:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16a1a:	4413      	add	r3, r2
   16a1c:	681b      	ldr	r3, [r3, #0]
   16a1e:	4618      	mov	r0, r3
   16a20:	f7f9 fb1e 	bl	10060 <_ZN5Etape8getScoreEv>
   16a24:	4603      	mov	r3, r0
   16a26:	627b      	str	r3, [r7, #36]
        //        score = modificateurTemporel*(10000-this->tableauEtapes[i]->getDistance() + scoreTypeEtape);
                score = (10000-this->tableauEtapes[i]->getDistance() + scoreTypeEtape);
   16a28:	68fb      	ldr	r3, [r7, #12]
   16a2a:	6b1a      	ldr	r2, [r3, #48]
   16a2c:	6b7b      	ldr	r3, [r7, #52]
   16a2e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16a32:	4413      	add	r3, r2
   16a34:	681b      	ldr	r3, [r3, #0]
   16a36:	4618      	mov	r0, r3
   16a38:	f7f9 f9fc 	bl	fe34 <_ZN5Etape11getDistanceEv>
   16a3c:	4603      	mov	r3, r0
   16a3e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
   16a42:	f103 0310 	add.w	r3, r3, #16	; 0x10
   16a46:	6a7a      	ldr	r2, [r7, #36]
   16a48:	4413      	add	r3, r2
   16a4a:	617b      	str	r3, [r7, #20]
                if((scoreMaxi < score) && scoreTypeEtape && (this->tableauEtapes[i]->getDistance() != -1))
   16a4c:	6a3a      	ldr	r2, [r7, #32]
   16a4e:	697b      	ldr	r3, [r7, #20]
   16a50:	429a      	cmp	r2, r3
   16a52:	da14      	bge.n	16a7e <_ZN11StrategieV36updateEv+0x4b2>
   16a54:	6a7b      	ldr	r3, [r7, #36]
   16a56:	2b00      	cmp	r3, #0
   16a58:	d011      	beq.n	16a7e <_ZN11StrategieV36updateEv+0x4b2>
   16a5a:	68fb      	ldr	r3, [r7, #12]
   16a5c:	6b1a      	ldr	r2, [r3, #48]
   16a5e:	6b7b      	ldr	r3, [r7, #52]
   16a60:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16a64:	4413      	add	r3, r2
   16a66:	681b      	ldr	r3, [r3, #0]
   16a68:	4618      	mov	r0, r3
   16a6a:	f7f9 f9e3 	bl	fe34 <_ZN5Etape11getDistanceEv>
   16a6e:	4603      	mov	r3, r0
   16a70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   16a74:	d003      	beq.n	16a7e <_ZN11StrategieV36updateEv+0x4b2>
   16a76:	f04f 0301 	mov.w	r3, #1	; 0x1
   16a7a:	60bb      	str	r3, [r7, #8]
   16a7c:	e002      	b.n	16a84 <_ZN11StrategieV36updateEv+0x4b8>
   16a7e:	f04f 0300 	mov.w	r3, #0	; 0x0
   16a82:	60bb      	str	r3, [r7, #8]
   16a84:	68bb      	ldr	r3, [r7, #8]
   16a86:	2b00      	cmp	r3, #0
   16a88:	d003      	beq.n	16a92 <_ZN11StrategieV36updateEv+0x4c6>
                {
                    scoreMaxi = score;
   16a8a:	697b      	ldr	r3, [r7, #20]
   16a8c:	623b      	str	r3, [r7, #32]
                    meilleurEtape = i;
   16a8e:	6b7b      	ldr	r3, [r7, #52]
   16a90:	61fb      	str	r3, [r7, #28]
            //On sélectionne l'objectif le plus prometteur : pas trop loin et qui rapporte
            int meilleurEtape = -1;
            int scoreMaxi = -100000;

            int scoreTypeEtape = 0;
            for(int i = 0 ; i < this->nombreEtapes ; i++)
   16a92:	6b7b      	ldr	r3, [r7, #52]
   16a94:	f103 0301 	add.w	r3, r3, #1	; 0x1
   16a98:	637b      	str	r3, [r7, #52]
   16a9a:	68fb      	ldr	r3, [r7, #12]
   16a9c:	69da      	ldr	r2, [r3, #28]
   16a9e:	6b7b      	ldr	r3, [r7, #52]
   16aa0:	429a      	cmp	r2, r3
   16aa2:	dcb5      	bgt.n	16a10 <_ZN11StrategieV36updateEv+0x444>
                    scoreMaxi = score;
                    meilleurEtape = i;
                }
            }

            if(meilleurEtape==-1)
   16aa4:	69fb      	ldr	r3, [r7, #28]
   16aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   16aaa:	d110      	bne.n	16ace <_ZN11StrategieV36updateEv+0x502>
            {
                if(this->etapeEnCours == this->numeroEtapeGarage)
   16aac:	68fb      	ldr	r3, [r7, #12]
   16aae:	699a      	ldr	r2, [r3, #24]
   16ab0:	68fb      	ldr	r3, [r7, #12]
   16ab2:	6a1b      	ldr	r3, [r3, #32]
   16ab4:	429a      	cmp	r2, r3
   16ab6:	d107      	bne.n	16ac8 <_ZN11StrategieV36updateEv+0x4fc>
                {
                    this->statusStrat=-1;//Plus rien à faire, on passe à l'action suivante de stratégieV2
   16ab8:	68fb      	ldr	r3, [r7, #12]
   16aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16abe:	641a      	str	r2, [r3, #64]
                    return this->statusStrat;
   16ac0:	68fb      	ldr	r3, [r7, #12]
   16ac2:	6c1b      	ldr	r3, [r3, #64]
   16ac4:	607b      	str	r3, [r7, #4]
   16ac6:	e00f      	b.n	16ae8 <_ZN11StrategieV36updateEv+0x51c>
                }
                else
                {
                    meilleurEtape = this->numeroEtapeGarage;
   16ac8:	68fb      	ldr	r3, [r7, #12]
   16aca:	6a1b      	ldr	r3, [r3, #32]
   16acc:	61fb      	str	r3, [r7, #28]
            /*if(this->tableauEtapes[meilleurEtape]->getEtapeType()==Etape::DEPOSE_FRUIT)
            {
                this->nombreFruitsTransporte++;
            }*/

            this->goal = meilleurEtape;
   16ace:	68fa      	ldr	r2, [r7, #12]
   16ad0:	69fb      	ldr	r3, [r7, #28]
   16ad2:	63d3      	str	r3, [r2, #60]
            this->statusStrat = 2;//Jusqu'à preuve du contraire, la prochaine étape est une étape intermédiaire
   16ad4:	68fa      	ldr	r2, [r7, #12]
   16ad6:	f04f 0302 	mov.w	r3, #2	; 0x2
   16ada:	6413      	str	r3, [r2, #64]
            this->updateIntermedaire();//On y va
   16adc:	68f8      	ldr	r0, [r7, #12]
   16ade:	f7ff fcd5 	bl	1648c <_ZN11StrategieV318updateIntermedaireEv>
        }
    }
    return this->statusStrat;
   16ae2:	68fb      	ldr	r3, [r7, #12]
   16ae4:	6c1b      	ldr	r3, [r3, #64]
   16ae6:	607b      	str	r3, [r7, #4]
   16ae8:	687b      	ldr	r3, [r7, #4]
}
   16aea:	4618      	mov	r0, r3
   16aec:	f107 0738 	add.w	r7, r7, #56	; 0x38
   16af0:	46bd      	mov	sp, r7
   16af2:	bd80      	pop	{r7, pc}
   16af4:	fffe7960 	.word	0xfffe7960

00016af8 <_ZN11StrategieV3C1Eb>:
#ifndef ROBOTHW
    #include <QDebug>
#endif
//#include <iostream>

StrategieV3::StrategieV3(bool isBlue) : MediumLevelAction()
   16af8:	b590      	push	{r4, r7, lr}
   16afa:	b085      	sub	sp, #20
   16afc:	af00      	add	r7, sp, #0
   16afe:	6078      	str	r0, [r7, #4]
   16b00:	460b      	mov	r3, r1
   16b02:	70fb      	strb	r3, [r7, #3]
   16b04:	687c      	ldr	r4, [r7, #4]
   16b06:	f107 0308 	add.w	r3, r7, #8	; 0x8
   16b0a:	4618      	mov	r0, r3
   16b0c:	4917      	ldr	r1, [pc, #92]	(16b6c <_ZN11StrategieV3C1Eb+0x74>)
   16b0e:	4a17      	ldr	r2, [pc, #92]	(16b6c <_ZN11StrategieV3C1Eb+0x74>)
   16b10:	f04f 0301 	mov.w	r3, #1	; 0x1
   16b14:	f7f7 fcf2 	bl	e4fc <_ZN8PositionC1Effb>
   16b18:	4620      	mov	r0, r4
   16b1a:	f107 0308 	add.w	r3, r7, #8	; 0x8
   16b1e:	e893 0006 	ldmia.w	r3, {r1, r2}
   16b22:	f7fd ffeb 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
   16b26:	687a      	ldr	r2, [r7, #4]
   16b28:	4b11      	ldr	r3, [pc, #68]	(16b70 <_ZN11StrategieV3C1Eb+0x78>)
   16b2a:	6013      	str	r3, [r2, #0]
{
    this->avoiding = false;
   16b2c:	687a      	ldr	r2, [r7, #4]
   16b2e:	f04f 0300 	mov.w	r3, #0	; 0x0
   16b32:	f882 3038 	strb.w	r3, [r2, #56]
    this->etapeEnCours = 0;
   16b36:	687a      	ldr	r2, [r7, #4]
   16b38:	f04f 0300 	mov.w	r3, #0	; 0x0
   16b3c:	6193      	str	r3, [r2, #24]
    this->statusStrat=1;
   16b3e:	687a      	ldr	r2, [r7, #4]
   16b40:	f04f 0301 	mov.w	r3, #1	; 0x1
   16b44:	6413      	str	r3, [r2, #64]
    this->enTrainEviterReculant = false;
   16b46:	687a      	ldr	r2, [r7, #4]
   16b48:	f04f 0300 	mov.w	r3, #0	; 0x0
   16b4c:	f882 3044 	strb.w	r3, [r2, #68]
    this->enTrainEviterAvancant = false;
   16b50:	687a      	ldr	r2, [r7, #4]
   16b52:	f04f 0300 	mov.w	r3, #0	; 0x0
   16b56:	f882 3045 	strb.w	r3, [r2, #69]
    this->millisecondesRestantes = 90 * 1000;
   16b5a:	687a      	ldr	r2, [r7, #4]
   16b5c:	4b05      	ldr	r3, [pc, #20]	(16b74 <_ZN11StrategieV3C1Eb+0x7c>)
   16b5e:	6153      	str	r3, [r2, #20]
    this->tableauEtapes[30]->setDistances(tableauDistances30);
#endif
    */


}
   16b60:	687b      	ldr	r3, [r7, #4]
   16b62:	4618      	mov	r0, r3
   16b64:	f107 0714 	add.w	r7, r7, #20	; 0x14
   16b68:	46bd      	mov	sp, r7
   16b6a:	bd90      	pop	{r4, r7, pc}
   16b6c:	00000000 	.word	0x00000000
   16b70:	00021ba0 	.word	0x00021ba0
   16b74:	00015f90 	.word	0x00015f90

00016b78 <_ZN11StrategieV3C2Eb>:
#ifndef ROBOTHW
    #include <QDebug>
#endif
//#include <iostream>

StrategieV3::StrategieV3(bool isBlue) : MediumLevelAction()
   16b78:	b590      	push	{r4, r7, lr}
   16b7a:	b085      	sub	sp, #20
   16b7c:	af00      	add	r7, sp, #0
   16b7e:	6078      	str	r0, [r7, #4]
   16b80:	460b      	mov	r3, r1
   16b82:	70fb      	strb	r3, [r7, #3]
   16b84:	687c      	ldr	r4, [r7, #4]
   16b86:	f107 0308 	add.w	r3, r7, #8	; 0x8
   16b8a:	4618      	mov	r0, r3
   16b8c:	4917      	ldr	r1, [pc, #92]	(16bec <_ZN11StrategieV3C2Eb+0x74>)
   16b8e:	4a17      	ldr	r2, [pc, #92]	(16bec <_ZN11StrategieV3C2Eb+0x74>)
   16b90:	f04f 0301 	mov.w	r3, #1	; 0x1
   16b94:	f7f7 fcb2 	bl	e4fc <_ZN8PositionC1Effb>
   16b98:	4620      	mov	r0, r4
   16b9a:	f107 0308 	add.w	r3, r7, #8	; 0x8
   16b9e:	e893 0006 	ldmia.w	r3, {r1, r2}
   16ba2:	f7fd ffab 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
   16ba6:	687a      	ldr	r2, [r7, #4]
   16ba8:	4b11      	ldr	r3, [pc, #68]	(16bf0 <_ZN11StrategieV3C2Eb+0x78>)
   16baa:	6013      	str	r3, [r2, #0]
{
    this->avoiding = false;
   16bac:	687a      	ldr	r2, [r7, #4]
   16bae:	f04f 0300 	mov.w	r3, #0	; 0x0
   16bb2:	f882 3038 	strb.w	r3, [r2, #56]
    this->etapeEnCours = 0;
   16bb6:	687a      	ldr	r2, [r7, #4]
   16bb8:	f04f 0300 	mov.w	r3, #0	; 0x0
   16bbc:	6193      	str	r3, [r2, #24]
    this->statusStrat=1;
   16bbe:	687a      	ldr	r2, [r7, #4]
   16bc0:	f04f 0301 	mov.w	r3, #1	; 0x1
   16bc4:	6413      	str	r3, [r2, #64]
    this->enTrainEviterReculant = false;
   16bc6:	687a      	ldr	r2, [r7, #4]
   16bc8:	f04f 0300 	mov.w	r3, #0	; 0x0
   16bcc:	f882 3044 	strb.w	r3, [r2, #68]
    this->enTrainEviterAvancant = false;
   16bd0:	687a      	ldr	r2, [r7, #4]
   16bd2:	f04f 0300 	mov.w	r3, #0	; 0x0
   16bd6:	f882 3045 	strb.w	r3, [r2, #69]
    this->millisecondesRestantes = 90 * 1000;
   16bda:	687a      	ldr	r2, [r7, #4]
   16bdc:	4b05      	ldr	r3, [pc, #20]	(16bf4 <_ZN11StrategieV3C2Eb+0x7c>)
   16bde:	6153      	str	r3, [r2, #20]
    this->tableauEtapes[30]->setDistances(tableauDistances30);
#endif
    */


}
   16be0:	687b      	ldr	r3, [r7, #4]
   16be2:	4618      	mov	r0, r3
   16be4:	f107 0714 	add.w	r7, r7, #20	; 0x14
   16be8:	46bd      	mov	sp, r7
   16bea:	bd90      	pop	{r4, r7, pc}
   16bec:	00000000 	.word	0x00000000
   16bf0:	00021ba0 	.word	0x00021ba0
   16bf4:	00015f90 	.word	0x00015f90

00016bf8 <_ZN5Tapis6updateEv>:
}


Tapis::~Tapis(){}

int Tapis::update()
   16bf8:	b580      	push	{r7, lr}
   16bfa:	b084      	sub	sp, #16
   16bfc:	af02      	add	r7, sp, #8
   16bfe:	6078      	str	r0, [r7, #4]
{

    if (status == 0)
   16c00:	687b      	ldr	r3, [r7, #4]
   16c02:	68db      	ldr	r3, [r3, #12]
   16c04:	2b00      	cmp	r3, #0
   16c06:	d106      	bne.n	16c16 <_ZN5Tapis6updateEv+0x1e>
    {
        #ifndef ROBOTHW
                qDebug() << "tapis";
        #endif
        status++;
   16c08:	687b      	ldr	r3, [r7, #4]
   16c0a:	68db      	ldr	r3, [r3, #12]
   16c0c:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16c10:	687b      	ldr	r3, [r7, #4]
   16c12:	60da      	str	r2, [r3, #12]
   16c14:	e097      	b.n	16d46 <_ZN5Tapis6updateEv+0x14e>
    }

    else if (status == 1)
   16c16:	687b      	ldr	r3, [r7, #4]
   16c18:	68db      	ldr	r3, [r3, #12]
   16c1a:	2b01      	cmp	r3, #1
   16c1c:	d114      	bne.n	16c48 <_ZN5Tapis6updateEv+0x50>
    {
        StrategieV2::setCurrentGoal(goalPosition, goBack);
   16c1e:	687b      	ldr	r3, [r7, #4]
   16c20:	f893 c010 	ldrb.w	ip, [r3, #16]
   16c24:	687a      	ldr	r2, [r7, #4]
   16c26:	4b4b      	ldr	r3, [pc, #300]	(16d54 <_ZN5Tapis6updateEv+0x15c>)
   16c28:	9300      	str	r3, [sp, #0]
   16c2a:	f102 0304 	add.w	r3, r2, #4	; 0x4
   16c2e:	e893 0003 	ldmia.w	r3, {r0, r1}
   16c32:	4662      	mov	r2, ip
   16c34:	4b48      	ldr	r3, [pc, #288]	(16d58 <_ZN5Tapis6updateEv+0x160>)
   16c36:	f7fe ff11 	bl	15a5c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
   16c3a:	687b      	ldr	r3, [r7, #4]
   16c3c:	68db      	ldr	r3, [r3, #12]
   16c3e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16c42:	687b      	ldr	r3, [r7, #4]
   16c44:	60da      	str	r2, [r3, #12]
   16c46:	e07e      	b.n	16d46 <_ZN5Tapis6updateEv+0x14e>
    }

    else if (status == 2)
   16c48:	687b      	ldr	r3, [r7, #4]
   16c4a:	68db      	ldr	r3, [r3, #12]
   16c4c:	2b02      	cmp	r3, #2
   16c4e:	d119      	bne.n	16c84 <_ZN5Tapis6updateEv+0x8c>
    {
        if (Command::isNear(goalPosition))
   16c50:	687b      	ldr	r3, [r7, #4]
   16c52:	f103 0304 	add.w	r3, r3, #4	; 0x4
   16c56:	e893 0003 	ldmia.w	r3, {r0, r1}
   16c5a:	4a40      	ldr	r2, [pc, #256]	(16d5c <_ZN5Tapis6updateEv+0x164>)
   16c5c:	f7f1 f81e 	bl	7c9c <_ZN7Command6isNearE8Positionf>
   16c60:	4603      	mov	r3, r0
   16c62:	2b00      	cmp	r3, #0
   16c64:	d06f      	beq.n	16d46 <_ZN5Tapis6updateEv+0x14e>
        {
            StrategieV2::lookAt(positionMarches);
   16c66:	687b      	ldr	r3, [r7, #4]
   16c68:	f103 0320 	add.w	r3, r3, #32	; 0x20
   16c6c:	e893 0003 	ldmia.w	r3, {r0, r1}
   16c70:	4a3b      	ldr	r2, [pc, #236]	(16d60 <_ZN5Tapis6updateEv+0x168>)
   16c72:	f7fe fe5b 	bl	1592c <_ZN11StrategieV26lookAtE8Positionf>
            status++;
   16c76:	687b      	ldr	r3, [r7, #4]
   16c78:	68db      	ldr	r3, [r3, #12]
   16c7a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16c7e:	687b      	ldr	r3, [r7, #4]
   16c80:	60da      	str	r2, [r3, #12]
   16c82:	e060      	b.n	16d46 <_ZN5Tapis6updateEv+0x14e>
        }
    }

    else if (status == 3)
   16c84:	687b      	ldr	r3, [r7, #4]
   16c86:	68db      	ldr	r3, [r3, #12]
   16c88:	2b03      	cmp	r3, #3
   16c8a:	d111      	bne.n	16cb0 <_ZN5Tapis6updateEv+0xb8>
    {
        if (Command::isLookingAt(positionMarches))
   16c8c:	687b      	ldr	r3, [r7, #4]
   16c8e:	f103 0320 	add.w	r3, r3, #32	; 0x20
   16c92:	e893 0003 	ldmia.w	r3, {r0, r1}
   16c96:	4a33      	ldr	r2, [pc, #204]	(16d64 <_ZN5Tapis6updateEv+0x16c>)
   16c98:	f7f0 ff44 	bl	7b24 <_ZN7Command11isLookingAtE8Positionf>
   16c9c:	4603      	mov	r3, r0
   16c9e:	2b00      	cmp	r3, #0
   16ca0:	d051      	beq.n	16d46 <_ZN5Tapis6updateEv+0x14e>
            //ouvrir le bras
            #ifndef ROBOTHW
            qDebug() << "On ouvre le brasdevant";
            #endif
           // BrasDevant::getBras()->expand();
            status++;
   16ca2:	687b      	ldr	r3, [r7, #4]
   16ca4:	68db      	ldr	r3, [r3, #12]
   16ca6:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16caa:	687b      	ldr	r3, [r7, #4]
   16cac:	60da      	str	r2, [r3, #12]
   16cae:	e04a      	b.n	16d46 <_ZN5Tapis6updateEv+0x14e>
        }
    }

    else if ((status <= 53) && (status > -1 ))    //On attend que les bras du robot s'ouvrent : 50ms par incrémentation du status
   16cb0:	687b      	ldr	r3, [r7, #4]
   16cb2:	68db      	ldr	r3, [r3, #12]
   16cb4:	2b35      	cmp	r3, #53
   16cb6:	dc0a      	bgt.n	16cce <_ZN5Tapis6updateEv+0xd6>
   16cb8:	687b      	ldr	r3, [r7, #4]
   16cba:	68db      	ldr	r3, [r3, #12]
   16cbc:	2b00      	cmp	r3, #0
   16cbe:	db06      	blt.n	16cce <_ZN5Tapis6updateEv+0xd6>
    {
        status++;
   16cc0:	687b      	ldr	r3, [r7, #4]
   16cc2:	68db      	ldr	r3, [r3, #12]
   16cc4:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16cc8:	687b      	ldr	r3, [r7, #4]
   16cca:	60da      	str	r2, [r3, #12]
   16ccc:	e03b      	b.n	16d46 <_ZN5Tapis6updateEv+0x14e>
    }

    else if (status == 54)
   16cce:	687b      	ldr	r3, [r7, #4]
   16cd0:	68db      	ldr	r3, [r3, #12]
   16cd2:	2b36      	cmp	r3, #54
   16cd4:	d106      	bne.n	16ce4 <_ZN5Tapis6updateEv+0xec>
        //lacher les tapis
        #ifndef ROBOTHW
        qDebug() << "On ouvre la pince pour lacher les tapis";
        #endif
      //  Pince::getPince()->open();
        status++;
   16cd6:	687b      	ldr	r3, [r7, #4]
   16cd8:	68db      	ldr	r3, [r3, #12]
   16cda:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16cde:	687b      	ldr	r3, [r7, #4]
   16ce0:	60da      	str	r2, [r3, #12]
   16ce2:	e030      	b.n	16d46 <_ZN5Tapis6updateEv+0x14e>
    }

    else if ((status <= 104) && (status > -1 ))    //On attend que la pince s'ouvre
   16ce4:	687b      	ldr	r3, [r7, #4]
   16ce6:	68db      	ldr	r3, [r3, #12]
   16ce8:	2b68      	cmp	r3, #104
   16cea:	dc0a      	bgt.n	16d02 <_ZN5Tapis6updateEv+0x10a>
   16cec:	687b      	ldr	r3, [r7, #4]
   16cee:	68db      	ldr	r3, [r3, #12]
   16cf0:	2b00      	cmp	r3, #0
   16cf2:	db06      	blt.n	16d02 <_ZN5Tapis6updateEv+0x10a>
    {
        status++;
   16cf4:	687b      	ldr	r3, [r7, #4]
   16cf6:	68db      	ldr	r3, [r3, #12]
   16cf8:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16cfc:	687b      	ldr	r3, [r7, #4]
   16cfe:	60da      	str	r2, [r3, #12]
   16d00:	e021      	b.n	16d46 <_ZN5Tapis6updateEv+0x14e>
    }

    else if (status == 105)
   16d02:	687b      	ldr	r3, [r7, #4]
   16d04:	68db      	ldr	r3, [r3, #12]
   16d06:	2b69      	cmp	r3, #105
   16d08:	d106      	bne.n	16d18 <_ZN5Tapis6updateEv+0x120>
        //fermer bras
        #ifndef ROBOTHW
        qDebug() << "On ferme le bras";
        #endif
      //  BrasDevant::getBras()->collapse();
        status++;
   16d0a:	687b      	ldr	r3, [r7, #4]
   16d0c:	68db      	ldr	r3, [r3, #12]
   16d0e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16d12:	687b      	ldr	r3, [r7, #4]
   16d14:	60da      	str	r2, [r3, #12]
   16d16:	e016      	b.n	16d46 <_ZN5Tapis6updateEv+0x14e>
    }

    else if ((status <= 155) && (status > -1))    //On attend que les bras se ferment.
   16d18:	687b      	ldr	r3, [r7, #4]
   16d1a:	68db      	ldr	r3, [r3, #12]
   16d1c:	2b9b      	cmp	r3, #155
   16d1e:	dc0a      	bgt.n	16d36 <_ZN5Tapis6updateEv+0x13e>
   16d20:	687b      	ldr	r3, [r7, #4]
   16d22:	68db      	ldr	r3, [r3, #12]
   16d24:	2b00      	cmp	r3, #0
   16d26:	db06      	blt.n	16d36 <_ZN5Tapis6updateEv+0x13e>
    {
        status++;
   16d28:	687b      	ldr	r3, [r7, #4]
   16d2a:	68db      	ldr	r3, [r3, #12]
   16d2c:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16d30:	687b      	ldr	r3, [r7, #4]
   16d32:	60da      	str	r2, [r3, #12]
   16d34:	e007      	b.n	16d46 <_ZN5Tapis6updateEv+0x14e>
    }

    else if (status == 156)
   16d36:	687b      	ldr	r3, [r7, #4]
   16d38:	68db      	ldr	r3, [r3, #12]
   16d3a:	2b9c      	cmp	r3, #156
   16d3c:	d103      	bne.n	16d46 <_ZN5Tapis6updateEv+0x14e>
    {
        status = -1;
   16d3e:	687a      	ldr	r2, [r7, #4]
   16d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16d44:	60d3      	str	r3, [r2, #12]
#ifndef ROBOTHW
        qDebug() << "Etape tapis finie";
#endif
    }

    return status;
   16d46:	687b      	ldr	r3, [r7, #4]
   16d48:	68db      	ldr	r3, [r3, #12]
}
   16d4a:	4618      	mov	r0, r3
   16d4c:	f107 0708 	add.w	r7, r7, #8	; 0x8
   16d50:	46bd      	mov	sp, r7
   16d52:	bd80      	pop	{r7, pc}
   16d54:	c2c80000 	.word	0xc2c80000
   16d58:	40400000 	.word	0x40400000
   16d5c:	41f00000 	.word	0x41f00000
   16d60:	3cf5c28f 	.word	0x3cf5c28f
   16d64:	3db2b8c2 	.word	0x3db2b8c2

00016d68 <_ZN5TapisD0Ev>:
    this->goBack = false;
    this->positionMarches = Position(1230,150);
}


Tapis::~Tapis(){}
   16d68:	b580      	push	{r7, lr}
   16d6a:	b082      	sub	sp, #8
   16d6c:	af00      	add	r7, sp, #0
   16d6e:	6078      	str	r0, [r7, #4]
   16d70:	687a      	ldr	r2, [r7, #4]
   16d72:	4b0a      	ldr	r3, [pc, #40]	(16d9c <_ZN5TapisD0Ev+0x34>)
   16d74:	6013      	str	r3, [r2, #0]
   16d76:	687b      	ldr	r3, [r7, #4]
   16d78:	4618      	mov	r0, r3
   16d7a:	f7fd fe7f 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
   16d7e:	f04f 0301 	mov.w	r3, #1	; 0x1
   16d82:	b2db      	uxtb	r3, r3
   16d84:	2b00      	cmp	r3, #0
   16d86:	d002      	beq.n	16d8e <_ZN5TapisD0Ev+0x26>
   16d88:	6878      	ldr	r0, [r7, #4]
   16d8a:	f7f7 faf7 	bl	e37c <_ZdlPv>
   16d8e:	687b      	ldr	r3, [r7, #4]
   16d90:	4618      	mov	r0, r3
   16d92:	f107 0708 	add.w	r7, r7, #8	; 0x8
   16d96:	46bd      	mov	sp, r7
   16d98:	bd80      	pop	{r7, pc}
   16d9a:	46c0      	nop			(mov r8, r8)
   16d9c:	00021bc8 	.word	0x00021bc8

00016da0 <_ZN5TapisD1Ev>:
   16da0:	b580      	push	{r7, lr}
   16da2:	b082      	sub	sp, #8
   16da4:	af00      	add	r7, sp, #0
   16da6:	6078      	str	r0, [r7, #4]
   16da8:	687a      	ldr	r2, [r7, #4]
   16daa:	4b0a      	ldr	r3, [pc, #40]	(16dd4 <_ZN5TapisD1Ev+0x34>)
   16dac:	6013      	str	r3, [r2, #0]
   16dae:	687b      	ldr	r3, [r7, #4]
   16db0:	4618      	mov	r0, r3
   16db2:	f7fd fe63 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
   16db6:	f04f 0300 	mov.w	r3, #0	; 0x0
   16dba:	b2db      	uxtb	r3, r3
   16dbc:	2b00      	cmp	r3, #0
   16dbe:	d002      	beq.n	16dc6 <_ZN5TapisD1Ev+0x26>
   16dc0:	6878      	ldr	r0, [r7, #4]
   16dc2:	f7f7 fadb 	bl	e37c <_ZdlPv>
   16dc6:	687b      	ldr	r3, [r7, #4]
   16dc8:	4618      	mov	r0, r3
   16dca:	f107 0708 	add.w	r7, r7, #8	; 0x8
   16dce:	46bd      	mov	sp, r7
   16dd0:	bd80      	pop	{r7, pc}
   16dd2:	46c0      	nop			(mov r8, r8)
   16dd4:	00021bc8 	.word	0x00021bc8

00016dd8 <_ZN5TapisD2Ev>:
   16dd8:	b580      	push	{r7, lr}
   16dda:	b082      	sub	sp, #8
   16ddc:	af00      	add	r7, sp, #0
   16dde:	6078      	str	r0, [r7, #4]
   16de0:	687a      	ldr	r2, [r7, #4]
   16de2:	4b0a      	ldr	r3, [pc, #40]	(16e0c <_ZN5TapisD2Ev+0x34>)
   16de4:	6013      	str	r3, [r2, #0]
   16de6:	687b      	ldr	r3, [r7, #4]
   16de8:	4618      	mov	r0, r3
   16dea:	f7fd fe47 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
   16dee:	f04f 0300 	mov.w	r3, #0	; 0x0
   16df2:	b2db      	uxtb	r3, r3
   16df4:	2b00      	cmp	r3, #0
   16df6:	d002      	beq.n	16dfe <_ZN5TapisD2Ev+0x26>
   16df8:	6878      	ldr	r0, [r7, #4]
   16dfa:	f7f7 fabf 	bl	e37c <_ZdlPv>
   16dfe:	687b      	ldr	r3, [r7, #4]
   16e00:	4618      	mov	r0, r3
   16e02:	f107 0708 	add.w	r7, r7, #8	; 0x8
   16e06:	46bd      	mov	sp, r7
   16e08:	bd80      	pop	{r7, pc}
   16e0a:	46c0      	nop			(mov r8, r8)
   16e0c:	00021bc8 	.word	0x00021bc8

00016e10 <_ZN5TapisC1Ev>:
#include "command.h"
#include "position.h"
//#include "brasdevant.h"


Tapis::Tapis(){}
   16e10:	b590      	push	{r4, r7, lr}
   16e12:	b085      	sub	sp, #20
   16e14:	af00      	add	r7, sp, #0
   16e16:	6078      	str	r0, [r7, #4]
   16e18:	687c      	ldr	r4, [r7, #4]
   16e1a:	f107 0308 	add.w	r3, r7, #8	; 0x8
   16e1e:	4618      	mov	r0, r3
   16e20:	4910      	ldr	r1, [pc, #64]	(16e64 <_ZN5TapisC1Ev+0x54>)
   16e22:	4a10      	ldr	r2, [pc, #64]	(16e64 <_ZN5TapisC1Ev+0x54>)
   16e24:	f04f 0301 	mov.w	r3, #1	; 0x1
   16e28:	f7f7 fb68 	bl	e4fc <_ZN8PositionC1Effb>
   16e2c:	4620      	mov	r0, r4
   16e2e:	f107 0308 	add.w	r3, r7, #8	; 0x8
   16e32:	e893 0006 	ldmia.w	r3, {r1, r2}
   16e36:	f7fd fe61 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
   16e3a:	687a      	ldr	r2, [r7, #4]
   16e3c:	4b0a      	ldr	r3, [pc, #40]	(16e68 <_ZN5TapisC1Ev+0x58>)
   16e3e:	6013      	str	r3, [r2, #0]
   16e40:	687b      	ldr	r3, [r7, #4]
   16e42:	f103 0318 	add.w	r3, r3, #24	; 0x18
   16e46:	4618      	mov	r0, r3
   16e48:	f7f7 fb30 	bl	e4ac <_ZN8PositionC1Ev>
   16e4c:	687b      	ldr	r3, [r7, #4]
   16e4e:	f103 0320 	add.w	r3, r3, #32	; 0x20
   16e52:	4618      	mov	r0, r3
   16e54:	f7f7 fb2a 	bl	e4ac <_ZN8PositionC1Ev>
   16e58:	687b      	ldr	r3, [r7, #4]
   16e5a:	4618      	mov	r0, r3
   16e5c:	f107 0714 	add.w	r7, r7, #20	; 0x14
   16e60:	46bd      	mov	sp, r7
   16e62:	bd90      	pop	{r4, r7, pc}
   16e64:	00000000 	.word	0x00000000
   16e68:	00021bc8 	.word	0x00021bc8

00016e6c <_ZN5TapisC2Ev>:
   16e6c:	b590      	push	{r4, r7, lr}
   16e6e:	b085      	sub	sp, #20
   16e70:	af00      	add	r7, sp, #0
   16e72:	6078      	str	r0, [r7, #4]
   16e74:	687c      	ldr	r4, [r7, #4]
   16e76:	f107 0308 	add.w	r3, r7, #8	; 0x8
   16e7a:	4618      	mov	r0, r3
   16e7c:	4910      	ldr	r1, [pc, #64]	(16ec0 <_ZN5TapisC2Ev+0x54>)
   16e7e:	4a10      	ldr	r2, [pc, #64]	(16ec0 <_ZN5TapisC2Ev+0x54>)
   16e80:	f04f 0301 	mov.w	r3, #1	; 0x1
   16e84:	f7f7 fb3a 	bl	e4fc <_ZN8PositionC1Effb>
   16e88:	4620      	mov	r0, r4
   16e8a:	f107 0308 	add.w	r3, r7, #8	; 0x8
   16e8e:	e893 0006 	ldmia.w	r3, {r1, r2}
   16e92:	f7fd fe33 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
   16e96:	687a      	ldr	r2, [r7, #4]
   16e98:	4b0a      	ldr	r3, [pc, #40]	(16ec4 <_ZN5TapisC2Ev+0x58>)
   16e9a:	6013      	str	r3, [r2, #0]
   16e9c:	687b      	ldr	r3, [r7, #4]
   16e9e:	f103 0318 	add.w	r3, r3, #24	; 0x18
   16ea2:	4618      	mov	r0, r3
   16ea4:	f7f7 fb02 	bl	e4ac <_ZN8PositionC1Ev>
   16ea8:	687b      	ldr	r3, [r7, #4]
   16eaa:	f103 0320 	add.w	r3, r3, #32	; 0x20
   16eae:	4618      	mov	r0, r3
   16eb0:	f7f7 fafc 	bl	e4ac <_ZN8PositionC1Ev>
   16eb4:	687b      	ldr	r3, [r7, #4]
   16eb6:	4618      	mov	r0, r3
   16eb8:	f107 0714 	add.w	r7, r7, #20	; 0x14
   16ebc:	46bd      	mov	sp, r7
   16ebe:	bd90      	pop	{r4, r7, pc}
   16ec0:	00000000 	.word	0x00000000
   16ec4:	00021bc8 	.word	0x00021bc8

00016ec8 <_ZN5TapisC1E8Position>:

Tapis::Tapis(Position position):MediumLevelAction(position)
   16ec8:	b590      	push	{r4, r7, lr}
   16eca:	b087      	sub	sp, #28
   16ecc:	af00      	add	r7, sp, #0
   16ece:	60f8      	str	r0, [r7, #12]
   16ed0:	f107 0304 	add.w	r3, r7, #4	; 0x4
   16ed4:	e883 0006 	stmia.w	r3, {r1, r2}
   16ed8:	68fb      	ldr	r3, [r7, #12]
   16eda:	4618      	mov	r0, r3
   16edc:	f107 0304 	add.w	r3, r7, #4	; 0x4
   16ee0:	e893 0006 	ldmia.w	r3, {r1, r2}
   16ee4:	f7fd fe0a 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
   16ee8:	68fa      	ldr	r2, [r7, #12]
   16eea:	4b15      	ldr	r3, [pc, #84]	(16f40 <_ZN5TapisC1E8Position+0x78>)
   16eec:	6013      	str	r3, [r2, #0]
   16eee:	68fb      	ldr	r3, [r7, #12]
   16ef0:	f103 0318 	add.w	r3, r3, #24	; 0x18
   16ef4:	4618      	mov	r0, r3
   16ef6:	f7f7 fad9 	bl	e4ac <_ZN8PositionC1Ev>
   16efa:	68fb      	ldr	r3, [r7, #12]
   16efc:	f103 0320 	add.w	r3, r3, #32	; 0x20
   16f00:	4618      	mov	r0, r3
   16f02:	f7f7 fad3 	bl	e4ac <_ZN8PositionC1Ev>
{
    this->goBack = false;
   16f06:	68fa      	ldr	r2, [r7, #12]
   16f08:	f04f 0300 	mov.w	r3, #0	; 0x0
   16f0c:	7413      	strb	r3, [r2, #16]
    this->positionMarches = Position(1230,150);
   16f0e:	68fb      	ldr	r3, [r7, #12]
   16f10:	f103 0420 	add.w	r4, r3, #32	; 0x20
   16f14:	f107 0310 	add.w	r3, r7, #16	; 0x10
   16f18:	4618      	mov	r0, r3
   16f1a:	490a      	ldr	r1, [pc, #40]	(16f44 <_ZN5TapisC1E8Position+0x7c>)
   16f1c:	4a0a      	ldr	r2, [pc, #40]	(16f48 <_ZN5TapisC1E8Position+0x80>)
   16f1e:	f04f 0301 	mov.w	r3, #1	; 0x1
   16f22:	f7f7 faeb 	bl	e4fc <_ZN8PositionC1Effb>
   16f26:	4620      	mov	r0, r4
   16f28:	f107 0310 	add.w	r3, r7, #16	; 0x10
   16f2c:	e893 0006 	ldmia.w	r3, {r1, r2}
   16f30:	f7f7 fb78 	bl	e624 <_ZN8PositionaSES_>
}
   16f34:	68fb      	ldr	r3, [r7, #12]
   16f36:	4618      	mov	r0, r3
   16f38:	f107 071c 	add.w	r7, r7, #28	; 0x1c
   16f3c:	46bd      	mov	sp, r7
   16f3e:	bd90      	pop	{r4, r7, pc}
   16f40:	00021bc8 	.word	0x00021bc8
   16f44:	4499c000 	.word	0x4499c000
   16f48:	43160000 	.word	0x43160000

00016f4c <_ZN5TapisC2E8Position>:
//#include "brasdevant.h"


Tapis::Tapis(){}

Tapis::Tapis(Position position):MediumLevelAction(position)
   16f4c:	b590      	push	{r4, r7, lr}
   16f4e:	b087      	sub	sp, #28
   16f50:	af00      	add	r7, sp, #0
   16f52:	60f8      	str	r0, [r7, #12]
   16f54:	f107 0304 	add.w	r3, r7, #4	; 0x4
   16f58:	e883 0006 	stmia.w	r3, {r1, r2}
   16f5c:	68fb      	ldr	r3, [r7, #12]
   16f5e:	4618      	mov	r0, r3
   16f60:	f107 0304 	add.w	r3, r7, #4	; 0x4
   16f64:	e893 0006 	ldmia.w	r3, {r1, r2}
   16f68:	f7fd fdc8 	bl	14afc <_ZN17MediumLevelActionC2E8Position>
   16f6c:	68fa      	ldr	r2, [r7, #12]
   16f6e:	4b15      	ldr	r3, [pc, #84]	(16fc4 <_ZN5TapisC2E8Position+0x78>)
   16f70:	6013      	str	r3, [r2, #0]
   16f72:	68fb      	ldr	r3, [r7, #12]
   16f74:	f103 0318 	add.w	r3, r3, #24	; 0x18
   16f78:	4618      	mov	r0, r3
   16f7a:	f7f7 fa97 	bl	e4ac <_ZN8PositionC1Ev>
   16f7e:	68fb      	ldr	r3, [r7, #12]
   16f80:	f103 0320 	add.w	r3, r3, #32	; 0x20
   16f84:	4618      	mov	r0, r3
   16f86:	f7f7 fa91 	bl	e4ac <_ZN8PositionC1Ev>
{
    this->goBack = false;
   16f8a:	68fa      	ldr	r2, [r7, #12]
   16f8c:	f04f 0300 	mov.w	r3, #0	; 0x0
   16f90:	7413      	strb	r3, [r2, #16]
    this->positionMarches = Position(1230,150);
   16f92:	68fb      	ldr	r3, [r7, #12]
   16f94:	f103 0420 	add.w	r4, r3, #32	; 0x20
   16f98:	f107 0310 	add.w	r3, r7, #16	; 0x10
   16f9c:	4618      	mov	r0, r3
   16f9e:	490a      	ldr	r1, [pc, #40]	(16fc8 <_ZN5TapisC2E8Position+0x7c>)
   16fa0:	4a0a      	ldr	r2, [pc, #40]	(16fcc <_ZN5TapisC2E8Position+0x80>)
   16fa2:	f04f 0301 	mov.w	r3, #1	; 0x1
   16fa6:	f7f7 faa9 	bl	e4fc <_ZN8PositionC1Effb>
   16faa:	4620      	mov	r0, r4
   16fac:	f107 0310 	add.w	r3, r7, #16	; 0x10
   16fb0:	e893 0006 	ldmia.w	r3, {r1, r2}
   16fb4:	f7f7 fb36 	bl	e624 <_ZN8PositionaSES_>
}
   16fb8:	68fb      	ldr	r3, [r7, #12]
   16fba:	4618      	mov	r0, r3
   16fbc:	f107 071c 	add.w	r7, r7, #28	; 0x1c
   16fc0:	46bd      	mov	sp, r7
   16fc2:	bd90      	pop	{r4, r7, pc}
   16fc4:	00021bc8 	.word	0x00021bc8
   16fc8:	4499c000 	.word	0x4499c000
   16fcc:	43160000 	.word	0x43160000

00016fd0 <_exit>:

void _exit(int status)
{
    //Endless loop
    for(;;);
}
   16fd0:	b480      	push	{r7}
   16fd2:	b083      	sub	sp, #12
   16fd4:	af00      	add	r7, sp, #0
   16fd6:	6078      	str	r0, [r7, #4]
   16fd8:	e7fe      	b.n	16fd8 <_exit+0x8>
   16fda:	46c0      	nop			(mov r8, r8)

00016fdc <_close>:

int _close(int file)
{
   16fdc:	b480      	push	{r7}
   16fde:	b083      	sub	sp, #12
   16fe0:	af00      	add	r7, sp, #0
   16fe2:	6078      	str	r0, [r7, #4]
    return -1;
   16fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   16fe8:	4618      	mov	r0, r3
   16fea:	f107 070c 	add.w	r7, r7, #12	; 0xc
   16fee:	46bd      	mov	sp, r7
   16ff0:	bc80      	pop	{r7}
   16ff2:	4770      	bx	lr

00016ff4 <_execve>:

char* __env[1] = {0};
char** environ = __env;

int _execve(char* name, char** argv, char** env)
{
   16ff4:	b480      	push	{r7}
   16ff6:	b085      	sub	sp, #20
   16ff8:	af00      	add	r7, sp, #0
   16ffa:	60f8      	str	r0, [r7, #12]
   16ffc:	60b9      	str	r1, [r7, #8]
   16ffe:	607a      	str	r2, [r7, #4]
    errno = ENOMEM;
   17000:	4a05      	ldr	r2, [pc, #20]	(17018 <_execve+0x24>)
   17002:	f04f 030c 	mov.w	r3, #12	; 0xc
   17006:	6013      	str	r3, [r2, #0]
    return -1;
   17008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1700c:	4618      	mov	r0, r3
   1700e:	f107 0714 	add.w	r7, r7, #20	; 0x14
   17012:	46bd      	mov	sp, r7
   17014:	bc80      	pop	{r7}
   17016:	4770      	bx	lr
   17018:	20000678 	.word	0x20000678

0001701c <_fork>:

int _fork(void)
{
   1701c:	b480      	push	{r7}
   1701e:	af00      	add	r7, sp, #0
    errno = EAGAIN;
   17020:	4a04      	ldr	r2, [pc, #16]	(17034 <_fork+0x18>)
   17022:	f04f 030b 	mov.w	r3, #11	; 0xb
   17026:	6013      	str	r3, [r2, #0]
    return -1;
   17028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1702c:	4618      	mov	r0, r3
   1702e:	46bd      	mov	sp, r7
   17030:	bc80      	pop	{r7}
   17032:	4770      	bx	lr
   17034:	20000678 	.word	0x20000678

00017038 <_fstat>:

int _fstat(int file, struct stat* st)
{
   17038:	b480      	push	{r7}
   1703a:	b083      	sub	sp, #12
   1703c:	af00      	add	r7, sp, #0
   1703e:	6078      	str	r0, [r7, #4]
   17040:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
   17042:	683a      	ldr	r2, [r7, #0]
   17044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   17048:	6053      	str	r3, [r2, #4]
    return 0;
   1704a:	f04f 0300 	mov.w	r3, #0	; 0x0
}
   1704e:	4618      	mov	r0, r3
   17050:	f107 070c 	add.w	r7, r7, #12	; 0xc
   17054:	46bd      	mov	sp, r7
   17056:	bc80      	pop	{r7}
   17058:	4770      	bx	lr
   1705a:	46c0      	nop			(mov r8, r8)

0001705c <_getpid>:

int _getpid(void)
{
   1705c:	b480      	push	{r7}
   1705e:	af00      	add	r7, sp, #0
    return 1;
   17060:	f04f 0301 	mov.w	r3, #1	; 0x1
}
   17064:	4618      	mov	r0, r3
   17066:	46bd      	mov	sp, r7
   17068:	bc80      	pop	{r7}
   1706a:	4770      	bx	lr

0001706c <_isatty>:

int _isatty(int file)
{
   1706c:	b480      	push	{r7}
   1706e:	b083      	sub	sp, #12
   17070:	af00      	add	r7, sp, #0
   17072:	6078      	str	r0, [r7, #4]
    return 1;
   17074:	f04f 0301 	mov.w	r3, #1	; 0x1
}
   17078:	4618      	mov	r0, r3
   1707a:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1707e:	46bd      	mov	sp, r7
   17080:	bc80      	pop	{r7}
   17082:	4770      	bx	lr

00017084 <_kill>:

int _kill(int pid, int sig)
{
   17084:	b480      	push	{r7}
   17086:	b083      	sub	sp, #12
   17088:	af00      	add	r7, sp, #0
   1708a:	6078      	str	r0, [r7, #4]
   1708c:	6039      	str	r1, [r7, #0]
    errno = EINVAL;
   1708e:	4a06      	ldr	r2, [pc, #24]	(170a8 <_kill+0x24>)
   17090:	f04f 0316 	mov.w	r3, #22	; 0x16
   17094:	6013      	str	r3, [r2, #0]
    return -1;
   17096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1709a:	4618      	mov	r0, r3
   1709c:	f107 070c 	add.w	r7, r7, #12	; 0xc
   170a0:	46bd      	mov	sp, r7
   170a2:	bc80      	pop	{r7}
   170a4:	4770      	bx	lr
   170a6:	46c0      	nop			(mov r8, r8)
   170a8:	20000678 	.word	0x20000678

000170ac <_link>:

int _link(char* old, char* new)
{
   170ac:	b480      	push	{r7}
   170ae:	b083      	sub	sp, #12
   170b0:	af00      	add	r7, sp, #0
   170b2:	6078      	str	r0, [r7, #4]
   170b4:	6039      	str	r1, [r7, #0]
    errno = EMLINK;
   170b6:	4a06      	ldr	r2, [pc, #24]	(170d0 <_link+0x24>)
   170b8:	f04f 031f 	mov.w	r3, #31	; 0x1f
   170bc:	6013      	str	r3, [r2, #0]
    return -1;
   170be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   170c2:	4618      	mov	r0, r3
   170c4:	f107 070c 	add.w	r7, r7, #12	; 0xc
   170c8:	46bd      	mov	sp, r7
   170ca:	bc80      	pop	{r7}
   170cc:	4770      	bx	lr
   170ce:	46c0      	nop			(mov r8, r8)
   170d0:	20000678 	.word	0x20000678

000170d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
   170d4:	b480      	push	{r7}
   170d6:	b085      	sub	sp, #20
   170d8:	af00      	add	r7, sp, #0
   170da:	60f8      	str	r0, [r7, #12]
   170dc:	60b9      	str	r1, [r7, #8]
   170de:	607a      	str	r2, [r7, #4]
    return 0;
   170e0:	f04f 0300 	mov.w	r3, #0	; 0x0
}
   170e4:	4618      	mov	r0, r3
   170e6:	f107 0714 	add.w	r7, r7, #20	; 0x14
   170ea:	46bd      	mov	sp, r7
   170ec:	bc80      	pop	{r7}
   170ee:	4770      	bx	lr

000170f0 <_open>:

int _open(const char* name, int flags, int mode)
{
   170f0:	b480      	push	{r7}
   170f2:	b085      	sub	sp, #20
   170f4:	af00      	add	r7, sp, #0
   170f6:	60f8      	str	r0, [r7, #12]
   170f8:	60b9      	str	r1, [r7, #8]
   170fa:	607a      	str	r2, [r7, #4]
    return -1;
   170fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   17100:	4618      	mov	r0, r3
   17102:	f107 0714 	add.w	r7, r7, #20	; 0x14
   17106:	46bd      	mov	sp, r7
   17108:	bc80      	pop	{r7}
   1710a:	4770      	bx	lr

0001710c <_read>:

int _read(int file, char* ptr, int len)
{
   1710c:	b480      	push	{r7}
   1710e:	b085      	sub	sp, #20
   17110:	af00      	add	r7, sp, #0
   17112:	60f8      	str	r0, [r7, #12]
   17114:	60b9      	str	r1, [r7, #8]
   17116:	607a      	str	r2, [r7, #4]
    return 0;
   17118:	f04f 0300 	mov.w	r3, #0	; 0x0
}
   1711c:	4618      	mov	r0, r3
   1711e:	f107 0714 	add.w	r7, r7, #20	; 0x14
   17122:	46bd      	mov	sp, r7
   17124:	bc80      	pop	{r7}
   17126:	4770      	bx	lr

00017128 <_sbrk>:

caddr_t _sbrk(int incr)
{
   17128:	b580      	push	{r7, lr}
   1712a:	b084      	sub	sp, #16
   1712c:	af00      	add	r7, sp, #0
   1712e:	6078      	str	r0, [r7, #4]
    extern char _end;
    static char* heap_end;
    char* prev_heap_end;
    char* stack_ptr = (char*)0xffffffff;
   17130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17134:	60fb      	str	r3, [r7, #12]

    if(heap_end == 0)
   17136:	4b12      	ldr	r3, [pc, #72]	(17180 <_sbrk+0x58>)
   17138:	681b      	ldr	r3, [r3, #0]
   1713a:	2b00      	cmp	r3, #0
   1713c:	d102      	bne.n	17144 <_sbrk+0x1c>
        heap_end = &_end;
   1713e:	4a10      	ldr	r2, [pc, #64]	(17180 <_sbrk+0x58>)
   17140:	4b10      	ldr	r3, [pc, #64]	(17184 <_sbrk+0x5c>)
   17142:	6013      	str	r3, [r2, #0]
    prev_heap_end = heap_end;
   17144:	4b0e      	ldr	r3, [pc, #56]	(17180 <_sbrk+0x58>)
   17146:	681b      	ldr	r3, [r3, #0]
   17148:	60bb      	str	r3, [r7, #8]
    if( heap_end + incr > stack_ptr)
   1714a:	4b0d      	ldr	r3, [pc, #52]	(17180 <_sbrk+0x58>)
   1714c:	681a      	ldr	r2, [r3, #0]
   1714e:	687b      	ldr	r3, [r7, #4]
   17150:	441a      	add	r2, r3
   17152:	68fb      	ldr	r3, [r7, #12]
   17154:	429a      	cmp	r2, r3
   17156:	d906      	bls.n	17166 <_sbrk+0x3e>
    {
        write(1, "Heap and stack collision\n", 25);
   17158:	f04f 0001 	mov.w	r0, #1	; 0x1
   1715c:	490a      	ldr	r1, [pc, #40]	(17188 <_sbrk+0x60>)
   1715e:	f04f 0219 	mov.w	r2, #25	; 0x19
   17162:	f009 fd9d 	bl	20ca0 <write>
      //  abort();
    }

    heap_end += incr;
   17166:	4b06      	ldr	r3, [pc, #24]	(17180 <_sbrk+0x58>)
   17168:	681a      	ldr	r2, [r3, #0]
   1716a:	687b      	ldr	r3, [r7, #4]
   1716c:	441a      	add	r2, r3
   1716e:	4b04      	ldr	r3, [pc, #16]	(17180 <_sbrk+0x58>)
   17170:	601a      	str	r2, [r3, #0]
    return (caddr_t)prev_heap_end;
   17172:	68bb      	ldr	r3, [r7, #8]
}
   17174:	4618      	mov	r0, r3
   17176:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1717a:	46bd      	mov	sp, r7
   1717c:	bd80      	pop	{r7, pc}
   1717e:	46c0      	nop			(mov r8, r8)
   17180:	20000674 	.word	0x20000674
   17184:	2000067c 	.word	0x2000067c
   17188:	00021be0 	.word	0x00021be0

0001718c <_times>:

typedef struct tms tms;

int _times(tms* buf)
{
   1718c:	b480      	push	{r7}
   1718e:	b083      	sub	sp, #12
   17190:	af00      	add	r7, sp, #0
   17192:	6078      	str	r0, [r7, #4]
    return -1;
   17194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   17198:	4618      	mov	r0, r3
   1719a:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1719e:	46bd      	mov	sp, r7
   171a0:	bc80      	pop	{r7}
   171a2:	4770      	bx	lr

000171a4 <_unlink>:

int _unlink(char* name)
{
   171a4:	b480      	push	{r7}
   171a6:	b083      	sub	sp, #12
   171a8:	af00      	add	r7, sp, #0
   171aa:	6078      	str	r0, [r7, #4]
    errno = ENOENT;
   171ac:	4a05      	ldr	r2, [pc, #20]	(171c4 <_unlink+0x20>)
   171ae:	f04f 0302 	mov.w	r3, #2	; 0x2
   171b2:	6013      	str	r3, [r2, #0]
    return -1;
   171b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   171b8:	4618      	mov	r0, r3
   171ba:	f107 070c 	add.w	r7, r7, #12	; 0xc
   171be:	46bd      	mov	sp, r7
   171c0:	bc80      	pop	{r7}
   171c2:	4770      	bx	lr
   171c4:	20000678 	.word	0x20000678

000171c8 <_wait>:

int _wait(int* status)
{
   171c8:	b480      	push	{r7}
   171ca:	b083      	sub	sp, #12
   171cc:	af00      	add	r7, sp, #0
   171ce:	6078      	str	r0, [r7, #4]
    errno = ECHILD;
   171d0:	4a05      	ldr	r2, [pc, #20]	(171e8 <_wait+0x20>)
   171d2:	f04f 030a 	mov.w	r3, #10	; 0xa
   171d6:	6013      	str	r3, [r2, #0]
    return -1;
   171d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   171dc:	4618      	mov	r0, r3
   171de:	f107 070c 	add.w	r7, r7, #12	; 0xc
   171e2:	46bd      	mov	sp, r7
   171e4:	bc80      	pop	{r7}
   171e6:	4770      	bx	lr
   171e8:	20000678 	.word	0x20000678

000171ec <_write>:

int _write(int file, char* ptr, int len)
{
   171ec:	b480      	push	{r7}
   171ee:	b085      	sub	sp, #20
   171f0:	af00      	add	r7, sp, #0
   171f2:	60f8      	str	r0, [r7, #12]
   171f4:	60b9      	str	r1, [r7, #8]
   171f6:	607a      	str	r2, [r7, #4]
    return len;
   171f8:	687b      	ldr	r3, [r7, #4]
}
   171fa:	4618      	mov	r0, r3
   171fc:	f107 0714 	add.w	r7, r7, #20	; 0x14
   17200:	46bd      	mov	sp, r7
   17202:	bc80      	pop	{r7}
   17204:	4770      	bx	lr
   17206:	46c0      	nop			(mov r8, r8)

00017208 <__cxa_end_cleanup>:
   17208:	b41e      	push	{r1, r2, r3, r4}
   1720a:	f005 fdc3 	bl	1cd94 <__gnu_end_cleanup>
   1720e:	bc1e      	pop	{r1, r2, r3, r4}
   17210:	f004 fbd4 	bl	1b9bc <_Unwind_Resume>

00017214 <d_make_comp>:
   17214:	b470      	push	{r4, r5, r6}
   17216:	461d      	mov	r5, r3
   17218:	1e4b      	subs	r3, r1, #1
   1721a:	460e      	mov	r6, r1
   1721c:	4614      	mov	r4, r2
   1721e:	2b34      	cmp	r3, #52
   17220:	d821      	bhi.n	17266 <d_make_comp+0x52>
   17222:	e8df f003 	tbb	[pc, r3]
   17226:	3232      	.short	0x3232
   17228:	20203232 	.word	0x20203232
   1722c:	32414120 	.word	0x32414120
   17230:	41414141 	.word	0x41414141
   17234:	41414141 	.word	0x41414141
   17238:	1c204141 	.word	0x1c204141
   1723c:	1c1c1c1c 	.word	0x1c1c1c1c
   17240:	4141321c 	.word	0x4141321c
   17244:	20414141 	.word	0x20414141
   17248:	321b1c41 	.word	0x321b1c41
   1724c:	20204141 	.word	0x20204141
   17250:	32323241 	.word	0x32323241
   17254:	32323232 	.word	0x32323232
   17258:	00324132 	.word	0x00324132
   1725c:	b11d      	cbz	r5, 17266 <d_make_comp+0x52>
   1725e:	6941      	ldr	r1, [r0, #20]
   17260:	6983      	ldr	r3, [r0, #24]
   17262:	4299      	cmp	r1, r3
   17264:	db02      	blt.n	1726c <d_make_comp+0x58>
   17266:	2000      	movs	r0, #0
   17268:	bc70      	pop	{r4, r5, r6}
   1726a:	4770      	bx	lr
   1726c:	008b      	lsls	r3, r1, #2
   1726e:	010a      	lsls	r2, r1, #4
   17270:	f8d0 c010 	ldr.w	ip, [r0, #16]
   17274:	1ad2      	subs	r2, r2, r3
   17276:	1c4b      	adds	r3, r1, #1
   17278:	6143      	str	r3, [r0, #20]
   1727a:	eb1c 0002 	adds.w	r0, ip, r2
   1727e:	bf1e      	ittt	ne
   17280:	f80c 6002 	strbne.w	r6, [ip, r2]
   17284:	6044      	strne	r4, [r0, #4]
   17286:	6085      	strne	r5, [r0, #8]
   17288:	e7ee      	b.n	17268 <d_make_comp+0x54>
   1728a:	f1d5 0301 	rsbs	r3, r5, #1	; 0x1
   1728e:	bf38      	it	cc
   17290:	2300      	movcc	r3, #0
   17292:	2c00      	cmp	r4, #0
   17294:	bf08      	it	eq
   17296:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1729a:	2b00      	cmp	r3, #0
   1729c:	d1e3      	bne.n	17266 <d_make_comp+0x52>
   1729e:	6941      	ldr	r1, [r0, #20]
   172a0:	6983      	ldr	r3, [r0, #24]
   172a2:	4299      	cmp	r1, r3
   172a4:	dadf      	bge.n	17266 <d_make_comp+0x52>
   172a6:	e7e1      	b.n	1726c <d_make_comp+0x58>
   172a8:	2c00      	cmp	r4, #0
   172aa:	d0dc      	beq.n	17266 <d_make_comp+0x52>
   172ac:	6941      	ldr	r1, [r0, #20]
   172ae:	6983      	ldr	r3, [r0, #24]
   172b0:	4299      	cmp	r1, r3
   172b2:	dad8      	bge.n	17266 <d_make_comp+0x52>
   172b4:	e7da      	b.n	1726c <d_make_comp+0x58>
   172b6:	46c0      	nop			(mov r8, r8)

000172b8 <d_number>:
   172b8:	b410      	push	{r4}
   172ba:	68c1      	ldr	r1, [r0, #12]
   172bc:	f891 c000 	ldrb.w	ip, [r1]
   172c0:	f1bc 0f6e 	cmp.w	ip, #110	; 0x6e
   172c4:	d01c      	beq.n	17300 <d_number+0x48>
   172c6:	2400      	movs	r4, #0
   172c8:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
   172cc:	b2db      	uxtb	r3, r3
   172ce:	2b09      	cmp	r3, #9
   172d0:	d81c      	bhi.n	1730c <d_number+0x54>
   172d2:	68c1      	ldr	r1, [r0, #12]
   172d4:	2200      	movs	r2, #0
   172d6:	0053      	lsls	r3, r2, #1
   172d8:	3101      	adds	r1, #1
   172da:	00d2      	lsls	r2, r2, #3
   172dc:	189b      	adds	r3, r3, r2
   172de:	60c1      	str	r1, [r0, #12]
   172e0:	4463      	add	r3, ip
   172e2:	f891 c000 	ldrb.w	ip, [r1]
   172e6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   172ea:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
   172ee:	b2db      	uxtb	r3, r3
   172f0:	2b09      	cmp	r3, #9
   172f2:	d9f0      	bls.n	172d6 <d_number+0x1e>
   172f4:	4610      	mov	r0, r2
   172f6:	b10c      	cbz	r4, 172fc <d_number+0x44>
   172f8:	f1c2 0000 	rsb	r0, r2, #0	; 0x0
   172fc:	bc10      	pop	{r4}
   172fe:	4770      	bx	lr
   17300:	1c4b      	adds	r3, r1, #1
   17302:	60c3      	str	r3, [r0, #12]
   17304:	f891 c001 	ldrb.w	ip, [r1, #1]
   17308:	2401      	movs	r4, #1
   1730a:	e7dd      	b.n	172c8 <d_number+0x10>
   1730c:	2200      	movs	r2, #0
   1730e:	e7f1      	b.n	172f4 <d_number+0x3c>

00017310 <d_call_offset>:
   17310:	b510      	push	{r4, lr}
   17312:	4604      	mov	r4, r0
   17314:	b931      	cbnz	r1, 17324 <d_call_offset+0x14>
   17316:	68c3      	ldr	r3, [r0, #12]
   17318:	7819      	ldrb	r1, [r3, #0]
   1731a:	b909      	cbnz	r1, 17320 <d_call_offset+0x10>
   1731c:	2000      	movs	r0, #0
   1731e:	bd10      	pop	{r4, pc}
   17320:	3301      	adds	r3, #1
   17322:	60c3      	str	r3, [r0, #12]
   17324:	2968      	cmp	r1, #104
   17326:	d00a      	beq.n	1733e <d_call_offset+0x2e>
   17328:	2976      	cmp	r1, #118
   1732a:	d1f7      	bne.n	1731c <d_call_offset+0xc>
   1732c:	4620      	mov	r0, r4
   1732e:	f7ff ffc3 	bl	172b8 <d_number>
   17332:	68e2      	ldr	r2, [r4, #12]
   17334:	7813      	ldrb	r3, [r2, #0]
   17336:	2b5f      	cmp	r3, #95
   17338:	d1f0      	bne.n	1731c <d_call_offset+0xc>
   1733a:	1c53      	adds	r3, r2, #1
   1733c:	60e3      	str	r3, [r4, #12]
   1733e:	4620      	mov	r0, r4
   17340:	f7ff ffba 	bl	172b8 <d_number>
   17344:	68e2      	ldr	r2, [r4, #12]
   17346:	7813      	ldrb	r3, [r2, #0]
   17348:	2b5f      	cmp	r3, #95
   1734a:	d1e7      	bne.n	1731c <d_call_offset+0xc>
   1734c:	1c53      	adds	r3, r2, #1
   1734e:	60e3      	str	r3, [r4, #12]
   17350:	2001      	movs	r0, #1
   17352:	e7e4      	b.n	1731e <d_call_offset+0xe>

00017354 <d_cv_qualifiers>:
   17354:	b570      	push	{r4, r5, r6, lr}
   17356:	68c3      	ldr	r3, [r0, #12]
   17358:	4616      	mov	r6, r2
   1735a:	781a      	ldrb	r2, [r3, #0]
   1735c:	4604      	mov	r4, r0
   1735e:	460d      	mov	r5, r1
   17360:	2a72      	cmp	r2, #114
   17362:	bf14      	ite	ne
   17364:	2100      	movne	r1, #0
   17366:	2101      	moveq	r1, #1
   17368:	2a56      	cmp	r2, #86
   1736a:	bf14      	ite	ne
   1736c:	2000      	movne	r0, #0
   1736e:	2001      	moveq	r0, #1
   17370:	ea51 0c00 	orrs.w	ip, r1, r0
   17374:	d128      	bne.n	173c8 <d_cv_qualifiers+0x74>
   17376:	2a4b      	cmp	r2, #75
   17378:	d124      	bne.n	173c4 <d_cv_qualifiers+0x70>
   1737a:	3301      	adds	r3, #1
   1737c:	60e3      	str	r3, [r4, #12]
   1737e:	b988      	cbnz	r0, 173a4 <d_cv_qualifiers+0x50>
   17380:	6b23      	ldr	r3, [r4, #48]
   17382:	2e00      	cmp	r6, #0
   17384:	bf14      	ite	ne
   17386:	211b      	movne	r1, #27
   17388:	2118      	moveq	r1, #24
   1738a:	3306      	adds	r3, #6
   1738c:	6323      	str	r3, [r4, #48]
   1738e:	2200      	movs	r2, #0
   17390:	4620      	mov	r0, r4
   17392:	4613      	mov	r3, r2
   17394:	f7ff ff3e 	bl	17214 <d_make_comp>
   17398:	6028      	str	r0, [r5, #0]
   1739a:	b190      	cbz	r0, 173c2 <d_cv_qualifiers+0x6e>
   1739c:	68e3      	ldr	r3, [r4, #12]
   1739e:	1d05      	adds	r5, r0, #4
   173a0:	781a      	ldrb	r2, [r3, #0]
   173a2:	e7dd      	b.n	17360 <d_cv_qualifiers+0xc>
   173a4:	6b23      	ldr	r3, [r4, #48]
   173a6:	2200      	movs	r2, #0
   173a8:	3309      	adds	r3, #9
   173aa:	6323      	str	r3, [r4, #48]
   173ac:	2e00      	cmp	r6, #0
   173ae:	bf14      	ite	ne
   173b0:	211a      	movne	r1, #26
   173b2:	2117      	moveq	r1, #23
   173b4:	4620      	mov	r0, r4
   173b6:	4613      	mov	r3, r2
   173b8:	f7ff ff2c 	bl	17214 <d_make_comp>
   173bc:	6028      	str	r0, [r5, #0]
   173be:	2800      	cmp	r0, #0
   173c0:	d1ec      	bne.n	1739c <d_cv_qualifiers+0x48>
   173c2:	4605      	mov	r5, r0
   173c4:	4628      	mov	r0, r5
   173c6:	bd70      	pop	{r4, r5, r6, pc}
   173c8:	3301      	adds	r3, #1
   173ca:	60e3      	str	r3, [r4, #12]
   173cc:	2900      	cmp	r1, #0
   173ce:	d0d6      	beq.n	1737e <d_cv_qualifiers+0x2a>
   173d0:	6b23      	ldr	r3, [r4, #48]
   173d2:	2e00      	cmp	r6, #0
   173d4:	bf14      	ite	ne
   173d6:	2119      	movne	r1, #25
   173d8:	2116      	moveq	r1, #22
   173da:	3309      	adds	r3, #9
   173dc:	6323      	str	r3, [r4, #48]
   173de:	e7d6      	b.n	1738e <d_cv_qualifiers+0x3a>

000173e0 <d_template_param>:
   173e0:	b530      	push	{r4, r5, lr}
   173e2:	68c2      	ldr	r2, [r0, #12]
   173e4:	b081      	sub	sp, #4
   173e6:	7813      	ldrb	r3, [r2, #0]
   173e8:	4604      	mov	r4, r0
   173ea:	2b54      	cmp	r3, #84
   173ec:	d002      	beq.n	173f4 <d_template_param+0x14>
   173ee:	2000      	movs	r0, #0
   173f0:	b001      	add	sp, #4
   173f2:	bd30      	pop	{r4, r5, pc}
   173f4:	1c51      	adds	r1, r2, #1
   173f6:	60c1      	str	r1, [r0, #12]
   173f8:	7853      	ldrb	r3, [r2, #1]
   173fa:	2b5f      	cmp	r3, #95
   173fc:	d119      	bne.n	17432 <d_template_param+0x52>
   173fe:	2500      	movs	r5, #0
   17400:	1c4b      	adds	r3, r1, #1
   17402:	6aa2      	ldr	r2, [r4, #40]
   17404:	60e3      	str	r3, [r4, #12]
   17406:	f8d4 c014 	ldr.w	ip, [r4, #20]
   1740a:	69a3      	ldr	r3, [r4, #24]
   1740c:	3201      	adds	r2, #1
   1740e:	459c      	cmp	ip, r3
   17410:	62a2      	str	r2, [r4, #40]
   17412:	daec      	bge.n	173ee <d_template_param+0xe>
   17414:	ea4f 038c 	mov.w	r3, ip, lsl #2
   17418:	ea4f 120c 	mov.w	r2, ip, lsl #4
   1741c:	6921      	ldr	r1, [r4, #16]
   1741e:	1ad2      	subs	r2, r2, r3
   17420:	1888      	adds	r0, r1, r2
   17422:	f10c 0301 	add.w	r3, ip, #1	; 0x1
   17426:	6163      	str	r3, [r4, #20]
   17428:	d0e2      	beq.n	173f0 <d_template_param+0x10>
   1742a:	2305      	movs	r3, #5
   1742c:	548b      	strb	r3, [r1, r2]
   1742e:	6045      	str	r5, [r0, #4]
   17430:	e7de      	b.n	173f0 <d_template_param+0x10>
   17432:	f7ff ff41 	bl	172b8 <d_number>
   17436:	2800      	cmp	r0, #0
   17438:	dbd9      	blt.n	173ee <d_template_param+0xe>
   1743a:	68e1      	ldr	r1, [r4, #12]
   1743c:	780b      	ldrb	r3, [r1, #0]
   1743e:	2b5f      	cmp	r3, #95
   17440:	d1d5      	bne.n	173ee <d_template_param+0xe>
   17442:	1c45      	adds	r5, r0, #1
   17444:	e7dc      	b.n	17400 <d_template_param+0x20>
   17446:	46c0      	nop			(mov r8, r8)

00017448 <d_substitution>:
   17448:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
   1744c:	68c2      	ldr	r2, [r0, #12]
   1744e:	460c      	mov	r4, r1
   17450:	7813      	ldrb	r3, [r2, #0]
   17452:	2b53      	cmp	r3, #83
   17454:	d003      	beq.n	1745e <d_substitution+0x16>
   17456:	2000      	movs	r0, #0
   17458:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
   1745c:	4770      	bx	lr
   1745e:	1c53      	adds	r3, r2, #1
   17460:	60c3      	str	r3, [r0, #12]
   17462:	7851      	ldrb	r1, [r2, #1]
   17464:	bb39      	cbnz	r1, 174b6 <d_substitution+0x6e>
   17466:	6883      	ldr	r3, [r0, #8]
   17468:	08db      	lsrs	r3, r3, #3
   1746a:	f013 0701 	ands.w	r7, r3, #1	; 0x1
   1746e:	bf14      	ite	ne
   17470:	2200      	movne	r2, #0
   17472:	2201      	moveq	r2, #1
   17474:	2c00      	cmp	r4, #0
   17476:	bf0c      	ite	eq
   17478:	2200      	moveq	r2, #0
   1747a:	f002 0201 	andne.w	r2, r2, #1	; 0x1
   1747e:	b13a      	cbz	r2, 17490 <d_substitution+0x48>
   17480:	68c2      	ldr	r2, [r0, #12]
   17482:	7813      	ldrb	r3, [r2, #0]
   17484:	3b43      	subs	r3, #67
   17486:	b2db      	uxtb	r3, r3
   17488:	2b01      	cmp	r3, #1
   1748a:	bf8c      	ite	hi
   1748c:	2700      	movhi	r7, #0
   1748e:	2701      	movls	r7, #1
   17490:	4a51      	ldr	r2, [pc, #324]	(175d8 <d_substitution+0x190>)
   17492:	f1b2 03c4 	subs.w	r3, r2, #196	; 0xc4
   17496:	d3de      	bcc.n	17456 <d_substitution+0xe>
   17498:	2974      	cmp	r1, #116
   1749a:	bf08      	it	eq
   1749c:	469c      	moveq	ip, r3
   1749e:	d04f      	beq.n	17540 <d_substitution+0xf8>
   174a0:	469c      	mov	ip, r3
   174a2:	e003      	b.n	174ac <d_substitution+0x64>
   174a4:	f89c 3000 	ldrb.w	r3, [ip]
   174a8:	428b      	cmp	r3, r1
   174aa:	d049      	beq.n	17540 <d_substitution+0xf8>
   174ac:	f10c 0c1c 	add.w	ip, ip, #28	; 0x1c
   174b0:	4594      	cmp	ip, r2
   174b2:	d1f7      	bne.n	174a4 <d_substitution+0x5c>
   174b4:	e7cf      	b.n	17456 <d_substitution+0xe>
   174b6:	3301      	adds	r3, #1
   174b8:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
   174bc:	60c3      	str	r3, [r0, #12]
   174be:	fa5f f38c 	uxtb.w	r3, ip
   174c2:	2b09      	cmp	r3, #9
   174c4:	bf8c      	ite	hi
   174c6:	2300      	movhi	r3, #0
   174c8:	2301      	movls	r3, #1
   174ca:	295f      	cmp	r1, #95
   174cc:	bf08      	it	eq
   174ce:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   174d2:	2b00      	cmp	r3, #0
   174d4:	d079      	beq.n	175ca <d_substitution+0x182>
   174d6:	295f      	cmp	r1, #95
   174d8:	d030      	beq.n	1753c <d_substitution+0xf4>
   174da:	fa5f f38c 	uxtb.w	r3, ip
   174de:	2200      	movs	r2, #0
   174e0:	2b09      	cmp	r3, #9
   174e2:	d814      	bhi.n	1750e <d_substitution+0xc6>
   174e4:	0093      	lsls	r3, r2, #2
   174e6:	0152      	lsls	r2, r2, #5
   174e8:	189b      	adds	r3, r3, r2
   174ea:	185b      	adds	r3, r3, r1
   174ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   174f0:	2a00      	cmp	r2, #0
   174f2:	dbb0      	blt.n	17456 <d_substitution+0xe>
   174f4:	68c3      	ldr	r3, [r0, #12]
   174f6:	7819      	ldrb	r1, [r3, #0]
   174f8:	b119      	cbz	r1, 17502 <d_substitution+0xba>
   174fa:	3301      	adds	r3, #1
   174fc:	295f      	cmp	r1, #95
   174fe:	60c3      	str	r3, [r0, #12]
   17500:	d011      	beq.n	17526 <d_substitution+0xde>
   17502:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
   17506:	fa5f f38c 	uxtb.w	r3, ip
   1750a:	2b09      	cmp	r3, #9
   1750c:	d9ea      	bls.n	174e4 <d_substitution+0x9c>
   1750e:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   17512:	b2db      	uxtb	r3, r3
   17514:	2b19      	cmp	r3, #25
   17516:	d89e      	bhi.n	17456 <d_substitution+0xe>
   17518:	0093      	lsls	r3, r2, #2
   1751a:	0152      	lsls	r2, r2, #5
   1751c:	189b      	adds	r3, r3, r2
   1751e:	185b      	adds	r3, r3, r1
   17520:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
   17524:	e7e4      	b.n	174f0 <d_substitution+0xa8>
   17526:	1c51      	adds	r1, r2, #1
   17528:	6a03      	ldr	r3, [r0, #32]
   1752a:	4299      	cmp	r1, r3
   1752c:	da93      	bge.n	17456 <d_substitution+0xe>
   1752e:	6a83      	ldr	r3, [r0, #40]
   17530:	69c2      	ldr	r2, [r0, #28]
   17532:	3301      	adds	r3, #1
   17534:	6283      	str	r3, [r0, #40]
   17536:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1753a:	e78d      	b.n	17458 <d_substitution+0x10>
   1753c:	395f      	subs	r1, #95
   1753e:	e7f3      	b.n	17528 <d_substitution+0xe0>
   17540:	f8dc a014 	ldr.w	sl, [ip, #20]
   17544:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   17548:	d03c      	beq.n	175c4 <d_substitution+0x17c>
   1754a:	6945      	ldr	r5, [r0, #20]
   1754c:	6986      	ldr	r6, [r0, #24]
   1754e:	f8dc 8018 	ldr.w	r8, [ip, #24]
   17552:	42b5      	cmp	r5, r6
   17554:	db1c      	blt.n	17590 <d_substitution+0x148>
   17556:	2200      	movs	r2, #0
   17558:	62c2      	str	r2, [r0, #44]
   1755a:	2f00      	cmp	r7, #0
   1755c:	d02d      	beq.n	175ba <d_substitution+0x172>
   1755e:	f8dc 400c 	ldr.w	r4, [ip, #12]
   17562:	f8dc c010 	ldr.w	ip, [ip, #16]
   17566:	6b03      	ldr	r3, [r0, #48]
   17568:	42b5      	cmp	r5, r6
   1756a:	4463      	add	r3, ip
   1756c:	6303      	str	r3, [r0, #48]
   1756e:	f6bf af72 	bge.w	17456 <d_substitution+0xe>
   17572:	00ab      	lsls	r3, r5, #2
   17574:	012a      	lsls	r2, r5, #4
   17576:	6901      	ldr	r1, [r0, #16]
   17578:	1ad2      	subs	r2, r2, r3
   1757a:	1c6b      	adds	r3, r5, #1
   1757c:	6143      	str	r3, [r0, #20]
   1757e:	1888      	adds	r0, r1, r2
   17580:	f43f af6a 	beq.w	17458 <d_substitution+0x10>
   17584:	2315      	movs	r3, #21
   17586:	548b      	strb	r3, [r1, r2]
   17588:	6044      	str	r4, [r0, #4]
   1758a:	f8c0 c008 	str.w	ip, [r0, #8]
   1758e:	e763      	b.n	17458 <d_substitution+0x10>
   17590:	012b      	lsls	r3, r5, #4
   17592:	00aa      	lsls	r2, r5, #2
   17594:	6901      	ldr	r1, [r0, #16]
   17596:	ebc2 0403 	rsb	r4, r2, r3
   1759a:	1c6b      	adds	r3, r5, #1
   1759c:	190a      	adds	r2, r1, r4
   1759e:	6143      	str	r3, [r0, #20]
   175a0:	bf08      	it	eq
   175a2:	461d      	moveq	r5, r3
   175a4:	d0d8      	beq.n	17558 <d_substitution+0x110>
   175a6:	f8c2 a004 	str.w	sl, [r2, #4]
   175aa:	f8c2 8008 	str.w	r8, [r2, #8]
   175ae:	2315      	movs	r3, #21
   175b0:	550b      	strb	r3, [r1, r4]
   175b2:	6945      	ldr	r5, [r0, #20]
   175b4:	6986      	ldr	r6, [r0, #24]
   175b6:	62c2      	str	r2, [r0, #44]
   175b8:	e7cf      	b.n	1755a <d_substitution+0x112>
   175ba:	f8dc 4004 	ldr.w	r4, [ip, #4]
   175be:	f8dc c008 	ldr.w	ip, [ip, #8]
   175c2:	e7d0      	b.n	17566 <d_substitution+0x11e>
   175c4:	6945      	ldr	r5, [r0, #20]
   175c6:	6986      	ldr	r6, [r0, #24]
   175c8:	e7c7      	b.n	1755a <d_substitution+0x112>
   175ca:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   175ce:	b2db      	uxtb	r3, r3
   175d0:	2b19      	cmp	r3, #25
   175d2:	d982      	bls.n	174da <d_substitution+0x92>
   175d4:	e747      	b.n	17466 <d_substitution+0x1e>
   175d6:	46c0      	nop			(mov r8, r8)
   175d8:	000221e8 	.word	0x000221e8

000175dc <d_append_char>:
   175dc:	b570      	push	{r4, r5, r6, lr}
   175de:	460e      	mov	r6, r1
   175e0:	f8d0 1104 	ldr.w	r1, [r0, #260]
   175e4:	4605      	mov	r5, r0
   175e6:	29ff      	cmp	r1, #255
   175e8:	d008      	beq.n	175fc <d_append_char+0x20>
   175ea:	eb05 0301 	add.w	r3, r5, r1
   175ee:	1c4a      	adds	r2, r1, #1
   175f0:	711e      	strb	r6, [r3, #4]
   175f2:	f8c5 2104 	str.w	r2, [r5, #260]
   175f6:	f885 6108 	strb.w	r6, [r5, #264]
   175fa:	bd70      	pop	{r4, r5, r6, pc}
   175fc:	2400      	movs	r4, #0
   175fe:	f880 4103 	strb.w	r4, [r0, #259]
   17602:	f8d5 2110 	ldr.w	r2, [r5, #272]
   17606:	3004      	adds	r0, #4
   17608:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1760c:	4798      	blx	r3
   1760e:	f8c5 4104 	str.w	r4, [r5, #260]
   17612:	4621      	mov	r1, r4
   17614:	e7e9      	b.n	175ea <d_append_char+0xe>
   17616:	46c0      	nop			(mov r8, r8)

00017618 <d_source_name>:
   17618:	b570      	push	{r4, r5, r6, lr}
   1761a:	4604      	mov	r4, r0
   1761c:	f7ff fe4c 	bl	172b8 <d_number>
   17620:	2800      	cmp	r0, #0
   17622:	4605      	mov	r5, r0
   17624:	dd30      	ble.n	17688 <d_source_name+0x70>
   17626:	68e6      	ldr	r6, [r4, #12]
   17628:	6863      	ldr	r3, [r4, #4]
   1762a:	1b9b      	subs	r3, r3, r6
   1762c:	4298      	cmp	r0, r3
   1762e:	dd02      	ble.n	17636 <d_source_name+0x1e>
   17630:	2000      	movs	r0, #0
   17632:	62e0      	str	r0, [r4, #44]
   17634:	bd70      	pop	{r4, r5, r6, pc}
   17636:	68a3      	ldr	r3, [r4, #8]
   17638:	eb06 0200 	add.w	r2, r6, r0
   1763c:	f013 0f04 	tst.w	r3, #4	; 0x4
   17640:	60e2      	str	r2, [r4, #12]
   17642:	d004      	beq.n	1764e <d_source_name+0x36>
   17644:	5c33      	ldrb	r3, [r6, r0]
   17646:	2b24      	cmp	r3, #36
   17648:	d101      	bne.n	1764e <d_source_name+0x36>
   1764a:	1c53      	adds	r3, r2, #1
   1764c:	60e3      	str	r3, [r4, #12]
   1764e:	2d09      	cmp	r5, #9
   17650:	dc1c      	bgt.n	1768c <d_source_name+0x74>
   17652:	6961      	ldr	r1, [r4, #20]
   17654:	69a3      	ldr	r3, [r4, #24]
   17656:	4299      	cmp	r1, r3
   17658:	daea      	bge.n	17630 <d_source_name+0x18>
   1765a:	008a      	lsls	r2, r1, #2
   1765c:	010b      	lsls	r3, r1, #4
   1765e:	ebc2 0c03 	rsb	ip, r2, r3
   17662:	6922      	ldr	r2, [r4, #16]
   17664:	1c4b      	adds	r3, r1, #1
   17666:	eb12 000c 	adds.w	r0, r2, ip
   1766a:	6163      	str	r3, [r4, #20]
   1766c:	bf14      	ite	ne
   1766e:	2300      	movne	r3, #0
   17670:	2301      	moveq	r3, #1
   17672:	2e00      	cmp	r6, #0
   17674:	bf08      	it	eq
   17676:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1767a:	2b00      	cmp	r3, #0
   1767c:	d1d8      	bne.n	17630 <d_source_name+0x18>
   1767e:	f802 300c 	strb.w	r3, [r2, ip]
   17682:	6046      	str	r6, [r0, #4]
   17684:	6085      	str	r5, [r0, #8]
   17686:	e7d4      	b.n	17632 <d_source_name+0x1a>
   17688:	2000      	movs	r0, #0
   1768a:	e7d3      	b.n	17634 <d_source_name+0x1c>
   1768c:	4630      	mov	r0, r6
   1768e:	4919      	ldr	r1, [pc, #100]	(176f4 <d_source_name+0xdc>)
   17690:	2208      	movs	r2, #8
   17692:	f008 ff15 	bl	204c0 <memcmp>
   17696:	2800      	cmp	r0, #0
   17698:	d1db      	bne.n	17652 <d_source_name+0x3a>
   1769a:	7a32      	ldrb	r2, [r6, #8]
   1769c:	f106 0108 	add.w	r1, r6, #8	; 0x8
   176a0:	2a5f      	cmp	r2, #95
   176a2:	bf14      	ite	ne
   176a4:	2300      	movne	r3, #0
   176a6:	2301      	moveq	r3, #1
   176a8:	2a2e      	cmp	r2, #46
   176aa:	bf08      	it	eq
   176ac:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   176b0:	b1e3      	cbz	r3, 176ec <d_source_name+0xd4>
   176b2:	784b      	ldrb	r3, [r1, #1]
   176b4:	2b4e      	cmp	r3, #78
   176b6:	d1cc      	bne.n	17652 <d_source_name+0x3a>
   176b8:	6b23      	ldr	r3, [r4, #48]
   176ba:	6961      	ldr	r1, [r4, #20]
   176bc:	3316      	adds	r3, #22
   176be:	1b5b      	subs	r3, r3, r5
   176c0:	6323      	str	r3, [r4, #48]
   176c2:	69a3      	ldr	r3, [r4, #24]
   176c4:	4299      	cmp	r1, r3
   176c6:	dab3      	bge.n	17630 <d_source_name+0x18>
   176c8:	008b      	lsls	r3, r1, #2
   176ca:	010a      	lsls	r2, r1, #4
   176cc:	f8d4 c010 	ldr.w	ip, [r4, #16]
   176d0:	1ad2      	subs	r2, r2, r3
   176d2:	1c4b      	adds	r3, r1, #1
   176d4:	eb1c 0002 	adds.w	r0, ip, r2
   176d8:	6163      	str	r3, [r4, #20]
   176da:	d0aa      	beq.n	17632 <d_source_name+0x1a>
   176dc:	2300      	movs	r3, #0
   176de:	f80c 3002 	strb.w	r3, [ip, r2]
   176e2:	4a05      	ldr	r2, [pc, #20]	(176f8 <d_source_name+0xe0>)
   176e4:	3315      	adds	r3, #21
   176e6:	6042      	str	r2, [r0, #4]
   176e8:	6083      	str	r3, [r0, #8]
   176ea:	e7a2      	b.n	17632 <d_source_name+0x1a>
   176ec:	2a24      	cmp	r2, #36
   176ee:	d1b0      	bne.n	17652 <d_source_name+0x3a>
   176f0:	e7df      	b.n	176b2 <d_source_name+0x9a>
   176f2:	46c0      	nop			(mov r8, r8)
   176f4:	00022930 	.word	0x00022930
   176f8:	0002293c 	.word	0x0002293c

000176fc <d_type>:
   176fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   176fe:	4605      	mov	r5, r0
   17700:	68c0      	ldr	r0, [r0, #12]
   17702:	b083      	sub	sp, #12
   17704:	7801      	ldrb	r1, [r0, #0]
   17706:	2956      	cmp	r1, #86
   17708:	bf14      	ite	ne
   1770a:	2300      	movne	r3, #0
   1770c:	2301      	moveq	r3, #1
   1770e:	2972      	cmp	r1, #114
   17710:	bf08      	it	eq
   17712:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   17716:	b90b      	cbnz	r3, 1771c <d_type+0x20>
   17718:	294b      	cmp	r1, #75
   1771a:	d11d      	bne.n	17758 <d_type+0x5c>
   1771c:	4628      	mov	r0, r5
   1771e:	a901      	add	r1, sp, #4
   17720:	2200      	movs	r2, #0
   17722:	f7ff fe17 	bl	17354 <d_cv_qualifiers>
   17726:	4604      	mov	r4, r0
   17728:	b910      	cbnz	r0, 17730 <d_type+0x34>
   1772a:	2000      	movs	r0, #0
   1772c:	b003      	add	sp, #12
   1772e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17730:	4628      	mov	r0, r5
   17732:	f7ff ffe3 	bl	176fc <d_type>
   17736:	6020      	str	r0, [r4, #0]
   17738:	2800      	cmp	r0, #0
   1773a:	d0f6      	beq.n	1772a <d_type+0x2e>
   1773c:	9901      	ldr	r1, [sp, #4]
   1773e:	2900      	cmp	r1, #0
   17740:	d0f3      	beq.n	1772a <d_type+0x2e>
   17742:	6a2a      	ldr	r2, [r5, #32]
   17744:	6a6b      	ldr	r3, [r5, #36]
   17746:	429a      	cmp	r2, r3
   17748:	daef      	bge.n	1772a <d_type+0x2e>
   1774a:	69eb      	ldr	r3, [r5, #28]
   1774c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   17750:	3201      	adds	r2, #1
   17752:	622a      	str	r2, [r5, #32]
   17754:	9801      	ldr	r0, [sp, #4]
   17756:	e7e9      	b.n	1772c <d_type+0x30>
   17758:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1775c:	2b4a      	cmp	r3, #74
   1775e:	d8e4      	bhi.n	1772a <d_type+0x2e>
   17760:	a201      	add	r2, pc, #4	(adr r2, 17768 <d_type+0x6c>)
   17762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17766:	46c0      	nop			(mov r8, r8)
   17768:	00017b07 	.word	0x00017b07
   1776c:	00017b07 	.word	0x00017b07
   17770:	00017b07 	.word	0x00017b07
   17774:	00017b07 	.word	0x00017b07
   17778:	00017b07 	.word	0x00017b07
   1777c:	00017b07 	.word	0x00017b07
   17780:	00017b07 	.word	0x00017b07
   17784:	00017b07 	.word	0x00017b07
   17788:	00017b07 	.word	0x00017b07
   1778c:	00017b07 	.word	0x00017b07
   17790:	0001772b 	.word	0x0001772b
   17794:	0001772b 	.word	0x0001772b
   17798:	0001772b 	.word	0x0001772b
   1779c:	0001772b 	.word	0x0001772b
   177a0:	0001772b 	.word	0x0001772b
   177a4:	0001772b 	.word	0x0001772b
   177a8:	0001772b 	.word	0x0001772b
   177ac:	00017a95 	.word	0x00017a95
   177b0:	0001772b 	.word	0x0001772b
   177b4:	00017a7b 	.word	0x00017a7b
   177b8:	0001772b 	.word	0x0001772b
   177bc:	0001772b 	.word	0x0001772b
   177c0:	00017a57 	.word	0x00017a57
   177c4:	00017a3d 	.word	0x00017a3d
   177c8:	0001772b 	.word	0x0001772b
   177cc:	0001772b 	.word	0x0001772b
   177d0:	0001772b 	.word	0x0001772b
   177d4:	0001772b 	.word	0x0001772b
   177d8:	0001772b 	.word	0x0001772b
   177dc:	00017a19 	.word	0x00017a19
   177e0:	00017b07 	.word	0x00017b07
   177e4:	000179ff 	.word	0x000179ff
   177e8:	000179e5 	.word	0x000179e5
   177ec:	0001772b 	.word	0x0001772b
   177f0:	000179cb 	.word	0x000179cb
   177f4:	0001797b 	.word	0x0001797b
   177f8:	00017939 	.word	0x00017939
   177fc:	00017917 	.word	0x00017917
   17800:	0001772b 	.word	0x0001772b
   17804:	0001772b 	.word	0x0001772b
   17808:	0001772b 	.word	0x0001772b
   1780c:	0001772b 	.word	0x0001772b
   17810:	00017b07 	.word	0x00017b07
   17814:	0001772b 	.word	0x0001772b
   17818:	0001772b 	.word	0x0001772b
   1781c:	0001772b 	.word	0x0001772b
   17820:	0001772b 	.word	0x0001772b
   17824:	0001772b 	.word	0x0001772b
   17828:	0001772b 	.word	0x0001772b
   1782c:	000178cd 	.word	0x000178cd
   17830:	000178cd 	.word	0x000178cd
   17834:	000178cd 	.word	0x000178cd
   17838:	000178cd 	.word	0x000178cd
   1783c:	000178cd 	.word	0x000178cd
   17840:	000178cd 	.word	0x000178cd
   17844:	000178cd 	.word	0x000178cd
   17848:	000178cd 	.word	0x000178cd
   1784c:	000178cd 	.word	0x000178cd
   17850:	000178cd 	.word	0x000178cd
   17854:	0001772b 	.word	0x0001772b
   17858:	000178cd 	.word	0x000178cd
   1785c:	000178cd 	.word	0x000178cd
   17860:	000178cd 	.word	0x000178cd
   17864:	000178cd 	.word	0x000178cd
   17868:	0001772b 	.word	0x0001772b
   1786c:	0001772b 	.word	0x0001772b
   17870:	0001772b 	.word	0x0001772b
   17874:	000178cd 	.word	0x000178cd
   17878:	000178cd 	.word	0x000178cd
   1787c:	00017895 	.word	0x00017895
   17880:	000178cd 	.word	0x000178cd
   17884:	000178cd 	.word	0x000178cd
   17888:	000178cd 	.word	0x000178cd
   1788c:	000178cd 	.word	0x000178cd
   17890:	000178cd 	.word	0x000178cd
   17894:	1c43      	adds	r3, r0, #1
   17896:	60eb      	str	r3, [r5, #12]
   17898:	4628      	mov	r0, r5
   1789a:	f7ff febd 	bl	17618 <d_source_name>
   1789e:	2123      	movs	r1, #35
   178a0:	4602      	mov	r2, r0
   178a2:	2300      	movs	r3, #0
   178a4:	4628      	mov	r0, r5
   178a6:	f7ff fcb5 	bl	17214 <d_make_comp>
   178aa:	9001      	str	r0, [sp, #4]
   178ac:	9801      	ldr	r0, [sp, #4]
   178ae:	2800      	cmp	r0, #0
   178b0:	f43f af3b 	beq.w	1772a <d_type+0x2e>
   178b4:	6a2a      	ldr	r2, [r5, #32]
   178b6:	6a6b      	ldr	r3, [r5, #36]
   178b8:	429a      	cmp	r2, r3
   178ba:	f6bf af36 	bge.w	1772a <d_type+0x2e>
   178be:	69eb      	ldr	r3, [r5, #28]
   178c0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
   178c4:	3201      	adds	r2, #1
   178c6:	622a      	str	r2, [r5, #32]
   178c8:	9801      	ldr	r0, [sp, #4]
   178ca:	e72f      	b.n	1772c <d_type+0x30>
   178cc:	008b      	lsls	r3, r1, #2
   178ce:	4aaf      	ldr	r2, [pc, #700]	(17b8c <d_type+0x490>)
   178d0:	0109      	lsls	r1, r1, #4
   178d2:	185b      	adds	r3, r3, r1
   178d4:	189c      	adds	r4, r3, r2
   178d6:	f000 811b 	beq.w	17b10 <d_type+0x414>
   178da:	6969      	ldr	r1, [r5, #20]
   178dc:	69ab      	ldr	r3, [r5, #24]
   178de:	4299      	cmp	r1, r3
   178e0:	f280 8116 	bge.w	17b10 <d_type+0x414>
   178e4:	008b      	lsls	r3, r1, #2
   178e6:	010a      	lsls	r2, r1, #4
   178e8:	f8d5 c010 	ldr.w	ip, [r5, #16]
   178ec:	1ad2      	subs	r2, r2, r3
   178ee:	1c4b      	adds	r3, r1, #1
   178f0:	eb1c 0102 	adds.w	r1, ip, r2
   178f4:	616b      	str	r3, [r5, #20]
   178f6:	d004      	beq.n	17902 <d_type+0x206>
   178f8:	604c      	str	r4, [r1, #4]
   178fa:	2322      	movs	r3, #34
   178fc:	68e8      	ldr	r0, [r5, #12]
   178fe:	f80c 3002 	strb.w	r3, [ip, r2]
   17902:	9101      	str	r1, [sp, #4]
   17904:	6849      	ldr	r1, [r1, #4]
   17906:	6b2b      	ldr	r3, [r5, #48]
   17908:	684a      	ldr	r2, [r1, #4]
   1790a:	189b      	adds	r3, r3, r2
   1790c:	1c42      	adds	r2, r0, #1
   1790e:	632b      	str	r3, [r5, #48]
   17910:	60ea      	str	r2, [r5, #12]
   17912:	9801      	ldr	r0, [sp, #4]
   17914:	e70a      	b.n	1772c <d_type+0x30>
   17916:	1c43      	adds	r3, r0, #1
   17918:	60eb      	str	r3, [r5, #12]
   1791a:	4628      	mov	r0, r5
   1791c:	f7ff fe7c 	bl	17618 <d_source_name>
   17920:	9001      	str	r0, [sp, #4]
   17922:	4628      	mov	r0, r5
   17924:	f7ff feea 	bl	176fc <d_type>
   17928:	211c      	movs	r1, #28
   1792a:	4602      	mov	r2, r0
   1792c:	9b01      	ldr	r3, [sp, #4]
   1792e:	4628      	mov	r0, r5
   17930:	f7ff fc70 	bl	17214 <d_make_comp>
   17934:	9001      	str	r0, [sp, #4]
   17936:	e7b9      	b.n	178ac <d_type+0x1b0>
   17938:	4628      	mov	r0, r5
   1793a:	f7ff fd51 	bl	173e0 <d_template_param>
   1793e:	68eb      	ldr	r3, [r5, #12]
   17940:	9001      	str	r0, [sp, #4]
   17942:	781a      	ldrb	r2, [r3, #0]
   17944:	2a49      	cmp	r2, #73
   17946:	d1b1      	bne.n	178ac <d_type+0x1b0>
   17948:	2800      	cmp	r0, #0
   1794a:	f43f aeee 	beq.w	1772a <d_type+0x2e>
   1794e:	6a2a      	ldr	r2, [r5, #32]
   17950:	6a6b      	ldr	r3, [r5, #36]
   17952:	429a      	cmp	r2, r3
   17954:	f6bf aee9 	bge.w	1772a <d_type+0x2e>
   17958:	69eb      	ldr	r3, [r5, #28]
   1795a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
   1795e:	3201      	adds	r2, #1
   17960:	622a      	str	r2, [r5, #32]
   17962:	4628      	mov	r0, r5
   17964:	9c01      	ldr	r4, [sp, #4]
   17966:	f000 fe45 	bl	185f4 <d_template_args>
   1796a:	2104      	movs	r1, #4
   1796c:	4603      	mov	r3, r0
   1796e:	4622      	mov	r2, r4
   17970:	4628      	mov	r0, r5
   17972:	f7ff fc4f 	bl	17214 <d_make_comp>
   17976:	9001      	str	r0, [sp, #4]
   17978:	e798      	b.n	178ac <d_type+0x1b0>
   1797a:	7841      	ldrb	r1, [r0, #1]
   1797c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   17980:	b2d2      	uxtb	r2, r2
   17982:	295f      	cmp	r1, #95
   17984:	bf14      	ite	ne
   17986:	2300      	movne	r3, #0
   17988:	2301      	moveq	r3, #1
   1798a:	2a09      	cmp	r2, #9
   1798c:	bf98      	it	ls
   1798e:	f043 0301 	orrls.w	r3, r3, #1	; 0x1
   17992:	b92b      	cbnz	r3, 179a0 <d_type+0x2a4>
   17994:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   17998:	b2db      	uxtb	r3, r3
   1799a:	2b19      	cmp	r3, #25
   1799c:	f200 80cf 	bhi.w	17b3e <d_type+0x442>
   179a0:	2100      	movs	r1, #0
   179a2:	4628      	mov	r0, r5
   179a4:	f7ff fd50 	bl	17448 <d_substitution>
   179a8:	68eb      	ldr	r3, [r5, #12]
   179aa:	9001      	str	r0, [sp, #4]
   179ac:	781a      	ldrb	r2, [r3, #0]
   179ae:	4604      	mov	r4, r0
   179b0:	2a49      	cmp	r2, #73
   179b2:	d189      	bne.n	178c8 <d_type+0x1cc>
   179b4:	4628      	mov	r0, r5
   179b6:	f000 fe1d 	bl	185f4 <d_template_args>
   179ba:	2104      	movs	r1, #4
   179bc:	4603      	mov	r3, r0
   179be:	4622      	mov	r2, r4
   179c0:	4628      	mov	r0, r5
   179c2:	f7ff fc27 	bl	17214 <d_make_comp>
   179c6:	9001      	str	r0, [sp, #4]
   179c8:	e770      	b.n	178ac <d_type+0x1b0>
   179ca:	1c43      	adds	r3, r0, #1
   179cc:	60eb      	str	r3, [r5, #12]
   179ce:	4628      	mov	r0, r5
   179d0:	f7ff fe94 	bl	176fc <d_type>
   179d4:	211e      	movs	r1, #30
   179d6:	4602      	mov	r2, r0
   179d8:	2300      	movs	r3, #0
   179da:	4628      	mov	r0, r5
   179dc:	f7ff fc1a 	bl	17214 <d_make_comp>
   179e0:	9001      	str	r0, [sp, #4]
   179e2:	e763      	b.n	178ac <d_type+0x1b0>
   179e4:	1c43      	adds	r3, r0, #1
   179e6:	60eb      	str	r3, [r5, #12]
   179e8:	4628      	mov	r0, r5
   179ea:	f7ff fe87 	bl	176fc <d_type>
   179ee:	211d      	movs	r1, #29
   179f0:	4602      	mov	r2, r0
   179f2:	2300      	movs	r3, #0
   179f4:	4628      	mov	r0, r5
   179f6:	f7ff fc0d 	bl	17214 <d_make_comp>
   179fa:	9001      	str	r0, [sp, #4]
   179fc:	e756      	b.n	178ac <d_type+0x1b0>
   179fe:	1c43      	adds	r3, r0, #1
   17a00:	60eb      	str	r3, [r5, #12]
   17a02:	4628      	mov	r0, r5
   17a04:	f7ff fe7a 	bl	176fc <d_type>
   17a08:	211f      	movs	r1, #31
   17a0a:	4602      	mov	r2, r0
   17a0c:	2300      	movs	r3, #0
   17a0e:	4628      	mov	r0, r5
   17a10:	f7ff fc00 	bl	17214 <d_make_comp>
   17a14:	9001      	str	r0, [sp, #4]
   17a16:	e749      	b.n	178ac <d_type+0x1b0>
   17a18:	1c43      	adds	r3, r0, #1
   17a1a:	60eb      	str	r3, [r5, #12]
   17a1c:	4628      	mov	r0, r5
   17a1e:	f7ff fe6d 	bl	176fc <d_type>
   17a22:	4669      	mov	r1, sp
   17a24:	4607      	mov	r7, r0
   17a26:	2201      	movs	r2, #1
   17a28:	4628      	mov	r0, r5
   17a2a:	f7ff fc93 	bl	17354 <d_cv_qualifiers>
   17a2e:	466e      	mov	r6, sp
   17a30:	4604      	mov	r4, r0
   17a32:	2800      	cmp	r0, #0
   17a34:	d16e      	bne.n	17b14 <d_type+0x418>
   17a36:	2000      	movs	r0, #0
   17a38:	9001      	str	r0, [sp, #4]
   17a3a:	e737      	b.n	178ac <d_type+0x1b0>
   17a3c:	1c43      	adds	r3, r0, #1
   17a3e:	60eb      	str	r3, [r5, #12]
   17a40:	4628      	mov	r0, r5
   17a42:	f7ff fe5b 	bl	176fc <d_type>
   17a46:	2121      	movs	r1, #33
   17a48:	4602      	mov	r2, r0
   17a4a:	2300      	movs	r3, #0
   17a4c:	4628      	mov	r0, r5
   17a4e:	f7ff fbe1 	bl	17214 <d_make_comp>
   17a52:	9001      	str	r0, [sp, #4]
   17a54:	e72a      	b.n	178ac <d_type+0x1b0>
   17a56:	1c42      	adds	r2, r0, #1
   17a58:	60ea      	str	r2, [r5, #12]
   17a5a:	7843      	ldrb	r3, [r0, #1]
   17a5c:	2b59      	cmp	r3, #89
   17a5e:	f000 8083 	beq.w	17b68 <d_type+0x46c>
   17a62:	2101      	movs	r1, #1
   17a64:	4628      	mov	r0, r5
   17a66:	f000 f9b7 	bl	17dd8 <d_bare_function_type>
   17a6a:	68ea      	ldr	r2, [r5, #12]
   17a6c:	7813      	ldrb	r3, [r2, #0]
   17a6e:	2b45      	cmp	r3, #69
   17a70:	d1e1      	bne.n	17a36 <d_type+0x33a>
   17a72:	1c53      	adds	r3, r2, #1
   17a74:	60eb      	str	r3, [r5, #12]
   17a76:	9001      	str	r0, [sp, #4]
   17a78:	e718      	b.n	178ac <d_type+0x1b0>
   17a7a:	1c43      	adds	r3, r0, #1
   17a7c:	60eb      	str	r3, [r5, #12]
   17a7e:	4628      	mov	r0, r5
   17a80:	f7ff fe3c 	bl	176fc <d_type>
   17a84:	2120      	movs	r1, #32
   17a86:	4602      	mov	r2, r0
   17a88:	2300      	movs	r3, #0
   17a8a:	4628      	mov	r0, r5
   17a8c:	f7ff fbc2 	bl	17214 <d_make_comp>
   17a90:	9001      	str	r0, [sp, #4]
   17a92:	e70b      	b.n	178ac <d_type+0x1b0>
   17a94:	1c41      	adds	r1, r0, #1
   17a96:	60e9      	str	r1, [r5, #12]
   17a98:	7842      	ldrb	r2, [r0, #1]
   17a9a:	2a5f      	cmp	r2, #95
   17a9c:	d04d      	beq.n	17b3a <d_type+0x43e>
   17a9e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   17aa2:	b2db      	uxtb	r3, r3
   17aa4:	2b09      	cmp	r3, #9
   17aa6:	d857      	bhi.n	17b58 <d_type+0x45c>
   17aa8:	4608      	mov	r0, r1
   17aaa:	3001      	adds	r0, #1
   17aac:	60e8      	str	r0, [r5, #12]
   17aae:	7803      	ldrb	r3, [r0, #0]
   17ab0:	3b30      	subs	r3, #48
   17ab2:	b2db      	uxtb	r3, r3
   17ab4:	2b09      	cmp	r3, #9
   17ab6:	d9f8      	bls.n	17aaa <d_type+0x3ae>
   17ab8:	f8d5 c014 	ldr.w	ip, [r5, #20]
   17abc:	69ab      	ldr	r3, [r5, #24]
   17abe:	459c      	cmp	ip, r3
   17ac0:	dab9      	bge.n	17a36 <d_type+0x33a>
   17ac2:	ea4f 038c 	mov.w	r3, ip, lsl #2
   17ac6:	ea4f 120c 	mov.w	r2, ip, lsl #4
   17aca:	692c      	ldr	r4, [r5, #16]
   17acc:	1ad2      	subs	r2, r2, r3
   17ace:	18a6      	adds	r6, r4, r2
   17ad0:	f10c 0301 	add.w	r3, ip, #1	; 0x1
   17ad4:	616b      	str	r3, [r5, #20]
   17ad6:	d0ae      	beq.n	17a36 <d_type+0x33a>
   17ad8:	1a40      	subs	r0, r0, r1
   17ada:	d0ac      	beq.n	17a36 <d_type+0x33a>
   17adc:	2300      	movs	r3, #0
   17ade:	54a3      	strb	r3, [r4, r2]
   17ae0:	6071      	str	r1, [r6, #4]
   17ae2:	60b0      	str	r0, [r6, #8]
   17ae4:	68e9      	ldr	r1, [r5, #12]
   17ae6:	780b      	ldrb	r3, [r1, #0]
   17ae8:	2b5f      	cmp	r3, #95
   17aea:	d1a4      	bne.n	17a36 <d_type+0x33a>
   17aec:	1c4b      	adds	r3, r1, #1
   17aee:	60eb      	str	r3, [r5, #12]
   17af0:	4628      	mov	r0, r5
   17af2:	f7ff fe03 	bl	176fc <d_type>
   17af6:	2125      	movs	r1, #37
   17af8:	4603      	mov	r3, r0
   17afa:	4632      	mov	r2, r6
   17afc:	4628      	mov	r0, r5
   17afe:	f7ff fb89 	bl	17214 <d_make_comp>
   17b02:	9001      	str	r0, [sp, #4]
   17b04:	e6d2      	b.n	178ac <d_type+0x1b0>
   17b06:	4628      	mov	r0, r5
   17b08:	f000 fdb6 	bl	18678 <d_name>
   17b0c:	9001      	str	r0, [sp, #4]
   17b0e:	e6cd      	b.n	178ac <d_type+0x1b0>
   17b10:	2100      	movs	r1, #0
   17b12:	e6f6      	b.n	17902 <d_type+0x206>
   17b14:	4628      	mov	r0, r5
   17b16:	f7ff fdf1 	bl	176fc <d_type>
   17b1a:	6020      	str	r0, [r4, #0]
   17b1c:	2800      	cmp	r0, #0
   17b1e:	d08a      	beq.n	17a36 <d_type+0x33a>
   17b20:	456c      	cmp	r4, sp
   17b22:	d002      	beq.n	17b2a <d_type+0x42e>
   17b24:	7803      	ldrb	r3, [r0, #0]
   17b26:	2b24      	cmp	r3, #36
   17b28:	d121      	bne.n	17b6e <d_type+0x472>
   17b2a:	4628      	mov	r0, r5
   17b2c:	2126      	movs	r1, #38
   17b2e:	463a      	mov	r2, r7
   17b30:	9b00      	ldr	r3, [sp, #0]
   17b32:	f7ff fb6f 	bl	17214 <d_make_comp>
   17b36:	9001      	str	r0, [sp, #4]
   17b38:	e6b8      	b.n	178ac <d_type+0x1b0>
   17b3a:	2600      	movs	r6, #0
   17b3c:	e7d6      	b.n	17aec <d_type+0x3f0>
   17b3e:	4628      	mov	r0, r5
   17b40:	f000 fd9a 	bl	18678 <d_name>
   17b44:	2800      	cmp	r0, #0
   17b46:	f43f adf0 	beq.w	1772a <d_type+0x2e>
   17b4a:	7803      	ldrb	r3, [r0, #0]
   17b4c:	9001      	str	r0, [sp, #4]
   17b4e:	2b15      	cmp	r3, #21
   17b50:	f47f aeb0 	bne.w	178b4 <d_type+0x1b8>
   17b54:	9801      	ldr	r0, [sp, #4]
   17b56:	e5e9      	b.n	1772c <d_type+0x30>
   17b58:	4628      	mov	r0, r5
   17b5a:	f000 fca9 	bl	184b0 <d_expression>
   17b5e:	4606      	mov	r6, r0
   17b60:	2800      	cmp	r0, #0
   17b62:	d1bf      	bne.n	17ae4 <d_type+0x3e8>
   17b64:	2000      	movs	r0, #0
   17b66:	e767      	b.n	17a38 <d_type+0x33c>
   17b68:	1c53      	adds	r3, r2, #1
   17b6a:	60eb      	str	r3, [r5, #12]
   17b6c:	e779      	b.n	17a62 <d_type+0x366>
   17b6e:	9900      	ldr	r1, [sp, #0]
   17b70:	2900      	cmp	r1, #0
   17b72:	f43f af60 	beq.w	17a36 <d_type+0x33a>
   17b76:	6a2a      	ldr	r2, [r5, #32]
   17b78:	6a6b      	ldr	r3, [r5, #36]
   17b7a:	429a      	cmp	r2, r3
   17b7c:	f6bf af5b 	bge.w	17a36 <d_type+0x33a>
   17b80:	69eb      	ldr	r3, [r5, #28]
   17b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   17b86:	3201      	adds	r2, #1
   17b88:	622a      	str	r2, [r5, #32]
   17b8a:	e7ce      	b.n	17b2a <d_type+0x42e>
   17b8c:	00021468 	.word	0x00021468

00017b90 <d_operator_name>:
   17b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17b94:	68c2      	ldr	r2, [r0, #12]
   17b96:	4606      	mov	r6, r0
   17b98:	7814      	ldrb	r4, [r2, #0]
   17b9a:	2c00      	cmp	r4, #0
   17b9c:	d02a      	beq.n	17bf4 <d_operator_name+0x64>
   17b9e:	1c53      	adds	r3, r2, #1
   17ba0:	60c3      	str	r3, [r0, #12]
   17ba2:	7855      	ldrb	r5, [r2, #1]
   17ba4:	b10d      	cbz	r5, 17baa <d_operator_name+0x1a>
   17ba6:	3301      	adds	r3, #1
   17ba8:	60c3      	str	r3, [r0, #12]
   17baa:	2c76      	cmp	r4, #118
   17bac:	d143      	bne.n	17c36 <d_operator_name+0xa6>
   17bae:	f1a5 0730 	sub.w	r7, r5, #48	; 0x30
   17bb2:	b2fb      	uxtb	r3, r7
   17bb4:	2b09      	cmp	r3, #9
   17bb6:	d81e      	bhi.n	17bf6 <d_operator_name+0x66>
   17bb8:	4630      	mov	r0, r6
   17bba:	f7ff fd2d 	bl	17618 <d_source_name>
   17bbe:	6971      	ldr	r1, [r6, #20]
   17bc0:	69b3      	ldr	r3, [r6, #24]
   17bc2:	4604      	mov	r4, r0
   17bc4:	4299      	cmp	r1, r3
   17bc6:	da2f      	bge.n	17c28 <d_operator_name+0x98>
   17bc8:	008a      	lsls	r2, r1, #2
   17bca:	010b      	lsls	r3, r1, #4
   17bcc:	ebc2 0c03 	rsb	ip, r2, r3
   17bd0:	6932      	ldr	r2, [r6, #16]
   17bd2:	1c4b      	adds	r3, r1, #1
   17bd4:	eb12 000c 	adds.w	r0, r2, ip
   17bd8:	6173      	str	r3, [r6, #20]
   17bda:	bf14      	ite	ne
   17bdc:	2300      	movne	r3, #0
   17bde:	2301      	moveq	r3, #1
   17be0:	ea53 73d7 	orrs.w	r3, r3, r7, lsr #31
   17be4:	d120      	bne.n	17c28 <d_operator_name+0x98>
   17be6:	b1fc      	cbz	r4, 17c28 <d_operator_name+0x98>
   17be8:	232a      	movs	r3, #42
   17bea:	f802 300c 	strb.w	r3, [r2, ip]
   17bee:	6047      	str	r7, [r0, #4]
   17bf0:	6084      	str	r4, [r0, #8]
   17bf2:	e01a      	b.n	17c2a <d_operator_name+0x9a>
   17bf4:	4625      	mov	r5, r4
   17bf6:	4f24      	ldr	r7, [pc, #144]	(17c88 <d_operator_name+0xf8>)
   17bf8:	2000      	movs	r0, #0
   17bfa:	f04f 0c31 	mov.w	ip, #49	; 0x31
   17bfe:	ebc0 030c 	rsb	r3, r0, ip
   17c02:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   17c06:	eb00 0163 	add.w	r1, r0, r3, asr #1
   17c0a:	010a      	lsls	r2, r1, #4
   17c0c:	58bb      	ldr	r3, [r7, r2]
   17c0e:	eb07 0802 	add.w	r8, r7, r2
   17c12:	781a      	ldrb	r2, [r3, #0]
   17c14:	4294      	cmp	r4, r2
   17c16:	d10a      	bne.n	17c2e <d_operator_name+0x9e>
   17c18:	785b      	ldrb	r3, [r3, #1]
   17c1a:	429d      	cmp	r5, r3
   17c1c:	d020      	beq.n	17c60 <d_operator_name+0xd0>
   17c1e:	42ab      	cmp	r3, r5
   17c20:	d907      	bls.n	17c32 <d_operator_name+0xa2>
   17c22:	468c      	mov	ip, r1
   17c24:	4560      	cmp	r0, ip
   17c26:	d1ea      	bne.n	17bfe <d_operator_name+0x6e>
   17c28:	2000      	movs	r0, #0
   17c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17c2e:	42a2      	cmp	r2, r4
   17c30:	d8f7      	bhi.n	17c22 <d_operator_name+0x92>
   17c32:	1c48      	adds	r0, r1, #1
   17c34:	e7f6      	b.n	17c24 <d_operator_name+0x94>
   17c36:	2c63      	cmp	r4, #99
   17c38:	bf14      	ite	ne
   17c3a:	2300      	movne	r3, #0
   17c3c:	2301      	moveq	r3, #1
   17c3e:	2d76      	cmp	r5, #118
   17c40:	bf14      	ite	ne
   17c42:	2300      	movne	r3, #0
   17c44:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
   17c48:	2b00      	cmp	r3, #0
   17c4a:	d0d4      	beq.n	17bf6 <d_operator_name+0x66>
   17c4c:	4630      	mov	r0, r6
   17c4e:	f7ff fd55 	bl	176fc <d_type>
   17c52:	212b      	movs	r1, #43
   17c54:	4602      	mov	r2, r0
   17c56:	2300      	movs	r3, #0
   17c58:	4630      	mov	r0, r6
   17c5a:	f7ff fadb 	bl	17214 <d_make_comp>
   17c5e:	e7e4      	b.n	17c2a <d_operator_name+0x9a>
   17c60:	6971      	ldr	r1, [r6, #20]
   17c62:	69b3      	ldr	r3, [r6, #24]
   17c64:	4299      	cmp	r1, r3
   17c66:	dadf      	bge.n	17c28 <d_operator_name+0x98>
   17c68:	008b      	lsls	r3, r1, #2
   17c6a:	010a      	lsls	r2, r1, #4
   17c6c:	f8d6 c010 	ldr.w	ip, [r6, #16]
   17c70:	1ad2      	subs	r2, r2, r3
   17c72:	1c4b      	adds	r3, r1, #1
   17c74:	eb1c 0002 	adds.w	r0, ip, r2
   17c78:	6173      	str	r3, [r6, #20]
   17c7a:	d0d6      	beq.n	17c2a <d_operator_name+0x9a>
   17c7c:	2329      	movs	r3, #41
   17c7e:	f80c 3002 	strb.w	r3, [ip, r2]
   17c82:	f8c0 8004 	str.w	r8, [r0, #4]
   17c86:	e7d0      	b.n	17c2a <d_operator_name+0x9a>
   17c88:	00021e04 	.word	0x00021e04

00017c8c <d_unqualified_name>:
   17c8c:	b570      	push	{r4, r5, r6, lr}
   17c8e:	68c1      	ldr	r1, [r0, #12]
   17c90:	4604      	mov	r4, r0
   17c92:	780a      	ldrb	r2, [r1, #0]
   17c94:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   17c98:	b2db      	uxtb	r3, r3
   17c9a:	2b09      	cmp	r3, #9
   17c9c:	d927      	bls.n	17cee <d_unqualified_name+0x62>
   17c9e:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   17ca2:	b2db      	uxtb	r3, r3
   17ca4:	2b19      	cmp	r3, #25
   17ca6:	d914      	bls.n	17cd2 <d_unqualified_name+0x46>
   17ca8:	f1a2 0343 	sub.w	r3, r2, #67	; 0x43
   17cac:	b2db      	uxtb	r3, r3
   17cae:	2b01      	cmp	r3, #1
   17cb0:	d870      	bhi.n	17d94 <d_unqualified_name+0x108>
   17cb2:	6ac5      	ldr	r5, [r0, #44]
   17cb4:	b13d      	cbz	r5, 17cc6 <d_unqualified_name+0x3a>
   17cb6:	782b      	ldrb	r3, [r5, #0]
   17cb8:	2b00      	cmp	r3, #0
   17cba:	d11b      	bne.n	17cf4 <d_unqualified_name+0x68>
   17cbc:	68aa      	ldr	r2, [r5, #8]
   17cbe:	6b23      	ldr	r3, [r4, #48]
   17cc0:	189b      	adds	r3, r3, r2
   17cc2:	6323      	str	r3, [r4, #48]
   17cc4:	780a      	ldrb	r2, [r1, #0]
   17cc6:	2a43      	cmp	r2, #67
   17cc8:	d018      	beq.n	17cfc <d_unqualified_name+0x70>
   17cca:	2a44      	cmp	r2, #68
   17ccc:	d03c      	beq.n	17d48 <d_unqualified_name+0xbc>
   17cce:	2000      	movs	r0, #0
   17cd0:	bd70      	pop	{r4, r5, r6, pc}
   17cd2:	f7ff ff5d 	bl	17b90 <d_operator_name>
   17cd6:	2800      	cmp	r0, #0
   17cd8:	d0fa      	beq.n	17cd0 <d_unqualified_name+0x44>
   17cda:	7803      	ldrb	r3, [r0, #0]
   17cdc:	2b29      	cmp	r3, #41
   17cde:	d1f7      	bne.n	17cd0 <d_unqualified_name+0x44>
   17ce0:	6843      	ldr	r3, [r0, #4]
   17ce2:	6b22      	ldr	r2, [r4, #48]
   17ce4:	6899      	ldr	r1, [r3, #8]
   17ce6:	1852      	adds	r2, r2, r1
   17ce8:	3207      	adds	r2, #7
   17cea:	6322      	str	r2, [r4, #48]
   17cec:	e7f0      	b.n	17cd0 <d_unqualified_name+0x44>
   17cee:	f7ff fc93 	bl	17618 <d_source_name>
   17cf2:	e7ed      	b.n	17cd0 <d_unqualified_name+0x44>
   17cf4:	2b15      	cmp	r3, #21
   17cf6:	d0e1      	beq.n	17cbc <d_unqualified_name+0x30>
   17cf8:	2a43      	cmp	r2, #67
   17cfa:	d1e6      	bne.n	17cca <d_unqualified_name+0x3e>
   17cfc:	784b      	ldrb	r3, [r1, #1]
   17cfe:	2b32      	cmp	r3, #50
   17d00:	d05d      	beq.n	17dbe <d_unqualified_name+0x132>
   17d02:	2b33      	cmp	r3, #51
   17d04:	d059      	beq.n	17dba <d_unqualified_name+0x12e>
   17d06:	2b31      	cmp	r3, #49
   17d08:	d1e1      	bne.n	17cce <d_unqualified_name+0x42>
   17d0a:	2601      	movs	r6, #1
   17d0c:	1c8b      	adds	r3, r1, #2
   17d0e:	60e3      	str	r3, [r4, #12]
   17d10:	6961      	ldr	r1, [r4, #20]
   17d12:	69a3      	ldr	r3, [r4, #24]
   17d14:	4299      	cmp	r1, r3
   17d16:	dada      	bge.n	17cce <d_unqualified_name+0x42>
   17d18:	008a      	lsls	r2, r1, #2
   17d1a:	010b      	lsls	r3, r1, #4
   17d1c:	ebc2 0c03 	rsb	ip, r2, r3
   17d20:	6922      	ldr	r2, [r4, #16]
   17d22:	1c4b      	adds	r3, r1, #1
   17d24:	eb12 000c 	adds.w	r0, r2, ip
   17d28:	6163      	str	r3, [r4, #20]
   17d2a:	bf14      	ite	ne
   17d2c:	2300      	movne	r3, #0
   17d2e:	2301      	moveq	r3, #1
   17d30:	2d00      	cmp	r5, #0
   17d32:	bf08      	it	eq
   17d34:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   17d38:	2b00      	cmp	r3, #0
   17d3a:	d1c8      	bne.n	17cce <d_unqualified_name+0x42>
   17d3c:	3306      	adds	r3, #6
   17d3e:	f802 300c 	strb.w	r3, [r2, ip]
   17d42:	7106      	strb	r6, [r0, #4]
   17d44:	6085      	str	r5, [r0, #8]
   17d46:	e7c3      	b.n	17cd0 <d_unqualified_name+0x44>
   17d48:	784b      	ldrb	r3, [r1, #1]
   17d4a:	2b31      	cmp	r3, #49
   17d4c:	d033      	beq.n	17db6 <d_unqualified_name+0x12a>
   17d4e:	2b32      	cmp	r3, #50
   17d50:	d02f      	beq.n	17db2 <d_unqualified_name+0x126>
   17d52:	2b30      	cmp	r3, #48
   17d54:	d1bb      	bne.n	17cce <d_unqualified_name+0x42>
   17d56:	2601      	movs	r6, #1
   17d58:	1c8b      	adds	r3, r1, #2
   17d5a:	60e3      	str	r3, [r4, #12]
   17d5c:	6961      	ldr	r1, [r4, #20]
   17d5e:	69a3      	ldr	r3, [r4, #24]
   17d60:	4299      	cmp	r1, r3
   17d62:	dab4      	bge.n	17cce <d_unqualified_name+0x42>
   17d64:	008a      	lsls	r2, r1, #2
   17d66:	010b      	lsls	r3, r1, #4
   17d68:	ebc2 0c03 	rsb	ip, r2, r3
   17d6c:	6922      	ldr	r2, [r4, #16]
   17d6e:	1c4b      	adds	r3, r1, #1
   17d70:	eb12 000c 	adds.w	r0, r2, ip
   17d74:	6163      	str	r3, [r4, #20]
   17d76:	bf14      	ite	ne
   17d78:	2300      	movne	r3, #0
   17d7a:	2301      	moveq	r3, #1
   17d7c:	2d00      	cmp	r5, #0
   17d7e:	bf08      	it	eq
   17d80:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   17d84:	2b00      	cmp	r3, #0
   17d86:	d1a2      	bne.n	17cce <d_unqualified_name+0x42>
   17d88:	3307      	adds	r3, #7
   17d8a:	f802 300c 	strb.w	r3, [r2, ip]
   17d8e:	7106      	strb	r6, [r0, #4]
   17d90:	6085      	str	r5, [r0, #8]
   17d92:	e79d      	b.n	17cd0 <d_unqualified_name+0x44>
   17d94:	2a4c      	cmp	r2, #76
   17d96:	d19a      	bne.n	17cce <d_unqualified_name+0x42>
   17d98:	1c4b      	adds	r3, r1, #1
   17d9a:	60c3      	str	r3, [r0, #12]
   17d9c:	f7ff fc3c 	bl	17618 <d_source_name>
   17da0:	4605      	mov	r5, r0
   17da2:	2800      	cmp	r0, #0
   17da4:	d093      	beq.n	17cce <d_unqualified_name+0x42>
   17da6:	68e2      	ldr	r2, [r4, #12]
   17da8:	7813      	ldrb	r3, [r2, #0]
   17daa:	2b5f      	cmp	r3, #95
   17dac:	d009      	beq.n	17dc2 <d_unqualified_name+0x136>
   17dae:	4628      	mov	r0, r5
   17db0:	e78e      	b.n	17cd0 <d_unqualified_name+0x44>
   17db2:	2603      	movs	r6, #3
   17db4:	e7d0      	b.n	17d58 <d_unqualified_name+0xcc>
   17db6:	2602      	movs	r6, #2
   17db8:	e7ce      	b.n	17d58 <d_unqualified_name+0xcc>
   17dba:	2603      	movs	r6, #3
   17dbc:	e7a6      	b.n	17d0c <d_unqualified_name+0x80>
   17dbe:	2602      	movs	r6, #2
   17dc0:	e7a4      	b.n	17d0c <d_unqualified_name+0x80>
   17dc2:	1c53      	adds	r3, r2, #1
   17dc4:	60e3      	str	r3, [r4, #12]
   17dc6:	4620      	mov	r0, r4
   17dc8:	f7ff fa76 	bl	172b8 <d_number>
   17dcc:	2800      	cmp	r0, #0
   17dce:	f6ff af7e 	blt.w	17cce <d_unqualified_name+0x42>
   17dd2:	4628      	mov	r0, r5
   17dd4:	e77c      	b.n	17cd0 <d_unqualified_name+0x44>
   17dd6:	46c0      	nop			(mov r8, r8)

00017dd8 <d_bare_function_type>:
   17dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ddc:	460e      	mov	r6, r1
   17dde:	68c1      	ldr	r1, [r0, #12]
   17de0:	b082      	sub	sp, #8
   17de2:	780b      	ldrb	r3, [r1, #0]
   17de4:	4605      	mov	r5, r0
   17de6:	2b4a      	cmp	r3, #74
   17de8:	d035      	beq.n	17e56 <d_bare_function_type+0x7e>
   17dea:	2300      	movs	r3, #0
   17dec:	af02      	add	r7, sp, #8
   17dee:	f847 3d04 	str.w	r3, [r7, #-4]!
   17df2:	4698      	mov	r8, r3
   17df4:	e002      	b.n	17dfc <d_bare_function_type+0x24>
   17df6:	68e9      	ldr	r1, [r5, #12]
   17df8:	4626      	mov	r6, r4
   17dfa:	4680      	mov	r8, r0
   17dfc:	780a      	ldrb	r2, [r1, #0]
   17dfe:	2a45      	cmp	r2, #69
   17e00:	bf14      	ite	ne
   17e02:	2300      	movne	r3, #0
   17e04:	2301      	moveq	r3, #1
   17e06:	2a00      	cmp	r2, #0
   17e08:	bf14      	ite	ne
   17e0a:	461c      	movne	r4, r3
   17e0c:	f043 0401 	orreq.w	r4, r3, #1	; 0x1
   17e10:	b9ac      	cbnz	r4, 17e3e <d_bare_function_type+0x66>
   17e12:	4628      	mov	r0, r5
   17e14:	f7ff fc72 	bl	176fc <d_type>
   17e18:	4602      	mov	r2, r0
   17e1a:	b160      	cbz	r0, 17e36 <d_bare_function_type+0x5e>
   17e1c:	2e00      	cmp	r6, #0
   17e1e:	d1ea      	bne.n	17df6 <d_bare_function_type+0x1e>
   17e20:	4628      	mov	r0, r5
   17e22:	2127      	movs	r1, #39
   17e24:	4633      	mov	r3, r6
   17e26:	f7ff f9f5 	bl	17214 <d_make_comp>
   17e2a:	6038      	str	r0, [r7, #0]
   17e2c:	b118      	cbz	r0, 17e36 <d_bare_function_type+0x5e>
   17e2e:	f100 0708 	add.w	r7, r0, #8	; 0x8
   17e32:	68e9      	ldr	r1, [r5, #12]
   17e34:	e7e2      	b.n	17dfc <d_bare_function_type+0x24>
   17e36:	2000      	movs	r0, #0
   17e38:	b002      	add	sp, #8
   17e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17e3e:	9c01      	ldr	r4, [sp, #4]
   17e40:	2c00      	cmp	r4, #0
   17e42:	d0f8      	beq.n	17e36 <d_bare_function_type+0x5e>
   17e44:	68a1      	ldr	r1, [r4, #8]
   17e46:	b159      	cbz	r1, 17e60 <d_bare_function_type+0x88>
   17e48:	4628      	mov	r0, r5
   17e4a:	2124      	movs	r1, #36
   17e4c:	4642      	mov	r2, r8
   17e4e:	4623      	mov	r3, r4
   17e50:	f7ff f9e0 	bl	17214 <d_make_comp>
   17e54:	e7f0      	b.n	17e38 <d_bare_function_type+0x60>
   17e56:	1c4b      	adds	r3, r1, #1
   17e58:	60c3      	str	r3, [r0, #12]
   17e5a:	2601      	movs	r6, #1
   17e5c:	4619      	mov	r1, r3
   17e5e:	e7c4      	b.n	17dea <d_bare_function_type+0x12>
   17e60:	6862      	ldr	r2, [r4, #4]
   17e62:	7813      	ldrb	r3, [r2, #0]
   17e64:	2b22      	cmp	r3, #34
   17e66:	d1ef      	bne.n	17e48 <d_bare_function_type+0x70>
   17e68:	6852      	ldr	r2, [r2, #4]
   17e6a:	7c13      	ldrb	r3, [r2, #16]
   17e6c:	2b09      	cmp	r3, #9
   17e6e:	d1eb      	bne.n	17e48 <d_bare_function_type+0x70>
   17e70:	6b2b      	ldr	r3, [r5, #48]
   17e72:	6852      	ldr	r2, [r2, #4]
   17e74:	9101      	str	r1, [sp, #4]
   17e76:	1a9b      	subs	r3, r3, r2
   17e78:	632b      	str	r3, [r5, #48]
   17e7a:	460c      	mov	r4, r1
   17e7c:	e7e4      	b.n	17e48 <d_bare_function_type+0x70>
   17e7e:	46c0      	nop			(mov r8, r8)

00017e80 <d_encoding>:
   17e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17e84:	460d      	mov	r5, r1
   17e86:	68c1      	ldr	r1, [r0, #12]
   17e88:	4606      	mov	r6, r0
   17e8a:	780a      	ldrb	r2, [r1, #0]
   17e8c:	2a54      	cmp	r2, #84
   17e8e:	bf14      	ite	ne
   17e90:	2300      	movne	r3, #0
   17e92:	2301      	moveq	r3, #1
   17e94:	2a47      	cmp	r2, #71
   17e96:	bf08      	it	eq
   17e98:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   17e9c:	2b00      	cmp	r3, #0
   17e9e:	d14e      	bne.n	17f3e <d_encoding+0xbe>
   17ea0:	f000 fbea 	bl	18678 <d_name>
   17ea4:	1e2b      	subs	r3, r5, #0
   17ea6:	bf18      	it	ne
   17ea8:	2301      	movne	r3, #1
   17eaa:	2800      	cmp	r0, #0
   17eac:	bf0c      	ite	eq
   17eae:	2300      	moveq	r3, #0
   17eb0:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   17eb4:	4604      	mov	r4, r0
   17eb6:	bb0b      	cbnz	r3, 17efc <d_encoding+0x7c>
   17eb8:	68f2      	ldr	r2, [r6, #12]
   17eba:	7812      	ldrb	r2, [r2, #0]
   17ebc:	f1d2 0301 	rsbs	r3, r2, #1	; 0x1
   17ec0:	bf38      	it	cc
   17ec2:	2300      	movcc	r3, #0
   17ec4:	2c00      	cmp	r4, #0
   17ec6:	bf08      	it	eq
   17ec8:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   17ecc:	2b00      	cmp	r3, #0
   17ece:	d133      	bne.n	17f38 <d_encoding+0xb8>
   17ed0:	2a45      	cmp	r2, #69
   17ed2:	d031      	beq.n	17f38 <d_encoding+0xb8>
   17ed4:	4622      	mov	r2, r4
   17ed6:	7813      	ldrb	r3, [r2, #0]
   17ed8:	2b04      	cmp	r3, #4
   17eda:	f000 80cd 	beq.w	18078 <d_encoding+0x1f8>
   17ede:	d302      	bcc.n	17ee6 <d_encoding+0x66>
   17ee0:	3b19      	subs	r3, #25
   17ee2:	2b02      	cmp	r3, #2
   17ee4:	d94f      	bls.n	17f86 <d_encoding+0x106>
   17ee6:	2100      	movs	r1, #0
   17ee8:	4630      	mov	r0, r6
   17eea:	f7ff ff75 	bl	17dd8 <d_bare_function_type>
   17eee:	2103      	movs	r1, #3
   17ef0:	4603      	mov	r3, r0
   17ef2:	4622      	mov	r2, r4
   17ef4:	4630      	mov	r0, r6
   17ef6:	f7ff f98d 	bl	17214 <d_make_comp>
   17efa:	e01e      	b.n	17f3a <d_encoding+0xba>
   17efc:	68b3      	ldr	r3, [r6, #8]
   17efe:	f013 0f01 	tst.w	r3, #1	; 0x1
   17f02:	d1d9      	bne.n	17eb8 <d_encoding+0x38>
   17f04:	7822      	ldrb	r2, [r4, #0]
   17f06:	f1a2 0319 	sub.w	r3, r2, #25	; 0x19
   17f0a:	b2db      	uxtb	r3, r3
   17f0c:	2b02      	cmp	r3, #2
   17f0e:	d806      	bhi.n	17f1e <d_encoding+0x9e>
   17f10:	6864      	ldr	r4, [r4, #4]
   17f12:	7822      	ldrb	r2, [r4, #0]
   17f14:	f1a2 0319 	sub.w	r3, r2, #25	; 0x19
   17f18:	b2db      	uxtb	r3, r3
   17f1a:	2b02      	cmp	r3, #2
   17f1c:	d9f8      	bls.n	17f10 <d_encoding+0x90>
   17f1e:	2a02      	cmp	r2, #2
   17f20:	4620      	mov	r0, r4
   17f22:	d10a      	bne.n	17f3a <d_encoding+0xba>
   17f24:	68a2      	ldr	r2, [r4, #8]
   17f26:	e000      	b.n	17f2a <d_encoding+0xaa>
   17f28:	6852      	ldr	r2, [r2, #4]
   17f2a:	7813      	ldrb	r3, [r2, #0]
   17f2c:	3b19      	subs	r3, #25
   17f2e:	b2db      	uxtb	r3, r3
   17f30:	2b02      	cmp	r3, #2
   17f32:	d9f9      	bls.n	17f28 <d_encoding+0xa8>
   17f34:	60a2      	str	r2, [r4, #8]
   17f36:	e000      	b.n	17f3a <d_encoding+0xba>
   17f38:	4620      	mov	r0, r4
   17f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17f3e:	6b03      	ldr	r3, [r0, #48]
   17f40:	f103 0014 	add.w	r0, r3, #20	; 0x14
   17f44:	6330      	str	r0, [r6, #48]
   17f46:	780b      	ldrb	r3, [r1, #0]
   17f48:	2b54      	cmp	r3, #84
   17f4a:	d020      	beq.n	17f8e <d_encoding+0x10e>
   17f4c:	2b47      	cmp	r3, #71
   17f4e:	d001      	beq.n	17f54 <d_encoding+0xd4>
   17f50:	2000      	movs	r0, #0
   17f52:	e7f2      	b.n	17f3a <d_encoding+0xba>
   17f54:	1c4b      	adds	r3, r1, #1
   17f56:	60f3      	str	r3, [r6, #12]
   17f58:	784a      	ldrb	r2, [r1, #1]
   17f5a:	2a00      	cmp	r2, #0
   17f5c:	d0f8      	beq.n	17f50 <d_encoding+0xd0>
   17f5e:	3301      	adds	r3, #1
   17f60:	2a52      	cmp	r2, #82
   17f62:	60f3      	str	r3, [r6, #12]
   17f64:	f000 8189 	beq.w	1827a <d_encoding+0x3fa>
   17f68:	f200 8191 	bhi.w	1828e <d_encoding+0x40e>
   17f6c:	2a41      	cmp	r2, #65
   17f6e:	d1ef      	bne.n	17f50 <d_encoding+0xd0>
   17f70:	2100      	movs	r1, #0
   17f72:	4630      	mov	r0, r6
   17f74:	f7ff ff84 	bl	17e80 <d_encoding>
   17f78:	2114      	movs	r1, #20
   17f7a:	4602      	mov	r2, r0
   17f7c:	2300      	movs	r3, #0
   17f7e:	4630      	mov	r0, r6
   17f80:	f7ff f948 	bl	17214 <d_make_comp>
   17f84:	e7d9      	b.n	17f3a <d_encoding+0xba>
   17f86:	6852      	ldr	r2, [r2, #4]
   17f88:	2a00      	cmp	r2, #0
   17f8a:	d1a4      	bne.n	17ed6 <d_encoding+0x56>
   17f8c:	e7ab      	b.n	17ee6 <d_encoding+0x66>
   17f8e:	1c4a      	adds	r2, r1, #1
   17f90:	60f2      	str	r2, [r6, #12]
   17f92:	784b      	ldrb	r3, [r1, #1]
   17f94:	2b00      	cmp	r3, #0
   17f96:	d0db      	beq.n	17f50 <d_encoding+0xd0>
   17f98:	3201      	adds	r2, #1
   17f9a:	3b43      	subs	r3, #67
   17f9c:	60f2      	str	r2, [r6, #12]
   17f9e:	2b33      	cmp	r3, #51
   17fa0:	d8d6      	bhi.n	17f50 <d_encoding+0xd0>
   17fa2:	a101      	add	r1, pc, #4	(adr r1, 17fa8 <d_encoding+0x128>)
   17fa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   17fa8:	000181bd 	.word	0x000181bd
   17fac:	00017f51 	.word	0x00017f51
   17fb0:	00017f51 	.word	0x00017f51
   17fb4:	0001820d 	.word	0x0001820d
   17fb8:	00017f51 	.word	0x00017f51
   17fbc:	00017f51 	.word	0x00017f51
   17fc0:	000181f9 	.word	0x000181f9
   17fc4:	00018267 	.word	0x00018267
   17fc8:	00017f51 	.word	0x00017f51
   17fcc:	00017f51 	.word	0x00017f51
   17fd0:	00017f51 	.word	0x00017f51
   17fd4:	00017f51 	.word	0x00017f51
   17fd8:	00017f51 	.word	0x00017f51
   17fdc:	00017f51 	.word	0x00017f51
   17fe0:	00017f51 	.word	0x00017f51
   17fe4:	00017f51 	.word	0x00017f51
   17fe8:	00018253 	.word	0x00018253
   17fec:	00018239 	.word	0x00018239
   17ff0:	00017f51 	.word	0x00017f51
   17ff4:	00018221 	.word	0x00018221
   17ff8:	00017f51 	.word	0x00017f51
   17ffc:	00017f51 	.word	0x00017f51
   18000:	00017f51 	.word	0x00017f51
   18004:	00017f51 	.word	0x00017f51
   18008:	00017f51 	.word	0x00017f51
   1800c:	00017f51 	.word	0x00017f51
   18010:	00017f51 	.word	0x00017f51
   18014:	00017f51 	.word	0x00017f51
   18018:	00017f51 	.word	0x00017f51
   1801c:	00017f51 	.word	0x00017f51
   18020:	00017f51 	.word	0x00017f51
   18024:	00017f51 	.word	0x00017f51
   18028:	00018167 	.word	0x00018167
   1802c:	00017f51 	.word	0x00017f51
   18030:	00017f51 	.word	0x00017f51
   18034:	00017f51 	.word	0x00017f51
   18038:	00017f51 	.word	0x00017f51
   1803c:	00018143 	.word	0x00018143
   18040:	00017f51 	.word	0x00017f51
   18044:	00017f51 	.word	0x00017f51
   18048:	00017f51 	.word	0x00017f51
   1804c:	00017f51 	.word	0x00017f51
   18050:	00017f51 	.word	0x00017f51
   18054:	00017f51 	.word	0x00017f51
   18058:	00017f51 	.word	0x00017f51
   1805c:	00017f51 	.word	0x00017f51
   18060:	00017f51 	.word	0x00017f51
   18064:	00017f51 	.word	0x00017f51
   18068:	00017f51 	.word	0x00017f51
   1806c:	00017f51 	.word	0x00017f51
   18070:	00017f51 	.word	0x00017f51
   18074:	00018199 	.word	0x00018199
   18078:	6852      	ldr	r2, [r2, #4]
   1807a:	2a00      	cmp	r2, #0
   1807c:	d05f      	beq.n	1813e <d_encoding+0x2be>
   1807e:	7813      	ldrb	r3, [r2, #0]
   18080:	3b01      	subs	r3, #1
   18082:	2b2a      	cmp	r3, #42
   18084:	d85b      	bhi.n	1813e <d_encoding+0x2be>
   18086:	a101      	add	r1, pc, #4	(adr r1, 1808c <d_encoding+0x20c>)
   18088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1808c:	00018139 	.word	0x00018139
   18090:	00018139 	.word	0x00018139
   18094:	0001813f 	.word	0x0001813f
   18098:	0001813f 	.word	0x0001813f
   1809c:	0001813f 	.word	0x0001813f
   180a0:	00017ee7 	.word	0x00017ee7
   180a4:	00017ee7 	.word	0x00017ee7
   180a8:	0001813f 	.word	0x0001813f
   180ac:	0001813f 	.word	0x0001813f
   180b0:	0001813f 	.word	0x0001813f
   180b4:	0001813f 	.word	0x0001813f
   180b8:	0001813f 	.word	0x0001813f
   180bc:	0001813f 	.word	0x0001813f
   180c0:	0001813f 	.word	0x0001813f
   180c4:	0001813f 	.word	0x0001813f
   180c8:	0001813f 	.word	0x0001813f
   180cc:	0001813f 	.word	0x0001813f
   180d0:	0001813f 	.word	0x0001813f
   180d4:	0001813f 	.word	0x0001813f
   180d8:	0001813f 	.word	0x0001813f
   180dc:	0001813f 	.word	0x0001813f
   180e0:	0001813f 	.word	0x0001813f
   180e4:	0001813f 	.word	0x0001813f
   180e8:	0001813f 	.word	0x0001813f
   180ec:	0001813f 	.word	0x0001813f
   180f0:	0001813f 	.word	0x0001813f
   180f4:	0001813f 	.word	0x0001813f
   180f8:	0001813f 	.word	0x0001813f
   180fc:	0001813f 	.word	0x0001813f
   18100:	0001813f 	.word	0x0001813f
   18104:	0001813f 	.word	0x0001813f
   18108:	0001813f 	.word	0x0001813f
   1810c:	0001813f 	.word	0x0001813f
   18110:	0001813f 	.word	0x0001813f
   18114:	0001813f 	.word	0x0001813f
   18118:	0001813f 	.word	0x0001813f
   1811c:	0001813f 	.word	0x0001813f
   18120:	0001813f 	.word	0x0001813f
   18124:	0001813f 	.word	0x0001813f
   18128:	0001813f 	.word	0x0001813f
   1812c:	0001813f 	.word	0x0001813f
   18130:	0001813f 	.word	0x0001813f
   18134:	00017ee7 	.word	0x00017ee7
   18138:	6892      	ldr	r2, [r2, #8]
   1813a:	2a00      	cmp	r2, #0
   1813c:	d19f      	bne.n	1807e <d_encoding+0x1fe>
   1813e:	2101      	movs	r1, #1
   18140:	e6d2      	b.n	17ee8 <d_encoding+0x68>
   18142:	4630      	mov	r0, r6
   18144:	2168      	movs	r1, #104
   18146:	f7ff f8e3 	bl	17310 <d_call_offset>
   1814a:	2800      	cmp	r0, #0
   1814c:	f43f af00 	beq.w	17f50 <d_encoding+0xd0>
   18150:	2100      	movs	r1, #0
   18152:	4630      	mov	r0, r6
   18154:	f7ff fe94 	bl	17e80 <d_encoding>
   18158:	210e      	movs	r1, #14
   1815a:	4602      	mov	r2, r0
   1815c:	2300      	movs	r3, #0
   1815e:	4630      	mov	r0, r6
   18160:	f7ff f858 	bl	17214 <d_make_comp>
   18164:	e6e9      	b.n	17f3a <d_encoding+0xba>
   18166:	4630      	mov	r0, r6
   18168:	2100      	movs	r1, #0
   1816a:	f7ff f8d1 	bl	17310 <d_call_offset>
   1816e:	2800      	cmp	r0, #0
   18170:	f43f aeee 	beq.w	17f50 <d_encoding+0xd0>
   18174:	4630      	mov	r0, r6
   18176:	2100      	movs	r1, #0
   18178:	f7ff f8ca 	bl	17310 <d_call_offset>
   1817c:	2800      	cmp	r0, #0
   1817e:	f43f aee7 	beq.w	17f50 <d_encoding+0xd0>
   18182:	2100      	movs	r1, #0
   18184:	4630      	mov	r0, r6
   18186:	f7ff fe7b 	bl	17e80 <d_encoding>
   1818a:	2110      	movs	r1, #16
   1818c:	4602      	mov	r2, r0
   1818e:	2300      	movs	r3, #0
   18190:	4630      	mov	r0, r6
   18192:	f7ff f83f 	bl	17214 <d_make_comp>
   18196:	e6d0      	b.n	17f3a <d_encoding+0xba>
   18198:	4630      	mov	r0, r6
   1819a:	2176      	movs	r1, #118
   1819c:	f7ff f8b8 	bl	17310 <d_call_offset>
   181a0:	2800      	cmp	r0, #0
   181a2:	f43f aed5 	beq.w	17f50 <d_encoding+0xd0>
   181a6:	2100      	movs	r1, #0
   181a8:	4630      	mov	r0, r6
   181aa:	f7ff fe69 	bl	17e80 <d_encoding>
   181ae:	210f      	movs	r1, #15
   181b0:	4602      	mov	r2, r0
   181b2:	2300      	movs	r3, #0
   181b4:	4630      	mov	r0, r6
   181b6:	f7ff f82d 	bl	17214 <d_make_comp>
   181ba:	e6be      	b.n	17f3a <d_encoding+0xba>
   181bc:	4630      	mov	r0, r6
   181be:	f7ff fa9d 	bl	176fc <d_type>
   181c2:	4604      	mov	r4, r0
   181c4:	4630      	mov	r0, r6
   181c6:	f7ff f877 	bl	172b8 <d_number>
   181ca:	2800      	cmp	r0, #0
   181cc:	f6ff aec0 	blt.w	17f50 <d_encoding+0xd0>
   181d0:	68f2      	ldr	r2, [r6, #12]
   181d2:	7813      	ldrb	r3, [r2, #0]
   181d4:	2b5f      	cmp	r3, #95
   181d6:	f47f aebb 	bne.w	17f50 <d_encoding+0xd0>
   181da:	1c53      	adds	r3, r2, #1
   181dc:	60f3      	str	r3, [r6, #12]
   181de:	4630      	mov	r0, r6
   181e0:	f7ff fa8c 	bl	176fc <d_type>
   181e4:	6b33      	ldr	r3, [r6, #48]
   181e6:	4602      	mov	r2, r0
   181e8:	3305      	adds	r3, #5
   181ea:	6333      	str	r3, [r6, #48]
   181ec:	4630      	mov	r0, r6
   181ee:	210a      	movs	r1, #10
   181f0:	4623      	mov	r3, r4
   181f2:	f7ff f80f 	bl	17214 <d_make_comp>
   181f6:	e6a0      	b.n	17f3a <d_encoding+0xba>
   181f8:	4630      	mov	r0, r6
   181fa:	f7ff fa7f 	bl	176fc <d_type>
   181fe:	210b      	movs	r1, #11
   18200:	4602      	mov	r2, r0
   18202:	2300      	movs	r3, #0
   18204:	4630      	mov	r0, r6
   18206:	f7ff f805 	bl	17214 <d_make_comp>
   1820a:	e696      	b.n	17f3a <d_encoding+0xba>
   1820c:	4630      	mov	r0, r6
   1820e:	f7ff fa75 	bl	176fc <d_type>
   18212:	210d      	movs	r1, #13
   18214:	4602      	mov	r2, r0
   18216:	2300      	movs	r3, #0
   18218:	4630      	mov	r0, r6
   1821a:	f7fe fffb 	bl	17214 <d_make_comp>
   1821e:	e68c      	b.n	17f3a <d_encoding+0xba>
   18220:	1f43      	subs	r3, r0, #5
   18222:	6333      	str	r3, [r6, #48]
   18224:	4630      	mov	r0, r6
   18226:	f7ff fa69 	bl	176fc <d_type>
   1822a:	2108      	movs	r1, #8
   1822c:	4602      	mov	r2, r0
   1822e:	2300      	movs	r3, #0
   18230:	4630      	mov	r0, r6
   18232:	f7fe ffef 	bl	17214 <d_make_comp>
   18236:	e680      	b.n	17f3a <d_encoding+0xba>
   18238:	f1a0 030a 	sub.w	r3, r0, #10	; 0xa
   1823c:	6333      	str	r3, [r6, #48]
   1823e:	4630      	mov	r0, r6
   18240:	f7ff fa5c 	bl	176fc <d_type>
   18244:	2109      	movs	r1, #9
   18246:	4602      	mov	r2, r0
   18248:	2300      	movs	r3, #0
   1824a:	4630      	mov	r0, r6
   1824c:	f7fe ffe2 	bl	17214 <d_make_comp>
   18250:	e673      	b.n	17f3a <d_encoding+0xba>
   18252:	4630      	mov	r0, r6
   18254:	f7ff fa52 	bl	176fc <d_type>
   18258:	210c      	movs	r1, #12
   1825a:	4602      	mov	r2, r0
   1825c:	2300      	movs	r3, #0
   1825e:	4630      	mov	r0, r6
   18260:	f7fe ffd8 	bl	17214 <d_make_comp>
   18264:	e669      	b.n	17f3a <d_encoding+0xba>
   18266:	4630      	mov	r0, r6
   18268:	f7ff fa48 	bl	176fc <d_type>
   1826c:	2111      	movs	r1, #17
   1826e:	4602      	mov	r2, r0
   18270:	2300      	movs	r3, #0
   18272:	4630      	mov	r0, r6
   18274:	f7fe ffce 	bl	17214 <d_make_comp>
   18278:	e65f      	b.n	17f3a <d_encoding+0xba>
   1827a:	4630      	mov	r0, r6
   1827c:	f000 f9fc 	bl	18678 <d_name>
   18280:	2113      	movs	r1, #19
   18282:	4602      	mov	r2, r0
   18284:	2300      	movs	r3, #0
   18286:	4630      	mov	r0, r6
   18288:	f7fe ffc4 	bl	17214 <d_make_comp>
   1828c:	e655      	b.n	17f3a <d_encoding+0xba>
   1828e:	2a56      	cmp	r2, #86
   18290:	d04f      	beq.n	18332 <d_encoding+0x4b2>
   18292:	2a72      	cmp	r2, #114
   18294:	f47f ae5c 	bne.w	17f50 <d_encoding+0xd0>
   18298:	4630      	mov	r0, r6
   1829a:	f7ff f80d 	bl	172b8 <d_number>
   1829e:	2801      	cmp	r0, #1
   182a0:	f77f ae56 	ble.w	17f50 <d_encoding+0xd0>
   182a4:	68f3      	ldr	r3, [r6, #12]
   182a6:	781a      	ldrb	r2, [r3, #0]
   182a8:	2a00      	cmp	r2, #0
   182aa:	f43f ae51 	beq.w	17f50 <d_encoding+0xd0>
   182ae:	1c5d      	adds	r5, r3, #1
   182b0:	2a5f      	cmp	r2, #95
   182b2:	60f5      	str	r5, [r6, #12]
   182b4:	f47f ae4c 	bne.w	17f50 <d_encoding+0xd0>
   182b8:	f04f 0800 	mov.w	r8, #0	; 0x0
   182bc:	1e47      	subs	r7, r0, #1
   182be:	46c2      	mov	sl, r8
   182c0:	f04f 0936 	mov.w	r9, #54	; 0x36
   182c4:	782b      	ldrb	r3, [r5, #0]
   182c6:	2b00      	cmp	r3, #0
   182c8:	f43f ae42 	beq.w	17f50 <d_encoding+0xd0>
   182cc:	2b24      	cmp	r3, #36
   182ce:	d054      	beq.n	1837a <d_encoding+0x4fa>
   182d0:	2f01      	cmp	r7, #1
   182d2:	dd4f      	ble.n	18374 <d_encoding+0x4f4>
   182d4:	786b      	ldrb	r3, [r5, #1]
   182d6:	2b00      	cmp	r3, #0
   182d8:	d04c      	beq.n	18374 <d_encoding+0x4f4>
   182da:	f04f 0c01 	mov.w	ip, #1	; 0x1
   182de:	e007      	b.n	182f0 <d_encoding+0x470>
   182e0:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   182e4:	45bc      	cmp	ip, r7
   182e6:	da05      	bge.n	182f4 <d_encoding+0x474>
   182e8:	f815 300c 	ldrb.w	r3, [r5, ip]
   182ec:	46e6      	mov	lr, ip
   182ee:	b113      	cbz	r3, 182f6 <d_encoding+0x476>
   182f0:	2b24      	cmp	r3, #36
   182f2:	d1f5      	bne.n	182e0 <d_encoding+0x460>
   182f4:	46e6      	mov	lr, ip
   182f6:	6970      	ldr	r0, [r6, #20]
   182f8:	69b3      	ldr	r3, [r6, #24]
   182fa:	4298      	cmp	r0, r3
   182fc:	da35      	bge.n	1836a <d_encoding+0x4ea>
   182fe:	0083      	lsls	r3, r0, #2
   18300:	0102      	lsls	r2, r0, #4
   18302:	6931      	ldr	r1, [r6, #16]
   18304:	1ad2      	subs	r2, r2, r3
   18306:	1c43      	adds	r3, r0, #1
   18308:	188c      	adds	r4, r1, r2
   1830a:	6173      	str	r3, [r6, #20]
   1830c:	d02d      	beq.n	1836a <d_encoding+0x4ea>
   1830e:	6065      	str	r5, [r4, #4]
   18310:	f8c4 c008 	str.w	ip, [r4, #8]
   18314:	68f3      	ldr	r3, [r6, #12]
   18316:	f801 a002 	strb.w	sl, [r1, r2]
   1831a:	eb03 050e 	add.w	r5, r3, lr
   1831e:	60f5      	str	r5, [r6, #12]
   18320:	ebcc 0707 	rsb	r7, ip, r7
   18324:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   18328:	d114      	bne.n	18354 <d_encoding+0x4d4>
   1832a:	2f00      	cmp	r7, #0
   1832c:	dd0b      	ble.n	18346 <d_encoding+0x4c6>
   1832e:	46a0      	mov	r8, r4
   18330:	e7c8      	b.n	182c4 <d_encoding+0x444>
   18332:	4630      	mov	r0, r6
   18334:	f000 f9a0 	bl	18678 <d_name>
   18338:	2112      	movs	r1, #18
   1833a:	4602      	mov	r2, r0
   1833c:	2300      	movs	r3, #0
   1833e:	4630      	mov	r0, r6
   18340:	f7fe ff68 	bl	17214 <d_make_comp>
   18344:	e5f9      	b.n	17f3a <d_encoding+0xba>
   18346:	4630      	mov	r0, r6
   18348:	2134      	movs	r1, #52
   1834a:	4622      	mov	r2, r4
   1834c:	2300      	movs	r3, #0
   1834e:	f7fe ff61 	bl	17214 <d_make_comp>
   18352:	e5f2      	b.n	17f3a <d_encoding+0xba>
   18354:	4623      	mov	r3, r4
   18356:	4630      	mov	r0, r6
   18358:	2135      	movs	r1, #53
   1835a:	4642      	mov	r2, r8
   1835c:	f7fe ff5a 	bl	17214 <d_make_comp>
   18360:	4604      	mov	r4, r0
   18362:	2800      	cmp	r0, #0
   18364:	d1e1      	bne.n	1832a <d_encoding+0x4aa>
   18366:	2000      	movs	r0, #0
   18368:	e5e7      	b.n	17f3a <d_encoding+0xba>
   1836a:	68f3      	ldr	r3, [r6, #12]
   1836c:	2000      	movs	r0, #0
   1836e:	4473      	add	r3, lr
   18370:	60f3      	str	r3, [r6, #12]
   18372:	e5e2      	b.n	17f3a <d_encoding+0xba>
   18374:	f04f 0c01 	mov.w	ip, #1	; 0x1
   18378:	e7bc      	b.n	182f4 <d_encoding+0x474>
   1837a:	786b      	ldrb	r3, [r5, #1]
   1837c:	2b53      	cmp	r3, #83
   1837e:	d01a      	beq.n	183b6 <d_encoding+0x536>
   18380:	2b5f      	cmp	r3, #95
   18382:	d020      	beq.n	183c6 <d_encoding+0x546>
   18384:	2b24      	cmp	r3, #36
   18386:	f47f ade3 	bne.w	17f50 <d_encoding+0xd0>
   1838a:	469c      	mov	ip, r3
   1838c:	6970      	ldr	r0, [r6, #20]
   1838e:	69b3      	ldr	r3, [r6, #24]
   18390:	4298      	cmp	r0, r3
   18392:	da13      	bge.n	183bc <d_encoding+0x53c>
   18394:	0083      	lsls	r3, r0, #2
   18396:	0102      	lsls	r2, r0, #4
   18398:	6931      	ldr	r1, [r6, #16]
   1839a:	1ad2      	subs	r2, r2, r3
   1839c:	1c43      	adds	r3, r0, #1
   1839e:	188c      	adds	r4, r1, r2
   183a0:	6173      	str	r3, [r6, #20]
   183a2:	d00b      	beq.n	183bc <d_encoding+0x53c>
   183a4:	f8c4 c004 	str.w	ip, [r4, #4]
   183a8:	68f3      	ldr	r3, [r6, #12]
   183aa:	f801 9002 	strb.w	r9, [r1, r2]
   183ae:	1c9d      	adds	r5, r3, #2
   183b0:	60f5      	str	r5, [r6, #12]
   183b2:	3f02      	subs	r7, #2
   183b4:	e7b6      	b.n	18324 <d_encoding+0x4a4>
   183b6:	f04f 0c2f 	mov.w	ip, #47	; 0x2f
   183ba:	e7e7      	b.n	1838c <d_encoding+0x50c>
   183bc:	68f3      	ldr	r3, [r6, #12]
   183be:	2000      	movs	r0, #0
   183c0:	3302      	adds	r3, #2
   183c2:	60f3      	str	r3, [r6, #12]
   183c4:	e5b9      	b.n	17f3a <d_encoding+0xba>
   183c6:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
   183ca:	e7df      	b.n	1838c <d_encoding+0x50c>

000183cc <d_expr_primary>:
   183cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   183ce:	68c2      	ldr	r2, [r0, #12]
   183d0:	b081      	sub	sp, #4
   183d2:	7813      	ldrb	r3, [r2, #0]
   183d4:	4604      	mov	r4, r0
   183d6:	2b4c      	cmp	r3, #76
   183d8:	d002      	beq.n	183e0 <d_expr_primary+0x14>
   183da:	2000      	movs	r0, #0
   183dc:	b001      	add	sp, #4
   183de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   183e0:	1c51      	adds	r1, r2, #1
   183e2:	60c1      	str	r1, [r0, #12]
   183e4:	7853      	ldrb	r3, [r2, #1]
   183e6:	2b5f      	cmp	r3, #95
   183e8:	d029      	beq.n	1843e <d_expr_primary+0x72>
   183ea:	f7ff f987 	bl	176fc <d_type>
   183ee:	4606      	mov	r6, r0
   183f0:	2800      	cmp	r0, #0
   183f2:	d0f2      	beq.n	183da <d_expr_primary+0xe>
   183f4:	7803      	ldrb	r3, [r0, #0]
   183f6:	2b22      	cmp	r3, #34
   183f8:	d036      	beq.n	18468 <d_expr_primary+0x9c>
   183fa:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   183fe:	f89c 3000 	ldrb.w	r3, [ip]
   18402:	2b6e      	cmp	r3, #110
   18404:	d028      	beq.n	18458 <d_expr_primary+0x8c>
   18406:	2732      	movs	r7, #50
   18408:	2b45      	cmp	r3, #69
   1840a:	d04f      	beq.n	184ac <d_expr_primary+0xe0>
   1840c:	2b00      	cmp	r3, #0
   1840e:	d0e4      	beq.n	183da <d_expr_primary+0xe>
   18410:	4663      	mov	r3, ip
   18412:	e001      	b.n	18418 <d_expr_primary+0x4c>
   18414:	2a00      	cmp	r2, #0
   18416:	d0e0      	beq.n	183da <d_expr_primary+0xe>
   18418:	3301      	adds	r3, #1
   1841a:	60e3      	str	r3, [r4, #12]
   1841c:	781a      	ldrb	r2, [r3, #0]
   1841e:	2a45      	cmp	r2, #69
   18420:	d1f8      	bne.n	18414 <d_expr_primary+0x48>
   18422:	ebcc 0103 	rsb	r1, ip, r3
   18426:	6960      	ldr	r0, [r4, #20]
   18428:	69a3      	ldr	r3, [r4, #24]
   1842a:	4298      	cmp	r0, r3
   1842c:	db25      	blt.n	1847a <d_expr_primary+0xae>
   1842e:	2500      	movs	r5, #0
   18430:	4620      	mov	r0, r4
   18432:	4639      	mov	r1, r7
   18434:	4632      	mov	r2, r6
   18436:	462b      	mov	r3, r5
   18438:	f7fe feec 	bl	17214 <d_make_comp>
   1843c:	e005      	b.n	1844a <d_expr_primary+0x7e>
   1843e:	1c4a      	adds	r2, r1, #1
   18440:	60c2      	str	r2, [r0, #12]
   18442:	784b      	ldrb	r3, [r1, #1]
   18444:	2b5a      	cmp	r3, #90
   18446:	d02b      	beq.n	184a0 <d_expr_primary+0xd4>
   18448:	2000      	movs	r0, #0
   1844a:	68e2      	ldr	r2, [r4, #12]
   1844c:	7813      	ldrb	r3, [r2, #0]
   1844e:	2b45      	cmp	r3, #69
   18450:	d1c3      	bne.n	183da <d_expr_primary+0xe>
   18452:	1c53      	adds	r3, r2, #1
   18454:	60e3      	str	r3, [r4, #12]
   18456:	e7c1      	b.n	183dc <d_expr_primary+0x10>
   18458:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   1845c:	f8c4 c00c 	str.w	ip, [r4, #12]
   18460:	f89c 3000 	ldrb.w	r3, [ip]
   18464:	2733      	movs	r7, #51
   18466:	e7cf      	b.n	18408 <d_expr_primary+0x3c>
   18468:	6842      	ldr	r2, [r0, #4]
   1846a:	7c13      	ldrb	r3, [r2, #16]
   1846c:	2b00      	cmp	r3, #0
   1846e:	d0c4      	beq.n	183fa <d_expr_primary+0x2e>
   18470:	6b23      	ldr	r3, [r4, #48]
   18472:	6852      	ldr	r2, [r2, #4]
   18474:	1a9b      	subs	r3, r3, r2
   18476:	6323      	str	r3, [r4, #48]
   18478:	e7bf      	b.n	183fa <d_expr_primary+0x2e>
   1847a:	0083      	lsls	r3, r0, #2
   1847c:	0102      	lsls	r2, r0, #4
   1847e:	f8d4 e010 	ldr.w	lr, [r4, #16]
   18482:	1ad2      	subs	r2, r2, r3
   18484:	1c43      	adds	r3, r0, #1
   18486:	eb1e 0502 	adds.w	r5, lr, r2
   1848a:	6163      	str	r3, [r4, #20]
   1848c:	d0cf      	beq.n	1842e <d_expr_primary+0x62>
   1848e:	2900      	cmp	r1, #0
   18490:	d0cd      	beq.n	1842e <d_expr_primary+0x62>
   18492:	2300      	movs	r3, #0
   18494:	f80e 3002 	strb.w	r3, [lr, r2]
   18498:	f8c5 c004 	str.w	ip, [r5, #4]
   1849c:	60a9      	str	r1, [r5, #8]
   1849e:	e7c7      	b.n	18430 <d_expr_primary+0x64>
   184a0:	1c53      	adds	r3, r2, #1
   184a2:	60c3      	str	r3, [r0, #12]
   184a4:	2100      	movs	r1, #0
   184a6:	f7ff fceb 	bl	17e80 <d_encoding>
   184aa:	e7ce      	b.n	1844a <d_expr_primary+0x7e>
   184ac:	2100      	movs	r1, #0
   184ae:	e7ba      	b.n	18426 <d_expr_primary+0x5a>

000184b0 <d_expression>:
   184b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   184b2:	68c2      	ldr	r2, [r0, #12]
   184b4:	b081      	sub	sp, #4
   184b6:	7813      	ldrb	r3, [r2, #0]
   184b8:	4606      	mov	r6, r0
   184ba:	2b4c      	cmp	r3, #76
   184bc:	d03a      	beq.n	18534 <d_expression+0x84>
   184be:	2b54      	cmp	r3, #84
   184c0:	d03b      	beq.n	1853a <d_expression+0x8a>
   184c2:	2b73      	cmp	r3, #115
   184c4:	d102      	bne.n	184cc <d_expression+0x1c>
   184c6:	7853      	ldrb	r3, [r2, #1]
   184c8:	2b72      	cmp	r3, #114
   184ca:	d039      	beq.n	18540 <d_expression+0x90>
   184cc:	4630      	mov	r0, r6
   184ce:	f7ff fb5f 	bl	17b90 <d_operator_name>
   184d2:	4607      	mov	r7, r0
   184d4:	b180      	cbz	r0, 184f8 <d_expression+0x48>
   184d6:	7803      	ldrb	r3, [r0, #0]
   184d8:	2b29      	cmp	r3, #41
   184da:	d010      	beq.n	184fe <d_expression+0x4e>
   184dc:	2b2a      	cmp	r3, #42
   184de:	d043      	beq.n	18568 <d_expression+0xb8>
   184e0:	2b2b      	cmp	r3, #43
   184e2:	d023      	beq.n	1852c <d_expression+0x7c>
   184e4:	2b29      	cmp	r3, #41
   184e6:	d107      	bne.n	184f8 <d_expression+0x48>
   184e8:	6844      	ldr	r4, [r0, #4]
   184ea:	68e0      	ldr	r0, [r4, #12]
   184ec:	2802      	cmp	r0, #2
   184ee:	d05b      	beq.n	185a8 <d_expression+0xf8>
   184f0:	2803      	cmp	r0, #3
   184f2:	d03b      	beq.n	1856c <d_expression+0xbc>
   184f4:	2801      	cmp	r0, #1
   184f6:	d019      	beq.n	1852c <d_expression+0x7c>
   184f8:	2000      	movs	r0, #0
   184fa:	b001      	add	sp, #4
   184fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   184fe:	6841      	ldr	r1, [r0, #4]
   18500:	6b33      	ldr	r3, [r6, #48]
   18502:	688a      	ldr	r2, [r1, #8]
   18504:	493a      	ldr	r1, [pc, #232]	(185f0 <d_expression+0x140>)
   18506:	189b      	adds	r3, r3, r2
   18508:	3b02      	subs	r3, #2
   1850a:	6333      	str	r3, [r6, #48]
   1850c:	6844      	ldr	r4, [r0, #4]
   1850e:	6820      	ldr	r0, [r4, #0]
   18510:	f008 fb84 	bl	20c1c <strcmp>
   18514:	2800      	cmp	r0, #0
   18516:	d1e8      	bne.n	184ea <d_expression+0x3a>
   18518:	4630      	mov	r0, r6
   1851a:	f7ff f8ef 	bl	176fc <d_type>
   1851e:	4603      	mov	r3, r0
   18520:	212c      	movs	r1, #44
   18522:	4630      	mov	r0, r6
   18524:	463a      	mov	r2, r7
   18526:	f7fe fe75 	bl	17214 <d_make_comp>
   1852a:	e7e6      	b.n	184fa <d_expression+0x4a>
   1852c:	4630      	mov	r0, r6
   1852e:	f7ff ffbf 	bl	184b0 <d_expression>
   18532:	e7f4      	b.n	1851e <d_expression+0x6e>
   18534:	f7ff ff4a 	bl	183cc <d_expr_primary>
   18538:	e7df      	b.n	184fa <d_expression+0x4a>
   1853a:	f7fe ff51 	bl	173e0 <d_template_param>
   1853e:	e7dc      	b.n	184fa <d_expression+0x4a>
   18540:	1c93      	adds	r3, r2, #2
   18542:	60c3      	str	r3, [r0, #12]
   18544:	f7ff f8da 	bl	176fc <d_type>
   18548:	4605      	mov	r5, r0
   1854a:	4630      	mov	r0, r6
   1854c:	f7ff fb9e 	bl	17c8c <d_unqualified_name>
   18550:	68f3      	ldr	r3, [r6, #12]
   18552:	4604      	mov	r4, r0
   18554:	781a      	ldrb	r2, [r3, #0]
   18556:	2a49      	cmp	r2, #73
   18558:	d03a      	beq.n	185d0 <d_expression+0x120>
   1855a:	4630      	mov	r0, r6
   1855c:	2101      	movs	r1, #1
   1855e:	462a      	mov	r2, r5
   18560:	4623      	mov	r3, r4
   18562:	f7fe fe57 	bl	17214 <d_make_comp>
   18566:	e7c8      	b.n	184fa <d_expression+0x4a>
   18568:	6840      	ldr	r0, [r0, #4]
   1856a:	e7bf      	b.n	184ec <d_expression+0x3c>
   1856c:	4630      	mov	r0, r6
   1856e:	f7ff ff9f 	bl	184b0 <d_expression>
   18572:	4605      	mov	r5, r0
   18574:	4630      	mov	r0, r6
   18576:	f7ff ff9b 	bl	184b0 <d_expression>
   1857a:	4604      	mov	r4, r0
   1857c:	4630      	mov	r0, r6
   1857e:	f7ff ff97 	bl	184b0 <d_expression>
   18582:	2131      	movs	r1, #49
   18584:	4603      	mov	r3, r0
   18586:	4622      	mov	r2, r4
   18588:	4630      	mov	r0, r6
   1858a:	f7fe fe43 	bl	17214 <d_make_comp>
   1858e:	2130      	movs	r1, #48
   18590:	4603      	mov	r3, r0
   18592:	462a      	mov	r2, r5
   18594:	4630      	mov	r0, r6
   18596:	f7fe fe3d 	bl	17214 <d_make_comp>
   1859a:	212f      	movs	r1, #47
   1859c:	4603      	mov	r3, r0
   1859e:	463a      	mov	r2, r7
   185a0:	4630      	mov	r0, r6
   185a2:	f7fe fe37 	bl	17214 <d_make_comp>
   185a6:	e7a8      	b.n	184fa <d_expression+0x4a>
   185a8:	4630      	mov	r0, r6
   185aa:	f7ff ff81 	bl	184b0 <d_expression>
   185ae:	4604      	mov	r4, r0
   185b0:	4630      	mov	r0, r6
   185b2:	f7ff ff7d 	bl	184b0 <d_expression>
   185b6:	212e      	movs	r1, #46
   185b8:	4603      	mov	r3, r0
   185ba:	4622      	mov	r2, r4
   185bc:	4630      	mov	r0, r6
   185be:	f7fe fe29 	bl	17214 <d_make_comp>
   185c2:	212d      	movs	r1, #45
   185c4:	4603      	mov	r3, r0
   185c6:	463a      	mov	r2, r7
   185c8:	4630      	mov	r0, r6
   185ca:	f7fe fe23 	bl	17214 <d_make_comp>
   185ce:	e794      	b.n	184fa <d_expression+0x4a>
   185d0:	4630      	mov	r0, r6
   185d2:	f000 f80f 	bl	185f4 <d_template_args>
   185d6:	2104      	movs	r1, #4
   185d8:	4603      	mov	r3, r0
   185da:	4622      	mov	r2, r4
   185dc:	4630      	mov	r0, r6
   185de:	f7fe fe19 	bl	17214 <d_make_comp>
   185e2:	2101      	movs	r1, #1
   185e4:	4603      	mov	r3, r0
   185e6:	462a      	mov	r2, r5
   185e8:	4630      	mov	r0, r6
   185ea:	f7fe fe13 	bl	17214 <d_make_comp>
   185ee:	e784      	b.n	184fa <d_expression+0x4a>
   185f0:	00022aec 	.word	0x00022aec

000185f4 <d_template_args>:
   185f4:	b570      	push	{r4, r5, r6, lr}
   185f6:	68c2      	ldr	r2, [r0, #12]
   185f8:	b082      	sub	sp, #8
   185fa:	7813      	ldrb	r3, [r2, #0]
   185fc:	4604      	mov	r4, r0
   185fe:	2b49      	cmp	r3, #73
   18600:	6ac6      	ldr	r6, [r0, #44]
   18602:	d002      	beq.n	1860a <d_template_args+0x16>
   18604:	2000      	movs	r0, #0
   18606:	b002      	add	sp, #8
   18608:	bd70      	pop	{r4, r5, r6, pc}
   1860a:	3b49      	subs	r3, #73
   1860c:	1c51      	adds	r1, r2, #1
   1860e:	ad02      	add	r5, sp, #8
   18610:	60c1      	str	r1, [r0, #12]
   18612:	f845 3d04 	str.w	r3, [r5, #-4]!
   18616:	7853      	ldrb	r3, [r2, #1]
   18618:	2b4c      	cmp	r3, #76
   1861a:	d016      	beq.n	1864a <d_template_args+0x56>
   1861c:	2b58      	cmp	r3, #88
   1861e:	d019      	beq.n	18654 <d_template_args+0x60>
   18620:	4620      	mov	r0, r4
   18622:	f7ff f86b 	bl	176fc <d_type>
   18626:	4602      	mov	r2, r0
   18628:	2a00      	cmp	r2, #0
   1862a:	d0eb      	beq.n	18604 <d_template_args+0x10>
   1862c:	4620      	mov	r0, r4
   1862e:	2128      	movs	r1, #40
   18630:	2300      	movs	r3, #0
   18632:	f7fe fdef 	bl	17214 <d_make_comp>
   18636:	6028      	str	r0, [r5, #0]
   18638:	2800      	cmp	r0, #0
   1863a:	d0e3      	beq.n	18604 <d_template_args+0x10>
   1863c:	68e1      	ldr	r1, [r4, #12]
   1863e:	780b      	ldrb	r3, [r1, #0]
   18640:	2b45      	cmp	r3, #69
   18642:	d014      	beq.n	1866e <d_template_args+0x7a>
   18644:	f100 0508 	add.w	r5, r0, #8	; 0x8
   18648:	e7e6      	b.n	18618 <d_template_args+0x24>
   1864a:	4620      	mov	r0, r4
   1864c:	f7ff febe 	bl	183cc <d_expr_primary>
   18650:	4602      	mov	r2, r0
   18652:	e7e9      	b.n	18628 <d_template_args+0x34>
   18654:	1c4b      	adds	r3, r1, #1
   18656:	60e3      	str	r3, [r4, #12]
   18658:	4620      	mov	r0, r4
   1865a:	f7ff ff29 	bl	184b0 <d_expression>
   1865e:	68e1      	ldr	r1, [r4, #12]
   18660:	4602      	mov	r2, r0
   18662:	780b      	ldrb	r3, [r1, #0]
   18664:	2b45      	cmp	r3, #69
   18666:	d1cd      	bne.n	18604 <d_template_args+0x10>
   18668:	1c4b      	adds	r3, r1, #1
   1866a:	60e3      	str	r3, [r4, #12]
   1866c:	e7dc      	b.n	18628 <d_template_args+0x34>
   1866e:	1c4b      	adds	r3, r1, #1
   18670:	60e3      	str	r3, [r4, #12]
   18672:	62e6      	str	r6, [r4, #44]
   18674:	9801      	ldr	r0, [sp, #4]
   18676:	e7c6      	b.n	18606 <d_template_args+0x12>

00018678 <d_name>:
   18678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1867c:	68c2      	ldr	r2, [r0, #12]
   1867e:	b082      	sub	sp, #8
   18680:	7813      	ldrb	r3, [r2, #0]
   18682:	4606      	mov	r6, r0
   18684:	3b4c      	subs	r3, #76
   18686:	2b0e      	cmp	r3, #14
   18688:	d809      	bhi.n	1869e <d_name+0x26>
   1868a:	e8df f003 	tbb	[pc, r3]
   1868e:	0883      	.short	0x0883
   18690:	0808083b 	.word	0x0808083b
   18694:	08082108 	.word	0x08082108
   18698:	08080808 	.word	0x08080808
   1869c:	0014      	.short	0x0014
   1869e:	f7ff faf5 	bl	17c8c <d_unqualified_name>
   186a2:	68f3      	ldr	r3, [r6, #12]
   186a4:	4604      	mov	r4, r0
   186a6:	781a      	ldrb	r2, [r3, #0]
   186a8:	2a49      	cmp	r2, #73
   186aa:	f000 80d0 	beq.w	1884e <d_name+0x1d6>
   186ae:	4620      	mov	r0, r4
   186b0:	b002      	add	sp, #8
   186b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   186b6:	1c53      	adds	r3, r2, #1
   186b8:	60c3      	str	r3, [r0, #12]
   186ba:	2100      	movs	r1, #0
   186bc:	f7ff fbe0 	bl	17e80 <d_encoding>
   186c0:	68f2      	ldr	r2, [r6, #12]
   186c2:	4604      	mov	r4, r0
   186c4:	7813      	ldrb	r3, [r2, #0]
   186c6:	2b45      	cmp	r3, #69
   186c8:	f000 80a0 	beq.w	1880c <d_name+0x194>
   186cc:	2400      	movs	r4, #0
   186ce:	e7ee      	b.n	186ae <d_name+0x36>
   186d0:	7853      	ldrb	r3, [r2, #1]
   186d2:	2b74      	cmp	r3, #116
   186d4:	d06c      	beq.n	187b0 <d_name+0x138>
   186d6:	2100      	movs	r1, #0
   186d8:	f7fe feb6 	bl	17448 <d_substitution>
   186dc:	2101      	movs	r1, #1
   186de:	4604      	mov	r4, r0
   186e0:	68f3      	ldr	r3, [r6, #12]
   186e2:	781a      	ldrb	r2, [r3, #0]
   186e4:	2a49      	cmp	r2, #73
   186e6:	d1e2      	bne.n	186ae <d_name+0x36>
   186e8:	2900      	cmp	r1, #0
   186ea:	f000 80b0 	beq.w	1884e <d_name+0x1d6>
   186ee:	4630      	mov	r0, r6
   186f0:	f7ff ff80 	bl	185f4 <d_template_args>
   186f4:	4622      	mov	r2, r4
   186f6:	4603      	mov	r3, r0
   186f8:	2104      	movs	r1, #4
   186fa:	4630      	mov	r0, r6
   186fc:	f7fe fd8a 	bl	17214 <d_make_comp>
   18700:	4604      	mov	r4, r0
   18702:	e7d4      	b.n	186ae <d_name+0x36>
   18704:	1c53      	adds	r3, r2, #1
   18706:	60c3      	str	r3, [r0, #12]
   18708:	a901      	add	r1, sp, #4
   1870a:	2201      	movs	r2, #1
   1870c:	f7fe fe22 	bl	17354 <d_cv_qualifiers>
   18710:	4680      	mov	r8, r0
   18712:	2800      	cmp	r0, #0
   18714:	d0da      	beq.n	186cc <d_name+0x54>
   18716:	68f1      	ldr	r1, [r6, #12]
   18718:	2700      	movs	r7, #0
   1871a:	780c      	ldrb	r4, [r1, #0]
   1871c:	2c00      	cmp	r4, #0
   1871e:	d042      	beq.n	187a6 <d_name+0x12e>
   18720:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   18724:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
   18728:	b2db      	uxtb	r3, r3
   1872a:	b2d2      	uxtb	r2, r2
   1872c:	2b19      	cmp	r3, #25
   1872e:	bf8c      	ite	hi
   18730:	2300      	movhi	r3, #0
   18732:	2301      	movls	r3, #1
   18734:	2a09      	cmp	r2, #9
   18736:	bf98      	it	ls
   18738:	f043 0301 	orrls.w	r3, r3, #1	; 0x1
   1873c:	2b00      	cmp	r3, #0
   1873e:	d15a      	bne.n	187f6 <d_name+0x17e>
   18740:	2c44      	cmp	r4, #68
   18742:	bf14      	ite	ne
   18744:	2300      	movne	r3, #0
   18746:	2301      	moveq	r3, #1
   18748:	2c43      	cmp	r4, #67
   1874a:	bf08      	it	eq
   1874c:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   18750:	2b00      	cmp	r3, #0
   18752:	d150      	bne.n	187f6 <d_name+0x17e>
   18754:	2c4c      	cmp	r4, #76
   18756:	d04e      	beq.n	187f6 <d_name+0x17e>
   18758:	2c53      	cmp	r4, #83
   1875a:	d051      	beq.n	18800 <d_name+0x188>
   1875c:	2c49      	cmp	r4, #73
   1875e:	f000 8093 	beq.w	18888 <d_name+0x210>
   18762:	2c54      	cmp	r4, #84
   18764:	f040 8081 	bne.w	1886a <d_name+0x1f2>
   18768:	4630      	mov	r0, r6
   1876a:	f7fe fe39 	bl	173e0 <d_template_param>
   1876e:	4605      	mov	r5, r0
   18770:	b137      	cbz	r7, 18780 <d_name+0x108>
   18772:	2101      	movs	r1, #1
   18774:	462b      	mov	r3, r5
   18776:	4630      	mov	r0, r6
   18778:	463a      	mov	r2, r7
   1877a:	f7fe fd4b 	bl	17214 <d_make_comp>
   1877e:	4605      	mov	r5, r0
   18780:	2c53      	cmp	r4, #83
   18782:	bf08      	it	eq
   18784:	68f1      	ldreq	r1, [r6, #12]
   18786:	d003      	beq.n	18790 <d_name+0x118>
   18788:	68f1      	ldr	r1, [r6, #12]
   1878a:	780b      	ldrb	r3, [r1, #0]
   1878c:	2b45      	cmp	r3, #69
   1878e:	d105      	bne.n	1879c <d_name+0x124>
   18790:	462f      	mov	r7, r5
   18792:	e7c2      	b.n	1871a <d_name+0xa2>
   18794:	f7ff fa7a 	bl	17c8c <d_unqualified_name>
   18798:	4604      	mov	r4, r0
   1879a:	e788      	b.n	186ae <d_name+0x36>
   1879c:	b11d      	cbz	r5, 187a6 <d_name+0x12e>
   1879e:	6a32      	ldr	r2, [r6, #32]
   187a0:	6a73      	ldr	r3, [r6, #36]
   187a2:	429a      	cmp	r2, r3
   187a4:	db4c      	blt.n	18840 <d_name+0x1c8>
   187a6:	2300      	movs	r3, #0
   187a8:	f8c8 3000 	str.w	r3, [r8]
   187ac:	461c      	mov	r4, r3
   187ae:	e77e      	b.n	186ae <d_name+0x36>
   187b0:	1c93      	adds	r3, r2, #2
   187b2:	60c3      	str	r3, [r0, #12]
   187b4:	6941      	ldr	r1, [r0, #20]
   187b6:	6983      	ldr	r3, [r0, #24]
   187b8:	4299      	cmp	r1, r3
   187ba:	da3f      	bge.n	1883c <d_name+0x1c4>
   187bc:	008b      	lsls	r3, r1, #2
   187be:	010a      	lsls	r2, r1, #4
   187c0:	6900      	ldr	r0, [r0, #16]
   187c2:	1ad2      	subs	r2, r2, r3
   187c4:	1c4b      	adds	r3, r1, #1
   187c6:	1884      	adds	r4, r0, r2
   187c8:	6173      	str	r3, [r6, #20]
   187ca:	d037      	beq.n	1883c <d_name+0x1c4>
   187cc:	2300      	movs	r3, #0
   187ce:	5483      	strb	r3, [r0, r2]
   187d0:	4a4b      	ldr	r2, [pc, #300]	(18900 <d_name+0x288>)
   187d2:	3303      	adds	r3, #3
   187d4:	6062      	str	r2, [r4, #4]
   187d6:	60a3      	str	r3, [r4, #8]
   187d8:	4630      	mov	r0, r6
   187da:	f7ff fa57 	bl	17c8c <d_unqualified_name>
   187de:	2101      	movs	r1, #1
   187e0:	4603      	mov	r3, r0
   187e2:	4622      	mov	r2, r4
   187e4:	4630      	mov	r0, r6
   187e6:	f7fe fd15 	bl	17214 <d_make_comp>
   187ea:	6b33      	ldr	r3, [r6, #48]
   187ec:	4604      	mov	r4, r0
   187ee:	3303      	adds	r3, #3
   187f0:	6333      	str	r3, [r6, #48]
   187f2:	2100      	movs	r1, #0
   187f4:	e774      	b.n	186e0 <d_name+0x68>
   187f6:	4630      	mov	r0, r6
   187f8:	f7ff fa48 	bl	17c8c <d_unqualified_name>
   187fc:	4605      	mov	r5, r0
   187fe:	e7b7      	b.n	18770 <d_name+0xf8>
   18800:	4630      	mov	r0, r6
   18802:	2101      	movs	r1, #1
   18804:	f7fe fe20 	bl	17448 <d_substitution>
   18808:	4605      	mov	r5, r0
   1880a:	e7b1      	b.n	18770 <d_name+0xf8>
   1880c:	1c51      	adds	r1, r2, #1
   1880e:	60f1      	str	r1, [r6, #12]
   18810:	7853      	ldrb	r3, [r2, #1]
   18812:	2b73      	cmp	r3, #115
   18814:	d140      	bne.n	18898 <d_name+0x220>
   18816:	1c4a      	adds	r2, r1, #1
   18818:	60f2      	str	r2, [r6, #12]
   1881a:	784b      	ldrb	r3, [r1, #1]
   1881c:	2b5f      	cmp	r3, #95
   1881e:	d05d      	beq.n	188dc <d_name+0x264>
   18820:	6971      	ldr	r1, [r6, #20]
   18822:	69b3      	ldr	r3, [r6, #24]
   18824:	4299      	cmp	r1, r3
   18826:	db47      	blt.n	188b8 <d_name+0x240>
   18828:	f04f 0c00 	mov.w	ip, #0	; 0x0
   1882c:	4622      	mov	r2, r4
   1882e:	4630      	mov	r0, r6
   18830:	2102      	movs	r1, #2
   18832:	4663      	mov	r3, ip
   18834:	f7fe fcee 	bl	17214 <d_make_comp>
   18838:	4604      	mov	r4, r0
   1883a:	e738      	b.n	186ae <d_name+0x36>
   1883c:	2400      	movs	r4, #0
   1883e:	e7cb      	b.n	187d8 <d_name+0x160>
   18840:	69f3      	ldr	r3, [r6, #28]
   18842:	462f      	mov	r7, r5
   18844:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   18848:	3201      	adds	r2, #1
   1884a:	6232      	str	r2, [r6, #32]
   1884c:	e765      	b.n	1871a <d_name+0xa2>
   1884e:	2c00      	cmp	r4, #0
   18850:	f43f af2d 	beq.w	186ae <d_name+0x36>
   18854:	6a32      	ldr	r2, [r6, #32]
   18856:	6a73      	ldr	r3, [r6, #36]
   18858:	429a      	cmp	r2, r3
   1885a:	f6bf af37 	bge.w	186cc <d_name+0x54>
   1885e:	69f3      	ldr	r3, [r6, #28]
   18860:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   18864:	3201      	adds	r2, #1
   18866:	6232      	str	r2, [r6, #32]
   18868:	e741      	b.n	186ee <d_name+0x76>
   1886a:	2c45      	cmp	r4, #69
   1886c:	d19b      	bne.n	187a6 <d_name+0x12e>
   1886e:	f8c8 7000 	str.w	r7, [r8]
   18872:	2f00      	cmp	r7, #0
   18874:	f43f af2a 	beq.w	186cc <d_name+0x54>
   18878:	780b      	ldrb	r3, [r1, #0]
   1887a:	2b45      	cmp	r3, #69
   1887c:	f47f af26 	bne.w	186cc <d_name+0x54>
   18880:	1c4b      	adds	r3, r1, #1
   18882:	60f3      	str	r3, [r6, #12]
   18884:	9c01      	ldr	r4, [sp, #4]
   18886:	e712      	b.n	186ae <d_name+0x36>
   18888:	2f00      	cmp	r7, #0
   1888a:	d08c      	beq.n	187a6 <d_name+0x12e>
   1888c:	4630      	mov	r0, r6
   1888e:	f7ff feb1 	bl	185f4 <d_template_args>
   18892:	2104      	movs	r1, #4
   18894:	4605      	mov	r5, r0
   18896:	e76d      	b.n	18774 <d_name+0xfc>
   18898:	4630      	mov	r0, r6
   1889a:	f7ff feed 	bl	18678 <d_name>
   1889e:	68f2      	ldr	r2, [r6, #12]
   188a0:	4605      	mov	r5, r0
   188a2:	7813      	ldrb	r3, [r2, #0]
   188a4:	2b5f      	cmp	r3, #95
   188a6:	d022      	beq.n	188ee <d_name+0x276>
   188a8:	4622      	mov	r2, r4
   188aa:	4630      	mov	r0, r6
   188ac:	2102      	movs	r1, #2
   188ae:	462b      	mov	r3, r5
   188b0:	f7fe fcb0 	bl	17214 <d_make_comp>
   188b4:	4604      	mov	r4, r0
   188b6:	e6fa      	b.n	186ae <d_name+0x36>
   188b8:	008b      	lsls	r3, r1, #2
   188ba:	010a      	lsls	r2, r1, #4
   188bc:	6930      	ldr	r0, [r6, #16]
   188be:	1ad2      	subs	r2, r2, r3
   188c0:	1c4b      	adds	r3, r1, #1
   188c2:	eb10 0c02 	adds.w	ip, r0, r2
   188c6:	6173      	str	r3, [r6, #20]
   188c8:	d0ae      	beq.n	18828 <d_name+0x1b0>
   188ca:	2300      	movs	r3, #0
   188cc:	5483      	strb	r3, [r0, r2]
   188ce:	4a0d      	ldr	r2, [pc, #52]	(18904 <d_name+0x28c>)
   188d0:	330e      	adds	r3, #14
   188d2:	f8cc 2004 	str.w	r2, [ip, #4]
   188d6:	f8cc 3008 	str.w	r3, [ip, #8]
   188da:	e7a7      	b.n	1882c <d_name+0x1b4>
   188dc:	1c53      	adds	r3, r2, #1
   188de:	60f3      	str	r3, [r6, #12]
   188e0:	4630      	mov	r0, r6
   188e2:	f7fe fce9 	bl	172b8 <d_number>
   188e6:	2800      	cmp	r0, #0
   188e8:	da9a      	bge.n	18820 <d_name+0x1a8>
   188ea:	2400      	movs	r4, #0
   188ec:	e6df      	b.n	186ae <d_name+0x36>
   188ee:	1c53      	adds	r3, r2, #1
   188f0:	60f3      	str	r3, [r6, #12]
   188f2:	4630      	mov	r0, r6
   188f4:	f7fe fce0 	bl	172b8 <d_number>
   188f8:	2800      	cmp	r0, #0
   188fa:	dad5      	bge.n	188a8 <d_name+0x230>
   188fc:	2400      	movs	r4, #0
   188fe:	e6d6      	b.n	186ae <d_name+0x36>
   18900:	00022964 	.word	0x00022964
   18904:	00022954 	.word	0x00022954

00018908 <d_growable_string_callback_adapter>:
   18908:	6853      	ldr	r3, [r2, #4]
   1890a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1890e:	4615      	mov	r5, r2
   18910:	3301      	adds	r3, #1
   18912:	68ac      	ldr	r4, [r5, #8]
   18914:	eb03 0201 	add.w	r2, r3, r1
   18918:	42a2      	cmp	r2, r4
   1891a:	4680      	mov	r8, r0
   1891c:	460e      	mov	r6, r1
   1891e:	d811      	bhi.n	18944 <d_growable_string_callback_adapter+0x3c>
   18920:	68ec      	ldr	r4, [r5, #12]
   18922:	b96c      	cbnz	r4, 18940 <d_growable_string_callback_adapter+0x38>
   18924:	686b      	ldr	r3, [r5, #4]
   18926:	6828      	ldr	r0, [r5, #0]
   18928:	4641      	mov	r1, r8
   1892a:	18c0      	adds	r0, r0, r3
   1892c:	4632      	mov	r2, r6
   1892e:	f007 fdd9 	bl	204e4 <memcpy>
   18932:	682a      	ldr	r2, [r5, #0]
   18934:	6869      	ldr	r1, [r5, #4]
   18936:	1992      	adds	r2, r2, r6
   18938:	5454      	strb	r4, [r2, r1]
   1893a:	686b      	ldr	r3, [r5, #4]
   1893c:	199b      	adds	r3, r3, r6
   1893e:	606b      	str	r3, [r5, #4]
   18940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18944:	68eb      	ldr	r3, [r5, #12]
   18946:	2b00      	cmp	r3, #0
   18948:	d1fa      	bne.n	18940 <d_growable_string_callback_adapter+0x38>
   1894a:	b914      	cbnz	r4, 18952 <d_growable_string_callback_adapter+0x4a>
   1894c:	2a02      	cmp	r2, #2
   1894e:	d90c      	bls.n	1896a <d_growable_string_callback_adapter+0x62>
   18950:	2402      	movs	r4, #2
   18952:	0064      	lsls	r4, r4, #1
   18954:	42a2      	cmp	r2, r4
   18956:	d8fc      	bhi.n	18952 <d_growable_string_callback_adapter+0x4a>
   18958:	6828      	ldr	r0, [r5, #0]
   1895a:	4621      	mov	r1, r4
   1895c:	f007 fe48 	bl	205f0 <realloc>
   18960:	4607      	mov	r7, r0
   18962:	b120      	cbz	r0, 1896e <d_growable_string_callback_adapter+0x66>
   18964:	6028      	str	r0, [r5, #0]
   18966:	60ac      	str	r4, [r5, #8]
   18968:	e7da      	b.n	18920 <d_growable_string_callback_adapter+0x18>
   1896a:	3402      	adds	r4, #2
   1896c:	e7f4      	b.n	18958 <d_growable_string_callback_adapter+0x50>
   1896e:	6828      	ldr	r0, [r5, #0]
   18970:	f007 fb4a 	bl	20008 <free>
   18974:	2301      	movs	r3, #1
   18976:	602f      	str	r7, [r5, #0]
   18978:	606f      	str	r7, [r5, #4]
   1897a:	60af      	str	r7, [r5, #8]
   1897c:	60eb      	str	r3, [r5, #12]
   1897e:	e7df      	b.n	18940 <d_growable_string_callback_adapter+0x38>

00018980 <d_append_buffer>:
   18980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18984:	4604      	mov	r4, r0
   18986:	4688      	mov	r8, r1
   18988:	4617      	mov	r7, r2
   1898a:	b35a      	cbz	r2, 189e4 <d_append_buffer+0x64>
   1898c:	2500      	movs	r5, #0
   1898e:	f100 0904 	add.w	r9, r0, #4	; 0x4
   18992:	46aa      	mov	sl, r5
   18994:	e00a      	b.n	189ac <d_append_buffer+0x2c>
   18996:	3501      	adds	r5, #1
   18998:	1c4a      	adds	r2, r1, #1
   1899a:	eb04 0301 	add.w	r3, r4, r1
   1899e:	42af      	cmp	r7, r5
   189a0:	711e      	strb	r6, [r3, #4]
   189a2:	f8c4 2104 	str.w	r2, [r4, #260]
   189a6:	f884 6108 	strb.w	r6, [r4, #264]
   189aa:	d91b      	bls.n	189e4 <d_append_buffer+0x64>
   189ac:	f8d4 1104 	ldr.w	r1, [r4, #260]
   189b0:	f818 6005 	ldrb.w	r6, [r8, r5]
   189b4:	29ff      	cmp	r1, #255
   189b6:	d1ee      	bne.n	18996 <d_append_buffer+0x16>
   189b8:	f8d4 2110 	ldr.w	r2, [r4, #272]
   189bc:	f8d4 310c 	ldr.w	r3, [r4, #268]
   189c0:	f884 a103 	strb.w	sl, [r4, #259]
   189c4:	4648      	mov	r0, r9
   189c6:	4798      	blx	r3
   189c8:	3501      	adds	r5, #1
   189ca:	4651      	mov	r1, sl
   189cc:	1c4a      	adds	r2, r1, #1
   189ce:	eb04 0301 	add.w	r3, r4, r1
   189d2:	42af      	cmp	r7, r5
   189d4:	f8c4 a104 	str.w	sl, [r4, #260]
   189d8:	711e      	strb	r6, [r3, #4]
   189da:	f8c4 2104 	str.w	r2, [r4, #260]
   189de:	f884 6108 	strb.w	r6, [r4, #264]
   189e2:	d8e3      	bhi.n	189ac <d_append_buffer+0x2c>
   189e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000189e8 <d_append_string>:
   189e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   189ec:	4604      	mov	r4, r0
   189ee:	4608      	mov	r0, r1
   189f0:	4688      	mov	r8, r1
   189f2:	f008 f92d 	bl	20c50 <strlen>
   189f6:	4607      	mov	r7, r0
   189f8:	b358      	cbz	r0, 18a52 <d_append_string+0x6a>
   189fa:	2500      	movs	r5, #0
   189fc:	f104 0904 	add.w	r9, r4, #4	; 0x4
   18a00:	46aa      	mov	sl, r5
   18a02:	e00a      	b.n	18a1a <d_append_string+0x32>
   18a04:	3501      	adds	r5, #1
   18a06:	1c4a      	adds	r2, r1, #1
   18a08:	eb04 0301 	add.w	r3, r4, r1
   18a0c:	42af      	cmp	r7, r5
   18a0e:	711e      	strb	r6, [r3, #4]
   18a10:	f8c4 2104 	str.w	r2, [r4, #260]
   18a14:	f884 6108 	strb.w	r6, [r4, #264]
   18a18:	d91b      	bls.n	18a52 <d_append_string+0x6a>
   18a1a:	f8d4 1104 	ldr.w	r1, [r4, #260]
   18a1e:	f818 6005 	ldrb.w	r6, [r8, r5]
   18a22:	29ff      	cmp	r1, #255
   18a24:	d1ee      	bne.n	18a04 <d_append_string+0x1c>
   18a26:	f8d4 2110 	ldr.w	r2, [r4, #272]
   18a2a:	f8d4 310c 	ldr.w	r3, [r4, #268]
   18a2e:	f884 a103 	strb.w	sl, [r4, #259]
   18a32:	4648      	mov	r0, r9
   18a34:	4798      	blx	r3
   18a36:	3501      	adds	r5, #1
   18a38:	4651      	mov	r1, sl
   18a3a:	1c4a      	adds	r2, r1, #1
   18a3c:	eb04 0301 	add.w	r3, r4, r1
   18a40:	42af      	cmp	r7, r5
   18a42:	f8c4 a104 	str.w	sl, [r4, #260]
   18a46:	711e      	strb	r6, [r3, #4]
   18a48:	f8c4 2104 	str.w	r2, [r4, #260]
   18a4c:	f884 6108 	strb.w	r6, [r4, #264]
   18a50:	d8e3      	bhi.n	18a1a <d_append_string+0x32>
   18a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18a56:	46c0      	nop			(mov r8, r8)

00018a58 <d_print_array_type>:
   18a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18a5c:	4605      	mov	r5, r0
   18a5e:	4688      	mov	r8, r1
   18a60:	4616      	mov	r6, r2
   18a62:	2a00      	cmp	r2, #0
   18a64:	d042      	beq.n	18aec <d_print_array_type+0x94>
   18a66:	6894      	ldr	r4, [r2, #8]
   18a68:	b13c      	cbz	r4, 18a7a <d_print_array_type+0x22>
   18a6a:	6812      	ldr	r2, [r2, #0]
   18a6c:	2a00      	cmp	r2, #0
   18a6e:	d1fa      	bne.n	18a66 <d_print_array_type+0xe>
   18a70:	4628      	mov	r0, r5
   18a72:	4631      	mov	r1, r6
   18a74:	f000 fe78 	bl	19768 <d_print_mod_list>
   18a78:	e038      	b.n	18aec <d_print_array_type+0x94>
   18a7a:	6853      	ldr	r3, [r2, #4]
   18a7c:	781a      	ldrb	r2, [r3, #0]
   18a7e:	2a25      	cmp	r2, #37
   18a80:	f000 8085 	beq.w	18b8e <d_print_array_type+0x136>
   18a84:	f8d5 c104 	ldr.w	ip, [r5, #260]
   18a88:	1d2f      	adds	r7, r5, #4
   18a8a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   18a8e:	f000 8092 	beq.w	18bb6 <d_print_array_type+0x15e>
   18a92:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   18a96:	2120      	movs	r1, #32
   18a98:	eb05 030c 	add.w	r3, r5, ip
   18a9c:	2aff      	cmp	r2, #255
   18a9e:	7119      	strb	r1, [r3, #4]
   18aa0:	f8c5 2104 	str.w	r2, [r5, #260]
   18aa4:	f885 1108 	strb.w	r1, [r5, #264]
   18aa8:	4694      	mov	ip, r2
   18aaa:	f000 8091 	beq.w	18bd0 <d_print_array_type+0x178>
   18aae:	2128      	movs	r1, #40
   18ab0:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   18ab4:	eb05 030c 	add.w	r3, r5, ip
   18ab8:	7119      	strb	r1, [r3, #4]
   18aba:	f8c5 2104 	str.w	r2, [r5, #260]
   18abe:	f885 1108 	strb.w	r1, [r5, #264]
   18ac2:	2200      	movs	r2, #0
   18ac4:	4628      	mov	r0, r5
   18ac6:	4631      	mov	r1, r6
   18ac8:	f000 fe4e 	bl	19768 <d_print_mod_list>
   18acc:	f8d5 c104 	ldr.w	ip, [r5, #260]
   18ad0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   18ad4:	f000 808a 	beq.w	18bec <d_print_array_type+0x194>
   18ad8:	2129      	movs	r1, #41
   18ada:	eb05 030c 	add.w	r3, r5, ip
   18ade:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   18ae2:	7119      	strb	r1, [r3, #4]
   18ae4:	f8c5 2104 	str.w	r2, [r5, #260]
   18ae8:	f885 1108 	strb.w	r1, [r5, #264]
   18aec:	f8d5 c104 	ldr.w	ip, [r5, #260]
   18af0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   18af4:	d051      	beq.n	18b9a <d_print_array_type+0x142>
   18af6:	2120      	movs	r1, #32
   18af8:	eb05 030c 	add.w	r3, r5, ip
   18afc:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   18b00:	7119      	strb	r1, [r3, #4]
   18b02:	f8c5 2104 	str.w	r2, [r5, #260]
   18b06:	f885 1108 	strb.w	r1, [r5, #264]
   18b0a:	f8d5 c104 	ldr.w	ip, [r5, #260]
   18b0e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   18b12:	d02e      	beq.n	18b72 <d_print_array_type+0x11a>
   18b14:	215b      	movs	r1, #91
   18b16:	eb05 030c 	add.w	r3, r5, ip
   18b1a:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   18b1e:	7119      	strb	r1, [r3, #4]
   18b20:	f8c5 2104 	str.w	r2, [r5, #260]
   18b24:	f885 1108 	strb.w	r1, [r5, #264]
   18b28:	f8d8 1004 	ldr.w	r1, [r8, #4]
   18b2c:	b111      	cbz	r1, 18b34 <d_print_array_type+0xdc>
   18b2e:	4628      	mov	r0, r5
   18b30:	f000 f86a 	bl	18c08 <d_print_comp>
   18b34:	f8d5 c104 	ldr.w	ip, [r5, #260]
   18b38:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   18b3c:	d00b      	beq.n	18b56 <d_print_array_type+0xfe>
   18b3e:	215d      	movs	r1, #93
   18b40:	eb05 030c 	add.w	r3, r5, ip
   18b44:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   18b48:	7119      	strb	r1, [r3, #4]
   18b4a:	f8c5 2104 	str.w	r2, [r5, #260]
   18b4e:	f885 1108 	strb.w	r1, [r5, #264]
   18b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18b56:	2400      	movs	r4, #0
   18b58:	4661      	mov	r1, ip
   18b5a:	f885 4103 	strb.w	r4, [r5, #259]
   18b5e:	1d28      	adds	r0, r5, #4
   18b60:	f8d5 2110 	ldr.w	r2, [r5, #272]
   18b64:	f8d5 310c 	ldr.w	r3, [r5, #268]
   18b68:	4798      	blx	r3
   18b6a:	f8c5 4104 	str.w	r4, [r5, #260]
   18b6e:	46a4      	mov	ip, r4
   18b70:	e7e5      	b.n	18b3e <d_print_array_type+0xe6>
   18b72:	2400      	movs	r4, #0
   18b74:	4661      	mov	r1, ip
   18b76:	f885 4103 	strb.w	r4, [r5, #259]
   18b7a:	1d28      	adds	r0, r5, #4
   18b7c:	f8d5 2110 	ldr.w	r2, [r5, #272]
   18b80:	f8d5 310c 	ldr.w	r3, [r5, #268]
   18b84:	4798      	blx	r3
   18b86:	f8c5 4104 	str.w	r4, [r5, #260]
   18b8a:	46a4      	mov	ip, r4
   18b8c:	e7c2      	b.n	18b14 <d_print_array_type+0xbc>
   18b8e:	4628      	mov	r0, r5
   18b90:	4631      	mov	r1, r6
   18b92:	4622      	mov	r2, r4
   18b94:	f000 fde8 	bl	19768 <d_print_mod_list>
   18b98:	e7b7      	b.n	18b0a <d_print_array_type+0xb2>
   18b9a:	2400      	movs	r4, #0
   18b9c:	4661      	mov	r1, ip
   18b9e:	f885 4103 	strb.w	r4, [r5, #259]
   18ba2:	1d28      	adds	r0, r5, #4
   18ba4:	f8d5 2110 	ldr.w	r2, [r5, #272]
   18ba8:	f8d5 310c 	ldr.w	r3, [r5, #268]
   18bac:	4798      	blx	r3
   18bae:	f8c5 4104 	str.w	r4, [r5, #260]
   18bb2:	46a4      	mov	ip, r4
   18bb4:	e79f      	b.n	18af6 <d_print_array_type+0x9e>
   18bb6:	4661      	mov	r1, ip
   18bb8:	f885 4103 	strb.w	r4, [r5, #259]
   18bbc:	f8d5 2110 	ldr.w	r2, [r5, #272]
   18bc0:	f8d5 310c 	ldr.w	r3, [r5, #268]
   18bc4:	4638      	mov	r0, r7
   18bc6:	4798      	blx	r3
   18bc8:	f8c5 4104 	str.w	r4, [r5, #260]
   18bcc:	46a4      	mov	ip, r4
   18bce:	e760      	b.n	18a92 <d_print_array_type+0x3a>
   18bd0:	2400      	movs	r4, #0
   18bd2:	4661      	mov	r1, ip
   18bd4:	f885 4103 	strb.w	r4, [r5, #259]
   18bd8:	f8d5 2110 	ldr.w	r2, [r5, #272]
   18bdc:	f8d5 310c 	ldr.w	r3, [r5, #268]
   18be0:	4638      	mov	r0, r7
   18be2:	4798      	blx	r3
   18be4:	f8c5 4104 	str.w	r4, [r5, #260]
   18be8:	46a4      	mov	ip, r4
   18bea:	e760      	b.n	18aae <d_print_array_type+0x56>
   18bec:	2400      	movs	r4, #0
   18bee:	4661      	mov	r1, ip
   18bf0:	f885 4103 	strb.w	r4, [r5, #259]
   18bf4:	f8d5 2110 	ldr.w	r2, [r5, #272]
   18bf8:	f8d5 310c 	ldr.w	r3, [r5, #268]
   18bfc:	4638      	mov	r0, r7
   18bfe:	4798      	blx	r3
   18c00:	f8c5 4104 	str.w	r4, [r5, #260]
   18c04:	46a4      	mov	ip, r4
   18c06:	e767      	b.n	18ad8 <d_print_array_type+0x80>

00018c08 <d_print_comp>:
   18c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c0c:	4680      	mov	r8, r0
   18c0e:	b09b      	sub	sp, #108
   18c10:	460f      	mov	r7, r1
   18c12:	2900      	cmp	r1, #0
   18c14:	d06e      	beq.n	18cf4 <d_print_comp+0xec>
   18c16:	f8d0 311c 	ldr.w	r3, [r0, #284]
   18c1a:	2b00      	cmp	r3, #0
   18c1c:	d167      	bne.n	18cee <d_print_comp+0xe6>
   18c1e:	7808      	ldrb	r0, [r1, #0]
   18c20:	2836      	cmp	r0, #54
   18c22:	d867      	bhi.n	18cf4 <d_print_comp+0xec>
   18c24:	e8df f010 	tbh	[pc, r0, lsl #1]
   18c28:	006a021a 	.word	0x006a021a
   18c2c:	0127006a 	.word	0x0127006a
   18c30:	02b9028b 	.word	0x02b9028b
   18c34:	02e00079 	.word	0x02e00079
   18c38:	03a103cc 	.word	0x03a103cc
   18c3c:	03d503e7 	.word	0x03d503e7
   18c40:	023b03de 	.word	0x023b03de
   18c44:	024f0245 	.word	0x024f0245
   18c48:	02630259 	.word	0x02630259
   18c4c:	0277026d 	.word	0x0277026d
   18c50:	00880281 	.word	0x00880281
   18c54:	01c301c3 	.word	0x01c301c3
   18c58:	031201c3 	.word	0x031201c3
   18c5c:	03120312 	.word	0x03120312
   18c60:	03120312 	.word	0x03120312
   18c64:	03120312 	.word	0x03120312
   18c68:	03120312 	.word	0x03120312
   18c6c:	0083032d 	.word	0x0083032d
   18c70:	033a01da 	.word	0x033a01da
   18c74:	02e903aa 	.word	0x02e903aa
   18c78:	02fb02e9 	.word	0x02fb02e9
   18c7c:	011d0113 	.word	0x011d0113
   18c80:	00a3008e 	.word	0x00a3008e
   18c84:	00df0066 	.word	0x00df0066
   18c88:	00660066 	.word	0x00660066
   18c8c:	00370037 	.word	0x00370037
   18c90:	0211007e 	.word	0x0211007e
   18c94:	010e      	.short	0x010e
   18c96:	684a      	ldr	r2, [r1, #4]
   18c98:	7813      	ldrb	r3, [r2, #0]
   18c9a:	2b22      	cmp	r3, #34
   18c9c:	f040 8402 	bne.w	194a4 <d_print_comp+0x89c>
   18ca0:	6853      	ldr	r3, [r2, #4]
   18ca2:	7c1c      	ldrb	r4, [r3, #16]
   18ca4:	b12c      	cbz	r4, 18cb2 <d_print_comp+0xaa>
   18ca6:	2c06      	cmp	r4, #6
   18ca8:	f240 843f 	bls.w	1952a <d_print_comp+0x922>
   18cac:	2c07      	cmp	r4, #7
   18cae:	f000 8423 	beq.w	194f8 <d_print_comp+0x8f0>
   18cb2:	2128      	movs	r1, #40
   18cb4:	4640      	mov	r0, r8
   18cb6:	f7fe fc91 	bl	175dc <d_append_char>
   18cba:	6879      	ldr	r1, [r7, #4]
   18cbc:	4640      	mov	r0, r8
   18cbe:	f7ff ffa3 	bl	18c08 <d_print_comp>
   18cc2:	2129      	movs	r1, #41
   18cc4:	4640      	mov	r0, r8
   18cc6:	f7fe fc89 	bl	175dc <d_append_char>
   18cca:	783b      	ldrb	r3, [r7, #0]
   18ccc:	2b33      	cmp	r3, #51
   18cce:	f000 8467 	beq.w	195a0 <d_print_comp+0x998>
   18cd2:	2c08      	cmp	r4, #8
   18cd4:	d121      	bne.n	18d1a <d_print_comp+0x112>
   18cd6:	4640      	mov	r0, r8
   18cd8:	215b      	movs	r1, #91
   18cda:	f7fe fc7f 	bl	175dc <d_append_char>
   18cde:	68b9      	ldr	r1, [r7, #8]
   18ce0:	4640      	mov	r0, r8
   18ce2:	f7ff ff91 	bl	18c08 <d_print_comp>
   18ce6:	4640      	mov	r0, r8
   18ce8:	215d      	movs	r1, #93
   18cea:	f7fe fc77 	bl	175dc <d_append_char>
   18cee:	b01b      	add	sp, #108
   18cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cf4:	2301      	movs	r3, #1
   18cf6:	f8c8 311c 	str.w	r3, [r8, #284]
   18cfa:	e7f8      	b.n	18cee <d_print_comp+0xe6>
   18cfc:	6849      	ldr	r1, [r1, #4]
   18cfe:	4640      	mov	r0, r8
   18d00:	f7ff ff82 	bl	18c08 <d_print_comp>
   18d04:	f8d8 3000 	ldr.w	r3, [r8]
   18d08:	f013 0f04 	tst.w	r3, #4	; 0x4
   18d0c:	f040 83c5 	bne.w	1949a <d_print_comp+0x892>
   18d10:	4640      	mov	r0, r8
   18d12:	f8df 1900 	ldr.w	r1, [pc, #2304]	; 19614 <d_print_comp+0xa0c>
   18d16:	f7ff fe67 	bl	189e8 <d_append_string>
   18d1a:	68b9      	ldr	r1, [r7, #8]
   18d1c:	4640      	mov	r0, r8
   18d1e:	f7ff ff73 	bl	18c08 <d_print_comp>
   18d22:	e7e4      	b.n	18cee <d_print_comp+0xe6>
   18d24:	4640      	mov	r0, r8
   18d26:	f8df 18f0 	ldr.w	r1, [pc, #2288]	; 19618 <d_print_comp+0xa10>
   18d2a:	f7ff fe5d 	bl	189e8 <d_append_string>
   18d2e:	6879      	ldr	r1, [r7, #4]
   18d30:	4640      	mov	r0, r8
   18d32:	f7ff ff69 	bl	18c08 <d_print_comp>
   18d36:	e7da      	b.n	18cee <d_print_comp+0xe6>
   18d38:	6879      	ldr	r1, [r7, #4]
   18d3a:	68ba      	ldr	r2, [r7, #8]
   18d3c:	4640      	mov	r0, r8
   18d3e:	f7ff fe1f 	bl	18980 <d_append_buffer>
   18d42:	e7d4      	b.n	18cee <d_print_comp+0xe6>
   18d44:	6849      	ldr	r1, [r1, #4]
   18d46:	780b      	ldrb	r3, [r1, #0]
   18d48:	2b2b      	cmp	r3, #43
   18d4a:	f000 83ba 	beq.w	194c2 <d_print_comp+0x8ba>
   18d4e:	4640      	mov	r0, r8
   18d50:	f000 feda 	bl	19b08 <d_print_expr_op>
   18d54:	2128      	movs	r1, #40
   18d56:	4640      	mov	r0, r8
   18d58:	f7fe fc40 	bl	175dc <d_append_char>
   18d5c:	68b9      	ldr	r1, [r7, #8]
   18d5e:	4640      	mov	r0, r8
   18d60:	f7ff ff52 	bl	18c08 <d_print_comp>
   18d64:	4640      	mov	r0, r8
   18d66:	2129      	movs	r1, #41
   18d68:	f7fe fc38 	bl	175dc <d_append_char>
   18d6c:	e7bf      	b.n	18cee <d_print_comp+0xe6>
   18d6e:	688b      	ldr	r3, [r1, #8]
   18d70:	781a      	ldrb	r2, [r3, #0]
   18d72:	2a2e      	cmp	r2, #46
   18d74:	d1be      	bne.n	18cf4 <d_print_comp+0xec>
   18d76:	684a      	ldr	r2, [r1, #4]
   18d78:	7813      	ldrb	r3, [r2, #0]
   18d7a:	2b29      	cmp	r3, #41
   18d7c:	f000 8416 	beq.w	195ac <d_print_comp+0x9a4>
   18d80:	2128      	movs	r1, #40
   18d82:	4640      	mov	r0, r8
   18d84:	f7fe fc2a 	bl	175dc <d_append_char>
   18d88:	68bb      	ldr	r3, [r7, #8]
   18d8a:	4640      	mov	r0, r8
   18d8c:	6859      	ldr	r1, [r3, #4]
   18d8e:	f7ff ff3b 	bl	18c08 <d_print_comp>
   18d92:	4640      	mov	r0, r8
   18d94:	f8df 1884 	ldr.w	r1, [pc, #2180]	; 1961c <d_print_comp+0xa14>
   18d98:	f7ff fe26 	bl	189e8 <d_append_string>
   18d9c:	6879      	ldr	r1, [r7, #4]
   18d9e:	4640      	mov	r0, r8
   18da0:	f000 feb2 	bl	19b08 <d_print_expr_op>
   18da4:	4640      	mov	r0, r8
   18da6:	f8df 1878 	ldr.w	r1, [pc, #2168]	; 19620 <d_print_comp+0xa18>
   18daa:	f7ff fe1d 	bl	189e8 <d_append_string>
   18dae:	68bb      	ldr	r3, [r7, #8]
   18db0:	4640      	mov	r0, r8
   18db2:	6899      	ldr	r1, [r3, #8]
   18db4:	f7ff ff28 	bl	18c08 <d_print_comp>
   18db8:	2129      	movs	r1, #41
   18dba:	4640      	mov	r0, r8
   18dbc:	f7fe fc0e 	bl	175dc <d_append_char>
   18dc0:	6879      	ldr	r1, [r7, #4]
   18dc2:	f891 c000 	ldrb.w	ip, [r1]
   18dc6:	f1bc 0f29 	cmp.w	ip, #41	; 0x29
   18dca:	d190      	bne.n	18cee <d_print_comp+0xe6>
   18dcc:	6849      	ldr	r1, [r1, #4]
   18dce:	688b      	ldr	r3, [r1, #8]
   18dd0:	2b01      	cmp	r3, #1
   18dd2:	d18c      	bne.n	18cee <d_print_comp+0xe6>
   18dd4:	684b      	ldr	r3, [r1, #4]
   18dd6:	781a      	ldrb	r2, [r3, #0]
   18dd8:	2a3e      	cmp	r2, #62
   18dda:	d188      	bne.n	18cee <d_print_comp+0xe6>
   18ddc:	4640      	mov	r0, r8
   18dde:	4661      	mov	r1, ip
   18de0:	f7fe fbfc 	bl	175dc <d_append_char>
   18de4:	e783      	b.n	18cee <d_print_comp+0xe6>
   18de6:	688a      	ldr	r2, [r1, #8]
   18de8:	7813      	ldrb	r3, [r2, #0]
   18dea:	2b30      	cmp	r3, #48
   18dec:	d182      	bne.n	18cf4 <d_print_comp+0xec>
   18dee:	6893      	ldr	r3, [r2, #8]
   18df0:	781a      	ldrb	r2, [r3, #0]
   18df2:	2a31      	cmp	r2, #49
   18df4:	f47f af7e 	bne.w	18cf4 <d_print_comp+0xec>
   18df8:	4640      	mov	r0, r8
   18dfa:	2128      	movs	r1, #40
   18dfc:	f7fe fbee 	bl	175dc <d_append_char>
   18e00:	68bb      	ldr	r3, [r7, #8]
   18e02:	4640      	mov	r0, r8
   18e04:	6859      	ldr	r1, [r3, #4]
   18e06:	f7ff feff 	bl	18c08 <d_print_comp>
   18e0a:	4640      	mov	r0, r8
   18e0c:	f8df 180c 	ldr.w	r1, [pc, #2060]	; 1961c <d_print_comp+0xa14>
   18e10:	f7ff fdea 	bl	189e8 <d_append_string>
   18e14:	6879      	ldr	r1, [r7, #4]
   18e16:	4640      	mov	r0, r8
   18e18:	f000 fe76 	bl	19b08 <d_print_expr_op>
   18e1c:	4640      	mov	r0, r8
   18e1e:	f8df 1800 	ldr.w	r1, [pc, #2048]	; 19620 <d_print_comp+0xa18>
   18e22:	f7ff fde1 	bl	189e8 <d_append_string>
   18e26:	68bb      	ldr	r3, [r7, #8]
   18e28:	4640      	mov	r0, r8
   18e2a:	689a      	ldr	r2, [r3, #8]
   18e2c:	6851      	ldr	r1, [r2, #4]
   18e2e:	f7ff feeb 	bl	18c08 <d_print_comp>
   18e32:	f8df 17f0 	ldr.w	r1, [pc, #2032]	; 19624 <d_print_comp+0xa1c>
   18e36:	4640      	mov	r0, r8
   18e38:	f7ff fdd6 	bl	189e8 <d_append_string>
   18e3c:	68bb      	ldr	r3, [r7, #8]
   18e3e:	689a      	ldr	r2, [r3, #8]
   18e40:	6891      	ldr	r1, [r2, #8]
   18e42:	e78c      	b.n	18d5e <d_print_comp+0x156>
   18e44:	7909      	ldrb	r1, [r1, #4]
   18e46:	4640      	mov	r0, r8
   18e48:	f7fe fbc8 	bl	175dc <d_append_char>
   18e4c:	e74f      	b.n	18cee <d_print_comp+0xe6>
   18e4e:	4640      	mov	r0, r8
   18e50:	f8df 17d4 	ldr.w	r1, [pc, #2004]	; 19628 <d_print_comp+0xa20>
   18e54:	f7ff fdc8 	bl	189e8 <d_append_string>
   18e58:	68b9      	ldr	r1, [r7, #8]
   18e5a:	4640      	mov	r0, r8
   18e5c:	f7ff fed4 	bl	18c08 <d_print_comp>
   18e60:	e745      	b.n	18cee <d_print_comp+0xe6>
   18e62:	4640      	mov	r0, r8
   18e64:	f8df 17c0 	ldr.w	r1, [pc, #1984]	; 19628 <d_print_comp+0xa20>
   18e68:	f7ff fdbe 	bl	189e8 <d_append_string>
   18e6c:	4640      	mov	r0, r8
   18e6e:	4639      	mov	r1, r7
   18e70:	f000 fdd6 	bl	19a20 <d_print_cast>
   18e74:	e73b      	b.n	18cee <d_print_comp+0xe6>
   18e76:	f8d8 3118 	ldr.w	r3, [r8, #280]
   18e7a:	9302      	str	r3, [sp, #8]
   18e7c:	684d      	ldr	r5, [r1, #4]
   18e7e:	2d00      	cmp	r5, #0
   18e80:	f43f af38 	beq.w	18cf4 <d_print_comp+0xec>
   18e84:	7829      	ldrb	r1, [r5, #0]
   18e86:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
   18e8a:	f84b 3d58 	str.w	r3, [fp, #-88]!
   18e8e:	f1a1 0319 	sub.w	r3, r1, #25	; 0x19
   18e92:	f8d8 0114 	ldr.w	r0, [r8, #276]
   18e96:	b2db      	uxtb	r3, r3
   18e98:	f04f 0c00 	mov.w	ip, #0	; 0x0
   18e9c:	2b02      	cmp	r3, #2
   18e9e:	f8c8 b118 	str.w	fp, [r8, #280]
   18ea2:	9505      	str	r5, [sp, #20]
   18ea4:	f8cd c018 	str.w	ip, [sp, #24]
   18ea8:	9007      	str	r0, [sp, #28]
   18eaa:	f200 83a5 	bhi.w	195f8 <d_print_comp+0x9f0>
   18eae:	aa08      	add	r2, sp, #32
   18eb0:	2601      	movs	r6, #1
   18eb2:	686d      	ldr	r5, [r5, #4]
   18eb4:	2d00      	cmp	r5, #0
   18eb6:	f43f af1d 	beq.w	18cf4 <d_print_comp+0xec>
   18eba:	2e04      	cmp	r6, #4
   18ebc:	f43f af1a 	beq.w	18cf4 <d_print_comp+0xec>
   18ec0:	f8d8 3118 	ldr.w	r3, [r8, #280]
   18ec4:	7829      	ldrb	r1, [r5, #0]
   18ec6:	6013      	str	r3, [r2, #0]
   18ec8:	f1a1 0319 	sub.w	r3, r1, #25	; 0x19
   18ecc:	b2db      	uxtb	r3, r3
   18ece:	f8c8 2118 	str.w	r2, [r8, #280]
   18ed2:	6055      	str	r5, [r2, #4]
   18ed4:	f8c2 c008 	str.w	ip, [r2, #8]
   18ed8:	60d0      	str	r0, [r2, #12]
   18eda:	3601      	adds	r6, #1
   18edc:	3210      	adds	r2, #16
   18ede:	2b02      	cmp	r3, #2
   18ee0:	d9e7      	bls.n	18eb2 <d_print_comp+0x2aa>
   18ee2:	2904      	cmp	r1, #4
   18ee4:	bf01      	itttt	eq
   18ee6:	ab1a      	addeq	r3, sp, #104
   18ee8:	f843 0d08 	streq.w	r0, [r3, #-8]!
   18eec:	f8c8 3114 	streq.w	r3, [r8, #276]
   18ef0:	9519      	streq	r5, [sp, #100]
   18ef2:	d042      	beq.n	18f7a <d_print_comp+0x372>
   18ef4:	2902      	cmp	r1, #2
   18ef6:	d140      	bne.n	18f7a <d_print_comp+0x372>
   18ef8:	f8d5 c008 	ldr.w	ip, [r5, #8]
   18efc:	f89c 3000 	ldrb.w	r3, [ip]
   18f00:	3b19      	subs	r3, #25
   18f02:	b2db      	uxtb	r3, r3
   18f04:	2b02      	cmp	r3, #2
   18f06:	d838      	bhi.n	18f7a <d_print_comp+0x372>
   18f08:	2e03      	cmp	r6, #3
   18f0a:	f63f aef3 	bhi.w	18cf4 <d_print_comp+0xec>
   18f0e:	f106 5380 	add.w	r3, r6, #268435456	; 0x10000000
   18f12:	3b01      	subs	r3, #1
   18f14:	011b      	lsls	r3, r3, #4
   18f16:	1e72      	subs	r2, r6, #1
   18f18:	eb0b 0403 	add.w	r4, fp, r3
   18f1c:	0112      	lsls	r2, r2, #4
   18f1e:	0133      	lsls	r3, r6, #4
   18f20:	eb0b 0902 	add.w	r9, fp, r2
   18f24:	eb0b 0a03 	add.w	sl, fp, r3
   18f28:	e007      	b.n	18f3a <d_print_comp+0x332>
   18f2a:	2e03      	cmp	r6, #3
   18f2c:	9c01      	ldr	r4, [sp, #4]
   18f2e:	f109 0910 	add.w	r9, r9, #16	; 0x10
   18f32:	f10a 0a10 	add.w	sl, sl, #16	; 0x10
   18f36:	f63f aedd 	bhi.w	18cf4 <d_print_comp+0xec>
   18f3a:	f104 0210 	add.w	r2, r4, #16	; 0x10
   18f3e:	9201      	str	r2, [sp, #4]
   18f40:	4610      	mov	r0, r2
   18f42:	4621      	mov	r1, r4
   18f44:	2210      	movs	r2, #16
   18f46:	f8cd c000 	str.w	ip, [sp]
   18f4a:	f007 facb 	bl	204e4 <memcpy>
   18f4e:	2300      	movs	r3, #0
   18f50:	f8dd c000 	ldr.w	ip, [sp]
   18f54:	60a3      	str	r3, [r4, #8]
   18f56:	f8d8 3114 	ldr.w	r3, [r8, #276]
   18f5a:	f8c4 9010 	str.w	r9, [r4, #16]
   18f5e:	60e3      	str	r3, [r4, #12]
   18f60:	f8c8 a118 	str.w	sl, [r8, #280]
   18f64:	f8c4 c004 	str.w	ip, [r4, #4]
   18f68:	f8dc c004 	ldr.w	ip, [ip, #4]
   18f6c:	3601      	adds	r6, #1
   18f6e:	f89c 3000 	ldrb.w	r3, [ip]
   18f72:	3b19      	subs	r3, #25
   18f74:	b2db      	uxtb	r3, r3
   18f76:	2b02      	cmp	r3, #2
   18f78:	d9d7      	bls.n	18f2a <d_print_comp+0x322>
   18f7a:	68b9      	ldr	r1, [r7, #8]
   18f7c:	4640      	mov	r0, r8
   18f7e:	f7ff fe43 	bl	18c08 <d_print_comp>
   18f82:	782b      	ldrb	r3, [r5, #0]
   18f84:	2b04      	cmp	r3, #4
   18f86:	bf04      	itt	eq
   18f88:	9b18      	ldreq	r3, [sp, #96]
   18f8a:	f8c8 3114 	streq.w	r3, [r8, #276]
   18f8e:	b156      	cbz	r6, 18fa6 <d_print_comp+0x39e>
   18f90:	0133      	lsls	r3, r6, #4
   18f92:	eb0b 0403 	add.w	r4, fp, r3
   18f96:	f854 3c08 	ldr.w	r3, [r4, #-8]
   18f9a:	2b00      	cmp	r3, #0
   18f9c:	f000 82a2 	beq.w	194e4 <d_print_comp+0x8dc>
   18fa0:	3c10      	subs	r4, #16
   18fa2:	455c      	cmp	r4, fp
   18fa4:	d1f7      	bne.n	18f96 <d_print_comp+0x38e>
   18fa6:	9a02      	ldr	r2, [sp, #8]
   18fa8:	f8c8 2118 	str.w	r2, [r8, #280]
   18fac:	e69f      	b.n	18cee <d_print_comp+0xe6>
   18fae:	f8d8 4118 	ldr.w	r4, [r8, #280]
   18fb2:	2c00      	cmp	r4, #0
   18fb4:	f000 814c 	beq.w	19250 <d_print_comp+0x648>
   18fb8:	4621      	mov	r1, r4
   18fba:	688b      	ldr	r3, [r1, #8]
   18fbc:	b953      	cbnz	r3, 18fd4 <d_print_comp+0x3cc>
   18fbe:	684a      	ldr	r2, [r1, #4]
   18fc0:	7812      	ldrb	r2, [r2, #0]
   18fc2:	f1a2 0316 	sub.w	r3, r2, #22	; 0x16
   18fc6:	b2db      	uxtb	r3, r3
   18fc8:	2b02      	cmp	r3, #2
   18fca:	f200 8141 	bhi.w	19250 <d_print_comp+0x648>
   18fce:	4290      	cmp	r0, r2
   18fd0:	f43f aead 	beq.w	18d2e <d_print_comp+0x126>
   18fd4:	6809      	ldr	r1, [r1, #0]
   18fd6:	2900      	cmp	r1, #0
   18fd8:	d1ef      	bne.n	18fba <d_print_comp+0x3b2>
   18fda:	e139      	b.n	19250 <d_print_comp+0x648>
   18fdc:	f8d8 3000 	ldr.w	r3, [r8]
   18fe0:	f013 0f20 	tst.w	r3, #32	; 0x20
   18fe4:	f040 8267 	bne.w	194b6 <d_print_comp+0x8ae>
   18fe8:	687b      	ldr	r3, [r7, #4]
   18fea:	b30b      	cbz	r3, 19030 <d_print_comp+0x428>
   18fec:	f8d8 2118 	ldr.w	r2, [r8, #280]
   18ff0:	ab1a      	add	r3, sp, #104
   18ff2:	f843 2d18 	str.w	r2, [r3, #-24]!
   18ff6:	f8d8 2114 	ldr.w	r2, [r8, #276]
   18ffa:	f8c8 3118 	str.w	r3, [r8, #280]
   18ffe:	2300      	movs	r3, #0
   19000:	9316      	str	r3, [sp, #88]
   19002:	9217      	str	r2, [sp, #92]
   19004:	9715      	str	r7, [sp, #84]
   19006:	6879      	ldr	r1, [r7, #4]
   19008:	4640      	mov	r0, r8
   1900a:	f7ff fdfd 	bl	18c08 <d_print_comp>
   1900e:	9b14      	ldr	r3, [sp, #80]
   19010:	9a16      	ldr	r2, [sp, #88]
   19012:	f8c8 3118 	str.w	r3, [r8, #280]
   19016:	2a00      	cmp	r2, #0
   19018:	f47f ae69 	bne.w	18cee <d_print_comp+0xe6>
   1901c:	f8d8 3000 	ldr.w	r3, [r8]
   19020:	f013 0f20 	tst.w	r3, #32	; 0x20
   19024:	f47f ae63 	bne.w	18cee <d_print_comp+0xe6>
   19028:	4640      	mov	r0, r8
   1902a:	2120      	movs	r1, #32
   1902c:	f7fe fad6 	bl	175dc <d_append_char>
   19030:	f8d8 3000 	ldr.w	r3, [r8]
   19034:	f013 0f20 	tst.w	r3, #32	; 0x20
   19038:	f47f ae59 	bne.w	18cee <d_print_comp+0xe6>
   1903c:	f8d8 2118 	ldr.w	r2, [r8, #280]
   19040:	4640      	mov	r0, r8
   19042:	4639      	mov	r1, r7
   19044:	f000 fbfe 	bl	19844 <d_print_function_type>
   19048:	e651      	b.n	18cee <d_print_comp+0xe6>
   1904a:	4640      	mov	r0, r8
   1904c:	6849      	ldr	r1, [r1, #4]
   1904e:	f7ff fddb 	bl	18c08 <d_print_comp>
   19052:	68b9      	ldr	r1, [r7, #8]
   19054:	4640      	mov	r0, r8
   19056:	f7ff fdd7 	bl	18c08 <d_print_comp>
   1905a:	e648      	b.n	18cee <d_print_comp+0xe6>
   1905c:	f8d8 3000 	ldr.w	r3, [r8]
   19060:	f013 0f04 	tst.w	r3, #4	; 0x4
   19064:	f43f ae68 	beq.w	18d38 <d_print_comp+0x130>
   19068:	684a      	ldr	r2, [r1, #4]
   1906a:	688b      	ldr	r3, [r1, #8]
   1906c:	eb02 0503 	add.w	r5, r2, r3
   19070:	42aa      	cmp	r2, r5
   19072:	d30c      	bcc.n	1908e <d_print_comp+0x486>
   19074:	e63b      	b.n	18cee <d_print_comp+0xe6>
   19076:	7811      	ldrb	r1, [r2, #0]
   19078:	295f      	cmp	r1, #95
   1907a:	f000 81cd 	beq.w	19418 <d_print_comp+0x810>
   1907e:	1c54      	adds	r4, r2, #1
   19080:	4640      	mov	r0, r8
   19082:	f7fe faab 	bl	175dc <d_append_char>
   19086:	42a5      	cmp	r5, r4
   19088:	f67f ae31 	bls.w	18cee <d_print_comp+0xe6>
   1908c:	4622      	mov	r2, r4
   1908e:	ebc2 0305 	rsb	r3, r2, r5
   19092:	2b03      	cmp	r3, #3
   19094:	dcef      	bgt.n	19076 <d_print_comp+0x46e>
   19096:	4614      	mov	r4, r2
   19098:	f814 1b01 	ldrb.w	r1, [r4], #1
   1909c:	e7f0      	b.n	19080 <d_print_comp+0x478>
   1909e:	4640      	mov	r0, r8
   190a0:	f8df 1588 	ldr.w	r1, [pc, #1416]	; 1962c <d_print_comp+0xa24>
   190a4:	f7ff fca0 	bl	189e8 <d_append_string>
   190a8:	6879      	ldr	r1, [r7, #4]
   190aa:	4640      	mov	r0, r8
   190ac:	f7ff fdac 	bl	18c08 <d_print_comp>
   190b0:	e61d      	b.n	18cee <d_print_comp+0xe6>
   190b2:	4640      	mov	r0, r8
   190b4:	f8df 1578 	ldr.w	r1, [pc, #1400]	; 19630 <d_print_comp+0xa28>
   190b8:	f7ff fc96 	bl	189e8 <d_append_string>
   190bc:	6879      	ldr	r1, [r7, #4]
   190be:	4640      	mov	r0, r8
   190c0:	f7ff fda2 	bl	18c08 <d_print_comp>
   190c4:	e613      	b.n	18cee <d_print_comp+0xe6>
   190c6:	4640      	mov	r0, r8
   190c8:	f8df 1568 	ldr.w	r1, [pc, #1384]	; 19634 <d_print_comp+0xa2c>
   190cc:	f7ff fc8c 	bl	189e8 <d_append_string>
   190d0:	6879      	ldr	r1, [r7, #4]
   190d2:	4640      	mov	r0, r8
   190d4:	f7ff fd98 	bl	18c08 <d_print_comp>
   190d8:	e609      	b.n	18cee <d_print_comp+0xe6>
   190da:	4640      	mov	r0, r8
   190dc:	f8df 1558 	ldr.w	r1, [pc, #1368]	; 19638 <d_print_comp+0xa30>
   190e0:	f7ff fc82 	bl	189e8 <d_append_string>
   190e4:	6879      	ldr	r1, [r7, #4]
   190e6:	4640      	mov	r0, r8
   190e8:	f7ff fd8e 	bl	18c08 <d_print_comp>
   190ec:	e5ff      	b.n	18cee <d_print_comp+0xe6>
   190ee:	4640      	mov	r0, r8
   190f0:	f8df 1548 	ldr.w	r1, [pc, #1352]	; 1963c <d_print_comp+0xa34>
   190f4:	f7ff fc78 	bl	189e8 <d_append_string>
   190f8:	6879      	ldr	r1, [r7, #4]
   190fa:	4640      	mov	r0, r8
   190fc:	f7ff fd84 	bl	18c08 <d_print_comp>
   19100:	e5f5      	b.n	18cee <d_print_comp+0xe6>
   19102:	4640      	mov	r0, r8
   19104:	f8df 1538 	ldr.w	r1, [pc, #1336]	; 19640 <d_print_comp+0xa38>
   19108:	f7ff fc6e 	bl	189e8 <d_append_string>
   1910c:	6879      	ldr	r1, [r7, #4]
   1910e:	4640      	mov	r0, r8
   19110:	f7ff fd7a 	bl	18c08 <d_print_comp>
   19114:	e5eb      	b.n	18cee <d_print_comp+0xe6>
   19116:	4640      	mov	r0, r8
   19118:	f8df 1528 	ldr.w	r1, [pc, #1320]	; 19644 <d_print_comp+0xa3c>
   1911c:	f7ff fc64 	bl	189e8 <d_append_string>
   19120:	6879      	ldr	r1, [r7, #4]
   19122:	4640      	mov	r0, r8
   19124:	f7ff fd70 	bl	18c08 <d_print_comp>
   19128:	e5e1      	b.n	18cee <d_print_comp+0xe6>
   1912a:	4640      	mov	r0, r8
   1912c:	f8df 1518 	ldr.w	r1, [pc, #1304]	; 19648 <d_print_comp+0xa40>
   19130:	f7ff fc5a 	bl	189e8 <d_append_string>
   19134:	6879      	ldr	r1, [r7, #4]
   19136:	4640      	mov	r0, r8
   19138:	f7ff fd66 	bl	18c08 <d_print_comp>
   1913c:	e5d7      	b.n	18cee <d_print_comp+0xe6>
   1913e:	2300      	movs	r3, #0
   19140:	f8d8 5118 	ldr.w	r5, [r8, #280]
   19144:	f8c8 3118 	str.w	r3, [r8, #280]
   19148:	f8d8 3000 	ldr.w	r3, [r8]
   1914c:	684c      	ldr	r4, [r1, #4]
   1914e:	f013 0f04 	tst.w	r3, #4	; 0x4
   19152:	d005      	beq.n	19160 <d_print_comp+0x558>
   19154:	7823      	ldrb	r3, [r4, #0]
   19156:	b91b      	cbnz	r3, 19160 <d_print_comp+0x558>
   19158:	68a2      	ldr	r2, [r4, #8]
   1915a:	2a06      	cmp	r2, #6
   1915c:	f000 8239 	beq.w	195d2 <d_print_comp+0x9ca>
   19160:	4640      	mov	r0, r8
   19162:	4621      	mov	r1, r4
   19164:	f7ff fd50 	bl	18c08 <d_print_comp>
   19168:	f898 3108 	ldrb.w	r3, [r8, #264]
   1916c:	2b3c      	cmp	r3, #60
   1916e:	f000 8212 	beq.w	19596 <d_print_comp+0x98e>
   19172:	213c      	movs	r1, #60
   19174:	4640      	mov	r0, r8
   19176:	f7fe fa31 	bl	175dc <d_append_char>
   1917a:	68b9      	ldr	r1, [r7, #8]
   1917c:	4640      	mov	r0, r8
   1917e:	f7ff fd43 	bl	18c08 <d_print_comp>
   19182:	f898 3108 	ldrb.w	r3, [r8, #264]
   19186:	2b3e      	cmp	r3, #62
   19188:	f000 8200 	beq.w	1958c <d_print_comp+0x984>
   1918c:	4640      	mov	r0, r8
   1918e:	213e      	movs	r1, #62
   19190:	f7fe fa24 	bl	175dc <d_append_char>
   19194:	f8c8 5118 	str.w	r5, [r8, #280]
   19198:	e5a9      	b.n	18cee <d_print_comp+0xe6>
   1919a:	f8d8 4114 	ldr.w	r4, [r8, #276]
   1919e:	2c00      	cmp	r4, #0
   191a0:	f43f ada8 	beq.w	18cf4 <d_print_comp+0xec>
   191a4:	6863      	ldr	r3, [r4, #4]
   191a6:	6849      	ldr	r1, [r1, #4]
   191a8:	689a      	ldr	r2, [r3, #8]
   191aa:	2a00      	cmp	r2, #0
   191ac:	f43f ada2 	beq.w	18cf4 <d_print_comp+0xec>
   191b0:	7813      	ldrb	r3, [r2, #0]
   191b2:	2b28      	cmp	r3, #40
   191b4:	d009      	beq.n	191ca <d_print_comp+0x5c2>
   191b6:	e59d      	b.n	18cf4 <d_print_comp+0xec>
   191b8:	6892      	ldr	r2, [r2, #8]
   191ba:	2a00      	cmp	r2, #0
   191bc:	f43f ad9a 	beq.w	18cf4 <d_print_comp+0xec>
   191c0:	7813      	ldrb	r3, [r2, #0]
   191c2:	2b28      	cmp	r3, #40
   191c4:	f47f ad96 	bne.w	18cf4 <d_print_comp+0xec>
   191c8:	3901      	subs	r1, #1
   191ca:	2900      	cmp	r1, #0
   191cc:	dcf4      	bgt.n	191b8 <d_print_comp+0x5b0>
   191ce:	2900      	cmp	r1, #0
   191d0:	f47f ad90 	bne.w	18cf4 <d_print_comp+0xec>
   191d4:	6823      	ldr	r3, [r4, #0]
   191d6:	4640      	mov	r0, r8
   191d8:	f8c8 3114 	str.w	r3, [r8, #276]
   191dc:	6851      	ldr	r1, [r2, #4]
   191de:	f7ff fd13 	bl	18c08 <d_print_comp>
   191e2:	f8c8 4114 	str.w	r4, [r8, #276]
   191e6:	e582      	b.n	18cee <d_print_comp+0xe6>
   191e8:	4640      	mov	r0, r8
   191ea:	217e      	movs	r1, #126
   191ec:	f7fe f9f6 	bl	175dc <d_append_char>
   191f0:	68b9      	ldr	r1, [r7, #8]
   191f2:	4640      	mov	r0, r8
   191f4:	f7ff fd08 	bl	18c08 <d_print_comp>
   191f8:	e579      	b.n	18cee <d_print_comp+0xe6>
   191fa:	6849      	ldr	r1, [r1, #4]
   191fc:	4640      	mov	r0, r8
   191fe:	f7ff fd03 	bl	18c08 <d_print_comp>
   19202:	68bb      	ldr	r3, [r7, #8]
   19204:	2b00      	cmp	r3, #0
   19206:	f43f ad72 	beq.w	18cee <d_print_comp+0xe6>
   1920a:	4640      	mov	r0, r8
   1920c:	f8df 143c 	ldr.w	r1, [pc, #1084]	; 1964c <d_print_comp+0xa44>
   19210:	f7ff fbea 	bl	189e8 <d_append_string>
   19214:	68b9      	ldr	r1, [r7, #8]
   19216:	4640      	mov	r0, r8
   19218:	f7ff fcf6 	bl	18c08 <d_print_comp>
   1921c:	e567      	b.n	18cee <d_print_comp+0xe6>
   1921e:	f8df 1430 	ldr.w	r1, [pc, #1072]	; 19650 <d_print_comp+0xa48>
   19222:	4640      	mov	r0, r8
   19224:	f7ff fbe0 	bl	189e8 <d_append_string>
   19228:	687a      	ldr	r2, [r7, #4]
   1922a:	6851      	ldr	r1, [r2, #4]
   1922c:	780b      	ldrb	r3, [r1, #0]
   1922e:	3b61      	subs	r3, #97
   19230:	b2db      	uxtb	r3, r3
   19232:	2b19      	cmp	r3, #25
   19234:	d805      	bhi.n	19242 <d_print_comp+0x63a>
   19236:	2120      	movs	r1, #32
   19238:	4640      	mov	r0, r8
   1923a:	f7fe f9cf 	bl	175dc <d_append_char>
   1923e:	687a      	ldr	r2, [r7, #4]
   19240:	6851      	ldr	r1, [r2, #4]
   19242:	6892      	ldr	r2, [r2, #8]
   19244:	4640      	mov	r0, r8
   19246:	f7ff fb9b 	bl	18980 <d_append_buffer>
   1924a:	e550      	b.n	18cee <d_print_comp+0xe6>
   1924c:	f8d8 4118 	ldr.w	r4, [r8, #280]
   19250:	ab1a      	add	r3, sp, #104
   19252:	f843 4d18 	str.w	r4, [r3, #-24]!
   19256:	f8d8 2114 	ldr.w	r2, [r8, #276]
   1925a:	f8c8 3118 	str.w	r3, [r8, #280]
   1925e:	2300      	movs	r3, #0
   19260:	9316      	str	r3, [sp, #88]
   19262:	9715      	str	r7, [sp, #84]
   19264:	9217      	str	r2, [sp, #92]
   19266:	6879      	ldr	r1, [r7, #4]
   19268:	4640      	mov	r0, r8
   1926a:	f7ff fccd 	bl	18c08 <d_print_comp>
   1926e:	9b16      	ldr	r3, [sp, #88]
   19270:	b91b      	cbnz	r3, 1927a <d_print_comp+0x672>
   19272:	4640      	mov	r0, r8
   19274:	4639      	mov	r1, r7
   19276:	f000 fa09 	bl	1968c <d_print_mod>
   1927a:	9b14      	ldr	r3, [sp, #80]
   1927c:	f8c8 3118 	str.w	r3, [r8, #280]
   19280:	e535      	b.n	18cee <d_print_comp+0xe6>
   19282:	f8d8 3000 	ldr.w	r3, [r8]
   19286:	f013 0f04 	tst.w	r3, #4	; 0x4
   1928a:	f040 810d 	bne.w	194a8 <d_print_comp+0x8a0>
   1928e:	684b      	ldr	r3, [r1, #4]
   19290:	4640      	mov	r0, r8
   19292:	6819      	ldr	r1, [r3, #0]
   19294:	685a      	ldr	r2, [r3, #4]
   19296:	f7ff fb73 	bl	18980 <d_append_buffer>
   1929a:	e528      	b.n	18cee <d_print_comp+0xe6>
   1929c:	f8d8 9118 	ldr.w	r9, [r8, #280]
   192a0:	f8d8 2114 	ldr.w	r2, [r8, #276]
   192a4:	f8cd 900c 	str.w	r9, [sp, #12]
   192a8:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
   192ac:	9207      	str	r2, [sp, #28]
   192ae:	9a03      	ldr	r2, [sp, #12]
   192b0:	f84b 9d58 	str.w	r9, [fp, #-88]!
   192b4:	2300      	movs	r3, #0
   192b6:	46d9      	mov	r9, fp
   192b8:	f8c8 b118 	str.w	fp, [r8, #280]
   192bc:	9105      	str	r1, [sp, #20]
   192be:	9306      	str	r3, [sp, #24]
   192c0:	2a00      	cmp	r2, #0
   192c2:	f000 8183 	beq.w	195cc <d_print_comp+0x9c4>
   192c6:	6852      	ldr	r2, [r2, #4]
   192c8:	7813      	ldrb	r3, [r2, #0]
   192ca:	3b16      	subs	r3, #22
   192cc:	b2db      	uxtb	r3, r3
   192ce:	2b02      	cmp	r3, #2
   192d0:	f200 817c 	bhi.w	195cc <d_print_comp+0x9c4>
   192d4:	9e03      	ldr	r6, [sp, #12]
   192d6:	f04f 0a01 	mov.w	sl, #1	; 0x1
   192da:	e005      	b.n	192e8 <d_print_comp+0x6e0>
   192dc:	6872      	ldr	r2, [r6, #4]
   192de:	7813      	ldrb	r3, [r2, #0]
   192e0:	3b16      	subs	r3, #22
   192e2:	b2db      	uxtb	r3, r3
   192e4:	2b02      	cmp	r3, #2
   192e6:	d81c      	bhi.n	19322 <d_print_comp+0x71a>
   192e8:	68b3      	ldr	r3, [r6, #8]
   192ea:	b9bb      	cbnz	r3, 1931c <d_print_comp+0x714>
   192ec:	f1ba 0f03 	cmp.w	sl, #3	; 0x3
   192f0:	f200 80f4 	bhi.w	194dc <d_print_comp+0x8d4>
   192f4:	ea4f 150a 	mov.w	r5, sl, lsl #4
   192f8:	ab1a      	add	r3, sp, #104
   192fa:	eb03 0405 	add.w	r4, r3, r5
   192fe:	f1a4 0c58 	sub.w	ip, r4, #88	; 0x58
   19302:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   19306:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   1930a:	f844 9c58 	str.w	r9, [r4, #-88]
   1930e:	2201      	movs	r2, #1
   19310:	eb0b 0905 	add.w	r9, fp, r5
   19314:	f8c8 9118 	str.w	r9, [r8, #280]
   19318:	60b2      	str	r2, [r6, #8]
   1931a:	4492      	add	sl, r2
   1931c:	6836      	ldr	r6, [r6, #0]
   1931e:	2e00      	cmp	r6, #0
   19320:	d1dc      	bne.n	192dc <d_print_comp+0x6d4>
   19322:	68b9      	ldr	r1, [r7, #8]
   19324:	4640      	mov	r0, r8
   19326:	f7ff fc6f 	bl	18c08 <d_print_comp>
   1932a:	9b03      	ldr	r3, [sp, #12]
   1932c:	f8c8 3118 	str.w	r3, [r8, #280]
   19330:	9b06      	ldr	r3, [sp, #24]
   19332:	2b00      	cmp	r3, #0
   19334:	f47f acdb 	bne.w	18cee <d_print_comp+0xe6>
   19338:	f1ba 0f01 	cmp.w	sl, #1	; 0x1
   1933c:	d00e      	beq.n	1935c <d_print_comp+0x754>
   1933e:	ea4f 130a 	mov.w	r3, sl, lsl #4
   19342:	eb0b 0403 	add.w	r4, fp, r3
   19346:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   1934a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1934e:	4640      	mov	r0, r8
   19350:	f000 f99c 	bl	1968c <d_print_mod>
   19354:	3c10      	subs	r4, #16
   19356:	f1ba 0f01 	cmp.w	sl, #1	; 0x1
   1935a:	d8f4      	bhi.n	19346 <d_print_comp+0x73e>
   1935c:	f8d8 2118 	ldr.w	r2, [r8, #280]
   19360:	4640      	mov	r0, r8
   19362:	4639      	mov	r1, r7
   19364:	f7ff fb78 	bl	18a58 <d_print_array_type>
   19368:	e4c1      	b.n	18cee <d_print_comp+0xe6>
   1936a:	4640      	mov	r0, r8
   1936c:	49b9      	ldr	r1, [pc, #740]	(19654 <d_print_comp+0xa4c>)
   1936e:	f7ff fb3b 	bl	189e8 <d_append_string>
   19372:	6879      	ldr	r1, [r7, #4]
   19374:	4640      	mov	r0, r8
   19376:	f7ff fc47 	bl	18c08 <d_print_comp>
   1937a:	e4b8      	b.n	18cee <d_print_comp+0xe6>
   1937c:	f8d8 2118 	ldr.w	r2, [r8, #280]
   19380:	ab1a      	add	r3, sp, #104
   19382:	f843 2d18 	str.w	r2, [r3, #-24]!
   19386:	f8d8 2114 	ldr.w	r2, [r8, #276]
   1938a:	f8c8 3118 	str.w	r3, [r8, #280]
   1938e:	2300      	movs	r3, #0
   19390:	9316      	str	r3, [sp, #88]
   19392:	9115      	str	r1, [sp, #84]
   19394:	9217      	str	r2, [sp, #92]
   19396:	6889      	ldr	r1, [r1, #8]
   19398:	4640      	mov	r0, r8
   1939a:	f7ff fc35 	bl	18c08 <d_print_comp>
   1939e:	9b16      	ldr	r3, [sp, #88]
   193a0:	2b00      	cmp	r3, #0
   193a2:	f47f af6a 	bne.w	1927a <d_print_comp+0x672>
   193a6:	4640      	mov	r0, r8
   193a8:	2120      	movs	r1, #32
   193aa:	f7fe f917 	bl	175dc <d_append_char>
   193ae:	6879      	ldr	r1, [r7, #4]
   193b0:	4640      	mov	r0, r8
   193b2:	f7ff fc29 	bl	18c08 <d_print_comp>
   193b6:	4640      	mov	r0, r8
   193b8:	49a7      	ldr	r1, [pc, #668]	(19658 <d_print_comp+0xa50>)
   193ba:	f7ff fb15 	bl	189e8 <d_append_string>
   193be:	e75c      	b.n	1927a <d_print_comp+0x672>
   193c0:	4640      	mov	r0, r8
   193c2:	49a6      	ldr	r1, [pc, #664]	(1965c <d_print_comp+0xa54>)
   193c4:	f7ff fb10 	bl	189e8 <d_append_string>
   193c8:	6879      	ldr	r1, [r7, #4]
   193ca:	4640      	mov	r0, r8
   193cc:	f7ff fc1c 	bl	18c08 <d_print_comp>
   193d0:	e48d      	b.n	18cee <d_print_comp+0xe6>
   193d2:	4640      	mov	r0, r8
   193d4:	49a2      	ldr	r1, [pc, #648]	(19660 <d_print_comp+0xa58>)
   193d6:	f7ff fb07 	bl	189e8 <d_append_string>
   193da:	6879      	ldr	r1, [r7, #4]
   193dc:	4640      	mov	r0, r8
   193de:	f7ff fc13 	bl	18c08 <d_print_comp>
   193e2:	e484      	b.n	18cee <d_print_comp+0xe6>
   193e4:	4640      	mov	r0, r8
   193e6:	499f      	ldr	r1, [pc, #636]	(19664 <d_print_comp+0xa5c>)
   193e8:	f7ff fafe 	bl	189e8 <d_append_string>
   193ec:	6879      	ldr	r1, [r7, #4]
   193ee:	4640      	mov	r0, r8
   193f0:	f7ff fc0a 	bl	18c08 <d_print_comp>
   193f4:	e47b      	b.n	18cee <d_print_comp+0xe6>
   193f6:	4640      	mov	r0, r8
   193f8:	499b      	ldr	r1, [pc, #620]	(19668 <d_print_comp+0xa60>)
   193fa:	f7ff faf5 	bl	189e8 <d_append_string>
   193fe:	6879      	ldr	r1, [r7, #4]
   19400:	4640      	mov	r0, r8
   19402:	f7ff fc01 	bl	18c08 <d_print_comp>
   19406:	4640      	mov	r0, r8
   19408:	4998      	ldr	r1, [pc, #608]	(1966c <d_print_comp+0xa64>)
   1940a:	f7ff faed 	bl	189e8 <d_append_string>
   1940e:	68b9      	ldr	r1, [r7, #8]
   19410:	4640      	mov	r0, r8
   19412:	f7ff fbf9 	bl	18c08 <d_print_comp>
   19416:	e46a      	b.n	18cee <d_print_comp+0xe6>
   19418:	7853      	ldrb	r3, [r2, #1]
   1941a:	1c54      	adds	r4, r2, #1
   1941c:	2b5f      	cmp	r3, #95
   1941e:	f47f ae2f 	bne.w	19080 <d_print_comp+0x478>
   19422:	7893      	ldrb	r3, [r2, #2]
   19424:	2b55      	cmp	r3, #85
   19426:	f47f ae2b 	bne.w	19080 <d_print_comp+0x478>
   1942a:	1cd6      	adds	r6, r2, #3
   1942c:	42b5      	cmp	r5, r6
   1942e:	f67f ae27 	bls.w	19080 <d_print_comp+0x478>
   19432:	f04f 0c00 	mov.w	ip, #0	; 0x0
   19436:	e009      	b.n	1944c <d_print_comp+0x844>
   19438:	f1a0 0257 	sub.w	r2, r0, #87	; 0x57
   1943c:	3601      	adds	r6, #1
   1943e:	42b5      	cmp	r5, r6
   19440:	f67f ae1e 	bls.w	19080 <d_print_comp+0x478>
   19444:	ea4f 130c 	mov.w	r3, ip, lsl #4
   19448:	eb02 0c03 	add.w	ip, r2, r3
   1944c:	7830      	ldrb	r0, [r6, #0]
   1944e:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   19452:	b2d3      	uxtb	r3, r2
   19454:	2b09      	cmp	r3, #9
   19456:	d9f1      	bls.n	1943c <d_print_comp+0x834>
   19458:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1945c:	b2db      	uxtb	r3, r3
   1945e:	2b05      	cmp	r3, #5
   19460:	bf98      	it	ls
   19462:	f1a0 0237 	subls.w	r2, r0, #55	; 0x37
   19466:	d9e9      	bls.n	1943c <d_print_comp+0x834>
   19468:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1946c:	b2db      	uxtb	r3, r3
   1946e:	2b05      	cmp	r3, #5
   19470:	d9e2      	bls.n	19438 <d_print_comp+0x830>
   19472:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   19476:	bf8c      	ite	hi
   19478:	2300      	movhi	r3, #0
   1947a:	2301      	movls	r3, #1
   1947c:	285f      	cmp	r0, #95
   1947e:	bf14      	ite	ne
   19480:	2300      	movne	r3, #0
   19482:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
   19486:	2b00      	cmp	r3, #0
   19488:	f43f adfa 	beq.w	19080 <d_print_comp+0x478>
   1948c:	fa5f f18c 	uxtb.w	r1, ip
   19490:	4640      	mov	r0, r8
   19492:	f7fe f8a3 	bl	175dc <d_append_char>
   19496:	1c74      	adds	r4, r6, #1
   19498:	e5f5      	b.n	19086 <d_print_comp+0x47e>
   1949a:	4640      	mov	r0, r8
   1949c:	212e      	movs	r1, #46
   1949e:	f7fe f89d 	bl	175dc <d_append_char>
   194a2:	e43a      	b.n	18d1a <d_print_comp+0x112>
   194a4:	2400      	movs	r4, #0
   194a6:	e404      	b.n	18cb2 <d_print_comp+0xaa>
   194a8:	684b      	ldr	r3, [r1, #4]
   194aa:	4640      	mov	r0, r8
   194ac:	6899      	ldr	r1, [r3, #8]
   194ae:	68da      	ldr	r2, [r3, #12]
   194b0:	f7ff fa66 	bl	18980 <d_append_buffer>
   194b4:	e41b      	b.n	18cee <d_print_comp+0xe6>
   194b6:	f8d8 2118 	ldr.w	r2, [r8, #280]
   194ba:	4640      	mov	r0, r8
   194bc:	f000 f9c2 	bl	19844 <d_print_function_type>
   194c0:	e592      	b.n	18fe8 <d_print_comp+0x3e0>
   194c2:	4640      	mov	r0, r8
   194c4:	2128      	movs	r1, #40
   194c6:	f7fe f889 	bl	175dc <d_append_char>
   194ca:	6879      	ldr	r1, [r7, #4]
   194cc:	4640      	mov	r0, r8
   194ce:	f000 faa7 	bl	19a20 <d_print_cast>
   194d2:	4640      	mov	r0, r8
   194d4:	2129      	movs	r1, #41
   194d6:	f7fe f881 	bl	175dc <d_append_char>
   194da:	e43b      	b.n	18d54 <d_print_comp+0x14c>
   194dc:	3301      	adds	r3, #1
   194de:	f8c8 311c 	str.w	r3, [r8, #284]
   194e2:	e404      	b.n	18cee <d_print_comp+0xe6>
   194e4:	4640      	mov	r0, r8
   194e6:	2120      	movs	r1, #32
   194e8:	f7fe f878 	bl	175dc <d_append_char>
   194ec:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   194f0:	4640      	mov	r0, r8
   194f2:	f000 f8cb 	bl	1968c <d_print_mod>
   194f6:	e553      	b.n	18fa0 <d_print_comp+0x398>
   194f8:	688a      	ldr	r2, [r1, #8]
   194fa:	7813      	ldrb	r3, [r2, #0]
   194fc:	2b00      	cmp	r3, #0
   194fe:	f47f abd8 	bne.w	18cb2 <d_print_comp+0xaa>
   19502:	6893      	ldr	r3, [r2, #8]
   19504:	2b01      	cmp	r3, #1
   19506:	f47f abd4 	bne.w	18cb2 <d_print_comp+0xaa>
   1950a:	2832      	cmp	r0, #50
   1950c:	f47f abd1 	bne.w	18cb2 <d_print_comp+0xaa>
   19510:	6853      	ldr	r3, [r2, #4]
   19512:	781b      	ldrb	r3, [r3, #0]
   19514:	2b30      	cmp	r3, #48
   19516:	d077      	beq.n	19608 <d_print_comp+0xa00>
   19518:	2b31      	cmp	r3, #49
   1951a:	f47f abca 	bne.w	18cb2 <d_print_comp+0xaa>
   1951e:	4640      	mov	r0, r8
   19520:	4953      	ldr	r1, [pc, #332]	(19670 <d_print_comp+0xa68>)
   19522:	f7ff fa61 	bl	189e8 <d_append_string>
   19526:	f7ff bbe2 	b.w	18cee <d_print_comp+0xe6>
   1952a:	6889      	ldr	r1, [r1, #8]
   1952c:	780b      	ldrb	r3, [r1, #0]
   1952e:	2b00      	cmp	r3, #0
   19530:	f47f abbf 	bne.w	18cb2 <d_print_comp+0xaa>
   19534:	2833      	cmp	r0, #51
   19536:	d061      	beq.n	195fc <d_print_comp+0x9f4>
   19538:	4640      	mov	r0, r8
   1953a:	f7ff fb65 	bl	18c08 <d_print_comp>
   1953e:	1ea3      	subs	r3, r4, #2
   19540:	2b04      	cmp	r3, #4
   19542:	f63f abd4 	bhi.w	18cee <d_print_comp+0xe6>
   19546:	e8df f003 	tbb	[pc, r3]
   1954a:	151b      	.short	0x151b
   1954c:	0003090f 	.word	0x0003090f
   19550:	4640      	mov	r0, r8
   19552:	4948      	ldr	r1, [pc, #288]	(19674 <d_print_comp+0xa6c>)
   19554:	f7ff fa48 	bl	189e8 <d_append_string>
   19558:	f7ff bbc9 	b.w	18cee <d_print_comp+0xe6>
   1955c:	4640      	mov	r0, r8
   1955e:	4946      	ldr	r1, [pc, #280]	(19678 <d_print_comp+0xa70>)
   19560:	f7ff fa42 	bl	189e8 <d_append_string>
   19564:	f7ff bbc3 	b.w	18cee <d_print_comp+0xe6>
   19568:	4640      	mov	r0, r8
   1956a:	4944      	ldr	r1, [pc, #272]	(1967c <d_print_comp+0xa74>)
   1956c:	f7ff fa3c 	bl	189e8 <d_append_string>
   19570:	f7ff bbbd 	b.w	18cee <d_print_comp+0xe6>
   19574:	4640      	mov	r0, r8
   19576:	216c      	movs	r1, #108
   19578:	f7fe f830 	bl	175dc <d_append_char>
   1957c:	f7ff bbb7 	b.w	18cee <d_print_comp+0xe6>
   19580:	4640      	mov	r0, r8
   19582:	2175      	movs	r1, #117
   19584:	f7fe f82a 	bl	175dc <d_append_char>
   19588:	f7ff bbb1 	b.w	18cee <d_print_comp+0xe6>
   1958c:	4640      	mov	r0, r8
   1958e:	2120      	movs	r1, #32
   19590:	f7fe f824 	bl	175dc <d_append_char>
   19594:	e5fa      	b.n	1918c <d_print_comp+0x584>
   19596:	4640      	mov	r0, r8
   19598:	2120      	movs	r1, #32
   1959a:	f7fe f81f 	bl	175dc <d_append_char>
   1959e:	e5e8      	b.n	19172 <d_print_comp+0x56a>
   195a0:	4640      	mov	r0, r8
   195a2:	212d      	movs	r1, #45
   195a4:	f7fe f81a 	bl	175dc <d_append_char>
   195a8:	f7ff bb93 	b.w	18cd2 <d_print_comp+0xca>
   195ac:	6852      	ldr	r2, [r2, #4]
   195ae:	6893      	ldr	r3, [r2, #8]
   195b0:	2b01      	cmp	r3, #1
   195b2:	f47f abe5 	bne.w	18d80 <d_print_comp+0x178>
   195b6:	6853      	ldr	r3, [r2, #4]
   195b8:	781a      	ldrb	r2, [r3, #0]
   195ba:	2a3e      	cmp	r2, #62
   195bc:	f47f abe0 	bne.w	18d80 <d_print_comp+0x178>
   195c0:	4640      	mov	r0, r8
   195c2:	2128      	movs	r1, #40
   195c4:	f7fe f80a 	bl	175dc <d_append_char>
   195c8:	f7ff bbda 	b.w	18d80 <d_print_comp+0x178>
   195cc:	f04f 0a01 	mov.w	sl, #1	; 0x1
   195d0:	e6a7      	b.n	19322 <d_print_comp+0x71a>
   195d2:	6860      	ldr	r0, [r4, #4]
   195d4:	492a      	ldr	r1, [pc, #168]	(19680 <d_print_comp+0xa78>)
   195d6:	f007 fb43 	bl	20c60 <strncmp>
   195da:	2800      	cmp	r0, #0
   195dc:	f47f adc0 	bne.w	19160 <d_print_comp+0x558>
   195e0:	68b9      	ldr	r1, [r7, #8]
   195e2:	4640      	mov	r0, r8
   195e4:	f7ff fb10 	bl	18c08 <d_print_comp>
   195e8:	4640      	mov	r0, r8
   195ea:	4926      	ldr	r1, [pc, #152]	(19684 <d_print_comp+0xa7c>)
   195ec:	f7ff f9fc 	bl	189e8 <d_append_string>
   195f0:	f8c8 5118 	str.w	r5, [r8, #280]
   195f4:	f7ff bb7b 	b.w	18cee <d_print_comp+0xe6>
   195f8:	2601      	movs	r6, #1
   195fa:	e472      	b.n	18ee2 <d_print_comp+0x2da>
   195fc:	212d      	movs	r1, #45
   195fe:	4640      	mov	r0, r8
   19600:	f7fd ffec 	bl	175dc <d_append_char>
   19604:	68b9      	ldr	r1, [r7, #8]
   19606:	e797      	b.n	19538 <d_print_comp+0x930>
   19608:	4640      	mov	r0, r8
   1960a:	491f      	ldr	r1, [pc, #124]	(19688 <d_print_comp+0xa80>)
   1960c:	f7ff f9ec 	bl	189e8 <d_append_string>
   19610:	f7ff bb6d 	b.w	18cee <d_print_comp+0xe6>
   19614:	00022968 	.word	0x00022968
   19618:	00022ac0 	.word	0x00022ac0
   1961c:	00022a94 	.word	0x00022a94
   19620:	00022a98 	.word	0x00022a98
   19624:	00022a9c 	.word	0x00022a9c
   19628:	00022a88 	.word	0x00022a88
   1962c:	000229d8 	.word	0x000229d8
   19630:	000229ec 	.word	0x000229ec
   19634:	000229f0 	.word	0x000229f0
   19638:	00022a04 	.word	0x00022a04
   1963c:	00022a20 	.word	0x00022a20
   19640:	00022a30 	.word	0x00022a30
   19644:	00022a44 	.word	0x00022a44
   19648:	00022a60 	.word	0x00022a60
   1964c:	00022a78 	.word	0x00022a78
   19650:	00022a7c 	.word	0x00022a7c
   19654:	00022984 	.word	0x00022984
   19658:	00022a74 	.word	0x00022a74
   1965c:	00022978 	.word	0x00022978
   19660:	000229b4 	.word	0x000229b4
   19664:	000229c4 	.word	0x000229c4
   19668:	00022990 	.word	0x00022990
   1966c:	000229ac 	.word	0x000229ac
   19670:	00022ab8 	.word	0x00022ab8
   19674:	00022aac 	.word	0x00022aac
   19678:	00022aa8 	.word	0x00022aa8
   1967c:	00022aa4 	.word	0x00022aa4
   19680:	0002296c 	.word	0x0002296c
   19684:	00022974 	.word	0x00022974
   19688:	00022ab0 	.word	0x00022ab0

0001968c <d_print_mod>:
   1968c:	b530      	push	{r4, r5, lr}
   1968e:	780b      	ldrb	r3, [r1, #0]
   19690:	b081      	sub	sp, #4
   19692:	3b03      	subs	r3, #3
   19694:	4604      	mov	r4, r0
   19696:	460d      	mov	r5, r1
   19698:	2b23      	cmp	r3, #35
   1969a:	d813      	bhi.n	196c4 <d_print_mod+0x38>
   1969c:	e8df f003 	tbb	[pc, r3]
   196a0:	12121216 	.word	0x12121216
   196a4:	12121212 	.word	0x12121212
   196a8:	12121212 	.word	0x12121212
   196ac:	12121212 	.word	0x12121212
   196b0:	1a121212 	.word	0x1a121212
   196b4:	1e1a221e 	.word	0x1e1a221e
   196b8:	362e2622 	.word	0x362e2622
   196bc:	12423e3a 	.word	0x12423e3a
   196c0:	46121212 	.word	0x46121212
   196c4:	f7ff faa0 	bl	18c08 <d_print_comp>
   196c8:	b001      	add	sp, #4
   196ca:	bd30      	pop	{r4, r5, pc}
   196cc:	6849      	ldr	r1, [r1, #4]
   196ce:	f7ff fa9b 	bl	18c08 <d_print_comp>
   196d2:	e7f9      	b.n	196c8 <d_print_mod+0x3c>
   196d4:	491d      	ldr	r1, [pc, #116]	(1974c <d_print_mod+0xc0>)
   196d6:	f7ff f987 	bl	189e8 <d_append_string>
   196da:	e7f5      	b.n	196c8 <d_print_mod+0x3c>
   196dc:	491c      	ldr	r1, [pc, #112]	(19750 <d_print_mod+0xc4>)
   196de:	f7ff f983 	bl	189e8 <d_append_string>
   196e2:	e7f1      	b.n	196c8 <d_print_mod+0x3c>
   196e4:	491b      	ldr	r1, [pc, #108]	(19754 <d_print_mod+0xc8>)
   196e6:	f7ff f97f 	bl	189e8 <d_append_string>
   196ea:	e7ed      	b.n	196c8 <d_print_mod+0x3c>
   196ec:	2120      	movs	r1, #32
   196ee:	f7fd ff75 	bl	175dc <d_append_char>
   196f2:	68a9      	ldr	r1, [r5, #8]
   196f4:	4620      	mov	r0, r4
   196f6:	f7ff fa87 	bl	18c08 <d_print_comp>
   196fa:	e7e5      	b.n	196c8 <d_print_mod+0x3c>
   196fc:	6803      	ldr	r3, [r0, #0]
   196fe:	f013 0f04 	tst.w	r3, #4	; 0x4
   19702:	d1e1      	bne.n	196c8 <d_print_mod+0x3c>
   19704:	212a      	movs	r1, #42
   19706:	f7fd ff69 	bl	175dc <d_append_char>
   1970a:	e7dd      	b.n	196c8 <d_print_mod+0x3c>
   1970c:	2126      	movs	r1, #38
   1970e:	f7fd ff65 	bl	175dc <d_append_char>
   19712:	e7d9      	b.n	196c8 <d_print_mod+0x3c>
   19714:	4910      	ldr	r1, [pc, #64]	(19758 <d_print_mod+0xcc>)
   19716:	f7ff f967 	bl	189e8 <d_append_string>
   1971a:	e7d5      	b.n	196c8 <d_print_mod+0x3c>
   1971c:	490f      	ldr	r1, [pc, #60]	(1975c <d_print_mod+0xd0>)
   1971e:	f7ff f963 	bl	189e8 <d_append_string>
   19722:	e7d1      	b.n	196c8 <d_print_mod+0x3c>
   19724:	490e      	ldr	r1, [pc, #56]	(19760 <d_print_mod+0xd4>)
   19726:	f7ff f95f 	bl	189e8 <d_append_string>
   1972a:	e7cd      	b.n	196c8 <d_print_mod+0x3c>
   1972c:	f890 3108 	ldrb.w	r3, [r0, #264]
   19730:	2b28      	cmp	r3, #40
   19732:	d002      	beq.n	1973a <d_print_mod+0xae>
   19734:	2120      	movs	r1, #32
   19736:	f7fd ff51 	bl	175dc <d_append_char>
   1973a:	6869      	ldr	r1, [r5, #4]
   1973c:	4620      	mov	r0, r4
   1973e:	f7ff fa63 	bl	18c08 <d_print_comp>
   19742:	4620      	mov	r0, r4
   19744:	4907      	ldr	r1, [pc, #28]	(19764 <d_print_mod+0xd8>)
   19746:	f7ff f94f 	bl	189e8 <d_append_string>
   1974a:	e7bd      	b.n	196c8 <d_print_mod+0x3c>
   1974c:	00022ad0 	.word	0x00022ad0
   19750:	00022adc 	.word	0x00022adc
   19754:	00022ae8 	.word	0x00022ae8
   19758:	00022af0 	.word	0x00022af0
   1975c:	00022af4 	.word	0x00022af4
   19760:	00022b00 	.word	0x00022b00
   19764:	00022a74 	.word	0x00022a74

00019768 <d_print_mod_list>:
   19768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1976c:	4606      	mov	r6, r0
   1976e:	460d      	mov	r5, r1
   19770:	4614      	mov	r4, r2
   19772:	2900      	cmp	r1, #0
   19774:	d02d      	beq.n	197d2 <d_print_mod_list+0x6a>
   19776:	f8d0 311c 	ldr.w	r3, [r0, #284]
   1977a:	2b00      	cmp	r3, #0
   1977c:	d129      	bne.n	197d2 <d_print_mod_list+0x6a>
   1977e:	f04f 0801 	mov.w	r8, #1	; 0x1
   19782:	e018      	b.n	197b6 <d_print_mod_list+0x4e>
   19784:	6869      	ldr	r1, [r5, #4]
   19786:	68eb      	ldr	r3, [r5, #12]
   19788:	f8d6 7114 	ldr.w	r7, [r6, #276]
   1978c:	f8c6 3114 	str.w	r3, [r6, #276]
   19790:	780b      	ldrb	r3, [r1, #0]
   19792:	f8c5 8008 	str.w	r8, [r5, #8]
   19796:	2b24      	cmp	r3, #36
   19798:	d01d      	beq.n	197d6 <d_print_mod_list+0x6e>
   1979a:	2b25      	cmp	r3, #37
   1979c:	d022      	beq.n	197e4 <d_print_mod_list+0x7c>
   1979e:	2b02      	cmp	r3, #2
   197a0:	d027      	beq.n	197f2 <d_print_mod_list+0x8a>
   197a2:	4630      	mov	r0, r6
   197a4:	f7ff ff72 	bl	1968c <d_print_mod>
   197a8:	f8c6 7114 	str.w	r7, [r6, #276]
   197ac:	682d      	ldr	r5, [r5, #0]
   197ae:	b185      	cbz	r5, 197d2 <d_print_mod_list+0x6a>
   197b0:	f8d6 311c 	ldr.w	r3, [r6, #284]
   197b4:	b96b      	cbnz	r3, 197d2 <d_print_mod_list+0x6a>
   197b6:	68ab      	ldr	r3, [r5, #8]
   197b8:	2b00      	cmp	r3, #0
   197ba:	d1f7      	bne.n	197ac <d_print_mod_list+0x44>
   197bc:	2c00      	cmp	r4, #0
   197be:	d1e1      	bne.n	19784 <d_print_mod_list+0x1c>
   197c0:	6869      	ldr	r1, [r5, #4]
   197c2:	780b      	ldrb	r3, [r1, #0]
   197c4:	3b19      	subs	r3, #25
   197c6:	b2db      	uxtb	r3, r3
   197c8:	2b02      	cmp	r3, #2
   197ca:	d8dc      	bhi.n	19786 <d_print_mod_list+0x1e>
   197cc:	682d      	ldr	r5, [r5, #0]
   197ce:	2d00      	cmp	r5, #0
   197d0:	d1ee      	bne.n	197b0 <d_print_mod_list+0x48>
   197d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   197d6:	682a      	ldr	r2, [r5, #0]
   197d8:	4630      	mov	r0, r6
   197da:	f000 f833 	bl	19844 <d_print_function_type>
   197de:	f8c6 7114 	str.w	r7, [r6, #276]
   197e2:	e7f6      	b.n	197d2 <d_print_mod_list+0x6a>
   197e4:	682a      	ldr	r2, [r5, #0]
   197e6:	4630      	mov	r0, r6
   197e8:	f7ff f936 	bl	18a58 <d_print_array_type>
   197ec:	f8c6 7114 	str.w	r7, [r6, #276]
   197f0:	e7ef      	b.n	197d2 <d_print_mod_list+0x6a>
   197f2:	3b02      	subs	r3, #2
   197f4:	f8d6 4118 	ldr.w	r4, [r6, #280]
   197f8:	f8c6 3118 	str.w	r3, [r6, #280]
   197fc:	6849      	ldr	r1, [r1, #4]
   197fe:	4630      	mov	r0, r6
   19800:	f7ff fa02 	bl	18c08 <d_print_comp>
   19804:	6833      	ldr	r3, [r6, #0]
   19806:	f8c6 4118 	str.w	r4, [r6, #280]
   1980a:	f013 0f04 	tst.w	r3, #4	; 0x4
   1980e:	d112      	bne.n	19836 <d_print_mod_list+0xce>
   19810:	4630      	mov	r0, r6
   19812:	490b      	ldr	r1, [pc, #44]	(19840 <d_print_mod_list+0xd8>)
   19814:	f7ff f8e8 	bl	189e8 <d_append_string>
   19818:	686a      	ldr	r2, [r5, #4]
   1981a:	6891      	ldr	r1, [r2, #8]
   1981c:	e000      	b.n	19820 <d_print_mod_list+0xb8>
   1981e:	6849      	ldr	r1, [r1, #4]
   19820:	780b      	ldrb	r3, [r1, #0]
   19822:	3b19      	subs	r3, #25
   19824:	b2db      	uxtb	r3, r3
   19826:	2b02      	cmp	r3, #2
   19828:	d9f9      	bls.n	1981e <d_print_mod_list+0xb6>
   1982a:	4630      	mov	r0, r6
   1982c:	f7ff f9ec 	bl	18c08 <d_print_comp>
   19830:	f8c6 7114 	str.w	r7, [r6, #276]
   19834:	e7cd      	b.n	197d2 <d_print_mod_list+0x6a>
   19836:	4630      	mov	r0, r6
   19838:	212e      	movs	r1, #46
   1983a:	f7fd fecf 	bl	175dc <d_append_char>
   1983e:	e7eb      	b.n	19818 <d_print_mod_list+0xb0>
   19840:	00022968 	.word	0x00022968

00019844 <d_print_function_type>:
   19844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19848:	4605      	mov	r5, r0
   1984a:	4688      	mov	r8, r1
   1984c:	4616      	mov	r6, r2
   1984e:	2a00      	cmp	r2, #0
   19850:	f000 80de 	beq.w	19a10 <d_print_function_type+0x1cc>
   19854:	6893      	ldr	r3, [r2, #8]
   19856:	2b00      	cmp	r3, #0
   19858:	f040 80da 	bne.w	19a10 <d_print_function_type+0x1cc>
   1985c:	4611      	mov	r1, r2
   1985e:	2001      	movs	r0, #1
   19860:	684b      	ldr	r3, [r1, #4]
   19862:	781a      	ldrb	r2, [r3, #0]
   19864:	3a16      	subs	r2, #22
   19866:	b2d3      	uxtb	r3, r2
   19868:	2b10      	cmp	r3, #16
   1986a:	d865      	bhi.n	19938 <d_print_function_type+0xf4>
   1986c:	b252      	sxtb	r2, r2
   1986e:	fa10 f202 	lsls.w	r2, r0, r2
   19872:	4b6a      	ldr	r3, [pc, #424]	(19a1c <d_print_function_type+0x1d8>)
   19874:	ea02 0303 	and.w	r3, r2, r3
   19878:	2b00      	cmp	r3, #0
   1987a:	d16c      	bne.n	19956 <d_print_function_type+0x112>
   1987c:	f412 7f60 	tst.w	r2, #896	; 0x380
   19880:	d05a      	beq.n	19938 <d_print_function_type+0xf4>
   19882:	f895 3108 	ldrb.w	r3, [r5, #264]
   19886:	2b28      	cmp	r3, #40
   19888:	d001      	beq.n	1988e <d_print_function_type+0x4a>
   1988a:	2b2a      	cmp	r3, #42
   1988c:	d165      	bne.n	1995a <d_print_function_type+0x116>
   1988e:	f8d5 c104 	ldr.w	ip, [r5, #260]
   19892:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   19896:	d076      	beq.n	19986 <d_print_function_type+0x142>
   19898:	2128      	movs	r1, #40
   1989a:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1989e:	eb05 030c 	add.w	r3, r5, ip
   198a2:	2400      	movs	r4, #0
   198a4:	7119      	strb	r1, [r3, #4]
   198a6:	f8c5 2104 	str.w	r2, [r5, #260]
   198aa:	f885 1108 	strb.w	r1, [r5, #264]
   198ae:	f8d5 7118 	ldr.w	r7, [r5, #280]
   198b2:	4628      	mov	r0, r5
   198b4:	f8c5 4118 	str.w	r4, [r5, #280]
   198b8:	4631      	mov	r1, r6
   198ba:	4622      	mov	r2, r4
   198bc:	f7ff ff54 	bl	19768 <d_print_mod_list>
   198c0:	f8d5 c104 	ldr.w	ip, [r5, #260]
   198c4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   198c8:	d06b      	beq.n	199a2 <d_print_function_type+0x15e>
   198ca:	2129      	movs	r1, #41
   198cc:	eb05 030c 	add.w	r3, r5, ip
   198d0:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   198d4:	7119      	strb	r1, [r3, #4]
   198d6:	f8c5 2104 	str.w	r2, [r5, #260]
   198da:	f885 1108 	strb.w	r1, [r5, #264]
   198de:	f8d5 c104 	ldr.w	ip, [r5, #260]
   198e2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   198e6:	d077      	beq.n	199d8 <d_print_function_type+0x194>
   198e8:	2128      	movs	r1, #40
   198ea:	eb05 030c 	add.w	r3, r5, ip
   198ee:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   198f2:	7119      	strb	r1, [r3, #4]
   198f4:	f8c5 2104 	str.w	r2, [r5, #260]
   198f8:	f885 1108 	strb.w	r1, [r5, #264]
   198fc:	f8d8 1008 	ldr.w	r1, [r8, #8]
   19900:	b111      	cbz	r1, 19908 <d_print_function_type+0xc4>
   19902:	4628      	mov	r0, r5
   19904:	f7ff f980 	bl	18c08 <d_print_comp>
   19908:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1990c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   19910:	d054      	beq.n	199bc <d_print_function_type+0x178>
   19912:	2129      	movs	r1, #41
   19914:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   19918:	eb05 030c 	add.w	r3, r5, ip
   1991c:	7119      	strb	r1, [r3, #4]
   1991e:	f8c5 2104 	str.w	r2, [r5, #260]
   19922:	f885 1108 	strb.w	r1, [r5, #264]
   19926:	4628      	mov	r0, r5
   19928:	4631      	mov	r1, r6
   1992a:	2201      	movs	r2, #1
   1992c:	f7ff ff1c 	bl	19768 <d_print_mod_list>
   19930:	f8c5 7118 	str.w	r7, [r5, #280]
   19934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19938:	6809      	ldr	r1, [r1, #0]
   1993a:	b111      	cbz	r1, 19942 <d_print_function_type+0xfe>
   1993c:	688b      	ldr	r3, [r1, #8]
   1993e:	2b00      	cmp	r3, #0
   19940:	d08e      	beq.n	19860 <d_print_function_type+0x1c>
   19942:	2200      	movs	r2, #0
   19944:	f8d5 7118 	ldr.w	r7, [r5, #280]
   19948:	4628      	mov	r0, r5
   1994a:	f8c5 2118 	str.w	r2, [r5, #280]
   1994e:	4631      	mov	r1, r6
   19950:	f7ff ff0a 	bl	19768 <d_print_mod_list>
   19954:	e7c3      	b.n	198de <d_print_function_type+0x9a>
   19956:	f895 3108 	ldrb.w	r3, [r5, #264]
   1995a:	2b20      	cmp	r3, #32
   1995c:	d097      	beq.n	1988e <d_print_function_type+0x4a>
   1995e:	f8d5 c104 	ldr.w	ip, [r5, #260]
   19962:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   19966:	d045      	beq.n	199f4 <d_print_function_type+0x1b0>
   19968:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1996c:	f8c5 2104 	str.w	r2, [r5, #260]
   19970:	eb05 030c 	add.w	r3, r5, ip
   19974:	f8d5 c104 	ldr.w	ip, [r5, #260]
   19978:	2120      	movs	r1, #32
   1997a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1997e:	7119      	strb	r1, [r3, #4]
   19980:	f885 1108 	strb.w	r1, [r5, #264]
   19984:	d188      	bne.n	19898 <d_print_function_type+0x54>
   19986:	2400      	movs	r4, #0
   19988:	4661      	mov	r1, ip
   1998a:	f885 4103 	strb.w	r4, [r5, #259]
   1998e:	1d28      	adds	r0, r5, #4
   19990:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19994:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19998:	4798      	blx	r3
   1999a:	f8c5 4104 	str.w	r4, [r5, #260]
   1999e:	46a4      	mov	ip, r4
   199a0:	e77a      	b.n	19898 <d_print_function_type+0x54>
   199a2:	4661      	mov	r1, ip
   199a4:	f885 4103 	strb.w	r4, [r5, #259]
   199a8:	1d28      	adds	r0, r5, #4
   199aa:	f8d5 2110 	ldr.w	r2, [r5, #272]
   199ae:	f8d5 310c 	ldr.w	r3, [r5, #268]
   199b2:	4798      	blx	r3
   199b4:	f8c5 4104 	str.w	r4, [r5, #260]
   199b8:	46a4      	mov	ip, r4
   199ba:	e786      	b.n	198ca <d_print_function_type+0x86>
   199bc:	2400      	movs	r4, #0
   199be:	4661      	mov	r1, ip
   199c0:	f885 4103 	strb.w	r4, [r5, #259]
   199c4:	1d28      	adds	r0, r5, #4
   199c6:	f8d5 2110 	ldr.w	r2, [r5, #272]
   199ca:	f8d5 310c 	ldr.w	r3, [r5, #268]
   199ce:	4798      	blx	r3
   199d0:	f8c5 4104 	str.w	r4, [r5, #260]
   199d4:	46a4      	mov	ip, r4
   199d6:	e79c      	b.n	19912 <d_print_function_type+0xce>
   199d8:	2400      	movs	r4, #0
   199da:	4661      	mov	r1, ip
   199dc:	f885 4103 	strb.w	r4, [r5, #259]
   199e0:	1d28      	adds	r0, r5, #4
   199e2:	f8d5 2110 	ldr.w	r2, [r5, #272]
   199e6:	f8d5 310c 	ldr.w	r3, [r5, #268]
   199ea:	4798      	blx	r3
   199ec:	f8c5 4104 	str.w	r4, [r5, #260]
   199f0:	46a4      	mov	ip, r4
   199f2:	e779      	b.n	198e8 <d_print_function_type+0xa4>
   199f4:	2400      	movs	r4, #0
   199f6:	4661      	mov	r1, ip
   199f8:	f885 4103 	strb.w	r4, [r5, #259]
   199fc:	1d28      	adds	r0, r5, #4
   199fe:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19a02:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19a06:	4798      	blx	r3
   19a08:	f8c5 4104 	str.w	r4, [r5, #260]
   19a0c:	46a4      	mov	ip, r4
   19a0e:	e7ab      	b.n	19968 <d_print_function_type+0x124>
   19a10:	f8d8 3004 	ldr.w	r3, [r8, #4]
   19a14:	2b00      	cmp	r3, #0
   19a16:	f47f af34 	bne.w	19882 <d_print_function_type+0x3e>
   19a1a:	e792      	b.n	19942 <d_print_function_type+0xfe>
   19a1c:	00010c47 	.word	0x00010c47

00019a20 <d_print_cast>:
   19a20:	b5f0      	push	{r4, r5, r6, r7, lr}
   19a22:	460e      	mov	r6, r1
   19a24:	6849      	ldr	r1, [r1, #4]
   19a26:	b083      	sub	sp, #12
   19a28:	780b      	ldrb	r3, [r1, #0]
   19a2a:	4605      	mov	r5, r0
   19a2c:	2b04      	cmp	r3, #4
   19a2e:	d003      	beq.n	19a38 <d_print_cast+0x18>
   19a30:	f7ff f8ea 	bl	18c08 <d_print_comp>
   19a34:	b003      	add	sp, #12
   19a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19a38:	f8d0 2114 	ldr.w	r2, [r0, #276]
   19a3c:	2300      	movs	r3, #0
   19a3e:	f8d0 7118 	ldr.w	r7, [r0, #280]
   19a42:	f8c0 3118 	str.w	r3, [r0, #280]
   19a46:	ab02      	add	r3, sp, #8
   19a48:	f843 2d08 	str.w	r2, [r3, #-8]!
   19a4c:	f8c0 3114 	str.w	r3, [r0, #276]
   19a50:	9101      	str	r1, [sp, #4]
   19a52:	6849      	ldr	r1, [r1, #4]
   19a54:	f7ff f8d8 	bl	18c08 <d_print_comp>
   19a58:	f895 2108 	ldrb.w	r2, [r5, #264]
   19a5c:	9b00      	ldr	r3, [sp, #0]
   19a5e:	2a3c      	cmp	r2, #60
   19a60:	f8c5 3114 	str.w	r3, [r5, #276]
   19a64:	d045      	beq.n	19af2 <d_print_cast+0xd2>
   19a66:	f8d5 c104 	ldr.w	ip, [r5, #260]
   19a6a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   19a6e:	d024      	beq.n	19aba <d_print_cast+0x9a>
   19a70:	213c      	movs	r1, #60
   19a72:	f10c 0301 	add.w	r3, ip, #1	; 0x1
   19a76:	eb05 020c 	add.w	r2, r5, ip
   19a7a:	7111      	strb	r1, [r2, #4]
   19a7c:	f8c5 3104 	str.w	r3, [r5, #260]
   19a80:	f885 1108 	strb.w	r1, [r5, #264]
   19a84:	6873      	ldr	r3, [r6, #4]
   19a86:	4628      	mov	r0, r5
   19a88:	6899      	ldr	r1, [r3, #8]
   19a8a:	f7ff f8bd 	bl	18c08 <d_print_comp>
   19a8e:	f895 3108 	ldrb.w	r3, [r5, #264]
   19a92:	2b3e      	cmp	r3, #62
   19a94:	d032      	beq.n	19afc <d_print_cast+0xdc>
   19a96:	f8d5 c104 	ldr.w	ip, [r5, #260]
   19a9a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   19a9e:	d01a      	beq.n	19ad6 <d_print_cast+0xb6>
   19aa0:	213e      	movs	r1, #62
   19aa2:	eb05 030c 	add.w	r3, r5, ip
   19aa6:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   19aaa:	7119      	strb	r1, [r3, #4]
   19aac:	f8c5 2104 	str.w	r2, [r5, #260]
   19ab0:	f885 1108 	strb.w	r1, [r5, #264]
   19ab4:	f8c5 7118 	str.w	r7, [r5, #280]
   19ab8:	e7bc      	b.n	19a34 <d_print_cast+0x14>
   19aba:	2400      	movs	r4, #0
   19abc:	4661      	mov	r1, ip
   19abe:	f885 4103 	strb.w	r4, [r5, #259]
   19ac2:	1d28      	adds	r0, r5, #4
   19ac4:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19ac8:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19acc:	4798      	blx	r3
   19ace:	f8c5 4104 	str.w	r4, [r5, #260]
   19ad2:	46a4      	mov	ip, r4
   19ad4:	e7cc      	b.n	19a70 <d_print_cast+0x50>
   19ad6:	2400      	movs	r4, #0
   19ad8:	4661      	mov	r1, ip
   19ada:	f885 4103 	strb.w	r4, [r5, #259]
   19ade:	1d28      	adds	r0, r5, #4
   19ae0:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19ae4:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19ae8:	4798      	blx	r3
   19aea:	f8c5 4104 	str.w	r4, [r5, #260]
   19aee:	46a4      	mov	ip, r4
   19af0:	e7d6      	b.n	19aa0 <d_print_cast+0x80>
   19af2:	4628      	mov	r0, r5
   19af4:	2120      	movs	r1, #32
   19af6:	f7fd fd71 	bl	175dc <d_append_char>
   19afa:	e7b4      	b.n	19a66 <d_print_cast+0x46>
   19afc:	4628      	mov	r0, r5
   19afe:	2120      	movs	r1, #32
   19b00:	f7fd fd6c 	bl	175dc <d_append_char>
   19b04:	e7c7      	b.n	19a96 <d_print_cast+0x76>
   19b06:	46c0      	nop			(mov r8, r8)

00019b08 <d_print_expr_op>:
   19b08:	780b      	ldrb	r3, [r1, #0]
   19b0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19b0e:	2b29      	cmp	r3, #41
   19b10:	4604      	mov	r4, r0
   19b12:	d003      	beq.n	19b1c <d_print_expr_op+0x14>
   19b14:	f7ff f878 	bl	18c08 <d_print_comp>
   19b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19b1c:	684b      	ldr	r3, [r1, #4]
   19b1e:	689f      	ldr	r7, [r3, #8]
   19b20:	f8d3 8004 	ldr.w	r8, [r3, #4]
   19b24:	2f00      	cmp	r7, #0
   19b26:	d0f7      	beq.n	19b18 <d_print_expr_op+0x10>
   19b28:	2500      	movs	r5, #0
   19b2a:	f100 0904 	add.w	r9, r0, #4	; 0x4
   19b2e:	46aa      	mov	sl, r5
   19b30:	e00a      	b.n	19b48 <d_print_expr_op+0x40>
   19b32:	3501      	adds	r5, #1
   19b34:	1c4a      	adds	r2, r1, #1
   19b36:	eb04 0301 	add.w	r3, r4, r1
   19b3a:	42af      	cmp	r7, r5
   19b3c:	711e      	strb	r6, [r3, #4]
   19b3e:	f8c4 2104 	str.w	r2, [r4, #260]
   19b42:	f884 6108 	strb.w	r6, [r4, #264]
   19b46:	d9e7      	bls.n	19b18 <d_print_expr_op+0x10>
   19b48:	f8d4 1104 	ldr.w	r1, [r4, #260]
   19b4c:	f818 6005 	ldrb.w	r6, [r8, r5]
   19b50:	29ff      	cmp	r1, #255
   19b52:	d1ee      	bne.n	19b32 <d_print_expr_op+0x2a>
   19b54:	f884 a103 	strb.w	sl, [r4, #259]
   19b58:	f8d4 2110 	ldr.w	r2, [r4, #272]
   19b5c:	f8d4 310c 	ldr.w	r3, [r4, #268]
   19b60:	4648      	mov	r0, r9
   19b62:	4798      	blx	r3
   19b64:	f8c4 a104 	str.w	sl, [r4, #260]
   19b68:	4651      	mov	r1, sl
   19b6a:	e7e2      	b.n	19b32 <d_print_expr_op+0x2a>

00019b6c <d_demangle_callback>:
   19b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b70:	b0d7      	sub	sp, #348
   19b72:	7806      	ldrb	r6, [r0, #0]
   19b74:	af00      	add	r7, sp, #0
   19b76:	2e5f      	cmp	r6, #95
   19b78:	4604      	mov	r4, r0
   19b7a:	460d      	mov	r5, r1
   19b7c:	4691      	mov	r9, r2
   19b7e:	469a      	mov	sl, r3
   19b80:	d105      	bne.n	19b8e <d_demangle_callback+0x22>
   19b82:	7843      	ldrb	r3, [r0, #1]
   19b84:	2b5a      	cmp	r3, #90
   19b86:	bf08      	it	eq
   19b88:	f04f 0800 	moveq.w	r8, #0	; 0x0
   19b8c:	d017      	beq.n	19bbe <d_demangle_callback+0x52>
   19b8e:	4620      	mov	r0, r4
   19b90:	4961      	ldr	r1, [pc, #388]	(19d18 <d_demangle_callback+0x1ac>)
   19b92:	2208      	movs	r2, #8
   19b94:	f007 f864 	bl	20c60 <strncmp>
   19b98:	b960      	cbnz	r0, 19bb4 <d_demangle_callback+0x48>
   19b9a:	7a22      	ldrb	r2, [r4, #8]
   19b9c:	2a5f      	cmp	r2, #95
   19b9e:	bf14      	ite	ne
   19ba0:	2300      	movne	r3, #0
   19ba2:	2301      	moveq	r3, #1
   19ba4:	2a2e      	cmp	r2, #46
   19ba6:	bf08      	it	eq
   19ba8:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   19bac:	2b00      	cmp	r3, #0
   19bae:	d175      	bne.n	19c9c <d_demangle_callback+0x130>
   19bb0:	2a24      	cmp	r2, #36
   19bb2:	d073      	beq.n	19c9c <d_demangle_callback+0x130>
   19bb4:	f015 0010 	ands.w	r0, r5, #16	; 0x10
   19bb8:	d06b      	beq.n	19c92 <d_demangle_callback+0x126>
   19bba:	f04f 0801 	mov.w	r8, #1	; 0x1
   19bbe:	4620      	mov	r0, r4
   19bc0:	f007 f846 	bl	20c50 <strlen>
   19bc4:	eb04 0300 	add.w	r3, r4, r0
   19bc8:	2200      	movs	r2, #0
   19bca:	f8c7 3128 	str.w	r3, [r7, #296]
   19bce:	0043      	lsls	r3, r0, #1
   19bd0:	f8c7 313c 	str.w	r3, [r7, #316]
   19bd4:	f8c7 2138 	str.w	r2, [r7, #312]
   19bd8:	0143      	lsls	r3, r0, #5
   19bda:	f8c7 2144 	str.w	r2, [r7, #324]
   19bde:	f8c7 214c 	str.w	r2, [r7, #332]
   19be2:	f8c7 2150 	str.w	r2, [r7, #336]
   19be6:	f8c7 2154 	str.w	r2, [r7, #340]
   19bea:	00c2      	lsls	r2, r0, #3
   19bec:	1a9b      	subs	r3, r3, r2
   19bee:	f8c7 0148 	str.w	r0, [r7, #328]
   19bf2:	3308      	adds	r3, #8
   19bf4:	0080      	lsls	r0, r0, #2
   19bf6:	46eb      	mov	fp, sp
   19bf8:	300e      	adds	r0, #14
   19bfa:	ebc3 0d0d 	rsb	sp, r3, sp
   19bfe:	ea4f 02dd 	mov.w	r2, sp, lsr #3
   19c02:	f020 0007 	bic.w	r0, r0, #7	; 0x7
   19c06:	00d2      	lsls	r2, r2, #3
   19c08:	ebc0 0d0d 	rsb	sp, r0, sp
   19c0c:	f8c7 4124 	str.w	r4, [r7, #292]
   19c10:	f8c7 512c 	str.w	r5, [r7, #300]
   19c14:	f8c7 4130 	str.w	r4, [r7, #304]
   19c18:	f8c7 2134 	str.w	r2, [r7, #308]
   19c1c:	f8c7 d140 	str.w	sp, [r7, #320]
   19c20:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   19c24:	d15f      	bne.n	19ce6 <d_demangle_callback+0x17a>
   19c26:	2e5f      	cmp	r6, #95
   19c28:	d066      	beq.n	19cf8 <d_demangle_callback+0x18c>
   19c2a:	2100      	movs	r1, #0
   19c2c:	f015 0f01 	tst.w	r5, #1	; 0x1
   19c30:	d004      	beq.n	19c3c <d_demangle_callback+0xd0>
   19c32:	f8d7 3130 	ldr.w	r3, [r7, #304]
   19c36:	781a      	ldrb	r2, [r3, #0]
   19c38:	2a00      	cmp	r2, #0
   19c3a:	d15a      	bne.n	19cf2 <d_demangle_callback+0x186>
   19c3c:	2900      	cmp	r1, #0
   19c3e:	d058      	beq.n	19cf2 <d_demangle_callback+0x186>
   19c40:	1d3c      	adds	r4, r7, #4
   19c42:	6025      	str	r5, [r4, #0]
   19c44:	2500      	movs	r5, #0
   19c46:	4620      	mov	r0, r4
   19c48:	f8c4 5104 	str.w	r5, [r4, #260]
   19c4c:	f884 5108 	strb.w	r5, [r4, #264]
   19c50:	f8c4 5114 	str.w	r5, [r4, #276]
   19c54:	f8c4 5118 	str.w	r5, [r4, #280]
   19c58:	f8c4 910c 	str.w	r9, [r4, #268]
   19c5c:	f8c4 a110 	str.w	sl, [r4, #272]
   19c60:	f8c4 511c 	str.w	r5, [r4, #284]
   19c64:	f7fe ffd0 	bl	18c08 <d_print_comp>
   19c68:	f8d4 1104 	ldr.w	r1, [r4, #260]
   19c6c:	f107 0008 	add.w	r0, r7, #8	; 0x8
   19c70:	eb04 0301 	add.w	r3, r4, r1
   19c74:	711d      	strb	r5, [r3, #4]
   19c76:	f8d4 2110 	ldr.w	r2, [r4, #272]
   19c7a:	f8d4 310c 	ldr.w	r3, [r4, #268]
   19c7e:	4798      	blx	r3
   19c80:	f8d4 311c 	ldr.w	r3, [r4, #284]
   19c84:	f8c4 5104 	str.w	r5, [r4, #260]
   19c88:	42ab      	cmp	r3, r5
   19c8a:	bf14      	ite	ne
   19c8c:	2000      	movne	r0, #0
   19c8e:	2001      	moveq	r0, #1
   19c90:	46dd      	mov	sp, fp
   19c92:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
   19c96:	46bd      	mov	sp, r7
   19c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c9c:	7a63      	ldrb	r3, [r4, #9]
   19c9e:	2b49      	cmp	r3, #73
   19ca0:	bf14      	ite	ne
   19ca2:	2200      	movne	r2, #0
   19ca4:	2201      	moveq	r2, #1
   19ca6:	2b44      	cmp	r3, #68
   19ca8:	bf14      	ite	ne
   19caa:	4613      	movne	r3, r2
   19cac:	f042 0301 	orreq.w	r3, r2, #1	; 0x1
   19cb0:	2b00      	cmp	r3, #0
   19cb2:	f43f af7f 	beq.w	19bb4 <d_demangle_callback+0x48>
   19cb6:	7aa3      	ldrb	r3, [r4, #10]
   19cb8:	2b5f      	cmp	r3, #95
   19cba:	f47f af7b 	bne.w	19bb4 <d_demangle_callback+0x48>
   19cbe:	4b17      	ldr	r3, [pc, #92]	(19d1c <d_demangle_callback+0x1b0>)
   19cc0:	4817      	ldr	r0, [pc, #92]	(19d20 <d_demangle_callback+0x1b4>)
   19cc2:	2a00      	cmp	r2, #0
   19cc4:	bf08      	it	eq
   19cc6:	4618      	moveq	r0, r3
   19cc8:	bf14      	ite	ne
   19cca:	211d      	movne	r1, #29
   19ccc:	211c      	moveq	r1, #28
   19cce:	4652      	mov	r2, sl
   19cd0:	340b      	adds	r4, #11
   19cd2:	47c8      	blx	r9
   19cd4:	4620      	mov	r0, r4
   19cd6:	f006 ffbb 	bl	20c50 <strlen>
   19cda:	4652      	mov	r2, sl
   19cdc:	4601      	mov	r1, r0
   19cde:	4620      	mov	r0, r4
   19ce0:	47c8      	blx	r9
   19ce2:	2001      	movs	r0, #1
   19ce4:	e7d5      	b.n	19c92 <d_demangle_callback+0x126>
   19ce6:	f507 7092 	add.w	r0, r7, #292	; 0x124
   19cea:	f7fd fd07 	bl	176fc <d_type>
   19cee:	4601      	mov	r1, r0
   19cf0:	e79c      	b.n	19c2c <d_demangle_callback+0xc0>
   19cf2:	2000      	movs	r0, #0
   19cf4:	46dd      	mov	sp, fp
   19cf6:	e7cc      	b.n	19c92 <d_demangle_callback+0x126>
   19cf8:	1c62      	adds	r2, r4, #1
   19cfa:	f8c7 2130 	str.w	r2, [r7, #304]
   19cfe:	7863      	ldrb	r3, [r4, #1]
   19d00:	2b5a      	cmp	r3, #90
   19d02:	d192      	bne.n	19c2a <d_demangle_callback+0xbe>
   19d04:	1c53      	adds	r3, r2, #1
   19d06:	2101      	movs	r1, #1
   19d08:	f507 7092 	add.w	r0, r7, #292	; 0x124
   19d0c:	f8c7 3130 	str.w	r3, [r7, #304]
   19d10:	f7fe f8b6 	bl	17e80 <d_encoding>
   19d14:	4601      	mov	r1, r0
   19d16:	e789      	b.n	19c2c <d_demangle_callback+0xc0>
   19d18:	00022930 	.word	0x00022930
   19d1c:	00022b0c 	.word	0x00022b0c
   19d20:	00022b2c 	.word	0x00022b2c

00019d24 <__gcclibcxx_demangle_callback>:
   19d24:	f1d1 0301 	rsbs	r3, r1, #1	; 0x1
   19d28:	bf38      	it	cc
   19d2a:	2300      	movcc	r3, #0
   19d2c:	2800      	cmp	r0, #0
   19d2e:	bf08      	it	eq
   19d30:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   19d34:	b510      	push	{r4, lr}
   19d36:	468c      	mov	ip, r1
   19d38:	4614      	mov	r4, r2
   19d3a:	b113      	cbz	r3, 19d42 <__gcclibcxx_demangle_callback+0x1e>
   19d3c:	f06f 0002 	mvn.w	r0, #2	; 0x2
   19d40:	bd10      	pop	{r4, pc}
   19d42:	2111      	movs	r1, #17
   19d44:	4662      	mov	r2, ip
   19d46:	4623      	mov	r3, r4
   19d48:	f7ff ff10 	bl	19b6c <d_demangle_callback>
   19d4c:	2800      	cmp	r0, #0
   19d4e:	bf0c      	ite	eq
   19d50:	f06f 0001 	mvneq.w	r0, #1	; 0x1
   19d54:	2000      	movne	r0, #0
   19d56:	e7f3      	b.n	19d40 <__gcclibcxx_demangle_callback+0x1c>

00019d58 <__cxa_demangle>:
   19d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d5c:	460e      	mov	r6, r1
   19d5e:	b084      	sub	sp, #16
   19d60:	4617      	mov	r7, r2
   19d62:	4698      	mov	r8, r3
   19d64:	2800      	cmp	r0, #0
   19d66:	d05b      	beq.n	19e20 <__cxa_demangle+0xc8>
   19d68:	f1d2 0301 	rsbs	r3, r2, #1	; 0x1
   19d6c:	bf38      	it	cc
   19d6e:	2300      	movcc	r3, #0
   19d70:	2900      	cmp	r1, #0
   19d72:	bf0c      	ite	eq
   19d74:	2300      	moveq	r3, #0
   19d76:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   19d7a:	2b00      	cmp	r3, #0
   19d7c:	d145      	bne.n	19e0a <__cxa_demangle+0xb2>
   19d7e:	9300      	str	r3, [sp, #0]
   19d80:	9301      	str	r3, [sp, #4]
   19d82:	9302      	str	r3, [sp, #8]
   19d84:	9303      	str	r3, [sp, #12]
   19d86:	2111      	movs	r1, #17
   19d88:	4a2c      	ldr	r2, [pc, #176]	(19e3c <__cxa_demangle+0xe4>)
   19d8a:	466b      	mov	r3, sp
   19d8c:	f7ff feee 	bl	19b6c <d_demangle_callback>
   19d90:	4604      	mov	r4, r0
   19d92:	2800      	cmp	r0, #0
   19d94:	d026      	beq.n	19de4 <__cxa_demangle+0x8c>
   19d96:	9b03      	ldr	r3, [sp, #12]
   19d98:	9c00      	ldr	r4, [sp, #0]
   19d9a:	1e1d      	subs	r5, r3, #0
   19d9c:	bf18      	it	ne
   19d9e:	2501      	movne	r5, #1
   19da0:	4628      	mov	r0, r5
   19da2:	2c00      	cmp	r4, #0
   19da4:	d022      	beq.n	19dec <__cxa_demangle+0x94>
   19da6:	2e00      	cmp	r6, #0
   19da8:	d02b      	beq.n	19e02 <__cxa_demangle+0xaa>
   19daa:	4620      	mov	r0, r4
   19dac:	f006 ff50 	bl	20c50 <strlen>
   19db0:	683b      	ldr	r3, [r7, #0]
   19db2:	4298      	cmp	r0, r3
   19db4:	d211      	bcs.n	19dda <__cxa_demangle+0x82>
   19db6:	4621      	mov	r1, r4
   19db8:	4630      	mov	r0, r6
   19dba:	f006 ff41 	bl	20c40 <strcpy>
   19dbe:	4620      	mov	r0, r4
   19dc0:	f006 f922 	bl	20008 <free>
   19dc4:	4634      	mov	r4, r6
   19dc6:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   19dca:	d002      	beq.n	19dd2 <__cxa_demangle+0x7a>
   19dcc:	2300      	movs	r3, #0
   19dce:	f8c8 3000 	str.w	r3, [r8]
   19dd2:	4620      	mov	r0, r4
   19dd4:	b004      	add	sp, #16
   19dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19dda:	4630      	mov	r0, r6
   19ddc:	f006 f914 	bl	20008 <free>
   19de0:	603d      	str	r5, [r7, #0]
   19de2:	e7f0      	b.n	19dc6 <__cxa_demangle+0x6e>
   19de4:	9800      	ldr	r0, [sp, #0]
   19de6:	f006 f90f 	bl	20008 <free>
   19dea:	4620      	mov	r0, r4
   19dec:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   19df0:	d00e      	beq.n	19e10 <__cxa_demangle+0xb8>
   19df2:	2801      	cmp	r0, #1
   19df4:	d01c      	beq.n	19e30 <__cxa_demangle+0xd8>
   19df6:	f06f 0301 	mvn.w	r3, #1	; 0x1
   19dfa:	f8c8 3000 	str.w	r3, [r8]
   19dfe:	2400      	movs	r4, #0
   19e00:	e7e7      	b.n	19dd2 <__cxa_demangle+0x7a>
   19e02:	2f00      	cmp	r7, #0
   19e04:	d0df      	beq.n	19dc6 <__cxa_demangle+0x6e>
   19e06:	603d      	str	r5, [r7, #0]
   19e08:	e7dd      	b.n	19dc6 <__cxa_demangle+0x6e>
   19e0a:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   19e0e:	d101      	bne.n	19e14 <__cxa_demangle+0xbc>
   19e10:	2400      	movs	r4, #0
   19e12:	e7de      	b.n	19dd2 <__cxa_demangle+0x7a>
   19e14:	f06f 0302 	mvn.w	r3, #2	; 0x2
   19e18:	f8c8 3000 	str.w	r3, [r8]
   19e1c:	2400      	movs	r4, #0
   19e1e:	e7d8      	b.n	19dd2 <__cxa_demangle+0x7a>
   19e20:	2b00      	cmp	r3, #0
   19e22:	d0f5      	beq.n	19e10 <__cxa_demangle+0xb8>
   19e24:	f06f 0302 	mvn.w	r3, #2	; 0x2
   19e28:	f8c8 3000 	str.w	r3, [r8]
   19e2c:	4604      	mov	r4, r0
   19e2e:	e7d0      	b.n	19dd2 <__cxa_demangle+0x7a>
   19e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19e34:	f8c8 3000 	str.w	r3, [r8]
   19e38:	2400      	movs	r4, #0
   19e3a:	e7ca      	b.n	19dd2 <__cxa_demangle+0x7a>
   19e3c:	00018909 	.word	0x00018909

00019e40 <__aeabi_drsub>:
   19e40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   19e44:	e002      	b.n	19e4c <__adddf3>
   19e46:	46c0      	nop			(mov r8, r8)

00019e48 <__aeabi_dsub>:
   19e48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00019e4c <__adddf3>:
   19e4c:	b530      	push	{r4, r5, lr}
   19e4e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   19e52:	ea4f 0543 	mov.w	r5, r3, lsl #1
   19e56:	ea94 0f05 	teq	r4, r5
   19e5a:	bf08      	it	eq
   19e5c:	ea90 0f02 	teqeq	r0, r2
   19e60:	bf1f      	itttt	ne
   19e62:	ea54 0c00 	orrsne.w	ip, r4, r0
   19e66:	ea55 0c02 	orrsne.w	ip, r5, r2
   19e6a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   19e6e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   19e72:	f000 80e2 	beq.w	1a03a <__adddf3+0x1ee>
   19e76:	ea4f 5454 	mov.w	r4, r4, lsr #21
   19e7a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   19e7e:	bfb8      	it	lt
   19e80:	426d      	neglt	r5, r5
   19e82:	dd0c      	ble.n	19e9e <__adddf3+0x52>
   19e84:	442c      	add	r4, r5
   19e86:	ea80 0202 	eor.w	r2, r0, r2
   19e8a:	ea81 0303 	eor.w	r3, r1, r3
   19e8e:	ea82 0000 	eor.w	r0, r2, r0
   19e92:	ea83 0101 	eor.w	r1, r3, r1
   19e96:	ea80 0202 	eor.w	r2, r0, r2
   19e9a:	ea81 0303 	eor.w	r3, r1, r3
   19e9e:	2d36      	cmp	r5, #54
   19ea0:	bf88      	it	hi
   19ea2:	bd30      	pophi	{r4, r5, pc}
   19ea4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   19ea8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   19eac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   19eb0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   19eb4:	d002      	beq.n	19ebc <__adddf3+0x70>
   19eb6:	4240      	negs	r0, r0
   19eb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19ebc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   19ec0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   19ec4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   19ec8:	d002      	beq.n	19ed0 <__adddf3+0x84>
   19eca:	4252      	negs	r2, r2
   19ecc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   19ed0:	ea94 0f05 	teq	r4, r5
   19ed4:	f000 80a7 	beq.w	1a026 <__adddf3+0x1da>
   19ed8:	f1a4 0401 	sub.w	r4, r4, #1	; 0x1
   19edc:	f1d5 0e20 	rsbs	lr, r5, #32	; 0x20
   19ee0:	db0d      	blt.n	19efe <__adddf3+0xb2>
   19ee2:	fa02 fc0e 	lsl.w	ip, r2, lr
   19ee6:	fa22 f205 	lsr.w	r2, r2, r5
   19eea:	1880      	adds	r0, r0, r2
   19eec:	f141 0100 	adc.w	r1, r1, #0	; 0x0
   19ef0:	fa03 f20e 	lsl.w	r2, r3, lr
   19ef4:	1880      	adds	r0, r0, r2
   19ef6:	fa43 f305 	asr.w	r3, r3, r5
   19efa:	4159      	adcs	r1, r3
   19efc:	e00e      	b.n	19f1c <__adddf3+0xd0>
   19efe:	f1a5 0520 	sub.w	r5, r5, #32	; 0x20
   19f02:	f10e 0e20 	add.w	lr, lr, #32	; 0x20
   19f06:	2a01      	cmp	r2, #1
   19f08:	fa03 fc0e 	lsl.w	ip, r3, lr
   19f0c:	bf28      	it	cs
   19f0e:	f04c 0c02 	orrcs.w	ip, ip, #2	; 0x2
   19f12:	fa43 f305 	asr.w	r3, r3, r5
   19f16:	18c0      	adds	r0, r0, r3
   19f18:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   19f1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   19f20:	d507      	bpl.n	19f32 <__adddf3+0xe6>
   19f22:	f04f 0e00 	mov.w	lr, #0	; 0x0
   19f26:	f1dc 0c00 	rsbs	ip, ip, #0	; 0x0
   19f2a:	eb7e 0000 	sbcs.w	r0, lr, r0
   19f2e:	eb6e 0101 	sbc.w	r1, lr, r1
   19f32:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   19f36:	d31b      	bcc.n	19f70 <__adddf3+0x124>
   19f38:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   19f3c:	d30c      	bcc.n	19f58 <__adddf3+0x10c>
   19f3e:	0849      	lsrs	r1, r1, #1
   19f40:	ea5f 0030 	movs.w	r0, r0, rrx
   19f44:	ea4f 0c3c 	mov.w	ip, ip, rrx
   19f48:	f104 0401 	add.w	r4, r4, #1	; 0x1
   19f4c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   19f50:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   19f54:	f080 809a 	bcs.w	1a08c <__adddf3+0x240>
   19f58:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   19f5c:	bf08      	it	eq
   19f5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   19f62:	f150 0000 	adcs.w	r0, r0, #0	; 0x0
   19f66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   19f6a:	ea41 0105 	orr.w	r1, r1, r5
   19f6e:	bd30      	pop	{r4, r5, pc}
   19f70:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   19f74:	4140      	adcs	r0, r0
   19f76:	eb41 0101 	adc.w	r1, r1, r1
   19f7a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   19f7e:	f1a4 0401 	sub.w	r4, r4, #1	; 0x1
   19f82:	d1e9      	bne.n	19f58 <__adddf3+0x10c>
   19f84:	f091 0f00 	teq	r1, #0	; 0x0
   19f88:	bf04      	itt	eq
   19f8a:	4601      	moveq	r1, r0
   19f8c:	2000      	moveq	r0, #0
   19f8e:	fab1 f381 	clz	r3, r1
   19f92:	bf08      	it	eq
   19f94:	3320      	addeq	r3, #32
   19f96:	f1a3 030b 	sub.w	r3, r3, #11	; 0xb
   19f9a:	f1b3 0220 	subs.w	r2, r3, #32	; 0x20
   19f9e:	da0c      	bge.n	19fba <__adddf3+0x16e>
   19fa0:	320c      	adds	r2, #12
   19fa2:	dd08      	ble.n	19fb6 <__adddf3+0x16a>
   19fa4:	f102 0c14 	add.w	ip, r2, #20	; 0x14
   19fa8:	f1c2 020c 	rsb	r2, r2, #12	; 0xc
   19fac:	fa01 f00c 	lsl.w	r0, r1, ip
   19fb0:	fa21 f102 	lsr.w	r1, r1, r2
   19fb4:	e00c      	b.n	19fd0 <__adddf3+0x184>
   19fb6:	f102 0214 	add.w	r2, r2, #20	; 0x14
   19fba:	bfd8      	it	le
   19fbc:	f1c2 0c20 	rsble	ip, r2, #32	; 0x20
   19fc0:	fa01 f102 	lsl.w	r1, r1, r2
   19fc4:	fa20 fc0c 	lsr.w	ip, r0, ip
   19fc8:	bfdc      	itt	le
   19fca:	ea41 010c 	orrle.w	r1, r1, ip
   19fce:	4090      	lslle	r0, r2
   19fd0:	1ae4      	subs	r4, r4, r3
   19fd2:	bfa2      	ittt	ge
   19fd4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   19fd8:	4329      	orrge	r1, r5
   19fda:	bd30      	popge	{r4, r5, pc}
   19fdc:	ea6f 0404 	mvn.w	r4, r4
   19fe0:	3c1f      	subs	r4, #31
   19fe2:	da1c      	bge.n	1a01e <__adddf3+0x1d2>
   19fe4:	340c      	adds	r4, #12
   19fe6:	dc0e      	bgt.n	1a006 <__adddf3+0x1ba>
   19fe8:	f104 0414 	add.w	r4, r4, #20	; 0x14
   19fec:	f1c4 0220 	rsb	r2, r4, #32	; 0x20
   19ff0:	fa20 f004 	lsr.w	r0, r0, r4
   19ff4:	fa01 f302 	lsl.w	r3, r1, r2
   19ff8:	ea40 0003 	orr.w	r0, r0, r3
   19ffc:	fa21 f304 	lsr.w	r3, r1, r4
   1a000:	ea45 0103 	orr.w	r1, r5, r3
   1a004:	bd30      	pop	{r4, r5, pc}
   1a006:	f1c4 040c 	rsb	r4, r4, #12	; 0xc
   1a00a:	f1c4 0220 	rsb	r2, r4, #32	; 0x20
   1a00e:	fa20 f002 	lsr.w	r0, r0, r2
   1a012:	fa01 f304 	lsl.w	r3, r1, r4
   1a016:	ea40 0003 	orr.w	r0, r0, r3
   1a01a:	4629      	mov	r1, r5
   1a01c:	bd30      	pop	{r4, r5, pc}
   1a01e:	fa21 f004 	lsr.w	r0, r1, r4
   1a022:	4629      	mov	r1, r5
   1a024:	bd30      	pop	{r4, r5, pc}
   1a026:	f094 0f00 	teq	r4, #0	; 0x0
   1a02a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1a02e:	bf06      	itte	eq
   1a030:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1a034:	3401      	addeq	r4, #1
   1a036:	3d01      	subne	r5, #1
   1a038:	e74e      	b.n	19ed8 <__adddf3+0x8c>
   1a03a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1a03e:	bf18      	it	ne
   1a040:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1a044:	d029      	beq.n	1a09a <__adddf3+0x24e>
   1a046:	ea94 0f05 	teq	r4, r5
   1a04a:	bf08      	it	eq
   1a04c:	ea90 0f02 	teqeq	r0, r2
   1a050:	d005      	beq.n	1a05e <__adddf3+0x212>
   1a052:	ea54 0c00 	orrs.w	ip, r4, r0
   1a056:	bf04      	itt	eq
   1a058:	4619      	moveq	r1, r3
   1a05a:	4610      	moveq	r0, r2
   1a05c:	bd30      	pop	{r4, r5, pc}
   1a05e:	ea91 0f03 	teq	r1, r3
   1a062:	bf1e      	ittt	ne
   1a064:	2100      	movne	r1, #0
   1a066:	2000      	movne	r0, #0
   1a068:	bd30      	popne	{r4, r5, pc}
   1a06a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1a06e:	d105      	bne.n	1a07c <__adddf3+0x230>
   1a070:	0040      	lsls	r0, r0, #1
   1a072:	4149      	adcs	r1, r1
   1a074:	bf28      	it	cs
   1a076:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1a07a:	bd30      	pop	{r4, r5, pc}
   1a07c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1a080:	bf3c      	itt	cc
   1a082:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1a086:	bd30      	popcc	{r4, r5, pc}
   1a088:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1a08c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1a090:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1a094:	f04f 0000 	mov.w	r0, #0	; 0x0
   1a098:	bd30      	pop	{r4, r5, pc}
   1a09a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1a09e:	bf1a      	itte	ne
   1a0a0:	4619      	movne	r1, r3
   1a0a2:	4610      	movne	r0, r2
   1a0a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1a0a8:	bf1c      	itt	ne
   1a0aa:	460b      	movne	r3, r1
   1a0ac:	4602      	movne	r2, r0
   1a0ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1a0b2:	bf06      	itte	eq
   1a0b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1a0b8:	ea91 0f03 	teqeq	r1, r3
   1a0bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1a0c0:	bd30      	pop	{r4, r5, pc}
   1a0c2:	46c0      	nop			(mov r8, r8)

0001a0c4 <__aeabi_ui2d>:
   1a0c4:	f090 0f00 	teq	r0, #0	; 0x0
   1a0c8:	bf04      	itt	eq
   1a0ca:	2100      	moveq	r1, #0
   1a0cc:	4770      	bxeq	lr
   1a0ce:	b530      	push	{r4, r5, lr}
   1a0d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a0d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a0d8:	f04f 0500 	mov.w	r5, #0	; 0x0
   1a0dc:	f04f 0100 	mov.w	r1, #0	; 0x0
   1a0e0:	e750      	b.n	19f84 <__adddf3+0x138>
   1a0e2:	46c0      	nop			(mov r8, r8)

0001a0e4 <__aeabi_i2d>:
   1a0e4:	f090 0f00 	teq	r0, #0	; 0x0
   1a0e8:	bf04      	itt	eq
   1a0ea:	2100      	moveq	r1, #0
   1a0ec:	4770      	bxeq	lr
   1a0ee:	b530      	push	{r4, r5, lr}
   1a0f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a0f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a0f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1a0fc:	bf48      	it	mi
   1a0fe:	4240      	negmi	r0, r0
   1a100:	f04f 0100 	mov.w	r1, #0	; 0x0
   1a104:	e73e      	b.n	19f84 <__adddf3+0x138>
   1a106:	46c0      	nop			(mov r8, r8)

0001a108 <__aeabi_f2d>:
   1a108:	0042      	lsls	r2, r0, #1
   1a10a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1a10e:	ea4f 0131 	mov.w	r1, r1, rrx
   1a112:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1a116:	bf1f      	itttt	ne
   1a118:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1a11c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1a120:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1a124:	4770      	bxne	lr
   1a126:	f092 0f00 	teq	r2, #0	; 0x0
   1a12a:	bf14      	ite	ne
   1a12c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1a130:	4770      	bxeq	lr
   1a132:	b530      	push	{r4, r5, lr}
   1a134:	f44f 7460 	mov.w	r4, #896	; 0x380
   1a138:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1a13c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1a140:	e720      	b.n	19f84 <__adddf3+0x138>
   1a142:	46c0      	nop			(mov r8, r8)

0001a144 <__aeabi_ul2d>:
   1a144:	ea50 0201 	orrs.w	r2, r0, r1
   1a148:	bf08      	it	eq
   1a14a:	4770      	bxeq	lr
   1a14c:	b530      	push	{r4, r5, lr}
   1a14e:	f04f 0500 	mov.w	r5, #0	; 0x0
   1a152:	e00a      	b.n	1a16a <__aeabi_l2d+0x16>

0001a154 <__aeabi_l2d>:
   1a154:	ea50 0201 	orrs.w	r2, r0, r1
   1a158:	bf08      	it	eq
   1a15a:	4770      	bxeq	lr
   1a15c:	b530      	push	{r4, r5, lr}
   1a15e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1a162:	d502      	bpl.n	1a16a <__aeabi_l2d+0x16>
   1a164:	4240      	negs	r0, r0
   1a166:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a16a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a16e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a172:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1a176:	f43f aedc 	beq.w	19f32 <__adddf3+0xe6>
   1a17a:	f04f 0203 	mov.w	r2, #3	; 0x3
   1a17e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1a182:	bf18      	it	ne
   1a184:	3203      	addne	r2, #3
   1a186:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1a18a:	bf18      	it	ne
   1a18c:	3203      	addne	r2, #3
   1a18e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1a192:	f1c2 0320 	rsb	r3, r2, #32	; 0x20
   1a196:	fa00 fc03 	lsl.w	ip, r0, r3
   1a19a:	fa20 f002 	lsr.w	r0, r0, r2
   1a19e:	fa01 fe03 	lsl.w	lr, r1, r3
   1a1a2:	ea40 000e 	orr.w	r0, r0, lr
   1a1a6:	fa21 f102 	lsr.w	r1, r1, r2
   1a1aa:	4414      	add	r4, r2
   1a1ac:	e6c1      	b.n	19f32 <__adddf3+0xe6>
   1a1ae:	46c0      	nop			(mov r8, r8)

0001a1b0 <__aeabi_dmul>:
   1a1b0:	b570      	push	{r4, r5, r6, lr}
   1a1b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1a1b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1a1ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1a1be:	bf1d      	ittte	ne
   1a1c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1a1c4:	ea94 0f0c 	teqne	r4, ip
   1a1c8:	ea95 0f0c 	teqne	r5, ip
   1a1cc:	f000 f8de 	bleq	1a38c <__aeabi_dmul+0x1dc>
   1a1d0:	442c      	add	r4, r5
   1a1d2:	ea81 0603 	eor.w	r6, r1, r3
   1a1d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1a1da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1a1de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1a1e2:	bf18      	it	ne
   1a1e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1a1e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1a1ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1a1f0:	d038      	beq.n	1a264 <__aeabi_dmul+0xb4>
   1a1f2:	fba0 ce02 	umull	ip, lr, r0, r2
   1a1f6:	f04f 0500 	mov.w	r5, #0	; 0x0
   1a1fa:	fbe1 e502 	umlal	lr, r5, r1, r2
   1a1fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1a202:	fbe0 e503 	umlal	lr, r5, r0, r3
   1a206:	f04f 0600 	mov.w	r6, #0	; 0x0
   1a20a:	fbe1 5603 	umlal	r5, r6, r1, r3
   1a20e:	f09c 0f00 	teq	ip, #0	; 0x0
   1a212:	bf18      	it	ne
   1a214:	f04e 0e01 	orrne.w	lr, lr, #1	; 0x1
   1a218:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1a21c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1a220:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1a224:	d204      	bcs.n	1a230 <__aeabi_dmul+0x80>
   1a226:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1a22a:	416d      	adcs	r5, r5
   1a22c:	eb46 0606 	adc.w	r6, r6, r6
   1a230:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1a234:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1a238:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1a23c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1a240:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1a244:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1a248:	bf88      	it	hi
   1a24a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1a24e:	d81e      	bhi.n	1a28e <__aeabi_dmul+0xde>
   1a250:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1a254:	bf08      	it	eq
   1a256:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1a25a:	f150 0000 	adcs.w	r0, r0, #0	; 0x0
   1a25e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1a262:	bd70      	pop	{r4, r5, r6, pc}
   1a264:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1a268:	ea46 0101 	orr.w	r1, r6, r1
   1a26c:	ea40 0002 	orr.w	r0, r0, r2
   1a270:	ea81 0103 	eor.w	r1, r1, r3
   1a274:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1a278:	bfc2      	ittt	gt
   1a27a:	ebd4 050c 	rsbsgt	r5, r4, ip
   1a27e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1a282:	bd70      	popgt	{r4, r5, r6, pc}
   1a284:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1a288:	f04f 0e00 	mov.w	lr, #0	; 0x0
   1a28c:	3c01      	subs	r4, #1
   1a28e:	f300 80ab 	bgt.w	1a3e8 <__aeabi_dmul+0x238>
   1a292:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1a296:	bfde      	ittt	le
   1a298:	2000      	movle	r0, #0
   1a29a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1a29e:	bd70      	pople	{r4, r5, r6, pc}
   1a2a0:	f1c4 0400 	rsb	r4, r4, #0	; 0x0
   1a2a4:	3c20      	subs	r4, #32
   1a2a6:	da35      	bge.n	1a314 <__aeabi_dmul+0x164>
   1a2a8:	340c      	adds	r4, #12
   1a2aa:	dc1b      	bgt.n	1a2e4 <__aeabi_dmul+0x134>
   1a2ac:	f104 0414 	add.w	r4, r4, #20	; 0x14
   1a2b0:	f1c4 0520 	rsb	r5, r4, #32	; 0x20
   1a2b4:	fa00 f305 	lsl.w	r3, r0, r5
   1a2b8:	fa20 f004 	lsr.w	r0, r0, r4
   1a2bc:	fa01 f205 	lsl.w	r2, r1, r5
   1a2c0:	ea40 0002 	orr.w	r0, r0, r2
   1a2c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1a2c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1a2cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1a2d0:	fa21 f604 	lsr.w	r6, r1, r4
   1a2d4:	eb42 0106 	adc.w	r1, r2, r6
   1a2d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1a2dc:	bf08      	it	eq
   1a2de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1a2e2:	bd70      	pop	{r4, r5, r6, pc}
   1a2e4:	f1c4 040c 	rsb	r4, r4, #12	; 0xc
   1a2e8:	f1c4 0520 	rsb	r5, r4, #32	; 0x20
   1a2ec:	fa00 f304 	lsl.w	r3, r0, r4
   1a2f0:	fa20 f005 	lsr.w	r0, r0, r5
   1a2f4:	fa01 f204 	lsl.w	r2, r1, r4
   1a2f8:	ea40 0002 	orr.w	r0, r0, r2
   1a2fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1a300:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1a304:	f141 0100 	adc.w	r1, r1, #0	; 0x0
   1a308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1a30c:	bf08      	it	eq
   1a30e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1a312:	bd70      	pop	{r4, r5, r6, pc}
   1a314:	f1c4 0520 	rsb	r5, r4, #32	; 0x20
   1a318:	fa00 f205 	lsl.w	r2, r0, r5
   1a31c:	ea4e 0e02 	orr.w	lr, lr, r2
   1a320:	fa20 f304 	lsr.w	r3, r0, r4
   1a324:	fa01 f205 	lsl.w	r2, r1, r5
   1a328:	ea43 0302 	orr.w	r3, r3, r2
   1a32c:	fa21 f004 	lsr.w	r0, r1, r4
   1a330:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1a334:	fa21 f204 	lsr.w	r2, r1, r4
   1a338:	ea20 0002 	bic.w	r0, r0, r2
   1a33c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1a340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1a344:	bf08      	it	eq
   1a346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1a34a:	bd70      	pop	{r4, r5, r6, pc}
   1a34c:	f094 0f00 	teq	r4, #0	; 0x0
   1a350:	d10f      	bne.n	1a372 <__aeabi_dmul+0x1c2>
   1a352:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1a356:	0040      	lsls	r0, r0, #1
   1a358:	eb41 0101 	adc.w	r1, r1, r1
   1a35c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1a360:	bf08      	it	eq
   1a362:	3c01      	subeq	r4, #1
   1a364:	d0f7      	beq.n	1a356 <__aeabi_dmul+0x1a6>
   1a366:	ea41 0106 	orr.w	r1, r1, r6
   1a36a:	f095 0f00 	teq	r5, #0	; 0x0
   1a36e:	bf18      	it	ne
   1a370:	46f7      	movne	pc, lr
   1a372:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1a376:	0052      	lsls	r2, r2, #1
   1a378:	eb43 0303 	adc.w	r3, r3, r3
   1a37c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1a380:	bf08      	it	eq
   1a382:	3d01      	subeq	r5, #1
   1a384:	d0f7      	beq.n	1a376 <__aeabi_dmul+0x1c6>
   1a386:	ea43 0306 	orr.w	r3, r3, r6
   1a38a:	46f7      	mov	pc, lr
   1a38c:	ea94 0f0c 	teq	r4, ip
   1a390:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1a394:	bf18      	it	ne
   1a396:	ea95 0f0c 	teqne	r5, ip
   1a39a:	d00c      	beq.n	1a3b6 <__aeabi_dmul+0x206>
   1a39c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1a3a0:	bf18      	it	ne
   1a3a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1a3a6:	d1d1      	bne.n	1a34c <__aeabi_dmul+0x19c>
   1a3a8:	ea81 0103 	eor.w	r1, r1, r3
   1a3ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1a3b0:	f04f 0000 	mov.w	r0, #0	; 0x0
   1a3b4:	bd70      	pop	{r4, r5, r6, pc}
   1a3b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1a3ba:	bf06      	itte	eq
   1a3bc:	4610      	moveq	r0, r2
   1a3be:	4619      	moveq	r1, r3
   1a3c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1a3c4:	d019      	beq.n	1a3fa <__aeabi_dmul+0x24a>
   1a3c6:	ea94 0f0c 	teq	r4, ip
   1a3ca:	d102      	bne.n	1a3d2 <__aeabi_dmul+0x222>
   1a3cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1a3d0:	d113      	bne.n	1a3fa <__aeabi_dmul+0x24a>
   1a3d2:	ea95 0f0c 	teq	r5, ip
   1a3d6:	d105      	bne.n	1a3e4 <__aeabi_dmul+0x234>
   1a3d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1a3dc:	bf1c      	itt	ne
   1a3de:	4610      	movne	r0, r2
   1a3e0:	4619      	movne	r1, r3
   1a3e2:	d10a      	bne.n	1a3fa <__aeabi_dmul+0x24a>
   1a3e4:	ea81 0103 	eor.w	r1, r1, r3
   1a3e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1a3ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1a3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1a3f4:	f04f 0000 	mov.w	r0, #0	; 0x0
   1a3f8:	bd70      	pop	{r4, r5, r6, pc}
   1a3fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1a3fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1a402:	bd70      	pop	{r4, r5, r6, pc}

0001a404 <__aeabi_ddiv>:
   1a404:	b570      	push	{r4, r5, r6, lr}
   1a406:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1a40a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1a40e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1a412:	bf1d      	ittte	ne
   1a414:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1a418:	ea94 0f0c 	teqne	r4, ip
   1a41c:	ea95 0f0c 	teqne	r5, ip
   1a420:	f000 f8a7 	bleq	1a572 <__aeabi_ddiv+0x16e>
   1a424:	eba4 0405 	sub.w	r4, r4, r5
   1a428:	ea81 0e03 	eor.w	lr, r1, r3
   1a42c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1a430:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1a434:	f000 8088 	beq.w	1a548 <__aeabi_ddiv+0x144>
   1a438:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1a43c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1a440:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1a444:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1a448:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1a44c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1a450:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1a454:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1a458:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1a45c:	429d      	cmp	r5, r3
   1a45e:	bf08      	it	eq
   1a460:	4296      	cmpeq	r6, r2
   1a462:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1a466:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1a46a:	d202      	bcs.n	1a472 <__aeabi_ddiv+0x6e>
   1a46c:	085b      	lsrs	r3, r3, #1
   1a46e:	ea4f 0232 	mov.w	r2, r2, rrx
   1a472:	1ab6      	subs	r6, r6, r2
   1a474:	eb65 0503 	sbc.w	r5, r5, r3
   1a478:	085b      	lsrs	r3, r3, #1
   1a47a:	ea4f 0232 	mov.w	r2, r2, rrx
   1a47e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1a482:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1a486:	ebb6 0e02 	subs.w	lr, r6, r2
   1a48a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1a48e:	bf22      	ittt	cs
   1a490:	1ab6      	subcs	r6, r6, r2
   1a492:	4675      	movcs	r5, lr
   1a494:	ea40 000c 	orrcs.w	r0, r0, ip
   1a498:	085b      	lsrs	r3, r3, #1
   1a49a:	ea4f 0232 	mov.w	r2, r2, rrx
   1a49e:	ebb6 0e02 	subs.w	lr, r6, r2
   1a4a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1a4a6:	bf22      	ittt	cs
   1a4a8:	1ab6      	subcs	r6, r6, r2
   1a4aa:	4675      	movcs	r5, lr
   1a4ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1a4b0:	085b      	lsrs	r3, r3, #1
   1a4b2:	ea4f 0232 	mov.w	r2, r2, rrx
   1a4b6:	ebb6 0e02 	subs.w	lr, r6, r2
   1a4ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   1a4be:	bf22      	ittt	cs
   1a4c0:	1ab6      	subcs	r6, r6, r2
   1a4c2:	4675      	movcs	r5, lr
   1a4c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1a4c8:	085b      	lsrs	r3, r3, #1
   1a4ca:	ea4f 0232 	mov.w	r2, r2, rrx
   1a4ce:	ebb6 0e02 	subs.w	lr, r6, r2
   1a4d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1a4d6:	bf22      	ittt	cs
   1a4d8:	1ab6      	subcs	r6, r6, r2
   1a4da:	4675      	movcs	r5, lr
   1a4dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1a4e0:	ea55 0e06 	orrs.w	lr, r5, r6
   1a4e4:	d018      	beq.n	1a518 <__aeabi_ddiv+0x114>
   1a4e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1a4ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1a4ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1a4f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1a4f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1a4fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1a4fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1a502:	d1c0      	bne.n	1a486 <__aeabi_ddiv+0x82>
   1a504:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1a508:	d10b      	bne.n	1a522 <__aeabi_ddiv+0x11e>
   1a50a:	ea41 0100 	orr.w	r1, r1, r0
   1a50e:	f04f 0000 	mov.w	r0, #0	; 0x0
   1a512:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1a516:	e7b6      	b.n	1a486 <__aeabi_ddiv+0x82>
   1a518:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1a51c:	bf04      	itt	eq
   1a51e:	4301      	orreq	r1, r0
   1a520:	2000      	moveq	r0, #0
   1a522:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1a526:	bf88      	it	hi
   1a528:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1a52c:	f63f aeaf 	bhi.w	1a28e <__aeabi_dmul+0xde>
   1a530:	ebb5 0c03 	subs.w	ip, r5, r3
   1a534:	bf04      	itt	eq
   1a536:	ebb6 0c02 	subseq.w	ip, r6, r2
   1a53a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1a53e:	f150 0000 	adcs.w	r0, r0, #0	; 0x0
   1a542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1a546:	bd70      	pop	{r4, r5, r6, pc}
   1a548:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1a54c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1a550:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1a554:	bfc2      	ittt	gt
   1a556:	ebd4 050c 	rsbsgt	r5, r4, ip
   1a55a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1a55e:	bd70      	popgt	{r4, r5, r6, pc}
   1a560:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1a564:	f04f 0e00 	mov.w	lr, #0	; 0x0
   1a568:	3c01      	subs	r4, #1
   1a56a:	e690      	b.n	1a28e <__aeabi_dmul+0xde>
   1a56c:	ea45 0e06 	orr.w	lr, r5, r6
   1a570:	e68d      	b.n	1a28e <__aeabi_dmul+0xde>
   1a572:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1a576:	ea94 0f0c 	teq	r4, ip
   1a57a:	bf08      	it	eq
   1a57c:	ea95 0f0c 	teqeq	r5, ip
   1a580:	f43f af3b 	beq.w	1a3fa <__aeabi_dmul+0x24a>
   1a584:	ea94 0f0c 	teq	r4, ip
   1a588:	d10a      	bne.n	1a5a0 <__aeabi_ddiv+0x19c>
   1a58a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1a58e:	f47f af34 	bne.w	1a3fa <__aeabi_dmul+0x24a>
   1a592:	ea95 0f0c 	teq	r5, ip
   1a596:	f47f af25 	bne.w	1a3e4 <__aeabi_dmul+0x234>
   1a59a:	4610      	mov	r0, r2
   1a59c:	4619      	mov	r1, r3
   1a59e:	e72c      	b.n	1a3fa <__aeabi_dmul+0x24a>
   1a5a0:	ea95 0f0c 	teq	r5, ip
   1a5a4:	d106      	bne.n	1a5b4 <__aeabi_ddiv+0x1b0>
   1a5a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1a5aa:	f43f aefd 	beq.w	1a3a8 <__aeabi_dmul+0x1f8>
   1a5ae:	4610      	mov	r0, r2
   1a5b0:	4619      	mov	r1, r3
   1a5b2:	e722      	b.n	1a3fa <__aeabi_dmul+0x24a>
   1a5b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1a5b8:	bf18      	it	ne
   1a5ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1a5be:	f47f aec5 	bne.w	1a34c <__aeabi_dmul+0x19c>
   1a5c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1a5c6:	f47f af0d 	bne.w	1a3e4 <__aeabi_dmul+0x234>
   1a5ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1a5ce:	f47f aeeb 	bne.w	1a3a8 <__aeabi_dmul+0x1f8>
   1a5d2:	e712      	b.n	1a3fa <__aeabi_dmul+0x24a>

0001a5d4 <__gedf2>:
   1a5d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1a5d8:	e006      	b.n	1a5e8 <__cmpdf2+0x4>
   1a5da:	46c0      	nop			(mov r8, r8)

0001a5dc <__ledf2>:
   1a5dc:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1a5e0:	e002      	b.n	1a5e8 <__cmpdf2+0x4>
   1a5e2:	46c0      	nop			(mov r8, r8)

0001a5e4 <__cmpdf2>:
   1a5e4:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1a5e8:	f84d cc04 	str.w	ip, [sp, #-4]
   1a5ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1a5f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1a5f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1a5f8:	bf18      	it	ne
   1a5fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1a5fe:	d01a      	beq.n	1a636 <__cmpdf2+0x52>
   1a600:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1a604:	bf0c      	ite	eq
   1a606:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1a60a:	ea91 0f03 	teqne	r1, r3
   1a60e:	bf02      	ittt	eq
   1a610:	ea90 0f02 	teqeq	r0, r2
   1a614:	2000      	moveq	r0, #0
   1a616:	4770      	bxeq	lr
   1a618:	f110 0f00 	cmn.w	r0, #0	; 0x0
   1a61c:	ea91 0f03 	teq	r1, r3
   1a620:	bf58      	it	pl
   1a622:	4299      	cmppl	r1, r3
   1a624:	bf08      	it	eq
   1a626:	4290      	cmpeq	r0, r2
   1a628:	bf2c      	ite	cs
   1a62a:	17d8      	asrcs	r0, r3, #31
   1a62c:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1a630:	f040 0001 	orr.w	r0, r0, #1	; 0x1
   1a634:	4770      	bx	lr
   1a636:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1a63a:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1a63e:	d102      	bne.n	1a646 <__cmpdf2+0x62>
   1a640:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1a644:	d107      	bne.n	1a656 <__cmpdf2+0x72>
   1a646:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1a64a:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1a64e:	d1d7      	bne.n	1a600 <__cmpdf2+0x1c>
   1a650:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1a654:	d0d4      	beq.n	1a600 <__cmpdf2+0x1c>
   1a656:	f85d 0c04 	ldr.w	r0, [sp, #-4]
   1a65a:	4770      	bx	lr

0001a65c <__aeabi_cdrcmple>:
   1a65c:	4684      	mov	ip, r0
   1a65e:	4610      	mov	r0, r2
   1a660:	4662      	mov	r2, ip
   1a662:	468c      	mov	ip, r1
   1a664:	4619      	mov	r1, r3
   1a666:	4663      	mov	r3, ip
   1a668:	e000      	b.n	1a66c <__aeabi_cdcmpeq>
   1a66a:	46c0      	nop			(mov r8, r8)

0001a66c <__aeabi_cdcmpeq>:
   1a66c:	b501      	push	{r0, lr}
   1a66e:	f7ff ffb9 	bl	1a5e4 <__cmpdf2>
   1a672:	2800      	cmp	r0, #0
   1a674:	bf48      	it	mi
   1a676:	f110 0f00 	cmnmi.w	r0, #0	; 0x0
   1a67a:	bd01      	pop	{r0, pc}

0001a67c <__aeabi_dcmpeq>:
   1a67c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a680:	f7ff fff4 	bl	1a66c <__aeabi_cdcmpeq>
   1a684:	bf0c      	ite	eq
   1a686:	2001      	moveq	r0, #1
   1a688:	2000      	movne	r0, #0
   1a68a:	f85d fb08 	ldr.w	pc, [sp], #8
   1a68e:	46c0      	nop			(mov r8, r8)

0001a690 <__aeabi_dcmplt>:
   1a690:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a694:	f7ff ffea 	bl	1a66c <__aeabi_cdcmpeq>
   1a698:	bf34      	ite	cc
   1a69a:	2001      	movcc	r0, #1
   1a69c:	2000      	movcs	r0, #0
   1a69e:	f85d fb08 	ldr.w	pc, [sp], #8
   1a6a2:	46c0      	nop			(mov r8, r8)

0001a6a4 <__aeabi_dcmple>:
   1a6a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a6a8:	f7ff ffe0 	bl	1a66c <__aeabi_cdcmpeq>
   1a6ac:	bf94      	ite	ls
   1a6ae:	2001      	movls	r0, #1
   1a6b0:	2000      	movhi	r0, #0
   1a6b2:	f85d fb08 	ldr.w	pc, [sp], #8
   1a6b6:	46c0      	nop			(mov r8, r8)

0001a6b8 <__aeabi_dcmpge>:
   1a6b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a6bc:	f7ff ffce 	bl	1a65c <__aeabi_cdrcmple>
   1a6c0:	bf94      	ite	ls
   1a6c2:	2001      	movls	r0, #1
   1a6c4:	2000      	movhi	r0, #0
   1a6c6:	f85d fb08 	ldr.w	pc, [sp], #8
   1a6ca:	46c0      	nop			(mov r8, r8)

0001a6cc <__aeabi_dcmpgt>:
   1a6cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a6d0:	f7ff ffc4 	bl	1a65c <__aeabi_cdrcmple>
   1a6d4:	bf34      	ite	cc
   1a6d6:	2001      	movcc	r0, #1
   1a6d8:	2000      	movcs	r0, #0
   1a6da:	f85d fb08 	ldr.w	pc, [sp], #8
   1a6de:	46c0      	nop			(mov r8, r8)

0001a6e0 <__aeabi_d2iz>:
   1a6e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1a6e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1a6e8:	d215      	bcs.n	1a716 <__aeabi_d2iz+0x36>
   1a6ea:	d511      	bpl.n	1a710 <__aeabi_d2iz+0x30>
   1a6ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1a6f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1a6f4:	d912      	bls.n	1a71c <__aeabi_d2iz+0x3c>
   1a6f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1a6fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a6fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1a702:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1a706:	fa23 f002 	lsr.w	r0, r3, r2
   1a70a:	bf18      	it	ne
   1a70c:	4240      	negne	r0, r0
   1a70e:	4770      	bx	lr
   1a710:	f04f 0000 	mov.w	r0, #0	; 0x0
   1a714:	4770      	bx	lr
   1a716:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1a71a:	d105      	bne.n	1a728 <__aeabi_d2iz+0x48>
   1a71c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1a720:	bf08      	it	eq
   1a722:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1a726:	4770      	bx	lr
   1a728:	f04f 0000 	mov.w	r0, #0	; 0x0
   1a72c:	4770      	bx	lr
   1a72e:	46c0      	nop			(mov r8, r8)

0001a730 <__aeabi_d2f>:
   1a730:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1a734:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1a738:	bf24      	itt	cs
   1a73a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1a73e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1a742:	d90d      	bls.n	1a760 <__aeabi_d2f+0x30>
   1a744:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1a748:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1a74c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1a750:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1a754:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1a758:	bf08      	it	eq
   1a75a:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1a75e:	4770      	bx	lr
   1a760:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1a764:	d121      	bne.n	1a7aa <__aeabi_d2f+0x7a>
   1a766:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1a76a:	bfbc      	itt	lt
   1a76c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1a770:	4770      	bxlt	lr
   1a772:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1a776:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1a77a:	f1c2 0218 	rsb	r2, r2, #24	; 0x18
   1a77e:	f1c2 0c20 	rsb	ip, r2, #32	; 0x20
   1a782:	fa10 f30c 	lsls.w	r3, r0, ip
   1a786:	fa20 f002 	lsr.w	r0, r0, r2
   1a78a:	bf18      	it	ne
   1a78c:	f040 0001 	orrne.w	r0, r0, #1	; 0x1
   1a790:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1a794:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1a798:	fa03 fc0c 	lsl.w	ip, r3, ip
   1a79c:	ea40 000c 	orr.w	r0, r0, ip
   1a7a0:	fa23 f302 	lsr.w	r3, r3, r2
   1a7a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1a7a8:	e7cc      	b.n	1a744 <__aeabi_d2f+0x14>
   1a7aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1a7ae:	d107      	bne.n	1a7c0 <__aeabi_d2f+0x90>
   1a7b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1a7b4:	bf1e      	ittt	ne
   1a7b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1a7ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1a7be:	4770      	bxne	lr
   1a7c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1a7c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1a7c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a7cc:	4770      	bx	lr
   1a7ce:	46c0      	nop			(mov r8, r8)

0001a7d0 <__aeabi_frsub>:
   1a7d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1a7d4:	e002      	b.n	1a7dc <__addsf3>
   1a7d6:	46c0      	nop			(mov r8, r8)

0001a7d8 <__aeabi_fsub>:
   1a7d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001a7dc <__addsf3>:
   1a7dc:	0042      	lsls	r2, r0, #1
   1a7de:	bf1f      	itttt	ne
   1a7e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1a7e4:	ea92 0f03 	teqne	r2, r3
   1a7e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1a7ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1a7f0:	d06a      	beq.n	1a8c8 <__addsf3+0xec>
   1a7f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1a7f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1a7fa:	bfc1      	itttt	gt
   1a7fc:	18d2      	addgt	r2, r2, r3
   1a7fe:	4041      	eorgt	r1, r0
   1a800:	4048      	eorgt	r0, r1
   1a802:	4041      	eorgt	r1, r0
   1a804:	bfb8      	it	lt
   1a806:	425b      	neglt	r3, r3
   1a808:	2b19      	cmp	r3, #25
   1a80a:	bf88      	it	hi
   1a80c:	4770      	bxhi	lr
   1a80e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1a812:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a816:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a81a:	bf18      	it	ne
   1a81c:	4240      	negne	r0, r0
   1a81e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1a822:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1a826:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1a82a:	bf18      	it	ne
   1a82c:	4249      	negne	r1, r1
   1a82e:	ea92 0f03 	teq	r2, r3
   1a832:	d03f      	beq.n	1a8b4 <__addsf3+0xd8>
   1a834:	f1a2 0201 	sub.w	r2, r2, #1	; 0x1
   1a838:	fa41 fc03 	asr.w	ip, r1, r3
   1a83c:	eb10 000c 	adds.w	r0, r0, ip
   1a840:	f1c3 0320 	rsb	r3, r3, #32	; 0x20
   1a844:	fa01 f103 	lsl.w	r1, r1, r3
   1a848:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1a84c:	d502      	bpl.n	1a854 <__addsf3+0x78>
   1a84e:	4249      	negs	r1, r1
   1a850:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1a854:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1a858:	d313      	bcc.n	1a882 <__addsf3+0xa6>
   1a85a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1a85e:	d306      	bcc.n	1a86e <__addsf3+0x92>
   1a860:	0840      	lsrs	r0, r0, #1
   1a862:	ea4f 0131 	mov.w	r1, r1, rrx
   1a866:	f102 0201 	add.w	r2, r2, #1	; 0x1
   1a86a:	2afe      	cmp	r2, #254
   1a86c:	d251      	bcs.n	1a912 <__addsf3+0x136>
   1a86e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1a872:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1a876:	bf08      	it	eq
   1a878:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1a87c:	ea40 0003 	orr.w	r0, r0, r3
   1a880:	4770      	bx	lr
   1a882:	0049      	lsls	r1, r1, #1
   1a884:	eb40 0000 	adc.w	r0, r0, r0
   1a888:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1a88c:	f1a2 0201 	sub.w	r2, r2, #1	; 0x1
   1a890:	d1ed      	bne.n	1a86e <__addsf3+0x92>
   1a892:	fab0 fc80 	clz	ip, r0
   1a896:	f1ac 0c08 	sub.w	ip, ip, #8	; 0x8
   1a89a:	ebb2 020c 	subs.w	r2, r2, ip
   1a89e:	fa00 f00c 	lsl.w	r0, r0, ip
   1a8a2:	bfaa      	itet	ge
   1a8a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1a8a8:	4252      	neglt	r2, r2
   1a8aa:	4318      	orrge	r0, r3
   1a8ac:	bfbc      	itt	lt
   1a8ae:	40d0      	lsrlt	r0, r2
   1a8b0:	4318      	orrlt	r0, r3
   1a8b2:	4770      	bx	lr
   1a8b4:	f092 0f00 	teq	r2, #0	; 0x0
   1a8b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1a8bc:	bf06      	itte	eq
   1a8be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1a8c2:	3201      	addeq	r2, #1
   1a8c4:	3b01      	subne	r3, #1
   1a8c6:	e7b5      	b.n	1a834 <__addsf3+0x58>
   1a8c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1a8cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1a8d0:	bf18      	it	ne
   1a8d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1a8d6:	d021      	beq.n	1a91c <__addsf3+0x140>
   1a8d8:	ea92 0f03 	teq	r2, r3
   1a8dc:	d004      	beq.n	1a8e8 <__addsf3+0x10c>
   1a8de:	f092 0f00 	teq	r2, #0	; 0x0
   1a8e2:	bf08      	it	eq
   1a8e4:	4608      	moveq	r0, r1
   1a8e6:	4770      	bx	lr
   1a8e8:	ea90 0f01 	teq	r0, r1
   1a8ec:	bf1c      	itt	ne
   1a8ee:	2000      	movne	r0, #0
   1a8f0:	4770      	bxne	lr
   1a8f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1a8f6:	d104      	bne.n	1a902 <__addsf3+0x126>
   1a8f8:	0040      	lsls	r0, r0, #1
   1a8fa:	bf28      	it	cs
   1a8fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1a900:	4770      	bx	lr
   1a902:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1a906:	bf3c      	itt	cc
   1a908:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1a90c:	4770      	bxcc	lr
   1a90e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1a912:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1a916:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a91a:	4770      	bx	lr
   1a91c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1a920:	bf16      	itet	ne
   1a922:	4608      	movne	r0, r1
   1a924:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1a928:	4601      	movne	r1, r0
   1a92a:	0242      	lsls	r2, r0, #9
   1a92c:	bf06      	itte	eq
   1a92e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1a932:	ea90 0f01 	teqeq	r0, r1
   1a936:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1a93a:	4770      	bx	lr

0001a93c <__aeabi_ui2f>:
   1a93c:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a940:	e004      	b.n	1a94c <__aeabi_i2f+0x8>
   1a942:	46c0      	nop			(mov r8, r8)

0001a944 <__aeabi_i2f>:
   1a944:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1a948:	bf48      	it	mi
   1a94a:	4240      	negmi	r0, r0
   1a94c:	ea5f 0c00 	movs.w	ip, r0
   1a950:	bf08      	it	eq
   1a952:	4770      	bxeq	lr
   1a954:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1a958:	4601      	mov	r1, r0
   1a95a:	f04f 0000 	mov.w	r0, #0	; 0x0
   1a95e:	e01c      	b.n	1a99a <__aeabi_l2f+0x2a>

0001a960 <__aeabi_ul2f>:
   1a960:	ea50 0201 	orrs.w	r2, r0, r1
   1a964:	bf08      	it	eq
   1a966:	4770      	bxeq	lr
   1a968:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a96c:	e00a      	b.n	1a984 <__aeabi_l2f+0x14>
   1a96e:	46c0      	nop			(mov r8, r8)

0001a970 <__aeabi_l2f>:
   1a970:	ea50 0201 	orrs.w	r2, r0, r1
   1a974:	bf08      	it	eq
   1a976:	4770      	bxeq	lr
   1a978:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1a97c:	d502      	bpl.n	1a984 <__aeabi_l2f+0x14>
   1a97e:	4240      	negs	r0, r0
   1a980:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a984:	ea5f 0c01 	movs.w	ip, r1
   1a988:	bf02      	ittt	eq
   1a98a:	4684      	moveq	ip, r0
   1a98c:	4601      	moveq	r1, r0
   1a98e:	2000      	moveq	r0, #0
   1a990:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1a994:	bf08      	it	eq
   1a996:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1a99a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1a99e:	fabc f28c 	clz	r2, ip
   1a9a2:	3a08      	subs	r2, #8
   1a9a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1a9a8:	db10      	blt.n	1a9cc <__aeabi_l2f+0x5c>
   1a9aa:	fa01 fc02 	lsl.w	ip, r1, r2
   1a9ae:	4463      	add	r3, ip
   1a9b0:	fa00 fc02 	lsl.w	ip, r0, r2
   1a9b4:	f1c2 0220 	rsb	r2, r2, #32	; 0x20
   1a9b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1a9bc:	fa20 f202 	lsr.w	r2, r0, r2
   1a9c0:	eb43 0002 	adc.w	r0, r3, r2
   1a9c4:	bf08      	it	eq
   1a9c6:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1a9ca:	4770      	bx	lr
   1a9cc:	f102 0220 	add.w	r2, r2, #32	; 0x20
   1a9d0:	fa01 fc02 	lsl.w	ip, r1, r2
   1a9d4:	f1c2 0220 	rsb	r2, r2, #32	; 0x20
   1a9d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1a9dc:	fa21 f202 	lsr.w	r2, r1, r2
   1a9e0:	eb43 0002 	adc.w	r0, r3, r2
   1a9e4:	bf08      	it	eq
   1a9e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1a9ea:	4770      	bx	lr

0001a9ec <__aeabi_fmul>:
   1a9ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1a9f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1a9f4:	bf1e      	ittt	ne
   1a9f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1a9fa:	ea92 0f0c 	teqne	r2, ip
   1a9fe:	ea93 0f0c 	teqne	r3, ip
   1aa02:	d06f      	beq.n	1aae4 <__aeabi_fmul+0xf8>
   1aa04:	441a      	add	r2, r3
   1aa06:	ea80 0c01 	eor.w	ip, r0, r1
   1aa0a:	0240      	lsls	r0, r0, #9
   1aa0c:	bf18      	it	ne
   1aa0e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1aa12:	d01e      	beq.n	1aa52 <__aeabi_fmul+0x66>
   1aa14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1aa18:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1aa1c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1aa20:	fba0 3101 	umull	r3, r1, r0, r1
   1aa24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1aa28:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1aa2c:	bf3e      	ittt	cc
   1aa2e:	0049      	lslcc	r1, r1, #1
   1aa30:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1aa34:	005b      	lslcc	r3, r3, #1
   1aa36:	ea40 0001 	orr.w	r0, r0, r1
   1aa3a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1aa3e:	2afd      	cmp	r2, #253
   1aa40:	d81d      	bhi.n	1aa7e <__aeabi_fmul+0x92>
   1aa42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1aa46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1aa4a:	bf08      	it	eq
   1aa4c:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1aa50:	4770      	bx	lr
   1aa52:	f090 0f00 	teq	r0, #0	; 0x0
   1aa56:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1aa5a:	bf08      	it	eq
   1aa5c:	0249      	lsleq	r1, r1, #9
   1aa5e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1aa62:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1aa66:	3a7f      	subs	r2, #127
   1aa68:	bfc2      	ittt	gt
   1aa6a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1aa6e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1aa72:	4770      	bxgt	lr
   1aa74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1aa78:	f04f 0300 	mov.w	r3, #0	; 0x0
   1aa7c:	3a01      	subs	r2, #1
   1aa7e:	dc5d      	bgt.n	1ab3c <__aeabi_fmul+0x150>
   1aa80:	f112 0f19 	cmn.w	r2, #25	; 0x19
   1aa84:	bfdc      	itt	le
   1aa86:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1aa8a:	4770      	bxle	lr
   1aa8c:	f1c2 0200 	rsb	r2, r2, #0	; 0x0
   1aa90:	0041      	lsls	r1, r0, #1
   1aa92:	fa21 f102 	lsr.w	r1, r1, r2
   1aa96:	f1c2 0220 	rsb	r2, r2, #32	; 0x20
   1aa9a:	fa00 fc02 	lsl.w	ip, r0, r2
   1aa9e:	ea5f 0031 	movs.w	r0, r1, rrx
   1aaa2:	f140 0000 	adc.w	r0, r0, #0	; 0x0
   1aaa6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1aaaa:	bf08      	it	eq
   1aaac:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1aab0:	4770      	bx	lr
   1aab2:	f092 0f00 	teq	r2, #0	; 0x0
   1aab6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1aaba:	bf02      	ittt	eq
   1aabc:	0040      	lsleq	r0, r0, #1
   1aabe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1aac2:	3a01      	subeq	r2, #1
   1aac4:	d0f9      	beq.n	1aaba <__aeabi_fmul+0xce>
   1aac6:	ea40 000c 	orr.w	r0, r0, ip
   1aaca:	f093 0f00 	teq	r3, #0	; 0x0
   1aace:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1aad2:	bf02      	ittt	eq
   1aad4:	0049      	lsleq	r1, r1, #1
   1aad6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1aada:	3b01      	subeq	r3, #1
   1aadc:	d0f9      	beq.n	1aad2 <__aeabi_fmul+0xe6>
   1aade:	ea41 010c 	orr.w	r1, r1, ip
   1aae2:	e78f      	b.n	1aa04 <__aeabi_fmul+0x18>
   1aae4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1aae8:	ea92 0f0c 	teq	r2, ip
   1aaec:	bf18      	it	ne
   1aaee:	ea93 0f0c 	teqne	r3, ip
   1aaf2:	d00a      	beq.n	1ab0a <__aeabi_fmul+0x11e>
   1aaf4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1aaf8:	bf18      	it	ne
   1aafa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1aafe:	d1d8      	bne.n	1aab2 <__aeabi_fmul+0xc6>
   1ab00:	ea80 0001 	eor.w	r0, r0, r1
   1ab04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1ab08:	4770      	bx	lr
   1ab0a:	f090 0f00 	teq	r0, #0	; 0x0
   1ab0e:	bf17      	itett	ne
   1ab10:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1ab14:	4608      	moveq	r0, r1
   1ab16:	f091 0f00 	teqne	r1, #0	; 0x0
   1ab1a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1ab1e:	d014      	beq.n	1ab4a <__aeabi_fmul+0x15e>
   1ab20:	ea92 0f0c 	teq	r2, ip
   1ab24:	d101      	bne.n	1ab2a <__aeabi_fmul+0x13e>
   1ab26:	0242      	lsls	r2, r0, #9
   1ab28:	d10f      	bne.n	1ab4a <__aeabi_fmul+0x15e>
   1ab2a:	ea93 0f0c 	teq	r3, ip
   1ab2e:	d103      	bne.n	1ab38 <__aeabi_fmul+0x14c>
   1ab30:	024b      	lsls	r3, r1, #9
   1ab32:	bf18      	it	ne
   1ab34:	4608      	movne	r0, r1
   1ab36:	d108      	bne.n	1ab4a <__aeabi_fmul+0x15e>
   1ab38:	ea80 0001 	eor.w	r0, r0, r1
   1ab3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1ab40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1ab44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ab48:	4770      	bx	lr
   1ab4a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1ab4e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1ab52:	4770      	bx	lr

0001ab54 <__aeabi_fdiv>:
   1ab54:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ab58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1ab5c:	bf1e      	ittt	ne
   1ab5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1ab62:	ea92 0f0c 	teqne	r2, ip
   1ab66:	ea93 0f0c 	teqne	r3, ip
   1ab6a:	d069      	beq.n	1ac40 <__aeabi_fdiv+0xec>
   1ab6c:	eba2 0203 	sub.w	r2, r2, r3
   1ab70:	ea80 0c01 	eor.w	ip, r0, r1
   1ab74:	0249      	lsls	r1, r1, #9
   1ab76:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1ab7a:	d037      	beq.n	1abec <__aeabi_fdiv+0x98>
   1ab7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ab80:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1ab84:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1ab88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1ab8c:	428b      	cmp	r3, r1
   1ab8e:	bf38      	it	cc
   1ab90:	005b      	lslcc	r3, r3, #1
   1ab92:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1ab96:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1ab9a:	428b      	cmp	r3, r1
   1ab9c:	bf24      	itt	cs
   1ab9e:	1a5b      	subcs	r3, r3, r1
   1aba0:	ea40 000c 	orrcs.w	r0, r0, ip
   1aba4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1aba8:	bf24      	itt	cs
   1abaa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1abae:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1abb2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1abb6:	bf24      	itt	cs
   1abb8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1abbc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1abc0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1abc4:	bf24      	itt	cs
   1abc6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1abca:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1abce:	011b      	lsls	r3, r3, #4
   1abd0:	bf18      	it	ne
   1abd2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1abd6:	d1e0      	bne.n	1ab9a <__aeabi_fdiv+0x46>
   1abd8:	2afd      	cmp	r2, #253
   1abda:	f63f af50 	bhi.w	1aa7e <__aeabi_fmul+0x92>
   1abde:	428b      	cmp	r3, r1
   1abe0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1abe4:	bf08      	it	eq
   1abe6:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1abea:	4770      	bx	lr
   1abec:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1abf0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1abf4:	327f      	adds	r2, #127
   1abf6:	bfc2      	ittt	gt
   1abf8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1abfc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1ac00:	4770      	bxgt	lr
   1ac02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ac06:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ac0a:	3a01      	subs	r2, #1
   1ac0c:	e737      	b.n	1aa7e <__aeabi_fmul+0x92>
   1ac0e:	f092 0f00 	teq	r2, #0	; 0x0
   1ac12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1ac16:	bf02      	ittt	eq
   1ac18:	0040      	lsleq	r0, r0, #1
   1ac1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1ac1e:	3a01      	subeq	r2, #1
   1ac20:	d0f9      	beq.n	1ac16 <__aeabi_fdiv+0xc2>
   1ac22:	ea40 000c 	orr.w	r0, r0, ip
   1ac26:	f093 0f00 	teq	r3, #0	; 0x0
   1ac2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1ac2e:	bf02      	ittt	eq
   1ac30:	0049      	lsleq	r1, r1, #1
   1ac32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1ac36:	3b01      	subeq	r3, #1
   1ac38:	d0f9      	beq.n	1ac2e <__aeabi_fdiv+0xda>
   1ac3a:	ea41 010c 	orr.w	r1, r1, ip
   1ac3e:	e795      	b.n	1ab6c <__aeabi_fdiv+0x18>
   1ac40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1ac44:	ea92 0f0c 	teq	r2, ip
   1ac48:	d108      	bne.n	1ac5c <__aeabi_fdiv+0x108>
   1ac4a:	0242      	lsls	r2, r0, #9
   1ac4c:	f47f af7d 	bne.w	1ab4a <__aeabi_fmul+0x15e>
   1ac50:	ea93 0f0c 	teq	r3, ip
   1ac54:	f47f af70 	bne.w	1ab38 <__aeabi_fmul+0x14c>
   1ac58:	4608      	mov	r0, r1
   1ac5a:	e776      	b.n	1ab4a <__aeabi_fmul+0x15e>
   1ac5c:	ea93 0f0c 	teq	r3, ip
   1ac60:	d104      	bne.n	1ac6c <__aeabi_fdiv+0x118>
   1ac62:	024b      	lsls	r3, r1, #9
   1ac64:	f43f af4c 	beq.w	1ab00 <__aeabi_fmul+0x114>
   1ac68:	4608      	mov	r0, r1
   1ac6a:	e76e      	b.n	1ab4a <__aeabi_fmul+0x15e>
   1ac6c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1ac70:	bf18      	it	ne
   1ac72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1ac76:	d1ca      	bne.n	1ac0e <__aeabi_fdiv+0xba>
   1ac78:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1ac7c:	f47f af5c 	bne.w	1ab38 <__aeabi_fmul+0x14c>
   1ac80:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1ac84:	f47f af3c 	bne.w	1ab00 <__aeabi_fmul+0x114>
   1ac88:	e75f      	b.n	1ab4a <__aeabi_fmul+0x15e>
   1ac8a:	46c0      	nop			(mov r8, r8)

0001ac8c <__gesf2>:
   1ac8c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1ac90:	e006      	b.n	1aca0 <__cmpsf2+0x4>
   1ac92:	46c0      	nop			(mov r8, r8)

0001ac94 <__lesf2>:
   1ac94:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1ac98:	e002      	b.n	1aca0 <__cmpsf2+0x4>
   1ac9a:	46c0      	nop			(mov r8, r8)

0001ac9c <__cmpsf2>:
   1ac9c:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1aca0:	f84d cc04 	str.w	ip, [sp, #-4]
   1aca4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1aca8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1acac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1acb0:	bf18      	it	ne
   1acb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1acb6:	d010      	beq.n	1acda <__cmpsf2+0x3e>
   1acb8:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1acbc:	bf18      	it	ne
   1acbe:	ea90 0f01 	teqne	r0, r1
   1acc2:	bf58      	it	pl
   1acc4:	ebb2 0003 	subspl.w	r0, r2, r3
   1acc8:	bf88      	it	hi
   1acca:	17c8      	asrhi	r0, r1, #31
   1accc:	bf38      	it	cc
   1acce:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   1acd2:	bf18      	it	ne
   1acd4:	f040 0001 	orrne.w	r0, r0, #1	; 0x1
   1acd8:	4770      	bx	lr
   1acda:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1acde:	d102      	bne.n	1ace6 <__cmpsf2+0x4a>
   1ace0:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1ace4:	d105      	bne.n	1acf2 <__cmpsf2+0x56>
   1ace6:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   1acea:	d1e5      	bne.n	1acb8 <__cmpsf2+0x1c>
   1acec:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1acf0:	d0e2      	beq.n	1acb8 <__cmpsf2+0x1c>
   1acf2:	f85d 0c04 	ldr.w	r0, [sp, #-4]
   1acf6:	4770      	bx	lr

0001acf8 <__aeabi_cfrcmple>:
   1acf8:	4684      	mov	ip, r0
   1acfa:	4608      	mov	r0, r1
   1acfc:	4661      	mov	r1, ip
   1acfe:	e7ff      	b.n	1ad00 <__aeabi_cfcmpeq>

0001ad00 <__aeabi_cfcmpeq>:
   1ad00:	b50f      	push	{r0, r1, r2, r3, lr}
   1ad02:	f7ff ffcb 	bl	1ac9c <__cmpsf2>
   1ad06:	2800      	cmp	r0, #0
   1ad08:	bf48      	it	mi
   1ad0a:	f110 0f00 	cmnmi.w	r0, #0	; 0x0
   1ad0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

0001ad10 <__aeabi_fcmpeq>:
   1ad10:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ad14:	f7ff fff4 	bl	1ad00 <__aeabi_cfcmpeq>
   1ad18:	bf0c      	ite	eq
   1ad1a:	2001      	moveq	r0, #1
   1ad1c:	2000      	movne	r0, #0
   1ad1e:	f85d fb08 	ldr.w	pc, [sp], #8
   1ad22:	46c0      	nop			(mov r8, r8)

0001ad24 <__aeabi_fcmplt>:
   1ad24:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ad28:	f7ff ffea 	bl	1ad00 <__aeabi_cfcmpeq>
   1ad2c:	bf34      	ite	cc
   1ad2e:	2001      	movcc	r0, #1
   1ad30:	2000      	movcs	r0, #0
   1ad32:	f85d fb08 	ldr.w	pc, [sp], #8
   1ad36:	46c0      	nop			(mov r8, r8)

0001ad38 <__aeabi_fcmple>:
   1ad38:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ad3c:	f7ff ffe0 	bl	1ad00 <__aeabi_cfcmpeq>
   1ad40:	bf94      	ite	ls
   1ad42:	2001      	movls	r0, #1
   1ad44:	2000      	movhi	r0, #0
   1ad46:	f85d fb08 	ldr.w	pc, [sp], #8
   1ad4a:	46c0      	nop			(mov r8, r8)

0001ad4c <__aeabi_fcmpge>:
   1ad4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ad50:	f7ff ffd2 	bl	1acf8 <__aeabi_cfrcmple>
   1ad54:	bf94      	ite	ls
   1ad56:	2001      	movls	r0, #1
   1ad58:	2000      	movhi	r0, #0
   1ad5a:	f85d fb08 	ldr.w	pc, [sp], #8
   1ad5e:	46c0      	nop			(mov r8, r8)

0001ad60 <__aeabi_fcmpgt>:
   1ad60:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ad64:	f7ff ffc8 	bl	1acf8 <__aeabi_cfrcmple>
   1ad68:	bf34      	ite	cc
   1ad6a:	2001      	movcc	r0, #1
   1ad6c:	2000      	movcs	r0, #0
   1ad6e:	f85d fb08 	ldr.w	pc, [sp], #8
   1ad72:	46c0      	nop			(mov r8, r8)

0001ad74 <__aeabi_f2iz>:
   1ad74:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1ad78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1ad7c:	d30f      	bcc.n	1ad9e <__aeabi_f2iz+0x2a>
   1ad7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1ad82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1ad86:	d90d      	bls.n	1ada4 <__aeabi_f2iz+0x30>
   1ad88:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1ad8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1ad90:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1ad94:	fa23 f002 	lsr.w	r0, r3, r2
   1ad98:	bf18      	it	ne
   1ad9a:	4240      	negne	r0, r0
   1ad9c:	4770      	bx	lr
   1ad9e:	f04f 0000 	mov.w	r0, #0	; 0x0
   1ada2:	4770      	bx	lr
   1ada4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1ada8:	d101      	bne.n	1adae <__aeabi_f2iz+0x3a>
   1adaa:	0242      	lsls	r2, r0, #9
   1adac:	d105      	bne.n	1adba <__aeabi_f2iz+0x46>
   1adae:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   1adb2:	bf08      	it	eq
   1adb4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1adb8:	4770      	bx	lr
   1adba:	f04f 0000 	mov.w	r0, #0	; 0x0
   1adbe:	4770      	bx	lr

0001adc0 <__aeabi_f2uiz>:
   1adc0:	0042      	lsls	r2, r0, #1
   1adc2:	d20e      	bcs.n	1ade2 <__aeabi_f2uiz+0x22>
   1adc4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1adc8:	d30b      	bcc.n	1ade2 <__aeabi_f2uiz+0x22>
   1adca:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1adce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1add2:	d409      	bmi.n	1ade8 <__aeabi_f2uiz+0x28>
   1add4:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1add8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1addc:	fa23 f002 	lsr.w	r0, r3, r2
   1ade0:	4770      	bx	lr
   1ade2:	f04f 0000 	mov.w	r0, #0	; 0x0
   1ade6:	4770      	bx	lr
   1ade8:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1adec:	d101      	bne.n	1adf2 <__aeabi_f2uiz+0x32>
   1adee:	0242      	lsls	r2, r0, #9
   1adf0:	d102      	bne.n	1adf8 <__aeabi_f2uiz+0x38>
   1adf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1adf6:	4770      	bx	lr
   1adf8:	f04f 0000 	mov.w	r0, #0	; 0x0
   1adfc:	4770      	bx	lr
   1adfe:	46c0      	nop			(mov r8, r8)

0001ae00 <_Unwind_decode_target2>:
   1ae00:	4603      	mov	r3, r0
   1ae02:	6800      	ldr	r0, [r0, #0]
   1ae04:	b100      	cbz	r0, 1ae08 <_Unwind_decode_target2+0x8>
   1ae06:	18c0      	adds	r0, r0, r3
   1ae08:	4770      	bx	lr
   1ae0a:	46c0      	nop			(mov r8, r8)

0001ae0c <_Unwind_VRS_Get>:
   1ae0c:	b410      	push	{r4}
   1ae0e:	469c      	mov	ip, r3
   1ae10:	4604      	mov	r4, r0
   1ae12:	b969      	cbnz	r1, 1ae30 <_Unwind_VRS_Get+0x24>
   1ae14:	2a0f      	cmp	r2, #15
   1ae16:	bf94      	ite	ls
   1ae18:	2300      	movls	r3, #0
   1ae1a:	2301      	movhi	r3, #1
   1ae1c:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   1ae20:	bf0c      	ite	eq
   1ae22:	4618      	moveq	r0, r3
   1ae24:	f043 0001 	orrne.w	r0, r3, #1	; 0x1
   1ae28:	b130      	cbz	r0, 1ae38 <_Unwind_VRS_Get+0x2c>
   1ae2a:	2002      	movs	r0, #2
   1ae2c:	bc10      	pop	{r4}
   1ae2e:	4770      	bx	lr
   1ae30:	2904      	cmp	r1, #4
   1ae32:	d8fa      	bhi.n	1ae2a <_Unwind_VRS_Get+0x1e>
   1ae34:	2001      	movs	r0, #1
   1ae36:	e7f9      	b.n	1ae2c <_Unwind_VRS_Get+0x20>
   1ae38:	0093      	lsls	r3, r2, #2
   1ae3a:	4423      	add	r3, r4
   1ae3c:	685a      	ldr	r2, [r3, #4]
   1ae3e:	9b01      	ldr	r3, [sp, #4]
   1ae40:	601a      	str	r2, [r3, #0]
   1ae42:	e7f3      	b.n	1ae2c <_Unwind_VRS_Get+0x20>

0001ae44 <_Unwind_GetGR>:
   1ae44:	b500      	push	{lr}
   1ae46:	b085      	sub	sp, #20
   1ae48:	460a      	mov	r2, r1
   1ae4a:	ab03      	add	r3, sp, #12
   1ae4c:	2100      	movs	r1, #0
   1ae4e:	9300      	str	r3, [sp, #0]
   1ae50:	460b      	mov	r3, r1
   1ae52:	f7ff ffdb 	bl	1ae0c <_Unwind_VRS_Get>
   1ae56:	9803      	ldr	r0, [sp, #12]
   1ae58:	b005      	add	sp, #20
   1ae5a:	bd00      	pop	{pc}

0001ae5c <_Unwind_VRS_Set>:
   1ae5c:	b410      	push	{r4}
   1ae5e:	469c      	mov	ip, r3
   1ae60:	4604      	mov	r4, r0
   1ae62:	b969      	cbnz	r1, 1ae80 <_Unwind_VRS_Set+0x24>
   1ae64:	2a0f      	cmp	r2, #15
   1ae66:	bf94      	ite	ls
   1ae68:	2300      	movls	r3, #0
   1ae6a:	2301      	movhi	r3, #1
   1ae6c:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   1ae70:	bf0c      	ite	eq
   1ae72:	4618      	moveq	r0, r3
   1ae74:	f043 0001 	orrne.w	r0, r3, #1	; 0x1
   1ae78:	b130      	cbz	r0, 1ae88 <_Unwind_VRS_Set+0x2c>
   1ae7a:	2002      	movs	r0, #2
   1ae7c:	bc10      	pop	{r4}
   1ae7e:	4770      	bx	lr
   1ae80:	2904      	cmp	r1, #4
   1ae82:	d8fa      	bhi.n	1ae7a <_Unwind_VRS_Set+0x1e>
   1ae84:	2001      	movs	r0, #1
   1ae86:	e7f9      	b.n	1ae7c <_Unwind_VRS_Set+0x20>
   1ae88:	9901      	ldr	r1, [sp, #4]
   1ae8a:	0093      	lsls	r3, r2, #2
   1ae8c:	680a      	ldr	r2, [r1, #0]
   1ae8e:	4423      	add	r3, r4
   1ae90:	605a      	str	r2, [r3, #4]
   1ae92:	e7f3      	b.n	1ae7c <_Unwind_VRS_Set+0x20>

0001ae94 <_Unwind_SetGR>:
   1ae94:	b500      	push	{lr}
   1ae96:	b085      	sub	sp, #20
   1ae98:	ab04      	add	r3, sp, #16
   1ae9a:	468c      	mov	ip, r1
   1ae9c:	f843 2d04 	str.w	r2, [r3, #-4]!
   1aea0:	2100      	movs	r1, #0
   1aea2:	9300      	str	r3, [sp, #0]
   1aea4:	4662      	mov	r2, ip
   1aea6:	460b      	mov	r3, r1
   1aea8:	f7ff ffd8 	bl	1ae5c <_Unwind_VRS_Set>
   1aeac:	b005      	add	sp, #20
   1aeae:	bd00      	pop	{pc}

0001aeb0 <selfrel_offset31>:
   1aeb0:	6803      	ldr	r3, [r0, #0]
   1aeb2:	4602      	mov	r2, r0
   1aeb4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1aeb8:	bf14      	ite	ne
   1aeba:	f043 4000 	orrne.w	r0, r3, #2147483648	; 0x80000000
   1aebe:	f023 4000 	biceq.w	r0, r3, #2147483648	; 0x80000000
   1aec2:	4410      	add	r0, r2
   1aec4:	4770      	bx	lr
   1aec6:	46c0      	nop			(mov r8, r8)

0001aec8 <search_EIT_table>:
   1aec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aecc:	4682      	mov	sl, r0
   1aece:	b081      	sub	sp, #4
   1aed0:	4690      	mov	r8, r2
   1aed2:	2900      	cmp	r1, #0
   1aed4:	d024      	beq.n	1af20 <search_EIT_table+0x58>
   1aed6:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
   1aeda:	46d9      	mov	r9, fp
   1aedc:	2700      	movs	r7, #0
   1aede:	e000      	b.n	1aee2 <search_EIT_table+0x1a>
   1aee0:	1c67      	adds	r7, r4, #1
   1aee2:	eb09 0307 	add.w	r3, r9, r7
   1aee6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1aeea:	105c      	asrs	r4, r3, #1
   1aeec:	00e2      	lsls	r2, r4, #3
   1aeee:	eb0a 0502 	add.w	r5, sl, r2
   1aef2:	4628      	mov	r0, r5
   1aef4:	f7ff ffdc 	bl	1aeb0 <selfrel_offset31>
   1aef8:	45a3      	cmp	fp, r4
   1aefa:	4606      	mov	r6, r0
   1aefc:	bf08      	it	eq
   1aefe:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   1af02:	d005      	beq.n	1af10 <search_EIT_table+0x48>
   1af04:	1c60      	adds	r0, r4, #1
   1af06:	00c0      	lsls	r0, r0, #3
   1af08:	4450      	add	r0, sl
   1af0a:	f7ff ffd1 	bl	1aeb0 <selfrel_offset31>
   1af0e:	3801      	subs	r0, #1
   1af10:	4546      	cmp	r6, r8
   1af12:	d807      	bhi.n	1af24 <search_EIT_table+0x5c>
   1af14:	4540      	cmp	r0, r8
   1af16:	d3e3      	bcc.n	1aee0 <search_EIT_table+0x18>
   1af18:	4628      	mov	r0, r5
   1af1a:	b001      	add	sp, #4
   1af1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af20:	2500      	movs	r5, #0
   1af22:	e7f9      	b.n	1af18 <search_EIT_table+0x50>
   1af24:	42bc      	cmp	r4, r7
   1af26:	d0fb      	beq.n	1af20 <search_EIT_table+0x58>
   1af28:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
   1af2c:	e7d9      	b.n	1aee2 <search_EIT_table+0x1a>
   1af2e:	46c0      	nop			(mov r8, r8)

0001af30 <_Unwind_GetCFA>:
   1af30:	6c40      	ldr	r0, [r0, #68]
   1af32:	4770      	bx	lr

0001af34 <_Unwind_Complete>:
   1af34:	4770      	bx	lr
   1af36:	46c0      	nop			(mov r8, r8)

0001af38 <_Unwind_DeleteException>:
   1af38:	b500      	push	{lr}
   1af3a:	6883      	ldr	r3, [r0, #8]
   1af3c:	b081      	sub	sp, #4
   1af3e:	4601      	mov	r1, r0
   1af40:	b10b      	cbz	r3, 1af46 <_Unwind_DeleteException+0xe>
   1af42:	2001      	movs	r0, #1
   1af44:	4798      	blx	r3
   1af46:	b001      	add	sp, #4
   1af48:	bd00      	pop	{pc}
   1af4a:	46c0      	nop			(mov r8, r8)

0001af4c <__gnu_unwind_pr_common>:
   1af4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af50:	4688      	mov	r8, r1
   1af52:	b089      	sub	sp, #36
   1af54:	f000 0108 	and.w	r1, r0, #8	; 0x8
   1af58:	f000 0003 	and.w	r0, r0, #3	; 0x3
   1af5c:	9003      	str	r0, [sp, #12]
   1af5e:	f8d8 004c 	ldr.w	r0, [r8, #76]
   1af62:	4691      	mov	r9, r2
   1af64:	f850 2b04 	ldr.w	r2, [r0], #4
   1af68:	469b      	mov	fp, r3
   1af6a:	9102      	str	r1, [sp, #8]
   1af6c:	9005      	str	r0, [sp, #20]
   1af6e:	2b00      	cmp	r3, #0
   1af70:	f040 80c1 	bne.w	1b0f6 <__gnu_unwind_pr_common+0x1aa>
   1af74:	0213      	lsls	r3, r2, #8
   1af76:	9304      	str	r3, [sp, #16]
   1af78:	2303      	movs	r3, #3
   1af7a:	f88d b019 	strb.w	fp, [sp, #25]
   1af7e:	f88d 3018 	strb.w	r3, [sp, #24]
   1af82:	9a03      	ldr	r2, [sp, #12]
   1af84:	f8d8 3050 	ldr.w	r3, [r8, #80]
   1af88:	2a02      	cmp	r2, #2
   1af8a:	bf08      	it	eq
   1af8c:	f8d8 0038 	ldreq.w	r0, [r8, #56]
   1af90:	f013 0301 	ands.w	r3, r3, #1	; 0x1
   1af94:	bf02      	ittt	eq
   1af96:	f108 0158 	addeq.w	r1, r8, #88	; 0x58
   1af9a:	9301      	streq	r3, [sp, #4]
   1af9c:	9100      	streq	r1, [sp, #0]
   1af9e:	f040 80b6 	bne.w	1b10e <__gnu_unwind_pr_common+0x1c2>
   1afa2:	6803      	ldr	r3, [r0, #0]
   1afa4:	2b00      	cmp	r3, #0
   1afa6:	d02e      	beq.n	1b006 <__gnu_unwind_pr_common+0xba>
   1afa8:	f1bb 0f02 	cmp.w	fp, #2	; 0x2
   1afac:	bf0a      	itet	eq
   1afae:	6844      	ldreq	r4, [r0, #4]
   1afb0:	8844      	ldrhne	r4, [r0, #2]
   1afb2:	461e      	moveq	r6, r3
   1afb4:	f8d8 3048 	ldr.w	r3, [r8, #72]
   1afb8:	bf0c      	ite	eq
   1afba:	f100 0708 	addeq.w	r7, r0, #8	; 0x8
   1afbe:	8806      	ldrhne	r6, [r0, #0]
   1afc0:	f024 0201 	bic.w	r2, r4, #1	; 0x1
   1afc4:	bf18      	it	ne
   1afc6:	1d07      	addne	r7, r0, #4
   1afc8:	210f      	movs	r1, #15
   1afca:	4648      	mov	r0, r9
   1afcc:	eb02 0503 	add.w	r5, r2, r3
   1afd0:	f7ff ff38 	bl	1ae44 <_Unwind_GetGR>
   1afd4:	4285      	cmp	r5, r0
   1afd6:	d922      	bls.n	1b01e <__gnu_unwind_pr_common+0xd2>
   1afd8:	f004 0201 	and.w	r2, r4, #1	; 0x1
   1afdc:	f006 0301 	and.w	r3, r6, #1	; 0x1
   1afe0:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
   1afe4:	2000      	movs	r0, #0
   1afe6:	2a01      	cmp	r2, #1
   1afe8:	d028      	beq.n	1b03c <__gnu_unwind_pr_common+0xf0>
   1afea:	d248      	bcs.n	1b07e <__gnu_unwind_pr_common+0x132>
   1afec:	9a03      	ldr	r2, [sp, #12]
   1afee:	2a00      	cmp	r2, #0
   1aff0:	bf0c      	ite	eq
   1aff2:	2300      	moveq	r3, #0
   1aff4:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   1aff8:	2b00      	cmp	r3, #0
   1affa:	f040 80ec 	bne.w	1b1d6 <__gnu_unwind_pr_common+0x28a>
   1affe:	1d38      	adds	r0, r7, #4
   1b000:	6803      	ldr	r3, [r0, #0]
   1b002:	2b00      	cmp	r3, #0
   1b004:	d1d0      	bne.n	1afa8 <__gnu_unwind_pr_common+0x5c>
   1b006:	4648      	mov	r0, r9
   1b008:	a904      	add	r1, sp, #16
   1b00a:	f000 fd67 	bl	1badc <__gnu_unwind_execute>
   1b00e:	2800      	cmp	r0, #0
   1b010:	d137      	bne.n	1b082 <__gnu_unwind_pr_common+0x136>
   1b012:	9b01      	ldr	r3, [sp, #4]
   1b014:	2b00      	cmp	r3, #0
   1b016:	f040 80ce 	bne.w	1b1b6 <__gnu_unwind_pr_common+0x26a>
   1b01a:	3008      	adds	r0, #8
   1b01c:	e032      	b.n	1b084 <__gnu_unwind_pr_common+0x138>
   1b01e:	f026 0301 	bic.w	r3, r6, #1	; 0x1
   1b022:	442b      	add	r3, r5
   1b024:	4298      	cmp	r0, r3
   1b026:	bf2c      	ite	cs
   1b028:	2000      	movcs	r0, #0
   1b02a:	2001      	movcc	r0, #1
   1b02c:	f004 0201 	and.w	r2, r4, #1	; 0x1
   1b030:	f006 0301 	and.w	r3, r6, #1	; 0x1
   1b034:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
   1b038:	2a01      	cmp	r2, #1
   1b03a:	d1d6      	bne.n	1afea <__gnu_unwind_pr_common+0x9e>
   1b03c:	9b03      	ldr	r3, [sp, #12]
   1b03e:	2b00      	cmp	r3, #0
   1b040:	d16f      	bne.n	1b122 <__gnu_unwind_pr_common+0x1d6>
   1b042:	b1c8      	cbz	r0, 1b078 <__gnu_unwind_pr_common+0x12c>
   1b044:	687b      	ldr	r3, [r7, #4]
   1b046:	4638      	mov	r0, r7
   1b048:	f113 0f02 	cmn.w	r3, #2	; 0x2
   1b04c:	f850 4b04 	ldr.w	r4, [r0], #4
   1b050:	d017      	beq.n	1b082 <__gnu_unwind_pr_common+0x136>
   1b052:	9900      	ldr	r1, [sp, #0]
   1b054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b058:	9107      	str	r1, [sp, #28]
   1b05a:	f000 809b 	beq.w	1b194 <__gnu_unwind_pr_common+0x248>
   1b05e:	f7ff fecf 	bl	1ae00 <_Unwind_decode_target2>
   1b062:	0fe2      	lsrs	r2, r4, #31
   1b064:	4601      	mov	r1, r0
   1b066:	ab07      	add	r3, sp, #28
   1b068:	4640      	mov	r0, r8
   1b06a:	f001 fe37 	bl	1ccdc <__cxa_type_match>
   1b06e:	2800      	cmp	r0, #0
   1b070:	f040 8090 	bne.w	1b194 <__gnu_unwind_pr_common+0x248>
   1b074:	9a03      	ldr	r2, [sp, #12]
   1b076:	9207      	str	r2, [sp, #28]
   1b078:	f107 0008 	add.w	r0, r7, #8	; 0x8
   1b07c:	e791      	b.n	1afa2 <__gnu_unwind_pr_common+0x56>
   1b07e:	2a02      	cmp	r2, #2
   1b080:	d003      	beq.n	1b08a <__gnu_unwind_pr_common+0x13e>
   1b082:	2009      	movs	r0, #9
   1b084:	b009      	add	sp, #36
   1b086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b08a:	683a      	ldr	r2, [r7, #0]
   1b08c:	9b03      	ldr	r3, [sp, #12]
   1b08e:	f022 4a00 	bic.w	sl, r2, #2147483648	; 0x80000000
   1b092:	2b00      	cmp	r3, #0
   1b094:	d160      	bne.n	1b158 <__gnu_unwind_pr_common+0x20c>
   1b096:	b328      	cbz	r0, 1b0e4 <__gnu_unwind_pr_common+0x198>
   1b098:	9902      	ldr	r1, [sp, #8]
   1b09a:	f1da 0301 	rsbs	r3, sl, #1	; 0x1
   1b09e:	bf38      	it	cc
   1b0a0:	2300      	movcc	r3, #0
   1b0a2:	2900      	cmp	r1, #0
   1b0a4:	bf08      	it	eq
   1b0a6:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1b0aa:	b1db      	cbz	r3, 1b0e4 <__gnu_unwind_pr_common+0x198>
   1b0ac:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   1b0b0:	d074      	beq.n	1b19c <__gnu_unwind_pr_common+0x250>
   1b0b2:	1d3d      	adds	r5, r7, #4
   1b0b4:	9e03      	ldr	r6, [sp, #12]
   1b0b6:	e003      	b.n	1b0c0 <__gnu_unwind_pr_common+0x174>
   1b0b8:	3504      	adds	r5, #4
   1b0ba:	45a2      	cmp	sl, r4
   1b0bc:	d90f      	bls.n	1b0de <__gnu_unwind_pr_common+0x192>
   1b0be:	4626      	mov	r6, r4
   1b0c0:	9a00      	ldr	r2, [sp, #0]
   1b0c2:	4628      	mov	r0, r5
   1b0c4:	9207      	str	r2, [sp, #28]
   1b0c6:	f7ff fe9b 	bl	1ae00 <_Unwind_decode_target2>
   1b0ca:	2200      	movs	r2, #0
   1b0cc:	4601      	mov	r1, r0
   1b0ce:	ab07      	add	r3, sp, #28
   1b0d0:	4640      	mov	r0, r8
   1b0d2:	1c74      	adds	r4, r6, #1
   1b0d4:	f001 fe02 	bl	1ccdc <__cxa_type_match>
   1b0d8:	2800      	cmp	r0, #0
   1b0da:	d0ed      	beq.n	1b0b8 <__gnu_unwind_pr_common+0x16c>
   1b0dc:	4634      	mov	r4, r6
   1b0de:	4554      	cmp	r4, sl
   1b0e0:	d05c      	beq.n	1b19c <__gnu_unwind_pr_common+0x250>
   1b0e2:	683a      	ldr	r2, [r7, #0]
   1b0e4:	2a00      	cmp	r2, #0
   1b0e6:	bfac      	ite	ge
   1b0e8:	4638      	movge	r0, r7
   1b0ea:	1d38      	addlt	r0, r7, #4
   1b0ec:	f10a 0301 	add.w	r3, sl, #1	; 0x1
   1b0f0:	009b      	lsls	r3, r3, #2
   1b0f2:	18c0      	adds	r0, r0, r3
   1b0f4:	e755      	b.n	1afa2 <__gnu_unwind_pr_common+0x56>
   1b0f6:	0c13      	lsrs	r3, r2, #16
   1b0f8:	b2db      	uxtb	r3, r3
   1b0fa:	2102      	movs	r1, #2
   1b0fc:	f88d 3019 	strb.w	r3, [sp, #25]
   1b100:	408b      	lsls	r3, r1
   1b102:	0412      	lsls	r2, r2, #16
   1b104:	9204      	str	r2, [sp, #16]
   1b106:	f88d 1018 	strb.w	r1, [sp, #24]
   1b10a:	18c0      	adds	r0, r0, r3
   1b10c:	e739      	b.n	1af82 <__gnu_unwind_pr_common+0x36>
   1b10e:	2300      	movs	r3, #0
   1b110:	4648      	mov	r0, r9
   1b112:	a904      	add	r1, sp, #16
   1b114:	9301      	str	r3, [sp, #4]
   1b116:	f000 fce1 	bl	1badc <__gnu_unwind_execute>
   1b11a:	2800      	cmp	r0, #0
   1b11c:	f43f af79 	beq.w	1b012 <__gnu_unwind_pr_common+0xc6>
   1b120:	e7af      	b.n	1b082 <__gnu_unwind_pr_common+0x136>
   1b122:	210d      	movs	r1, #13
   1b124:	4648      	mov	r0, r9
   1b126:	f8d8 4020 	ldr.w	r4, [r8, #32]
   1b12a:	f7ff fe8b 	bl	1ae44 <_Unwind_GetGR>
   1b12e:	4284      	cmp	r4, r0
   1b130:	d1a2      	bne.n	1b078 <__gnu_unwind_pr_common+0x12c>
   1b132:	f8d8 3028 	ldr.w	r3, [r8, #40]
   1b136:	429f      	cmp	r7, r3
   1b138:	d19e      	bne.n	1b078 <__gnu_unwind_pr_common+0x12c>
   1b13a:	4638      	mov	r0, r7
   1b13c:	f7ff feb8 	bl	1aeb0 <selfrel_offset31>
   1b140:	4602      	mov	r2, r0
   1b142:	210f      	movs	r1, #15
   1b144:	4648      	mov	r0, r9
   1b146:	f7ff fea5 	bl	1ae94 <_Unwind_SetGR>
   1b14a:	4648      	mov	r0, r9
   1b14c:	2100      	movs	r1, #0
   1b14e:	4642      	mov	r2, r8
   1b150:	f7ff fea0 	bl	1ae94 <_Unwind_SetGR>
   1b154:	2007      	movs	r0, #7
   1b156:	e795      	b.n	1b084 <__gnu_unwind_pr_common+0x138>
   1b158:	210d      	movs	r1, #13
   1b15a:	4648      	mov	r0, r9
   1b15c:	f8d8 4020 	ldr.w	r4, [r8, #32]
   1b160:	f7ff fe70 	bl	1ae44 <_Unwind_GetGR>
   1b164:	4284      	cmp	r4, r0
   1b166:	d1bc      	bne.n	1b0e2 <__gnu_unwind_pr_common+0x196>
   1b168:	f8d8 3028 	ldr.w	r3, [r8, #40]
   1b16c:	429f      	cmp	r7, r3
   1b16e:	d1b8      	bne.n	1b0e2 <__gnu_unwind_pr_common+0x196>
   1b170:	2104      	movs	r1, #4
   1b172:	2300      	movs	r3, #0
   1b174:	eb07 0001 	add.w	r0, r7, r1
   1b178:	f8c8 a028 	str.w	sl, [r8, #40]
   1b17c:	f8c8 302c 	str.w	r3, [r8, #44]
   1b180:	f8c8 1030 	str.w	r1, [r8, #48]
   1b184:	f8c8 0034 	str.w	r0, [r8, #52]
   1b188:	683b      	ldr	r3, [r7, #0]
   1b18a:	2b00      	cmp	r3, #0
   1b18c:	da37      	bge.n	1b1fe <__gnu_unwind_pr_common+0x2b2>
   1b18e:	2201      	movs	r2, #1
   1b190:	9201      	str	r2, [sp, #4]
   1b192:	e7ab      	b.n	1b0ec <__gnu_unwind_pr_common+0x1a0>
   1b194:	9b07      	ldr	r3, [sp, #28]
   1b196:	2b00      	cmp	r3, #0
   1b198:	f43f af6e 	beq.w	1b078 <__gnu_unwind_pr_common+0x12c>
   1b19c:	4648      	mov	r0, r9
   1b19e:	210d      	movs	r1, #13
   1b1a0:	f7ff fe50 	bl	1ae44 <_Unwind_GetGR>
   1b1a4:	9b07      	ldr	r3, [sp, #28]
   1b1a6:	f8c8 0020 	str.w	r0, [r8, #32]
   1b1aa:	f8c8 3024 	str.w	r3, [r8, #36]
   1b1ae:	f8c8 7028 	str.w	r7, [r8, #40]
   1b1b2:	2006      	movs	r0, #6
   1b1b4:	e766      	b.n	1b084 <__gnu_unwind_pr_common+0x138>
   1b1b6:	210f      	movs	r1, #15
   1b1b8:	4648      	mov	r0, r9
   1b1ba:	f7ff fe43 	bl	1ae44 <_Unwind_GetGR>
   1b1be:	210e      	movs	r1, #14
   1b1c0:	4602      	mov	r2, r0
   1b1c2:	4648      	mov	r0, r9
   1b1c4:	f7ff fe66 	bl	1ae94 <_Unwind_SetGR>
   1b1c8:	4648      	mov	r0, r9
   1b1ca:	210f      	movs	r1, #15
   1b1cc:	4a0f      	ldr	r2, [pc, #60]	(1b20c <__gnu_unwind_pr_common+0x2c0>)
   1b1ce:	f7ff fe61 	bl	1ae94 <_Unwind_SetGR>
   1b1d2:	2007      	movs	r0, #7
   1b1d4:	e756      	b.n	1b084 <__gnu_unwind_pr_common+0x138>
   1b1d6:	4638      	mov	r0, r7
   1b1d8:	f7ff fe6a 	bl	1aeb0 <selfrel_offset31>
   1b1dc:	1d3b      	adds	r3, r7, #4
   1b1de:	4604      	mov	r4, r0
   1b1e0:	f8c8 3038 	str.w	r3, [r8, #56]
   1b1e4:	4640      	mov	r0, r8
   1b1e6:	f001 fd43 	bl	1cc70 <__cxa_begin_cleanup>
   1b1ea:	2800      	cmp	r0, #0
   1b1ec:	f43f af49 	beq.w	1b082 <__gnu_unwind_pr_common+0x136>
   1b1f0:	4648      	mov	r0, r9
   1b1f2:	210f      	movs	r1, #15
   1b1f4:	4622      	mov	r2, r4
   1b1f6:	f7ff fe4d 	bl	1ae94 <_Unwind_SetGR>
   1b1fa:	2007      	movs	r0, #7
   1b1fc:	e742      	b.n	1b084 <__gnu_unwind_pr_common+0x138>
   1b1fe:	f10a 0001 	add.w	r0, sl, #1	; 0x1
   1b202:	0080      	lsls	r0, r0, #2
   1b204:	4438      	add	r0, r7
   1b206:	f7ff fe53 	bl	1aeb0 <selfrel_offset31>
   1b20a:	e799      	b.n	1b140 <__gnu_unwind_pr_common+0x1f4>
   1b20c:	0001d8f9 	.word	0x0001d8f9

0001b210 <__aeabi_unwind_cpp_pr2>:
   1b210:	b500      	push	{lr}
   1b212:	2302      	movs	r3, #2
   1b214:	b081      	sub	sp, #4
   1b216:	f7ff fe99 	bl	1af4c <__gnu_unwind_pr_common>
   1b21a:	b001      	add	sp, #4
   1b21c:	bd00      	pop	{pc}
   1b21e:	46c0      	nop			(mov r8, r8)

0001b220 <__aeabi_unwind_cpp_pr1>:
   1b220:	b500      	push	{lr}
   1b222:	2301      	movs	r3, #1
   1b224:	b081      	sub	sp, #4
   1b226:	f7ff fe91 	bl	1af4c <__gnu_unwind_pr_common>
   1b22a:	b001      	add	sp, #4
   1b22c:	bd00      	pop	{pc}
   1b22e:	46c0      	nop			(mov r8, r8)

0001b230 <__aeabi_unwind_cpp_pr0>:
   1b230:	b500      	push	{lr}
   1b232:	2300      	movs	r3, #0
   1b234:	b081      	sub	sp, #4
   1b236:	f7ff fe89 	bl	1af4c <__gnu_unwind_pr_common>
   1b23a:	b001      	add	sp, #4
   1b23c:	bd00      	pop	{pc}
   1b23e:	46c0      	nop			(mov r8, r8)

0001b240 <get_eit_entry>:
   1b240:	b530      	push	{r4, r5, lr}
   1b242:	4b2d      	ldr	r3, [pc, #180]	(1b2f8 <get_eit_entry+0xb8>)
   1b244:	b083      	sub	sp, #12
   1b246:	4605      	mov	r5, r0
   1b248:	1e8c      	subs	r4, r1, #2
   1b24a:	2b00      	cmp	r3, #0
   1b24c:	d04a      	beq.n	1b2e4 <get_eit_entry+0xa4>
   1b24e:	4620      	mov	r0, r4
   1b250:	a901      	add	r1, sp, #4
   1b252:	e000      	b.n	1b256 <get_eit_entry+0x16>
   1b254:	bf00      	nop
   1b256:	4602      	mov	r2, r0
   1b258:	2800      	cmp	r0, #0
   1b25a:	d02b      	beq.n	1b2b4 <get_eit_entry+0x74>
   1b25c:	4610      	mov	r0, r2
   1b25e:	9901      	ldr	r1, [sp, #4]
   1b260:	4622      	mov	r2, r4
   1b262:	f7ff fe31 	bl	1aec8 <search_EIT_table>
   1b266:	4604      	mov	r4, r0
   1b268:	b300      	cbz	r0, 1b2ac <get_eit_entry+0x6c>
   1b26a:	f7ff fe21 	bl	1aeb0 <selfrel_offset31>
   1b26e:	64a8      	str	r0, [r5, #72]
   1b270:	6863      	ldr	r3, [r4, #4]
   1b272:	2b01      	cmp	r3, #1
   1b274:	d02e      	beq.n	1b2d4 <get_eit_entry+0x94>
   1b276:	2b00      	cmp	r3, #0
   1b278:	db1f      	blt.n	1b2ba <get_eit_entry+0x7a>
   1b27a:	1d20      	adds	r0, r4, #4
   1b27c:	f7ff fe18 	bl	1aeb0 <selfrel_offset31>
   1b280:	64e8      	str	r0, [r5, #76]
   1b282:	2300      	movs	r3, #0
   1b284:	6ce8      	ldr	r0, [r5, #76]
   1b286:	652b      	str	r3, [r5, #80]
   1b288:	6803      	ldr	r3, [r0, #0]
   1b28a:	2b00      	cmp	r3, #0
   1b28c:	da1d      	bge.n	1b2ca <get_eit_entry+0x8a>
   1b28e:	0e1b      	lsrs	r3, r3, #24
   1b290:	f013 000f 	ands.w	r0, r3, #15	; 0xf
   1b294:	bf04      	itt	eq
   1b296:	4b19      	ldreq	r3, [pc, #100]	(1b2fc <get_eit_entry+0xbc>)
   1b298:	612b      	streq	r3, [r5, #16]
   1b29a:	d009      	beq.n	1b2b0 <get_eit_entry+0x70>
   1b29c:	2801      	cmp	r0, #1
   1b29e:	d01d      	beq.n	1b2dc <get_eit_entry+0x9c>
   1b2a0:	2802      	cmp	r0, #2
   1b2a2:	d025      	beq.n	1b2f0 <get_eit_entry+0xb0>
   1b2a4:	2300      	movs	r3, #0
   1b2a6:	612b      	str	r3, [r5, #16]
   1b2a8:	2009      	movs	r0, #9
   1b2aa:	e001      	b.n	1b2b0 <get_eit_entry+0x70>
   1b2ac:	6128      	str	r0, [r5, #16]
   1b2ae:	2009      	movs	r0, #9
   1b2b0:	b003      	add	sp, #12
   1b2b2:	bd30      	pop	{r4, r5, pc}
   1b2b4:	6128      	str	r0, [r5, #16]
   1b2b6:	3009      	adds	r0, #9
   1b2b8:	e7fa      	b.n	1b2b0 <get_eit_entry+0x70>
   1b2ba:	1d23      	adds	r3, r4, #4
   1b2bc:	64eb      	str	r3, [r5, #76]
   1b2be:	2201      	movs	r2, #1
   1b2c0:	6ce8      	ldr	r0, [r5, #76]
   1b2c2:	652a      	str	r2, [r5, #80]
   1b2c4:	6803      	ldr	r3, [r0, #0]
   1b2c6:	2b00      	cmp	r3, #0
   1b2c8:	dbe1      	blt.n	1b28e <get_eit_entry+0x4e>
   1b2ca:	f7ff fdf1 	bl	1aeb0 <selfrel_offset31>
   1b2ce:	6128      	str	r0, [r5, #16]
   1b2d0:	2000      	movs	r0, #0
   1b2d2:	e7ed      	b.n	1b2b0 <get_eit_entry+0x70>
   1b2d4:	3b01      	subs	r3, #1
   1b2d6:	612b      	str	r3, [r5, #16]
   1b2d8:	2005      	movs	r0, #5
   1b2da:	e7e9      	b.n	1b2b0 <get_eit_entry+0x70>
   1b2dc:	4b08      	ldr	r3, [pc, #32]	(1b300 <get_eit_entry+0xc0>)
   1b2de:	3801      	subs	r0, #1
   1b2e0:	612b      	str	r3, [r5, #16]
   1b2e2:	e7e5      	b.n	1b2b0 <get_eit_entry+0x70>
   1b2e4:	4a07      	ldr	r2, [pc, #28]	(1b304 <get_eit_entry+0xc4>)
   1b2e6:	4b08      	ldr	r3, [pc, #32]	(1b308 <get_eit_entry+0xc8>)
   1b2e8:	1a9b      	subs	r3, r3, r2
   1b2ea:	10db      	asrs	r3, r3, #3
   1b2ec:	9301      	str	r3, [sp, #4]
   1b2ee:	e7b5      	b.n	1b25c <get_eit_entry+0x1c>
   1b2f0:	4b06      	ldr	r3, [pc, #24]	(1b30c <get_eit_entry+0xcc>)
   1b2f2:	3802      	subs	r0, #2
   1b2f4:	612b      	str	r3, [r5, #16]
   1b2f6:	e7db      	b.n	1b2b0 <get_eit_entry+0x70>
   1b2f8:	00000000 	.word	0x00000000
   1b2fc:	0001b231 	.word	0x0001b231
   1b300:	0001b221 	.word	0x0001b221
   1b304:	00023288 	.word	0x00023288
   1b308:	00023650 	.word	0x00023650
   1b30c:	0001b211 	.word	0x0001b211

0001b310 <restore_non_core_regs>:
   1b310:	6803      	ldr	r3, [r0, #0]
   1b312:	b510      	push	{r4, lr}
   1b314:	f013 0f01 	tst.w	r3, #1	; 0x1
   1b318:	4604      	mov	r4, r0
   1b31a:	d107      	bne.n	1b32c <restore_non_core_regs+0x1c>
   1b31c:	f013 0f02 	tst.w	r3, #2	; 0x2
   1b320:	d012      	beq.n	1b348 <restore_non_core_regs+0x38>
   1b322:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1b326:	f000 facf 	bl	1b8c8 <__gnu_Unwind_Restore_VFP_D>
   1b32a:	6823      	ldr	r3, [r4, #0]
   1b32c:	f013 0f04 	tst.w	r3, #4	; 0x4
   1b330:	d012      	beq.n	1b358 <restore_non_core_regs+0x48>
   1b332:	f013 0f08 	tst.w	r3, #8	; 0x8
   1b336:	d017      	beq.n	1b368 <restore_non_core_regs+0x58>
   1b338:	f013 0f10 	tst.w	r3, #16	; 0x10
   1b33c:	d103      	bne.n	1b346 <restore_non_core_regs+0x36>
   1b33e:	f504 700c 	add.w	r0, r4, #560	; 0x230
   1b342:	f000 fb15 	bl	1b970 <__gnu_Unwind_Restore_WMMXC>
   1b346:	bd10      	pop	{r4, pc}
   1b348:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1b34c:	f000 fab4 	bl	1b8b8 <__gnu_Unwind_Restore_VFP>
   1b350:	6823      	ldr	r3, [r4, #0]
   1b352:	f013 0f04 	tst.w	r3, #4	; 0x4
   1b356:	d1ec      	bne.n	1b332 <restore_non_core_regs+0x22>
   1b358:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1b35c:	f000 fabc 	bl	1b8d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1b360:	6823      	ldr	r3, [r4, #0]
   1b362:	f013 0f08 	tst.w	r3, #8	; 0x8
   1b366:	d1e7      	bne.n	1b338 <restore_non_core_regs+0x28>
   1b368:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   1b36c:	f000 fabc 	bl	1b8e8 <__gnu_Unwind_Restore_WMMXD>
   1b370:	6823      	ldr	r3, [r4, #0]
   1b372:	e7e1      	b.n	1b338 <restore_non_core_regs+0x28>

0001b374 <__gnu_Unwind_Backtrace>:
   1b374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b378:	6bd3      	ldr	r3, [r2, #60]
   1b37a:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
   1b37e:	6413      	str	r3, [r2, #64]
   1b380:	f10d 0c04 	add.w	ip, sp, #4	; 0x4
   1b384:	f102 0e04 	add.w	lr, r2, #4	; 0x4
   1b388:	4680      	mov	r8, r0
   1b38a:	460f      	mov	r7, r1
   1b38c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1b390:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1b394:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1b398:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1b39c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1b3a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1b3a4:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   1b3a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   1b3ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b3b0:	466e      	mov	r6, sp
   1b3b2:	9300      	str	r3, [sp, #0]
   1b3b4:	ad90      	add	r5, sp, #576
   1b3b6:	6c31      	ldr	r1, [r6, #64]
   1b3b8:	4628      	mov	r0, r5
   1b3ba:	f7ff ff41 	bl	1b240 <get_eit_entry>
   1b3be:	2800      	cmp	r0, #0
   1b3c0:	d121      	bne.n	1b406 <__gnu_Unwind_Backtrace+0x92>
   1b3c2:	4668      	mov	r0, sp
   1b3c4:	210c      	movs	r1, #12
   1b3c6:	462a      	mov	r2, r5
   1b3c8:	f7ff fd64 	bl	1ae94 <_Unwind_SetGR>
   1b3cc:	4668      	mov	r0, sp
   1b3ce:	4639      	mov	r1, r7
   1b3d0:	47c0      	blx	r8
   1b3d2:	b9c0      	cbnz	r0, 1b406 <__gnu_Unwind_Backtrace+0x92>
   1b3d4:	9b94      	ldr	r3, [sp, #592]
   1b3d6:	3008      	adds	r0, #8
   1b3d8:	4629      	mov	r1, r5
   1b3da:	466a      	mov	r2, sp
   1b3dc:	4798      	blx	r3
   1b3de:	f1b0 0309 	subs.w	r3, r0, #9	; 0x9
   1b3e2:	bf18      	it	ne
   1b3e4:	2301      	movne	r3, #1
   1b3e6:	2805      	cmp	r0, #5
   1b3e8:	bf0c      	ite	eq
   1b3ea:	2300      	moveq	r3, #0
   1b3ec:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   1b3f0:	4604      	mov	r4, r0
   1b3f2:	2b00      	cmp	r3, #0
   1b3f4:	d1df      	bne.n	1b3b6 <__gnu_Unwind_Backtrace+0x42>
   1b3f6:	4668      	mov	r0, sp
   1b3f8:	f7ff ff8a 	bl	1b310 <restore_non_core_regs>
   1b3fc:	4620      	mov	r0, r4
   1b3fe:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
   1b402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b406:	2409      	movs	r4, #9
   1b408:	e7f5      	b.n	1b3f6 <__gnu_Unwind_Backtrace+0x82>
   1b40a:	46c0      	nop			(mov r8, r8)

0001b40c <unwind_phase2_forced>:
   1b40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b410:	68c3      	ldr	r3, [r0, #12]
   1b412:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
   1b416:	b083      	sub	sp, #12
   1b418:	6984      	ldr	r4, [r0, #24]
   1b41a:	9304      	str	r3, [sp, #16]
   1b41c:	ab97      	add	r3, sp, #604
   1b41e:	9303      	str	r3, [sp, #12]
   1b420:	9405      	str	r4, [sp, #20]
   1b422:	9c03      	ldr	r4, [sp, #12]
   1b424:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   1b428:	4606      	mov	r6, r0
   1b42a:	4693      	mov	fp, r2
   1b42c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1b430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b432:	46a6      	mov	lr, r4
   1b434:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1b438:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1b43c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1b440:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1b444:	af96      	add	r7, sp, #600
   1b446:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   1b44a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   1b44e:	2300      	movs	r3, #0
   1b450:	603b      	str	r3, [r7, #0]
   1b452:	4698      	mov	r8, r3
   1b454:	f10d 0a18 	add.w	sl, sp, #24	; 0x18
   1b458:	6c39      	ldr	r1, [r7, #64]
   1b45a:	4630      	mov	r0, r6
   1b45c:	f7ff fef0 	bl	1b240 <get_eit_entry>
   1b460:	4605      	mov	r5, r0
   1b462:	4681      	mov	r9, r0
   1b464:	f1bb 0f00 	cmp.w	fp, #0	; 0x0
   1b468:	d125      	bne.n	1b4b6 <unwind_phase2_forced+0xaa>
   1b46a:	2409      	movs	r4, #9
   1b46c:	2d00      	cmp	r5, #0
   1b46e:	d027      	beq.n	1b4c0 <unwind_phase2_forced+0xb4>
   1b470:	6bbb      	ldr	r3, [r7, #56]
   1b472:	f044 0410 	orr.w	r4, r4, #16	; 0x10
   1b476:	647b      	str	r3, [r7, #68]
   1b478:	9b05      	ldr	r3, [sp, #20]
   1b47a:	4621      	mov	r1, r4
   1b47c:	9301      	str	r3, [sp, #4]
   1b47e:	9700      	str	r7, [sp, #0]
   1b480:	2001      	movs	r0, #1
   1b482:	4632      	mov	r2, r6
   1b484:	4633      	mov	r3, r6
   1b486:	9c04      	ldr	r4, [sp, #16]
   1b488:	47a0      	blx	r4
   1b48a:	b960      	cbnz	r0, 1b4a6 <unwind_phase2_forced+0x9a>
   1b48c:	b96d      	cbnz	r5, 1b4aa <unwind_phase2_forced+0x9e>
   1b48e:	4638      	mov	r0, r7
   1b490:	4651      	mov	r1, sl
   1b492:	f44f 7210 	mov.w	r2, #576	; 0x240
   1b496:	f005 f825 	bl	204e4 <memcpy>
   1b49a:	f1b8 0f08 	cmp.w	r8, #8	; 0x8
   1b49e:	d0db      	beq.n	1b458 <unwind_phase2_forced+0x4c>
   1b4a0:	f1b8 0f07 	cmp.w	r8, #7	; 0x7
   1b4a4:	d01e      	beq.n	1b4e4 <unwind_phase2_forced+0xd8>
   1b4a6:	f04f 0909 	mov.w	r9, #9	; 0x9
   1b4aa:	4648      	mov	r0, r9
   1b4ac:	b027      	add	sp, #156
   1b4ae:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   1b4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4b6:	240a      	movs	r4, #10
   1b4b8:	f04f 0b00 	mov.w	fp, #0	; 0x0
   1b4bc:	2d00      	cmp	r5, #0
   1b4be:	d1d7      	bne.n	1b470 <unwind_phase2_forced+0x64>
   1b4c0:	6c3b      	ldr	r3, [r7, #64]
   1b4c2:	4639      	mov	r1, r7
   1b4c4:	6173      	str	r3, [r6, #20]
   1b4c6:	f44f 7210 	mov.w	r2, #576	; 0x240
   1b4ca:	4650      	mov	r0, sl
   1b4cc:	f005 f80a 	bl	204e4 <memcpy>
   1b4d0:	6933      	ldr	r3, [r6, #16]
   1b4d2:	4620      	mov	r0, r4
   1b4d4:	4631      	mov	r1, r6
   1b4d6:	4652      	mov	r2, sl
   1b4d8:	4798      	blx	r3
   1b4da:	f8da 3038 	ldr.w	r3, [sl, #56]
   1b4de:	4680      	mov	r8, r0
   1b4e0:	647b      	str	r3, [r7, #68]
   1b4e2:	e7c9      	b.n	1b478 <unwind_phase2_forced+0x6c>
   1b4e4:	a897      	add	r0, sp, #604
   1b4e6:	f000 f9db 	bl	1b8a0 <__restore_core_regs>
   1b4ea:	46c0      	nop			(mov r8, r8)

0001b4ec <__gnu_Unwind_ForcedUnwind>:
   1b4ec:	b500      	push	{lr}
   1b4ee:	60c1      	str	r1, [r0, #12]
   1b4f0:	6182      	str	r2, [r0, #24]
   1b4f2:	6bda      	ldr	r2, [r3, #60]
   1b4f4:	b081      	sub	sp, #4
   1b4f6:	641a      	str	r2, [r3, #64]
   1b4f8:	4619      	mov	r1, r3
   1b4fa:	2200      	movs	r2, #0
   1b4fc:	f7ff ff86 	bl	1b40c <unwind_phase2_forced>
   1b500:	b001      	add	sp, #4
   1b502:	bd00      	pop	{pc}

0001b504 <unwind_phase2>:
   1b504:	b570      	push	{r4, r5, r6, lr}
   1b506:	4605      	mov	r5, r0
   1b508:	460e      	mov	r6, r1
   1b50a:	6c31      	ldr	r1, [r6, #64]
   1b50c:	4628      	mov	r0, r5
   1b50e:	f7ff fe97 	bl	1b240 <get_eit_entry>
   1b512:	b950      	cbnz	r0, 1b52a <unwind_phase2+0x26>
   1b514:	6c33      	ldr	r3, [r6, #64]
   1b516:	2001      	movs	r0, #1
   1b518:	616b      	str	r3, [r5, #20]
   1b51a:	692c      	ldr	r4, [r5, #16]
   1b51c:	4629      	mov	r1, r5
   1b51e:	4632      	mov	r2, r6
   1b520:	47a0      	blx	r4
   1b522:	2808      	cmp	r0, #8
   1b524:	d0f1      	beq.n	1b50a <unwind_phase2+0x6>
   1b526:	2807      	cmp	r0, #7
   1b528:	d001      	beq.n	1b52e <unwind_phase2+0x2a>
   1b52a:	f004 fb27 	bl	1fb7c <abort>
   1b52e:	1d30      	adds	r0, r6, #4
   1b530:	f000 f9b6 	bl	1b8a0 <__restore_core_regs>

0001b534 <__gnu_Unwind_RaiseException>:
   1b534:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b536:	6bcb      	ldr	r3, [r1, #60]
   1b538:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
   1b53c:	640b      	str	r3, [r1, #64]
   1b53e:	f10d 0e04 	add.w	lr, sp, #4	; 0x4
   1b542:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   1b546:	4605      	mov	r5, r0
   1b548:	460f      	mov	r7, r1
   1b54a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1b54e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1b552:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1b556:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1b55a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1b55e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1b562:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   1b566:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   1b56a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b56e:	466e      	mov	r6, sp
   1b570:	9300      	str	r3, [sp, #0]
   1b572:	6c31      	ldr	r1, [r6, #64]
   1b574:	4628      	mov	r0, r5
   1b576:	f7ff fe63 	bl	1b240 <get_eit_entry>
   1b57a:	b958      	cbnz	r0, 1b594 <__gnu_Unwind_RaiseException+0x60>
   1b57c:	692b      	ldr	r3, [r5, #16]
   1b57e:	4629      	mov	r1, r5
   1b580:	466a      	mov	r2, sp
   1b582:	4798      	blx	r3
   1b584:	2808      	cmp	r0, #8
   1b586:	4604      	mov	r4, r0
   1b588:	d0f3      	beq.n	1b572 <__gnu_Unwind_RaiseException+0x3e>
   1b58a:	4668      	mov	r0, sp
   1b58c:	f7ff fec0 	bl	1b310 <restore_non_core_regs>
   1b590:	2c06      	cmp	r4, #6
   1b592:	d003      	beq.n	1b59c <__gnu_Unwind_RaiseException+0x68>
   1b594:	2009      	movs	r0, #9
   1b596:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
   1b59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b59c:	4628      	mov	r0, r5
   1b59e:	4639      	mov	r1, r7
   1b5a0:	f7ff ffb0 	bl	1b504 <unwind_phase2>

0001b5a4 <__gnu_Unwind_Resume_or_Rethrow>:
   1b5a4:	b500      	push	{lr}
   1b5a6:	68c3      	ldr	r3, [r0, #12]
   1b5a8:	b081      	sub	sp, #4
   1b5aa:	b133      	cbz	r3, 1b5ba <__gnu_Unwind_Resume_or_Rethrow+0x16>
   1b5ac:	6bcb      	ldr	r3, [r1, #60]
   1b5ae:	2200      	movs	r2, #0
   1b5b0:	640b      	str	r3, [r1, #64]
   1b5b2:	f7ff ff2b 	bl	1b40c <unwind_phase2_forced>
   1b5b6:	b001      	add	sp, #4
   1b5b8:	bd00      	pop	{pc}
   1b5ba:	f7ff ffbb 	bl	1b534 <__gnu_Unwind_RaiseException>
   1b5be:	e7fa      	b.n	1b5b6 <__gnu_Unwind_Resume_or_Rethrow+0x12>

0001b5c0 <__gnu_Unwind_Resume>:
   1b5c0:	b530      	push	{r4, r5, lr}
   1b5c2:	6943      	ldr	r3, [r0, #20]
   1b5c4:	b081      	sub	sp, #4
   1b5c6:	640b      	str	r3, [r1, #64]
   1b5c8:	68c2      	ldr	r2, [r0, #12]
   1b5ca:	4604      	mov	r4, r0
   1b5cc:	460d      	mov	r5, r1
   1b5ce:	b98a      	cbnz	r2, 1b5f4 <__gnu_Unwind_Resume+0x34>
   1b5d0:	6903      	ldr	r3, [r0, #16]
   1b5d2:	4621      	mov	r1, r4
   1b5d4:	2002      	movs	r0, #2
   1b5d6:	462a      	mov	r2, r5
   1b5d8:	4798      	blx	r3
   1b5da:	2807      	cmp	r0, #7
   1b5dc:	d007      	beq.n	1b5ee <__gnu_Unwind_Resume+0x2e>
   1b5de:	2808      	cmp	r0, #8
   1b5e0:	d001      	beq.n	1b5e6 <__gnu_Unwind_Resume+0x26>
   1b5e2:	f004 facb 	bl	1fb7c <abort>
   1b5e6:	4620      	mov	r0, r4
   1b5e8:	4629      	mov	r1, r5
   1b5ea:	f7ff ff8b 	bl	1b504 <unwind_phase2>
   1b5ee:	1d28      	adds	r0, r5, #4
   1b5f0:	f000 f956 	bl	1b8a0 <__restore_core_regs>
   1b5f4:	2201      	movs	r2, #1
   1b5f6:	f7ff ff09 	bl	1b40c <unwind_phase2_forced>
   1b5fa:	f004 fabf 	bl	1fb7c <abort>
   1b5fe:	46c0      	nop			(mov r8, r8)

0001b600 <_Unwind_VRS_Pop>:
   1b600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b604:	4614      	mov	r4, r2
   1b606:	b0e6      	sub	sp, #408
   1b608:	4605      	mov	r5, r0
   1b60a:	461a      	mov	r2, r3
   1b60c:	2904      	cmp	r1, #4
   1b60e:	d80e      	bhi.n	1b62e <_Unwind_VRS_Pop+0x2e>
   1b610:	e8df f001 	tbb	[pc, r1]
   1b614:	03545638 	.word	0x03545638
   1b618:	0011      	.short	0x0011
   1b61a:	2a03      	cmp	r2, #3
   1b61c:	d107      	bne.n	1b62e <_Unwind_VRS_Pop+0x2e>
   1b61e:	0c26      	lsrs	r6, r4, #16
   1b620:	0424      	lsls	r4, r4, #16
   1b622:	0c24      	lsrs	r4, r4, #16
   1b624:	eb04 0306 	add.w	r3, r4, r6
   1b628:	2b10      	cmp	r3, #16
   1b62a:	f240 80d9 	bls.w	1b7e0 <_Unwind_VRS_Pop+0x1e0>
   1b62e:	2002      	movs	r0, #2
   1b630:	b066      	add	sp, #408
   1b632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b636:	2c10      	cmp	r4, #16
   1b638:	bf94      	ite	ls
   1b63a:	2300      	movls	r3, #0
   1b63c:	2301      	movhi	r3, #1
   1b63e:	2a00      	cmp	r2, #0
   1b640:	bf18      	it	ne
   1b642:	f043 0301 	orrne.w	r3, r3, #1	; 0x1
   1b646:	2b00      	cmp	r3, #0
   1b648:	d1f1      	bne.n	1b62e <_Unwind_VRS_Pop+0x2e>
   1b64a:	6803      	ldr	r3, [r0, #0]
   1b64c:	f013 0f10 	tst.w	r3, #16	; 0x10
   1b650:	f040 8101 	bne.w	1b856 <_Unwind_VRS_Pop+0x256>
   1b654:	ae62      	add	r6, sp, #392
   1b656:	4630      	mov	r0, r6
   1b658:	f000 f994 	bl	1b984 <__gnu_Unwind_Save_WMMXC>
   1b65c:	6ba9      	ldr	r1, [r5, #56]
   1b65e:	2200      	movs	r2, #0
   1b660:	2001      	movs	r0, #1
   1b662:	fa10 f302 	lsls.w	r3, r0, r2
   1b666:	4223      	tst	r3, r4
   1b668:	bf1c      	itt	ne
   1b66a:	f851 3b04 	ldrne.w	r3, [r1], #4
   1b66e:	f846 3022 	strne.w	r3, [r6, r2, lsl #2]
   1b672:	3201      	adds	r2, #1
   1b674:	2a04      	cmp	r2, #4
   1b676:	d1f4      	bne.n	1b662 <_Unwind_VRS_Pop+0x62>
   1b678:	4630      	mov	r0, r6
   1b67a:	63a9      	str	r1, [r5, #56]
   1b67c:	f000 f978 	bl	1b970 <__gnu_Unwind_Restore_WMMXC>
   1b680:	2000      	movs	r0, #0
   1b682:	e7d5      	b.n	1b630 <_Unwind_VRS_Pop+0x30>
   1b684:	2a00      	cmp	r2, #0
   1b686:	d1d2      	bne.n	1b62e <_Unwind_VRS_Pop+0x2e>
   1b688:	0420      	lsls	r0, r4, #16
   1b68a:	f8d5 c038 	ldr.w	ip, [r5, #56]
   1b68e:	0c00      	lsrs	r0, r0, #16
   1b690:	4611      	mov	r1, r2
   1b692:	2401      	movs	r4, #1
   1b694:	fa14 f301 	lsls.w	r3, r4, r1
   1b698:	4203      	tst	r3, r0
   1b69a:	d004      	beq.n	1b6a6 <_Unwind_VRS_Pop+0xa6>
   1b69c:	008b      	lsls	r3, r1, #2
   1b69e:	f85c 2b04 	ldr.w	r2, [ip], #4
   1b6a2:	442b      	add	r3, r5
   1b6a4:	605a      	str	r2, [r3, #4]
   1b6a6:	3101      	adds	r1, #1
   1b6a8:	2910      	cmp	r1, #16
   1b6aa:	d1f3      	bne.n	1b694 <_Unwind_VRS_Pop+0x94>
   1b6ac:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
   1b6b0:	bf08      	it	eq
   1b6b2:	f8c5 c038 	streq.w	ip, [r5, #56]
   1b6b6:	d0bb      	beq.n	1b630 <_Unwind_VRS_Pop+0x30>
   1b6b8:	2000      	movs	r0, #0
   1b6ba:	e7b9      	b.n	1b630 <_Unwind_VRS_Pop+0x30>
   1b6bc:	2001      	movs	r0, #1
   1b6be:	e7b7      	b.n	1b630 <_Unwind_VRS_Pop+0x30>
   1b6c0:	1f50      	subs	r0, r2, #5
   1b6c2:	bf18      	it	ne
   1b6c4:	2001      	movne	r0, #1
   1b6c6:	2a01      	cmp	r2, #1
   1b6c8:	bf0c      	ite	eq
   1b6ca:	2300      	moveq	r3, #0
   1b6cc:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   1b6d0:	2b00      	cmp	r3, #0
   1b6d2:	d1ac      	bne.n	1b62e <_Unwind_VRS_Pop+0x2e>
   1b6d4:	0c26      	lsrs	r6, r4, #16
   1b6d6:	0424      	lsls	r4, r4, #16
   1b6d8:	0c24      	lsrs	r4, r4, #16
   1b6da:	eb04 0106 	add.w	r1, r4, r6
   1b6de:	2a01      	cmp	r2, #1
   1b6e0:	bf0c      	ite	eq
   1b6e2:	2310      	moveq	r3, #16
   1b6e4:	2320      	movne	r3, #32
   1b6e6:	428b      	cmp	r3, r1
   1b6e8:	d3a1      	bcc.n	1b62e <_Unwind_VRS_Pop+0x2e>
   1b6ea:	2a01      	cmp	r2, #1
   1b6ec:	bf14      	ite	ne
   1b6ee:	f04f 0800 	movne.w	r8, #0	; 0x0
   1b6f2:	f04f 0801 	moveq.w	r8, #1	; 0x1
   1b6f6:	2e0f      	cmp	r6, #15
   1b6f8:	bf94      	ite	ls
   1b6fa:	2300      	movls	r3, #0
   1b6fc:	2301      	movhi	r3, #1
   1b6fe:	ea18 0f03 	tst.w	r8, r3
   1b702:	d194      	bne.n	1b62e <_Unwind_VRS_Pop+0x2e>
   1b704:	2b00      	cmp	r3, #0
   1b706:	f040 808d 	bne.w	1b824 <_Unwind_VRS_Pop+0x224>
   1b70a:	2910      	cmp	r1, #16
   1b70c:	bf98      	it	ls
   1b70e:	461f      	movls	r7, r3
   1b710:	d908      	bls.n	1b724 <_Unwind_VRS_Pop+0x124>
   1b712:	f1a1 0710 	sub.w	r7, r1, #16	; 0x10
   1b716:	2f00      	cmp	r7, #0
   1b718:	bf0c      	ite	eq
   1b71a:	2300      	moveq	r3, #0
   1b71c:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   1b720:	2b00      	cmp	r3, #0
   1b722:	d184      	bne.n	1b62e <_Unwind_VRS_Pop+0x2e>
   1b724:	2e0f      	cmp	r6, #15
   1b726:	d810      	bhi.n	1b74a <_Unwind_VRS_Pop+0x14a>
   1b728:	682b      	ldr	r3, [r5, #0]
   1b72a:	f013 0f01 	tst.w	r3, #1	; 0x1
   1b72e:	d00c      	beq.n	1b74a <_Unwind_VRS_Pop+0x14a>
   1b730:	f023 0101 	bic.w	r1, r3, #1	; 0x1
   1b734:	2a05      	cmp	r2, #5
   1b736:	6029      	str	r1, [r5, #0]
   1b738:	f000 80a9 	beq.w	1b88e <_Unwind_VRS_Pop+0x28e>
   1b73c:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   1b740:	4628      	mov	r0, r5
   1b742:	f840 3b48 	str.w	r3, [r0], #72
   1b746:	f000 f8bb 	bl	1b8c0 <__gnu_Unwind_Save_VFP>
   1b74a:	2f00      	cmp	r7, #0
   1b74c:	dd03      	ble.n	1b756 <_Unwind_VRS_Pop+0x156>
   1b74e:	682b      	ldr	r3, [r5, #0]
   1b750:	f013 0f04 	tst.w	r3, #4	; 0x4
   1b754:	d177      	bne.n	1b846 <_Unwind_VRS_Pop+0x246>
   1b756:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1b75a:	f040 8094 	bne.w	1b886 <_Unwind_VRS_Pop+0x286>
   1b75e:	2e0f      	cmp	r6, #15
   1b760:	d96b      	bls.n	1b83a <_Unwind_VRS_Pop+0x23a>
   1b762:	2f00      	cmp	r7, #0
   1b764:	d160      	bne.n	1b828 <_Unwind_VRS_Pop+0x228>
   1b766:	4622      	mov	r2, r4
   1b768:	6ba8      	ldr	r0, [r5, #56]
   1b76a:	2a00      	cmp	r2, #0
   1b76c:	4684      	mov	ip, r0
   1b76e:	dd0f      	ble.n	1b790 <_Unwind_VRS_Pop+0x190>
   1b770:	0054      	lsls	r4, r2, #1
   1b772:	2100      	movs	r1, #0
   1b774:	00f2      	lsls	r2, r6, #3
   1b776:	eb0d 0c02 	add.w	ip, sp, r2
   1b77a:	460a      	mov	r2, r1
   1b77c:	5813      	ldr	r3, [r2, r0]
   1b77e:	3101      	adds	r1, #1
   1b780:	f84c 3002 	str.w	r3, [ip, r2]
   1b784:	3204      	adds	r2, #4
   1b786:	42a1      	cmp	r1, r4
   1b788:	d1f8      	bne.n	1b77c <_Unwind_VRS_Pop+0x17c>
   1b78a:	008b      	lsls	r3, r1, #2
   1b78c:	eb00 0c03 	add.w	ip, r0, r3
   1b790:	2f00      	cmp	r7, #0
   1b792:	dd13      	ble.n	1b7bc <_Unwind_VRS_Pop+0x1bc>
   1b794:	2e10      	cmp	r6, #16
   1b796:	bf2c      	ite	cs
   1b798:	4633      	movcs	r3, r6
   1b79a:	2310      	movcc	r3, #16
   1b79c:	3b10      	subs	r3, #16
   1b79e:	00db      	lsls	r3, r3, #3
   1b7a0:	aa42      	add	r2, sp, #264
   1b7a2:	2000      	movs	r0, #0
   1b7a4:	007c      	lsls	r4, r7, #1
   1b7a6:	18d2      	adds	r2, r2, r3
   1b7a8:	4601      	mov	r1, r0
   1b7aa:	f85c 3001 	ldr.w	r3, [ip, r1]
   1b7ae:	3001      	adds	r0, #1
   1b7b0:	5053      	str	r3, [r2, r1]
   1b7b2:	3104      	adds	r1, #4
   1b7b4:	42a0      	cmp	r0, r4
   1b7b6:	d1f8      	bne.n	1b7aa <_Unwind_VRS_Pop+0x1aa>
   1b7b8:	0083      	lsls	r3, r0, #2
   1b7ba:	449c      	add	ip, r3
   1b7bc:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1b7c0:	d159      	bne.n	1b876 <_Unwind_VRS_Pop+0x276>
   1b7c2:	2e0f      	cmp	r6, #15
   1b7c4:	f8c5 c038 	str.w	ip, [r5, #56]
   1b7c8:	d802      	bhi.n	1b7d0 <_Unwind_VRS_Pop+0x1d0>
   1b7ca:	4668      	mov	r0, sp
   1b7cc:	f000 f87c 	bl	1b8c8 <__gnu_Unwind_Restore_VFP_D>
   1b7d0:	2f00      	cmp	r7, #0
   1b7d2:	f77f af71 	ble.w	1b6b8 <_Unwind_VRS_Pop+0xb8>
   1b7d6:	a842      	add	r0, sp, #264
   1b7d8:	f000 f87e 	bl	1b8d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1b7dc:	2000      	movs	r0, #0
   1b7de:	e727      	b.n	1b630 <_Unwind_VRS_Pop+0x30>
   1b7e0:	6803      	ldr	r3, [r0, #0]
   1b7e2:	f013 0f08 	tst.w	r3, #8	; 0x8
   1b7e6:	d13e      	bne.n	1b866 <_Unwind_VRS_Pop+0x266>
   1b7e8:	af22      	add	r7, sp, #136
   1b7ea:	4638      	mov	r0, r7
   1b7ec:	f000 f89e 	bl	1b92c <__gnu_Unwind_Save_WMMXD>
   1b7f0:	6ba8      	ldr	r0, [r5, #56]
   1b7f2:	ea4f 0e44 	mov.w	lr, r4, lsl #1
   1b7f6:	4603      	mov	r3, r0
   1b7f8:	b174      	cbz	r4, 1b818 <_Unwind_VRS_Pop+0x218>
   1b7fa:	00f3      	lsls	r3, r6, #3
   1b7fc:	eb07 0c03 	add.w	ip, r7, r3
   1b800:	4671      	mov	r1, lr
   1b802:	2200      	movs	r2, #0
   1b804:	5813      	ldr	r3, [r2, r0]
   1b806:	f84c 3002 	str.w	r3, [ip, r2]
   1b80a:	3204      	adds	r2, #4
   1b80c:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
   1b810:	d1f8      	bne.n	1b804 <_Unwind_VRS_Pop+0x204>
   1b812:	ea4f 038e 	mov.w	r3, lr, lsl #2
   1b816:	4403      	add	r3, r0
   1b818:	4638      	mov	r0, r7
   1b81a:	63ab      	str	r3, [r5, #56]
   1b81c:	f000 f864 	bl	1b8e8 <__gnu_Unwind_Restore_WMMXD>
   1b820:	2000      	movs	r0, #0
   1b822:	e705      	b.n	1b630 <_Unwind_VRS_Pop+0x30>
   1b824:	4627      	mov	r7, r4
   1b826:	e776      	b.n	1b716 <_Unwind_VRS_Pop+0x116>
   1b828:	a842      	add	r0, sp, #264
   1b82a:	f000 f859 	bl	1b8e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1b82e:	2f00      	cmp	r7, #0
   1b830:	bfc8      	it	gt
   1b832:	f1c6 0210 	rsbgt	r2, r6, #16	; 0x10
   1b836:	dc97      	bgt.n	1b768 <_Unwind_VRS_Pop+0x168>
   1b838:	e795      	b.n	1b766 <_Unwind_VRS_Pop+0x166>
   1b83a:	4668      	mov	r0, sp
   1b83c:	f000 f848 	bl	1b8d0 <__gnu_Unwind_Save_VFP_D>
   1b840:	2f00      	cmp	r7, #0
   1b842:	d090      	beq.n	1b766 <_Unwind_VRS_Pop+0x166>
   1b844:	e7f0      	b.n	1b828 <_Unwind_VRS_Pop+0x228>
   1b846:	f023 0304 	bic.w	r3, r3, #4	; 0x4
   1b84a:	4628      	mov	r0, r5
   1b84c:	f840 3bd0 	str.w	r3, [r0], #208
   1b850:	f000 f846 	bl	1b8e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1b854:	e77f      	b.n	1b756 <_Unwind_VRS_Pop+0x156>
   1b856:	f023 0310 	bic.w	r3, r3, #16	; 0x10
   1b85a:	6003      	str	r3, [r0, #0]
   1b85c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   1b860:	f000 f890 	bl	1b984 <__gnu_Unwind_Save_WMMXC>
   1b864:	e6f6      	b.n	1b654 <_Unwind_VRS_Pop+0x54>
   1b866:	f023 0308 	bic.w	r3, r3, #8	; 0x8
   1b86a:	6003      	str	r3, [r0, #0]
   1b86c:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   1b870:	f000 f85c 	bl	1b92c <__gnu_Unwind_Save_WMMXD>
   1b874:	e7b8      	b.n	1b7e8 <_Unwind_VRS_Pop+0x1e8>
   1b876:	f10c 0304 	add.w	r3, ip, #4	; 0x4
   1b87a:	4668      	mov	r0, sp
   1b87c:	63ab      	str	r3, [r5, #56]
   1b87e:	f000 f81b 	bl	1b8b8 <__gnu_Unwind_Restore_VFP>
   1b882:	2000      	movs	r0, #0
   1b884:	e6d4      	b.n	1b630 <_Unwind_VRS_Pop+0x30>
   1b886:	4668      	mov	r0, sp
   1b888:	f000 f81a 	bl	1b8c0 <__gnu_Unwind_Save_VFP>
   1b88c:	e7cf      	b.n	1b82e <_Unwind_VRS_Pop+0x22e>
   1b88e:	f041 0302 	orr.w	r3, r1, #2	; 0x2
   1b892:	4628      	mov	r0, r5
   1b894:	f840 3b48 	str.w	r3, [r0], #72
   1b898:	f000 f81a 	bl	1b8d0 <__gnu_Unwind_Save_VFP_D>
   1b89c:	e755      	b.n	1b74a <_Unwind_VRS_Pop+0x14a>
   1b89e:	46c0      	nop			(mov r8, r8)

0001b8a0 <__restore_core_regs>:
   1b8a0:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1b8a4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1b8a8:	469c      	mov	ip, r3
   1b8aa:	46a6      	mov	lr, r4
   1b8ac:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1b8b0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1b8b4:	46e5      	mov	sp, ip
   1b8b6:	bd00      	pop	{pc}

0001b8b8 <__gnu_Unwind_Restore_VFP>:
   1b8b8:	ec90 0b21 	fldmiax	r0, {d0-d15}
   1b8bc:	4770      	bx	lr
   1b8be:	46c0      	nop			(mov r8, r8)

0001b8c0 <__gnu_Unwind_Save_VFP>:
   1b8c0:	ec80 0b21 	fstmiax	r0, {d0-d15}
   1b8c4:	4770      	bx	lr
   1b8c6:	46c0      	nop			(mov r8, r8)

0001b8c8 <__gnu_Unwind_Restore_VFP_D>:
   1b8c8:	ec90 0b20 	vldmia	r0, {d0-d15}
   1b8cc:	4770      	bx	lr
   1b8ce:	46c0      	nop			(mov r8, r8)

0001b8d0 <__gnu_Unwind_Save_VFP_D>:
   1b8d0:	ec80 0b20 	vstmia	r0, {d0-d15}
   1b8d4:	4770      	bx	lr
   1b8d6:	46c0      	nop			(mov r8, r8)

0001b8d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1b8d8:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1b8dc:	4770      	bx	lr
   1b8de:	46c0      	nop			(mov r8, r8)

0001b8e0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1b8e0:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1b8e4:	4770      	bx	lr
   1b8e6:	46c0      	nop			(mov r8, r8)

0001b8e8 <__gnu_Unwind_Restore_WMMXD>:
   1b8e8:	ecf0 0102 	ldfe	f0, [r0], #8
   1b8ec:	ecf0 1102 	ldfe	f1, [r0], #8
   1b8f0:	ecf0 2102 	ldfe	f2, [r0], #8
   1b8f4:	ecf0 3102 	ldfe	f3, [r0], #8
   1b8f8:	ecf0 4102 	ldfe	f4, [r0], #8
   1b8fc:	ecf0 5102 	ldfe	f5, [r0], #8
   1b900:	ecf0 6102 	ldfe	f6, [r0], #8
   1b904:	ecf0 7102 	ldfe	f7, [r0], #8
   1b908:	ecf0 8102 	ldfp	f0, [r0], #8
   1b90c:	ecf0 9102 	ldfp	f1, [r0], #8
   1b910:	ecf0 a102 	ldfp	f2, [r0], #8
   1b914:	ecf0 b102 	ldfp	f3, [r0], #8
   1b918:	ecf0 c102 	ldfp	f4, [r0], #8
   1b91c:	ecf0 d102 	ldfp	f5, [r0], #8
   1b920:	ecf0 e102 	ldfp	f6, [r0], #8
   1b924:	ecf0 f102 	ldfp	f7, [r0], #8
   1b928:	4770      	bx	lr
   1b92a:	46c0      	nop			(mov r8, r8)

0001b92c <__gnu_Unwind_Save_WMMXD>:
   1b92c:	ece0 0102 	stfe	f0, [r0], #8
   1b930:	ece0 1102 	stfe	f1, [r0], #8
   1b934:	ece0 2102 	stfe	f2, [r0], #8
   1b938:	ece0 3102 	stfe	f3, [r0], #8
   1b93c:	ece0 4102 	stfe	f4, [r0], #8
   1b940:	ece0 5102 	stfe	f5, [r0], #8
   1b944:	ece0 6102 	stfe	f6, [r0], #8
   1b948:	ece0 7102 	stfe	f7, [r0], #8
   1b94c:	ece0 8102 	stfp	f0, [r0], #8
   1b950:	ece0 9102 	stfp	f1, [r0], #8
   1b954:	ece0 a102 	stfp	f2, [r0], #8
   1b958:	ece0 b102 	stfp	f3, [r0], #8
   1b95c:	ece0 c102 	stfp	f4, [r0], #8
   1b960:	ece0 d102 	stfp	f5, [r0], #8
   1b964:	ece0 e102 	stfp	f6, [r0], #8
   1b968:	ece0 f102 	stfp	f7, [r0], #8
   1b96c:	4770      	bx	lr
   1b96e:	46c0      	nop			(mov r8, r8)

0001b970 <__gnu_Unwind_Restore_WMMXC>:
   1b970:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1b974:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1b978:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1b97c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1b980:	4770      	bx	lr
   1b982:	46c0      	nop			(mov r8, r8)

0001b984 <__gnu_Unwind_Save_WMMXC>:
   1b984:	fca0 8101 	stc2	1, cr8, [r0], #4
   1b988:	fca0 9101 	stc2	1, cr9, [r0], #4
   1b98c:	fca0 a101 	stc2	1, cr10, [r0], #4
   1b990:	fca0 b101 	stc2	1, cr11, [r0], #4
   1b994:	4770      	bx	lr
   1b996:	46c0      	nop			(mov r8, r8)

0001b998 <_Unwind_RaiseException>:
   1b998:	46ec      	mov	ip, sp
   1b99a:	b500      	push	{lr}
   1b99c:	e92d 5000 	stmdb	sp!, {ip, lr}
   1b9a0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1b9a4:	f04f 0300 	mov.w	r3, #0	; 0x0
   1b9a8:	e92d 000c 	stmdb	sp!, {r2, r3}
   1b9ac:	a901      	add	r1, sp, #4
   1b9ae:	f7ff fdc1 	bl	1b534 <__gnu_Unwind_RaiseException>
   1b9b2:	f8dd e040 	ldr.w	lr, [sp, #64]
   1b9b6:	b012      	add	sp, #72
   1b9b8:	4770      	bx	lr
   1b9ba:	46c0      	nop			(mov r8, r8)

0001b9bc <_Unwind_Resume>:
   1b9bc:	46ec      	mov	ip, sp
   1b9be:	b500      	push	{lr}
   1b9c0:	e92d 5000 	stmdb	sp!, {ip, lr}
   1b9c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1b9c8:	f04f 0300 	mov.w	r3, #0	; 0x0
   1b9cc:	e92d 000c 	stmdb	sp!, {r2, r3}
   1b9d0:	a901      	add	r1, sp, #4
   1b9d2:	f7ff fdf5 	bl	1b5c0 <__gnu_Unwind_Resume>
   1b9d6:	f8dd e040 	ldr.w	lr, [sp, #64]
   1b9da:	b012      	add	sp, #72
   1b9dc:	4770      	bx	lr
   1b9de:	46c0      	nop			(mov r8, r8)

0001b9e0 <_Unwind_Resume_or_Rethrow>:
   1b9e0:	46ec      	mov	ip, sp
   1b9e2:	b500      	push	{lr}
   1b9e4:	e92d 5000 	stmdb	sp!, {ip, lr}
   1b9e8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1b9ec:	f04f 0300 	mov.w	r3, #0	; 0x0
   1b9f0:	e92d 000c 	stmdb	sp!, {r2, r3}
   1b9f4:	a901      	add	r1, sp, #4
   1b9f6:	f7ff fdd5 	bl	1b5a4 <__gnu_Unwind_Resume_or_Rethrow>
   1b9fa:	f8dd e040 	ldr.w	lr, [sp, #64]
   1b9fe:	b012      	add	sp, #72
   1ba00:	4770      	bx	lr
   1ba02:	46c0      	nop			(mov r8, r8)

0001ba04 <_Unwind_ForcedUnwind>:
   1ba04:	46ec      	mov	ip, sp
   1ba06:	b500      	push	{lr}
   1ba08:	e92d 5000 	stmdb	sp!, {ip, lr}
   1ba0c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1ba10:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ba14:	e92d 000c 	stmdb	sp!, {r2, r3}
   1ba18:	ab01      	add	r3, sp, #4
   1ba1a:	f7ff fd67 	bl	1b4ec <__gnu_Unwind_ForcedUnwind>
   1ba1e:	f8dd e040 	ldr.w	lr, [sp, #64]
   1ba22:	b012      	add	sp, #72
   1ba24:	4770      	bx	lr
   1ba26:	46c0      	nop			(mov r8, r8)

0001ba28 <_Unwind_Backtrace>:
   1ba28:	46ec      	mov	ip, sp
   1ba2a:	b500      	push	{lr}
   1ba2c:	e92d 5000 	stmdb	sp!, {ip, lr}
   1ba30:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1ba34:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ba38:	e92d 000c 	stmdb	sp!, {r2, r3}
   1ba3c:	aa01      	add	r2, sp, #4
   1ba3e:	f7ff fc99 	bl	1b374 <__gnu_Unwind_Backtrace>
   1ba42:	f8dd e040 	ldr.w	lr, [sp, #64]
   1ba46:	b012      	add	sp, #72
   1ba48:	4770      	bx	lr
   1ba4a:	46c0      	nop			(mov r8, r8)

0001ba4c <next_unwind_byte>:
   1ba4c:	7a03      	ldrb	r3, [r0, #8]
   1ba4e:	b993      	cbnz	r3, 1ba76 <next_unwind_byte+0x2a>
   1ba50:	7a42      	ldrb	r2, [r0, #9]
   1ba52:	b172      	cbz	r2, 1ba72 <next_unwind_byte+0x26>
   1ba54:	3a01      	subs	r2, #1
   1ba56:	6843      	ldr	r3, [r0, #4]
   1ba58:	7242      	strb	r2, [r0, #9]
   1ba5a:	f853 2b04 	ldr.w	r2, [r3], #4
   1ba5e:	6002      	str	r2, [r0, #0]
   1ba60:	2203      	movs	r2, #3
   1ba62:	6043      	str	r3, [r0, #4]
   1ba64:	7202      	strb	r2, [r0, #8]
   1ba66:	6803      	ldr	r3, [r0, #0]
   1ba68:	0e1a      	lsrs	r2, r3, #24
   1ba6a:	021b      	lsls	r3, r3, #8
   1ba6c:	6003      	str	r3, [r0, #0]
   1ba6e:	4610      	mov	r0, r2
   1ba70:	4770      	bx	lr
   1ba72:	32b0      	adds	r2, #176
   1ba74:	e7fb      	b.n	1ba6e <next_unwind_byte+0x22>
   1ba76:	3b01      	subs	r3, #1
   1ba78:	7203      	strb	r3, [r0, #8]
   1ba7a:	e7f4      	b.n	1ba66 <next_unwind_byte+0x1a>

0001ba7c <_Unwind_GetTextRelBase>:
   1ba7c:	b500      	push	{lr}
   1ba7e:	b081      	sub	sp, #4
   1ba80:	f004 f87c 	bl	1fb7c <abort>

0001ba84 <_Unwind_GetDataRelBase>:
   1ba84:	b500      	push	{lr}
   1ba86:	b081      	sub	sp, #4
   1ba88:	f004 f878 	bl	1fb7c <abort>

0001ba8c <_Unwind_GetGR>:
   1ba8c:	b500      	push	{lr}
   1ba8e:	b085      	sub	sp, #20
   1ba90:	460a      	mov	r2, r1
   1ba92:	ab03      	add	r3, sp, #12
   1ba94:	2100      	movs	r1, #0
   1ba96:	9300      	str	r3, [sp, #0]
   1ba98:	460b      	mov	r3, r1
   1ba9a:	f7ff f9b7 	bl	1ae0c <_Unwind_VRS_Get>
   1ba9e:	9803      	ldr	r0, [sp, #12]
   1baa0:	b005      	add	sp, #20
   1baa2:	bd00      	pop	{pc}

0001baa4 <unwind_UCB_from_context>:
   1baa4:	b500      	push	{lr}
   1baa6:	210c      	movs	r1, #12
   1baa8:	b081      	sub	sp, #4
   1baaa:	f7ff ffef 	bl	1ba8c <_Unwind_GetGR>
   1baae:	b001      	add	sp, #4
   1bab0:	bd00      	pop	{pc}
   1bab2:	46c0      	nop			(mov r8, r8)

0001bab4 <_Unwind_GetLanguageSpecificData>:
   1bab4:	b500      	push	{lr}
   1bab6:	b081      	sub	sp, #4
   1bab8:	f7ff fff4 	bl	1baa4 <unwind_UCB_from_context>
   1babc:	6cc2      	ldr	r2, [r0, #76]
   1babe:	79d3      	ldrb	r3, [r2, #7]
   1bac0:	1d10      	adds	r0, r2, #4
   1bac2:	3301      	adds	r3, #1
   1bac4:	009b      	lsls	r3, r3, #2
   1bac6:	18c0      	adds	r0, r0, r3
   1bac8:	b001      	add	sp, #4
   1baca:	bd00      	pop	{pc}

0001bacc <_Unwind_GetRegionStart>:
   1bacc:	b500      	push	{lr}
   1bace:	b081      	sub	sp, #4
   1bad0:	f7ff ffe8 	bl	1baa4 <unwind_UCB_from_context>
   1bad4:	6c80      	ldr	r0, [r0, #72]
   1bad6:	b001      	add	sp, #4
   1bad8:	bd00      	pop	{pc}
   1bada:	46c0      	nop			(mov r8, r8)

0001badc <__gnu_unwind_execute>:
   1badc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bae0:	b084      	sub	sp, #16
   1bae2:	4606      	mov	r6, r0
   1bae4:	460f      	mov	r7, r1
   1bae6:	f04f 0800 	mov.w	r8, #0	; 0x0
   1baea:	f10d 0a0c 	add.w	sl, sp, #12	; 0xc
   1baee:	f44f 697f 	mov.w	r9, #4080	; 0xff0
   1baf2:	4638      	mov	r0, r7
   1baf4:	f7ff ffaa 	bl	1ba4c <next_unwind_byte>
   1baf8:	28b0      	cmp	r0, #176
   1bafa:	4604      	mov	r4, r0
   1bafc:	d02a      	beq.n	1bb54 <__gnu_unwind_execute+0x78>
   1bafe:	f010 0180 	ands.w	r1, r0, #128	; 0x80
   1bb02:	d02f      	beq.n	1bb64 <__gnu_unwind_execute+0x88>
   1bb04:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1bb08:	2b80      	cmp	r3, #128
   1bb0a:	d05d      	beq.n	1bbc8 <__gnu_unwind_execute+0xec>
   1bb0c:	2b90      	cmp	r3, #144
   1bb0e:	d143      	bne.n	1bb98 <__gnu_unwind_execute+0xbc>
   1bb10:	f000 020f 	and.w	r2, r0, #15	; 0xf
   1bb14:	2a0f      	cmp	r2, #15
   1bb16:	bf14      	ite	ne
   1bb18:	2300      	movne	r3, #0
   1bb1a:	2301      	moveq	r3, #1
   1bb1c:	2a0d      	cmp	r2, #13
   1bb1e:	bf14      	ite	ne
   1bb20:	461c      	movne	r4, r3
   1bb22:	f043 0401 	orreq.w	r4, r3, #1	; 0x1
   1bb26:	2c00      	cmp	r4, #0
   1bb28:	d14c      	bne.n	1bbc4 <__gnu_unwind_execute+0xe8>
   1bb2a:	4621      	mov	r1, r4
   1bb2c:	4623      	mov	r3, r4
   1bb2e:	4630      	mov	r0, r6
   1bb30:	f8cd a000 	str.w	sl, [sp]
   1bb34:	f7ff f96a 	bl	1ae0c <_Unwind_VRS_Get>
   1bb38:	4621      	mov	r1, r4
   1bb3a:	220d      	movs	r2, #13
   1bb3c:	4623      	mov	r3, r4
   1bb3e:	4630      	mov	r0, r6
   1bb40:	f8cd a000 	str.w	sl, [sp]
   1bb44:	f7ff f98a 	bl	1ae5c <_Unwind_VRS_Set>
   1bb48:	4638      	mov	r0, r7
   1bb4a:	f7ff ff7f 	bl	1ba4c <next_unwind_byte>
   1bb4e:	28b0      	cmp	r0, #176
   1bb50:	4604      	mov	r4, r0
   1bb52:	d1d4      	bne.n	1bafe <__gnu_unwind_execute+0x22>
   1bb54:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1bb58:	f000 80c3 	beq.w	1bce2 <__gnu_unwind_execute+0x206>
   1bb5c:	2000      	movs	r0, #0
   1bb5e:	b004      	add	sp, #16
   1bb60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bb64:	0083      	lsls	r3, r0, #2
   1bb66:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1bb6a:	1d1d      	adds	r5, r3, #4
   1bb6c:	220d      	movs	r2, #13
   1bb6e:	4630      	mov	r0, r6
   1bb70:	460b      	mov	r3, r1
   1bb72:	f8cd a000 	str.w	sl, [sp]
   1bb76:	f7ff f949 	bl	1ae0c <_Unwind_VRS_Get>
   1bb7a:	f014 0f40 	tst.w	r4, #64	; 0x40
   1bb7e:	d03b      	beq.n	1bbf8 <__gnu_unwind_execute+0x11c>
   1bb80:	9b03      	ldr	r3, [sp, #12]
   1bb82:	1b5b      	subs	r3, r3, r5
   1bb84:	9303      	str	r3, [sp, #12]
   1bb86:	2100      	movs	r1, #0
   1bb88:	4630      	mov	r0, r6
   1bb8a:	220d      	movs	r2, #13
   1bb8c:	460b      	mov	r3, r1
   1bb8e:	f8cd a000 	str.w	sl, [sp]
   1bb92:	f7ff f963 	bl	1ae5c <_Unwind_VRS_Set>
   1bb96:	e7ac      	b.n	1baf2 <__gnu_unwind_execute+0x16>
   1bb98:	2ba0      	cmp	r3, #160
   1bb9a:	d131      	bne.n	1bc00 <__gnu_unwind_execute+0x124>
   1bb9c:	ea6f 0300 	mvn.w	r3, r0
   1bba0:	f003 0307 	and.w	r3, r3, #7	; 0x7
   1bba4:	fa49 f303 	asr.w	r3, r9, r3
   1bba8:	f010 0f08 	tst.w	r0, #8	; 0x8
   1bbac:	f403 627f 	and.w	r2, r3, #4080	; 0xff0
   1bbb0:	bf18      	it	ne
   1bbb2:	f442 4280 	orrne.w	r2, r2, #16384	; 0x4000
   1bbb6:	2100      	movs	r1, #0
   1bbb8:	4630      	mov	r0, r6
   1bbba:	460b      	mov	r3, r1
   1bbbc:	f7ff fd20 	bl	1b600 <_Unwind_VRS_Pop>
   1bbc0:	2800      	cmp	r0, #0
   1bbc2:	d096      	beq.n	1baf2 <__gnu_unwind_execute+0x16>
   1bbc4:	2009      	movs	r0, #9
   1bbc6:	e7ca      	b.n	1bb5e <__gnu_unwind_execute+0x82>
   1bbc8:	0204      	lsls	r4, r0, #8
   1bbca:	4638      	mov	r0, r7
   1bbcc:	f7ff ff3e 	bl	1ba4c <next_unwind_byte>
   1bbd0:	4320      	orrs	r0, r4
   1bbd2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1bbd6:	d0f5      	beq.n	1bbc4 <__gnu_unwind_execute+0xe8>
   1bbd8:	0104      	lsls	r4, r0, #4
   1bbda:	0422      	lsls	r2, r4, #16
   1bbdc:	2100      	movs	r1, #0
   1bbde:	0c12      	lsrs	r2, r2, #16
   1bbe0:	4630      	mov	r0, r6
   1bbe2:	460b      	mov	r3, r1
   1bbe4:	f7ff fd0c 	bl	1b600 <_Unwind_VRS_Pop>
   1bbe8:	2800      	cmp	r0, #0
   1bbea:	d1eb      	bne.n	1bbc4 <__gnu_unwind_execute+0xe8>
   1bbec:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1bbf0:	bf18      	it	ne
   1bbf2:	f04f 0801 	movne.w	r8, #1	; 0x1
   1bbf6:	e77c      	b.n	1baf2 <__gnu_unwind_execute+0x16>
   1bbf8:	9b03      	ldr	r3, [sp, #12]
   1bbfa:	195b      	adds	r3, r3, r5
   1bbfc:	9303      	str	r3, [sp, #12]
   1bbfe:	e7c2      	b.n	1bb86 <__gnu_unwind_execute+0xaa>
   1bc00:	2bb0      	cmp	r3, #176
   1bc02:	d014      	beq.n	1bc2e <__gnu_unwind_execute+0x152>
   1bc04:	2bc0      	cmp	r3, #192
   1bc06:	d02c      	beq.n	1bc62 <__gnu_unwind_execute+0x186>
   1bc08:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1bc0c:	2bd0      	cmp	r3, #208
   1bc0e:	d1d9      	bne.n	1bbc4 <__gnu_unwind_execute+0xe8>
   1bc10:	f000 0207 	and.w	r2, r0, #7	; 0x7
   1bc14:	3201      	adds	r2, #1
   1bc16:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1bc1a:	4630      	mov	r0, r6
   1bc1c:	2101      	movs	r1, #1
   1bc1e:	3bcb      	subs	r3, #203
   1bc20:	f7ff fcee 	bl	1b600 <_Unwind_VRS_Pop>
   1bc24:	2800      	cmp	r0, #0
   1bc26:	f43f af64 	beq.w	1baf2 <__gnu_unwind_execute+0x16>
   1bc2a:	2009      	movs	r0, #9
   1bc2c:	e797      	b.n	1bb5e <__gnu_unwind_execute+0x82>
   1bc2e:	28b1      	cmp	r0, #177
   1bc30:	d03a      	beq.n	1bca8 <__gnu_unwind_execute+0x1cc>
   1bc32:	28b2      	cmp	r0, #178
   1bc34:	f000 808f 	beq.w	1bd56 <__gnu_unwind_execute+0x27a>
   1bc38:	28b3      	cmp	r0, #179
   1bc3a:	d047      	beq.n	1bccc <__gnu_unwind_execute+0x1f0>
   1bc3c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1bc40:	2bb4      	cmp	r3, #180
   1bc42:	d06e      	beq.n	1bd22 <__gnu_unwind_execute+0x246>
   1bc44:	f000 0207 	and.w	r2, r0, #7	; 0x7
   1bc48:	3201      	adds	r2, #1
   1bc4a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1bc4e:	2101      	movs	r1, #1
   1bc50:	4630      	mov	r0, r6
   1bc52:	460b      	mov	r3, r1
   1bc54:	f7ff fcd4 	bl	1b600 <_Unwind_VRS_Pop>
   1bc58:	2800      	cmp	r0, #0
   1bc5a:	f43f af4a 	beq.w	1baf2 <__gnu_unwind_execute+0x16>
   1bc5e:	2009      	movs	r0, #9
   1bc60:	e77d      	b.n	1bb5e <__gnu_unwind_execute+0x82>
   1bc62:	28c6      	cmp	r0, #198
   1bc64:	d06c      	beq.n	1bd40 <__gnu_unwind_execute+0x264>
   1bc66:	28c7      	cmp	r0, #199
   1bc68:	f000 809a 	beq.w	1bda0 <__gnu_unwind_execute+0x2c4>
   1bc6c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1bc70:	2bc0      	cmp	r3, #192
   1bc72:	d047      	beq.n	1bd04 <__gnu_unwind_execute+0x228>
   1bc74:	28c8      	cmp	r0, #200
   1bc76:	f000 80a7 	beq.w	1bdc8 <__gnu_unwind_execute+0x2ec>
   1bc7a:	28c9      	cmp	r0, #201
   1bc7c:	d1a2      	bne.n	1bbc4 <__gnu_unwind_execute+0xe8>
   1bc7e:	4638      	mov	r0, r7
   1bc80:	f7ff fee4 	bl	1ba4c <next_unwind_byte>
   1bc84:	4602      	mov	r2, r0
   1bc86:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1bc8a:	f002 020f 	and.w	r2, r2, #15	; 0xf
   1bc8e:	3201      	adds	r2, #1
   1bc90:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   1bc94:	4630      	mov	r0, r6
   1bc96:	2101      	movs	r1, #1
   1bc98:	2305      	movs	r3, #5
   1bc9a:	f7ff fcb1 	bl	1b600 <_Unwind_VRS_Pop>
   1bc9e:	2800      	cmp	r0, #0
   1bca0:	f43f af27 	beq.w	1baf2 <__gnu_unwind_execute+0x16>
   1bca4:	2009      	movs	r0, #9
   1bca6:	e75a      	b.n	1bb5e <__gnu_unwind_execute+0x82>
   1bca8:	4638      	mov	r0, r7
   1bcaa:	f7ff fecf 	bl	1ba4c <next_unwind_byte>
   1bcae:	4602      	mov	r2, r0
   1bcb0:	2800      	cmp	r0, #0
   1bcb2:	d087      	beq.n	1bbc4 <__gnu_unwind_execute+0xe8>
   1bcb4:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
   1bcb8:	d184      	bne.n	1bbc4 <__gnu_unwind_execute+0xe8>
   1bcba:	4630      	mov	r0, r6
   1bcbc:	460b      	mov	r3, r1
   1bcbe:	f7ff fc9f 	bl	1b600 <_Unwind_VRS_Pop>
   1bcc2:	2800      	cmp	r0, #0
   1bcc4:	f43f af15 	beq.w	1baf2 <__gnu_unwind_execute+0x16>
   1bcc8:	2009      	movs	r0, #9
   1bcca:	e748      	b.n	1bb5e <__gnu_unwind_execute+0x82>
   1bccc:	4638      	mov	r0, r7
   1bcce:	f7ff febd 	bl	1ba4c <next_unwind_byte>
   1bcd2:	f000 020f 	and.w	r2, r0, #15	; 0xf
   1bcd6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1bcda:	3201      	adds	r2, #1
   1bcdc:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   1bce0:	e7b5      	b.n	1bc4e <__gnu_unwind_execute+0x172>
   1bce2:	ac03      	add	r4, sp, #12
   1bce4:	4641      	mov	r1, r8
   1bce6:	220e      	movs	r2, #14
   1bce8:	4643      	mov	r3, r8
   1bcea:	4630      	mov	r0, r6
   1bcec:	9400      	str	r4, [sp, #0]
   1bcee:	f7ff f88d 	bl	1ae0c <_Unwind_VRS_Get>
   1bcf2:	4630      	mov	r0, r6
   1bcf4:	4641      	mov	r1, r8
   1bcf6:	220f      	movs	r2, #15
   1bcf8:	4643      	mov	r3, r8
   1bcfa:	9400      	str	r4, [sp, #0]
   1bcfc:	f7ff f8ae 	bl	1ae5c <_Unwind_VRS_Set>
   1bd00:	4640      	mov	r0, r8
   1bd02:	e72c      	b.n	1bb5e <__gnu_unwind_execute+0x82>
   1bd04:	f000 020f 	and.w	r2, r0, #15	; 0xf
   1bd08:	3201      	adds	r2, #1
   1bd0a:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1bd0e:	2103      	movs	r1, #3
   1bd10:	4630      	mov	r0, r6
   1bd12:	460b      	mov	r3, r1
   1bd14:	f7ff fc74 	bl	1b600 <_Unwind_VRS_Pop>
   1bd18:	2800      	cmp	r0, #0
   1bd1a:	f43f aeea 	beq.w	1baf2 <__gnu_unwind_execute+0x16>
   1bd1e:	2009      	movs	r0, #9
   1bd20:	e71d      	b.n	1bb5e <__gnu_unwind_execute+0x82>
   1bd22:	f000 0203 	and.w	r2, r0, #3	; 0x3
   1bd26:	3201      	adds	r2, #1
   1bd28:	2102      	movs	r1, #2
   1bd2a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   1bd2e:	4630      	mov	r0, r6
   1bd30:	460b      	mov	r3, r1
   1bd32:	f7ff fc65 	bl	1b600 <_Unwind_VRS_Pop>
   1bd36:	2800      	cmp	r0, #0
   1bd38:	f43f aedb 	beq.w	1baf2 <__gnu_unwind_execute+0x16>
   1bd3c:	2009      	movs	r0, #9
   1bd3e:	e70e      	b.n	1bb5e <__gnu_unwind_execute+0x82>
   1bd40:	4638      	mov	r0, r7
   1bd42:	f7ff fe83 	bl	1ba4c <next_unwind_byte>
   1bd46:	f000 020f 	and.w	r2, r0, #15	; 0xf
   1bd4a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1bd4e:	3201      	adds	r2, #1
   1bd50:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   1bd54:	e7db      	b.n	1bd0e <__gnu_unwind_execute+0x232>
   1bd56:	2100      	movs	r1, #0
   1bd58:	220d      	movs	r2, #13
   1bd5a:	460b      	mov	r3, r1
   1bd5c:	4630      	mov	r0, r6
   1bd5e:	f8cd a000 	str.w	sl, [sp]
   1bd62:	f7ff f853 	bl	1ae0c <_Unwind_VRS_Get>
   1bd66:	4638      	mov	r0, r7
   1bd68:	f7ff fe70 	bl	1ba4c <next_unwind_byte>
   1bd6c:	f010 0f80 	tst.w	r0, #128	; 0x80
   1bd70:	d032      	beq.n	1bdd8 <__gnu_unwind_execute+0x2fc>
   1bd72:	2402      	movs	r4, #2
   1bd74:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1bd78:	40a2      	lsls	r2, r4
   1bd7a:	9b03      	ldr	r3, [sp, #12]
   1bd7c:	4638      	mov	r0, r7
   1bd7e:	189b      	adds	r3, r3, r2
   1bd80:	9303      	str	r3, [sp, #12]
   1bd82:	f7ff fe63 	bl	1ba4c <next_unwind_byte>
   1bd86:	3407      	adds	r4, #7
   1bd88:	f010 0f80 	tst.w	r0, #128	; 0x80
   1bd8c:	d1f2      	bne.n	1bd74 <__gnu_unwind_execute+0x298>
   1bd8e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1bd92:	40a3      	lsls	r3, r4
   1bd94:	9a03      	ldr	r2, [sp, #12]
   1bd96:	f502 7201 	add.w	r2, r2, #516	; 0x204
   1bd9a:	18d2      	adds	r2, r2, r3
   1bd9c:	9203      	str	r2, [sp, #12]
   1bd9e:	e6f2      	b.n	1bb86 <__gnu_unwind_execute+0xaa>
   1bda0:	4638      	mov	r0, r7
   1bda2:	f7ff fe53 	bl	1ba4c <next_unwind_byte>
   1bda6:	4602      	mov	r2, r0
   1bda8:	2800      	cmp	r0, #0
   1bdaa:	f43f af0b 	beq.w	1bbc4 <__gnu_unwind_execute+0xe8>
   1bdae:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1bdb2:	f47f af07 	bne.w	1bbc4 <__gnu_unwind_execute+0xe8>
   1bdb6:	4630      	mov	r0, r6
   1bdb8:	2104      	movs	r1, #4
   1bdba:	f7ff fc21 	bl	1b600 <_Unwind_VRS_Pop>
   1bdbe:	2800      	cmp	r0, #0
   1bdc0:	f43f ae97 	beq.w	1baf2 <__gnu_unwind_execute+0x16>
   1bdc4:	2009      	movs	r0, #9
   1bdc6:	e6ca      	b.n	1bb5e <__gnu_unwind_execute+0x82>
   1bdc8:	4638      	mov	r0, r7
   1bdca:	f7ff fe3f 	bl	1ba4c <next_unwind_byte>
   1bdce:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1bdd2:	4602      	mov	r2, r0
   1bdd4:	3310      	adds	r3, #16
   1bdd6:	e758      	b.n	1bc8a <__gnu_unwind_execute+0x1ae>
   1bdd8:	3cb0      	subs	r4, #176
   1bdda:	e7d8      	b.n	1bd8e <__gnu_unwind_execute+0x2b2>

0001bddc <__gnu_unwind_frame>:
   1bddc:	b500      	push	{lr}
   1bdde:	f8d0 c04c 	ldr.w	ip, [r0, #76]
   1bde2:	b085      	sub	sp, #20
   1bde4:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1bde8:	f10c 0208 	add.w	r2, ip, #8	; 0x8
   1bdec:	021b      	lsls	r3, r3, #8
   1bdee:	9301      	str	r3, [sp, #4]
   1bdf0:	2303      	movs	r3, #3
   1bdf2:	f88d 300c 	strb.w	r3, [sp, #12]
   1bdf6:	9202      	str	r2, [sp, #8]
   1bdf8:	f89c 2007 	ldrb.w	r2, [ip, #7]
   1bdfc:	4608      	mov	r0, r1
   1bdfe:	a901      	add	r1, sp, #4
   1be00:	f88d 200d 	strb.w	r2, [sp, #13]
   1be04:	f7ff fe6a 	bl	1badc <__gnu_unwind_execute>
   1be08:	b005      	add	sp, #20
   1be0a:	bd00      	pop	{pc}

0001be0c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
   1be0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
   1be0e:	e003      	b.n	1be18 <LoopCopyDataInit>

0001be10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
   1be10:	4b09      	ldr	r3, [pc, #36]	(1be38 <LoopFillZerobss+0xc>)
  ldr  r3, [r3, r1]
   1be12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
   1be14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
   1be16:	3104      	adds	r1, #4

0001be18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
   1be18:	4808      	ldr	r0, [pc, #32]	(1be3c <LoopFillZerobss+0x10>)
  ldr  r3, =_edata
   1be1a:	4b09      	ldr	r3, [pc, #36]	(1be40 <LoopFillZerobss+0x14>)
  adds  r2, r0, r1
   1be1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
   1be1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
   1be20:	d3f6      	bcc.n	1be10 <CopyDataInit>
  ldr  r2, =_sbss
   1be22:	4a08      	ldr	r2, [pc, #32]	(1be44 <LoopFillZerobss+0x18>)
  b  LoopFillZerobss
   1be24:	e002      	b.n	1be2c <LoopFillZerobss>

0001be26 <FillZerobss>:

/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
   1be26:	2300      	movs	r3, #0
  str  r3, [r2], #4
   1be28:	f842 3b04 	str.w	r3, [r2], #4

0001be2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
   1be2c:	4b06      	ldr	r3, [pc, #24]	(1be48 <LoopFillZerobss+0x1c>)
  cmp  r2, r3
   1be2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
   1be30:	d3f9      	bcc.n	1be26 <FillZerobss>
/* Call the application's entry point.*/
  bl  main
   1be32:	f7f2 f8e7 	bl	e004 <main>
  bx  lr    
   1be36:	4770      	bx	lr
   1be38:	00023750 	.word	0x00023750
   1be3c:	20000000 	.word	0x20000000
   1be40:	20000034 	.word	0x20000034
   1be44:	20000548 	.word	0x20000548
   1be48:	20000678 	.word	0x20000678

0001be4c <ADC1_2_IRQHandler>:
 * @retval : None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
   1be4c:	e7fe      	b.n	1be4c <ADC1_2_IRQHandler>
	...

0001be50 <_ZN6vectorIN11SharpSensor9SharpNameEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1be50:	b480      	push	{r7}
   1be52:	b083      	sub	sp, #12
   1be54:	af00      	add	r7, sp, #0
   1be56:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1be58:	687a      	ldr	r2, [r7, #4]
   1be5a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1be5e:	6093      	str	r3, [r2, #8]
}
   1be60:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1be64:	46bd      	mov	sp, r7
   1be66:	bc80      	pop	{r7}
   1be68:	4770      	bx	lr
   1be6a:	46c0      	nop			(mov r8, r8)

0001be6c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1be6c:	b480      	push	{r7}
   1be6e:	b083      	sub	sp, #12
   1be70:	af00      	add	r7, sp, #0
   1be72:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1be74:	687a      	ldr	r2, [r7, #4]
   1be76:	f04f 0300 	mov.w	r3, #0	; 0x0
   1be7a:	6093      	str	r3, [r2, #8]
}
   1be7c:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1be80:	46bd      	mov	sp, r7
   1be82:	bc80      	pop	{r7}
   1be84:	4770      	bx	lr
   1be86:	46c0      	nop			(mov r8, r8)

0001be88 <_ZN6vectorIN6Sensor12OutputSensorEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1be88:	b480      	push	{r7}
   1be8a:	b083      	sub	sp, #12
   1be8c:	af00      	add	r7, sp, #0
   1be8e:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1be90:	687a      	ldr	r2, [r7, #4]
   1be92:	f04f 0300 	mov.w	r3, #0	; 0x0
   1be96:	6093      	str	r3, [r2, #8]
}
   1be98:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1be9c:	46bd      	mov	sp, r7
   1be9e:	bc80      	pop	{r7}
   1bea0:	4770      	bx	lr
   1bea2:	46c0      	nop			(mov r8, r8)

0001bea4 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1bea4:	b480      	push	{r7}
   1bea6:	b083      	sub	sp, #12
   1bea8:	af00      	add	r7, sp, #0
   1beaa:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1beac:	687a      	ldr	r2, [r7, #4]
   1beae:	f04f 0300 	mov.w	r3, #0	; 0x0
   1beb2:	6093      	str	r3, [r2, #8]
}
   1beb4:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1beb8:	46bd      	mov	sp, r7
   1beba:	bc80      	pop	{r7}
   1bebc:	4770      	bx	lr
   1bebe:	46c0      	nop			(mov r8, r8)

0001bec0 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei>:
    size = 0;
    table = 0x0;
}

template <typename T>
vector<T>::vector(int allocatedSize)
   1bec0:	b580      	push	{r7, lr}
   1bec2:	b082      	sub	sp, #8
   1bec4:	af00      	add	r7, sp, #0
   1bec6:	6078      	str	r0, [r7, #4]
   1bec8:	6039      	str	r1, [r7, #0]
   1beca:	687a      	ldr	r2, [r7, #4]
   1becc:	4b0e      	ldr	r3, [pc, #56]	(1bf08 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei+0x48>)
   1bece:	6013      	str	r3, [r2, #0]
{
    this->allocatedSize = allocatedSize;
   1bed0:	687a      	ldr	r2, [r7, #4]
   1bed2:	683b      	ldr	r3, [r7, #0]
   1bed4:	60d3      	str	r3, [r2, #12]
    table = new T[allocatedSize];
   1bed6:	683b      	ldr	r3, [r7, #0]
   1bed8:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1bedc:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1bee0:	ebc2 0303 	rsb	r3, r2, r3
   1bee4:	4618      	mov	r0, r3
   1bee6:	f7f2 fa3b 	bl	e360 <_Znaj>
   1beea:	4603      	mov	r3, r0
   1beec:	461a      	mov	r2, r3
   1beee:	687b      	ldr	r3, [r7, #4]
   1bef0:	605a      	str	r2, [r3, #4]
    size = 0;
   1bef2:	687a      	ldr	r2, [r7, #4]
   1bef4:	f04f 0300 	mov.w	r3, #0	; 0x0
   1bef8:	6093      	str	r3, [r2, #8]
   1befa:	687b      	ldr	r3, [r7, #4]
}
   1befc:	4618      	mov	r0, r3
   1befe:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1bf02:	46bd      	mov	sp, r7
   1bf04:	bd80      	pop	{r7, pc}
   1bf06:	46c0      	nop			(mov r8, r8)
   1bf08:	000221f0 	.word	0x000221f0

0001bf0c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei>:
    size = 0;
    table = 0x0;
}

template <typename T>
vector<T>::vector(int allocatedSize)
   1bf0c:	b580      	push	{r7, lr}
   1bf0e:	b082      	sub	sp, #8
   1bf10:	af00      	add	r7, sp, #0
   1bf12:	6078      	str	r0, [r7, #4]
   1bf14:	6039      	str	r1, [r7, #0]
   1bf16:	687a      	ldr	r2, [r7, #4]
   1bf18:	4b0b      	ldr	r3, [pc, #44]	(1bf48 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei+0x3c>)
   1bf1a:	6013      	str	r3, [r2, #0]
{
    this->allocatedSize = allocatedSize;
   1bf1c:	687a      	ldr	r2, [r7, #4]
   1bf1e:	683b      	ldr	r3, [r7, #0]
   1bf20:	60d3      	str	r3, [r2, #12]
    table = new T[allocatedSize];
   1bf22:	683b      	ldr	r3, [r7, #0]
   1bf24:	4618      	mov	r0, r3
   1bf26:	f7f2 fa1b 	bl	e360 <_Znaj>
   1bf2a:	4603      	mov	r3, r0
   1bf2c:	461a      	mov	r2, r3
   1bf2e:	687b      	ldr	r3, [r7, #4]
   1bf30:	605a      	str	r2, [r3, #4]
    size = 0;
   1bf32:	687a      	ldr	r2, [r7, #4]
   1bf34:	f04f 0300 	mov.w	r3, #0	; 0x0
   1bf38:	6093      	str	r3, [r2, #8]
   1bf3a:	687b      	ldr	r3, [r7, #4]
}
   1bf3c:	4618      	mov	r0, r3
   1bf3e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1bf42:	46bd      	mov	sp, r7
   1bf44:	bd80      	pop	{r7, pc}
   1bf46:	46c0      	nop			(mov r8, r8)
   1bf48:	00022200 	.word	0x00022200

0001bf4c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei>:
    size = 0;
    table = 0x0;
}

template <typename T>
vector<T>::vector(int allocatedSize)
   1bf4c:	b580      	push	{r7, lr}
   1bf4e:	b082      	sub	sp, #8
   1bf50:	af00      	add	r7, sp, #0
   1bf52:	6078      	str	r0, [r7, #4]
   1bf54:	6039      	str	r1, [r7, #0]
   1bf56:	687a      	ldr	r2, [r7, #4]
   1bf58:	4b0b      	ldr	r3, [pc, #44]	(1bf88 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei+0x3c>)
   1bf5a:	6013      	str	r3, [r2, #0]
{
    this->allocatedSize = allocatedSize;
   1bf5c:	687a      	ldr	r2, [r7, #4]
   1bf5e:	683b      	ldr	r3, [r7, #0]
   1bf60:	60d3      	str	r3, [r2, #12]
    table = new T[allocatedSize];
   1bf62:	683b      	ldr	r3, [r7, #0]
   1bf64:	4618      	mov	r0, r3
   1bf66:	f7f2 f9fb 	bl	e360 <_Znaj>
   1bf6a:	4603      	mov	r3, r0
   1bf6c:	461a      	mov	r2, r3
   1bf6e:	687b      	ldr	r3, [r7, #4]
   1bf70:	605a      	str	r2, [r3, #4]
    size = 0;
   1bf72:	687a      	ldr	r2, [r7, #4]
   1bf74:	f04f 0300 	mov.w	r3, #0	; 0x0
   1bf78:	6093      	str	r3, [r2, #8]
   1bf7a:	687b      	ldr	r3, [r7, #4]
}
   1bf7c:	4618      	mov	r0, r3
   1bf7e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1bf82:	46bd      	mov	sp, r7
   1bf84:	bd80      	pop	{r7, pc}
   1bf86:	46c0      	nop			(mov r8, r8)
   1bf88:	00022210 	.word	0x00022210

0001bf8c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1bf8c:	b580      	push	{r7, lr}
   1bf8e:	b084      	sub	sp, #16
   1bf90:	af00      	add	r7, sp, #0
   1bf92:	6078      	str	r0, [r7, #4]
   1bf94:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1bf96:	687b      	ldr	r3, [r7, #4]
   1bf98:	689a      	ldr	r2, [r3, #8]
   1bf9a:	687b      	ldr	r3, [r7, #4]
   1bf9c:	68db      	ldr	r3, [r3, #12]
   1bf9e:	429a      	cmp	r2, r3
   1bfa0:	da0e      	bge.n	1bfc0 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x34>
    {
        table[size] = value;
   1bfa2:	687b      	ldr	r3, [r7, #4]
   1bfa4:	685a      	ldr	r2, [r3, #4]
   1bfa6:	687b      	ldr	r3, [r7, #4]
   1bfa8:	689b      	ldr	r3, [r3, #8]
   1bfaa:	441a      	add	r2, r3
   1bfac:	683b      	ldr	r3, [r7, #0]
   1bfae:	781b      	ldrb	r3, [r3, #0]
   1bfb0:	7013      	strb	r3, [r2, #0]
        size++;
   1bfb2:	687b      	ldr	r3, [r7, #4]
   1bfb4:	689b      	ldr	r3, [r3, #8]
   1bfb6:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1bfba:	687b      	ldr	r3, [r7, #4]
   1bfbc:	609a      	str	r2, [r3, #8]
   1bfbe:	e03c      	b.n	1c03a <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0xae>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1bfc0:	687b      	ldr	r3, [r7, #4]
   1bfc2:	685b      	ldr	r3, [r3, #4]
   1bfc4:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1bfc6:	687b      	ldr	r3, [r7, #4]
   1bfc8:	68db      	ldr	r3, [r3, #12]
   1bfca:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1bfce:	687b      	ldr	r3, [r7, #4]
   1bfd0:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1bfd2:	687b      	ldr	r3, [r7, #4]
   1bfd4:	68db      	ldr	r3, [r3, #12]
   1bfd6:	4618      	mov	r0, r3
   1bfd8:	f7f2 f9c2 	bl	e360 <_Znaj>
   1bfdc:	4603      	mov	r3, r0
   1bfde:	461a      	mov	r2, r3
   1bfe0:	687b      	ldr	r3, [r7, #4]
   1bfe2:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1bfe4:	f04f 0300 	mov.w	r3, #0	; 0x0
   1bfe8:	60fb      	str	r3, [r7, #12]
   1bfea:	e00d      	b.n	1c008 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x7c>
            table[i] = oldTable[i];
   1bfec:	687b      	ldr	r3, [r7, #4]
   1bfee:	685a      	ldr	r2, [r3, #4]
   1bff0:	68fb      	ldr	r3, [r7, #12]
   1bff2:	eb02 0103 	add.w	r1, r2, r3
   1bff6:	68fa      	ldr	r2, [r7, #12]
   1bff8:	68bb      	ldr	r3, [r7, #8]
   1bffa:	4413      	add	r3, r2
   1bffc:	781b      	ldrb	r3, [r3, #0]
   1bffe:	700b      	strb	r3, [r1, #0]
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1c000:	68fb      	ldr	r3, [r7, #12]
   1c002:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1c006:	60fb      	str	r3, [r7, #12]
   1c008:	687b      	ldr	r3, [r7, #4]
   1c00a:	689a      	ldr	r2, [r3, #8]
   1c00c:	68fb      	ldr	r3, [r7, #12]
   1c00e:	429a      	cmp	r2, r3
   1c010:	dcec      	bgt.n	1bfec <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x60>
            table[i] = oldTable[i];
        delete[] oldTable;
   1c012:	68bb      	ldr	r3, [r7, #8]
   1c014:	2b00      	cmp	r3, #0
   1c016:	d002      	beq.n	1c01e <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x92>
   1c018:	68b8      	ldr	r0, [r7, #8]
   1c01a:	f7f2 fa27 	bl	e46c <_ZdaPv>
        table[size] = value;
   1c01e:	687b      	ldr	r3, [r7, #4]
   1c020:	685a      	ldr	r2, [r3, #4]
   1c022:	687b      	ldr	r3, [r7, #4]
   1c024:	689b      	ldr	r3, [r3, #8]
   1c026:	441a      	add	r2, r3
   1c028:	683b      	ldr	r3, [r7, #0]
   1c02a:	781b      	ldrb	r3, [r3, #0]
   1c02c:	7013      	strb	r3, [r2, #0]
        size++;
   1c02e:	687b      	ldr	r3, [r7, #4]
   1c030:	689b      	ldr	r3, [r3, #8]
   1c032:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c036:	687b      	ldr	r3, [r7, #4]
   1c038:	609a      	str	r2, [r3, #8]
    }
}
   1c03a:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1c03e:	46bd      	mov	sp, r7
   1c040:	bd80      	pop	{r7, pc}
   1c042:	46c0      	nop			(mov r8, r8)

0001c044 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1c044:	b580      	push	{r7, lr}
   1c046:	b084      	sub	sp, #16
   1c048:	af00      	add	r7, sp, #0
   1c04a:	6078      	str	r0, [r7, #4]
   1c04c:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1c04e:	687b      	ldr	r3, [r7, #4]
   1c050:	689a      	ldr	r2, [r3, #8]
   1c052:	687b      	ldr	r3, [r7, #4]
   1c054:	68db      	ldr	r3, [r3, #12]
   1c056:	429a      	cmp	r2, r3
   1c058:	da18      	bge.n	1c08c <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0x48>
    {
        table[size] = value;
   1c05a:	687b      	ldr	r3, [r7, #4]
   1c05c:	6859      	ldr	r1, [r3, #4]
   1c05e:	687b      	ldr	r3, [r7, #4]
   1c060:	689b      	ldr	r3, [r3, #8]
   1c062:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1c066:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1c06a:	ebc2 0303 	rsb	r3, r2, r3
   1c06e:	440b      	add	r3, r1
   1c070:	683a      	ldr	r2, [r7, #0]
   1c072:	469c      	mov	ip, r3
   1c074:	4613      	mov	r3, r2
   1c076:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1c07a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        size++;
   1c07e:	687b      	ldr	r3, [r7, #4]
   1c080:	689b      	ldr	r3, [r3, #8]
   1c082:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c086:	687b      	ldr	r3, [r7, #4]
   1c088:	609a      	str	r2, [r3, #8]
   1c08a:	e05a      	b.n	1c142 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0xfe>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1c08c:	687b      	ldr	r3, [r7, #4]
   1c08e:	685b      	ldr	r3, [r3, #4]
   1c090:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1c092:	687b      	ldr	r3, [r7, #4]
   1c094:	68db      	ldr	r3, [r3, #12]
   1c096:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c09a:	687b      	ldr	r3, [r7, #4]
   1c09c:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1c09e:	687b      	ldr	r3, [r7, #4]
   1c0a0:	68db      	ldr	r3, [r3, #12]
   1c0a2:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1c0a6:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1c0aa:	ebc2 0303 	rsb	r3, r2, r3
   1c0ae:	4618      	mov	r0, r3
   1c0b0:	f7f2 f956 	bl	e360 <_Znaj>
   1c0b4:	4603      	mov	r3, r0
   1c0b6:	461a      	mov	r2, r3
   1c0b8:	687b      	ldr	r3, [r7, #4]
   1c0ba:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1c0bc:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c0c0:	60fb      	str	r3, [r7, #12]
   1c0c2:	e01b      	b.n	1c0fc <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0xb8>
            table[i] = oldTable[i];
   1c0c4:	687b      	ldr	r3, [r7, #4]
   1c0c6:	6859      	ldr	r1, [r3, #4]
   1c0c8:	68fb      	ldr	r3, [r7, #12]
   1c0ca:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1c0ce:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1c0d2:	ebc2 0303 	rsb	r3, r2, r3
   1c0d6:	4419      	add	r1, r3
   1c0d8:	68fb      	ldr	r3, [r7, #12]
   1c0da:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1c0de:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1c0e2:	ebc2 0203 	rsb	r2, r2, r3
   1c0e6:	68bb      	ldr	r3, [r7, #8]
   1c0e8:	4413      	add	r3, r2
   1c0ea:	468c      	mov	ip, r1
   1c0ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1c0f0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1c0f4:	68fb      	ldr	r3, [r7, #12]
   1c0f6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1c0fa:	60fb      	str	r3, [r7, #12]
   1c0fc:	687b      	ldr	r3, [r7, #4]
   1c0fe:	689a      	ldr	r2, [r3, #8]
   1c100:	68fb      	ldr	r3, [r7, #12]
   1c102:	429a      	cmp	r2, r3
   1c104:	dcde      	bgt.n	1c0c4 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0x80>
            table[i] = oldTable[i];
        delete[] oldTable;
   1c106:	68bb      	ldr	r3, [r7, #8]
   1c108:	2b00      	cmp	r3, #0
   1c10a:	d002      	beq.n	1c112 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0xce>
   1c10c:	68b8      	ldr	r0, [r7, #8]
   1c10e:	f7f2 f9ad 	bl	e46c <_ZdaPv>
        table[size] = value;
   1c112:	687b      	ldr	r3, [r7, #4]
   1c114:	6859      	ldr	r1, [r3, #4]
   1c116:	687b      	ldr	r3, [r7, #4]
   1c118:	689b      	ldr	r3, [r3, #8]
   1c11a:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1c11e:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1c122:	ebc2 0303 	rsb	r3, r2, r3
   1c126:	440b      	add	r3, r1
   1c128:	683a      	ldr	r2, [r7, #0]
   1c12a:	469c      	mov	ip, r3
   1c12c:	4613      	mov	r3, r2
   1c12e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1c132:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        size++;
   1c136:	687b      	ldr	r3, [r7, #4]
   1c138:	689b      	ldr	r3, [r3, #8]
   1c13a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c13e:	687b      	ldr	r3, [r7, #4]
   1c140:	609a      	str	r2, [r3, #8]
    }
}
   1c142:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1c146:	46bd      	mov	sp, r7
   1c148:	bd80      	pop	{r7, pc}
   1c14a:	46c0      	nop			(mov r8, r8)

0001c14c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1c14c:	b580      	push	{r7, lr}
   1c14e:	b084      	sub	sp, #16
   1c150:	af00      	add	r7, sp, #0
   1c152:	6078      	str	r0, [r7, #4]
   1c154:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1c156:	687b      	ldr	r3, [r7, #4]
   1c158:	689a      	ldr	r2, [r3, #8]
   1c15a:	687b      	ldr	r3, [r7, #4]
   1c15c:	68db      	ldr	r3, [r3, #12]
   1c15e:	429a      	cmp	r2, r3
   1c160:	da0e      	bge.n	1c180 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x34>
    {
        table[size] = value;
   1c162:	687b      	ldr	r3, [r7, #4]
   1c164:	685a      	ldr	r2, [r3, #4]
   1c166:	687b      	ldr	r3, [r7, #4]
   1c168:	689b      	ldr	r3, [r3, #8]
   1c16a:	441a      	add	r2, r3
   1c16c:	683b      	ldr	r3, [r7, #0]
   1c16e:	781b      	ldrb	r3, [r3, #0]
   1c170:	7013      	strb	r3, [r2, #0]
        size++;
   1c172:	687b      	ldr	r3, [r7, #4]
   1c174:	689b      	ldr	r3, [r3, #8]
   1c176:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c17a:	687b      	ldr	r3, [r7, #4]
   1c17c:	609a      	str	r2, [r3, #8]
   1c17e:	e03c      	b.n	1c1fa <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0xae>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1c180:	687b      	ldr	r3, [r7, #4]
   1c182:	685b      	ldr	r3, [r3, #4]
   1c184:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1c186:	687b      	ldr	r3, [r7, #4]
   1c188:	68db      	ldr	r3, [r3, #12]
   1c18a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c18e:	687b      	ldr	r3, [r7, #4]
   1c190:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1c192:	687b      	ldr	r3, [r7, #4]
   1c194:	68db      	ldr	r3, [r3, #12]
   1c196:	4618      	mov	r0, r3
   1c198:	f7f2 f8e2 	bl	e360 <_Znaj>
   1c19c:	4603      	mov	r3, r0
   1c19e:	461a      	mov	r2, r3
   1c1a0:	687b      	ldr	r3, [r7, #4]
   1c1a2:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1c1a4:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c1a8:	60fb      	str	r3, [r7, #12]
   1c1aa:	e00d      	b.n	1c1c8 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x7c>
            table[i] = oldTable[i];
   1c1ac:	687b      	ldr	r3, [r7, #4]
   1c1ae:	685a      	ldr	r2, [r3, #4]
   1c1b0:	68fb      	ldr	r3, [r7, #12]
   1c1b2:	eb02 0103 	add.w	r1, r2, r3
   1c1b6:	68fa      	ldr	r2, [r7, #12]
   1c1b8:	68bb      	ldr	r3, [r7, #8]
   1c1ba:	4413      	add	r3, r2
   1c1bc:	781b      	ldrb	r3, [r3, #0]
   1c1be:	700b      	strb	r3, [r1, #0]
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1c1c0:	68fb      	ldr	r3, [r7, #12]
   1c1c2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1c1c6:	60fb      	str	r3, [r7, #12]
   1c1c8:	687b      	ldr	r3, [r7, #4]
   1c1ca:	689a      	ldr	r2, [r3, #8]
   1c1cc:	68fb      	ldr	r3, [r7, #12]
   1c1ce:	429a      	cmp	r2, r3
   1c1d0:	dcec      	bgt.n	1c1ac <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x60>
            table[i] = oldTable[i];
        delete[] oldTable;
   1c1d2:	68bb      	ldr	r3, [r7, #8]
   1c1d4:	2b00      	cmp	r3, #0
   1c1d6:	d002      	beq.n	1c1de <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x92>
   1c1d8:	68b8      	ldr	r0, [r7, #8]
   1c1da:	f7f2 f947 	bl	e46c <_ZdaPv>
        table[size] = value;
   1c1de:	687b      	ldr	r3, [r7, #4]
   1c1e0:	685a      	ldr	r2, [r3, #4]
   1c1e2:	687b      	ldr	r3, [r7, #4]
   1c1e4:	689b      	ldr	r3, [r3, #8]
   1c1e6:	441a      	add	r2, r3
   1c1e8:	683b      	ldr	r3, [r7, #0]
   1c1ea:	781b      	ldrb	r3, [r3, #0]
   1c1ec:	7013      	strb	r3, [r2, #0]
        size++;
   1c1ee:	687b      	ldr	r3, [r7, #4]
   1c1f0:	689b      	ldr	r3, [r3, #8]
   1c1f2:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c1f6:	687b      	ldr	r3, [r7, #4]
   1c1f8:	609a      	str	r2, [r3, #8]
    }
}
   1c1fa:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1c1fe:	46bd      	mov	sp, r7
   1c200:	bd80      	pop	{r7, pc}
   1c202:	46c0      	nop			(mov r8, r8)

0001c204 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1c204:	b580      	push	{r7, lr}
   1c206:	b084      	sub	sp, #16
   1c208:	af00      	add	r7, sp, #0
   1c20a:	6078      	str	r0, [r7, #4]
   1c20c:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1c20e:	687b      	ldr	r3, [r7, #4]
   1c210:	689a      	ldr	r2, [r3, #8]
   1c212:	687b      	ldr	r3, [r7, #4]
   1c214:	68db      	ldr	r3, [r3, #12]
   1c216:	429a      	cmp	r2, r3
   1c218:	da0e      	bge.n	1c238 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x34>
    {
        table[size] = value;
   1c21a:	687b      	ldr	r3, [r7, #4]
   1c21c:	685a      	ldr	r2, [r3, #4]
   1c21e:	687b      	ldr	r3, [r7, #4]
   1c220:	689b      	ldr	r3, [r3, #8]
   1c222:	441a      	add	r2, r3
   1c224:	683b      	ldr	r3, [r7, #0]
   1c226:	781b      	ldrb	r3, [r3, #0]
   1c228:	7013      	strb	r3, [r2, #0]
        size++;
   1c22a:	687b      	ldr	r3, [r7, #4]
   1c22c:	689b      	ldr	r3, [r3, #8]
   1c22e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c232:	687b      	ldr	r3, [r7, #4]
   1c234:	609a      	str	r2, [r3, #8]
   1c236:	e03c      	b.n	1c2b2 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0xae>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1c238:	687b      	ldr	r3, [r7, #4]
   1c23a:	685b      	ldr	r3, [r3, #4]
   1c23c:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1c23e:	687b      	ldr	r3, [r7, #4]
   1c240:	68db      	ldr	r3, [r3, #12]
   1c242:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c246:	687b      	ldr	r3, [r7, #4]
   1c248:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1c24a:	687b      	ldr	r3, [r7, #4]
   1c24c:	68db      	ldr	r3, [r3, #12]
   1c24e:	4618      	mov	r0, r3
   1c250:	f7f2 f886 	bl	e360 <_Znaj>
   1c254:	4603      	mov	r3, r0
   1c256:	461a      	mov	r2, r3
   1c258:	687b      	ldr	r3, [r7, #4]
   1c25a:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1c25c:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c260:	60fb      	str	r3, [r7, #12]
   1c262:	e00d      	b.n	1c280 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x7c>
            table[i] = oldTable[i];
   1c264:	687b      	ldr	r3, [r7, #4]
   1c266:	685a      	ldr	r2, [r3, #4]
   1c268:	68fb      	ldr	r3, [r7, #12]
   1c26a:	eb02 0103 	add.w	r1, r2, r3
   1c26e:	68fa      	ldr	r2, [r7, #12]
   1c270:	68bb      	ldr	r3, [r7, #8]
   1c272:	4413      	add	r3, r2
   1c274:	781b      	ldrb	r3, [r3, #0]
   1c276:	700b      	strb	r3, [r1, #0]
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1c278:	68fb      	ldr	r3, [r7, #12]
   1c27a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1c27e:	60fb      	str	r3, [r7, #12]
   1c280:	687b      	ldr	r3, [r7, #4]
   1c282:	689a      	ldr	r2, [r3, #8]
   1c284:	68fb      	ldr	r3, [r7, #12]
   1c286:	429a      	cmp	r2, r3
   1c288:	dcec      	bgt.n	1c264 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x60>
            table[i] = oldTable[i];
        delete[] oldTable;
   1c28a:	68bb      	ldr	r3, [r7, #8]
   1c28c:	2b00      	cmp	r3, #0
   1c28e:	d002      	beq.n	1c296 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x92>
   1c290:	68b8      	ldr	r0, [r7, #8]
   1c292:	f7f2 f8eb 	bl	e46c <_ZdaPv>
        table[size] = value;
   1c296:	687b      	ldr	r3, [r7, #4]
   1c298:	685a      	ldr	r2, [r3, #4]
   1c29a:	687b      	ldr	r3, [r7, #4]
   1c29c:	689b      	ldr	r3, [r3, #8]
   1c29e:	441a      	add	r2, r3
   1c2a0:	683b      	ldr	r3, [r7, #0]
   1c2a2:	781b      	ldrb	r3, [r3, #0]
   1c2a4:	7013      	strb	r3, [r2, #0]
        size++;
   1c2a6:	687b      	ldr	r3, [r7, #4]
   1c2a8:	689b      	ldr	r3, [r3, #8]
   1c2aa:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c2ae:	687b      	ldr	r3, [r7, #4]
   1c2b0:	609a      	str	r2, [r3, #8]
    }
}
   1c2b2:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1c2b6:	46bd      	mov	sp, r7
   1c2b8:	bd80      	pop	{r7, pc}
   1c2ba:	46c0      	nop			(mov r8, r8)

0001c2bc <_ZN6vectorIN6Sensor12OutputSensorEED0Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1c2bc:	b580      	push	{r7, lr}
   1c2be:	b082      	sub	sp, #8
   1c2c0:	af00      	add	r7, sp, #0
   1c2c2:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1c2c4:	687a      	ldr	r2, [r7, #4]
   1c2c6:	4b0c      	ldr	r3, [pc, #48]	(1c2f8 <_ZN6vectorIN6Sensor12OutputSensorEED0Ev+0x3c>)
   1c2c8:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1c2ca:	687b      	ldr	r3, [r7, #4]
   1c2cc:	685b      	ldr	r3, [r3, #4]
   1c2ce:	2b00      	cmp	r3, #0
   1c2d0:	d004      	beq.n	1c2dc <_ZN6vectorIN6Sensor12OutputSensorEED0Ev+0x20>
   1c2d2:	687b      	ldr	r3, [r7, #4]
   1c2d4:	685b      	ldr	r3, [r3, #4]
   1c2d6:	4618      	mov	r0, r3
   1c2d8:	f7f2 f8c8 	bl	e46c <_ZdaPv>
   1c2dc:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c2e0:	b2db      	uxtb	r3, r3
   1c2e2:	2b00      	cmp	r3, #0
   1c2e4:	d002      	beq.n	1c2ec <_ZN6vectorIN6Sensor12OutputSensorEED0Ev+0x30>
   1c2e6:	6878      	ldr	r0, [r7, #4]
   1c2e8:	f7f2 f848 	bl	e37c <_ZdlPv>
   1c2ec:	687b      	ldr	r3, [r7, #4]
}
   1c2ee:	4618      	mov	r0, r3
   1c2f0:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c2f4:	46bd      	mov	sp, r7
   1c2f6:	bd80      	pop	{r7, pc}
   1c2f8:	000221f0 	.word	0x000221f0

0001c2fc <_ZN6vectorIN6Sensor12OutputSensorEED1Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1c2fc:	b580      	push	{r7, lr}
   1c2fe:	b082      	sub	sp, #8
   1c300:	af00      	add	r7, sp, #0
   1c302:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1c304:	687a      	ldr	r2, [r7, #4]
   1c306:	4b0c      	ldr	r3, [pc, #48]	(1c338 <_ZN6vectorIN6Sensor12OutputSensorEED1Ev+0x3c>)
   1c308:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1c30a:	687b      	ldr	r3, [r7, #4]
   1c30c:	685b      	ldr	r3, [r3, #4]
   1c30e:	2b00      	cmp	r3, #0
   1c310:	d004      	beq.n	1c31c <_ZN6vectorIN6Sensor12OutputSensorEED1Ev+0x20>
   1c312:	687b      	ldr	r3, [r7, #4]
   1c314:	685b      	ldr	r3, [r3, #4]
   1c316:	4618      	mov	r0, r3
   1c318:	f7f2 f8a8 	bl	e46c <_ZdaPv>
   1c31c:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c320:	b2db      	uxtb	r3, r3
   1c322:	2b00      	cmp	r3, #0
   1c324:	d002      	beq.n	1c32c <_ZN6vectorIN6Sensor12OutputSensorEED1Ev+0x30>
   1c326:	6878      	ldr	r0, [r7, #4]
   1c328:	f7f2 f828 	bl	e37c <_ZdlPv>
   1c32c:	687b      	ldr	r3, [r7, #4]
}
   1c32e:	4618      	mov	r0, r3
   1c330:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c334:	46bd      	mov	sp, r7
   1c336:	bd80      	pop	{r7, pc}
   1c338:	000221f0 	.word	0x000221f0

0001c33c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1c33c:	b580      	push	{r7, lr}
   1c33e:	b082      	sub	sp, #8
   1c340:	af00      	add	r7, sp, #0
   1c342:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1c344:	687a      	ldr	r2, [r7, #4]
   1c346:	4b0c      	ldr	r3, [pc, #48]	(1c378 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev+0x3c>)
   1c348:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1c34a:	687b      	ldr	r3, [r7, #4]
   1c34c:	685b      	ldr	r3, [r3, #4]
   1c34e:	2b00      	cmp	r3, #0
   1c350:	d004      	beq.n	1c35c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev+0x20>
   1c352:	687b      	ldr	r3, [r7, #4]
   1c354:	685b      	ldr	r3, [r3, #4]
   1c356:	4618      	mov	r0, r3
   1c358:	f7f2 f888 	bl	e46c <_ZdaPv>
   1c35c:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c360:	b2db      	uxtb	r3, r3
   1c362:	2b00      	cmp	r3, #0
   1c364:	d002      	beq.n	1c36c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev+0x30>
   1c366:	6878      	ldr	r0, [r7, #4]
   1c368:	f7f2 f808 	bl	e37c <_ZdlPv>
   1c36c:	687b      	ldr	r3, [r7, #4]
}
   1c36e:	4618      	mov	r0, r3
   1c370:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c374:	46bd      	mov	sp, r7
   1c376:	bd80      	pop	{r7, pc}
   1c378:	00022200 	.word	0x00022200

0001c37c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1c37c:	b580      	push	{r7, lr}
   1c37e:	b082      	sub	sp, #8
   1c380:	af00      	add	r7, sp, #0
   1c382:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1c384:	687a      	ldr	r2, [r7, #4]
   1c386:	4b0c      	ldr	r3, [pc, #48]	(1c3b8 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev+0x3c>)
   1c388:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1c38a:	687b      	ldr	r3, [r7, #4]
   1c38c:	685b      	ldr	r3, [r3, #4]
   1c38e:	2b00      	cmp	r3, #0
   1c390:	d004      	beq.n	1c39c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev+0x20>
   1c392:	687b      	ldr	r3, [r7, #4]
   1c394:	685b      	ldr	r3, [r3, #4]
   1c396:	4618      	mov	r0, r3
   1c398:	f7f2 f868 	bl	e46c <_ZdaPv>
   1c39c:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c3a0:	b2db      	uxtb	r3, r3
   1c3a2:	2b00      	cmp	r3, #0
   1c3a4:	d002      	beq.n	1c3ac <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev+0x30>
   1c3a6:	6878      	ldr	r0, [r7, #4]
   1c3a8:	f7f1 ffe8 	bl	e37c <_ZdlPv>
   1c3ac:	687b      	ldr	r3, [r7, #4]
}
   1c3ae:	4618      	mov	r0, r3
   1c3b0:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c3b4:	46bd      	mov	sp, r7
   1c3b6:	bd80      	pop	{r7, pc}
   1c3b8:	00022200 	.word	0x00022200

0001c3bc <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1c3bc:	b580      	push	{r7, lr}
   1c3be:	b082      	sub	sp, #8
   1c3c0:	af00      	add	r7, sp, #0
   1c3c2:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1c3c4:	687a      	ldr	r2, [r7, #4]
   1c3c6:	4b0c      	ldr	r3, [pc, #48]	(1c3f8 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev+0x3c>)
   1c3c8:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1c3ca:	687b      	ldr	r3, [r7, #4]
   1c3cc:	685b      	ldr	r3, [r3, #4]
   1c3ce:	2b00      	cmp	r3, #0
   1c3d0:	d004      	beq.n	1c3dc <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev+0x20>
   1c3d2:	687b      	ldr	r3, [r7, #4]
   1c3d4:	685b      	ldr	r3, [r3, #4]
   1c3d6:	4618      	mov	r0, r3
   1c3d8:	f7f2 f848 	bl	e46c <_ZdaPv>
   1c3dc:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c3e0:	b2db      	uxtb	r3, r3
   1c3e2:	2b00      	cmp	r3, #0
   1c3e4:	d002      	beq.n	1c3ec <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev+0x30>
   1c3e6:	6878      	ldr	r0, [r7, #4]
   1c3e8:	f7f1 ffc8 	bl	e37c <_ZdlPv>
   1c3ec:	687b      	ldr	r3, [r7, #4]
}
   1c3ee:	4618      	mov	r0, r3
   1c3f0:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c3f4:	46bd      	mov	sp, r7
   1c3f6:	bd80      	pop	{r7, pc}
   1c3f8:	00022210 	.word	0x00022210

0001c3fc <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1c3fc:	b580      	push	{r7, lr}
   1c3fe:	b082      	sub	sp, #8
   1c400:	af00      	add	r7, sp, #0
   1c402:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1c404:	687a      	ldr	r2, [r7, #4]
   1c406:	4b0c      	ldr	r3, [pc, #48]	(1c438 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev+0x3c>)
   1c408:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1c40a:	687b      	ldr	r3, [r7, #4]
   1c40c:	685b      	ldr	r3, [r3, #4]
   1c40e:	2b00      	cmp	r3, #0
   1c410:	d004      	beq.n	1c41c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev+0x20>
   1c412:	687b      	ldr	r3, [r7, #4]
   1c414:	685b      	ldr	r3, [r3, #4]
   1c416:	4618      	mov	r0, r3
   1c418:	f7f2 f828 	bl	e46c <_ZdaPv>
   1c41c:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c420:	b2db      	uxtb	r3, r3
   1c422:	2b00      	cmp	r3, #0
   1c424:	d002      	beq.n	1c42c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev+0x30>
   1c426:	6878      	ldr	r0, [r7, #4]
   1c428:	f7f1 ffa8 	bl	e37c <_ZdlPv>
   1c42c:	687b      	ldr	r3, [r7, #4]
}
   1c42e:	4618      	mov	r0, r3
   1c430:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c434:	46bd      	mov	sp, r7
   1c436:	bd80      	pop	{r7, pc}
   1c438:	00022210 	.word	0x00022210

0001c43c <_ZN18CommandAllerEnArcAD0Ev>:
    ////////////////////////////////
    //    CommandAllerEnArcA      //
    ////////////////////////////////

class CommandAllerEnArcA : public Command
{
   1c43c:	b580      	push	{r7, lr}
   1c43e:	b082      	sub	sp, #8
   1c440:	af00      	add	r7, sp, #0
   1c442:	6078      	str	r0, [r7, #4]
   1c444:	687a      	ldr	r2, [r7, #4]
   1c446:	4b0a      	ldr	r3, [pc, #40]	(1c470 <_ZN18CommandAllerEnArcAD0Ev+0x34>)
   1c448:	6013      	str	r3, [r2, #0]
   1c44a:	687b      	ldr	r3, [r7, #4]
   1c44c:	4618      	mov	r0, r3
   1c44e:	f7eb fc9b 	bl	7d88 <_ZN7CommandD2Ev>
   1c452:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c456:	b2db      	uxtb	r3, r3
   1c458:	2b00      	cmp	r3, #0
   1c45a:	d002      	beq.n	1c462 <_ZN18CommandAllerEnArcAD0Ev+0x26>
   1c45c:	6878      	ldr	r0, [r7, #4]
   1c45e:	f7f1 ff8d 	bl	e37c <_ZdlPv>
   1c462:	687b      	ldr	r3, [r7, #4]
   1c464:	4618      	mov	r0, r3
   1c466:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c46a:	46bd      	mov	sp, r7
   1c46c:	bd80      	pop	{r7, pc}
   1c46e:	46c0      	nop			(mov r8, r8)
   1c470:	00021948 	.word	0x00021948

0001c474 <_ZN18CommandAllerEnArcAD1Ev>:
   1c474:	b580      	push	{r7, lr}
   1c476:	b082      	sub	sp, #8
   1c478:	af00      	add	r7, sp, #0
   1c47a:	6078      	str	r0, [r7, #4]
   1c47c:	687a      	ldr	r2, [r7, #4]
   1c47e:	4b0a      	ldr	r3, [pc, #40]	(1c4a8 <_ZN18CommandAllerEnArcAD1Ev+0x34>)
   1c480:	6013      	str	r3, [r2, #0]
   1c482:	687b      	ldr	r3, [r7, #4]
   1c484:	4618      	mov	r0, r3
   1c486:	f7eb fc7f 	bl	7d88 <_ZN7CommandD2Ev>
   1c48a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c48e:	b2db      	uxtb	r3, r3
   1c490:	2b00      	cmp	r3, #0
   1c492:	d002      	beq.n	1c49a <_ZN18CommandAllerEnArcAD1Ev+0x26>
   1c494:	6878      	ldr	r0, [r7, #4]
   1c496:	f7f1 ff71 	bl	e37c <_ZdlPv>
   1c49a:	687b      	ldr	r3, [r7, #4]
   1c49c:	4618      	mov	r0, r3
   1c49e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c4a2:	46bd      	mov	sp, r7
   1c4a4:	bd80      	pop	{r7, pc}
   1c4a6:	46c0      	nop			(mov r8, r8)
   1c4a8:	00021948 	.word	0x00021948

0001c4ac <_ZN13CommandAllerAD0Ev>:
    ////////////////////////////////
    //       CommandAllerA        //
    ////////////////////////////////

class CommandAllerA : public Command
{
   1c4ac:	b580      	push	{r7, lr}
   1c4ae:	b082      	sub	sp, #8
   1c4b0:	af00      	add	r7, sp, #0
   1c4b2:	6078      	str	r0, [r7, #4]
   1c4b4:	687a      	ldr	r2, [r7, #4]
   1c4b6:	4b0a      	ldr	r3, [pc, #40]	(1c4e0 <_ZN13CommandAllerAD0Ev+0x34>)
   1c4b8:	6013      	str	r3, [r2, #0]
   1c4ba:	687b      	ldr	r3, [r7, #4]
   1c4bc:	4618      	mov	r0, r3
   1c4be:	f7eb fc63 	bl	7d88 <_ZN7CommandD2Ev>
   1c4c2:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c4c6:	b2db      	uxtb	r3, r3
   1c4c8:	2b00      	cmp	r3, #0
   1c4ca:	d002      	beq.n	1c4d2 <_ZN13CommandAllerAD0Ev+0x26>
   1c4cc:	6878      	ldr	r0, [r7, #4]
   1c4ce:	f7f1 ff55 	bl	e37c <_ZdlPv>
   1c4d2:	687b      	ldr	r3, [r7, #4]
   1c4d4:	4618      	mov	r0, r3
   1c4d6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c4da:	46bd      	mov	sp, r7
   1c4dc:	bd80      	pop	{r7, pc}
   1c4de:	46c0      	nop			(mov r8, r8)
   1c4e0:	00021920 	.word	0x00021920

0001c4e4 <_ZN13CommandAllerAD1Ev>:
   1c4e4:	b580      	push	{r7, lr}
   1c4e6:	b082      	sub	sp, #8
   1c4e8:	af00      	add	r7, sp, #0
   1c4ea:	6078      	str	r0, [r7, #4]
   1c4ec:	687a      	ldr	r2, [r7, #4]
   1c4ee:	4b0a      	ldr	r3, [pc, #40]	(1c518 <_ZN13CommandAllerAD1Ev+0x34>)
   1c4f0:	6013      	str	r3, [r2, #0]
   1c4f2:	687b      	ldr	r3, [r7, #4]
   1c4f4:	4618      	mov	r0, r3
   1c4f6:	f7eb fc47 	bl	7d88 <_ZN7CommandD2Ev>
   1c4fa:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c4fe:	b2db      	uxtb	r3, r3
   1c500:	2b00      	cmp	r3, #0
   1c502:	d002      	beq.n	1c50a <_ZN13CommandAllerAD1Ev+0x26>
   1c504:	6878      	ldr	r0, [r7, #4]
   1c506:	f7f1 ff39 	bl	e37c <_ZdlPv>
   1c50a:	687b      	ldr	r3, [r7, #4]
   1c50c:	4618      	mov	r0, r3
   1c50e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c512:	46bd      	mov	sp, r7
   1c514:	bd80      	pop	{r7, pc}
   1c516:	46c0      	nop			(mov r8, r8)
   1c518:	00021920 	.word	0x00021920

0001c51c <_ZN18CommandTournerVersD0Ev>:
    ////////////////////////////////
    //    CommandTournerVers      //
    ////////////////////////////////

class CommandTournerVers : public Command
{
   1c51c:	b580      	push	{r7, lr}
   1c51e:	b082      	sub	sp, #8
   1c520:	af00      	add	r7, sp, #0
   1c522:	6078      	str	r0, [r7, #4]
   1c524:	687a      	ldr	r2, [r7, #4]
   1c526:	4b0a      	ldr	r3, [pc, #40]	(1c550 <_ZN18CommandTournerVersD0Ev+0x34>)
   1c528:	6013      	str	r3, [r2, #0]
   1c52a:	687b      	ldr	r3, [r7, #4]
   1c52c:	4618      	mov	r0, r3
   1c52e:	f7eb fc2b 	bl	7d88 <_ZN7CommandD2Ev>
   1c532:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c536:	b2db      	uxtb	r3, r3
   1c538:	2b00      	cmp	r3, #0
   1c53a:	d002      	beq.n	1c542 <_ZN18CommandTournerVersD0Ev+0x26>
   1c53c:	6878      	ldr	r0, [r7, #4]
   1c53e:	f7f1 ff1d 	bl	e37c <_ZdlPv>
   1c542:	687b      	ldr	r3, [r7, #4]
   1c544:	4618      	mov	r0, r3
   1c546:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c54a:	46bd      	mov	sp, r7
   1c54c:	bd80      	pop	{r7, pc}
   1c54e:	46c0      	nop			(mov r8, r8)
   1c550:	000218f8 	.word	0x000218f8

0001c554 <_ZN18CommandTournerVersD1Ev>:
   1c554:	b580      	push	{r7, lr}
   1c556:	b082      	sub	sp, #8
   1c558:	af00      	add	r7, sp, #0
   1c55a:	6078      	str	r0, [r7, #4]
   1c55c:	687a      	ldr	r2, [r7, #4]
   1c55e:	4b0a      	ldr	r3, [pc, #40]	(1c588 <_ZN18CommandTournerVersD1Ev+0x34>)
   1c560:	6013      	str	r3, [r2, #0]
   1c562:	687b      	ldr	r3, [r7, #4]
   1c564:	4618      	mov	r0, r3
   1c566:	f7eb fc0f 	bl	7d88 <_ZN7CommandD2Ev>
   1c56a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c56e:	b2db      	uxtb	r3, r3
   1c570:	2b00      	cmp	r3, #0
   1c572:	d002      	beq.n	1c57a <_ZN18CommandTournerVersD1Ev+0x26>
   1c574:	6878      	ldr	r0, [r7, #4]
   1c576:	f7f1 ff01 	bl	e37c <_ZdlPv>
   1c57a:	687b      	ldr	r3, [r7, #4]
   1c57c:	4618      	mov	r0, r3
   1c57e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c582:	46bd      	mov	sp, r7
   1c584:	bd80      	pop	{r7, pc}
   1c586:	46c0      	nop			(mov r8, r8)
   1c588:	000218f8 	.word	0x000218f8

0001c58c <_ZN13CommandVirageD0Ev>:

// fait un virage d'un certain angle à la vitesse max suivant un certain rayon de courbure
// arrive avec un certaine vitesse de fin
// marche que vers l'avant
class CommandVirage : public Command
{
   1c58c:	b580      	push	{r7, lr}
   1c58e:	b082      	sub	sp, #8
   1c590:	af00      	add	r7, sp, #0
   1c592:	6078      	str	r0, [r7, #4]
   1c594:	687a      	ldr	r2, [r7, #4]
   1c596:	4b0a      	ldr	r3, [pc, #40]	(1c5c0 <_ZN13CommandVirageD0Ev+0x34>)
   1c598:	6013      	str	r3, [r2, #0]
   1c59a:	687b      	ldr	r3, [r7, #4]
   1c59c:	4618      	mov	r0, r3
   1c59e:	f7eb fbf3 	bl	7d88 <_ZN7CommandD2Ev>
   1c5a2:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c5a6:	b2db      	uxtb	r3, r3
   1c5a8:	2b00      	cmp	r3, #0
   1c5aa:	d002      	beq.n	1c5b2 <_ZN13CommandVirageD0Ev+0x26>
   1c5ac:	6878      	ldr	r0, [r7, #4]
   1c5ae:	f7f1 fee5 	bl	e37c <_ZdlPv>
   1c5b2:	687b      	ldr	r3, [r7, #4]
   1c5b4:	4618      	mov	r0, r3
   1c5b6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c5ba:	46bd      	mov	sp, r7
   1c5bc:	bd80      	pop	{r7, pc}
   1c5be:	46c0      	nop			(mov r8, r8)
   1c5c0:	000218d0 	.word	0x000218d0

0001c5c4 <_ZN13CommandVirageD1Ev>:
   1c5c4:	b580      	push	{r7, lr}
   1c5c6:	b082      	sub	sp, #8
   1c5c8:	af00      	add	r7, sp, #0
   1c5ca:	6078      	str	r0, [r7, #4]
   1c5cc:	687a      	ldr	r2, [r7, #4]
   1c5ce:	4b0a      	ldr	r3, [pc, #40]	(1c5f8 <_ZN13CommandVirageD1Ev+0x34>)
   1c5d0:	6013      	str	r3, [r2, #0]
   1c5d2:	687b      	ldr	r3, [r7, #4]
   1c5d4:	4618      	mov	r0, r3
   1c5d6:	f7eb fbd7 	bl	7d88 <_ZN7CommandD2Ev>
   1c5da:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c5de:	b2db      	uxtb	r3, r3
   1c5e0:	2b00      	cmp	r3, #0
   1c5e2:	d002      	beq.n	1c5ea <_ZN13CommandVirageD1Ev+0x26>
   1c5e4:	6878      	ldr	r0, [r7, #4]
   1c5e6:	f7f1 fec9 	bl	e37c <_ZdlPv>
   1c5ea:	687b      	ldr	r3, [r7, #4]
   1c5ec:	4618      	mov	r0, r3
   1c5ee:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c5f2:	46bd      	mov	sp, r7
   1c5f4:	bd80      	pop	{r7, pc}
   1c5f6:	46c0      	nop			(mov r8, r8)
   1c5f8:	000218d0 	.word	0x000218d0

0001c5fc <_ZN15CommandAttendreD0Ev>:
    ////////////////////////////////
    //      CommandAttendre       //
    ////////////////////////////////

class CommandAttendre : public Command
{
   1c5fc:	b580      	push	{r7, lr}
   1c5fe:	b082      	sub	sp, #8
   1c600:	af00      	add	r7, sp, #0
   1c602:	6078      	str	r0, [r7, #4]
   1c604:	687a      	ldr	r2, [r7, #4]
   1c606:	4b0a      	ldr	r3, [pc, #40]	(1c630 <_ZN15CommandAttendreD0Ev+0x34>)
   1c608:	6013      	str	r3, [r2, #0]
   1c60a:	687b      	ldr	r3, [r7, #4]
   1c60c:	4618      	mov	r0, r3
   1c60e:	f7eb fbbb 	bl	7d88 <_ZN7CommandD2Ev>
   1c612:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c616:	b2db      	uxtb	r3, r3
   1c618:	2b00      	cmp	r3, #0
   1c61a:	d002      	beq.n	1c622 <_ZN15CommandAttendreD0Ev+0x26>
   1c61c:	6878      	ldr	r0, [r7, #4]
   1c61e:	f7f1 fead 	bl	e37c <_ZdlPv>
   1c622:	687b      	ldr	r3, [r7, #4]
   1c624:	4618      	mov	r0, r3
   1c626:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c62a:	46bd      	mov	sp, r7
   1c62c:	bd80      	pop	{r7, pc}
   1c62e:	46c0      	nop			(mov r8, r8)
   1c630:	000218a8 	.word	0x000218a8

0001c634 <_ZN15CommandAttendreD1Ev>:
   1c634:	b580      	push	{r7, lr}
   1c636:	b082      	sub	sp, #8
   1c638:	af00      	add	r7, sp, #0
   1c63a:	6078      	str	r0, [r7, #4]
   1c63c:	687a      	ldr	r2, [r7, #4]
   1c63e:	4b0a      	ldr	r3, [pc, #40]	(1c668 <_ZN15CommandAttendreD1Ev+0x34>)
   1c640:	6013      	str	r3, [r2, #0]
   1c642:	687b      	ldr	r3, [r7, #4]
   1c644:	4618      	mov	r0, r3
   1c646:	f7eb fb9f 	bl	7d88 <_ZN7CommandD2Ev>
   1c64a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c64e:	b2db      	uxtb	r3, r3
   1c650:	2b00      	cmp	r3, #0
   1c652:	d002      	beq.n	1c65a <_ZN15CommandAttendreD1Ev+0x26>
   1c654:	6878      	ldr	r0, [r7, #4]
   1c656:	f7f1 fe91 	bl	e37c <_ZdlPv>
   1c65a:	687b      	ldr	r3, [r7, #4]
   1c65c:	4618      	mov	r0, r3
   1c65e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c662:	46bd      	mov	sp, r7
   1c664:	bd80      	pop	{r7, pc}
   1c666:	46c0      	nop			(mov r8, r8)
   1c668:	000218a8 	.word	0x000218a8

0001c66c <_ZN18CommandTestAvancerD0Ev>:
    ////////////////////////////////
    //    CommandTestAvancer      //
    ////////////////////////////////

class CommandTestAvancer : public Command
{
   1c66c:	b580      	push	{r7, lr}
   1c66e:	b082      	sub	sp, #8
   1c670:	af00      	add	r7, sp, #0
   1c672:	6078      	str	r0, [r7, #4]
   1c674:	687a      	ldr	r2, [r7, #4]
   1c676:	4b0a      	ldr	r3, [pc, #40]	(1c6a0 <_ZN18CommandTestAvancerD0Ev+0x34>)
   1c678:	6013      	str	r3, [r2, #0]
   1c67a:	687b      	ldr	r3, [r7, #4]
   1c67c:	4618      	mov	r0, r3
   1c67e:	f7eb fb83 	bl	7d88 <_ZN7CommandD2Ev>
   1c682:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c686:	b2db      	uxtb	r3, r3
   1c688:	2b00      	cmp	r3, #0
   1c68a:	d002      	beq.n	1c692 <_ZN18CommandTestAvancerD0Ev+0x26>
   1c68c:	6878      	ldr	r0, [r7, #4]
   1c68e:	f7f1 fe75 	bl	e37c <_ZdlPv>
   1c692:	687b      	ldr	r3, [r7, #4]
   1c694:	4618      	mov	r0, r3
   1c696:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c69a:	46bd      	mov	sp, r7
   1c69c:	bd80      	pop	{r7, pc}
   1c69e:	46c0      	nop			(mov r8, r8)
   1c6a0:	00021880 	.word	0x00021880

0001c6a4 <_ZN18CommandTestAvancerD1Ev>:
   1c6a4:	b580      	push	{r7, lr}
   1c6a6:	b082      	sub	sp, #8
   1c6a8:	af00      	add	r7, sp, #0
   1c6aa:	6078      	str	r0, [r7, #4]
   1c6ac:	687a      	ldr	r2, [r7, #4]
   1c6ae:	4b0a      	ldr	r3, [pc, #40]	(1c6d8 <_ZN18CommandTestAvancerD1Ev+0x34>)
   1c6b0:	6013      	str	r3, [r2, #0]
   1c6b2:	687b      	ldr	r3, [r7, #4]
   1c6b4:	4618      	mov	r0, r3
   1c6b6:	f7eb fb67 	bl	7d88 <_ZN7CommandD2Ev>
   1c6ba:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c6be:	b2db      	uxtb	r3, r3
   1c6c0:	2b00      	cmp	r3, #0
   1c6c2:	d002      	beq.n	1c6ca <_ZN18CommandTestAvancerD1Ev+0x26>
   1c6c4:	6878      	ldr	r0, [r7, #4]
   1c6c6:	f7f1 fe59 	bl	e37c <_ZdlPv>
   1c6ca:	687b      	ldr	r3, [r7, #4]
   1c6cc:	4618      	mov	r0, r3
   1c6ce:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c6d2:	46bd      	mov	sp, r7
   1c6d4:	bd80      	pop	{r7, pc}
   1c6d6:	46c0      	nop			(mov r8, r8)
   1c6d8:	00021880 	.word	0x00021880

0001c6dc <_ZN24CommandTestTournerGaucheD0Ev>:
    ////////////////////////////////
    //  CommandTestTournerGauche  //
    ////////////////////////////////

class CommandTestTournerGauche : public Command
{
   1c6dc:	b580      	push	{r7, lr}
   1c6de:	b082      	sub	sp, #8
   1c6e0:	af00      	add	r7, sp, #0
   1c6e2:	6078      	str	r0, [r7, #4]
   1c6e4:	687a      	ldr	r2, [r7, #4]
   1c6e6:	4b0a      	ldr	r3, [pc, #40]	(1c710 <_ZN24CommandTestTournerGaucheD0Ev+0x34>)
   1c6e8:	6013      	str	r3, [r2, #0]
   1c6ea:	687b      	ldr	r3, [r7, #4]
   1c6ec:	4618      	mov	r0, r3
   1c6ee:	f7eb fb4b 	bl	7d88 <_ZN7CommandD2Ev>
   1c6f2:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c6f6:	b2db      	uxtb	r3, r3
   1c6f8:	2b00      	cmp	r3, #0
   1c6fa:	d002      	beq.n	1c702 <_ZN24CommandTestTournerGaucheD0Ev+0x26>
   1c6fc:	6878      	ldr	r0, [r7, #4]
   1c6fe:	f7f1 fe3d 	bl	e37c <_ZdlPv>
   1c702:	687b      	ldr	r3, [r7, #4]
   1c704:	4618      	mov	r0, r3
   1c706:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c70a:	46bd      	mov	sp, r7
   1c70c:	bd80      	pop	{r7, pc}
   1c70e:	46c0      	nop			(mov r8, r8)
   1c710:	00021858 	.word	0x00021858

0001c714 <_ZN24CommandTestTournerGaucheD1Ev>:
   1c714:	b580      	push	{r7, lr}
   1c716:	b082      	sub	sp, #8
   1c718:	af00      	add	r7, sp, #0
   1c71a:	6078      	str	r0, [r7, #4]
   1c71c:	687a      	ldr	r2, [r7, #4]
   1c71e:	4b0a      	ldr	r3, [pc, #40]	(1c748 <_ZN24CommandTestTournerGaucheD1Ev+0x34>)
   1c720:	6013      	str	r3, [r2, #0]
   1c722:	687b      	ldr	r3, [r7, #4]
   1c724:	4618      	mov	r0, r3
   1c726:	f7eb fb2f 	bl	7d88 <_ZN7CommandD2Ev>
   1c72a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c72e:	b2db      	uxtb	r3, r3
   1c730:	2b00      	cmp	r3, #0
   1c732:	d002      	beq.n	1c73a <_ZN24CommandTestTournerGaucheD1Ev+0x26>
   1c734:	6878      	ldr	r0, [r7, #4]
   1c736:	f7f1 fe21 	bl	e37c <_ZdlPv>
   1c73a:	687b      	ldr	r3, [r7, #4]
   1c73c:	4618      	mov	r0, r3
   1c73e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c742:	46bd      	mov	sp, r7
   1c744:	bd80      	pop	{r7, pc}
   1c746:	46c0      	nop			(mov r8, r8)
   1c748:	00021858 	.word	0x00021858

0001c74c <_ZN29CommandCalibrerCapteurCouleurD0Ev>:
        // ou depuis le dernier appel de la selection du capteur
        uint16_t getTickValue();
};

class CommandCalibrerCapteurCouleur : public Command
{
   1c74c:	b580      	push	{r7, lr}
   1c74e:	b082      	sub	sp, #8
   1c750:	af00      	add	r7, sp, #0
   1c752:	6078      	str	r0, [r7, #4]
   1c754:	687a      	ldr	r2, [r7, #4]
   1c756:	4b0a      	ldr	r3, [pc, #40]	(1c780 <_ZN29CommandCalibrerCapteurCouleurD0Ev+0x34>)
   1c758:	6013      	str	r3, [r2, #0]
   1c75a:	687b      	ldr	r3, [r7, #4]
   1c75c:	4618      	mov	r0, r3
   1c75e:	f7eb fb13 	bl	7d88 <_ZN7CommandD2Ev>
   1c762:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c766:	b2db      	uxtb	r3, r3
   1c768:	2b00      	cmp	r3, #0
   1c76a:	d002      	beq.n	1c772 <_ZN29CommandCalibrerCapteurCouleurD0Ev+0x26>
   1c76c:	6878      	ldr	r0, [r7, #4]
   1c76e:	f7f1 fe05 	bl	e37c <_ZdlPv>
   1c772:	687b      	ldr	r3, [r7, #4]
   1c774:	4618      	mov	r0, r3
   1c776:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c77a:	46bd      	mov	sp, r7
   1c77c:	bd80      	pop	{r7, pc}
   1c77e:	46c0      	nop			(mov r8, r8)
   1c780:	000219c8 	.word	0x000219c8

0001c784 <_ZN29CommandCalibrerCapteurCouleurD1Ev>:
   1c784:	b580      	push	{r7, lr}
   1c786:	b082      	sub	sp, #8
   1c788:	af00      	add	r7, sp, #0
   1c78a:	6078      	str	r0, [r7, #4]
   1c78c:	687a      	ldr	r2, [r7, #4]
   1c78e:	4b0a      	ldr	r3, [pc, #40]	(1c7b8 <_ZN29CommandCalibrerCapteurCouleurD1Ev+0x34>)
   1c790:	6013      	str	r3, [r2, #0]
   1c792:	687b      	ldr	r3, [r7, #4]
   1c794:	4618      	mov	r0, r3
   1c796:	f7eb faf7 	bl	7d88 <_ZN7CommandD2Ev>
   1c79a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c79e:	b2db      	uxtb	r3, r3
   1c7a0:	2b00      	cmp	r3, #0
   1c7a2:	d002      	beq.n	1c7aa <_ZN29CommandCalibrerCapteurCouleurD1Ev+0x26>
   1c7a4:	6878      	ldr	r0, [r7, #4]
   1c7a6:	f7f1 fde9 	bl	e37c <_ZdlPv>
   1c7aa:	687b      	ldr	r3, [r7, #4]
   1c7ac:	4618      	mov	r0, r3
   1c7ae:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c7b2:	46bd      	mov	sp, r7
   1c7b4:	bd80      	pop	{r7, pc}
   1c7b6:	46c0      	nop			(mov r8, r8)
   1c7b8:	000219c8 	.word	0x000219c8

0001c7bc <_ZN19CommandCheckCouleurD0Ev>:

        uint16_t resultat;
};

class CommandCheckCouleur : public Command
{
   1c7bc:	b580      	push	{r7, lr}
   1c7be:	b082      	sub	sp, #8
   1c7c0:	af00      	add	r7, sp, #0
   1c7c2:	6078      	str	r0, [r7, #4]
   1c7c4:	687a      	ldr	r2, [r7, #4]
   1c7c6:	4b0a      	ldr	r3, [pc, #40]	(1c7f0 <_ZN19CommandCheckCouleurD0Ev+0x34>)
   1c7c8:	6013      	str	r3, [r2, #0]
   1c7ca:	687b      	ldr	r3, [r7, #4]
   1c7cc:	4618      	mov	r0, r3
   1c7ce:	f7eb fadb 	bl	7d88 <_ZN7CommandD2Ev>
   1c7d2:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c7d6:	b2db      	uxtb	r3, r3
   1c7d8:	2b00      	cmp	r3, #0
   1c7da:	d002      	beq.n	1c7e2 <_ZN19CommandCheckCouleurD0Ev+0x26>
   1c7dc:	6878      	ldr	r0, [r7, #4]
   1c7de:	f7f1 fdcd 	bl	e37c <_ZdlPv>
   1c7e2:	687b      	ldr	r3, [r7, #4]
   1c7e4:	4618      	mov	r0, r3
   1c7e6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c7ea:	46bd      	mov	sp, r7
   1c7ec:	bd80      	pop	{r7, pc}
   1c7ee:	46c0      	nop			(mov r8, r8)
   1c7f0:	000219a0 	.word	0x000219a0

0001c7f4 <_ZN19CommandCheckCouleurD1Ev>:
   1c7f4:	b580      	push	{r7, lr}
   1c7f6:	b082      	sub	sp, #8
   1c7f8:	af00      	add	r7, sp, #0
   1c7fa:	6078      	str	r0, [r7, #4]
   1c7fc:	687a      	ldr	r2, [r7, #4]
   1c7fe:	4b0a      	ldr	r3, [pc, #40]	(1c828 <_ZN19CommandCheckCouleurD1Ev+0x34>)
   1c800:	6013      	str	r3, [r2, #0]
   1c802:	687b      	ldr	r3, [r7, #4]
   1c804:	4618      	mov	r0, r3
   1c806:	f7eb fabf 	bl	7d88 <_ZN7CommandD2Ev>
   1c80a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c80e:	b2db      	uxtb	r3, r3
   1c810:	2b00      	cmp	r3, #0
   1c812:	d002      	beq.n	1c81a <_ZN19CommandCheckCouleurD1Ev+0x26>
   1c814:	6878      	ldr	r0, [r7, #4]
   1c816:	f7f1 fdb1 	bl	e37c <_ZdlPv>
   1c81a:	687b      	ldr	r3, [r7, #4]
   1c81c:	4618      	mov	r0, r3
   1c81e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c822:	46bd      	mov	sp, r7
   1c824:	bd80      	pop	{r7, pc}
   1c826:	46c0      	nop			(mov r8, r8)
   1c828:	000219a0 	.word	0x000219a0

0001c82c <_ZN11StrategieV3D2Ev>:

#endif*/
//#define ETAPE_GARAGE 1
//#define NOMBRE_ETAPES 10
class StrategieV3 : public MediumLevelAction
{
   1c82c:	b580      	push	{r7, lr}
   1c82e:	b082      	sub	sp, #8
   1c830:	af00      	add	r7, sp, #0
   1c832:	6078      	str	r0, [r7, #4]
   1c834:	687a      	ldr	r2, [r7, #4]
   1c836:	4b0a      	ldr	r3, [pc, #40]	(1c860 <_ZN11StrategieV3D2Ev+0x34>)
   1c838:	6013      	str	r3, [r2, #0]
   1c83a:	687b      	ldr	r3, [r7, #4]
   1c83c:	4618      	mov	r0, r3
   1c83e:	f7f8 f91d 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
   1c842:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c846:	b2db      	uxtb	r3, r3
   1c848:	2b00      	cmp	r3, #0
   1c84a:	d002      	beq.n	1c852 <_ZN11StrategieV3D2Ev+0x26>
   1c84c:	6878      	ldr	r0, [r7, #4]
   1c84e:	f7f1 fd95 	bl	e37c <_ZdlPv>
   1c852:	687b      	ldr	r3, [r7, #4]
   1c854:	4618      	mov	r0, r3
   1c856:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c85a:	46bd      	mov	sp, r7
   1c85c:	bd80      	pop	{r7, pc}
   1c85e:	46c0      	nop			(mov r8, r8)
   1c860:	00021ba0 	.word	0x00021ba0

0001c864 <_ZN9Krabi2015D0Ev>:
#include "clap.h"
#include "gobelet.h"
#include "tapis.h"

class Krabi2015 : public StrategieV3
{
   1c864:	b580      	push	{r7, lr}
   1c866:	b084      	sub	sp, #16
   1c868:	af00      	add	r7, sp, #0
   1c86a:	60f8      	str	r0, [r7, #12]
   1c86c:	68fa      	ldr	r2, [r7, #12]
   1c86e:	4b31      	ldr	r3, [pc, #196]	(1c934 <_ZN9Krabi2015D0Ev+0xd0>)
   1c870:	6013      	str	r3, [r2, #0]
   1c872:	68fb      	ldr	r3, [r7, #12]
   1c874:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1c878:	2b00      	cmp	r3, #0
   1c87a:	d013      	beq.n	1c8a4 <_ZN9Krabi2015D0Ev+0x40>
   1c87c:	68fb      	ldr	r3, [r7, #12]
   1c87e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
   1c882:	603b      	str	r3, [r7, #0]
   1c884:	68fb      	ldr	r3, [r7, #12]
   1c886:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1c88a:	683a      	ldr	r2, [r7, #0]
   1c88c:	429a      	cmp	r2, r3
   1c88e:	d009      	beq.n	1c8a4 <_ZN9Krabi2015D0Ev+0x40>
   1c890:	683b      	ldr	r3, [r7, #0]
   1c892:	f1a3 0328 	sub.w	r3, r3, #40	; 0x28
   1c896:	603b      	str	r3, [r7, #0]
   1c898:	683a      	ldr	r2, [r7, #0]
   1c89a:	6813      	ldr	r3, [r2, #0]
   1c89c:	681b      	ldr	r3, [r3, #0]
   1c89e:	6838      	ldr	r0, [r7, #0]
   1c8a0:	4798      	blx	r3
   1c8a2:	e7ef      	b.n	1c884 <_ZN9Krabi2015D0Ev+0x20>
   1c8a4:	68fb      	ldr	r3, [r7, #12]
   1c8a6:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1c8aa:	2b00      	cmp	r3, #0
   1c8ac:	d015      	beq.n	1c8da <_ZN9Krabi2015D0Ev+0x76>
   1c8ae:	68fb      	ldr	r3, [r7, #12]
   1c8b0:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1c8b4:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
   1c8b8:	607b      	str	r3, [r7, #4]
   1c8ba:	68fb      	ldr	r3, [r7, #12]
   1c8bc:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1c8c0:	687a      	ldr	r2, [r7, #4]
   1c8c2:	429a      	cmp	r2, r3
   1c8c4:	d009      	beq.n	1c8da <_ZN9Krabi2015D0Ev+0x76>
   1c8c6:	687b      	ldr	r3, [r7, #4]
   1c8c8:	f1a3 0320 	sub.w	r3, r3, #32	; 0x20
   1c8cc:	607b      	str	r3, [r7, #4]
   1c8ce:	687a      	ldr	r2, [r7, #4]
   1c8d0:	6813      	ldr	r3, [r2, #0]
   1c8d2:	681b      	ldr	r3, [r3, #0]
   1c8d4:	6878      	ldr	r0, [r7, #4]
   1c8d6:	4798      	blx	r3
   1c8d8:	e7ef      	b.n	1c8ba <_ZN9Krabi2015D0Ev+0x56>
   1c8da:	68fb      	ldr	r3, [r7, #12]
   1c8dc:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1c8e0:	2b00      	cmp	r3, #0
   1c8e2:	d015      	beq.n	1c910 <_ZN9Krabi2015D0Ev+0xac>
   1c8e4:	68fb      	ldr	r3, [r7, #12]
   1c8e6:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1c8ea:	f103 0378 	add.w	r3, r3, #120	; 0x78
   1c8ee:	60bb      	str	r3, [r7, #8]
   1c8f0:	68fb      	ldr	r3, [r7, #12]
   1c8f2:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1c8f6:	68ba      	ldr	r2, [r7, #8]
   1c8f8:	429a      	cmp	r2, r3
   1c8fa:	d009      	beq.n	1c910 <_ZN9Krabi2015D0Ev+0xac>
   1c8fc:	68bb      	ldr	r3, [r7, #8]
   1c8fe:	f1a3 0328 	sub.w	r3, r3, #40	; 0x28
   1c902:	60bb      	str	r3, [r7, #8]
   1c904:	68ba      	ldr	r2, [r7, #8]
   1c906:	6813      	ldr	r3, [r2, #0]
   1c908:	681b      	ldr	r3, [r3, #0]
   1c90a:	68b8      	ldr	r0, [r7, #8]
   1c90c:	4798      	blx	r3
   1c90e:	e7ef      	b.n	1c8f0 <_ZN9Krabi2015D0Ev+0x8c>
   1c910:	68fb      	ldr	r3, [r7, #12]
   1c912:	4618      	mov	r0, r3
   1c914:	f7ff ff8a 	bl	1c82c <_ZN11StrategieV3D2Ev>
   1c918:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c91c:	b2db      	uxtb	r3, r3
   1c91e:	2b00      	cmp	r3, #0
   1c920:	d002      	beq.n	1c928 <_ZN9Krabi2015D0Ev+0xc4>
   1c922:	68f8      	ldr	r0, [r7, #12]
   1c924:	f7f1 fd2a 	bl	e37c <_ZdlPv>
   1c928:	68fb      	ldr	r3, [r7, #12]
   1c92a:	4618      	mov	r0, r3
   1c92c:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1c930:	46bd      	mov	sp, r7
   1c932:	bd80      	pop	{r7, pc}
   1c934:	00021b28 	.word	0x00021b28

0001c938 <_ZN9Krabi2015D1Ev>:
   1c938:	b580      	push	{r7, lr}
   1c93a:	b084      	sub	sp, #16
   1c93c:	af00      	add	r7, sp, #0
   1c93e:	60f8      	str	r0, [r7, #12]
   1c940:	68fa      	ldr	r2, [r7, #12]
   1c942:	4b31      	ldr	r3, [pc, #196]	(1ca08 <_ZN9Krabi2015D1Ev+0xd0>)
   1c944:	6013      	str	r3, [r2, #0]
   1c946:	68fb      	ldr	r3, [r7, #12]
   1c948:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1c94c:	2b00      	cmp	r3, #0
   1c94e:	d013      	beq.n	1c978 <_ZN9Krabi2015D1Ev+0x40>
   1c950:	68fb      	ldr	r3, [r7, #12]
   1c952:	f503 73c4 	add.w	r3, r3, #392	; 0x188
   1c956:	603b      	str	r3, [r7, #0]
   1c958:	68fb      	ldr	r3, [r7, #12]
   1c95a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1c95e:	683a      	ldr	r2, [r7, #0]
   1c960:	429a      	cmp	r2, r3
   1c962:	d009      	beq.n	1c978 <_ZN9Krabi2015D1Ev+0x40>
   1c964:	683b      	ldr	r3, [r7, #0]
   1c966:	f1a3 0328 	sub.w	r3, r3, #40	; 0x28
   1c96a:	603b      	str	r3, [r7, #0]
   1c96c:	683a      	ldr	r2, [r7, #0]
   1c96e:	6813      	ldr	r3, [r2, #0]
   1c970:	681b      	ldr	r3, [r3, #0]
   1c972:	6838      	ldr	r0, [r7, #0]
   1c974:	4798      	blx	r3
   1c976:	e7ef      	b.n	1c958 <_ZN9Krabi2015D1Ev+0x20>
   1c978:	68fb      	ldr	r3, [r7, #12]
   1c97a:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1c97e:	2b00      	cmp	r3, #0
   1c980:	d015      	beq.n	1c9ae <_ZN9Krabi2015D1Ev+0x76>
   1c982:	68fb      	ldr	r3, [r7, #12]
   1c984:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1c988:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
   1c98c:	607b      	str	r3, [r7, #4]
   1c98e:	68fb      	ldr	r3, [r7, #12]
   1c990:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1c994:	687a      	ldr	r2, [r7, #4]
   1c996:	429a      	cmp	r2, r3
   1c998:	d009      	beq.n	1c9ae <_ZN9Krabi2015D1Ev+0x76>
   1c99a:	687b      	ldr	r3, [r7, #4]
   1c99c:	f1a3 0320 	sub.w	r3, r3, #32	; 0x20
   1c9a0:	607b      	str	r3, [r7, #4]
   1c9a2:	687a      	ldr	r2, [r7, #4]
   1c9a4:	6813      	ldr	r3, [r2, #0]
   1c9a6:	681b      	ldr	r3, [r3, #0]
   1c9a8:	6878      	ldr	r0, [r7, #4]
   1c9aa:	4798      	blx	r3
   1c9ac:	e7ef      	b.n	1c98e <_ZN9Krabi2015D1Ev+0x56>
   1c9ae:	68fb      	ldr	r3, [r7, #12]
   1c9b0:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1c9b4:	2b00      	cmp	r3, #0
   1c9b6:	d015      	beq.n	1c9e4 <_ZN9Krabi2015D1Ev+0xac>
   1c9b8:	68fb      	ldr	r3, [r7, #12]
   1c9ba:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1c9be:	f103 0378 	add.w	r3, r3, #120	; 0x78
   1c9c2:	60bb      	str	r3, [r7, #8]
   1c9c4:	68fb      	ldr	r3, [r7, #12]
   1c9c6:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1c9ca:	68ba      	ldr	r2, [r7, #8]
   1c9cc:	429a      	cmp	r2, r3
   1c9ce:	d009      	beq.n	1c9e4 <_ZN9Krabi2015D1Ev+0xac>
   1c9d0:	68bb      	ldr	r3, [r7, #8]
   1c9d2:	f1a3 0328 	sub.w	r3, r3, #40	; 0x28
   1c9d6:	60bb      	str	r3, [r7, #8]
   1c9d8:	68ba      	ldr	r2, [r7, #8]
   1c9da:	6813      	ldr	r3, [r2, #0]
   1c9dc:	681b      	ldr	r3, [r3, #0]
   1c9de:	68b8      	ldr	r0, [r7, #8]
   1c9e0:	4798      	blx	r3
   1c9e2:	e7ef      	b.n	1c9c4 <_ZN9Krabi2015D1Ev+0x8c>
   1c9e4:	68fb      	ldr	r3, [r7, #12]
   1c9e6:	4618      	mov	r0, r3
   1c9e8:	f7ff ff20 	bl	1c82c <_ZN11StrategieV3D2Ev>
   1c9ec:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c9f0:	b2db      	uxtb	r3, r3
   1c9f2:	2b00      	cmp	r3, #0
   1c9f4:	d002      	beq.n	1c9fc <_ZN9Krabi2015D1Ev+0xc4>
   1c9f6:	68f8      	ldr	r0, [r7, #12]
   1c9f8:	f7f1 fcc0 	bl	e37c <_ZdlPv>
   1c9fc:	68fb      	ldr	r3, [r7, #12]
   1c9fe:	4618      	mov	r0, r3
   1ca00:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1ca04:	46bd      	mov	sp, r7
   1ca06:	bd80      	pop	{r7, pc}
   1ca08:	00021b28 	.word	0x00021b28

0001ca0c <_ZN17MediumLevelActionaSERKS_>:
#ifndef ROBOTHW
#include <QPainter>;
#endif

class MediumLevelAction
{
   1ca0c:	b580      	push	{r7, lr}
   1ca0e:	b082      	sub	sp, #8
   1ca10:	af00      	add	r7, sp, #0
   1ca12:	6078      	str	r0, [r7, #4]
   1ca14:	6039      	str	r1, [r7, #0]
   1ca16:	687b      	ldr	r3, [r7, #4]
   1ca18:	f103 0304 	add.w	r3, r3, #4	; 0x4
   1ca1c:	683a      	ldr	r2, [r7, #0]
   1ca1e:	4618      	mov	r0, r3
   1ca20:	f102 0304 	add.w	r3, r2, #4	; 0x4
   1ca24:	e893 0006 	ldmia.w	r3, {r1, r2}
   1ca28:	f7f1 fdfc 	bl	e624 <_ZN8PositionaSES_>
   1ca2c:	683b      	ldr	r3, [r7, #0]
   1ca2e:	68da      	ldr	r2, [r3, #12]
   1ca30:	687b      	ldr	r3, [r7, #4]
   1ca32:	60da      	str	r2, [r3, #12]
   1ca34:	683b      	ldr	r3, [r7, #0]
   1ca36:	7c1b      	ldrb	r3, [r3, #16]
   1ca38:	687a      	ldr	r2, [r7, #4]
   1ca3a:	7413      	strb	r3, [r2, #16]
   1ca3c:	683b      	ldr	r3, [r7, #0]
   1ca3e:	695a      	ldr	r2, [r3, #20]
   1ca40:	687b      	ldr	r3, [r7, #4]
   1ca42:	615a      	str	r2, [r3, #20]
   1ca44:	687b      	ldr	r3, [r7, #4]
   1ca46:	4618      	mov	r0, r3
   1ca48:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ca4c:	46bd      	mov	sp, r7
   1ca4e:	bd80      	pop	{r7, pc}

0001ca50 <_ZN10ActionGoToaSERKS_>:
#include "position.h"
//#include <stdint.h>


class ActionGoTo : public MediumLevelAction
{
   1ca50:	b580      	push	{r7, lr}
   1ca52:	b082      	sub	sp, #8
   1ca54:	af00      	add	r7, sp, #0
   1ca56:	6078      	str	r0, [r7, #4]
   1ca58:	6039      	str	r1, [r7, #0]
   1ca5a:	687b      	ldr	r3, [r7, #4]
   1ca5c:	683a      	ldr	r2, [r7, #0]
   1ca5e:	4618      	mov	r0, r3
   1ca60:	4611      	mov	r1, r2
   1ca62:	f7ff ffd3 	bl	1ca0c <_ZN17MediumLevelActionaSERKS_>
   1ca66:	683b      	ldr	r3, [r7, #0]
   1ca68:	699a      	ldr	r2, [r3, #24]
   1ca6a:	687b      	ldr	r3, [r7, #4]
   1ca6c:	619a      	str	r2, [r3, #24]
   1ca6e:	683b      	ldr	r3, [r7, #0]
   1ca70:	7f1b      	ldrb	r3, [r3, #28]
   1ca72:	687a      	ldr	r2, [r7, #4]
   1ca74:	7713      	strb	r3, [r2, #28]
   1ca76:	683b      	ldr	r3, [r7, #0]
   1ca78:	6a1a      	ldr	r2, [r3, #32]
   1ca7a:	687b      	ldr	r3, [r7, #4]
   1ca7c:	621a      	str	r2, [r3, #32]
   1ca7e:	683b      	ldr	r3, [r7, #0]
   1ca80:	6a5a      	ldr	r2, [r3, #36]
   1ca82:	687b      	ldr	r3, [r7, #4]
   1ca84:	625a      	str	r2, [r3, #36]
   1ca86:	687b      	ldr	r3, [r7, #4]
   1ca88:	f103 0328 	add.w	r3, r3, #40	; 0x28
   1ca8c:	683a      	ldr	r2, [r7, #0]
   1ca8e:	4618      	mov	r0, r3
   1ca90:	f102 0328 	add.w	r3, r2, #40	; 0x28
   1ca94:	e893 0006 	ldmia.w	r3, {r1, r2}
   1ca98:	f7f1 fdc4 	bl	e624 <_ZN8PositionaSES_>
   1ca9c:	687b      	ldr	r3, [r7, #4]
   1ca9e:	4618      	mov	r0, r3
   1caa0:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1caa4:	46bd      	mov	sp, r7
   1caa6:	bd80      	pop	{r7, pc}

0001caa8 <_ZN4ClapaSERKS_>:

/** @class clap : le robot doit fermer 3 claps du bord de la table
*/

class Clap : public MediumLevelAction
{
   1caa8:	b580      	push	{r7, lr}
   1caaa:	b082      	sub	sp, #8
   1caac:	af00      	add	r7, sp, #0
   1caae:	6078      	str	r0, [r7, #4]
   1cab0:	6039      	str	r1, [r7, #0]
   1cab2:	687b      	ldr	r3, [r7, #4]
   1cab4:	683a      	ldr	r2, [r7, #0]
   1cab6:	4618      	mov	r0, r3
   1cab8:	4611      	mov	r1, r2
   1caba:	f7ff ffa7 	bl	1ca0c <_ZN17MediumLevelActionaSERKS_>
   1cabe:	687b      	ldr	r3, [r7, #4]
   1cac0:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1cac4:	683a      	ldr	r2, [r7, #0]
   1cac6:	4618      	mov	r0, r3
   1cac8:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1cacc:	e893 0006 	ldmia.w	r3, {r1, r2}
   1cad0:	f7f1 fda8 	bl	e624 <_ZN8PositionaSES_>
   1cad4:	687b      	ldr	r3, [r7, #4]
   1cad6:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1cada:	683a      	ldr	r2, [r7, #0]
   1cadc:	4618      	mov	r0, r3
   1cade:	f102 0320 	add.w	r3, r2, #32	; 0x20
   1cae2:	e893 0006 	ldmia.w	r3, {r1, r2}
   1cae6:	f7f1 fd9d 	bl	e624 <_ZN8PositionaSES_>
   1caea:	687b      	ldr	r3, [r7, #4]
   1caec:	4618      	mov	r0, r3
   1caee:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1caf2:	46bd      	mov	sp, r7
   1caf4:	bd80      	pop	{r7, pc}
   1caf6:	46c0      	nop			(mov r8, r8)

0001caf8 <_ZN7GobeletaSERKS_>:
#include "position.h"
#include "mediumLevelAction.h"
#include "command.h"

class Gobelet : public MediumLevelAction
{
   1caf8:	b580      	push	{r7, lr}
   1cafa:	b082      	sub	sp, #8
   1cafc:	af00      	add	r7, sp, #0
   1cafe:	6078      	str	r0, [r7, #4]
   1cb00:	6039      	str	r1, [r7, #0]
   1cb02:	687b      	ldr	r3, [r7, #4]
   1cb04:	683a      	ldr	r2, [r7, #0]
   1cb06:	4618      	mov	r0, r3
   1cb08:	4611      	mov	r1, r2
   1cb0a:	f7ff ff7f 	bl	1ca0c <_ZN17MediumLevelActionaSERKS_>
   1cb0e:	687b      	ldr	r3, [r7, #4]
   1cb10:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1cb14:	683a      	ldr	r2, [r7, #0]
   1cb16:	4618      	mov	r0, r3
   1cb18:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1cb1c:	e893 0006 	ldmia.w	r3, {r1, r2}
   1cb20:	f7f1 fd80 	bl	e624 <_ZN8PositionaSES_>
   1cb24:	687b      	ldr	r3, [r7, #4]
   1cb26:	4618      	mov	r0, r3
   1cb28:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cb2c:	46bd      	mov	sp, r7
   1cb2e:	bd80      	pop	{r7, pc}

0001cb30 <_ZN5TapisaSERKS_>:

/** @class Tapis : le robot doit poser 2 tapis sur les marches.
*/

class Tapis : public MediumLevelAction
{
   1cb30:	b580      	push	{r7, lr}
   1cb32:	b082      	sub	sp, #8
   1cb34:	af00      	add	r7, sp, #0
   1cb36:	6078      	str	r0, [r7, #4]
   1cb38:	6039      	str	r1, [r7, #0]
   1cb3a:	687b      	ldr	r3, [r7, #4]
   1cb3c:	683a      	ldr	r2, [r7, #0]
   1cb3e:	4618      	mov	r0, r3
   1cb40:	4611      	mov	r1, r2
   1cb42:	f7ff ff63 	bl	1ca0c <_ZN17MediumLevelActionaSERKS_>
   1cb46:	687b      	ldr	r3, [r7, #4]
   1cb48:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1cb4c:	683a      	ldr	r2, [r7, #0]
   1cb4e:	4618      	mov	r0, r3
   1cb50:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1cb54:	e893 0006 	ldmia.w	r3, {r1, r2}
   1cb58:	f7f1 fd64 	bl	e624 <_ZN8PositionaSES_>
   1cb5c:	687b      	ldr	r3, [r7, #4]
   1cb5e:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1cb62:	683a      	ldr	r2, [r7, #0]
   1cb64:	4618      	mov	r0, r3
   1cb66:	f102 0320 	add.w	r3, r2, #32	; 0x20
   1cb6a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1cb6e:	f7f1 fd59 	bl	e624 <_ZN8PositionaSES_>
   1cb72:	687b      	ldr	r3, [r7, #4]
   1cb74:	4618      	mov	r0, r3
   1cb76:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cb7a:	46bd      	mov	sp, r7
   1cb7c:	bd80      	pop	{r7, pc}
   1cb7e:	46c0      	nop			(mov r8, r8)

0001cb80 <_ZN11StrategieV3D0Ev>:
   1cb80:	b580      	push	{r7, lr}
   1cb82:	b082      	sub	sp, #8
   1cb84:	af00      	add	r7, sp, #0
   1cb86:	6078      	str	r0, [r7, #4]
   1cb88:	687a      	ldr	r2, [r7, #4]
   1cb8a:	4b0a      	ldr	r3, [pc, #40]	(1cbb4 <_ZN11StrategieV3D0Ev+0x34>)
   1cb8c:	6013      	str	r3, [r2, #0]
   1cb8e:	687b      	ldr	r3, [r7, #4]
   1cb90:	4618      	mov	r0, r3
   1cb92:	f7f7 ff73 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
   1cb96:	f04f 0301 	mov.w	r3, #1	; 0x1
   1cb9a:	b2db      	uxtb	r3, r3
   1cb9c:	2b00      	cmp	r3, #0
   1cb9e:	d002      	beq.n	1cba6 <_ZN11StrategieV3D0Ev+0x26>
   1cba0:	6878      	ldr	r0, [r7, #4]
   1cba2:	f7f1 fbeb 	bl	e37c <_ZdlPv>
   1cba6:	687b      	ldr	r3, [r7, #4]
   1cba8:	4618      	mov	r0, r3
   1cbaa:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cbae:	46bd      	mov	sp, r7
   1cbb0:	bd80      	pop	{r7, pc}
   1cbb2:	46c0      	nop			(mov r8, r8)
   1cbb4:	00021ba0 	.word	0x00021ba0

0001cbb8 <_ZN11StrategieV3D1Ev>:
   1cbb8:	b580      	push	{r7, lr}
   1cbba:	b082      	sub	sp, #8
   1cbbc:	af00      	add	r7, sp, #0
   1cbbe:	6078      	str	r0, [r7, #4]
   1cbc0:	687a      	ldr	r2, [r7, #4]
   1cbc2:	4b0a      	ldr	r3, [pc, #40]	(1cbec <_ZN11StrategieV3D1Ev+0x34>)
   1cbc4:	6013      	str	r3, [r2, #0]
   1cbc6:	687b      	ldr	r3, [r7, #4]
   1cbc8:	4618      	mov	r0, r3
   1cbca:	f7f7 ff57 	bl	14a7c <_ZN17MediumLevelActionD2Ev>
   1cbce:	f04f 0300 	mov.w	r3, #0	; 0x0
   1cbd2:	b2db      	uxtb	r3, r3
   1cbd4:	2b00      	cmp	r3, #0
   1cbd6:	d002      	beq.n	1cbde <_ZN11StrategieV3D1Ev+0x26>
   1cbd8:	6878      	ldr	r0, [r7, #4]
   1cbda:	f7f1 fbcf 	bl	e37c <_ZdlPv>
   1cbde:	687b      	ldr	r3, [r7, #4]
   1cbe0:	4618      	mov	r0, r3
   1cbe2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cbe6:	46bd      	mov	sp, r7
   1cbe8:	bd80      	pop	{r7, pc}
   1cbea:	46c0      	nop			(mov r8, r8)
   1cbec:	00021ba0 	.word	0x00021ba0

0001cbf0 <__cxa_pure_virtual>:
   1cbf0:	b500      	push	{lr}
   1cbf2:	4904      	ldr	r1, [pc, #16]	(1cc04 <__cxa_pure_virtual+0x14>)
   1cbf4:	b081      	sub	sp, #4
   1cbf6:	221b      	movs	r2, #27
   1cbf8:	2002      	movs	r0, #2
   1cbfa:	f004 f851 	bl	20ca0 <write>
   1cbfe:	f000 f821 	bl	1cc44 <_ZSt9terminatev>
   1cc02:	46c0      	nop			(mov r8, r8)
   1cc04:	00022218 	.word	0x00022218

0001cc08 <_ZSt13set_terminatePFvvE>:
   1cc08:	4b02      	ldr	r3, [pc, #8]	(1cc14 <_ZSt13set_terminatePFvvE+0xc>)
   1cc0a:	681a      	ldr	r2, [r3, #0]
   1cc0c:	6018      	str	r0, [r3, #0]
   1cc0e:	4610      	mov	r0, r2
   1cc10:	4770      	bx	lr
   1cc12:	46c0      	nop			(mov r8, r8)
   1cc14:	20000038 	.word	0x20000038

0001cc18 <_ZSt14set_unexpectedPFvvE>:
   1cc18:	4b02      	ldr	r3, [pc, #8]	(1cc24 <_ZSt14set_unexpectedPFvvE+0xc>)
   1cc1a:	681a      	ldr	r2, [r3, #0]
   1cc1c:	6018      	str	r0, [r3, #0]
   1cc1e:	4610      	mov	r0, r2
   1cc20:	4770      	bx	lr
   1cc22:	46c0      	nop			(mov r8, r8)
   1cc24:	20000034 	.word	0x20000034

0001cc28 <_ZN10__cxxabiv111__terminateEPFvvE>:
   1cc28:	b510      	push	{r4, lr}
   1cc2a:	4780      	blx	r0
   1cc2c:	f002 ffa6 	bl	1fb7c <abort>
   1cc30:	f000 ff3c 	bl	1daac <__cxa_begin_catch>
   1cc34:	f002 ffa2 	bl	1fb7c <abort>
   1cc38:	4604      	mov	r4, r0
   1cc3a:	f000 feef 	bl	1da1c <__cxa_end_catch>
   1cc3e:	4620      	mov	r0, r4
   1cc40:	f7fa fae2 	bl	17208 <__cxa_end_cleanup>

0001cc44 <_ZSt9terminatev>:
   1cc44:	b500      	push	{lr}
   1cc46:	4b02      	ldr	r3, [pc, #8]	(1cc50 <_ZSt9terminatev+0xc>)
   1cc48:	b081      	sub	sp, #4
   1cc4a:	6818      	ldr	r0, [r3, #0]
   1cc4c:	f7ff ffec 	bl	1cc28 <_ZN10__cxxabiv111__terminateEPFvvE>
   1cc50:	20000038 	.word	0x20000038

0001cc54 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   1cc54:	b500      	push	{lr}
   1cc56:	b081      	sub	sp, #4
   1cc58:	4780      	blx	r0
   1cc5a:	f7ff fff3 	bl	1cc44 <_ZSt9terminatev>
   1cc5e:	46c0      	nop			(mov r8, r8)

0001cc60 <_ZSt10unexpectedv>:
   1cc60:	b500      	push	{lr}
   1cc62:	4b02      	ldr	r3, [pc, #8]	(1cc6c <_ZSt10unexpectedv+0xc>)
   1cc64:	b081      	sub	sp, #4
   1cc66:	6818      	ldr	r0, [r3, #0]
   1cc68:	f7ff fff4 	bl	1cc54 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1cc6c:	20000034 	.word	0x20000034

0001cc70 <__cxa_begin_cleanup>:
   1cc70:	b510      	push	{r4, lr}
   1cc72:	4604      	mov	r4, r0
   1cc74:	f001 f9f0 	bl	1e058 <__cxa_get_globals>
   1cc78:	f814 3920 	ldrb.w	r3, [r4], #-32
   1cc7c:	2b47      	cmp	r3, #71
   1cc7e:	d005      	beq.n	1cc8c <__cxa_begin_cleanup+0x1c>
   1cc80:	6883      	ldr	r3, [r0, #8]
   1cc82:	2b00      	cmp	r3, #0
   1cc84:	d127      	bne.n	1ccd6 <__cxa_begin_cleanup+0x66>
   1cc86:	6084      	str	r4, [r0, #8]
   1cc88:	2001      	movs	r0, #1
   1cc8a:	bd10      	pop	{r4, pc}
   1cc8c:	f894 3021 	ldrb.w	r3, [r4, #33]
   1cc90:	2b4e      	cmp	r3, #78
   1cc92:	d1f5      	bne.n	1cc80 <__cxa_begin_cleanup+0x10>
   1cc94:	f894 3022 	ldrb.w	r3, [r4, #34]
   1cc98:	2b55      	cmp	r3, #85
   1cc9a:	d1f1      	bne.n	1cc80 <__cxa_begin_cleanup+0x10>
   1cc9c:	f894 3023 	ldrb.w	r3, [r4, #35]
   1cca0:	2b43      	cmp	r3, #67
   1cca2:	d1ed      	bne.n	1cc80 <__cxa_begin_cleanup+0x10>
   1cca4:	f894 3024 	ldrb.w	r3, [r4, #36]
   1cca8:	2b43      	cmp	r3, #67
   1ccaa:	d1e9      	bne.n	1cc80 <__cxa_begin_cleanup+0x10>
   1ccac:	f894 3025 	ldrb.w	r3, [r4, #37]
   1ccb0:	2b2b      	cmp	r3, #43
   1ccb2:	d1e5      	bne.n	1cc80 <__cxa_begin_cleanup+0x10>
   1ccb4:	f894 3026 	ldrb.w	r3, [r4, #38]
   1ccb8:	2b2b      	cmp	r3, #43
   1ccba:	d1e1      	bne.n	1cc80 <__cxa_begin_cleanup+0x10>
   1ccbc:	f894 3027 	ldrb.w	r3, [r4, #39]
   1ccc0:	2b00      	cmp	r3, #0
   1ccc2:	d1dd      	bne.n	1cc80 <__cxa_begin_cleanup+0x10>
   1ccc4:	69e3      	ldr	r3, [r4, #28]
   1ccc6:	3301      	adds	r3, #1
   1ccc8:	2b01      	cmp	r3, #1
   1ccca:	61e3      	str	r3, [r4, #28]
   1cccc:	d1dc      	bne.n	1cc88 <__cxa_begin_cleanup+0x18>
   1ccce:	6883      	ldr	r3, [r0, #8]
   1ccd0:	61a3      	str	r3, [r4, #24]
   1ccd2:	6084      	str	r4, [r0, #8]
   1ccd4:	e7d8      	b.n	1cc88 <__cxa_begin_cleanup+0x18>
   1ccd6:	f7ff ffb5 	bl	1cc44 <_ZSt9terminatev>
   1ccda:	46c0      	nop			(mov r8, r8)

0001ccdc <__cxa_type_match>:
   1ccdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ccde:	461f      	mov	r7, r3
   1cce0:	7803      	ldrb	r3, [r0, #0]
   1cce2:	b083      	sub	sp, #12
   1cce4:	2b47      	cmp	r3, #71
   1cce6:	460e      	mov	r6, r1
   1cce8:	d02c      	beq.n	1cd44 <__cxa_type_match+0x68>
   1ccea:	4d27      	ldr	r5, [pc, #156]	(1cd88 <__cxa_type_match+0xac>)
   1ccec:	683b      	ldr	r3, [r7, #0]
   1ccee:	682a      	ldr	r2, [r5, #0]
   1ccf0:	9301      	str	r3, [sp, #4]
   1ccf2:	4628      	mov	r0, r5
   1ccf4:	6893      	ldr	r3, [r2, #8]
   1ccf6:	4798      	blx	r3
   1ccf8:	b110      	cbz	r0, 1cd00 <__cxa_type_match+0x24>
   1ccfa:	9b01      	ldr	r3, [sp, #4]
   1ccfc:	681a      	ldr	r2, [r3, #0]
   1ccfe:	9201      	str	r2, [sp, #4]
   1cd00:	6833      	ldr	r3, [r6, #0]
   1cd02:	4630      	mov	r0, r6
   1cd04:	691c      	ldr	r4, [r3, #16]
   1cd06:	4629      	mov	r1, r5
   1cd08:	aa01      	add	r2, sp, #4
   1cd0a:	2301      	movs	r3, #1
   1cd0c:	47a0      	blx	r4
   1cd0e:	b1b8      	cbz	r0, 1cd40 <__cxa_type_match+0x64>
   1cd10:	9b01      	ldr	r3, [sp, #4]
   1cd12:	6832      	ldr	r2, [r6, #0]
   1cd14:	603b      	str	r3, [r7, #0]
   1cd16:	4b1d      	ldr	r3, [pc, #116]	(1cd8c <__cxa_type_match+0xb0>)
   1cd18:	f852 0c04 	ldr.w	r0, [r2, #-4]
   1cd1c:	681a      	ldr	r2, [r3, #0]
   1cd1e:	f852 1c04 	ldr.w	r1, [r2, #-4]
   1cd22:	f001 f8e9 	bl	1def8 <_ZNKSt9type_infoeqERKS_>
   1cd26:	b150      	cbz	r0, 1cd3e <__cxa_type_match+0x62>
   1cd28:	68f3      	ldr	r3, [r6, #12]
   1cd2a:	2b00      	cmp	r3, #0
   1cd2c:	d02a      	beq.n	1cd84 <__cxa_type_match+0xa8>
   1cd2e:	681b      	ldr	r3, [r3, #0]
   1cd30:	4917      	ldr	r1, [pc, #92]	(1cd90 <__cxa_type_match+0xb4>)
   1cd32:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1cd36:	f001 f8df 	bl	1def8 <_ZNKSt9type_infoeqERKS_>
   1cd3a:	2800      	cmp	r0, #0
   1cd3c:	d01a      	beq.n	1cd74 <__cxa_type_match+0x98>
   1cd3e:	2001      	movs	r0, #1
   1cd40:	b003      	add	sp, #12
   1cd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cd44:	7843      	ldrb	r3, [r0, #1]
   1cd46:	2b4e      	cmp	r3, #78
   1cd48:	d1cf      	bne.n	1ccea <__cxa_type_match+0xe>
   1cd4a:	7883      	ldrb	r3, [r0, #2]
   1cd4c:	2b55      	cmp	r3, #85
   1cd4e:	d1cc      	bne.n	1ccea <__cxa_type_match+0xe>
   1cd50:	78c3      	ldrb	r3, [r0, #3]
   1cd52:	2b43      	cmp	r3, #67
   1cd54:	d1c9      	bne.n	1ccea <__cxa_type_match+0xe>
   1cd56:	7903      	ldrb	r3, [r0, #4]
   1cd58:	2b43      	cmp	r3, #67
   1cd5a:	d1c6      	bne.n	1ccea <__cxa_type_match+0xe>
   1cd5c:	7943      	ldrb	r3, [r0, #5]
   1cd5e:	2b2b      	cmp	r3, #43
   1cd60:	d1c3      	bne.n	1ccea <__cxa_type_match+0xe>
   1cd62:	7983      	ldrb	r3, [r0, #6]
   1cd64:	2b2b      	cmp	r3, #43
   1cd66:	d1c0      	bne.n	1ccea <__cxa_type_match+0xe>
   1cd68:	79c3      	ldrb	r3, [r0, #7]
   1cd6a:	2b00      	cmp	r3, #0
   1cd6c:	d1bd      	bne.n	1ccea <__cxa_type_match+0xe>
   1cd6e:	f850 5c20 	ldr.w	r5, [r0, #-32]
   1cd72:	e7bb      	b.n	1ccec <__cxa_type_match+0x10>
   1cd74:	68f0      	ldr	r0, [r6, #12]
   1cd76:	68e9      	ldr	r1, [r5, #12]
   1cd78:	f001 f8be 	bl	1def8 <_ZNKSt9type_infoeqERKS_>
   1cd7c:	2800      	cmp	r0, #0
   1cd7e:	d1de      	bne.n	1cd3e <__cxa_type_match+0x62>
   1cd80:	3002      	adds	r0, #2
   1cd82:	e7dd      	b.n	1cd40 <__cxa_type_match+0x64>
   1cd84:	f000 fcbc 	bl	1d700 <__cxa_bad_typeid>
   1cd88:	0002282c 	.word	0x0002282c
   1cd8c:	00022668 	.word	0x00022668
   1cd90:	00022678 	.word	0x00022678

0001cd94 <__gnu_end_cleanup>:
   1cd94:	b500      	push	{lr}
   1cd96:	b081      	sub	sp, #4
   1cd98:	f001 f95e 	bl	1e058 <__cxa_get_globals>
   1cd9c:	4602      	mov	r2, r0
   1cd9e:	6880      	ldr	r0, [r0, #8]
   1cda0:	2800      	cmp	r0, #0
   1cda2:	d02e      	beq.n	1ce02 <__gnu_end_cleanup+0x6e>
   1cda4:	f890 3020 	ldrb.w	r3, [r0, #32]
   1cda8:	2b47      	cmp	r3, #71
   1cdaa:	d004      	beq.n	1cdb6 <__gnu_end_cleanup+0x22>
   1cdac:	2300      	movs	r3, #0
   1cdae:	6093      	str	r3, [r2, #8]
   1cdb0:	3020      	adds	r0, #32
   1cdb2:	b001      	add	sp, #4
   1cdb4:	bd00      	pop	{pc}
   1cdb6:	f890 3021 	ldrb.w	r3, [r0, #33]
   1cdba:	2b4e      	cmp	r3, #78
   1cdbc:	d1f6      	bne.n	1cdac <__gnu_end_cleanup+0x18>
   1cdbe:	f890 3022 	ldrb.w	r3, [r0, #34]
   1cdc2:	2b55      	cmp	r3, #85
   1cdc4:	d1f2      	bne.n	1cdac <__gnu_end_cleanup+0x18>
   1cdc6:	f890 3023 	ldrb.w	r3, [r0, #35]
   1cdca:	2b43      	cmp	r3, #67
   1cdcc:	d1ee      	bne.n	1cdac <__gnu_end_cleanup+0x18>
   1cdce:	f890 3024 	ldrb.w	r3, [r0, #36]
   1cdd2:	2b43      	cmp	r3, #67
   1cdd4:	d1ea      	bne.n	1cdac <__gnu_end_cleanup+0x18>
   1cdd6:	f890 3025 	ldrb.w	r3, [r0, #37]
   1cdda:	2b2b      	cmp	r3, #43
   1cddc:	d1e6      	bne.n	1cdac <__gnu_end_cleanup+0x18>
   1cdde:	f890 3026 	ldrb.w	r3, [r0, #38]
   1cde2:	2b2b      	cmp	r3, #43
   1cde4:	d1e2      	bne.n	1cdac <__gnu_end_cleanup+0x18>
   1cde6:	f890 3027 	ldrb.w	r3, [r0, #39]
   1cdea:	2b00      	cmp	r3, #0
   1cdec:	d1de      	bne.n	1cdac <__gnu_end_cleanup+0x18>
   1cdee:	69c3      	ldr	r3, [r0, #28]
   1cdf0:	3b01      	subs	r3, #1
   1cdf2:	61c3      	str	r3, [r0, #28]
   1cdf4:	2b00      	cmp	r3, #0
   1cdf6:	d1db      	bne.n	1cdb0 <__gnu_end_cleanup+0x1c>
   1cdf8:	6983      	ldr	r3, [r0, #24]
   1cdfa:	6093      	str	r3, [r2, #8]
   1cdfc:	2200      	movs	r2, #0
   1cdfe:	6182      	str	r2, [r0, #24]
   1ce00:	e7d6      	b.n	1cdb0 <__gnu_end_cleanup+0x1c>
   1ce02:	f7ff ff1f 	bl	1cc44 <_ZSt9terminatev>
   1ce06:	46c0      	nop			(mov r8, r8)

0001ce08 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   1ce08:	b500      	push	{lr}
   1ce0a:	28ff      	cmp	r0, #255
   1ce0c:	b081      	sub	sp, #4
   1ce0e:	d00d      	beq.n	1ce2c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1ce10:	f000 0070 	and.w	r0, r0, #112	; 0x70
   1ce14:	2820      	cmp	r0, #32
   1ce16:	d018      	beq.n	1ce4a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x42>
   1ce18:	dd07      	ble.n	1ce2a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
   1ce1a:	2840      	cmp	r0, #64
   1ce1c:	d00d      	beq.n	1ce3a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   1ce1e:	2850      	cmp	r0, #80
   1ce20:	d004      	beq.n	1ce2c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1ce22:	2830      	cmp	r0, #48
   1ce24:	d00d      	beq.n	1ce42 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
   1ce26:	f002 fea9 	bl	1fb7c <abort>
   1ce2a:	b910      	cbnz	r0, 1ce32 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
   1ce2c:	2000      	movs	r0, #0
   1ce2e:	b001      	add	sp, #4
   1ce30:	bd00      	pop	{pc}
   1ce32:	2810      	cmp	r0, #16
   1ce34:	d0fa      	beq.n	1ce2c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1ce36:	f002 fea1 	bl	1fb7c <abort>
   1ce3a:	4608      	mov	r0, r1
   1ce3c:	f7fe fe46 	bl	1bacc <_Unwind_GetRegionStart>
   1ce40:	e7f5      	b.n	1ce2e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
   1ce42:	4608      	mov	r0, r1
   1ce44:	f7fe fe1e 	bl	1ba84 <_Unwind_GetDataRelBase>
   1ce48:	e7f1      	b.n	1ce2e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
   1ce4a:	4608      	mov	r0, r1
   1ce4c:	f7fe fe16 	bl	1ba7c <_Unwind_GetTextRelBase>
   1ce50:	e7ed      	b.n	1ce2e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
   1ce52:	46c0      	nop			(mov r8, r8)

0001ce54 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   1ce54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce58:	4604      	mov	r4, r0
   1ce5a:	460e      	mov	r6, r1
   1ce5c:	4617      	mov	r7, r2
   1ce5e:	b108      	cbz	r0, 1ce64 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
   1ce60:	f7fe fe34 	bl	1bacc <_Unwind_GetRegionStart>
   1ce64:	6038      	str	r0, [r7, #0]
   1ce66:	4635      	mov	r5, r6
   1ce68:	f815 8b01 	ldrb.w	r8, [r5], #1
   1ce6c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1ce70:	bf08      	it	eq
   1ce72:	6078      	streq	r0, [r7, #4]
   1ce74:	d03d      	beq.n	1cef2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x9e>
   1ce76:	4640      	mov	r0, r8
   1ce78:	4621      	mov	r1, r4
   1ce7a:	f7ff ffc5 	bl	1ce08 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1ce7e:	f1b8 0f50 	cmp.w	r8, #80	; 0x50
   1ce82:	d06d      	beq.n	1cf60 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10c>
   1ce84:	f008 030f 	and.w	r3, r8, #15	; 0xf
   1ce88:	46ae      	mov	lr, r5
   1ce8a:	2b0c      	cmp	r3, #12
   1ce8c:	f200 808d 	bhi.w	1cfaa <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x156>
   1ce90:	e8df f003 	tbb	[pc, r3]
   1ce94:	6d858d6d 	.word	0x6d858d6d
   1ce98:	8b8b8b79 	.word	0x8b8b8b79
   1ce9c:	6d9f078b 	.word	0x6d9f078b
   1cea0:	0079      	.short	0x0079
   1cea2:	2400      	movs	r4, #0
   1cea4:	1cb1      	adds	r1, r6, #2
   1cea6:	46a4      	mov	ip, r4
   1cea8:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1ceac:	460d      	mov	r5, r1
   1ceae:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1ceb2:	fa03 f30c 	lsl.w	r3, r3, ip
   1ceb6:	3101      	adds	r1, #1
   1ceb8:	431c      	orrs	r4, r3
   1ceba:	f012 0f80 	tst.w	r2, #128	; 0x80
   1cebe:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1cec2:	d1f1      	bne.n	1cea8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
   1cec4:	f1bc 0f1f 	cmp.w	ip, #31	; 0x1f
   1cec8:	d807      	bhi.n	1ceda <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1ceca:	f012 0f40 	tst.w	r2, #64	; 0x40
   1cece:	bf1e      	ittt	ne
   1ced0:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   1ced4:	fa03 f30c 	lslne.w	r3, r3, ip
   1ced8:	431c      	orrne	r4, r3
   1ceda:	b14c      	cbz	r4, 1cef0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x9c>
   1cedc:	f008 0370 	and.w	r3, r8, #112	; 0x70
   1cee0:	2b10      	cmp	r3, #16
   1cee2:	bf08      	it	eq
   1cee4:	4670      	moveq	r0, lr
   1cee6:	1824      	adds	r4, r4, r0
   1cee8:	f018 0f80 	tst.w	r8, #128	; 0x80
   1ceec:	bf18      	it	ne
   1ceee:	6824      	ldrne	r4, [r4, #0]
   1cef0:	607c      	str	r4, [r7, #4]
   1cef2:	462c      	mov	r4, r5
   1cef4:	f814 3b01 	ldrb.w	r3, [r4], #1
   1cef8:	2bff      	cmp	r3, #255
   1cefa:	753b      	strb	r3, [r7, #20]
   1cefc:	d02d      	beq.n	1cf5a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x106>
   1cefe:	f04f 0c00 	mov.w	ip, #0	; 0x0
   1cf02:	1ca9      	adds	r1, r5, #2
   1cf04:	4660      	mov	r0, ip
   1cf06:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1cf0a:	460c      	mov	r4, r1
   1cf0c:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1cf10:	4083      	lsls	r3, r0
   1cf12:	3101      	adds	r1, #1
   1cf14:	3007      	adds	r0, #7
   1cf16:	f012 0f80 	tst.w	r2, #128	; 0x80
   1cf1a:	ea4c 0c03 	orr.w	ip, ip, r3
   1cf1e:	d1f2      	bne.n	1cf06 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xb2>
   1cf20:	eb04 030c 	add.w	r3, r4, ip
   1cf24:	60fb      	str	r3, [r7, #12]
   1cf26:	4621      	mov	r1, r4
   1cf28:	f811 3b02 	ldrb.w	r3, [r1], #2
   1cf2c:	2000      	movs	r0, #0
   1cf2e:	757b      	strb	r3, [r7, #21]
   1cf30:	4684      	mov	ip, r0
   1cf32:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1cf36:	460c      	mov	r4, r1
   1cf38:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1cf3c:	fa03 f30c 	lsl.w	r3, r3, ip
   1cf40:	3101      	adds	r1, #1
   1cf42:	4318      	orrs	r0, r3
   1cf44:	f012 0f80 	tst.w	r2, #128	; 0x80
   1cf48:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1cf4c:	d1f1      	bne.n	1cf32 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xde>
   1cf4e:	eb04 0300 	add.w	r3, r4, r0
   1cf52:	613b      	str	r3, [r7, #16]
   1cf54:	4620      	mov	r0, r4
   1cf56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cf5a:	2300      	movs	r3, #0
   1cf5c:	60fb      	str	r3, [r7, #12]
   1cf5e:	e7e2      	b.n	1cf26 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd2>
   1cf60:	1d33      	adds	r3, r6, #4
   1cf62:	f023 0503 	bic.w	r5, r3, #3	; 0x3
   1cf66:	f855 4b04 	ldr.w	r4, [r5], #4
   1cf6a:	607c      	str	r4, [r7, #4]
   1cf6c:	e7c1      	b.n	1cef2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x9e>
   1cf6e:	786a      	ldrb	r2, [r5, #1]
   1cf70:	7873      	ldrb	r3, [r6, #1]
   1cf72:	78a9      	ldrb	r1, [r5, #2]
   1cf74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1cf78:	78ea      	ldrb	r2, [r5, #3]
   1cf7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1cf7e:	ea43 6402 	orr.w	r4, r3, r2, lsl #24
   1cf82:	3504      	adds	r5, #4
   1cf84:	e7a9      	b.n	1ceda <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1cf86:	786a      	ldrb	r2, [r5, #1]
   1cf88:	7873      	ldrb	r3, [r6, #1]
   1cf8a:	78a9      	ldrb	r1, [r5, #2]
   1cf8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1cf90:	78ea      	ldrb	r2, [r5, #3]
   1cf92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1cf96:	ea43 6402 	orr.w	r4, r3, r2, lsl #24
   1cf9a:	3508      	adds	r5, #8
   1cf9c:	e79d      	b.n	1ceda <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1cf9e:	786b      	ldrb	r3, [r5, #1]
   1cfa0:	7872      	ldrb	r2, [r6, #1]
   1cfa2:	3502      	adds	r5, #2
   1cfa4:	ea42 2403 	orr.w	r4, r2, r3, lsl #8
   1cfa8:	e797      	b.n	1ceda <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1cfaa:	f002 fde7 	bl	1fb7c <abort>
   1cfae:	2400      	movs	r4, #0
   1cfb0:	1cb1      	adds	r1, r6, #2
   1cfb2:	46a4      	mov	ip, r4
   1cfb4:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1cfb8:	460d      	mov	r5, r1
   1cfba:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1cfbe:	fa03 f30c 	lsl.w	r3, r3, ip
   1cfc2:	3101      	adds	r1, #1
   1cfc4:	431c      	orrs	r4, r3
   1cfc6:	f012 0f80 	tst.w	r2, #128	; 0x80
   1cfca:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1cfce:	d1f1      	bne.n	1cfb4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x160>
   1cfd0:	e783      	b.n	1ceda <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1cfd2:	786a      	ldrb	r2, [r5, #1]
   1cfd4:	7873      	ldrb	r3, [r6, #1]
   1cfd6:	3502      	adds	r5, #2
   1cfd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1cfdc:	041b      	lsls	r3, r3, #16
   1cfde:	141c      	asrs	r4, r3, #16
   1cfe0:	e77b      	b.n	1ceda <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1cfe2:	46c0      	nop			(mov r8, r8)

0001cfe4 <__gxx_personality_v0>:
   1cfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cfe8:	f101 0358 	add.w	r3, r1, #88	; 0x58
   1cfec:	b093      	sub	sp, #76
   1cfee:	9311      	str	r3, [sp, #68]
   1cff0:	f000 0303 	and.w	r3, r0, #3	; 0x3
   1cff4:	2b01      	cmp	r3, #1
   1cff6:	468a      	mov	sl, r1
   1cff8:	4691      	mov	r9, r2
   1cffa:	f000 813f 	beq.w	1d27c <__gxx_personality_v0+0x298>
   1cffe:	2b02      	cmp	r3, #2
   1d000:	f000 8132 	beq.w	1d268 <__gxx_personality_v0+0x284>
   1d004:	2b00      	cmp	r3, #0
   1d006:	d156      	bne.n	1d0b6 <__gxx_personality_v0+0xd2>
   1d008:	f000 0508 	and.w	r5, r0, #8	; 0x8
   1d00c:	2301      	movs	r3, #1
   1d00e:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   1d012:	2100      	movs	r1, #0
   1d014:	ea45 0303 	orr.w	r3, r5, r3
   1d018:	220c      	movs	r2, #12
   1d01a:	9306      	str	r3, [sp, #24]
   1d01c:	4648      	mov	r0, r9
   1d01e:	460b      	mov	r3, r1
   1d020:	f8cd a03c 	str.w	sl, [sp, #60]
   1d024:	f8cd b000 	str.w	fp, [sp]
   1d028:	f7fd ff18 	bl	1ae5c <_Unwind_VRS_Set>
   1d02c:	9a06      	ldr	r2, [sp, #24]
   1d02e:	2a06      	cmp	r2, #6
   1d030:	f000 8144 	beq.w	1d2bc <__gxx_personality_v0+0x2d8>
   1d034:	4648      	mov	r0, r9
   1d036:	f7fe fd3d 	bl	1bab4 <_Unwind_GetLanguageSpecificData>
   1d03a:	9004      	str	r0, [sp, #16]
   1d03c:	2800      	cmp	r0, #0
   1d03e:	f000 8113 	beq.w	1d268 <__gxx_personality_v0+0x284>
   1d042:	aa09      	add	r2, sp, #36
   1d044:	9904      	ldr	r1, [sp, #16]
   1d046:	4648      	mov	r0, r9
   1d048:	f7ff ff04 	bl	1ce54 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1d04c:	4649      	mov	r1, r9
   1d04e:	4604      	mov	r4, r0
   1d050:	f89d 0038 	ldrb.w	r0, [sp, #56]
   1d054:	f7ff fed8 	bl	1ce08 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d058:	2100      	movs	r1, #0
   1d05a:	900b      	str	r0, [sp, #44]
   1d05c:	460b      	mov	r3, r1
   1d05e:	4648      	mov	r0, r9
   1d060:	220f      	movs	r2, #15
   1d062:	f8cd b000 	str.w	fp, [sp]
   1d066:	f7fd fed1 	bl	1ae0c <_Unwind_VRS_Get>
   1d06a:	9b0f      	ldr	r3, [sp, #60]
   1d06c:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   1d070:	3b01      	subs	r3, #1
   1d072:	9307      	str	r3, [sp, #28]
   1d074:	9b0d      	ldr	r3, [sp, #52]
   1d076:	429c      	cmp	r4, r3
   1d078:	f080 8230 	bcs.w	1d4dc <__gxx_personality_v0+0x4f8>
   1d07c:	f89d 5039 	ldrb.w	r5, [sp, #57]
   1d080:	2100      	movs	r1, #0
   1d082:	4628      	mov	r0, r5
   1d084:	f7ff fec0 	bl	1ce08 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d088:	2d50      	cmp	r5, #80
   1d08a:	f000 80cb 	beq.w	1d224 <__gxx_personality_v0+0x240>
   1d08e:	f005 030f 	and.w	r3, r5, #15	; 0xf
   1d092:	46a4      	mov	ip, r4
   1d094:	2b0c      	cmp	r3, #12
   1d096:	d80e      	bhi.n	1d0b6 <__gxx_personality_v0+0xd2>
   1d098:	e8df f013 	tbh	[pc, r3, lsl #1]
   1d09c:	017e000f 	.word	0x017e000f
   1d0a0:	000f018b 	.word	0x000f018b
   1d0a4:	000d0158 	.word	0x000d0158
   1d0a8:	000d000d 	.word	0x000d000d
   1d0ac:	0199000d 	.word	0x0199000d
   1d0b0:	000f0191 	.word	0x000f0191
   1d0b4:	0158      	.short	0x0158
   1d0b6:	f002 fd61 	bl	1fb7c <abort>
   1d0ba:	7862      	ldrb	r2, [r4, #1]
   1d0bc:	7823      	ldrb	r3, [r4, #0]
   1d0be:	78a1      	ldrb	r1, [r4, #2]
   1d0c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d0c4:	78e2      	ldrb	r2, [r4, #3]
   1d0c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d0ca:	ea43 6702 	orr.w	r7, r3, r2, lsl #24
   1d0ce:	3404      	adds	r4, #4
   1d0d0:	b14f      	cbz	r7, 1d0e6 <__gxx_personality_v0+0x102>
   1d0d2:	f005 0370 	and.w	r3, r5, #112	; 0x70
   1d0d6:	2b10      	cmp	r3, #16
   1d0d8:	bf08      	it	eq
   1d0da:	4660      	moveq	r0, ip
   1d0dc:	183f      	adds	r7, r7, r0
   1d0de:	f015 0f80 	tst.w	r5, #128	; 0x80
   1d0e2:	bf18      	it	ne
   1d0e4:	683f      	ldrne	r7, [r7, #0]
   1d0e6:	f89d 5039 	ldrb.w	r5, [sp, #57]
   1d0ea:	2100      	movs	r1, #0
   1d0ec:	4628      	mov	r0, r5
   1d0ee:	f7ff fe8b 	bl	1ce08 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d0f2:	2d50      	cmp	r5, #80
   1d0f4:	f000 80a4 	beq.w	1d240 <__gxx_personality_v0+0x25c>
   1d0f8:	f005 030f 	and.w	r3, r5, #15	; 0xf
   1d0fc:	46a4      	mov	ip, r4
   1d0fe:	2b0c      	cmp	r3, #12
   1d100:	d8d9      	bhi.n	1d0b6 <__gxx_personality_v0+0xd2>
   1d102:	a201      	add	r2, pc, #4	(adr r2, 1d108 <__gxx_personality_v0+0x124>)
   1d104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d108:	0001d13d 	.word	0x0001d13d
   1d10c:	0001d411 	.word	0x0001d411
   1d110:	0001d405 	.word	0x0001d405
   1d114:	0001d13d 	.word	0x0001d13d
   1d118:	0001d369 	.word	0x0001d369
   1d11c:	0001d0b7 	.word	0x0001d0b7
   1d120:	0001d0b7 	.word	0x0001d0b7
   1d124:	0001d0b7 	.word	0x0001d0b7
   1d128:	0001d0b7 	.word	0x0001d0b7
   1d12c:	0001d43b 	.word	0x0001d43b
   1d130:	0001d42b 	.word	0x0001d42b
   1d134:	0001d13d 	.word	0x0001d13d
   1d138:	0001d369 	.word	0x0001d369
   1d13c:	7862      	ldrb	r2, [r4, #1]
   1d13e:	7823      	ldrb	r3, [r4, #0]
   1d140:	78a1      	ldrb	r1, [r4, #2]
   1d142:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d146:	78e2      	ldrb	r2, [r4, #3]
   1d148:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d14c:	ea43 6602 	orr.w	r6, r3, r2, lsl #24
   1d150:	3404      	adds	r4, #4
   1d152:	b14e      	cbz	r6, 1d168 <__gxx_personality_v0+0x184>
   1d154:	f005 0370 	and.w	r3, r5, #112	; 0x70
   1d158:	2b10      	cmp	r3, #16
   1d15a:	bf08      	it	eq
   1d15c:	4660      	moveq	r0, ip
   1d15e:	1836      	adds	r6, r6, r0
   1d160:	f015 0f80 	tst.w	r5, #128	; 0x80
   1d164:	bf18      	it	ne
   1d166:	6836      	ldrne	r6, [r6, #0]
   1d168:	f89d 8039 	ldrb.w	r8, [sp, #57]
   1d16c:	2100      	movs	r1, #0
   1d16e:	4640      	mov	r0, r8
   1d170:	f7ff fe4a 	bl	1ce08 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d174:	f1b8 0f50 	cmp.w	r8, #80	; 0x50
   1d178:	d070      	beq.n	1d25c <__gxx_personality_v0+0x278>
   1d17a:	f008 030f 	and.w	r3, r8, #15	; 0xf
   1d17e:	46a4      	mov	ip, r4
   1d180:	2b0c      	cmp	r3, #12
   1d182:	d898      	bhi.n	1d0b6 <__gxx_personality_v0+0xd2>
   1d184:	a201      	add	r2, pc, #4	(adr r2, 1d18c <__gxx_personality_v0+0x1a8>)
   1d186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d18a:	46c0      	nop			(mov r8, r8)
   1d18c:	0001d1c1 	.word	0x0001d1c1
   1d190:	0001d47d 	.word	0x0001d47d
   1d194:	0001d471 	.word	0x0001d471
   1d198:	0001d1c1 	.word	0x0001d1c1
   1d19c:	0001d381 	.word	0x0001d381
   1d1a0:	0001d0b7 	.word	0x0001d0b7
   1d1a4:	0001d0b7 	.word	0x0001d0b7
   1d1a8:	0001d0b7 	.word	0x0001d0b7
   1d1ac:	0001d0b7 	.word	0x0001d0b7
   1d1b0:	0001d4a7 	.word	0x0001d4a7
   1d1b4:	0001d497 	.word	0x0001d497
   1d1b8:	0001d1c1 	.word	0x0001d1c1
   1d1bc:	0001d381 	.word	0x0001d381
   1d1c0:	7862      	ldrb	r2, [r4, #1]
   1d1c2:	7823      	ldrb	r3, [r4, #0]
   1d1c4:	78a1      	ldrb	r1, [r4, #2]
   1d1c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d1ca:	78e2      	ldrb	r2, [r4, #3]
   1d1cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d1d0:	ea43 6502 	orr.w	r5, r3, r2, lsl #24
   1d1d4:	3404      	adds	r4, #4
   1d1d6:	b14d      	cbz	r5, 1d1ec <__gxx_personality_v0+0x208>
   1d1d8:	f008 0370 	and.w	r3, r8, #112	; 0x70
   1d1dc:	2b10      	cmp	r3, #16
   1d1de:	bf08      	it	eq
   1d1e0:	4660      	moveq	r0, ip
   1d1e2:	182d      	adds	r5, r5, r0
   1d1e4:	f018 0f80 	tst.w	r8, #128	; 0x80
   1d1e8:	bf18      	it	ne
   1d1ea:	682d      	ldrne	r5, [r5, #0]
   1d1ec:	2000      	movs	r0, #0
   1d1ee:	4601      	mov	r1, r0
   1d1f0:	f814 2b01 	ldrb.w	r2, [r4], #1
   1d1f4:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d1f8:	408b      	lsls	r3, r1
   1d1fa:	3107      	adds	r1, #7
   1d1fc:	4318      	orrs	r0, r3
   1d1fe:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d202:	d1f5      	bne.n	1d1f0 <__gxx_personality_v0+0x20c>
   1d204:	9b09      	ldr	r3, [sp, #36]
   1d206:	9a07      	ldr	r2, [sp, #28]
   1d208:	443b      	add	r3, r7
   1d20a:	429a      	cmp	r2, r3
   1d20c:	bf3c      	itt	cc
   1d20e:	9c0d      	ldrcc	r4, [sp, #52]
   1d210:	4623      	movcc	r3, r4
   1d212:	f4ff af30 	bcc.w	1d076 <__gxx_personality_v0+0x92>
   1d216:	9a07      	ldr	r2, [sp, #28]
   1d218:	4433      	add	r3, r6
   1d21a:	429a      	cmp	r2, r3
   1d21c:	f0c0 8189 	bcc.w	1d532 <__gxx_personality_v0+0x54e>
   1d220:	9b0d      	ldr	r3, [sp, #52]
   1d222:	e728      	b.n	1d076 <__gxx_personality_v0+0x92>
   1d224:	f89d 5039 	ldrb.w	r5, [sp, #57]
   1d228:	1ce3      	adds	r3, r4, #3
   1d22a:	f023 0403 	bic.w	r4, r3, #3	; 0x3
   1d22e:	2100      	movs	r1, #0
   1d230:	4628      	mov	r0, r5
   1d232:	f854 7b04 	ldr.w	r7, [r4], #4
   1d236:	f7ff fde7 	bl	1ce08 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d23a:	2d50      	cmp	r5, #80
   1d23c:	f47f af5c 	bne.w	1d0f8 <__gxx_personality_v0+0x114>
   1d240:	f89d 8039 	ldrb.w	r8, [sp, #57]
   1d244:	1ce3      	adds	r3, r4, #3
   1d246:	f023 0403 	bic.w	r4, r3, #3	; 0x3
   1d24a:	2100      	movs	r1, #0
   1d24c:	4640      	mov	r0, r8
   1d24e:	f854 6b04 	ldr.w	r6, [r4], #4
   1d252:	f7ff fdd9 	bl	1ce08 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d256:	f1b8 0f50 	cmp.w	r8, #80	; 0x50
   1d25a:	d18e      	bne.n	1d17a <__gxx_personality_v0+0x196>
   1d25c:	1ce3      	adds	r3, r4, #3
   1d25e:	f023 0403 	bic.w	r4, r3, #3	; 0x3
   1d262:	f854 5b04 	ldr.w	r5, [r4], #4
   1d266:	e7c1      	b.n	1d1ec <__gxx_personality_v0+0x208>
   1d268:	4650      	mov	r0, sl
   1d26a:	4649      	mov	r1, r9
   1d26c:	f7fe fdb6 	bl	1bddc <__gnu_unwind_frame>
   1d270:	2800      	cmp	r0, #0
   1d272:	d077      	beq.n	1d364 <__gxx_personality_v0+0x380>
   1d274:	2009      	movs	r0, #9
   1d276:	b013      	add	sp, #76
   1d278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d27c:	f010 0508 	ands.w	r5, r0, #8	; 0x8
   1d280:	bf18      	it	ne
   1d282:	f10d 0b3c 	addne.w	fp, sp, #60	; 0x3c
   1d286:	d15f      	bne.n	1d348 <__gxx_personality_v0+0x364>
   1d288:	6a0c      	ldr	r4, [r1, #32]
   1d28a:	4610      	mov	r0, r2
   1d28c:	462b      	mov	r3, r5
   1d28e:	220d      	movs	r2, #13
   1d290:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   1d294:	4629      	mov	r1, r5
   1d296:	f8cd b000 	str.w	fp, [sp]
   1d29a:	f7fd fdb7 	bl	1ae0c <_Unwind_VRS_Get>
   1d29e:	9b0f      	ldr	r3, [sp, #60]
   1d2a0:	429c      	cmp	r4, r3
   1d2a2:	d151      	bne.n	1d348 <__gxx_personality_v0+0x364>
   1d2a4:	462b      	mov	r3, r5
   1d2a6:	4648      	mov	r0, r9
   1d2a8:	4629      	mov	r1, r5
   1d2aa:	220c      	movs	r2, #12
   1d2ac:	f8cd a03c 	str.w	sl, [sp, #60]
   1d2b0:	f8cd b000 	str.w	fp, [sp]
   1d2b4:	f7fd fdd2 	bl	1ae5c <_Unwind_VRS_Set>
   1d2b8:	2306      	movs	r3, #6
   1d2ba:	9306      	str	r3, [sp, #24]
   1d2bc:	f8da 8030 	ldr.w	r8, [sl, #48]
   1d2c0:	f8da 1028 	ldr.w	r1, [sl, #40]
   1d2c4:	f8da 002c 	ldr.w	r0, [sl, #44]
   1d2c8:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1d2cc:	f000 8129 	beq.w	1d522 <__gxx_personality_v0+0x53e>
   1d2d0:	460f      	mov	r7, r1
   1d2d2:	9004      	str	r0, [sp, #16]
   1d2d4:	2403      	movs	r4, #3
   1d2d6:	9b06      	ldr	r3, [sp, #24]
   1d2d8:	f013 0508 	ands.w	r5, r3, #8	; 0x8
   1d2dc:	f000 81df 	beq.w	1d69e <__gxx_personality_v0+0x6ba>
   1d2e0:	2c01      	cmp	r4, #1
   1d2e2:	f000 81da 	beq.w	1d69a <__gxx_personality_v0+0x6b6>
   1d2e6:	2f00      	cmp	r7, #0
   1d2e8:	f2c0 81d5 	blt.w	1d696 <__gxx_personality_v0+0x6b2>
   1d2ec:	2100      	movs	r1, #0
   1d2ee:	460a      	mov	r2, r1
   1d2f0:	460b      	mov	r3, r1
   1d2f2:	4648      	mov	r0, r9
   1d2f4:	f8cd a03c 	str.w	sl, [sp, #60]
   1d2f8:	f8cd b000 	str.w	fp, [sp]
   1d2fc:	f7fd fdae 	bl	1ae5c <_Unwind_VRS_Set>
   1d300:	2100      	movs	r1, #0
   1d302:	2201      	movs	r2, #1
   1d304:	460b      	mov	r3, r1
   1d306:	4648      	mov	r0, r9
   1d308:	970f      	str	r7, [sp, #60]
   1d30a:	f8cd b000 	str.w	fp, [sp]
   1d30e:	f7fd fda5 	bl	1ae5c <_Unwind_VRS_Set>
   1d312:	2100      	movs	r1, #0
   1d314:	220f      	movs	r2, #15
   1d316:	460b      	mov	r3, r1
   1d318:	4648      	mov	r0, r9
   1d31a:	f8cd b000 	str.w	fp, [sp]
   1d31e:	f7fd fd75 	bl	1ae0c <_Unwind_VRS_Get>
   1d322:	9b0f      	ldr	r3, [sp, #60]
   1d324:	2100      	movs	r1, #0
   1d326:	f003 0301 	and.w	r3, r3, #1	; 0x1
   1d32a:	ea48 0303 	orr.w	r3, r8, r3
   1d32e:	930f      	str	r3, [sp, #60]
   1d330:	220f      	movs	r2, #15
   1d332:	4648      	mov	r0, r9
   1d334:	460b      	mov	r3, r1
   1d336:	f8cd b000 	str.w	fp, [sp]
   1d33a:	f7fd fd8f 	bl	1ae5c <_Unwind_VRS_Set>
   1d33e:	2c02      	cmp	r4, #2
   1d340:	f000 80f2 	beq.w	1d528 <__gxx_personality_v0+0x544>
   1d344:	2007      	movs	r0, #7
   1d346:	e796      	b.n	1d276 <__gxx_personality_v0+0x292>
   1d348:	2302      	movs	r3, #2
   1d34a:	e662      	b.n	1d012 <__gxx_personality_v0+0x2e>
   1d34c:	7862      	ldrb	r2, [r4, #1]
   1d34e:	7823      	ldrb	r3, [r4, #0]
   1d350:	78a1      	ldrb	r1, [r4, #2]
   1d352:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d356:	78e2      	ldrb	r2, [r4, #3]
   1d358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d35c:	ea43 6702 	orr.w	r7, r3, r2, lsl #24
   1d360:	3408      	adds	r4, #8
   1d362:	e6b5      	b.n	1d0d0 <__gxx_personality_v0+0xec>
   1d364:	2008      	movs	r0, #8
   1d366:	e786      	b.n	1d276 <__gxx_personality_v0+0x292>
   1d368:	7862      	ldrb	r2, [r4, #1]
   1d36a:	7823      	ldrb	r3, [r4, #0]
   1d36c:	78a1      	ldrb	r1, [r4, #2]
   1d36e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d372:	78e2      	ldrb	r2, [r4, #3]
   1d374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d378:	ea43 6602 	orr.w	r6, r3, r2, lsl #24
   1d37c:	3408      	adds	r4, #8
   1d37e:	e6e8      	b.n	1d152 <__gxx_personality_v0+0x16e>
   1d380:	7862      	ldrb	r2, [r4, #1]
   1d382:	7823      	ldrb	r3, [r4, #0]
   1d384:	78a1      	ldrb	r1, [r4, #2]
   1d386:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d38a:	78e2      	ldrb	r2, [r4, #3]
   1d38c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d390:	ea43 6502 	orr.w	r5, r3, r2, lsl #24
   1d394:	3408      	adds	r4, #8
   1d396:	e71e      	b.n	1d1d6 <__gxx_personality_v0+0x1f2>
   1d398:	2700      	movs	r7, #0
   1d39a:	4639      	mov	r1, r7
   1d39c:	f814 2b01 	ldrb.w	r2, [r4], #1
   1d3a0:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d3a4:	408b      	lsls	r3, r1
   1d3a6:	3107      	adds	r1, #7
   1d3a8:	431f      	orrs	r7, r3
   1d3aa:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d3ae:	d1f5      	bne.n	1d39c <__gxx_personality_v0+0x3b8>
   1d3b0:	e68e      	b.n	1d0d0 <__gxx_personality_v0+0xec>
   1d3b2:	7822      	ldrb	r2, [r4, #0]
   1d3b4:	7863      	ldrb	r3, [r4, #1]
   1d3b6:	3402      	adds	r4, #2
   1d3b8:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   1d3bc:	e688      	b.n	1d0d0 <__gxx_personality_v0+0xec>
   1d3be:	7823      	ldrb	r3, [r4, #0]
   1d3c0:	7862      	ldrb	r2, [r4, #1]
   1d3c2:	3402      	adds	r4, #2
   1d3c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d3c8:	041b      	lsls	r3, r3, #16
   1d3ca:	141f      	asrs	r7, r3, #16
   1d3cc:	e680      	b.n	1d0d0 <__gxx_personality_v0+0xec>
   1d3ce:	2700      	movs	r7, #0
   1d3d0:	4639      	mov	r1, r7
   1d3d2:	f814 2b01 	ldrb.w	r2, [r4], #1
   1d3d6:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d3da:	408b      	lsls	r3, r1
   1d3dc:	3107      	adds	r1, #7
   1d3de:	431f      	orrs	r7, r3
   1d3e0:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d3e4:	d1f5      	bne.n	1d3d2 <__gxx_personality_v0+0x3ee>
   1d3e6:	291f      	cmp	r1, #31
   1d3e8:	f63f ae72 	bhi.w	1d0d0 <__gxx_personality_v0+0xec>
   1d3ec:	f012 0f40 	tst.w	r2, #64	; 0x40
   1d3f0:	f43f ae6e 	beq.w	1d0d0 <__gxx_personality_v0+0xec>
   1d3f4:	2201      	movs	r2, #1
   1d3f6:	fa12 f301 	lsls.w	r3, r2, r1
   1d3fa:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1d3fe:	ea43 0707 	orr.w	r7, r3, r7
   1d402:	e665      	b.n	1d0d0 <__gxx_personality_v0+0xec>
   1d404:	7822      	ldrb	r2, [r4, #0]
   1d406:	7863      	ldrb	r3, [r4, #1]
   1d408:	3402      	adds	r4, #2
   1d40a:	ea42 2603 	orr.w	r6, r2, r3, lsl #8
   1d40e:	e6a0      	b.n	1d152 <__gxx_personality_v0+0x16e>
   1d410:	2600      	movs	r6, #0
   1d412:	4631      	mov	r1, r6
   1d414:	f814 2b01 	ldrb.w	r2, [r4], #1
   1d418:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d41c:	408b      	lsls	r3, r1
   1d41e:	3107      	adds	r1, #7
   1d420:	431e      	orrs	r6, r3
   1d422:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d426:	d1f5      	bne.n	1d414 <__gxx_personality_v0+0x430>
   1d428:	e693      	b.n	1d152 <__gxx_personality_v0+0x16e>
   1d42a:	7823      	ldrb	r3, [r4, #0]
   1d42c:	7862      	ldrb	r2, [r4, #1]
   1d42e:	3402      	adds	r4, #2
   1d430:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d434:	041b      	lsls	r3, r3, #16
   1d436:	141e      	asrs	r6, r3, #16
   1d438:	e68b      	b.n	1d152 <__gxx_personality_v0+0x16e>
   1d43a:	2600      	movs	r6, #0
   1d43c:	4631      	mov	r1, r6
   1d43e:	f814 2b01 	ldrb.w	r2, [r4], #1
   1d442:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d446:	408b      	lsls	r3, r1
   1d448:	3107      	adds	r1, #7
   1d44a:	431e      	orrs	r6, r3
   1d44c:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d450:	d1f5      	bne.n	1d43e <__gxx_personality_v0+0x45a>
   1d452:	291f      	cmp	r1, #31
   1d454:	f63f ae7d 	bhi.w	1d152 <__gxx_personality_v0+0x16e>
   1d458:	f012 0f40 	tst.w	r2, #64	; 0x40
   1d45c:	f43f ae79 	beq.w	1d152 <__gxx_personality_v0+0x16e>
   1d460:	2201      	movs	r2, #1
   1d462:	fa12 f301 	lsls.w	r3, r2, r1
   1d466:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1d46a:	ea43 0606 	orr.w	r6, r3, r6
   1d46e:	e670      	b.n	1d152 <__gxx_personality_v0+0x16e>
   1d470:	7822      	ldrb	r2, [r4, #0]
   1d472:	7863      	ldrb	r3, [r4, #1]
   1d474:	3402      	adds	r4, #2
   1d476:	ea42 2503 	orr.w	r5, r2, r3, lsl #8
   1d47a:	e6ac      	b.n	1d1d6 <__gxx_personality_v0+0x1f2>
   1d47c:	2500      	movs	r5, #0
   1d47e:	4629      	mov	r1, r5
   1d480:	f814 2b01 	ldrb.w	r2, [r4], #1
   1d484:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d488:	408b      	lsls	r3, r1
   1d48a:	3107      	adds	r1, #7
   1d48c:	431d      	orrs	r5, r3
   1d48e:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d492:	d1f5      	bne.n	1d480 <__gxx_personality_v0+0x49c>
   1d494:	e69f      	b.n	1d1d6 <__gxx_personality_v0+0x1f2>
   1d496:	7823      	ldrb	r3, [r4, #0]
   1d498:	7862      	ldrb	r2, [r4, #1]
   1d49a:	3402      	adds	r4, #2
   1d49c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d4a0:	041b      	lsls	r3, r3, #16
   1d4a2:	141d      	asrs	r5, r3, #16
   1d4a4:	e697      	b.n	1d1d6 <__gxx_personality_v0+0x1f2>
   1d4a6:	2500      	movs	r5, #0
   1d4a8:	4629      	mov	r1, r5
   1d4aa:	f814 2b01 	ldrb.w	r2, [r4], #1
   1d4ae:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d4b2:	408b      	lsls	r3, r1
   1d4b4:	3107      	adds	r1, #7
   1d4b6:	431d      	orrs	r5, r3
   1d4b8:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d4bc:	d1f5      	bne.n	1d4aa <__gxx_personality_v0+0x4c6>
   1d4be:	291f      	cmp	r1, #31
   1d4c0:	f63f ae89 	bhi.w	1d1d6 <__gxx_personality_v0+0x1f2>
   1d4c4:	f012 0f40 	tst.w	r2, #64	; 0x40
   1d4c8:	f43f ae85 	beq.w	1d1d6 <__gxx_personality_v0+0x1f2>
   1d4cc:	2201      	movs	r2, #1
   1d4ce:	fa12 f301 	lsls.w	r3, r2, r1
   1d4d2:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1d4d6:	ea43 0505 	orr.w	r5, r3, r5
   1d4da:	e67c      	b.n	1d1d6 <__gxx_personality_v0+0x1f2>
   1d4dc:	f04f 0800 	mov.w	r8, #0	; 0x0
   1d4e0:	2401      	movs	r4, #1
   1d4e2:	4647      	mov	r7, r8
   1d4e4:	9b06      	ldr	r3, [sp, #24]
   1d4e6:	f013 0f01 	tst.w	r3, #1	; 0x1
   1d4ea:	f43f aef4 	beq.w	1d2d6 <__gxx_personality_v0+0x2f2>
   1d4ee:	2c02      	cmp	r4, #2
   1d4f0:	f43f aeba 	beq.w	1d268 <__gxx_personality_v0+0x284>
   1d4f4:	2100      	movs	r1, #0
   1d4f6:	220d      	movs	r2, #13
   1d4f8:	460b      	mov	r3, r1
   1d4fa:	4648      	mov	r0, r9
   1d4fc:	9c11      	ldr	r4, [sp, #68]
   1d4fe:	f8cd b000 	str.w	fp, [sp]
   1d502:	f7fd fc83 	bl	1ae0c <_Unwind_VRS_Get>
   1d506:	9b0f      	ldr	r3, [sp, #60]
   1d508:	9a04      	ldr	r2, [sp, #16]
   1d50a:	f8ca 3020 	str.w	r3, [sl, #32]
   1d50e:	f8ca 4024 	str.w	r4, [sl, #36]
   1d512:	f8ca 7028 	str.w	r7, [sl, #40]
   1d516:	f8ca 202c 	str.w	r2, [sl, #44]
   1d51a:	f8ca 8030 	str.w	r8, [sl, #48]
   1d51e:	2006      	movs	r0, #6
   1d520:	e6a9      	b.n	1d276 <__gxx_personality_v0+0x292>
   1d522:	4650      	mov	r0, sl
   1d524:	f000 f9c4 	bl	1d8b0 <__cxa_call_terminate>
   1d528:	4650      	mov	r0, sl
   1d52a:	f7ff fba1 	bl	1cc70 <__cxa_begin_cleanup>
   1d52e:	2007      	movs	r0, #7
   1d530:	e6a1      	b.n	1d276 <__gxx_personality_v0+0x292>
   1d532:	2d00      	cmp	r5, #0
   1d534:	f040 80a0 	bne.w	1d678 <__gxx_personality_v0+0x694>
   1d538:	46a8      	mov	r8, r5
   1d53a:	2800      	cmp	r0, #0
   1d53c:	f000 809a 	beq.w	1d674 <__gxx_personality_v0+0x690>
   1d540:	9b0d      	ldr	r3, [sp, #52]
   1d542:	1e42      	subs	r2, r0, #1
   1d544:	441a      	add	r2, r3
   1d546:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1d54a:	f43f ae8d 	beq.w	1d268 <__gxx_personality_v0+0x284>
   1d54e:	2a00      	cmp	r2, #0
   1d550:	f000 809e 	beq.w	1d690 <__gxx_personality_v0+0x6ac>
   1d554:	9b06      	ldr	r3, [sp, #24]
   1d556:	f013 0308 	ands.w	r3, r3, #8	; 0x8
   1d55a:	9303      	str	r3, [sp, #12]
   1d55c:	d001      	beq.n	1d562 <__gxx_personality_v0+0x57e>
   1d55e:	2300      	movs	r3, #0
   1d560:	9311      	str	r3, [sp, #68]
   1d562:	2300      	movs	r3, #0
   1d564:	9305      	str	r3, [sp, #20]
   1d566:	2000      	movs	r0, #0
   1d568:	4615      	mov	r5, r2
   1d56a:	4601      	mov	r1, r0
   1d56c:	f815 2b01 	ldrb.w	r2, [r5], #1
   1d570:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d574:	408b      	lsls	r3, r1
   1d576:	3107      	adds	r1, #7
   1d578:	4318      	orrs	r0, r3
   1d57a:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d57e:	d1f5      	bne.n	1d56c <__gxx_personality_v0+0x588>
   1d580:	291f      	cmp	r1, #31
   1d582:	d809      	bhi.n	1d598 <__gxx_personality_v0+0x5b4>
   1d584:	f012 0f40 	tst.w	r2, #64	; 0x40
   1d588:	d006      	beq.n	1d598 <__gxx_personality_v0+0x5b4>
   1d58a:	2201      	movs	r2, #1
   1d58c:	fa12 f301 	lsls.w	r3, r2, r1
   1d590:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1d594:	ea43 0000 	orr.w	r0, r3, r0
   1d598:	2400      	movs	r4, #0
   1d59a:	4607      	mov	r7, r0
   1d59c:	46a4      	mov	ip, r4
   1d59e:	4622      	mov	r2, r4
   1d5a0:	5ca9      	ldrb	r1, [r5, r2]
   1d5a2:	3201      	adds	r2, #1
   1d5a4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   1d5a8:	fa03 f30c 	lsl.w	r3, r3, ip
   1d5ac:	431c      	orrs	r4, r3
   1d5ae:	f011 0f80 	tst.w	r1, #128	; 0x80
   1d5b2:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1d5b6:	d1f3      	bne.n	1d5a0 <__gxx_personality_v0+0x5bc>
   1d5b8:	f1bc 0f1f 	cmp.w	ip, #31	; 0x1f
   1d5bc:	d809      	bhi.n	1d5d2 <__gxx_personality_v0+0x5ee>
   1d5be:	f011 0f40 	tst.w	r1, #64	; 0x40
   1d5c2:	d006      	beq.n	1d5d2 <__gxx_personality_v0+0x5ee>
   1d5c4:	2201      	movs	r2, #1
   1d5c6:	fa02 f30c 	lsl.w	r3, r2, ip
   1d5ca:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1d5ce:	ea43 0404 	orr.w	r4, r3, r4
   1d5d2:	2800      	cmp	r0, #0
   1d5d4:	d106      	bne.n	1d5e4 <__gxx_personality_v0+0x600>
   1d5d6:	2301      	movs	r3, #1
   1d5d8:	9305      	str	r3, [sp, #20]
   1d5da:	2c00      	cmp	r4, #0
   1d5dc:	d054      	beq.n	1d688 <__gxx_personality_v0+0x6a4>
   1d5de:	eb05 0204 	add.w	r2, r5, r4
   1d5e2:	e7c0      	b.n	1d566 <__gxx_personality_v0+0x582>
   1d5e4:	dd15      	ble.n	1d612 <__gxx_personality_v0+0x62e>
   1d5e6:	0083      	lsls	r3, r0, #2
   1d5e8:	9a0c      	ldr	r2, [sp, #48]
   1d5ea:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1d5ee:	58d0      	ldr	r0, [r2, r3]
   1d5f0:	eb02 0103 	add.w	r1, r2, r3
   1d5f4:	b158      	cbz	r0, 1d60e <__gxx_personality_v0+0x62a>
   1d5f6:	1841      	adds	r1, r0, r1
   1d5f8:	d009      	beq.n	1d60e <__gxx_personality_v0+0x62a>
   1d5fa:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   1d5fe:	d0ec      	beq.n	1d5da <__gxx_personality_v0+0x5f6>
   1d600:	4650      	mov	r0, sl
   1d602:	2200      	movs	r2, #0
   1d604:	ab11      	add	r3, sp, #68
   1d606:	f7ff fb69 	bl	1ccdc <__cxa_type_match>
   1d60a:	2800      	cmp	r0, #0
   1d60c:	d0e5      	beq.n	1d5da <__gxx_personality_v0+0x5f6>
   1d60e:	2403      	movs	r4, #3
   1d610:	e768      	b.n	1d4e4 <__gxx_personality_v0+0x500>
   1d612:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   1d616:	d021      	beq.n	1d65c <__gxx_personality_v0+0x678>
   1d618:	9a03      	ldr	r2, [sp, #12]
   1d61a:	b9fa      	cbnz	r2, 1d65c <__gxx_personality_v0+0x678>
   1d61c:	9b11      	ldr	r3, [sp, #68]
   1d61e:	9a0c      	ldr	r2, [sp, #48]
   1d620:	ea6f 0000 	mvn.w	r0, r0
   1d624:	9310      	str	r3, [sp, #64]
   1d626:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   1d62a:	0081      	lsls	r1, r0, #2
   1d62c:	4411      	add	r1, r2
   1d62e:	b33b      	cbz	r3, 1d680 <__gxx_personality_v0+0x69c>
   1d630:	460e      	mov	r6, r1
   1d632:	e002      	b.n	1d63a <__gxx_personality_v0+0x656>
   1d634:	f856 3f04 	ldr.w	r3, [r6, #4]!
   1d638:	b313      	cbz	r3, 1d680 <__gxx_personality_v0+0x69c>
   1d63a:	6831      	ldr	r1, [r6, #0]
   1d63c:	b101      	cbz	r1, 1d640 <__gxx_personality_v0+0x65c>
   1d63e:	4431      	add	r1, r6
   1d640:	4650      	mov	r0, sl
   1d642:	2200      	movs	r2, #0
   1d644:	ab10      	add	r3, sp, #64
   1d646:	f7ff fb49 	bl	1ccdc <__cxa_type_match>
   1d64a:	2800      	cmp	r0, #0
   1d64c:	d0f2      	beq.n	1d634 <__gxx_personality_v0+0x650>
   1d64e:	2101      	movs	r1, #1
   1d650:	f081 0001 	eor.w	r0, r1, #1	; 0x1
   1d654:	2800      	cmp	r0, #0
   1d656:	d0c0      	beq.n	1d5da <__gxx_personality_v0+0x5f6>
   1d658:	2403      	movs	r4, #3
   1d65a:	e743      	b.n	1d4e4 <__gxx_personality_v0+0x500>
   1d65c:	9a0c      	ldr	r2, [sp, #48]
   1d65e:	ea6f 0300 	mvn.w	r3, r0
   1d662:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1d666:	f1d1 0001 	rsbs	r0, r1, #1	; 0x1
   1d66a:	bf38      	it	cc
   1d66c:	2000      	movcc	r0, #0
   1d66e:	2800      	cmp	r0, #0
   1d670:	d0b3      	beq.n	1d5da <__gxx_personality_v0+0x5f6>
   1d672:	e7f1      	b.n	1d658 <__gxx_personality_v0+0x674>
   1d674:	4602      	mov	r2, r0
   1d676:	e766      	b.n	1d546 <__gxx_personality_v0+0x562>
   1d678:	9b0a      	ldr	r3, [sp, #40]
   1d67a:	eb05 0803 	add.w	r8, r5, r3
   1d67e:	e75c      	b.n	1d53a <__gxx_personality_v0+0x556>
   1d680:	2100      	movs	r1, #0
   1d682:	f081 0001 	eor.w	r0, r1, #1	; 0x1
   1d686:	e7e5      	b.n	1d654 <__gxx_personality_v0+0x670>
   1d688:	9a05      	ldr	r2, [sp, #20]
   1d68a:	2a00      	cmp	r2, #0
   1d68c:	f43f adec 	beq.w	1d268 <__gxx_personality_v0+0x284>
   1d690:	2402      	movs	r4, #2
   1d692:	2700      	movs	r7, #0
   1d694:	e726      	b.n	1d4e4 <__gxx_personality_v0+0x500>
   1d696:	f7ff fae3 	bl	1cc60 <_ZSt10unexpectedv>
   1d69a:	f7ff fad3 	bl	1cc44 <_ZSt9terminatev>
   1d69e:	2c01      	cmp	r4, #1
   1d6a0:	f43f af3f 	beq.w	1d522 <__gxx_personality_v0+0x53e>
   1d6a4:	2f00      	cmp	r7, #0
   1d6a6:	f6bf ae21 	bge.w	1d2ec <__gxx_personality_v0+0x308>
   1d6aa:	9904      	ldr	r1, [sp, #16]
   1d6ac:	aa09      	add	r2, sp, #36
   1d6ae:	4648      	mov	r0, r9
   1d6b0:	f7ff fbd0 	bl	1ce54 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1d6b4:	ea6f 0107 	mvn.w	r1, r7
   1d6b8:	9b0c      	ldr	r3, [sp, #48]
   1d6ba:	008a      	lsls	r2, r1, #2
   1d6bc:	eb03 0002 	add.w	r0, r3, r2
   1d6c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1d6c4:	b183      	cbz	r3, 1d6e8 <__gxx_personality_v0+0x704>
   1d6c6:	462a      	mov	r2, r5
   1d6c8:	3201      	adds	r2, #1
   1d6ca:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   1d6ce:	2b00      	cmp	r3, #0
   1d6d0:	d1fa      	bne.n	1d6c8 <__gxx_personality_v0+0x6e4>
   1d6d2:	f8ca 2028 	str.w	r2, [sl, #40]
   1d6d6:	2300      	movs	r3, #0
   1d6d8:	2204      	movs	r2, #4
   1d6da:	f8ca 302c 	str.w	r3, [sl, #44]
   1d6de:	f8ca 2030 	str.w	r2, [sl, #48]
   1d6e2:	f8ca 0034 	str.w	r0, [sl, #52]
   1d6e6:	e601      	b.n	1d2ec <__gxx_personality_v0+0x308>
   1d6e8:	461a      	mov	r2, r3
   1d6ea:	e7f2      	b.n	1d6d2 <__gxx_personality_v0+0x6ee>
   1d6ec:	f000 f9de 	bl	1daac <__cxa_begin_catch>
   1d6f0:	f7ff faa8 	bl	1cc44 <_ZSt9terminatev>
   1d6f4:	4604      	mov	r4, r0
   1d6f6:	f000 f991 	bl	1da1c <__cxa_end_catch>
   1d6fa:	4620      	mov	r0, r4
   1d6fc:	f7f9 fd84 	bl	17208 <__cxa_end_cleanup>

0001d700 <__cxa_bad_typeid>:
   1d700:	b500      	push	{lr}
   1d702:	2004      	movs	r0, #4
   1d704:	b081      	sub	sp, #4
   1d706:	f000 fccb 	bl	1e0a0 <__cxa_allocate_exception>
   1d70a:	4b03      	ldr	r3, [pc, #12]	(1d718 <__cxa_bad_typeid+0x18>)
   1d70c:	4903      	ldr	r1, [pc, #12]	(1d71c <__cxa_bad_typeid+0x1c>)
   1d70e:	6003      	str	r3, [r0, #0]
   1d710:	4a03      	ldr	r2, [pc, #12]	(1d720 <__cxa_bad_typeid+0x20>)
   1d712:	f000 fc53 	bl	1dfbc <__cxa_throw>
   1d716:	46c0      	nop			(mov r8, r8)
   1d718:	00022250 	.word	0x00022250
   1d71c:	00022270 	.word	0x00022270
   1d720:	0001d751 	.word	0x0001d751

0001d724 <__cxa_bad_cast>:
   1d724:	b500      	push	{lr}
   1d726:	2004      	movs	r0, #4
   1d728:	b081      	sub	sp, #4
   1d72a:	f000 fcb9 	bl	1e0a0 <__cxa_allocate_exception>
   1d72e:	4b03      	ldr	r3, [pc, #12]	(1d73c <__cxa_bad_cast+0x18>)
   1d730:	4903      	ldr	r1, [pc, #12]	(1d740 <__cxa_bad_cast+0x1c>)
   1d732:	6003      	str	r3, [r0, #0]
   1d734:	4a03      	ldr	r2, [pc, #12]	(1d744 <__cxa_bad_cast+0x20>)
   1d736:	f000 fc41 	bl	1dfbc <__cxa_throw>
   1d73a:	46c0      	nop			(mov r8, r8)
   1d73c:	00022328 	.word	0x00022328
   1d740:	00022344 	.word	0x00022344
   1d744:	0001db4d 	.word	0x0001db4d

0001d748 <_ZNKSt10bad_typeid4whatEv>:
   1d748:	4800      	ldr	r0, [pc, #0]	(1d74c <_ZNKSt10bad_typeid4whatEv+0x4>)
   1d74a:	4770      	bx	lr
   1d74c:	00022234 	.word	0x00022234

0001d750 <_ZNSt10bad_typeidD1Ev>:
   1d750:	4b03      	ldr	r3, [pc, #12]	(1d760 <_ZNSt10bad_typeidD1Ev+0x10>)
   1d752:	b510      	push	{r4, lr}
   1d754:	6003      	str	r3, [r0, #0]
   1d756:	4604      	mov	r4, r0
   1d758:	f000 fad8 	bl	1dd0c <_ZNSt9exceptionD2Ev>
   1d75c:	4620      	mov	r0, r4
   1d75e:	bd10      	pop	{r4, pc}
   1d760:	00022250 	.word	0x00022250

0001d764 <_ZNSt10bad_typeidD2Ev>:
   1d764:	4b03      	ldr	r3, [pc, #12]	(1d774 <_ZNSt10bad_typeidD2Ev+0x10>)
   1d766:	b510      	push	{r4, lr}
   1d768:	6003      	str	r3, [r0, #0]
   1d76a:	4604      	mov	r4, r0
   1d76c:	f000 face 	bl	1dd0c <_ZNSt9exceptionD2Ev>
   1d770:	4620      	mov	r0, r4
   1d772:	bd10      	pop	{r4, pc}
   1d774:	00022250 	.word	0x00022250

0001d778 <_ZNSt10bad_typeidD0Ev>:
   1d778:	4b05      	ldr	r3, [pc, #20]	(1d790 <_ZNSt10bad_typeidD0Ev+0x18>)
   1d77a:	b510      	push	{r4, lr}
   1d77c:	6003      	str	r3, [r0, #0]
   1d77e:	4604      	mov	r4, r0
   1d780:	f000 fac4 	bl	1dd0c <_ZNSt9exceptionD2Ev>
   1d784:	4620      	mov	r0, r4
   1d786:	f7f0 fdf9 	bl	e37c <_ZdlPv>
   1d78a:	4620      	mov	r0, r4
   1d78c:	bd10      	pop	{r4, pc}
   1d78e:	46c0      	nop			(mov r8, r8)
   1d790:	00022250 	.word	0x00022250

0001d794 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   1d794:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d796:	4b3f      	ldr	r3, [pc, #252]	(1d894 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   1d798:	b083      	sub	sp, #12
   1d79a:	781c      	ldrb	r4, [r3, #0]
   1d79c:	2c00      	cmp	r4, #0
   1d79e:	d13f      	bne.n	1d820 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   1d7a0:	2501      	movs	r5, #1
   1d7a2:	701d      	strb	r5, [r3, #0]
   1d7a4:	f000 fbc8 	bl	1df38 <__cxa_current_exception_type>
   1d7a8:	2800      	cmp	r0, #0
   1d7aa:	d043      	beq.n	1d834 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa0>
   1d7ac:	6846      	ldr	r6, [r0, #4]
   1d7ae:	ab02      	add	r3, sp, #8
   1d7b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d7b4:	f843 2d04 	str.w	r2, [r3, #-4]!
   1d7b8:	4621      	mov	r1, r4
   1d7ba:	4622      	mov	r2, r4
   1d7bc:	4630      	mov	r0, r6
   1d7be:	f7fc facb 	bl	19d58 <__cxa_demangle>
   1d7c2:	4c35      	ldr	r4, [pc, #212]	(1d898 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   1d7c4:	4607      	mov	r7, r0
   1d7c6:	6822      	ldr	r2, [r4, #0]
   1d7c8:	4834      	ldr	r0, [pc, #208]	(1d89c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   1d7ca:	6893      	ldr	r3, [r2, #8]
   1d7cc:	4629      	mov	r1, r5
   1d7ce:	2230      	movs	r2, #48
   1d7d0:	f002 fc08 	bl	1ffe4 <fwrite>
   1d7d4:	9b01      	ldr	r3, [sp, #4]
   1d7d6:	b17b      	cbz	r3, 1d7f8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x64>
   1d7d8:	6823      	ldr	r3, [r4, #0]
   1d7da:	4630      	mov	r0, r6
   1d7dc:	6899      	ldr	r1, [r3, #8]
   1d7de:	f002 fa47 	bl	1fc70 <fputs>
   1d7e2:	6822      	ldr	r2, [r4, #0]
   1d7e4:	482e      	ldr	r0, [pc, #184]	(1d8a0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   1d7e6:	6893      	ldr	r3, [r2, #8]
   1d7e8:	2101      	movs	r1, #1
   1d7ea:	2202      	movs	r2, #2
   1d7ec:	f002 fbfa 	bl	1ffe4 <fwrite>
   1d7f0:	9b01      	ldr	r3, [sp, #4]
   1d7f2:	b183      	cbz	r3, 1d816 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x82>
   1d7f4:	f000 fbaa 	bl	1df4c <__cxa_rethrow>
   1d7f8:	6823      	ldr	r3, [r4, #0]
   1d7fa:	4638      	mov	r0, r7
   1d7fc:	6899      	ldr	r1, [r3, #8]
   1d7fe:	f002 fa37 	bl	1fc70 <fputs>
   1d802:	6822      	ldr	r2, [r4, #0]
   1d804:	4826      	ldr	r0, [pc, #152]	(1d8a0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   1d806:	6893      	ldr	r3, [r2, #8]
   1d808:	2101      	movs	r1, #1
   1d80a:	2202      	movs	r2, #2
   1d80c:	f002 fbea 	bl	1ffe4 <fwrite>
   1d810:	9b01      	ldr	r3, [sp, #4]
   1d812:	2b00      	cmp	r3, #0
   1d814:	d1ee      	bne.n	1d7f4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x60>
   1d816:	4638      	mov	r0, r7
   1d818:	f002 fbf6 	bl	20008 <free>
   1d81c:	f000 fb96 	bl	1df4c <__cxa_rethrow>
   1d820:	4b1d      	ldr	r3, [pc, #116]	(1d898 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   1d822:	2101      	movs	r1, #1
   1d824:	681a      	ldr	r2, [r3, #0]
   1d826:	481f      	ldr	r0, [pc, #124]	(1d8a4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x110>)
   1d828:	6893      	ldr	r3, [r2, #8]
   1d82a:	221d      	movs	r2, #29
   1d82c:	f002 fbda 	bl	1ffe4 <fwrite>
   1d830:	f002 f9a4 	bl	1fb7c <abort>
   1d834:	4b18      	ldr	r3, [pc, #96]	(1d898 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   1d836:	4629      	mov	r1, r5
   1d838:	681a      	ldr	r2, [r3, #0]
   1d83a:	481b      	ldr	r0, [pc, #108]	(1d8a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x114>)
   1d83c:	6893      	ldr	r3, [r2, #8]
   1d83e:	222d      	movs	r2, #45
   1d840:	f002 fbd0 	bl	1ffe4 <fwrite>
   1d844:	f002 f99a 	bl	1fb7c <abort>
   1d848:	2902      	cmp	r1, #2
   1d84a:	d005      	beq.n	1d858 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xc4>
   1d84c:	f000 f92e 	bl	1daac <__cxa_begin_catch>
   1d850:	f000 f8e4 	bl	1da1c <__cxa_end_catch>
   1d854:	f002 f992 	bl	1fb7c <abort>
   1d858:	f000 f928 	bl	1daac <__cxa_begin_catch>
   1d85c:	6803      	ldr	r3, [r0, #0]
   1d85e:	689a      	ldr	r2, [r3, #8]
   1d860:	4790      	blx	r2
   1d862:	6822      	ldr	r2, [r4, #0]
   1d864:	4605      	mov	r5, r0
   1d866:	6893      	ldr	r3, [r2, #8]
   1d868:	4810      	ldr	r0, [pc, #64]	(1d8ac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x118>)
   1d86a:	2101      	movs	r1, #1
   1d86c:	220b      	movs	r2, #11
   1d86e:	f002 fbb9 	bl	1ffe4 <fwrite>
   1d872:	6823      	ldr	r3, [r4, #0]
   1d874:	4628      	mov	r0, r5
   1d876:	6899      	ldr	r1, [r3, #8]
   1d878:	f002 f9fa 	bl	1fc70 <fputs>
   1d87c:	6823      	ldr	r3, [r4, #0]
   1d87e:	200a      	movs	r0, #10
   1d880:	6899      	ldr	r1, [r3, #8]
   1d882:	f002 f9ab 	bl	1fbdc <fputc>
   1d886:	e7e3      	b.n	1d850 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xbc>
   1d888:	4605      	mov	r5, r0
   1d88a:	f000 f8c7 	bl	1da1c <__cxa_end_catch>
   1d88e:	4628      	mov	r0, r5
   1d890:	f7f9 fcba 	bl	17208 <__cxa_end_cleanup>
   1d894:	2000067c 	.word	0x2000067c
   1d898:	20000044 	.word	0x20000044
   1d89c:	0002229c 	.word	0x0002229c
   1d8a0:	000222d0 	.word	0x000222d0
   1d8a4:	0002227c 	.word	0x0002227c
   1d8a8:	000222e0 	.word	0x000222e0
   1d8ac:	000222d4 	.word	0x000222d4

0001d8b0 <__cxa_call_terminate>:
   1d8b0:	b510      	push	{r4, lr}
   1d8b2:	4604      	mov	r4, r0
   1d8b4:	b120      	cbz	r0, 1d8c0 <__cxa_call_terminate+0x10>
   1d8b6:	f000 f8f9 	bl	1daac <__cxa_begin_catch>
   1d8ba:	7823      	ldrb	r3, [r4, #0]
   1d8bc:	2b47      	cmp	r3, #71
   1d8be:	d001      	beq.n	1d8c4 <__cxa_call_terminate+0x14>
   1d8c0:	f7ff f9c0 	bl	1cc44 <_ZSt9terminatev>
   1d8c4:	7863      	ldrb	r3, [r4, #1]
   1d8c6:	2b4e      	cmp	r3, #78
   1d8c8:	d1fa      	bne.n	1d8c0 <__cxa_call_terminate+0x10>
   1d8ca:	78a3      	ldrb	r3, [r4, #2]
   1d8cc:	2b55      	cmp	r3, #85
   1d8ce:	d1f7      	bne.n	1d8c0 <__cxa_call_terminate+0x10>
   1d8d0:	78e3      	ldrb	r3, [r4, #3]
   1d8d2:	2b43      	cmp	r3, #67
   1d8d4:	d1f4      	bne.n	1d8c0 <__cxa_call_terminate+0x10>
   1d8d6:	7923      	ldrb	r3, [r4, #4]
   1d8d8:	2b43      	cmp	r3, #67
   1d8da:	d1f1      	bne.n	1d8c0 <__cxa_call_terminate+0x10>
   1d8dc:	7963      	ldrb	r3, [r4, #5]
   1d8de:	2b2b      	cmp	r3, #43
   1d8e0:	d1ee      	bne.n	1d8c0 <__cxa_call_terminate+0x10>
   1d8e2:	79a3      	ldrb	r3, [r4, #6]
   1d8e4:	2b2b      	cmp	r3, #43
   1d8e6:	d1eb      	bne.n	1d8c0 <__cxa_call_terminate+0x10>
   1d8e8:	79e3      	ldrb	r3, [r4, #7]
   1d8ea:	2b00      	cmp	r3, #0
   1d8ec:	d1e8      	bne.n	1d8c0 <__cxa_call_terminate+0x10>
   1d8ee:	f854 0c14 	ldr.w	r0, [r4, #-20]
   1d8f2:	f7ff f999 	bl	1cc28 <_ZN10__cxxabiv111__terminateEPFvvE>
   1d8f6:	46c0      	nop			(mov r8, r8)

0001d8f8 <__cxa_call_unexpected>:
   1d8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8fc:	7803      	ldrb	r3, [r0, #0]
   1d8fe:	b085      	sub	sp, #20
   1d900:	2b47      	cmp	r3, #71
   1d902:	d00a      	beq.n	1d91a <__cxa_call_unexpected+0x22>
   1d904:	2400      	movs	r4, #0
   1d906:	4627      	mov	r7, r4
   1d908:	46a2      	mov	sl, r4
   1d90a:	46a0      	mov	r8, r4
   1d90c:	2501      	movs	r5, #1
   1d90e:	4626      	mov	r6, r4
   1d910:	f000 f8cc 	bl	1daac <__cxa_begin_catch>
   1d914:	b30d      	cbz	r5, 1d95a <__cxa_call_unexpected+0x62>
   1d916:	f7ff f9a3 	bl	1cc60 <_ZSt10unexpectedv>
   1d91a:	7843      	ldrb	r3, [r0, #1]
   1d91c:	2b4e      	cmp	r3, #78
   1d91e:	d1f1      	bne.n	1d904 <__cxa_call_unexpected+0xc>
   1d920:	7883      	ldrb	r3, [r0, #2]
   1d922:	2b55      	cmp	r3, #85
   1d924:	d1ee      	bne.n	1d904 <__cxa_call_unexpected+0xc>
   1d926:	78c3      	ldrb	r3, [r0, #3]
   1d928:	2b43      	cmp	r3, #67
   1d92a:	d1eb      	bne.n	1d904 <__cxa_call_unexpected+0xc>
   1d92c:	7903      	ldrb	r3, [r0, #4]
   1d92e:	2b43      	cmp	r3, #67
   1d930:	d1e8      	bne.n	1d904 <__cxa_call_unexpected+0xc>
   1d932:	7943      	ldrb	r3, [r0, #5]
   1d934:	2b2b      	cmp	r3, #43
   1d936:	d1e5      	bne.n	1d904 <__cxa_call_unexpected+0xc>
   1d938:	7983      	ldrb	r3, [r0, #6]
   1d93a:	2b2b      	cmp	r3, #43
   1d93c:	d1e2      	bne.n	1d904 <__cxa_call_unexpected+0xc>
   1d93e:	79c2      	ldrb	r2, [r0, #7]
   1d940:	2a00      	cmp	r2, #0
   1d942:	d1df      	bne.n	1d904 <__cxa_call_unexpected+0xc>
   1d944:	f1a0 0320 	sub.w	r3, r0, #32	; 0x20
   1d948:	689e      	ldr	r6, [r3, #8]
   1d94a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   1d94e:	f8d0 8028 	ldr.w	r8, [r0, #40]
   1d952:	6b04      	ldr	r4, [r0, #48]
   1d954:	6b47      	ldr	r7, [r0, #52]
   1d956:	4615      	mov	r5, r2
   1d958:	e7da      	b.n	1d910 <__cxa_call_unexpected+0x18>
   1d95a:	4630      	mov	r0, r6
   1d95c:	f7ff f97a 	bl	1cc54 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1d960:	f000 f8a4 	bl	1daac <__cxa_begin_catch>
   1d964:	2d00      	cmp	r5, #0
   1d966:	d135      	bne.n	1d9d4 <__cxa_call_unexpected+0xdc>
   1d968:	f000 fb72 	bl	1e050 <__cxa_get_globals_fast>
   1d96c:	6800      	ldr	r0, [r0, #0]
   1d96e:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1d972:	f100 0378 	add.w	r3, r0, #120	; 0x78
   1d976:	9303      	str	r3, [sp, #12]
   1d978:	dd3b      	ble.n	1d9f2 <__cxa_call_unexpected+0xfa>
   1d97a:	3020      	adds	r0, #32
   1d97c:	463e      	mov	r6, r7
   1d97e:	f024 0b03 	bic.w	fp, r4, #3	; 0x3
   1d982:	9001      	str	r0, [sp, #4]
   1d984:	462f      	mov	r7, r5
   1d986:	46a9      	mov	r9, r5
   1d988:	6830      	ldr	r0, [r6, #0]
   1d98a:	2800      	cmp	r0, #0
   1d98c:	d12e      	bne.n	1d9ec <__cxa_call_unexpected+0xf4>
   1d98e:	4605      	mov	r5, r0
   1d990:	9801      	ldr	r0, [sp, #4]
   1d992:	4629      	mov	r1, r5
   1d994:	2200      	movs	r2, #0
   1d996:	ab03      	add	r3, sp, #12
   1d998:	f7ff f9a0 	bl	1ccdc <__cxa_type_match>
   1d99c:	4602      	mov	r2, r0
   1d99e:	b9d8      	cbnz	r0, 1d9d8 <__cxa_call_unexpected+0xe0>
   1d9a0:	682b      	ldr	r3, [r5, #0]
   1d9a2:	4628      	mov	r0, r5
   1d9a4:	691c      	ldr	r4, [r3, #16]
   1d9a6:	4914      	ldr	r1, [pc, #80]	(1d9f8 <__cxa_call_unexpected+0x100>)
   1d9a8:	2301      	movs	r3, #1
   1d9aa:	47a0      	blx	r4
   1d9ac:	3701      	adds	r7, #1
   1d9ae:	2800      	cmp	r0, #0
   1d9b0:	bf18      	it	ne
   1d9b2:	f04f 0901 	movne.w	r9, #1	; 0x1
   1d9b6:	45b8      	cmp	r8, r7
   1d9b8:	445e      	add	r6, fp
   1d9ba:	dce5      	bgt.n	1d988 <__cxa_call_unexpected+0x90>
   1d9bc:	f1b9 0f00 	cmp.w	r9, #0	; 0x0
   1d9c0:	d017      	beq.n	1d9f2 <__cxa_call_unexpected+0xfa>
   1d9c2:	2004      	movs	r0, #4
   1d9c4:	f000 fb6c 	bl	1e0a0 <__cxa_allocate_exception>
   1d9c8:	4b0c      	ldr	r3, [pc, #48]	(1d9fc <__cxa_call_unexpected+0x104>)
   1d9ca:	490b      	ldr	r1, [pc, #44]	(1d9f8 <__cxa_call_unexpected+0x100>)
   1d9cc:	6003      	str	r3, [r0, #0]
   1d9ce:	4a0c      	ldr	r2, [pc, #48]	(1da00 <__cxa_call_unexpected+0x108>)
   1d9d0:	f000 faf4 	bl	1dfbc <__cxa_throw>
   1d9d4:	f7ff f936 	bl	1cc44 <_ZSt9terminatev>
   1d9d8:	f000 fab8 	bl	1df4c <__cxa_rethrow>
   1d9dc:	4606      	mov	r6, r0
   1d9de:	f000 f81d 	bl	1da1c <__cxa_end_catch>
   1d9e2:	f000 f81b 	bl	1da1c <__cxa_end_catch>
   1d9e6:	4630      	mov	r0, r6
   1d9e8:	f7f9 fc0e 	bl	17208 <__cxa_end_cleanup>
   1d9ec:	eb06 0500 	add.w	r5, r6, r0
   1d9f0:	e7ce      	b.n	1d990 <__cxa_call_unexpected+0x98>
   1d9f2:	4650      	mov	r0, sl
   1d9f4:	f7ff f918 	bl	1cc28 <_ZN10__cxxabiv111__terminateEPFvvE>
   1d9f8:	00022870 	.word	0x00022870
   1d9fc:	000227e0 	.word	0x000227e0
   1da00:	0001dd31 	.word	0x0001dd31

0001da04 <__cxa_get_exception_ptr>:
   1da04:	6a40      	ldr	r0, [r0, #36]
   1da06:	4770      	bx	lr

0001da08 <_ZSt18uncaught_exceptionv>:
   1da08:	b500      	push	{lr}
   1da0a:	b081      	sub	sp, #4
   1da0c:	f000 fb24 	bl	1e058 <__cxa_get_globals>
   1da10:	6840      	ldr	r0, [r0, #4]
   1da12:	3800      	subs	r0, #0
   1da14:	bf18      	it	ne
   1da16:	2001      	movne	r0, #1
   1da18:	b001      	add	sp, #4
   1da1a:	bd00      	pop	{pc}

0001da1c <__cxa_end_catch>:
   1da1c:	b500      	push	{lr}
   1da1e:	b081      	sub	sp, #4
   1da20:	f000 fb16 	bl	1e050 <__cxa_get_globals_fast>
   1da24:	4601      	mov	r1, r0
   1da26:	6800      	ldr	r0, [r0, #0]
   1da28:	b140      	cbz	r0, 1da3c <__cxa_end_catch+0x20>
   1da2a:	f890 3020 	ldrb.w	r3, [r0, #32]
   1da2e:	2b47      	cmp	r3, #71
   1da30:	d006      	beq.n	1da40 <__cxa_end_catch+0x24>
   1da32:	2300      	movs	r3, #0
   1da34:	600b      	str	r3, [r1, #0]
   1da36:	3020      	adds	r0, #32
   1da38:	f7fd fa7e 	bl	1af38 <_Unwind_DeleteException>
   1da3c:	b001      	add	sp, #4
   1da3e:	bd00      	pop	{pc}
   1da40:	f890 3021 	ldrb.w	r3, [r0, #33]
   1da44:	2b4e      	cmp	r3, #78
   1da46:	d1f4      	bne.n	1da32 <__cxa_end_catch+0x16>
   1da48:	f890 3022 	ldrb.w	r3, [r0, #34]
   1da4c:	2b55      	cmp	r3, #85
   1da4e:	d1f0      	bne.n	1da32 <__cxa_end_catch+0x16>
   1da50:	f890 3023 	ldrb.w	r3, [r0, #35]
   1da54:	2b43      	cmp	r3, #67
   1da56:	d1ec      	bne.n	1da32 <__cxa_end_catch+0x16>
   1da58:	f890 3024 	ldrb.w	r3, [r0, #36]
   1da5c:	2b43      	cmp	r3, #67
   1da5e:	d1e8      	bne.n	1da32 <__cxa_end_catch+0x16>
   1da60:	f890 3025 	ldrb.w	r3, [r0, #37]
   1da64:	2b2b      	cmp	r3, #43
   1da66:	d1e4      	bne.n	1da32 <__cxa_end_catch+0x16>
   1da68:	f890 3026 	ldrb.w	r3, [r0, #38]
   1da6c:	2b2b      	cmp	r3, #43
   1da6e:	d1e0      	bne.n	1da32 <__cxa_end_catch+0x16>
   1da70:	f890 3027 	ldrb.w	r3, [r0, #39]
   1da74:	2b00      	cmp	r3, #0
   1da76:	d1dc      	bne.n	1da32 <__cxa_end_catch+0x16>
   1da78:	6943      	ldr	r3, [r0, #20]
   1da7a:	2b00      	cmp	r3, #0
   1da7c:	db09      	blt.n	1da92 <__cxa_end_catch+0x76>
   1da7e:	f113 32ff 	adds.w	r2, r3, #4294967295	; 0xffffffff
   1da82:	d00d      	beq.n	1daa0 <__cxa_end_catch+0x84>
   1da84:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1da88:	d001      	beq.n	1da8e <__cxa_end_catch+0x72>
   1da8a:	6142      	str	r2, [r0, #20]
   1da8c:	e7d6      	b.n	1da3c <__cxa_end_catch+0x20>
   1da8e:	f7ff f8d9 	bl	1cc44 <_ZSt9terminatev>
   1da92:	1c5a      	adds	r2, r3, #1
   1da94:	bf08      	it	eq
   1da96:	6903      	ldreq	r3, [r0, #16]
   1da98:	6142      	str	r2, [r0, #20]
   1da9a:	bf08      	it	eq
   1da9c:	600b      	streq	r3, [r1, #0]
   1da9e:	e7cd      	b.n	1da3c <__cxa_end_catch+0x20>
   1daa0:	6903      	ldr	r3, [r0, #16]
   1daa2:	3020      	adds	r0, #32
   1daa4:	600b      	str	r3, [r1, #0]
   1daa6:	f7fd fa47 	bl	1af38 <_Unwind_DeleteException>
   1daaa:	e7c7      	b.n	1da3c <__cxa_end_catch+0x20>

0001daac <__cxa_begin_catch>:
   1daac:	b530      	push	{r4, r5, lr}
   1daae:	b081      	sub	sp, #4
   1dab0:	4605      	mov	r5, r0
   1dab2:	f000 fad1 	bl	1e058 <__cxa_get_globals>
   1dab6:	462a      	mov	r2, r5
   1dab8:	f812 3920 	ldrb.w	r3, [r2], #-32
   1dabc:	6801      	ldr	r1, [r0, #0]
   1dabe:	2b47      	cmp	r3, #71
   1dac0:	d006      	beq.n	1dad0 <__cxa_begin_catch+0x24>
   1dac2:	2900      	cmp	r1, #0
   1dac4:	d134      	bne.n	1db30 <__cxa_begin_catch+0x84>
   1dac6:	6002      	str	r2, [r0, #0]
   1dac8:	460c      	mov	r4, r1
   1daca:	4620      	mov	r0, r4
   1dacc:	b001      	add	sp, #4
   1dace:	bd30      	pop	{r4, r5, pc}
   1dad0:	f892 3021 	ldrb.w	r3, [r2, #33]
   1dad4:	2b4e      	cmp	r3, #78
   1dad6:	d1f4      	bne.n	1dac2 <__cxa_begin_catch+0x16>
   1dad8:	f892 3022 	ldrb.w	r3, [r2, #34]
   1dadc:	2b55      	cmp	r3, #85
   1dade:	d1f0      	bne.n	1dac2 <__cxa_begin_catch+0x16>
   1dae0:	f892 3023 	ldrb.w	r3, [r2, #35]
   1dae4:	2b43      	cmp	r3, #67
   1dae6:	d1ec      	bne.n	1dac2 <__cxa_begin_catch+0x16>
   1dae8:	f892 3024 	ldrb.w	r3, [r2, #36]
   1daec:	2b43      	cmp	r3, #67
   1daee:	d1e8      	bne.n	1dac2 <__cxa_begin_catch+0x16>
   1daf0:	f892 3025 	ldrb.w	r3, [r2, #37]
   1daf4:	2b2b      	cmp	r3, #43
   1daf6:	d1e4      	bne.n	1dac2 <__cxa_begin_catch+0x16>
   1daf8:	f892 3026 	ldrb.w	r3, [r2, #38]
   1dafc:	2b2b      	cmp	r3, #43
   1dafe:	d1e0      	bne.n	1dac2 <__cxa_begin_catch+0x16>
   1db00:	f892 3027 	ldrb.w	r3, [r2, #39]
   1db04:	2b00      	cmp	r3, #0
   1db06:	d1dc      	bne.n	1dac2 <__cxa_begin_catch+0x16>
   1db08:	6953      	ldr	r3, [r2, #20]
   1db0a:	2b00      	cmp	r3, #0
   1db0c:	db0d      	blt.n	1db2a <__cxa_begin_catch+0x7e>
   1db0e:	3301      	adds	r3, #1
   1db10:	6153      	str	r3, [r2, #20]
   1db12:	6843      	ldr	r3, [r0, #4]
   1db14:	3b01      	subs	r3, #1
   1db16:	4291      	cmp	r1, r2
   1db18:	6043      	str	r3, [r0, #4]
   1db1a:	bf1c      	itt	ne
   1db1c:	6111      	strne	r1, [r2, #16]
   1db1e:	6002      	strne	r2, [r0, #0]
   1db20:	4628      	mov	r0, r5
   1db22:	6a6c      	ldr	r4, [r5, #36]
   1db24:	f7fd fa06 	bl	1af34 <_Unwind_Complete>
   1db28:	e7cf      	b.n	1daca <__cxa_begin_catch+0x1e>
   1db2a:	f1c3 0301 	rsb	r3, r3, #1	; 0x1
   1db2e:	e7ef      	b.n	1db10 <__cxa_begin_catch+0x64>
   1db30:	f7ff f888 	bl	1cc44 <_ZSt9terminatev>
   1db34:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1db38:	d001      	beq.n	1db3e <__cxa_begin_catch+0x92>
   1db3a:	f7f9 fb65 	bl	17208 <__cxa_end_cleanup>
   1db3e:	f7ff fedb 	bl	1d8f8 <__cxa_call_unexpected>
   1db42:	46c0      	nop			(mov r8, r8)

0001db44 <_ZNKSt8bad_cast4whatEv>:
   1db44:	4800      	ldr	r0, [pc, #0]	(1db48 <_ZNKSt8bad_cast4whatEv+0x4>)
   1db46:	4770      	bx	lr
   1db48:	00022310 	.word	0x00022310

0001db4c <_ZNSt8bad_castD1Ev>:
   1db4c:	4b03      	ldr	r3, [pc, #12]	(1db5c <_ZNSt8bad_castD1Ev+0x10>)
   1db4e:	b510      	push	{r4, lr}
   1db50:	6003      	str	r3, [r0, #0]
   1db52:	4604      	mov	r4, r0
   1db54:	f000 f8da 	bl	1dd0c <_ZNSt9exceptionD2Ev>
   1db58:	4620      	mov	r0, r4
   1db5a:	bd10      	pop	{r4, pc}
   1db5c:	00022328 	.word	0x00022328

0001db60 <_ZNSt8bad_castD2Ev>:
   1db60:	4b03      	ldr	r3, [pc, #12]	(1db70 <_ZNSt8bad_castD2Ev+0x10>)
   1db62:	b510      	push	{r4, lr}
   1db64:	6003      	str	r3, [r0, #0]
   1db66:	4604      	mov	r4, r0
   1db68:	f000 f8d0 	bl	1dd0c <_ZNSt9exceptionD2Ev>
   1db6c:	4620      	mov	r0, r4
   1db6e:	bd10      	pop	{r4, pc}
   1db70:	00022328 	.word	0x00022328

0001db74 <_ZNSt8bad_castD0Ev>:
   1db74:	4b05      	ldr	r3, [pc, #20]	(1db8c <_ZNSt8bad_castD0Ev+0x18>)
   1db76:	b510      	push	{r4, lr}
   1db78:	6003      	str	r3, [r0, #0]
   1db7a:	4604      	mov	r4, r0
   1db7c:	f000 f8c6 	bl	1dd0c <_ZNSt9exceptionD2Ev>
   1db80:	4620      	mov	r0, r4
   1db82:	f7f0 fbfb 	bl	e37c <_ZdlPv>
   1db86:	4620      	mov	r0, r4
   1db88:	bd10      	pop	{r4, pc}
   1db8a:	46c0      	nop			(mov r8, r8)
   1db8c:	00022328 	.word	0x00022328

0001db90 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   1db90:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db92:	b081      	sub	sp, #4
   1db94:	4604      	mov	r4, r0
   1db96:	460d      	mov	r5, r1
   1db98:	4616      	mov	r6, r2
   1db9a:	461f      	mov	r7, r3
   1db9c:	f000 f938 	bl	1de10 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   1dba0:	b110      	cbz	r0, 1dba8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x18>
   1dba2:	2001      	movs	r0, #1
   1dba4:	b001      	add	sp, #4
   1dba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dba8:	68a0      	ldr	r0, [r4, #8]
   1dbaa:	4629      	mov	r1, r5
   1dbac:	6803      	ldr	r3, [r0, #0]
   1dbae:	4632      	mov	r2, r6
   1dbb0:	699c      	ldr	r4, [r3, #24]
   1dbb2:	463b      	mov	r3, r7
   1dbb4:	47a0      	blx	r4
   1dbb6:	e7f5      	b.n	1dba4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x14>

0001dbb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   1dbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbbc:	460e      	mov	r6, r1
   1dbbe:	b085      	sub	sp, #20
   1dbc0:	4619      	mov	r1, r3
   1dbc2:	4604      	mov	r4, r0
   1dbc4:	4617      	mov	r7, r2
   1dbc6:	469b      	mov	fp, r3
   1dbc8:	f8dd 8038 	ldr.w	r8, [sp, #56]
   1dbcc:	f8dd 9040 	ldr.w	r9, [sp, #64]
   1dbd0:	f8dd a044 	ldr.w	sl, [sp, #68]
   1dbd4:	f000 f990 	bl	1def8 <_ZNKSt9type_infoeqERKS_>
   1dbd8:	4605      	mov	r5, r0
   1dbda:	b178      	cbz	r0, 1dbfc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   1dbdc:	2e00      	cmp	r6, #0
   1dbde:	f8ca 8000 	str.w	r8, [sl]
   1dbe2:	f88a 7004 	strb.w	r7, [sl, #4]
   1dbe6:	db1d      	blt.n	1dc24 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
   1dbe8:	eb08 0306 	add.w	r3, r8, r6
   1dbec:	4599      	cmp	r9, r3
   1dbee:	bf0c      	ite	eq
   1dbf0:	2306      	moveq	r3, #6
   1dbf2:	2301      	movne	r3, #1
   1dbf4:	f88a 3006 	strb.w	r3, [sl, #6]
   1dbf8:	2000      	movs	r0, #0
   1dbfa:	e010      	b.n	1dc1e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
   1dbfc:	45c8      	cmp	r8, r9
   1dbfe:	d01b      	beq.n	1dc38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x80>
   1dc00:	68a0      	ldr	r0, [r4, #8]
   1dc02:	9a0f      	ldr	r2, [sp, #60]
   1dc04:	6803      	ldr	r3, [r0, #0]
   1dc06:	9201      	str	r2, [sp, #4]
   1dc08:	f8cd 8000 	str.w	r8, [sp]
   1dc0c:	f8cd 9008 	str.w	r9, [sp, #8]
   1dc10:	f8cd a00c 	str.w	sl, [sp, #12]
   1dc14:	69dc      	ldr	r4, [r3, #28]
   1dc16:	4631      	mov	r1, r6
   1dc18:	463a      	mov	r2, r7
   1dc1a:	465b      	mov	r3, fp
   1dc1c:	47a0      	blx	r4
   1dc1e:	b005      	add	sp, #20
   1dc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc24:	f116 0f02 	cmn.w	r6, #2	; 0x2
   1dc28:	d001      	beq.n	1dc2e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
   1dc2a:	2000      	movs	r0, #0
   1dc2c:	e7f7      	b.n	1dc1e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
   1dc2e:	2301      	movs	r3, #1
   1dc30:	f88a 3006 	strb.w	r3, [sl, #6]
   1dc34:	2000      	movs	r0, #0
   1dc36:	e7f2      	b.n	1dc1e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
   1dc38:	4620      	mov	r0, r4
   1dc3a:	990f      	ldr	r1, [sp, #60]
   1dc3c:	f000 f95c 	bl	1def8 <_ZNKSt9type_infoeqERKS_>
   1dc40:	2800      	cmp	r0, #0
   1dc42:	d0dd      	beq.n	1dc00 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
   1dc44:	f88a 7005 	strb.w	r7, [sl, #5]
   1dc48:	4628      	mov	r0, r5
   1dc4a:	e7e8      	b.n	1dc1e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>

0001dc4c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   1dc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dc50:	b082      	sub	sp, #8
   1dc52:	9e08      	ldr	r6, [sp, #32]
   1dc54:	4604      	mov	r4, r0
   1dc56:	4296      	cmp	r6, r2
   1dc58:	4688      	mov	r8, r1
   1dc5a:	4615      	mov	r5, r2
   1dc5c:	461f      	mov	r7, r3
   1dc5e:	d00a      	beq.n	1dc76 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2a>
   1dc60:	68a0      	ldr	r0, [r4, #8]
   1dc62:	4641      	mov	r1, r8
   1dc64:	6803      	ldr	r3, [r0, #0]
   1dc66:	9600      	str	r6, [sp, #0]
   1dc68:	6a1c      	ldr	r4, [r3, #32]
   1dc6a:	462a      	mov	r2, r5
   1dc6c:	463b      	mov	r3, r7
   1dc6e:	47a0      	blx	r4
   1dc70:	b002      	add	sp, #8
   1dc72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dc76:	4619      	mov	r1, r3
   1dc78:	f000 f93e 	bl	1def8 <_ZNKSt9type_infoeqERKS_>
   1dc7c:	2800      	cmp	r0, #0
   1dc7e:	d0ef      	beq.n	1dc60 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
   1dc80:	2006      	movs	r0, #6
   1dc82:	e7f5      	b.n	1dc70 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>

0001dc84 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   1dc84:	4b03      	ldr	r3, [pc, #12]	(1dc94 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   1dc86:	b510      	push	{r4, lr}
   1dc88:	6003      	str	r3, [r0, #0]
   1dc8a:	4604      	mov	r4, r0
   1dc8c:	f000 f910 	bl	1deb0 <_ZN10__cxxabiv117__class_type_infoD2Ev>
   1dc90:	4620      	mov	r0, r4
   1dc92:	bd10      	pop	{r4, pc}
   1dc94:	00022358 	.word	0x00022358

0001dc98 <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
   1dc98:	4b03      	ldr	r3, [pc, #12]	(1dca8 <_ZN10__cxxabiv120__si_class_type_infoD2Ev+0x10>)
   1dc9a:	b510      	push	{r4, lr}
   1dc9c:	6003      	str	r3, [r0, #0]
   1dc9e:	4604      	mov	r4, r0
   1dca0:	f000 f906 	bl	1deb0 <_ZN10__cxxabiv117__class_type_infoD2Ev>
   1dca4:	4620      	mov	r0, r4
   1dca6:	bd10      	pop	{r4, pc}
   1dca8:	00022358 	.word	0x00022358

0001dcac <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   1dcac:	4b05      	ldr	r3, [pc, #20]	(1dcc4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   1dcae:	b510      	push	{r4, lr}
   1dcb0:	6003      	str	r3, [r0, #0]
   1dcb2:	4604      	mov	r4, r0
   1dcb4:	f000 f8fc 	bl	1deb0 <_ZN10__cxxabiv117__class_type_infoD2Ev>
   1dcb8:	4620      	mov	r0, r4
   1dcba:	f7f0 fb5f 	bl	e37c <_ZdlPv>
   1dcbe:	4620      	mov	r0, r4
   1dcc0:	bd10      	pop	{r4, pc}
   1dcc2:	46c0      	nop			(mov r8, r8)
   1dcc4:	00022358 	.word	0x00022358

0001dcc8 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
   1dcc8:	4b03      	ldr	r3, [pc, #12]	(1dcd8 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
   1dcca:	b510      	push	{r4, lr}
   1dccc:	6003      	str	r3, [r0, #0]
   1dcce:	4604      	mov	r4, r0
   1dcd0:	f000 f906 	bl	1dee0 <_ZNSt9type_infoD2Ev>
   1dcd4:	4620      	mov	r0, r4
   1dcd6:	bd10      	pop	{r4, pc}
   1dcd8:	000223c0 	.word	0x000223c0

0001dcdc <_ZN10__cxxabiv123__fundamental_type_infoD2Ev>:
   1dcdc:	4b03      	ldr	r3, [pc, #12]	(1dcec <_ZN10__cxxabiv123__fundamental_type_infoD2Ev+0x10>)
   1dcde:	b510      	push	{r4, lr}
   1dce0:	6003      	str	r3, [r0, #0]
   1dce2:	4604      	mov	r4, r0
   1dce4:	f000 f8fc 	bl	1dee0 <_ZNSt9type_infoD2Ev>
   1dce8:	4620      	mov	r0, r4
   1dcea:	bd10      	pop	{r4, pc}
   1dcec:	000223c0 	.word	0x000223c0

0001dcf0 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
   1dcf0:	4b05      	ldr	r3, [pc, #20]	(1dd08 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev+0x18>)
   1dcf2:	b510      	push	{r4, lr}
   1dcf4:	6003      	str	r3, [r0, #0]
   1dcf6:	4604      	mov	r4, r0
   1dcf8:	f000 f8f2 	bl	1dee0 <_ZNSt9type_infoD2Ev>
   1dcfc:	4620      	mov	r0, r4
   1dcfe:	f7f0 fb3d 	bl	e37c <_ZdlPv>
   1dd02:	4620      	mov	r0, r4
   1dd04:	bd10      	pop	{r4, pc}
   1dd06:	46c0      	nop			(mov r8, r8)
   1dd08:	000223c0 	.word	0x000223c0

0001dd0c <_ZNSt9exceptionD2Ev>:
   1dd0c:	4b01      	ldr	r3, [pc, #4]	(1dd14 <_ZNSt9exceptionD2Ev+0x8>)
   1dd0e:	6003      	str	r3, [r0, #0]
   1dd10:	4770      	bx	lr
   1dd12:	46c0      	nop			(mov r8, r8)
   1dd14:	000227f8 	.word	0x000227f8

0001dd18 <_ZNSt9exceptionD1Ev>:
   1dd18:	4b01      	ldr	r3, [pc, #4]	(1dd20 <_ZNSt9exceptionD1Ev+0x8>)
   1dd1a:	6003      	str	r3, [r0, #0]
   1dd1c:	4770      	bx	lr
   1dd1e:	46c0      	nop			(mov r8, r8)
   1dd20:	000227f8 	.word	0x000227f8

0001dd24 <_ZNSt13bad_exceptionD2Ev>:
   1dd24:	4b01      	ldr	r3, [pc, #4]	(1dd2c <_ZNSt13bad_exceptionD2Ev+0x8>)
   1dd26:	6003      	str	r3, [r0, #0]
   1dd28:	4770      	bx	lr
   1dd2a:	46c0      	nop			(mov r8, r8)
   1dd2c:	000227f8 	.word	0x000227f8

0001dd30 <_ZNSt13bad_exceptionD1Ev>:
   1dd30:	4b01      	ldr	r3, [pc, #4]	(1dd38 <_ZNSt13bad_exceptionD1Ev+0x8>)
   1dd32:	6003      	str	r3, [r0, #0]
   1dd34:	4770      	bx	lr
   1dd36:	46c0      	nop			(mov r8, r8)
   1dd38:	000227f8 	.word	0x000227f8

0001dd3c <_ZN10__cxxabiv115__forced_unwindD2Ev>:
   1dd3c:	4b01      	ldr	r3, [pc, #4]	(1dd44 <_ZN10__cxxabiv115__forced_unwindD2Ev+0x8>)
   1dd3e:	6003      	str	r3, [r0, #0]
   1dd40:	4770      	bx	lr
   1dd42:	46c0      	nop			(mov r8, r8)
   1dd44:	000227c8 	.word	0x000227c8

0001dd48 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   1dd48:	4b01      	ldr	r3, [pc, #4]	(1dd50 <_ZN10__cxxabiv115__forced_unwindD1Ev+0x8>)
   1dd4a:	6003      	str	r3, [r0, #0]
   1dd4c:	4770      	bx	lr
   1dd4e:	46c0      	nop			(mov r8, r8)
   1dd50:	000227c8 	.word	0x000227c8

0001dd54 <_ZN10__cxxabiv119__foreign_exceptionD2Ev>:
   1dd54:	4b01      	ldr	r3, [pc, #4]	(1dd5c <_ZN10__cxxabiv119__foreign_exceptionD2Ev+0x8>)
   1dd56:	6003      	str	r3, [r0, #0]
   1dd58:	4770      	bx	lr
   1dd5a:	46c0      	nop			(mov r8, r8)
   1dd5c:	000227b0 	.word	0x000227b0

0001dd60 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   1dd60:	4b01      	ldr	r3, [pc, #4]	(1dd68 <_ZN10__cxxabiv119__foreign_exceptionD1Ev+0x8>)
   1dd62:	6003      	str	r3, [r0, #0]
   1dd64:	4770      	bx	lr
   1dd66:	46c0      	nop			(mov r8, r8)
   1dd68:	000227b0 	.word	0x000227b0

0001dd6c <_ZNKSt9exception4whatEv>:
   1dd6c:	4800      	ldr	r0, [pc, #0]	(1dd70 <_ZNKSt9exception4whatEv+0x4>)
   1dd6e:	4770      	bx	lr
   1dd70:	00022780 	.word	0x00022780

0001dd74 <_ZNKSt13bad_exception4whatEv>:
   1dd74:	4800      	ldr	r0, [pc, #0]	(1dd78 <_ZNKSt13bad_exception4whatEv+0x4>)
   1dd76:	4770      	bx	lr
   1dd78:	00022790 	.word	0x00022790

0001dd7c <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   1dd7c:	4b03      	ldr	r3, [pc, #12]	(1dd8c <_ZN10__cxxabiv119__foreign_exceptionD0Ev+0x10>)
   1dd7e:	b510      	push	{r4, lr}
   1dd80:	6003      	str	r3, [r0, #0]
   1dd82:	4604      	mov	r4, r0
   1dd84:	f7f0 fafa 	bl	e37c <_ZdlPv>
   1dd88:	4620      	mov	r0, r4
   1dd8a:	bd10      	pop	{r4, pc}
   1dd8c:	000227b0 	.word	0x000227b0

0001dd90 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   1dd90:	4b03      	ldr	r3, [pc, #12]	(1dda0 <_ZN10__cxxabiv115__forced_unwindD0Ev+0x10>)
   1dd92:	b510      	push	{r4, lr}
   1dd94:	6003      	str	r3, [r0, #0]
   1dd96:	4604      	mov	r4, r0
   1dd98:	f7f0 faf0 	bl	e37c <_ZdlPv>
   1dd9c:	4620      	mov	r0, r4
   1dd9e:	bd10      	pop	{r4, pc}
   1dda0:	000227c8 	.word	0x000227c8

0001dda4 <_ZNSt9exceptionD0Ev>:
   1dda4:	4b03      	ldr	r3, [pc, #12]	(1ddb4 <_ZNSt9exceptionD0Ev+0x10>)
   1dda6:	b510      	push	{r4, lr}
   1dda8:	6003      	str	r3, [r0, #0]
   1ddaa:	4604      	mov	r4, r0
   1ddac:	f7f0 fae6 	bl	e37c <_ZdlPv>
   1ddb0:	4620      	mov	r0, r4
   1ddb2:	bd10      	pop	{r4, pc}
   1ddb4:	000227f8 	.word	0x000227f8

0001ddb8 <_ZNSt13bad_exceptionD0Ev>:
   1ddb8:	4b03      	ldr	r3, [pc, #12]	(1ddc8 <_ZNSt13bad_exceptionD0Ev+0x10>)
   1ddba:	b510      	push	{r4, lr}
   1ddbc:	6003      	str	r3, [r0, #0]
   1ddbe:	4604      	mov	r4, r0
   1ddc0:	f7f0 fadc 	bl	e37c <_ZdlPv>
   1ddc4:	4620      	mov	r0, r4
   1ddc6:	bd10      	pop	{r4, pc}
   1ddc8:	000227f8 	.word	0x000227f8

0001ddcc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   1ddcc:	b570      	push	{r4, r5, r6, lr}
   1ddce:	2310      	movs	r3, #16
   1ddd0:	b084      	sub	sp, #16
   1ddd2:	2500      	movs	r5, #0
   1ddd4:	9302      	str	r3, [sp, #8]
   1ddd6:	6803      	ldr	r3, [r0, #0]
   1ddd8:	9500      	str	r5, [sp, #0]
   1ddda:	4616      	mov	r6, r2
   1dddc:	699c      	ldr	r4, [r3, #24]
   1ddde:	f88d 5004 	strb.w	r5, [sp, #4]
   1dde2:	466b      	mov	r3, sp
   1dde4:	9503      	str	r5, [sp, #12]
   1dde6:	6812      	ldr	r2, [r2, #0]
   1dde8:	47a0      	blx	r4
   1ddea:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1ddee:	f003 0306 	and.w	r3, r3, #6	; 0x6
   1ddf2:	2b06      	cmp	r3, #6
   1ddf4:	bf09      	itett	eq
   1ddf6:	9b00      	ldreq	r3, [sp, #0]
   1ddf8:	4628      	movne	r0, r5
   1ddfa:	6033      	streq	r3, [r6, #0]
   1ddfc:	2001      	moveq	r0, #1
   1ddfe:	b004      	add	sp, #16
   1de00:	bd70      	pop	{r4, r5, r6, pc}
   1de02:	46c0      	nop			(mov r8, r8)

0001de04 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   1de04:	9800      	ldr	r0, [sp, #0]
   1de06:	4290      	cmp	r0, r2
   1de08:	bf0c      	ite	eq
   1de0a:	2006      	moveq	r0, #6
   1de0c:	2001      	movne	r0, #1
   1de0e:	4770      	bx	lr

0001de10 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   1de10:	b530      	push	{r4, r5, lr}
   1de12:	b081      	sub	sp, #4
   1de14:	4615      	mov	r5, r2
   1de16:	461c      	mov	r4, r3
   1de18:	f000 f86e 	bl	1def8 <_ZNKSt9type_infoeqERKS_>
   1de1c:	b128      	cbz	r0, 1de2a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x1a>
   1de1e:	2308      	movs	r3, #8
   1de20:	2206      	movs	r2, #6
   1de22:	6025      	str	r5, [r4, #0]
   1de24:	60e3      	str	r3, [r4, #12]
   1de26:	7122      	strb	r2, [r4, #4]
   1de28:	2001      	movs	r0, #1
   1de2a:	b001      	add	sp, #4
   1de2c:	bd30      	pop	{r4, r5, pc}
   1de2e:	46c0      	nop			(mov r8, r8)

0001de30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   1de30:	b5f0      	push	{r4, r5, r6, r7, lr}
   1de32:	b081      	sub	sp, #4
   1de34:	461c      	mov	r4, r3
   1de36:	9e06      	ldr	r6, [sp, #24]
   1de38:	9b08      	ldr	r3, [sp, #32]
   1de3a:	4605      	mov	r5, r0
   1de3c:	429e      	cmp	r6, r3
   1de3e:	4617      	mov	r7, r2
   1de40:	d00d      	beq.n	1de5e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
   1de42:	4628      	mov	r0, r5
   1de44:	4621      	mov	r1, r4
   1de46:	f000 f857 	bl	1def8 <_ZNKSt9type_infoeqERKS_>
   1de4a:	b128      	cbz	r0, 1de58 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
   1de4c:	9b09      	ldr	r3, [sp, #36]
   1de4e:	9a09      	ldr	r2, [sp, #36]
   1de50:	601e      	str	r6, [r3, #0]
   1de52:	711f      	strb	r7, [r3, #4]
   1de54:	2301      	movs	r3, #1
   1de56:	7193      	strb	r3, [r2, #6]
   1de58:	2000      	movs	r0, #0
   1de5a:	b001      	add	sp, #4
   1de5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1de5e:	9907      	ldr	r1, [sp, #28]
   1de60:	f000 f84a 	bl	1def8 <_ZNKSt9type_infoeqERKS_>
   1de64:	2800      	cmp	r0, #0
   1de66:	d0ec      	beq.n	1de42 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>
   1de68:	9a09      	ldr	r2, [sp, #36]
   1de6a:	7157      	strb	r7, [r2, #5]
   1de6c:	e7f4      	b.n	1de58 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
   1de6e:	46c0      	nop			(mov r8, r8)

0001de70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   1de70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1de72:	b081      	sub	sp, #4
   1de74:	4606      	mov	r6, r0
   1de76:	460d      	mov	r5, r1
   1de78:	4617      	mov	r7, r2
   1de7a:	461c      	mov	r4, r3
   1de7c:	f000 f83c 	bl	1def8 <_ZNKSt9type_infoeqERKS_>
   1de80:	b918      	cbnz	r0, 1de8a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   1de82:	2c03      	cmp	r4, #3
   1de84:	d903      	bls.n	1de8e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1e>
   1de86:	b001      	add	sp, #4
   1de88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1de8a:	2001      	movs	r0, #1
   1de8c:	e7fb      	b.n	1de86 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
   1de8e:	682b      	ldr	r3, [r5, #0]
   1de90:	4628      	mov	r0, r5
   1de92:	695c      	ldr	r4, [r3, #20]
   1de94:	4631      	mov	r1, r6
   1de96:	463a      	mov	r2, r7
   1de98:	47a0      	blx	r4
   1de9a:	e7f4      	b.n	1de86 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>

0001de9c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   1de9c:	4b03      	ldr	r3, [pc, #12]	(1deac <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   1de9e:	b510      	push	{r4, lr}
   1dea0:	6003      	str	r3, [r0, #0]
   1dea2:	4604      	mov	r4, r0
   1dea4:	f000 f81c 	bl	1dee0 <_ZNSt9type_infoD2Ev>
   1dea8:	4620      	mov	r0, r4
   1deaa:	bd10      	pop	{r4, pc}
   1deac:	000228a0 	.word	0x000228a0

0001deb0 <_ZN10__cxxabiv117__class_type_infoD2Ev>:
   1deb0:	4b03      	ldr	r3, [pc, #12]	(1dec0 <_ZN10__cxxabiv117__class_type_infoD2Ev+0x10>)
   1deb2:	b510      	push	{r4, lr}
   1deb4:	6003      	str	r3, [r0, #0]
   1deb6:	4604      	mov	r4, r0
   1deb8:	f000 f812 	bl	1dee0 <_ZNSt9type_infoD2Ev>
   1debc:	4620      	mov	r0, r4
   1debe:	bd10      	pop	{r4, pc}
   1dec0:	000228a0 	.word	0x000228a0

0001dec4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   1dec4:	4b05      	ldr	r3, [pc, #20]	(1dedc <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   1dec6:	b510      	push	{r4, lr}
   1dec8:	6003      	str	r3, [r0, #0]
   1deca:	4604      	mov	r4, r0
   1decc:	f000 f808 	bl	1dee0 <_ZNSt9type_infoD2Ev>
   1ded0:	4620      	mov	r0, r4
   1ded2:	f7f0 fa53 	bl	e37c <_ZdlPv>
   1ded6:	4620      	mov	r0, r4
   1ded8:	bd10      	pop	{r4, pc}
   1deda:	46c0      	nop			(mov r8, r8)
   1dedc:	000228a0 	.word	0x000228a0

0001dee0 <_ZNSt9type_infoD2Ev>:
   1dee0:	4b01      	ldr	r3, [pc, #4]	(1dee8 <_ZNSt9type_infoD2Ev+0x8>)
   1dee2:	6003      	str	r3, [r0, #0]
   1dee4:	4770      	bx	lr
   1dee6:	46c0      	nop			(mov r8, r8)
   1dee8:	00022900 	.word	0x00022900

0001deec <_ZNSt9type_infoD1Ev>:
   1deec:	4b01      	ldr	r3, [pc, #4]	(1def4 <_ZNSt9type_infoD1Ev+0x8>)
   1deee:	6003      	str	r3, [r0, #0]
   1def0:	4770      	bx	lr
   1def2:	46c0      	nop			(mov r8, r8)
   1def4:	00022900 	.word	0x00022900

0001def8 <_ZNKSt9type_infoeqERKS_>:
   1def8:	6840      	ldr	r0, [r0, #4]
   1defa:	684b      	ldr	r3, [r1, #4]
   1defc:	4298      	cmp	r0, r3
   1defe:	bf14      	ite	ne
   1df00:	2000      	movne	r0, #0
   1df02:	2001      	moveq	r0, #1
   1df04:	4770      	bx	lr
   1df06:	46c0      	nop			(mov r8, r8)

0001df08 <_ZNKSt9type_info14__is_pointer_pEv>:
   1df08:	2000      	movs	r0, #0
   1df0a:	4770      	bx	lr

0001df0c <_ZNKSt9type_info15__is_function_pEv>:
   1df0c:	2000      	movs	r0, #0
   1df0e:	4770      	bx	lr

0001df10 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   1df10:	6840      	ldr	r0, [r0, #4]
   1df12:	684b      	ldr	r3, [r1, #4]
   1df14:	4298      	cmp	r0, r3
   1df16:	bf14      	ite	ne
   1df18:	2000      	movne	r0, #0
   1df1a:	2001      	moveq	r0, #1
   1df1c:	4770      	bx	lr
   1df1e:	46c0      	nop			(mov r8, r8)

0001df20 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   1df20:	2000      	movs	r0, #0
   1df22:	4770      	bx	lr

0001df24 <_ZNSt9type_infoD0Ev>:
   1df24:	4b03      	ldr	r3, [pc, #12]	(1df34 <_ZNSt9type_infoD0Ev+0x10>)
   1df26:	b510      	push	{r4, lr}
   1df28:	6003      	str	r3, [r0, #0]
   1df2a:	4604      	mov	r4, r0
   1df2c:	f7f0 fa26 	bl	e37c <_ZdlPv>
   1df30:	4620      	mov	r0, r4
   1df32:	bd10      	pop	{r4, pc}
   1df34:	00022900 	.word	0x00022900

0001df38 <__cxa_current_exception_type>:
   1df38:	b500      	push	{lr}
   1df3a:	b081      	sub	sp, #4
   1df3c:	f000 f88c 	bl	1e058 <__cxa_get_globals>
   1df40:	6800      	ldr	r0, [r0, #0]
   1df42:	b100      	cbz	r0, 1df46 <__cxa_current_exception_type+0xe>
   1df44:	6800      	ldr	r0, [r0, #0]
   1df46:	b001      	add	sp, #4
   1df48:	bd00      	pop	{pc}
   1df4a:	46c0      	nop			(mov r8, r8)

0001df4c <__cxa_rethrow>:
   1df4c:	b510      	push	{r4, lr}
   1df4e:	f000 f883 	bl	1e058 <__cxa_get_globals>
   1df52:	6843      	ldr	r3, [r0, #4]
   1df54:	6804      	ldr	r4, [r0, #0]
   1df56:	3301      	adds	r3, #1
   1df58:	6043      	str	r3, [r0, #4]
   1df5a:	b164      	cbz	r4, 1df76 <__cxa_rethrow+0x2a>
   1df5c:	f894 3020 	ldrb.w	r3, [r4, #32]
   1df60:	2b47      	cmp	r3, #71
   1df62:	d00a      	beq.n	1df7a <__cxa_rethrow+0x2e>
   1df64:	2300      	movs	r3, #0
   1df66:	6003      	str	r3, [r0, #0]
   1df68:	3420      	adds	r4, #32
   1df6a:	4620      	mov	r0, r4
   1df6c:	f7fd fd38 	bl	1b9e0 <_Unwind_Resume_or_Rethrow>
   1df70:	4620      	mov	r0, r4
   1df72:	f7ff fd9b 	bl	1daac <__cxa_begin_catch>
   1df76:	f7fe fe65 	bl	1cc44 <_ZSt9terminatev>
   1df7a:	f894 3021 	ldrb.w	r3, [r4, #33]
   1df7e:	2b4e      	cmp	r3, #78
   1df80:	d1f0      	bne.n	1df64 <__cxa_rethrow+0x18>
   1df82:	f894 3022 	ldrb.w	r3, [r4, #34]
   1df86:	2b55      	cmp	r3, #85
   1df88:	d1ec      	bne.n	1df64 <__cxa_rethrow+0x18>
   1df8a:	f894 3023 	ldrb.w	r3, [r4, #35]
   1df8e:	2b43      	cmp	r3, #67
   1df90:	d1e8      	bne.n	1df64 <__cxa_rethrow+0x18>
   1df92:	f894 3024 	ldrb.w	r3, [r4, #36]
   1df96:	2b43      	cmp	r3, #67
   1df98:	d1e4      	bne.n	1df64 <__cxa_rethrow+0x18>
   1df9a:	f894 3025 	ldrb.w	r3, [r4, #37]
   1df9e:	2b2b      	cmp	r3, #43
   1dfa0:	d1e0      	bne.n	1df64 <__cxa_rethrow+0x18>
   1dfa2:	f894 3026 	ldrb.w	r3, [r4, #38]
   1dfa6:	2b2b      	cmp	r3, #43
   1dfa8:	d1dc      	bne.n	1df64 <__cxa_rethrow+0x18>
   1dfaa:	f894 3027 	ldrb.w	r3, [r4, #39]
   1dfae:	2b00      	cmp	r3, #0
   1dfb0:	d1d8      	bne.n	1df64 <__cxa_rethrow+0x18>
   1dfb2:	6963      	ldr	r3, [r4, #20]
   1dfb4:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1dfb8:	6163      	str	r3, [r4, #20]
   1dfba:	e7d5      	b.n	1df68 <__cxa_rethrow+0x1c>

0001dfbc <__cxa_throw>:
   1dfbc:	4b16      	ldr	r3, [pc, #88]	(1e018 <__cxa_throw+0x5c>)
   1dfbe:	b510      	push	{r4, lr}
   1dfc0:	4604      	mov	r4, r0
   1dfc2:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
   1dfc6:	6042      	str	r2, [r0, #4]
   1dfc8:	681a      	ldr	r2, [r3, #0]
   1dfca:	4b14      	ldr	r3, [pc, #80]	(1e01c <__cxa_throw+0x60>)
   1dfcc:	6082      	str	r2, [r0, #8]
   1dfce:	681a      	ldr	r2, [r3, #0]
   1dfd0:	2347      	movs	r3, #71
   1dfd2:	60c2      	str	r2, [r0, #12]
   1dfd4:	224e      	movs	r2, #78
   1dfd6:	f880 2021 	strb.w	r2, [r0, #33]
   1dfda:	3a0b      	subs	r2, #11
   1dfdc:	f880 3020 	strb.w	r3, [r0, #32]
   1dfe0:	f880 2023 	strb.w	r2, [r0, #35]
   1dfe4:	f880 2024 	strb.w	r2, [r0, #36]
   1dfe8:	330e      	adds	r3, #14
   1dfea:	4a0d      	ldr	r2, [pc, #52]	(1e020 <__cxa_throw+0x64>)
   1dfec:	f844 1c78 	str.w	r1, [r4, #-120]
   1dff0:	f880 3022 	strb.w	r3, [r0, #34]
   1dff4:	212b      	movs	r1, #43
   1dff6:	3b55      	subs	r3, #85
   1dff8:	3c58      	subs	r4, #88
   1dffa:	f880 1025 	strb.w	r1, [r0, #37]
   1dffe:	f880 1026 	strb.w	r1, [r0, #38]
   1e002:	f880 3027 	strb.w	r3, [r0, #39]
   1e006:	6282      	str	r2, [r0, #40]
   1e008:	4620      	mov	r0, r4
   1e00a:	f7fd fcc5 	bl	1b998 <_Unwind_RaiseException>
   1e00e:	4620      	mov	r0, r4
   1e010:	f7ff fd4c 	bl	1daac <__cxa_begin_catch>
   1e014:	f7fe fe16 	bl	1cc44 <_ZSt9terminatev>
   1e018:	20000034 	.word	0x20000034
   1e01c:	20000038 	.word	0x20000038
   1e020:	0001e025 	.word	0x0001e025

0001e024 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   1e024:	2801      	cmp	r0, #1
   1e026:	b510      	push	{r4, lr}
   1e028:	f1a1 0320 	sub.w	r3, r1, #32	; 0x20
   1e02c:	d80c      	bhi.n	1e048 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x24>
   1e02e:	685b      	ldr	r3, [r3, #4]
   1e030:	b13b      	cbz	r3, 1e042 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x1e>
   1e032:	f101 0458 	add.w	r4, r1, #88	; 0x58
   1e036:	4620      	mov	r0, r4
   1e038:	4798      	blx	r3
   1e03a:	4620      	mov	r0, r4
   1e03c:	f000 f812 	bl	1e064 <__cxa_free_exception>
   1e040:	bd10      	pop	{r4, pc}
   1e042:	f101 0458 	add.w	r4, r1, #88	; 0x58
   1e046:	e7f8      	b.n	1e03a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
   1e048:	68d8      	ldr	r0, [r3, #12]
   1e04a:	f7fe fded 	bl	1cc28 <_ZN10__cxxabiv111__terminateEPFvvE>
   1e04e:	46c0      	nop			(mov r8, r8)

0001e050 <__cxa_get_globals_fast>:
   1e050:	4800      	ldr	r0, [pc, #0]	(1e054 <__cxa_get_globals_fast+0x4>)
   1e052:	4770      	bx	lr
   1e054:	20000680 	.word	0x20000680

0001e058 <__cxa_get_globals>:
   1e058:	4800      	ldr	r0, [pc, #0]	(1e05c <__cxa_get_globals+0x4>)
   1e05a:	4770      	bx	lr
   1e05c:	20000680 	.word	0x20000680

0001e060 <_GLOBAL__I___cxa_allocate_exception>:
   1e060:	4770      	bx	lr
   1e062:	46c0      	nop			(mov r8, r8)

0001e064 <__cxa_free_exception>:
   1e064:	b500      	push	{lr}
   1e066:	4a0c      	ldr	r2, [pc, #48]	(1e098 <__cxa_free_exception+0x34>)
   1e068:	b081      	sub	sp, #4
   1e06a:	4282      	cmp	r2, r0
   1e06c:	d803      	bhi.n	1e076 <__cxa_free_exception+0x12>
   1e06e:	f502 6300 	add.w	r3, r2, #2048	; 0x800
   1e072:	4298      	cmp	r0, r3
   1e074:	d304      	bcc.n	1e080 <__cxa_free_exception+0x1c>
   1e076:	3878      	subs	r0, #120
   1e078:	f001 ffc6 	bl	20008 <free>
   1e07c:	b001      	add	sp, #4
   1e07e:	bd00      	pop	{pc}
   1e080:	ebc2 0200 	rsb	r2, r2, r0
   1e084:	0a52      	lsrs	r2, r2, #9
   1e086:	2301      	movs	r3, #1
   1e088:	4093      	lsls	r3, r2
   1e08a:	4904      	ldr	r1, [pc, #16]	(1e09c <__cxa_free_exception+0x38>)
   1e08c:	ea6f 0303 	mvn.w	r3, r3
   1e090:	680a      	ldr	r2, [r1, #0]
   1e092:	4013      	ands	r3, r2
   1e094:	600b      	str	r3, [r1, #0]
   1e096:	e7f1      	b.n	1e07c <__cxa_free_exception+0x18>
   1e098:	20000690 	.word	0x20000690
   1e09c:	20000e90 	.word	0x20000e90

0001e0a0 <__cxa_allocate_exception>:
   1e0a0:	b530      	push	{r4, r5, lr}
   1e0a2:	f100 0578 	add.w	r5, r0, #120	; 0x78
   1e0a6:	b081      	sub	sp, #4
   1e0a8:	4628      	mov	r0, r5
   1e0aa:	f001 ffb9 	bl	20020 <malloc>
   1e0ae:	4604      	mov	r4, r0
   1e0b0:	b168      	cbz	r0, 1e0ce <__cxa_allocate_exception+0x2e>
   1e0b2:	f7ff ffd1 	bl	1e058 <__cxa_get_globals>
   1e0b6:	6843      	ldr	r3, [r0, #4]
   1e0b8:	2100      	movs	r1, #0
   1e0ba:	3301      	adds	r3, #1
   1e0bc:	6043      	str	r3, [r0, #4]
   1e0be:	2278      	movs	r2, #120
   1e0c0:	4620      	mov	r0, r4
   1e0c2:	f002 fa3d 	bl	20540 <memset>
   1e0c6:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1e0ca:	b001      	add	sp, #4
   1e0cc:	bd30      	pop	{r4, r5, pc}
   1e0ce:	4912      	ldr	r1, [pc, #72]	(1e118 <__cxa_allocate_exception+0x78>)
   1e0d0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   1e0d4:	680a      	ldr	r2, [r1, #0]
   1e0d6:	bf9c      	itt	ls
   1e0d8:	4600      	movls	r0, r0
   1e0da:	4613      	movls	r3, r2
   1e0dc:	d812      	bhi.n	1e104 <__cxa_allocate_exception+0x64>
   1e0de:	f013 0f01 	tst.w	r3, #1	; 0x1
   1e0e2:	d006      	beq.n	1e0f2 <__cxa_allocate_exception+0x52>
   1e0e4:	3001      	adds	r0, #1
   1e0e6:	2804      	cmp	r0, #4
   1e0e8:	d00c      	beq.n	1e104 <__cxa_allocate_exception+0x64>
   1e0ea:	085b      	lsrs	r3, r3, #1
   1e0ec:	f013 0f01 	tst.w	r3, #1	; 0x1
   1e0f0:	d1f8      	bne.n	1e0e4 <__cxa_allocate_exception+0x44>
   1e0f2:	2301      	movs	r3, #1
   1e0f4:	4083      	lsls	r3, r0
   1e0f6:	4313      	orrs	r3, r2
   1e0f8:	600b      	str	r3, [r1, #0]
   1e0fa:	4b08      	ldr	r3, [pc, #32]	(1e11c <__cxa_allocate_exception+0x7c>)
   1e0fc:	0242      	lsls	r2, r0, #9
   1e0fe:	eb03 0402 	add.w	r4, r3, r2
   1e102:	e7d6      	b.n	1e0b2 <__cxa_allocate_exception+0x12>
   1e104:	f7fe fd9e 	bl	1cc44 <_ZSt9terminatev>
   1e108:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1e10c:	d001      	beq.n	1e112 <__cxa_allocate_exception+0x72>
   1e10e:	f7f9 f87b 	bl	17208 <__cxa_end_cleanup>
   1e112:	f7ff fbf1 	bl	1d8f8 <__cxa_call_unexpected>
   1e116:	46c0      	nop			(mov r8, r8)
   1e118:	20000e90 	.word	0x20000e90
   1e11c:	20000690 	.word	0x20000690

0001e120 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
   1e120:	2001      	movs	r0, #1
   1e122:	4770      	bx	lr

0001e124 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   1e124:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e126:	2b01      	cmp	r3, #1
   1e128:	b081      	sub	sp, #4
   1e12a:	4605      	mov	r5, r0
   1e12c:	460e      	mov	r6, r1
   1e12e:	4617      	mov	r7, r2
   1e130:	461c      	mov	r4, r3
   1e132:	d908      	bls.n	1e146 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x22>
   1e134:	68e8      	ldr	r0, [r5, #12]
   1e136:	1ca3      	adds	r3, r4, #2
   1e138:	6802      	ldr	r2, [r0, #0]
   1e13a:	68f1      	ldr	r1, [r6, #12]
   1e13c:	6914      	ldr	r4, [r2, #16]
   1e13e:	463a      	mov	r2, r7
   1e140:	47a0      	blx	r4
   1e142:	b001      	add	sp, #4
   1e144:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e146:	68c0      	ldr	r0, [r0, #12]
   1e148:	4906      	ldr	r1, [pc, #24]	(1e164 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x40>)
   1e14a:	f7ff fed5 	bl	1def8 <_ZNKSt9type_infoeqERKS_>
   1e14e:	2800      	cmp	r0, #0
   1e150:	d0f0      	beq.n	1e134 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x10>
   1e152:	68f0      	ldr	r0, [r6, #12]
   1e154:	6803      	ldr	r3, [r0, #0]
   1e156:	68da      	ldr	r2, [r3, #12]
   1e158:	4790      	blx	r2
   1e15a:	f080 0001 	eor.w	r0, r0, #1	; 0x1
   1e15e:	b2c0      	uxtb	r0, r0
   1e160:	e7ef      	b.n	1e142 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1e>
   1e162:	46c0      	nop			(mov r8, r8)
   1e164:	00022678 	.word	0x00022678

0001e168 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
   1e168:	4b03      	ldr	r3, [pc, #12]	(1e178 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
   1e16a:	b510      	push	{r4, lr}
   1e16c:	6003      	str	r3, [r0, #0]
   1e16e:	4604      	mov	r4, r0
   1e170:	f000 f860 	bl	1e234 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
   1e174:	4620      	mov	r0, r4
   1e176:	bd10      	pop	{r4, pc}
   1e178:	00022f58 	.word	0x00022f58

0001e17c <_ZN10__cxxabiv119__pointer_type_infoD2Ev>:
   1e17c:	4b03      	ldr	r3, [pc, #12]	(1e18c <_ZN10__cxxabiv119__pointer_type_infoD2Ev+0x10>)
   1e17e:	b510      	push	{r4, lr}
   1e180:	6003      	str	r3, [r0, #0]
   1e182:	4604      	mov	r4, r0
   1e184:	f000 f856 	bl	1e234 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
   1e188:	4620      	mov	r0, r4
   1e18a:	bd10      	pop	{r4, pc}
   1e18c:	00022f58 	.word	0x00022f58

0001e190 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
   1e190:	4b05      	ldr	r3, [pc, #20]	(1e1a8 <_ZN10__cxxabiv119__pointer_type_infoD0Ev+0x18>)
   1e192:	b510      	push	{r4, lr}
   1e194:	6003      	str	r3, [r0, #0]
   1e196:	4604      	mov	r4, r0
   1e198:	f000 f84c 	bl	1e234 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
   1e19c:	4620      	mov	r0, r4
   1e19e:	f7f0 f8ed 	bl	e37c <_ZdlPv>
   1e1a2:	4620      	mov	r0, r4
   1e1a4:	bd10      	pop	{r4, pc}
   1e1a6:	46c0      	nop			(mov r8, r8)
   1e1a8:	00022f58 	.word	0x00022f58

0001e1ac <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   1e1ac:	68c0      	ldr	r0, [r0, #12]
   1e1ae:	b510      	push	{r4, lr}
   1e1b0:	f8d0 c000 	ldr.w	ip, [r0]
   1e1b4:	68c9      	ldr	r1, [r1, #12]
   1e1b6:	3302      	adds	r3, #2
   1e1b8:	f8dc 4010 	ldr.w	r4, [ip, #16]
   1e1bc:	47a0      	blx	r4
   1e1be:	bd10      	pop	{r4, pc}

0001e1c0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
   1e1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e1c4:	4606      	mov	r6, r0
   1e1c6:	460d      	mov	r5, r1
   1e1c8:	4690      	mov	r8, r2
   1e1ca:	461f      	mov	r7, r3
   1e1cc:	f7ff fe94 	bl	1def8 <_ZNKSt9type_infoeqERKS_>
   1e1d0:	2800      	cmp	r0, #0
   1e1d2:	d121      	bne.n	1e218 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
   1e1d4:	6833      	ldr	r3, [r6, #0]
   1e1d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1e1da:	2d00      	cmp	r5, #0
   1e1dc:	d01e      	beq.n	1e21c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   1e1de:	682b      	ldr	r3, [r5, #0]
   1e1e0:	f853 1c04 	ldr.w	r1, [r3, #-4]
   1e1e4:	f7ff fe88 	bl	1def8 <_ZNKSt9type_infoeqERKS_>
   1e1e8:	b198      	cbz	r0, 1e212 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
   1e1ea:	f017 0f01 	tst.w	r7, #1	; 0x1
   1e1ee:	d010      	beq.n	1e212 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
   1e1f0:	68b2      	ldr	r2, [r6, #8]
   1e1f2:	68ab      	ldr	r3, [r5, #8]
   1e1f4:	4393      	bics	r3, r2
   1e1f6:	d10c      	bne.n	1e212 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
   1e1f8:	f012 0f01 	tst.w	r2, #1	; 0x1
   1e1fc:	6833      	ldr	r3, [r6, #0]
   1e1fe:	bf08      	it	eq
   1e200:	f027 0701 	biceq.w	r7, r7, #1	; 0x1
   1e204:	699c      	ldr	r4, [r3, #24]
   1e206:	4630      	mov	r0, r6
   1e208:	4629      	mov	r1, r5
   1e20a:	4642      	mov	r2, r8
   1e20c:	463b      	mov	r3, r7
   1e20e:	47a0      	blx	r4
   1e210:	e000      	b.n	1e214 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x54>
   1e212:	2000      	movs	r0, #0
   1e214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e218:	2001      	movs	r0, #1
   1e21a:	e7fb      	b.n	1e214 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x54>
   1e21c:	f7ff fa70 	bl	1d700 <__cxa_bad_typeid>

0001e220 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
   1e220:	4b03      	ldr	r3, [pc, #12]	(1e230 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
   1e222:	b510      	push	{r4, lr}
   1e224:	6003      	str	r3, [r0, #0]
   1e226:	4604      	mov	r4, r0
   1e228:	f7ff fe5a 	bl	1dee0 <_ZNSt9type_infoD2Ev>
   1e22c:	4620      	mov	r0, r4
   1e22e:	bd10      	pop	{r4, pc}
   1e230:	00022fb0 	.word	0x00022fb0

0001e234 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>:
   1e234:	4b03      	ldr	r3, [pc, #12]	(1e244 <_ZN10__cxxabiv117__pbase_type_infoD2Ev+0x10>)
   1e236:	b510      	push	{r4, lr}
   1e238:	6003      	str	r3, [r0, #0]
   1e23a:	4604      	mov	r4, r0
   1e23c:	f7ff fe50 	bl	1dee0 <_ZNSt9type_infoD2Ev>
   1e240:	4620      	mov	r0, r4
   1e242:	bd10      	pop	{r4, pc}
   1e244:	00022fb0 	.word	0x00022fb0

0001e248 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
   1e248:	4b05      	ldr	r3, [pc, #20]	(1e260 <_ZN10__cxxabiv117__pbase_type_infoD0Ev+0x18>)
   1e24a:	b510      	push	{r4, lr}
   1e24c:	6003      	str	r3, [r0, #0]
   1e24e:	4604      	mov	r4, r0
   1e250:	f7ff fe46 	bl	1dee0 <_ZNSt9type_infoD2Ev>
   1e254:	4620      	mov	r0, r4
   1e256:	f7f0 f891 	bl	e37c <_ZdlPv>
   1e25a:	4620      	mov	r0, r4
   1e25c:	bd10      	pop	{r4, pc}
   1e25e:	46c0      	nop			(mov r8, r8)
   1e260:	00022fb0 	.word	0x00022fb0

0001e264 <cos>:
   1e264:	b530      	push	{r4, r5, lr}
   1e266:	4b1e      	ldr	r3, [pc, #120]	(1e2e0 <cos+0x7c>)
   1e268:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1e26c:	429a      	cmp	r2, r3
   1e26e:	b087      	sub	sp, #28
   1e270:	dc02      	bgt.n	1e278 <cos+0x14>
   1e272:	2200      	movs	r2, #0
   1e274:	2300      	movs	r3, #0
   1e276:	e017      	b.n	1e2a8 <cos+0x44>
   1e278:	4b1a      	ldr	r3, [pc, #104]	(1e2e4 <cos+0x80>)
   1e27a:	429a      	cmp	r2, r3
   1e27c:	dd04      	ble.n	1e288 <cos+0x24>
   1e27e:	4602      	mov	r2, r0
   1e280:	460b      	mov	r3, r1
   1e282:	f7fb fde1 	bl	19e48 <__aeabi_dsub>
   1e286:	e029      	b.n	1e2dc <cos+0x78>
   1e288:	aa02      	add	r2, sp, #8
   1e28a:	f000 f9a9 	bl	1e5e0 <__ieee754_rem_pio2>
   1e28e:	f000 0303 	and.w	r3, r0, #3	; 0x3
   1e292:	2b01      	cmp	r3, #1
   1e294:	d00b      	beq.n	1e2ae <cos+0x4a>
   1e296:	2b02      	cmp	r3, #2
   1e298:	d011      	beq.n	1e2be <cos+0x5a>
   1e29a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e29e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   1e2a2:	b9ab      	cbnz	r3, 1e2d0 <cos+0x6c>
   1e2a4:	4622      	mov	r2, r4
   1e2a6:	462b      	mov	r3, r5
   1e2a8:	f000 fc82 	bl	1ebb0 <__kernel_cos>
   1e2ac:	e016      	b.n	1e2dc <cos+0x78>
   1e2ae:	9300      	str	r3, [sp, #0]
   1e2b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e2b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e2b8:	f001 f8ea 	bl	1f490 <__kernel_sin>
   1e2bc:	e005      	b.n	1e2ca <cos+0x66>
   1e2be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e2c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e2c6:	f000 fc73 	bl	1ebb0 <__kernel_cos>
   1e2ca:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1e2ce:	e005      	b.n	1e2dc <cos+0x78>
   1e2d0:	2301      	movs	r3, #1
   1e2d2:	9300      	str	r3, [sp, #0]
   1e2d4:	4622      	mov	r2, r4
   1e2d6:	462b      	mov	r3, r5
   1e2d8:	f001 f8da 	bl	1f490 <__kernel_sin>
   1e2dc:	b007      	add	sp, #28
   1e2de:	bd30      	pop	{r4, r5, pc}
   1e2e0:	3fe921fb 	.word	0x3fe921fb
   1e2e4:	7fefffff 	.word	0x7fefffff

0001e2e8 <sin>:
   1e2e8:	b530      	push	{r4, r5, lr}
   1e2ea:	4b20      	ldr	r3, [pc, #128]	(1e36c <sin+0x84>)
   1e2ec:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1e2f0:	429a      	cmp	r2, r3
   1e2f2:	b087      	sub	sp, #28
   1e2f4:	dc04      	bgt.n	1e300 <sin+0x18>
   1e2f6:	2300      	movs	r3, #0
   1e2f8:	9300      	str	r3, [sp, #0]
   1e2fa:	2200      	movs	r2, #0
   1e2fc:	2300      	movs	r3, #0
   1e2fe:	e019      	b.n	1e334 <sin+0x4c>
   1e300:	4b1b      	ldr	r3, [pc, #108]	(1e370 <sin+0x88>)
   1e302:	429a      	cmp	r2, r3
   1e304:	dd04      	ble.n	1e310 <sin+0x28>
   1e306:	4602      	mov	r2, r0
   1e308:	460b      	mov	r3, r1
   1e30a:	f7fb fd9d 	bl	19e48 <__aeabi_dsub>
   1e30e:	e02a      	b.n	1e366 <sin+0x7e>
   1e310:	aa02      	add	r2, sp, #8
   1e312:	f000 f965 	bl	1e5e0 <__ieee754_rem_pio2>
   1e316:	f000 0303 	and.w	r3, r0, #3	; 0x3
   1e31a:	2b01      	cmp	r3, #1
   1e31c:	d00d      	beq.n	1e33a <sin+0x52>
   1e31e:	2b02      	cmp	r3, #2
   1e320:	d012      	beq.n	1e348 <sin+0x60>
   1e322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e326:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   1e32a:	b9b3      	cbnz	r3, 1e35a <sin+0x72>
   1e32c:	2301      	movs	r3, #1
   1e32e:	9300      	str	r3, [sp, #0]
   1e330:	4622      	mov	r2, r4
   1e332:	462b      	mov	r3, r5
   1e334:	f001 f8ac 	bl	1f490 <__kernel_sin>
   1e338:	e015      	b.n	1e366 <sin+0x7e>
   1e33a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e33e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e342:	f000 fc35 	bl	1ebb0 <__kernel_cos>
   1e346:	e00e      	b.n	1e366 <sin+0x7e>
   1e348:	2301      	movs	r3, #1
   1e34a:	9300      	str	r3, [sp, #0]
   1e34c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e354:	f001 f89c 	bl	1f490 <__kernel_sin>
   1e358:	e003      	b.n	1e362 <sin+0x7a>
   1e35a:	4622      	mov	r2, r4
   1e35c:	462b      	mov	r3, r5
   1e35e:	f000 fc27 	bl	1ebb0 <__kernel_cos>
   1e362:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1e366:	b007      	add	sp, #28
   1e368:	bd30      	pop	{r4, r5, pc}
   1e36a:	46c0      	nop			(mov r8, r8)
   1e36c:	3fe921fb 	.word	0x3fe921fb
   1e370:	7fefffff 	.word	0x7fefffff

0001e374 <atan2>:
   1e374:	b500      	push	{lr}
   1e376:	b081      	sub	sp, #4
   1e378:	f000 f856 	bl	1e428 <__ieee754_atan2>
   1e37c:	b001      	add	sp, #4
   1e37e:	bd00      	pop	{pc}

0001e380 <sqrt>:
   1e380:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e382:	b08f      	sub	sp, #60
   1e384:	4604      	mov	r4, r0
   1e386:	460d      	mov	r5, r1
   1e388:	f000 fb3e 	bl	1ea08 <__ieee754_sqrt>
   1e38c:	4a24      	ldr	r2, [pc, #144]	(1e420 <sqrt+0xa0>)
   1e38e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1e392:	f992 3000 	ldrsb.w	r3, [r2]
   1e396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1e39a:	d03c      	beq.n	1e416 <sqrt+0x96>
   1e39c:	4620      	mov	r0, r4
   1e39e:	4629      	mov	r1, r5
   1e3a0:	f001 fb56 	bl	1fa50 <__isnand>
   1e3a4:	9001      	str	r0, [sp, #4]
   1e3a6:	2800      	cmp	r0, #0
   1e3a8:	d135      	bne.n	1e416 <sqrt+0x96>
   1e3aa:	2600      	movs	r6, #0
   1e3ac:	2700      	movs	r7, #0
   1e3ae:	4620      	mov	r0, r4
   1e3b0:	4629      	mov	r1, r5
   1e3b2:	4632      	mov	r2, r6
   1e3b4:	463b      	mov	r3, r7
   1e3b6:	f7fc f96b 	bl	1a690 <__aeabi_dcmplt>
   1e3ba:	2800      	cmp	r0, #0
   1e3bc:	d02b      	beq.n	1e416 <sqrt+0x96>
   1e3be:	2301      	movs	r3, #1
   1e3c0:	9304      	str	r3, [sp, #16]
   1e3c2:	4a17      	ldr	r2, [pc, #92]	(1e420 <sqrt+0xa0>)
   1e3c4:	4b17      	ldr	r3, [pc, #92]	(1e424 <sqrt+0xa4>)
   1e3c6:	e9cd 4508 	strd	r4, r5, [sp, #32]
   1e3ca:	9305      	str	r3, [sp, #20]
   1e3cc:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1e3d0:	9b01      	ldr	r3, [sp, #4]
   1e3d2:	7814      	ldrb	r4, [r2, #0]
   1e3d4:	930c      	str	r3, [sp, #48]
   1e3d6:	b914      	cbnz	r4, 1e3de <sqrt+0x5e>
   1e3d8:	e9cd 670a 	strd	r6, r7, [sp, #40]
   1e3dc:	e009      	b.n	1e3f2 <sqrt+0x72>
   1e3de:	4630      	mov	r0, r6
   1e3e0:	4639      	mov	r1, r7
   1e3e2:	4632      	mov	r2, r6
   1e3e4:	463b      	mov	r3, r7
   1e3e6:	f7fc f80d 	bl	1a404 <__aeabi_ddiv>
   1e3ea:	2c02      	cmp	r4, #2
   1e3ec:	e9cd 010a 	strd	r0, r1, [sp, #40]
   1e3f0:	d003      	beq.n	1e3fa <sqrt+0x7a>
   1e3f2:	a804      	add	r0, sp, #16
   1e3f4:	f001 fb3a 	bl	1fa6c <matherr>
   1e3f8:	b918      	cbnz	r0, 1e402 <sqrt+0x82>
   1e3fa:	f001 fbc5 	bl	1fb88 <__errno>
   1e3fe:	2321      	movs	r3, #33
   1e400:	6003      	str	r3, [r0, #0]
   1e402:	9b0c      	ldr	r3, [sp, #48]
   1e404:	b11b      	cbz	r3, 1e40e <sqrt+0x8e>
   1e406:	f001 fbbf 	bl	1fb88 <__errno>
   1e40a:	9b0c      	ldr	r3, [sp, #48]
   1e40c:	6003      	str	r3, [r0, #0]
   1e40e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]
   1e412:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1e416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e41a:	b00f      	add	sp, #60
   1e41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e41e:	46c0      	nop			(mov r8, r8)
   1e420:	20000040 	.word	0x20000040
   1e424:	00023000 	.word	0x00023000

0001e428 <__ieee754_atan2>:
   1e428:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e42a:	b089      	sub	sp, #36
   1e42c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1e430:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   1e434:	9307      	str	r3, [sp, #28]
   1e436:	f1c2 0300 	rsb	r3, r2, #0	; 0x0
   1e43a:	4313      	orrs	r3, r2
   1e43c:	4616      	mov	r6, r2
   1e43e:	4a66      	ldr	r2, [pc, #408]	(1e5d8 <__ieee754_atan2+0x1b0>)
   1e440:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
   1e444:	4293      	cmp	r3, r2
   1e446:	4604      	mov	r4, r0
   1e448:	460d      	mov	r5, r1
   1e44a:	9001      	str	r0, [sp, #4]
   1e44c:	d808      	bhi.n	1e460 <__ieee754_atan2+0x38>
   1e44e:	f1c0 0300 	rsb	r3, r0, #0	; 0x0
   1e452:	4303      	orrs	r3, r0
   1e454:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   1e458:	ea4c 73d3 	orr.w	r3, ip, r3, lsr #31
   1e45c:	4293      	cmp	r3, r2
   1e45e:	d904      	bls.n	1e46a <__ieee754_atan2+0x42>
   1e460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e464:	f7fb fcf2 	bl	19e4c <__adddf3>
   1e468:	e08e      	b.n	1e588 <__ieee754_atan2+0x160>
   1e46a:	9c07      	ldr	r4, [sp, #28]
   1e46c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   1e470:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   1e474:	4333      	orrs	r3, r6
   1e476:	d102      	bne.n	1e47e <__ieee754_atan2+0x56>
   1e478:	f001 f8c2 	bl	1f600 <atan>
   1e47c:	e084      	b.n	1e588 <__ieee754_atan2+0x160>
   1e47e:	9a07      	ldr	r2, [sp, #28]
   1e480:	1793      	asrs	r3, r2, #30
   1e482:	f003 0302 	and.w	r3, r3, #2	; 0x2
   1e486:	ea43 74d1 	orr.w	r4, r3, r1, lsr #31
   1e48a:	9b01      	ldr	r3, [sp, #4]
   1e48c:	ea5c 0303 	orrs.w	r3, ip, r3
   1e490:	d105      	bne.n	1e49e <__ieee754_atan2+0x76>
   1e492:	2c03      	cmp	r4, #3
   1e494:	d803      	bhi.n	1e49e <__ieee754_atan2+0x76>
   1e496:	e8df f004 	tbb	[pc, r4]
   1e49a:	7777      	.short	0x7777
   1e49c:	2b28      	.short	0x2b28
   1e49e:	433e      	orrs	r6, r7
   1e4a0:	d02c      	beq.n	1e4fc <__ieee754_atan2+0xd4>
   1e4a2:	4b4d      	ldr	r3, [pc, #308]	(1e5d8 <__ieee754_atan2+0x1b0>)
   1e4a4:	429f      	cmp	r7, r3
   1e4a6:	d126      	bne.n	1e4f6 <__ieee754_atan2+0xce>
   1e4a8:	45bc      	cmp	ip, r7
   1e4aa:	d111      	bne.n	1e4d0 <__ieee754_atan2+0xa8>
   1e4ac:	2c03      	cmp	r4, #3
   1e4ae:	d822      	bhi.n	1e4f6 <__ieee754_atan2+0xce>
   1e4b0:	e8df f004 	tbb	[pc, r4]
   1e4b4:	0b080205 	.word	0x0b080205
   1e4b8:	a035      	add	r0, pc, #212	(adr r0, 1e590 <__ieee754_atan2+0x168>)
   1e4ba:	c803      	ldmia	r0!, {r0, r1}
   1e4bc:	e064      	b.n	1e588 <__ieee754_atan2+0x160>
   1e4be:	a036      	add	r0, pc, #216	(adr r0, 1e598 <__ieee754_atan2+0x170>)
   1e4c0:	c803      	ldmia	r0!, {r0, r1}
   1e4c2:	e061      	b.n	1e588 <__ieee754_atan2+0x160>
   1e4c4:	a036      	add	r0, pc, #216	(adr r0, 1e5a0 <__ieee754_atan2+0x178>)
   1e4c6:	c803      	ldmia	r0!, {r0, r1}
   1e4c8:	e05e      	b.n	1e588 <__ieee754_atan2+0x160>
   1e4ca:	a037      	add	r0, pc, #220	(adr r0, 1e5a8 <__ieee754_atan2+0x180>)
   1e4cc:	c803      	ldmia	r0!, {r0, r1}
   1e4ce:	e05b      	b.n	1e588 <__ieee754_atan2+0x160>
   1e4d0:	2c03      	cmp	r4, #3
   1e4d2:	d810      	bhi.n	1e4f6 <__ieee754_atan2+0xce>
   1e4d4:	e8df f004 	tbb	[pc, r4]
   1e4d8:	0c090206 	.word	0x0c090206
   1e4dc:	2000      	movs	r0, #0
   1e4de:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1e4e2:	e051      	b.n	1e588 <__ieee754_atan2+0x160>
   1e4e4:	2000      	movs	r0, #0
   1e4e6:	2100      	movs	r1, #0
   1e4e8:	e04e      	b.n	1e588 <__ieee754_atan2+0x160>
   1e4ea:	a031      	add	r0, pc, #196	(adr r0, 1e5b0 <__ieee754_atan2+0x188>)
   1e4ec:	c803      	ldmia	r0!, {r0, r1}
   1e4ee:	e04b      	b.n	1e588 <__ieee754_atan2+0x160>
   1e4f0:	a031      	add	r0, pc, #196	(adr r0, 1e5b8 <__ieee754_atan2+0x190>)
   1e4f2:	c803      	ldmia	r0!, {r0, r1}
   1e4f4:	e048      	b.n	1e588 <__ieee754_atan2+0x160>
   1e4f6:	4b38      	ldr	r3, [pc, #224]	(1e5d8 <__ieee754_atan2+0x1b0>)
   1e4f8:	459c      	cmp	ip, r3
   1e4fa:	d107      	bne.n	1e50c <__ieee754_atan2+0xe4>
   1e4fc:	2d00      	cmp	r5, #0
   1e4fe:	db02      	blt.n	1e506 <__ieee754_atan2+0xde>
   1e500:	a02f      	add	r0, pc, #188	(adr r0, 1e5c0 <__ieee754_atan2+0x198>)
   1e502:	c803      	ldmia	r0!, {r0, r1}
   1e504:	e040      	b.n	1e588 <__ieee754_atan2+0x160>
   1e506:	a030      	add	r0, pc, #192	(adr r0, 1e5c8 <__ieee754_atan2+0x1a0>)
   1e508:	c803      	ldmia	r0!, {r0, r1}
   1e50a:	e03d      	b.n	1e588 <__ieee754_atan2+0x160>
   1e50c:	ebc7 030c 	rsb	r3, r7, ip
   1e510:	151b      	asrs	r3, r3, #20
   1e512:	2b3c      	cmp	r3, #60
   1e514:	dd02      	ble.n	1e51c <__ieee754_atan2+0xf4>
   1e516:	a22a      	add	r2, pc, #168	(adr r2, 1e5c0 <__ieee754_atan2+0x198>)
   1e518:	ca0c      	ldmia	r2!, {r2, r3}
   1e51a:	e015      	b.n	1e548 <__ieee754_atan2+0x120>
   1e51c:	9a07      	ldr	r2, [sp, #28]
   1e51e:	f113 0f3c 	cmn.w	r3, #60	; 0x3c
   1e522:	bfac      	ite	ge
   1e524:	2300      	movge	r3, #0
   1e526:	2301      	movlt	r3, #1
   1e528:	ea13 72d2 	ands.w	r2, r3, r2, lsr #31
   1e52c:	d002      	beq.n	1e534 <__ieee754_atan2+0x10c>
   1e52e:	2200      	movs	r2, #0
   1e530:	2300      	movs	r3, #0
   1e532:	e009      	b.n	1e548 <__ieee754_atan2+0x120>
   1e534:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e538:	f7fb ff64 	bl	1a404 <__aeabi_ddiv>
   1e53c:	f001 fa08 	bl	1f950 <fabs>
   1e540:	f001 f85e 	bl	1f600 <atan>
   1e544:	4602      	mov	r2, r0
   1e546:	460b      	mov	r3, r1
   1e548:	2c01      	cmp	r4, #1
   1e54a:	d003      	beq.n	1e554 <__ieee754_atan2+0x12c>
   1e54c:	2c02      	cmp	r4, #2
   1e54e:	d006      	beq.n	1e55e <__ieee754_atan2+0x136>
   1e550:	b984      	cbnz	r4, 1e574 <__ieee754_atan2+0x14c>
   1e552:	e001      	b.n	1e558 <__ieee754_atan2+0x130>
   1e554:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1e558:	4610      	mov	r0, r2
   1e55a:	4619      	mov	r1, r3
   1e55c:	e014      	b.n	1e588 <__ieee754_atan2+0x160>
   1e55e:	4610      	mov	r0, r2
   1e560:	4619      	mov	r1, r3
   1e562:	a21b      	add	r2, pc, #108	(adr r2, 1e5d0 <__ieee754_atan2+0x1a8>)
   1e564:	ca0c      	ldmia	r2!, {r2, r3}
   1e566:	f7fb fc6f 	bl	19e48 <__aeabi_dsub>
   1e56a:	4602      	mov	r2, r0
   1e56c:	460b      	mov	r3, r1
   1e56e:	a010      	add	r0, pc, #64	(adr r0, 1e5b0 <__ieee754_atan2+0x188>)
   1e570:	c803      	ldmia	r0!, {r0, r1}
   1e572:	e007      	b.n	1e584 <__ieee754_atan2+0x15c>
   1e574:	4610      	mov	r0, r2
   1e576:	4619      	mov	r1, r3
   1e578:	a215      	add	r2, pc, #84	(adr r2, 1e5d0 <__ieee754_atan2+0x1a8>)
   1e57a:	ca0c      	ldmia	r2!, {r2, r3}
   1e57c:	f7fb fc64 	bl	19e48 <__aeabi_dsub>
   1e580:	a20b      	add	r2, pc, #44	(adr r2, 1e5b0 <__ieee754_atan2+0x188>)
   1e582:	ca0c      	ldmia	r2!, {r2, r3}
   1e584:	f7fb fc60 	bl	19e48 <__aeabi_dsub>
   1e588:	b009      	add	sp, #36
   1e58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e58c:	46c0      	nop			(mov r8, r8)
   1e58e:	46c0      	nop			(mov r8, r8)
   1e590:	54442d18 	.word	0x54442d18
   1e594:	bfe921fb 	.word	0xbfe921fb
   1e598:	54442d18 	.word	0x54442d18
   1e59c:	3fe921fb 	.word	0x3fe921fb
   1e5a0:	7f3321d2 	.word	0x7f3321d2
   1e5a4:	4002d97c 	.word	0x4002d97c
   1e5a8:	7f3321d2 	.word	0x7f3321d2
   1e5ac:	c002d97c 	.word	0xc002d97c
   1e5b0:	54442d18 	.word	0x54442d18
   1e5b4:	400921fb 	.word	0x400921fb
   1e5b8:	54442d18 	.word	0x54442d18
   1e5bc:	c00921fb 	.word	0xc00921fb
   1e5c0:	54442d18 	.word	0x54442d18
   1e5c4:	3ff921fb 	.word	0x3ff921fb
   1e5c8:	54442d18 	.word	0x54442d18
   1e5cc:	bff921fb 	.word	0xbff921fb
   1e5d0:	33145c07 	.word	0x33145c07
   1e5d4:	3ca1a626 	.word	0x3ca1a626
   1e5d8:	7ff00000 	.word	0x7ff00000
   1e5dc:	46c046c0 	.word	0x46c046c0

0001e5e0 <__ieee754_rem_pio2>:
   1e5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5e2:	4b9b      	ldr	r3, [pc, #620]	(1e850 <__ieee754_rem_pio2+0x270>)
   1e5e4:	b093      	sub	sp, #76
   1e5e6:	9206      	str	r2, [sp, #24]
   1e5e8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1e5ec:	429a      	cmp	r2, r3
   1e5ee:	910a      	str	r1, [sp, #40]
   1e5f0:	9209      	str	r2, [sp, #36]
   1e5f2:	dc09      	bgt.n	1e608 <__ieee754_rem_pio2+0x28>
   1e5f4:	9b06      	ldr	r3, [sp, #24]
   1e5f6:	9e06      	ldr	r6, [sp, #24]
   1e5f8:	e883 0003 	stmia.w	r3, {r0, r1}
   1e5fc:	2200      	movs	r2, #0
   1e5fe:	2300      	movs	r3, #0
   1e600:	e9c6 2302 	strd	r2, r3, [r6, #8]
   1e604:	2200      	movs	r2, #0
   1e606:	e17f      	b.n	1e908 <__ieee754_rem_pio2+0x328>
   1e608:	4b92      	ldr	r3, [pc, #584]	(1e854 <__ieee754_rem_pio2+0x274>)
   1e60a:	9a09      	ldr	r2, [sp, #36]
   1e60c:	429a      	cmp	r2, r3
   1e60e:	dc7e      	bgt.n	1e70e <__ieee754_rem_pio2+0x12e>
   1e610:	9b0a      	ldr	r3, [sp, #40]
   1e612:	2b00      	cmp	r3, #0
   1e614:	dd3a      	ble.n	1e68c <__ieee754_rem_pio2+0xac>
   1e616:	a282      	add	r2, pc, #520	(adr r2, 1e820 <__ieee754_rem_pio2+0x240>)
   1e618:	ca0c      	ldmia	r2!, {r2, r3}
   1e61a:	f7fb fc15 	bl	19e48 <__aeabi_dsub>
   1e61e:	4b8e      	ldr	r3, [pc, #568]	(1e858 <__ieee754_rem_pio2+0x278>)
   1e620:	9e09      	ldr	r6, [sp, #36]
   1e622:	4604      	mov	r4, r0
   1e624:	429e      	cmp	r6, r3
   1e626:	460d      	mov	r5, r1
   1e628:	d015      	beq.n	1e656 <__ieee754_rem_pio2+0x76>
   1e62a:	a27f      	add	r2, pc, #508	(adr r2, 1e828 <__ieee754_rem_pio2+0x248>)
   1e62c:	ca0c      	ldmia	r2!, {r2, r3}
   1e62e:	f7fb fc0b 	bl	19e48 <__aeabi_dsub>
   1e632:	4602      	mov	r2, r0
   1e634:	9806      	ldr	r0, [sp, #24]
   1e636:	460b      	mov	r3, r1
   1e638:	e880 000c 	stmia.w	r0, {r2, r3}
   1e63c:	4629      	mov	r1, r5
   1e63e:	4620      	mov	r0, r4
   1e640:	f7fb fc02 	bl	19e48 <__aeabi_dsub>
   1e644:	a278      	add	r2, pc, #480	(adr r2, 1e828 <__ieee754_rem_pio2+0x248>)
   1e646:	ca0c      	ldmia	r2!, {r2, r3}
   1e648:	f7fb fbfe 	bl	19e48 <__aeabi_dsub>
   1e64c:	9a06      	ldr	r2, [sp, #24]
   1e64e:	2301      	movs	r3, #1
   1e650:	e9c2 0102 	strd	r0, r1, [r2, #8]
   1e654:	e168      	b.n	1e928 <__ieee754_rem_pio2+0x348>
   1e656:	a276      	add	r2, pc, #472	(adr r2, 1e830 <__ieee754_rem_pio2+0x250>)
   1e658:	ca0c      	ldmia	r2!, {r2, r3}
   1e65a:	f7fb fbf5 	bl	19e48 <__aeabi_dsub>
   1e65e:	a276      	add	r2, pc, #472	(adr r2, 1e838 <__ieee754_rem_pio2+0x258>)
   1e660:	ca0c      	ldmia	r2!, {r2, r3}
   1e662:	4604      	mov	r4, r0
   1e664:	460d      	mov	r5, r1
   1e666:	f7fb fbef 	bl	19e48 <__aeabi_dsub>
   1e66a:	9e06      	ldr	r6, [sp, #24]
   1e66c:	4602      	mov	r2, r0
   1e66e:	460b      	mov	r3, r1
   1e670:	e886 000c 	stmia.w	r6, {r2, r3}
   1e674:	4620      	mov	r0, r4
   1e676:	4629      	mov	r1, r5
   1e678:	f7fb fbe6 	bl	19e48 <__aeabi_dsub>
   1e67c:	a26e      	add	r2, pc, #440	(adr r2, 1e838 <__ieee754_rem_pio2+0x258>)
   1e67e:	ca0c      	ldmia	r2!, {r2, r3}
   1e680:	f7fb fbe2 	bl	19e48 <__aeabi_dsub>
   1e684:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1e688:	2001      	movs	r0, #1
   1e68a:	e1a8      	b.n	1e9de <__ieee754_rem_pio2+0x3fe>
   1e68c:	a264      	add	r2, pc, #400	(adr r2, 1e820 <__ieee754_rem_pio2+0x240>)
   1e68e:	ca0c      	ldmia	r2!, {r2, r3}
   1e690:	f7fb fbdc 	bl	19e4c <__adddf3>
   1e694:	4b70      	ldr	r3, [pc, #448]	(1e858 <__ieee754_rem_pio2+0x278>)
   1e696:	460d      	mov	r5, r1
   1e698:	9909      	ldr	r1, [sp, #36]
   1e69a:	4604      	mov	r4, r0
   1e69c:	4299      	cmp	r1, r3
   1e69e:	d017      	beq.n	1e6d0 <__ieee754_rem_pio2+0xf0>
   1e6a0:	a261      	add	r2, pc, #388	(adr r2, 1e828 <__ieee754_rem_pio2+0x248>)
   1e6a2:	ca0c      	ldmia	r2!, {r2, r3}
   1e6a4:	4620      	mov	r0, r4
   1e6a6:	4629      	mov	r1, r5
   1e6a8:	f7fb fbd0 	bl	19e4c <__adddf3>
   1e6ac:	9e06      	ldr	r6, [sp, #24]
   1e6ae:	4602      	mov	r2, r0
   1e6b0:	460b      	mov	r3, r1
   1e6b2:	e886 000c 	stmia.w	r6, {r2, r3}
   1e6b6:	4620      	mov	r0, r4
   1e6b8:	4629      	mov	r1, r5
   1e6ba:	f7fb fbc5 	bl	19e48 <__aeabi_dsub>
   1e6be:	a25a      	add	r2, pc, #360	(adr r2, 1e828 <__ieee754_rem_pio2+0x248>)
   1e6c0:	ca0c      	ldmia	r2!, {r2, r3}
   1e6c2:	f7fb fbc3 	bl	19e4c <__adddf3>
   1e6c6:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1e6ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e6ce:	e186      	b.n	1e9de <__ieee754_rem_pio2+0x3fe>
   1e6d0:	4620      	mov	r0, r4
   1e6d2:	4629      	mov	r1, r5
   1e6d4:	a256      	add	r2, pc, #344	(adr r2, 1e830 <__ieee754_rem_pio2+0x250>)
   1e6d6:	ca0c      	ldmia	r2!, {r2, r3}
   1e6d8:	f7fb fbb8 	bl	19e4c <__adddf3>
   1e6dc:	a256      	add	r2, pc, #344	(adr r2, 1e838 <__ieee754_rem_pio2+0x258>)
   1e6de:	ca0c      	ldmia	r2!, {r2, r3}
   1e6e0:	4604      	mov	r4, r0
   1e6e2:	460d      	mov	r5, r1
   1e6e4:	f7fb fbb2 	bl	19e4c <__adddf3>
   1e6e8:	460b      	mov	r3, r1
   1e6ea:	9906      	ldr	r1, [sp, #24]
   1e6ec:	4602      	mov	r2, r0
   1e6ee:	e881 000c 	stmia.w	r1, {r2, r3}
   1e6f2:	4620      	mov	r0, r4
   1e6f4:	4629      	mov	r1, r5
   1e6f6:	f7fb fba7 	bl	19e48 <__aeabi_dsub>
   1e6fa:	a24f      	add	r2, pc, #316	(adr r2, 1e838 <__ieee754_rem_pio2+0x258>)
   1e6fc:	ca0c      	ldmia	r2!, {r2, r3}
   1e6fe:	f7fb fba5 	bl	19e4c <__adddf3>
   1e702:	9a06      	ldr	r2, [sp, #24]
   1e704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e708:	e9c2 0102 	strd	r0, r1, [r2, #8]
   1e70c:	e10c      	b.n	1e928 <__ieee754_rem_pio2+0x348>
   1e70e:	4b53      	ldr	r3, [pc, #332]	(1e85c <__ieee754_rem_pio2+0x27c>)
   1e710:	9e09      	ldr	r6, [sp, #36]
   1e712:	429e      	cmp	r6, r3
   1e714:	f300 80fa 	bgt.w	1e90c <__ieee754_rem_pio2+0x32c>
   1e718:	f001 f91a 	bl	1f950 <fabs>
   1e71c:	a248      	add	r2, pc, #288	(adr r2, 1e840 <__ieee754_rem_pio2+0x260>)
   1e71e:	ca0c      	ldmia	r2!, {r2, r3}
   1e720:	4604      	mov	r4, r0
   1e722:	460d      	mov	r5, r1
   1e724:	f7fb fd44 	bl	1a1b0 <__aeabi_dmul>
   1e728:	2200      	movs	r2, #0
   1e72a:	4b4d      	ldr	r3, [pc, #308]	(1e860 <__ieee754_rem_pio2+0x280>)
   1e72c:	f7fb fb8e 	bl	19e4c <__adddf3>
   1e730:	f7fb ffd6 	bl	1a6e0 <__aeabi_d2iz>
   1e734:	9008      	str	r0, [sp, #32]
   1e736:	f7fb fcd5 	bl	1a0e4 <__aeabi_i2d>
   1e73a:	a243      	add	r2, pc, #268	(adr r2, 1e848 <__ieee754_rem_pio2+0x268>)
   1e73c:	ca0c      	ldmia	r2!, {r2, r3}
   1e73e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1e742:	f7fb fd35 	bl	1a1b0 <__aeabi_dmul>
   1e746:	4602      	mov	r2, r0
   1e748:	460b      	mov	r3, r1
   1e74a:	4620      	mov	r0, r4
   1e74c:	4629      	mov	r1, r5
   1e74e:	f7fb fb7d 	bl	19e4c <__adddf3>
   1e752:	a235      	add	r2, pc, #212	(adr r2, 1e828 <__ieee754_rem_pio2+0x248>)
   1e754:	ca0c      	ldmia	r2!, {r2, r3}
   1e756:	4606      	mov	r6, r0
   1e758:	460f      	mov	r7, r1
   1e75a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e75e:	f7fb fd27 	bl	1a1b0 <__aeabi_dmul>
   1e762:	4604      	mov	r4, r0
   1e764:	9808      	ldr	r0, [sp, #32]
   1e766:	460d      	mov	r5, r1
   1e768:	281f      	cmp	r0, #31
   1e76a:	dc07      	bgt.n	1e77c <__ieee754_rem_pio2+0x19c>
   1e76c:	4a3d      	ldr	r2, [pc, #244]	(1e864 <__ieee754_rem_pio2+0x284>)
   1e76e:	1e43      	subs	r3, r0, #1
   1e770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1e774:	9909      	ldr	r1, [sp, #36]
   1e776:	4299      	cmp	r1, r3
   1e778:	f040 809e 	bne.w	1e8b8 <__ieee754_rem_pio2+0x2d8>
   1e77c:	462b      	mov	r3, r5
   1e77e:	4630      	mov	r0, r6
   1e780:	4639      	mov	r1, r7
   1e782:	4622      	mov	r2, r4
   1e784:	f7fb fb60 	bl	19e48 <__aeabi_dsub>
   1e788:	9b06      	ldr	r3, [sp, #24]
   1e78a:	e883 0003 	stmia.w	r3, {r0, r1}
   1e78e:	0d0b      	lsrs	r3, r1, #20
   1e790:	9809      	ldr	r0, [sp, #36]
   1e792:	055b      	lsls	r3, r3, #21
   1e794:	1500      	asrs	r0, r0, #20
   1e796:	0d5b      	lsrs	r3, r3, #21
   1e798:	ebc3 0300 	rsb	r3, r3, r0
   1e79c:	2b10      	cmp	r3, #16
   1e79e:	9007      	str	r0, [sp, #28]
   1e7a0:	f340 8093 	ble.w	1e8ca <__ieee754_rem_pio2+0x2ea>
   1e7a4:	a222      	add	r2, pc, #136	(adr r2, 1e830 <__ieee754_rem_pio2+0x250>)
   1e7a6:	ca0c      	ldmia	r2!, {r2, r3}
   1e7a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e7ac:	f7fb fd00 	bl	1a1b0 <__aeabi_dmul>
   1e7b0:	4604      	mov	r4, r0
   1e7b2:	460d      	mov	r5, r1
   1e7b4:	4622      	mov	r2, r4
   1e7b6:	462b      	mov	r3, r5
   1e7b8:	4630      	mov	r0, r6
   1e7ba:	4639      	mov	r1, r7
   1e7bc:	f7fb fb44 	bl	19e48 <__aeabi_dsub>
   1e7c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1e7c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1e7c8:	4630      	mov	r0, r6
   1e7ca:	4639      	mov	r1, r7
   1e7cc:	f7fb fb3c 	bl	19e48 <__aeabi_dsub>
   1e7d0:	4622      	mov	r2, r4
   1e7d2:	462b      	mov	r3, r5
   1e7d4:	f7fb fb38 	bl	19e48 <__aeabi_dsub>
   1e7d8:	a217      	add	r2, pc, #92	(adr r2, 1e838 <__ieee754_rem_pio2+0x258>)
   1e7da:	ca0c      	ldmia	r2!, {r2, r3}
   1e7dc:	4604      	mov	r4, r0
   1e7de:	460d      	mov	r5, r1
   1e7e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e7e4:	f7fb fce4 	bl	1a1b0 <__aeabi_dmul>
   1e7e8:	4622      	mov	r2, r4
   1e7ea:	462b      	mov	r3, r5
   1e7ec:	f7fb fb2c 	bl	19e48 <__aeabi_dsub>
   1e7f0:	4604      	mov	r4, r0
   1e7f2:	460d      	mov	r5, r1
   1e7f4:	4622      	mov	r2, r4
   1e7f6:	462b      	mov	r3, r5
   1e7f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e7fc:	f7fb fb24 	bl	19e48 <__aeabi_dsub>
   1e800:	0d0b      	lsrs	r3, r1, #20
   1e802:	055b      	lsls	r3, r3, #21
   1e804:	9e07      	ldr	r6, [sp, #28]
   1e806:	0d5b      	lsrs	r3, r3, #21
   1e808:	9a06      	ldr	r2, [sp, #24]
   1e80a:	ebc3 0306 	rsb	r3, r3, r6
   1e80e:	2b31      	cmp	r3, #49
   1e810:	e882 0003 	stmia.w	r2, {r0, r1}
   1e814:	dc28      	bgt.n	1e868 <__ieee754_rem_pio2+0x288>
   1e816:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1e81a:	e056      	b.n	1e8ca <__ieee754_rem_pio2+0x2ea>
   1e81c:	46c0      	nop			(mov r8, r8)
   1e81e:	46c0      	nop			(mov r8, r8)
   1e820:	54400000 	.word	0x54400000
   1e824:	3ff921fb 	.word	0x3ff921fb
   1e828:	1a626331 	.word	0x1a626331
   1e82c:	3dd0b461 	.word	0x3dd0b461
   1e830:	1a600000 	.word	0x1a600000
   1e834:	3dd0b461 	.word	0x3dd0b461
   1e838:	2e037073 	.word	0x2e037073
   1e83c:	3ba3198a 	.word	0x3ba3198a
   1e840:	6dc9c883 	.word	0x6dc9c883
   1e844:	3fe45f30 	.word	0x3fe45f30
   1e848:	54400000 	.word	0x54400000
   1e84c:	bff921fb 	.word	0xbff921fb
   1e850:	3fe921fb 	.word	0x3fe921fb
   1e854:	4002d97b 	.word	0x4002d97b
   1e858:	3ff921fb 	.word	0x3ff921fb
   1e85c:	413921fb 	.word	0x413921fb
   1e860:	3fe00000 	.word	0x3fe00000
   1e864:	00023008 	.word	0x00023008
   1e868:	a25f      	add	r2, pc, #380	(adr r2, 1e9e8 <__ieee754_rem_pio2+0x408>)
   1e86a:	ca0c      	ldmia	r2!, {r2, r3}
   1e86c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e870:	f7fb fc9e 	bl	1a1b0 <__aeabi_dmul>
   1e874:	4604      	mov	r4, r0
   1e876:	460d      	mov	r5, r1
   1e878:	4622      	mov	r2, r4
   1e87a:	462b      	mov	r3, r5
   1e87c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e880:	f7fb fae2 	bl	19e48 <__aeabi_dsub>
   1e884:	4606      	mov	r6, r0
   1e886:	460f      	mov	r7, r1
   1e888:	4632      	mov	r2, r6
   1e88a:	463b      	mov	r3, r7
   1e88c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e890:	f7fb fada 	bl	19e48 <__aeabi_dsub>
   1e894:	4622      	mov	r2, r4
   1e896:	462b      	mov	r3, r5
   1e898:	f7fb fad6 	bl	19e48 <__aeabi_dsub>
   1e89c:	a254      	add	r2, pc, #336	(adr r2, 1e9f0 <__ieee754_rem_pio2+0x410>)
   1e89e:	ca0c      	ldmia	r2!, {r2, r3}
   1e8a0:	4604      	mov	r4, r0
   1e8a2:	460d      	mov	r5, r1
   1e8a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e8a8:	f7fb fc82 	bl	1a1b0 <__aeabi_dmul>
   1e8ac:	4622      	mov	r2, r4
   1e8ae:	462b      	mov	r3, r5
   1e8b0:	f7fb faca 	bl	19e48 <__aeabi_dsub>
   1e8b4:	4604      	mov	r4, r0
   1e8b6:	460d      	mov	r5, r1
   1e8b8:	4622      	mov	r2, r4
   1e8ba:	4630      	mov	r0, r6
   1e8bc:	4639      	mov	r1, r7
   1e8be:	462b      	mov	r3, r5
   1e8c0:	f7fb fac2 	bl	19e48 <__aeabi_dsub>
   1e8c4:	9a06      	ldr	r2, [sp, #24]
   1e8c6:	e882 0003 	stmia.w	r2, {r0, r1}
   1e8ca:	9b06      	ldr	r3, [sp, #24]
   1e8cc:	4630      	mov	r0, r6
   1e8ce:	9e06      	ldr	r6, [sp, #24]
   1e8d0:	3308      	adds	r3, #8
   1e8d2:	930b      	str	r3, [sp, #44]
   1e8d4:	4639      	mov	r1, r7
   1e8d6:	e896 000c 	ldmia.w	r6, {r2, r3}
   1e8da:	f7fb fab5 	bl	19e48 <__aeabi_dsub>
   1e8de:	4622      	mov	r2, r4
   1e8e0:	462b      	mov	r3, r5
   1e8e2:	f7fb fab1 	bl	19e48 <__aeabi_dsub>
   1e8e6:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1e8ea:	980a      	ldr	r0, [sp, #40]
   1e8ec:	2800      	cmp	r0, #0
   1e8ee:	da77      	bge.n	1e9e0 <__ieee754_rem_pio2+0x400>
   1e8f0:	6873      	ldr	r3, [r6, #4]
   1e8f2:	990b      	ldr	r1, [sp, #44]
   1e8f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1e8f8:	6073      	str	r3, [r6, #4]
   1e8fa:	684b      	ldr	r3, [r1, #4]
   1e8fc:	9a08      	ldr	r2, [sp, #32]
   1e8fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1e902:	604b      	str	r3, [r1, #4]
   1e904:	f1c2 0200 	rsb	r2, r2, #0	; 0x0
   1e908:	9208      	str	r2, [sp, #32]
   1e90a:	e069      	b.n	1e9e0 <__ieee754_rem_pio2+0x400>
   1e90c:	4b3a      	ldr	r3, [pc, #232]	(1e9f8 <__ieee754_rem_pio2+0x418>)
   1e90e:	9e09      	ldr	r6, [sp, #36]
   1e910:	429e      	cmp	r6, r3
   1e912:	dd0b      	ble.n	1e92c <__ieee754_rem_pio2+0x34c>
   1e914:	4602      	mov	r2, r0
   1e916:	460b      	mov	r3, r1
   1e918:	f7fb fa96 	bl	19e48 <__aeabi_dsub>
   1e91c:	9a06      	ldr	r2, [sp, #24]
   1e91e:	2300      	movs	r3, #0
   1e920:	e9c2 0102 	strd	r0, r1, [r2, #8]
   1e924:	e882 0003 	stmia.w	r2, {r0, r1}
   1e928:	9308      	str	r3, [sp, #32]
   1e92a:	e059      	b.n	1e9e0 <__ieee754_rem_pio2+0x400>
   1e92c:	9e09      	ldr	r6, [sp, #36]
   1e92e:	4602      	mov	r2, r0
   1e930:	1531      	asrs	r1, r6, #20
   1e932:	f5a1 6682 	sub.w	r6, r1, #1040	; 0x410
   1e936:	9809      	ldr	r0, [sp, #36]
   1e938:	3e06      	subs	r6, #6
   1e93a:	eba0 5306 	sub.w	r3, r0, r6, lsl #20
   1e93e:	4619      	mov	r1, r3
   1e940:	4610      	mov	r0, r2
   1e942:	4614      	mov	r4, r2
   1e944:	461d      	mov	r5, r3
   1e946:	f7fb fecb 	bl	1a6e0 <__aeabi_d2iz>
   1e94a:	f7fb fbcb 	bl	1a0e4 <__aeabi_i2d>
   1e94e:	4602      	mov	r2, r0
   1e950:	460b      	mov	r3, r1
   1e952:	4620      	mov	r0, r4
   1e954:	4629      	mov	r1, r5
   1e956:	e9cd 230c 	strd	r2, r3, [sp, #48]
   1e95a:	f7fb fa75 	bl	19e48 <__aeabi_dsub>
   1e95e:	2200      	movs	r2, #0
   1e960:	4b26      	ldr	r3, [pc, #152]	(1e9fc <__ieee754_rem_pio2+0x41c>)
   1e962:	f7fb fc25 	bl	1a1b0 <__aeabi_dmul>
   1e966:	460d      	mov	r5, r1
   1e968:	4604      	mov	r4, r0
   1e96a:	f7fb feb9 	bl	1a6e0 <__aeabi_d2iz>
   1e96e:	f7fb fbb9 	bl	1a0e4 <__aeabi_i2d>
   1e972:	4602      	mov	r2, r0
   1e974:	460b      	mov	r3, r1
   1e976:	4620      	mov	r0, r4
   1e978:	4629      	mov	r1, r5
   1e97a:	e9cd 230e 	strd	r2, r3, [sp, #56]
   1e97e:	f7fb fa63 	bl	19e48 <__aeabi_dsub>
   1e982:	2200      	movs	r2, #0
   1e984:	4b1d      	ldr	r3, [pc, #116]	(1e9fc <__ieee754_rem_pio2+0x41c>)
   1e986:	f7fb fc13 	bl	1a1b0 <__aeabi_dmul>
   1e98a:	e9cd 0110 	strd	r0, r1, [sp, #64]
   1e98e:	ad0c      	add	r5, sp, #48
   1e990:	2403      	movs	r4, #3
   1e992:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   1e996:	2200      	movs	r2, #0
   1e998:	2300      	movs	r3, #0
   1e99a:	4627      	mov	r7, r4
   1e99c:	3d08      	subs	r5, #8
   1e99e:	3c01      	subs	r4, #1
   1e9a0:	f7fb fe6c 	bl	1a67c <__aeabi_dcmpeq>
   1e9a4:	2800      	cmp	r0, #0
   1e9a6:	d1f4      	bne.n	1e992 <__ieee754_rem_pio2+0x3b2>
   1e9a8:	2302      	movs	r3, #2
   1e9aa:	9300      	str	r3, [sp, #0]
   1e9ac:	4b14      	ldr	r3, [pc, #80]	(1ea00 <__ieee754_rem_pio2+0x420>)
   1e9ae:	9906      	ldr	r1, [sp, #24]
   1e9b0:	9301      	str	r3, [sp, #4]
   1e9b2:	a80c      	add	r0, sp, #48
   1e9b4:	4632      	mov	r2, r6
   1e9b6:	463b      	mov	r3, r7
   1e9b8:	f000 f9da 	bl	1ed70 <__kernel_rem_pio2>
   1e9bc:	990a      	ldr	r1, [sp, #40]
   1e9be:	9008      	str	r0, [sp, #32]
   1e9c0:	2900      	cmp	r1, #0
   1e9c2:	da0d      	bge.n	1e9e0 <__ieee754_rem_pio2+0x400>
   1e9c4:	9a06      	ldr	r2, [sp, #24]
   1e9c6:	f1c0 0000 	rsb	r0, r0, #0	; 0x0
   1e9ca:	6853      	ldr	r3, [r2, #4]
   1e9cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1e9d0:	6053      	str	r3, [r2, #4]
   1e9d2:	f102 0208 	add.w	r2, r2, #8	; 0x8
   1e9d6:	6853      	ldr	r3, [r2, #4]
   1e9d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1e9dc:	6053      	str	r3, [r2, #4]
   1e9de:	9008      	str	r0, [sp, #32]
   1e9e0:	9808      	ldr	r0, [sp, #32]
   1e9e2:	b013      	add	sp, #76
   1e9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e9e6:	46c0      	nop			(mov r8, r8)
   1e9e8:	2e000000 	.word	0x2e000000
   1e9ec:	3ba3198a 	.word	0x3ba3198a
   1e9f0:	252049c1 	.word	0x252049c1
   1e9f4:	397b839a 	.word	0x397b839a
   1e9f8:	7fefffff 	.word	0x7fefffff
   1e9fc:	41700000 	.word	0x41700000
   1ea00:	00023088 	.word	0x00023088
   1ea04:	46c046c0 	.word	0x46c046c0

0001ea08 <__ieee754_sqrt>:
   1ea08:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea0a:	4b67      	ldr	r3, [pc, #412]	(1eba8 <__ieee754_sqrt+0x1a0>)
   1ea0c:	4a66      	ldr	r2, [pc, #408]	(1eba8 <__ieee754_sqrt+0x1a0>)
   1ea0e:	ea01 0303 	and.w	r3, r1, r3
   1ea12:	4604      	mov	r4, r0
   1ea14:	4293      	cmp	r3, r2
   1ea16:	b083      	sub	sp, #12
   1ea18:	460d      	mov	r5, r1
   1ea1a:	4608      	mov	r0, r1
   1ea1c:	46a4      	mov	ip, r4
   1ea1e:	d10b      	bne.n	1ea38 <__ieee754_sqrt+0x30>
   1ea20:	4622      	mov	r2, r4
   1ea22:	462b      	mov	r3, r5
   1ea24:	4620      	mov	r0, r4
   1ea26:	f7fb fbc3 	bl	1a1b0 <__aeabi_dmul>
   1ea2a:	4602      	mov	r2, r0
   1ea2c:	460b      	mov	r3, r1
   1ea2e:	4620      	mov	r0, r4
   1ea30:	4629      	mov	r1, r5
   1ea32:	f7fb fa0b 	bl	19e4c <__adddf3>
   1ea36:	e010      	b.n	1ea5a <__ieee754_sqrt+0x52>
   1ea38:	2900      	cmp	r1, #0
   1ea3a:	dc11      	bgt.n	1ea60 <__ieee754_sqrt+0x58>
   1ea3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1ea40:	4323      	orrs	r3, r4
   1ea42:	f000 80ad 	beq.w	1eba0 <__ieee754_sqrt+0x198>
   1ea46:	b159      	cbz	r1, 1ea60 <__ieee754_sqrt+0x58>
   1ea48:	4622      	mov	r2, r4
   1ea4a:	460b      	mov	r3, r1
   1ea4c:	4620      	mov	r0, r4
   1ea4e:	f7fb f9fb 	bl	19e48 <__aeabi_dsub>
   1ea52:	4602      	mov	r2, r0
   1ea54:	460b      	mov	r3, r1
   1ea56:	f7fb fcd5 	bl	1a404 <__aeabi_ddiv>
   1ea5a:	4604      	mov	r4, r0
   1ea5c:	460d      	mov	r5, r1
   1ea5e:	e09f      	b.n	1eba0 <__ieee754_sqrt+0x198>
   1ea60:	1501      	asrs	r1, r0, #20
   1ea62:	d005      	beq.n	1ea70 <__ieee754_sqrt+0x68>
   1ea64:	e018      	b.n	1ea98 <__ieee754_sqrt+0x90>
   1ea66:	ea4f 20dc 	mov.w	r0, ip, lsr #11
   1ea6a:	3915      	subs	r1, #21
   1ea6c:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   1ea70:	2800      	cmp	r0, #0
   1ea72:	d0f8      	beq.n	1ea66 <__ieee754_sqrt+0x5e>
   1ea74:	2200      	movs	r2, #0
   1ea76:	e001      	b.n	1ea7c <__ieee754_sqrt+0x74>
   1ea78:	0040      	lsls	r0, r0, #1
   1ea7a:	3201      	adds	r2, #1
   1ea7c:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
   1ea80:	d0fa      	beq.n	1ea78 <__ieee754_sqrt+0x70>
   1ea82:	1c4b      	adds	r3, r1, #1
   1ea84:	ebc2 0103 	rsb	r1, r2, r3
   1ea88:	f1c2 0320 	rsb	r3, r2, #32	; 0x20
   1ea8c:	fa2c f303 	lsr.w	r3, ip, r3
   1ea90:	fa0c fc02 	lsl.w	ip, ip, r2
   1ea94:	ea43 0000 	orr.w	r0, r3, r0
   1ea98:	f5a1 717e 	sub.w	r1, r1, #1016	; 0x3f8
   1ea9c:	1fcb      	subs	r3, r1, #7
   1ea9e:	9301      	str	r3, [sp, #4]
   1eaa0:	9c01      	ldr	r4, [sp, #4]
   1eaa2:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   1eaa6:	f014 0f01 	tst.w	r4, #1	; 0x1
   1eaaa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   1eaae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
   1eab2:	bf1e      	ittt	ne
   1eab4:	ea4f 73dc 	movne.w	r3, ip, lsr #31
   1eab8:	ea4f 0c4c 	movne.w	ip, ip, lsl #1
   1eabc:	eb03 0242 	addne.w	r2, r3, r2, lsl #1
   1eac0:	ea4f 73dc 	mov.w	r3, ip, lsr #31
   1eac4:	2500      	movs	r5, #0
   1eac6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1eaca:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1eace:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   1ead2:	9500      	str	r5, [sp, #0]
   1ead4:	2400      	movs	r4, #0
   1ead6:	eb05 0300 	add.w	r3, r5, r0
   1eada:	4293      	cmp	r3, r2
   1eadc:	dc05      	bgt.n	1eaea <__ieee754_sqrt+0xe2>
   1eade:	eb03 0500 	add.w	r5, r3, r0
   1eae2:	1ad2      	subs	r2, r2, r3
   1eae4:	9b00      	ldr	r3, [sp, #0]
   1eae6:	181b      	adds	r3, r3, r0
   1eae8:	9300      	str	r3, [sp, #0]
   1eaea:	3401      	adds	r4, #1
   1eaec:	ea4f 73dc 	mov.w	r3, ip, lsr #31
   1eaf0:	0840      	lsrs	r0, r0, #1
   1eaf2:	2c16      	cmp	r4, #22
   1eaf4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1eaf8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1eafc:	d1eb      	bne.n	1ead6 <__ieee754_sqrt+0xce>
   1eafe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1eb02:	2700      	movs	r7, #0
   1eb04:	2000      	movs	r0, #0
   1eb06:	2600      	movs	r6, #0
   1eb08:	4295      	cmp	r5, r2
   1eb0a:	eb01 0407 	add.w	r4, r1, r7
   1eb0e:	db08      	blt.n	1eb22 <__ieee754_sqrt+0x11a>
   1eb10:	bf14      	ite	ne
   1eb12:	2300      	movne	r3, #0
   1eb14:	2301      	moveq	r3, #1
   1eb16:	4564      	cmp	r4, ip
   1eb18:	bf8c      	ite	hi
   1eb1a:	2300      	movhi	r3, #0
   1eb1c:	f003 0301 	andls.w	r3, r3, #1	; 0x1
   1eb20:	b19b      	cbz	r3, 1eb4a <__ieee754_sqrt+0x142>
   1eb22:	f004 4300 	and.w	r3, r4, #2147483648	; 0x80000000
   1eb26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1eb2a:	eb04 0701 	add.w	r7, r4, r1
   1eb2e:	d103      	bne.n	1eb38 <__ieee754_sqrt+0x130>
   1eb30:	421f      	tst	r7, r3
   1eb32:	d101      	bne.n	1eb38 <__ieee754_sqrt+0x130>
   1eb34:	1c6b      	adds	r3, r5, #1
   1eb36:	e000      	b.n	1eb3a <__ieee754_sqrt+0x132>
   1eb38:	462b      	mov	r3, r5
   1eb3a:	1b52      	subs	r2, r2, r5
   1eb3c:	45a4      	cmp	ip, r4
   1eb3e:	bf38      	it	cc
   1eb40:	3a01      	subcc	r2, #1
   1eb42:	ebc4 0c0c 	rsb	ip, r4, ip
   1eb46:	1840      	adds	r0, r0, r1
   1eb48:	461d      	mov	r5, r3
   1eb4a:	3601      	adds	r6, #1
   1eb4c:	ea4f 73dc 	mov.w	r3, ip, lsr #31
   1eb50:	0849      	lsrs	r1, r1, #1
   1eb52:	2e20      	cmp	r6, #32
   1eb54:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1eb58:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1eb5c:	d1d4      	bne.n	1eb08 <__ieee754_sqrt+0x100>
   1eb5e:	ea52 020c 	orrs.w	r2, r2, ip
   1eb62:	d00a      	beq.n	1eb7a <__ieee754_sqrt+0x172>
   1eb64:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1eb68:	bf1c      	itt	ne
   1eb6a:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   1eb6e:	1818      	addne	r0, r3, r0
   1eb70:	d103      	bne.n	1eb7a <__ieee754_sqrt+0x172>
   1eb72:	9c00      	ldr	r4, [sp, #0]
   1eb74:	2000      	movs	r0, #0
   1eb76:	3401      	adds	r4, #1
   1eb78:	9400      	str	r4, [sp, #0]
   1eb7a:	9b00      	ldr	r3, [sp, #0]
   1eb7c:	9c01      	ldr	r4, [sp, #4]
   1eb7e:	0840      	lsrs	r0, r0, #1
   1eb80:	f013 0f01 	tst.w	r3, #1	; 0x1
   1eb84:	bf18      	it	ne
   1eb86:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   1eb8a:	1061      	asrs	r1, r4, #1
   1eb8c:	0509      	lsls	r1, r1, #20
   1eb8e:	9c00      	ldr	r4, [sp, #0]
   1eb90:	f101 517e 	add.w	r1, r1, #1065353216	; 0x3f800000
   1eb94:	f501 01c0 	add.w	r1, r1, #6291456	; 0x600000
   1eb98:	eb01 0364 	add.w	r3, r1, r4, asr #1
   1eb9c:	461d      	mov	r5, r3
   1eb9e:	4604      	mov	r4, r0
   1eba0:	4620      	mov	r0, r4
   1eba2:	4629      	mov	r1, r5
   1eba4:	b003      	add	sp, #12
   1eba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eba8:	7ff00000 	.word	0x7ff00000
   1ebac:	00000000 	.word	0x00000000

0001ebb0 <__kernel_cos>:
   1ebb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ebb2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   1ebb6:	b08d      	sub	sp, #52
   1ebb8:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
   1ebbc:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1ebc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ebc4:	da05      	bge.n	1ebd2 <__kernel_cos+0x22>
   1ebc6:	f7fb fd8b 	bl	1a6e0 <__aeabi_d2iz>
   1ebca:	b910      	cbnz	r0, 1ebd2 <__kernel_cos+0x22>
   1ebcc:	2000      	movs	r0, #0
   1ebce:	4962      	ldr	r1, [pc, #392]	(1ed58 <__kernel_cos+0x1a8>)
   1ebd0:	e0a8      	b.n	1ed24 <__kernel_cos+0x174>
   1ebd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1ebd6:	4602      	mov	r2, r0
   1ebd8:	460b      	mov	r3, r1
   1ebda:	f7fb fae9 	bl	1a1b0 <__aeabi_dmul>
   1ebde:	a252      	add	r2, pc, #328	(adr r2, 1ed28 <__kernel_cos+0x178>)
   1ebe0:	ca0c      	ldmia	r2!, {r2, r3}
   1ebe2:	4606      	mov	r6, r0
   1ebe4:	460f      	mov	r7, r1
   1ebe6:	f7fb fae3 	bl	1a1b0 <__aeabi_dmul>
   1ebea:	a251      	add	r2, pc, #324	(adr r2, 1ed30 <__kernel_cos+0x180>)
   1ebec:	ca0c      	ldmia	r2!, {r2, r3}
   1ebee:	f7fb f92d 	bl	19e4c <__adddf3>
   1ebf2:	4602      	mov	r2, r0
   1ebf4:	460b      	mov	r3, r1
   1ebf6:	4630      	mov	r0, r6
   1ebf8:	4639      	mov	r1, r7
   1ebfa:	f7fb fad9 	bl	1a1b0 <__aeabi_dmul>
   1ebfe:	a24e      	add	r2, pc, #312	(adr r2, 1ed38 <__kernel_cos+0x188>)
   1ec00:	ca0c      	ldmia	r2!, {r2, r3}
   1ec02:	f7fb f921 	bl	19e48 <__aeabi_dsub>
   1ec06:	4602      	mov	r2, r0
   1ec08:	460b      	mov	r3, r1
   1ec0a:	4630      	mov	r0, r6
   1ec0c:	4639      	mov	r1, r7
   1ec0e:	f7fb facf 	bl	1a1b0 <__aeabi_dmul>
   1ec12:	a24b      	add	r2, pc, #300	(adr r2, 1ed40 <__kernel_cos+0x190>)
   1ec14:	ca0c      	ldmia	r2!, {r2, r3}
   1ec16:	f7fb f919 	bl	19e4c <__adddf3>
   1ec1a:	4602      	mov	r2, r0
   1ec1c:	460b      	mov	r3, r1
   1ec1e:	4630      	mov	r0, r6
   1ec20:	4639      	mov	r1, r7
   1ec22:	f7fb fac5 	bl	1a1b0 <__aeabi_dmul>
   1ec26:	a248      	add	r2, pc, #288	(adr r2, 1ed48 <__kernel_cos+0x198>)
   1ec28:	ca0c      	ldmia	r2!, {r2, r3}
   1ec2a:	f7fb f90d 	bl	19e48 <__aeabi_dsub>
   1ec2e:	4602      	mov	r2, r0
   1ec30:	460b      	mov	r3, r1
   1ec32:	4630      	mov	r0, r6
   1ec34:	4639      	mov	r1, r7
   1ec36:	f7fb fabb 	bl	1a1b0 <__aeabi_dmul>
   1ec3a:	a245      	add	r2, pc, #276	(adr r2, 1ed50 <__kernel_cos+0x1a0>)
   1ec3c:	ca0c      	ldmia	r2!, {r2, r3}
   1ec3e:	f7fb f905 	bl	19e4c <__adddf3>
   1ec42:	460b      	mov	r3, r1
   1ec44:	4602      	mov	r2, r0
   1ec46:	4639      	mov	r1, r7
   1ec48:	4630      	mov	r0, r6
   1ec4a:	f7fb fab1 	bl	1a1b0 <__aeabi_dmul>
   1ec4e:	4b43      	ldr	r3, [pc, #268]	(1ed5c <__kernel_cos+0x1ac>)
   1ec50:	e9cd 010a 	strd	r0, r1, [sp, #40]
   1ec54:	429c      	cmp	r4, r3
   1ec56:	dc26      	bgt.n	1eca6 <__kernel_cos+0xf6>
   1ec58:	2200      	movs	r2, #0
   1ec5a:	4b41      	ldr	r3, [pc, #260]	(1ed60 <__kernel_cos+0x1b0>)
   1ec5c:	4630      	mov	r0, r6
   1ec5e:	4639      	mov	r1, r7
   1ec60:	f7fb faa6 	bl	1a1b0 <__aeabi_dmul>
   1ec64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]
   1ec68:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ec6c:	4630      	mov	r0, r6
   1ec6e:	4639      	mov	r1, r7
   1ec70:	f7fb fa9e 	bl	1a1b0 <__aeabi_dmul>
   1ec74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1ec78:	4604      	mov	r4, r0
   1ec7a:	460d      	mov	r5, r1
   1ec7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1ec80:	f7fb fa96 	bl	1a1b0 <__aeabi_dmul>
   1ec84:	4602      	mov	r2, r0
   1ec86:	460b      	mov	r3, r1
   1ec88:	4620      	mov	r0, r4
   1ec8a:	4629      	mov	r1, r5
   1ec8c:	f7fb f8dc 	bl	19e48 <__aeabi_dsub>
   1ec90:	4602      	mov	r2, r0
   1ec92:	460b      	mov	r3, r1
   1ec94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ec98:	f7fb f8d6 	bl	19e48 <__aeabi_dsub>
   1ec9c:	4602      	mov	r2, r0
   1ec9e:	460b      	mov	r3, r1
   1eca0:	2000      	movs	r0, #0
   1eca2:	492d      	ldr	r1, [pc, #180]	(1ed58 <__kernel_cos+0x1a8>)
   1eca4:	e03c      	b.n	1ed20 <__kernel_cos+0x170>
   1eca6:	4b2f      	ldr	r3, [pc, #188]	(1ed64 <__kernel_cos+0x1b4>)
   1eca8:	429c      	cmp	r4, r3
   1ecaa:	dd02      	ble.n	1ecb2 <__kernel_cos+0x102>
   1ecac:	2400      	movs	r4, #0
   1ecae:	4d2e      	ldr	r5, [pc, #184]	(1ed68 <__kernel_cos+0x1b8>)
   1ecb0:	e004      	b.n	1ecbc <__kernel_cos+0x10c>
   1ecb2:	f5a4 1300 	sub.w	r3, r4, #2097152	; 0x200000
   1ecb6:	2200      	movs	r2, #0
   1ecb8:	4614      	mov	r4, r2
   1ecba:	461d      	mov	r5, r3
   1ecbc:	4622      	mov	r2, r4
   1ecbe:	462b      	mov	r3, r5
   1ecc0:	2000      	movs	r0, #0
   1ecc2:	4925      	ldr	r1, [pc, #148]	(1ed58 <__kernel_cos+0x1a8>)
   1ecc4:	f7fb f8c0 	bl	19e48 <__aeabi_dsub>
   1ecc8:	2200      	movs	r2, #0
   1ecca:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ecce:	4b24      	ldr	r3, [pc, #144]	(1ed60 <__kernel_cos+0x1b0>)
   1ecd0:	4630      	mov	r0, r6
   1ecd2:	4639      	mov	r1, r7
   1ecd4:	f7fb fa6c 	bl	1a1b0 <__aeabi_dmul>
   1ecd8:	4622      	mov	r2, r4
   1ecda:	462b      	mov	r3, r5
   1ecdc:	f7fb f8b4 	bl	19e48 <__aeabi_dsub>
   1ece0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]
   1ece4:	e88d 0003 	stmia.w	sp, {r0, r1}
   1ece8:	4630      	mov	r0, r6
   1ecea:	4639      	mov	r1, r7
   1ecec:	f7fb fa60 	bl	1a1b0 <__aeabi_dmul>
   1ecf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1ecf4:	4604      	mov	r4, r0
   1ecf6:	460d      	mov	r5, r1
   1ecf8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1ecfc:	f7fb fa58 	bl	1a1b0 <__aeabi_dmul>
   1ed00:	4602      	mov	r2, r0
   1ed02:	460b      	mov	r3, r1
   1ed04:	4620      	mov	r0, r4
   1ed06:	4629      	mov	r1, r5
   1ed08:	f7fb f89e 	bl	19e48 <__aeabi_dsub>
   1ed0c:	4602      	mov	r2, r0
   1ed0e:	460b      	mov	r3, r1
   1ed10:	e89d 0003 	ldmia.w	sp, {r0, r1}
   1ed14:	f7fb f898 	bl	19e48 <__aeabi_dsub>
   1ed18:	4602      	mov	r2, r0
   1ed1a:	460b      	mov	r3, r1
   1ed1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1ed20:	f7fb f892 	bl	19e48 <__aeabi_dsub>
   1ed24:	b00d      	add	sp, #52
   1ed26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ed28:	be8838d4 	.word	0xbe8838d4
   1ed2c:	bda8fae9 	.word	0xbda8fae9
   1ed30:	bdb4b1c4 	.word	0xbdb4b1c4
   1ed34:	3e21ee9e 	.word	0x3e21ee9e
   1ed38:	809c52ad 	.word	0x809c52ad
   1ed3c:	3e927e4f 	.word	0x3e927e4f
   1ed40:	19cb1590 	.word	0x19cb1590
   1ed44:	3efa01a0 	.word	0x3efa01a0
   1ed48:	16c15177 	.word	0x16c15177
   1ed4c:	3f56c16c 	.word	0x3f56c16c
   1ed50:	5555554c 	.word	0x5555554c
   1ed54:	3fa55555 	.word	0x3fa55555
   1ed58:	3ff00000 	.word	0x3ff00000
   1ed5c:	3fd33332 	.word	0x3fd33332
   1ed60:	3fe00000 	.word	0x3fe00000
   1ed64:	3fe90000 	.word	0x3fe90000
   1ed68:	3fd20000 	.word	0x3fd20000
   1ed6c:	46c046c0 	.word	0x46c046c0

0001ed70 <__kernel_rem_pio2>:
   1ed70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed72:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
   1ed76:	930a      	str	r3, [sp, #40]
   1ed78:	900c      	str	r0, [sp, #48]
   1ed7a:	f8df 36f0 	ldr.w	r3, [pc, #1776]	; 1f46c <__kernel_rem_pio2+0x6fc>
   1ed7e:	98ba      	ldr	r0, [sp, #744]
   1ed80:	910b      	str	r1, [sp, #44]
   1ed82:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1ed86:	990a      	ldr	r1, [sp, #40]
   1ed88:	f8df 06e4 	ldr.w	r0, [pc, #1764]	; 1f470 <__kernel_rem_pio2+0x700>
   1ed8c:	930f      	str	r3, [sp, #60]
   1ed8e:	3901      	subs	r1, #1
   1ed90:	1ed3      	subs	r3, r2, #3
   1ed92:	910e      	str	r1, [sp, #56]
   1ed94:	fb83 0100 	smull	r0, r1, r3, r0
   1ed98:	17db      	asrs	r3, r3, #31
   1ed9a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1ed9e:	2b00      	cmp	r3, #0
   1eda0:	bfb8      	it	lt
   1eda2:	2300      	movlt	r3, #0
   1eda4:	9327      	str	r3, [sp, #156]
   1eda6:	ea6f 0303 	mvn.w	r3, r3
   1edaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1edae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1edb2:	9c27      	ldr	r4, [sp, #156]
   1edb4:	9312      	str	r3, [sp, #72]
   1edb6:	9a0f      	ldr	r2, [sp, #60]
   1edb8:	9b0e      	ldr	r3, [sp, #56]
   1edba:	98bb      	ldr	r0, [sp, #748]
   1edbc:	ebc3 0604 	rsb	r6, r3, r4
   1edc0:	18d2      	adds	r2, r2, r3
   1edc2:	9211      	str	r2, [sp, #68]
   1edc4:	af78      	add	r7, sp, #480
   1edc6:	eb00 0586 	add.w	r5, r0, r6, lsl #2
   1edca:	2400      	movs	r4, #0
   1edcc:	e00a      	b.n	1ede4 <__kernel_rem_pio2+0x74>
   1edce:	42f4      	cmn	r4, r6
   1edd0:	d502      	bpl.n	1edd8 <__kernel_rem_pio2+0x68>
   1edd2:	2000      	movs	r0, #0
   1edd4:	2100      	movs	r1, #0
   1edd6:	e002      	b.n	1edde <__kernel_rem_pio2+0x6e>
   1edd8:	6828      	ldr	r0, [r5, #0]
   1edda:	f7fb f983 	bl	1a0e4 <__aeabi_i2d>
   1edde:	c703      	stmia	r7!, {r0, r1}
   1ede0:	3401      	adds	r4, #1
   1ede2:	3504      	adds	r5, #4
   1ede4:	9911      	ldr	r1, [sp, #68]
   1ede6:	428c      	cmp	r4, r1
   1ede8:	ddf1      	ble.n	1edce <__kernel_rem_pio2+0x5e>
   1edea:	9b0e      	ldr	r3, [sp, #56]
   1edec:	aa28      	add	r2, sp, #160
   1edee:	2400      	movs	r4, #0
   1edf0:	921f      	str	r2, [sp, #124]
   1edf2:	9320      	str	r3, [sp, #128]
   1edf4:	9421      	str	r4, [sp, #132]
   1edf6:	e01f      	b.n	1ee38 <__kernel_rem_pio2+0xc8>
   1edf8:	9a1e      	ldr	r2, [sp, #120]
   1edfa:	3601      	adds	r6, #1
   1edfc:	e912 0003 	ldmdb	r2, {r0, r1}
   1ee00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1ee04:	f7fb f9d4 	bl	1a1b0 <__aeabi_dmul>
   1ee08:	4602      	mov	r2, r0
   1ee0a:	460b      	mov	r3, r1
   1ee0c:	4620      	mov	r0, r4
   1ee0e:	4629      	mov	r1, r5
   1ee10:	f7fb f81c 	bl	19e4c <__adddf3>
   1ee14:	4604      	mov	r4, r0
   1ee16:	460d      	mov	r5, r1
   1ee18:	9b1e      	ldr	r3, [sp, #120]
   1ee1a:	980e      	ldr	r0, [sp, #56]
   1ee1c:	3308      	adds	r3, #8
   1ee1e:	3f08      	subs	r7, #8
   1ee20:	4286      	cmp	r6, r0
   1ee22:	931e      	str	r3, [sp, #120]
   1ee24:	dde8      	ble.n	1edf8 <__kernel_rem_pio2+0x88>
   1ee26:	991f      	ldr	r1, [sp, #124]
   1ee28:	9a21      	ldr	r2, [sp, #132]
   1ee2a:	9b20      	ldr	r3, [sp, #128]
   1ee2c:	c130      	stmia	r1!, {r4, r5}
   1ee2e:	3201      	adds	r2, #1
   1ee30:	3301      	adds	r3, #1
   1ee32:	911f      	str	r1, [sp, #124]
   1ee34:	9221      	str	r2, [sp, #132]
   1ee36:	9320      	str	r3, [sp, #128]
   1ee38:	9c21      	ldr	r4, [sp, #132]
   1ee3a:	9e0f      	ldr	r6, [sp, #60]
   1ee3c:	42b4      	cmp	r4, r6
   1ee3e:	dc09      	bgt.n	1ee54 <__kernel_rem_pio2+0xe4>
   1ee40:	980c      	ldr	r0, [sp, #48]
   1ee42:	9a20      	ldr	r2, [sp, #128]
   1ee44:	a978      	add	r1, sp, #480
   1ee46:	901e      	str	r0, [sp, #120]
   1ee48:	eb01 07c2 	add.w	r7, r1, r2, lsl #3
   1ee4c:	2600      	movs	r6, #0
   1ee4e:	2400      	movs	r4, #0
   1ee50:	2500      	movs	r5, #0
   1ee52:	e7e1      	b.n	1ee18 <__kernel_rem_pio2+0xa8>
   1ee54:	9b0f      	ldr	r3, [sp, #60]
   1ee56:	930d      	str	r3, [sp, #52]
   1ee58:	9c0d      	ldr	r4, [sp, #52]
   1ee5a:	aa28      	add	r2, sp, #160
   1ee5c:	1e60      	subs	r0, r4, #1
   1ee5e:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
   1ee62:	2100      	movs	r1, #0
   1ee64:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   1ee68:	e893 00c0 	ldmia.w	r3, {r6, r7}
   1ee6c:	9022      	str	r0, [sp, #136]
   1ee6e:	921d      	str	r2, [sp, #116]
   1ee70:	9425      	str	r4, [sp, #148]
   1ee72:	911c      	str	r1, [sp, #112]
   1ee74:	e02b      	b.n	1eece <__kernel_rem_pio2+0x15e>
   1ee76:	2200      	movs	r2, #0
   1ee78:	f8df 35f8 	ldr.w	r3, [pc, #1528]	; 1f474 <__kernel_rem_pio2+0x704>
   1ee7c:	4630      	mov	r0, r6
   1ee7e:	4639      	mov	r1, r7
   1ee80:	f7fb f996 	bl	1a1b0 <__aeabi_dmul>
   1ee84:	f7fb fc2c 	bl	1a6e0 <__aeabi_d2iz>
   1ee88:	f7fb f92c 	bl	1a0e4 <__aeabi_i2d>
   1ee8c:	2200      	movs	r2, #0
   1ee8e:	f8df 35e8 	ldr.w	r3, [pc, #1512]	; 1f478 <__kernel_rem_pio2+0x708>
   1ee92:	4604      	mov	r4, r0
   1ee94:	460d      	mov	r5, r1
   1ee96:	f7fb f98b 	bl	1a1b0 <__aeabi_dmul>
   1ee9a:	4602      	mov	r2, r0
   1ee9c:	460b      	mov	r3, r1
   1ee9e:	4630      	mov	r0, r6
   1eea0:	4639      	mov	r1, r7
   1eea2:	f7fa ffd3 	bl	19e4c <__adddf3>
   1eea6:	f7fb fc1b 	bl	1a6e0 <__aeabi_d2iz>
   1eeaa:	9b1c      	ldr	r3, [sp, #112]
   1eeac:	aaa0      	add	r2, sp, #640
   1eeae:	50d0      	str	r0, [r2, r3]
   1eeb0:	9e25      	ldr	r6, [sp, #148]
   1eeb2:	4620      	mov	r0, r4
   1eeb4:	9c1d      	ldr	r4, [sp, #116]
   1eeb6:	3e01      	subs	r6, #1
   1eeb8:	4629      	mov	r1, r5
   1eeba:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1eebe:	9625      	str	r6, [sp, #148]
   1eec0:	f7fa ffc4 	bl	19e4c <__adddf3>
   1eec4:	4606      	mov	r6, r0
   1eec6:	981c      	ldr	r0, [sp, #112]
   1eec8:	460f      	mov	r7, r1
   1eeca:	3004      	adds	r0, #4
   1eecc:	901c      	str	r0, [sp, #112]
   1eece:	991d      	ldr	r1, [sp, #116]
   1eed0:	9a25      	ldr	r2, [sp, #148]
   1eed2:	3908      	subs	r1, #8
   1eed4:	2a00      	cmp	r2, #0
   1eed6:	911d      	str	r1, [sp, #116]
   1eed8:	dccd      	bgt.n	1ee76 <__kernel_rem_pio2+0x106>
   1eeda:	9a12      	ldr	r2, [sp, #72]
   1eedc:	4630      	mov	r0, r6
   1eede:	4639      	mov	r1, r7
   1eee0:	f000 fdc6 	bl	1fa70 <scalbn>
   1eee4:	2200      	movs	r2, #0
   1eee6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1eeea:	4604      	mov	r4, r0
   1eeec:	460d      	mov	r5, r1
   1eeee:	f7fb f95f 	bl	1a1b0 <__aeabi_dmul>
   1eef2:	f000 fd35 	bl	1f960 <floor>
   1eef6:	2200      	movs	r2, #0
   1eef8:	f8df 3580 	ldr.w	r3, [pc, #1408]	; 1f47c <__kernel_rem_pio2+0x70c>
   1eefc:	f7fb f958 	bl	1a1b0 <__aeabi_dmul>
   1ef00:	4602      	mov	r2, r0
   1ef02:	460b      	mov	r3, r1
   1ef04:	4620      	mov	r0, r4
   1ef06:	4629      	mov	r1, r5
   1ef08:	f7fa ffa0 	bl	19e4c <__adddf3>
   1ef0c:	460d      	mov	r5, r1
   1ef0e:	4604      	mov	r4, r0
   1ef10:	f7fb fbe6 	bl	1a6e0 <__aeabi_d2iz>
   1ef14:	9010      	str	r0, [sp, #64]
   1ef16:	f7fb f8e5 	bl	1a0e4 <__aeabi_i2d>
   1ef1a:	460b      	mov	r3, r1
   1ef1c:	4602      	mov	r2, r0
   1ef1e:	4629      	mov	r1, r5
   1ef20:	4620      	mov	r0, r4
   1ef22:	f7fa ff91 	bl	19e48 <__aeabi_dsub>
   1ef26:	9b12      	ldr	r3, [sp, #72]
   1ef28:	4604      	mov	r4, r0
   1ef2a:	2b00      	cmp	r3, #0
   1ef2c:	460d      	mov	r5, r1
   1ef2e:	dd16      	ble.n	1ef5e <__kernel_rem_pio2+0x1ee>
   1ef30:	9922      	ldr	r1, [sp, #136]
   1ef32:	aeb4      	add	r6, sp, #720
   1ef34:	eb06 0081 	add.w	r0, r6, r1, lsl #2
   1ef38:	f850 2c50 	ldr.w	r2, [r0, #-80]
   1ef3c:	f1c3 0118 	rsb	r1, r3, #24	; 0x18
   1ef40:	fa52 f301 	asrs.w	r3, r2, r1
   1ef44:	9e10      	ldr	r6, [sp, #64]
   1ef46:	18f6      	adds	r6, r6, r3
   1ef48:	408b      	lsls	r3, r1
   1ef4a:	1ad2      	subs	r2, r2, r3
   1ef4c:	f840 2c50 	str.w	r2, [r0, #-80]
   1ef50:	9812      	ldr	r0, [sp, #72]
   1ef52:	9610      	str	r6, [sp, #64]
   1ef54:	f1c0 0317 	rsb	r3, r0, #23	; 0x17
   1ef58:	fa52 f303 	asrs.w	r3, r2, r3
   1ef5c:	e007      	b.n	1ef6e <__kernel_rem_pio2+0x1fe>
   1ef5e:	d10b      	bne.n	1ef78 <__kernel_rem_pio2+0x208>
   1ef60:	9a22      	ldr	r2, [sp, #136]
   1ef62:	a9b4      	add	r1, sp, #720
   1ef64:	eb01 0382 	add.w	r3, r1, r2, lsl #2
   1ef68:	f853 3c50 	ldr.w	r3, [r3, #-80]
   1ef6c:	15db      	asrs	r3, r3, #23
   1ef6e:	9313      	str	r3, [sp, #76]
   1ef70:	9813      	ldr	r0, [sp, #76]
   1ef72:	2800      	cmp	r0, #0
   1ef74:	dc0b      	bgt.n	1ef8e <__kernel_rem_pio2+0x21e>
   1ef76:	e061      	b.n	1f03c <__kernel_rem_pio2+0x2cc>
   1ef78:	2200      	movs	r2, #0
   1ef7a:	f8df 3504 	ldr.w	r3, [pc, #1284]	; 1f480 <__kernel_rem_pio2+0x710>
   1ef7e:	f7fb fb9b 	bl	1a6b8 <__aeabi_dcmpge>
   1ef82:	b910      	cbnz	r0, 1ef8a <__kernel_rem_pio2+0x21a>
   1ef84:	2300      	movs	r3, #0
   1ef86:	9313      	str	r3, [sp, #76]
   1ef88:	e058      	b.n	1f03c <__kernel_rem_pio2+0x2cc>
   1ef8a:	2602      	movs	r6, #2
   1ef8c:	9613      	str	r6, [sp, #76]
   1ef8e:	9910      	ldr	r1, [sp, #64]
   1ef90:	2600      	movs	r6, #0
   1ef92:	3101      	adds	r1, #1
   1ef94:	9110      	str	r1, [sp, #64]
   1ef96:	2000      	movs	r0, #0
   1ef98:	2100      	movs	r1, #0
   1ef9a:	f50d 7c20 	add.w	ip, sp, #640	; 0x280
   1ef9e:	e010      	b.n	1efc2 <__kernel_rem_pio2+0x252>
   1efa0:	f85c 2001 	ldr.w	r2, [ip, r1]
   1efa4:	b936      	cbnz	r6, 1efb4 <__kernel_rem_pio2+0x244>
   1efa6:	b152      	cbz	r2, 1efbe <__kernel_rem_pio2+0x24e>
   1efa8:	f1c2 7380 	rsb	r3, r2, #16777216	; 0x1000000
   1efac:	f84c 3001 	str.w	r3, [ip, r1]
   1efb0:	2601      	movs	r6, #1
   1efb2:	e004      	b.n	1efbe <__kernel_rem_pio2+0x24e>
   1efb4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   1efb8:	1a9b      	subs	r3, r3, r2
   1efba:	f84c 3001 	str.w	r3, [ip, r1]
   1efbe:	3001      	adds	r0, #1
   1efc0:	3104      	adds	r1, #4
   1efc2:	9a0d      	ldr	r2, [sp, #52]
   1efc4:	4290      	cmp	r0, r2
   1efc6:	dbeb      	blt.n	1efa0 <__kernel_rem_pio2+0x230>
   1efc8:	9b12      	ldr	r3, [sp, #72]
   1efca:	2b00      	cmp	r3, #0
   1efcc:	dd1b      	ble.n	1f006 <__kernel_rem_pio2+0x296>
   1efce:	2b01      	cmp	r3, #1
   1efd0:	d002      	beq.n	1efd8 <__kernel_rem_pio2+0x268>
   1efd2:	2b02      	cmp	r3, #2
   1efd4:	d117      	bne.n	1f006 <__kernel_rem_pio2+0x296>
   1efd6:	e00a      	b.n	1efee <__kernel_rem_pio2+0x27e>
   1efd8:	9922      	ldr	r1, [sp, #136]
   1efda:	a8b4      	add	r0, sp, #720
   1efdc:	eb00 0281 	add.w	r2, r0, r1, lsl #2
   1efe0:	f852 3c50 	ldr.w	r3, [r2, #-80]
   1efe4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1efe8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1efec:	e009      	b.n	1f002 <__kernel_rem_pio2+0x292>
   1efee:	9822      	ldr	r0, [sp, #136]
   1eff0:	abb4      	add	r3, sp, #720
   1eff2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
   1eff6:	f852 3c50 	ldr.w	r3, [r2, #-80]
   1effa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1effe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
   1f002:	f842 3c50 	str.w	r3, [r2, #-80]
   1f006:	9913      	ldr	r1, [sp, #76]
   1f008:	2902      	cmp	r1, #2
   1f00a:	d117      	bne.n	1f03c <__kernel_rem_pio2+0x2cc>
   1f00c:	4622      	mov	r2, r4
   1f00e:	462b      	mov	r3, r5
   1f010:	2000      	movs	r0, #0
   1f012:	f8df 1470 	ldr.w	r1, [pc, #1136]	; 1f484 <__kernel_rem_pio2+0x714>
   1f016:	f7fa ff17 	bl	19e48 <__aeabi_dsub>
   1f01a:	4604      	mov	r4, r0
   1f01c:	460d      	mov	r5, r1
   1f01e:	b16e      	cbz	r6, 1f03c <__kernel_rem_pio2+0x2cc>
   1f020:	9a12      	ldr	r2, [sp, #72]
   1f022:	2000      	movs	r0, #0
   1f024:	f8df 145c 	ldr.w	r1, [pc, #1116]	; 1f484 <__kernel_rem_pio2+0x714>
   1f028:	f000 fd22 	bl	1fa70 <scalbn>
   1f02c:	4602      	mov	r2, r0
   1f02e:	460b      	mov	r3, r1
   1f030:	4620      	mov	r0, r4
   1f032:	4629      	mov	r1, r5
   1f034:	f7fa ff08 	bl	19e48 <__aeabi_dsub>
   1f038:	4604      	mov	r4, r0
   1f03a:	460d      	mov	r5, r1
   1f03c:	2200      	movs	r2, #0
   1f03e:	2300      	movs	r3, #0
   1f040:	4620      	mov	r0, r4
   1f042:	4629      	mov	r1, r5
   1f044:	f7fb fb1a 	bl	1a67c <__aeabi_dcmpeq>
   1f048:	2800      	cmp	r0, #0
   1f04a:	d073      	beq.n	1f134 <__kernel_rem_pio2+0x3c4>
   1f04c:	9a22      	ldr	r2, [sp, #136]
   1f04e:	aba0      	add	r3, sp, #640
   1f050:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1f054:	2200      	movs	r2, #0
   1f056:	e004      	b.n	1f062 <__kernel_rem_pio2+0x2f2>
   1f058:	684b      	ldr	r3, [r1, #4]
   1f05a:	431a      	orrs	r2, r3
   1f05c:	9b22      	ldr	r3, [sp, #136]
   1f05e:	3b01      	subs	r3, #1
   1f060:	9322      	str	r3, [sp, #136]
   1f062:	9c22      	ldr	r4, [sp, #136]
   1f064:	9e0f      	ldr	r6, [sp, #60]
   1f066:	3904      	subs	r1, #4
   1f068:	42b4      	cmp	r4, r6
   1f06a:	daf5      	bge.n	1f058 <__kernel_rem_pio2+0x2e8>
   1f06c:	2a00      	cmp	r2, #0
   1f06e:	d162      	bne.n	1f136 <__kernel_rem_pio2+0x3c6>
   1f070:	aba0      	add	r3, sp, #640
   1f072:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1f076:	2201      	movs	r2, #1
   1f078:	e000      	b.n	1f07c <__kernel_rem_pio2+0x30c>
   1f07a:	3201      	adds	r2, #1
   1f07c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   1f080:	2b00      	cmp	r3, #0
   1f082:	d0fa      	beq.n	1f07a <__kernel_rem_pio2+0x30a>
   1f084:	980d      	ldr	r0, [sp, #52]
   1f086:	9927      	ldr	r1, [sp, #156]
   1f088:	ab28      	add	r3, sp, #160
   1f08a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1f08e:	931a      	str	r3, [sp, #104]
   1f090:	1c4b      	adds	r3, r1, #1
   1f092:	990a      	ldr	r1, [sp, #40]
   1f094:	1812      	adds	r2, r2, r0
   1f096:	9cbb      	ldr	r4, [sp, #748]
   1f098:	4401      	add	r1, r0
   1f09a:	181b      	adds	r3, r3, r0
   1f09c:	9205      	str	r2, [sp, #20]
   1f09e:	aa78      	add	r2, sp, #480
   1f0a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1f0a4:	2600      	movs	r6, #0
   1f0a6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1f0aa:	931b      	str	r3, [sp, #108]
   1f0ac:	9619      	str	r6, [sp, #100]
   1f0ae:	9104      	str	r1, [sp, #16]
   1f0b0:	9203      	str	r2, [sp, #12]
   1f0b2:	e036      	b.n	1f122 <__kernel_rem_pio2+0x3b2>
   1f0b4:	991b      	ldr	r1, [sp, #108]
   1f0b6:	9b03      	ldr	r3, [sp, #12]
   1f0b8:	9e19      	ldr	r6, [sp, #100]
   1f0ba:	6808      	ldr	r0, [r1, #0]
   1f0bc:	eb03 04c6 	add.w	r4, r3, r6, lsl #3
   1f0c0:	f7fb f810 	bl	1a0e4 <__aeabi_i2d>
   1f0c4:	e884 0003 	stmia.w	r4, {r0, r1}
   1f0c8:	9c04      	ldr	r4, [sp, #16]
   1f0ca:	9a0c      	ldr	r2, [sp, #48]
   1f0cc:	eb04 0306 	add.w	r3, r4, r6
   1f0d0:	ae78      	add	r6, sp, #480
   1f0d2:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
   1f0d6:	9218      	str	r2, [sp, #96]
   1f0d8:	2600      	movs	r6, #0
   1f0da:	2400      	movs	r4, #0
   1f0dc:	2500      	movs	r5, #0
   1f0de:	e00f      	b.n	1f100 <__kernel_rem_pio2+0x390>
   1f0e0:	9a18      	ldr	r2, [sp, #96]
   1f0e2:	3601      	adds	r6, #1
   1f0e4:	e912 0003 	ldmdb	r2, {r0, r1}
   1f0e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1f0ec:	f7fb f860 	bl	1a1b0 <__aeabi_dmul>
   1f0f0:	4602      	mov	r2, r0
   1f0f2:	460b      	mov	r3, r1
   1f0f4:	4620      	mov	r0, r4
   1f0f6:	4629      	mov	r1, r5
   1f0f8:	f7fa fea8 	bl	19e4c <__adddf3>
   1f0fc:	4604      	mov	r4, r0
   1f0fe:	460d      	mov	r5, r1
   1f100:	9b18      	ldr	r3, [sp, #96]
   1f102:	980e      	ldr	r0, [sp, #56]
   1f104:	3308      	adds	r3, #8
   1f106:	3f08      	subs	r7, #8
   1f108:	4286      	cmp	r6, r0
   1f10a:	9318      	str	r3, [sp, #96]
   1f10c:	dde8      	ble.n	1f0e0 <__kernel_rem_pio2+0x370>
   1f10e:	991a      	ldr	r1, [sp, #104]
   1f110:	9a19      	ldr	r2, [sp, #100]
   1f112:	9b1b      	ldr	r3, [sp, #108]
   1f114:	e9e1 4502 	strd	r4, r5, [r1, #8]!
   1f118:	3201      	adds	r2, #1
   1f11a:	3304      	adds	r3, #4
   1f11c:	911a      	str	r1, [sp, #104]
   1f11e:	9219      	str	r2, [sp, #100]
   1f120:	931b      	str	r3, [sp, #108]
   1f122:	9c0d      	ldr	r4, [sp, #52]
   1f124:	9e19      	ldr	r6, [sp, #100]
   1f126:	1c63      	adds	r3, r4, #1
   1f128:	9805      	ldr	r0, [sp, #20]
   1f12a:	199b      	adds	r3, r3, r6
   1f12c:	4283      	cmp	r3, r0
   1f12e:	ddc1      	ble.n	1f0b4 <__kernel_rem_pio2+0x344>
   1f130:	900d      	str	r0, [sp, #52]
   1f132:	e691      	b.n	1ee58 <__kernel_rem_pio2+0xe8>
   1f134:	d014      	beq.n	1f160 <__kernel_rem_pio2+0x3f0>
   1f136:	9c0d      	ldr	r4, [sp, #52]
   1f138:	9912      	ldr	r1, [sp, #72]
   1f13a:	aba0      	add	r3, sp, #640
   1f13c:	3918      	subs	r1, #24
   1f13e:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   1f142:	3c01      	subs	r4, #1
   1f144:	9112      	str	r1, [sp, #72]
   1f146:	940d      	str	r4, [sp, #52]
   1f148:	e005      	b.n	1f156 <__kernel_rem_pio2+0x3e6>
   1f14a:	9e0d      	ldr	r6, [sp, #52]
   1f14c:	9812      	ldr	r0, [sp, #72]
   1f14e:	3e01      	subs	r6, #1
   1f150:	3818      	subs	r0, #24
   1f152:	960d      	str	r6, [sp, #52]
   1f154:	9012      	str	r0, [sp, #72]
   1f156:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   1f15a:	2b00      	cmp	r3, #0
   1f15c:	d0f5      	beq.n	1f14a <__kernel_rem_pio2+0x3da>
   1f15e:	e03f      	b.n	1f1e0 <__kernel_rem_pio2+0x470>
   1f160:	9912      	ldr	r1, [sp, #72]
   1f162:	4620      	mov	r0, r4
   1f164:	f1c1 0200 	rsb	r2, r1, #0	; 0x0
   1f168:	4629      	mov	r1, r5
   1f16a:	f000 fc81 	bl	1fa70 <scalbn>
   1f16e:	2200      	movs	r2, #0
   1f170:	4bc5      	ldr	r3, [pc, #788]	(1f488 <__kernel_rem_pio2+0x718>)
   1f172:	4606      	mov	r6, r0
   1f174:	460f      	mov	r7, r1
   1f176:	f7fb fa9f 	bl	1a6b8 <__aeabi_dcmpge>
   1f17a:	9a0d      	ldr	r2, [sp, #52]
   1f17c:	0094      	lsls	r4, r2, #2
   1f17e:	b338      	cbz	r0, 1f1d0 <__kernel_rem_pio2+0x460>
   1f180:	2200      	movs	r2, #0
   1f182:	4bbc      	ldr	r3, [pc, #752]	(1f474 <__kernel_rem_pio2+0x704>)
   1f184:	4630      	mov	r0, r6
   1f186:	4639      	mov	r1, r7
   1f188:	f7fb f812 	bl	1a1b0 <__aeabi_dmul>
   1f18c:	f7fb faa8 	bl	1a6e0 <__aeabi_d2iz>
   1f190:	f7fa ffa8 	bl	1a0e4 <__aeabi_i2d>
   1f194:	abb4      	add	r3, sp, #720
   1f196:	441c      	add	r4, r3
   1f198:	2200      	movs	r2, #0
   1f19a:	4bb7      	ldr	r3, [pc, #732]	(1f478 <__kernel_rem_pio2+0x708>)
   1f19c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1f1a0:	f7fb f806 	bl	1a1b0 <__aeabi_dmul>
   1f1a4:	4602      	mov	r2, r0
   1f1a6:	460b      	mov	r3, r1
   1f1a8:	4630      	mov	r0, r6
   1f1aa:	4639      	mov	r1, r7
   1f1ac:	f7fa fe4e 	bl	19e4c <__adddf3>
   1f1b0:	f7fb fa96 	bl	1a6e0 <__aeabi_d2iz>
   1f1b4:	9e12      	ldr	r6, [sp, #72]
   1f1b6:	f844 0c50 	str.w	r0, [r4, #-80]
   1f1ba:	9c0d      	ldr	r4, [sp, #52]
   1f1bc:	a8b4      	add	r0, sp, #720
   1f1be:	3401      	adds	r4, #1
   1f1c0:	3618      	adds	r6, #24
   1f1c2:	940d      	str	r4, [sp, #52]
   1f1c4:	9612      	str	r6, [sp, #72]
   1f1c6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1f1ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1f1ce:	e003      	b.n	1f1d8 <__kernel_rem_pio2+0x468>
   1f1d0:	a9b4      	add	r1, sp, #720
   1f1d2:	440c      	add	r4, r1
   1f1d4:	4630      	mov	r0, r6
   1f1d6:	4639      	mov	r1, r7
   1f1d8:	f7fb fa82 	bl	1a6e0 <__aeabi_d2iz>
   1f1dc:	f844 0c50 	str.w	r0, [r4, #-80]
   1f1e0:	9a12      	ldr	r2, [sp, #72]
   1f1e2:	2000      	movs	r0, #0
   1f1e4:	49a7      	ldr	r1, [pc, #668]	(1f484 <__kernel_rem_pio2+0x714>)
   1f1e6:	f000 fc43 	bl	1fa70 <scalbn>
   1f1ea:	9a0d      	ldr	r2, [sp, #52]
   1f1ec:	aba0      	add	r3, sp, #640
   1f1ee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1f1f2:	9317      	str	r3, [sp, #92]
   1f1f4:	ab28      	add	r3, sp, #160
   1f1f6:	4604      	mov	r4, r0
   1f1f8:	460d      	mov	r5, r1
   1f1fa:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
   1f1fe:	4616      	mov	r6, r2
   1f200:	e014      	b.n	1f22c <__kernel_rem_pio2+0x4bc>
   1f202:	9b17      	ldr	r3, [sp, #92]
   1f204:	3e01      	subs	r6, #1
   1f206:	6858      	ldr	r0, [r3, #4]
   1f208:	f7fa ff6c 	bl	1a0e4 <__aeabi_i2d>
   1f20c:	4602      	mov	r2, r0
   1f20e:	460b      	mov	r3, r1
   1f210:	4620      	mov	r0, r4
   1f212:	4629      	mov	r1, r5
   1f214:	f7fa ffcc 	bl	1a1b0 <__aeabi_dmul>
   1f218:	2200      	movs	r2, #0
   1f21a:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1f21e:	4b95      	ldr	r3, [pc, #596]	(1f474 <__kernel_rem_pio2+0x704>)
   1f220:	4620      	mov	r0, r4
   1f222:	4629      	mov	r1, r5
   1f224:	f7fa ffc4 	bl	1a1b0 <__aeabi_dmul>
   1f228:	4604      	mov	r4, r0
   1f22a:	460d      	mov	r5, r1
   1f22c:	9817      	ldr	r0, [sp, #92]
   1f22e:	3f08      	subs	r7, #8
   1f230:	3804      	subs	r0, #4
   1f232:	2e00      	cmp	r6, #0
   1f234:	9017      	str	r0, [sp, #92]
   1f236:	dae4      	bge.n	1f202 <__kernel_rem_pio2+0x492>
   1f238:	9a0d      	ldr	r2, [sp, #52]
   1f23a:	a950      	add	r1, sp, #320
   1f23c:	2300      	movs	r3, #0
   1f23e:	9116      	str	r1, [sp, #88]
   1f240:	9223      	str	r2, [sp, #140]
   1f242:	9315      	str	r3, [sp, #84]
   1f244:	e022      	b.n	1f28c <__kernel_rem_pio2+0x51c>
   1f246:	9a14      	ldr	r2, [sp, #80]
   1f248:	3601      	adds	r6, #1
   1f24a:	e912 0003 	ldmdb	r2, {r0, r1}
   1f24e:	e917 000c 	ldmdb	r7, {r2, r3}
   1f252:	f7fa ffad 	bl	1a1b0 <__aeabi_dmul>
   1f256:	4602      	mov	r2, r0
   1f258:	460b      	mov	r3, r1
   1f25a:	4620      	mov	r0, r4
   1f25c:	4629      	mov	r1, r5
   1f25e:	f7fa fdf5 	bl	19e4c <__adddf3>
   1f262:	4604      	mov	r4, r0
   1f264:	460d      	mov	r5, r1
   1f266:	9b0f      	ldr	r3, [sp, #60]
   1f268:	429e      	cmp	r6, r3
   1f26a:	dc06      	bgt.n	1f27a <__kernel_rem_pio2+0x50a>
   1f26c:	9814      	ldr	r0, [sp, #80]
   1f26e:	9915      	ldr	r1, [sp, #84]
   1f270:	3008      	adds	r0, #8
   1f272:	3708      	adds	r7, #8
   1f274:	428e      	cmp	r6, r1
   1f276:	9014      	str	r0, [sp, #80]
   1f278:	dde5      	ble.n	1f246 <__kernel_rem_pio2+0x4d6>
   1f27a:	9a16      	ldr	r2, [sp, #88]
   1f27c:	9b23      	ldr	r3, [sp, #140]
   1f27e:	c230      	stmia	r2!, {r4, r5}
   1f280:	9c15      	ldr	r4, [sp, #84]
   1f282:	3b01      	subs	r3, #1
   1f284:	3401      	adds	r4, #1
   1f286:	9216      	str	r2, [sp, #88]
   1f288:	9323      	str	r3, [sp, #140]
   1f28a:	9415      	str	r4, [sp, #84]
   1f28c:	9e23      	ldr	r6, [sp, #140]
   1f28e:	2e00      	cmp	r6, #0
   1f290:	db08      	blt.n	1f2a4 <__kernel_rem_pio2+0x534>
   1f292:	487e      	ldr	r0, [pc, #504]	(1f48c <__kernel_rem_pio2+0x71c>)
   1f294:	a928      	add	r1, sp, #160
   1f296:	eb01 07c6 	add.w	r7, r1, r6, lsl #3
   1f29a:	9014      	str	r0, [sp, #80]
   1f29c:	2600      	movs	r6, #0
   1f29e:	2400      	movs	r4, #0
   1f2a0:	2500      	movs	r5, #0
   1f2a2:	e7e0      	b.n	1f266 <__kernel_rem_pio2+0x4f6>
   1f2a4:	9aba      	ldr	r2, [sp, #744]
   1f2a6:	2a03      	cmp	r2, #3
   1f2a8:	f200 80d9 	bhi.w	1f45e <__kernel_rem_pio2+0x6ee>
   1f2ac:	e8df f002 	tbb	[pc, r2]
   1f2b0:	020b0b12 	.word	0x020b0b12
   1f2b4:	9b0d      	ldr	r3, [sp, #52]
   1f2b6:	9f0d      	ldr	r7, [sp, #52]
   1f2b8:	1e5a      	subs	r2, r3, #1
   1f2ba:	ab50      	add	r3, sp, #320
   1f2bc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   1f2c0:	9226      	str	r2, [sp, #152]
   1f2c2:	4616      	mov	r6, r2
   1f2c4:	e067      	b.n	1f396 <__kernel_rem_pio2+0x626>
   1f2c6:	9c0d      	ldr	r4, [sp, #52]
   1f2c8:	ab50      	add	r3, sp, #320
   1f2ca:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   1f2ce:	2000      	movs	r0, #0
   1f2d0:	2100      	movs	r1, #0
   1f2d2:	e01c      	b.n	1f30e <__kernel_rem_pio2+0x59e>
   1f2d4:	9e0d      	ldr	r6, [sp, #52]
   1f2d6:	ab50      	add	r3, sp, #320
   1f2d8:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
   1f2dc:	4634      	mov	r4, r6
   1f2de:	2000      	movs	r0, #0
   1f2e0:	2100      	movs	r1, #0
   1f2e2:	e004      	b.n	1f2ee <__kernel_rem_pio2+0x57e>
   1f2e4:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1f2e8:	f7fa fdb0 	bl	19e4c <__adddf3>
   1f2ec:	3c01      	subs	r4, #1
   1f2ee:	3d08      	subs	r5, #8
   1f2f0:	2c00      	cmp	r4, #0
   1f2f2:	daf7      	bge.n	1f2e4 <__kernel_rem_pio2+0x574>
   1f2f4:	9c13      	ldr	r4, [sp, #76]
   1f2f6:	b10c      	cbz	r4, 1f2fc <__kernel_rem_pio2+0x58c>
   1f2f8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1f2fc:	9e0b      	ldr	r6, [sp, #44]
   1f2fe:	e886 0003 	stmia.w	r6, {r0, r1}
   1f302:	e0ac      	b.n	1f45e <__kernel_rem_pio2+0x6ee>
   1f304:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1f308:	f7fa fda0 	bl	19e4c <__adddf3>
   1f30c:	3c01      	subs	r4, #1
   1f30e:	3d08      	subs	r5, #8
   1f310:	2c00      	cmp	r4, #0
   1f312:	daf7      	bge.n	1f304 <__kernel_rem_pio2+0x594>
   1f314:	9a13      	ldr	r2, [sp, #76]
   1f316:	4604      	mov	r4, r0
   1f318:	460d      	mov	r5, r1
   1f31a:	b10a      	cbz	r2, 1f320 <__kernel_rem_pio2+0x5b0>
   1f31c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1f320:	9b0b      	ldr	r3, [sp, #44]
   1f322:	4622      	mov	r2, r4
   1f324:	e883 0003 	stmia.w	r3, {r0, r1}
   1f328:	ab50      	add	r3, sp, #320
   1f32a:	e893 0003 	ldmia.w	r3, {r0, r1}
   1f32e:	462b      	mov	r3, r5
   1f330:	f7fa fd8a 	bl	19e48 <__aeabi_dsub>
   1f334:	ad52      	add	r5, sp, #328
   1f336:	2401      	movs	r4, #1
   1f338:	e004      	b.n	1f344 <__kernel_rem_pio2+0x5d4>
   1f33a:	e915 000c 	ldmdb	r5, {r2, r3}
   1f33e:	f7fa fd85 	bl	19e4c <__adddf3>
   1f342:	3401      	adds	r4, #1
   1f344:	9e0d      	ldr	r6, [sp, #52]
   1f346:	3508      	adds	r5, #8
   1f348:	42b4      	cmp	r4, r6
   1f34a:	ddf6      	ble.n	1f33a <__kernel_rem_pio2+0x5ca>
   1f34c:	9c13      	ldr	r4, [sp, #76]
   1f34e:	b10c      	cbz	r4, 1f354 <__kernel_rem_pio2+0x5e4>
   1f350:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1f354:	9e0b      	ldr	r6, [sp, #44]
   1f356:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1f35a:	e080      	b.n	1f45e <__kernel_rem_pio2+0x6ee>
   1f35c:	e9d6 4502 	ldrd	r4, r5, [r6, #8]
   1f360:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   1f364:	4620      	mov	r0, r4
   1f366:	4629      	mov	r1, r5
   1f368:	f7fa fd70 	bl	19e4c <__adddf3>
   1f36c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1f370:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1f374:	4620      	mov	r0, r4
   1f376:	4629      	mov	r1, r5
   1f378:	f7fa fd66 	bl	19e48 <__aeabi_dsub>
   1f37c:	4602      	mov	r2, r0
   1f37e:	460b      	mov	r3, r1
   1f380:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   1f384:	f7fa fd62 	bl	19e4c <__adddf3>
   1f388:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1f38c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1f390:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1f394:	3f01      	subs	r7, #1
   1f396:	3e08      	subs	r6, #8
   1f398:	2f00      	cmp	r7, #0
   1f39a:	dcdf      	bgt.n	1f35c <__kernel_rem_pio2+0x5ec>
   1f39c:	990d      	ldr	r1, [sp, #52]
   1f39e:	9124      	str	r1, [sp, #144]
   1f3a0:	e022      	b.n	1f3e8 <__kernel_rem_pio2+0x678>
   1f3a2:	9b26      	ldr	r3, [sp, #152]
   1f3a4:	9a24      	ldr	r2, [sp, #144]
   1f3a6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   1f3aa:	3a01      	subs	r2, #1
   1f3ac:	e88d 0003 	stmia.w	sp, {r0, r1}
   1f3b0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
   1f3b4:	9224      	str	r2, [sp, #144]
   1f3b6:	4620      	mov	r0, r4
   1f3b8:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1f3bc:	4629      	mov	r1, r5
   1f3be:	f7fa fd45 	bl	19e4c <__adddf3>
   1f3c2:	4606      	mov	r6, r0
   1f3c4:	460f      	mov	r7, r1
   1f3c6:	4632      	mov	r2, r6
   1f3c8:	463b      	mov	r3, r7
   1f3ca:	4620      	mov	r0, r4
   1f3cc:	4629      	mov	r1, r5
   1f3ce:	f7fa fd3b 	bl	19e48 <__aeabi_dsub>
   1f3d2:	4602      	mov	r2, r0
   1f3d4:	460b      	mov	r3, r1
   1f3d6:	e89d 0003 	ldmia.w	sp, {r0, r1}
   1f3da:	f7fa fd37 	bl	19e4c <__adddf3>
   1f3de:	9a26      	ldr	r2, [sp, #152]
   1f3e0:	e9c2 0104 	strd	r0, r1, [r2, #16]
   1f3e4:	e9c2 6702 	strd	r6, r7, [r2, #8]
   1f3e8:	9b26      	ldr	r3, [sp, #152]
   1f3ea:	9c24      	ldr	r4, [sp, #144]
   1f3ec:	3b08      	subs	r3, #8
   1f3ee:	2c01      	cmp	r4, #1
   1f3f0:	9326      	str	r3, [sp, #152]
   1f3f2:	dcd6      	bgt.n	1f3a2 <__kernel_rem_pio2+0x632>
   1f3f4:	9e0d      	ldr	r6, [sp, #52]
   1f3f6:	ab50      	add	r3, sp, #320
   1f3f8:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
   1f3fc:	4634      	mov	r4, r6
   1f3fe:	2000      	movs	r0, #0
   1f400:	2100      	movs	r1, #0
   1f402:	e004      	b.n	1f40e <__kernel_rem_pio2+0x69e>
   1f404:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1f408:	f7fa fd20 	bl	19e4c <__adddf3>
   1f40c:	3c01      	subs	r4, #1
   1f40e:	3d08      	subs	r5, #8
   1f410:	2c01      	cmp	r4, #1
   1f412:	dcf7      	bgt.n	1f404 <__kernel_rem_pio2+0x694>
   1f414:	9a13      	ldr	r2, [sp, #76]
   1f416:	f50d 7ca0 	add.w	ip, sp, #320	; 0x140
   1f41a:	b95a      	cbnz	r2, 1f434 <__kernel_rem_pio2+0x6c4>
   1f41c:	9c0b      	ldr	r4, [sp, #44]
   1f41e:	e89c 000c 	ldmia.w	ip, {r2, r3}
   1f422:	e884 000c 	stmia.w	r4, {r2, r3}
   1f426:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
   1f42a:	e9c4 0104 	strd	r0, r1, [r4, #16]
   1f42e:	e9c4 2302 	strd	r2, r3, [r4, #8]
   1f432:	e014      	b.n	1f45e <__kernel_rem_pio2+0x6ee>
   1f434:	f8dc 3000 	ldr.w	r3, [ip]
   1f438:	9e0b      	ldr	r6, [sp, #44]
   1f43a:	6033      	str	r3, [r6, #0]
   1f43c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1f440:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1f444:	6073      	str	r3, [r6, #4]
   1f446:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1f44a:	60b3      	str	r3, [r6, #8]
   1f44c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1f450:	6130      	str	r0, [r6, #16]
   1f452:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1f456:	60f3      	str	r3, [r6, #12]
   1f458:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f45c:	6173      	str	r3, [r6, #20]
   1f45e:	9910      	ldr	r1, [sp, #64]
   1f460:	f001 0007 	and.w	r0, r1, #7	; 0x7
   1f464:	f50d 7d35 	add.w	sp, sp, #724	; 0x2d4
   1f468:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f46a:	46c0      	nop			(mov r8, r8)
   1f46c:	00023190 	.word	0x00023190
   1f470:	2aaaaaab 	.word	0x2aaaaaab
   1f474:	3e700000 	.word	0x3e700000
   1f478:	c1700000 	.word	0xc1700000
   1f47c:	c0200000 	.word	0xc0200000
   1f480:	3fe00000 	.word	0x3fe00000
   1f484:	3ff00000 	.word	0x3ff00000
   1f488:	41700000 	.word	0x41700000
   1f48c:	000231a0 	.word	0x000231a0

0001f490 <__kernel_sin>:
   1f490:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f492:	b089      	sub	sp, #36
   1f494:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1f498:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1f49c:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   1f4a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1f4a4:	da04      	bge.n	1f4b0 <__kernel_sin+0x20>
   1f4a6:	f7fb f91b 	bl	1a6e0 <__aeabi_d2iz>
   1f4aa:	2800      	cmp	r0, #0
   1f4ac:	f000 8085 	beq.w	1f5ba <__kernel_sin+0x12a>
   1f4b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1f4b4:	4602      	mov	r2, r0
   1f4b6:	460b      	mov	r3, r1
   1f4b8:	f7fa fe7a 	bl	1a1b0 <__aeabi_dmul>
   1f4bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1f4c0:	4606      	mov	r6, r0
   1f4c2:	460f      	mov	r7, r1
   1f4c4:	f7fa fe74 	bl	1a1b0 <__aeabi_dmul>
   1f4c8:	a23f      	add	r2, pc, #252	(adr r2, 1f5c8 <__kernel_sin+0x138>)
   1f4ca:	ca0c      	ldmia	r2!, {r2, r3}
   1f4cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1f4d0:	4630      	mov	r0, r6
   1f4d2:	4639      	mov	r1, r7
   1f4d4:	f7fa fe6c 	bl	1a1b0 <__aeabi_dmul>
   1f4d8:	a23d      	add	r2, pc, #244	(adr r2, 1f5d0 <__kernel_sin+0x140>)
   1f4da:	ca0c      	ldmia	r2!, {r2, r3}
   1f4dc:	f7fa fcb4 	bl	19e48 <__aeabi_dsub>
   1f4e0:	4602      	mov	r2, r0
   1f4e2:	460b      	mov	r3, r1
   1f4e4:	4630      	mov	r0, r6
   1f4e6:	4639      	mov	r1, r7
   1f4e8:	f7fa fe62 	bl	1a1b0 <__aeabi_dmul>
   1f4ec:	a23a      	add	r2, pc, #232	(adr r2, 1f5d8 <__kernel_sin+0x148>)
   1f4ee:	ca0c      	ldmia	r2!, {r2, r3}
   1f4f0:	f7fa fcac 	bl	19e4c <__adddf3>
   1f4f4:	4602      	mov	r2, r0
   1f4f6:	460b      	mov	r3, r1
   1f4f8:	4630      	mov	r0, r6
   1f4fa:	4639      	mov	r1, r7
   1f4fc:	f7fa fe58 	bl	1a1b0 <__aeabi_dmul>
   1f500:	a237      	add	r2, pc, #220	(adr r2, 1f5e0 <__kernel_sin+0x150>)
   1f502:	ca0c      	ldmia	r2!, {r2, r3}
   1f504:	f7fa fca0 	bl	19e48 <__aeabi_dsub>
   1f508:	4602      	mov	r2, r0
   1f50a:	460b      	mov	r3, r1
   1f50c:	4630      	mov	r0, r6
   1f50e:	4639      	mov	r1, r7
   1f510:	f7fa fe4e 	bl	1a1b0 <__aeabi_dmul>
   1f514:	a234      	add	r2, pc, #208	(adr r2, 1f5e8 <__kernel_sin+0x158>)
   1f516:	ca0c      	ldmia	r2!, {r2, r3}
   1f518:	f7fa fc98 	bl	19e4c <__adddf3>
   1f51c:	9b0e      	ldr	r3, [sp, #56]
   1f51e:	e88d 0003 	stmia.w	sp, {r0, r1}
   1f522:	b9b3      	cbnz	r3, 1f552 <__kernel_sin+0xc2>
   1f524:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1f528:	4630      	mov	r0, r6
   1f52a:	4639      	mov	r1, r7
   1f52c:	f7fa fe40 	bl	1a1b0 <__aeabi_dmul>
   1f530:	a22f      	add	r2, pc, #188	(adr r2, 1f5f0 <__kernel_sin+0x160>)
   1f532:	ca0c      	ldmia	r2!, {r2, r3}
   1f534:	f7fa fc88 	bl	19e48 <__aeabi_dsub>
   1f538:	4602      	mov	r2, r0
   1f53a:	460b      	mov	r3, r1
   1f53c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f540:	f7fa fe36 	bl	1a1b0 <__aeabi_dmul>
   1f544:	4602      	mov	r2, r0
   1f546:	460b      	mov	r3, r1
   1f548:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1f54c:	f7fa fc7e 	bl	19e4c <__adddf3>
   1f550:	e031      	b.n	1f5b6 <__kernel_sin+0x126>
   1f552:	2200      	movs	r2, #0
   1f554:	4b28      	ldr	r3, [pc, #160]	(1f5f8 <__kernel_sin+0x168>)
   1f556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f55a:	f7fa fe29 	bl	1a1b0 <__aeabi_dmul>
   1f55e:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1f562:	4604      	mov	r4, r0
   1f564:	460d      	mov	r5, r1
   1f566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f56a:	f7fa fe21 	bl	1a1b0 <__aeabi_dmul>
   1f56e:	4602      	mov	r2, r0
   1f570:	460b      	mov	r3, r1
   1f572:	4620      	mov	r0, r4
   1f574:	4629      	mov	r1, r5
   1f576:	f7fa fc67 	bl	19e48 <__aeabi_dsub>
   1f57a:	4602      	mov	r2, r0
   1f57c:	460b      	mov	r3, r1
   1f57e:	4630      	mov	r0, r6
   1f580:	4639      	mov	r1, r7
   1f582:	f7fa fe15 	bl	1a1b0 <__aeabi_dmul>
   1f586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1f58a:	f7fa fc5d 	bl	19e48 <__aeabi_dsub>
   1f58e:	a218      	add	r2, pc, #96	(adr r2, 1f5f0 <__kernel_sin+0x160>)
   1f590:	ca0c      	ldmia	r2!, {r2, r3}
   1f592:	4604      	mov	r4, r0
   1f594:	460d      	mov	r5, r1
   1f596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f59a:	f7fa fe09 	bl	1a1b0 <__aeabi_dmul>
   1f59e:	4602      	mov	r2, r0
   1f5a0:	460b      	mov	r3, r1
   1f5a2:	4620      	mov	r0, r4
   1f5a4:	4629      	mov	r1, r5
   1f5a6:	f7fa fc51 	bl	19e4c <__adddf3>
   1f5aa:	4602      	mov	r2, r0
   1f5ac:	460b      	mov	r3, r1
   1f5ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1f5b2:	f7fa fc49 	bl	19e48 <__aeabi_dsub>
   1f5b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1f5ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1f5be:	b009      	add	sp, #36
   1f5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f5c2:	46c0      	nop			(mov r8, r8)
   1f5c4:	46c0      	nop			(mov r8, r8)
   1f5c6:	46c0      	nop			(mov r8, r8)
   1f5c8:	5acfd57c 	.word	0x5acfd57c
   1f5cc:	3de5d93a 	.word	0x3de5d93a
   1f5d0:	8a2b9ceb 	.word	0x8a2b9ceb
   1f5d4:	3e5ae5e6 	.word	0x3e5ae5e6
   1f5d8:	57b1fe7d 	.word	0x57b1fe7d
   1f5dc:	3ec71de3 	.word	0x3ec71de3
   1f5e0:	19c161d5 	.word	0x19c161d5
   1f5e4:	3f2a01a0 	.word	0x3f2a01a0
   1f5e8:	1110f8a6 	.word	0x1110f8a6
   1f5ec:	3f811111 	.word	0x3f811111
   1f5f0:	55555549 	.word	0x55555549
   1f5f4:	3fc55555 	.word	0x3fc55555
   1f5f8:	3fe00000 	.word	0x3fe00000
   1f5fc:	46c046c0 	.word	0x46c046c0

0001f600 <atan>:
   1f600:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f602:	4bb3      	ldr	r3, [pc, #716]	(1f8d0 <atan+0x2d0>)
   1f604:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   1f608:	b087      	sub	sp, #28
   1f60a:	429c      	cmp	r4, r3
   1f60c:	4606      	mov	r6, r0
   1f60e:	460f      	mov	r7, r1
   1f610:	9104      	str	r1, [sp, #16]
   1f612:	dd1b      	ble.n	1f64c <atan+0x4c>
   1f614:	4baf      	ldr	r3, [pc, #700]	(1f8d4 <atan+0x2d4>)
   1f616:	429c      	cmp	r4, r3
   1f618:	dc08      	bgt.n	1f62c <atan+0x2c>
   1f61a:	bf14      	ite	ne
   1f61c:	2300      	movne	r3, #0
   1f61e:	2301      	moveq	r3, #1
   1f620:	2800      	cmp	r0, #0
   1f622:	bf0c      	ite	eq
   1f624:	2300      	moveq	r3, #0
   1f626:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   1f62a:	b133      	cbz	r3, 1f63a <atan+0x3a>
   1f62c:	4630      	mov	r0, r6
   1f62e:	4639      	mov	r1, r7
   1f630:	4632      	mov	r2, r6
   1f632:	463b      	mov	r3, r7
   1f634:	f7fa fc0a 	bl	19e4c <__adddf3>
   1f638:	e10c      	b.n	1f854 <atan+0x254>
   1f63a:	9904      	ldr	r1, [sp, #16]
   1f63c:	2900      	cmp	r1, #0
   1f63e:	dd02      	ble.n	1f646 <atan+0x46>
   1f640:	a687      	add	r6, pc, #540	(adr r6, 1f860 <atan+0x260>)
   1f642:	cec0      	ldmia	r6!, {r6, r7}
   1f644:	e17b      	b.n	1f93e <atan+0x33e>
   1f646:	a688      	add	r6, pc, #544	(adr r6, 1f868 <atan+0x268>)
   1f648:	cec0      	ldmia	r6!, {r6, r7}
   1f64a:	e178      	b.n	1f93e <atan+0x33e>
   1f64c:	4ba2      	ldr	r3, [pc, #648]	(1f8d8 <atan+0x2d8>)
   1f64e:	429c      	cmp	r4, r3
   1f650:	dc0f      	bgt.n	1f672 <atan+0x72>
   1f652:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   1f656:	429c      	cmp	r4, r3
   1f658:	dc6f      	bgt.n	1f73a <atan+0x13a>
   1f65a:	a285      	add	r2, pc, #532	(adr r2, 1f870 <atan+0x270>)
   1f65c:	ca0c      	ldmia	r2!, {r2, r3}
   1f65e:	f7fa fbf5 	bl	19e4c <__adddf3>
   1f662:	2200      	movs	r2, #0
   1f664:	4b9d      	ldr	r3, [pc, #628]	(1f8dc <atan+0x2dc>)
   1f666:	f7fb f831 	bl	1a6cc <__aeabi_dcmpgt>
   1f66a:	2800      	cmp	r0, #0
   1f66c:	f040 8167 	bne.w	1f93e <atan+0x33e>
   1f670:	e063      	b.n	1f73a <atan+0x13a>
   1f672:	f000 f96d 	bl	1f950 <fabs>
   1f676:	4b9a      	ldr	r3, [pc, #616]	(1f8e0 <atan+0x2e0>)
   1f678:	4606      	mov	r6, r0
   1f67a:	429c      	cmp	r4, r3
   1f67c:	460f      	mov	r7, r1
   1f67e:	dc34      	bgt.n	1f6ea <atan+0xea>
   1f680:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   1f684:	429c      	cmp	r4, r3
   1f686:	dc1a      	bgt.n	1f6be <atan+0xbe>
   1f688:	4632      	mov	r2, r6
   1f68a:	463b      	mov	r3, r7
   1f68c:	f7fa fbde 	bl	19e4c <__adddf3>
   1f690:	2200      	movs	r2, #0
   1f692:	4b92      	ldr	r3, [pc, #584]	(1f8dc <atan+0x2dc>)
   1f694:	f7fa fbd8 	bl	19e48 <__aeabi_dsub>
   1f698:	2200      	movs	r2, #0
   1f69a:	4604      	mov	r4, r0
   1f69c:	460d      	mov	r5, r1
   1f69e:	4630      	mov	r0, r6
   1f6a0:	4639      	mov	r1, r7
   1f6a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f6a6:	f7fa fbd1 	bl	19e4c <__adddf3>
   1f6aa:	460b      	mov	r3, r1
   1f6ac:	4602      	mov	r2, r0
   1f6ae:	4629      	mov	r1, r5
   1f6b0:	4620      	mov	r0, r4
   1f6b2:	f7fa fea7 	bl	1a404 <__aeabi_ddiv>
   1f6b6:	2300      	movs	r3, #0
   1f6b8:	4606      	mov	r6, r0
   1f6ba:	460f      	mov	r7, r1
   1f6bc:	e03f      	b.n	1f73e <atan+0x13e>
   1f6be:	2200      	movs	r2, #0
   1f6c0:	4b86      	ldr	r3, [pc, #536]	(1f8dc <atan+0x2dc>)
   1f6c2:	f7fa fbc1 	bl	19e48 <__aeabi_dsub>
   1f6c6:	2200      	movs	r2, #0
   1f6c8:	4604      	mov	r4, r0
   1f6ca:	460d      	mov	r5, r1
   1f6cc:	4630      	mov	r0, r6
   1f6ce:	4639      	mov	r1, r7
   1f6d0:	4b82      	ldr	r3, [pc, #520]	(1f8dc <atan+0x2dc>)
   1f6d2:	f7fa fbbb 	bl	19e4c <__adddf3>
   1f6d6:	4602      	mov	r2, r0
   1f6d8:	460b      	mov	r3, r1
   1f6da:	4620      	mov	r0, r4
   1f6dc:	4629      	mov	r1, r5
   1f6de:	f7fa fe91 	bl	1a404 <__aeabi_ddiv>
   1f6e2:	460f      	mov	r7, r1
   1f6e4:	4606      	mov	r6, r0
   1f6e6:	2101      	movs	r1, #1
   1f6e8:	e025      	b.n	1f736 <atan+0x136>
   1f6ea:	4b7e      	ldr	r3, [pc, #504]	(1f8e4 <atan+0x2e4>)
   1f6ec:	429c      	cmp	r4, r3
   1f6ee:	dc19      	bgt.n	1f724 <atan+0x124>
   1f6f0:	2200      	movs	r2, #0
   1f6f2:	4b7d      	ldr	r3, [pc, #500]	(1f8e8 <atan+0x2e8>)
   1f6f4:	f7fa fba8 	bl	19e48 <__aeabi_dsub>
   1f6f8:	2200      	movs	r2, #0
   1f6fa:	4604      	mov	r4, r0
   1f6fc:	460d      	mov	r5, r1
   1f6fe:	4630      	mov	r0, r6
   1f700:	4639      	mov	r1, r7
   1f702:	4b79      	ldr	r3, [pc, #484]	(1f8e8 <atan+0x2e8>)
   1f704:	f7fa fd54 	bl	1a1b0 <__aeabi_dmul>
   1f708:	2200      	movs	r2, #0
   1f70a:	4b74      	ldr	r3, [pc, #464]	(1f8dc <atan+0x2dc>)
   1f70c:	f7fa fb9e 	bl	19e4c <__adddf3>
   1f710:	460b      	mov	r3, r1
   1f712:	4602      	mov	r2, r0
   1f714:	4629      	mov	r1, r5
   1f716:	4620      	mov	r0, r4
   1f718:	f7fa fe74 	bl	1a404 <__aeabi_ddiv>
   1f71c:	2302      	movs	r3, #2
   1f71e:	4606      	mov	r6, r0
   1f720:	460f      	mov	r7, r1
   1f722:	e00c      	b.n	1f73e <atan+0x13e>
   1f724:	4632      	mov	r2, r6
   1f726:	463b      	mov	r3, r7
   1f728:	2000      	movs	r0, #0
   1f72a:	4970      	ldr	r1, [pc, #448]	(1f8ec <atan+0x2ec>)
   1f72c:	f7fa fe6a 	bl	1a404 <__aeabi_ddiv>
   1f730:	460f      	mov	r7, r1
   1f732:	4606      	mov	r6, r0
   1f734:	2103      	movs	r1, #3
   1f736:	9105      	str	r1, [sp, #20]
   1f738:	e002      	b.n	1f740 <atan+0x140>
   1f73a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f73e:	9305      	str	r3, [sp, #20]
   1f740:	4632      	mov	r2, r6
   1f742:	463b      	mov	r3, r7
   1f744:	4630      	mov	r0, r6
   1f746:	4639      	mov	r1, r7
   1f748:	f7fa fd32 	bl	1a1b0 <__aeabi_dmul>
   1f74c:	4602      	mov	r2, r0
   1f74e:	460b      	mov	r3, r1
   1f750:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1f754:	f7fa fd2c 	bl	1a1b0 <__aeabi_dmul>
   1f758:	a247      	add	r2, pc, #284	(adr r2, 1f878 <atan+0x278>)
   1f75a:	ca0c      	ldmia	r2!, {r2, r3}
   1f75c:	4604      	mov	r4, r0
   1f75e:	460d      	mov	r5, r1
   1f760:	f7fa fd26 	bl	1a1b0 <__aeabi_dmul>
   1f764:	a246      	add	r2, pc, #280	(adr r2, 1f880 <atan+0x280>)
   1f766:	ca0c      	ldmia	r2!, {r2, r3}
   1f768:	f7fa fb70 	bl	19e4c <__adddf3>
   1f76c:	4602      	mov	r2, r0
   1f76e:	460b      	mov	r3, r1
   1f770:	4620      	mov	r0, r4
   1f772:	4629      	mov	r1, r5
   1f774:	f7fa fd1c 	bl	1a1b0 <__aeabi_dmul>
   1f778:	a243      	add	r2, pc, #268	(adr r2, 1f888 <atan+0x288>)
   1f77a:	ca0c      	ldmia	r2!, {r2, r3}
   1f77c:	f7fa fb66 	bl	19e4c <__adddf3>
   1f780:	4602      	mov	r2, r0
   1f782:	460b      	mov	r3, r1
   1f784:	4620      	mov	r0, r4
   1f786:	4629      	mov	r1, r5
   1f788:	f7fa fd12 	bl	1a1b0 <__aeabi_dmul>
   1f78c:	a240      	add	r2, pc, #256	(adr r2, 1f890 <atan+0x290>)
   1f78e:	ca0c      	ldmia	r2!, {r2, r3}
   1f790:	f7fa fb5c 	bl	19e4c <__adddf3>
   1f794:	4602      	mov	r2, r0
   1f796:	460b      	mov	r3, r1
   1f798:	4620      	mov	r0, r4
   1f79a:	4629      	mov	r1, r5
   1f79c:	f7fa fd08 	bl	1a1b0 <__aeabi_dmul>
   1f7a0:	a23d      	add	r2, pc, #244	(adr r2, 1f898 <atan+0x298>)
   1f7a2:	ca0c      	ldmia	r2!, {r2, r3}
   1f7a4:	f7fa fb52 	bl	19e4c <__adddf3>
   1f7a8:	4602      	mov	r2, r0
   1f7aa:	460b      	mov	r3, r1
   1f7ac:	4620      	mov	r0, r4
   1f7ae:	4629      	mov	r1, r5
   1f7b0:	f7fa fcfe 	bl	1a1b0 <__aeabi_dmul>
   1f7b4:	a23a      	add	r2, pc, #232	(adr r2, 1f8a0 <atan+0x2a0>)
   1f7b6:	ca0c      	ldmia	r2!, {r2, r3}
   1f7b8:	f7fa fb48 	bl	19e4c <__adddf3>
   1f7bc:	4602      	mov	r2, r0
   1f7be:	460b      	mov	r3, r1
   1f7c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f7c4:	f7fa fcf4 	bl	1a1b0 <__aeabi_dmul>
   1f7c8:	a237      	add	r2, pc, #220	(adr r2, 1f8a8 <atan+0x2a8>)
   1f7ca:	ca0c      	ldmia	r2!, {r2, r3}
   1f7cc:	e88d 0003 	stmia.w	sp, {r0, r1}
   1f7d0:	4620      	mov	r0, r4
   1f7d2:	4629      	mov	r1, r5
   1f7d4:	f7fa fcec 	bl	1a1b0 <__aeabi_dmul>
   1f7d8:	a235      	add	r2, pc, #212	(adr r2, 1f8b0 <atan+0x2b0>)
   1f7da:	ca0c      	ldmia	r2!, {r2, r3}
   1f7dc:	f7fa fb34 	bl	19e48 <__aeabi_dsub>
   1f7e0:	4602      	mov	r2, r0
   1f7e2:	460b      	mov	r3, r1
   1f7e4:	4620      	mov	r0, r4
   1f7e6:	4629      	mov	r1, r5
   1f7e8:	f7fa fce2 	bl	1a1b0 <__aeabi_dmul>
   1f7ec:	a232      	add	r2, pc, #200	(adr r2, 1f8b8 <atan+0x2b8>)
   1f7ee:	ca0c      	ldmia	r2!, {r2, r3}
   1f7f0:	f7fa fb2a 	bl	19e48 <__aeabi_dsub>
   1f7f4:	4602      	mov	r2, r0
   1f7f6:	460b      	mov	r3, r1
   1f7f8:	4620      	mov	r0, r4
   1f7fa:	4629      	mov	r1, r5
   1f7fc:	f7fa fcd8 	bl	1a1b0 <__aeabi_dmul>
   1f800:	a22f      	add	r2, pc, #188	(adr r2, 1f8c0 <atan+0x2c0>)
   1f802:	ca0c      	ldmia	r2!, {r2, r3}
   1f804:	f7fa fb20 	bl	19e48 <__aeabi_dsub>
   1f808:	4602      	mov	r2, r0
   1f80a:	460b      	mov	r3, r1
   1f80c:	4620      	mov	r0, r4
   1f80e:	4629      	mov	r1, r5
   1f810:	f7fa fcce 	bl	1a1b0 <__aeabi_dmul>
   1f814:	a22c      	add	r2, pc, #176	(adr r2, 1f8c8 <atan+0x2c8>)
   1f816:	ca0c      	ldmia	r2!, {r2, r3}
   1f818:	f7fa fb16 	bl	19e48 <__aeabi_dsub>
   1f81c:	4602      	mov	r2, r0
   1f81e:	460b      	mov	r3, r1
   1f820:	4620      	mov	r0, r4
   1f822:	4629      	mov	r1, r5
   1f824:	f7fa fcc4 	bl	1a1b0 <__aeabi_dmul>
   1f828:	460b      	mov	r3, r1
   1f82a:	9905      	ldr	r1, [sp, #20]
   1f82c:	4602      	mov	r2, r0
   1f82e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1f832:	d15d      	bne.n	1f8f0 <atan+0x2f0>
   1f834:	e89d 0003 	ldmia.w	sp, {r0, r1}
   1f838:	f7fa fb08 	bl	19e4c <__adddf3>
   1f83c:	4602      	mov	r2, r0
   1f83e:	460b      	mov	r3, r1
   1f840:	4630      	mov	r0, r6
   1f842:	4639      	mov	r1, r7
   1f844:	f7fa fcb4 	bl	1a1b0 <__aeabi_dmul>
   1f848:	4602      	mov	r2, r0
   1f84a:	460b      	mov	r3, r1
   1f84c:	4630      	mov	r0, r6
   1f84e:	4639      	mov	r1, r7
   1f850:	f7fa fafa 	bl	19e48 <__aeabi_dsub>
   1f854:	4606      	mov	r6, r0
   1f856:	460f      	mov	r7, r1
   1f858:	e071      	b.n	1f93e <atan+0x33e>
   1f85a:	46c0      	nop			(mov r8, r8)
   1f85c:	46c0      	nop			(mov r8, r8)
   1f85e:	46c0      	nop			(mov r8, r8)
   1f860:	54442d18 	.word	0x54442d18
   1f864:	3ff921fb 	.word	0x3ff921fb
   1f868:	54442d18 	.word	0x54442d18
   1f86c:	bff921fb 	.word	0xbff921fb
   1f870:	8800759c 	.word	0x8800759c
   1f874:	7e37e43c 	.word	0x7e37e43c
   1f878:	e322da11 	.word	0xe322da11
   1f87c:	3f90ad3a 	.word	0x3f90ad3a
   1f880:	24760deb 	.word	0x24760deb
   1f884:	3fa97b4b 	.word	0x3fa97b4b
   1f888:	a0d03d51 	.word	0xa0d03d51
   1f88c:	3fb10d66 	.word	0x3fb10d66
   1f890:	c54c206e 	.word	0xc54c206e
   1f894:	3fb745cd 	.word	0x3fb745cd
   1f898:	920083ff 	.word	0x920083ff
   1f89c:	3fc24924 	.word	0x3fc24924
   1f8a0:	5555550d 	.word	0x5555550d
   1f8a4:	3fd55555 	.word	0x3fd55555
   1f8a8:	2c6a6c2f 	.word	0x2c6a6c2f
   1f8ac:	bfa2b444 	.word	0xbfa2b444
   1f8b0:	52defd9a 	.word	0x52defd9a
   1f8b4:	3fadde2d 	.word	0x3fadde2d
   1f8b8:	af749a6d 	.word	0xaf749a6d
   1f8bc:	3fb3b0f2 	.word	0x3fb3b0f2
   1f8c0:	fe231671 	.word	0xfe231671
   1f8c4:	3fbc71c6 	.word	0x3fbc71c6
   1f8c8:	9998ebc4 	.word	0x9998ebc4
   1f8cc:	3fc99999 	.word	0x3fc99999
   1f8d0:	440fffff 	.word	0x440fffff
   1f8d4:	7ff00000 	.word	0x7ff00000
   1f8d8:	3fdbffff 	.word	0x3fdbffff
   1f8dc:	3ff00000 	.word	0x3ff00000
   1f8e0:	3ff2ffff 	.word	0x3ff2ffff
   1f8e4:	40037fff 	.word	0x40037fff
   1f8e8:	3ff80000 	.word	0x3ff80000
   1f8ec:	bff00000 	.word	0xbff00000
   1f8f0:	9905      	ldr	r1, [sp, #20]
   1f8f2:	4c15      	ldr	r4, [pc, #84]	(1f948 <atan+0x348>)
   1f8f4:	00cd      	lsls	r5, r1, #3
   1f8f6:	e89d 0003 	ldmia.w	sp, {r0, r1}
   1f8fa:	f7fa faa7 	bl	19e4c <__adddf3>
   1f8fe:	4602      	mov	r2, r0
   1f900:	460b      	mov	r3, r1
   1f902:	4630      	mov	r0, r6
   1f904:	4639      	mov	r1, r7
   1f906:	f7fa fc53 	bl	1a1b0 <__aeabi_dmul>
   1f90a:	4b10      	ldr	r3, [pc, #64]	(1f94c <atan+0x34c>)
   1f90c:	1964      	adds	r4, r4, r5
   1f90e:	195b      	adds	r3, r3, r5
   1f910:	cb0c      	ldmia	r3!, {r2, r3}
   1f912:	f7fa fa99 	bl	19e48 <__aeabi_dsub>
   1f916:	4632      	mov	r2, r6
   1f918:	463b      	mov	r3, r7
   1f91a:	f7fa fa95 	bl	19e48 <__aeabi_dsub>
   1f91e:	4602      	mov	r2, r0
   1f920:	460b      	mov	r3, r1
   1f922:	e894 0003 	ldmia.w	r4, {r0, r1}
   1f926:	f7fa fa8f 	bl	19e48 <__aeabi_dsub>
   1f92a:	9b04      	ldr	r3, [sp, #16]
   1f92c:	2b00      	cmp	r3, #0
   1f92e:	bfa7      	ittee	ge
   1f930:	4602      	movge	r2, r0
   1f932:	460b      	movge	r3, r1
   1f934:	4602      	movlt	r2, r0
   1f936:	f101 4300 	addlt.w	r3, r1, #2147483648	; 0x80000000
   1f93a:	4616      	mov	r6, r2
   1f93c:	461f      	mov	r7, r3
   1f93e:	4630      	mov	r0, r6
   1f940:	4639      	mov	r1, r7
   1f942:	b007      	add	sp, #28
   1f944:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f946:	46c0      	nop			(mov r8, r8)
   1f948:	000231e0 	.word	0x000231e0
   1f94c:	00023200 	.word	0x00023200

0001f950 <fabs>:
   1f950:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1f954:	b530      	push	{r4, r5, lr}
   1f956:	460d      	mov	r5, r1
   1f958:	4604      	mov	r4, r0
   1f95a:	4619      	mov	r1, r3
   1f95c:	bd30      	pop	{r4, r5, pc}
   1f95e:	46c0      	nop			(mov r8, r8)

0001f960 <floor>:
   1f960:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f962:	150b      	asrs	r3, r1, #20
   1f964:	055b      	lsls	r3, r3, #21
   1f966:	0d5b      	lsrs	r3, r3, #21
   1f968:	f5a3 757e 	sub.w	r5, r3, #1016	; 0x3f8
   1f96c:	3d07      	subs	r5, #7
   1f96e:	b083      	sub	sp, #12
   1f970:	2d13      	cmp	r5, #19
   1f972:	460c      	mov	r4, r1
   1f974:	9001      	str	r0, [sp, #4]
   1f976:	4606      	mov	r6, r0
   1f978:	dc32      	bgt.n	1f9e0 <floor+0x80>
   1f97a:	2d00      	cmp	r5, #0
   1f97c:	da14      	bge.n	1f9a8 <floor+0x48>
   1f97e:	a230      	add	r2, pc, #192	(adr r2, 1fa40 <floor+0xe0>)
   1f980:	ca0c      	ldmia	r2!, {r2, r3}
   1f982:	f7fa fa63 	bl	19e4c <__adddf3>
   1f986:	2200      	movs	r2, #0
   1f988:	2300      	movs	r3, #0
   1f98a:	f7fa fe9f 	bl	1a6cc <__aeabi_dcmpgt>
   1f98e:	2800      	cmp	r0, #0
   1f990:	d051      	beq.n	1fa36 <floor+0xd6>
   1f992:	2c00      	cmp	r4, #0
   1f994:	db01      	blt.n	1f99a <floor+0x3a>
   1f996:	2400      	movs	r4, #0
   1f998:	e020      	b.n	1f9dc <floor+0x7c>
   1f99a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   1f99e:	4333      	orrs	r3, r6
   1f9a0:	4b29      	ldr	r3, [pc, #164]	(1fa48 <floor+0xe8>)
   1f9a2:	bf18      	it	ne
   1f9a4:	461c      	movne	r4, r3
   1f9a6:	e019      	b.n	1f9dc <floor+0x7c>
   1f9a8:	4b28      	ldr	r3, [pc, #160]	(1fa4c <floor+0xec>)
   1f9aa:	9a01      	ldr	r2, [sp, #4]
   1f9ac:	fa53 f705 	asrs.w	r7, r3, r5
   1f9b0:	ea07 0301 	and.w	r3, r7, r1
   1f9b4:	431a      	orrs	r2, r3
   1f9b6:	d040      	beq.n	1fa3a <floor+0xda>
   1f9b8:	a221      	add	r2, pc, #132	(adr r2, 1fa40 <floor+0xe0>)
   1f9ba:	ca0c      	ldmia	r2!, {r2, r3}
   1f9bc:	f7fa fa46 	bl	19e4c <__adddf3>
   1f9c0:	2200      	movs	r2, #0
   1f9c2:	2300      	movs	r3, #0
   1f9c4:	f7fa fe82 	bl	1a6cc <__aeabi_dcmpgt>
   1f9c8:	2800      	cmp	r0, #0
   1f9ca:	d034      	beq.n	1fa36 <floor+0xd6>
   1f9cc:	2c00      	cmp	r4, #0
   1f9ce:	da03      	bge.n	1f9d8 <floor+0x78>
   1f9d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1f9d4:	412b      	asrs	r3, r5
   1f9d6:	18e4      	adds	r4, r4, r3
   1f9d8:	ea24 0407 	bic.w	r4, r4, r7
   1f9dc:	2600      	movs	r6, #0
   1f9de:	e02a      	b.n	1fa36 <floor+0xd6>
   1f9e0:	2d33      	cmp	r5, #51
   1f9e2:	dd07      	ble.n	1f9f4 <floor+0x94>
   1f9e4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   1f9e8:	d127      	bne.n	1fa3a <floor+0xda>
   1f9ea:	4602      	mov	r2, r0
   1f9ec:	460b      	mov	r3, r1
   1f9ee:	f7fa fa2d 	bl	19e4c <__adddf3>
   1f9f2:	e022      	b.n	1fa3a <floor+0xda>
   1f9f4:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
   1f9f8:	3b03      	subs	r3, #3
   1f9fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f9fe:	fa32 f703 	lsrs.w	r7, r2, r3
   1fa02:	4207      	tst	r7, r0
   1fa04:	d019      	beq.n	1fa3a <floor+0xda>
   1fa06:	a20e      	add	r2, pc, #56	(adr r2, 1fa40 <floor+0xe0>)
   1fa08:	ca0c      	ldmia	r2!, {r2, r3}
   1fa0a:	f7fa fa1f 	bl	19e4c <__adddf3>
   1fa0e:	2200      	movs	r2, #0
   1fa10:	2300      	movs	r3, #0
   1fa12:	f7fa fe5b 	bl	1a6cc <__aeabi_dcmpgt>
   1fa16:	b170      	cbz	r0, 1fa36 <floor+0xd6>
   1fa18:	2c00      	cmp	r4, #0
   1fa1a:	da0a      	bge.n	1fa32 <floor+0xd2>
   1fa1c:	2d14      	cmp	r5, #20
   1fa1e:	d007      	beq.n	1fa30 <floor+0xd0>
   1fa20:	2301      	movs	r3, #1
   1fa22:	f1c5 0234 	rsb	r2, r5, #52	; 0x34
   1fa26:	4093      	lsls	r3, r2
   1fa28:	18f6      	adds	r6, r6, r3
   1fa2a:	9b01      	ldr	r3, [sp, #4]
   1fa2c:	429e      	cmp	r6, r3
   1fa2e:	d200      	bcs.n	1fa32 <floor+0xd2>
   1fa30:	3401      	adds	r4, #1
   1fa32:	ea26 0607 	bic.w	r6, r6, r7
   1fa36:	4630      	mov	r0, r6
   1fa38:	4621      	mov	r1, r4
   1fa3a:	b003      	add	sp, #12
   1fa3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fa3e:	46c0      	nop			(mov r8, r8)
   1fa40:	8800759c 	.word	0x8800759c
   1fa44:	7e37e43c 	.word	0x7e37e43c
   1fa48:	bff00000 	.word	0xbff00000
   1fa4c:	000fffff 	.word	0x000fffff

0001fa50 <__isnand>:
   1fa50:	460b      	mov	r3, r1
   1fa52:	f1c0 0100 	rsb	r1, r0, #0	; 0x0
   1fa56:	4301      	orrs	r1, r0
   1fa58:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1fa5c:	ea40 70d1 	orr.w	r0, r0, r1, lsr #31
   1fa60:	f1c0 40fe 	rsb	r0, r0, #2130706432	; 0x7f000000
   1fa64:	f500 0070 	add.w	r0, r0, #15728640	; 0xf00000
   1fa68:	0fc0      	lsrs	r0, r0, #31
   1fa6a:	4770      	bx	lr

0001fa6c <matherr>:
   1fa6c:	2000      	movs	r0, #0
   1fa6e:	4770      	bx	lr

0001fa70 <scalbn>:
   1fa70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa72:	4b37      	ldr	r3, [pc, #220]	(1fb50 <scalbn+0xe0>)
   1fa74:	460d      	mov	r5, r1
   1fa76:	ea05 0303 	and.w	r3, r5, r3
   1fa7a:	4617      	mov	r7, r2
   1fa7c:	b081      	sub	sp, #4
   1fa7e:	4604      	mov	r4, r0
   1fa80:	460e      	mov	r6, r1
   1fa82:	151a      	asrs	r2, r3, #20
   1fa84:	b973      	cbnz	r3, 1faa4 <scalbn+0x34>
   1fa86:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   1fa8a:	4303      	orrs	r3, r0
   1fa8c:	d054      	beq.n	1fb38 <scalbn+0xc8>
   1fa8e:	4629      	mov	r1, r5
   1fa90:	2200      	movs	r2, #0
   1fa92:	4b30      	ldr	r3, [pc, #192]	(1fb54 <scalbn+0xe4>)
   1fa94:	f7fa fb8c 	bl	1a1b0 <__aeabi_dmul>
   1fa98:	4b2f      	ldr	r3, [pc, #188]	(1fb58 <scalbn+0xe8>)
   1fa9a:	4604      	mov	r4, r0
   1fa9c:	429f      	cmp	r7, r3
   1fa9e:	460d      	mov	r5, r1
   1faa0:	da0a      	bge.n	1fab8 <scalbn+0x48>
   1faa2:	e037      	b.n	1fb14 <scalbn+0xa4>
   1faa4:	f240 73ff 	movw	r3, #2047	; 0x7ff
   1faa8:	429a      	cmp	r2, r3
   1faaa:	d10c      	bne.n	1fac6 <scalbn+0x56>
   1faac:	4629      	mov	r1, r5
   1faae:	4602      	mov	r2, r0
   1fab0:	462b      	mov	r3, r5
   1fab2:	f7fa f9cb 	bl	19e4c <__adddf3>
   1fab6:	e03d      	b.n	1fb34 <scalbn+0xc4>
   1fab8:	4b25      	ldr	r3, [pc, #148]	(1fb50 <scalbn+0xe0>)
   1faba:	460e      	mov	r6, r1
   1fabc:	ea01 0303 	and.w	r3, r1, r3
   1fac0:	151b      	asrs	r3, r3, #20
   1fac2:	f1a3 0236 	sub.w	r2, r3, #54	; 0x36
   1fac6:	eb02 0c07 	add.w	ip, r2, r7
   1faca:	f240 73fe 	movw	r3, #2046	; 0x7fe
   1face:	459c      	cmp	ip, r3
   1fad0:	dc11      	bgt.n	1faf6 <scalbn+0x86>
   1fad2:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   1fad6:	dd07      	ble.n	1fae8 <scalbn+0x78>
   1fad8:	f026 41fe 	bic.w	r1, r6, #2130706432	; 0x7f000000
   1fadc:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
   1fae0:	ea41 530c 	orr.w	r3, r1, ip, lsl #20
   1fae4:	461d      	mov	r5, r3
   1fae6:	e027      	b.n	1fb38 <scalbn+0xc8>
   1fae8:	f11c 0f35 	cmn.w	ip, #53	; 0x35
   1faec:	da15      	bge.n	1fb1a <scalbn+0xaa>
   1faee:	f24c 3350 	movw	r3, #50000	; 0xc350
   1faf2:	429f      	cmp	r7, r3
   1faf4:	dd08      	ble.n	1fb08 <scalbn+0x98>
   1faf6:	4622      	mov	r2, r4
   1faf8:	462b      	mov	r3, r5
   1fafa:	a011      	add	r0, pc, #68	(adr r0, 1fb40 <scalbn+0xd0>)
   1fafc:	c803      	ldmia	r0!, {r0, r1}
   1fafe:	f000 f82f 	bl	1fb60 <copysign>
   1fb02:	a20f      	add	r2, pc, #60	(adr r2, 1fb40 <scalbn+0xd0>)
   1fb04:	ca0c      	ldmia	r2!, {r2, r3}
   1fb06:	e013      	b.n	1fb30 <scalbn+0xc0>
   1fb08:	a00f      	add	r0, pc, #60	(adr r0, 1fb48 <scalbn+0xd8>)
   1fb0a:	c803      	ldmia	r0!, {r0, r1}
   1fb0c:	4622      	mov	r2, r4
   1fb0e:	462b      	mov	r3, r5
   1fb10:	f000 f826 	bl	1fb60 <copysign>
   1fb14:	a20c      	add	r2, pc, #48	(adr r2, 1fb48 <scalbn+0xd8>)
   1fb16:	ca0c      	ldmia	r2!, {r2, r3}
   1fb18:	e00a      	b.n	1fb30 <scalbn+0xc0>
   1fb1a:	f026 43fe 	bic.w	r3, r6, #2130706432	; 0x7f000000
   1fb1e:	f10c 0236 	add.w	r2, ip, #54	; 0x36
   1fb22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   1fb26:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
   1fb2a:	4b0c      	ldr	r3, [pc, #48]	(1fb5c <scalbn+0xec>)
   1fb2c:	4620      	mov	r0, r4
   1fb2e:	2200      	movs	r2, #0
   1fb30:	f7fa fb3e 	bl	1a1b0 <__aeabi_dmul>
   1fb34:	4604      	mov	r4, r0
   1fb36:	460d      	mov	r5, r1
   1fb38:	4620      	mov	r0, r4
   1fb3a:	4629      	mov	r1, r5
   1fb3c:	b001      	add	sp, #4
   1fb3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fb40:	8800759c 	.word	0x8800759c
   1fb44:	7e37e43c 	.word	0x7e37e43c
   1fb48:	c2f8f359 	.word	0xc2f8f359
   1fb4c:	01a56e1f 	.word	0x01a56e1f
   1fb50:	7ff00000 	.word	0x7ff00000
   1fb54:	43500000 	.word	0x43500000
   1fb58:	ffff3cb0 	.word	0xffff3cb0
   1fb5c:	3c900000 	.word	0x3c900000

0001fb60 <copysign>:
   1fb60:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fb62:	4606      	mov	r6, r0
   1fb64:	460f      	mov	r7, r1
   1fb66:	f003 4000 	and.w	r0, r3, #2147483648	; 0x80000000
   1fb6a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1fb6e:	461d      	mov	r5, r3
   1fb70:	ea40 0301 	orr.w	r3, r0, r1
   1fb74:	4614      	mov	r4, r2
   1fb76:	4630      	mov	r0, r6
   1fb78:	4619      	mov	r1, r3
   1fb7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fb7c <abort>:
   1fb7c:	2006      	movs	r0, #6
   1fb7e:	f000 ffb1 	bl	20ae4 <raise>
   1fb82:	2001      	movs	r0, #1
   1fb84:	f7f7 fa24 	bl	16fd0 <_exit>

0001fb88 <__errno>:
   1fb88:	4b01      	ldr	r3, [pc, #4]	(1fb90 <__errno+0x8>)
   1fb8a:	6818      	ldr	r0, [r3, #0]
   1fb8c:	300c      	adds	r0, #12
   1fb8e:	4770      	bx	lr
   1fb90:	20000044 	.word	0x20000044

0001fb94 <_fputc_r>:
   1fb94:	b570      	push	{r4, r5, r6, lr}
   1fb96:	4604      	mov	r4, r0
   1fb98:	460e      	mov	r6, r1
   1fb9a:	4615      	mov	r5, r2
   1fb9c:	b118      	cbz	r0, 1fba6 <_fputc_r+0x12>
   1fb9e:	6983      	ldr	r3, [r0, #24]
   1fba0:	b90b      	cbnz	r3, 1fba6 <_fputc_r+0x12>
   1fba2:	f001 faf9 	bl	21198 <__sinit>
   1fba6:	4b0a      	ldr	r3, [pc, #40]	(1fbd0 <_fputc_r+0x3c>)
   1fba8:	429d      	cmp	r5, r3
   1fbaa:	bf08      	it	eq
   1fbac:	6825      	ldreq	r5, [r4, #0]
   1fbae:	d008      	beq.n	1fbc2 <_fputc_r+0x2e>
   1fbb0:	4b08      	ldr	r3, [pc, #32]	(1fbd4 <_fputc_r+0x40>)
   1fbb2:	429d      	cmp	r5, r3
   1fbb4:	bf08      	it	eq
   1fbb6:	6865      	ldreq	r5, [r4, #4]
   1fbb8:	d003      	beq.n	1fbc2 <_fputc_r+0x2e>
   1fbba:	4b07      	ldr	r3, [pc, #28]	(1fbd8 <_fputc_r+0x44>)
   1fbbc:	429d      	cmp	r5, r3
   1fbbe:	bf08      	it	eq
   1fbc0:	68a5      	ldreq	r5, [r4, #8]
   1fbc2:	4620      	mov	r0, r4
   1fbc4:	4631      	mov	r1, r6
   1fbc6:	462a      	mov	r2, r5
   1fbc8:	f000 fcc6 	bl	20558 <_putc_r>
   1fbcc:	bd70      	pop	{r4, r5, r6, pc}
   1fbce:	46c0      	nop			(mov r8, r8)
   1fbd0:	00023228 	.word	0x00023228
   1fbd4:	00023248 	.word	0x00023248
   1fbd8:	00023268 	.word	0x00023268

0001fbdc <fputc>:
   1fbdc:	b500      	push	{lr}
   1fbde:	4b05      	ldr	r3, [pc, #20]	(1fbf4 <fputc+0x18>)
   1fbe0:	4684      	mov	ip, r0
   1fbe2:	460a      	mov	r2, r1
   1fbe4:	b081      	sub	sp, #4
   1fbe6:	6818      	ldr	r0, [r3, #0]
   1fbe8:	4661      	mov	r1, ip
   1fbea:	f7ff ffd3 	bl	1fb94 <_fputc_r>
   1fbee:	b001      	add	sp, #4
   1fbf0:	bd00      	pop	{pc}
   1fbf2:	46c0      	nop			(mov r8, r8)
   1fbf4:	20000044 	.word	0x20000044

0001fbf8 <_fputs_r>:
   1fbf8:	b530      	push	{r4, r5, lr}
   1fbfa:	4605      	mov	r5, r0
   1fbfc:	b087      	sub	sp, #28
   1fbfe:	4608      	mov	r0, r1
   1fc00:	4614      	mov	r4, r2
   1fc02:	9104      	str	r1, [sp, #16]
   1fc04:	f001 f824 	bl	20c50 <strlen>
   1fc08:	ab04      	add	r3, sp, #16
   1fc0a:	9301      	str	r3, [sp, #4]
   1fc0c:	2301      	movs	r3, #1
   1fc0e:	9003      	str	r0, [sp, #12]
   1fc10:	9005      	str	r0, [sp, #20]
   1fc12:	9302      	str	r3, [sp, #8]
   1fc14:	b125      	cbz	r5, 1fc20 <_fputs_r+0x28>
   1fc16:	69ab      	ldr	r3, [r5, #24]
   1fc18:	b913      	cbnz	r3, 1fc20 <_fputs_r+0x28>
   1fc1a:	4628      	mov	r0, r5
   1fc1c:	f001 fabc 	bl	21198 <__sinit>
   1fc20:	4b10      	ldr	r3, [pc, #64]	(1fc64 <_fputs_r+0x6c>)
   1fc22:	429c      	cmp	r4, r3
   1fc24:	bf08      	it	eq
   1fc26:	682c      	ldreq	r4, [r5, #0]
   1fc28:	d008      	beq.n	1fc3c <_fputs_r+0x44>
   1fc2a:	4b0f      	ldr	r3, [pc, #60]	(1fc68 <_fputs_r+0x70>)
   1fc2c:	429c      	cmp	r4, r3
   1fc2e:	bf08      	it	eq
   1fc30:	686c      	ldreq	r4, [r5, #4]
   1fc32:	d003      	beq.n	1fc3c <_fputs_r+0x44>
   1fc34:	4b0d      	ldr	r3, [pc, #52]	(1fc6c <_fputs_r+0x74>)
   1fc36:	429c      	cmp	r4, r3
   1fc38:	bf08      	it	eq
   1fc3a:	68ac      	ldreq	r4, [r5, #8]
   1fc3c:	89a3      	ldrh	r3, [r4, #12]
   1fc3e:	4628      	mov	r0, r5
   1fc40:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1fc44:	bf02      	ittt	eq
   1fc46:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
   1fc4a:	81a3      	strheq	r3, [r4, #12]
   1fc4c:	6e63      	ldreq	r3, [r4, #100]
   1fc4e:	4621      	mov	r1, r4
   1fc50:	bf04      	itt	eq
   1fc52:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
   1fc56:	6663      	streq	r3, [r4, #100]
   1fc58:	aa01      	add	r2, sp, #4
   1fc5a:	f000 f817 	bl	1fc8c <__sfvwrite_r>
   1fc5e:	b007      	add	sp, #28
   1fc60:	bd30      	pop	{r4, r5, pc}
   1fc62:	46c0      	nop			(mov r8, r8)
   1fc64:	00023228 	.word	0x00023228
   1fc68:	00023248 	.word	0x00023248
   1fc6c:	00023268 	.word	0x00023268

0001fc70 <fputs>:
   1fc70:	b500      	push	{lr}
   1fc72:	4b05      	ldr	r3, [pc, #20]	(1fc88 <fputs+0x18>)
   1fc74:	4684      	mov	ip, r0
   1fc76:	460a      	mov	r2, r1
   1fc78:	b081      	sub	sp, #4
   1fc7a:	6818      	ldr	r0, [r3, #0]
   1fc7c:	4661      	mov	r1, ip
   1fc7e:	f7ff ffbb 	bl	1fbf8 <_fputs_r>
   1fc82:	b001      	add	sp, #4
   1fc84:	bd00      	pop	{pc}
   1fc86:	46c0      	nop			(mov r8, r8)
   1fc88:	20000044 	.word	0x20000044

0001fc8c <__sfvwrite_r>:
   1fc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fc8e:	6893      	ldr	r3, [r2, #8]
   1fc90:	b089      	sub	sp, #36
   1fc92:	9001      	str	r0, [sp, #4]
   1fc94:	460d      	mov	r5, r1
   1fc96:	9200      	str	r2, [sp, #0]
   1fc98:	2b00      	cmp	r3, #0
   1fc9a:	f000 815b 	beq.w	1ff54 <__sfvwrite_r+0x2c8>
   1fc9e:	898b      	ldrh	r3, [r1, #12]
   1fca0:	f013 0f08 	tst.w	r3, #8	; 0x8
   1fca4:	d001      	beq.n	1fcaa <__sfvwrite_r+0x1e>
   1fca6:	690b      	ldr	r3, [r1, #16]
   1fca8:	b963      	cbnz	r3, 1fcc4 <__sfvwrite_r+0x38>
   1fcaa:	9801      	ldr	r0, [sp, #4]
   1fcac:	4629      	mov	r1, r5
   1fcae:	f001 f891 	bl	20dd4 <__swsetup_r>
   1fcb2:	b138      	cbz	r0, 1fcc4 <__sfvwrite_r+0x38>
   1fcb4:	89ab      	ldrh	r3, [r5, #12]
   1fcb6:	9801      	ldr	r0, [sp, #4]
   1fcb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1fcbc:	81ab      	strh	r3, [r5, #12]
   1fcbe:	2309      	movs	r3, #9
   1fcc0:	60c3      	str	r3, [r0, #12]
   1fcc2:	e144      	b.n	1ff4e <__sfvwrite_r+0x2c2>
   1fcc4:	9a00      	ldr	r2, [sp, #0]
   1fcc6:	89ab      	ldrh	r3, [r5, #12]
   1fcc8:	6812      	ldr	r2, [r2, #0]
   1fcca:	f013 0f02 	tst.w	r3, #2	; 0x2
   1fcce:	9202      	str	r2, [sp, #8]
   1fcd0:	d021      	beq.n	1fd16 <__sfvwrite_r+0x8a>
   1fcd2:	2600      	movs	r6, #0
   1fcd4:	2700      	movs	r7, #0
   1fcd6:	e004      	b.n	1fce2 <__sfvwrite_r+0x56>
   1fcd8:	9b02      	ldr	r3, [sp, #8]
   1fcda:	681f      	ldr	r7, [r3, #0]
   1fcdc:	685e      	ldr	r6, [r3, #4]
   1fcde:	3308      	adds	r3, #8
   1fce0:	9302      	str	r3, [sp, #8]
   1fce2:	2e00      	cmp	r6, #0
   1fce4:	d0f8      	beq.n	1fcd8 <__sfvwrite_r+0x4c>
   1fce6:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   1fcea:	bf34      	ite	cc
   1fcec:	4633      	movcc	r3, r6
   1fcee:	f44f 7380 	movcs.w	r3, #256	; 0x100
   1fcf2:	6a29      	ldr	r1, [r5, #32]
   1fcf4:	6aac      	ldr	r4, [r5, #40]
   1fcf6:	9801      	ldr	r0, [sp, #4]
   1fcf8:	463a      	mov	r2, r7
   1fcfa:	47a0      	blx	r4
   1fcfc:	2800      	cmp	r0, #0
   1fcfe:	f340 8122 	ble.w	1ff46 <__sfvwrite_r+0x2ba>
   1fd02:	9a00      	ldr	r2, [sp, #0]
   1fd04:	6893      	ldr	r3, [r2, #8]
   1fd06:	1a1b      	subs	r3, r3, r0
   1fd08:	6093      	str	r3, [r2, #8]
   1fd0a:	2b00      	cmp	r3, #0
   1fd0c:	f000 8122 	beq.w	1ff54 <__sfvwrite_r+0x2c8>
   1fd10:	183f      	adds	r7, r7, r0
   1fd12:	1a36      	subs	r6, r6, r0
   1fd14:	e7e5      	b.n	1fce2 <__sfvwrite_r+0x56>
   1fd16:	f013 0f01 	tst.w	r3, #1	; 0x1
   1fd1a:	d005      	beq.n	1fd28 <__sfvwrite_r+0x9c>
   1fd1c:	2700      	movs	r7, #0
   1fd1e:	2300      	movs	r3, #0
   1fd20:	9306      	str	r3, [sp, #24]
   1fd22:	9703      	str	r7, [sp, #12]
   1fd24:	9704      	str	r7, [sp, #16]
   1fd26:	e0aa      	b.n	1fe7e <__sfvwrite_r+0x1f2>
   1fd28:	2600      	movs	r6, #0
   1fd2a:	9607      	str	r6, [sp, #28]
   1fd2c:	e006      	b.n	1fd3c <__sfvwrite_r+0xb0>
   1fd2e:	9802      	ldr	r0, [sp, #8]
   1fd30:	9a02      	ldr	r2, [sp, #8]
   1fd32:	6800      	ldr	r0, [r0, #0]
   1fd34:	6856      	ldr	r6, [r2, #4]
   1fd36:	3208      	adds	r2, #8
   1fd38:	9007      	str	r0, [sp, #28]
   1fd3a:	9202      	str	r2, [sp, #8]
   1fd3c:	2e00      	cmp	r6, #0
   1fd3e:	d0f6      	beq.n	1fd2e <__sfvwrite_r+0xa2>
   1fd40:	89aa      	ldrh	r2, [r5, #12]
   1fd42:	68ac      	ldr	r4, [r5, #8]
   1fd44:	f412 7f00 	tst.w	r2, #512	; 0x200
   1fd48:	d056      	beq.n	1fdf8 <__sfvwrite_r+0x16c>
   1fd4a:	42a6      	cmp	r6, r4
   1fd4c:	d346      	bcc.n	1fddc <__sfvwrite_r+0x150>
   1fd4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
   1fd52:	d041      	beq.n	1fdd8 <__sfvwrite_r+0x14c>
   1fd54:	6929      	ldr	r1, [r5, #16]
   1fd56:	682b      	ldr	r3, [r5, #0]
   1fd58:	1a5b      	subs	r3, r3, r1
   1fd5a:	9305      	str	r3, [sp, #20]
   1fd5c:	696b      	ldr	r3, [r5, #20]
   1fd5e:	9805      	ldr	r0, [sp, #20]
   1fd60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1fd64:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1fd68:	105f      	asrs	r7, r3, #1
   1fd6a:	1c43      	adds	r3, r0, #1
   1fd6c:	199b      	adds	r3, r3, r6
   1fd6e:	429f      	cmp	r7, r3
   1fd70:	bf38      	it	cc
   1fd72:	461f      	movcc	r7, r3
   1fd74:	f412 6f80 	tst.w	r2, #1024	; 0x400
   1fd78:	d016      	beq.n	1fda8 <__sfvwrite_r+0x11c>
   1fd7a:	9801      	ldr	r0, [sp, #4]
   1fd7c:	4639      	mov	r1, r7
   1fd7e:	f000 f95b 	bl	20038 <_malloc_r>
   1fd82:	4604      	mov	r4, r0
   1fd84:	b918      	cbnz	r0, 1fd8e <__sfvwrite_r+0x102>
   1fd86:	9a01      	ldr	r2, [sp, #4]
   1fd88:	230c      	movs	r3, #12
   1fd8a:	60d3      	str	r3, [r2, #12]
   1fd8c:	e0db      	b.n	1ff46 <__sfvwrite_r+0x2ba>
   1fd8e:	6929      	ldr	r1, [r5, #16]
   1fd90:	9a05      	ldr	r2, [sp, #20]
   1fd92:	f000 fba7 	bl	204e4 <memcpy>
   1fd96:	89ab      	ldrh	r3, [r5, #12]
   1fd98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1fd9c:	041b      	lsls	r3, r3, #16
   1fd9e:	0c1b      	lsrs	r3, r3, #16
   1fda0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1fda4:	81ab      	strh	r3, [r5, #12]
   1fda6:	e00d      	b.n	1fdc4 <__sfvwrite_r+0x138>
   1fda8:	9801      	ldr	r0, [sp, #4]
   1fdaa:	463a      	mov	r2, r7
   1fdac:	f000 fc2e 	bl	2060c <_realloc_r>
   1fdb0:	4604      	mov	r4, r0
   1fdb2:	b938      	cbnz	r0, 1fdc4 <__sfvwrite_r+0x138>
   1fdb4:	9801      	ldr	r0, [sp, #4]
   1fdb6:	6929      	ldr	r1, [r5, #16]
   1fdb8:	f001 fa74 	bl	212a4 <_free_r>
   1fdbc:	9801      	ldr	r0, [sp, #4]
   1fdbe:	230c      	movs	r3, #12
   1fdc0:	60c3      	str	r3, [r0, #12]
   1fdc2:	e0c0      	b.n	1ff46 <__sfvwrite_r+0x2ba>
   1fdc4:	9a05      	ldr	r2, [sp, #20]
   1fdc6:	612c      	str	r4, [r5, #16]
   1fdc8:	eb04 0302 	add.w	r3, r4, r2
   1fdcc:	602b      	str	r3, [r5, #0]
   1fdce:	ebc2 0307 	rsb	r3, r2, r7
   1fdd2:	616f      	str	r7, [r5, #20]
   1fdd4:	4634      	mov	r4, r6
   1fdd6:	60ab      	str	r3, [r5, #8]
   1fdd8:	42a6      	cmp	r6, r4
   1fdda:	d200      	bcs.n	1fdde <__sfvwrite_r+0x152>
   1fddc:	4634      	mov	r4, r6
   1fdde:	4622      	mov	r2, r4
   1fde0:	6828      	ldr	r0, [r5, #0]
   1fde2:	9907      	ldr	r1, [sp, #28]
   1fde4:	f000 fb8c 	bl	20500 <memmove>
   1fde8:	68ab      	ldr	r3, [r5, #8]
   1fdea:	1b1b      	subs	r3, r3, r4
   1fdec:	60ab      	str	r3, [r5, #8]
   1fdee:	682b      	ldr	r3, [r5, #0]
   1fdf0:	191b      	adds	r3, r3, r4
   1fdf2:	602b      	str	r3, [r5, #0]
   1fdf4:	4634      	mov	r4, r6
   1fdf6:	e02f      	b.n	1fe58 <__sfvwrite_r+0x1cc>
   1fdf8:	6828      	ldr	r0, [r5, #0]
   1fdfa:	692a      	ldr	r2, [r5, #16]
   1fdfc:	42a6      	cmp	r6, r4
   1fdfe:	bf94      	ite	ls
   1fe00:	2300      	movls	r3, #0
   1fe02:	2301      	movhi	r3, #1
   1fe04:	4290      	cmp	r0, r2
   1fe06:	bf94      	ite	ls
   1fe08:	2300      	movls	r3, #0
   1fe0a:	f003 0301 	andhi.w	r3, r3, #1	; 0x1
   1fe0e:	b163      	cbz	r3, 1fe2a <__sfvwrite_r+0x19e>
   1fe10:	9907      	ldr	r1, [sp, #28]
   1fe12:	4622      	mov	r2, r4
   1fe14:	f000 fb74 	bl	20500 <memmove>
   1fe18:	682b      	ldr	r3, [r5, #0]
   1fe1a:	9801      	ldr	r0, [sp, #4]
   1fe1c:	191b      	adds	r3, r3, r4
   1fe1e:	602b      	str	r3, [r5, #0]
   1fe20:	4629      	mov	r1, r5
   1fe22:	f001 f849 	bl	20eb8 <_fflush_r>
   1fe26:	b1b8      	cbz	r0, 1fe58 <__sfvwrite_r+0x1cc>
   1fe28:	e08d      	b.n	1ff46 <__sfvwrite_r+0x2ba>
   1fe2a:	696b      	ldr	r3, [r5, #20]
   1fe2c:	429e      	cmp	r6, r3
   1fe2e:	d308      	bcc.n	1fe42 <__sfvwrite_r+0x1b6>
   1fe30:	6aac      	ldr	r4, [r5, #40]
   1fe32:	6a29      	ldr	r1, [r5, #32]
   1fe34:	9801      	ldr	r0, [sp, #4]
   1fe36:	9a07      	ldr	r2, [sp, #28]
   1fe38:	47a0      	blx	r4
   1fe3a:	2800      	cmp	r0, #0
   1fe3c:	4604      	mov	r4, r0
   1fe3e:	dc0b      	bgt.n	1fe58 <__sfvwrite_r+0x1cc>
   1fe40:	e081      	b.n	1ff46 <__sfvwrite_r+0x2ba>
   1fe42:	9907      	ldr	r1, [sp, #28]
   1fe44:	4632      	mov	r2, r6
   1fe46:	f000 fb5b 	bl	20500 <memmove>
   1fe4a:	68ab      	ldr	r3, [r5, #8]
   1fe4c:	4634      	mov	r4, r6
   1fe4e:	1b9b      	subs	r3, r3, r6
   1fe50:	60ab      	str	r3, [r5, #8]
   1fe52:	682b      	ldr	r3, [r5, #0]
   1fe54:	199b      	adds	r3, r3, r6
   1fe56:	602b      	str	r3, [r5, #0]
   1fe58:	9800      	ldr	r0, [sp, #0]
   1fe5a:	6883      	ldr	r3, [r0, #8]
   1fe5c:	1b1b      	subs	r3, r3, r4
   1fe5e:	6083      	str	r3, [r0, #8]
   1fe60:	2b00      	cmp	r3, #0
   1fe62:	d077      	beq.n	1ff54 <__sfvwrite_r+0x2c8>
   1fe64:	9a07      	ldr	r2, [sp, #28]
   1fe66:	1b36      	subs	r6, r6, r4
   1fe68:	1912      	adds	r2, r2, r4
   1fe6a:	9207      	str	r2, [sp, #28]
   1fe6c:	e766      	b.n	1fd3c <__sfvwrite_r+0xb0>
   1fe6e:	9b02      	ldr	r3, [sp, #8]
   1fe70:	2200      	movs	r2, #0
   1fe72:	6858      	ldr	r0, [r3, #4]
   1fe74:	681f      	ldr	r7, [r3, #0]
   1fe76:	3308      	adds	r3, #8
   1fe78:	9006      	str	r0, [sp, #24]
   1fe7a:	9302      	str	r3, [sp, #8]
   1fe7c:	9203      	str	r2, [sp, #12]
   1fe7e:	9b06      	ldr	r3, [sp, #24]
   1fe80:	2b00      	cmp	r3, #0
   1fe82:	d0f4      	beq.n	1fe6e <__sfvwrite_r+0x1e2>
   1fe84:	9803      	ldr	r0, [sp, #12]
   1fe86:	b980      	cbnz	r0, 1feaa <__sfvwrite_r+0x21e>
   1fe88:	4638      	mov	r0, r7
   1fe8a:	210a      	movs	r1, #10
   1fe8c:	461a      	mov	r2, r3
   1fe8e:	f000 fb0b 	bl	204a8 <memchr>
   1fe92:	b128      	cbz	r0, 1fea0 <__sfvwrite_r+0x214>
   1fe94:	1c43      	adds	r3, r0, #1
   1fe96:	1bdb      	subs	r3, r3, r7
   1fe98:	2201      	movs	r2, #1
   1fe9a:	9304      	str	r3, [sp, #16]
   1fe9c:	9203      	str	r2, [sp, #12]
   1fe9e:	e004      	b.n	1feaa <__sfvwrite_r+0x21e>
   1fea0:	9b06      	ldr	r3, [sp, #24]
   1fea2:	2001      	movs	r0, #1
   1fea4:	3301      	adds	r3, #1
   1fea6:	9304      	str	r3, [sp, #16]
   1fea8:	9003      	str	r0, [sp, #12]
   1feaa:	9a06      	ldr	r2, [sp, #24]
   1feac:	68ab      	ldr	r3, [r5, #8]
   1feae:	9e04      	ldr	r6, [sp, #16]
   1feb0:	f8d5 c014 	ldr.w	ip, [r5, #20]
   1feb4:	4296      	cmp	r6, r2
   1feb6:	bf28      	it	cs
   1feb8:	4616      	movcs	r6, r2
   1feba:	eb0c 0403 	add.w	r4, ip, r3
   1febe:	6828      	ldr	r0, [r5, #0]
   1fec0:	692a      	ldr	r2, [r5, #16]
   1fec2:	42a6      	cmp	r6, r4
   1fec4:	bfd4      	ite	le
   1fec6:	2300      	movle	r3, #0
   1fec8:	2301      	movgt	r3, #1
   1feca:	4290      	cmp	r0, r2
   1fecc:	bf94      	ite	ls
   1fece:	2300      	movls	r3, #0
   1fed0:	f003 0301 	andhi.w	r3, r3, #1	; 0x1
   1fed4:	b163      	cbz	r3, 1fef0 <__sfvwrite_r+0x264>
   1fed6:	4639      	mov	r1, r7
   1fed8:	4622      	mov	r2, r4
   1feda:	f000 fb11 	bl	20500 <memmove>
   1fede:	682b      	ldr	r3, [r5, #0]
   1fee0:	9801      	ldr	r0, [sp, #4]
   1fee2:	191b      	adds	r3, r3, r4
   1fee4:	602b      	str	r3, [r5, #0]
   1fee6:	4629      	mov	r1, r5
   1fee8:	f000 ffe6 	bl	20eb8 <_fflush_r>
   1feec:	b1b8      	cbz	r0, 1ff1e <__sfvwrite_r+0x292>
   1feee:	e02a      	b.n	1ff46 <__sfvwrite_r+0x2ba>
   1fef0:	4566      	cmp	r6, ip
   1fef2:	db09      	blt.n	1ff08 <__sfvwrite_r+0x27c>
   1fef4:	6aac      	ldr	r4, [r5, #40]
   1fef6:	6a29      	ldr	r1, [r5, #32]
   1fef8:	9801      	ldr	r0, [sp, #4]
   1fefa:	463a      	mov	r2, r7
   1fefc:	4663      	mov	r3, ip
   1fefe:	47a0      	blx	r4
   1ff00:	2800      	cmp	r0, #0
   1ff02:	4604      	mov	r4, r0
   1ff04:	dc0b      	bgt.n	1ff1e <__sfvwrite_r+0x292>
   1ff06:	e01e      	b.n	1ff46 <__sfvwrite_r+0x2ba>
   1ff08:	4639      	mov	r1, r7
   1ff0a:	4632      	mov	r2, r6
   1ff0c:	f000 faf8 	bl	20500 <memmove>
   1ff10:	68ab      	ldr	r3, [r5, #8]
   1ff12:	4634      	mov	r4, r6
   1ff14:	1b9b      	subs	r3, r3, r6
   1ff16:	60ab      	str	r3, [r5, #8]
   1ff18:	682b      	ldr	r3, [r5, #0]
   1ff1a:	199b      	adds	r3, r3, r6
   1ff1c:	602b      	str	r3, [r5, #0]
   1ff1e:	9b04      	ldr	r3, [sp, #16]
   1ff20:	1b1b      	subs	r3, r3, r4
   1ff22:	9304      	str	r3, [sp, #16]
   1ff24:	d105      	bne.n	1ff32 <__sfvwrite_r+0x2a6>
   1ff26:	9801      	ldr	r0, [sp, #4]
   1ff28:	4629      	mov	r1, r5
   1ff2a:	f000 ffc5 	bl	20eb8 <_fflush_r>
   1ff2e:	b950      	cbnz	r0, 1ff46 <__sfvwrite_r+0x2ba>
   1ff30:	9003      	str	r0, [sp, #12]
   1ff32:	9a00      	ldr	r2, [sp, #0]
   1ff34:	6893      	ldr	r3, [r2, #8]
   1ff36:	1b1b      	subs	r3, r3, r4
   1ff38:	6093      	str	r3, [r2, #8]
   1ff3a:	b15b      	cbz	r3, 1ff54 <__sfvwrite_r+0x2c8>
   1ff3c:	9b06      	ldr	r3, [sp, #24]
   1ff3e:	193f      	adds	r7, r7, r4
   1ff40:	1b1b      	subs	r3, r3, r4
   1ff42:	9306      	str	r3, [sp, #24]
   1ff44:	e79b      	b.n	1fe7e <__sfvwrite_r+0x1f2>
   1ff46:	89ab      	ldrh	r3, [r5, #12]
   1ff48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ff4c:	81ab      	strh	r3, [r5, #12]
   1ff4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ff52:	e000      	b.n	1ff56 <__sfvwrite_r+0x2ca>
   1ff54:	2000      	movs	r0, #0
   1ff56:	b009      	add	sp, #36
   1ff58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ff5a:	46c0      	nop			(mov r8, r8)

0001ff5c <_fwrite_r>:
   1ff5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff5e:	fb02 f603 	mul.w	r6, r2, r3
   1ff62:	b089      	sub	sp, #36
   1ff64:	461f      	mov	r7, r3
   1ff66:	ab06      	add	r3, sp, #24
   1ff68:	9303      	str	r3, [sp, #12]
   1ff6a:	2301      	movs	r3, #1
   1ff6c:	4605      	mov	r5, r0
   1ff6e:	9201      	str	r2, [sp, #4]
   1ff70:	9c0e      	ldr	r4, [sp, #56]
   1ff72:	9106      	str	r1, [sp, #24]
   1ff74:	9607      	str	r6, [sp, #28]
   1ff76:	9605      	str	r6, [sp, #20]
   1ff78:	9304      	str	r3, [sp, #16]
   1ff7a:	b118      	cbz	r0, 1ff84 <_fwrite_r+0x28>
   1ff7c:	6983      	ldr	r3, [r0, #24]
   1ff7e:	b90b      	cbnz	r3, 1ff84 <_fwrite_r+0x28>
   1ff80:	f001 f90a 	bl	21198 <__sinit>
   1ff84:	4b14      	ldr	r3, [pc, #80]	(1ffd8 <_fwrite_r+0x7c>)
   1ff86:	429c      	cmp	r4, r3
   1ff88:	bf08      	it	eq
   1ff8a:	682c      	ldreq	r4, [r5, #0]
   1ff8c:	d008      	beq.n	1ffa0 <_fwrite_r+0x44>
   1ff8e:	4b13      	ldr	r3, [pc, #76]	(1ffdc <_fwrite_r+0x80>)
   1ff90:	429c      	cmp	r4, r3
   1ff92:	bf08      	it	eq
   1ff94:	686c      	ldreq	r4, [r5, #4]
   1ff96:	d003      	beq.n	1ffa0 <_fwrite_r+0x44>
   1ff98:	4b11      	ldr	r3, [pc, #68]	(1ffe0 <_fwrite_r+0x84>)
   1ff9a:	429c      	cmp	r4, r3
   1ff9c:	bf08      	it	eq
   1ff9e:	68ac      	ldreq	r4, [r5, #8]
   1ffa0:	89a3      	ldrh	r3, [r4, #12]
   1ffa2:	4628      	mov	r0, r5
   1ffa4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1ffa8:	bf02      	ittt	eq
   1ffaa:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
   1ffae:	81a3      	strheq	r3, [r4, #12]
   1ffb0:	6e63      	ldreq	r3, [r4, #100]
   1ffb2:	4621      	mov	r1, r4
   1ffb4:	bf04      	itt	eq
   1ffb6:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
   1ffba:	6663      	streq	r3, [r4, #100]
   1ffbc:	aa03      	add	r2, sp, #12
   1ffbe:	f7ff fe65 	bl	1fc8c <__sfvwrite_r>
   1ffc2:	b128      	cbz	r0, 1ffd0 <_fwrite_r+0x74>
   1ffc4:	9b05      	ldr	r3, [sp, #20]
   1ffc6:	9a01      	ldr	r2, [sp, #4]
   1ffc8:	ebc3 0306 	rsb	r3, r3, r6
   1ffcc:	fbb3 f7f2 	udiv	r7, r3, r2
   1ffd0:	4638      	mov	r0, r7
   1ffd2:	b009      	add	sp, #36
   1ffd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ffd6:	46c0      	nop			(mov r8, r8)
   1ffd8:	00023228 	.word	0x00023228
   1ffdc:	00023248 	.word	0x00023248
   1ffe0:	00023268 	.word	0x00023268

0001ffe4 <fwrite>:
   1ffe4:	b510      	push	{r4, lr}
   1ffe6:	4614      	mov	r4, r2
   1ffe8:	4a06      	ldr	r2, [pc, #24]	(20004 <fwrite+0x20>)
   1ffea:	4684      	mov	ip, r0
   1ffec:	468e      	mov	lr, r1
   1ffee:	b082      	sub	sp, #8
   1fff0:	6810      	ldr	r0, [r2, #0]
   1fff2:	4661      	mov	r1, ip
   1fff4:	9300      	str	r3, [sp, #0]
   1fff6:	4672      	mov	r2, lr
   1fff8:	4623      	mov	r3, r4
   1fffa:	f7ff ffaf 	bl	1ff5c <_fwrite_r>
   1fffe:	b002      	add	sp, #8
   20000:	bd10      	pop	{r4, pc}
   20002:	46c0      	nop			(mov r8, r8)
   20004:	20000044 	.word	0x20000044

00020008 <free>:
   20008:	b500      	push	{lr}
   2000a:	4b04      	ldr	r3, [pc, #16]	(2001c <free+0x14>)
   2000c:	4601      	mov	r1, r0
   2000e:	b081      	sub	sp, #4
   20010:	6818      	ldr	r0, [r3, #0]
   20012:	f001 f947 	bl	212a4 <_free_r>
   20016:	b001      	add	sp, #4
   20018:	bd00      	pop	{pc}
   2001a:	46c0      	nop			(mov r8, r8)
   2001c:	20000044 	.word	0x20000044

00020020 <malloc>:
   20020:	b500      	push	{lr}
   20022:	4b04      	ldr	r3, [pc, #16]	(20034 <malloc+0x14>)
   20024:	4601      	mov	r1, r0
   20026:	b081      	sub	sp, #4
   20028:	6818      	ldr	r0, [r3, #0]
   2002a:	f000 f805 	bl	20038 <_malloc_r>
   2002e:	b001      	add	sp, #4
   20030:	bd00      	pop	{pc}
   20032:	46c0      	nop			(mov r8, r8)
   20034:	20000044 	.word	0x20000044

00020038 <_malloc_r>:
   20038:	b5f0      	push	{r4, r5, r6, r7, lr}
   2003a:	f101 020b 	add.w	r2, r1, #11	; 0xb
   2003e:	2a16      	cmp	r2, #22
   20040:	bf8c      	ite	hi
   20042:	f022 0607 	bichi.w	r6, r2, #7	; 0x7
   20046:	2610      	movls	r6, #16
   20048:	428e      	cmp	r6, r1
   2004a:	bf2c      	ite	cs
   2004c:	2300      	movcs	r3, #0
   2004e:	2301      	movcc	r3, #1
   20050:	b083      	sub	sp, #12
   20052:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
   20056:	9000      	str	r0, [sp, #0]
   20058:	d003      	beq.n	20062 <_malloc_r+0x2a>
   2005a:	9900      	ldr	r1, [sp, #0]
   2005c:	230c      	movs	r3, #12
   2005e:	60cb      	str	r3, [r1, #12]
   20060:	e1fe      	b.n	20460 <_malloc_r+0x428>
   20062:	9800      	ldr	r0, [sp, #0]
   20064:	f000 fa74 	bl	20550 <__malloc_lock>
   20068:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   2006c:	d218      	bcs.n	200a0 <_malloc_r+0x68>
   2006e:	f8df 341c 	ldr.w	r3, [pc, #1052]	; 2048c <_malloc_r+0x454>
   20072:	08f2      	lsrs	r2, r6, #3
   20074:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20078:	68dc      	ldr	r4, [r3, #12]
   2007a:	429c      	cmp	r4, r3
   2007c:	d107      	bne.n	2008e <_malloc_r+0x56>
   2007e:	f104 0308 	add.w	r3, r4, #8	; 0x8
   20082:	68dc      	ldr	r4, [r3, #12]
   20084:	429c      	cmp	r4, r3
   20086:	bf08      	it	eq
   20088:	f102 0e02 	addeq.w	lr, r2, #2	; 0x2
   2008c:	d04c      	beq.n	20128 <_malloc_r+0xf0>
   2008e:	6862      	ldr	r2, [r4, #4]
   20090:	68e1      	ldr	r1, [r4, #12]
   20092:	68a3      	ldr	r3, [r4, #8]
   20094:	f022 0203 	bic.w	r2, r2, #3	; 0x3
   20098:	60d9      	str	r1, [r3, #12]
   2009a:	608b      	str	r3, [r1, #8]
   2009c:	4422      	add	r2, r4
   2009e:	e03a      	b.n	20116 <_malloc_r+0xde>
   200a0:	0a72      	lsrs	r2, r6, #9
   200a2:	d101      	bne.n	200a8 <_malloc_r+0x70>
   200a4:	08f2      	lsrs	r2, r6, #3
   200a6:	e01f      	b.n	200e8 <_malloc_r+0xb0>
   200a8:	2a04      	cmp	r2, #4
   200aa:	d803      	bhi.n	200b4 <_malloc_r+0x7c>
   200ac:	09b3      	lsrs	r3, r6, #6
   200ae:	f103 0238 	add.w	r2, r3, #56	; 0x38
   200b2:	e019      	b.n	200e8 <_malloc_r+0xb0>
   200b4:	2a14      	cmp	r2, #20
   200b6:	d801      	bhi.n	200bc <_malloc_r+0x84>
   200b8:	325b      	adds	r2, #91
   200ba:	e015      	b.n	200e8 <_malloc_r+0xb0>
   200bc:	2a54      	cmp	r2, #84
   200be:	d803      	bhi.n	200c8 <_malloc_r+0x90>
   200c0:	0b33      	lsrs	r3, r6, #12
   200c2:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   200c6:	e00f      	b.n	200e8 <_malloc_r+0xb0>
   200c8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   200cc:	d803      	bhi.n	200d6 <_malloc_r+0x9e>
   200ce:	0bf3      	lsrs	r3, r6, #15
   200d0:	f103 0277 	add.w	r2, r3, #119	; 0x77
   200d4:	e008      	b.n	200e8 <_malloc_r+0xb0>
   200d6:	f240 5354 	movw	r3, #1364	; 0x554
   200da:	429a      	cmp	r2, r3
   200dc:	d901      	bls.n	200e2 <_malloc_r+0xaa>
   200de:	227e      	movs	r2, #126
   200e0:	e002      	b.n	200e8 <_malloc_r+0xb0>
   200e2:	0cb3      	lsrs	r3, r6, #18
   200e4:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   200e8:	4be8      	ldr	r3, [pc, #928]	(2048c <_malloc_r+0x454>)
   200ea:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   200ee:	f8dc 400c 	ldr.w	r4, [ip, #12]
   200f2:	e015      	b.n	20120 <_malloc_r+0xe8>
   200f4:	6863      	ldr	r3, [r4, #4]
   200f6:	f023 0003 	bic.w	r0, r3, #3	; 0x3
   200fa:	ebc6 0300 	rsb	r3, r6, r0
   200fe:	2b0f      	cmp	r3, #15
   20100:	dd01      	ble.n	20106 <_malloc_r+0xce>
   20102:	3a01      	subs	r2, #1
   20104:	e00e      	b.n	20124 <_malloc_r+0xec>
   20106:	2b00      	cmp	r3, #0
   20108:	68e1      	ldr	r1, [r4, #12]
   2010a:	db08      	blt.n	2011e <_malloc_r+0xe6>
   2010c:	68a3      	ldr	r3, [r4, #8]
   2010e:	60d9      	str	r1, [r3, #12]
   20110:	608b      	str	r3, [r1, #8]
   20112:	eb04 0200 	add.w	r2, r4, r0
   20116:	6853      	ldr	r3, [r2, #4]
   20118:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   2011c:	e1ad      	b.n	2047a <_malloc_r+0x442>
   2011e:	460c      	mov	r4, r1
   20120:	4564      	cmp	r4, ip
   20122:	d1e7      	bne.n	200f4 <_malloc_r+0xbc>
   20124:	f102 0e01 	add.w	lr, r2, #1	; 0x1
   20128:	4dd9      	ldr	r5, [pc, #868]	(20490 <_malloc_r+0x458>)
   2012a:	68ac      	ldr	r4, [r5, #8]
   2012c:	42ac      	cmp	r4, r5
   2012e:	d068      	beq.n	20202 <_malloc_r+0x1ca>
   20130:	6863      	ldr	r3, [r4, #4]
   20132:	f023 0003 	bic.w	r0, r3, #3	; 0x3
   20136:	ebc6 0100 	rsb	r1, r6, r0
   2013a:	290f      	cmp	r1, #15
   2013c:	dd0d      	ble.n	2015a <_malloc_r+0x122>
   2013e:	f046 0201 	orr.w	r2, r6, #1	; 0x1
   20142:	eb04 0306 	add.w	r3, r4, r6
   20146:	6062      	str	r2, [r4, #4]
   20148:	f041 0201 	orr.w	r2, r1, #1	; 0x1
   2014c:	60eb      	str	r3, [r5, #12]
   2014e:	60ab      	str	r3, [r5, #8]
   20150:	60dd      	str	r5, [r3, #12]
   20152:	609d      	str	r5, [r3, #8]
   20154:	605a      	str	r2, [r3, #4]
   20156:	5059      	str	r1, [r3, r1]
   20158:	e190      	b.n	2047c <_malloc_r+0x444>
   2015a:	2900      	cmp	r1, #0
   2015c:	60ed      	str	r5, [r5, #12]
   2015e:	60ad      	str	r5, [r5, #8]
   20160:	dad7      	bge.n	20112 <_malloc_r+0xda>
   20162:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   20166:	d210      	bcs.n	2018a <_malloc_r+0x152>
   20168:	08c0      	lsrs	r0, r0, #3
   2016a:	1083      	asrs	r3, r0, #2
   2016c:	2201      	movs	r2, #1
   2016e:	409a      	lsls	r2, r3
   20170:	f1a5 0108 	sub.w	r1, r5, #8	; 0x8
   20174:	684b      	ldr	r3, [r1, #4]
   20176:	4313      	orrs	r3, r2
   20178:	604b      	str	r3, [r1, #4]
   2017a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   2017e:	688b      	ldr	r3, [r1, #8]
   20180:	60e1      	str	r1, [r4, #12]
   20182:	60a3      	str	r3, [r4, #8]
   20184:	60dc      	str	r4, [r3, #12]
   20186:	608c      	str	r4, [r1, #8]
   20188:	e03b      	b.n	20202 <_malloc_r+0x1ca>
   2018a:	0a42      	lsrs	r2, r0, #9
   2018c:	2a04      	cmp	r2, #4
   2018e:	d802      	bhi.n	20196 <_malloc_r+0x15e>
   20190:	0983      	lsrs	r3, r0, #6
   20192:	3338      	adds	r3, #56
   20194:	e017      	b.n	201c6 <_malloc_r+0x18e>
   20196:	2a14      	cmp	r2, #20
   20198:	bf98      	it	ls
   2019a:	f102 035b 	addls.w	r3, r2, #91	; 0x5b
   2019e:	d912      	bls.n	201c6 <_malloc_r+0x18e>
   201a0:	2a54      	cmp	r2, #84
   201a2:	d802      	bhi.n	201aa <_malloc_r+0x172>
   201a4:	0b03      	lsrs	r3, r0, #12
   201a6:	336e      	adds	r3, #110
   201a8:	e00d      	b.n	201c6 <_malloc_r+0x18e>
   201aa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   201ae:	d802      	bhi.n	201b6 <_malloc_r+0x17e>
   201b0:	0bc3      	lsrs	r3, r0, #15
   201b2:	3377      	adds	r3, #119
   201b4:	e007      	b.n	201c6 <_malloc_r+0x18e>
   201b6:	f240 5354 	movw	r3, #1364	; 0x554
   201ba:	429a      	cmp	r2, r3
   201bc:	d901      	bls.n	201c2 <_malloc_r+0x18a>
   201be:	237e      	movs	r3, #126
   201c0:	e001      	b.n	201c6 <_malloc_r+0x18e>
   201c2:	0c83      	lsrs	r3, r0, #18
   201c4:	337c      	adds	r3, #124
   201c6:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 2048c <_malloc_r+0x454>
   201ca:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   201ce:	6891      	ldr	r1, [r2, #8]
   201d0:	4291      	cmp	r1, r2
   201d2:	d10c      	bne.n	201ee <_malloc_r+0x1b6>
   201d4:	109b      	asrs	r3, r3, #2
   201d6:	2201      	movs	r2, #1
   201d8:	409a      	lsls	r2, r3
   201da:	f8dc 3004 	ldr.w	r3, [ip, #4]
   201de:	4313      	orrs	r3, r2
   201e0:	f8cc 3004 	str.w	r3, [ip, #4]
   201e4:	460b      	mov	r3, r1
   201e6:	e008      	b.n	201fa <_malloc_r+0x1c2>
   201e8:	6889      	ldr	r1, [r1, #8]
   201ea:	4291      	cmp	r1, r2
   201ec:	d004      	beq.n	201f8 <_malloc_r+0x1c0>
   201ee:	684b      	ldr	r3, [r1, #4]
   201f0:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   201f4:	4298      	cmp	r0, r3
   201f6:	d3f7      	bcc.n	201e8 <_malloc_r+0x1b0>
   201f8:	68cb      	ldr	r3, [r1, #12]
   201fa:	60e3      	str	r3, [r4, #12]
   201fc:	60a1      	str	r1, [r4, #8]
   201fe:	60cc      	str	r4, [r1, #12]
   20200:	609c      	str	r4, [r3, #8]
   20202:	2301      	movs	r3, #1
   20204:	ea4f 02ae 	mov.w	r2, lr, asr #2
   20208:	fa13 f102 	lsls.w	r1, r3, r2
   2020c:	4b9f      	ldr	r3, [pc, #636]	(2048c <_malloc_r+0x454>)
   2020e:	685a      	ldr	r2, [r3, #4]
   20210:	4291      	cmp	r1, r2
   20212:	d86e      	bhi.n	202f2 <_malloc_r+0x2ba>
   20214:	4211      	tst	r1, r2
   20216:	bf04      	itt	eq
   20218:	f02e 0303 	biceq.w	r3, lr, #3	; 0x3
   2021c:	f103 0e04 	addeq.w	lr, r3, #4	; 0x4
   20220:	d002      	beq.n	20228 <_malloc_r+0x1f0>
   20222:	e004      	b.n	2022e <_malloc_r+0x1f6>
   20224:	f10e 0e04 	add.w	lr, lr, #4	; 0x4
   20228:	0049      	lsls	r1, r1, #1
   2022a:	4211      	tst	r1, r2
   2022c:	d0fa      	beq.n	20224 <_malloc_r+0x1ec>
   2022e:	4a97      	ldr	r2, [pc, #604]	(2048c <_malloc_r+0x454>)
   20230:	4674      	mov	r4, lr
   20232:	eb02 07ce 	add.w	r7, r2, lr, lsl #3
   20236:	463a      	mov	r2, r7
   20238:	68d0      	ldr	r0, [r2, #12]
   2023a:	e032      	b.n	202a2 <_malloc_r+0x26a>
   2023c:	6843      	ldr	r3, [r0, #4]
   2023e:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   20242:	ebc6 0c03 	rsb	ip, r6, r3
   20246:	f1bc 0f0f 	cmp.w	ip, #15	; 0xf
   2024a:	dd14      	ble.n	20276 <_malloc_r+0x23e>
   2024c:	f046 0301 	orr.w	r3, r6, #1	; 0x1
   20250:	4604      	mov	r4, r0
   20252:	68c1      	ldr	r1, [r0, #12]
   20254:	6043      	str	r3, [r0, #4]
   20256:	f854 3f08 	ldr.w	r3, [r4, #8]!
   2025a:	eb00 0206 	add.w	r2, r0, r6
   2025e:	60d9      	str	r1, [r3, #12]
   20260:	608b      	str	r3, [r1, #8]
   20262:	f04c 0301 	orr.w	r3, ip, #1	; 0x1
   20266:	60ea      	str	r2, [r5, #12]
   20268:	60aa      	str	r2, [r5, #8]
   2026a:	60d5      	str	r5, [r2, #12]
   2026c:	6095      	str	r5, [r2, #8]
   2026e:	6053      	str	r3, [r2, #4]
   20270:	f842 c00c 	str.w	ip, [r2, ip]
   20274:	e010      	b.n	20298 <_malloc_r+0x260>
   20276:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   2027a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
   2027e:	db0f      	blt.n	202a0 <_malloc_r+0x268>
   20280:	4403      	add	r3, r0
   20282:	685a      	ldr	r2, [r3, #4]
   20284:	4604      	mov	r4, r0
   20286:	f042 0201 	orr.w	r2, r2, #1	; 0x1
   2028a:	605a      	str	r2, [r3, #4]
   2028c:	f854 3f08 	ldr.w	r3, [r4, #8]!
   20290:	f8c3 c00c 	str.w	ip, [r3, #12]
   20294:	f8cc 3008 	str.w	r3, [ip, #8]
   20298:	9800      	ldr	r0, [sp, #0]
   2029a:	f000 f95b 	bl	20554 <__malloc_unlock>
   2029e:	e0f1      	b.n	20484 <_malloc_r+0x44c>
   202a0:	4660      	mov	r0, ip
   202a2:	4290      	cmp	r0, r2
   202a4:	d1ca      	bne.n	2023c <_malloc_r+0x204>
   202a6:	3401      	adds	r4, #1
   202a8:	f014 0f03 	tst.w	r4, #3	; 0x3
   202ac:	d001      	beq.n	202b2 <_malloc_r+0x27a>
   202ae:	3208      	adds	r2, #8
   202b0:	e7c2      	b.n	20238 <_malloc_r+0x200>
   202b2:	4672      	mov	r2, lr
   202b4:	4638      	mov	r0, r7
   202b6:	f012 0f03 	tst.w	r2, #3	; 0x3
   202ba:	d105      	bne.n	202c8 <_malloc_r+0x290>
   202bc:	4a73      	ldr	r2, [pc, #460]	(2048c <_malloc_r+0x454>)
   202be:	6853      	ldr	r3, [r2, #4]
   202c0:	ea23 0301 	bic.w	r3, r3, r1
   202c4:	6053      	str	r3, [r2, #4]
   202c6:	e006      	b.n	202d6 <_malloc_r+0x29e>
   202c8:	4603      	mov	r3, r0
   202ca:	f853 0908 	ldr.w	r0, [r3], #-8
   202ce:	4298      	cmp	r0, r3
   202d0:	d101      	bne.n	202d6 <_malloc_r+0x29e>
   202d2:	3a01      	subs	r2, #1
   202d4:	e7ef      	b.n	202b6 <_malloc_r+0x27e>
   202d6:	4a6d      	ldr	r2, [pc, #436]	(2048c <_malloc_r+0x454>)
   202d8:	0049      	lsls	r1, r1, #1
   202da:	6853      	ldr	r3, [r2, #4]
   202dc:	4299      	cmp	r1, r3
   202de:	d808      	bhi.n	202f2 <_malloc_r+0x2ba>
   202e0:	b139      	cbz	r1, 202f2 <_malloc_r+0x2ba>
   202e2:	46a6      	mov	lr, r4
   202e4:	e002      	b.n	202ec <_malloc_r+0x2b4>
   202e6:	f10e 0e04 	add.w	lr, lr, #4	; 0x4
   202ea:	0049      	lsls	r1, r1, #1
   202ec:	4219      	tst	r1, r3
   202ee:	d19e      	bne.n	2022e <_malloc_r+0x1f6>
   202f0:	e7f9      	b.n	202e6 <_malloc_r+0x2ae>
   202f2:	4b66      	ldr	r3, [pc, #408]	(2048c <_malloc_r+0x454>)
   202f4:	689f      	ldr	r7, [r3, #8]
   202f6:	687b      	ldr	r3, [r7, #4]
   202f8:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   202fc:	9301      	str	r3, [sp, #4]
   202fe:	ebc6 0103 	rsb	r1, r6, r3
   20302:	9a01      	ldr	r2, [sp, #4]
   20304:	290f      	cmp	r1, #15
   20306:	bfcc      	ite	gt
   20308:	2300      	movgt	r3, #0
   2030a:	2301      	movle	r3, #1
   2030c:	42b2      	cmp	r2, r6
   2030e:	bf38      	it	cc
   20310:	f043 0301 	orrcc.w	r3, r3, #1	; 0x1
   20314:	2b00      	cmp	r3, #0
   20316:	f000 80a5 	beq.w	20464 <_malloc_r+0x42c>
   2031a:	4b5e      	ldr	r3, [pc, #376]	(20494 <_malloc_r+0x45c>)
   2031c:	681b      	ldr	r3, [r3, #0]
   2031e:	3310      	adds	r3, #16
   20320:	eb03 0506 	add.w	r5, r3, r6
   20324:	4b5c      	ldr	r3, [pc, #368]	(20498 <_malloc_r+0x460>)
   20326:	681b      	ldr	r3, [r3, #0]
   20328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2032c:	d006      	beq.n	2033c <_malloc_r+0x304>
   2032e:	f505 637e 	add.w	r3, r5, #4064	; 0xfe0
   20332:	331f      	adds	r3, #31
   20334:	f423 657e 	bic.w	r5, r3, #4064	; 0xfe0
   20338:	f025 051f 	bic.w	r5, r5, #31	; 0x1f
   2033c:	9800      	ldr	r0, [sp, #0]
   2033e:	4629      	mov	r1, r5
   20340:	f000 fb92 	bl	20a68 <_sbrk_r>
   20344:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   20348:	4604      	mov	r4, r0
   2034a:	d076      	beq.n	2043a <_malloc_r+0x402>
   2034c:	9b01      	ldr	r3, [sp, #4]
   2034e:	eb07 0103 	add.w	r1, r7, r3
   20352:	4288      	cmp	r0, r1
   20354:	d202      	bcs.n	2035c <_malloc_r+0x324>
   20356:	4a4d      	ldr	r2, [pc, #308]	(2048c <_malloc_r+0x454>)
   20358:	4297      	cmp	r7, r2
   2035a:	d16e      	bne.n	2043a <_malloc_r+0x402>
   2035c:	4a4f      	ldr	r2, [pc, #316]	(2049c <_malloc_r+0x464>)
   2035e:	428c      	cmp	r4, r1
   20360:	6813      	ldr	r3, [r2, #0]
   20362:	eb05 0003 	add.w	r0, r5, r3
   20366:	6010      	str	r0, [r2, #0]
   20368:	d10b      	bne.n	20382 <_malloc_r+0x34a>
   2036a:	0523      	lsls	r3, r4, #20
   2036c:	0d1b      	lsrs	r3, r3, #20
   2036e:	b943      	cbnz	r3, 20382 <_malloc_r+0x34a>
   20370:	4b46      	ldr	r3, [pc, #280]	(2048c <_malloc_r+0x454>)
   20372:	9901      	ldr	r1, [sp, #4]
   20374:	689a      	ldr	r2, [r3, #8]
   20376:	eb05 0301 	add.w	r3, r5, r1
   2037a:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   2037e:	6053      	str	r3, [r2, #4]
   20380:	e04f      	b.n	20422 <_malloc_r+0x3ea>
   20382:	4a45      	ldr	r2, [pc, #276]	(20498 <_malloc_r+0x460>)
   20384:	6813      	ldr	r3, [r2, #0]
   20386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2038a:	bf08      	it	eq
   2038c:	6014      	streq	r4, [r2, #0]
   2038e:	d004      	beq.n	2039a <_malloc_r+0x362>
   20390:	eb04 0300 	add.w	r3, r4, r0
   20394:	4a41      	ldr	r2, [pc, #260]	(2049c <_malloc_r+0x464>)
   20396:	1a5b      	subs	r3, r3, r1
   20398:	6013      	str	r3, [r2, #0]
   2039a:	f014 0207 	ands.w	r2, r4, #7	; 0x7
   2039e:	d101      	bne.n	203a4 <_malloc_r+0x36c>
   203a0:	2200      	movs	r2, #0
   203a2:	e002      	b.n	203aa <_malloc_r+0x372>
   203a4:	f1c2 0208 	rsb	r2, r2, #8	; 0x8
   203a8:	18a4      	adds	r4, r4, r2
   203aa:	eb04 0305 	add.w	r3, r4, r5
   203ae:	051b      	lsls	r3, r3, #20
   203b0:	0d1b      	lsrs	r3, r3, #20
   203b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   203b6:	ebc3 0502 	rsb	r5, r3, r2
   203ba:	4629      	mov	r1, r5
   203bc:	9800      	ldr	r0, [sp, #0]
   203be:	f000 fb53 	bl	20a68 <_sbrk_r>
   203c2:	4b36      	ldr	r3, [pc, #216]	(2049c <_malloc_r+0x464>)
   203c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   203c8:	681a      	ldr	r2, [r3, #0]
   203ca:	bf04      	itt	eq
   203cc:	4620      	moveq	r0, r4
   203ce:	2500      	moveq	r5, #0
   203d0:	442a      	add	r2, r5
   203d2:	601a      	str	r2, [r3, #0]
   203d4:	4a2d      	ldr	r2, [pc, #180]	(2048c <_malloc_r+0x454>)
   203d6:	ebc4 0300 	rsb	r3, r4, r0
   203da:	195b      	adds	r3, r3, r5
   203dc:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   203e0:	4297      	cmp	r7, r2
   203e2:	6094      	str	r4, [r2, #8]
   203e4:	6063      	str	r3, [r4, #4]
   203e6:	d01c      	beq.n	20422 <_malloc_r+0x3ea>
   203e8:	9b01      	ldr	r3, [sp, #4]
   203ea:	2b0f      	cmp	r3, #15
   203ec:	d802      	bhi.n	203f4 <_malloc_r+0x3bc>
   203ee:	2301      	movs	r3, #1
   203f0:	6063      	str	r3, [r4, #4]
   203f2:	e022      	b.n	2043a <_malloc_r+0x402>
   203f4:	9901      	ldr	r1, [sp, #4]
   203f6:	2305      	movs	r3, #5
   203f8:	f1a1 020c 	sub.w	r2, r1, #12	; 0xc
   203fc:	f022 0207 	bic.w	r2, r2, #7	; 0x7
   20400:	eb07 0102 	add.w	r1, r7, r2
   20404:	604b      	str	r3, [r1, #4]
   20406:	608b      	str	r3, [r1, #8]
   20408:	687b      	ldr	r3, [r7, #4]
   2040a:	2a0f      	cmp	r2, #15
   2040c:	f003 0301 	and.w	r3, r3, #1	; 0x1
   20410:	ea42 0303 	orr.w	r3, r2, r3
   20414:	607b      	str	r3, [r7, #4]
   20416:	d904      	bls.n	20422 <_malloc_r+0x3ea>
   20418:	f107 0108 	add.w	r1, r7, #8	; 0x8
   2041c:	9800      	ldr	r0, [sp, #0]
   2041e:	f000 ff41 	bl	212a4 <_free_r>
   20422:	491f      	ldr	r1, [pc, #124]	(204a0 <_malloc_r+0x468>)
   20424:	4b1d      	ldr	r3, [pc, #116]	(2049c <_malloc_r+0x464>)
   20426:	681a      	ldr	r2, [r3, #0]
   20428:	680b      	ldr	r3, [r1, #0]
   2042a:	429a      	cmp	r2, r3
   2042c:	bf88      	it	hi
   2042e:	600a      	strhi	r2, [r1, #0]
   20430:	491c      	ldr	r1, [pc, #112]	(204a4 <_malloc_r+0x46c>)
   20432:	680b      	ldr	r3, [r1, #0]
   20434:	429a      	cmp	r2, r3
   20436:	bf88      	it	hi
   20438:	600a      	strhi	r2, [r1, #0]
   2043a:	4a14      	ldr	r2, [pc, #80]	(2048c <_malloc_r+0x454>)
   2043c:	6893      	ldr	r3, [r2, #8]
   2043e:	685a      	ldr	r2, [r3, #4]
   20440:	f022 0203 	bic.w	r2, r2, #3	; 0x3
   20444:	ebc6 0102 	rsb	r1, r6, r2
   20448:	290f      	cmp	r1, #15
   2044a:	bfcc      	ite	gt
   2044c:	2300      	movgt	r3, #0
   2044e:	2301      	movle	r3, #1
   20450:	42b2      	cmp	r2, r6
   20452:	bf38      	it	cc
   20454:	f043 0301 	orrcc.w	r3, r3, #1	; 0x1
   20458:	b123      	cbz	r3, 20464 <_malloc_r+0x42c>
   2045a:	9800      	ldr	r0, [sp, #0]
   2045c:	f000 f87a 	bl	20554 <__malloc_unlock>
   20460:	2400      	movs	r4, #0
   20462:	e00f      	b.n	20484 <_malloc_r+0x44c>
   20464:	4b09      	ldr	r3, [pc, #36]	(2048c <_malloc_r+0x454>)
   20466:	689c      	ldr	r4, [r3, #8]
   20468:	f046 0301 	orr.w	r3, r6, #1	; 0x1
   2046c:	6063      	str	r3, [r4, #4]
   2046e:	4b07      	ldr	r3, [pc, #28]	(2048c <_malloc_r+0x454>)
   20470:	eb04 0206 	add.w	r2, r4, r6
   20474:	609a      	str	r2, [r3, #8]
   20476:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   2047a:	6053      	str	r3, [r2, #4]
   2047c:	9800      	ldr	r0, [sp, #0]
   2047e:	f000 f869 	bl	20554 <__malloc_unlock>
   20482:	3408      	adds	r4, #8
   20484:	4620      	mov	r0, r4
   20486:	b003      	add	sp, #12
   20488:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2048a:	46c0      	nop			(mov r8, r8)
   2048c:	20000138 	.word	0x20000138
   20490:	20000140 	.word	0x20000140
   20494:	20000e94 	.word	0x20000e94
   20498:	20000544 	.word	0x20000544
   2049c:	20000ea0 	.word	0x20000ea0
   204a0:	20000e98 	.word	0x20000e98
   204a4:	20000e9c 	.word	0x20000e9c

000204a8 <memchr>:
   204a8:	b2c9      	uxtb	r1, r1
   204aa:	e004      	b.n	204b6 <memchr+0xe>
   204ac:	7803      	ldrb	r3, [r0, #0]
   204ae:	3a01      	subs	r2, #1
   204b0:	428b      	cmp	r3, r1
   204b2:	d003      	beq.n	204bc <memchr+0x14>
   204b4:	3001      	adds	r0, #1
   204b6:	2a00      	cmp	r2, #0
   204b8:	d1f8      	bne.n	204ac <memchr+0x4>
   204ba:	2000      	movs	r0, #0
   204bc:	4770      	bx	lr
   204be:	46c0      	nop			(mov r8, r8)

000204c0 <memcmp>:
   204c0:	b510      	push	{r4, lr}
   204c2:	2300      	movs	r3, #0
   204c4:	4604      	mov	r4, r0
   204c6:	e009      	b.n	204dc <memcmp+0x1c>
   204c8:	f814 c003 	ldrb.w	ip, [r4, r3]
   204cc:	5cc8      	ldrb	r0, [r1, r3]
   204ce:	3a01      	subs	r2, #1
   204d0:	3301      	adds	r3, #1
   204d2:	4584      	cmp	ip, r0
   204d4:	d002      	beq.n	204dc <memcmp+0x1c>
   204d6:	ebc0 000c 	rsb	r0, r0, ip
   204da:	e002      	b.n	204e2 <memcmp+0x22>
   204dc:	2a00      	cmp	r2, #0
   204de:	d1f3      	bne.n	204c8 <memcmp+0x8>
   204e0:	2000      	movs	r0, #0
   204e2:	bd10      	pop	{r4, pc}

000204e4 <memcpy>:
   204e4:	f04f 0c00 	mov.w	ip, #0	; 0x0
   204e8:	e006      	b.n	204f8 <memcpy+0x14>
   204ea:	f811 300c 	ldrb.w	r3, [r1, ip]
   204ee:	3a01      	subs	r2, #1
   204f0:	f800 300c 	strb.w	r3, [r0, ip]
   204f4:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   204f8:	2a00      	cmp	r2, #0
   204fa:	d1f6      	bne.n	204ea <memcpy+0x6>
   204fc:	4770      	bx	lr
   204fe:	46c0      	nop			(mov r8, r8)

00020500 <memmove>:
   20500:	4281      	cmp	r1, r0
   20502:	b510      	push	{r4, lr}
   20504:	d217      	bcs.n	20536 <memmove+0x36>
   20506:	eb01 0c02 	add.w	ip, r1, r2
   2050a:	4560      	cmp	r0, ip
   2050c:	d213      	bcs.n	20536 <memmove+0x36>
   2050e:	eb00 0402 	add.w	r4, r0, r2
   20512:	2100      	movs	r1, #0
   20514:	e003      	b.n	2051e <memmove+0x1e>
   20516:	f81c 3001 	ldrb.w	r3, [ip, r1]
   2051a:	3a01      	subs	r2, #1
   2051c:	5463      	strb	r3, [r4, r1]
   2051e:	3901      	subs	r1, #1
   20520:	2a00      	cmp	r2, #0
   20522:	d1f8      	bne.n	20516 <memmove+0x16>
   20524:	e00b      	b.n	2053e <memmove+0x3e>
   20526:	f811 300c 	ldrb.w	r3, [r1, ip]
   2052a:	3a01      	subs	r2, #1
   2052c:	f800 300c 	strb.w	r3, [r0, ip]
   20530:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   20534:	e001      	b.n	2053a <memmove+0x3a>
   20536:	f04f 0c00 	mov.w	ip, #0	; 0x0
   2053a:	2a00      	cmp	r2, #0
   2053c:	d1f3      	bne.n	20526 <memmove+0x26>
   2053e:	bd10      	pop	{r4, pc}

00020540 <memset>:
   20540:	2300      	movs	r3, #0
   20542:	e002      	b.n	2054a <memset+0xa>
   20544:	54c1      	strb	r1, [r0, r3]
   20546:	3a01      	subs	r2, #1
   20548:	3301      	adds	r3, #1
   2054a:	2a00      	cmp	r2, #0
   2054c:	d1fa      	bne.n	20544 <memset+0x4>
   2054e:	4770      	bx	lr

00020550 <__malloc_lock>:
   20550:	4770      	bx	lr
   20552:	46c0      	nop			(mov r8, r8)

00020554 <__malloc_unlock>:
   20554:	4770      	bx	lr
   20556:	46c0      	nop			(mov r8, r8)

00020558 <_putc_r>:
   20558:	b570      	push	{r4, r5, r6, lr}
   2055a:	4605      	mov	r5, r0
   2055c:	460e      	mov	r6, r1
   2055e:	4614      	mov	r4, r2
   20560:	b118      	cbz	r0, 2056a <_putc_r+0x12>
   20562:	6983      	ldr	r3, [r0, #24]
   20564:	b90b      	cbnz	r3, 2056a <_putc_r+0x12>
   20566:	f000 fe17 	bl	21198 <__sinit>
   2056a:	4b17      	ldr	r3, [pc, #92]	(205c8 <_putc_r+0x70>)
   2056c:	429c      	cmp	r4, r3
   2056e:	bf08      	it	eq
   20570:	682c      	ldreq	r4, [r5, #0]
   20572:	d008      	beq.n	20586 <_putc_r+0x2e>
   20574:	4b15      	ldr	r3, [pc, #84]	(205cc <_putc_r+0x74>)
   20576:	429c      	cmp	r4, r3
   20578:	bf08      	it	eq
   2057a:	686c      	ldreq	r4, [r5, #4]
   2057c:	d003      	beq.n	20586 <_putc_r+0x2e>
   2057e:	4b14      	ldr	r3, [pc, #80]	(205d0 <_putc_r+0x78>)
   20580:	429c      	cmp	r4, r3
   20582:	bf08      	it	eq
   20584:	68ac      	ldreq	r4, [r5, #8]
   20586:	68a3      	ldr	r3, [r4, #8]
   20588:	1e5a      	subs	r2, r3, #1
   2058a:	2a00      	cmp	r2, #0
   2058c:	60a2      	str	r2, [r4, #8]
   2058e:	da13      	bge.n	205b8 <_putc_r+0x60>
   20590:	69a3      	ldr	r3, [r4, #24]
   20592:	429a      	cmp	r2, r3
   20594:	db0a      	blt.n	205ac <_putc_r+0x54>
   20596:	6823      	ldr	r3, [r4, #0]
   20598:	701e      	strb	r6, [r3, #0]
   2059a:	6823      	ldr	r3, [r4, #0]
   2059c:	7818      	ldrb	r0, [r3, #0]
   2059e:	280a      	cmp	r0, #10
   205a0:	d001      	beq.n	205a6 <_putc_r+0x4e>
   205a2:	3301      	adds	r3, #1
   205a4:	e00d      	b.n	205c2 <_putc_r+0x6a>
   205a6:	4628      	mov	r0, r5
   205a8:	210a      	movs	r1, #10
   205aa:	e001      	b.n	205b0 <_putc_r+0x58>
   205ac:	4628      	mov	r0, r5
   205ae:	4631      	mov	r1, r6
   205b0:	4622      	mov	r2, r4
   205b2:	f000 fb85 	bl	20cc0 <__swbuf_r>
   205b6:	e005      	b.n	205c4 <_putc_r+0x6c>
   205b8:	6823      	ldr	r3, [r4, #0]
   205ba:	701e      	strb	r6, [r3, #0]
   205bc:	6823      	ldr	r3, [r4, #0]
   205be:	f813 0b01 	ldrb.w	r0, [r3], #1
   205c2:	6023      	str	r3, [r4, #0]
   205c4:	bd70      	pop	{r4, r5, r6, pc}
   205c6:	46c0      	nop			(mov r8, r8)
   205c8:	00023228 	.word	0x00023228
   205cc:	00023248 	.word	0x00023248
   205d0:	00023268 	.word	0x00023268

000205d4 <putc>:
   205d4:	b500      	push	{lr}
   205d6:	4b05      	ldr	r3, [pc, #20]	(205ec <putc+0x18>)
   205d8:	4684      	mov	ip, r0
   205da:	460a      	mov	r2, r1
   205dc:	b081      	sub	sp, #4
   205de:	6818      	ldr	r0, [r3, #0]
   205e0:	4661      	mov	r1, ip
   205e2:	f7ff ffb9 	bl	20558 <_putc_r>
   205e6:	b001      	add	sp, #4
   205e8:	bd00      	pop	{pc}
   205ea:	46c0      	nop			(mov r8, r8)
   205ec:	20000044 	.word	0x20000044

000205f0 <realloc>:
   205f0:	b500      	push	{lr}
   205f2:	4b05      	ldr	r3, [pc, #20]	(20608 <realloc+0x18>)
   205f4:	4684      	mov	ip, r0
   205f6:	460a      	mov	r2, r1
   205f8:	b081      	sub	sp, #4
   205fa:	6818      	ldr	r0, [r3, #0]
   205fc:	4661      	mov	r1, ip
   205fe:	f000 f805 	bl	2060c <_realloc_r>
   20602:	b001      	add	sp, #4
   20604:	bd00      	pop	{pc}
   20606:	46c0      	nop			(mov r8, r8)
   20608:	20000044 	.word	0x20000044

0002060c <_realloc_r>:
   2060c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2060e:	b087      	sub	sp, #28
   20610:	9002      	str	r0, [sp, #8]
   20612:	460e      	mov	r6, r1
   20614:	9201      	str	r2, [sp, #4]
   20616:	b921      	cbnz	r1, 20622 <_realloc_r+0x16>
   20618:	4611      	mov	r1, r2
   2061a:	f7ff fd0d 	bl	20038 <_malloc_r>
   2061e:	4605      	mov	r5, r0
   20620:	e19d      	b.n	2095e <_realloc_r+0x352>
   20622:	9802      	ldr	r0, [sp, #8]
   20624:	f7ff ff94 	bl	20550 <__malloc_lock>
   20628:	9801      	ldr	r0, [sp, #4]
   2062a:	f1a6 0708 	sub.w	r7, r6, #8	; 0x8
   2062e:	f100 030b 	add.w	r3, r0, #11	; 0xb
   20632:	2b16      	cmp	r3, #22
   20634:	bf88      	it	hi
   20636:	f023 0307 	bichi.w	r3, r3, #7	; 0x7
   2063a:	687c      	ldr	r4, [r7, #4]
   2063c:	bf88      	it	hi
   2063e:	9303      	strhi	r3, [sp, #12]
   20640:	d801      	bhi.n	20646 <_realloc_r+0x3a>
   20642:	2110      	movs	r1, #16
   20644:	9103      	str	r1, [sp, #12]
   20646:	9a03      	ldr	r2, [sp, #12]
   20648:	9d01      	ldr	r5, [sp, #4]
   2064a:	42aa      	cmp	r2, r5
   2064c:	bf2c      	ite	cs
   2064e:	2300      	movcs	r3, #0
   20650:	2301      	movcc	r3, #1
   20652:	ea53 72d2 	orrs.w	r2, r3, r2, lsr #31
   20656:	d004      	beq.n	20662 <_realloc_r+0x56>
   20658:	9802      	ldr	r0, [sp, #8]
   2065a:	230c      	movs	r3, #12
   2065c:	60c3      	str	r3, [r0, #12]
   2065e:	2500      	movs	r5, #0
   20660:	e17d      	b.n	2095e <_realloc_r+0x352>
   20662:	9903      	ldr	r1, [sp, #12]
   20664:	f024 0c03 	bic.w	ip, r4, #3	; 0x3
   20668:	458c      	cmp	ip, r1
   2066a:	bfa4      	itt	ge
   2066c:	463c      	movge	r4, r7
   2066e:	4665      	movge	r5, ip
   20670:	f280 814b 	bge.w	2090a <_realloc_r+0x2fe>
   20674:	4abb      	ldr	r2, [pc, #748]	(20964 <_realloc_r+0x358>)
   20676:	eb07 010c 	add.w	r1, r7, ip
   2067a:	f8d2 e008 	ldr.w	lr, [r2, #8]
   2067e:	4571      	cmp	r1, lr
   20680:	d007      	beq.n	20692 <_realloc_r+0x86>
   20682:	684b      	ldr	r3, [r1, #4]
   20684:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   20688:	440b      	add	r3, r1
   2068a:	685b      	ldr	r3, [r3, #4]
   2068c:	f013 0f01 	tst.w	r3, #1	; 0x1
   20690:	d128      	bne.n	206e4 <_realloc_r+0xd8>
   20692:	684b      	ldr	r3, [r1, #4]
   20694:	4571      	cmp	r1, lr
   20696:	f023 0003 	bic.w	r0, r3, #3	; 0x3
   2069a:	eb00 020c 	add.w	r2, r0, ip
   2069e:	d118      	bne.n	206d2 <_realloc_r+0xc6>
   206a0:	9d03      	ldr	r5, [sp, #12]
   206a2:	f105 0310 	add.w	r3, r5, #16	; 0x10
   206a6:	429a      	cmp	r2, r3
   206a8:	db1e      	blt.n	206e8 <_realloc_r+0xdc>
   206aa:	1b52      	subs	r2, r2, r5
   206ac:	eb07 0305 	add.w	r3, r7, r5
   206b0:	48ac      	ldr	r0, [pc, #688]	(20964 <_realloc_r+0x358>)
   206b2:	f042 0201 	orr.w	r2, r2, #1	; 0x1
   206b6:	605a      	str	r2, [r3, #4]
   206b8:	6083      	str	r3, [r0, #8]
   206ba:	687b      	ldr	r3, [r7, #4]
   206bc:	9802      	ldr	r0, [sp, #8]
   206be:	f003 0301 	and.w	r3, r3, #1	; 0x1
   206c2:	ea45 0303 	orr.w	r3, r5, r3
   206c6:	607b      	str	r3, [r7, #4]
   206c8:	f7ff ff44 	bl	20554 <__malloc_unlock>
   206cc:	f107 0508 	add.w	r5, r7, #8	; 0x8
   206d0:	e145      	b.n	2095e <_realloc_r+0x352>
   206d2:	4615      	mov	r5, r2
   206d4:	9a03      	ldr	r2, [sp, #12]
   206d6:	4295      	cmp	r5, r2
   206d8:	db06      	blt.n	206e8 <_realloc_r+0xdc>
   206da:	68ca      	ldr	r2, [r1, #12]
   206dc:	688b      	ldr	r3, [r1, #8]
   206de:	60da      	str	r2, [r3, #12]
   206e0:	6093      	str	r3, [r2, #8]
   206e2:	e0cc      	b.n	2087e <_realloc_r+0x272>
   206e4:	2100      	movs	r1, #0
   206e6:	2000      	movs	r0, #0
   206e8:	f014 0f01 	tst.w	r4, #1	; 0x1
   206ec:	f040 80af 	bne.w	2084e <_realloc_r+0x242>
   206f0:	f856 3c08 	ldr.w	r3, [r6, #-8]
   206f4:	ebc3 0407 	rsb	r4, r3, r7
   206f8:	6863      	ldr	r3, [r4, #4]
   206fa:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   206fe:	9304      	str	r3, [sp, #16]
   20700:	2900      	cmp	r1, #0
   20702:	d05f      	beq.n	207c4 <_realloc_r+0x1b8>
   20704:	4571      	cmp	r1, lr
   20706:	eb03 020c 	add.w	r2, r3, ip
   2070a:	d151      	bne.n	207b0 <_realloc_r+0x1a4>
   2070c:	9d03      	ldr	r5, [sp, #12]
   2070e:	1812      	adds	r2, r2, r0
   20710:	f105 0310 	add.w	r3, r5, #16	; 0x10
   20714:	429a      	cmp	r2, r3
   20716:	9205      	str	r2, [sp, #20]
   20718:	db54      	blt.n	207c4 <_realloc_r+0x1b8>
   2071a:	4625      	mov	r5, r4
   2071c:	68e2      	ldr	r2, [r4, #12]
   2071e:	f855 3f08 	ldr.w	r3, [r5, #8]!
   20722:	60da      	str	r2, [r3, #12]
   20724:	6093      	str	r3, [r2, #8]
   20726:	f1ac 0204 	sub.w	r2, ip, #4	; 0x4
   2072a:	2a24      	cmp	r2, #36
   2072c:	d82a      	bhi.n	20784 <_realloc_r+0x178>
   2072e:	2a13      	cmp	r2, #19
   20730:	4630      	mov	r0, r6
   20732:	46ac      	mov	ip, r5
   20734:	d91a      	bls.n	2076c <_realloc_r+0x160>
   20736:	6833      	ldr	r3, [r6, #0]
   20738:	1d31      	adds	r1, r6, #4
   2073a:	60a3      	str	r3, [r4, #8]
   2073c:	6873      	ldr	r3, [r6, #4]
   2073e:	1d08      	adds	r0, r1, #4
   20740:	2a1b      	cmp	r2, #27
   20742:	60e3      	str	r3, [r4, #12]
   20744:	f104 0c10 	add.w	ip, r4, #16	; 0x10
   20748:	d910      	bls.n	2076c <_realloc_r+0x160>
   2074a:	684b      	ldr	r3, [r1, #4]
   2074c:	1d01      	adds	r1, r0, #4
   2074e:	6123      	str	r3, [r4, #16]
   20750:	6843      	ldr	r3, [r0, #4]
   20752:	1d08      	adds	r0, r1, #4
   20754:	2a24      	cmp	r2, #36
   20756:	6163      	str	r3, [r4, #20]
   20758:	f104 0c18 	add.w	ip, r4, #24	; 0x18
   2075c:	d106      	bne.n	2076c <_realloc_r+0x160>
   2075e:	684b      	ldr	r3, [r1, #4]
   20760:	f104 0c20 	add.w	ip, r4, #32	; 0x20
   20764:	61a3      	str	r3, [r4, #24]
   20766:	6843      	ldr	r3, [r0, #4]
   20768:	3008      	adds	r0, #8
   2076a:	61e3      	str	r3, [r4, #28]
   2076c:	4601      	mov	r1, r0
   2076e:	f851 3b04 	ldr.w	r3, [r1], #4
   20772:	4662      	mov	r2, ip
   20774:	f842 3b04 	str.w	r3, [r2], #4
   20778:	6843      	ldr	r3, [r0, #4]
   2077a:	f8cc 3004 	str.w	r3, [ip, #4]
   2077e:	684b      	ldr	r3, [r1, #4]
   20780:	6053      	str	r3, [r2, #4]
   20782:	e003      	b.n	2078c <_realloc_r+0x180>
   20784:	4628      	mov	r0, r5
   20786:	4631      	mov	r1, r6
   20788:	f7ff feba 	bl	20500 <memmove>
   2078c:	9803      	ldr	r0, [sp, #12]
   2078e:	4975      	ldr	r1, [pc, #468]	(20964 <_realloc_r+0x358>)
   20790:	eb04 0300 	add.w	r3, r4, r0
   20794:	608b      	str	r3, [r1, #8]
   20796:	9905      	ldr	r1, [sp, #20]
   20798:	ebc0 0201 	rsb	r2, r0, r1
   2079c:	f042 0201 	orr.w	r2, r2, #1	; 0x1
   207a0:	605a      	str	r2, [r3, #4]
   207a2:	6863      	ldr	r3, [r4, #4]
   207a4:	f003 0301 	and.w	r3, r3, #1	; 0x1
   207a8:	ea40 0303 	orr.w	r3, r0, r3
   207ac:	6063      	str	r3, [r4, #4]
   207ae:	e0a8      	b.n	20902 <_realloc_r+0x2f6>
   207b0:	eb02 0500 	add.w	r5, r2, r0
   207b4:	9a03      	ldr	r2, [sp, #12]
   207b6:	4295      	cmp	r5, r2
   207b8:	db04      	blt.n	207c4 <_realloc_r+0x1b8>
   207ba:	68ca      	ldr	r2, [r1, #12]
   207bc:	688b      	ldr	r3, [r1, #8]
   207be:	60da      	str	r2, [r3, #12]
   207c0:	6093      	str	r3, [r2, #8]
   207c2:	e005      	b.n	207d0 <_realloc_r+0x1c4>
   207c4:	9b04      	ldr	r3, [sp, #16]
   207c6:	9803      	ldr	r0, [sp, #12]
   207c8:	eb03 050c 	add.w	r5, r3, ip
   207cc:	4285      	cmp	r5, r0
   207ce:	db3e      	blt.n	2084e <_realloc_r+0x242>
   207d0:	4620      	mov	r0, r4
   207d2:	68e2      	ldr	r2, [r4, #12]
   207d4:	f850 3f08 	ldr.w	r3, [r0, #8]!
   207d8:	60da      	str	r2, [r3, #12]
   207da:	6093      	str	r3, [r2, #8]
   207dc:	f1ac 0204 	sub.w	r2, ip, #4	; 0x4
   207e0:	2a24      	cmp	r2, #36
   207e2:	d830      	bhi.n	20846 <_realloc_r+0x23a>
   207e4:	2a13      	cmp	r2, #19
   207e6:	46b4      	mov	ip, r6
   207e8:	d921      	bls.n	2082e <_realloc_r+0x222>
   207ea:	6833      	ldr	r3, [r6, #0]
   207ec:	f106 0104 	add.w	r1, r6, #4	; 0x4
   207f0:	60a3      	str	r3, [r4, #8]
   207f2:	6873      	ldr	r3, [r6, #4]
   207f4:	2a1b      	cmp	r2, #27
   207f6:	60e3      	str	r3, [r4, #12]
   207f8:	f104 0010 	add.w	r0, r4, #16	; 0x10
   207fc:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   20800:	d915      	bls.n	2082e <_realloc_r+0x222>
   20802:	684b      	ldr	r3, [r1, #4]
   20804:	2a24      	cmp	r2, #36
   20806:	6123      	str	r3, [r4, #16]
   20808:	f8dc 3004 	ldr.w	r3, [ip, #4]
   2080c:	f10c 0104 	add.w	r1, ip, #4	; 0x4
   20810:	6163      	str	r3, [r4, #20]
   20812:	f104 0018 	add.w	r0, r4, #24	; 0x18
   20816:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   2081a:	d108      	bne.n	2082e <_realloc_r+0x222>
   2081c:	684b      	ldr	r3, [r1, #4]
   2081e:	f104 0020 	add.w	r0, r4, #32	; 0x20
   20822:	61a3      	str	r3, [r4, #24]
   20824:	f8dc 3004 	ldr.w	r3, [ip, #4]
   20828:	f10c 0c08 	add.w	ip, ip, #8	; 0x8
   2082c:	61e3      	str	r3, [r4, #28]
   2082e:	4661      	mov	r1, ip
   20830:	f851 3b04 	ldr.w	r3, [r1], #4
   20834:	4602      	mov	r2, r0
   20836:	f842 3b04 	str.w	r3, [r2], #4
   2083a:	f8dc 3004 	ldr.w	r3, [ip, #4]
   2083e:	6043      	str	r3, [r0, #4]
   20840:	684b      	ldr	r3, [r1, #4]
   20842:	6053      	str	r3, [r2, #4]
   20844:	e061      	b.n	2090a <_realloc_r+0x2fe>
   20846:	4631      	mov	r1, r6
   20848:	f7ff fe5a 	bl	20500 <memmove>
   2084c:	e05d      	b.n	2090a <_realloc_r+0x2fe>
   2084e:	9802      	ldr	r0, [sp, #8]
   20850:	9901      	ldr	r1, [sp, #4]
   20852:	f8cd c000 	str.w	ip, [sp]
   20856:	f7ff fbef 	bl	20038 <_malloc_r>
   2085a:	f8dd c000 	ldr.w	ip, [sp]
   2085e:	4605      	mov	r5, r0
   20860:	2800      	cmp	r0, #0
   20862:	d04e      	beq.n	20902 <_realloc_r+0x2f6>
   20864:	687b      	ldr	r3, [r7, #4]
   20866:	f1a0 0208 	sub.w	r2, r0, #8	; 0x8
   2086a:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   2086e:	443b      	add	r3, r7
   20870:	429a      	cmp	r2, r3
   20872:	d106      	bne.n	20882 <_realloc_r+0x276>
   20874:	6853      	ldr	r3, [r2, #4]
   20876:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   2087a:	eb03 050c 	add.w	r5, r3, ip
   2087e:	463c      	mov	r4, r7
   20880:	e043      	b.n	2090a <_realloc_r+0x2fe>
   20882:	f1ac 0204 	sub.w	r2, ip, #4	; 0x4
   20886:	2a24      	cmp	r2, #36
   20888:	d834      	bhi.n	208f4 <_realloc_r+0x2e8>
   2088a:	2a13      	cmp	r2, #19
   2088c:	4630      	mov	r0, r6
   2088e:	46ac      	mov	ip, r5
   20890:	d924      	bls.n	208dc <_realloc_r+0x2d0>
   20892:	46b6      	mov	lr, r6
   20894:	f85e 3b04 	ldr.w	r3, [lr], #4
   20898:	4629      	mov	r1, r5
   2089a:	f841 3b04 	str.w	r3, [r1], #4
   2089e:	6873      	ldr	r3, [r6, #4]
   208a0:	2a1b      	cmp	r2, #27
   208a2:	606b      	str	r3, [r5, #4]
   208a4:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   208a8:	f10e 0004 	add.w	r0, lr, #4	; 0x4
   208ac:	d916      	bls.n	208dc <_realloc_r+0x2d0>
   208ae:	f8de 3004 	ldr.w	r3, [lr, #4]
   208b2:	f10c 0e04 	add.w	lr, ip, #4	; 0x4
   208b6:	604b      	str	r3, [r1, #4]
   208b8:	6843      	ldr	r3, [r0, #4]
   208ba:	1d01      	adds	r1, r0, #4
   208bc:	1d08      	adds	r0, r1, #4
   208be:	2a24      	cmp	r2, #36
   208c0:	f8cc 3004 	str.w	r3, [ip, #4]
   208c4:	f10e 0c04 	add.w	ip, lr, #4	; 0x4
   208c8:	d108      	bne.n	208dc <_realloc_r+0x2d0>
   208ca:	684b      	ldr	r3, [r1, #4]
   208cc:	f8ce 3004 	str.w	r3, [lr, #4]
   208d0:	6843      	ldr	r3, [r0, #4]
   208d2:	3008      	adds	r0, #8
   208d4:	f8cc 3004 	str.w	r3, [ip, #4]
   208d8:	f10c 0c08 	add.w	ip, ip, #8	; 0x8
   208dc:	4601      	mov	r1, r0
   208de:	f851 3b04 	ldr.w	r3, [r1], #4
   208e2:	4662      	mov	r2, ip
   208e4:	f842 3b04 	str.w	r3, [r2], #4
   208e8:	6843      	ldr	r3, [r0, #4]
   208ea:	f8cc 3004 	str.w	r3, [ip, #4]
   208ee:	684b      	ldr	r3, [r1, #4]
   208f0:	6053      	str	r3, [r2, #4]
   208f2:	e002      	b.n	208fa <_realloc_r+0x2ee>
   208f4:	4631      	mov	r1, r6
   208f6:	f7ff fe03 	bl	20500 <memmove>
   208fa:	9802      	ldr	r0, [sp, #8]
   208fc:	4631      	mov	r1, r6
   208fe:	f000 fcd1 	bl	212a4 <_free_r>
   20902:	9802      	ldr	r0, [sp, #8]
   20904:	f7ff fe26 	bl	20554 <__malloc_unlock>
   20908:	e029      	b.n	2095e <_realloc_r+0x352>
   2090a:	9903      	ldr	r1, [sp, #12]
   2090c:	6863      	ldr	r3, [r4, #4]
   2090e:	ebc1 0205 	rsb	r2, r1, r5
   20912:	2a0f      	cmp	r2, #15
   20914:	d913      	bls.n	2093e <_realloc_r+0x332>
   20916:	9d03      	ldr	r5, [sp, #12]
   20918:	f003 0301 	and.w	r3, r3, #1	; 0x1
   2091c:	ea45 0303 	orr.w	r3, r5, r3
   20920:	6063      	str	r3, [r4, #4]
   20922:	4421      	add	r1, r4
   20924:	f042 0301 	orr.w	r3, r2, #1	; 0x1
   20928:	604b      	str	r3, [r1, #4]
   2092a:	440a      	add	r2, r1
   2092c:	6853      	ldr	r3, [r2, #4]
   2092e:	3108      	adds	r1, #8
   20930:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   20934:	6053      	str	r3, [r2, #4]
   20936:	9802      	ldr	r0, [sp, #8]
   20938:	f000 fcb4 	bl	212a4 <_free_r>
   2093c:	e00a      	b.n	20954 <_realloc_r+0x348>
   2093e:	f003 0301 	and.w	r3, r3, #1	; 0x1
   20942:	ea45 0303 	orr.w	r3, r5, r3
   20946:	6063      	str	r3, [r4, #4]
   20948:	eb04 0205 	add.w	r2, r4, r5
   2094c:	6853      	ldr	r3, [r2, #4]
   2094e:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   20952:	6053      	str	r3, [r2, #4]
   20954:	9802      	ldr	r0, [sp, #8]
   20956:	f7ff fdfd 	bl	20554 <__malloc_unlock>
   2095a:	f104 0508 	add.w	r5, r4, #8	; 0x8
   2095e:	4628      	mov	r0, r5
   20960:	b007      	add	sp, #28
   20962:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20964:	20000138 	.word	0x20000138

00020968 <_wrapup_reent>:
   20968:	b570      	push	{r4, r5, r6, lr}
   2096a:	4606      	mov	r6, r0
   2096c:	b908      	cbnz	r0, 20972 <_wrapup_reent+0xa>
   2096e:	4b0a      	ldr	r3, [pc, #40]	(20998 <_wrapup_reent+0x30>)
   20970:	681e      	ldr	r6, [r3, #0]
   20972:	f106 0248 	add.w	r2, r6, #72	; 0x48
   20976:	6855      	ldr	r5, [r2, #4]
   20978:	1c6b      	adds	r3, r5, #1
   2097a:	eb02 0483 	add.w	r4, r2, r3, lsl #2
   2097e:	e001      	b.n	20984 <_wrapup_reent+0x1c>
   20980:	6863      	ldr	r3, [r4, #4]
   20982:	4798      	blx	r3
   20984:	3c04      	subs	r4, #4
   20986:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
   2098a:	d5f9      	bpl.n	20980 <_wrapup_reent+0x18>
   2098c:	6ab3      	ldr	r3, [r6, #40]
   2098e:	b10b      	cbz	r3, 20994 <_wrapup_reent+0x2c>
   20990:	4630      	mov	r0, r6
   20992:	4798      	blx	r3
   20994:	bd70      	pop	{r4, r5, r6, pc}
   20996:	46c0      	nop			(mov r8, r8)
   20998:	20000044 	.word	0x20000044

0002099c <cleanup_glue>:
   2099c:	b530      	push	{r4, r5, lr}
   2099e:	460d      	mov	r5, r1
   209a0:	6809      	ldr	r1, [r1, #0]
   209a2:	b081      	sub	sp, #4
   209a4:	4604      	mov	r4, r0
   209a6:	b109      	cbz	r1, 209ac <cleanup_glue+0x10>
   209a8:	f7ff fff8 	bl	2099c <cleanup_glue>
   209ac:	4620      	mov	r0, r4
   209ae:	4629      	mov	r1, r5
   209b0:	f000 fc78 	bl	212a4 <_free_r>
   209b4:	b001      	add	sp, #4
   209b6:	bd30      	pop	{r4, r5, pc}

000209b8 <_reclaim_reent>:
   209b8:	4b2a      	ldr	r3, [pc, #168]	(20a64 <_reclaim_reent+0xac>)
   209ba:	b570      	push	{r4, r5, r6, lr}
   209bc:	681b      	ldr	r3, [r3, #0]
   209be:	4605      	mov	r5, r0
   209c0:	4298      	cmp	r0, r3
   209c2:	d04d      	beq.n	20a60 <_reclaim_reent+0xa8>
   209c4:	6a43      	ldr	r3, [r0, #36]
   209c6:	b1ab      	cbz	r3, 209f4 <_reclaim_reent+0x3c>
   209c8:	68db      	ldr	r3, [r3, #12]
   209ca:	b19b      	cbz	r3, 209f4 <_reclaim_reent+0x3c>
   209cc:	2600      	movs	r6, #0
   209ce:	6a6b      	ldr	r3, [r5, #36]
   209d0:	68db      	ldr	r3, [r3, #12]
   209d2:	5999      	ldr	r1, [r3, r6]
   209d4:	e004      	b.n	209e0 <_reclaim_reent+0x28>
   209d6:	680c      	ldr	r4, [r1, #0]
   209d8:	4628      	mov	r0, r5
   209da:	f000 fc63 	bl	212a4 <_free_r>
   209de:	4621      	mov	r1, r4
   209e0:	2900      	cmp	r1, #0
   209e2:	d1f8      	bne.n	209d6 <_reclaim_reent+0x1e>
   209e4:	3604      	adds	r6, #4
   209e6:	2e3c      	cmp	r6, #60
   209e8:	d1f1      	bne.n	209ce <_reclaim_reent+0x16>
   209ea:	6a6b      	ldr	r3, [r5, #36]
   209ec:	4628      	mov	r0, r5
   209ee:	68d9      	ldr	r1, [r3, #12]
   209f0:	f000 fc58 	bl	212a4 <_free_r>
   209f4:	6a6b      	ldr	r3, [r5, #36]
   209f6:	6819      	ldr	r1, [r3, #0]
   209f8:	b111      	cbz	r1, 20a00 <_reclaim_reent+0x48>
   209fa:	4628      	mov	r0, r5
   209fc:	f000 fc52 	bl	212a4 <_free_r>
   20a00:	6969      	ldr	r1, [r5, #20]
   20a02:	b111      	cbz	r1, 20a0a <_reclaim_reent+0x52>
   20a04:	4628      	mov	r0, r5
   20a06:	f000 fc4d 	bl	212a4 <_free_r>
   20a0a:	6a69      	ldr	r1, [r5, #36]
   20a0c:	b111      	cbz	r1, 20a14 <_reclaim_reent+0x5c>
   20a0e:	4628      	mov	r0, r5
   20a10:	f000 fc48 	bl	212a4 <_free_r>
   20a14:	6ba9      	ldr	r1, [r5, #56]
   20a16:	b111      	cbz	r1, 20a1e <_reclaim_reent+0x66>
   20a18:	4628      	mov	r0, r5
   20a1a:	f000 fc43 	bl	212a4 <_free_r>
   20a1e:	6be9      	ldr	r1, [r5, #60]
   20a20:	b111      	cbz	r1, 20a28 <_reclaim_reent+0x70>
   20a22:	4628      	mov	r0, r5
   20a24:	f000 fc3e 	bl	212a4 <_free_r>
   20a28:	6c29      	ldr	r1, [r5, #64]
   20a2a:	b111      	cbz	r1, 20a32 <_reclaim_reent+0x7a>
   20a2c:	4628      	mov	r0, r5
   20a2e:	f000 fc39 	bl	212a4 <_free_r>
   20a32:	6cab      	ldr	r3, [r5, #72]
   20a34:	f8d3 1088 	ldr.w	r1, [r3, #136]
   20a38:	b111      	cbz	r1, 20a40 <_reclaim_reent+0x88>
   20a3a:	4628      	mov	r0, r5
   20a3c:	f000 fc32 	bl	212a4 <_free_r>
   20a40:	6b69      	ldr	r1, [r5, #52]
   20a42:	b111      	cbz	r1, 20a4a <_reclaim_reent+0x92>
   20a44:	4628      	mov	r0, r5
   20a46:	f000 fc2d 	bl	212a4 <_free_r>
   20a4a:	69ab      	ldr	r3, [r5, #24]
   20a4c:	b143      	cbz	r3, 20a60 <_reclaim_reent+0xa8>
   20a4e:	6aab      	ldr	r3, [r5, #40]
   20a50:	4628      	mov	r0, r5
   20a52:	4798      	blx	r3
   20a54:	f8d5 10d8 	ldr.w	r1, [r5, #216]
   20a58:	b111      	cbz	r1, 20a60 <_reclaim_reent+0xa8>
   20a5a:	4628      	mov	r0, r5
   20a5c:	f7ff ff9e 	bl	2099c <cleanup_glue>
   20a60:	bd70      	pop	{r4, r5, r6, pc}
   20a62:	46c0      	nop			(mov r8, r8)
   20a64:	20000044 	.word	0x20000044

00020a68 <_sbrk_r>:
   20a68:	b530      	push	{r4, r5, lr}
   20a6a:	4c08      	ldr	r4, [pc, #32]	(20a8c <_sbrk_r+0x24>)
   20a6c:	2300      	movs	r3, #0
   20a6e:	b081      	sub	sp, #4
   20a70:	4605      	mov	r5, r0
   20a72:	4608      	mov	r0, r1
   20a74:	6023      	str	r3, [r4, #0]
   20a76:	f7f6 fb57 	bl	17128 <_sbrk>
   20a7a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   20a7e:	d102      	bne.n	20a86 <_sbrk_r+0x1e>
   20a80:	6823      	ldr	r3, [r4, #0]
   20a82:	b103      	cbz	r3, 20a86 <_sbrk_r+0x1e>
   20a84:	60eb      	str	r3, [r5, #12]
   20a86:	b001      	add	sp, #4
   20a88:	bd30      	pop	{r4, r5, pc}
   20a8a:	46c0      	nop			(mov r8, r8)
   20a8c:	20000678 	.word	0x20000678

00020a90 <_raise_r>:
   20a90:	b530      	push	{r4, r5, lr}
   20a92:	291f      	cmp	r1, #31
   20a94:	b081      	sub	sp, #4
   20a96:	4604      	mov	r4, r0
   20a98:	460d      	mov	r5, r1
   20a9a:	d904      	bls.n	20aa6 <_raise_r+0x16>
   20a9c:	2316      	movs	r3, #22
   20a9e:	60c3      	str	r3, [r0, #12]
   20aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20aa4:	e01c      	b.n	20ae0 <_raise_r+0x50>
   20aa6:	6c41      	ldr	r1, [r0, #68]
   20aa8:	b111      	cbz	r1, 20ab0 <_raise_r+0x20>
   20aaa:	f851 2025 	ldr.w	r2, [r1, r5, lsl #2]
   20aae:	b942      	cbnz	r2, 20ac2 <_raise_r+0x32>
   20ab0:	4620      	mov	r0, r4
   20ab2:	f000 f899 	bl	20be8 <_getpid_r>
   20ab6:	462a      	mov	r2, r5
   20ab8:	4601      	mov	r1, r0
   20aba:	4620      	mov	r0, r4
   20abc:	f000 f89a 	bl	20bf4 <_kill_r>
   20ac0:	e00e      	b.n	20ae0 <_raise_r+0x50>
   20ac2:	2a01      	cmp	r2, #1
   20ac4:	d00b      	beq.n	20ade <_raise_r+0x4e>
   20ac6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   20aca:	d103      	bne.n	20ad4 <_raise_r+0x44>
   20acc:	2316      	movs	r3, #22
   20ace:	60c3      	str	r3, [r0, #12]
   20ad0:	2001      	movs	r0, #1
   20ad2:	e005      	b.n	20ae0 <_raise_r+0x50>
   20ad4:	2300      	movs	r3, #0
   20ad6:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
   20ada:	4628      	mov	r0, r5
   20adc:	4790      	blx	r2
   20ade:	2000      	movs	r0, #0
   20ae0:	b001      	add	sp, #4
   20ae2:	bd30      	pop	{r4, r5, pc}

00020ae4 <raise>:
   20ae4:	b500      	push	{lr}
   20ae6:	4b04      	ldr	r3, [pc, #16]	(20af8 <raise+0x14>)
   20ae8:	4601      	mov	r1, r0
   20aea:	b081      	sub	sp, #4
   20aec:	6818      	ldr	r0, [r3, #0]
   20aee:	f7ff ffcf 	bl	20a90 <_raise_r>
   20af2:	b001      	add	sp, #4
   20af4:	bd00      	pop	{pc}
   20af6:	46c0      	nop			(mov r8, r8)
   20af8:	20000044 	.word	0x20000044

00020afc <_init_signal_r>:
   20afc:	6c43      	ldr	r3, [r0, #68]
   20afe:	b510      	push	{r4, lr}
   20b00:	4604      	mov	r4, r0
   20b02:	b963      	cbnz	r3, 20b1e <_init_signal_r+0x22>
   20b04:	2180      	movs	r1, #128
   20b06:	f7ff fa97 	bl	20038 <_malloc_r>
   20b0a:	6460      	str	r0, [r4, #68]
   20b0c:	b908      	cbnz	r0, 20b12 <_init_signal_r+0x16>
   20b0e:	3801      	subs	r0, #1
   20b10:	e006      	b.n	20b20 <_init_signal_r+0x24>
   20b12:	2300      	movs	r3, #0
   20b14:	2200      	movs	r2, #0
   20b16:	50c2      	str	r2, [r0, r3]
   20b18:	3304      	adds	r3, #4
   20b1a:	2b80      	cmp	r3, #128
   20b1c:	d1fb      	bne.n	20b16 <_init_signal_r+0x1a>
   20b1e:	2000      	movs	r0, #0
   20b20:	bd10      	pop	{r4, pc}
   20b22:	46c0      	nop			(mov r8, r8)

00020b24 <_init_signal>:
   20b24:	b500      	push	{lr}
   20b26:	4b03      	ldr	r3, [pc, #12]	(20b34 <_init_signal+0x10>)
   20b28:	b081      	sub	sp, #4
   20b2a:	6818      	ldr	r0, [r3, #0]
   20b2c:	f7ff ffe6 	bl	20afc <_init_signal_r>
   20b30:	b001      	add	sp, #4
   20b32:	bd00      	pop	{pc}
   20b34:	20000044 	.word	0x20000044

00020b38 <__sigtramp_r>:
   20b38:	b530      	push	{r4, r5, lr}
   20b3a:	291f      	cmp	r1, #31
   20b3c:	b081      	sub	sp, #4
   20b3e:	4604      	mov	r4, r0
   20b40:	460d      	mov	r5, r1
   20b42:	d81a      	bhi.n	20b7a <__sigtramp_r+0x42>
   20b44:	6c43      	ldr	r3, [r0, #68]
   20b46:	b913      	cbnz	r3, 20b4e <__sigtramp_r+0x16>
   20b48:	f7ff ffd8 	bl	20afc <_init_signal_r>
   20b4c:	b9a8      	cbnz	r0, 20b7a <__sigtramp_r+0x42>
   20b4e:	6c60      	ldr	r0, [r4, #68]
   20b50:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
   20b54:	b90a      	cbnz	r2, 20b5a <__sigtramp_r+0x22>
   20b56:	2001      	movs	r0, #1
   20b58:	e011      	b.n	20b7e <__sigtramp_r+0x46>
   20b5a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   20b5e:	d101      	bne.n	20b64 <__sigtramp_r+0x2c>
   20b60:	2002      	movs	r0, #2
   20b62:	e00c      	b.n	20b7e <__sigtramp_r+0x46>
   20b64:	2a01      	cmp	r2, #1
   20b66:	d101      	bne.n	20b6c <__sigtramp_r+0x34>
   20b68:	2003      	movs	r0, #3
   20b6a:	e008      	b.n	20b7e <__sigtramp_r+0x46>
   20b6c:	2300      	movs	r3, #0
   20b6e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   20b72:	4628      	mov	r0, r5
   20b74:	4790      	blx	r2
   20b76:	2000      	movs	r0, #0
   20b78:	e001      	b.n	20b7e <__sigtramp_r+0x46>
   20b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20b7e:	b001      	add	sp, #4
   20b80:	bd30      	pop	{r4, r5, pc}
   20b82:	46c0      	nop			(mov r8, r8)

00020b84 <__sigtramp>:
   20b84:	b500      	push	{lr}
   20b86:	4b04      	ldr	r3, [pc, #16]	(20b98 <__sigtramp+0x14>)
   20b88:	4601      	mov	r1, r0
   20b8a:	b081      	sub	sp, #4
   20b8c:	6818      	ldr	r0, [r3, #0]
   20b8e:	f7ff ffd3 	bl	20b38 <__sigtramp_r>
   20b92:	b001      	add	sp, #4
   20b94:	bd00      	pop	{pc}
   20b96:	46c0      	nop			(mov r8, r8)
   20b98:	20000044 	.word	0x20000044

00020b9c <_signal_r>:
   20b9c:	291f      	cmp	r1, #31
   20b9e:	b570      	push	{r4, r5, r6, lr}
   20ba0:	4604      	mov	r4, r0
   20ba2:	460d      	mov	r5, r1
   20ba4:	4616      	mov	r6, r2
   20ba6:	d902      	bls.n	20bae <_signal_r+0x12>
   20ba8:	2316      	movs	r3, #22
   20baa:	60c3      	str	r3, [r0, #12]
   20bac:	e004      	b.n	20bb8 <_signal_r+0x1c>
   20bae:	6c43      	ldr	r3, [r0, #68]
   20bb0:	b92b      	cbnz	r3, 20bbe <_signal_r+0x22>
   20bb2:	f7ff ffa3 	bl	20afc <_init_signal_r>
   20bb6:	b110      	cbz	r0, 20bbe <_signal_r+0x22>
   20bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20bbc:	e004      	b.n	20bc8 <_signal_r+0x2c>
   20bbe:	6c63      	ldr	r3, [r4, #68]
   20bc0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   20bc4:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
   20bc8:	bd70      	pop	{r4, r5, r6, pc}
   20bca:	46c0      	nop			(mov r8, r8)

00020bcc <signal>:
   20bcc:	b500      	push	{lr}
   20bce:	4b05      	ldr	r3, [pc, #20]	(20be4 <signal+0x18>)
   20bd0:	4684      	mov	ip, r0
   20bd2:	460a      	mov	r2, r1
   20bd4:	b081      	sub	sp, #4
   20bd6:	6818      	ldr	r0, [r3, #0]
   20bd8:	4661      	mov	r1, ip
   20bda:	f7ff ffdf 	bl	20b9c <_signal_r>
   20bde:	b001      	add	sp, #4
   20be0:	bd00      	pop	{pc}
   20be2:	46c0      	nop			(mov r8, r8)
   20be4:	20000044 	.word	0x20000044

00020be8 <_getpid_r>:
   20be8:	b500      	push	{lr}
   20bea:	b081      	sub	sp, #4
   20bec:	f7f6 fa36 	bl	1705c <_getpid>
   20bf0:	b001      	add	sp, #4
   20bf2:	bd00      	pop	{pc}

00020bf4 <_kill_r>:
   20bf4:	b530      	push	{r4, r5, lr}
   20bf6:	4c08      	ldr	r4, [pc, #32]	(20c18 <_kill_r+0x24>)
   20bf8:	2300      	movs	r3, #0
   20bfa:	b081      	sub	sp, #4
   20bfc:	4605      	mov	r5, r0
   20bfe:	4608      	mov	r0, r1
   20c00:	4611      	mov	r1, r2
   20c02:	6023      	str	r3, [r4, #0]
   20c04:	f7f6 fa3e 	bl	17084 <_kill>
   20c08:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   20c0c:	d102      	bne.n	20c14 <_kill_r+0x20>
   20c0e:	6823      	ldr	r3, [r4, #0]
   20c10:	b103      	cbz	r3, 20c14 <_kill_r+0x20>
   20c12:	60eb      	str	r3, [r5, #12]
   20c14:	b001      	add	sp, #4
   20c16:	bd30      	pop	{r4, r5, pc}
   20c18:	20000678 	.word	0x20000678

00020c1c <strcmp>:
   20c1c:	b530      	push	{r4, r5, lr}
   20c1e:	468c      	mov	ip, r1
   20c20:	2200      	movs	r2, #0
   20c22:	5c81      	ldrb	r1, [r0, r2]
   20c24:	eb00 0402 	add.w	r4, r0, r2
   20c28:	eb0c 0502 	add.w	r5, ip, r2
   20c2c:	b121      	cbz	r1, 20c38 <strcmp+0x1c>
   20c2e:	f81c 3002 	ldrb.w	r3, [ip, r2]
   20c32:	3201      	adds	r2, #1
   20c34:	4299      	cmp	r1, r3
   20c36:	d0f4      	beq.n	20c22 <strcmp+0x6>
   20c38:	7820      	ldrb	r0, [r4, #0]
   20c3a:	782b      	ldrb	r3, [r5, #0]
   20c3c:	1ac0      	subs	r0, r0, r3
   20c3e:	bd30      	pop	{r4, r5, pc}

00020c40 <strcpy>:
   20c40:	2200      	movs	r2, #0
   20c42:	5c8b      	ldrb	r3, [r1, r2]
   20c44:	5483      	strb	r3, [r0, r2]
   20c46:	3201      	adds	r2, #1
   20c48:	2b00      	cmp	r3, #0
   20c4a:	d1fa      	bne.n	20c42 <strcpy+0x2>
   20c4c:	4770      	bx	lr
   20c4e:	46c0      	nop			(mov r8, r8)

00020c50 <strlen>:
   20c50:	4602      	mov	r2, r0
   20c52:	e000      	b.n	20c56 <strlen+0x6>
   20c54:	3001      	adds	r0, #1
   20c56:	7803      	ldrb	r3, [r0, #0]
   20c58:	2b00      	cmp	r3, #0
   20c5a:	d1fb      	bne.n	20c54 <strlen+0x4>
   20c5c:	1a80      	subs	r0, r0, r2
   20c5e:	4770      	bx	lr

00020c60 <strncmp>:
   20c60:	b570      	push	{r4, r5, r6, lr}
   20c62:	4604      	mov	r4, r0
   20c64:	4608      	mov	r0, r1
   20c66:	b90a      	cbnz	r2, 20c6c <strncmp+0xc>
   20c68:	2000      	movs	r0, #0
   20c6a:	e017      	b.n	20c9c <strncmp+0x3c>
   20c6c:	f04f 0c00 	mov.w	ip, #0	; 0x0
   20c70:	e005      	b.n	20c7e <strncmp+0x1e>
   20c72:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   20c76:	d00d      	beq.n	20c94 <strncmp+0x34>
   20c78:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   20c7c:	b151      	cbz	r1, 20c94 <strncmp+0x34>
   20c7e:	eb04 050c 	add.w	r5, r4, ip
   20c82:	eb00 060c 	add.w	r6, r0, ip
   20c86:	b12a      	cbz	r2, 20c94 <strncmp+0x34>
   20c88:	f814 300c 	ldrb.w	r3, [r4, ip]
   20c8c:	f810 100c 	ldrb.w	r1, [r0, ip]
   20c90:	4299      	cmp	r1, r3
   20c92:	d0ee      	beq.n	20c72 <strncmp+0x12>
   20c94:	782a      	ldrb	r2, [r5, #0]
   20c96:	7833      	ldrb	r3, [r6, #0]
   20c98:	ebc3 0002 	rsb	r0, r3, r2
   20c9c:	bd70      	pop	{r4, r5, r6, pc}
   20c9e:	46c0      	nop			(mov r8, r8)

00020ca0 <write>:
   20ca0:	b500      	push	{lr}
   20ca2:	4613      	mov	r3, r2
   20ca4:	4a05      	ldr	r2, [pc, #20]	(20cbc <write+0x1c>)
   20ca6:	4684      	mov	ip, r0
   20ca8:	468e      	mov	lr, r1
   20caa:	b081      	sub	sp, #4
   20cac:	6810      	ldr	r0, [r2, #0]
   20cae:	4661      	mov	r1, ip
   20cb0:	4672      	mov	r2, lr
   20cb2:	f000 f879 	bl	20da8 <_write_r>
   20cb6:	b001      	add	sp, #4
   20cb8:	bd00      	pop	{pc}
   20cba:	46c0      	nop			(mov r8, r8)
   20cbc:	20000044 	.word	0x20000044

00020cc0 <__swbuf_r>:
   20cc0:	b570      	push	{r4, r5, r6, lr}
   20cc2:	4606      	mov	r6, r0
   20cc4:	460d      	mov	r5, r1
   20cc6:	4614      	mov	r4, r2
   20cc8:	b118      	cbz	r0, 20cd2 <__swbuf_r+0x12>
   20cca:	6983      	ldr	r3, [r0, #24]
   20ccc:	b90b      	cbnz	r3, 20cd2 <__swbuf_r+0x12>
   20cce:	f000 fa63 	bl	21198 <__sinit>
   20cd2:	4b2b      	ldr	r3, [pc, #172]	(20d80 <__swbuf_r+0xc0>)
   20cd4:	429c      	cmp	r4, r3
   20cd6:	bf08      	it	eq
   20cd8:	6834      	ldreq	r4, [r6, #0]
   20cda:	d008      	beq.n	20cee <__swbuf_r+0x2e>
   20cdc:	4b29      	ldr	r3, [pc, #164]	(20d84 <__swbuf_r+0xc4>)
   20cde:	429c      	cmp	r4, r3
   20ce0:	bf08      	it	eq
   20ce2:	6874      	ldreq	r4, [r6, #4]
   20ce4:	d003      	beq.n	20cee <__swbuf_r+0x2e>
   20ce6:	4b28      	ldr	r3, [pc, #160]	(20d88 <__swbuf_r+0xc8>)
   20ce8:	429c      	cmp	r4, r3
   20cea:	bf08      	it	eq
   20cec:	68b4      	ldreq	r4, [r6, #8]
   20cee:	69a3      	ldr	r3, [r4, #24]
   20cf0:	60a3      	str	r3, [r4, #8]
   20cf2:	89a3      	ldrh	r3, [r4, #12]
   20cf4:	f013 0f08 	tst.w	r3, #8	; 0x8
   20cf8:	d001      	beq.n	20cfe <__swbuf_r+0x3e>
   20cfa:	6923      	ldr	r3, [r4, #16]
   20cfc:	b95b      	cbnz	r3, 20d16 <__swbuf_r+0x56>
   20cfe:	4630      	mov	r0, r6
   20d00:	4621      	mov	r1, r4
   20d02:	f000 f867 	bl	20dd4 <__swsetup_r>
   20d06:	b130      	cbz	r0, 20d16 <__swbuf_r+0x56>
   20d08:	89a3      	ldrh	r3, [r4, #12]
   20d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20d0e:	81a3      	strh	r3, [r4, #12]
   20d10:	2309      	movs	r3, #9
   20d12:	60f3      	str	r3, [r6, #12]
   20d14:	e030      	b.n	20d78 <__swbuf_r+0xb8>
   20d16:	89a3      	ldrh	r3, [r4, #12]
   20d18:	6922      	ldr	r2, [r4, #16]
   20d1a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   20d1e:	bf01      	itttt	eq
   20d20:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
   20d24:	81a3      	strheq	r3, [r4, #12]
   20d26:	6e63      	ldreq	r3, [r4, #100]
   20d28:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
   20d2c:	bf08      	it	eq
   20d2e:	6663      	streq	r3, [r4, #100]
   20d30:	6823      	ldr	r3, [r4, #0]
   20d32:	ebc2 0203 	rsb	r2, r2, r3
   20d36:	6963      	ldr	r3, [r4, #20]
   20d38:	429a      	cmp	r2, r3
   20d3a:	db05      	blt.n	20d48 <__swbuf_r+0x88>
   20d3c:	4630      	mov	r0, r6
   20d3e:	4621      	mov	r1, r4
   20d40:	f000 f8ba 	bl	20eb8 <_fflush_r>
   20d44:	b9c0      	cbnz	r0, 20d78 <__swbuf_r+0xb8>
   20d46:	2200      	movs	r2, #0
   20d48:	68a3      	ldr	r3, [r4, #8]
   20d4a:	b2ed      	uxtb	r5, r5
   20d4c:	3b01      	subs	r3, #1
   20d4e:	60a3      	str	r3, [r4, #8]
   20d50:	6823      	ldr	r3, [r4, #0]
   20d52:	3201      	adds	r2, #1
   20d54:	f803 5b01 	strb.w	r5, [r3], #1
   20d58:	6023      	str	r3, [r4, #0]
   20d5a:	6963      	ldr	r3, [r4, #20]
   20d5c:	429a      	cmp	r2, r3
   20d5e:	d006      	beq.n	20d6e <__swbuf_r+0xae>
   20d60:	7b23      	ldrb	r3, [r4, #12]
   20d62:	2d0a      	cmp	r5, #10
   20d64:	bf14      	ite	ne
   20d66:	2300      	movne	r3, #0
   20d68:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
   20d6c:	b133      	cbz	r3, 20d7c <__swbuf_r+0xbc>
   20d6e:	4630      	mov	r0, r6
   20d70:	4621      	mov	r1, r4
   20d72:	f000 f8a1 	bl	20eb8 <_fflush_r>
   20d76:	b108      	cbz	r0, 20d7c <__swbuf_r+0xbc>
   20d78:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   20d7c:	4628      	mov	r0, r5
   20d7e:	bd70      	pop	{r4, r5, r6, pc}
   20d80:	00023228 	.word	0x00023228
   20d84:	00023248 	.word	0x00023248
   20d88:	00023268 	.word	0x00023268

00020d8c <__swbuf>:
   20d8c:	b500      	push	{lr}
   20d8e:	4b05      	ldr	r3, [pc, #20]	(20da4 <__swbuf+0x18>)
   20d90:	4684      	mov	ip, r0
   20d92:	460a      	mov	r2, r1
   20d94:	b081      	sub	sp, #4
   20d96:	6818      	ldr	r0, [r3, #0]
   20d98:	4661      	mov	r1, ip
   20d9a:	f7ff ff91 	bl	20cc0 <__swbuf_r>
   20d9e:	b001      	add	sp, #4
   20da0:	bd00      	pop	{pc}
   20da2:	46c0      	nop			(mov r8, r8)
   20da4:	20000044 	.word	0x20000044

00020da8 <_write_r>:
   20da8:	b530      	push	{r4, r5, lr}
   20daa:	4c09      	ldr	r4, [pc, #36]	(20dd0 <_write_r+0x28>)
   20dac:	4605      	mov	r5, r0
   20dae:	2000      	movs	r0, #0
   20db0:	6020      	str	r0, [r4, #0]
   20db2:	b081      	sub	sp, #4
   20db4:	4608      	mov	r0, r1
   20db6:	4611      	mov	r1, r2
   20db8:	461a      	mov	r2, r3
   20dba:	f7f6 fa17 	bl	171ec <_write>
   20dbe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   20dc2:	d102      	bne.n	20dca <_write_r+0x22>
   20dc4:	6823      	ldr	r3, [r4, #0]
   20dc6:	b103      	cbz	r3, 20dca <_write_r+0x22>
   20dc8:	60eb      	str	r3, [r5, #12]
   20dca:	b001      	add	sp, #4
   20dcc:	bd30      	pop	{r4, r5, pc}
   20dce:	46c0      	nop			(mov r8, r8)
   20dd0:	20000678 	.word	0x20000678

00020dd4 <__swsetup_r>:
   20dd4:	b530      	push	{r4, r5, lr}
   20dd6:	4b34      	ldr	r3, [pc, #208]	(20ea8 <__swsetup_r+0xd4>)
   20dd8:	4605      	mov	r5, r0
   20dda:	6818      	ldr	r0, [r3, #0]
   20ddc:	b081      	sub	sp, #4
   20dde:	460c      	mov	r4, r1
   20de0:	b118      	cbz	r0, 20dea <__swsetup_r+0x16>
   20de2:	6983      	ldr	r3, [r0, #24]
   20de4:	b90b      	cbnz	r3, 20dea <__swsetup_r+0x16>
   20de6:	f000 f9d7 	bl	21198 <__sinit>
   20dea:	4b30      	ldr	r3, [pc, #192]	(20eac <__swsetup_r+0xd8>)
   20dec:	429c      	cmp	r4, r3
   20dee:	d103      	bne.n	20df8 <__swsetup_r+0x24>
   20df0:	4b2d      	ldr	r3, [pc, #180]	(20ea8 <__swsetup_r+0xd4>)
   20df2:	681b      	ldr	r3, [r3, #0]
   20df4:	681c      	ldr	r4, [r3, #0]
   20df6:	e00c      	b.n	20e12 <__swsetup_r+0x3e>
   20df8:	4b2d      	ldr	r3, [pc, #180]	(20eb0 <__swsetup_r+0xdc>)
   20dfa:	429c      	cmp	r4, r3
   20dfc:	d103      	bne.n	20e06 <__swsetup_r+0x32>
   20dfe:	4b2a      	ldr	r3, [pc, #168]	(20ea8 <__swsetup_r+0xd4>)
   20e00:	681b      	ldr	r3, [r3, #0]
   20e02:	685c      	ldr	r4, [r3, #4]
   20e04:	e005      	b.n	20e12 <__swsetup_r+0x3e>
   20e06:	4b2b      	ldr	r3, [pc, #172]	(20eb4 <__swsetup_r+0xe0>)
   20e08:	429c      	cmp	r4, r3
   20e0a:	bf02      	ittt	eq
   20e0c:	4b26      	ldreq	r3, [pc, #152]	(20ea8 <__swsetup_r+0xd4>)
   20e0e:	681b      	ldreq	r3, [r3, #0]
   20e10:	689c      	ldreq	r4, [r3, #8]
   20e12:	89a3      	ldrh	r3, [r4, #12]
   20e14:	f013 0f08 	tst.w	r3, #8	; 0x8
   20e18:	d11c      	bne.n	20e54 <__swsetup_r+0x80>
   20e1a:	f013 0f10 	tst.w	r3, #16	; 0x10
   20e1e:	d03c      	beq.n	20e9a <__swsetup_r+0xc6>
   20e20:	f013 0f04 	tst.w	r3, #4	; 0x4
   20e24:	d012      	beq.n	20e4c <__swsetup_r+0x78>
   20e26:	6b61      	ldr	r1, [r4, #52]
   20e28:	b141      	cbz	r1, 20e3c <__swsetup_r+0x68>
   20e2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   20e2e:	4299      	cmp	r1, r3
   20e30:	d002      	beq.n	20e38 <__swsetup_r+0x64>
   20e32:	4628      	mov	r0, r5
   20e34:	f000 fa36 	bl	212a4 <_free_r>
   20e38:	2300      	movs	r3, #0
   20e3a:	6363      	str	r3, [r4, #52]
   20e3c:	89a3      	ldrh	r3, [r4, #12]
   20e3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   20e42:	81a3      	strh	r3, [r4, #12]
   20e44:	2300      	movs	r3, #0
   20e46:	6063      	str	r3, [r4, #4]
   20e48:	6923      	ldr	r3, [r4, #16]
   20e4a:	6023      	str	r3, [r4, #0]
   20e4c:	89a3      	ldrh	r3, [r4, #12]
   20e4e:	f043 0308 	orr.w	r3, r3, #8	; 0x8
   20e52:	81a3      	strh	r3, [r4, #12]
   20e54:	6923      	ldr	r3, [r4, #16]
   20e56:	b94b      	cbnz	r3, 20e6c <__swsetup_r+0x98>
   20e58:	89a3      	ldrh	r3, [r4, #12]
   20e5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
   20e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   20e62:	d003      	beq.n	20e6c <__swsetup_r+0x98>
   20e64:	4628      	mov	r0, r5
   20e66:	4621      	mov	r1, r4
   20e68:	f000 fb36 	bl	214d8 <__smakebuf_r>
   20e6c:	89a3      	ldrh	r3, [r4, #12]
   20e6e:	f013 0f01 	tst.w	r3, #1	; 0x1
   20e72:	d006      	beq.n	20e82 <__swsetup_r+0xae>
   20e74:	2300      	movs	r3, #0
   20e76:	60a3      	str	r3, [r4, #8]
   20e78:	6963      	ldr	r3, [r4, #20]
   20e7a:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   20e7e:	61a3      	str	r3, [r4, #24]
   20e80:	e005      	b.n	20e8e <__swsetup_r+0xba>
   20e82:	f013 0f02 	tst.w	r3, #2	; 0x2
   20e86:	bf0c      	ite	eq
   20e88:	6963      	ldreq	r3, [r4, #20]
   20e8a:	2300      	movne	r3, #0
   20e8c:	60a3      	str	r3, [r4, #8]
   20e8e:	6923      	ldr	r3, [r4, #16]
   20e90:	b933      	cbnz	r3, 20ea0 <__swsetup_r+0xcc>
   20e92:	89a3      	ldrh	r3, [r4, #12]
   20e94:	f013 0f80 	tst.w	r3, #128	; 0x80
   20e98:	d002      	beq.n	20ea0 <__swsetup_r+0xcc>
   20e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20e9e:	e000      	b.n	20ea2 <__swsetup_r+0xce>
   20ea0:	2000      	movs	r0, #0
   20ea2:	b001      	add	sp, #4
   20ea4:	bd30      	pop	{r4, r5, pc}
   20ea6:	46c0      	nop			(mov r8, r8)
   20ea8:	20000044 	.word	0x20000044
   20eac:	00023228 	.word	0x00023228
   20eb0:	00023248 	.word	0x00023248
   20eb4:	00023268 	.word	0x00023268

00020eb8 <_fflush_r>:
   20eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   20eba:	690b      	ldr	r3, [r1, #16]
   20ebc:	b083      	sub	sp, #12
   20ebe:	9001      	str	r0, [sp, #4]
   20ec0:	460d      	mov	r5, r1
   20ec2:	2b00      	cmp	r3, #0
   20ec4:	f000 808c 	beq.w	20fe0 <_fflush_r+0x128>
   20ec8:	b118      	cbz	r0, 20ed2 <_fflush_r+0x1a>
   20eca:	6983      	ldr	r3, [r0, #24]
   20ecc:	b90b      	cbnz	r3, 20ed2 <_fflush_r+0x1a>
   20ece:	f000 f963 	bl	21198 <__sinit>
   20ed2:	4b45      	ldr	r3, [pc, #276]	(20fe8 <_fflush_r+0x130>)
   20ed4:	429d      	cmp	r5, r3
   20ed6:	d102      	bne.n	20ede <_fflush_r+0x26>
   20ed8:	9a01      	ldr	r2, [sp, #4]
   20eda:	6815      	ldr	r5, [r2, #0]
   20edc:	e00a      	b.n	20ef4 <_fflush_r+0x3c>
   20ede:	4b43      	ldr	r3, [pc, #268]	(20fec <_fflush_r+0x134>)
   20ee0:	429d      	cmp	r5, r3
   20ee2:	d102      	bne.n	20eea <_fflush_r+0x32>
   20ee4:	9b01      	ldr	r3, [sp, #4]
   20ee6:	685d      	ldr	r5, [r3, #4]
   20ee8:	e004      	b.n	20ef4 <_fflush_r+0x3c>
   20eea:	4b41      	ldr	r3, [pc, #260]	(20ff0 <_fflush_r+0x138>)
   20eec:	429d      	cmp	r5, r3
   20eee:	bf04      	itt	eq
   20ef0:	9a01      	ldreq	r2, [sp, #4]
   20ef2:	6895      	ldreq	r5, [r2, #8]
   20ef4:	89ab      	ldrh	r3, [r5, #12]
   20ef6:	b21a      	sxth	r2, r3
   20ef8:	f012 0f08 	tst.w	r2, #8	; 0x8
   20efc:	d150      	bne.n	20fa0 <_fflush_r+0xe8>
   20efe:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
   20f02:	686b      	ldr	r3, [r5, #4]
   20f04:	81aa      	strh	r2, [r5, #12]
   20f06:	2b00      	cmp	r3, #0
   20f08:	dc02      	bgt.n	20f10 <_fflush_r+0x58>
   20f0a:	6c2b      	ldr	r3, [r5, #64]
   20f0c:	2b00      	cmp	r3, #0
   20f0e:	dd67      	ble.n	20fe0 <_fflush_r+0x128>
   20f10:	6aec      	ldr	r4, [r5, #44]
   20f12:	2c00      	cmp	r4, #0
   20f14:	d064      	beq.n	20fe0 <_fflush_r+0x128>
   20f16:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   20f1a:	bf18      	it	ne
   20f1c:	6d6e      	ldrne	r6, [r5, #84]
   20f1e:	d111      	bne.n	20f44 <_fflush_r+0x8c>
   20f20:	2200      	movs	r2, #0
   20f22:	2301      	movs	r3, #1
   20f24:	6a29      	ldr	r1, [r5, #32]
   20f26:	9801      	ldr	r0, [sp, #4]
   20f28:	47a0      	blx	r4
   20f2a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   20f2e:	4606      	mov	r6, r0
   20f30:	d108      	bne.n	20f44 <_fflush_r+0x8c>
   20f32:	9a01      	ldr	r2, [sp, #4]
   20f34:	68d3      	ldr	r3, [r2, #12]
   20f36:	2b1d      	cmp	r3, #29
   20f38:	d052      	beq.n	20fe0 <_fflush_r+0x128>
   20f3a:	89ab      	ldrh	r3, [r5, #12]
   20f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20f40:	81ab      	strh	r3, [r5, #12]
   20f42:	e04e      	b.n	20fe2 <_fflush_r+0x12a>
   20f44:	89ab      	ldrh	r3, [r5, #12]
   20f46:	f013 0f04 	tst.w	r3, #4	; 0x4
   20f4a:	d005      	beq.n	20f58 <_fflush_r+0xa0>
   20f4c:	686b      	ldr	r3, [r5, #4]
   20f4e:	1af6      	subs	r6, r6, r3
   20f50:	6b6b      	ldr	r3, [r5, #52]
   20f52:	b10b      	cbz	r3, 20f58 <_fflush_r+0xa0>
   20f54:	6c2b      	ldr	r3, [r5, #64]
   20f56:	1af6      	subs	r6, r6, r3
   20f58:	2300      	movs	r3, #0
   20f5a:	6a29      	ldr	r1, [r5, #32]
   20f5c:	6aec      	ldr	r4, [r5, #44]
   20f5e:	9801      	ldr	r0, [sp, #4]
   20f60:	4632      	mov	r2, r6
   20f62:	47a0      	blx	r4
   20f64:	42b0      	cmp	r0, r6
   20f66:	89ab      	ldrh	r3, [r5, #12]
   20f68:	d130      	bne.n	20fcc <_fflush_r+0x114>
   20f6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   20f6e:	041b      	lsls	r3, r3, #16
   20f70:	0c1b      	lsrs	r3, r3, #16
   20f72:	81ab      	strh	r3, [r5, #12]
   20f74:	2300      	movs	r3, #0
   20f76:	606b      	str	r3, [r5, #4]
   20f78:	692b      	ldr	r3, [r5, #16]
   20f7a:	6b69      	ldr	r1, [r5, #52]
   20f7c:	602b      	str	r3, [r5, #0]
   20f7e:	89ab      	ldrh	r3, [r5, #12]
   20f80:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   20f84:	bf18      	it	ne
   20f86:	656e      	strne	r6, [r5, #84]
   20f88:	2900      	cmp	r1, #0
   20f8a:	d029      	beq.n	20fe0 <_fflush_r+0x128>
   20f8c:	f105 0344 	add.w	r3, r5, #68	; 0x44
   20f90:	4299      	cmp	r1, r3
   20f92:	d002      	beq.n	20f9a <_fflush_r+0xe2>
   20f94:	9801      	ldr	r0, [sp, #4]
   20f96:	f000 f985 	bl	212a4 <_free_r>
   20f9a:	2300      	movs	r3, #0
   20f9c:	636b      	str	r3, [r5, #52]
   20f9e:	e01f      	b.n	20fe0 <_fflush_r+0x128>
   20fa0:	692f      	ldr	r7, [r5, #16]
   20fa2:	b1ef      	cbz	r7, 20fe0 <_fflush_r+0x128>
   20fa4:	f012 0f03 	tst.w	r2, #3	; 0x3
   20fa8:	682b      	ldr	r3, [r5, #0]
   20faa:	bf0c      	ite	eq
   20fac:	696a      	ldreq	r2, [r5, #20]
   20fae:	2200      	movne	r2, #0
   20fb0:	602f      	str	r7, [r5, #0]
   20fb2:	ebc7 0603 	rsb	r6, r7, r3
   20fb6:	60aa      	str	r2, [r5, #8]
   20fb8:	e010      	b.n	20fdc <_fflush_r+0x124>
   20fba:	6a29      	ldr	r1, [r5, #32]
   20fbc:	6aac      	ldr	r4, [r5, #40]
   20fbe:	9801      	ldr	r0, [sp, #4]
   20fc0:	463a      	mov	r2, r7
   20fc2:	4633      	mov	r3, r6
   20fc4:	47a0      	blx	r4
   20fc6:	2800      	cmp	r0, #0
   20fc8:	dc06      	bgt.n	20fd8 <_fflush_r+0x120>
   20fca:	89ab      	ldrh	r3, [r5, #12]
   20fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20fd0:	81ab      	strh	r3, [r5, #12]
   20fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20fd6:	e004      	b.n	20fe2 <_fflush_r+0x12a>
   20fd8:	183f      	adds	r7, r7, r0
   20fda:	1a36      	subs	r6, r6, r0
   20fdc:	2e00      	cmp	r6, #0
   20fde:	dcec      	bgt.n	20fba <_fflush_r+0x102>
   20fe0:	2000      	movs	r0, #0
   20fe2:	b003      	add	sp, #12
   20fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20fe6:	46c0      	nop			(mov r8, r8)
   20fe8:	00023228 	.word	0x00023228
   20fec:	00023248 	.word	0x00023248
   20ff0:	00023268 	.word	0x00023268

00020ff4 <fflush>:
   20ff4:	b500      	push	{lr}
   20ff6:	4601      	mov	r1, r0
   20ff8:	b081      	sub	sp, #4
   20ffa:	b928      	cbnz	r0, 21008 <fflush+0x14>
   20ffc:	4b05      	ldr	r3, [pc, #20]	(21014 <fflush+0x20>)
   20ffe:	4906      	ldr	r1, [pc, #24]	(21018 <fflush+0x24>)
   21000:	6818      	ldr	r0, [r3, #0]
   21002:	f000 fa1b 	bl	2143c <_fwalk_reent>
   21006:	e003      	b.n	21010 <fflush+0x1c>
   21008:	4b04      	ldr	r3, [pc, #16]	(2101c <fflush+0x28>)
   2100a:	6818      	ldr	r0, [r3, #0]
   2100c:	f7ff ff54 	bl	20eb8 <_fflush_r>
   21010:	b001      	add	sp, #4
   21012:	bd00      	pop	{pc}
   21014:	00023220 	.word	0x00023220
   21018:	00020eb9 	.word	0x00020eb9
   2101c:	20000044 	.word	0x20000044

00021020 <__sfp_lock_acquire>:
   21020:	4770      	bx	lr
   21022:	46c0      	nop			(mov r8, r8)

00021024 <__sfp_lock_release>:
   21024:	4770      	bx	lr
   21026:	46c0      	nop			(mov r8, r8)

00021028 <__sinit_lock_acquire>:
   21028:	4770      	bx	lr
   2102a:	46c0      	nop			(mov r8, r8)

0002102c <__sinit_lock_release>:
   2102c:	4770      	bx	lr
   2102e:	46c0      	nop			(mov r8, r8)

00021030 <__fp_lock>:
   21030:	2000      	movs	r0, #0
   21032:	4770      	bx	lr

00021034 <__fp_unlock>:
   21034:	2000      	movs	r0, #0
   21036:	4770      	bx	lr

00021038 <__fp_unlock_all>:
   21038:	b500      	push	{lr}
   2103a:	4b04      	ldr	r3, [pc, #16]	(2104c <__fp_unlock_all+0x14>)
   2103c:	b081      	sub	sp, #4
   2103e:	6818      	ldr	r0, [r3, #0]
   21040:	4903      	ldr	r1, [pc, #12]	(21050 <__fp_unlock_all+0x18>)
   21042:	f000 fa23 	bl	2148c <_fwalk>
   21046:	b001      	add	sp, #4
   21048:	bd00      	pop	{pc}
   2104a:	46c0      	nop			(mov r8, r8)
   2104c:	20000044 	.word	0x20000044
   21050:	00021035 	.word	0x00021035

00021054 <__fp_lock_all>:
   21054:	b500      	push	{lr}
   21056:	4b04      	ldr	r3, [pc, #16]	(21068 <__fp_lock_all+0x14>)
   21058:	b081      	sub	sp, #4
   2105a:	6818      	ldr	r0, [r3, #0]
   2105c:	4903      	ldr	r1, [pc, #12]	(2106c <__fp_lock_all+0x18>)
   2105e:	f000 fa15 	bl	2148c <_fwalk>
   21062:	b001      	add	sp, #4
   21064:	bd00      	pop	{pc}
   21066:	46c0      	nop			(mov r8, r8)
   21068:	20000044 	.word	0x20000044
   2106c:	00021031 	.word	0x00021031

00021070 <_cleanup_r>:
   21070:	b500      	push	{lr}
   21072:	4903      	ldr	r1, [pc, #12]	(21080 <_cleanup_r+0x10>)
   21074:	b081      	sub	sp, #4
   21076:	f000 fa09 	bl	2148c <_fwalk>
   2107a:	b001      	add	sp, #4
   2107c:	bd00      	pop	{pc}
   2107e:	46c0      	nop			(mov r8, r8)
   21080:	00021725 	.word	0x00021725

00021084 <_cleanup>:
   21084:	b500      	push	{lr}
   21086:	4b04      	ldr	r3, [pc, #16]	(21098 <_cleanup+0x14>)
   21088:	b081      	sub	sp, #4
   2108a:	6818      	ldr	r0, [r3, #0]
   2108c:	4903      	ldr	r1, [pc, #12]	(2109c <_cleanup+0x18>)
   2108e:	f000 f9fd 	bl	2148c <_fwalk>
   21092:	b001      	add	sp, #4
   21094:	bd00      	pop	{pc}
   21096:	46c0      	nop			(mov r8, r8)
   21098:	00023220 	.word	0x00023220
   2109c:	00021725 	.word	0x00021725

000210a0 <std>:
   210a0:	2300      	movs	r3, #0
   210a2:	6003      	str	r3, [r0, #0]
   210a4:	6043      	str	r3, [r0, #4]
   210a6:	6083      	str	r3, [r0, #8]
   210a8:	8181      	strh	r1, [r0, #12]
   210aa:	6643      	str	r3, [r0, #100]
   210ac:	81c2      	strh	r2, [r0, #14]
   210ae:	6103      	str	r3, [r0, #16]
   210b0:	6143      	str	r3, [r0, #20]
   210b2:	6183      	str	r3, [r0, #24]
   210b4:	b510      	push	{r4, lr}
   210b6:	2100      	movs	r1, #0
   210b8:	4604      	mov	r4, r0
   210ba:	2208      	movs	r2, #8
   210bc:	f100 005c 	add.w	r0, r0, #92	; 0x5c
   210c0:	f7ff fa3e 	bl	20540 <memset>
   210c4:	4b04      	ldr	r3, [pc, #16]	(210d8 <std+0x38>)
   210c6:	6224      	str	r4, [r4, #32]
   210c8:	6263      	str	r3, [r4, #36]
   210ca:	4b04      	ldr	r3, [pc, #16]	(210dc <std+0x3c>)
   210cc:	62a3      	str	r3, [r4, #40]
   210ce:	4b04      	ldr	r3, [pc, #16]	(210e0 <std+0x40>)
   210d0:	62e3      	str	r3, [r4, #44]
   210d2:	4b04      	ldr	r3, [pc, #16]	(210e4 <std+0x44>)
   210d4:	6323      	str	r3, [r4, #48]
   210d6:	bd10      	pop	{r4, pc}
   210d8:	00021625 	.word	0x00021625
   210dc:	000215e5 	.word	0x000215e5
   210e0:	000215b9 	.word	0x000215b9
   210e4:	000215a9 	.word	0x000215a9

000210e8 <__sfmoreglue>:
   210e8:	2368      	movs	r3, #104
   210ea:	b570      	push	{r4, r5, r6, lr}
   210ec:	fb03 f601 	mul.w	r6, r3, r1
   210f0:	460d      	mov	r5, r1
   210f2:	f106 010c 	add.w	r1, r6, #12	; 0xc
   210f6:	f7fe ff9f 	bl	20038 <_malloc_r>
   210fa:	4604      	mov	r4, r0
   210fc:	b148      	cbz	r0, 21112 <__sfmoreglue+0x2a>
   210fe:	f100 000c 	add.w	r0, r0, #12	; 0xc
   21102:	2300      	movs	r3, #0
   21104:	6023      	str	r3, [r4, #0]
   21106:	6065      	str	r5, [r4, #4]
   21108:	60a0      	str	r0, [r4, #8]
   2110a:	2100      	movs	r1, #0
   2110c:	4632      	mov	r2, r6
   2110e:	f7ff fa17 	bl	20540 <memset>
   21112:	4620      	mov	r0, r4
   21114:	bd70      	pop	{r4, r5, r6, pc}
   21116:	46c0      	nop			(mov r8, r8)

00021118 <__sfp>:
   21118:	4b1e      	ldr	r3, [pc, #120]	(21194 <__sfp+0x7c>)
   2111a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2111c:	681c      	ldr	r4, [r3, #0]
   2111e:	b081      	sub	sp, #4
   21120:	69a3      	ldr	r3, [r4, #24]
   21122:	4607      	mov	r7, r0
   21124:	b913      	cbnz	r3, 2112c <__sfp+0x14>
   21126:	4620      	mov	r0, r4
   21128:	f000 f836 	bl	21198 <__sinit>
   2112c:	f104 06d8 	add.w	r6, r4, #216	; 0xd8
   21130:	68b4      	ldr	r4, [r6, #8]
   21132:	6873      	ldr	r3, [r6, #4]
   21134:	e003      	b.n	2113e <__sfp+0x26>
   21136:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   2113a:	b18d      	cbz	r5, 21160 <__sfp+0x48>
   2113c:	3468      	adds	r4, #104
   2113e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   21142:	d5f8      	bpl.n	21136 <__sfp+0x1e>
   21144:	6833      	ldr	r3, [r6, #0]
   21146:	b92b      	cbnz	r3, 21154 <__sfp+0x3c>
   21148:	4638      	mov	r0, r7
   2114a:	2104      	movs	r1, #4
   2114c:	f7ff ffcc 	bl	210e8 <__sfmoreglue>
   21150:	6030      	str	r0, [r6, #0]
   21152:	b108      	cbz	r0, 21158 <__sfp+0x40>
   21154:	6836      	ldr	r6, [r6, #0]
   21156:	e7eb      	b.n	21130 <__sfp+0x18>
   21158:	230c      	movs	r3, #12
   2115a:	60fb      	str	r3, [r7, #12]
   2115c:	2400      	movs	r4, #0
   2115e:	e016      	b.n	2118e <__sfp+0x76>
   21160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21164:	81e3      	strh	r3, [r4, #14]
   21166:	f04f 0301 	mov.w	r3, #1	; 0x1
   2116a:	81a3      	strh	r3, [r4, #12]
   2116c:	6665      	str	r5, [r4, #100]
   2116e:	6025      	str	r5, [r4, #0]
   21170:	60a5      	str	r5, [r4, #8]
   21172:	6065      	str	r5, [r4, #4]
   21174:	6125      	str	r5, [r4, #16]
   21176:	6165      	str	r5, [r4, #20]
   21178:	61a5      	str	r5, [r4, #24]
   2117a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   2117e:	2100      	movs	r1, #0
   21180:	2208      	movs	r2, #8
   21182:	f7ff f9dd 	bl	20540 <memset>
   21186:	6365      	str	r5, [r4, #52]
   21188:	63a5      	str	r5, [r4, #56]
   2118a:	64a5      	str	r5, [r4, #72]
   2118c:	64e5      	str	r5, [r4, #76]
   2118e:	4620      	mov	r0, r4
   21190:	b001      	add	sp, #4
   21192:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21194:	00023220 	.word	0x00023220

00021198 <__sinit>:
   21198:	6982      	ldr	r2, [r0, #24]
   2119a:	b510      	push	{r4, lr}
   2119c:	4604      	mov	r4, r0
   2119e:	bb32      	cbnz	r2, 211ee <__sinit+0x56>
   211a0:	4b13      	ldr	r3, [pc, #76]	(211f0 <__sinit+0x58>)
   211a2:	f8c0 20d8 	str.w	r2, [r0, #216]
   211a6:	6283      	str	r3, [r0, #40]
   211a8:	2301      	movs	r3, #1
   211aa:	6183      	str	r3, [r0, #24]
   211ac:	f8c0 20dc 	str.w	r2, [r0, #220]
   211b0:	f8c0 20e0 	str.w	r2, [r0, #224]
   211b4:	f7ff ffb0 	bl	21118 <__sfp>
   211b8:	6020      	str	r0, [r4, #0]
   211ba:	4620      	mov	r0, r4
   211bc:	f7ff ffac 	bl	21118 <__sfp>
   211c0:	6060      	str	r0, [r4, #4]
   211c2:	4620      	mov	r0, r4
   211c4:	f7ff ffa8 	bl	21118 <__sfp>
   211c8:	2104      	movs	r1, #4
   211ca:	60a0      	str	r0, [r4, #8]
   211cc:	2200      	movs	r2, #0
   211ce:	6820      	ldr	r0, [r4, #0]
   211d0:	4623      	mov	r3, r4
   211d2:	f7ff ff65 	bl	210a0 <std>
   211d6:	6860      	ldr	r0, [r4, #4]
   211d8:	2109      	movs	r1, #9
   211da:	2201      	movs	r2, #1
   211dc:	4623      	mov	r3, r4
   211de:	f7ff ff5f 	bl	210a0 <std>
   211e2:	68a0      	ldr	r0, [r4, #8]
   211e4:	2112      	movs	r1, #18
   211e6:	2202      	movs	r2, #2
   211e8:	4623      	mov	r3, r4
   211ea:	f7ff ff59 	bl	210a0 <std>
   211ee:	bd10      	pop	{r4, pc}
   211f0:	00021071 	.word	0x00021071

000211f4 <_malloc_trim_r>:
   211f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   211f6:	4f28      	ldr	r7, [pc, #160]	(21298 <_malloc_trim_r+0xa4>)
   211f8:	b081      	sub	sp, #4
   211fa:	460c      	mov	r4, r1
   211fc:	4605      	mov	r5, r0
   211fe:	f7ff f9a7 	bl	20550 <__malloc_lock>
   21202:	68bb      	ldr	r3, [r7, #8]
   21204:	685b      	ldr	r3, [r3, #4]
   21206:	f023 0603 	bic.w	r6, r3, #3	; 0x3
   2120a:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
   2120e:	330f      	adds	r3, #15
   21210:	1b1b      	subs	r3, r3, r4
   21212:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
   21216:	f023 031f 	bic.w	r3, r3, #31	; 0x1f
   2121a:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   2121e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   21222:	db23      	blt.n	2126c <_malloc_trim_r+0x78>
   21224:	2100      	movs	r1, #0
   21226:	4628      	mov	r0, r5
   21228:	f7ff fc1e 	bl	20a68 <_sbrk_r>
   2122c:	68bb      	ldr	r3, [r7, #8]
   2122e:	199b      	adds	r3, r3, r6
   21230:	4298      	cmp	r0, r3
   21232:	d11b      	bne.n	2126c <_malloc_trim_r+0x78>
   21234:	f1c4 0100 	rsb	r1, r4, #0	; 0x0
   21238:	4628      	mov	r0, r5
   2123a:	f7ff fc15 	bl	20a68 <_sbrk_r>
   2123e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21242:	d118      	bne.n	21276 <_malloc_trim_r+0x82>
   21244:	2100      	movs	r1, #0
   21246:	4628      	mov	r0, r5
   21248:	f7ff fc0e 	bl	20a68 <_sbrk_r>
   2124c:	f8d7 c008 	ldr.w	ip, [r7, #8]
   21250:	ebcc 0100 	rsb	r1, ip, r0
   21254:	290f      	cmp	r1, #15
   21256:	dd09      	ble.n	2126c <_malloc_trim_r+0x78>
   21258:	4b10      	ldr	r3, [pc, #64]	(2129c <_malloc_trim_r+0xa8>)
   2125a:	4a11      	ldr	r2, [pc, #68]	(212a0 <_malloc_trim_r+0xac>)
   2125c:	681b      	ldr	r3, [r3, #0]
   2125e:	ebc3 0300 	rsb	r3, r3, r0
   21262:	6013      	str	r3, [r2, #0]
   21264:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   21268:	f8cc 3004 	str.w	r3, [ip, #4]
   2126c:	4628      	mov	r0, r5
   2126e:	f7ff f971 	bl	20554 <__malloc_unlock>
   21272:	2000      	movs	r0, #0
   21274:	e00d      	b.n	21292 <_malloc_trim_r+0x9e>
   21276:	68ba      	ldr	r2, [r7, #8]
   21278:	ebc4 0306 	rsb	r3, r4, r6
   2127c:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   21280:	6053      	str	r3, [r2, #4]
   21282:	4a07      	ldr	r2, [pc, #28]	(212a0 <_malloc_trim_r+0xac>)
   21284:	4628      	mov	r0, r5
   21286:	6813      	ldr	r3, [r2, #0]
   21288:	1b1b      	subs	r3, r3, r4
   2128a:	6013      	str	r3, [r2, #0]
   2128c:	f7ff f962 	bl	20554 <__malloc_unlock>
   21290:	2001      	movs	r0, #1
   21292:	b001      	add	sp, #4
   21294:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21296:	46c0      	nop			(mov r8, r8)
   21298:	20000138 	.word	0x20000138
   2129c:	20000544 	.word	0x20000544
   212a0:	20000ea0 	.word	0x20000ea0

000212a4 <_free_r>:
   212a4:	b570      	push	{r4, r5, r6, lr}
   212a6:	4606      	mov	r6, r0
   212a8:	460c      	mov	r4, r1
   212aa:	2900      	cmp	r1, #0
   212ac:	f000 80bd 	beq.w	2142a <_free_r+0x186>
   212b0:	f7ff f94e 	bl	20550 <__malloc_lock>
   212b4:	f1a4 0c08 	sub.w	ip, r4, #8	; 0x8
   212b8:	f8dc 3004 	ldr.w	r3, [ip, #4]
   212bc:	4d5b      	ldr	r5, [pc, #364]	(2142c <_free_r+0x188>)
   212be:	f023 0101 	bic.w	r1, r3, #1	; 0x1
   212c2:	eb0c 0001 	add.w	r0, ip, r1
   212c6:	6842      	ldr	r2, [r0, #4]
   212c8:	f003 0301 	and.w	r3, r3, #1	; 0x1
   212cc:	f022 0e03 	bic.w	lr, r2, #3	; 0x3
   212d0:	68aa      	ldr	r2, [r5, #8]
   212d2:	4290      	cmp	r0, r2
   212d4:	d11d      	bne.n	21312 <_free_r+0x6e>
   212d6:	4471      	add	r1, lr
   212d8:	b953      	cbnz	r3, 212f0 <_free_r+0x4c>
   212da:	f854 3c08 	ldr.w	r3, [r4, #-8]
   212de:	ebc3 0c0c 	rsb	ip, r3, ip
   212e2:	f8dc 200c 	ldr.w	r2, [ip, #12]
   212e6:	18c9      	adds	r1, r1, r3
   212e8:	f8dc 3008 	ldr.w	r3, [ip, #8]
   212ec:	60da      	str	r2, [r3, #12]
   212ee:	6093      	str	r3, [r2, #8]
   212f0:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   212f4:	f8cc 3004 	str.w	r3, [ip, #4]
   212f8:	4b4d      	ldr	r3, [pc, #308]	(21430 <_free_r+0x18c>)
   212fa:	f8c5 c008 	str.w	ip, [r5, #8]
   212fe:	681b      	ldr	r3, [r3, #0]
   21300:	4299      	cmp	r1, r3
   21302:	f0c0 808f 	bcc.w	21424 <_free_r+0x180>
   21306:	4b4b      	ldr	r3, [pc, #300]	(21434 <_free_r+0x190>)
   21308:	4630      	mov	r0, r6
   2130a:	6819      	ldr	r1, [r3, #0]
   2130c:	f7ff ff72 	bl	211f4 <_malloc_trim_r>
   21310:	e088      	b.n	21424 <_free_r+0x180>
   21312:	f8c0 e004 	str.w	lr, [r0, #4]
   21316:	b983      	cbnz	r3, 2133a <_free_r+0x96>
   21318:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2131c:	ebc3 0c0c 	rsb	ip, r3, ip
   21320:	f8dc 2008 	ldr.w	r2, [ip, #8]
   21324:	18c9      	adds	r1, r1, r3
   21326:	f105 0308 	add.w	r3, r5, #8	; 0x8
   2132a:	429a      	cmp	r2, r3
   2132c:	d101      	bne.n	21332 <_free_r+0x8e>
   2132e:	2401      	movs	r4, #1
   21330:	e004      	b.n	2133c <_free_r+0x98>
   21332:	f8dc 300c 	ldr.w	r3, [ip, #12]
   21336:	60d3      	str	r3, [r2, #12]
   21338:	609a      	str	r2, [r3, #8]
   2133a:	2400      	movs	r4, #0
   2133c:	eb00 030e 	add.w	r3, r0, lr
   21340:	685b      	ldr	r3, [r3, #4]
   21342:	f013 0f01 	tst.w	r3, #1	; 0x1
   21346:	d113      	bne.n	21370 <_free_r+0xcc>
   21348:	4471      	add	r1, lr
   2134a:	b96c      	cbnz	r4, 21368 <_free_r+0xc4>
   2134c:	6882      	ldr	r2, [r0, #8]
   2134e:	4b3a      	ldr	r3, [pc, #232]	(21438 <_free_r+0x194>)
   21350:	429a      	cmp	r2, r3
   21352:	d109      	bne.n	21368 <_free_r+0xc4>
   21354:	f8c2 c00c 	str.w	ip, [r2, #12]
   21358:	f8c2 c008 	str.w	ip, [r2, #8]
   2135c:	f8cc 200c 	str.w	r2, [ip, #12]
   21360:	f8cc 2008 	str.w	r2, [ip, #8]
   21364:	2401      	movs	r4, #1
   21366:	e003      	b.n	21370 <_free_r+0xcc>
   21368:	68c2      	ldr	r2, [r0, #12]
   2136a:	6883      	ldr	r3, [r0, #8]
   2136c:	60da      	str	r2, [r3, #12]
   2136e:	6093      	str	r3, [r2, #8]
   21370:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   21374:	f8cc 3004 	str.w	r3, [ip, #4]
   21378:	f84c 1001 	str.w	r1, [ip, r1]
   2137c:	2c00      	cmp	r4, #0
   2137e:	d151      	bne.n	21424 <_free_r+0x180>
   21380:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   21384:	d212      	bcs.n	213ac <_free_r+0x108>
   21386:	08c9      	lsrs	r1, r1, #3
   21388:	108b      	asrs	r3, r1, #2
   2138a:	2201      	movs	r2, #1
   2138c:	409a      	lsls	r2, r3
   2138e:	686b      	ldr	r3, [r5, #4]
   21390:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   21394:	4313      	orrs	r3, r2
   21396:	606b      	str	r3, [r5, #4]
   21398:	688b      	ldr	r3, [r1, #8]
   2139a:	f8cc 100c 	str.w	r1, [ip, #12]
   2139e:	f8cc 3008 	str.w	r3, [ip, #8]
   213a2:	f8c3 c00c 	str.w	ip, [r3, #12]
   213a6:	f8c1 c008 	str.w	ip, [r1, #8]
   213aa:	e03b      	b.n	21424 <_free_r+0x180>
   213ac:	0a4a      	lsrs	r2, r1, #9
   213ae:	2a04      	cmp	r2, #4
   213b0:	d802      	bhi.n	213b8 <_free_r+0x114>
   213b2:	098b      	lsrs	r3, r1, #6
   213b4:	3338      	adds	r3, #56
   213b6:	e017      	b.n	213e8 <_free_r+0x144>
   213b8:	2a14      	cmp	r2, #20
   213ba:	bf98      	it	ls
   213bc:	f102 035b 	addls.w	r3, r2, #91	; 0x5b
   213c0:	d912      	bls.n	213e8 <_free_r+0x144>
   213c2:	2a54      	cmp	r2, #84
   213c4:	d802      	bhi.n	213cc <_free_r+0x128>
   213c6:	0b0b      	lsrs	r3, r1, #12
   213c8:	336e      	adds	r3, #110
   213ca:	e00d      	b.n	213e8 <_free_r+0x144>
   213cc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   213d0:	d802      	bhi.n	213d8 <_free_r+0x134>
   213d2:	0bcb      	lsrs	r3, r1, #15
   213d4:	3377      	adds	r3, #119
   213d6:	e007      	b.n	213e8 <_free_r+0x144>
   213d8:	f240 5354 	movw	r3, #1364	; 0x554
   213dc:	429a      	cmp	r2, r3
   213de:	d901      	bls.n	213e4 <_free_r+0x140>
   213e0:	237e      	movs	r3, #126
   213e2:	e001      	b.n	213e8 <_free_r+0x144>
   213e4:	0c8b      	lsrs	r3, r1, #18
   213e6:	337c      	adds	r3, #124
   213e8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
   213ec:	6890      	ldr	r0, [r2, #8]
   213ee:	4290      	cmp	r0, r2
   213f0:	d10a      	bne.n	21408 <_free_r+0x164>
   213f2:	109b      	asrs	r3, r3, #2
   213f4:	2201      	movs	r2, #1
   213f6:	409a      	lsls	r2, r3
   213f8:	686b      	ldr	r3, [r5, #4]
   213fa:	4313      	orrs	r3, r2
   213fc:	606b      	str	r3, [r5, #4]
   213fe:	4603      	mov	r3, r0
   21400:	e008      	b.n	21414 <_free_r+0x170>
   21402:	6880      	ldr	r0, [r0, #8]
   21404:	4290      	cmp	r0, r2
   21406:	d004      	beq.n	21412 <_free_r+0x16e>
   21408:	6843      	ldr	r3, [r0, #4]
   2140a:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   2140e:	4299      	cmp	r1, r3
   21410:	d3f7      	bcc.n	21402 <_free_r+0x15e>
   21412:	68c3      	ldr	r3, [r0, #12]
   21414:	f8cc 300c 	str.w	r3, [ip, #12]
   21418:	f8cc 0008 	str.w	r0, [ip, #8]
   2141c:	f8c0 c00c 	str.w	ip, [r0, #12]
   21420:	f8c3 c008 	str.w	ip, [r3, #8]
   21424:	4630      	mov	r0, r6
   21426:	f7ff f895 	bl	20554 <__malloc_unlock>
   2142a:	bd70      	pop	{r4, r5, r6, pc}
   2142c:	20000138 	.word	0x20000138
   21430:	20000540 	.word	0x20000540
   21434:	20000e94 	.word	0x20000e94
   21438:	20000140 	.word	0x20000140

0002143c <_fwalk_reent>:
   2143c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2143e:	b083      	sub	sp, #12
   21440:	9001      	str	r0, [sp, #4]
   21442:	9100      	str	r1, [sp, #0]
   21444:	f7ff fdec 	bl	21020 <__sfp_lock_acquire>
   21448:	9b01      	ldr	r3, [sp, #4]
   2144a:	2700      	movs	r7, #0
   2144c:	f103 05d8 	add.w	r5, r3, #216	; 0xd8
   21450:	e014      	b.n	2147c <_fwalk_reent+0x40>
   21452:	68ac      	ldr	r4, [r5, #8]
   21454:	686e      	ldr	r6, [r5, #4]
   21456:	e00d      	b.n	21474 <_fwalk_reent+0x38>
   21458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2145c:	b14b      	cbz	r3, 21472 <_fwalk_reent+0x36>
   2145e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   21462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   21466:	d004      	beq.n	21472 <_fwalk_reent+0x36>
   21468:	9801      	ldr	r0, [sp, #4]
   2146a:	4621      	mov	r1, r4
   2146c:	9b00      	ldr	r3, [sp, #0]
   2146e:	4798      	blx	r3
   21470:	4307      	orrs	r7, r0
   21472:	3468      	adds	r4, #104
   21474:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   21478:	d5ee      	bpl.n	21458 <_fwalk_reent+0x1c>
   2147a:	682d      	ldr	r5, [r5, #0]
   2147c:	2d00      	cmp	r5, #0
   2147e:	d1e8      	bne.n	21452 <_fwalk_reent+0x16>
   21480:	f7ff fdd0 	bl	21024 <__sfp_lock_release>
   21484:	4638      	mov	r0, r7
   21486:	b003      	add	sp, #12
   21488:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2148a:	46c0      	nop			(mov r8, r8)

0002148c <_fwalk>:
   2148c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2148e:	4604      	mov	r4, r0
   21490:	b083      	sub	sp, #12
   21492:	9101      	str	r1, [sp, #4]
   21494:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
   21498:	f7ff fdc2 	bl	21020 <__sfp_lock_acquire>
   2149c:	2700      	movs	r7, #0
   2149e:	e013      	b.n	214c8 <_fwalk+0x3c>
   214a0:	68ac      	ldr	r4, [r5, #8]
   214a2:	686e      	ldr	r6, [r5, #4]
   214a4:	e00c      	b.n	214c0 <_fwalk+0x34>
   214a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   214aa:	b143      	cbz	r3, 214be <_fwalk+0x32>
   214ac:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   214b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   214b4:	d003      	beq.n	214be <_fwalk+0x32>
   214b6:	4620      	mov	r0, r4
   214b8:	9b01      	ldr	r3, [sp, #4]
   214ba:	4798      	blx	r3
   214bc:	4307      	orrs	r7, r0
   214be:	3468      	adds	r4, #104
   214c0:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   214c4:	d5ef      	bpl.n	214a6 <_fwalk+0x1a>
   214c6:	682d      	ldr	r5, [r5, #0]
   214c8:	2d00      	cmp	r5, #0
   214ca:	d1e9      	bne.n	214a0 <_fwalk+0x14>
   214cc:	f7ff fdaa 	bl	21024 <__sfp_lock_release>
   214d0:	4638      	mov	r0, r7
   214d2:	b003      	add	sp, #12
   214d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   214d6:	46c0      	nop			(mov r8, r8)

000214d8 <__smakebuf_r>:
   214d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   214da:	898b      	ldrh	r3, [r1, #12]
   214dc:	b091      	sub	sp, #68
   214de:	f013 0f02 	tst.w	r3, #2	; 0x2
   214e2:	4606      	mov	r6, r0
   214e4:	460c      	mov	r4, r1
   214e6:	d13d      	bne.n	21564 <__smakebuf_r+0x8c>
   214e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   214ec:	2900      	cmp	r1, #0
   214ee:	db04      	blt.n	214fa <__smakebuf_r+0x22>
   214f0:	aa01      	add	r2, sp, #4
   214f2:	f000 f923 	bl	2173c <_fstat_r>
   214f6:	2800      	cmp	r0, #0
   214f8:	da0b      	bge.n	21512 <__smakebuf_r+0x3a>
   214fa:	89a3      	ldrh	r3, [r4, #12]
   214fc:	f013 0f80 	tst.w	r3, #128	; 0x80
   21500:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   21504:	bf14      	ite	ne
   21506:	2540      	movne	r5, #64
   21508:	f44f 7580 	moveq.w	r5, #256	; 0x100
   2150c:	81a3      	strh	r3, [r4, #12]
   2150e:	2700      	movs	r7, #0
   21510:	e01c      	b.n	2154c <__smakebuf_r+0x74>
   21512:	9b02      	ldr	r3, [sp, #8]
   21514:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   21518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   2151c:	bf14      	ite	ne
   2151e:	2700      	movne	r7, #0
   21520:	2701      	moveq	r7, #1
   21522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21526:	d10b      	bne.n	21540 <__smakebuf_r+0x68>
   21528:	6ae2      	ldr	r2, [r4, #44]
   2152a:	4b1d      	ldr	r3, [pc, #116]	(215a0 <__smakebuf_r+0xc8>)
   2152c:	429a      	cmp	r2, r3
   2152e:	d107      	bne.n	21540 <__smakebuf_r+0x68>
   21530:	89a3      	ldrh	r3, [r4, #12]
   21532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   21536:	81a3      	strh	r3, [r4, #12]
   21538:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2153c:	6523      	str	r3, [r4, #80]
   2153e:	e003      	b.n	21548 <__smakebuf_r+0x70>
   21540:	89a3      	ldrh	r3, [r4, #12]
   21542:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   21546:	81a3      	strh	r3, [r4, #12]
   21548:	f44f 7580 	mov.w	r5, #256	; 0x100
   2154c:	4630      	mov	r0, r6
   2154e:	4629      	mov	r1, r5
   21550:	f7fe fd72 	bl	20038 <_malloc_r>
   21554:	b968      	cbnz	r0, 21572 <__smakebuf_r+0x9a>
   21556:	89a3      	ldrh	r3, [r4, #12]
   21558:	f413 7f00 	tst.w	r3, #512	; 0x200
   2155c:	d11d      	bne.n	2159a <__smakebuf_r+0xc2>
   2155e:	f043 0302 	orr.w	r3, r3, #2	; 0x2
   21562:	81a3      	strh	r3, [r4, #12]
   21564:	f104 0347 	add.w	r3, r4, #71	; 0x47
   21568:	6023      	str	r3, [r4, #0]
   2156a:	6123      	str	r3, [r4, #16]
   2156c:	2301      	movs	r3, #1
   2156e:	6163      	str	r3, [r4, #20]
   21570:	e013      	b.n	2159a <__smakebuf_r+0xc2>
   21572:	4b0c      	ldr	r3, [pc, #48]	(215a4 <__smakebuf_r+0xcc>)
   21574:	6020      	str	r0, [r4, #0]
   21576:	62b3      	str	r3, [r6, #40]
   21578:	89a3      	ldrh	r3, [r4, #12]
   2157a:	6120      	str	r0, [r4, #16]
   2157c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21580:	81a3      	strh	r3, [r4, #12]
   21582:	6165      	str	r5, [r4, #20]
   21584:	b14f      	cbz	r7, 2159a <__smakebuf_r+0xc2>
   21586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2158a:	4630      	mov	r0, r6
   2158c:	f000 f8ea 	bl	21764 <_isatty_r>
   21590:	b118      	cbz	r0, 2159a <__smakebuf_r+0xc2>
   21592:	89a3      	ldrh	r3, [r4, #12]
   21594:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   21598:	81a3      	strh	r3, [r4, #12]
   2159a:	b011      	add	sp, #68
   2159c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2159e:	46c0      	nop			(mov r8, r8)
   215a0:	000215b9 	.word	0x000215b9
   215a4:	00021071 	.word	0x00021071

000215a8 <__sclose>:
   215a8:	b500      	push	{lr}
   215aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   215ae:	b081      	sub	sp, #4
   215b0:	f000 f84c 	bl	2164c <_close_r>
   215b4:	b001      	add	sp, #4
   215b6:	bd00      	pop	{pc}

000215b8 <__sseek>:
   215b8:	b510      	push	{r4, lr}
   215ba:	460c      	mov	r4, r1
   215bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   215c0:	f000 f8e4 	bl	2178c <_lseek_r>
   215c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   215c8:	89a3      	ldrh	r3, [r4, #12]
   215ca:	d105      	bne.n	215d8 <__sseek+0x20>
   215cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   215d0:	041b      	lsls	r3, r3, #16
   215d2:	0c1b      	lsrs	r3, r3, #16
   215d4:	81a3      	strh	r3, [r4, #12]
   215d6:	e003      	b.n	215e0 <__sseek+0x28>
   215d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   215dc:	81a3      	strh	r3, [r4, #12]
   215de:	6560      	str	r0, [r4, #84]
   215e0:	bd10      	pop	{r4, pc}
   215e2:	46c0      	nop			(mov r8, r8)

000215e4 <__swrite>:
   215e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   215e6:	461f      	mov	r7, r3
   215e8:	898b      	ldrh	r3, [r1, #12]
   215ea:	b081      	sub	sp, #4
   215ec:	f413 7f80 	tst.w	r3, #256	; 0x100
   215f0:	4605      	mov	r5, r0
   215f2:	460c      	mov	r4, r1
   215f4:	4616      	mov	r6, r2
   215f6:	d005      	beq.n	21604 <__swrite+0x20>
   215f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   215fc:	2200      	movs	r2, #0
   215fe:	2302      	movs	r3, #2
   21600:	f000 f8c4 	bl	2178c <_lseek_r>
   21604:	89a3      	ldrh	r3, [r4, #12]
   21606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2160a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2160e:	041b      	lsls	r3, r3, #16
   21610:	0c1b      	lsrs	r3, r3, #16
   21612:	81a3      	strh	r3, [r4, #12]
   21614:	4628      	mov	r0, r5
   21616:	4632      	mov	r2, r6
   21618:	463b      	mov	r3, r7
   2161a:	f7ff fbc5 	bl	20da8 <_write_r>
   2161e:	b001      	add	sp, #4
   21620:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21622:	46c0      	nop			(mov r8, r8)

00021624 <__sread>:
   21624:	b510      	push	{r4, lr}
   21626:	460c      	mov	r4, r1
   21628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2162c:	f000 f8c4 	bl	217b8 <_read_r>
   21630:	2800      	cmp	r0, #0
   21632:	db03      	blt.n	2163c <__sread+0x18>
   21634:	6d63      	ldr	r3, [r4, #84]
   21636:	181b      	adds	r3, r3, r0
   21638:	6563      	str	r3, [r4, #84]
   2163a:	e005      	b.n	21648 <__sread+0x24>
   2163c:	89a3      	ldrh	r3, [r4, #12]
   2163e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   21642:	041b      	lsls	r3, r3, #16
   21644:	0c1b      	lsrs	r3, r3, #16
   21646:	81a3      	strh	r3, [r4, #12]
   21648:	bd10      	pop	{r4, pc}
   2164a:	46c0      	nop			(mov r8, r8)

0002164c <_close_r>:
   2164c:	b530      	push	{r4, r5, lr}
   2164e:	4c08      	ldr	r4, [pc, #32]	(21670 <_close_r+0x24>)
   21650:	2300      	movs	r3, #0
   21652:	b081      	sub	sp, #4
   21654:	4605      	mov	r5, r0
   21656:	4608      	mov	r0, r1
   21658:	6023      	str	r3, [r4, #0]
   2165a:	f7f5 fcbf 	bl	16fdc <_close>
   2165e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21662:	d102      	bne.n	2166a <_close_r+0x1e>
   21664:	6823      	ldr	r3, [r4, #0]
   21666:	b103      	cbz	r3, 2166a <_close_r+0x1e>
   21668:	60eb      	str	r3, [r5, #12]
   2166a:	b001      	add	sp, #4
   2166c:	bd30      	pop	{r4, r5, pc}
   2166e:	46c0      	nop			(mov r8, r8)
   21670:	20000678 	.word	0x20000678

00021674 <_fclose_r>:
   21674:	b570      	push	{r4, r5, r6, lr}
   21676:	4605      	mov	r5, r0
   21678:	460c      	mov	r4, r1
   2167a:	b1d1      	cbz	r1, 216b2 <_fclose_r+0x3e>
   2167c:	f7ff fcd0 	bl	21020 <__sfp_lock_acquire>
   21680:	b125      	cbz	r5, 2168c <_fclose_r+0x18>
   21682:	69ab      	ldr	r3, [r5, #24]
   21684:	b913      	cbnz	r3, 2168c <_fclose_r+0x18>
   21686:	4628      	mov	r0, r5
   21688:	f7ff fd86 	bl	21198 <__sinit>
   2168c:	4b22      	ldr	r3, [pc, #136]	(21718 <_fclose_r+0xa4>)
   2168e:	429c      	cmp	r4, r3
   21690:	bf08      	it	eq
   21692:	682c      	ldreq	r4, [r5, #0]
   21694:	d008      	beq.n	216a8 <_fclose_r+0x34>
   21696:	4b21      	ldr	r3, [pc, #132]	(2171c <_fclose_r+0xa8>)
   21698:	429c      	cmp	r4, r3
   2169a:	bf08      	it	eq
   2169c:	686c      	ldreq	r4, [r5, #4]
   2169e:	d003      	beq.n	216a8 <_fclose_r+0x34>
   216a0:	4b1f      	ldr	r3, [pc, #124]	(21720 <_fclose_r+0xac>)
   216a2:	429c      	cmp	r4, r3
   216a4:	bf08      	it	eq
   216a6:	68ac      	ldreq	r4, [r5, #8]
   216a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   216ac:	b91b      	cbnz	r3, 216b6 <_fclose_r+0x42>
   216ae:	f7ff fcb9 	bl	21024 <__sfp_lock_release>
   216b2:	2600      	movs	r6, #0
   216b4:	e02d      	b.n	21712 <_fclose_r+0x9e>
   216b6:	4628      	mov	r0, r5
   216b8:	4621      	mov	r1, r4
   216ba:	f7ff fbfd 	bl	20eb8 <_fflush_r>
   216be:	6b23      	ldr	r3, [r4, #48]
   216c0:	4606      	mov	r6, r0
   216c2:	b13b      	cbz	r3, 216d4 <_fclose_r+0x60>
   216c4:	6a21      	ldr	r1, [r4, #32]
   216c6:	4628      	mov	r0, r5
   216c8:	4798      	blx	r3
   216ca:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   216ce:	bf28      	it	cs
   216d0:	f04f 36ff 	movcs.w	r6, #4294967295	; 0xffffffff
   216d4:	89a3      	ldrh	r3, [r4, #12]
   216d6:	f013 0f80 	tst.w	r3, #128	; 0x80
   216da:	d003      	beq.n	216e4 <_fclose_r+0x70>
   216dc:	6921      	ldr	r1, [r4, #16]
   216de:	4628      	mov	r0, r5
   216e0:	f7ff fde0 	bl	212a4 <_free_r>
   216e4:	6b61      	ldr	r1, [r4, #52]
   216e6:	b141      	cbz	r1, 216fa <_fclose_r+0x86>
   216e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   216ec:	4299      	cmp	r1, r3
   216ee:	d002      	beq.n	216f6 <_fclose_r+0x82>
   216f0:	4628      	mov	r0, r5
   216f2:	f7ff fdd7 	bl	212a4 <_free_r>
   216f6:	2300      	movs	r3, #0
   216f8:	6363      	str	r3, [r4, #52]
   216fa:	6ca1      	ldr	r1, [r4, #72]
   216fc:	b121      	cbz	r1, 21708 <_fclose_r+0x94>
   216fe:	4628      	mov	r0, r5
   21700:	f7ff fdd0 	bl	212a4 <_free_r>
   21704:	2300      	movs	r3, #0
   21706:	64a3      	str	r3, [r4, #72]
   21708:	f04f 0300 	mov.w	r3, #0	; 0x0
   2170c:	81a3      	strh	r3, [r4, #12]
   2170e:	f7ff fc89 	bl	21024 <__sfp_lock_release>
   21712:	4630      	mov	r0, r6
   21714:	bd70      	pop	{r4, r5, r6, pc}
   21716:	46c0      	nop			(mov r8, r8)
   21718:	00023228 	.word	0x00023228
   2171c:	00023248 	.word	0x00023248
   21720:	00023268 	.word	0x00023268

00021724 <fclose>:
   21724:	b500      	push	{lr}
   21726:	4b04      	ldr	r3, [pc, #16]	(21738 <fclose+0x14>)
   21728:	4601      	mov	r1, r0
   2172a:	b081      	sub	sp, #4
   2172c:	6818      	ldr	r0, [r3, #0]
   2172e:	f7ff ffa1 	bl	21674 <_fclose_r>
   21732:	b001      	add	sp, #4
   21734:	bd00      	pop	{pc}
   21736:	46c0      	nop			(mov r8, r8)
   21738:	20000044 	.word	0x20000044

0002173c <_fstat_r>:
   2173c:	b530      	push	{r4, r5, lr}
   2173e:	4c08      	ldr	r4, [pc, #32]	(21760 <_fstat_r+0x24>)
   21740:	2300      	movs	r3, #0
   21742:	b081      	sub	sp, #4
   21744:	4605      	mov	r5, r0
   21746:	4608      	mov	r0, r1
   21748:	4611      	mov	r1, r2
   2174a:	6023      	str	r3, [r4, #0]
   2174c:	f7f5 fc74 	bl	17038 <_fstat>
   21750:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21754:	d102      	bne.n	2175c <_fstat_r+0x20>
   21756:	6823      	ldr	r3, [r4, #0]
   21758:	b103      	cbz	r3, 2175c <_fstat_r+0x20>
   2175a:	60eb      	str	r3, [r5, #12]
   2175c:	b001      	add	sp, #4
   2175e:	bd30      	pop	{r4, r5, pc}
   21760:	20000678 	.word	0x20000678

00021764 <_isatty_r>:
   21764:	b530      	push	{r4, r5, lr}
   21766:	4c08      	ldr	r4, [pc, #32]	(21788 <_isatty_r+0x24>)
   21768:	2300      	movs	r3, #0
   2176a:	b081      	sub	sp, #4
   2176c:	4605      	mov	r5, r0
   2176e:	4608      	mov	r0, r1
   21770:	6023      	str	r3, [r4, #0]
   21772:	f7f5 fc7b 	bl	1706c <_isatty>
   21776:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2177a:	d102      	bne.n	21782 <_isatty_r+0x1e>
   2177c:	6823      	ldr	r3, [r4, #0]
   2177e:	b103      	cbz	r3, 21782 <_isatty_r+0x1e>
   21780:	60eb      	str	r3, [r5, #12]
   21782:	b001      	add	sp, #4
   21784:	bd30      	pop	{r4, r5, pc}
   21786:	46c0      	nop			(mov r8, r8)
   21788:	20000678 	.word	0x20000678

0002178c <_lseek_r>:
   2178c:	b530      	push	{r4, r5, lr}
   2178e:	4c09      	ldr	r4, [pc, #36]	(217b4 <_lseek_r+0x28>)
   21790:	4605      	mov	r5, r0
   21792:	2000      	movs	r0, #0
   21794:	6020      	str	r0, [r4, #0]
   21796:	b081      	sub	sp, #4
   21798:	4608      	mov	r0, r1
   2179a:	4611      	mov	r1, r2
   2179c:	461a      	mov	r2, r3
   2179e:	f7f5 fc99 	bl	170d4 <_lseek>
   217a2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   217a6:	d102      	bne.n	217ae <_lseek_r+0x22>
   217a8:	6823      	ldr	r3, [r4, #0]
   217aa:	b103      	cbz	r3, 217ae <_lseek_r+0x22>
   217ac:	60eb      	str	r3, [r5, #12]
   217ae:	b001      	add	sp, #4
   217b0:	bd30      	pop	{r4, r5, pc}
   217b2:	46c0      	nop			(mov r8, r8)
   217b4:	20000678 	.word	0x20000678

000217b8 <_read_r>:
   217b8:	b530      	push	{r4, r5, lr}
   217ba:	4c09      	ldr	r4, [pc, #36]	(217e0 <_read_r+0x28>)
   217bc:	4605      	mov	r5, r0
   217be:	2000      	movs	r0, #0
   217c0:	6020      	str	r0, [r4, #0]
   217c2:	b081      	sub	sp, #4
   217c4:	4608      	mov	r0, r1
   217c6:	4611      	mov	r1, r2
   217c8:	461a      	mov	r2, r3
   217ca:	f7f5 fc9f 	bl	1710c <_read>
   217ce:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   217d2:	d102      	bne.n	217da <_read_r+0x22>
   217d4:	6823      	ldr	r3, [r4, #0]
   217d6:	b103      	cbz	r3, 217da <_read_r+0x22>
   217d8:	60eb      	str	r3, [r5, #12]
   217da:	b001      	add	sp, #4
   217dc:	bd30      	pop	{r4, r5, pc}
   217de:	46c0      	nop			(mov r8, r8)
   217e0:	20000678 	.word	0x20000678
   217e4:	00000000 	.word	0x00000000

000217e8 <_ZTV6Sensor>:
	...
   217f0:	00005955 00005925 0001cbf1 00000000     UY..%Y..........

00021800 <_ZTV7Sensors>:
	...
   21808:	000063cd 00006175                       .c..ua..

00021810 <_ZZN7SensorsC1EvE4C.23>:
   21810:	0b0d0e09 0c0f0405 00000a08 00000000     ................

00021820 <_ZN14Asservissement21nb_ms_between_updatesE>:
   21820:	00000005 00000000                       ........

00021828 <_ZTV7Command>:
	...
   21830:	00007d59 00007d29 0001cbf1 000079ad     Y}..)}.......y..
   21840:	0001cbf1 0001cbf1 000079e1 00000000     .........y......

00021850 <_ZTV24CommandTestTournerGauche>:
	...
   21858:	0001c715 0001c6dd 00008075 000079ad     ........u....y..
   21868:	00008089 000080a5 000079e1 00000000     .........y......

00021878 <_ZTV18CommandTestAvancer>:
	...
   21880:	0001c6a5 0001c66d 00008029 000079ad     ....m...)....y..
   21890:	0000803d 00008059 000079e1 00000000     =...Y....y......

000218a0 <_ZTV15CommandAttendre>:
	...
   218a8:	0001c635 0001c5fd 00007fad 000079ad     5............y..
   218b8:	00007fcd 00007fe9 00008005 00000000     ................

000218c8 <_ZTV13CommandVirage>:
	...
   218d0:	0001c5c5 0001c58d 000081c1 000079ad     .............y..
   218e0:	00007f65 00007f7d 00007f95 00000000     e...}...........

000218f0 <_ZTV18CommandTournerVers>:
	...
   218f8:	0001c555 0001c51d 000085a9 000079ad     U............y..
   21908:	00007f19 00007f35 00007f4d 00000000     ....5...M.......

00021918 <_ZTV13CommandAllerA>:
	...
   21920:	0001c4e5 0001c4ad 00008f01 00008575     ............u...
   21930:	00007ecd 00007ee5 00007efd 00000000     .~...~...~......

00021940 <_ZTV18CommandAllerEnArcA>:
	...
   21948:	0001c475 0001c43d 00009679 000079ad     u...=...y....y..
   21958:	00007e81 00007e99 00007eb1 00000000     .~...~...~......

00021968 <_ZN14PIDFilterAngle2KpE>:
   21968:	42960000                                ...B

0002196c <_ZN14PIDFilterAngle2KdE>:
   2196c:	3f000000                                ...?

00021970 <_ZN14PIDFilterAngle2KiE>:
   21970:	3f333333                                333?

00021974 <_ZN17PIDFilterDistance2KpE>:
   21974:	3e4ccccd                                ..L>

00021978 <_ZN17PIDFilterDistance2KdE>:
   21978:	3f333333                                333?

0002197c <_ZN17PIDFilterDistance2KiE>:
   2197c:	3ba3d70a                                ...;

00021980 <_ZTV12AnalogSensor>:
	...
   21988:	0000a7ed 0000a7b5 0001cbf1 00000000     ................

00021998 <_ZTV19CommandCheckCouleur>:
	...
   219a0:	0001c7f5 0001c7bd 0000b355 000079ad     ........U....y..
   219b0:	0000ae3d 0000ae59 0000ae75 00000000     =...Y...u.......

000219c0 <_ZTV29CommandCalibrerCapteurCouleur>:
	...
   219c8:	0001c785 0001c74d 0000b0dd 000079ad     ....M........y..
   219d8:	0000adc9 0000ade5 0000ae01 00000000     ................

000219e8 <_ZZN8CapteursC1EvE4C.21>:
   219e8:	0d0c0b0a 0000000f                       ........

000219f0 <_ZTV18LigthBarrierSensor>:
	...
   219f8:	0000bf35 0000befd 0000be31 00000000     5.......1.......

00021a08 <_ZTV17LimitSwitchSensor>:
	...
   21a10:	0000c161 0000c129 0000c085 00000000     a...)...........
   21a20:	a7c36552 61202c75 746e6176 756f7420     Re..u, avant tou
   21a30:	63206574 616d6d6f 6e61646e 00212074     te commandant !.
   21a40:	3a746f47 00000000                       Got:....

00021a48 <_ZTV11SharpSensor>:
	...
   21a50:	0000ce59 0000ce21 0000cce1 00000000     Y...!...........
   21a60:	74696157 20676e69 20726f66 72697427     Waiting for 'tir
   21a70:	65747465 6d657220 27657369 00000000     ette remise'....
   21a80:	74696157 20676e69 20726f66 72697427     Waiting for 'tir
   21a90:	65747465 6c6e6520 27657665 00000000     ette enleve'....

00021aa0 <_ZTV16UltrasoundSensor>:
	...
   21aa8:	0000d639 0000d601 0000d599 00000000     9...............
   21ab8:	74696e49 00000000                       Init....

00021ac0 <_ZTV10ActionGoTo>:
	...
   21ac8:	0000eed9 0000eea1 0000ed51 0001499d     ........Q....I..
   21ad8:	0000ed19 0000ed35                       ....5...

00021ae0 <_ZTV4Clap>:
	...
   21ae8:	0000f2a9 0000f271 0000f021 0001499d     ....q...!....I..
   21af8:	000149b5 000149ed                       .I...I..

00021b00 <_ZTV7Gobelet>:
	...
   21b08:	000104d1 00010499 00010391 0001499d     .............I..
   21b18:	000149b5 000149ed                       .I...I..

00021b20 <_ZTV9Krabi2015>:
	...
   21b28:	0001c939 0001c865 000165cd 0001499d     9...e....e...I..
   21b38:	00016375 000149ed 00010739 00010669     uc...I..9...i...

00021b48 <_ZTV17MediumLevelAction>:
	...
   21b50:	00014a4d 00014a1d 0001cbf1 0001499d     MJ...J.......I..
   21b60:	000149b5 000149ed                       .I...I..

00021b68 <_ZTV19RecalibrerOdometrie>:
	...
   21b70:	000153ad 00015375 00014b4d 0001499d     .S..uS..MK...I..
   21b80:	000149b5 000149ed                       .I...I..

00021b88 <_ZTV11StrategieV2>:
	...
   21b90:	00016105 000160d5                       .a...`..

00021b98 <_ZTV11StrategieV3>:
	...
   21ba0:	0001cbb9 0001cb81 000165cd 0001499d     .........e...I..
   21bb0:	00016375 000149ed 0001cbf1 0001cbf1     uc...I..........

00021bc0 <_ZTV5Tapis>:
	...
   21bc8:	00016da1 00016d69 00016bf9 0001499d     .m..im...k...I..
   21bd8:	000149b5 000149ed 70616548 646e6120     .I...I..Heap and
   21be8:	61747320 63206b63 696c6c6f 6e6f6973      stack collision
   21bf8:	0000000a                                ....

00021bfc <cplus_demangle_builtin_types>:
   21bfc:	00022b4c 0000000b 00022b4c 0000000b     L+......L+......
   21c0c:	00000000 00022b58 00000004 00022b60     ....X+......`+..
   21c1c:	00000007 00000007 00022b68 00000004     ........h+......
   21c2c:	00022b70 00000004 00000000 00022b78     p+..........x+..
   21c3c:	00000006 00022b78 00000006 00000008     ....x+..........
   21c4c:	00022b80 0000000b 00022b80 0000000b     .+.......+......
   21c5c:	00000008 00022b8c 00000005 00022b8c     .....+.......+..
   21c6c:	00000005 00000008 00022b94 0000000a     .........+......
   21c7c:	00022b94 0000000a 00000008 00022ba0     .+...........+..
   21c8c:	0000000d 00022ba0 0000000d 00000000     .....+..........
   21c9c:	00022bb0 00000003 00022bb0 00000003     .+.......+......
   21cac:	00000001 00022bb4 0000000c 00022bc4     .....+.......+..
   21cbc:	00000008 00000002 00000000 00000000     ................
	...
   21cd8:	00022bd0 00000004 00022bd0 00000004     .+.......+......
   21ce8:	00000003 00022bd8 0000000d 00022bd8     .....+.......+..
   21cf8:	0000000d 00000004 00022be8 00000008     .........+......
   21d08:	00022be8 00000008 00000000 00022bf4     .+...........+..
   21d18:	00000011 00022bf4 00000011 00000000     .....+..........
	...
   21d64:	00022c08 00000005 00022c08 00000005     .,.......,......
   21d74:	00000000 00022c10 0000000e 00022c10     .....,.......,..
   21d84:	0000000e 00000000 00000000 00000000     ................
	...
   21da0:	00022c20 00000004 00022c20 00000004      ,...... ,......
   21db0:	00000009 00022c28 00000007 00022b68     ....(,......h+..
   21dc0:	00000004 00000000 00022c30 00000009     ........0,......
   21dd0:	00022bd0 00000004 00000005 00022c3c     .+..........<,..
   21de0:	00000012 00022c3c 00000012 00000006     ....<,..........
   21df0:	00022c50 00000003 00022c50 00000003     P,......P,......
   21e00:	00000000                                ....

00021e04 <cplus_demangle_operators>:
   21e04:	00022c54 00022c58 00000002 00000002     T,..X,..........
   21e14:	00022c5c 00022c60 00000001 00000002     \,..`,..........
   21e24:	00022c64 00022af0 00000002 00000002     d,...*..........
   21e34:	00022c68 00022c6c 00000001 00000001     h,..l,..........
   21e44:	00022c70 00022c6c 00000001 00000002     p,..l,..........
   21e54:	00022c74 00022c78 00000002 00000000     t,..x,..........
   21e64:	00022c7c 00022c80 00000001 00000002     |,...,..........
   21e74:	00022c84 00022c88 00000001 00000001     .,...,..........
   21e84:	00022c8c 00022c90 00000002 00000002     .,...,..........
   21e94:	00022c94 00022c98 00000008 00000001     .,...,..........
   21ea4:	00022ca4 00022ca8 00000001 00000001     .,...,..........
   21eb4:	00022cac 00022cb0 00000006 00000001     .,...,..........
   21ec4:	00022cb8 00022cbc 00000001 00000002     .,...,..........
   21ed4:	00022cc0 00022cc4 00000002 00000002     .,...,..........
   21ee4:	00022cc8 00022ccc 00000001 00000002     .,...,..........
   21ef4:	00022cd0 00022cd4 00000002 00000002     .,...,..........
   21f04:	00022cd8 00022cdc 00000002 00000002     .,...,..........
   21f14:	00022ce0 00022e94 00000001 00000002     .,..............
   21f24:	00022ce4 00022974 00000002 00000002     .,..t)..........
   21f34:	00022ce8 00022cec 00000003 00000002     .,...,..........
   21f44:	00022b7c 00022cf0 00000002 00000002     |+...,..........
   21f54:	00022cf4 00022cf8 00000002 00000002     .,...,..........
   21f64:	00022cfc 00022d00 00000001 00000002     .,...-..........
   21f74:	00022d04 00022d08 00000002 00000002     .-...-..........
   21f84:	00022d0c 00022d10 00000002 00000002     .-...-..........
   21f94:	00022d14 00022d18 00000001 00000002     .-...-..........
   21fa4:	00022d1c 00022ca8 00000001 00000002     .-...,..........
   21fb4:	00022d20 00022d24 00000002 00000001      -..$-..........
   21fc4:	00022d28 00022d2c 00000005 00000001     (-..,-..........
   21fd4:	00022d34 00022d38 00000002 00000002     4-..8-..........
   21fe4:	00022c4c 00022d18 00000001 00000001     L,...-..........
   21ff4:	00022d3c 00022d40 00000001 00000001     <-..@-..........
   22004:	00022d44 00022d48 00000003 00000001     D-..H-..........
   22014:	00022d4c 00022d50 00000002 00000002     L-..P-..........
   22024:	00022d54 00022d58 00000002 00000002     T-..X-..........
   22034:	00022dcc 00022d5c 00000001 00000002     .-..\-..........
   22044:	00022d60 00022d64 00000002 00000002     `-..d-..........
   22054:	00022d68 00022d6c 00000001 00000002     h-..l-..........
   22064:	00022d70 00022d74 00000003 00000002     p-..t-..........
   22074:	00022d78 00022d7c 00000002 00000001     x-..|-..........
   22084:	00022d80 00022d6c 00000001 00000001     .-..l-..........
   22094:	00022d84 00022d88 00000002 00000002     .-...-..........
   220a4:	00022d8c 00022d90 00000001 00000003     .-...-..........
   220b4:	00022d94 00022d98 00000002 00000002     .-...-..........
   220c4:	00022d9c 00022da0 00000003 00000002     .-...-..........
   220d4:	00022da4 00022da8 00000001 00000002     .-...-..........
   220e4:	00022dac 00022db0 00000002 00000002     .-...-..........
   220f4:	00022aec 00022db4 00000007 00000001     .*...-..........
   22104:	00022dbc 00022db4 00000007 00000001     .-...-..........
	...

00022124 <standard_subs>:
   22124:	00000074 00022964 00000003 00022964     t...d)......d)..
   22134:	00000003 00000000 00000000 00000061     ............a...
   22144:	00022dc0 0000000e 00022dc0 0000000e     .-.......-......
   22154:	00022dd0 00000009 00000062 00022ddc     .-......b....-..
   22164:	00000011 00022ddc 00000011 00022df0     .....-.......-..
   22174:	0000000c 00000073 00022e00 0000000b     ....s...........
   22184:	00022e0c 00000046 00022df0 0000000c     ....F....-......
   22194:	00000069 00022e54 0000000c 00022e64     i...T.......d...
   221a4:	00000031 00022e98 0000000d 0000006f     1...........o...
   221b4:	00022ea8 0000000c 00022eb8 00000031     ............1...
   221c4:	00022eec 0000000d 00000064 00022efc     ........d.......
   221d4:	0000000d 00022f0c 00000032 00022f40     ...../..2...@/..
   221e4:	0000000e                                ....

000221e8 <_ZTV6vectorIN6Sensor12OutputSensorEE>:
	...
   221f0:	0001c2fd 0001c2bd                       ........

000221f8 <_ZTV6vectorIN17LimitSwitchSensor15LimitSwitchNameEE>:
	...
   22200:	0001c37d 0001c33d                       }...=...

00022208 <_ZTV6vectorIN18LigthBarrierSensor16LigthBarrierNameEE>:
	...
   22210:	0001c3fd 0001c3bd 65727570 72697620     ........pure vir
   22220:	6c617574 74656d20 20646f68 6c6c6163     tual method call
   22230:	000a6465 3a647473 6461623a 7079745f     ed..std::bad_typ
   22240:	00646965 00000000                       eid.....

00022248 <_ZTVSt10bad_typeid>:
   22248:	00000000 00022270 0001d751 0001d779     ....p"..Q...y...
   22258:	0001d749 00000000                       I.......

00022260 <_ZTSSt10bad_typeid>:
   22260:	30317453 5f646162 65707974 00006469     St10bad_typeid..

00022270 <_ZTISt10bad_typeid>:
   22270:	00022358 00022260 0002288c 6d726574     X#..`"...(..term
   22280:	74616e69 61632065 64656c6c 63657220     inate called rec
   22290:	69737275 796c6576 0000000a 6d726574     ursively....term
   222a0:	74616e69 61632065 64656c6c 74666120     inate called aft
   222b0:	74207265 776f7268 20676e69 69206e61     er throwing an i
   222c0:	6174736e 2065636e 2720666f 00000000     nstance of '....
   222d0:	00000a27 68772020 29287461 0020203a     '...  what():  .
   222e0:	6d726574 74616e69 61632065 64656c6c     terminate called
   222f0:	74697720 74756f68 206e6120 69746361      without an acti
   22300:	65206576 70656378 6e6f6974 0000000a     ve exception....
   22310:	3a647473 6461623a 7361635f 00000074     std::bad_cast...

00022320 <_ZTVSt8bad_cast>:
   22320:	00000000 00022344 0001db4d 0001db75     ....D#..M...u...
   22330:	0001db45 00000000                       E.......

00022338 <_ZTSSt8bad_cast>:
   22338:	62387453 635f6461 00747361              St8bad_cast.

00022344 <_ZTISt8bad_cast>:
   22344:	00022358 00022338 0002288c              X#..8#...(..

00022350 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   22350:	00000000 000223a8 0001dc85 0001dcad     .....#..........
   22360:	0001df09 0001df0d 0001de71 0001ddcd     ........q.......
   22370:	0001db91 0001dbb9 0001dc4d 00000000     ........M.......

00022380 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   22380:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   22390:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   223a0:	456f666e 00000000                       nfoE....

000223a8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   223a8:	00022358 00022380 000228ec 00000000     X#...#...(......

000223b8 <_ZTVN10__cxxabiv123__fundamental_type_infoE>:
   223b8:	00000000 000226a8 0001dcc9 0001dcf1     .....&..........
   223c8:	0001df09 0001df0d 0001df11 0001df21     ............!...

000223d8 <_ZTIPKe>:
   223d8:	00022f58 000226b4 00000001 000223f8     X/...&.......#..

000223e8 <_ZTIPe>:
   223e8:	00022f58 000226b8 00000000 000223f8     X/...&.......#..

000223f8 <_ZTIe>:
   223f8:	000223c0 000226bc                       .#...&..

00022400 <_ZTIPKd>:
   22400:	00022f58 000226c0 00000001 00022420     X/...&...... $..

00022410 <_ZTIPd>:
   22410:	00022f58 000226c4 00000000 00022420     X/...&...... $..

00022420 <_ZTId>:
   22420:	000223c0 000226c8                       .#...&..

00022428 <_ZTIPKf>:
   22428:	00022f58 000226cc 00000001 00022448     X/...&......H$..

00022438 <_ZTIPf>:
   22438:	00022f58 000226d0 00000000 00022448     X/...&......H$..

00022448 <_ZTIf>:
   22448:	000223c0 000226d4                       .#...&..

00022450 <_ZTIPKy>:
   22450:	00022f58 000226d8 00000001 00022470     X/...&......p$..

00022460 <_ZTIPy>:
   22460:	00022f58 000226dc 00000000 00022470     X/...&......p$..

00022470 <_ZTIy>:
   22470:	000223c0 000226e0                       .#...&..

00022478 <_ZTIPKx>:
   22478:	00022f58 000226e4 00000001 00022498     X/...&.......$..

00022488 <_ZTIPx>:
   22488:	00022f58 000226e8 00000000 00022498     X/...&.......$..

00022498 <_ZTIx>:
   22498:	000223c0 000226ec                       .#...&..

000224a0 <_ZTIPKm>:
   224a0:	00022f58 000226f0 00000001 000224c0     X/...&.......$..

000224b0 <_ZTIPm>:
   224b0:	00022f58 000226f4 00000000 000224c0     X/...&.......$..

000224c0 <_ZTIm>:
   224c0:	000223c0 000226f8                       .#...&..

000224c8 <_ZTIPKl>:
   224c8:	00022f58 000226fc 00000001 000224e8     X/...&.......$..

000224d8 <_ZTIPl>:
   224d8:	00022f58 00022700 00000000 000224e8     X/...'.......$..

000224e8 <_ZTIl>:
   224e8:	000223c0 00022704                       .#...'..

000224f0 <_ZTIPKj>:
   224f0:	00022f58 00022708 00000001 00022510     X/...'.......%..

00022500 <_ZTIPj>:
   22500:	00022f58 0002270c 00000000 00022510     X/...'.......%..

00022510 <_ZTIj>:
   22510:	000223c0 00022710                       .#...'..

00022518 <_ZTIPKi>:
   22518:	00022f58 00022714 00000001 00022538     X/...'......8%..

00022528 <_ZTIPi>:
   22528:	00022f58 00022718 00000000 00022538     X/...'......8%..

00022538 <_ZTIi>:
   22538:	000223c0 0002271c                       .#...'..

00022540 <_ZTIPKt>:
   22540:	00022f58 00022720 00000001 00022560     X/.. '......`%..

00022550 <_ZTIPt>:
   22550:	00022f58 00022724 00000000 00022560     X/..$'......`%..

00022560 <_ZTIt>:
   22560:	000223c0 00022728                       .#..('..

00022568 <_ZTIPKs>:
   22568:	00022f58 0002272c 00000001 00022588     X/..,'.......%..

00022578 <_ZTIPs>:
   22578:	00022f58 00022730 00000000 00022588     X/..0'.......%..

00022588 <_ZTIs>:
   22588:	000223c0 00022734                       .#..4'..

00022590 <_ZTIPKh>:
   22590:	00022f58 00022738 00000001 000225b0     X/..8'.......%..

000225a0 <_ZTIPh>:
   225a0:	00022f58 0002273c 00000000 000225b0     X/..<'.......%..

000225b0 <_ZTIh>:
   225b0:	000223c0 00022740                       .#..@'..

000225b8 <_ZTIPKa>:
   225b8:	00022f58 00022744 00000001 000225d8     X/..D'.......%..

000225c8 <_ZTIPa>:
   225c8:	00022f58 00022748 00000000 000225d8     X/..H'.......%..

000225d8 <_ZTIa>:
   225d8:	000223c0 0002274c                       .#..L'..

000225e0 <_ZTIPKc>:
   225e0:	00022f58 00022750 00000001 00022600     X/..P'.......&..

000225f0 <_ZTIPc>:
   225f0:	00022f58 00022754 00000000 00022600     X/..T'.......&..

00022600 <_ZTIc>:
   22600:	000223c0 00022758                       .#..X'..

00022608 <_ZTIPKw>:
   22608:	00022f58 0002275c 00000001 00022628     X/..\'......(&..

00022618 <_ZTIPw>:
   22618:	00022f58 00022760 00000000 00022628     X/..`'......(&..

00022628 <_ZTIw>:
   22628:	000223c0 00022764                       .#..d'..

00022630 <_ZTIPKb>:
   22630:	00022f58 00022768 00000001 00022650     X/..h'......P&..

00022640 <_ZTIPb>:
   22640:	00022f58 0002276c 00000000 00022650     X/..l'......P&..

00022650 <_ZTIb>:
   22650:	000223c0 00022770                       .#..p'..

00022658 <_ZTIPKv>:
   22658:	00022f58 00022774 00000001 00022678     X/..t'......x&..

00022668 <_ZTIPv>:
   22668:	00022f58 00022778 00000000 00022678     X/..x'......x&..

00022678 <_ZTIv>:
   22678:	000223c0 0002277c                       .#..|'..

00022680 <_ZTSN10__cxxabiv123__fundamental_type_infoE>:
   22680:	5f30314e 7878635f 76696261 5f333231     N10__cxxabiv123_
   22690:	6e75665f 656d6164 6c61746e 7079745f     _fundamental_typ
   226a0:	6e695f65 00456f66                       e_infoE.

000226a8 <_ZTIN10__cxxabiv123__fundamental_type_infoE>:
   226a8:	00022358 00022680 00022928              X#...&..()..

000226b4 <_ZTSPKe>:
   226b4:	00654b50                                PKe.

000226b8 <_ZTSPe>:
   226b8:	00006550                                Pe..

000226bc <_ZTSe>:
   226bc:	00000065                                e...

000226c0 <_ZTSPKd>:
   226c0:	00644b50                                PKd.

000226c4 <_ZTSPd>:
   226c4:	00006450                                Pd..

000226c8 <_ZTSd>:
   226c8:	00000064                                d...

000226cc <_ZTSPKf>:
   226cc:	00664b50                                PKf.

000226d0 <_ZTSPf>:
   226d0:	00006650                                Pf..

000226d4 <_ZTSf>:
   226d4:	00000066                                f...

000226d8 <_ZTSPKy>:
   226d8:	00794b50                                PKy.

000226dc <_ZTSPy>:
   226dc:	00007950                                Py..

000226e0 <_ZTSy>:
   226e0:	00000079                                y...

000226e4 <_ZTSPKx>:
   226e4:	00784b50                                PKx.

000226e8 <_ZTSPx>:
   226e8:	00007850                                Px..

000226ec <_ZTSx>:
   226ec:	00000078                                x...

000226f0 <_ZTSPKm>:
   226f0:	006d4b50                                PKm.

000226f4 <_ZTSPm>:
   226f4:	00006d50                                Pm..

000226f8 <_ZTSm>:
   226f8:	0000006d                                m...

000226fc <_ZTSPKl>:
   226fc:	006c4b50                                PKl.

00022700 <_ZTSPl>:
   22700:	00006c50                                Pl..

00022704 <_ZTSl>:
   22704:	0000006c                                l...

00022708 <_ZTSPKj>:
   22708:	006a4b50                                PKj.

0002270c <_ZTSPj>:
   2270c:	00006a50                                Pj..

00022710 <_ZTSj>:
   22710:	0000006a                                j...

00022714 <_ZTSPKi>:
   22714:	00694b50                                PKi.

00022718 <_ZTSPi>:
   22718:	00006950                                Pi..

0002271c <_ZTSi>:
   2271c:	00000069                                i...

00022720 <_ZTSPKt>:
   22720:	00744b50                                PKt.

00022724 <_ZTSPt>:
   22724:	00007450                                Pt..

00022728 <_ZTSt>:
   22728:	00000074                                t...

0002272c <_ZTSPKs>:
   2272c:	00734b50                                PKs.

00022730 <_ZTSPs>:
   22730:	00007350                                Ps..

00022734 <_ZTSs>:
   22734:	00000073                                s...

00022738 <_ZTSPKh>:
   22738:	00684b50                                PKh.

0002273c <_ZTSPh>:
   2273c:	00006850                                Ph..

00022740 <_ZTSh>:
   22740:	00000068                                h...

00022744 <_ZTSPKa>:
   22744:	00614b50                                PKa.

00022748 <_ZTSPa>:
   22748:	00006150                                Pa..

0002274c <_ZTSa>:
   2274c:	00000061                                a...

00022750 <_ZTSPKc>:
   22750:	00634b50                                PKc.

00022754 <_ZTSPc>:
   22754:	00006350                                Pc..

00022758 <_ZTSc>:
   22758:	00000063                                c...

0002275c <_ZTSPKw>:
   2275c:	00774b50                                PKw.

00022760 <_ZTSPw>:
   22760:	00007750                                Pw..

00022764 <_ZTSw>:
   22764:	00000077                                w...

00022768 <_ZTSPKb>:
   22768:	00624b50                                PKb.

0002276c <_ZTSPb>:
   2276c:	00006250                                Pb..

00022770 <_ZTSb>:
   22770:	00000062                                b...

00022774 <_ZTSPKv>:
   22774:	00764b50                                PKv.

00022778 <_ZTSPv>:
   22778:	00007650                                Pv..

0002277c <_ZTSv>:
   2277c:	00000076 3a647473 6378653a 69747065     v...std::excepti
   2278c:	00006e6f 3a647473 6461623a 6378655f     on..std::bad_exc
   2279c:	69747065 00006e6f 00000000              eption......

000227a8 <_ZTVN10__cxxabiv119__foreign_exceptionE>:
   227a8:	00000000 0002282c 0001dd61 0001dd7d     ....,(..a...}...
   227b8:	0001cbf1 00000000                       ........

000227c0 <_ZTVN10__cxxabiv115__forced_unwindE>:
   227c0:	00000000 00022854 0001dd49 0001dd91     ....T(..I.......
   227d0:	0001cbf1 00000000                       ........

000227d8 <_ZTVSt13bad_exception>:
   227d8:	00000000 00022870 0001dd31 0001ddb9     ....p(..1.......
   227e8:	0001dd75 00000000                       u.......

000227f0 <_ZTVSt9exception>:
   227f0:	00000000 0002288c 0001dd19 0001dda5     .....(..........
   22800:	0001dd6d 00000000                       m.......

00022808 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   22808:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   22818:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   22828:	00456e6f                                onE.

0002282c <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   2282c:	000228a0 00022808                       .(...(..

00022834 <_ZTSN10__cxxabiv115__forced_unwindE>:
   22834:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   22844:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

00022854 <_ZTIN10__cxxabiv115__forced_unwindE>:
   22854:	000228a0 00022834                       .(..4(..

0002285c <_ZTSSt13bad_exception>:
   2285c:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   2286c:	0000006e                                n...

00022870 <_ZTISt13bad_exception>:
   22870:	00022358 0002285c 0002288c              X#..\(...(..

0002287c <_ZTSSt9exception>:
   2287c:	65397453 70656378 6e6f6974 00000000     St9exception....

0002288c <_ZTISt9exception>:
   2288c:	000228a0 0002287c 00000000              .(..|(......

00022898 <_ZTVN10__cxxabiv117__class_type_infoE>:
   22898:	00000000 000228ec 0001de9d 0001dec5     .....(..........
   228a8:	0001df09 0001df0d 0001de71 0001ddcd     ........q.......
   228b8:	0001de11 0001de31 0001de05 00000000     ....1...........

000228c8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   228c8:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   228d8:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   228e8:	00000045                                E...

000228ec <_ZTIN10__cxxabiv117__class_type_infoE>:
   228ec:	00022358 000228c8 00022928              X#...(..()..

000228f8 <_ZTVSt9type_info>:
   228f8:	00000000 00022928 0001deed 0001df25     ....()......%...
   22908:	0001df09 0001df0d 0001df11 0001df21     ............!...

00022918 <_ZTSSt9type_info>:
   22918:	74397453 5f657079 6f666e69 00000000     St9type_info....

00022928 <_ZTISt9type_info>:
   22928:	000228a0 00022918 4f4c475f 5f4c4142     .(...).._GLOBAL_
   22938:	00000000 6f6e6128 6f6d796e 6e207375     ....(anonymous n
   22948:	73656d61 65636170 00000029 69727473     amespace)...stri
   22958:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   22968:	00003a3a 7272414a 00007961 00005d5b     ::..JArray..[]..
   22978:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   22988:	20726f66 00000000 736e6f63 63757274     for ....construc
   22998:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   229a8:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   229b8:	6f666e69 726f6620 00000020 65707974     info for ...type
   229c8:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   229d8:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   229e8:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   229f8:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   22a08:	6e616972 65722074 6e727574 75687420     riant return thu
   22a18:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   22a28:	66207373 0020726f 72617567 61762064     ss for .guard va
   22a38:	62616972 6620656c 0020726f 65666572     riable for .refe
   22a48:	636e6572 65742065 726f706d 20797261     rence temporary 
   22a58:	20726f66 00000000 64646968 61206e65     for ....hidden a
   22a68:	7361696c 726f6620 00000020 002a3a3a     lias for ...::*.
   22a78:	0000202c 7265706f 726f7461 00000000     , ..operator....
   22a88:	7265706f 726f7461 00000020 00002029     operator ...) ..
   22a98:	00002820 203a2029 00000028 00006c75      (..) : (...ul..
   22aa8:	00006c6c 006c6c75 736c6166 00000065     ll..ull.false...
   22ab8:	65757274 00000000 6176616a 73657220     true....java res
   22ac8:	6372756f 00002065 73657220 63697274     ource .. restric
   22ad8:	00000074 6c6f7620 6c697461 00000065     t... volatile...
   22ae8:	6e6f6320 00007473 00002626 706d6f63      const..&&..comp
   22af8:	2078656c 00000000 67616d69 72616e69     lex ....imaginar
   22b08:	00002079 626f6c67 64206c61 72747365     y ..global destr
   22b18:	6f746375 6b207372 64657965 206f7420     uctors keyed to 
   22b28:	00000000 626f6c67 63206c61 74736e6f     ....global const
   22b38:	74637572 2073726f 6579656b 6f742064     ructors keyed to
   22b48:	00000020 6e676973 63206465 00726168      ...signed char.
   22b58:	6c6f6f62 00000000 6c6f6f62 006e6165     bool....boolean.
   22b68:	72616863 00000000 65747962 00000000     char....byte....
   22b78:	62756f64 0000656c 676e6f6c 756f6420     double..long dou
   22b88:	00656c62 616f6c66 00000074 6c665f5f     ble.float...__fl
   22b98:	3174616f 00003832 69736e75 64656e67     oat128..unsigned
   22ba8:	61686320 00000072 00746e69 69736e75      char...int.unsi
   22bb8:	64656e67 746e6920 00000000 69736e75     gned int....unsi
   22bc8:	64656e67 00000000 676e6f6c 00000000     gned....long....
   22bd8:	69736e75 64656e67 6e6f6c20 00000067     unsigned long...
   22be8:	6e695f5f 38323174 00000000 69736e75     __int128....unsi
   22bf8:	64656e67 695f5f20 3231746e 00000038     gned __int128...
   22c08:	726f6873 00000074 69736e75 64656e67     short...unsigned
   22c18:	6f687320 00007472 64696f76 00000000      short..void....
   22c28:	61686377 00745f72 676e6f6c 6e6f6c20     wchar_t.long lon
   22c38:	00000067 69736e75 64656e67 6e6f6c20     g...unsigned lon
   22c48:	6f6c2067 0000676e 002e2e2e 00004e61     g long......aN..
   22c58:	00003d26 00005361 0000003d 00006161     &=..aS..=...aa..
   22c68:	00006461 00000026 00006e61 00006c63     ad..&...an..cl..
   22c78:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   22c88:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
   22c98:	656c6564 5d5b6574 00000000 00006564     delete[]....de..
   22ca8:	0000002a 00006c64 656c6564 00006574     *...dl..delete..
   22cb8:	00007664 0000002f 00004f65 00003d5e     dv../...eO..^=..
   22cc8:	00006f65 0000005e 00007165 00003d3d     eo..^...eq..==..
   22cd8:	00006567 00003d3e 00007467 00007869     ge..>=..gt..ix..
   22ce8:	0000536c 003d3c3c 00003d3c 0000736c     lS..<<=.<=..ls..
   22cf8:	00003c3c 0000746c 0000003c 0000496d     <<..lt..<...mI..
   22d08:	00003d2d 00004c6d 00003d2a 0000696d     -=..mL..*=..mi..
   22d18:	0000002d 00006c6d 00006d6d 00002d2d     -...ml..mm..--..
   22d28:	0000616e 5b77656e 0000005d 0000656e     na..new[]...ne..
   22d38:	00003d21 0000746e 00000021 0000776e     !=..nt..!...nw..
   22d48:	0077656e 0000526f 00003d7c 00006f6f     new.oR..|=..oo..
   22d58:	00007c7c 0000007c 00004c70 00003d2b     ||..|...pL..+=..
   22d68:	00006c70 0000002b 00006d70 002a3e2d     pl..+...pm..->*.
   22d78:	00007070 00002b2b 00007370 00007470     pp..++..ps..pt..
   22d88:	00003e2d 00007571 0000003f 00004d72     ->..qu..?...rM..
   22d98:	00003d25 00005372 003d3e3e 00006d72     %=..rS..>>=.rm..
   22da8:	00000025 00007372 00003e3e 657a6973     %...rs..>>..size
   22db8:	0020666f 00007a73 3a647473 6c6c613a     of .sz..std::all
   22dc8:	7461636f 0000726f 6f6c6c61 6f746163     ocator..allocato
   22dd8:	00000072 3a647473 7361623a 735f6369     r...std::basic_s
   22de8:	6e697274 00000067 69736162 74735f63     tring...basic_st
   22df8:	676e6972 00000000 3a647473 7274733a     ring....std::str
   22e08:	00676e69 3a647473 7361623a 735f6369     ing.std::basic_s
   22e18:	6e697274 68633c67 202c7261 3a647473     tring<char, std:
   22e28:	6168633a 72745f72 73746961 6168633c     :char_traits<cha
   22e38:	202c3e72 3a647473 6c6c613a 7461636f     r>, std::allocat
   22e48:	633c726f 3e726168 00003e20 3a647473     or<char> >..std:
   22e58:	7473693a 6d616572 00000000 3a647473     :istream....std:
   22e68:	7361623a 695f6369 65727473 633c6d61     :basic_istream<c
   22e78:	2c726168 64747320 68633a3a 745f7261     har, std::char_t
   22e88:	74696172 68633c73 203e7261 0000003e     raits<char> >...
   22e98:	69736162 73695f63 61657274 0000006d     basic_istream...
   22ea8:	3a647473 74736f3a 6d616572 00000000     std::ostream....
   22eb8:	3a647473 7361623a 6f5f6369 65727473     std::basic_ostre
   22ec8:	633c6d61 2c726168 64747320 68633a3a     am<char, std::ch
   22ed8:	745f7261 74696172 68633c73 203e7261     ar_traits<char> 
   22ee8:	0000003e 69736162 736f5f63 61657274     >...basic_ostrea
   22ef8:	0000006d 3a647473 736f693a 61657274     m...std::iostrea
   22f08:	0000006d 3a647473 7361623a 695f6369     m...std::basic_i
   22f18:	7274736f 3c6d6165 72616863 7473202c     ostream<char, st
   22f28:	633a3a64 5f726168 69617274 633c7374     d::char_traits<c
   22f38:	3e726168 00003e20 69736162 6f695f63     har> >..basic_io
   22f48:	65727473 00006d61                       stream..

00022f50 <_ZTVN10__cxxabiv119__pointer_type_infoE>:
   22f50:	00000000 00022f9c 0001e169 0001e191     ...../..i.......
   22f60:	0001e121 0001df0d 0001e1c1 0001df21     !...........!...
   22f70:	0001e125 00000000                       %.......

00022f78 <_ZTSN10__cxxabiv119__pointer_type_infoE>:
   22f78:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   22f88:	696f705f 7265746e 7079745f 6e695f65     _pointer_type_in
   22f98:	00456f66                                foE.

00022f9c <_ZTIN10__cxxabiv119__pointer_type_infoE>:
   22f9c:	00022358 00022f78 00022ff4              X#..x/.../..

00022fa8 <_ZTVN10__cxxabiv117__pbase_type_infoE>:
   22fa8:	00000000 00022ff4 0001e221 0001e249     ...../..!...I...
   22fb8:	0001df09 0001df0d 0001e1c1 0001df21     ............!...
   22fc8:	0001e1ad 00000000                       ........

00022fd0 <_ZTSN10__cxxabiv117__pbase_type_infoE>:
   22fd0:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   22fe0:	6162705f 745f6573 5f657079 6f666e69     _pbase_type_info
   22ff0:	00000045                                E...

00022ff4 <_ZTIN10__cxxabiv117__pbase_type_infoE>:
   22ff4:	00022358 00022fd0 00022928 74727173     X#.../..()..sqrt
   23004:	00000000                                ....

00023008 <npio2_hw>:
   23008:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
   23018:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
   23028:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
   23038:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
   23048:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
   23058:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
   23068:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
   23078:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00023088 <two_over_pi>:
   23088:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
   23098:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
   230a8:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
   230b8:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
   230c8:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
   230d8:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
   230e8:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
   230f8:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
   23108:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
   23118:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
   23128:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
   23138:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
   23148:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
   23158:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
   23168:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
   23178:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
   23188:	0060e27b 00c08c6b                       {.`.k...

00023190 <init_jk>:
   23190:	00000002 00000003 00000004 00000006     ................

000231a0 <PIo2>:
   231a0:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
   231b0:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
   231c0:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
   231d0:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

000231e0 <atanhi>:
   231e0:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   231f0:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00023200 <atanlo>:
   23200:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   23210:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00023220 <_global_impure_ptr>:
   23220:	20000048 00000043                       H.. C...

00023228 <__sf_fake_stdin>:
	...

00023248 <__sf_fake_stdout>:
	...

00023268 <__sf_fake_stderr>:
	...
