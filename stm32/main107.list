
main107.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 00 01 20 01 e3 01 00 41 e3 01 00 41 e3 01 00     ... ....A...A...
      10:	41 e3 01 00 41 e3 01 00 41 e3 01 00 00 00 00 00     A...A...A.......
	...
      2c:	41 e3 01 00 41 e3 01 00 00 00 00 00 41 e3 01 00     A...A.......A...
      3c:	d9 7c 00 00 41 e3 01 00 41 e3 01 00 41 e3 01 00     .|..A...A...A...
      4c:	41 e3 01 00 41 e3 01 00 41 e3 01 00 41 e3 01 00     A...A...A...A...
      5c:	41 e3 01 00 41 e3 01 00 a5 da 00 00 41 e3 01 00     A...A.......A...
      6c:	41 e3 01 00 41 e3 01 00 41 e3 01 00 41 e3 01 00     A...A...A...A...
      7c:	41 e3 01 00 41 e3 01 00 41 e3 01 00 41 e3 01 00     A...A...A...A...
      8c:	41 e3 01 00 41 e3 01 00 41 e3 01 00 41 e3 01 00     A...A...A...A...
      9c:	41 e3 01 00 41 e3 01 00 41 e3 01 00 41 e3 01 00     A...A...A...A...
      ac:	41 e3 01 00 41 e3 01 00 41 e3 01 00 41 e3 01 00     A...A...A...A...
      bc:	41 e3 01 00 41 e3 01 00 41 e3 01 00 41 e3 01 00     A...A...A...A...
      cc:	41 e3 01 00 41 e3 01 00 41 e3 01 00 41 e3 01 00     A...A...A...A...
      dc:	41 e3 01 00 41 e3 01 00 41 e3 01 00 41 e3 01 00     A...A...A...A...
	...
     108:	41 e3 01 00 41 e3 01 00 41 e3 01 00 41 e3 01 00     A...A...A...A...
     118:	41 e3 01 00 41 e3 01 00 41 e3 01 00 41 e3 01 00     A...A...A...A...
     128:	41 e3 01 00 41 e3 01 00 41 e3 01 00 41 e3 01 00     A...A...A...A...
     138:	41 e3 01 00 41 e3 01 00 41 e3 01 00 41 e3 01 00     A...A...A...A...
     148:	41 e3 01 00 41 e3 01 00 00 00 00 00 00 00 00 00     A...A...........
	...
     1e0:	5f f8 e0 f1 a8 5d 02 00 00 00 00 20 34 00 00 20     _....]..... 4.. 
     1f0:	48 05 00 20 7c 06 00 20                             H.. |.. 

000001f8 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
     1f8:	b480      	push	{r7}
     1fa:	b083      	sub	sp, #12
     1fc:	af00      	add	r7, sp, #0
     1fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
     200:	4a05      	ldr	r2, [pc, #20]	(218 <NVIC_PriorityGroupConfig+0x20>)
     202:	687b      	ldr	r3, [r7, #4]
     204:	f043 63be 	orr.w	r3, r3, #99614720	; 0x5f00000
     208:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
     20c:	60d3      	str	r3, [r2, #12]
}
     20e:	f107 070c 	add.w	r7, r7, #12	; 0xc
     212:	46bd      	mov	sp, r7
     214:	bc80      	pop	{r7}
     216:	4770      	bx	lr
     218:	e000ed00 	.word	0xe000ed00

0000021c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *   the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
     21c:	b480      	push	{r7}
     21e:	b087      	sub	sp, #28
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
     224:	f04f 0300 	mov.w	r3, #0	; 0x0
     228:	60fb      	str	r3, [r7, #12]
     22a:	f04f 0300 	mov.w	r3, #0	; 0x0
     22e:	613b      	str	r3, [r7, #16]
     230:	f04f 030f 	mov.w	r3, #15	; 0xf
     234:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
     236:	687b      	ldr	r3, [r7, #4]
     238:	78db      	ldrb	r3, [r3, #3]
     23a:	2b00      	cmp	r3, #0
     23c:	d041      	beq.n	2c2 <NVIC_Init+0xa6>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
     23e:	4b2d      	ldr	r3, [pc, #180]	(2f4 <NVIC_Init+0xd8>)
     240:	68db      	ldr	r3, [r3, #12]
     242:	ea6f 0303 	mvn.w	r3, r3
     246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     24a:	ea4f 2313 	mov.w	r3, r3, lsr #8
     24e:	60fb      	str	r3, [r7, #12]
    tmppre = (0x4 - tmppriority);
     250:	68fb      	ldr	r3, [r7, #12]
     252:	f1c3 0304 	rsb	r3, r3, #4	; 0x4
     256:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
     258:	68fa      	ldr	r2, [r7, #12]
     25a:	697b      	ldr	r3, [r7, #20]
     25c:	fa23 f302 	lsr.w	r3, r3, r2
     260:	617b      	str	r3, [r7, #20]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
     262:	687b      	ldr	r3, [r7, #4]
     264:	785b      	ldrb	r3, [r3, #1]
     266:	461a      	mov	r2, r3
     268:	693b      	ldr	r3, [r7, #16]
     26a:	fa02 f303 	lsl.w	r3, r2, r3
     26e:	60fb      	str	r3, [r7, #12]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
     270:	687b      	ldr	r3, [r7, #4]
     272:	789b      	ldrb	r3, [r3, #2]
     274:	461a      	mov	r2, r3
     276:	697b      	ldr	r3, [r7, #20]
     278:	ea02 0203 	and.w	r2, r2, r3
     27c:	68fb      	ldr	r3, [r7, #12]
     27e:	ea43 0302 	orr.w	r3, r3, r2
     282:	60fb      	str	r3, [r7, #12]
    tmppriority = tmppriority << 0x04;
     284:	68fb      	ldr	r3, [r7, #12]
     286:	ea4f 1303 	mov.w	r3, r3, lsl #4
     28a:	60fb      	str	r3, [r7, #12]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
     28c:	491a      	ldr	r1, [pc, #104]	(2f8 <NVIC_Init+0xdc>)
     28e:	687b      	ldr	r3, [r7, #4]
     290:	781b      	ldrb	r3, [r3, #0]
     292:	461a      	mov	r2, r3
     294:	68fb      	ldr	r3, [r7, #12]
     296:	b2db      	uxtb	r3, r3
     298:	440a      	add	r2, r1
     29a:	f882 3300 	strb.w	r3, [r2, #768]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
     29e:	4816      	ldr	r0, [pc, #88]	(2f8 <NVIC_Init+0xdc>)
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	781b      	ldrb	r3, [r3, #0]
     2a4:	ea4f 1353 	mov.w	r3, r3, lsr #5
     2a8:	b2db      	uxtb	r3, r3
     2aa:	4619      	mov	r1, r3
     2ac:	687b      	ldr	r3, [r7, #4]
     2ae:	781b      	ldrb	r3, [r3, #0]
     2b0:	f003 021f 	and.w	r2, r3, #31	; 0x1f
     2b4:	f04f 0301 	mov.w	r3, #1	; 0x1
     2b8:	fa03 f302 	lsl.w	r3, r3, r2
     2bc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
     2c0:	e012      	b.n	2e8 <NVIC_Init+0xcc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
     2c2:	480d      	ldr	r0, [pc, #52]	(2f8 <NVIC_Init+0xdc>)
     2c4:	687b      	ldr	r3, [r7, #4]
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	ea4f 1353 	mov.w	r3, r3, lsr #5
     2cc:	b2db      	uxtb	r3, r3
     2ce:	4619      	mov	r1, r3
     2d0:	687b      	ldr	r3, [r7, #4]
     2d2:	781b      	ldrb	r3, [r3, #0]
     2d4:	f003 021f 	and.w	r2, r3, #31	; 0x1f
     2d8:	f04f 0301 	mov.w	r3, #1	; 0x1
     2dc:	fa03 f202 	lsl.w	r2, r3, r2
     2e0:	f101 0320 	add.w	r3, r1, #32	; 0x20
     2e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
     2e8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
     2ec:	46bd      	mov	sp, r7
     2ee:	bc80      	pop	{r7}
     2f0:	4770      	bx	lr
     2f2:	46c0      	nop			(mov r8, r8)
     2f4:	e000ed00 	.word	0xe000ed00
     2f8:	e000e100 	.word	0xe000e100

000002fc <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x100.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
     2fc:	b480      	push	{r7}
     2fe:	b083      	sub	sp, #12
     300:	af00      	add	r7, sp, #0
     302:	6078      	str	r0, [r7, #4]
     304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
     306:	4907      	ldr	r1, [pc, #28]	(324 <NVIC_SetVectorTable+0x28>)
     308:	683b      	ldr	r3, [r7, #0]
     30a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
     30e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     312:	687a      	ldr	r2, [r7, #4]
     314:	ea43 0302 	orr.w	r3, r3, r2
     318:	608b      	str	r3, [r1, #8]
}
     31a:	f107 070c 	add.w	r7, r7, #12	; 0xc
     31e:	46bd      	mov	sp, r7
     320:	bc80      	pop	{r7}
     322:	4770      	bx	lr
     324:	e000ed00 	.word	0xe000ed00

00000328 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
     328:	b480      	push	{r7}
     32a:	b083      	sub	sp, #12
     32c:	af00      	add	r7, sp, #0
     32e:	4603      	mov	r3, r0
     330:	460a      	mov	r2, r1
     332:	71fb      	strb	r3, [r7, #7]
     334:	4613      	mov	r3, r2
     336:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
     338:	79bb      	ldrb	r3, [r7, #6]
     33a:	2b00      	cmp	r3, #0
     33c:	d007      	beq.n	34e <NVIC_SystemLPConfig+0x26>
  {
    SCB->SCR |= LowPowerMode;
     33e:	490b      	ldr	r1, [pc, #44]	(36c <NVIC_SystemLPConfig+0x44>)
     340:	4b0a      	ldr	r3, [pc, #40]	(36c <NVIC_SystemLPConfig+0x44>)
     342:	691a      	ldr	r2, [r3, #16]
     344:	79fb      	ldrb	r3, [r7, #7]
     346:	ea42 0303 	orr.w	r3, r2, r3
     34a:	610b      	str	r3, [r1, #16]
     34c:	e008      	b.n	360 <NVIC_SystemLPConfig+0x38>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
     34e:	4907      	ldr	r1, [pc, #28]	(36c <NVIC_SystemLPConfig+0x44>)
     350:	4b06      	ldr	r3, [pc, #24]	(36c <NVIC_SystemLPConfig+0x44>)
     352:	691a      	ldr	r2, [r3, #16]
     354:	79fb      	ldrb	r3, [r7, #7]
     356:	ea6f 0303 	mvn.w	r3, r3
     35a:	ea02 0303 	and.w	r3, r2, r3
     35e:	610b      	str	r3, [r1, #16]
  }
}
     360:	f107 070c 	add.w	r7, r7, #12	; 0xc
     364:	46bd      	mov	sp, r7
     366:	bc80      	pop	{r7}
     368:	4770      	bx	lr
     36a:	46c0      	nop			(mov r8, r8)
     36c:	e000ed00 	.word	0xe000ed00

00000370 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
     370:	b480      	push	{r7}
     372:	b083      	sub	sp, #12
     374:	af00      	add	r7, sp, #0
     376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
     378:	687b      	ldr	r3, [r7, #4]
     37a:	2b04      	cmp	r3, #4
     37c:	d106      	bne.n	38c <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
     37e:	4a09      	ldr	r2, [pc, #36]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     380:	4b08      	ldr	r3, [pc, #32]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     382:	681b      	ldr	r3, [r3, #0]
     384:	f043 0304 	orr.w	r3, r3, #4	; 0x4
     388:	6013      	str	r3, [r2, #0]
     38a:	e005      	b.n	398 <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
     38c:	4a05      	ldr	r2, [pc, #20]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     38e:	4b05      	ldr	r3, [pc, #20]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     390:	681b      	ldr	r3, [r3, #0]
     392:	f023 0304 	bic.w	r3, r3, #4	; 0x4
     396:	6013      	str	r3, [r2, #0]
  }
}
     398:	f107 070c 	add.w	r7, r7, #12	; 0xc
     39c:	46bd      	mov	sp, r7
     39e:	bc80      	pop	{r7}
     3a0:	4770      	bx	lr
     3a2:	46c0      	nop			(mov r8, r8)
     3a4:	e000e010 	.word	0xe000e010

000003a8 <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
     3b0:	687a      	ldr	r2, [r7, #4]
     3b2:	4b1a      	ldr	r3, [pc, #104]	(41c <ADC_DeInit+0x74>)
     3b4:	429a      	cmp	r2, r3
     3b6:	d10c      	bne.n	3d2 <ADC_DeInit+0x2a>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
     3b8:	f44f 7000 	mov.w	r0, #512	; 0x200
     3bc:	f04f 0101 	mov.w	r1, #1	; 0x1
     3c0:	f002 f8a8 	bl	2514 <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
     3c4:	f44f 7000 	mov.w	r0, #512	; 0x200
     3c8:	f04f 0100 	mov.w	r1, #0	; 0x0
     3cc:	f002 f8a2 	bl	2514 <RCC_APB2PeriphResetCmd>
     3d0:	e020      	b.n	414 <ADC_DeInit+0x6c>
  }
  else if (ADCx == ADC2)
     3d2:	687a      	ldr	r2, [r7, #4]
     3d4:	4b12      	ldr	r3, [pc, #72]	(420 <ADC_DeInit+0x78>)
     3d6:	429a      	cmp	r2, r3
     3d8:	d10c      	bne.n	3f4 <ADC_DeInit+0x4c>
  {
    /* Enable ADC2 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
     3da:	f44f 6080 	mov.w	r0, #1024	; 0x400
     3de:	f04f 0101 	mov.w	r1, #1	; 0x1
     3e2:	f002 f897 	bl	2514 <RCC_APB2PeriphResetCmd>
    /* Release ADC2 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
     3e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
     3ea:	f04f 0100 	mov.w	r1, #0	; 0x0
     3ee:	f002 f891 	bl	2514 <RCC_APB2PeriphResetCmd>
     3f2:	e00f      	b.n	414 <ADC_DeInit+0x6c>
  }
  else
  {
    if (ADCx == ADC3)
     3f4:	687a      	ldr	r2, [r7, #4]
     3f6:	4b0b      	ldr	r3, [pc, #44]	(424 <ADC_DeInit+0x7c>)
     3f8:	429a      	cmp	r2, r3
     3fa:	d10b      	bne.n	414 <ADC_DeInit+0x6c>
    {
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
     3fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     400:	f04f 0101 	mov.w	r1, #1	; 0x1
     404:	f002 f886 	bl	2514 <RCC_APB2PeriphResetCmd>
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
     408:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     40c:	f04f 0100 	mov.w	r1, #0	; 0x0
     410:	f002 f880 	bl	2514 <RCC_APB2PeriphResetCmd>
    }
  }
}
     414:	f107 0708 	add.w	r7, r7, #8	; 0x8
     418:	46bd      	mov	sp, r7
     41a:	bd80      	pop	{r7, pc}
     41c:	40012400 	.word	0x40012400
     420:	40012800 	.word	0x40012800
     424:	40013c00 	.word	0x40013c00

00000428 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *   the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
     428:	b480      	push	{r7}
     42a:	b085      	sub	sp, #20
     42c:	af00      	add	r7, sp, #0
     42e:	6078      	str	r0, [r7, #4]
     430:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
     432:	f04f 0300 	mov.w	r3, #0	; 0x0
     436:	60bb      	str	r3, [r7, #8]
  uint8_t tmpreg2 = 0;
     438:	f04f 0300 	mov.w	r3, #0	; 0x0
     43c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
     43e:	687b      	ldr	r3, [r7, #4]
     440:	685b      	ldr	r3, [r3, #4]
     442:	60bb      	str	r3, [r7, #8]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
     444:	68bb      	ldr	r3, [r7, #8]
     446:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
     44a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     44e:	60bb      	str	r3, [r7, #8]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
     450:	683b      	ldr	r3, [r7, #0]
     452:	681a      	ldr	r2, [r3, #0]
     454:	683b      	ldr	r3, [r7, #0]
     456:	791b      	ldrb	r3, [r3, #4]
     458:	ea4f 2303 	mov.w	r3, r3, lsl #8
     45c:	ea42 0203 	orr.w	r2, r2, r3
     460:	68bb      	ldr	r3, [r7, #8]
     462:	ea43 0302 	orr.w	r3, r3, r2
     466:	60bb      	str	r3, [r7, #8]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
     468:	687a      	ldr	r2, [r7, #4]
     46a:	68bb      	ldr	r3, [r7, #8]
     46c:	6053      	str	r3, [r2, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
     46e:	687b      	ldr	r3, [r7, #4]
     470:	689b      	ldr	r3, [r3, #8]
     472:	60bb      	str	r3, [r7, #8]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
     474:	68ba      	ldr	r2, [r7, #8]
     476:	4b1b      	ldr	r3, [pc, #108]	(4e4 <ADC_Init+0xbc>)
     478:	ea02 0303 	and.w	r3, r2, r3
     47c:	60bb      	str	r3, [r7, #8]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
     47e:	683b      	ldr	r3, [r7, #0]
     480:	68da      	ldr	r2, [r3, #12]
     482:	683b      	ldr	r3, [r7, #0]
     484:	689b      	ldr	r3, [r3, #8]
     486:	ea42 0203 	orr.w	r2, r2, r3
     48a:	683b      	ldr	r3, [r7, #0]
     48c:	795b      	ldrb	r3, [r3, #5]
     48e:	ea4f 0343 	mov.w	r3, r3, lsl #1
     492:	ea42 0203 	orr.w	r2, r2, r3
     496:	68bb      	ldr	r3, [r7, #8]
     498:	ea43 0302 	orr.w	r3, r3, r2
     49c:	60bb      	str	r3, [r7, #8]
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
     49e:	687a      	ldr	r2, [r7, #4]
     4a0:	68bb      	ldr	r3, [r7, #8]
     4a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	6adb      	ldr	r3, [r3, #44]
     4a8:	60bb      	str	r3, [r7, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
     4aa:	68bb      	ldr	r3, [r7, #8]
     4ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
     4b0:	60bb      	str	r3, [r7, #8]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
     4b2:	683b      	ldr	r3, [r7, #0]
     4b4:	7c1b      	ldrb	r3, [r3, #16]
     4b6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     4ba:	b2da      	uxtb	r2, r3
     4bc:	7bfb      	ldrb	r3, [r7, #15]
     4be:	ea42 0303 	orr.w	r3, r2, r3
     4c2:	73fb      	strb	r3, [r7, #15]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
     4c4:	7bfb      	ldrb	r3, [r7, #15]
     4c6:	ea4f 5203 	mov.w	r2, r3, lsl #20
     4ca:	68bb      	ldr	r3, [r7, #8]
     4cc:	ea43 0302 	orr.w	r3, r3, r2
     4d0:	60bb      	str	r3, [r7, #8]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
     4d2:	687a      	ldr	r2, [r7, #4]
     4d4:	68bb      	ldr	r3, [r7, #8]
     4d6:	62d3      	str	r3, [r2, #44]
}
     4d8:	f107 0714 	add.w	r7, r7, #20	; 0x14
     4dc:	46bd      	mov	sp, r7
     4de:	bc80      	pop	{r7}
     4e0:	4770      	bx	lr
     4e2:	46c0      	nop			(mov r8, r8)
     4e4:	fff1f7fd 	.word	0xfff1f7fd

000004e8 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
     4e8:	b480      	push	{r7}
     4ea:	b083      	sub	sp, #12
     4ec:	af00      	add	r7, sp, #0
     4ee:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
     4f0:	687a      	ldr	r2, [r7, #4]
     4f2:	f04f 0300 	mov.w	r3, #0	; 0x0
     4f6:	6013      	str	r3, [r2, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
     4f8:	687a      	ldr	r2, [r7, #4]
     4fa:	f04f 0300 	mov.w	r3, #0	; 0x0
     4fe:	7113      	strb	r3, [r2, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
     500:	687a      	ldr	r2, [r7, #4]
     502:	f04f 0300 	mov.w	r3, #0	; 0x0
     506:	7153      	strb	r3, [r2, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
     508:	687a      	ldr	r2, [r7, #4]
     50a:	f04f 0300 	mov.w	r3, #0	; 0x0
     50e:	6093      	str	r3, [r2, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
     510:	687a      	ldr	r2, [r7, #4]
     512:	f04f 0300 	mov.w	r3, #0	; 0x0
     516:	60d3      	str	r3, [r2, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
     518:	687a      	ldr	r2, [r7, #4]
     51a:	f04f 0301 	mov.w	r3, #1	; 0x1
     51e:	7413      	strb	r3, [r2, #16]
}
     520:	f107 070c 	add.w	r7, r7, #12	; 0xc
     524:	46bd      	mov	sp, r7
     526:	bc80      	pop	{r7}
     528:	4770      	bx	lr
     52a:	46c0      	nop			(mov r8, r8)

0000052c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
     532:	6078      	str	r0, [r7, #4]
     534:	460b      	mov	r3, r1
     536:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     538:	78fb      	ldrb	r3, [r7, #3]
     53a:	2b00      	cmp	r3, #0
     53c:	d006      	beq.n	54c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
     53e:	687b      	ldr	r3, [r7, #4]
     540:	689b      	ldr	r3, [r3, #8]
     542:	f043 0201 	orr.w	r2, r3, #1	; 0x1
     546:	687b      	ldr	r3, [r7, #4]
     548:	609a      	str	r2, [r3, #8]
     54a:	e005      	b.n	558 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
     54c:	687b      	ldr	r3, [r7, #4]
     54e:	689b      	ldr	r3, [r3, #8]
     550:	f023 0201 	bic.w	r2, r3, #1	; 0x1
     554:	687b      	ldr	r3, [r7, #4]
     556:	609a      	str	r2, [r3, #8]
  }
}
     558:	f107 070c 	add.w	r7, r7, #12	; 0xc
     55c:	46bd      	mov	sp, r7
     55e:	bc80      	pop	{r7}
     560:	4770      	bx	lr
     562:	46c0      	nop			(mov r8, r8)

00000564 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     564:	b480      	push	{r7}
     566:	b083      	sub	sp, #12
     568:	af00      	add	r7, sp, #0
     56a:	6078      	str	r0, [r7, #4]
     56c:	460b      	mov	r3, r1
     56e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     570:	78fb      	ldrb	r3, [r7, #3]
     572:	2b00      	cmp	r3, #0
     574:	d006      	beq.n	584 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
     576:	687b      	ldr	r3, [r7, #4]
     578:	689b      	ldr	r3, [r3, #8]
     57a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     57e:	687b      	ldr	r3, [r7, #4]
     580:	609a      	str	r2, [r3, #8]
     582:	e005      	b.n	590 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
     584:	687b      	ldr	r3, [r7, #4]
     586:	689b      	ldr	r3, [r3, #8]
     588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
     58c:	687b      	ldr	r3, [r7, #4]
     58e:	609a      	str	r2, [r3, #8]
  }
}
     590:	f107 070c 	add.w	r7, r7, #12	; 0xc
     594:	46bd      	mov	sp, r7
     596:	bc80      	pop	{r7}
     598:	4770      	bx	lr
     59a:	46c0      	nop			(mov r8, r8)

0000059c <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
{
     59c:	b480      	push	{r7}
     59e:	b085      	sub	sp, #20
     5a0:	af00      	add	r7, sp, #0
     5a2:	6078      	str	r0, [r7, #4]
     5a4:	460b      	mov	r3, r1
     5a6:	807b      	strh	r3, [r7, #2]
     5a8:	4613      	mov	r3, r2
     5aa:	707b      	strb	r3, [r7, #1]
  uint8_t itmask = 0;
     5ac:	f04f 0300 	mov.w	r3, #0	; 0x0
     5b0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
     5b2:	887b      	ldrh	r3, [r7, #2]
     5b4:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
     5b6:	787b      	ldrb	r3, [r7, #1]
     5b8:	2b00      	cmp	r3, #0
     5ba:	d007      	beq.n	5cc <ADC_ITConfig+0x30>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
     5bc:	687b      	ldr	r3, [r7, #4]
     5be:	685a      	ldr	r2, [r3, #4]
     5c0:	7bfb      	ldrb	r3, [r7, #15]
     5c2:	ea42 0203 	orr.w	r2, r2, r3
     5c6:	687b      	ldr	r3, [r7, #4]
     5c8:	605a      	str	r2, [r3, #4]
     5ca:	e008      	b.n	5de <ADC_ITConfig+0x42>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
     5cc:	687b      	ldr	r3, [r7, #4]
     5ce:	685a      	ldr	r2, [r3, #4]
     5d0:	7bfb      	ldrb	r3, [r7, #15]
     5d2:	ea6f 0303 	mvn.w	r3, r3
     5d6:	ea02 0203 	and.w	r2, r2, r3
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	605a      	str	r2, [r3, #4]
  }
}
     5de:	f107 0714 	add.w	r7, r7, #20	; 0x14
     5e2:	46bd      	mov	sp, r7
     5e4:	bc80      	pop	{r7}
     5e6:	4770      	bx	lr

000005e8 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
     5e8:	b480      	push	{r7}
     5ea:	b083      	sub	sp, #12
     5ec:	af00      	add	r7, sp, #0
     5ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibartion registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
     5f0:	687b      	ldr	r3, [r7, #4]
     5f2:	689b      	ldr	r3, [r3, #8]
     5f4:	f043 0208 	orr.w	r2, r3, #8	; 0x8
     5f8:	687b      	ldr	r3, [r7, #4]
     5fa:	609a      	str	r2, [r3, #8]
}
     5fc:	f107 070c 	add.w	r7, r7, #12	; 0xc
     600:	46bd      	mov	sp, r7
     602:	bc80      	pop	{r7}
     604:	4770      	bx	lr
     606:	46c0      	nop			(mov r8, r8)

00000608 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
     608:	b480      	push	{r7}
     60a:	b085      	sub	sp, #20
     60c:	af00      	add	r7, sp, #0
     60e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     610:	f04f 0300 	mov.w	r3, #0	; 0x0
     614:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
     616:	687b      	ldr	r3, [r7, #4]
     618:	689b      	ldr	r3, [r3, #8]
     61a:	f003 0308 	and.w	r3, r3, #8	; 0x8
     61e:	2b00      	cmp	r3, #0
     620:	d003      	beq.n	62a <ADC_GetResetCalibrationStatus+0x22>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
     622:	f04f 0301 	mov.w	r3, #1	; 0x1
     626:	73fb      	strb	r3, [r7, #15]
     628:	e002      	b.n	630 <ADC_GetResetCalibrationStatus+0x28>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
     62a:	f04f 0300 	mov.w	r3, #0	; 0x0
     62e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
     630:	7bfb      	ldrb	r3, [r7, #15]
}
     632:	4618      	mov	r0, r3
     634:	f107 0714 	add.w	r7, r7, #20	; 0x14
     638:	46bd      	mov	sp, r7
     63a:	bc80      	pop	{r7}
     63c:	4770      	bx	lr
     63e:	46c0      	nop			(mov r8, r8)

00000640 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
     640:	b480      	push	{r7}
     642:	b083      	sub	sp, #12
     644:	af00      	add	r7, sp, #0
     646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
     648:	687b      	ldr	r3, [r7, #4]
     64a:	689b      	ldr	r3, [r3, #8]
     64c:	f043 0204 	orr.w	r2, r3, #4	; 0x4
     650:	687b      	ldr	r3, [r7, #4]
     652:	609a      	str	r2, [r3, #8]
}
     654:	f107 070c 	add.w	r7, r7, #12	; 0xc
     658:	46bd      	mov	sp, r7
     65a:	bc80      	pop	{r7}
     65c:	4770      	bx	lr
     65e:	46c0      	nop			(mov r8, r8)

00000660 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
     660:	b480      	push	{r7}
     662:	b085      	sub	sp, #20
     664:	af00      	add	r7, sp, #0
     666:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     668:	f04f 0300 	mov.w	r3, #0	; 0x0
     66c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
     66e:	687b      	ldr	r3, [r7, #4]
     670:	689b      	ldr	r3, [r3, #8]
     672:	f003 0304 	and.w	r3, r3, #4	; 0x4
     676:	2b00      	cmp	r3, #0
     678:	d003      	beq.n	682 <ADC_GetCalibrationStatus+0x22>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
     67a:	f04f 0301 	mov.w	r3, #1	; 0x1
     67e:	73fb      	strb	r3, [r7, #15]
     680:	e002      	b.n	688 <ADC_GetCalibrationStatus+0x28>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
     682:	f04f 0300 	mov.w	r3, #0	; 0x0
     686:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
     688:	7bfb      	ldrb	r3, [r7, #15]
}
     68a:	4618      	mov	r0, r3
     68c:	f107 0714 	add.w	r7, r7, #20	; 0x14
     690:	46bd      	mov	sp, r7
     692:	bc80      	pop	{r7}
     694:	4770      	bx	lr
     696:	46c0      	nop			(mov r8, r8)

00000698 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     698:	b480      	push	{r7}
     69a:	b083      	sub	sp, #12
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
     6a0:	460b      	mov	r3, r1
     6a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     6a4:	78fb      	ldrb	r3, [r7, #3]
     6a6:	2b00      	cmp	r3, #0
     6a8:	d006      	beq.n	6b8 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
     6aa:	687b      	ldr	r3, [r7, #4]
     6ac:	689b      	ldr	r3, [r3, #8]
     6ae:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
     6b2:	687b      	ldr	r3, [r7, #4]
     6b4:	609a      	str	r2, [r3, #8]
     6b6:	e005      	b.n	6c4 <ADC_SoftwareStartConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	689b      	ldr	r3, [r3, #8]
     6bc:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	609a      	str	r2, [r3, #8]
  }
}
     6c4:	f107 070c 	add.w	r7, r7, #12	; 0xc
     6c8:	46bd      	mov	sp, r7
     6ca:	bc80      	pop	{r7}
     6cc:	4770      	bx	lr
     6ce:	46c0      	nop			(mov r8, r8)

000006d0 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
     6d0:	b480      	push	{r7}
     6d2:	b085      	sub	sp, #20
     6d4:	af00      	add	r7, sp, #0
     6d6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     6d8:	f04f 0300 	mov.w	r3, #0	; 0x0
     6dc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	689b      	ldr	r3, [r3, #8]
     6e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
     6e6:	2b00      	cmp	r3, #0
     6e8:	d003      	beq.n	6f2 <ADC_GetSoftwareStartConvStatus+0x22>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
     6ea:	f04f 0301 	mov.w	r3, #1	; 0x1
     6ee:	73fb      	strb	r3, [r7, #15]
     6f0:	e002      	b.n	6f8 <ADC_GetSoftwareStartConvStatus+0x28>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
     6f2:	f04f 0300 	mov.w	r3, #0	; 0x0
     6f6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
     6f8:	7bfb      	ldrb	r3, [r7, #15]
}
     6fa:	4618      	mov	r0, r3
     6fc:	f107 0714 	add.w	r7, r7, #20	; 0x14
     700:	46bd      	mov	sp, r7
     702:	bc80      	pop	{r7}
     704:	4770      	bx	lr
     706:	46c0      	nop			(mov r8, r8)

00000708 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *   count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
     708:	b480      	push	{r7}
     70a:	b085      	sub	sp, #20
     70c:	af00      	add	r7, sp, #0
     70e:	6078      	str	r0, [r7, #4]
     710:	460b      	mov	r3, r1
     712:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
     714:	f04f 0300 	mov.w	r3, #0	; 0x0
     718:	60bb      	str	r3, [r7, #8]
  uint32_t tmpreg2 = 0;
     71a:	f04f 0300 	mov.w	r3, #0	; 0x0
     71e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
     720:	687b      	ldr	r3, [r7, #4]
     722:	685b      	ldr	r3, [r3, #4]
     724:	60bb      	str	r3, [r7, #8]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
     726:	68bb      	ldr	r3, [r7, #8]
     728:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
     72c:	60bb      	str	r3, [r7, #8]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
     72e:	78fb      	ldrb	r3, [r7, #3]
     730:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     734:	60fb      	str	r3, [r7, #12]
  tmpreg1 |= tmpreg2 << 13;
     736:	68fb      	ldr	r3, [r7, #12]
     738:	ea4f 3243 	mov.w	r2, r3, lsl #13
     73c:	68bb      	ldr	r3, [r7, #8]
     73e:	ea43 0302 	orr.w	r3, r3, r2
     742:	60bb      	str	r3, [r7, #8]
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
     744:	687a      	ldr	r2, [r7, #4]
     746:	68bb      	ldr	r3, [r7, #8]
     748:	6053      	str	r3, [r2, #4]
}
     74a:	f107 0714 	add.w	r7, r7, #20	; 0x14
     74e:	46bd      	mov	sp, r7
     750:	bc80      	pop	{r7}
     752:	4770      	bx	lr

00000754 <ADC_DiscModeCmd>:
  *   on regular group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     754:	b480      	push	{r7}
     756:	b083      	sub	sp, #12
     758:	af00      	add	r7, sp, #0
     75a:	6078      	str	r0, [r7, #4]
     75c:	460b      	mov	r3, r1
     75e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     760:	78fb      	ldrb	r3, [r7, #3]
     762:	2b00      	cmp	r3, #0
     764:	d006      	beq.n	774 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
     766:	687b      	ldr	r3, [r7, #4]
     768:	685b      	ldr	r3, [r3, #4]
     76a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     76e:	687b      	ldr	r3, [r7, #4]
     770:	605a      	str	r2, [r3, #4]
     772:	e005      	b.n	780 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
     774:	687b      	ldr	r3, [r7, #4]
     776:	685b      	ldr	r3, [r3, #4]
     778:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	605a      	str	r2, [r3, #4]
  }
}
     780:	f107 070c 	add.w	r7, r7, #12	; 0xc
     784:	46bd      	mov	sp, r7
     786:	bc80      	pop	{r7}
     788:	4770      	bx	lr
     78a:	46c0      	nop			(mov r8, r8)

0000078c <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
     78c:	b480      	push	{r7}
     78e:	b085      	sub	sp, #20
     790:	af00      	add	r7, sp, #0
     792:	6078      	str	r0, [r7, #4]
     794:	4618      	mov	r0, r3
     796:	460b      	mov	r3, r1
     798:	70fb      	strb	r3, [r7, #3]
     79a:	4613      	mov	r3, r2
     79c:	70bb      	strb	r3, [r7, #2]
     79e:	4603      	mov	r3, r0
     7a0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
     7a2:	f04f 0300 	mov.w	r3, #0	; 0x0
     7a6:	60bb      	str	r3, [r7, #8]
     7a8:	f04f 0300 	mov.w	r3, #0	; 0x0
     7ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
     7ae:	78fb      	ldrb	r3, [r7, #3]
     7b0:	2b09      	cmp	r3, #9
     7b2:	d929      	bls.n	808 <ADC_RegularChannelConfig+0x7c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	68db      	ldr	r3, [r3, #12]
     7b8:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
     7ba:	78fa      	ldrb	r2, [r7, #3]
     7bc:	4613      	mov	r3, r2
     7be:	ea4f 0343 	mov.w	r3, r3, lsl #1
     7c2:	4413      	add	r3, r2
     7c4:	f1a3 021e 	sub.w	r2, r3, #30	; 0x1e
     7c8:	f04f 0307 	mov.w	r3, #7	; 0x7
     7cc:	fa03 f302 	lsl.w	r3, r3, r2
     7d0:	60fb      	str	r3, [r7, #12]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     7d2:	68fb      	ldr	r3, [r7, #12]
     7d4:	ea6f 0203 	mvn.w	r2, r3
     7d8:	68bb      	ldr	r3, [r7, #8]
     7da:	ea03 0302 	and.w	r3, r3, r2
     7de:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
     7e0:	7879      	ldrb	r1, [r7, #1]
     7e2:	78fa      	ldrb	r2, [r7, #3]
     7e4:	4613      	mov	r3, r2
     7e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
     7ea:	4413      	add	r3, r2
     7ec:	f1a3 031e 	sub.w	r3, r3, #30	; 0x1e
     7f0:	fa01 f303 	lsl.w	r3, r1, r3
     7f4:	60fb      	str	r3, [r7, #12]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     7f6:	68ba      	ldr	r2, [r7, #8]
     7f8:	68fb      	ldr	r3, [r7, #12]
     7fa:	ea42 0303 	orr.w	r3, r2, r3
     7fe:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
     800:	687a      	ldr	r2, [r7, #4]
     802:	68bb      	ldr	r3, [r7, #8]
     804:	60d3      	str	r3, [r2, #12]
     806:	e024      	b.n	852 <ADC_RegularChannelConfig+0xc6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
     808:	687b      	ldr	r3, [r7, #4]
     80a:	691b      	ldr	r3, [r3, #16]
     80c:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
     80e:	78fa      	ldrb	r2, [r7, #3]
     810:	4613      	mov	r3, r2
     812:	ea4f 0343 	mov.w	r3, r3, lsl #1
     816:	441a      	add	r2, r3
     818:	f04f 0307 	mov.w	r3, #7	; 0x7
     81c:	fa03 f302 	lsl.w	r3, r3, r2
     820:	60fb      	str	r3, [r7, #12]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     822:	68fb      	ldr	r3, [r7, #12]
     824:	ea6f 0203 	mvn.w	r2, r3
     828:	68bb      	ldr	r3, [r7, #8]
     82a:	ea03 0302 	and.w	r3, r3, r2
     82e:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
     830:	7879      	ldrb	r1, [r7, #1]
     832:	78fa      	ldrb	r2, [r7, #3]
     834:	4613      	mov	r3, r2
     836:	ea4f 0343 	mov.w	r3, r3, lsl #1
     83a:	4413      	add	r3, r2
     83c:	fa01 f303 	lsl.w	r3, r1, r3
     840:	60fb      	str	r3, [r7, #12]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     842:	68ba      	ldr	r2, [r7, #8]
     844:	68fb      	ldr	r3, [r7, #12]
     846:	ea42 0303 	orr.w	r3, r2, r3
     84a:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
     84c:	687a      	ldr	r2, [r7, #4]
     84e:	68bb      	ldr	r3, [r7, #8]
     850:	6113      	str	r3, [r2, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
     852:	78bb      	ldrb	r3, [r7, #2]
     854:	2b06      	cmp	r3, #6
     856:	d829      	bhi.n	8ac <ADC_RegularChannelConfig+0x120>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
     858:	687b      	ldr	r3, [r7, #4]
     85a:	6b5b      	ldr	r3, [r3, #52]
     85c:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
     85e:	78bb      	ldrb	r3, [r7, #2]
     860:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
     864:	4613      	mov	r3, r2
     866:	ea4f 0383 	mov.w	r3, r3, lsl #2
     86a:	441a      	add	r2, r3
     86c:	f04f 031f 	mov.w	r3, #31	; 0x1f
     870:	fa03 f302 	lsl.w	r3, r3, r2
     874:	60fb      	str	r3, [r7, #12]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
     876:	68fb      	ldr	r3, [r7, #12]
     878:	ea6f 0203 	mvn.w	r2, r3
     87c:	68bb      	ldr	r3, [r7, #8]
     87e:	ea03 0302 	and.w	r3, r3, r2
     882:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
     884:	78f9      	ldrb	r1, [r7, #3]
     886:	78bb      	ldrb	r3, [r7, #2]
     888:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
     88c:	4613      	mov	r3, r2
     88e:	ea4f 0383 	mov.w	r3, r3, lsl #2
     892:	4413      	add	r3, r2
     894:	fa01 f303 	lsl.w	r3, r1, r3
     898:	60fb      	str	r3, [r7, #12]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
     89a:	68ba      	ldr	r2, [r7, #8]
     89c:	68fb      	ldr	r3, [r7, #12]
     89e:	ea42 0303 	orr.w	r3, r2, r3
     8a2:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
     8a4:	687a      	ldr	r2, [r7, #4]
     8a6:	68bb      	ldr	r3, [r7, #8]
     8a8:	6353      	str	r3, [r2, #52]
     8aa:	e055      	b.n	958 <ADC_RegularChannelConfig+0x1cc>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
     8ac:	78bb      	ldrb	r3, [r7, #2]
     8ae:	2b0c      	cmp	r3, #12
     8b0:	d829      	bhi.n	906 <ADC_RegularChannelConfig+0x17a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	6b1b      	ldr	r3, [r3, #48]
     8b6:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
     8b8:	78ba      	ldrb	r2, [r7, #2]
     8ba:	4613      	mov	r3, r2
     8bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
     8c0:	4413      	add	r3, r2
     8c2:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
     8c6:	f04f 031f 	mov.w	r3, #31	; 0x1f
     8ca:	fa03 f302 	lsl.w	r3, r3, r2
     8ce:	60fb      	str	r3, [r7, #12]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
     8d0:	68fb      	ldr	r3, [r7, #12]
     8d2:	ea6f 0203 	mvn.w	r2, r3
     8d6:	68bb      	ldr	r3, [r7, #8]
     8d8:	ea03 0302 	and.w	r3, r3, r2
     8dc:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
     8de:	78f9      	ldrb	r1, [r7, #3]
     8e0:	78ba      	ldrb	r2, [r7, #2]
     8e2:	4613      	mov	r3, r2
     8e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
     8e8:	4413      	add	r3, r2
     8ea:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
     8ee:	fa01 f303 	lsl.w	r3, r1, r3
     8f2:	60fb      	str	r3, [r7, #12]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
     8f4:	68ba      	ldr	r2, [r7, #8]
     8f6:	68fb      	ldr	r3, [r7, #12]
     8f8:	ea42 0303 	orr.w	r3, r2, r3
     8fc:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
     8fe:	687a      	ldr	r2, [r7, #4]
     900:	68bb      	ldr	r3, [r7, #8]
     902:	6313      	str	r3, [r2, #48]
     904:	e028      	b.n	958 <ADC_RegularChannelConfig+0x1cc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
     906:	687b      	ldr	r3, [r7, #4]
     908:	6adb      	ldr	r3, [r3, #44]
     90a:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
     90c:	78ba      	ldrb	r2, [r7, #2]
     90e:	4613      	mov	r3, r2
     910:	ea4f 0383 	mov.w	r3, r3, lsl #2
     914:	4413      	add	r3, r2
     916:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     91a:	f04f 031f 	mov.w	r3, #31	; 0x1f
     91e:	fa03 f302 	lsl.w	r3, r3, r2
     922:	60fb      	str	r3, [r7, #12]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
     924:	68fb      	ldr	r3, [r7, #12]
     926:	ea6f 0203 	mvn.w	r2, r3
     92a:	68bb      	ldr	r3, [r7, #8]
     92c:	ea03 0302 	and.w	r3, r3, r2
     930:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
     932:	78f9      	ldrb	r1, [r7, #3]
     934:	78ba      	ldrb	r2, [r7, #2]
     936:	4613      	mov	r3, r2
     938:	ea4f 0383 	mov.w	r3, r3, lsl #2
     93c:	4413      	add	r3, r2
     93e:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
     942:	fa01 f303 	lsl.w	r3, r1, r3
     946:	60fb      	str	r3, [r7, #12]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
     948:	68ba      	ldr	r2, [r7, #8]
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	ea42 0303 	orr.w	r3, r2, r3
     950:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
     952:	687a      	ldr	r2, [r7, #4]
     954:	68bb      	ldr	r3, [r7, #8]
     956:	62d3      	str	r3, [r2, #44]
  }
}
     958:	f107 0714 	add.w	r7, r7, #20	; 0x14
     95c:	46bd      	mov	sp, r7
     95e:	bc80      	pop	{r7}
     960:	4770      	bx	lr
     962:	46c0      	nop			(mov r8, r8)

00000964 <ADC_ExternalTrigConvCmd>:
  * @param  NewState: new state of the selected ADC external trigger start of conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     964:	b480      	push	{r7}
     966:	b083      	sub	sp, #12
     968:	af00      	add	r7, sp, #0
     96a:	6078      	str	r0, [r7, #4]
     96c:	460b      	mov	r3, r1
     96e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     970:	78fb      	ldrb	r3, [r7, #3]
     972:	2b00      	cmp	r3, #0
     974:	d006      	beq.n	984 <ADC_ExternalTrigConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
     976:	687b      	ldr	r3, [r7, #4]
     978:	689b      	ldr	r3, [r3, #8]
     97a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
     97e:	687b      	ldr	r3, [r7, #4]
     980:	609a      	str	r2, [r3, #8]
     982:	e005      	b.n	990 <ADC_ExternalTrigConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
     984:	687b      	ldr	r3, [r7, #4]
     986:	689b      	ldr	r3, [r3, #8]
     988:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
     98c:	687b      	ldr	r3, [r7, #4]
     98e:	609a      	str	r2, [r3, #8]
  }
}
     990:	f107 070c 	add.w	r7, r7, #12	; 0xc
     994:	46bd      	mov	sp, r7
     996:	bc80      	pop	{r7}
     998:	4770      	bx	lr
     99a:	46c0      	nop			(mov r8, r8)

0000099c <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
     99c:	b480      	push	{r7}
     99e:	b083      	sub	sp, #12
     9a0:	af00      	add	r7, sp, #0
     9a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
     9a4:	687b      	ldr	r3, [r7, #4]
     9a6:	6cdb      	ldr	r3, [r3, #76]
     9a8:	b29b      	uxth	r3, r3
}
     9aa:	4618      	mov	r0, r3
     9ac:	f107 070c 	add.w	r7, r7, #12	; 0xc
     9b0:	46bd      	mov	sp, r7
     9b2:	bc80      	pop	{r7}
     9b4:	4770      	bx	lr
     9b6:	46c0      	nop			(mov r8, r8)

000009b8 <ADC_GetDualModeConversionValue>:
/**
  * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
     9b8:	b480      	push	{r7}
     9ba:	af00      	add	r7, sp, #0
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
     9bc:	4b02      	ldr	r3, [pc, #8]	(9c8 <ADC_GetDualModeConversionValue+0x10>)
     9be:	681b      	ldr	r3, [r3, #0]
}
     9c0:	4618      	mov	r0, r3
     9c2:	46bd      	mov	sp, r7
     9c4:	bc80      	pop	{r7}
     9c6:	4770      	bx	lr
     9c8:	4001244c 	.word	0x4001244c

000009cc <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     9cc:	b480      	push	{r7}
     9ce:	b083      	sub	sp, #12
     9d0:	af00      	add	r7, sp, #0
     9d2:	6078      	str	r0, [r7, #4]
     9d4:	460b      	mov	r3, r1
     9d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     9d8:	78fb      	ldrb	r3, [r7, #3]
     9da:	2b00      	cmp	r3, #0
     9dc:	d006      	beq.n	9ec <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	685b      	ldr	r3, [r3, #4]
     9e2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     9e6:	687b      	ldr	r3, [r7, #4]
     9e8:	605a      	str	r2, [r3, #4]
     9ea:	e005      	b.n	9f8 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
     9ec:	687b      	ldr	r3, [r7, #4]
     9ee:	685b      	ldr	r3, [r3, #4]
     9f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
     9f4:	687b      	ldr	r3, [r7, #4]
     9f6:	605a      	str	r2, [r3, #4]
  }
}
     9f8:	f107 070c 	add.w	r7, r7, #12	; 0xc
     9fc:	46bd      	mov	sp, r7
     9fe:	bc80      	pop	{r7}
     a00:	4770      	bx	lr
     a02:	46c0      	nop			(mov r8, r8)

00000a04 <ADC_InjectedDiscModeCmd>:
  *   on injected group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     a04:	b480      	push	{r7}
     a06:	b083      	sub	sp, #12
     a08:	af00      	add	r7, sp, #0
     a0a:	6078      	str	r0, [r7, #4]
     a0c:	460b      	mov	r3, r1
     a0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a10:	78fb      	ldrb	r3, [r7, #3]
     a12:	2b00      	cmp	r3, #0
     a14:	d006      	beq.n	a24 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
     a16:	687b      	ldr	r3, [r7, #4]
     a18:	685b      	ldr	r3, [r3, #4]
     a1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     a1e:	687b      	ldr	r3, [r7, #4]
     a20:	605a      	str	r2, [r3, #4]
     a22:	e005      	b.n	a30 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
     a24:	687b      	ldr	r3, [r7, #4]
     a26:	685b      	ldr	r3, [r3, #4]
     a28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
     a2c:	687b      	ldr	r3, [r7, #4]
     a2e:	605a      	str	r2, [r3, #4]
  }
}
     a30:	f107 070c 	add.w	r7, r7, #12	; 0xc
     a34:	46bd      	mov	sp, r7
     a36:	bc80      	pop	{r7}
     a38:	4770      	bx	lr
     a3a:	46c0      	nop			(mov r8, r8)

00000a3c <ADC_ExternalTrigInjectedConvConfig>:
  *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
  *                                          by external trigger (for ADC1, ADC2 and ADC3)
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
     a3c:	b480      	push	{r7}
     a3e:	b085      	sub	sp, #20
     a40:	af00      	add	r7, sp, #0
     a42:	6078      	str	r0, [r7, #4]
     a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     a46:	f04f 0300 	mov.w	r3, #0	; 0x0
     a4a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
     a4c:	687b      	ldr	r3, [r7, #4]
     a4e:	689b      	ldr	r3, [r3, #8]
     a50:	60fb      	str	r3, [r7, #12]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
     a52:	68fb      	ldr	r3, [r7, #12]
     a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     a58:	60fb      	str	r3, [r7, #12]
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
     a5a:	68fa      	ldr	r2, [r7, #12]
     a5c:	683b      	ldr	r3, [r7, #0]
     a5e:	ea42 0303 	orr.w	r3, r2, r3
     a62:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
     a64:	687a      	ldr	r2, [r7, #4]
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	6093      	str	r3, [r2, #8]
}
     a6a:	f107 0714 	add.w	r7, r7, #20	; 0x14
     a6e:	46bd      	mov	sp, r7
     a70:	bc80      	pop	{r7}
     a72:	4770      	bx	lr

00000a74 <ADC_ExternalTrigInjectedConvCmd>:
  *   injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     a74:	b480      	push	{r7}
     a76:	b083      	sub	sp, #12
     a78:	af00      	add	r7, sp, #0
     a7a:	6078      	str	r0, [r7, #4]
     a7c:	460b      	mov	r3, r1
     a7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a80:	78fb      	ldrb	r3, [r7, #3]
     a82:	2b00      	cmp	r3, #0
     a84:	d006      	beq.n	a94 <ADC_ExternalTrigInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
     a86:	687b      	ldr	r3, [r7, #4]
     a88:	689b      	ldr	r3, [r3, #8]
     a8a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     a8e:	687b      	ldr	r3, [r7, #4]
     a90:	609a      	str	r2, [r3, #8]
     a92:	e005      	b.n	aa0 <ADC_ExternalTrigInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
     a94:	687b      	ldr	r3, [r7, #4]
     a96:	689b      	ldr	r3, [r3, #8]
     a98:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
     a9c:	687b      	ldr	r3, [r7, #4]
     a9e:	609a      	str	r2, [r3, #8]
  }
}
     aa0:	f107 070c 	add.w	r7, r7, #12	; 0xc
     aa4:	46bd      	mov	sp, r7
     aa6:	bc80      	pop	{r7}
     aa8:	4770      	bx	lr
     aaa:	46c0      	nop			(mov r8, r8)

00000aac <ADC_SoftwareStartInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC software start injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     aac:	b480      	push	{r7}
     aae:	b083      	sub	sp, #12
     ab0:	af00      	add	r7, sp, #0
     ab2:	6078      	str	r0, [r7, #4]
     ab4:	460b      	mov	r3, r1
     ab6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ab8:	78fb      	ldrb	r3, [r7, #3]
     aba:	2b00      	cmp	r3, #0
     abc:	d006      	beq.n	acc <ADC_SoftwareStartInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
     abe:	687b      	ldr	r3, [r7, #4]
     ac0:	689b      	ldr	r3, [r3, #8]
     ac2:	f443 1202 	orr.w	r2, r3, #2129920	; 0x208000
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	609a      	str	r2, [r3, #8]
     aca:	e005      	b.n	ad8 <ADC_SoftwareStartInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
     acc:	687b      	ldr	r3, [r7, #4]
     ace:	689b      	ldr	r3, [r3, #8]
     ad0:	f423 1202 	bic.w	r2, r3, #2129920	; 0x208000
     ad4:	687b      	ldr	r3, [r7, #4]
     ad6:	609a      	str	r2, [r3, #8]
  }
}
     ad8:	f107 070c 	add.w	r7, r7, #12	; 0xc
     adc:	46bd      	mov	sp, r7
     ade:	bc80      	pop	{r7}
     ae0:	4770      	bx	lr
     ae2:	46c0      	nop			(mov r8, r8)

00000ae4 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
     ae4:	b480      	push	{r7}
     ae6:	b085      	sub	sp, #20
     ae8:	af00      	add	r7, sp, #0
     aea:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     aec:	f04f 0300 	mov.w	r3, #0	; 0x0
     af0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
     af2:	687b      	ldr	r3, [r7, #4]
     af4:	689b      	ldr	r3, [r3, #8]
     af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
     afa:	2b00      	cmp	r3, #0
     afc:	d003      	beq.n	b06 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
     afe:	f04f 0301 	mov.w	r3, #1	; 0x1
     b02:	73fb      	strb	r3, [r7, #15]
     b04:	e002      	b.n	b0c <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
     b06:	f04f 0300 	mov.w	r3, #0	; 0x0
     b0a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
     b0c:	7bfb      	ldrb	r3, [r7, #15]
}
     b0e:	4618      	mov	r0, r3
     b10:	f107 0714 	add.w	r7, r7, #20	; 0x14
     b14:	46bd      	mov	sp, r7
     b16:	bc80      	pop	{r7}
     b18:	4770      	bx	lr
     b1a:	46c0      	nop			(mov r8, r8)

00000b1c <ADC_InjectedChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
     b1c:	b480      	push	{r7}
     b1e:	b087      	sub	sp, #28
     b20:	af00      	add	r7, sp, #0
     b22:	6078      	str	r0, [r7, #4]
     b24:	4618      	mov	r0, r3
     b26:	460b      	mov	r3, r1
     b28:	70fb      	strb	r3, [r7, #3]
     b2a:	4613      	mov	r3, r2
     b2c:	70bb      	strb	r3, [r7, #2]
     b2e:	4603      	mov	r3, r0
     b30:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
     b32:	f04f 0300 	mov.w	r3, #0	; 0x0
     b36:	60fb      	str	r3, [r7, #12]
     b38:	f04f 0300 	mov.w	r3, #0	; 0x0
     b3c:	613b      	str	r3, [r7, #16]
     b3e:	f04f 0300 	mov.w	r3, #0	; 0x0
     b42:	617b      	str	r3, [r7, #20]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
     b44:	78fb      	ldrb	r3, [r7, #3]
     b46:	2b09      	cmp	r3, #9
     b48:	d929      	bls.n	b9e <ADC_InjectedChannelConfig+0x82>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
     b4a:	687b      	ldr	r3, [r7, #4]
     b4c:	68db      	ldr	r3, [r3, #12]
     b4e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
     b50:	78fa      	ldrb	r2, [r7, #3]
     b52:	4613      	mov	r3, r2
     b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b58:	4413      	add	r3, r2
     b5a:	f1a3 021e 	sub.w	r2, r3, #30	; 0x1e
     b5e:	f04f 0307 	mov.w	r3, #7	; 0x7
     b62:	fa03 f302 	lsl.w	r3, r3, r2
     b66:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     b68:	693b      	ldr	r3, [r7, #16]
     b6a:	ea6f 0203 	mvn.w	r2, r3
     b6e:	68fb      	ldr	r3, [r7, #12]
     b70:	ea03 0302 	and.w	r3, r3, r2
     b74:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
     b76:	7879      	ldrb	r1, [r7, #1]
     b78:	78fa      	ldrb	r2, [r7, #3]
     b7a:	4613      	mov	r3, r2
     b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b80:	4413      	add	r3, r2
     b82:	f1a3 031e 	sub.w	r3, r3, #30	; 0x1e
     b86:	fa01 f303 	lsl.w	r3, r1, r3
     b8a:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     b8c:	68fa      	ldr	r2, [r7, #12]
     b8e:	693b      	ldr	r3, [r7, #16]
     b90:	ea42 0303 	orr.w	r3, r2, r3
     b94:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
     b96:	687a      	ldr	r2, [r7, #4]
     b98:	68fb      	ldr	r3, [r7, #12]
     b9a:	60d3      	str	r3, [r2, #12]
     b9c:	e024      	b.n	be8 <ADC_InjectedChannelConfig+0xcc>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	691b      	ldr	r3, [r3, #16]
     ba2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
     ba4:	78fa      	ldrb	r2, [r7, #3]
     ba6:	4613      	mov	r3, r2
     ba8:	ea4f 0343 	mov.w	r3, r3, lsl #1
     bac:	441a      	add	r2, r3
     bae:	f04f 0307 	mov.w	r3, #7	; 0x7
     bb2:	fa03 f302 	lsl.w	r3, r3, r2
     bb6:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     bb8:	693b      	ldr	r3, [r7, #16]
     bba:	ea6f 0203 	mvn.w	r2, r3
     bbe:	68fb      	ldr	r3, [r7, #12]
     bc0:	ea03 0302 	and.w	r3, r3, r2
     bc4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
     bc6:	7879      	ldrb	r1, [r7, #1]
     bc8:	78fa      	ldrb	r2, [r7, #3]
     bca:	4613      	mov	r3, r2
     bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
     bd0:	4413      	add	r3, r2
     bd2:	fa01 f303 	lsl.w	r3, r1, r3
     bd6:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     bd8:	68fa      	ldr	r2, [r7, #12]
     bda:	693b      	ldr	r3, [r7, #16]
     bdc:	ea42 0303 	orr.w	r3, r2, r3
     be0:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
     be2:	687a      	ldr	r2, [r7, #4]
     be4:	68fb      	ldr	r3, [r7, #12]
     be6:	6113      	str	r3, [r2, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
     be8:	687b      	ldr	r3, [r7, #4]
     bea:	6b9b      	ldr	r3, [r3, #56]
     bec:	60fb      	str	r3, [r7, #12]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
     bee:	68fb      	ldr	r3, [r7, #12]
     bf0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
     bf4:	ea4f 5313 	mov.w	r3, r3, lsr #20
     bf8:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
     bfa:	697b      	ldr	r3, [r7, #20]
     bfc:	b2db      	uxtb	r3, r3
     bfe:	ea6f 0303 	mvn.w	r3, r3
     c02:	b2da      	uxtb	r2, r3
     c04:	78bb      	ldrb	r3, [r7, #2]
     c06:	4413      	add	r3, r2
     c08:	b2db      	uxtb	r3, r3
     c0a:	f103 0303 	add.w	r3, r3, #3	; 0x3
     c0e:	b2db      	uxtb	r3, r3
     c10:	461a      	mov	r2, r3
     c12:	4613      	mov	r3, r2
     c14:	ea4f 0383 	mov.w	r3, r3, lsl #2
     c18:	441a      	add	r2, r3
     c1a:	f04f 031f 	mov.w	r3, #31	; 0x1f
     c1e:	fa03 f302 	lsl.w	r3, r3, r2
     c22:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
     c24:	693b      	ldr	r3, [r7, #16]
     c26:	ea6f 0203 	mvn.w	r2, r3
     c2a:	68fb      	ldr	r3, [r7, #12]
     c2c:	ea03 0302 	and.w	r3, r3, r2
     c30:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
     c32:	78f9      	ldrb	r1, [r7, #3]
     c34:	697b      	ldr	r3, [r7, #20]
     c36:	b2db      	uxtb	r3, r3
     c38:	ea6f 0303 	mvn.w	r3, r3
     c3c:	b2da      	uxtb	r2, r3
     c3e:	78bb      	ldrb	r3, [r7, #2]
     c40:	4413      	add	r3, r2
     c42:	b2db      	uxtb	r3, r3
     c44:	f103 0303 	add.w	r3, r3, #3	; 0x3
     c48:	b2db      	uxtb	r3, r3
     c4a:	461a      	mov	r2, r3
     c4c:	4613      	mov	r3, r2
     c4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
     c52:	4413      	add	r3, r2
     c54:	fa01 f303 	lsl.w	r3, r1, r3
     c58:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
     c5a:	68fa      	ldr	r2, [r7, #12]
     c5c:	693b      	ldr	r3, [r7, #16]
     c5e:	ea42 0303 	orr.w	r3, r2, r3
     c62:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
     c64:	687a      	ldr	r2, [r7, #4]
     c66:	68fb      	ldr	r3, [r7, #12]
     c68:	6393      	str	r3, [r2, #56]
}
     c6a:	f107 071c 	add.w	r7, r7, #28	; 0x1c
     c6e:	46bd      	mov	sp, r7
     c70:	bc80      	pop	{r7}
     c72:	4770      	bx	lr

00000c74 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *   This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
     c74:	b480      	push	{r7}
     c76:	b085      	sub	sp, #20
     c78:	af00      	add	r7, sp, #0
     c7a:	6078      	str	r0, [r7, #4]
     c7c:	460b      	mov	r3, r1
     c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
     c80:	f04f 0300 	mov.w	r3, #0	; 0x0
     c84:	60bb      	str	r3, [r7, #8]
  uint32_t tmpreg2 = 0;
     c86:	f04f 0300 	mov.w	r3, #0	; 0x0
     c8a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
     c8c:	687b      	ldr	r3, [r7, #4]
     c8e:	6b9b      	ldr	r3, [r3, #56]
     c90:	60bb      	str	r3, [r7, #8]
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
     c92:	68bb      	ldr	r3, [r7, #8]
     c94:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
     c98:	60bb      	str	r3, [r7, #8]
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
     c9a:	78fb      	ldrb	r3, [r7, #3]
     c9c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     ca0:	60fb      	str	r3, [r7, #12]
  tmpreg1 |= tmpreg2 << 20;
     ca2:	68fb      	ldr	r3, [r7, #12]
     ca4:	ea4f 5203 	mov.w	r2, r3, lsl #20
     ca8:	68bb      	ldr	r3, [r7, #8]
     caa:	ea43 0302 	orr.w	r3, r3, r2
     cae:	60bb      	str	r3, [r7, #8]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
     cb0:	687a      	ldr	r2, [r7, #4]
     cb2:	68bb      	ldr	r3, [r7, #8]
     cb4:	6393      	str	r3, [r2, #56]
}
     cb6:	f107 0714 	add.w	r7, r7, #20	; 0x14
     cba:	46bd      	mov	sp, r7
     cbc:	bc80      	pop	{r7}
     cbe:	4770      	bx	lr

00000cc0 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
     cc0:	b480      	push	{r7}
     cc2:	b085      	sub	sp, #20
     cc4:	af00      	add	r7, sp, #0
     cc6:	6078      	str	r0, [r7, #4]
     cc8:	460b      	mov	r3, r1
     cca:	70fb      	strb	r3, [r7, #3]
     ccc:	4613      	mov	r3, r2
     cce:	803b      	strh	r3, [r7, #0]
  __IO uint32_t tmp = 0;
     cd0:	f04f 0300 	mov.w	r3, #0	; 0x0
     cd4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
     cda:	78fa      	ldrb	r2, [r7, #3]
     cdc:	68fb      	ldr	r3, [r7, #12]
     cde:	4413      	add	r3, r2
     ce0:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
     ce2:	68fb      	ldr	r3, [r7, #12]
     ce4:	461a      	mov	r2, r3
     ce6:	883b      	ldrh	r3, [r7, #0]
     ce8:	6013      	str	r3, [r2, #0]
}
     cea:	f107 0714 	add.w	r7, r7, #20	; 0x14
     cee:	46bd      	mov	sp, r7
     cf0:	bc80      	pop	{r7}
     cf2:	4770      	bx	lr

00000cf4 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
     cf4:	b480      	push	{r7}
     cf6:	b085      	sub	sp, #20
     cf8:	af00      	add	r7, sp, #0
     cfa:	6078      	str	r0, [r7, #4]
     cfc:	460b      	mov	r3, r1
     cfe:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
     d00:	f04f 0300 	mov.w	r3, #0	; 0x0
     d04:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
     d06:	687b      	ldr	r3, [r7, #4]
     d08:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_Offset;
     d0a:	78fa      	ldrb	r2, [r7, #3]
     d0c:	68fb      	ldr	r3, [r7, #12]
     d0e:	4413      	add	r3, r2
     d10:	f103 0328 	add.w	r3, r3, #40	; 0x28
     d14:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
     d16:	68fb      	ldr	r3, [r7, #12]
     d18:	681b      	ldr	r3, [r3, #0]
     d1a:	b29b      	uxth	r3, r3
}
     d1c:	4618      	mov	r0, r3
     d1e:	f107 0714 	add.w	r7, r7, #20	; 0x14
     d22:	46bd      	mov	sp, r7
     d24:	bc80      	pop	{r7}
     d26:	4770      	bx	lr

00000d28 <ADC_AnalogWatchdogCmd>:
  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
     d28:	b480      	push	{r7}
     d2a:	b085      	sub	sp, #20
     d2c:	af00      	add	r7, sp, #0
     d2e:	6078      	str	r0, [r7, #4]
     d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     d32:	f04f 0300 	mov.w	r3, #0	; 0x0
     d36:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
     d38:	687b      	ldr	r3, [r7, #4]
     d3a:	685b      	ldr	r3, [r3, #4]
     d3c:	60fb      	str	r3, [r7, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
     d3e:	68fb      	ldr	r3, [r7, #12]
     d40:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
     d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
     d48:	60fb      	str	r3, [r7, #12]
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
     d4a:	68fa      	ldr	r2, [r7, #12]
     d4c:	683b      	ldr	r3, [r7, #0]
     d4e:	ea42 0303 	orr.w	r3, r2, r3
     d52:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
     d54:	687a      	ldr	r2, [r7, #4]
     d56:	68fb      	ldr	r3, [r7, #12]
     d58:	6053      	str	r3, [r2, #4]
}
     d5a:	f107 0714 	add.w	r7, r7, #20	; 0x14
     d5e:	46bd      	mov	sp, r7
     d60:	bc80      	pop	{r7}
     d62:	4770      	bx	lr

00000d64 <ADC_AnalogWatchdogThresholdsConfig>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
     d64:	b480      	push	{r7}
     d66:	b083      	sub	sp, #12
     d68:	af00      	add	r7, sp, #0
     d6a:	6078      	str	r0, [r7, #4]
     d6c:	460b      	mov	r3, r1
     d6e:	807b      	strh	r3, [r7, #2]
     d70:	4613      	mov	r3, r2
     d72:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
     d74:	887a      	ldrh	r2, [r7, #2]
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	625a      	str	r2, [r3, #36]
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
     d7a:	883a      	ldrh	r2, [r7, #0]
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	629a      	str	r2, [r3, #40]
}
     d80:	f107 070c 	add.w	r7, r7, #12	; 0xc
     d84:	46bd      	mov	sp, r7
     d86:	bc80      	pop	{r7}
     d88:	4770      	bx	lr
     d8a:	46c0      	nop			(mov r8, r8)

00000d8c <ADC_AnalogWatchdogSingleChannelConfig>:
  *     @arg ADC_Channel_16: ADC Channel16 selected
  *     @arg ADC_Channel_17: ADC Channel17 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
     d8c:	b480      	push	{r7}
     d8e:	b085      	sub	sp, #20
     d90:	af00      	add	r7, sp, #0
     d92:	6078      	str	r0, [r7, #4]
     d94:	460b      	mov	r3, r1
     d96:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
     d98:	f04f 0300 	mov.w	r3, #0	; 0x0
     d9c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
     d9e:	687b      	ldr	r3, [r7, #4]
     da0:	685b      	ldr	r3, [r3, #4]
     da2:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
     da4:	68fb      	ldr	r3, [r7, #12]
     da6:	f023 031f 	bic.w	r3, r3, #31	; 0x1f
     daa:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
     dac:	78fa      	ldrb	r2, [r7, #3]
     dae:	68fb      	ldr	r3, [r7, #12]
     db0:	ea43 0302 	orr.w	r3, r3, r2
     db4:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
     db6:	687a      	ldr	r2, [r7, #4]
     db8:	68fb      	ldr	r3, [r7, #12]
     dba:	6053      	str	r3, [r2, #4]
}
     dbc:	f107 0714 	add.w	r7, r7, #20	; 0x14
     dc0:	46bd      	mov	sp, r7
     dc2:	bc80      	pop	{r7}
     dc4:	4770      	bx	lr
     dc6:	46c0      	nop			(mov r8, r8)

00000dc8 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
     dc8:	b480      	push	{r7}
     dca:	b083      	sub	sp, #12
     dcc:	af00      	add	r7, sp, #0
     dce:	4603      	mov	r3, r0
     dd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dd2:	79fb      	ldrb	r3, [r7, #7]
     dd4:	2b00      	cmp	r3, #0
     dd6:	d006      	beq.n	de6 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
     dd8:	4a08      	ldr	r2, [pc, #32]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     dda:	4b08      	ldr	r3, [pc, #32]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     ddc:	689b      	ldr	r3, [r3, #8]
     dde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     de2:	6093      	str	r3, [r2, #8]
     de4:	e005      	b.n	df2 <ADC_TempSensorVrefintCmd+0x2a>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
     de6:	4a05      	ldr	r2, [pc, #20]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     de8:	4b04      	ldr	r3, [pc, #16]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     dea:	689b      	ldr	r3, [r3, #8]
     dec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
     df0:	6093      	str	r3, [r2, #8]
  }
}
     df2:	f107 070c 	add.w	r7, r7, #12	; 0xc
     df6:	46bd      	mov	sp, r7
     df8:	bc80      	pop	{r7}
     dfa:	4770      	bx	lr
     dfc:	40012400 	.word	0x40012400

00000e00 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
     e00:	b480      	push	{r7}
     e02:	b085      	sub	sp, #20
     e04:	af00      	add	r7, sp, #0
     e06:	6078      	str	r0, [r7, #4]
     e08:	460b      	mov	r3, r1
     e0a:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
     e0c:	f04f 0300 	mov.w	r3, #0	; 0x0
     e10:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	681a      	ldr	r2, [r3, #0]
     e16:	78fb      	ldrb	r3, [r7, #3]
     e18:	ea02 0303 	and.w	r3, r2, r3
     e1c:	2b00      	cmp	r3, #0
     e1e:	d003      	beq.n	e28 <ADC_GetFlagStatus+0x28>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
     e20:	f04f 0301 	mov.w	r3, #1	; 0x1
     e24:	73fb      	strb	r3, [r7, #15]
     e26:	e002      	b.n	e2e <ADC_GetFlagStatus+0x2e>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
     e28:	f04f 0300 	mov.w	r3, #0	; 0x0
     e2c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
     e2e:	7bfb      	ldrb	r3, [r7, #15]
}
     e30:	4618      	mov	r0, r3
     e32:	f107 0714 	add.w	r7, r7, #20	; 0x14
     e36:	46bd      	mov	sp, r7
     e38:	bc80      	pop	{r7}
     e3a:	4770      	bx	lr

00000e3c <ADC_ClearFlag>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
     e3c:	b480      	push	{r7}
     e3e:	b083      	sub	sp, #12
     e40:	af00      	add	r7, sp, #0
     e42:	6078      	str	r0, [r7, #4]
     e44:	460b      	mov	r3, r1
     e46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
     e48:	78fb      	ldrb	r3, [r7, #3]
     e4a:	ea6f 0203 	mvn.w	r2, r3
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	601a      	str	r2, [r3, #0]
}
     e52:	f107 070c 	add.w	r7, r7, #12	; 0xc
     e56:	46bd      	mov	sp, r7
     e58:	bc80      	pop	{r7}
     e5a:	4770      	bx	lr

00000e5c <ADC_GetITStatus>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
     e5c:	b480      	push	{r7}
     e5e:	b087      	sub	sp, #28
     e60:	af00      	add	r7, sp, #0
     e62:	6078      	str	r0, [r7, #4]
     e64:	460b      	mov	r3, r1
     e66:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
     e68:	f04f 0300 	mov.w	r3, #0	; 0x0
     e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t itmask = 0, enablestatus = 0;
     e6e:	f04f 0300 	mov.w	r3, #0	; 0x0
     e72:	613b      	str	r3, [r7, #16]
     e74:	f04f 0300 	mov.w	r3, #0	; 0x0
     e78:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
     e7a:	887b      	ldrh	r3, [r7, #2]
     e7c:	ea4f 2313 	mov.w	r3, r3, lsr #8
     e80:	b29b      	uxth	r3, r3
     e82:	613b      	str	r3, [r7, #16]
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
     e84:	687b      	ldr	r3, [r7, #4]
     e86:	685a      	ldr	r2, [r3, #4]
     e88:	887b      	ldrh	r3, [r7, #2]
     e8a:	b2db      	uxtb	r3, r3
     e8c:	ea02 0303 	and.w	r3, r2, r3
     e90:	617b      	str	r3, [r7, #20]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
     e92:	687b      	ldr	r3, [r7, #4]
     e94:	681a      	ldr	r2, [r3, #0]
     e96:	693b      	ldr	r3, [r7, #16]
     e98:	ea02 0303 	and.w	r3, r2, r3
     e9c:	2b00      	cmp	r3, #0
     e9e:	d006      	beq.n	eae <ADC_GetITStatus+0x52>
     ea0:	697b      	ldr	r3, [r7, #20]
     ea2:	2b00      	cmp	r3, #0
     ea4:	d003      	beq.n	eae <ADC_GetITStatus+0x52>
  {
    /* ADC_IT is set */
    bitstatus = SET;
     ea6:	f04f 0301 	mov.w	r3, #1	; 0x1
     eaa:	73fb      	strb	r3, [r7, #15]
     eac:	e002      	b.n	eb4 <ADC_GetITStatus+0x58>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
     eae:	f04f 0300 	mov.w	r3, #0	; 0x0
     eb2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
     eb4:	7bfb      	ldrb	r3, [r7, #15]
}
     eb6:	4618      	mov	r0, r3
     eb8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
     ebc:	46bd      	mov	sp, r7
     ebe:	bc80      	pop	{r7}
     ec0:	4770      	bx	lr
     ec2:	46c0      	nop			(mov r8, r8)

00000ec4 <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
     ec4:	b480      	push	{r7}
     ec6:	b085      	sub	sp, #20
     ec8:	af00      	add	r7, sp, #0
     eca:	6078      	str	r0, [r7, #4]
     ecc:	460b      	mov	r3, r1
     ece:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
     ed0:	f04f 0300 	mov.w	r3, #0	; 0x0
     ed4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
     ed6:	887b      	ldrh	r3, [r7, #2]
     ed8:	ea4f 2313 	mov.w	r3, r3, lsr #8
     edc:	b29b      	uxth	r3, r3
     ede:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
     ee0:	7bfb      	ldrb	r3, [r7, #15]
     ee2:	ea6f 0203 	mvn.w	r2, r3
     ee6:	687b      	ldr	r3, [r7, #4]
     ee8:	601a      	str	r2, [r3, #0]
}
     eea:	f107 0714 	add.w	r7, r7, #20	; 0x14
     eee:	46bd      	mov	sp, r7
     ef0:	bc80      	pop	{r7}
     ef2:	4770      	bx	lr

00000ef4 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
     ef4:	b480      	push	{r7}
     ef6:	b083      	sub	sp, #12
     ef8:	af00      	add	r7, sp, #0
     efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
     efc:	687b      	ldr	r3, [r7, #4]
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	f023 0201 	bic.w	r2, r3, #1	; 0x1
     f04:	687b      	ldr	r3, [r7, #4]
     f06:	601a      	str	r2, [r3, #0]
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
     f08:	687a      	ldr	r2, [r7, #4]
     f0a:	f04f 0300 	mov.w	r3, #0	; 0x0
     f0e:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
     f10:	687a      	ldr	r2, [r7, #4]
     f12:	f04f 0300 	mov.w	r3, #0	; 0x0
     f16:	6053      	str	r3, [r2, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
     f18:	687a      	ldr	r2, [r7, #4]
     f1a:	f04f 0300 	mov.w	r3, #0	; 0x0
     f1e:	6093      	str	r3, [r2, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
     f20:	687a      	ldr	r2, [r7, #4]
     f22:	f04f 0300 	mov.w	r3, #0	; 0x0
     f26:	60d3      	str	r3, [r2, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
     f28:	687a      	ldr	r2, [r7, #4]
     f2a:	4b43      	ldr	r3, [pc, #268]	(1038 <DMA_DeInit+0x144>)
     f2c:	429a      	cmp	r2, r3
     f2e:	d106      	bne.n	f3e <DMA_DeInit+0x4a>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
     f30:	4a42      	ldr	r2, [pc, #264]	(103c <DMA_DeInit+0x148>)
     f32:	4b42      	ldr	r3, [pc, #264]	(103c <DMA_DeInit+0x148>)
     f34:	685b      	ldr	r3, [r3, #4]
     f36:	f043 030f 	orr.w	r3, r3, #15	; 0xf
     f3a:	6053      	str	r3, [r2, #4]
     f3c:	e077      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
     f3e:	687a      	ldr	r2, [r7, #4]
     f40:	4b3f      	ldr	r3, [pc, #252]	(1040 <DMA_DeInit+0x14c>)
     f42:	429a      	cmp	r2, r3
     f44:	d106      	bne.n	f54 <DMA_DeInit+0x60>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
     f46:	4a3d      	ldr	r2, [pc, #244]	(103c <DMA_DeInit+0x148>)
     f48:	4b3c      	ldr	r3, [pc, #240]	(103c <DMA_DeInit+0x148>)
     f4a:	685b      	ldr	r3, [r3, #4]
     f4c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
     f50:	6053      	str	r3, [r2, #4]
     f52:	e06c      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
     f54:	687a      	ldr	r2, [r7, #4]
     f56:	4b3b      	ldr	r3, [pc, #236]	(1044 <DMA_DeInit+0x150>)
     f58:	429a      	cmp	r2, r3
     f5a:	d106      	bne.n	f6a <DMA_DeInit+0x76>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
     f5c:	4a37      	ldr	r2, [pc, #220]	(103c <DMA_DeInit+0x148>)
     f5e:	4b37      	ldr	r3, [pc, #220]	(103c <DMA_DeInit+0x148>)
     f60:	685b      	ldr	r3, [r3, #4]
     f62:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
     f66:	6053      	str	r3, [r2, #4]
     f68:	e061      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
     f6a:	687a      	ldr	r2, [r7, #4]
     f6c:	4b36      	ldr	r3, [pc, #216]	(1048 <DMA_DeInit+0x154>)
     f6e:	429a      	cmp	r2, r3
     f70:	d106      	bne.n	f80 <DMA_DeInit+0x8c>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
     f72:	4a32      	ldr	r2, [pc, #200]	(103c <DMA_DeInit+0x148>)
     f74:	4b31      	ldr	r3, [pc, #196]	(103c <DMA_DeInit+0x148>)
     f76:	685b      	ldr	r3, [r3, #4]
     f78:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
     f7c:	6053      	str	r3, [r2, #4]
     f7e:	e056      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
     f80:	687a      	ldr	r2, [r7, #4]
     f82:	4b32      	ldr	r3, [pc, #200]	(104c <DMA_DeInit+0x158>)
     f84:	429a      	cmp	r2, r3
     f86:	d106      	bne.n	f96 <DMA_DeInit+0xa2>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
     f88:	4a2c      	ldr	r2, [pc, #176]	(103c <DMA_DeInit+0x148>)
     f8a:	4b2c      	ldr	r3, [pc, #176]	(103c <DMA_DeInit+0x148>)
     f8c:	685b      	ldr	r3, [r3, #4]
     f8e:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
     f92:	6053      	str	r3, [r2, #4]
     f94:	e04b      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
     f96:	687a      	ldr	r2, [r7, #4]
     f98:	4b2d      	ldr	r3, [pc, #180]	(1050 <DMA_DeInit+0x15c>)
     f9a:	429a      	cmp	r2, r3
     f9c:	d106      	bne.n	fac <DMA_DeInit+0xb8>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
     f9e:	4a27      	ldr	r2, [pc, #156]	(103c <DMA_DeInit+0x148>)
     fa0:	4b26      	ldr	r3, [pc, #152]	(103c <DMA_DeInit+0x148>)
     fa2:	685b      	ldr	r3, [r3, #4]
     fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     fa8:	6053      	str	r3, [r2, #4]
     faa:	e040      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
     fac:	687a      	ldr	r2, [r7, #4]
     fae:	4b29      	ldr	r3, [pc, #164]	(1054 <DMA_DeInit+0x160>)
     fb0:	429a      	cmp	r2, r3
     fb2:	d106      	bne.n	fc2 <DMA_DeInit+0xce>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
     fb4:	4a21      	ldr	r2, [pc, #132]	(103c <DMA_DeInit+0x148>)
     fb6:	4b21      	ldr	r3, [pc, #132]	(103c <DMA_DeInit+0x148>)
     fb8:	685b      	ldr	r3, [r3, #4]
     fba:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
     fbe:	6053      	str	r3, [r2, #4]
     fc0:	e035      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
     fc2:	687a      	ldr	r2, [r7, #4]
     fc4:	4b24      	ldr	r3, [pc, #144]	(1058 <DMA_DeInit+0x164>)
     fc6:	429a      	cmp	r2, r3
     fc8:	d106      	bne.n	fd8 <DMA_DeInit+0xe4>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
     fca:	4a24      	ldr	r2, [pc, #144]	(105c <DMA_DeInit+0x168>)
     fcc:	4b23      	ldr	r3, [pc, #140]	(105c <DMA_DeInit+0x168>)
     fce:	685b      	ldr	r3, [r3, #4]
     fd0:	f043 030f 	orr.w	r3, r3, #15	; 0xf
     fd4:	6053      	str	r3, [r2, #4]
     fd6:	e02a      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
     fd8:	687a      	ldr	r2, [r7, #4]
     fda:	4b21      	ldr	r3, [pc, #132]	(1060 <DMA_DeInit+0x16c>)
     fdc:	429a      	cmp	r2, r3
     fde:	d106      	bne.n	fee <DMA_DeInit+0xfa>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
     fe0:	4a1e      	ldr	r2, [pc, #120]	(105c <DMA_DeInit+0x168>)
     fe2:	4b1e      	ldr	r3, [pc, #120]	(105c <DMA_DeInit+0x168>)
     fe4:	685b      	ldr	r3, [r3, #4]
     fe6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
     fea:	6053      	str	r3, [r2, #4]
     fec:	e01f      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
     fee:	687a      	ldr	r2, [r7, #4]
     ff0:	4b1c      	ldr	r3, [pc, #112]	(1064 <DMA_DeInit+0x170>)
     ff2:	429a      	cmp	r2, r3
     ff4:	d106      	bne.n	1004 <DMA_DeInit+0x110>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
     ff6:	4a19      	ldr	r2, [pc, #100]	(105c <DMA_DeInit+0x168>)
     ff8:	4b18      	ldr	r3, [pc, #96]	(105c <DMA_DeInit+0x168>)
     ffa:	685b      	ldr	r3, [r3, #4]
     ffc:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    1000:	6053      	str	r3, [r2, #4]
    1002:	e014      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
    1004:	687a      	ldr	r2, [r7, #4]
    1006:	4b18      	ldr	r3, [pc, #96]	(1068 <DMA_DeInit+0x174>)
    1008:	429a      	cmp	r2, r3
    100a:	d106      	bne.n	101a <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
    100c:	4a13      	ldr	r2, [pc, #76]	(105c <DMA_DeInit+0x168>)
    100e:	4b13      	ldr	r3, [pc, #76]	(105c <DMA_DeInit+0x168>)
    1010:	685b      	ldr	r3, [r3, #4]
    1012:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
    1016:	6053      	str	r3, [r2, #4]
    1018:	e009      	b.n	102e <DMA_DeInit+0x13a>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
    101a:	687a      	ldr	r2, [r7, #4]
    101c:	4b13      	ldr	r3, [pc, #76]	(106c <DMA_DeInit+0x178>)
    101e:	429a      	cmp	r2, r3
    1020:	d105      	bne.n	102e <DMA_DeInit+0x13a>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    1022:	4a0e      	ldr	r2, [pc, #56]	(105c <DMA_DeInit+0x168>)
    1024:	4b0d      	ldr	r3, [pc, #52]	(105c <DMA_DeInit+0x168>)
    1026:	685b      	ldr	r3, [r3, #4]
    1028:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    102c:	6053      	str	r3, [r2, #4]
    }
  }
}
    102e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1032:	46bd      	mov	sp, r7
    1034:	bc80      	pop	{r7}
    1036:	4770      	bx	lr
    1038:	40020008 	.word	0x40020008
    103c:	40020000 	.word	0x40020000
    1040:	4002001c 	.word	0x4002001c
    1044:	40020030 	.word	0x40020030
    1048:	40020044 	.word	0x40020044
    104c:	40020058 	.word	0x40020058
    1050:	4002006c 	.word	0x4002006c
    1054:	40020080 	.word	0x40020080
    1058:	40020408 	.word	0x40020408
    105c:	40020400 	.word	0x40020400
    1060:	4002041c 	.word	0x4002041c
    1064:	40020430 	.word	0x40020430
    1068:	40020444 	.word	0x40020444
    106c:	40020458 	.word	0x40020458

00001070 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *   contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
    1070:	b480      	push	{r7}
    1072:	b085      	sub	sp, #20
    1074:	af00      	add	r7, sp, #0
    1076:	6078      	str	r0, [r7, #4]
    1078:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    107a:	f04f 0300 	mov.w	r3, #0	; 0x0
    107e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
    1080:	687b      	ldr	r3, [r7, #4]
    1082:	681b      	ldr	r3, [r3, #0]
    1084:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
    1086:	68fb      	ldr	r3, [r7, #12]
    1088:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
    108c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1090:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
    1092:	683b      	ldr	r3, [r7, #0]
    1094:	689a      	ldr	r2, [r3, #8]
    1096:	683b      	ldr	r3, [r7, #0]
    1098:	6a1b      	ldr	r3, [r3, #32]
    109a:	ea42 0203 	orr.w	r2, r2, r3
    109e:	683b      	ldr	r3, [r7, #0]
    10a0:	691b      	ldr	r3, [r3, #16]
    10a2:	ea42 0203 	orr.w	r2, r2, r3
    10a6:	683b      	ldr	r3, [r7, #0]
    10a8:	695b      	ldr	r3, [r3, #20]
    10aa:	ea42 0203 	orr.w	r2, r2, r3
    10ae:	683b      	ldr	r3, [r7, #0]
    10b0:	699b      	ldr	r3, [r3, #24]
    10b2:	ea42 0203 	orr.w	r2, r2, r3
    10b6:	683b      	ldr	r3, [r7, #0]
    10b8:	69db      	ldr	r3, [r3, #28]
    10ba:	ea42 0203 	orr.w	r2, r2, r3
    10be:	683b      	ldr	r3, [r7, #0]
    10c0:	6a5b      	ldr	r3, [r3, #36]
    10c2:	ea42 0203 	orr.w	r2, r2, r3
    10c6:	683b      	ldr	r3, [r7, #0]
    10c8:	6a9b      	ldr	r3, [r3, #40]
    10ca:	ea42 0203 	orr.w	r2, r2, r3
    10ce:	68fb      	ldr	r3, [r7, #12]
    10d0:	ea43 0302 	orr.w	r3, r3, r2
    10d4:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
    10d6:	687a      	ldr	r2, [r7, #4]
    10d8:	68fb      	ldr	r3, [r7, #12]
    10da:	6013      	str	r3, [r2, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
    10dc:	683b      	ldr	r3, [r7, #0]
    10de:	68da      	ldr	r2, [r3, #12]
    10e0:	687b      	ldr	r3, [r7, #4]
    10e2:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
    10e4:	683b      	ldr	r3, [r7, #0]
    10e6:	681a      	ldr	r2, [r3, #0]
    10e8:	687b      	ldr	r3, [r7, #4]
    10ea:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
    10ec:	683b      	ldr	r3, [r7, #0]
    10ee:	685a      	ldr	r2, [r3, #4]
    10f0:	687b      	ldr	r3, [r7, #4]
    10f2:	60da      	str	r2, [r3, #12]
}
    10f4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    10f8:	46bd      	mov	sp, r7
    10fa:	bc80      	pop	{r7}
    10fc:	4770      	bx	lr
    10fe:	46c0      	nop			(mov r8, r8)

00001100 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
    1100:	b480      	push	{r7}
    1102:	b083      	sub	sp, #12
    1104:	af00      	add	r7, sp, #0
    1106:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f04f 0300 	mov.w	r3, #0	; 0x0
    110e:	6013      	str	r3, [r2, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
    1110:	687a      	ldr	r2, [r7, #4]
    1112:	f04f 0300 	mov.w	r3, #0	; 0x0
    1116:	6053      	str	r3, [r2, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
    1118:	687a      	ldr	r2, [r7, #4]
    111a:	f04f 0300 	mov.w	r3, #0	; 0x0
    111e:	6093      	str	r3, [r2, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
    1120:	687a      	ldr	r2, [r7, #4]
    1122:	f04f 0300 	mov.w	r3, #0	; 0x0
    1126:	60d3      	str	r3, [r2, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f04f 0300 	mov.w	r3, #0	; 0x0
    112e:	6113      	str	r3, [r2, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
    1130:	687a      	ldr	r2, [r7, #4]
    1132:	f04f 0300 	mov.w	r3, #0	; 0x0
    1136:	6153      	str	r3, [r2, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    1138:	687a      	ldr	r2, [r7, #4]
    113a:	f04f 0300 	mov.w	r3, #0	; 0x0
    113e:	6193      	str	r3, [r2, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    1140:	687a      	ldr	r2, [r7, #4]
    1142:	f04f 0300 	mov.w	r3, #0	; 0x0
    1146:	61d3      	str	r3, [r2, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
    1148:	687a      	ldr	r2, [r7, #4]
    114a:	f04f 0300 	mov.w	r3, #0	; 0x0
    114e:	6213      	str	r3, [r2, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
    1150:	687a      	ldr	r2, [r7, #4]
    1152:	f04f 0300 	mov.w	r3, #0	; 0x0
    1156:	6253      	str	r3, [r2, #36]
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
    1158:	687a      	ldr	r2, [r7, #4]
    115a:	f04f 0300 	mov.w	r3, #0	; 0x0
    115e:	6293      	str	r3, [r2, #40]
}
    1160:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1164:	46bd      	mov	sp, r7
    1166:	bc80      	pop	{r7}
    1168:	4770      	bx	lr
    116a:	46c0      	nop			(mov r8, r8)

0000116c <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
    116c:	b480      	push	{r7}
    116e:	b083      	sub	sp, #12
    1170:	af00      	add	r7, sp, #0
    1172:	6078      	str	r0, [r7, #4]
    1174:	460b      	mov	r3, r1
    1176:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1178:	78fb      	ldrb	r3, [r7, #3]
    117a:	2b00      	cmp	r3, #0
    117c:	d006      	beq.n	118c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= CCR_ENABLE_Set;
    117e:	687b      	ldr	r3, [r7, #4]
    1180:	681b      	ldr	r3, [r3, #0]
    1182:	f043 0201 	orr.w	r2, r3, #1	; 0x1
    1186:	687b      	ldr	r3, [r7, #4]
    1188:	601a      	str	r2, [r3, #0]
    118a:	e005      	b.n	1198 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
    118c:	687b      	ldr	r3, [r7, #4]
    118e:	681b      	ldr	r3, [r3, #0]
    1190:	f023 0201 	bic.w	r2, r3, #1	; 0x1
    1194:	687b      	ldr	r3, [r7, #4]
    1196:	601a      	str	r2, [r3, #0]
  }
}
    1198:	f107 070c 	add.w	r7, r7, #12	; 0xc
    119c:	46bd      	mov	sp, r7
    119e:	bc80      	pop	{r7}
    11a0:	4770      	bx	lr
    11a2:	46c0      	nop			(mov r8, r8)

000011a4 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
    11a4:	b480      	push	{r7}
    11a6:	b085      	sub	sp, #20
    11a8:	af00      	add	r7, sp, #0
    11aa:	60f8      	str	r0, [r7, #12]
    11ac:	60b9      	str	r1, [r7, #8]
    11ae:	4613      	mov	r3, r2
    11b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    11b2:	79fb      	ldrb	r3, [r7, #7]
    11b4:	2b00      	cmp	r3, #0
    11b6:	d007      	beq.n	11c8 <DMA_ITConfig+0x24>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
    11b8:	68fb      	ldr	r3, [r7, #12]
    11ba:	681a      	ldr	r2, [r3, #0]
    11bc:	68bb      	ldr	r3, [r7, #8]
    11be:	ea42 0203 	orr.w	r2, r2, r3
    11c2:	68fb      	ldr	r3, [r7, #12]
    11c4:	601a      	str	r2, [r3, #0]
    11c6:	e008      	b.n	11da <DMA_ITConfig+0x36>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
    11c8:	68fb      	ldr	r3, [r7, #12]
    11ca:	681a      	ldr	r2, [r3, #0]
    11cc:	68bb      	ldr	r3, [r7, #8]
    11ce:	ea6f 0303 	mvn.w	r3, r3
    11d2:	ea02 0203 	and.w	r2, r2, r3
    11d6:	68fb      	ldr	r3, [r7, #12]
    11d8:	601a      	str	r2, [r3, #0]
  }
}
    11da:	f107 0714 	add.w	r7, r7, #20	; 0x14
    11de:	46bd      	mov	sp, r7
    11e0:	bc80      	pop	{r7}
    11e2:	4770      	bx	lr

000011e4 <DMA_GetCurrDataCounter>:
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *   transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
    11e4:	b480      	push	{r7}
    11e6:	b083      	sub	sp, #12
    11e8:	af00      	add	r7, sp, #0
    11ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
    11ec:	687b      	ldr	r3, [r7, #4]
    11ee:	685b      	ldr	r3, [r3, #4]
    11f0:	b29b      	uxth	r3, r3
}
    11f2:	4618      	mov	r0, r3
    11f4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    11f8:	46bd      	mov	sp, r7
    11fa:	bc80      	pop	{r7}
    11fc:	4770      	bx	lr
    11fe:	46c0      	nop			(mov r8, r8)

00001200 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG)
{
    1200:	b480      	push	{r7}
    1202:	b085      	sub	sp, #20
    1204:	af00      	add	r7, sp, #0
    1206:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    1208:	f04f 0300 	mov.w	r3, #0	; 0x0
    120c:	72fb      	strb	r3, [r7, #11]
  uint32_t tmpreg = 0;
    120e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1212:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Calculate the used DMA */
  if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    121a:	2b00      	cmp	r3, #0
    121c:	d003      	beq.n	1226 <DMA_GetFlagStatus+0x26>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
    121e:	4b0d      	ldr	r3, [pc, #52]	(1254 <DMA_GetFlagStatus+0x54>)
    1220:	681b      	ldr	r3, [r3, #0]
    1222:	60fb      	str	r3, [r7, #12]
    1224:	e002      	b.n	122c <DMA_GetFlagStatus+0x2c>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
    1226:	4b0c      	ldr	r3, [pc, #48]	(1258 <DMA_GetFlagStatus+0x58>)
    1228:	681b      	ldr	r3, [r3, #0]
    122a:	60fb      	str	r3, [r7, #12]
  }

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
    122c:	68fb      	ldr	r3, [r7, #12]
    122e:	687a      	ldr	r2, [r7, #4]
    1230:	ea03 0302 	and.w	r3, r3, r2
    1234:	2b00      	cmp	r3, #0
    1236:	d003      	beq.n	1240 <DMA_GetFlagStatus+0x40>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
    1238:	f04f 0301 	mov.w	r3, #1	; 0x1
    123c:	72fb      	strb	r3, [r7, #11]
    123e:	e002      	b.n	1246 <DMA_GetFlagStatus+0x46>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
    1240:	f04f 0300 	mov.w	r3, #0	; 0x0
    1244:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Return the DMA_FLAG status */
  return  bitstatus;
    1246:	7afb      	ldrb	r3, [r7, #11]
}
    1248:	4618      	mov	r0, r3
    124a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    124e:	46bd      	mov	sp, r7
    1250:	bc80      	pop	{r7}
    1252:	4770      	bx	lr
    1254:	40020400 	.word	0x40020400
    1258:	40020000 	.word	0x40020000

0000125c <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMA_FLAG)
{
    125c:	b480      	push	{r7}
    125e:	b083      	sub	sp, #12
    1260:	af00      	add	r7, sp, #0
    1262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
  /* Calculate the used DMA */

  if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
    1264:	687b      	ldr	r3, [r7, #4]
    1266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    126a:	2b00      	cmp	r3, #0
    126c:	d003      	beq.n	1276 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMA flags */
    DMA2->IFCR = DMA_FLAG;
    126e:	4a06      	ldr	r2, [pc, #24]	(1288 <DMA_ClearFlag+0x2c>)
    1270:	687b      	ldr	r3, [r7, #4]
    1272:	6053      	str	r3, [r2, #4]
    1274:	e002      	b.n	127c <DMA_ClearFlag+0x20>
  }
  else
  {
    /* Clear the selected DMA flags */
    DMA1->IFCR = DMA_FLAG;
    1276:	4a05      	ldr	r2, [pc, #20]	(128c <DMA_ClearFlag+0x30>)
    1278:	687b      	ldr	r3, [r7, #4]
    127a:	6053      	str	r3, [r2, #4]
  }
}
    127c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1280:	46bd      	mov	sp, r7
    1282:	bc80      	pop	{r7}
    1284:	4770      	bx	lr
    1286:	46c0      	nop			(mov r8, r8)
    1288:	40020400 	.word	0x40020400
    128c:	40020000 	.word	0x40020000

00001290 <DMA_GetITStatus>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMA_IT)
{
    1290:	b480      	push	{r7}
    1292:	b085      	sub	sp, #20
    1294:	af00      	add	r7, sp, #0
    1296:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    1298:	f04f 0300 	mov.w	r3, #0	; 0x0
    129c:	72fb      	strb	r3, [r7, #11]
  uint32_t tmpreg = 0;
    129e:	f04f 0300 	mov.w	r3, #0	; 0x0
    12a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMA_IT));

  /* Calculate the used DMA */
  if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
    12a4:	687b      	ldr	r3, [r7, #4]
    12a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    12aa:	2b00      	cmp	r3, #0
    12ac:	d003      	beq.n	12b6 <DMA_GetITStatus+0x26>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
    12ae:	4b0d      	ldr	r3, [pc, #52]	(12e4 <DMA_GetITStatus+0x54>)
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	60fb      	str	r3, [r7, #12]
    12b4:	e002      	b.n	12bc <DMA_GetITStatus+0x2c>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
    12b6:	4b0c      	ldr	r3, [pc, #48]	(12e8 <DMA_GetITStatus+0x58>)
    12b8:	681b      	ldr	r3, [r3, #0]
    12ba:	60fb      	str	r3, [r7, #12]
  }

  /* Check the status of the specified DMA interrupt */
  if ((tmpreg & DMA_IT) != (uint32_t)RESET)
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	687a      	ldr	r2, [r7, #4]
    12c0:	ea03 0302 	and.w	r3, r3, r2
    12c4:	2b00      	cmp	r3, #0
    12c6:	d003      	beq.n	12d0 <DMA_GetITStatus+0x40>
  {
    /* DMA_IT is set */
    bitstatus = SET;
    12c8:	f04f 0301 	mov.w	r3, #1	; 0x1
    12cc:	72fb      	strb	r3, [r7, #11]
    12ce:	e002      	b.n	12d6 <DMA_GetITStatus+0x46>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
    12d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    12d4:	72fb      	strb	r3, [r7, #11]
  }
  /* Return the DMA_IT status */
  return  bitstatus;
    12d6:	7afb      	ldrb	r3, [r7, #11]
}
    12d8:	4618      	mov	r0, r3
    12da:	f107 0714 	add.w	r7, r7, #20	; 0x14
    12de:	46bd      	mov	sp, r7
    12e0:	bc80      	pop	{r7}
    12e2:	4770      	bx	lr
    12e4:	40020400 	.word	0x40020400
    12e8:	40020000 	.word	0x40020000

000012ec <DMA_ClearITPendingBit>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMA_IT)
{
    12ec:	b480      	push	{r7}
    12ee:	b083      	sub	sp, #12
    12f0:	af00      	add	r7, sp, #0
    12f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Calculate the used DMA */
  if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
    12f4:	687b      	ldr	r3, [r7, #4]
    12f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    12fa:	2b00      	cmp	r3, #0
    12fc:	d003      	beq.n	1306 <DMA_ClearITPendingBit+0x1a>
  {
    /* Clear the selected DMA interrupt pending bits */
    DMA2->IFCR = DMA_IT;
    12fe:	4a06      	ldr	r2, [pc, #24]	(1318 <DMA_ClearITPendingBit+0x2c>)
    1300:	687b      	ldr	r3, [r7, #4]
    1302:	6053      	str	r3, [r2, #4]
    1304:	e002      	b.n	130c <DMA_ClearITPendingBit+0x20>
  }
  else
  {
    /* Clear the selected DMA interrupt pending bits */
    DMA1->IFCR = DMA_IT;
    1306:	4a05      	ldr	r2, [pc, #20]	(131c <DMA_ClearITPendingBit+0x30>)
    1308:	687b      	ldr	r3, [r7, #4]
    130a:	6053      	str	r3, [r2, #4]
  }
}
    130c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1310:	46bd      	mov	sp, r7
    1312:	bc80      	pop	{r7}
    1314:	4770      	bx	lr
    1316:	46c0      	nop			(mov r8, r8)
    1318:	40020400 	.word	0x40020400
    131c:	40020000 	.word	0x40020000

00001320 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1320:	b480      	push	{r7}
    1322:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1324:	4a0a      	ldr	r2, [pc, #40]	(1350 <EXTI_DeInit+0x30>)
    1326:	f04f 0300 	mov.w	r3, #0	; 0x0
    132a:	6013      	str	r3, [r2, #0]
  EXTI->EMR = 0x00000000;
    132c:	4a08      	ldr	r2, [pc, #32]	(1350 <EXTI_DeInit+0x30>)
    132e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1332:	6053      	str	r3, [r2, #4]
  EXTI->RTSR = 0x00000000; 
    1334:	4a06      	ldr	r2, [pc, #24]	(1350 <EXTI_DeInit+0x30>)
    1336:	f04f 0300 	mov.w	r3, #0	; 0x0
    133a:	6093      	str	r3, [r2, #8]
  EXTI->FTSR = 0x00000000; 
    133c:	4a04      	ldr	r2, [pc, #16]	(1350 <EXTI_DeInit+0x30>)
    133e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1342:	60d3      	str	r3, [r2, #12]
  EXTI->PR = 0x000FFFFF;
    1344:	4a02      	ldr	r2, [pc, #8]	(1350 <EXTI_DeInit+0x30>)
    1346:	4b03      	ldr	r3, [pc, #12]	(1354 <EXTI_DeInit+0x34>)
    1348:	6153      	str	r3, [r2, #20]
}
    134a:	46bd      	mov	sp, r7
    134c:	bc80      	pop	{r7}
    134e:	4770      	bx	lr
    1350:	40010400 	.word	0x40010400
    1354:	000fffff 	.word	0x000fffff

00001358 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *   that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1360:	f04f 0300 	mov.w	r3, #0	; 0x0
    1364:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1366:	4b3b      	ldr	r3, [pc, #236]	(1454 <EXTI_Init+0xfc>)
    1368:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    136a:	687b      	ldr	r3, [r7, #4]
    136c:	799b      	ldrb	r3, [r3, #6]
    136e:	2b00      	cmp	r3, #0
    1370:	d05b      	beq.n	142a <EXTI_Init+0xd2>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1372:	4938      	ldr	r1, [pc, #224]	(1454 <EXTI_Init+0xfc>)
    1374:	4b37      	ldr	r3, [pc, #220]	(1454 <EXTI_Init+0xfc>)
    1376:	681a      	ldr	r2, [r3, #0]
    1378:	687b      	ldr	r3, [r7, #4]
    137a:	681b      	ldr	r3, [r3, #0]
    137c:	ea6f 0303 	mvn.w	r3, r3
    1380:	ea02 0303 	and.w	r3, r2, r3
    1384:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    1386:	4933      	ldr	r1, [pc, #204]	(1454 <EXTI_Init+0xfc>)
    1388:	4b32      	ldr	r3, [pc, #200]	(1454 <EXTI_Init+0xfc>)
    138a:	685a      	ldr	r2, [r3, #4]
    138c:	687b      	ldr	r3, [r7, #4]
    138e:	681b      	ldr	r3, [r3, #0]
    1390:	ea6f 0303 	mvn.w	r3, r3
    1394:	ea02 0303 	and.w	r3, r2, r3
    1398:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
    139a:	687b      	ldr	r3, [r7, #4]
    139c:	791b      	ldrb	r3, [r3, #4]
    139e:	461a      	mov	r2, r3
    13a0:	68fb      	ldr	r3, [r7, #12]
    13a2:	4413      	add	r3, r2
    13a4:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    13a6:	68f9      	ldr	r1, [r7, #12]
    13a8:	68fb      	ldr	r3, [r7, #12]
    13aa:	681a      	ldr	r2, [r3, #0]
    13ac:	687b      	ldr	r3, [r7, #4]
    13ae:	681b      	ldr	r3, [r3, #0]
    13b0:	ea42 0303 	orr.w	r3, r2, r3
    13b4:	600b      	str	r3, [r1, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    13b6:	4927      	ldr	r1, [pc, #156]	(1454 <EXTI_Init+0xfc>)
    13b8:	4b26      	ldr	r3, [pc, #152]	(1454 <EXTI_Init+0xfc>)
    13ba:	689a      	ldr	r2, [r3, #8]
    13bc:	687b      	ldr	r3, [r7, #4]
    13be:	681b      	ldr	r3, [r3, #0]
    13c0:	ea6f 0303 	mvn.w	r3, r3
    13c4:	ea02 0303 	and.w	r3, r2, r3
    13c8:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    13ca:	4922      	ldr	r1, [pc, #136]	(1454 <EXTI_Init+0xfc>)
    13cc:	4b21      	ldr	r3, [pc, #132]	(1454 <EXTI_Init+0xfc>)
    13ce:	68da      	ldr	r2, [r3, #12]
    13d0:	687b      	ldr	r3, [r7, #4]
    13d2:	681b      	ldr	r3, [r3, #0]
    13d4:	ea6f 0303 	mvn.w	r3, r3
    13d8:	ea02 0303 	and.w	r3, r2, r3
    13dc:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    13de:	687b      	ldr	r3, [r7, #4]
    13e0:	795b      	ldrb	r3, [r3, #5]
    13e2:	2b10      	cmp	r3, #16
    13e4:	d110      	bne.n	1408 <EXTI_Init+0xb0>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    13e6:	491b      	ldr	r1, [pc, #108]	(1454 <EXTI_Init+0xfc>)
    13e8:	4b1a      	ldr	r3, [pc, #104]	(1454 <EXTI_Init+0xfc>)
    13ea:	689a      	ldr	r2, [r3, #8]
    13ec:	687b      	ldr	r3, [r7, #4]
    13ee:	681b      	ldr	r3, [r3, #0]
    13f0:	ea42 0303 	orr.w	r3, r2, r3
    13f4:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    13f6:	4917      	ldr	r1, [pc, #92]	(1454 <EXTI_Init+0xfc>)
    13f8:	4b16      	ldr	r3, [pc, #88]	(1454 <EXTI_Init+0xfc>)
    13fa:	68da      	ldr	r2, [r3, #12]
    13fc:	687b      	ldr	r3, [r7, #4]
    13fe:	681b      	ldr	r3, [r3, #0]
    1400:	ea42 0303 	orr.w	r3, r2, r3
    1404:	60cb      	str	r3, [r1, #12]
    1406:	e020      	b.n	144a <EXTI_Init+0xf2>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    1408:	4b12      	ldr	r3, [pc, #72]	(1454 <EXTI_Init+0xfc>)
    140a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    140c:	687b      	ldr	r3, [r7, #4]
    140e:	795b      	ldrb	r3, [r3, #5]
    1410:	461a      	mov	r2, r3
    1412:	68fb      	ldr	r3, [r7, #12]
    1414:	4413      	add	r3, r2
    1416:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    1418:	68f9      	ldr	r1, [r7, #12]
    141a:	68fb      	ldr	r3, [r7, #12]
    141c:	681a      	ldr	r2, [r3, #0]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	681b      	ldr	r3, [r3, #0]
    1422:	ea42 0303 	orr.w	r3, r2, r3
    1426:	600b      	str	r3, [r1, #0]
    1428:	e00f      	b.n	144a <EXTI_Init+0xf2>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    142a:	687b      	ldr	r3, [r7, #4]
    142c:	791b      	ldrb	r3, [r3, #4]
    142e:	461a      	mov	r2, r3
    1430:	68fb      	ldr	r3, [r7, #12]
    1432:	4413      	add	r3, r2
    1434:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    1436:	68f9      	ldr	r1, [r7, #12]
    1438:	68fb      	ldr	r3, [r7, #12]
    143a:	681a      	ldr	r2, [r3, #0]
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	ea6f 0303 	mvn.w	r3, r3
    1444:	ea02 0303 	and.w	r3, r2, r3
    1448:	600b      	str	r3, [r1, #0]
  }
}
    144a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    144e:	46bd      	mov	sp, r7
    1450:	bc80      	pop	{r7}
    1452:	4770      	bx	lr
    1454:	40010400 	.word	0x40010400

00001458 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1458:	b480      	push	{r7}
    145a:	b083      	sub	sp, #12
    145c:	af00      	add	r7, sp, #0
    145e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LineNone;
    1460:	687a      	ldr	r2, [r7, #4]
    1462:	f04f 0300 	mov.w	r3, #0	; 0x0
    1466:	6013      	str	r3, [r2, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    1468:	687a      	ldr	r2, [r7, #4]
    146a:	f04f 0300 	mov.w	r3, #0	; 0x0
    146e:	7113      	strb	r3, [r2, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    1470:	687a      	ldr	r2, [r7, #4]
    1472:	f04f 030c 	mov.w	r3, #12	; 0xc
    1476:	7153      	strb	r3, [r2, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    1478:	687a      	ldr	r2, [r7, #4]
    147a:	f04f 0300 	mov.w	r3, #0	; 0x0
    147e:	7193      	strb	r3, [r2, #6]
}
    1480:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1484:	46bd      	mov	sp, r7
    1486:	bc80      	pop	{r7}
    1488:	4770      	bx	lr
    148a:	46c0      	nop			(mov r8, r8)

0000148c <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    148c:	b480      	push	{r7}
    148e:	b083      	sub	sp, #12
    1490:	af00      	add	r7, sp, #0
    1492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
    1494:	4905      	ldr	r1, [pc, #20]	(14ac <EXTI_GenerateSWInterrupt+0x20>)
    1496:	4b05      	ldr	r3, [pc, #20]	(14ac <EXTI_GenerateSWInterrupt+0x20>)
    1498:	691a      	ldr	r2, [r3, #16]
    149a:	687b      	ldr	r3, [r7, #4]
    149c:	ea42 0303 	orr.w	r3, r2, r3
    14a0:	610b      	str	r3, [r1, #16]
}
    14a2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    14a6:	46bd      	mov	sp, r7
    14a8:	bc80      	pop	{r7}
    14aa:	4770      	bx	lr
    14ac:	40010400 	.word	0x40010400

000014b0 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    14b0:	b480      	push	{r7}
    14b2:	b085      	sub	sp, #20
    14b4:	af00      	add	r7, sp, #0
    14b6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    14b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    14bc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    14be:	4b0a      	ldr	r3, [pc, #40]	(14e8 <EXTI_GetFlagStatus+0x38>)
    14c0:	695a      	ldr	r2, [r3, #20]
    14c2:	687b      	ldr	r3, [r7, #4]
    14c4:	ea02 0303 	and.w	r3, r2, r3
    14c8:	2b00      	cmp	r3, #0
    14ca:	d003      	beq.n	14d4 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    14cc:	f04f 0301 	mov.w	r3, #1	; 0x1
    14d0:	73fb      	strb	r3, [r7, #15]
    14d2:	e002      	b.n	14da <EXTI_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    14d4:	f04f 0300 	mov.w	r3, #0	; 0x0
    14d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    14da:	7bfb      	ldrb	r3, [r7, #15]
}
    14dc:	4618      	mov	r0, r3
    14de:	f107 0714 	add.w	r7, r7, #20	; 0x14
    14e2:	46bd      	mov	sp, r7
    14e4:	bc80      	pop	{r7}
    14e6:	4770      	bx	lr
    14e8:	40010400 	.word	0x40010400

000014ec <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    14ec:	b480      	push	{r7}
    14ee:	b083      	sub	sp, #12
    14f0:	af00      	add	r7, sp, #0
    14f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    14f4:	4a03      	ldr	r2, [pc, #12]	(1504 <EXTI_ClearFlag+0x18>)
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	6153      	str	r3, [r2, #20]
}
    14fa:	f107 070c 	add.w	r7, r7, #12	; 0xc
    14fe:	46bd      	mov	sp, r7
    1500:	bc80      	pop	{r7}
    1502:	4770      	bx	lr
    1504:	40010400 	.word	0x40010400

00001508 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    1508:	b480      	push	{r7}
    150a:	b085      	sub	sp, #20
    150c:	af00      	add	r7, sp, #0
    150e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    1510:	f04f 0300 	mov.w	r3, #0	; 0x0
    1514:	72fb      	strb	r3, [r7, #11]
  uint32_t enablestatus = 0;
    1516:	f04f 0300 	mov.w	r3, #0	; 0x0
    151a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
    151c:	4b0e      	ldr	r3, [pc, #56]	(1558 <EXTI_GetITStatus+0x50>)
    151e:	681a      	ldr	r2, [r3, #0]
    1520:	687b      	ldr	r3, [r7, #4]
    1522:	ea02 0303 	and.w	r3, r2, r3
    1526:	60fb      	str	r3, [r7, #12]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    1528:	4b0b      	ldr	r3, [pc, #44]	(1558 <EXTI_GetITStatus+0x50>)
    152a:	695a      	ldr	r2, [r3, #20]
    152c:	687b      	ldr	r3, [r7, #4]
    152e:	ea02 0303 	and.w	r3, r2, r3
    1532:	2b00      	cmp	r3, #0
    1534:	d006      	beq.n	1544 <EXTI_GetITStatus+0x3c>
    1536:	68fb      	ldr	r3, [r7, #12]
    1538:	2b00      	cmp	r3, #0
    153a:	d003      	beq.n	1544 <EXTI_GetITStatus+0x3c>
  {
    bitstatus = SET;
    153c:	f04f 0301 	mov.w	r3, #1	; 0x1
    1540:	72fb      	strb	r3, [r7, #11]
    1542:	e002      	b.n	154a <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    1544:	f04f 0300 	mov.w	r3, #0	; 0x0
    1548:	72fb      	strb	r3, [r7, #11]
  }
  return bitstatus;
    154a:	7afb      	ldrb	r3, [r7, #11]
}
    154c:	4618      	mov	r0, r3
    154e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1552:	46bd      	mov	sp, r7
    1554:	bc80      	pop	{r7}
    1556:	4770      	bx	lr
    1558:	40010400 	.word	0x40010400

0000155c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    155c:	b480      	push	{r7}
    155e:	b083      	sub	sp, #12
    1560:	af00      	add	r7, sp, #0
    1562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    1564:	4a03      	ldr	r2, [pc, #12]	(1574 <EXTI_ClearITPendingBit+0x18>)
    1566:	687b      	ldr	r3, [r7, #4]
    1568:	6153      	str	r3, [r2, #20]
}
    156a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    156e:	46bd      	mov	sp, r7
    1570:	bc80      	pop	{r7}
    1572:	4770      	bx	lr
    1574:	40010400 	.word	0x40010400

00001578 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1578:	b580      	push	{r7, lr}
    157a:	b082      	sub	sp, #8
    157c:	af00      	add	r7, sp, #0
    157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1580:	687a      	ldr	r2, [r7, #4]
    1582:	4b3c      	ldr	r3, [pc, #240]	(1674 <GPIO_DeInit+0xfc>)
    1584:	429a      	cmp	r2, r3
    1586:	d10c      	bne.n	15a2 <GPIO_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1588:	f04f 0004 	mov.w	r0, #4	; 0x4
    158c:	f04f 0101 	mov.w	r1, #1	; 0x1
    1590:	f000 ffc0 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    1594:	f04f 0004 	mov.w	r0, #4	; 0x4
    1598:	f04f 0100 	mov.w	r1, #0	; 0x0
    159c:	f000 ffba 	bl	2514 <RCC_APB2PeriphResetCmd>
    15a0:	e064      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOB)
    15a2:	687a      	ldr	r2, [r7, #4]
    15a4:	4b34      	ldr	r3, [pc, #208]	(1678 <GPIO_DeInit+0x100>)
    15a6:	429a      	cmp	r2, r3
    15a8:	d10c      	bne.n	15c4 <GPIO_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    15aa:	f04f 0008 	mov.w	r0, #8	; 0x8
    15ae:	f04f 0101 	mov.w	r1, #1	; 0x1
    15b2:	f000 ffaf 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    15b6:	f04f 0008 	mov.w	r0, #8	; 0x8
    15ba:	f04f 0100 	mov.w	r1, #0	; 0x0
    15be:	f000 ffa9 	bl	2514 <RCC_APB2PeriphResetCmd>
    15c2:	e053      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOC)
    15c4:	687a      	ldr	r2, [r7, #4]
    15c6:	4b2d      	ldr	r3, [pc, #180]	(167c <GPIO_DeInit+0x104>)
    15c8:	429a      	cmp	r2, r3
    15ca:	d10c      	bne.n	15e6 <GPIO_DeInit+0x6e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    15cc:	f04f 0010 	mov.w	r0, #16	; 0x10
    15d0:	f04f 0101 	mov.w	r1, #1	; 0x1
    15d4:	f000 ff9e 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    15d8:	f04f 0010 	mov.w	r0, #16	; 0x10
    15dc:	f04f 0100 	mov.w	r1, #0	; 0x0
    15e0:	f000 ff98 	bl	2514 <RCC_APB2PeriphResetCmd>
    15e4:	e042      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOD)
    15e6:	687a      	ldr	r2, [r7, #4]
    15e8:	4b25      	ldr	r3, [pc, #148]	(1680 <GPIO_DeInit+0x108>)
    15ea:	429a      	cmp	r2, r3
    15ec:	d10c      	bne.n	1608 <GPIO_DeInit+0x90>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    15ee:	f04f 0020 	mov.w	r0, #32	; 0x20
    15f2:	f04f 0101 	mov.w	r1, #1	; 0x1
    15f6:	f000 ff8d 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    15fa:	f04f 0020 	mov.w	r0, #32	; 0x20
    15fe:	f04f 0100 	mov.w	r1, #0	; 0x0
    1602:	f000 ff87 	bl	2514 <RCC_APB2PeriphResetCmd>
    1606:	e031      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOE)
    1608:	687a      	ldr	r2, [r7, #4]
    160a:	4b1e      	ldr	r3, [pc, #120]	(1684 <GPIO_DeInit+0x10c>)
    160c:	429a      	cmp	r2, r3
    160e:	d10c      	bne.n	162a <GPIO_DeInit+0xb2>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    1610:	f04f 0040 	mov.w	r0, #64	; 0x40
    1614:	f04f 0101 	mov.w	r1, #1	; 0x1
    1618:	f000 ff7c 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    161c:	f04f 0040 	mov.w	r0, #64	; 0x40
    1620:	f04f 0100 	mov.w	r1, #0	; 0x0
    1624:	f000 ff76 	bl	2514 <RCC_APB2PeriphResetCmd>
    1628:	e020      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOF)
    162a:	687a      	ldr	r2, [r7, #4]
    162c:	4b16      	ldr	r3, [pc, #88]	(1688 <GPIO_DeInit+0x110>)
    162e:	429a      	cmp	r2, r3
    1630:	d10c      	bne.n	164c <GPIO_DeInit+0xd4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1632:	f04f 0080 	mov.w	r0, #128	; 0x80
    1636:	f04f 0101 	mov.w	r1, #1	; 0x1
    163a:	f000 ff6b 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    163e:	f04f 0080 	mov.w	r0, #128	; 0x80
    1642:	f04f 0100 	mov.w	r1, #0	; 0x0
    1646:	f000 ff65 	bl	2514 <RCC_APB2PeriphResetCmd>
    164a:	e00f      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else
  {
    if (GPIOx == GPIOG)
    164c:	687a      	ldr	r2, [r7, #4]
    164e:	4b0f      	ldr	r3, [pc, #60]	(168c <GPIO_DeInit+0x114>)
    1650:	429a      	cmp	r2, r3
    1652:	d10b      	bne.n	166c <GPIO_DeInit+0xf4>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1654:	f44f 7080 	mov.w	r0, #256	; 0x100
    1658:	f04f 0101 	mov.w	r1, #1	; 0x1
    165c:	f000 ff5a 	bl	2514 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1660:	f44f 7080 	mov.w	r0, #256	; 0x100
    1664:	f04f 0100 	mov.w	r1, #0	; 0x0
    1668:	f000 ff54 	bl	2514 <RCC_APB2PeriphResetCmd>
    }
  }
}
    166c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    1670:	46bd      	mov	sp, r7
    1672:	bd80      	pop	{r7, pc}
    1674:	40010800 	.word	0x40010800
    1678:	40010c00 	.word	0x40010c00
    167c:	40011000 	.word	0x40011000
    1680:	40011400 	.word	0x40011400
    1684:	40011800 	.word	0x40011800
    1688:	40011c00 	.word	0x40011c00
    168c:	40012000 	.word	0x40012000

00001690 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1690:	b580      	push	{r7, lr}
    1692:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1694:	f04f 0001 	mov.w	r0, #1	; 0x1
    1698:	f04f 0101 	mov.w	r1, #1	; 0x1
    169c:	f000 ff3a 	bl	2514 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    16a0:	f04f 0001 	mov.w	r0, #1	; 0x1
    16a4:	f04f 0100 	mov.w	r1, #0	; 0x0
    16a8:	f000 ff34 	bl	2514 <RCC_APB2PeriphResetCmd>
}
    16ac:	46bd      	mov	sp, r7
    16ae:	bd80      	pop	{r7, pc}

000016b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *   contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    16b0:	b480      	push	{r7}
    16b2:	b089      	sub	sp, #36
    16b4:	af00      	add	r7, sp, #0
    16b6:	6078      	str	r0, [r7, #4]
    16b8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    16ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    16be:	60bb      	str	r3, [r7, #8]
    16c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    16c4:	60fb      	str	r3, [r7, #12]
    16c6:	f04f 0300 	mov.w	r3, #0	; 0x0
    16ca:	613b      	str	r3, [r7, #16]
    16cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    16d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    16d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    16d6:	61bb      	str	r3, [r7, #24]
    16d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    16dc:	61fb      	str	r3, [r7, #28]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    16de:	683b      	ldr	r3, [r7, #0]
    16e0:	78db      	ldrb	r3, [r3, #3]
    16e2:	f003 030f 	and.w	r3, r3, #15	; 0xf
    16e6:	60bb      	str	r3, [r7, #8]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    16e8:	683b      	ldr	r3, [r7, #0]
    16ea:	78db      	ldrb	r3, [r3, #3]
    16ec:	f003 0310 	and.w	r3, r3, #16	; 0x10
    16f0:	2b00      	cmp	r3, #0
    16f2:	d006      	beq.n	1702 <GPIO_Init+0x52>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    16f4:	683b      	ldr	r3, [r7, #0]
    16f6:	789b      	ldrb	r3, [r3, #2]
    16f8:	461a      	mov	r2, r3
    16fa:	68bb      	ldr	r3, [r7, #8]
    16fc:	ea43 0302 	orr.w	r3, r3, r2
    1700:	60bb      	str	r3, [r7, #8]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    1702:	683b      	ldr	r3, [r7, #0]
    1704:	881b      	ldrh	r3, [r3, #0]
    1706:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    170a:	2b00      	cmp	r3, #0
    170c:	d051      	beq.n	17b2 <GPIO_Init+0x102>
  {
    tmpreg = GPIOx->CRL;
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	61bb      	str	r3, [r7, #24]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1714:	f04f 0300 	mov.w	r3, #0	; 0x0
    1718:	613b      	str	r3, [r7, #16]
    171a:	e044      	b.n	17a6 <GPIO_Init+0xf6>
    {
      pos = ((uint32_t)0x01) << pinpos;
    171c:	693a      	ldr	r2, [r7, #16]
    171e:	f04f 0301 	mov.w	r3, #1	; 0x1
    1722:	fa03 f302 	lsl.w	r3, r3, r2
    1726:	617b      	str	r3, [r7, #20]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    1728:	683b      	ldr	r3, [r7, #0]
    172a:	881b      	ldrh	r3, [r3, #0]
    172c:	461a      	mov	r2, r3
    172e:	697b      	ldr	r3, [r7, #20]
    1730:	ea02 0303 	and.w	r3, r2, r3
    1734:	60fb      	str	r3, [r7, #12]
      if (currentpin == pos)
    1736:	68fa      	ldr	r2, [r7, #12]
    1738:	697b      	ldr	r3, [r7, #20]
    173a:	429a      	cmp	r2, r3
    173c:	d12f      	bne.n	179e <GPIO_Init+0xee>
      {
        pos = pinpos << 2;
    173e:	693b      	ldr	r3, [r7, #16]
    1740:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1744:	617b      	str	r3, [r7, #20]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1746:	697a      	ldr	r2, [r7, #20]
    1748:	f04f 030f 	mov.w	r3, #15	; 0xf
    174c:	fa03 f302 	lsl.w	r3, r3, r2
    1750:	61fb      	str	r3, [r7, #28]
        tmpreg &= ~pinmask;
    1752:	69fb      	ldr	r3, [r7, #28]
    1754:	ea6f 0203 	mvn.w	r2, r3
    1758:	69bb      	ldr	r3, [r7, #24]
    175a:	ea03 0302 	and.w	r3, r3, r2
    175e:	61bb      	str	r3, [r7, #24]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1760:	697a      	ldr	r2, [r7, #20]
    1762:	68bb      	ldr	r3, [r7, #8]
    1764:	fa03 f202 	lsl.w	r2, r3, r2
    1768:	69bb      	ldr	r3, [r7, #24]
    176a:	ea43 0302 	orr.w	r3, r3, r2
    176e:	61bb      	str	r3, [r7, #24]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1770:	683b      	ldr	r3, [r7, #0]
    1772:	78db      	ldrb	r3, [r3, #3]
    1774:	2b28      	cmp	r3, #40
    1776:	d107      	bne.n	1788 <GPIO_Init+0xd8>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    1778:	693a      	ldr	r2, [r7, #16]
    177a:	f04f 0301 	mov.w	r3, #1	; 0x1
    177e:	fa03 f202 	lsl.w	r2, r3, r2
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	615a      	str	r2, [r3, #20]
    1786:	e00a      	b.n	179e <GPIO_Init+0xee>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1788:	683b      	ldr	r3, [r7, #0]
    178a:	78db      	ldrb	r3, [r3, #3]
    178c:	2b48      	cmp	r3, #72
    178e:	d106      	bne.n	179e <GPIO_Init+0xee>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1790:	693a      	ldr	r2, [r7, #16]
    1792:	f04f 0301 	mov.w	r3, #1	; 0x1
    1796:	fa03 f202 	lsl.w	r2, r3, r2
    179a:	687b      	ldr	r3, [r7, #4]
    179c:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    179e:	693b      	ldr	r3, [r7, #16]
    17a0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    17a4:	613b      	str	r3, [r7, #16]
    17a6:	693b      	ldr	r3, [r7, #16]
    17a8:	2b07      	cmp	r3, #7
    17aa:	d9b7      	bls.n	171c <GPIO_Init+0x6c>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    17ac:	687a      	ldr	r2, [r7, #4]
    17ae:	69bb      	ldr	r3, [r7, #24]
    17b0:	6013      	str	r3, [r2, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    17b2:	683b      	ldr	r3, [r7, #0]
    17b4:	881b      	ldrh	r3, [r3, #0]
    17b6:	2bff      	cmp	r3, #255
    17b8:	d959      	bls.n	186e <GPIO_Init+0x1be>
  {
    tmpreg = GPIOx->CRH;
    17ba:	687b      	ldr	r3, [r7, #4]
    17bc:	685b      	ldr	r3, [r3, #4]
    17be:	61bb      	str	r3, [r7, #24]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    17c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    17c4:	613b      	str	r3, [r7, #16]
    17c6:	e04c      	b.n	1862 <GPIO_Init+0x1b2>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    17c8:	693b      	ldr	r3, [r7, #16]
    17ca:	f103 0308 	add.w	r3, r3, #8	; 0x8
    17ce:	461a      	mov	r2, r3
    17d0:	f04f 0301 	mov.w	r3, #1	; 0x1
    17d4:	fa03 f302 	lsl.w	r3, r3, r2
    17d8:	617b      	str	r3, [r7, #20]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    17da:	683b      	ldr	r3, [r7, #0]
    17dc:	881b      	ldrh	r3, [r3, #0]
    17de:	461a      	mov	r2, r3
    17e0:	697b      	ldr	r3, [r7, #20]
    17e2:	ea02 0303 	and.w	r3, r2, r3
    17e6:	60fb      	str	r3, [r7, #12]
      if (currentpin == pos)
    17e8:	68fa      	ldr	r2, [r7, #12]
    17ea:	697b      	ldr	r3, [r7, #20]
    17ec:	429a      	cmp	r2, r3
    17ee:	d134      	bne.n	185a <GPIO_Init+0x1aa>
      {
        pos = pinpos << 2;
    17f0:	693b      	ldr	r3, [r7, #16]
    17f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    17f6:	617b      	str	r3, [r7, #20]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    17f8:	697a      	ldr	r2, [r7, #20]
    17fa:	f04f 030f 	mov.w	r3, #15	; 0xf
    17fe:	fa03 f302 	lsl.w	r3, r3, r2
    1802:	61fb      	str	r3, [r7, #28]
        tmpreg &= ~pinmask;
    1804:	69fb      	ldr	r3, [r7, #28]
    1806:	ea6f 0203 	mvn.w	r2, r3
    180a:	69bb      	ldr	r3, [r7, #24]
    180c:	ea03 0302 	and.w	r3, r3, r2
    1810:	61bb      	str	r3, [r7, #24]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1812:	697a      	ldr	r2, [r7, #20]
    1814:	68bb      	ldr	r3, [r7, #8]
    1816:	fa03 f202 	lsl.w	r2, r3, r2
    181a:	69bb      	ldr	r3, [r7, #24]
    181c:	ea43 0302 	orr.w	r3, r3, r2
    1820:	61bb      	str	r3, [r7, #24]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1822:	683b      	ldr	r3, [r7, #0]
    1824:	78db      	ldrb	r3, [r3, #3]
    1826:	2b28      	cmp	r3, #40
    1828:	d109      	bne.n	183e <GPIO_Init+0x18e>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    182a:	693b      	ldr	r3, [r7, #16]
    182c:	f103 0308 	add.w	r3, r3, #8	; 0x8
    1830:	461a      	mov	r2, r3
    1832:	f04f 0301 	mov.w	r3, #1	; 0x1
    1836:	fa03 f202 	lsl.w	r2, r3, r2
    183a:	687b      	ldr	r3, [r7, #4]
    183c:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    183e:	683b      	ldr	r3, [r7, #0]
    1840:	78db      	ldrb	r3, [r3, #3]
    1842:	2b48      	cmp	r3, #72
    1844:	d109      	bne.n	185a <GPIO_Init+0x1aa>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1846:	693b      	ldr	r3, [r7, #16]
    1848:	f103 0308 	add.w	r3, r3, #8	; 0x8
    184c:	461a      	mov	r2, r3
    184e:	f04f 0301 	mov.w	r3, #1	; 0x1
    1852:	fa03 f202 	lsl.w	r2, r3, r2
    1856:	687b      	ldr	r3, [r7, #4]
    1858:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    185a:	693b      	ldr	r3, [r7, #16]
    185c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    1860:	613b      	str	r3, [r7, #16]
    1862:	693b      	ldr	r3, [r7, #16]
    1864:	2b07      	cmp	r3, #7
    1866:	d9af      	bls.n	17c8 <GPIO_Init+0x118>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    1868:	687a      	ldr	r2, [r7, #4]
    186a:	69bb      	ldr	r3, [r7, #24]
    186c:	6053      	str	r3, [r2, #4]
  }
}
    186e:	f107 0724 	add.w	r7, r7, #36	; 0x24
    1872:	46bd      	mov	sp, r7
    1874:	bc80      	pop	{r7}
    1876:	4770      	bx	lr

00001878 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    1878:	b480      	push	{r7}
    187a:	b083      	sub	sp, #12
    187c:	af00      	add	r7, sp, #0
    187e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    1880:	687a      	ldr	r2, [r7, #4]
    1882:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1886:	8013      	strh	r3, [r2, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    1888:	687a      	ldr	r2, [r7, #4]
    188a:	f04f 0302 	mov.w	r3, #2	; 0x2
    188e:	7093      	strb	r3, [r2, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1890:	687a      	ldr	r2, [r7, #4]
    1892:	f04f 0304 	mov.w	r3, #4	; 0x4
    1896:	70d3      	strb	r3, [r2, #3]
}
    1898:	f107 070c 	add.w	r7, r7, #12	; 0xc
    189c:	46bd      	mov	sp, r7
    189e:	bc80      	pop	{r7}
    18a0:	4770      	bx	lr
    18a2:	46c0      	nop			(mov r8, r8)

000018a4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    18a4:	b480      	push	{r7}
    18a6:	b085      	sub	sp, #20
    18a8:	af00      	add	r7, sp, #0
    18aa:	6078      	str	r0, [r7, #4]
    18ac:	460b      	mov	r3, r1
    18ae:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    18b0:	f04f 0300 	mov.w	r3, #0	; 0x0
    18b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    18b6:	687b      	ldr	r3, [r7, #4]
    18b8:	689a      	ldr	r2, [r3, #8]
    18ba:	887b      	ldrh	r3, [r7, #2]
    18bc:	ea02 0303 	and.w	r3, r2, r3
    18c0:	2b00      	cmp	r3, #0
    18c2:	d003      	beq.n	18cc <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
    18c4:	f04f 0301 	mov.w	r3, #1	; 0x1
    18c8:	73fb      	strb	r3, [r7, #15]
    18ca:	e002      	b.n	18d2 <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    18cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    18d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    18d2:	7bfb      	ldrb	r3, [r7, #15]
}
    18d4:	4618      	mov	r0, r3
    18d6:	f107 0714 	add.w	r7, r7, #20	; 0x14
    18da:	46bd      	mov	sp, r7
    18dc:	bc80      	pop	{r7}
    18de:	4770      	bx	lr

000018e0 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    18e0:	b480      	push	{r7}
    18e2:	b083      	sub	sp, #12
    18e4:	af00      	add	r7, sp, #0
    18e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    18e8:	687b      	ldr	r3, [r7, #4]
    18ea:	689b      	ldr	r3, [r3, #8]
    18ec:	b29b      	uxth	r3, r3
}
    18ee:	4618      	mov	r0, r3
    18f0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    18f4:	46bd      	mov	sp, r7
    18f6:	bc80      	pop	{r7}
    18f8:	4770      	bx	lr
    18fa:	46c0      	nop			(mov r8, r8)

000018fc <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    18fc:	b480      	push	{r7}
    18fe:	b085      	sub	sp, #20
    1900:	af00      	add	r7, sp, #0
    1902:	6078      	str	r0, [r7, #4]
    1904:	460b      	mov	r3, r1
    1906:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1908:	f04f 0300 	mov.w	r3, #0	; 0x0
    190c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	68da      	ldr	r2, [r3, #12]
    1912:	887b      	ldrh	r3, [r7, #2]
    1914:	ea02 0303 	and.w	r3, r2, r3
    1918:	2b00      	cmp	r3, #0
    191a:	d003      	beq.n	1924 <GPIO_ReadOutputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
    191c:	f04f 0301 	mov.w	r3, #1	; 0x1
    1920:	73fb      	strb	r3, [r7, #15]
    1922:	e002      	b.n	192a <GPIO_ReadOutputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1924:	f04f 0300 	mov.w	r3, #0	; 0x0
    1928:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    192a:	7bfb      	ldrb	r3, [r7, #15]
}
    192c:	4618      	mov	r0, r3
    192e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1932:	46bd      	mov	sp, r7
    1934:	bc80      	pop	{r7}
    1936:	4770      	bx	lr

00001938 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    1938:	b480      	push	{r7}
    193a:	b083      	sub	sp, #12
    193c:	af00      	add	r7, sp, #0
    193e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1940:	687b      	ldr	r3, [r7, #4]
    1942:	68db      	ldr	r3, [r3, #12]
    1944:	b29b      	uxth	r3, r3
}
    1946:	4618      	mov	r0, r3
    1948:	f107 070c 	add.w	r7, r7, #12	; 0xc
    194c:	46bd      	mov	sp, r7
    194e:	bc80      	pop	{r7}
    1950:	4770      	bx	lr
    1952:	46c0      	nop			(mov r8, r8)

00001954 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1954:	b480      	push	{r7}
    1956:	b083      	sub	sp, #12
    1958:	af00      	add	r7, sp, #0
    195a:	6078      	str	r0, [r7, #4]
    195c:	460b      	mov	r3, r1
    195e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    1960:	887a      	ldrh	r2, [r7, #2]
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	611a      	str	r2, [r3, #16]
}
    1966:	f107 070c 	add.w	r7, r7, #12	; 0xc
    196a:	46bd      	mov	sp, r7
    196c:	bc80      	pop	{r7}
    196e:	4770      	bx	lr

00001970 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1970:	b480      	push	{r7}
    1972:	b083      	sub	sp, #12
    1974:	af00      	add	r7, sp, #0
    1976:	6078      	str	r0, [r7, #4]
    1978:	460b      	mov	r3, r1
    197a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    197c:	887a      	ldrh	r2, [r7, #2]
    197e:	687b      	ldr	r3, [r7, #4]
    1980:	615a      	str	r2, [r3, #20]
}
    1982:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1986:	46bd      	mov	sp, r7
    1988:	bc80      	pop	{r7}
    198a:	4770      	bx	lr

0000198c <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    198c:	b480      	push	{r7}
    198e:	b083      	sub	sp, #12
    1990:	af00      	add	r7, sp, #0
    1992:	6078      	str	r0, [r7, #4]
    1994:	460b      	mov	r3, r1
    1996:	807b      	strh	r3, [r7, #2]
    1998:	4613      	mov	r3, r2
    199a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    199c:	787b      	ldrb	r3, [r7, #1]
    199e:	2b00      	cmp	r3, #0
    19a0:	d003      	beq.n	19aa <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    19a2:	887a      	ldrh	r2, [r7, #2]
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	611a      	str	r2, [r3, #16]
    19a8:	e002      	b.n	19b0 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    19aa:	887a      	ldrh	r2, [r7, #2]
    19ac:	687b      	ldr	r3, [r7, #4]
    19ae:	615a      	str	r2, [r3, #20]
  }
}
    19b0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    19b4:	46bd      	mov	sp, r7
    19b6:	bc80      	pop	{r7}
    19b8:	4770      	bx	lr
    19ba:	46c0      	nop			(mov r8, r8)

000019bc <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    19bc:	b480      	push	{r7}
    19be:	b083      	sub	sp, #12
    19c0:	af00      	add	r7, sp, #0
    19c2:	6078      	str	r0, [r7, #4]
    19c4:	460b      	mov	r3, r1
    19c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    19c8:	887a      	ldrh	r2, [r7, #2]
    19ca:	687b      	ldr	r3, [r7, #4]
    19cc:	60da      	str	r2, [r3, #12]
}
    19ce:	f107 070c 	add.w	r7, r7, #12	; 0xc
    19d2:	46bd      	mov	sp, r7
    19d4:	bc80      	pop	{r7}
    19d6:	4770      	bx	lr

000019d8 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    19d8:	b480      	push	{r7}
    19da:	b085      	sub	sp, #20
    19dc:	af00      	add	r7, sp, #0
    19de:	6078      	str	r0, [r7, #4]
    19e0:	460b      	mov	r3, r1
    19e2:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    19e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    19e8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    19ea:	887a      	ldrh	r2, [r7, #2]
    19ec:	68fb      	ldr	r3, [r7, #12]
    19ee:	ea43 0302 	orr.w	r3, r3, r2
    19f2:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    19f4:	687a      	ldr	r2, [r7, #4]
    19f6:	68fb      	ldr	r3, [r7, #12]
    19f8:	6193      	str	r3, [r2, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    19fa:	887a      	ldrh	r2, [r7, #2]
    19fc:	687b      	ldr	r3, [r7, #4]
    19fe:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1a00:	687a      	ldr	r2, [r7, #4]
    1a02:	68fb      	ldr	r3, [r7, #12]
    1a04:	6193      	str	r3, [r2, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	699b      	ldr	r3, [r3, #24]
    1a0a:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1a0c:	687b      	ldr	r3, [r7, #4]
    1a0e:	699b      	ldr	r3, [r3, #24]
    1a10:	60fb      	str	r3, [r7, #12]
}
    1a12:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1a16:	46bd      	mov	sp, r7
    1a18:	bc80      	pop	{r7}
    1a1a:	4770      	bx	lr

00001a1c <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1a1c:	b480      	push	{r7}
    1a1e:	b085      	sub	sp, #20
    1a20:	af00      	add	r7, sp, #0
    1a22:	4603      	mov	r3, r0
    1a24:	460a      	mov	r2, r1
    1a26:	71fb      	strb	r3, [r7, #7]
    1a28:	4613      	mov	r3, r2
    1a2a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    1a2c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1a30:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1a32:	4b0e      	ldr	r3, [pc, #56]	(1a6c <GPIO_EventOutputConfig+0x50>)
    1a34:	681b      	ldr	r3, [r3, #0]
    1a36:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    1a38:	68fa      	ldr	r2, [r7, #12]
    1a3a:	f64f 7380 	movw	r3, #65408	; 0xff80
    1a3e:	ea02 0303 	and.w	r3, r2, r3
    1a42:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1a44:	79fb      	ldrb	r3, [r7, #7]
    1a46:	ea4f 1203 	mov.w	r2, r3, lsl #4
    1a4a:	68fb      	ldr	r3, [r7, #12]
    1a4c:	ea43 0302 	orr.w	r3, r3, r2
    1a50:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    1a52:	79ba      	ldrb	r2, [r7, #6]
    1a54:	68fb      	ldr	r3, [r7, #12]
    1a56:	ea43 0302 	orr.w	r3, r3, r2
    1a5a:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    1a5c:	4a03      	ldr	r2, [pc, #12]	(1a6c <GPIO_EventOutputConfig+0x50>)
    1a5e:	68fb      	ldr	r3, [r7, #12]
    1a60:	6013      	str	r3, [r2, #0]
}
    1a62:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1a66:	46bd      	mov	sp, r7
    1a68:	bc80      	pop	{r7}
    1a6a:	4770      	bx	lr
    1a6c:	40010000 	.word	0x40010000

00001a70 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    1a70:	b480      	push	{r7}
    1a72:	b083      	sub	sp, #12
    1a74:	af00      	add	r7, sp, #0
    1a76:	4603      	mov	r3, r0
    1a78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    1a7a:	4a04      	ldr	r2, [pc, #16]	(1a8c <GPIO_EventOutputCmd+0x1c>)
    1a7c:	79fb      	ldrb	r3, [r7, #7]
    1a7e:	6013      	str	r3, [r2, #0]
}
    1a80:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1a84:	46bd      	mov	sp, r7
    1a86:	bc80      	pop	{r7}
    1a88:	4770      	bx	lr
    1a8a:	46c0      	nop			(mov r8, r8)
    1a8c:	4220001c 	.word	0x4220001c

00001a90 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    1a90:	b480      	push	{r7}
    1a92:	b087      	sub	sp, #28
    1a94:	af00      	add	r7, sp, #0
    1a96:	6078      	str	r0, [r7, #4]
    1a98:	460b      	mov	r3, r1
    1a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    1a9c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1aa0:	60bb      	str	r3, [r7, #8]
    1aa2:	f04f 0300 	mov.w	r3, #0	; 0x0
    1aa6:	60fb      	str	r3, [r7, #12]
    1aa8:	f04f 0300 	mov.w	r3, #0	; 0x0
    1aac:	613b      	str	r3, [r7, #16]
    1aae:	f04f 0300 	mov.w	r3, #0	; 0x0
    1ab2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  tmpreg = AFIO->MAPR;
    1ab4:	4b30      	ldr	r3, [pc, #192]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1ab6:	685b      	ldr	r3, [r3, #4]
    1ab8:	613b      	str	r3, [r7, #16]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1aba:	687b      	ldr	r3, [r7, #4]
    1abc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    1ac0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    1ac4:	617b      	str	r3, [r7, #20]
  tmp = GPIO_Remap & LSB_MASK;
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	ea4f 4303 	mov.w	r3, r3, lsl #16
    1acc:	ea4f 4313 	mov.w	r3, r3, lsr #16
    1ad0:	60bb      	str	r3, [r7, #8]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1ad2:	687b      	ldr	r3, [r7, #4]
    1ad4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    1ad8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    1adc:	d10a      	bne.n	1af4 <GPIO_PinRemapConfig+0x64>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1ade:	693b      	ldr	r3, [r7, #16]
    1ae0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1ae4:	613b      	str	r3, [r7, #16]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1ae6:	4a24      	ldr	r2, [pc, #144]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1ae8:	4b23      	ldr	r3, [pc, #140]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1aea:	685b      	ldr	r3, [r3, #4]
    1aec:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1af0:	6053      	str	r3, [r2, #4]
    1af2:	e029      	b.n	1b48 <GPIO_PinRemapConfig+0xb8>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1afa:	2b00      	cmp	r3, #0
    1afc:	d011      	beq.n	1b22 <GPIO_PinRemapConfig+0x92>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1afe:	697a      	ldr	r2, [r7, #20]
    1b00:	f04f 0303 	mov.w	r3, #3	; 0x3
    1b04:	fa03 f302 	lsl.w	r3, r3, r2
    1b08:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1b0a:	68fb      	ldr	r3, [r7, #12]
    1b0c:	ea6f 0203 	mvn.w	r2, r3
    1b10:	693b      	ldr	r3, [r7, #16]
    1b12:	ea03 0302 	and.w	r3, r3, r2
    1b16:	613b      	str	r3, [r7, #16]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1b18:	693b      	ldr	r3, [r7, #16]
    1b1a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1b1e:	613b      	str	r3, [r7, #16]
    1b20:	e012      	b.n	1b48 <GPIO_PinRemapConfig+0xb8>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	ea4f 5353 	mov.w	r3, r3, lsr #21
    1b28:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1b2c:	461a      	mov	r2, r3
    1b2e:	68bb      	ldr	r3, [r7, #8]
    1b30:	fa03 f302 	lsl.w	r3, r3, r2
    1b34:	ea6f 0203 	mvn.w	r2, r3
    1b38:	693b      	ldr	r3, [r7, #16]
    1b3a:	ea03 0302 	and.w	r3, r3, r2
    1b3e:	613b      	str	r3, [r7, #16]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1b40:	693b      	ldr	r3, [r7, #16]
    1b42:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1b46:	613b      	str	r3, [r7, #16]
  }

  if (NewState != DISABLE)
    1b48:	78fb      	ldrb	r3, [r7, #3]
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	d00c      	beq.n	1b68 <GPIO_PinRemapConfig+0xd8>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1b4e:	687b      	ldr	r3, [r7, #4]
    1b50:	ea4f 5353 	mov.w	r3, r3, lsr #21
    1b54:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1b58:	461a      	mov	r2, r3
    1b5a:	68bb      	ldr	r3, [r7, #8]
    1b5c:	fa03 f202 	lsl.w	r2, r3, r2
    1b60:	693b      	ldr	r3, [r7, #16]
    1b62:	ea43 0302 	orr.w	r3, r3, r2
    1b66:	613b      	str	r3, [r7, #16]
  }

  AFIO->MAPR = tmpreg;
    1b68:	4a03      	ldr	r2, [pc, #12]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1b6a:	693b      	ldr	r3, [r7, #16]
    1b6c:	6053      	str	r3, [r2, #4]
}
    1b6e:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    1b72:	46bd      	mov	sp, r7
    1b74:	bc80      	pop	{r7}
    1b76:	4770      	bx	lr
    1b78:	40010000 	.word	0x40010000

00001b7c <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1b7c:	b480      	push	{r7}
    1b7e:	b085      	sub	sp, #20
    1b80:	af00      	add	r7, sp, #0
    1b82:	4603      	mov	r3, r0
    1b84:	460a      	mov	r2, r1
    1b86:	71fb      	strb	r3, [r7, #7]
    1b88:	4613      	mov	r3, r2
    1b8a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    1b8c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1b90:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    1b92:	79bb      	ldrb	r3, [r7, #6]
    1b94:	f003 0303 	and.w	r3, r3, #3	; 0x3
    1b98:	ea4f 0283 	mov.w	r2, r3, lsl #2
    1b9c:	f04f 030f 	mov.w	r3, #15	; 0xf
    1ba0:	fa03 f302 	lsl.w	r3, r3, r2
    1ba4:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    1ba6:	491d      	ldr	r1, [pc, #116]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1ba8:	79bb      	ldrb	r3, [r7, #6]
    1baa:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bae:	b2db      	uxtb	r3, r3
    1bb0:	4618      	mov	r0, r3
    1bb2:	4a1a      	ldr	r2, [pc, #104]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1bb4:	79bb      	ldrb	r3, [r7, #6]
    1bb6:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bba:	b2db      	uxtb	r3, r3
    1bbc:	f103 0302 	add.w	r3, r3, #2	; 0x2
    1bc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1bc4:	68fb      	ldr	r3, [r7, #12]
    1bc6:	ea6f 0303 	mvn.w	r3, r3
    1bca:	ea02 0203 	and.w	r2, r2, r3
    1bce:	f100 0302 	add.w	r3, r0, #2	; 0x2
    1bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    1bd6:	4811      	ldr	r0, [pc, #68]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1bd8:	79bb      	ldrb	r3, [r7, #6]
    1bda:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bde:	b2db      	uxtb	r3, r3
    1be0:	469c      	mov	ip, r3
    1be2:	4a0e      	ldr	r2, [pc, #56]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1be4:	79bb      	ldrb	r3, [r7, #6]
    1be6:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bea:	b2db      	uxtb	r3, r3
    1bec:	f103 0302 	add.w	r3, r3, #2	; 0x2
    1bf0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    1bf4:	79fa      	ldrb	r2, [r7, #7]
    1bf6:	79bb      	ldrb	r3, [r7, #6]
    1bf8:	f003 0303 	and.w	r3, r3, #3	; 0x3
    1bfc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1c00:	fa02 f303 	lsl.w	r3, r2, r3
    1c04:	ea41 0203 	orr.w	r2, r1, r3
    1c08:	f10c 0302 	add.w	r3, ip, #2	; 0x2
    1c0c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    1c10:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1c14:	46bd      	mov	sp, r7
    1c16:	bc80      	pop	{r7}
    1c18:	4770      	bx	lr
    1c1a:	46c0      	nop			(mov r8, r8)
    1c1c:	40010000 	.word	0x40010000

00001c20 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    1c20:	b480      	push	{r7}
    1c22:	b083      	sub	sp, #12
    1c24:	af00      	add	r7, sp, #0
    1c26:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1c28:	4a03      	ldr	r2, [pc, #12]	(1c38 <GPIO_ETH_MediaInterfaceConfig+0x18>)
    1c2a:	687b      	ldr	r3, [r7, #4]
    1c2c:	6013      	str	r3, [r2, #0]
}
    1c2e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1c32:	46bd      	mov	sp, r7
    1c34:	bc80      	pop	{r7}
    1c36:	4770      	bx	lr
    1c38:	422000dc 	.word	0x422000dc

00001c3c <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
    1c3c:	b480      	push	{r7}
    1c3e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
    1c40:	4a18      	ldr	r2, [pc, #96]	(1ca4 <RCC_DeInit+0x68>)
    1c42:	4b18      	ldr	r3, [pc, #96]	(1ca4 <RCC_DeInit+0x68>)
    1c44:	681b      	ldr	r3, [r3, #0]
    1c46:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    1c4a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
    1c4c:	4915      	ldr	r1, [pc, #84]	(1ca4 <RCC_DeInit+0x68>)
    1c4e:	4b15      	ldr	r3, [pc, #84]	(1ca4 <RCC_DeInit+0x68>)
    1c50:	685a      	ldr	r2, [r3, #4]
    1c52:	4b15      	ldr	r3, [pc, #84]	(1ca8 <RCC_DeInit+0x6c>)
    1c54:	ea02 0303 	and.w	r3, r2, r3
    1c58:	604b      	str	r3, [r1, #4]
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
    1c5a:	4a12      	ldr	r2, [pc, #72]	(1ca4 <RCC_DeInit+0x68>)
    1c5c:	4b11      	ldr	r3, [pc, #68]	(1ca4 <RCC_DeInit+0x68>)
    1c5e:	681b      	ldr	r3, [r3, #0]
    1c60:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
    1c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1c68:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
    1c6a:	4a0e      	ldr	r2, [pc, #56]	(1ca4 <RCC_DeInit+0x68>)
    1c6c:	4b0d      	ldr	r3, [pc, #52]	(1ca4 <RCC_DeInit+0x68>)
    1c6e:	681b      	ldr	r3, [r3, #0]
    1c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1c74:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
    1c76:	4a0b      	ldr	r2, [pc, #44]	(1ca4 <RCC_DeInit+0x68>)
    1c78:	4b0a      	ldr	r3, [pc, #40]	(1ca4 <RCC_DeInit+0x68>)
    1c7a:	685b      	ldr	r3, [r3, #4]
    1c7c:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
    1c80:	6053      	str	r3, [r2, #4]
#ifndef STM32F10X_CL
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
#else
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
    1c82:	4a08      	ldr	r2, [pc, #32]	(1ca4 <RCC_DeInit+0x68>)
    1c84:	4b07      	ldr	r3, [pc, #28]	(1ca4 <RCC_DeInit+0x68>)
    1c86:	681b      	ldr	r3, [r3, #0]
    1c88:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
    1c8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
    1c8e:	4a05      	ldr	r2, [pc, #20]	(1ca4 <RCC_DeInit+0x68>)
    1c90:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    1c94:	6093      	str	r3, [r2, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
    1c96:	4a03      	ldr	r2, [pc, #12]	(1ca4 <RCC_DeInit+0x68>)
    1c98:	f04f 0300 	mov.w	r3, #0	; 0x0
    1c9c:	62d3      	str	r3, [r2, #44]
#endif /* STM32F10X_CL */
}
    1c9e:	46bd      	mov	sp, r7
    1ca0:	bc80      	pop	{r7}
    1ca2:	4770      	bx	lr
    1ca4:	40021000 	.word	0x40021000
    1ca8:	f0ff0000 	.word	0xf0ff0000

00001cac <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
    1cac:	b480      	push	{r7}
    1cae:	b083      	sub	sp, #12
    1cb0:	af00      	add	r7, sp, #0
    1cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
    1cb4:	4a14      	ldr	r2, [pc, #80]	(1d08 <RCC_HSEConfig+0x5c>)
    1cb6:	4b14      	ldr	r3, [pc, #80]	(1d08 <RCC_HSEConfig+0x5c>)
    1cb8:	681b      	ldr	r3, [r3, #0]
    1cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1cbe:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
    1cc0:	4a11      	ldr	r2, [pc, #68]	(1d08 <RCC_HSEConfig+0x5c>)
    1cc2:	4b11      	ldr	r3, [pc, #68]	(1d08 <RCC_HSEConfig+0x5c>)
    1cc4:	681b      	ldr	r3, [r3, #0]
    1cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1cca:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
    1ccc:	687b      	ldr	r3, [r7, #4]
    1cce:	603b      	str	r3, [r7, #0]
    1cd0:	683b      	ldr	r3, [r7, #0]
    1cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1cd6:	d004      	beq.n	1ce2 <RCC_HSEConfig+0x36>
    1cd8:	683b      	ldr	r3, [r7, #0]
    1cda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    1cde:	d007      	beq.n	1cf0 <RCC_HSEConfig+0x44>
    1ce0:	e00c      	b.n	1cfc <RCC_HSEConfig+0x50>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
    1ce2:	4a09      	ldr	r2, [pc, #36]	(1d08 <RCC_HSEConfig+0x5c>)
    1ce4:	4b08      	ldr	r3, [pc, #32]	(1d08 <RCC_HSEConfig+0x5c>)
    1ce6:	681b      	ldr	r3, [r3, #0]
    1ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1cec:	6013      	str	r3, [r2, #0]
    1cee:	e005      	b.n	1cfc <RCC_HSEConfig+0x50>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
    1cf0:	4a05      	ldr	r2, [pc, #20]	(1d08 <RCC_HSEConfig+0x5c>)
    1cf2:	4b05      	ldr	r3, [pc, #20]	(1d08 <RCC_HSEConfig+0x5c>)
    1cf4:	681b      	ldr	r3, [r3, #0]
    1cf6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
    1cfa:	6013      	str	r3, [r2, #0]
      break;
      
    default:
      break;
  }
}
    1cfc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1d00:	46bd      	mov	sp, r7
    1d02:	bc80      	pop	{r7}
    1d04:	4770      	bx	lr
    1d06:	46c0      	nop			(mov r8, r8)
    1d08:	40021000 	.word	0x40021000

00001d0c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
    1d0c:	b580      	push	{r7, lr}
    1d0e:	b082      	sub	sp, #8
    1d10:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
    1d12:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d16:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
    1d18:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d1c:	71bb      	strb	r3, [r7, #6]
  FlagStatus HSEStatus = RESET;
    1d1e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d22:	71fb      	strb	r3, [r7, #7]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    1d24:	f04f 0031 	mov.w	r0, #49	; 0x31
    1d28:	f000 fc68 	bl	25fc <RCC_GetFlagStatus>
    1d2c:	4603      	mov	r3, r0
    1d2e:	71fb      	strb	r3, [r7, #7]
    StartUpCounter++;  
    1d30:	683b      	ldr	r3, [r7, #0]
    1d32:	f103 0301 	add.w	r3, r3, #1	; 0x1
    1d36:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSEStartUp_TimeOut) && (HSEStatus == RESET));
    1d38:	683b      	ldr	r3, [r7, #0]
    1d3a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    1d3e:	d002      	beq.n	1d46 <RCC_WaitForHSEStartUp+0x3a>
    1d40:	79fb      	ldrb	r3, [r7, #7]
    1d42:	2b00      	cmp	r3, #0
    1d44:	d0ee      	beq.n	1d24 <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
    1d46:	f04f 0031 	mov.w	r0, #49	; 0x31
    1d4a:	f000 fc57 	bl	25fc <RCC_GetFlagStatus>
    1d4e:	4603      	mov	r3, r0
    1d50:	2b00      	cmp	r3, #0
    1d52:	d003      	beq.n	1d5c <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
    1d54:	f04f 0301 	mov.w	r3, #1	; 0x1
    1d58:	71bb      	strb	r3, [r7, #6]
    1d5a:	e002      	b.n	1d62 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
    1d5c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d60:	71bb      	strb	r3, [r7, #6]
  }  
  return (status);
    1d62:	79bb      	ldrb	r3, [r7, #6]
}
    1d64:	4618      	mov	r0, r3
    1d66:	f107 0708 	add.w	r7, r7, #8	; 0x8
    1d6a:	46bd      	mov	sp, r7
    1d6c:	bd80      	pop	{r7, pc}
    1d6e:	46c0      	nop			(mov r8, r8)

00001d70 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
    1d70:	b480      	push	{r7}
    1d72:	b085      	sub	sp, #20
    1d74:	af00      	add	r7, sp, #0
    1d76:	4603      	mov	r3, r0
    1d78:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
    1d7a:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d7e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
    1d80:	4b0a      	ldr	r3, [pc, #40]	(1dac <RCC_AdjustHSICalibrationValue+0x3c>)
    1d82:	681b      	ldr	r3, [r3, #0]
    1d84:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
    1d86:	68fb      	ldr	r3, [r7, #12]
    1d88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
    1d8c:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
    1d8e:	79fb      	ldrb	r3, [r7, #7]
    1d90:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    1d94:	68fb      	ldr	r3, [r7, #12]
    1d96:	ea43 0302 	orr.w	r3, r3, r2
    1d9a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
    1d9c:	4a03      	ldr	r2, [pc, #12]	(1dac <RCC_AdjustHSICalibrationValue+0x3c>)
    1d9e:	68fb      	ldr	r3, [r7, #12]
    1da0:	6013      	str	r3, [r2, #0]
}
    1da2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1da6:	46bd      	mov	sp, r7
    1da8:	bc80      	pop	{r7}
    1daa:	4770      	bx	lr
    1dac:	40021000 	.word	0x40021000

00001db0 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
    1db0:	b480      	push	{r7}
    1db2:	b083      	sub	sp, #12
    1db4:	af00      	add	r7, sp, #0
    1db6:	4603      	mov	r3, r0
    1db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
    1dba:	4a04      	ldr	r2, [pc, #16]	(1dcc <RCC_HSICmd+0x1c>)
    1dbc:	79fb      	ldrb	r3, [r7, #7]
    1dbe:	6013      	str	r3, [r2, #0]
}
    1dc0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1dc4:	46bd      	mov	sp, r7
    1dc6:	bc80      	pop	{r7}
    1dc8:	4770      	bx	lr
    1dca:	46c0      	nop			(mov r8, r8)
    1dcc:	42420000 	.word	0x42420000

00001dd0 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
    1dd0:	b480      	push	{r7}
    1dd2:	b085      	sub	sp, #20
    1dd4:	af00      	add	r7, sp, #0
    1dd6:	6078      	str	r0, [r7, #4]
    1dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    1dda:	f04f 0300 	mov.w	r3, #0	; 0x0
    1dde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
    1de0:	4b0b      	ldr	r3, [pc, #44]	(1e10 <RCC_PLLConfig+0x40>)
    1de2:	685b      	ldr	r3, [r3, #4]
    1de4:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
    1de6:	68fb      	ldr	r3, [r7, #12]
    1de8:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
    1dec:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
    1dee:	687a      	ldr	r2, [r7, #4]
    1df0:	683b      	ldr	r3, [r7, #0]
    1df2:	ea42 0203 	orr.w	r2, r2, r3
    1df6:	68fb      	ldr	r3, [r7, #12]
    1df8:	ea43 0302 	orr.w	r3, r3, r2
    1dfc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1dfe:	4a04      	ldr	r2, [pc, #16]	(1e10 <RCC_PLLConfig+0x40>)
    1e00:	68fb      	ldr	r3, [r7, #12]
    1e02:	6053      	str	r3, [r2, #4]
}
    1e04:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1e08:	46bd      	mov	sp, r7
    1e0a:	bc80      	pop	{r7}
    1e0c:	4770      	bx	lr
    1e0e:	46c0      	nop			(mov r8, r8)
    1e10:	40021000 	.word	0x40021000

00001e14 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
    1e14:	b480      	push	{r7}
    1e16:	b083      	sub	sp, #12
    1e18:	af00      	add	r7, sp, #0
    1e1a:	4603      	mov	r3, r0
    1e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
    1e1e:	4a04      	ldr	r2, [pc, #16]	(1e30 <RCC_PLLCmd+0x1c>)
    1e20:	79fb      	ldrb	r3, [r7, #7]
    1e22:	6013      	str	r3, [r2, #0]
}
    1e24:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1e28:	46bd      	mov	sp, r7
    1e2a:	bc80      	pop	{r7}
    1e2c:	4770      	bx	lr
    1e2e:	46c0      	nop			(mov r8, r8)
    1e30:	42420060 	.word	0x42420060

00001e34 <RCC_PREDIV1Config>:
  * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
  *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
{
    1e34:	b480      	push	{r7}
    1e36:	b085      	sub	sp, #20
    1e38:	af00      	add	r7, sp, #0
    1e3a:	6078      	str	r0, [r7, #4]
    1e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    1e3e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1e42:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
    1e44:	4b0c      	ldr	r3, [pc, #48]	(1e78 <RCC_PREDIV1Config+0x44>)
    1e46:	6adb      	ldr	r3, [r3, #44]
    1e48:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
  tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
    1e4a:	68fb      	ldr	r3, [r7, #12]
    1e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1e50:	f023 030f 	bic.w	r3, r3, #15	; 0xf
    1e54:	60fb      	str	r3, [r7, #12]
  /* Set the PREDIV1 clock source and division factor */
  tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
    1e56:	687a      	ldr	r2, [r7, #4]
    1e58:	683b      	ldr	r3, [r7, #0]
    1e5a:	ea42 0203 	orr.w	r2, r2, r3
    1e5e:	68fb      	ldr	r3, [r7, #12]
    1e60:	ea43 0302 	orr.w	r3, r3, r2
    1e64:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1e66:	4a04      	ldr	r2, [pc, #16]	(1e78 <RCC_PREDIV1Config+0x44>)
    1e68:	68fb      	ldr	r3, [r7, #12]
    1e6a:	62d3      	str	r3, [r2, #44]
}
    1e6c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1e70:	46bd      	mov	sp, r7
    1e72:	bc80      	pop	{r7}
    1e74:	4770      	bx	lr
    1e76:	46c0      	nop			(mov r8, r8)
    1e78:	40021000 	.word	0x40021000

00001e7c <RCC_PREDIV2Config>:
  * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
  *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
{
    1e7c:	b480      	push	{r7}
    1e7e:	b085      	sub	sp, #20
    1e80:	af00      	add	r7, sp, #0
    1e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1e84:	f04f 0300 	mov.w	r3, #0	; 0x0
    1e88:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));

  tmpreg = RCC->CFGR2;
    1e8a:	4b0a      	ldr	r3, [pc, #40]	(1eb4 <RCC_PREDIV2Config+0x38>)
    1e8c:	6adb      	ldr	r3, [r3, #44]
    1e8e:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV2[3:0] bits */
  tmpreg &= ~CFGR2_PREDIV2;
    1e90:	68fb      	ldr	r3, [r7, #12]
    1e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1e96:	60fb      	str	r3, [r7, #12]
  /* Set the PREDIV2 division factor */
  tmpreg |= RCC_PREDIV2_Div;
    1e98:	68fa      	ldr	r2, [r7, #12]
    1e9a:	687b      	ldr	r3, [r7, #4]
    1e9c:	ea42 0303 	orr.w	r3, r2, r3
    1ea0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1ea2:	4a04      	ldr	r2, [pc, #16]	(1eb4 <RCC_PREDIV2Config+0x38>)
    1ea4:	68fb      	ldr	r3, [r7, #12]
    1ea6:	62d3      	str	r3, [r2, #44]
}
    1ea8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1eac:	46bd      	mov	sp, r7
    1eae:	bc80      	pop	{r7}
    1eb0:	4770      	bx	lr
    1eb2:	46c0      	nop			(mov r8, r8)
    1eb4:	40021000 	.word	0x40021000

00001eb8 <RCC_PLL2Config>:
  * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
  *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
  * @retval None
  */
void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
{
    1eb8:	b480      	push	{r7}
    1eba:	b085      	sub	sp, #20
    1ebc:	af00      	add	r7, sp, #0
    1ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1ec0:	f04f 0300 	mov.w	r3, #0	; 0x0
    1ec4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));

  tmpreg = RCC->CFGR2;
    1ec6:	4b0a      	ldr	r3, [pc, #40]	(1ef0 <RCC_PLL2Config+0x38>)
    1ec8:	6adb      	ldr	r3, [r3, #44]
    1eca:	60fb      	str	r3, [r7, #12]
  /* Clear PLL2Mul[3:0] bits */
  tmpreg &= ~CFGR2_PLL2MUL;
    1ecc:	68fb      	ldr	r3, [r7, #12]
    1ece:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    1ed2:	60fb      	str	r3, [r7, #12]
  /* Set the PLL2 configuration bits */
  tmpreg |= RCC_PLL2Mul;
    1ed4:	68fa      	ldr	r2, [r7, #12]
    1ed6:	687b      	ldr	r3, [r7, #4]
    1ed8:	ea42 0303 	orr.w	r3, r2, r3
    1edc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1ede:	4a04      	ldr	r2, [pc, #16]	(1ef0 <RCC_PLL2Config+0x38>)
    1ee0:	68fb      	ldr	r3, [r7, #12]
    1ee2:	62d3      	str	r3, [r2, #44]
}
    1ee4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1ee8:	46bd      	mov	sp, r7
    1eea:	bc80      	pop	{r7}
    1eec:	4770      	bx	lr
    1eee:	46c0      	nop			(mov r8, r8)
    1ef0:	40021000 	.word	0x40021000

00001ef4 <RCC_PLL2Cmd>:
  *   - This function applies only to STM32 Connectivity line devices.
  * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLL2Cmd(FunctionalState NewState)
{
    1ef4:	b480      	push	{r7}
    1ef6:	b083      	sub	sp, #12
    1ef8:	af00      	add	r7, sp, #0
    1efa:	4603      	mov	r3, r0
    1efc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
    1efe:	4a04      	ldr	r2, [pc, #16]	(1f10 <RCC_PLL2Cmd+0x1c>)
    1f00:	79fb      	ldrb	r3, [r7, #7]
    1f02:	6013      	str	r3, [r2, #0]
}
    1f04:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1f08:	46bd      	mov	sp, r7
    1f0a:	bc80      	pop	{r7}
    1f0c:	4770      	bx	lr
    1f0e:	46c0      	nop			(mov r8, r8)
    1f10:	42420068 	.word	0x42420068

00001f14 <RCC_PLL3Config>:
  * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
  *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
  * @retval None
  */
void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
{
    1f14:	b480      	push	{r7}
    1f16:	b085      	sub	sp, #20
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1f1c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1f20:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));

  tmpreg = RCC->CFGR2;
    1f22:	4b0a      	ldr	r3, [pc, #40]	(1f4c <RCC_PLL3Config+0x38>)
    1f24:	6adb      	ldr	r3, [r3, #44]
    1f26:	60fb      	str	r3, [r7, #12]
  /* Clear PLL3Mul[3:0] bits */
  tmpreg &= ~CFGR2_PLL3MUL;
    1f28:	68fb      	ldr	r3, [r7, #12]
    1f2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
    1f2e:	60fb      	str	r3, [r7, #12]
  /* Set the PLL3 configuration bits */
  tmpreg |= RCC_PLL3Mul;
    1f30:	68fa      	ldr	r2, [r7, #12]
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	ea42 0303 	orr.w	r3, r2, r3
    1f38:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1f3a:	4a04      	ldr	r2, [pc, #16]	(1f4c <RCC_PLL3Config+0x38>)
    1f3c:	68fb      	ldr	r3, [r7, #12]
    1f3e:	62d3      	str	r3, [r2, #44]
}
    1f40:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1f44:	46bd      	mov	sp, r7
    1f46:	bc80      	pop	{r7}
    1f48:	4770      	bx	lr
    1f4a:	46c0      	nop			(mov r8, r8)
    1f4c:	40021000 	.word	0x40021000

00001f50 <RCC_PLL3Cmd>:
  * @note   This function applies only to STM32 Connectivity line devices.
  * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLL3Cmd(FunctionalState NewState)
{
    1f50:	b480      	push	{r7}
    1f52:	b083      	sub	sp, #12
    1f54:	af00      	add	r7, sp, #0
    1f56:	4603      	mov	r3, r0
    1f58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
    1f5a:	4a04      	ldr	r2, [pc, #16]	(1f6c <RCC_PLL3Cmd+0x1c>)
    1f5c:	79fb      	ldrb	r3, [r7, #7]
    1f5e:	6013      	str	r3, [r2, #0]
}
    1f60:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1f64:	46bd      	mov	sp, r7
    1f66:	bc80      	pop	{r7}
    1f68:	4770      	bx	lr
    1f6a:	46c0      	nop			(mov r8, r8)
    1f6c:	42420070 	.word	0x42420070

00001f70 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
    1f70:	b480      	push	{r7}
    1f72:	b085      	sub	sp, #20
    1f74:	af00      	add	r7, sp, #0
    1f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1f78:	f04f 0300 	mov.w	r3, #0	; 0x0
    1f7c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
    1f7e:	4b0a      	ldr	r3, [pc, #40]	(1fa8 <RCC_SYSCLKConfig+0x38>)
    1f80:	685b      	ldr	r3, [r3, #4]
    1f82:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
    1f84:	68fb      	ldr	r3, [r7, #12]
    1f86:	f023 0303 	bic.w	r3, r3, #3	; 0x3
    1f8a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
    1f8c:	68fa      	ldr	r2, [r7, #12]
    1f8e:	687b      	ldr	r3, [r7, #4]
    1f90:	ea42 0303 	orr.w	r3, r2, r3
    1f94:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1f96:	4a04      	ldr	r2, [pc, #16]	(1fa8 <RCC_SYSCLKConfig+0x38>)
    1f98:	68fb      	ldr	r3, [r7, #12]
    1f9a:	6053      	str	r3, [r2, #4]
}
    1f9c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1fa0:	46bd      	mov	sp, r7
    1fa2:	bc80      	pop	{r7}
    1fa4:	4770      	bx	lr
    1fa6:	46c0      	nop			(mov r8, r8)
    1fa8:	40021000 	.word	0x40021000

00001fac <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
    1fac:	b480      	push	{r7}
    1fae:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
    1fb0:	4b04      	ldr	r3, [pc, #16]	(1fc4 <RCC_GetSYSCLKSource+0x18>)
    1fb2:	685b      	ldr	r3, [r3, #4]
    1fb4:	b2db      	uxtb	r3, r3
    1fb6:	f003 030c 	and.w	r3, r3, #12	; 0xc
}
    1fba:	4618      	mov	r0, r3
    1fbc:	46bd      	mov	sp, r7
    1fbe:	bc80      	pop	{r7}
    1fc0:	4770      	bx	lr
    1fc2:	46c0      	nop			(mov r8, r8)
    1fc4:	40021000 	.word	0x40021000

00001fc8 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
    1fc8:	b480      	push	{r7}
    1fca:	b085      	sub	sp, #20
    1fcc:	af00      	add	r7, sp, #0
    1fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1fd0:	f04f 0300 	mov.w	r3, #0	; 0x0
    1fd4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
    1fd6:	4b0a      	ldr	r3, [pc, #40]	(2000 <RCC_HCLKConfig+0x38>)
    1fd8:	685b      	ldr	r3, [r3, #4]
    1fda:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
    1fdc:	68fb      	ldr	r3, [r7, #12]
    1fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1fe2:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
    1fe4:	68fa      	ldr	r2, [r7, #12]
    1fe6:	687b      	ldr	r3, [r7, #4]
    1fe8:	ea42 0303 	orr.w	r3, r2, r3
    1fec:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1fee:	4a04      	ldr	r2, [pc, #16]	(2000 <RCC_HCLKConfig+0x38>)
    1ff0:	68fb      	ldr	r3, [r7, #12]
    1ff2:	6053      	str	r3, [r2, #4]
}
    1ff4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1ff8:	46bd      	mov	sp, r7
    1ffa:	bc80      	pop	{r7}
    1ffc:	4770      	bx	lr
    1ffe:	46c0      	nop			(mov r8, r8)
    2000:	40021000 	.word	0x40021000

00002004 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
    2004:	b480      	push	{r7}
    2006:	b085      	sub	sp, #20
    2008:	af00      	add	r7, sp, #0
    200a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    200c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2010:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    2012:	4b0a      	ldr	r3, [pc, #40]	(203c <RCC_PCLK1Config+0x38>)
    2014:	685b      	ldr	r3, [r3, #4]
    2016:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
    2018:	68fb      	ldr	r3, [r7, #12]
    201a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    201e:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
    2020:	68fa      	ldr	r2, [r7, #12]
    2022:	687b      	ldr	r3, [r7, #4]
    2024:	ea42 0303 	orr.w	r3, r2, r3
    2028:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    202a:	4a04      	ldr	r2, [pc, #16]	(203c <RCC_PCLK1Config+0x38>)
    202c:	68fb      	ldr	r3, [r7, #12]
    202e:	6053      	str	r3, [r2, #4]
}
    2030:	f107 0714 	add.w	r7, r7, #20	; 0x14
    2034:	46bd      	mov	sp, r7
    2036:	bc80      	pop	{r7}
    2038:	4770      	bx	lr
    203a:	46c0      	nop			(mov r8, r8)
    203c:	40021000 	.word	0x40021000

00002040 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
    2040:	b480      	push	{r7}
    2042:	b085      	sub	sp, #20
    2044:	af00      	add	r7, sp, #0
    2046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    2048:	f04f 0300 	mov.w	r3, #0	; 0x0
    204c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    204e:	4b0b      	ldr	r3, [pc, #44]	(207c <RCC_PCLK2Config+0x3c>)
    2050:	685b      	ldr	r3, [r3, #4]
    2052:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
    2054:	68fb      	ldr	r3, [r7, #12]
    2056:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
    205a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
    205c:	687b      	ldr	r3, [r7, #4]
    205e:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    2062:	68fb      	ldr	r3, [r7, #12]
    2064:	ea43 0302 	orr.w	r3, r3, r2
    2068:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    206a:	4a04      	ldr	r2, [pc, #16]	(207c <RCC_PCLK2Config+0x3c>)
    206c:	68fb      	ldr	r3, [r7, #12]
    206e:	6053      	str	r3, [r2, #4]
}
    2070:	f107 0714 	add.w	r7, r7, #20	; 0x14
    2074:	46bd      	mov	sp, r7
    2076:	bc80      	pop	{r7}
    2078:	4770      	bx	lr
    207a:	46c0      	nop			(mov r8, r8)
    207c:	40021000 	.word	0x40021000

00002080 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
    2080:	b480      	push	{r7}
    2082:	b083      	sub	sp, #12
    2084:	af00      	add	r7, sp, #0
    2086:	4603      	mov	r3, r0
    2088:	460a      	mov	r2, r1
    208a:	71fb      	strb	r3, [r7, #7]
    208c:	4613      	mov	r3, r2
    208e:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2090:	79bb      	ldrb	r3, [r7, #6]
    2092:	2b00      	cmp	r3, #0
    2094:	d009      	beq.n	20aa <RCC_ITConfig+0x2a>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
    2096:	490d      	ldr	r1, [pc, #52]	(20cc <RCC_ITConfig+0x4c>)
    2098:	4b0c      	ldr	r3, [pc, #48]	(20cc <RCC_ITConfig+0x4c>)
    209a:	781b      	ldrb	r3, [r3, #0]
    209c:	b2da      	uxtb	r2, r3
    209e:	79fb      	ldrb	r3, [r7, #7]
    20a0:	ea42 0303 	orr.w	r3, r2, r3
    20a4:	b2db      	uxtb	r3, r3
    20a6:	700b      	strb	r3, [r1, #0]
    20a8:	e00b      	b.n	20c2 <RCC_ITConfig+0x42>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
    20aa:	4908      	ldr	r1, [pc, #32]	(20cc <RCC_ITConfig+0x4c>)
    20ac:	4b07      	ldr	r3, [pc, #28]	(20cc <RCC_ITConfig+0x4c>)
    20ae:	781b      	ldrb	r3, [r3, #0]
    20b0:	b2da      	uxtb	r2, r3
    20b2:	79fb      	ldrb	r3, [r7, #7]
    20b4:	ea6f 0303 	mvn.w	r3, r3
    20b8:	b2db      	uxtb	r3, r3
    20ba:	ea02 0303 	and.w	r3, r2, r3
    20be:	b2db      	uxtb	r3, r3
    20c0:	700b      	strb	r3, [r1, #0]
  }
}
    20c2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    20c6:	46bd      	mov	sp, r7
    20c8:	bc80      	pop	{r7}
    20ca:	4770      	bx	lr
    20cc:	40021009 	.word	0x40021009

000020d0 <RCC_OTGFSCLKConfig>:
  *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clock source
  *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clock source
  * @retval None
  */
void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
{
    20d0:	b480      	push	{r7}
    20d2:	b083      	sub	sp, #12
    20d4:	af00      	add	r7, sp, #0
    20d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));

  *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
    20d8:	4a03      	ldr	r2, [pc, #12]	(20e8 <RCC_OTGFSCLKConfig+0x18>)
    20da:	687b      	ldr	r3, [r7, #4]
    20dc:	6013      	str	r3, [r2, #0]
}
    20de:	f107 070c 	add.w	r7, r7, #12	; 0xc
    20e2:	46bd      	mov	sp, r7
    20e4:	bc80      	pop	{r7}
    20e6:	4770      	bx	lr
    20e8:	424200d8 	.word	0x424200d8

000020ec <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
    20ec:	b480      	push	{r7}
    20ee:	b085      	sub	sp, #20
    20f0:	af00      	add	r7, sp, #0
    20f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    20f4:	f04f 0300 	mov.w	r3, #0	; 0x0
    20f8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
    20fa:	4b0a      	ldr	r3, [pc, #40]	(2124 <RCC_ADCCLKConfig+0x38>)
    20fc:	685b      	ldr	r3, [r3, #4]
    20fe:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
    2100:	68fb      	ldr	r3, [r7, #12]
    2102:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    2106:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
    2108:	68fa      	ldr	r2, [r7, #12]
    210a:	687b      	ldr	r3, [r7, #4]
    210c:	ea42 0303 	orr.w	r3, r2, r3
    2110:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    2112:	4a04      	ldr	r2, [pc, #16]	(2124 <RCC_ADCCLKConfig+0x38>)
    2114:	68fb      	ldr	r3, [r7, #12]
    2116:	6053      	str	r3, [r2, #4]
}
    2118:	f107 0714 	add.w	r7, r7, #20	; 0x14
    211c:	46bd      	mov	sp, r7
    211e:	bc80      	pop	{r7}
    2120:	4770      	bx	lr
    2122:	46c0      	nop			(mov r8, r8)
    2124:	40021000 	.word	0x40021000

00002128 <RCC_I2S2CLKConfig>:
  *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
  *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
  * @retval None
  */
void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
{
    2128:	b480      	push	{r7}
    212a:	b083      	sub	sp, #12
    212c:	af00      	add	r7, sp, #0
    212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));

  *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
    2130:	4a03      	ldr	r2, [pc, #12]	(2140 <RCC_I2S2CLKConfig+0x18>)
    2132:	687b      	ldr	r3, [r7, #4]
    2134:	6013      	str	r3, [r2, #0]
}
    2136:	f107 070c 	add.w	r7, r7, #12	; 0xc
    213a:	46bd      	mov	sp, r7
    213c:	bc80      	pop	{r7}
    213e:	4770      	bx	lr
    2140:	424205c4 	.word	0x424205c4

00002144 <RCC_I2S3CLKConfig>:
  *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
  *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
  * @retval None
  */
void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
{
    2144:	b480      	push	{r7}
    2146:	b083      	sub	sp, #12
    2148:	af00      	add	r7, sp, #0
    214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));

  *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
    214c:	4a03      	ldr	r2, [pc, #12]	(215c <RCC_I2S3CLKConfig+0x18>)
    214e:	687b      	ldr	r3, [r7, #4]
    2150:	6013      	str	r3, [r2, #0]
}
    2152:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2156:	46bd      	mov	sp, r7
    2158:	bc80      	pop	{r7}
    215a:	4770      	bx	lr
    215c:	424205c8 	.word	0x424205c8

00002160 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
    2160:	b480      	push	{r7}
    2162:	b083      	sub	sp, #12
    2164:	af00      	add	r7, sp, #0
    2166:	4603      	mov	r3, r0
    2168:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    216a:	4a0f      	ldr	r2, [pc, #60]	(21a8 <RCC_LSEConfig+0x48>)
    216c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2170:	7013      	strb	r3, [r2, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    2172:	4a0d      	ldr	r2, [pc, #52]	(21a8 <RCC_LSEConfig+0x48>)
    2174:	f04f 0300 	mov.w	r3, #0	; 0x0
    2178:	7013      	strb	r3, [r2, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
    217a:	79fb      	ldrb	r3, [r7, #7]
    217c:	603b      	str	r3, [r7, #0]
    217e:	683b      	ldr	r3, [r7, #0]
    2180:	2b01      	cmp	r3, #1
    2182:	d003      	beq.n	218c <RCC_LSEConfig+0x2c>
    2184:	683b      	ldr	r3, [r7, #0]
    2186:	2b04      	cmp	r3, #4
    2188:	d005      	beq.n	2196 <RCC_LSEConfig+0x36>
    218a:	e008      	b.n	219e <RCC_LSEConfig+0x3e>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
    218c:	4b06      	ldr	r3, [pc, #24]	(21a8 <RCC_LSEConfig+0x48>)
    218e:	f04f 0201 	mov.w	r2, #1	; 0x1
    2192:	701a      	strb	r2, [r3, #0]
    2194:	e003      	b.n	219e <RCC_LSEConfig+0x3e>
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
    2196:	4b04      	ldr	r3, [pc, #16]	(21a8 <RCC_LSEConfig+0x48>)
    2198:	f04f 0205 	mov.w	r2, #5	; 0x5
    219c:	701a      	strb	r2, [r3, #0]
      break;            
      
    default:
      break;      
  }
}
    219e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    21a2:	46bd      	mov	sp, r7
    21a4:	bc80      	pop	{r7}
    21a6:	4770      	bx	lr
    21a8:	40021020 	.word	0x40021020

000021ac <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
    21ac:	b480      	push	{r7}
    21ae:	b083      	sub	sp, #12
    21b0:	af00      	add	r7, sp, #0
    21b2:	4603      	mov	r3, r0
    21b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
    21b6:	4a04      	ldr	r2, [pc, #16]	(21c8 <RCC_LSICmd+0x1c>)
    21b8:	79fb      	ldrb	r3, [r7, #7]
    21ba:	6013      	str	r3, [r2, #0]
}
    21bc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    21c0:	46bd      	mov	sp, r7
    21c2:	bc80      	pop	{r7}
    21c4:	4770      	bx	lr
    21c6:	46c0      	nop			(mov r8, r8)
    21c8:	42420480 	.word	0x42420480

000021cc <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
    21cc:	b480      	push	{r7}
    21ce:	b083      	sub	sp, #12
    21d0:	af00      	add	r7, sp, #0
    21d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
    21d4:	4905      	ldr	r1, [pc, #20]	(21ec <RCC_RTCCLKConfig+0x20>)
    21d6:	4b05      	ldr	r3, [pc, #20]	(21ec <RCC_RTCCLKConfig+0x20>)
    21d8:	6a1a      	ldr	r2, [r3, #32]
    21da:	687b      	ldr	r3, [r7, #4]
    21dc:	ea42 0303 	orr.w	r3, r2, r3
    21e0:	620b      	str	r3, [r1, #32]
}
    21e2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    21e6:	46bd      	mov	sp, r7
    21e8:	bc80      	pop	{r7}
    21ea:	4770      	bx	lr
    21ec:	40021000 	.word	0x40021000

000021f0 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
    21f0:	b480      	push	{r7}
    21f2:	b083      	sub	sp, #12
    21f4:	af00      	add	r7, sp, #0
    21f6:	4603      	mov	r3, r0
    21f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
    21fa:	4a04      	ldr	r2, [pc, #16]	(220c <RCC_RTCCLKCmd+0x1c>)
    21fc:	79fb      	ldrb	r3, [r7, #7]
    21fe:	6013      	str	r3, [r2, #0]
}
    2200:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2204:	46bd      	mov	sp, r7
    2206:	bc80      	pop	{r7}
    2208:	4770      	bx	lr
    220a:	46c0      	nop			(mov r8, r8)
    220c:	4242043c 	.word	0x4242043c

00002210 <RCC_GetClocksFreq>:
  * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
  *   the clocks frequencies.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
    2210:	b480      	push	{r7}
    2212:	b08b      	sub	sp, #44
    2214:	af00      	add	r7, sp, #0
    2216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
    2218:	f04f 0300 	mov.w	r3, #0	; 0x0
    221c:	60bb      	str	r3, [r7, #8]
    221e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2222:	60fb      	str	r3, [r7, #12]
    2224:	f04f 0300 	mov.w	r3, #0	; 0x0
    2228:	613b      	str	r3, [r7, #16]
    222a:	f04f 0300 	mov.w	r3, #0	; 0x0
    222e:	617b      	str	r3, [r7, #20]

#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
    2230:	f04f 0300 	mov.w	r3, #0	; 0x0
    2234:	61bb      	str	r3, [r7, #24]
    2236:	f04f 0300 	mov.w	r3, #0	; 0x0
    223a:	61fb      	str	r3, [r7, #28]
    223c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2240:	623b      	str	r3, [r7, #32]
    2242:	f04f 0300 	mov.w	r3, #0	; 0x0
    2246:	627b      	str	r3, [r7, #36]
#endif /* STM32F10X_CL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
    2248:	4b68      	ldr	r3, [pc, #416]	(23ec <RCC_GetClocksFreq+0x1dc>)
    224a:	685b      	ldr	r3, [r3, #4]
    224c:	f003 030c 	and.w	r3, r3, #12	; 0xc
    2250:	60bb      	str	r3, [r7, #8]
  
  switch (tmp)
    2252:	68bb      	ldr	r3, [r7, #8]
    2254:	603b      	str	r3, [r7, #0]
    2256:	683b      	ldr	r3, [r7, #0]
    2258:	2b04      	cmp	r3, #4
    225a:	d009      	beq.n	2270 <RCC_GetClocksFreq+0x60>
    225c:	683b      	ldr	r3, [r7, #0]
    225e:	2b08      	cmp	r3, #8
    2260:	d00a      	beq.n	2278 <RCC_GetClocksFreq+0x68>
    2262:	683b      	ldr	r3, [r7, #0]
    2264:	2b00      	cmp	r3, #0
    2266:	d165      	bne.n	2334 <RCC_GetClocksFreq+0x124>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
    2268:	687a      	ldr	r2, [r7, #4]
    226a:	4b61      	ldr	r3, [pc, #388]	(23f0 <RCC_GetClocksFreq+0x1e0>)
    226c:	6013      	str	r3, [r2, #0]
    226e:	e064      	b.n	233a <RCC_GetClocksFreq+0x12a>
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
    2270:	687a      	ldr	r2, [r7, #4]
    2272:	4b60      	ldr	r3, [pc, #384]	(23f4 <RCC_GetClocksFreq+0x1e4>)
    2274:	6013      	str	r3, [r2, #0]
    2276:	e060      	b.n	233a <RCC_GetClocksFreq+0x12a>
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
    2278:	4b5c      	ldr	r3, [pc, #368]	(23ec <RCC_GetClocksFreq+0x1dc>)
    227a:	685b      	ldr	r3, [r3, #4]
    227c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    2280:	60fb      	str	r3, [r7, #12]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
    2282:	4b5a      	ldr	r3, [pc, #360]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2284:	685b      	ldr	r3, [r3, #4]
    2286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    228a:	613b      	str	r3, [r7, #16]
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
        }
      }
#else
      pllmull = pllmull >> 18;
    228c:	68fb      	ldr	r3, [r7, #12]
    228e:	ea4f 4393 	mov.w	r3, r3, lsr #18
    2292:	60fb      	str	r3, [r7, #12]
      
      if (pllmull != 0x0D)
    2294:	68fb      	ldr	r3, [r7, #12]
    2296:	2b0d      	cmp	r3, #13
    2298:	d004      	beq.n	22a4 <RCC_GetClocksFreq+0x94>
      {
         pllmull += 2;
    229a:	68fb      	ldr	r3, [r7, #12]
    229c:	f103 0302 	add.w	r3, r3, #2	; 0x2
    22a0:	60fb      	str	r3, [r7, #12]
    22a2:	e002      	b.n	22aa <RCC_GetClocksFreq+0x9a>
      }
      else
      { /* PLL multiplication factor = PLL input clock * 6.5 */
        pllmull = 13 / 2; 
    22a4:	f04f 0306 	mov.w	r3, #6	; 0x6
    22a8:	60fb      	str	r3, [r7, #12]
      }
            
      if (pllsource == 0x00)
    22aa:	693b      	ldr	r3, [r7, #16]
    22ac:	2b00      	cmp	r3, #0
    22ae:	d106      	bne.n	22be <RCC_GetClocksFreq+0xae>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
    22b0:	68fa      	ldr	r2, [r7, #12]
    22b2:	4b51      	ldr	r3, [pc, #324]	(23f8 <RCC_GetClocksFreq+0x1e8>)
    22b4:	fb03 f202 	mul.w	r2, r3, r2
    22b8:	687b      	ldr	r3, [r7, #4]
    22ba:	601a      	str	r2, [r3, #0]
    22bc:	e03d      	b.n	233a <RCC_GetClocksFreq+0x12a>
      }
      else
      {/* PREDIV1 selected as PLL clock entry */
        
        /* Get PREDIV1 clock source and division factor */
        prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
    22be:	4b4b      	ldr	r3, [pc, #300]	(23ec <RCC_GetClocksFreq+0x1dc>)
    22c0:	6adb      	ldr	r3, [r3, #44]
    22c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    22c6:	61bb      	str	r3, [r7, #24]
        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
    22c8:	4b48      	ldr	r3, [pc, #288]	(23ec <RCC_GetClocksFreq+0x1dc>)
    22ca:	6adb      	ldr	r3, [r3, #44]
    22cc:	f003 030f 	and.w	r3, r3, #15	; 0xf
    22d0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    22d4:	61fb      	str	r3, [r7, #28]
        
        if (prediv1source == 0)
    22d6:	69bb      	ldr	r3, [r7, #24]
    22d8:	2b00      	cmp	r3, #0
    22da:	d109      	bne.n	22f0 <RCC_GetClocksFreq+0xe0>
        { /* HSE oscillator clock selected as PREDIV1 clock entry */
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value / prediv1factor) * pllmull;          
    22dc:	4a45      	ldr	r2, [pc, #276]	(23f4 <RCC_GetClocksFreq+0x1e4>)
    22de:	69fb      	ldr	r3, [r7, #28]
    22e0:	fbb2 f2f3 	udiv	r2, r2, r3
    22e4:	68fb      	ldr	r3, [r7, #12]
    22e6:	fb03 f202 	mul.w	r2, r3, r2
    22ea:	687b      	ldr	r3, [r7, #4]
    22ec:	601a      	str	r2, [r3, #0]
    22ee:	e024      	b.n	233a <RCC_GetClocksFreq+0x12a>
        }
        else
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
    22f0:	4b3e      	ldr	r3, [pc, #248]	(23ec <RCC_GetClocksFreq+0x1dc>)
    22f2:	6adb      	ldr	r3, [r3, #44]
    22f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    22f8:	ea4f 1313 	mov.w	r3, r3, lsr #4
    22fc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    2300:	623b      	str	r3, [r7, #32]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
    2302:	4b3a      	ldr	r3, [pc, #232]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2304:	6adb      	ldr	r3, [r3, #44]
    2306:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    230a:	ea4f 2313 	mov.w	r3, r3, lsr #8
    230e:	f103 0302 	add.w	r3, r3, #2	; 0x2
    2312:	627b      	str	r3, [r7, #36]
          RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
    2314:	4a37      	ldr	r2, [pc, #220]	(23f4 <RCC_GetClocksFreq+0x1e4>)
    2316:	6a3b      	ldr	r3, [r7, #32]
    2318:	fbb2 f2f3 	udiv	r2, r2, r3
    231c:	6a7b      	ldr	r3, [r7, #36]
    231e:	fb03 f202 	mul.w	r2, r3, r2
    2322:	69fb      	ldr	r3, [r7, #28]
    2324:	fbb2 f2f3 	udiv	r2, r2, r3
    2328:	68fb      	ldr	r3, [r7, #12]
    232a:	fb03 f202 	mul.w	r2, r3, r2
    232e:	687b      	ldr	r3, [r7, #4]
    2330:	601a      	str	r2, [r3, #0]
    2332:	e002      	b.n	233a <RCC_GetClocksFreq+0x12a>
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
    2334:	687a      	ldr	r2, [r7, #4]
    2336:	4b2e      	ldr	r3, [pc, #184]	(23f0 <RCC_GetClocksFreq+0x1e0>)
    2338:	6013      	str	r3, [r2, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
    233a:	4b2c      	ldr	r3, [pc, #176]	(23ec <RCC_GetClocksFreq+0x1dc>)
    233c:	685b      	ldr	r3, [r3, #4]
    233e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    2342:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 4;
    2344:	68bb      	ldr	r3, [r7, #8]
    2346:	ea4f 1313 	mov.w	r3, r3, lsr #4
    234a:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    234c:	68ba      	ldr	r2, [r7, #8]
    234e:	4b2b      	ldr	r3, [pc, #172]	(23fc <RCC_GetClocksFreq+0x1ec>)
    2350:	5c9b      	ldrb	r3, [r3, r2]
    2352:	b2db      	uxtb	r3, r3
    2354:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
    2356:	687b      	ldr	r3, [r7, #4]
    2358:	681a      	ldr	r2, [r3, #0]
    235a:	697b      	ldr	r3, [r7, #20]
    235c:	fa22 f203 	lsr.w	r2, r2, r3
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
    2364:	4b21      	ldr	r3, [pc, #132]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2366:	685b      	ldr	r3, [r3, #4]
    2368:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    236c:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 8;
    236e:	68bb      	ldr	r3, [r7, #8]
    2370:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2374:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    2376:	68ba      	ldr	r2, [r7, #8]
    2378:	4b20      	ldr	r3, [pc, #128]	(23fc <RCC_GetClocksFreq+0x1ec>)
    237a:	5c9b      	ldrb	r3, [r3, r2]
    237c:	b2db      	uxtb	r3, r3
    237e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    2380:	687b      	ldr	r3, [r7, #4]
    2382:	685a      	ldr	r2, [r3, #4]
    2384:	697b      	ldr	r3, [r7, #20]
    2386:	fa22 f203 	lsr.w	r2, r2, r3
    238a:	687b      	ldr	r3, [r7, #4]
    238c:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
    238e:	4b17      	ldr	r3, [pc, #92]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2390:	685b      	ldr	r3, [r3, #4]
    2392:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    2396:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 11;
    2398:	68bb      	ldr	r3, [r7, #8]
    239a:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    239e:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    23a0:	68ba      	ldr	r2, [r7, #8]
    23a2:	4b16      	ldr	r3, [pc, #88]	(23fc <RCC_GetClocksFreq+0x1ec>)
    23a4:	5c9b      	ldrb	r3, [r3, r2]
    23a6:	b2db      	uxtb	r3, r3
    23a8:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    23aa:	687b      	ldr	r3, [r7, #4]
    23ac:	685a      	ldr	r2, [r3, #4]
    23ae:	697b      	ldr	r3, [r7, #20]
    23b0:	fa22 f203 	lsr.w	r2, r2, r3
    23b4:	687b      	ldr	r3, [r7, #4]
    23b6:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
    23b8:	4b0c      	ldr	r3, [pc, #48]	(23ec <RCC_GetClocksFreq+0x1dc>)
    23ba:	685b      	ldr	r3, [r3, #4]
    23bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    23c0:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 14;
    23c2:	68bb      	ldr	r3, [r7, #8]
    23c4:	ea4f 3393 	mov.w	r3, r3, lsr #14
    23c8:	60bb      	str	r3, [r7, #8]
  presc = ADCPrescTable[tmp];
    23ca:	68ba      	ldr	r2, [r7, #8]
    23cc:	4b0c      	ldr	r3, [pc, #48]	(2400 <RCC_GetClocksFreq+0x1f0>)
    23ce:	5c9b      	ldrb	r3, [r3, r2]
    23d0:	b2db      	uxtb	r3, r3
    23d2:	617b      	str	r3, [r7, #20]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
    23d4:	687b      	ldr	r3, [r7, #4]
    23d6:	68da      	ldr	r2, [r3, #12]
    23d8:	697b      	ldr	r3, [r7, #20]
    23da:	fbb2 f2f3 	udiv	r2, r2, r3
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	611a      	str	r2, [r3, #16]
}
    23e2:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    23e6:	46bd      	mov	sp, r7
    23e8:	bc80      	pop	{r7}
    23ea:	4770      	bx	lr
    23ec:	40021000 	.word	0x40021000
    23f0:	007a1200 	.word	0x007a1200
    23f4:	017d7840 	.word	0x017d7840
    23f8:	003d0900 	.word	0x003d0900
    23fc:	20000000 	.word	0x20000000
    2400:	20000010 	.word	0x20000010

00002404 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    2404:	b480      	push	{r7}
    2406:	b083      	sub	sp, #12
    2408:	af00      	add	r7, sp, #0
    240a:	6078      	str	r0, [r7, #4]
    240c:	460b      	mov	r3, r1
    240e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    2410:	78fb      	ldrb	r3, [r7, #3]
    2412:	2b00      	cmp	r3, #0
    2414:	d007      	beq.n	2426 <RCC_AHBPeriphClockCmd+0x22>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
    2416:	490b      	ldr	r1, [pc, #44]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    2418:	4b0a      	ldr	r3, [pc, #40]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    241a:	695a      	ldr	r2, [r3, #20]
    241c:	687b      	ldr	r3, [r7, #4]
    241e:	ea42 0303 	orr.w	r3, r2, r3
    2422:	614b      	str	r3, [r1, #20]
    2424:	e008      	b.n	2438 <RCC_AHBPeriphClockCmd+0x34>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
    2426:	4907      	ldr	r1, [pc, #28]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    2428:	4b06      	ldr	r3, [pc, #24]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    242a:	695a      	ldr	r2, [r3, #20]
    242c:	687b      	ldr	r3, [r7, #4]
    242e:	ea6f 0303 	mvn.w	r3, r3
    2432:	ea02 0303 	and.w	r3, r2, r3
    2436:	614b      	str	r3, [r1, #20]
  }
}
    2438:	f107 070c 	add.w	r7, r7, #12	; 0xc
    243c:	46bd      	mov	sp, r7
    243e:	bc80      	pop	{r7}
    2440:	4770      	bx	lr
    2442:	46c0      	nop			(mov r8, r8)
    2444:	40021000 	.word	0x40021000

00002448 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    2448:	b480      	push	{r7}
    244a:	b083      	sub	sp, #12
    244c:	af00      	add	r7, sp, #0
    244e:	6078      	str	r0, [r7, #4]
    2450:	460b      	mov	r3, r1
    2452:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2454:	78fb      	ldrb	r3, [r7, #3]
    2456:	2b00      	cmp	r3, #0
    2458:	d007      	beq.n	246a <RCC_APB2PeriphClockCmd+0x22>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
    245a:	490b      	ldr	r1, [pc, #44]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    245c:	4b0a      	ldr	r3, [pc, #40]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    245e:	699a      	ldr	r2, [r3, #24]
    2460:	687b      	ldr	r3, [r7, #4]
    2462:	ea42 0303 	orr.w	r3, r2, r3
    2466:	618b      	str	r3, [r1, #24]
    2468:	e008      	b.n	247c <RCC_APB2PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
    246a:	4907      	ldr	r1, [pc, #28]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    246c:	4b06      	ldr	r3, [pc, #24]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    246e:	699a      	ldr	r2, [r3, #24]
    2470:	687b      	ldr	r3, [r7, #4]
    2472:	ea6f 0303 	mvn.w	r3, r3
    2476:	ea02 0303 	and.w	r3, r2, r3
    247a:	618b      	str	r3, [r1, #24]
  }
}
    247c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2480:	46bd      	mov	sp, r7
    2482:	bc80      	pop	{r7}
    2484:	4770      	bx	lr
    2486:	46c0      	nop			(mov r8, r8)
    2488:	40021000 	.word	0x40021000

0000248c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    248c:	b480      	push	{r7}
    248e:	b083      	sub	sp, #12
    2490:	af00      	add	r7, sp, #0
    2492:	6078      	str	r0, [r7, #4]
    2494:	460b      	mov	r3, r1
    2496:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2498:	78fb      	ldrb	r3, [r7, #3]
    249a:	2b00      	cmp	r3, #0
    249c:	d007      	beq.n	24ae <RCC_APB1PeriphClockCmd+0x22>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
    249e:	490b      	ldr	r1, [pc, #44]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24a0:	4b0a      	ldr	r3, [pc, #40]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24a2:	69da      	ldr	r2, [r3, #28]
    24a4:	687b      	ldr	r3, [r7, #4]
    24a6:	ea42 0303 	orr.w	r3, r2, r3
    24aa:	61cb      	str	r3, [r1, #28]
    24ac:	e008      	b.n	24c0 <RCC_APB1PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
    24ae:	4907      	ldr	r1, [pc, #28]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24b0:	4b06      	ldr	r3, [pc, #24]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24b2:	69da      	ldr	r2, [r3, #28]
    24b4:	687b      	ldr	r3, [r7, #4]
    24b6:	ea6f 0303 	mvn.w	r3, r3
    24ba:	ea02 0303 	and.w	r3, r2, r3
    24be:	61cb      	str	r3, [r1, #28]
  }
}
    24c0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    24c4:	46bd      	mov	sp, r7
    24c6:	bc80      	pop	{r7}
    24c8:	4770      	bx	lr
    24ca:	46c0      	nop			(mov r8, r8)
    24cc:	40021000 	.word	0x40021000

000024d0 <RCC_AHBPeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    24d0:	b480      	push	{r7}
    24d2:	b083      	sub	sp, #12
    24d4:	af00      	add	r7, sp, #0
    24d6:	6078      	str	r0, [r7, #4]
    24d8:	460b      	mov	r3, r1
    24da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    24dc:	78fb      	ldrb	r3, [r7, #3]
    24de:	2b00      	cmp	r3, #0
    24e0:	d007      	beq.n	24f2 <RCC_AHBPeriphResetCmd+0x22>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
    24e2:	490b      	ldr	r1, [pc, #44]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24e4:	4b0a      	ldr	r3, [pc, #40]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24e6:	6a9a      	ldr	r2, [r3, #40]
    24e8:	687b      	ldr	r3, [r7, #4]
    24ea:	ea42 0303 	orr.w	r3, r2, r3
    24ee:	628b      	str	r3, [r1, #40]
    24f0:	e008      	b.n	2504 <RCC_AHBPeriphResetCmd+0x34>
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
    24f2:	4907      	ldr	r1, [pc, #28]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24f4:	4b06      	ldr	r3, [pc, #24]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24f6:	6a9a      	ldr	r2, [r3, #40]
    24f8:	687b      	ldr	r3, [r7, #4]
    24fa:	ea6f 0303 	mvn.w	r3, r3
    24fe:	ea02 0303 	and.w	r3, r2, r3
    2502:	628b      	str	r3, [r1, #40]
  }
}
    2504:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2508:	46bd      	mov	sp, r7
    250a:	bc80      	pop	{r7}
    250c:	4770      	bx	lr
    250e:	46c0      	nop			(mov r8, r8)
    2510:	40021000 	.word	0x40021000

00002514 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    2514:	b480      	push	{r7}
    2516:	b083      	sub	sp, #12
    2518:	af00      	add	r7, sp, #0
    251a:	6078      	str	r0, [r7, #4]
    251c:	460b      	mov	r3, r1
    251e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2520:	78fb      	ldrb	r3, [r7, #3]
    2522:	2b00      	cmp	r3, #0
    2524:	d007      	beq.n	2536 <RCC_APB2PeriphResetCmd+0x22>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
    2526:	490b      	ldr	r1, [pc, #44]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    2528:	4b0a      	ldr	r3, [pc, #40]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    252a:	68da      	ldr	r2, [r3, #12]
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	ea42 0303 	orr.w	r3, r2, r3
    2532:	60cb      	str	r3, [r1, #12]
    2534:	e008      	b.n	2548 <RCC_APB2PeriphResetCmd+0x34>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
    2536:	4907      	ldr	r1, [pc, #28]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    2538:	4b06      	ldr	r3, [pc, #24]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    253a:	68da      	ldr	r2, [r3, #12]
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	ea6f 0303 	mvn.w	r3, r3
    2542:	ea02 0303 	and.w	r3, r2, r3
    2546:	60cb      	str	r3, [r1, #12]
  }
}
    2548:	f107 070c 	add.w	r7, r7, #12	; 0xc
    254c:	46bd      	mov	sp, r7
    254e:	bc80      	pop	{r7}
    2550:	4770      	bx	lr
    2552:	46c0      	nop			(mov r8, r8)
    2554:	40021000 	.word	0x40021000

00002558 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    2558:	b480      	push	{r7}
    255a:	b083      	sub	sp, #12
    255c:	af00      	add	r7, sp, #0
    255e:	6078      	str	r0, [r7, #4]
    2560:	460b      	mov	r3, r1
    2562:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2564:	78fb      	ldrb	r3, [r7, #3]
    2566:	2b00      	cmp	r3, #0
    2568:	d007      	beq.n	257a <RCC_APB1PeriphResetCmd+0x22>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
    256a:	490b      	ldr	r1, [pc, #44]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    256c:	4b0a      	ldr	r3, [pc, #40]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    256e:	691a      	ldr	r2, [r3, #16]
    2570:	687b      	ldr	r3, [r7, #4]
    2572:	ea42 0303 	orr.w	r3, r2, r3
    2576:	610b      	str	r3, [r1, #16]
    2578:	e008      	b.n	258c <RCC_APB1PeriphResetCmd+0x34>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
    257a:	4907      	ldr	r1, [pc, #28]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    257c:	4b06      	ldr	r3, [pc, #24]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    257e:	691a      	ldr	r2, [r3, #16]
    2580:	687b      	ldr	r3, [r7, #4]
    2582:	ea6f 0303 	mvn.w	r3, r3
    2586:	ea02 0303 	and.w	r3, r2, r3
    258a:	610b      	str	r3, [r1, #16]
  }
}
    258c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2590:	46bd      	mov	sp, r7
    2592:	bc80      	pop	{r7}
    2594:	4770      	bx	lr
    2596:	46c0      	nop			(mov r8, r8)
    2598:	40021000 	.word	0x40021000

0000259c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
    259c:	b480      	push	{r7}
    259e:	b083      	sub	sp, #12
    25a0:	af00      	add	r7, sp, #0
    25a2:	4603      	mov	r3, r0
    25a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
    25a6:	4a04      	ldr	r2, [pc, #16]	(25b8 <RCC_BackupResetCmd+0x1c>)
    25a8:	79fb      	ldrb	r3, [r7, #7]
    25aa:	6013      	str	r3, [r2, #0]
}
    25ac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    25b0:	46bd      	mov	sp, r7
    25b2:	bc80      	pop	{r7}
    25b4:	4770      	bx	lr
    25b6:	46c0      	nop			(mov r8, r8)
    25b8:	42420440 	.word	0x42420440

000025bc <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
    25bc:	b480      	push	{r7}
    25be:	b083      	sub	sp, #12
    25c0:	af00      	add	r7, sp, #0
    25c2:	4603      	mov	r3, r0
    25c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
    25c6:	4a04      	ldr	r2, [pc, #16]	(25d8 <RCC_ClockSecuritySystemCmd+0x1c>)
    25c8:	79fb      	ldrb	r3, [r7, #7]
    25ca:	6013      	str	r3, [r2, #0]
}
    25cc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    25d0:	46bd      	mov	sp, r7
    25d2:	bc80      	pop	{r7}
    25d4:	4770      	bx	lr
    25d6:	46c0      	nop			(mov r8, r8)
    25d8:	4242004c 	.word	0x4242004c

000025dc <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    25dc:	b480      	push	{r7}
    25de:	b083      	sub	sp, #12
    25e0:	af00      	add	r7, sp, #0
    25e2:	4603      	mov	r3, r0
    25e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    25e6:	4a04      	ldr	r2, [pc, #16]	(25f8 <RCC_MCOConfig+0x1c>)
    25e8:	79fb      	ldrb	r3, [r7, #7]
    25ea:	7013      	strb	r3, [r2, #0]
}
    25ec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    25f0:	46bd      	mov	sp, r7
    25f2:	bc80      	pop	{r7}
    25f4:	4770      	bx	lr
    25f6:	46c0      	nop			(mov r8, r8)
    25f8:	40021007 	.word	0x40021007

000025fc <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    25fc:	b480      	push	{r7}
    25fe:	b087      	sub	sp, #28
    2600:	af00      	add	r7, sp, #0
    2602:	4603      	mov	r3, r0
    2604:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
    2606:	f04f 0300 	mov.w	r3, #0	; 0x0
    260a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
    260c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2610:	613b      	str	r3, [r7, #16]
  FlagStatus bitstatus = RESET;
    2612:	f04f 0300 	mov.w	r3, #0	; 0x0
    2616:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    2618:	79fb      	ldrb	r3, [r7, #7]
    261a:	ea4f 1353 	mov.w	r3, r3, lsr #5
    261e:	b2db      	uxtb	r3, r3
    2620:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
    2622:	68fb      	ldr	r3, [r7, #12]
    2624:	2b01      	cmp	r3, #1
    2626:	d103      	bne.n	2630 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
    2628:	4b14      	ldr	r3, [pc, #80]	(267c <RCC_GetFlagStatus+0x80>)
    262a:	681b      	ldr	r3, [r3, #0]
    262c:	613b      	str	r3, [r7, #16]
    262e:	e009      	b.n	2644 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    2630:	68fb      	ldr	r3, [r7, #12]
    2632:	2b02      	cmp	r3, #2
    2634:	d103      	bne.n	263e <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
    2636:	4b11      	ldr	r3, [pc, #68]	(267c <RCC_GetFlagStatus+0x80>)
    2638:	6a1b      	ldr	r3, [r3, #32]
    263a:	613b      	str	r3, [r7, #16]
    263c:	e002      	b.n	2644 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    263e:	4b0f      	ldr	r3, [pc, #60]	(267c <RCC_GetFlagStatus+0x80>)
    2640:	6a5b      	ldr	r3, [r3, #36]
    2642:	613b      	str	r3, [r7, #16]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    2644:	79fb      	ldrb	r3, [r7, #7]
    2646:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    264a:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    264c:	68fa      	ldr	r2, [r7, #12]
    264e:	693b      	ldr	r3, [r7, #16]
    2650:	fa23 f302 	lsr.w	r3, r3, r2
    2654:	f003 0301 	and.w	r3, r3, #1	; 0x1
    2658:	b2db      	uxtb	r3, r3
    265a:	2b00      	cmp	r3, #0
    265c:	d003      	beq.n	2666 <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
    265e:	f04f 0301 	mov.w	r3, #1	; 0x1
    2662:	75fb      	strb	r3, [r7, #23]
    2664:	e002      	b.n	266c <RCC_GetFlagStatus+0x70>
  }
  else
  {
    bitstatus = RESET;
    2666:	f04f 0300 	mov.w	r3, #0	; 0x0
    266a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the flag status */
  return bitstatus;
    266c:	7dfb      	ldrb	r3, [r7, #23]
}
    266e:	4618      	mov	r0, r3
    2670:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2674:	46bd      	mov	sp, r7
    2676:	bc80      	pop	{r7}
    2678:	4770      	bx	lr
    267a:	46c0      	nop			(mov r8, r8)
    267c:	40021000 	.word	0x40021000

00002680 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    2680:	b480      	push	{r7}
    2682:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    2684:	4a04      	ldr	r2, [pc, #16]	(2698 <RCC_ClearFlag+0x18>)
    2686:	4b04      	ldr	r3, [pc, #16]	(2698 <RCC_ClearFlag+0x18>)
    2688:	6a5b      	ldr	r3, [r3, #36]
    268a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    268e:	6253      	str	r3, [r2, #36]
}
    2690:	46bd      	mov	sp, r7
    2692:	bc80      	pop	{r7}
    2694:	4770      	bx	lr
    2696:	46c0      	nop			(mov r8, r8)
    2698:	40021000 	.word	0x40021000

0000269c <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    269c:	b480      	push	{r7}
    269e:	b085      	sub	sp, #20
    26a0:	af00      	add	r7, sp, #0
    26a2:	4603      	mov	r3, r0
    26a4:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    26a6:	f04f 0300 	mov.w	r3, #0	; 0x0
    26aa:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    26ac:	4b0a      	ldr	r3, [pc, #40]	(26d8 <RCC_GetITStatus+0x3c>)
    26ae:	689a      	ldr	r2, [r3, #8]
    26b0:	79fb      	ldrb	r3, [r7, #7]
    26b2:	ea02 0303 	and.w	r3, r2, r3
    26b6:	2b00      	cmp	r3, #0
    26b8:	d003      	beq.n	26c2 <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    26ba:	f04f 0301 	mov.w	r3, #1	; 0x1
    26be:	73fb      	strb	r3, [r7, #15]
    26c0:	e002      	b.n	26c8 <RCC_GetITStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
    26c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    26c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    26c8:	7bfb      	ldrb	r3, [r7, #15]
}
    26ca:	4618      	mov	r0, r3
    26cc:	f107 0714 	add.w	r7, r7, #20	; 0x14
    26d0:	46bd      	mov	sp, r7
    26d2:	bc80      	pop	{r7}
    26d4:	4770      	bx	lr
    26d6:	46c0      	nop			(mov r8, r8)
    26d8:	40021000 	.word	0x40021000

000026dc <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    26dc:	b480      	push	{r7}
    26de:	b083      	sub	sp, #12
    26e0:	af00      	add	r7, sp, #0
    26e2:	4603      	mov	r3, r0
    26e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    26e6:	4a04      	ldr	r2, [pc, #16]	(26f8 <RCC_ClearITPendingBit+0x1c>)
    26e8:	79fb      	ldrb	r3, [r7, #7]
    26ea:	7013      	strb	r3, [r2, #0]
}
    26ec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    26f0:	46bd      	mov	sp, r7
    26f2:	bc80      	pop	{r7}
    26f4:	4770      	bx	lr
    26f6:	46c0      	nop			(mov r8, r8)
    26f8:	4002100a 	.word	0x4002100a

000026fc <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
    26fc:	b580      	push	{r7, lr}
    26fe:	b082      	sub	sp, #8
    2700:	af00      	add	r7, sp, #0
    2702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
    2704:	687a      	ldr	r2, [r7, #4]
    2706:	4b45      	ldr	r3, [pc, #276]	(281c <TIM_DeInit+0x120>)
    2708:	429a      	cmp	r2, r3
    270a:	d10c      	bne.n	2726 <TIM_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    270c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2710:	f04f 0101 	mov.w	r1, #1	; 0x1
    2714:	f7ff fefe 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
    2718:	f44f 6000 	mov.w	r0, #2048	; 0x800
    271c:	f04f 0100 	mov.w	r1, #0	; 0x0
    2720:	f7ff fef8 	bl	2514 <RCC_APB2PeriphResetCmd>
    2724:	e075      	b.n	2812 <TIM_DeInit+0x116>
  }     
  else if (TIMx == TIM2)
    2726:	687b      	ldr	r3, [r7, #4]
    2728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    272c:	d10c      	bne.n	2748 <TIM_DeInit+0x4c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    272e:	f04f 0001 	mov.w	r0, #1	; 0x1
    2732:	f04f 0101 	mov.w	r1, #1	; 0x1
    2736:	f7ff ff0f 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
    273a:	f04f 0001 	mov.w	r0, #1	; 0x1
    273e:	f04f 0100 	mov.w	r1, #0	; 0x0
    2742:	f7ff ff09 	bl	2558 <RCC_APB1PeriphResetCmd>
    2746:	e064      	b.n	2812 <TIM_DeInit+0x116>
  }
  else if (TIMx == TIM3)
    2748:	687a      	ldr	r2, [r7, #4]
    274a:	4b35      	ldr	r3, [pc, #212]	(2820 <TIM_DeInit+0x124>)
    274c:	429a      	cmp	r2, r3
    274e:	d10c      	bne.n	276a <TIM_DeInit+0x6e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    2750:	f04f 0002 	mov.w	r0, #2	; 0x2
    2754:	f04f 0101 	mov.w	r1, #1	; 0x1
    2758:	f7ff fefe 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
    275c:	f04f 0002 	mov.w	r0, #2	; 0x2
    2760:	f04f 0100 	mov.w	r1, #0	; 0x0
    2764:	f7ff fef8 	bl	2558 <RCC_APB1PeriphResetCmd>
    2768:	e053      	b.n	2812 <TIM_DeInit+0x116>
  }
  else if (TIMx == TIM4)
    276a:	687a      	ldr	r2, [r7, #4]
    276c:	4b2d      	ldr	r3, [pc, #180]	(2824 <TIM_DeInit+0x128>)
    276e:	429a      	cmp	r2, r3
    2770:	d10c      	bne.n	278c <TIM_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    2772:	f04f 0004 	mov.w	r0, #4	; 0x4
    2776:	f04f 0101 	mov.w	r1, #1	; 0x1
    277a:	f7ff feed 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
    277e:	f04f 0004 	mov.w	r0, #4	; 0x4
    2782:	f04f 0100 	mov.w	r1, #0	; 0x0
    2786:	f7ff fee7 	bl	2558 <RCC_APB1PeriphResetCmd>
    278a:	e042      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else if (TIMx == TIM5)
    278c:	687a      	ldr	r2, [r7, #4]
    278e:	4b26      	ldr	r3, [pc, #152]	(2828 <TIM_DeInit+0x12c>)
    2790:	429a      	cmp	r2, r3
    2792:	d10c      	bne.n	27ae <TIM_DeInit+0xb2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    2794:	f04f 0008 	mov.w	r0, #8	; 0x8
    2798:	f04f 0101 	mov.w	r1, #1	; 0x1
    279c:	f7ff fedc 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
    27a0:	f04f 0008 	mov.w	r0, #8	; 0x8
    27a4:	f04f 0100 	mov.w	r1, #0	; 0x0
    27a8:	f7ff fed6 	bl	2558 <RCC_APB1PeriphResetCmd>
    27ac:	e031      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else if (TIMx == TIM6)
    27ae:	687a      	ldr	r2, [r7, #4]
    27b0:	4b1e      	ldr	r3, [pc, #120]	(282c <TIM_DeInit+0x130>)
    27b2:	429a      	cmp	r2, r3
    27b4:	d10c      	bne.n	27d0 <TIM_DeInit+0xd4>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    27b6:	f04f 0010 	mov.w	r0, #16	; 0x10
    27ba:	f04f 0101 	mov.w	r1, #1	; 0x1
    27be:	f7ff fecb 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
    27c2:	f04f 0010 	mov.w	r0, #16	; 0x10
    27c6:	f04f 0100 	mov.w	r1, #0	; 0x0
    27ca:	f7ff fec5 	bl	2558 <RCC_APB1PeriphResetCmd>
    27ce:	e020      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else if (TIMx == TIM7)
    27d0:	687a      	ldr	r2, [r7, #4]
    27d2:	4b17      	ldr	r3, [pc, #92]	(2830 <TIM_DeInit+0x134>)
    27d4:	429a      	cmp	r2, r3
    27d6:	d10c      	bne.n	27f2 <TIM_DeInit+0xf6>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    27d8:	f04f 0020 	mov.w	r0, #32	; 0x20
    27dc:	f04f 0101 	mov.w	r1, #1	; 0x1
    27e0:	f7ff feba 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
    27e4:	f04f 0020 	mov.w	r0, #32	; 0x20
    27e8:	f04f 0100 	mov.w	r1, #0	; 0x0
    27ec:	f7ff feb4 	bl	2558 <RCC_APB1PeriphResetCmd>
    27f0:	e00f      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else
  {
    if (TIMx == TIM8)
    27f2:	687a      	ldr	r2, [r7, #4]
    27f4:	4b0f      	ldr	r3, [pc, #60]	(2834 <TIM_DeInit+0x138>)
    27f6:	429a      	cmp	r2, r3
    27f8:	d10b      	bne.n	2812 <TIM_DeInit+0x116>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    27fa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    27fe:	f04f 0101 	mov.w	r1, #1	; 0x1
    2802:	f7ff fe87 	bl	2514 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
    2806:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    280a:	f04f 0100 	mov.w	r1, #0	; 0x0
    280e:	f7ff fe81 	bl	2514 <RCC_APB2PeriphResetCmd>
    }  
  }
}
    2812:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2816:	46bd      	mov	sp, r7
    2818:	bd80      	pop	{r7, pc}
    281a:	46c0      	nop			(mov r8, r8)
    281c:	40012c00 	.word	0x40012c00
    2820:	40000400 	.word	0x40000400
    2824:	40000800 	.word	0x40000800
    2828:	40000c00 	.word	0x40000c00
    282c:	40001000 	.word	0x40001000
    2830:	40001400 	.word	0x40001400
    2834:	40013400 	.word	0x40013400

00002838 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef
  *   structure that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    2838:	b480      	push	{r7}
    283a:	b083      	sub	sp, #12
    283c:	af00      	add	r7, sp, #0
    283e:	6078      	str	r0, [r7, #4]
    2840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
    2842:	687b      	ldr	r3, [r7, #4]
    2844:	881b      	ldrh	r3, [r3, #0]
    2846:	b29b      	uxth	r3, r3
    2848:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    284c:	687a      	ldr	r2, [r7, #4]
    284e:	8013      	strh	r3, [r2, #0]
  TIMx->CR1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision |
    2850:	687b      	ldr	r3, [r7, #4]
    2852:	881b      	ldrh	r3, [r3, #0]
    2854:	b299      	uxth	r1, r3
    2856:	683b      	ldr	r3, [r7, #0]
    2858:	88da      	ldrh	r2, [r3, #6]
    285a:	683b      	ldr	r3, [r7, #0]
    285c:	885b      	ldrh	r3, [r3, #2]
    285e:	ea42 0303 	orr.w	r3, r2, r3
    2862:	b29b      	uxth	r3, r3
    2864:	ea41 0303 	orr.w	r3, r1, r3
    2868:	b29b      	uxth	r3, r3
    286a:	687a      	ldr	r2, [r7, #4]
    286c:	8013      	strh	r3, [r2, #0]
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
    286e:	683b      	ldr	r3, [r7, #0]
    2870:	889b      	ldrh	r3, [r3, #4]
    2872:	687a      	ldr	r2, [r7, #4]
    2874:	8593      	strh	r3, [r2, #44]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    2876:	683b      	ldr	r3, [r7, #0]
    2878:	881b      	ldrh	r3, [r3, #0]
    287a:	687a      	ldr	r2, [r7, #4]
    287c:	8513      	strh	r3, [r2, #40]
    
  if ((((uint32_t) TIMx) == TIM1_BASE) || (((uint32_t) TIMx) == TIM8_BASE))  
    287e:	687a      	ldr	r2, [r7, #4]
    2880:	4b09      	ldr	r3, [pc, #36]	(28a8 <TIM_TimeBaseInit+0x70>)
    2882:	429a      	cmp	r2, r3
    2884:	d003      	beq.n	288e <TIM_TimeBaseInit+0x56>
    2886:	687a      	ldr	r2, [r7, #4]
    2888:	4b08      	ldr	r3, [pc, #32]	(28ac <TIM_TimeBaseInit+0x74>)
    288a:	429a      	cmp	r2, r3
    288c:	d103      	bne.n	2896 <TIM_TimeBaseInit+0x5e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
    288e:	683b      	ldr	r3, [r7, #0]
    2890:	7a1b      	ldrb	r3, [r3, #8]
    2892:	687a      	ldr	r2, [r7, #4]
    2894:	8613      	strh	r3, [r2, #48]
  }

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
    2896:	687b      	ldr	r3, [r7, #4]
    2898:	f04f 0201 	mov.w	r2, #1	; 0x1
    289c:	829a      	strh	r2, [r3, #20]
}
    289e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    28a2:	46bd      	mov	sp, r7
    28a4:	bc80      	pop	{r7}
    28a6:	4770      	bx	lr
    28a8:	40012c00 	.word	0x40012c00
    28ac:	40013400 	.word	0x40013400

000028b0 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    28b0:	b480      	push	{r7}
    28b2:	b087      	sub	sp, #28
    28b4:	af00      	add	r7, sp, #0
    28b6:	60f8      	str	r0, [r7, #12]
    28b8:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    28ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    28be:	827b      	strh	r3, [r7, #18]
    28c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    28c4:	82bb      	strh	r3, [r7, #20]
    28c6:	f04f 0300 	mov.w	r3, #0	; 0x0
    28ca:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
    28cc:	68fb      	ldr	r3, [r7, #12]
    28ce:	8c1b      	ldrh	r3, [r3, #32]
    28d0:	b29b      	uxth	r3, r3
    28d2:	607b      	str	r3, [r7, #4]
    28d4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    28d8:	6879      	ldr	r1, [r7, #4]
    28da:	ea01 0303 	and.w	r3, r1, r3
    28de:	607b      	str	r3, [r7, #4]
    28e0:	68fa      	ldr	r2, [r7, #12]
    28e2:	6879      	ldr	r1, [r7, #4]
    28e4:	460b      	mov	r3, r1
    28e6:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    28e8:	68fb      	ldr	r3, [r7, #12]
    28ea:	8c1b      	ldrh	r3, [r3, #32]
    28ec:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    28ee:	68fb      	ldr	r3, [r7, #12]
    28f0:	889b      	ldrh	r3, [r3, #4]
    28f2:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    28f4:	68fb      	ldr	r3, [r7, #12]
    28f6:	8b1b      	ldrh	r3, [r3, #24]
    28f8:	827b      	strh	r3, [r7, #18]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC13M_Mask & CCMR_CC13S_Mask;
    28fa:	8a7b      	ldrh	r3, [r7, #18]
    28fc:	f023 0373 	bic.w	r3, r3, #115	; 0x73
    2900:	827b      	strh	r3, [r7, #18]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    2902:	68bb      	ldr	r3, [r7, #8]
    2904:	881a      	ldrh	r2, [r3, #0]
    2906:	8a7b      	ldrh	r3, [r7, #18]
    2908:	ea42 0303 	orr.w	r3, r2, r3
    290c:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
    290e:	8abb      	ldrh	r3, [r7, #20]
    2910:	f023 0302 	bic.w	r3, r3, #2	; 0x2
    2914:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
    2916:	68bb      	ldr	r3, [r7, #8]
    2918:	891a      	ldrh	r2, [r3, #8]
    291a:	8abb      	ldrh	r3, [r7, #20]
    291c:	ea42 0303 	orr.w	r3, r2, r3
    2920:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    2922:	68bb      	ldr	r3, [r7, #8]
    2924:	885a      	ldrh	r2, [r3, #2]
    2926:	8abb      	ldrh	r3, [r7, #20]
    2928:	ea42 0303 	orr.w	r3, r2, r3
    292c:	82bb      	strh	r3, [r7, #20]
 
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    292e:	68fa      	ldr	r2, [r7, #12]
    2930:	4b24      	ldr	r3, [pc, #144]	(29c4 <TIM_OC1Init+0x114>)
    2932:	429a      	cmp	r2, r3
    2934:	d003      	beq.n	293e <TIM_OC1Init+0x8e>
    2936:	68fa      	ldr	r2, [r7, #12]
    2938:	4b23      	ldr	r3, [pc, #140]	(29c8 <TIM_OC1Init+0x118>)
    293a:	429a      	cmp	r2, r3
    293c:	d12f      	bne.n	299e <TIM_OC1Init+0xee>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
    293e:	8abb      	ldrh	r3, [r7, #20]
    2940:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    2944:	82bb      	strh	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    2946:	68bb      	ldr	r3, [r7, #8]
    2948:	895a      	ldrh	r2, [r3, #10]
    294a:	8abb      	ldrh	r3, [r7, #20]
    294c:	ea42 0303 	orr.w	r3, r2, r3
    2950:	82bb      	strh	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
    2952:	8abb      	ldrh	r3, [r7, #20]
    2954:	f023 0304 	bic.w	r3, r3, #4	; 0x4
    2958:	82bb      	strh	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    295a:	68bb      	ldr	r3, [r7, #8]
    295c:	889a      	ldrh	r2, [r3, #4]
    295e:	8abb      	ldrh	r3, [r7, #20]
    2960:	ea42 0303 	orr.w	r3, r2, r3
    2964:	82bb      	strh	r3, [r7, #20]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    2966:	8afb      	ldrh	r3, [r7, #22]
    2968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    296c:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2970:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2974:	82fb      	strh	r3, [r7, #22]
    tmpcr2 &= CR2_OIS1N_Reset;
    2976:	8afb      	ldrh	r3, [r7, #22]
    2978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    297c:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2980:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2984:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    2986:	68bb      	ldr	r3, [r7, #8]
    2988:	899a      	ldrh	r2, [r3, #12]
    298a:	8afb      	ldrh	r3, [r7, #22]
    298c:	ea42 0303 	orr.w	r3, r2, r3
    2990:	82fb      	strh	r3, [r7, #22]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
    2992:	68bb      	ldr	r3, [r7, #8]
    2994:	89da      	ldrh	r2, [r3, #14]
    2996:	8afb      	ldrh	r3, [r7, #22]
    2998:	ea42 0303 	orr.w	r3, r2, r3
    299c:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    299e:	68fa      	ldr	r2, [r7, #12]
    29a0:	8afb      	ldrh	r3, [r7, #22]
    29a2:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    29a4:	68fa      	ldr	r2, [r7, #12]
    29a6:	8a7b      	ldrh	r3, [r7, #18]
    29a8:	8313      	strh	r3, [r2, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
    29aa:	68bb      	ldr	r3, [r7, #8]
    29ac:	88db      	ldrh	r3, [r3, #6]
    29ae:	68fa      	ldr	r2, [r7, #12]
    29b0:	8693      	strh	r3, [r2, #52]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    29b2:	68fa      	ldr	r2, [r7, #12]
    29b4:	8abb      	ldrh	r3, [r7, #20]
    29b6:	8413      	strh	r3, [r2, #32]
}
    29b8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    29bc:	46bd      	mov	sp, r7
    29be:	bc80      	pop	{r7}
    29c0:	4770      	bx	lr
    29c2:	46c0      	nop			(mov r8, r8)
    29c4:	40012c00 	.word	0x40012c00
    29c8:	40013400 	.word	0x40013400

000029cc <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    29cc:	b480      	push	{r7}
    29ce:	b087      	sub	sp, #28
    29d0:	af00      	add	r7, sp, #0
    29d2:	60f8      	str	r0, [r7, #12]
    29d4:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    29d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    29da:	827b      	strh	r3, [r7, #18]
    29dc:	f04f 0300 	mov.w	r3, #0	; 0x0
    29e0:	82bb      	strh	r3, [r7, #20]
    29e2:	f04f 0300 	mov.w	r3, #0	; 0x0
    29e6:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
    29e8:	68fb      	ldr	r3, [r7, #12]
    29ea:	8c1b      	ldrh	r3, [r3, #32]
    29ec:	b29b      	uxth	r3, r3
    29ee:	607b      	str	r3, [r7, #4]
    29f0:	f64f 73ef 	movw	r3, #65519	; 0xffef
    29f4:	6879      	ldr	r1, [r7, #4]
    29f6:	ea01 0303 	and.w	r3, r1, r3
    29fa:	607b      	str	r3, [r7, #4]
    29fc:	68fa      	ldr	r2, [r7, #12]
    29fe:	6879      	ldr	r1, [r7, #4]
    2a00:	460b      	mov	r3, r1
    2a02:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
    2a04:	68fb      	ldr	r3, [r7, #12]
    2a06:	8c1b      	ldrh	r3, [r3, #32]
    2a08:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    2a0a:	68fb      	ldr	r3, [r7, #12]
    2a0c:	889b      	ldrh	r3, [r3, #4]
    2a0e:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    2a10:	68fb      	ldr	r3, [r7, #12]
    2a12:	8b1b      	ldrh	r3, [r3, #24]
    2a14:	827b      	strh	r3, [r7, #18]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask;  
    2a16:	8a7b      	ldrh	r3, [r7, #18]
    2a18:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
    2a1c:	827b      	strh	r3, [r7, #18]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    2a1e:	68bb      	ldr	r3, [r7, #8]
    2a20:	881b      	ldrh	r3, [r3, #0]
    2a22:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2a26:	b29a      	uxth	r2, r3
    2a28:	8a7b      	ldrh	r3, [r7, #18]
    2a2a:	ea42 0303 	orr.w	r3, r2, r3
    2a2e:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
    2a30:	8abb      	ldrh	r3, [r7, #20]
    2a32:	f023 0320 	bic.w	r3, r3, #32	; 0x20
    2a36:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
    2a38:	68bb      	ldr	r3, [r7, #8]
    2a3a:	891b      	ldrh	r3, [r3, #8]
    2a3c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a40:	b29a      	uxth	r2, r3
    2a42:	8abb      	ldrh	r3, [r7, #20]
    2a44:	ea42 0303 	orr.w	r3, r2, r3
    2a48:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    2a4a:	68bb      	ldr	r3, [r7, #8]
    2a4c:	885b      	ldrh	r3, [r3, #2]
    2a4e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a52:	b29a      	uxth	r2, r3
    2a54:	8abb      	ldrh	r3, [r7, #20]
    2a56:	ea42 0303 	orr.w	r3, r2, r3
    2a5a:	82bb      	strh	r3, [r7, #20]
    
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    2a5c:	68fa      	ldr	r2, [r7, #12]
    2a5e:	4b2a      	ldr	r3, [pc, #168]	(2b08 <TIM_OC2Init+0x13c>)
    2a60:	429a      	cmp	r2, r3
    2a62:	d003      	beq.n	2a6c <TIM_OC2Init+0xa0>
    2a64:	68fa      	ldr	r2, [r7, #12]
    2a66:	4b29      	ldr	r3, [pc, #164]	(2b0c <TIM_OC2Init+0x140>)
    2a68:	429a      	cmp	r2, r3
    2a6a:	d13b      	bne.n	2ae4 <TIM_OC2Init+0x118>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
    2a6c:	8abb      	ldrh	r3, [r7, #20]
    2a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2a72:	82bb      	strh	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    2a74:	68bb      	ldr	r3, [r7, #8]
    2a76:	895b      	ldrh	r3, [r3, #10]
    2a78:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a7c:	b29a      	uxth	r2, r3
    2a7e:	8abb      	ldrh	r3, [r7, #20]
    2a80:	ea42 0303 	orr.w	r3, r2, r3
    2a84:	82bb      	strh	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
    2a86:	8abb      	ldrh	r3, [r7, #20]
    2a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    2a8c:	82bb      	strh	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    2a8e:	68bb      	ldr	r3, [r7, #8]
    2a90:	889b      	ldrh	r3, [r3, #4]
    2a92:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a96:	b29a      	uxth	r2, r3
    2a98:	8abb      	ldrh	r3, [r7, #20]
    2a9a:	ea42 0303 	orr.w	r3, r2, r3
    2a9e:	82bb      	strh	r3, [r7, #20]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    2aa0:	8afb      	ldrh	r3, [r7, #22]
    2aa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2aa6:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2aaa:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2aae:	82fb      	strh	r3, [r7, #22]
    tmpcr2 &= CR2_OIS2N_Reset;
    2ab0:	8afb      	ldrh	r3, [r7, #22]
    2ab2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2ab6:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2aba:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2abe:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    2ac0:	68bb      	ldr	r3, [r7, #8]
    2ac2:	899b      	ldrh	r3, [r3, #12]
    2ac4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ac8:	b29a      	uxth	r2, r3
    2aca:	8afb      	ldrh	r3, [r7, #22]
    2acc:	ea42 0303 	orr.w	r3, r2, r3
    2ad0:	82fb      	strh	r3, [r7, #22]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
    2ad2:	68bb      	ldr	r3, [r7, #8]
    2ad4:	89db      	ldrh	r3, [r3, #14]
    2ad6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ada:	b29a      	uxth	r2, r3
    2adc:	8afb      	ldrh	r3, [r7, #22]
    2ade:	ea42 0303 	orr.w	r3, r2, r3
    2ae2:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    2ae4:	68fa      	ldr	r2, [r7, #12]
    2ae6:	8afb      	ldrh	r3, [r7, #22]
    2ae8:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    2aea:	68fa      	ldr	r2, [r7, #12]
    2aec:	8a7b      	ldrh	r3, [r7, #18]
    2aee:	8313      	strh	r3, [r2, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
    2af0:	68bb      	ldr	r3, [r7, #8]
    2af2:	88db      	ldrh	r3, [r3, #6]
    2af4:	68fa      	ldr	r2, [r7, #12]
    2af6:	8713      	strh	r3, [r2, #56]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    2af8:	68fa      	ldr	r2, [r7, #12]
    2afa:	8abb      	ldrh	r3, [r7, #20]
    2afc:	8413      	strh	r3, [r2, #32]
}
    2afe:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2b02:	46bd      	mov	sp, r7
    2b04:	bc80      	pop	{r7}
    2b06:	4770      	bx	lr
    2b08:	40012c00 	.word	0x40012c00
    2b0c:	40013400 	.word	0x40013400

00002b10 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    2b10:	b480      	push	{r7}
    2b12:	b087      	sub	sp, #28
    2b14:	af00      	add	r7, sp, #0
    2b16:	60f8      	str	r0, [r7, #12]
    2b18:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    2b1a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2b1e:	827b      	strh	r3, [r7, #18]
    2b20:	f04f 0300 	mov.w	r3, #0	; 0x0
    2b24:	82bb      	strh	r3, [r7, #20]
    2b26:	f04f 0300 	mov.w	r3, #0	; 0x0
    2b2a:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
    2b2c:	68fb      	ldr	r3, [r7, #12]
    2b2e:	8c1b      	ldrh	r3, [r3, #32]
    2b30:	b29b      	uxth	r3, r3
    2b32:	607b      	str	r3, [r7, #4]
    2b34:	f64f 63ff 	movw	r3, #65279	; 0xfeff
    2b38:	6879      	ldr	r1, [r7, #4]
    2b3a:	ea01 0303 	and.w	r3, r1, r3
    2b3e:	607b      	str	r3, [r7, #4]
    2b40:	68fa      	ldr	r2, [r7, #12]
    2b42:	6879      	ldr	r1, [r7, #4]
    2b44:	460b      	mov	r3, r1
    2b46:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    2b48:	68fb      	ldr	r3, [r7, #12]
    2b4a:	8c1b      	ldrh	r3, [r3, #32]
    2b4c:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    2b4e:	68fb      	ldr	r3, [r7, #12]
    2b50:	889b      	ldrh	r3, [r3, #4]
    2b52:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    2b54:	68fb      	ldr	r3, [r7, #12]
    2b56:	8b9b      	ldrh	r3, [r3, #28]
    2b58:	827b      	strh	r3, [r7, #18]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC13M_Mask & CCMR_CC13S_Mask;  
    2b5a:	8a7b      	ldrh	r3, [r7, #18]
    2b5c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
    2b60:	827b      	strh	r3, [r7, #18]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    2b62:	68bb      	ldr	r3, [r7, #8]
    2b64:	881a      	ldrh	r2, [r3, #0]
    2b66:	8a7b      	ldrh	r3, [r7, #18]
    2b68:	ea42 0303 	orr.w	r3, r2, r3
    2b6c:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
    2b6e:	8abb      	ldrh	r3, [r7, #20]
    2b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    2b74:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
    2b76:	68bb      	ldr	r3, [r7, #8]
    2b78:	891b      	ldrh	r3, [r3, #8]
    2b7a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2b7e:	b29a      	uxth	r2, r3
    2b80:	8abb      	ldrh	r3, [r7, #20]
    2b82:	ea42 0303 	orr.w	r3, r2, r3
    2b86:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    2b88:	68bb      	ldr	r3, [r7, #8]
    2b8a:	885b      	ldrh	r3, [r3, #2]
    2b8c:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2b90:	b29a      	uxth	r2, r3
    2b92:	8abb      	ldrh	r3, [r7, #20]
    2b94:	ea42 0303 	orr.w	r3, r2, r3
    2b98:	82bb      	strh	r3, [r7, #20]
   
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    2b9a:	68fa      	ldr	r2, [r7, #12]
    2b9c:	4b2a      	ldr	r3, [pc, #168]	(2c48 <TIM_OC3Init+0x138>)
    2b9e:	429a      	cmp	r2, r3
    2ba0:	d003      	beq.n	2baa <TIM_OC3Init+0x9a>
    2ba2:	68fa      	ldr	r2, [r7, #12]
    2ba4:	4b29      	ldr	r3, [pc, #164]	(2c4c <TIM_OC3Init+0x13c>)
    2ba6:	429a      	cmp	r2, r3
    2ba8:	d13b      	bne.n	2c22 <TIM_OC3Init+0x112>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
    2baa:	8abb      	ldrh	r3, [r7, #20]
    2bac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2bb0:	82bb      	strh	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    2bb2:	68bb      	ldr	r3, [r7, #8]
    2bb4:	895b      	ldrh	r3, [r3, #10]
    2bb6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2bba:	b29a      	uxth	r2, r3
    2bbc:	8abb      	ldrh	r3, [r7, #20]
    2bbe:	ea42 0303 	orr.w	r3, r2, r3
    2bc2:	82bb      	strh	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    2bc4:	8abb      	ldrh	r3, [r7, #20]
    2bc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2bca:	82bb      	strh	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    2bcc:	68bb      	ldr	r3, [r7, #8]
    2bce:	889b      	ldrh	r3, [r3, #4]
    2bd0:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2bd4:	b29a      	uxth	r2, r3
    2bd6:	8abb      	ldrh	r3, [r7, #20]
    2bd8:	ea42 0303 	orr.w	r3, r2, r3
    2bdc:	82bb      	strh	r3, [r7, #20]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    2bde:	8afb      	ldrh	r3, [r7, #22]
    2be0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2be4:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2be8:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2bec:	82fb      	strh	r3, [r7, #22]
    tmpcr2 &= CR2_OIS3N_Reset;
    2bee:	8afb      	ldrh	r3, [r7, #22]
    2bf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2bf4:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2bf8:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2bfc:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    2bfe:	68bb      	ldr	r3, [r7, #8]
    2c00:	899b      	ldrh	r3, [r3, #12]
    2c02:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2c06:	b29a      	uxth	r2, r3
    2c08:	8afb      	ldrh	r3, [r7, #22]
    2c0a:	ea42 0303 	orr.w	r3, r2, r3
    2c0e:	82fb      	strh	r3, [r7, #22]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
    2c10:	68bb      	ldr	r3, [r7, #8]
    2c12:	89db      	ldrh	r3, [r3, #14]
    2c14:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2c18:	b29a      	uxth	r2, r3
    2c1a:	8afb      	ldrh	r3, [r7, #22]
    2c1c:	ea42 0303 	orr.w	r3, r2, r3
    2c20:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    2c22:	68fa      	ldr	r2, [r7, #12]
    2c24:	8afb      	ldrh	r3, [r7, #22]
    2c26:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
    2c28:	68fa      	ldr	r2, [r7, #12]
    2c2a:	8a7b      	ldrh	r3, [r7, #18]
    2c2c:	8393      	strh	r3, [r2, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
    2c2e:	68bb      	ldr	r3, [r7, #8]
    2c30:	88db      	ldrh	r3, [r3, #6]
    2c32:	68fa      	ldr	r2, [r7, #12]
    2c34:	8793      	strh	r3, [r2, #60]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    2c36:	68fa      	ldr	r2, [r7, #12]
    2c38:	8abb      	ldrh	r3, [r7, #20]
    2c3a:	8413      	strh	r3, [r2, #32]
}
    2c3c:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2c40:	46bd      	mov	sp, r7
    2c42:	bc80      	pop	{r7}
    2c44:	4770      	bx	lr
    2c46:	46c0      	nop			(mov r8, r8)
    2c48:	40012c00 	.word	0x40012c00
    2c4c:	40013400 	.word	0x40013400

00002c50 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    2c50:	b480      	push	{r7}
    2c52:	b087      	sub	sp, #28
    2c54:	af00      	add	r7, sp, #0
    2c56:	60f8      	str	r0, [r7, #12]
    2c58:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    2c5a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2c5e:	827b      	strh	r3, [r7, #18]
    2c60:	f04f 0300 	mov.w	r3, #0	; 0x0
    2c64:	82bb      	strh	r3, [r7, #20]
    2c66:	f04f 0300 	mov.w	r3, #0	; 0x0
    2c6a:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
    2c6c:	68fb      	ldr	r3, [r7, #12]
    2c6e:	8c1b      	ldrh	r3, [r3, #32]
    2c70:	b29b      	uxth	r3, r3
    2c72:	607b      	str	r3, [r7, #4]
    2c74:	f64e 73ff 	movw	r3, #61439	; 0xefff
    2c78:	6879      	ldr	r1, [r7, #4]
    2c7a:	ea01 0303 	and.w	r3, r1, r3
    2c7e:	607b      	str	r3, [r7, #4]
    2c80:	68fa      	ldr	r2, [r7, #12]
    2c82:	6879      	ldr	r1, [r7, #4]
    2c84:	460b      	mov	r3, r1
    2c86:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    2c88:	68fb      	ldr	r3, [r7, #12]
    2c8a:	8c1b      	ldrh	r3, [r3, #32]
    2c8c:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    2c8e:	68fb      	ldr	r3, [r7, #12]
    2c90:	889b      	ldrh	r3, [r3, #4]
    2c92:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    2c94:	68fb      	ldr	r3, [r7, #12]
    2c96:	8b9b      	ldrh	r3, [r3, #28]
    2c98:	827b      	strh	r3, [r7, #18]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask; 
    2c9a:	8a7b      	ldrh	r3, [r7, #18]
    2c9c:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
    2ca0:	827b      	strh	r3, [r7, #18]
   
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    2ca2:	68bb      	ldr	r3, [r7, #8]
    2ca4:	881b      	ldrh	r3, [r3, #0]
    2ca6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2caa:	b29a      	uxth	r2, r3
    2cac:	8a7b      	ldrh	r3, [r7, #18]
    2cae:	ea42 0303 	orr.w	r3, r2, r3
    2cb2:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
    2cb4:	8abb      	ldrh	r3, [r7, #20]
    2cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2cba:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
    2cbc:	68bb      	ldr	r3, [r7, #8]
    2cbe:	891b      	ldrh	r3, [r3, #8]
    2cc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    2cc4:	b29a      	uxth	r2, r3
    2cc6:	8abb      	ldrh	r3, [r7, #20]
    2cc8:	ea42 0303 	orr.w	r3, r2, r3
    2ccc:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    2cce:	68bb      	ldr	r3, [r7, #8]
    2cd0:	885b      	ldrh	r3, [r3, #2]
    2cd2:	ea4f 3303 	mov.w	r3, r3, lsl #12
    2cd6:	b29a      	uxth	r2, r3
    2cd8:	8abb      	ldrh	r3, [r7, #20]
    2cda:	ea42 0303 	orr.w	r3, r2, r3
    2cde:	82bb      	strh	r3, [r7, #20]
    
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    2ce0:	68fa      	ldr	r2, [r7, #12]
    2ce2:	4b14      	ldr	r3, [pc, #80]	(2d34 <TIM_OC4Init+0xe4>)
    2ce4:	429a      	cmp	r2, r3
    2ce6:	d003      	beq.n	2cf0 <TIM_OC4Init+0xa0>
    2ce8:	68fa      	ldr	r2, [r7, #12]
    2cea:	4b13      	ldr	r3, [pc, #76]	(2d38 <TIM_OC4Init+0xe8>)
    2cec:	429a      	cmp	r2, r3
    2cee:	d10e      	bne.n	2d0e <TIM_OC4Init+0xbe>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
    2cf0:	8afb      	ldrh	r3, [r7, #22]
    2cf2:	ea4f 4383 	mov.w	r3, r3, lsl #18
    2cf6:	ea4f 4393 	mov.w	r3, r3, lsr #18
    2cfa:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
    2cfc:	68bb      	ldr	r3, [r7, #8]
    2cfe:	899b      	ldrh	r3, [r3, #12]
    2d00:	ea4f 1383 	mov.w	r3, r3, lsl #6
    2d04:	b29a      	uxth	r2, r3
    2d06:	8afb      	ldrh	r3, [r7, #22]
    2d08:	ea42 0303 	orr.w	r3, r2, r3
    2d0c:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    2d0e:	68fa      	ldr	r2, [r7, #12]
    2d10:	8afb      	ldrh	r3, [r7, #22]
    2d12:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    2d14:	68fa      	ldr	r2, [r7, #12]
    2d16:	8a7b      	ldrh	r3, [r7, #18]
    2d18:	8393      	strh	r3, [r2, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
    2d1a:	68bb      	ldr	r3, [r7, #8]
    2d1c:	88db      	ldrh	r3, [r3, #6]
    2d1e:	68fa      	ldr	r2, [r7, #12]
    2d20:	f8a2 3040 	strh.w	r3, [r2, #64]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    2d24:	68fa      	ldr	r2, [r7, #12]
    2d26:	8abb      	ldrh	r3, [r7, #20]
    2d28:	8413      	strh	r3, [r2, #32]
}
    2d2a:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2d2e:	46bd      	mov	sp, r7
    2d30:	bc80      	pop	{r7}
    2d32:	4770      	bx	lr
    2d34:	40012c00 	.word	0x40012c00
    2d38:	40013400 	.word	0x40013400

00002d3c <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    2d3c:	b580      	push	{r7, lr}
    2d3e:	b082      	sub	sp, #8
    2d40:	af00      	add	r7, sp, #0
    2d42:	6078      	str	r0, [r7, #4]
    2d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    2d46:	683b      	ldr	r3, [r7, #0]
    2d48:	881b      	ldrh	r3, [r3, #0]
    2d4a:	2b00      	cmp	r3, #0
    2d4c:	d10f      	bne.n	2d6e <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    2d4e:	683b      	ldr	r3, [r7, #0]
    2d50:	8859      	ldrh	r1, [r3, #2]
    2d52:	683b      	ldr	r3, [r7, #0]
    2d54:	889a      	ldrh	r2, [r3, #4]
    2d56:	683b      	ldr	r3, [r7, #0]
    2d58:	891b      	ldrh	r3, [r3, #8]
    2d5a:	6878      	ldr	r0, [r7, #4]
    2d5c:	f001 faa2 	bl	42a4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2d60:	683b      	ldr	r3, [r7, #0]
    2d62:	88db      	ldrh	r3, [r3, #6]
    2d64:	6878      	ldr	r0, [r7, #4]
    2d66:	4619      	mov	r1, r3
    2d68:	f001 f926 	bl	3fb8 <TIM_SetIC1Prescaler>
    2d6c:	e036      	b.n	2ddc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
    2d6e:	683b      	ldr	r3, [r7, #0]
    2d70:	881b      	ldrh	r3, [r3, #0]
    2d72:	2b04      	cmp	r3, #4
    2d74:	d10f      	bne.n	2d96 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    2d76:	683b      	ldr	r3, [r7, #0]
    2d78:	8859      	ldrh	r1, [r3, #2]
    2d7a:	683b      	ldr	r3, [r7, #0]
    2d7c:	889a      	ldrh	r2, [r3, #4]
    2d7e:	683b      	ldr	r3, [r7, #0]
    2d80:	891b      	ldrh	r3, [r3, #8]
    2d82:	6878      	ldr	r0, [r7, #4]
    2d84:	f001 fada 	bl	433c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2d88:	683b      	ldr	r3, [r7, #0]
    2d8a:	88db      	ldrh	r3, [r3, #6]
    2d8c:	6878      	ldr	r0, [r7, #4]
    2d8e:	4619      	mov	r1, r3
    2d90:	f001 f934 	bl	3ffc <TIM_SetIC2Prescaler>
    2d94:	e022      	b.n	2ddc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
    2d96:	683b      	ldr	r3, [r7, #0]
    2d98:	881b      	ldrh	r3, [r3, #0]
    2d9a:	2b08      	cmp	r3, #8
    2d9c:	d10f      	bne.n	2dbe <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    2d9e:	683b      	ldr	r3, [r7, #0]
    2da0:	8859      	ldrh	r1, [r3, #2]
    2da2:	683b      	ldr	r3, [r7, #0]
    2da4:	889a      	ldrh	r2, [r3, #4]
    2da6:	683b      	ldr	r3, [r7, #0]
    2da8:	891b      	ldrh	r3, [r3, #8]
    2daa:	6878      	ldr	r0, [r7, #4]
    2dac:	f001 fb22 	bl	43f4 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2db0:	683b      	ldr	r3, [r7, #0]
    2db2:	88db      	ldrh	r3, [r3, #6]
    2db4:	6878      	ldr	r0, [r7, #4]
    2db6:	4619      	mov	r1, r3
    2db8:	f001 f946 	bl	4048 <TIM_SetIC3Prescaler>
    2dbc:	e00e      	b.n	2ddc <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    2dbe:	683b      	ldr	r3, [r7, #0]
    2dc0:	8859      	ldrh	r1, [r3, #2]
    2dc2:	683b      	ldr	r3, [r7, #0]
    2dc4:	889a      	ldrh	r2, [r3, #4]
    2dc6:	683b      	ldr	r3, [r7, #0]
    2dc8:	891b      	ldrh	r3, [r3, #8]
    2dca:	6878      	ldr	r0, [r7, #4]
    2dcc:	f001 fb66 	bl	449c <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2dd0:	683b      	ldr	r3, [r7, #0]
    2dd2:	88db      	ldrh	r3, [r3, #6]
    2dd4:	6878      	ldr	r0, [r7, #4]
    2dd6:	4619      	mov	r1, r3
    2dd8:	f001 f958 	bl	408c <TIM_SetIC4Prescaler>
  }
}
    2ddc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2de0:	46bd      	mov	sp, r7
    2de2:	bd80      	pop	{r7, pc}

00002de4 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    2de4:	b580      	push	{r7, lr}
    2de6:	b084      	sub	sp, #16
    2de8:	af00      	add	r7, sp, #0
    2dea:	6078      	str	r0, [r7, #4]
    2dec:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
    2dee:	f04f 0300 	mov.w	r3, #0	; 0x0
    2df2:	81bb      	strh	r3, [r7, #12]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
    2df4:	f04f 0301 	mov.w	r3, #1	; 0x1
    2df8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
    2dfa:	683b      	ldr	r3, [r7, #0]
    2dfc:	885b      	ldrh	r3, [r3, #2]
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d103      	bne.n	2e0a <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
    2e02:	f04f 0302 	mov.w	r3, #2	; 0x2
    2e06:	81bb      	strh	r3, [r7, #12]
    2e08:	e002      	b.n	2e10 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
    2e0a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2e0e:	81bb      	strh	r3, [r7, #12]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
    2e10:	683b      	ldr	r3, [r7, #0]
    2e12:	889b      	ldrh	r3, [r3, #4]
    2e14:	2b01      	cmp	r3, #1
    2e16:	d103      	bne.n	2e20 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
    2e18:	f04f 0302 	mov.w	r3, #2	; 0x2
    2e1c:	81fb      	strh	r3, [r7, #14]
    2e1e:	e002      	b.n	2e26 <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
    2e20:	f04f 0301 	mov.w	r3, #1	; 0x1
    2e24:	81fb      	strh	r3, [r7, #14]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    2e26:	683b      	ldr	r3, [r7, #0]
    2e28:	881b      	ldrh	r3, [r3, #0]
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d11f      	bne.n	2e6e <TIM_PWMIConfig+0x8a>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    2e2e:	683b      	ldr	r3, [r7, #0]
    2e30:	8859      	ldrh	r1, [r3, #2]
    2e32:	683b      	ldr	r3, [r7, #0]
    2e34:	889a      	ldrh	r2, [r3, #4]
    2e36:	683b      	ldr	r3, [r7, #0]
    2e38:	891b      	ldrh	r3, [r3, #8]
    2e3a:	6878      	ldr	r0, [r7, #4]
    2e3c:	f001 fa32 	bl	42a4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2e40:	683b      	ldr	r3, [r7, #0]
    2e42:	88db      	ldrh	r3, [r3, #6]
    2e44:	6878      	ldr	r0, [r7, #4]
    2e46:	4619      	mov	r1, r3
    2e48:	f001 f8b6 	bl	3fb8 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    2e4c:	683b      	ldr	r3, [r7, #0]
    2e4e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
    2e52:	89bb      	ldrh	r3, [r7, #12]
    2e54:	89fa      	ldrh	r2, [r7, #14]
    2e56:	6878      	ldr	r0, [r7, #4]
    2e58:	4619      	mov	r1, r3
    2e5a:	4663      	mov	r3, ip
    2e5c:	f001 fa6e 	bl	433c <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2e60:	683b      	ldr	r3, [r7, #0]
    2e62:	88db      	ldrh	r3, [r3, #6]
    2e64:	6878      	ldr	r0, [r7, #4]
    2e66:	4619      	mov	r1, r3
    2e68:	f001 f8c8 	bl	3ffc <TIM_SetIC2Prescaler>
    2e6c:	e01e      	b.n	2eac <TIM_PWMIConfig+0xc8>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    2e6e:	683b      	ldr	r3, [r7, #0]
    2e70:	8859      	ldrh	r1, [r3, #2]
    2e72:	683b      	ldr	r3, [r7, #0]
    2e74:	889a      	ldrh	r2, [r3, #4]
    2e76:	683b      	ldr	r3, [r7, #0]
    2e78:	891b      	ldrh	r3, [r3, #8]
    2e7a:	6878      	ldr	r0, [r7, #4]
    2e7c:	f001 fa5e 	bl	433c <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2e80:	683b      	ldr	r3, [r7, #0]
    2e82:	88db      	ldrh	r3, [r3, #6]
    2e84:	6878      	ldr	r0, [r7, #4]
    2e86:	4619      	mov	r1, r3
    2e88:	f001 f8b8 	bl	3ffc <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    2e8c:	683b      	ldr	r3, [r7, #0]
    2e8e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
    2e92:	89bb      	ldrh	r3, [r7, #12]
    2e94:	89fa      	ldrh	r2, [r7, #14]
    2e96:	6878      	ldr	r0, [r7, #4]
    2e98:	4619      	mov	r1, r3
    2e9a:	4663      	mov	r3, ip
    2e9c:	f001 fa02 	bl	42a4 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2ea0:	683b      	ldr	r3, [r7, #0]
    2ea2:	88db      	ldrh	r3, [r3, #6]
    2ea4:	6878      	ldr	r0, [r7, #4]
    2ea6:	4619      	mov	r1, r3
    2ea8:	f001 f886 	bl	3fb8 <TIM_SetIC1Prescaler>
  }
}
    2eac:	f107 0710 	add.w	r7, r7, #16	; 0x10
    2eb0:	46bd      	mov	sp, r7
    2eb2:	bd80      	pop	{r7, pc}

00002eb4 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *   contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
    2eb4:	b480      	push	{r7}
    2eb6:	b083      	sub	sp, #12
    2eb8:	af00      	add	r7, sp, #0
    2eba:	6078      	str	r0, [r7, #4]
    2ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    2ebe:	683b      	ldr	r3, [r7, #0]
    2ec0:	881a      	ldrh	r2, [r3, #0]
    2ec2:	683b      	ldr	r3, [r7, #0]
    2ec4:	885b      	ldrh	r3, [r3, #2]
    2ec6:	ea42 0303 	orr.w	r3, r2, r3
    2eca:	b29a      	uxth	r2, r3
    2ecc:	683b      	ldr	r3, [r7, #0]
    2ece:	889b      	ldrh	r3, [r3, #4]
    2ed0:	ea42 0303 	orr.w	r3, r2, r3
    2ed4:	b29a      	uxth	r2, r3
    2ed6:	683b      	ldr	r3, [r7, #0]
    2ed8:	88db      	ldrh	r3, [r3, #6]
    2eda:	ea42 0303 	orr.w	r3, r2, r3
    2ede:	b29a      	uxth	r2, r3
    2ee0:	683b      	ldr	r3, [r7, #0]
    2ee2:	891b      	ldrh	r3, [r3, #8]
    2ee4:	ea42 0303 	orr.w	r3, r2, r3
    2ee8:	b29a      	uxth	r2, r3
    2eea:	683b      	ldr	r3, [r7, #0]
    2eec:	895b      	ldrh	r3, [r3, #10]
    2eee:	ea42 0303 	orr.w	r3, r2, r3
    2ef2:	b29a      	uxth	r2, r3
    2ef4:	683b      	ldr	r3, [r7, #0]
    2ef6:	899b      	ldrh	r3, [r3, #12]
    2ef8:	ea42 0303 	orr.w	r3, r2, r3
    2efc:	b29b      	uxth	r3, r3
    2efe:	687a      	ldr	r2, [r7, #4]
    2f00:	f8a2 3044 	strh.w	r3, [r2, #68]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
    2f04:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2f08:	46bd      	mov	sp, r7
    2f0a:	bc80      	pop	{r7}
    2f0c:	4770      	bx	lr
    2f0e:	46c0      	nop			(mov r8, r8)

00002f10 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *   structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    2f10:	b480      	push	{r7}
    2f12:	b083      	sub	sp, #12
    2f14:	af00      	add	r7, sp, #0
    2f16:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
    2f18:	687a      	ldr	r2, [r7, #4]
    2f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2f1e:	8093      	strh	r3, [r2, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
    2f20:	687a      	ldr	r2, [r7, #4]
    2f22:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f26:	8013      	strh	r3, [r2, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
    2f28:	687a      	ldr	r2, [r7, #4]
    2f2a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f2e:	80d3      	strh	r3, [r2, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
    2f30:	687a      	ldr	r2, [r7, #4]
    2f32:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f36:	8053      	strh	r3, [r2, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
    2f38:	687a      	ldr	r2, [r7, #4]
    2f3a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f3e:	7213      	strb	r3, [r2, #8]
}
    2f40:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2f44:	46bd      	mov	sp, r7
    2f46:	bc80      	pop	{r7}
    2f48:	4770      	bx	lr
    2f4a:	46c0      	nop			(mov r8, r8)

00002f4c <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    2f4c:	b480      	push	{r7}
    2f4e:	b083      	sub	sp, #12
    2f50:	af00      	add	r7, sp, #0
    2f52:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
    2f54:	687a      	ldr	r2, [r7, #4]
    2f56:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f5a:	8013      	strh	r3, [r2, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
    2f5c:	687a      	ldr	r2, [r7, #4]
    2f5e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f62:	8053      	strh	r3, [r2, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
    2f64:	687a      	ldr	r2, [r7, #4]
    2f66:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f6a:	8093      	strh	r3, [r2, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
    2f6c:	687a      	ldr	r2, [r7, #4]
    2f6e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f72:	80d3      	strh	r3, [r2, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
    2f74:	687a      	ldr	r2, [r7, #4]
    2f76:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f7a:	8113      	strh	r3, [r2, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
    2f7c:	687a      	ldr	r2, [r7, #4]
    2f7e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f82:	8153      	strh	r3, [r2, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
    2f84:	687a      	ldr	r2, [r7, #4]
    2f86:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f8a:	8193      	strh	r3, [r2, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
    2f8c:	687a      	ldr	r2, [r7, #4]
    2f8e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f92:	81d3      	strh	r3, [r2, #14]
}
    2f94:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2f98:	46bd      	mov	sp, r7
    2f9a:	bc80      	pop	{r7}
    2f9c:	4770      	bx	lr
    2f9e:	46c0      	nop			(mov r8, r8)

00002fa0 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct : pointer to a TIM_ICInitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    2fa0:	b480      	push	{r7}
    2fa2:	b083      	sub	sp, #12
    2fa4:	af00      	add	r7, sp, #0
    2fa6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
    2fa8:	687a      	ldr	r2, [r7, #4]
    2faa:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fae:	8013      	strh	r3, [r2, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
    2fb0:	687a      	ldr	r2, [r7, #4]
    2fb2:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fb6:	8053      	strh	r3, [r2, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
    2fb8:	687a      	ldr	r2, [r7, #4]
    2fba:	f04f 0301 	mov.w	r3, #1	; 0x1
    2fbe:	8093      	strh	r3, [r2, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
    2fc0:	687a      	ldr	r2, [r7, #4]
    2fc2:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fc6:	80d3      	strh	r3, [r2, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
    2fc8:	687a      	ldr	r2, [r7, #4]
    2fca:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fce:	8113      	strh	r3, [r2, #8]
}
    2fd0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2fd4:	46bd      	mov	sp, r7
    2fd6:	bc80      	pop	{r7}
    2fd8:	4770      	bx	lr
    2fda:	46c0      	nop			(mov r8, r8)

00002fdc <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *   will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
    2fdc:	b480      	push	{r7}
    2fde:	b083      	sub	sp, #12
    2fe0:	af00      	add	r7, sp, #0
    2fe2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
    2fe4:	687a      	ldr	r2, [r7, #4]
    2fe6:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fea:	8013      	strh	r3, [r2, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
    2fec:	687a      	ldr	r2, [r7, #4]
    2fee:	f04f 0300 	mov.w	r3, #0	; 0x0
    2ff2:	8053      	strh	r3, [r2, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    2ff4:	687a      	ldr	r2, [r7, #4]
    2ff6:	f04f 0300 	mov.w	r3, #0	; 0x0
    2ffa:	8093      	strh	r3, [r2, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
    2ffc:	687a      	ldr	r2, [r7, #4]
    2ffe:	f04f 0300 	mov.w	r3, #0	; 0x0
    3002:	80d3      	strh	r3, [r2, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
    3004:	687a      	ldr	r2, [r7, #4]
    3006:	f04f 0300 	mov.w	r3, #0	; 0x0
    300a:	8113      	strh	r3, [r2, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
    300c:	687a      	ldr	r2, [r7, #4]
    300e:	f04f 0300 	mov.w	r3, #0	; 0x0
    3012:	8153      	strh	r3, [r2, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
    3014:	687a      	ldr	r2, [r7, #4]
    3016:	f04f 0300 	mov.w	r3, #0	; 0x0
    301a:	8193      	strh	r3, [r2, #12]
}
    301c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3020:	46bd      	mov	sp, r7
    3022:	bc80      	pop	{r7}
    3024:	4770      	bx	lr
    3026:	46c0      	nop			(mov r8, r8)

00003028 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3028:	b480      	push	{r7}
    302a:	b085      	sub	sp, #20
    302c:	af00      	add	r7, sp, #0
    302e:	60f8      	str	r0, [r7, #12]
    3030:	460b      	mov	r3, r1
    3032:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3034:	7afb      	ldrb	r3, [r7, #11]
    3036:	2b00      	cmp	r3, #0
    3038:	d008      	beq.n	304c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
    303a:	68fb      	ldr	r3, [r7, #12]
    303c:	881b      	ldrh	r3, [r3, #0]
    303e:	b29b      	uxth	r3, r3
    3040:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    3044:	b29b      	uxth	r3, r3
    3046:	68fa      	ldr	r2, [r7, #12]
    3048:	8013      	strh	r3, [r2, #0]
    304a:	e00d      	b.n	3068 <TIM_Cmd+0x40>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= CR1_CEN_Reset;
    304c:	68fb      	ldr	r3, [r7, #12]
    304e:	881b      	ldrh	r3, [r3, #0]
    3050:	b29b      	uxth	r3, r3
    3052:	607b      	str	r3, [r7, #4]
    3054:	f240 33fe 	movw	r3, #1022	; 0x3fe
    3058:	6879      	ldr	r1, [r7, #4]
    305a:	ea01 0303 	and.w	r3, r1, r3
    305e:	607b      	str	r3, [r7, #4]
    3060:	68fa      	ldr	r2, [r7, #12]
    3062:	6879      	ldr	r1, [r7, #4]
    3064:	460b      	mov	r3, r1
    3066:	8013      	strh	r3, [r2, #0]
  }
}
    3068:	f107 0714 	add.w	r7, r7, #20	; 0x14
    306c:	46bd      	mov	sp, r7
    306e:	bc80      	pop	{r7}
    3070:	4770      	bx	lr
    3072:	46c0      	nop			(mov r8, r8)

00003074 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3074:	b480      	push	{r7}
    3076:	b085      	sub	sp, #20
    3078:	af00      	add	r7, sp, #0
    307a:	60f8      	str	r0, [r7, #12]
    307c:	460b      	mov	r3, r1
    307e:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3080:	7afb      	ldrb	r3, [r7, #11]
    3082:	2b00      	cmp	r3, #0
    3084:	d00c      	beq.n	30a0 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
    3086:	68fb      	ldr	r3, [r7, #12]
    3088:	f8b3 3044 	ldrh.w	r3, [r3, #68]
    308c:	b29b      	uxth	r3, r3
    308e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    3092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    3096:	b29b      	uxth	r3, r3
    3098:	68fa      	ldr	r2, [r7, #12]
    309a:	f8a2 3044 	strh.w	r3, [r2, #68]
    309e:	e00f      	b.n	30c0 <TIM_CtrlPWMOutputs+0x4c>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= BDTR_MOE_Reset;
    30a0:	68fb      	ldr	r3, [r7, #12]
    30a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]
    30a6:	b29b      	uxth	r3, r3
    30a8:	607b      	str	r3, [r7, #4]
    30aa:	6879      	ldr	r1, [r7, #4]
    30ac:	ea4f 4341 	mov.w	r3, r1, lsl #17
    30b0:	ea4f 4353 	mov.w	r3, r3, lsr #17
    30b4:	607b      	str	r3, [r7, #4]
    30b6:	68fa      	ldr	r2, [r7, #12]
    30b8:	6879      	ldr	r1, [r7, #4]
    30ba:	460b      	mov	r3, r1
    30bc:	f8a2 3044 	strh.w	r3, [r2, #68]
  }  
}
    30c0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    30c4:	46bd      	mov	sp, r7
    30c6:	bc80      	pop	{r7}
    30c8:	4770      	bx	lr
    30ca:	46c0      	nop			(mov r8, r8)

000030cc <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
    30cc:	b480      	push	{r7}
    30ce:	b083      	sub	sp, #12
    30d0:	af00      	add	r7, sp, #0
    30d2:	6078      	str	r0, [r7, #4]
    30d4:	460b      	mov	r3, r1
    30d6:	807b      	strh	r3, [r7, #2]
    30d8:	4613      	mov	r3, r2
    30da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    30dc:	787b      	ldrb	r3, [r7, #1]
    30de:	2b00      	cmp	r3, #0
    30e0:	d009      	beq.n	30f6 <TIM_ITConfig+0x2a>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	899b      	ldrh	r3, [r3, #12]
    30e6:	b29a      	uxth	r2, r3
    30e8:	887b      	ldrh	r3, [r7, #2]
    30ea:	ea42 0303 	orr.w	r3, r2, r3
    30ee:	b29b      	uxth	r3, r3
    30f0:	687a      	ldr	r2, [r7, #4]
    30f2:	8193      	strh	r3, [r2, #12]
    30f4:	e00b      	b.n	310e <TIM_ITConfig+0x42>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
    30f6:	687b      	ldr	r3, [r7, #4]
    30f8:	899b      	ldrh	r3, [r3, #12]
    30fa:	b29a      	uxth	r2, r3
    30fc:	887b      	ldrh	r3, [r7, #2]
    30fe:	ea6f 0303 	mvn.w	r3, r3
    3102:	b29b      	uxth	r3, r3
    3104:	ea02 0303 	and.w	r3, r2, r3
    3108:	b29b      	uxth	r3, r3
    310a:	687a      	ldr	r2, [r7, #4]
    310c:	8193      	strh	r3, [r2, #12]
  }
}
    310e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3112:	46bd      	mov	sp, r7
    3114:	bc80      	pop	{r7}
    3116:	4770      	bx	lr

00003118 <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
    3118:	b480      	push	{r7}
    311a:	b083      	sub	sp, #12
    311c:	af00      	add	r7, sp, #0
    311e:	6078      	str	r0, [r7, #4]
    3120:	460b      	mov	r3, r1
    3122:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
    3124:	687a      	ldr	r2, [r7, #4]
    3126:	887b      	ldrh	r3, [r7, #2]
    3128:	8293      	strh	r3, [r2, #20]
}
    312a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    312e:	46bd      	mov	sp, r7
    3130:	bc80      	pop	{r7}
    3132:	4770      	bx	lr

00003134 <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Byte and TIM_DMABurstLength_18Bytes.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
    3134:	b480      	push	{r7}
    3136:	b083      	sub	sp, #12
    3138:	af00      	add	r7, sp, #0
    313a:	6078      	str	r0, [r7, #4]
    313c:	460b      	mov	r3, r1
    313e:	807b      	strh	r3, [r7, #2]
    3140:	4613      	mov	r3, r2
    3142:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
    3144:	887a      	ldrh	r2, [r7, #2]
    3146:	883b      	ldrh	r3, [r7, #0]
    3148:	ea42 0303 	orr.w	r3, r2, r3
    314c:	b29b      	uxth	r3, r3
    314e:	687a      	ldr	r2, [r7, #4]
    3150:	f8a2 3048 	strh.w	r3, [r2, #72]
}
    3154:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3158:	46bd      	mov	sp, r7
    315a:	bc80      	pop	{r7}
    315c:	4770      	bx	lr
    315e:	46c0      	nop			(mov r8, r8)

00003160 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
    3160:	b480      	push	{r7}
    3162:	b083      	sub	sp, #12
    3164:	af00      	add	r7, sp, #0
    3166:	6078      	str	r0, [r7, #4]
    3168:	460b      	mov	r3, r1
    316a:	807b      	strh	r3, [r7, #2]
    316c:	4613      	mov	r3, r2
    316e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3170:	787b      	ldrb	r3, [r7, #1]
    3172:	2b00      	cmp	r3, #0
    3174:	d009      	beq.n	318a <TIM_DMACmd+0x2a>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
    3176:	687b      	ldr	r3, [r7, #4]
    3178:	899b      	ldrh	r3, [r3, #12]
    317a:	b29a      	uxth	r2, r3
    317c:	887b      	ldrh	r3, [r7, #2]
    317e:	ea42 0303 	orr.w	r3, r2, r3
    3182:	b29b      	uxth	r3, r3
    3184:	687a      	ldr	r2, [r7, #4]
    3186:	8193      	strh	r3, [r2, #12]
    3188:	e00b      	b.n	31a2 <TIM_DMACmd+0x42>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
    318a:	687b      	ldr	r3, [r7, #4]
    318c:	899b      	ldrh	r3, [r3, #12]
    318e:	b29a      	uxth	r2, r3
    3190:	887b      	ldrh	r3, [r7, #2]
    3192:	ea6f 0303 	mvn.w	r3, r3
    3196:	b29b      	uxth	r3, r3
    3198:	ea02 0303 	and.w	r3, r2, r3
    319c:	b29b      	uxth	r3, r3
    319e:	687a      	ldr	r2, [r7, #4]
    31a0:	8193      	strh	r3, [r2, #12]
  }
}
    31a2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    31a6:	46bd      	mov	sp, r7
    31a8:	bc80      	pop	{r7}
    31aa:	4770      	bx	lr

000031ac <TIM_InternalClockConfig>:
  * @brief  Configures the TIMx interrnal Clock
  * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
    31ac:	b480      	push	{r7}
    31ae:	b083      	sub	sp, #12
    31b0:	af00      	add	r7, sp, #0
    31b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  SMCR_SMS_Mask;
    31b4:	687b      	ldr	r3, [r7, #4]
    31b6:	891b      	ldrh	r3, [r3, #8]
    31b8:	b29b      	uxth	r3, r3
    31ba:	603b      	str	r3, [r7, #0]
    31bc:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    31c0:	6839      	ldr	r1, [r7, #0]
    31c2:	ea01 0303 	and.w	r3, r1, r3
    31c6:	603b      	str	r3, [r7, #0]
    31c8:	687a      	ldr	r2, [r7, #4]
    31ca:	6839      	ldr	r1, [r7, #0]
    31cc:	460b      	mov	r3, r1
    31ce:	8113      	strh	r3, [r2, #8]
}
    31d0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    31d4:	46bd      	mov	sp, r7
    31d6:	bc80      	pop	{r7}
    31d8:	4770      	bx	lr
    31da:	46c0      	nop			(mov r8, r8)

000031dc <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    31dc:	b580      	push	{r7, lr}
    31de:	b082      	sub	sp, #8
    31e0:	af00      	add	r7, sp, #0
    31e2:	6078      	str	r0, [r7, #4]
    31e4:	460b      	mov	r3, r1
    31e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
    31e8:	887b      	ldrh	r3, [r7, #2]
    31ea:	6878      	ldr	r0, [r7, #4]
    31ec:	4619      	mov	r1, r3
    31ee:	f000 f8f7 	bl	33e0 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    31f2:	687b      	ldr	r3, [r7, #4]
    31f4:	891b      	ldrh	r3, [r3, #8]
    31f6:	b29b      	uxth	r3, r3
    31f8:	f043 0307 	orr.w	r3, r3, #7	; 0x7
    31fc:	b29b      	uxth	r3, r3
    31fe:	687a      	ldr	r2, [r7, #4]
    3200:	8113      	strh	r3, [r2, #8]
}
    3202:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3206:	46bd      	mov	sp, r7
    3208:	bd80      	pop	{r7, pc}
    320a:	46c0      	nop			(mov r8, r8)

0000320c <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
    320c:	b580      	push	{r7, lr}
    320e:	b084      	sub	sp, #16
    3210:	af00      	add	r7, sp, #0
    3212:	60f8      	str	r0, [r7, #12]
    3214:	4618      	mov	r0, r3
    3216:	460b      	mov	r3, r1
    3218:	817b      	strh	r3, [r7, #10]
    321a:	4613      	mov	r3, r2
    321c:	813b      	strh	r3, [r7, #8]
    321e:	4603      	mov	r3, r0
    3220:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
    3222:	897b      	ldrh	r3, [r7, #10]
    3224:	2b60      	cmp	r3, #96
    3226:	d10a      	bne.n	323e <TIM_TIxExternalClockConfig+0x32>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    3228:	893b      	ldrh	r3, [r7, #8]
    322a:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    322e:	68f8      	ldr	r0, [r7, #12]
    3230:	4619      	mov	r1, r3
    3232:	f04f 0201 	mov.w	r2, #1	; 0x1
    3236:	4663      	mov	r3, ip
    3238:	f001 f880 	bl	433c <TI2_Config>
    323c:	e009      	b.n	3252 <TIM_TIxExternalClockConfig+0x46>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    323e:	893b      	ldrh	r3, [r7, #8]
    3240:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    3244:	68f8      	ldr	r0, [r7, #12]
    3246:	4619      	mov	r1, r3
    3248:	f04f 0201 	mov.w	r2, #1	; 0x1
    324c:	4663      	mov	r3, ip
    324e:	f001 f829 	bl	42a4 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
    3252:	897b      	ldrh	r3, [r7, #10]
    3254:	68f8      	ldr	r0, [r7, #12]
    3256:	4619      	mov	r1, r3
    3258:	f000 f8c2 	bl	33e0 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    325c:	68fb      	ldr	r3, [r7, #12]
    325e:	891b      	ldrh	r3, [r3, #8]
    3260:	b29b      	uxth	r3, r3
    3262:	f043 0307 	orr.w	r3, r3, #7	; 0x7
    3266:	b29b      	uxth	r3, r3
    3268:	68fa      	ldr	r2, [r7, #12]
    326a:	8113      	strh	r3, [r2, #8]
}
    326c:	f107 0710 	add.w	r7, r7, #16	; 0x10
    3270:	46bd      	mov	sp, r7
    3272:	bd80      	pop	{r7, pc}

00003274 <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
    3274:	b580      	push	{r7, lr}
    3276:	b086      	sub	sp, #24
    3278:	af00      	add	r7, sp, #0
    327a:	60f8      	str	r0, [r7, #12]
    327c:	4618      	mov	r0, r3
    327e:	460b      	mov	r3, r1
    3280:	817b      	strh	r3, [r7, #10]
    3282:	4613      	mov	r3, r2
    3284:	813b      	strh	r3, [r7, #8]
    3286:	4603      	mov	r3, r0
    3288:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    328a:	f04f 0300 	mov.w	r3, #0	; 0x0
    328e:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    3290:	897b      	ldrh	r3, [r7, #10]
    3292:	893a      	ldrh	r2, [r7, #8]
    3294:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    3298:	68f8      	ldr	r0, [r7, #12]
    329a:	4619      	mov	r1, r3
    329c:	4663      	mov	r3, ip
    329e:	f000 f83b 	bl	3318 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    32a2:	68fb      	ldr	r3, [r7, #12]
    32a4:	891b      	ldrh	r3, [r3, #8]
    32a6:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= SMCR_SMS_Mask;
    32a8:	8afb      	ldrh	r3, [r7, #22]
    32aa:	f023 0307 	bic.w	r3, r3, #7	; 0x7
    32ae:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
    32b0:	8afb      	ldrh	r3, [r7, #22]
    32b2:	f043 0307 	orr.w	r3, r3, #7	; 0x7
    32b6:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= SMCR_TS_Mask;
    32b8:	8afb      	ldrh	r3, [r7, #22]
    32ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    32be:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
    32c0:	8afb      	ldrh	r3, [r7, #22]
    32c2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    32c6:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    32c8:	68fa      	ldr	r2, [r7, #12]
    32ca:	8afb      	ldrh	r3, [r7, #22]
    32cc:	8113      	strh	r3, [r2, #8]
}
    32ce:	f107 0718 	add.w	r7, r7, #24	; 0x18
    32d2:	46bd      	mov	sp, r7
    32d4:	bd80      	pop	{r7, pc}
    32d6:	46c0      	nop			(mov r8, r8)

000032d8 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
    32d8:	b580      	push	{r7, lr}
    32da:	b084      	sub	sp, #16
    32dc:	af00      	add	r7, sp, #0
    32de:	60f8      	str	r0, [r7, #12]
    32e0:	4618      	mov	r0, r3
    32e2:	460b      	mov	r3, r1
    32e4:	817b      	strh	r3, [r7, #10]
    32e6:	4613      	mov	r3, r2
    32e8:	813b      	strh	r3, [r7, #8]
    32ea:	4603      	mov	r3, r0
    32ec:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    32ee:	897b      	ldrh	r3, [r7, #10]
    32f0:	893a      	ldrh	r2, [r7, #8]
    32f2:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    32f6:	68f8      	ldr	r0, [r7, #12]
    32f8:	4619      	mov	r1, r3
    32fa:	4663      	mov	r3, ip
    32fc:	f000 f80c 	bl	3318 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= SMCR_ECE_Set;
    3300:	68fb      	ldr	r3, [r7, #12]
    3302:	891b      	ldrh	r3, [r3, #8]
    3304:	b29b      	uxth	r3, r3
    3306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    330a:	b29b      	uxth	r3, r3
    330c:	68fa      	ldr	r2, [r7, #12]
    330e:	8113      	strh	r3, [r2, #8]
}
    3310:	f107 0710 	add.w	r7, r7, #16	; 0x10
    3314:	46bd      	mov	sp, r7
    3316:	bd80      	pop	{r7, pc}

00003318 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
    3318:	b480      	push	{r7}
    331a:	b087      	sub	sp, #28
    331c:	af00      	add	r7, sp, #0
    331e:	60f8      	str	r0, [r7, #12]
    3320:	4618      	mov	r0, r3
    3322:	460b      	mov	r3, r1
    3324:	817b      	strh	r3, [r7, #10]
    3326:	4613      	mov	r3, r2
    3328:	813b      	strh	r3, [r7, #8]
    332a:	4603      	mov	r3, r0
    332c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    332e:	f04f 0300 	mov.w	r3, #0	; 0x0
    3332:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
    3334:	68fb      	ldr	r3, [r7, #12]
    3336:	891b      	ldrh	r3, [r3, #8]
    3338:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
    333a:	8afb      	ldrh	r3, [r7, #22]
    333c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    3340:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
    3342:	88fb      	ldrh	r3, [r7, #6]
    3344:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3348:	b29a      	uxth	r2, r3
    334a:	893b      	ldrh	r3, [r7, #8]
    334c:	ea42 0303 	orr.w	r3, r2, r3
    3350:	b29a      	uxth	r2, r3
    3352:	897b      	ldrh	r3, [r7, #10]
    3354:	ea42 0303 	orr.w	r3, r2, r3
    3358:	b29a      	uxth	r2, r3
    335a:	8afb      	ldrh	r3, [r7, #22]
    335c:	ea42 0303 	orr.w	r3, r2, r3
    3360:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    3362:	68fa      	ldr	r2, [r7, #12]
    3364:	8afb      	ldrh	r3, [r7, #22]
    3366:	8113      	strh	r3, [r2, #8]
}
    3368:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    336c:	46bd      	mov	sp, r7
    336e:	bc80      	pop	{r7}
    3370:	4770      	bx	lr
    3372:	46c0      	nop			(mov r8, r8)

00003374 <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
    3374:	b480      	push	{r7}
    3376:	b083      	sub	sp, #12
    3378:	af00      	add	r7, sp, #0
    337a:	6078      	str	r0, [r7, #4]
    337c:	460b      	mov	r3, r1
    337e:	807b      	strh	r3, [r7, #2]
    3380:	4613      	mov	r3, r2
    3382:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
    3384:	687a      	ldr	r2, [r7, #4]
    3386:	887b      	ldrh	r3, [r7, #2]
    3388:	8513      	strh	r3, [r2, #40]
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
    338a:	687a      	ldr	r2, [r7, #4]
    338c:	883b      	ldrh	r3, [r7, #0]
    338e:	8293      	strh	r3, [r2, #20]
}
    3390:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3394:	46bd      	mov	sp, r7
    3396:	bc80      	pop	{r7}
    3398:	4770      	bx	lr
    339a:	46c0      	nop			(mov r8, r8)

0000339c <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
    339c:	b480      	push	{r7}
    339e:	b085      	sub	sp, #20
    33a0:	af00      	add	r7, sp, #0
    33a2:	6078      	str	r0, [r7, #4]
    33a4:	460b      	mov	r3, r1
    33a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
    33a8:	f04f 0300 	mov.w	r3, #0	; 0x0
    33ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	881b      	ldrh	r3, [r3, #0]
    33b2:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= CR1_CounterMode_Mask;
    33b4:	89fb      	ldrh	r3, [r7, #14]
    33b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    33ba:	ea4f 5383 	mov.w	r3, r3, lsl #22
    33be:	ea4f 5393 	mov.w	r3, r3, lsr #22
    33c2:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
    33c4:	89fa      	ldrh	r2, [r7, #14]
    33c6:	887b      	ldrh	r3, [r7, #2]
    33c8:	ea42 0303 	orr.w	r3, r2, r3
    33cc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
    33ce:	687a      	ldr	r2, [r7, #4]
    33d0:	89fb      	ldrh	r3, [r7, #14]
    33d2:	8013      	strh	r3, [r2, #0]
}
    33d4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    33d8:	46bd      	mov	sp, r7
    33da:	bc80      	pop	{r7}
    33dc:	4770      	bx	lr
    33de:	46c0      	nop			(mov r8, r8)

000033e0 <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    33e0:	b480      	push	{r7}
    33e2:	b085      	sub	sp, #20
    33e4:	af00      	add	r7, sp, #0
    33e6:	6078      	str	r0, [r7, #4]
    33e8:	460b      	mov	r3, r1
    33ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
    33ec:	f04f 0300 	mov.w	r3, #0	; 0x0
    33f0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    33f2:	687b      	ldr	r3, [r7, #4]
    33f4:	891b      	ldrh	r3, [r3, #8]
    33f6:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
    33f8:	89fb      	ldrh	r3, [r7, #14]
    33fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    33fe:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
    3400:	89fa      	ldrh	r2, [r7, #14]
    3402:	887b      	ldrh	r3, [r7, #2]
    3404:	ea42 0303 	orr.w	r3, r2, r3
    3408:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    340a:	687a      	ldr	r2, [r7, #4]
    340c:	89fb      	ldrh	r3, [r7, #14]
    340e:	8113      	strh	r3, [r2, #8]
}
    3410:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3414:	46bd      	mov	sp, r7
    3416:	bc80      	pop	{r7}
    3418:	4770      	bx	lr
    341a:	46c0      	nop			(mov r8, r8)

0000341c <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
    341c:	b480      	push	{r7}
    341e:	b087      	sub	sp, #28
    3420:	af00      	add	r7, sp, #0
    3422:	60f8      	str	r0, [r7, #12]
    3424:	4618      	mov	r0, r3
    3426:	460b      	mov	r3, r1
    3428:	817b      	strh	r3, [r7, #10]
    342a:	4613      	mov	r3, r2
    342c:	813b      	strh	r3, [r7, #8]
    342e:	4603      	mov	r3, r0
    3430:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    3432:	f04f 0300 	mov.w	r3, #0	; 0x0
    3436:	827b      	strh	r3, [r7, #18]
  uint16_t tmpccmr1 = 0;
    3438:	f04f 0300 	mov.w	r3, #0	; 0x0
    343c:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
    343e:	f04f 0300 	mov.w	r3, #0	; 0x0
    3442:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    3444:	68fb      	ldr	r3, [r7, #12]
    3446:	891b      	ldrh	r3, [r3, #8]
    3448:	827b      	strh	r3, [r7, #18]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    344a:	68fb      	ldr	r3, [r7, #12]
    344c:	8b1b      	ldrh	r3, [r3, #24]
    344e:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    3450:	68fb      	ldr	r3, [r7, #12]
    3452:	8c1b      	ldrh	r3, [r3, #32]
    3454:	82fb      	strh	r3, [r7, #22]

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
    3456:	8a7b      	ldrh	r3, [r7, #18]
    3458:	f023 0307 	bic.w	r3, r3, #7	; 0x7
    345c:	827b      	strh	r3, [r7, #18]
  tmpsmcr |= TIM_EncoderMode;
    345e:	8a7a      	ldrh	r2, [r7, #18]
    3460:	897b      	ldrh	r3, [r7, #10]
    3462:	ea42 0303 	orr.w	r3, r2, r3
    3466:	827b      	strh	r3, [r7, #18]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
    3468:	8abb      	ldrh	r3, [r7, #20]
    346a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    346e:	f023 0303 	bic.w	r3, r3, #3	; 0x3
    3472:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
    3474:	8abb      	ldrh	r3, [r7, #20]
    3476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    347a:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    347e:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
    3480:	8afb      	ldrh	r3, [r7, #22]
    3482:	f023 0322 	bic.w	r3, r3, #34	; 0x22
    3486:	82fb      	strh	r3, [r7, #22]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
    3488:	88fb      	ldrh	r3, [r7, #6]
    348a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    348e:	b29a      	uxth	r2, r3
    3490:	893b      	ldrh	r3, [r7, #8]
    3492:	ea42 0303 	orr.w	r3, r2, r3
    3496:	b29a      	uxth	r2, r3
    3498:	8afb      	ldrh	r3, [r7, #22]
    349a:	ea42 0303 	orr.w	r3, r2, r3
    349e:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    34a0:	68fa      	ldr	r2, [r7, #12]
    34a2:	8a7b      	ldrh	r3, [r7, #18]
    34a4:	8113      	strh	r3, [r2, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    34a6:	68fa      	ldr	r2, [r7, #12]
    34a8:	8abb      	ldrh	r3, [r7, #20]
    34aa:	8313      	strh	r3, [r2, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    34ac:	68fa      	ldr	r2, [r7, #12]
    34ae:	8afb      	ldrh	r3, [r7, #22]
    34b0:	8413      	strh	r3, [r2, #32]
}
    34b2:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    34b6:	46bd      	mov	sp, r7
    34b8:	bc80      	pop	{r7}
    34ba:	4770      	bx	lr

000034bc <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    34bc:	b480      	push	{r7}
    34be:	b085      	sub	sp, #20
    34c0:	af00      	add	r7, sp, #0
    34c2:	6078      	str	r0, [r7, #4]
    34c4:	460b      	mov	r3, r1
    34c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    34c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    34cc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	8b1b      	ldrh	r3, [r3, #24]
    34d2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= CCMR_OC13M_Mask;
    34d4:	89fb      	ldrh	r3, [r7, #14]
    34d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    34da:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
    34dc:	89fa      	ldrh	r2, [r7, #14]
    34de:	887b      	ldrh	r3, [r7, #2]
    34e0:	ea42 0303 	orr.w	r3, r2, r3
    34e4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    34e6:	687a      	ldr	r2, [r7, #4]
    34e8:	89fb      	ldrh	r3, [r7, #14]
    34ea:	8313      	strh	r3, [r2, #24]
}
    34ec:	f107 0714 	add.w	r7, r7, #20	; 0x14
    34f0:	46bd      	mov	sp, r7
    34f2:	bc80      	pop	{r7}
    34f4:	4770      	bx	lr
    34f6:	46c0      	nop			(mov r8, r8)

000034f8 <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    34f8:	b480      	push	{r7}
    34fa:	b085      	sub	sp, #20
    34fc:	af00      	add	r7, sp, #0
    34fe:	6078      	str	r0, [r7, #4]
    3500:	460b      	mov	r3, r1
    3502:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    3504:	f04f 0300 	mov.w	r3, #0	; 0x0
    3508:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    350a:	687b      	ldr	r3, [r7, #4]
    350c:	8b1b      	ldrh	r3, [r3, #24]
    350e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= CCMR_OC24M_Mask;
    3510:	89fb      	ldrh	r3, [r7, #14]
    3512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3516:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
    3518:	887b      	ldrh	r3, [r7, #2]
    351a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    351e:	b29a      	uxth	r2, r3
    3520:	89fb      	ldrh	r3, [r7, #14]
    3522:	ea42 0303 	orr.w	r3, r2, r3
    3526:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3528:	687a      	ldr	r2, [r7, #4]
    352a:	89fb      	ldrh	r3, [r7, #14]
    352c:	8313      	strh	r3, [r2, #24]
}
    352e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3532:	46bd      	mov	sp, r7
    3534:	bc80      	pop	{r7}
    3536:	4770      	bx	lr

00003538 <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    3538:	b480      	push	{r7}
    353a:	b085      	sub	sp, #20
    353c:	af00      	add	r7, sp, #0
    353e:	6078      	str	r0, [r7, #4]
    3540:	460b      	mov	r3, r1
    3542:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3544:	f04f 0300 	mov.w	r3, #0	; 0x0
    3548:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    354a:	687b      	ldr	r3, [r7, #4]
    354c:	8b9b      	ldrh	r3, [r3, #28]
    354e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= CCMR_OC13M_Mask;
    3550:	89fb      	ldrh	r3, [r7, #14]
    3552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    3556:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
    3558:	89fa      	ldrh	r2, [r7, #14]
    355a:	887b      	ldrh	r3, [r7, #2]
    355c:	ea42 0303 	orr.w	r3, r2, r3
    3560:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    3562:	687a      	ldr	r2, [r7, #4]
    3564:	89fb      	ldrh	r3, [r7, #14]
    3566:	8393      	strh	r3, [r2, #28]
}
    3568:	f107 0714 	add.w	r7, r7, #20	; 0x14
    356c:	46bd      	mov	sp, r7
    356e:	bc80      	pop	{r7}
    3570:	4770      	bx	lr
    3572:	46c0      	nop			(mov r8, r8)

00003574 <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    3574:	b480      	push	{r7}
    3576:	b085      	sub	sp, #20
    3578:	af00      	add	r7, sp, #0
    357a:	6078      	str	r0, [r7, #4]
    357c:	460b      	mov	r3, r1
    357e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3580:	f04f 0300 	mov.w	r3, #0	; 0x0
    3584:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    3586:	687b      	ldr	r3, [r7, #4]
    3588:	8b9b      	ldrh	r3, [r3, #28]
    358a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= CCMR_OC24M_Mask;
    358c:	89fb      	ldrh	r3, [r7, #14]
    358e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3592:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
    3594:	887b      	ldrh	r3, [r7, #2]
    3596:	ea4f 2303 	mov.w	r3, r3, lsl #8
    359a:	b29a      	uxth	r2, r3
    359c:	89fb      	ldrh	r3, [r7, #14]
    359e:	ea42 0303 	orr.w	r3, r2, r3
    35a2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    35a4:	687a      	ldr	r2, [r7, #4]
    35a6:	89fb      	ldrh	r3, [r7, #14]
    35a8:	8393      	strh	r3, [r2, #28]
}
    35aa:	f107 0714 	add.w	r7, r7, #20	; 0x14
    35ae:	46bd      	mov	sp, r7
    35b0:	bc80      	pop	{r7}
    35b2:	4770      	bx	lr

000035b4 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    35b4:	b480      	push	{r7}
    35b6:	b085      	sub	sp, #20
    35b8:	af00      	add	r7, sp, #0
    35ba:	60f8      	str	r0, [r7, #12]
    35bc:	460b      	mov	r3, r1
    35be:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    35c0:	7afb      	ldrb	r3, [r7, #11]
    35c2:	2b00      	cmp	r3, #0
    35c4:	d008      	beq.n	35d8 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
    35c6:	68fb      	ldr	r3, [r7, #12]
    35c8:	881b      	ldrh	r3, [r3, #0]
    35ca:	b29b      	uxth	r3, r3
    35cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    35d0:	b29b      	uxth	r3, r3
    35d2:	68fa      	ldr	r2, [r7, #12]
    35d4:	8013      	strh	r3, [r2, #0]
    35d6:	e00d      	b.n	35f4 <TIM_ARRPreloadConfig+0x40>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= CR1_ARPE_Reset;
    35d8:	68fb      	ldr	r3, [r7, #12]
    35da:	881b      	ldrh	r3, [r3, #0]
    35dc:	b29b      	uxth	r3, r3
    35de:	607b      	str	r3, [r7, #4]
    35e0:	f240 337f 	movw	r3, #895	; 0x37f
    35e4:	6879      	ldr	r1, [r7, #4]
    35e6:	ea01 0303 	and.w	r3, r1, r3
    35ea:	607b      	str	r3, [r7, #4]
    35ec:	68fa      	ldr	r2, [r7, #12]
    35ee:	6879      	ldr	r1, [r7, #4]
    35f0:	460b      	mov	r3, r1
    35f2:	8013      	strh	r3, [r2, #0]
  }
}
    35f4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    35f8:	46bd      	mov	sp, r7
    35fa:	bc80      	pop	{r7}
    35fc:	4770      	bx	lr
    35fe:	46c0      	nop			(mov r8, r8)

00003600 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3600:	b480      	push	{r7}
    3602:	b085      	sub	sp, #20
    3604:	af00      	add	r7, sp, #0
    3606:	60f8      	str	r0, [r7, #12]
    3608:	460b      	mov	r3, r1
    360a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    360c:	7afb      	ldrb	r3, [r7, #11]
    360e:	2b00      	cmp	r3, #0
    3610:	d008      	beq.n	3624 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
    3612:	68fb      	ldr	r3, [r7, #12]
    3614:	889b      	ldrh	r3, [r3, #4]
    3616:	b29b      	uxth	r3, r3
    3618:	f043 0304 	orr.w	r3, r3, #4	; 0x4
    361c:	b29b      	uxth	r3, r3
    361e:	68fa      	ldr	r2, [r7, #12]
    3620:	8093      	strh	r3, [r2, #4]
    3622:	e00d      	b.n	3640 <TIM_SelectCOM+0x40>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= CR2_CCUS_Reset;
    3624:	68fb      	ldr	r3, [r7, #12]
    3626:	889b      	ldrh	r3, [r3, #4]
    3628:	b29b      	uxth	r3, r3
    362a:	607b      	str	r3, [r7, #4]
    362c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    3630:	6879      	ldr	r1, [r7, #4]
    3632:	ea01 0303 	and.w	r3, r1, r3
    3636:	607b      	str	r3, [r7, #4]
    3638:	68fa      	ldr	r2, [r7, #12]
    363a:	6879      	ldr	r1, [r7, #4]
    363c:	460b      	mov	r3, r1
    363e:	8093      	strh	r3, [r2, #4]
  }
}
    3640:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3644:	46bd      	mov	sp, r7
    3646:	bc80      	pop	{r7}
    3648:	4770      	bx	lr
    364a:	46c0      	nop			(mov r8, r8)

0000364c <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    364c:	b480      	push	{r7}
    364e:	b085      	sub	sp, #20
    3650:	af00      	add	r7, sp, #0
    3652:	60f8      	str	r0, [r7, #12]
    3654:	460b      	mov	r3, r1
    3656:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3658:	7afb      	ldrb	r3, [r7, #11]
    365a:	2b00      	cmp	r3, #0
    365c:	d008      	beq.n	3670 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
    365e:	68fb      	ldr	r3, [r7, #12]
    3660:	889b      	ldrh	r3, [r3, #4]
    3662:	b29b      	uxth	r3, r3
    3664:	f043 0308 	orr.w	r3, r3, #8	; 0x8
    3668:	b29b      	uxth	r3, r3
    366a:	68fa      	ldr	r2, [r7, #12]
    366c:	8093      	strh	r3, [r2, #4]
    366e:	e00d      	b.n	368c <TIM_SelectCCDMA+0x40>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= CR2_CCDS_Reset;
    3670:	68fb      	ldr	r3, [r7, #12]
    3672:	889b      	ldrh	r3, [r3, #4]
    3674:	b29b      	uxth	r3, r3
    3676:	607b      	str	r3, [r7, #4]
    3678:	f64f 73f7 	movw	r3, #65527	; 0xfff7
    367c:	6879      	ldr	r1, [r7, #4]
    367e:	ea01 0303 	and.w	r3, r1, r3
    3682:	607b      	str	r3, [r7, #4]
    3684:	68fa      	ldr	r2, [r7, #12]
    3686:	6879      	ldr	r1, [r7, #4]
    3688:	460b      	mov	r3, r1
    368a:	8093      	strh	r3, [r2, #4]
  }
}
    368c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3690:	46bd      	mov	sp, r7
    3692:	bc80      	pop	{r7}
    3694:	4770      	bx	lr
    3696:	46c0      	nop			(mov r8, r8)

00003698 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
    3698:	b480      	push	{r7}
    369a:	b085      	sub	sp, #20
    369c:	af00      	add	r7, sp, #0
    369e:	60f8      	str	r0, [r7, #12]
    36a0:	460b      	mov	r3, r1
    36a2:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    36a4:	7afb      	ldrb	r3, [r7, #11]
    36a6:	2b00      	cmp	r3, #0
    36a8:	d008      	beq.n	36bc <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
    36aa:	68fb      	ldr	r3, [r7, #12]
    36ac:	889b      	ldrh	r3, [r3, #4]
    36ae:	b29b      	uxth	r3, r3
    36b0:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    36b4:	b29b      	uxth	r3, r3
    36b6:	68fa      	ldr	r2, [r7, #12]
    36b8:	8093      	strh	r3, [r2, #4]
    36ba:	e00d      	b.n	36d8 <TIM_CCPreloadControl+0x40>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= CR2_CCPC_Reset;
    36bc:	68fb      	ldr	r3, [r7, #12]
    36be:	889b      	ldrh	r3, [r3, #4]
    36c0:	b29b      	uxth	r3, r3
    36c2:	607b      	str	r3, [r7, #4]
    36c4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    36c8:	6879      	ldr	r1, [r7, #4]
    36ca:	ea01 0303 	and.w	r3, r1, r3
    36ce:	607b      	str	r3, [r7, #4]
    36d0:	68fa      	ldr	r2, [r7, #12]
    36d2:	6879      	ldr	r1, [r7, #4]
    36d4:	460b      	mov	r3, r1
    36d6:	8093      	strh	r3, [r2, #4]
  }
}
    36d8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    36dc:	46bd      	mov	sp, r7
    36de:	bc80      	pop	{r7}
    36e0:	4770      	bx	lr
    36e2:	46c0      	nop			(mov r8, r8)

000036e4 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    36e4:	b480      	push	{r7}
    36e6:	b085      	sub	sp, #20
    36e8:	af00      	add	r7, sp, #0
    36ea:	6078      	str	r0, [r7, #4]
    36ec:	460b      	mov	r3, r1
    36ee:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    36f0:	f04f 0300 	mov.w	r3, #0	; 0x0
    36f4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    36f6:	687b      	ldr	r3, [r7, #4]
    36f8:	8b1b      	ldrh	r3, [r3, #24]
    36fa:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= CCMR_OC13PE_Reset;
    36fc:	89fb      	ldrh	r3, [r7, #14]
    36fe:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    3702:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
    3704:	89fa      	ldrh	r2, [r7, #14]
    3706:	887b      	ldrh	r3, [r7, #2]
    3708:	ea42 0303 	orr.w	r3, r2, r3
    370c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    370e:	687a      	ldr	r2, [r7, #4]
    3710:	89fb      	ldrh	r3, [r7, #14]
    3712:	8313      	strh	r3, [r2, #24]
}
    3714:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3718:	46bd      	mov	sp, r7
    371a:	bc80      	pop	{r7}
    371c:	4770      	bx	lr
    371e:	46c0      	nop			(mov r8, r8)

00003720 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    3720:	b480      	push	{r7}
    3722:	b085      	sub	sp, #20
    3724:	af00      	add	r7, sp, #0
    3726:	6078      	str	r0, [r7, #4]
    3728:	460b      	mov	r3, r1
    372a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    372c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3730:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    3732:	687b      	ldr	r3, [r7, #4]
    3734:	8b1b      	ldrh	r3, [r3, #24]
    3736:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= CCMR_OC24PE_Reset;
    3738:	89fb      	ldrh	r3, [r7, #14]
    373a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    373e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
    3740:	887b      	ldrh	r3, [r7, #2]
    3742:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3746:	b29a      	uxth	r2, r3
    3748:	89fb      	ldrh	r3, [r7, #14]
    374a:	ea42 0303 	orr.w	r3, r2, r3
    374e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3750:	687a      	ldr	r2, [r7, #4]
    3752:	89fb      	ldrh	r3, [r7, #14]
    3754:	8313      	strh	r3, [r2, #24]
}
    3756:	f107 0714 	add.w	r7, r7, #20	; 0x14
    375a:	46bd      	mov	sp, r7
    375c:	bc80      	pop	{r7}
    375e:	4770      	bx	lr

00003760 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    3760:	b480      	push	{r7}
    3762:	b085      	sub	sp, #20
    3764:	af00      	add	r7, sp, #0
    3766:	6078      	str	r0, [r7, #4]
    3768:	460b      	mov	r3, r1
    376a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    376c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3770:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    3772:	687b      	ldr	r3, [r7, #4]
    3774:	8b9b      	ldrh	r3, [r3, #28]
    3776:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= CCMR_OC13PE_Reset;
    3778:	89fb      	ldrh	r3, [r7, #14]
    377a:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    377e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
    3780:	89fa      	ldrh	r2, [r7, #14]
    3782:	887b      	ldrh	r3, [r7, #2]
    3784:	ea42 0303 	orr.w	r3, r2, r3
    3788:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    378a:	687a      	ldr	r2, [r7, #4]
    378c:	89fb      	ldrh	r3, [r7, #14]
    378e:	8393      	strh	r3, [r2, #28]
}
    3790:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3794:	46bd      	mov	sp, r7
    3796:	bc80      	pop	{r7}
    3798:	4770      	bx	lr
    379a:	46c0      	nop			(mov r8, r8)

0000379c <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    379c:	b480      	push	{r7}
    379e:	b085      	sub	sp, #20
    37a0:	af00      	add	r7, sp, #0
    37a2:	6078      	str	r0, [r7, #4]
    37a4:	460b      	mov	r3, r1
    37a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    37a8:	f04f 0300 	mov.w	r3, #0	; 0x0
    37ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    37ae:	687b      	ldr	r3, [r7, #4]
    37b0:	8b9b      	ldrh	r3, [r3, #28]
    37b2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= CCMR_OC24PE_Reset;
    37b4:	89fb      	ldrh	r3, [r7, #14]
    37b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    37ba:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
    37bc:	887b      	ldrh	r3, [r7, #2]
    37be:	ea4f 2303 	mov.w	r3, r3, lsl #8
    37c2:	b29a      	uxth	r2, r3
    37c4:	89fb      	ldrh	r3, [r7, #14]
    37c6:	ea42 0303 	orr.w	r3, r2, r3
    37ca:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    37cc:	687a      	ldr	r2, [r7, #4]
    37ce:	89fb      	ldrh	r3, [r7, #14]
    37d0:	8393      	strh	r3, [r2, #28]
}
    37d2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    37d6:	46bd      	mov	sp, r7
    37d8:	bc80      	pop	{r7}
    37da:	4770      	bx	lr

000037dc <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    37dc:	b480      	push	{r7}
    37de:	b085      	sub	sp, #20
    37e0:	af00      	add	r7, sp, #0
    37e2:	6078      	str	r0, [r7, #4]
    37e4:	460b      	mov	r3, r1
    37e6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    37e8:	f04f 0300 	mov.w	r3, #0	; 0x0
    37ec:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	8b1b      	ldrh	r3, [r3, #24]
    37f2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= CCMR_OC13FE_Reset;
    37f4:	89fb      	ldrh	r3, [r7, #14]
    37f6:	f023 0304 	bic.w	r3, r3, #4	; 0x4
    37fa:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
    37fc:	89fa      	ldrh	r2, [r7, #14]
    37fe:	887b      	ldrh	r3, [r7, #2]
    3800:	ea42 0303 	orr.w	r3, r2, r3
    3804:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    3806:	687a      	ldr	r2, [r7, #4]
    3808:	89fb      	ldrh	r3, [r7, #14]
    380a:	8313      	strh	r3, [r2, #24]
}
    380c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3810:	46bd      	mov	sp, r7
    3812:	bc80      	pop	{r7}
    3814:	4770      	bx	lr
    3816:	46c0      	nop			(mov r8, r8)

00003818 <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3818:	b480      	push	{r7}
    381a:	b085      	sub	sp, #20
    381c:	af00      	add	r7, sp, #0
    381e:	6078      	str	r0, [r7, #4]
    3820:	460b      	mov	r3, r1
    3822:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    3824:	f04f 0300 	mov.w	r3, #0	; 0x0
    3828:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    382a:	687b      	ldr	r3, [r7, #4]
    382c:	8b1b      	ldrh	r3, [r3, #24]
    382e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= CCMR_OC24FE_Reset;
    3830:	89fb      	ldrh	r3, [r7, #14]
    3832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3836:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
    3838:	887b      	ldrh	r3, [r7, #2]
    383a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    383e:	b29a      	uxth	r2, r3
    3840:	89fb      	ldrh	r3, [r7, #14]
    3842:	ea42 0303 	orr.w	r3, r2, r3
    3846:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    3848:	687a      	ldr	r2, [r7, #4]
    384a:	89fb      	ldrh	r3, [r7, #14]
    384c:	8313      	strh	r3, [r2, #24]
}
    384e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3852:	46bd      	mov	sp, r7
    3854:	bc80      	pop	{r7}
    3856:	4770      	bx	lr

00003858 <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3858:	b480      	push	{r7}
    385a:	b085      	sub	sp, #20
    385c:	af00      	add	r7, sp, #0
    385e:	6078      	str	r0, [r7, #4]
    3860:	460b      	mov	r3, r1
    3862:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3864:	f04f 0300 	mov.w	r3, #0	; 0x0
    3868:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    386a:	687b      	ldr	r3, [r7, #4]
    386c:	8b9b      	ldrh	r3, [r3, #28]
    386e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= CCMR_OC13FE_Reset;
    3870:	89fb      	ldrh	r3, [r7, #14]
    3872:	f023 0304 	bic.w	r3, r3, #4	; 0x4
    3876:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
    3878:	89fa      	ldrh	r2, [r7, #14]
    387a:	887b      	ldrh	r3, [r7, #2]
    387c:	ea42 0303 	orr.w	r3, r2, r3
    3880:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    3882:	687a      	ldr	r2, [r7, #4]
    3884:	89fb      	ldrh	r3, [r7, #14]
    3886:	8393      	strh	r3, [r2, #28]
}
    3888:	f107 0714 	add.w	r7, r7, #20	; 0x14
    388c:	46bd      	mov	sp, r7
    388e:	bc80      	pop	{r7}
    3890:	4770      	bx	lr
    3892:	46c0      	nop			(mov r8, r8)

00003894 <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3894:	b480      	push	{r7}
    3896:	b085      	sub	sp, #20
    3898:	af00      	add	r7, sp, #0
    389a:	6078      	str	r0, [r7, #4]
    389c:	460b      	mov	r3, r1
    389e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    38a0:	f04f 0300 	mov.w	r3, #0	; 0x0
    38a4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    38a6:	687b      	ldr	r3, [r7, #4]
    38a8:	8b9b      	ldrh	r3, [r3, #28]
    38aa:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= CCMR_OC24FE_Reset;
    38ac:	89fb      	ldrh	r3, [r7, #14]
    38ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    38b2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
    38b4:	887b      	ldrh	r3, [r7, #2]
    38b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    38ba:	b29a      	uxth	r2, r3
    38bc:	89fb      	ldrh	r3, [r7, #14]
    38be:	ea42 0303 	orr.w	r3, r2, r3
    38c2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    38c4:	687a      	ldr	r2, [r7, #4]
    38c6:	89fb      	ldrh	r3, [r7, #14]
    38c8:	8393      	strh	r3, [r2, #28]
}
    38ca:	f107 0714 	add.w	r7, r7, #20	; 0x14
    38ce:	46bd      	mov	sp, r7
    38d0:	bc80      	pop	{r7}
    38d2:	4770      	bx	lr

000038d4 <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    38d4:	b480      	push	{r7}
    38d6:	b085      	sub	sp, #20
    38d8:	af00      	add	r7, sp, #0
    38da:	6078      	str	r0, [r7, #4]
    38dc:	460b      	mov	r3, r1
    38de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    38e0:	f04f 0300 	mov.w	r3, #0	; 0x0
    38e4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    38e6:	687b      	ldr	r3, [r7, #4]
    38e8:	8b1b      	ldrh	r3, [r3, #24]
    38ea:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1CE Bit */
  tmpccmr1 &= CCMR_OC13CE_Reset;
    38ec:	89fb      	ldrh	r3, [r7, #14]
    38ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    38f2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
    38f4:	89fa      	ldrh	r2, [r7, #14]
    38f6:	887b      	ldrh	r3, [r7, #2]
    38f8:	ea42 0303 	orr.w	r3, r2, r3
    38fc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    38fe:	687a      	ldr	r2, [r7, #4]
    3900:	89fb      	ldrh	r3, [r7, #14]
    3902:	8313      	strh	r3, [r2, #24]
}
    3904:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3908:	46bd      	mov	sp, r7
    390a:	bc80      	pop	{r7}
    390c:	4770      	bx	lr
    390e:	46c0      	nop			(mov r8, r8)

00003910 <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3910:	b480      	push	{r7}
    3912:	b085      	sub	sp, #20
    3914:	af00      	add	r7, sp, #0
    3916:	6078      	str	r0, [r7, #4]
    3918:	460b      	mov	r3, r1
    391a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    391c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3920:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    3922:	687b      	ldr	r3, [r7, #4]
    3924:	8b1b      	ldrh	r3, [r3, #24]
    3926:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= CCMR_OC24CE_Reset;
    3928:	89fb      	ldrh	r3, [r7, #14]
    392a:	ea4f 4343 	mov.w	r3, r3, lsl #17
    392e:	ea4f 4353 	mov.w	r3, r3, lsr #17
    3932:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
    3934:	887b      	ldrh	r3, [r7, #2]
    3936:	ea4f 2303 	mov.w	r3, r3, lsl #8
    393a:	b29a      	uxth	r2, r3
    393c:	89fb      	ldrh	r3, [r7, #14]
    393e:	ea42 0303 	orr.w	r3, r2, r3
    3942:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3944:	687a      	ldr	r2, [r7, #4]
    3946:	89fb      	ldrh	r3, [r7, #14]
    3948:	8313      	strh	r3, [r2, #24]
}
    394a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    394e:	46bd      	mov	sp, r7
    3950:	bc80      	pop	{r7}
    3952:	4770      	bx	lr

00003954 <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3954:	b480      	push	{r7}
    3956:	b085      	sub	sp, #20
    3958:	af00      	add	r7, sp, #0
    395a:	6078      	str	r0, [r7, #4]
    395c:	460b      	mov	r3, r1
    395e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3960:	f04f 0300 	mov.w	r3, #0	; 0x0
    3964:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	8b9b      	ldrh	r3, [r3, #28]
    396a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= CCMR_OC13CE_Reset;
    396c:	89fb      	ldrh	r3, [r7, #14]
    396e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3972:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
    3974:	89fa      	ldrh	r2, [r7, #14]
    3976:	887b      	ldrh	r3, [r7, #2]
    3978:	ea42 0303 	orr.w	r3, r2, r3
    397c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    397e:	687a      	ldr	r2, [r7, #4]
    3980:	89fb      	ldrh	r3, [r7, #14]
    3982:	8393      	strh	r3, [r2, #28]
}
    3984:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3988:	46bd      	mov	sp, r7
    398a:	bc80      	pop	{r7}
    398c:	4770      	bx	lr
    398e:	46c0      	nop			(mov r8, r8)

00003990 <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3990:	b480      	push	{r7}
    3992:	b085      	sub	sp, #20
    3994:	af00      	add	r7, sp, #0
    3996:	6078      	str	r0, [r7, #4]
    3998:	460b      	mov	r3, r1
    399a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    399c:	f04f 0300 	mov.w	r3, #0	; 0x0
    39a0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    39a2:	687b      	ldr	r3, [r7, #4]
    39a4:	8b9b      	ldrh	r3, [r3, #28]
    39a6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= CCMR_OC24CE_Reset;
    39a8:	89fb      	ldrh	r3, [r7, #14]
    39aa:	ea4f 4343 	mov.w	r3, r3, lsl #17
    39ae:	ea4f 4353 	mov.w	r3, r3, lsr #17
    39b2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
    39b4:	887b      	ldrh	r3, [r7, #2]
    39b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    39ba:	b29a      	uxth	r2, r3
    39bc:	89fb      	ldrh	r3, [r7, #14]
    39be:	ea42 0303 	orr.w	r3, r2, r3
    39c2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    39c4:	687a      	ldr	r2, [r7, #4]
    39c6:	89fb      	ldrh	r3, [r7, #14]
    39c8:	8393      	strh	r3, [r2, #28]
}
    39ca:	f107 0714 	add.w	r7, r7, #20	; 0x14
    39ce:	46bd      	mov	sp, r7
    39d0:	bc80      	pop	{r7}
    39d2:	4770      	bx	lr

000039d4 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    39d4:	b480      	push	{r7}
    39d6:	b085      	sub	sp, #20
    39d8:	af00      	add	r7, sp, #0
    39da:	6078      	str	r0, [r7, #4]
    39dc:	460b      	mov	r3, r1
    39de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    39e0:	f04f 0300 	mov.w	r3, #0	; 0x0
    39e4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    39e6:	687b      	ldr	r3, [r7, #4]
    39e8:	8c1b      	ldrh	r3, [r3, #32]
    39ea:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= CCER_CC1P_Reset;
    39ec:	89fb      	ldrh	r3, [r7, #14]
    39ee:	f023 0302 	bic.w	r3, r3, #2	; 0x2
    39f2:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
    39f4:	89fa      	ldrh	r2, [r7, #14]
    39f6:	887b      	ldrh	r3, [r7, #2]
    39f8:	ea42 0303 	orr.w	r3, r2, r3
    39fc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    39fe:	687a      	ldr	r2, [r7, #4]
    3a00:	89fb      	ldrh	r3, [r7, #14]
    3a02:	8413      	strh	r3, [r2, #32]
}
    3a04:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3a08:	46bd      	mov	sp, r7
    3a0a:	bc80      	pop	{r7}
    3a0c:	4770      	bx	lr
    3a0e:	46c0      	nop			(mov r8, r8)

00003a10 <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3a10:	b480      	push	{r7}
    3a12:	b085      	sub	sp, #20
    3a14:	af00      	add	r7, sp, #0
    3a16:	6078      	str	r0, [r7, #4]
    3a18:	460b      	mov	r3, r1
    3a1a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3a1c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3a20:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
    3a22:	687b      	ldr	r3, [r7, #4]
    3a24:	8c1b      	ldrh	r3, [r3, #32]
    3a26:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= CCER_CC1NP_Reset;
    3a28:	89fb      	ldrh	r3, [r7, #14]
    3a2a:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    3a2e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
    3a30:	89fa      	ldrh	r2, [r7, #14]
    3a32:	887b      	ldrh	r3, [r7, #2]
    3a34:	ea42 0303 	orr.w	r3, r2, r3
    3a38:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3a3a:	687a      	ldr	r2, [r7, #4]
    3a3c:	89fb      	ldrh	r3, [r7, #14]
    3a3e:	8413      	strh	r3, [r2, #32]
}
    3a40:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3a44:	46bd      	mov	sp, r7
    3a46:	bc80      	pop	{r7}
    3a48:	4770      	bx	lr
    3a4a:	46c0      	nop			(mov r8, r8)

00003a4c <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3a4c:	b480      	push	{r7}
    3a4e:	b085      	sub	sp, #20
    3a50:	af00      	add	r7, sp, #0
    3a52:	6078      	str	r0, [r7, #4]
    3a54:	460b      	mov	r3, r1
    3a56:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3a58:	f04f 0300 	mov.w	r3, #0	; 0x0
    3a5c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3a5e:	687b      	ldr	r3, [r7, #4]
    3a60:	8c1b      	ldrh	r3, [r3, #32]
    3a62:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= CCER_CC2P_Reset;
    3a64:	89fb      	ldrh	r3, [r7, #14]
    3a66:	f023 0320 	bic.w	r3, r3, #32	; 0x20
    3a6a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
    3a6c:	887b      	ldrh	r3, [r7, #2]
    3a6e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3a72:	b29a      	uxth	r2, r3
    3a74:	89fb      	ldrh	r3, [r7, #14]
    3a76:	ea42 0303 	orr.w	r3, r2, r3
    3a7a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3a7c:	687a      	ldr	r2, [r7, #4]
    3a7e:	89fb      	ldrh	r3, [r7, #14]
    3a80:	8413      	strh	r3, [r2, #32]
}
    3a82:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3a86:	46bd      	mov	sp, r7
    3a88:	bc80      	pop	{r7}
    3a8a:	4770      	bx	lr

00003a8c <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3a8c:	b480      	push	{r7}
    3a8e:	b085      	sub	sp, #20
    3a90:	af00      	add	r7, sp, #0
    3a92:	6078      	str	r0, [r7, #4]
    3a94:	460b      	mov	r3, r1
    3a96:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3a98:	f04f 0300 	mov.w	r3, #0	; 0x0
    3a9c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
    3a9e:	687b      	ldr	r3, [r7, #4]
    3aa0:	8c1b      	ldrh	r3, [r3, #32]
    3aa2:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= CCER_CC2NP_Reset;
    3aa4:	89fb      	ldrh	r3, [r7, #14]
    3aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3aaa:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
    3aac:	887b      	ldrh	r3, [r7, #2]
    3aae:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3ab2:	b29a      	uxth	r2, r3
    3ab4:	89fb      	ldrh	r3, [r7, #14]
    3ab6:	ea42 0303 	orr.w	r3, r2, r3
    3aba:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3abc:	687a      	ldr	r2, [r7, #4]
    3abe:	89fb      	ldrh	r3, [r7, #14]
    3ac0:	8413      	strh	r3, [r2, #32]
}
    3ac2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3ac6:	46bd      	mov	sp, r7
    3ac8:	bc80      	pop	{r7}
    3aca:	4770      	bx	lr

00003acc <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3acc:	b480      	push	{r7}
    3ace:	b085      	sub	sp, #20
    3ad0:	af00      	add	r7, sp, #0
    3ad2:	6078      	str	r0, [r7, #4]
    3ad4:	460b      	mov	r3, r1
    3ad6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3ad8:	f04f 0300 	mov.w	r3, #0	; 0x0
    3adc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3ade:	687b      	ldr	r3, [r7, #4]
    3ae0:	8c1b      	ldrh	r3, [r3, #32]
    3ae2:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= CCER_CC3P_Reset;
    3ae4:	89fb      	ldrh	r3, [r7, #14]
    3ae6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3aea:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
    3aec:	887b      	ldrh	r3, [r7, #2]
    3aee:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3af2:	b29a      	uxth	r2, r3
    3af4:	89fb      	ldrh	r3, [r7, #14]
    3af6:	ea42 0303 	orr.w	r3, r2, r3
    3afa:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3afc:	687a      	ldr	r2, [r7, #4]
    3afe:	89fb      	ldrh	r3, [r7, #14]
    3b00:	8413      	strh	r3, [r2, #32]
}
    3b02:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3b06:	46bd      	mov	sp, r7
    3b08:	bc80      	pop	{r7}
    3b0a:	4770      	bx	lr

00003b0c <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3b0c:	b480      	push	{r7}
    3b0e:	b085      	sub	sp, #20
    3b10:	af00      	add	r7, sp, #0
    3b12:	6078      	str	r0, [r7, #4]
    3b14:	460b      	mov	r3, r1
    3b16:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3b18:	f04f 0300 	mov.w	r3, #0	; 0x0
    3b1c:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
    3b1e:	687b      	ldr	r3, [r7, #4]
    3b20:	8c1b      	ldrh	r3, [r3, #32]
    3b22:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= CCER_CC3NP_Reset;
    3b24:	89fb      	ldrh	r3, [r7, #14]
    3b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3b2a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
    3b2c:	887b      	ldrh	r3, [r7, #2]
    3b2e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3b32:	b29a      	uxth	r2, r3
    3b34:	89fb      	ldrh	r3, [r7, #14]
    3b36:	ea42 0303 	orr.w	r3, r2, r3
    3b3a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3b3c:	687a      	ldr	r2, [r7, #4]
    3b3e:	89fb      	ldrh	r3, [r7, #14]
    3b40:	8413      	strh	r3, [r2, #32]
}
    3b42:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3b46:	46bd      	mov	sp, r7
    3b48:	bc80      	pop	{r7}
    3b4a:	4770      	bx	lr

00003b4c <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3b4c:	b480      	push	{r7}
    3b4e:	b085      	sub	sp, #20
    3b50:	af00      	add	r7, sp, #0
    3b52:	6078      	str	r0, [r7, #4]
    3b54:	460b      	mov	r3, r1
    3b56:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3b58:	f04f 0300 	mov.w	r3, #0	; 0x0
    3b5c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3b5e:	687b      	ldr	r3, [r7, #4]
    3b60:	8c1b      	ldrh	r3, [r3, #32]
    3b62:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= CCER_CC4P_Reset;
    3b64:	89fb      	ldrh	r3, [r7, #14]
    3b66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3b6a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
    3b6c:	887b      	ldrh	r3, [r7, #2]
    3b6e:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3b72:	b29a      	uxth	r2, r3
    3b74:	89fb      	ldrh	r3, [r7, #14]
    3b76:	ea42 0303 	orr.w	r3, r2, r3
    3b7a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3b7c:	687a      	ldr	r2, [r7, #4]
    3b7e:	89fb      	ldrh	r3, [r7, #14]
    3b80:	8413      	strh	r3, [r2, #32]
}
    3b82:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3b86:	46bd      	mov	sp, r7
    3b88:	bc80      	pop	{r7}
    3b8a:	4770      	bx	lr

00003b8c <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
    3b8c:	b480      	push	{r7}
    3b8e:	b085      	sub	sp, #20
    3b90:	af00      	add	r7, sp, #0
    3b92:	6078      	str	r0, [r7, #4]
    3b94:	460b      	mov	r3, r1
    3b96:	807b      	strh	r3, [r7, #2]
    3b98:	4613      	mov	r3, r2
    3b9a:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    3b9c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3ba0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
    3ba2:	887a      	ldrh	r2, [r7, #2]
    3ba4:	f04f 0301 	mov.w	r3, #1	; 0x1
    3ba8:	fa03 f302 	lsl.w	r3, r3, r2
    3bac:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
    3bae:	687b      	ldr	r3, [r7, #4]
    3bb0:	8c1b      	ldrh	r3, [r3, #32]
    3bb2:	b29a      	uxth	r2, r3
    3bb4:	89fb      	ldrh	r3, [r7, #14]
    3bb6:	ea6f 0303 	mvn.w	r3, r3
    3bba:	b29b      	uxth	r3, r3
    3bbc:	ea02 0303 	and.w	r3, r2, r3
    3bc0:	b29b      	uxth	r3, r3
    3bc2:	687a      	ldr	r2, [r7, #4]
    3bc4:	8413      	strh	r3, [r2, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
    3bc6:	687b      	ldr	r3, [r7, #4]
    3bc8:	8c1b      	ldrh	r3, [r3, #32]
    3bca:	b299      	uxth	r1, r3
    3bcc:	883a      	ldrh	r2, [r7, #0]
    3bce:	887b      	ldrh	r3, [r7, #2]
    3bd0:	fa02 f303 	lsl.w	r3, r2, r3
    3bd4:	b29b      	uxth	r3, r3
    3bd6:	ea41 0303 	orr.w	r3, r1, r3
    3bda:	b29b      	uxth	r3, r3
    3bdc:	687a      	ldr	r2, [r7, #4]
    3bde:	8413      	strh	r3, [r2, #32]
}
    3be0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3be4:	46bd      	mov	sp, r7
    3be6:	bc80      	pop	{r7}
    3be8:	4770      	bx	lr
    3bea:	46c0      	nop			(mov r8, r8)

00003bec <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
    3bec:	b480      	push	{r7}
    3bee:	b085      	sub	sp, #20
    3bf0:	af00      	add	r7, sp, #0
    3bf2:	6078      	str	r0, [r7, #4]
    3bf4:	460b      	mov	r3, r1
    3bf6:	807b      	strh	r3, [r7, #2]
    3bf8:	4613      	mov	r3, r2
    3bfa:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    3bfc:	f04f 0300 	mov.w	r3, #0	; 0x0
    3c00:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
    3c02:	887a      	ldrh	r2, [r7, #2]
    3c04:	f04f 0304 	mov.w	r3, #4	; 0x4
    3c08:	fa03 f302 	lsl.w	r3, r3, r2
    3c0c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
    3c0e:	687b      	ldr	r3, [r7, #4]
    3c10:	8c1b      	ldrh	r3, [r3, #32]
    3c12:	b29a      	uxth	r2, r3
    3c14:	89fb      	ldrh	r3, [r7, #14]
    3c16:	ea6f 0303 	mvn.w	r3, r3
    3c1a:	b29b      	uxth	r3, r3
    3c1c:	ea02 0303 	and.w	r3, r2, r3
    3c20:	b29b      	uxth	r3, r3
    3c22:	687a      	ldr	r2, [r7, #4]
    3c24:	8413      	strh	r3, [r2, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	8c1b      	ldrh	r3, [r3, #32]
    3c2a:	b299      	uxth	r1, r3
    3c2c:	883a      	ldrh	r2, [r7, #0]
    3c2e:	887b      	ldrh	r3, [r7, #2]
    3c30:	fa02 f303 	lsl.w	r3, r2, r3
    3c34:	b29b      	uxth	r3, r3
    3c36:	ea41 0303 	orr.w	r3, r1, r3
    3c3a:	b29b      	uxth	r3, r3
    3c3c:	687a      	ldr	r2, [r7, #4]
    3c3e:	8413      	strh	r3, [r2, #32]
}
    3c40:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3c44:	46bd      	mov	sp, r7
    3c46:	bc80      	pop	{r7}
    3c48:	4770      	bx	lr
    3c4a:	46c0      	nop			(mov r8, r8)

00003c4c <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
    3c4c:	b480      	push	{r7}
    3c4e:	b085      	sub	sp, #20
    3c50:	af00      	add	r7, sp, #0
    3c52:	6078      	str	r0, [r7, #4]
    3c54:	460b      	mov	r3, r1
    3c56:	807b      	strh	r3, [r7, #2]
    3c58:	4613      	mov	r3, r2
    3c5a:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
    3c5c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3c60:	60bb      	str	r3, [r7, #8]
  uint16_t tmp1 = 0;
    3c62:	f04f 0300 	mov.w	r3, #0	; 0x0
    3c66:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
    3c68:	687b      	ldr	r3, [r7, #4]
    3c6a:	60bb      	str	r3, [r7, #8]
  tmp += CCMR_Offset;
    3c6c:	68bb      	ldr	r3, [r7, #8]
    3c6e:	f103 0318 	add.w	r3, r3, #24	; 0x18
    3c72:	60bb      	str	r3, [r7, #8]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
    3c74:	887a      	ldrh	r2, [r7, #2]
    3c76:	f04f 0301 	mov.w	r3, #1	; 0x1
    3c7a:	fa03 f302 	lsl.w	r3, r3, r2
    3c7e:	81fb      	strh	r3, [r7, #14]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
    3c80:	687b      	ldr	r3, [r7, #4]
    3c82:	8c1b      	ldrh	r3, [r3, #32]
    3c84:	b29a      	uxth	r2, r3
    3c86:	89fb      	ldrh	r3, [r7, #14]
    3c88:	ea6f 0303 	mvn.w	r3, r3
    3c8c:	b29b      	uxth	r3, r3
    3c8e:	ea02 0303 	and.w	r3, r2, r3
    3c92:	b29b      	uxth	r3, r3
    3c94:	687a      	ldr	r2, [r7, #4]
    3c96:	8413      	strh	r3, [r2, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
    3c98:	887b      	ldrh	r3, [r7, #2]
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d002      	beq.n	3ca4 <TIM_SelectOCxM+0x58>
    3c9e:	887b      	ldrh	r3, [r7, #2]
    3ca0:	2b08      	cmp	r3, #8
    3ca2:	d117      	bne.n	3cd4 <TIM_SelectOCxM+0x88>
  {
    tmp += (TIM_Channel>>1);
    3ca4:	887b      	ldrh	r3, [r7, #2]
    3ca6:	ea4f 0353 	mov.w	r3, r3, lsr #1
    3caa:	b29b      	uxth	r3, r3
    3cac:	461a      	mov	r2, r3
    3cae:	68bb      	ldr	r3, [r7, #8]
    3cb0:	4413      	add	r3, r2
    3cb2:	60bb      	str	r3, [r7, #8]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_Mask;
    3cb4:	68b9      	ldr	r1, [r7, #8]
    3cb6:	68bb      	ldr	r3, [r7, #8]
    3cb8:	681a      	ldr	r2, [r3, #0]
    3cba:	f64f 738f 	movw	r3, #65423	; 0xff8f
    3cbe:	ea02 0303 	and.w	r3, r2, r3
    3cc2:	600b      	str	r3, [r1, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
    3cc4:	68b9      	ldr	r1, [r7, #8]
    3cc6:	68bb      	ldr	r3, [r7, #8]
    3cc8:	681a      	ldr	r2, [r3, #0]
    3cca:	883b      	ldrh	r3, [r7, #0]
    3ccc:	ea42 0303 	orr.w	r3, r2, r3
    3cd0:	600b      	str	r3, [r1, #0]
    3cd2:	e01c      	b.n	3d0e <TIM_SelectOCxM+0xc2>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
    3cd4:	887b      	ldrh	r3, [r7, #2]
    3cd6:	f1a3 0304 	sub.w	r3, r3, #4	; 0x4
    3cda:	b29b      	uxth	r3, r3
    3cdc:	ea4f 0353 	mov.w	r3, r3, lsr #1
    3ce0:	b29b      	uxth	r3, r3
    3ce2:	461a      	mov	r2, r3
    3ce4:	68bb      	ldr	r3, [r7, #8]
    3ce6:	4413      	add	r3, r2
    3ce8:	60bb      	str	r3, [r7, #8]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_Mask;
    3cea:	68b9      	ldr	r1, [r7, #8]
    3cec:	68bb      	ldr	r3, [r7, #8]
    3cee:	681a      	ldr	r2, [r3, #0]
    3cf0:	f648 73ff 	movw	r3, #36863	; 0x8fff
    3cf4:	ea02 0303 	and.w	r3, r2, r3
    3cf8:	600b      	str	r3, [r1, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
    3cfa:	68b9      	ldr	r1, [r7, #8]
    3cfc:	68bb      	ldr	r3, [r7, #8]
    3cfe:	681a      	ldr	r2, [r3, #0]
    3d00:	883b      	ldrh	r3, [r7, #0]
    3d02:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3d06:	b29b      	uxth	r3, r3
    3d08:	ea42 0303 	orr.w	r3, r2, r3
    3d0c:	600b      	str	r3, [r1, #0]
  }
}
    3d0e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3d12:	46bd      	mov	sp, r7
    3d14:	bc80      	pop	{r7}
    3d16:	4770      	bx	lr

00003d18 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3d18:	b480      	push	{r7}
    3d1a:	b085      	sub	sp, #20
    3d1c:	af00      	add	r7, sp, #0
    3d1e:	60f8      	str	r0, [r7, #12]
    3d20:	460b      	mov	r3, r1
    3d22:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3d24:	7afb      	ldrb	r3, [r7, #11]
    3d26:	2b00      	cmp	r3, #0
    3d28:	d008      	beq.n	3d3c <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
    3d2a:	68fb      	ldr	r3, [r7, #12]
    3d2c:	881b      	ldrh	r3, [r3, #0]
    3d2e:	b29b      	uxth	r3, r3
    3d30:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    3d34:	b29b      	uxth	r3, r3
    3d36:	68fa      	ldr	r2, [r7, #12]
    3d38:	8013      	strh	r3, [r2, #0]
    3d3a:	e00d      	b.n	3d58 <TIM_UpdateDisableConfig+0x40>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= CR1_UDIS_Reset;
    3d3c:	68fb      	ldr	r3, [r7, #12]
    3d3e:	881b      	ldrh	r3, [r3, #0]
    3d40:	b29b      	uxth	r3, r3
    3d42:	607b      	str	r3, [r7, #4]
    3d44:	f240 33fd 	movw	r3, #1021	; 0x3fd
    3d48:	6879      	ldr	r1, [r7, #4]
    3d4a:	ea01 0303 	and.w	r3, r1, r3
    3d4e:	607b      	str	r3, [r7, #4]
    3d50:	68fa      	ldr	r2, [r7, #12]
    3d52:	6879      	ldr	r1, [r7, #4]
    3d54:	460b      	mov	r3, r1
    3d56:	8013      	strh	r3, [r2, #0]
  }
}
    3d58:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3d5c:	46bd      	mov	sp, r7
    3d5e:	bc80      	pop	{r7}
    3d60:	4770      	bx	lr
    3d62:	46c0      	nop			(mov r8, r8)

00003d64 <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
    3d64:	b480      	push	{r7}
    3d66:	b085      	sub	sp, #20
    3d68:	af00      	add	r7, sp, #0
    3d6a:	60f8      	str	r0, [r7, #12]
    3d6c:	460b      	mov	r3, r1
    3d6e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
    3d70:	897b      	ldrh	r3, [r7, #10]
    3d72:	2b00      	cmp	r3, #0
    3d74:	d008      	beq.n	3d88 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
    3d76:	68fb      	ldr	r3, [r7, #12]
    3d78:	881b      	ldrh	r3, [r3, #0]
    3d7a:	b29b      	uxth	r3, r3
    3d7c:	f043 0304 	orr.w	r3, r3, #4	; 0x4
    3d80:	b29b      	uxth	r3, r3
    3d82:	68fa      	ldr	r2, [r7, #12]
    3d84:	8013      	strh	r3, [r2, #0]
    3d86:	e00d      	b.n	3da4 <TIM_UpdateRequestConfig+0x40>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= CR1_URS_Reset;
    3d88:	68fb      	ldr	r3, [r7, #12]
    3d8a:	881b      	ldrh	r3, [r3, #0]
    3d8c:	b29b      	uxth	r3, r3
    3d8e:	607b      	str	r3, [r7, #4]
    3d90:	f240 33fb 	movw	r3, #1019	; 0x3fb
    3d94:	6879      	ldr	r1, [r7, #4]
    3d96:	ea01 0303 	and.w	r3, r1, r3
    3d9a:	607b      	str	r3, [r7, #4]
    3d9c:	68fa      	ldr	r2, [r7, #12]
    3d9e:	6879      	ldr	r1, [r7, #4]
    3da0:	460b      	mov	r3, r1
    3da2:	8013      	strh	r3, [r2, #0]
  }
}
    3da4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3da8:	46bd      	mov	sp, r7
    3daa:	bc80      	pop	{r7}
    3dac:	4770      	bx	lr
    3dae:	46c0      	nop			(mov r8, r8)

00003db0 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3db0:	b480      	push	{r7}
    3db2:	b085      	sub	sp, #20
    3db4:	af00      	add	r7, sp, #0
    3db6:	60f8      	str	r0, [r7, #12]
    3db8:	460b      	mov	r3, r1
    3dba:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3dbc:	7afb      	ldrb	r3, [r7, #11]
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	d008      	beq.n	3dd4 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
    3dc2:	68fb      	ldr	r3, [r7, #12]
    3dc4:	889b      	ldrh	r3, [r3, #4]
    3dc6:	b29b      	uxth	r3, r3
    3dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3dcc:	b29b      	uxth	r3, r3
    3dce:	68fa      	ldr	r2, [r7, #12]
    3dd0:	8093      	strh	r3, [r2, #4]
    3dd2:	e00d      	b.n	3df0 <TIM_SelectHallSensor+0x40>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= CR2_TI1S_Reset;
    3dd4:	68fb      	ldr	r3, [r7, #12]
    3dd6:	889b      	ldrh	r3, [r3, #4]
    3dd8:	b29b      	uxth	r3, r3
    3dda:	607b      	str	r3, [r7, #4]
    3ddc:	f64f 737f 	movw	r3, #65407	; 0xff7f
    3de0:	6879      	ldr	r1, [r7, #4]
    3de2:	ea01 0303 	and.w	r3, r1, r3
    3de6:	607b      	str	r3, [r7, #4]
    3de8:	68fa      	ldr	r2, [r7, #12]
    3dea:	6879      	ldr	r1, [r7, #4]
    3dec:	460b      	mov	r3, r1
    3dee:	8093      	strh	r3, [r2, #4]
  }
}
    3df0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3df4:	46bd      	mov	sp, r7
    3df6:	bc80      	pop	{r7}
    3df8:	4770      	bx	lr
    3dfa:	46c0      	nop			(mov r8, r8)

00003dfc <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
    3dfc:	b480      	push	{r7}
    3dfe:	b085      	sub	sp, #20
    3e00:	af00      	add	r7, sp, #0
    3e02:	60f8      	str	r0, [r7, #12]
    3e04:	460b      	mov	r3, r1
    3e06:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= CR1_OPM_Reset;
    3e08:	68fb      	ldr	r3, [r7, #12]
    3e0a:	881b      	ldrh	r3, [r3, #0]
    3e0c:	b29b      	uxth	r3, r3
    3e0e:	607b      	str	r3, [r7, #4]
    3e10:	f240 33f7 	movw	r3, #1015	; 0x3f7
    3e14:	6879      	ldr	r1, [r7, #4]
    3e16:	ea01 0303 	and.w	r3, r1, r3
    3e1a:	607b      	str	r3, [r7, #4]
    3e1c:	68fa      	ldr	r2, [r7, #12]
    3e1e:	6879      	ldr	r1, [r7, #4]
    3e20:	460b      	mov	r3, r1
    3e22:	8013      	strh	r3, [r2, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
    3e24:	68fb      	ldr	r3, [r7, #12]
    3e26:	881b      	ldrh	r3, [r3, #0]
    3e28:	b29a      	uxth	r2, r3
    3e2a:	897b      	ldrh	r3, [r7, #10]
    3e2c:	ea42 0303 	orr.w	r3, r2, r3
    3e30:	b29b      	uxth	r3, r3
    3e32:	68fa      	ldr	r2, [r7, #12]
    3e34:	8013      	strh	r3, [r2, #0]
}
    3e36:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3e3a:	46bd      	mov	sp, r7
    3e3c:	bc80      	pop	{r7}
    3e3e:	4770      	bx	lr

00003e40 <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
    3e40:	b480      	push	{r7}
    3e42:	b085      	sub	sp, #20
    3e44:	af00      	add	r7, sp, #0
    3e46:	60f8      	str	r0, [r7, #12]
    3e48:	460b      	mov	r3, r1
    3e4a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= CR2_MMS_Mask;
    3e4c:	68fb      	ldr	r3, [r7, #12]
    3e4e:	889b      	ldrh	r3, [r3, #4]
    3e50:	b29b      	uxth	r3, r3
    3e52:	607b      	str	r3, [r7, #4]
    3e54:	f64f 738f 	movw	r3, #65423	; 0xff8f
    3e58:	6879      	ldr	r1, [r7, #4]
    3e5a:	ea01 0303 	and.w	r3, r1, r3
    3e5e:	607b      	str	r3, [r7, #4]
    3e60:	68fa      	ldr	r2, [r7, #12]
    3e62:	6879      	ldr	r1, [r7, #4]
    3e64:	460b      	mov	r3, r1
    3e66:	8093      	strh	r3, [r2, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
    3e68:	68fb      	ldr	r3, [r7, #12]
    3e6a:	889b      	ldrh	r3, [r3, #4]
    3e6c:	b29a      	uxth	r2, r3
    3e6e:	897b      	ldrh	r3, [r7, #10]
    3e70:	ea42 0303 	orr.w	r3, r2, r3
    3e74:	b29b      	uxth	r3, r3
    3e76:	68fa      	ldr	r2, [r7, #12]
    3e78:	8093      	strh	r3, [r2, #4]
}
    3e7a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3e7e:	46bd      	mov	sp, r7
    3e80:	bc80      	pop	{r7}
    3e82:	4770      	bx	lr

00003e84 <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
    3e84:	b480      	push	{r7}
    3e86:	b085      	sub	sp, #20
    3e88:	af00      	add	r7, sp, #0
    3e8a:	60f8      	str	r0, [r7, #12]
    3e8c:	460b      	mov	r3, r1
    3e8e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
  /* Reset the SMS Bits */
  TIMx->SMCR &= SMCR_SMS_Mask;
    3e90:	68fb      	ldr	r3, [r7, #12]
    3e92:	891b      	ldrh	r3, [r3, #8]
    3e94:	b29b      	uxth	r3, r3
    3e96:	607b      	str	r3, [r7, #4]
    3e98:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    3e9c:	6879      	ldr	r1, [r7, #4]
    3e9e:	ea01 0303 	and.w	r3, r1, r3
    3ea2:	607b      	str	r3, [r7, #4]
    3ea4:	68fa      	ldr	r2, [r7, #12]
    3ea6:	6879      	ldr	r1, [r7, #4]
    3ea8:	460b      	mov	r3, r1
    3eaa:	8113      	strh	r3, [r2, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
    3eac:	68fb      	ldr	r3, [r7, #12]
    3eae:	891b      	ldrh	r3, [r3, #8]
    3eb0:	b29a      	uxth	r2, r3
    3eb2:	897b      	ldrh	r3, [r7, #10]
    3eb4:	ea42 0303 	orr.w	r3, r2, r3
    3eb8:	b29b      	uxth	r3, r3
    3eba:	68fa      	ldr	r2, [r7, #12]
    3ebc:	8113      	strh	r3, [r2, #8]
}
    3ebe:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3ec2:	46bd      	mov	sp, r7
    3ec4:	bc80      	pop	{r7}
    3ec6:	4770      	bx	lr

00003ec8 <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
    3ec8:	b480      	push	{r7}
    3eca:	b085      	sub	sp, #20
    3ecc:	af00      	add	r7, sp, #0
    3ece:	60f8      	str	r0, [r7, #12]
    3ed0:	460b      	mov	r3, r1
    3ed2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= SMCR_MSM_Reset;
    3ed4:	68fb      	ldr	r3, [r7, #12]
    3ed6:	891b      	ldrh	r3, [r3, #8]
    3ed8:	b29b      	uxth	r3, r3
    3eda:	607b      	str	r3, [r7, #4]
    3edc:	f64f 737f 	movw	r3, #65407	; 0xff7f
    3ee0:	6879      	ldr	r1, [r7, #4]
    3ee2:	ea01 0303 	and.w	r3, r1, r3
    3ee6:	607b      	str	r3, [r7, #4]
    3ee8:	68fa      	ldr	r2, [r7, #12]
    3eea:	6879      	ldr	r1, [r7, #4]
    3eec:	460b      	mov	r3, r1
    3eee:	8113      	strh	r3, [r2, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
    3ef0:	68fb      	ldr	r3, [r7, #12]
    3ef2:	891b      	ldrh	r3, [r3, #8]
    3ef4:	b29a      	uxth	r2, r3
    3ef6:	897b      	ldrh	r3, [r7, #10]
    3ef8:	ea42 0303 	orr.w	r3, r2, r3
    3efc:	b29b      	uxth	r3, r3
    3efe:	68fa      	ldr	r2, [r7, #12]
    3f00:	8113      	strh	r3, [r2, #8]
}
    3f02:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3f06:	46bd      	mov	sp, r7
    3f08:	bc80      	pop	{r7}
    3f0a:	4770      	bx	lr

00003f0c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
    3f0c:	b480      	push	{r7}
    3f0e:	b083      	sub	sp, #12
    3f10:	af00      	add	r7, sp, #0
    3f12:	6078      	str	r0, [r7, #4]
    3f14:	460b      	mov	r3, r1
    3f16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
    3f18:	687a      	ldr	r2, [r7, #4]
    3f1a:	887b      	ldrh	r3, [r7, #2]
    3f1c:	8493      	strh	r3, [r2, #36]
}
    3f1e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f22:	46bd      	mov	sp, r7
    3f24:	bc80      	pop	{r7}
    3f26:	4770      	bx	lr

00003f28 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
    3f28:	b480      	push	{r7}
    3f2a:	b083      	sub	sp, #12
    3f2c:	af00      	add	r7, sp, #0
    3f2e:	6078      	str	r0, [r7, #4]
    3f30:	460b      	mov	r3, r1
    3f32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
    3f34:	687a      	ldr	r2, [r7, #4]
    3f36:	887b      	ldrh	r3, [r7, #2]
    3f38:	8593      	strh	r3, [r2, #44]
}
    3f3a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f3e:	46bd      	mov	sp, r7
    3f40:	bc80      	pop	{r7}
    3f42:	4770      	bx	lr

00003f44 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
    3f44:	b480      	push	{r7}
    3f46:	b083      	sub	sp, #12
    3f48:	af00      	add	r7, sp, #0
    3f4a:	6078      	str	r0, [r7, #4]
    3f4c:	460b      	mov	r3, r1
    3f4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
    3f50:	687a      	ldr	r2, [r7, #4]
    3f52:	887b      	ldrh	r3, [r7, #2]
    3f54:	8693      	strh	r3, [r2, #52]
}
    3f56:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f5a:	46bd      	mov	sp, r7
    3f5c:	bc80      	pop	{r7}
    3f5e:	4770      	bx	lr

00003f60 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
    3f60:	b480      	push	{r7}
    3f62:	b083      	sub	sp, #12
    3f64:	af00      	add	r7, sp, #0
    3f66:	6078      	str	r0, [r7, #4]
    3f68:	460b      	mov	r3, r1
    3f6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
    3f6c:	687a      	ldr	r2, [r7, #4]
    3f6e:	887b      	ldrh	r3, [r7, #2]
    3f70:	8713      	strh	r3, [r2, #56]
}
    3f72:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f76:	46bd      	mov	sp, r7
    3f78:	bc80      	pop	{r7}
    3f7a:	4770      	bx	lr

00003f7c <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
    3f7c:	b480      	push	{r7}
    3f7e:	b083      	sub	sp, #12
    3f80:	af00      	add	r7, sp, #0
    3f82:	6078      	str	r0, [r7, #4]
    3f84:	460b      	mov	r3, r1
    3f86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
    3f88:	687a      	ldr	r2, [r7, #4]
    3f8a:	887b      	ldrh	r3, [r7, #2]
    3f8c:	8793      	strh	r3, [r2, #60]
}
    3f8e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f92:	46bd      	mov	sp, r7
    3f94:	bc80      	pop	{r7}
    3f96:	4770      	bx	lr

00003f98 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
    3f98:	b480      	push	{r7}
    3f9a:	b083      	sub	sp, #12
    3f9c:	af00      	add	r7, sp, #0
    3f9e:	6078      	str	r0, [r7, #4]
    3fa0:	460b      	mov	r3, r1
    3fa2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
    3fa4:	687a      	ldr	r2, [r7, #4]
    3fa6:	887b      	ldrh	r3, [r7, #2]
    3fa8:	f8a2 3040 	strh.w	r3, [r2, #64]
}
    3fac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3fb0:	46bd      	mov	sp, r7
    3fb2:	bc80      	pop	{r7}
    3fb4:	4770      	bx	lr
    3fb6:	46c0      	nop			(mov r8, r8)

00003fb8 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    3fb8:	b480      	push	{r7}
    3fba:	b085      	sub	sp, #20
    3fbc:	af00      	add	r7, sp, #0
    3fbe:	60f8      	str	r0, [r7, #12]
    3fc0:	460b      	mov	r3, r1
    3fc2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
    3fc4:	68fb      	ldr	r3, [r7, #12]
    3fc6:	8b1b      	ldrh	r3, [r3, #24]
    3fc8:	b29b      	uxth	r3, r3
    3fca:	607b      	str	r3, [r7, #4]
    3fcc:	f64f 73f3 	movw	r3, #65523	; 0xfff3
    3fd0:	6879      	ldr	r1, [r7, #4]
    3fd2:	ea01 0303 	and.w	r3, r1, r3
    3fd6:	607b      	str	r3, [r7, #4]
    3fd8:	68fa      	ldr	r2, [r7, #12]
    3fda:	6879      	ldr	r1, [r7, #4]
    3fdc:	460b      	mov	r3, r1
    3fde:	8313      	strh	r3, [r2, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
    3fe0:	68fb      	ldr	r3, [r7, #12]
    3fe2:	8b1b      	ldrh	r3, [r3, #24]
    3fe4:	b29a      	uxth	r2, r3
    3fe6:	897b      	ldrh	r3, [r7, #10]
    3fe8:	ea42 0303 	orr.w	r3, r2, r3
    3fec:	b29b      	uxth	r3, r3
    3fee:	68fa      	ldr	r2, [r7, #12]
    3ff0:	8313      	strh	r3, [r2, #24]
}
    3ff2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3ff6:	46bd      	mov	sp, r7
    3ff8:	bc80      	pop	{r7}
    3ffa:	4770      	bx	lr

00003ffc <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    3ffc:	b480      	push	{r7}
    3ffe:	b085      	sub	sp, #20
    4000:	af00      	add	r7, sp, #0
    4002:	60f8      	str	r0, [r7, #12]
    4004:	460b      	mov	r3, r1
    4006:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
    4008:	68fb      	ldr	r3, [r7, #12]
    400a:	8b1b      	ldrh	r3, [r3, #24]
    400c:	b29b      	uxth	r3, r3
    400e:	607b      	str	r3, [r7, #4]
    4010:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
    4014:	6879      	ldr	r1, [r7, #4]
    4016:	ea01 0303 	and.w	r3, r1, r3
    401a:	607b      	str	r3, [r7, #4]
    401c:	68fa      	ldr	r2, [r7, #12]
    401e:	6879      	ldr	r1, [r7, #4]
    4020:	460b      	mov	r3, r1
    4022:	8313      	strh	r3, [r2, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
    4024:	68fb      	ldr	r3, [r7, #12]
    4026:	8b1b      	ldrh	r3, [r3, #24]
    4028:	b29a      	uxth	r2, r3
    402a:	897b      	ldrh	r3, [r7, #10]
    402c:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4030:	b29b      	uxth	r3, r3
    4032:	ea42 0303 	orr.w	r3, r2, r3
    4036:	b29b      	uxth	r3, r3
    4038:	68fa      	ldr	r2, [r7, #12]
    403a:	8313      	strh	r3, [r2, #24]
}
    403c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4040:	46bd      	mov	sp, r7
    4042:	bc80      	pop	{r7}
    4044:	4770      	bx	lr
    4046:	46c0      	nop			(mov r8, r8)

00004048 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4048:	b480      	push	{r7}
    404a:	b085      	sub	sp, #20
    404c:	af00      	add	r7, sp, #0
    404e:	60f8      	str	r0, [r7, #12]
    4050:	460b      	mov	r3, r1
    4052:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
    4054:	68fb      	ldr	r3, [r7, #12]
    4056:	8b9b      	ldrh	r3, [r3, #28]
    4058:	b29b      	uxth	r3, r3
    405a:	607b      	str	r3, [r7, #4]
    405c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
    4060:	6879      	ldr	r1, [r7, #4]
    4062:	ea01 0303 	and.w	r3, r1, r3
    4066:	607b      	str	r3, [r7, #4]
    4068:	68fa      	ldr	r2, [r7, #12]
    406a:	6879      	ldr	r1, [r7, #4]
    406c:	460b      	mov	r3, r1
    406e:	8393      	strh	r3, [r2, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
    4070:	68fb      	ldr	r3, [r7, #12]
    4072:	8b9b      	ldrh	r3, [r3, #28]
    4074:	b29a      	uxth	r2, r3
    4076:	897b      	ldrh	r3, [r7, #10]
    4078:	ea42 0303 	orr.w	r3, r2, r3
    407c:	b29b      	uxth	r3, r3
    407e:	68fa      	ldr	r2, [r7, #12]
    4080:	8393      	strh	r3, [r2, #28]
}
    4082:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4086:	46bd      	mov	sp, r7
    4088:	bc80      	pop	{r7}
    408a:	4770      	bx	lr

0000408c <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
    408c:	b480      	push	{r7}
    408e:	b085      	sub	sp, #20
    4090:	af00      	add	r7, sp, #0
    4092:	60f8      	str	r0, [r7, #12]
    4094:	460b      	mov	r3, r1
    4096:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
    4098:	68fb      	ldr	r3, [r7, #12]
    409a:	8b9b      	ldrh	r3, [r3, #28]
    409c:	b29b      	uxth	r3, r3
    409e:	607b      	str	r3, [r7, #4]
    40a0:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
    40a4:	6879      	ldr	r1, [r7, #4]
    40a6:	ea01 0303 	and.w	r3, r1, r3
    40aa:	607b      	str	r3, [r7, #4]
    40ac:	68fa      	ldr	r2, [r7, #12]
    40ae:	6879      	ldr	r1, [r7, #4]
    40b0:	460b      	mov	r3, r1
    40b2:	8393      	strh	r3, [r2, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
    40b4:	68fb      	ldr	r3, [r7, #12]
    40b6:	8b9b      	ldrh	r3, [r3, #28]
    40b8:	b29a      	uxth	r2, r3
    40ba:	897b      	ldrh	r3, [r7, #10]
    40bc:	ea4f 2303 	mov.w	r3, r3, lsl #8
    40c0:	b29b      	uxth	r3, r3
    40c2:	ea42 0303 	orr.w	r3, r2, r3
    40c6:	b29b      	uxth	r3, r3
    40c8:	68fa      	ldr	r2, [r7, #12]
    40ca:	8393      	strh	r3, [r2, #28]
}
    40cc:	f107 0714 	add.w	r7, r7, #20	; 0x14
    40d0:	46bd      	mov	sp, r7
    40d2:	bc80      	pop	{r7}
    40d4:	4770      	bx	lr
    40d6:	46c0      	nop			(mov r8, r8)

000040d8 <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
    40d8:	b480      	push	{r7}
    40da:	b083      	sub	sp, #12
    40dc:	af00      	add	r7, sp, #0
    40de:	6078      	str	r0, [r7, #4]
    40e0:	460b      	mov	r3, r1
    40e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= CR1_CKD_Mask;
    40e4:	687b      	ldr	r3, [r7, #4]
    40e6:	881b      	ldrh	r3, [r3, #0]
    40e8:	b29b      	uxth	r3, r3
    40ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    40ee:	687a      	ldr	r2, [r7, #4]
    40f0:	8013      	strh	r3, [r2, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
    40f2:	687b      	ldr	r3, [r7, #4]
    40f4:	881b      	ldrh	r3, [r3, #0]
    40f6:	b29a      	uxth	r2, r3
    40f8:	887b      	ldrh	r3, [r7, #2]
    40fa:	ea42 0303 	orr.w	r3, r2, r3
    40fe:	b29b      	uxth	r3, r3
    4100:	687a      	ldr	r2, [r7, #4]
    4102:	8013      	strh	r3, [r2, #0]
}
    4104:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4108:	46bd      	mov	sp, r7
    410a:	bc80      	pop	{r7}
    410c:	4770      	bx	lr
    410e:	46c0      	nop			(mov r8, r8)

00004110 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
    4110:	b480      	push	{r7}
    4112:	b083      	sub	sp, #12
    4114:	af00      	add	r7, sp, #0
    4116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
    4118:	687b      	ldr	r3, [r7, #4]
    411a:	8e9b      	ldrh	r3, [r3, #52]
    411c:	b29b      	uxth	r3, r3
}
    411e:	4618      	mov	r0, r3
    4120:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4124:	46bd      	mov	sp, r7
    4126:	bc80      	pop	{r7}
    4128:	4770      	bx	lr
    412a:	46c0      	nop			(mov r8, r8)

0000412c <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
    412c:	b480      	push	{r7}
    412e:	b083      	sub	sp, #12
    4130:	af00      	add	r7, sp, #0
    4132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
    4134:	687b      	ldr	r3, [r7, #4]
    4136:	8f1b      	ldrh	r3, [r3, #56]
    4138:	b29b      	uxth	r3, r3
}
    413a:	4618      	mov	r0, r3
    413c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4140:	46bd      	mov	sp, r7
    4142:	bc80      	pop	{r7}
    4144:	4770      	bx	lr
    4146:	46c0      	nop			(mov r8, r8)

00004148 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
    4148:	b480      	push	{r7}
    414a:	b083      	sub	sp, #12
    414c:	af00      	add	r7, sp, #0
    414e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
    4150:	687b      	ldr	r3, [r7, #4]
    4152:	8f9b      	ldrh	r3, [r3, #60]
    4154:	b29b      	uxth	r3, r3
}
    4156:	4618      	mov	r0, r3
    4158:	f107 070c 	add.w	r7, r7, #12	; 0xc
    415c:	46bd      	mov	sp, r7
    415e:	bc80      	pop	{r7}
    4160:	4770      	bx	lr
    4162:	46c0      	nop			(mov r8, r8)

00004164 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
    4164:	b480      	push	{r7}
    4166:	b083      	sub	sp, #12
    4168:	af00      	add	r7, sp, #0
    416a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
    416c:	687b      	ldr	r3, [r7, #4]
    416e:	f8b3 3040 	ldrh.w	r3, [r3, #64]
    4172:	b29b      	uxth	r3, r3
}
    4174:	4618      	mov	r0, r3
    4176:	f107 070c 	add.w	r7, r7, #12	; 0xc
    417a:	46bd      	mov	sp, r7
    417c:	bc80      	pop	{r7}
    417e:	4770      	bx	lr

00004180 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
    4180:	b480      	push	{r7}
    4182:	b083      	sub	sp, #12
    4184:	af00      	add	r7, sp, #0
    4186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	8c9b      	ldrh	r3, [r3, #36]
    418c:	b29b      	uxth	r3, r3
}
    418e:	4618      	mov	r0, r3
    4190:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4194:	46bd      	mov	sp, r7
    4196:	bc80      	pop	{r7}
    4198:	4770      	bx	lr
    419a:	46c0      	nop			(mov r8, r8)

0000419c <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
    419c:	b480      	push	{r7}
    419e:	b083      	sub	sp, #12
    41a0:	af00      	add	r7, sp, #0
    41a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	8d1b      	ldrh	r3, [r3, #40]
    41a8:	b29b      	uxth	r3, r3
}
    41aa:	4618      	mov	r0, r3
    41ac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    41b0:	46bd      	mov	sp, r7
    41b2:	bc80      	pop	{r7}
    41b4:	4770      	bx	lr
    41b6:	46c0      	nop			(mov r8, r8)

000041b8 <TIM_GetFlagStatus>:
  *   - TIM6 and TIM7 can have only one update flag. 
  *   - TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
    41b8:	b480      	push	{r7}
    41ba:	b085      	sub	sp, #20
    41bc:	af00      	add	r7, sp, #0
    41be:	6078      	str	r0, [r7, #4]
    41c0:	460b      	mov	r3, r1
    41c2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    41c4:	f04f 0300 	mov.w	r3, #0	; 0x0
    41c8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
    41ca:	687b      	ldr	r3, [r7, #4]
    41cc:	8a1b      	ldrh	r3, [r3, #16]
    41ce:	b29a      	uxth	r2, r3
    41d0:	887b      	ldrh	r3, [r7, #2]
    41d2:	ea02 0303 	and.w	r3, r2, r3
    41d6:	b29b      	uxth	r3, r3
    41d8:	2b00      	cmp	r3, #0
    41da:	d003      	beq.n	41e4 <TIM_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
    41dc:	f04f 0301 	mov.w	r3, #1	; 0x1
    41e0:	73fb      	strb	r3, [r7, #15]
    41e2:	e002      	b.n	41ea <TIM_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
    41e4:	f04f 0300 	mov.w	r3, #0	; 0x0
    41e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    41ea:	7bfb      	ldrb	r3, [r7, #15]
}
    41ec:	4618      	mov	r0, r3
    41ee:	f107 0714 	add.w	r7, r7, #20	; 0x14
    41f2:	46bd      	mov	sp, r7
    41f4:	bc80      	pop	{r7}
    41f6:	4770      	bx	lr

000041f8 <TIM_ClearFlag>:
  *   - TIM6 and TIM7 can have only one update flag. 
  *   - TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.  
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
    41f8:	b480      	push	{r7}
    41fa:	b083      	sub	sp, #12
    41fc:	af00      	add	r7, sp, #0
    41fe:	6078      	str	r0, [r7, #4]
    4200:	460b      	mov	r3, r1
    4202:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
    4204:	887b      	ldrh	r3, [r7, #2]
    4206:	ea6f 0303 	mvn.w	r3, r3
    420a:	b29b      	uxth	r3, r3
    420c:	687a      	ldr	r2, [r7, #4]
    420e:	8213      	strh	r3, [r2, #16]
}
    4210:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4214:	46bd      	mov	sp, r7
    4216:	bc80      	pop	{r7}
    4218:	4770      	bx	lr
    421a:	46c0      	nop			(mov r8, r8)

0000421c <TIM_GetITStatus>:
  *   - TIM6 and TIM7 can generate only an update interrupt.
  *   - TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    421c:	b480      	push	{r7}
    421e:	b085      	sub	sp, #20
    4220:	af00      	add	r7, sp, #0
    4222:	6078      	str	r0, [r7, #4]
    4224:	460b      	mov	r3, r1
    4226:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    4228:	f04f 0300 	mov.w	r3, #0	; 0x0
    422c:	72fb      	strb	r3, [r7, #11]
  uint16_t itstatus = 0x0, itenable = 0x0;
    422e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4232:	81bb      	strh	r3, [r7, #12]
    4234:	f04f 0300 	mov.w	r3, #0	; 0x0
    4238:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
    423a:	687b      	ldr	r3, [r7, #4]
    423c:	8a1b      	ldrh	r3, [r3, #16]
    423e:	b29a      	uxth	r2, r3
    4240:	887b      	ldrh	r3, [r7, #2]
    4242:	ea02 0303 	and.w	r3, r2, r3
    4246:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
    4248:	687b      	ldr	r3, [r7, #4]
    424a:	899b      	ldrh	r3, [r3, #12]
    424c:	b29a      	uxth	r2, r3
    424e:	887b      	ldrh	r3, [r7, #2]
    4250:	ea02 0303 	and.w	r3, r2, r3
    4254:	81fb      	strh	r3, [r7, #14]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
    4256:	89bb      	ldrh	r3, [r7, #12]
    4258:	2b00      	cmp	r3, #0
    425a:	d006      	beq.n	426a <TIM_GetITStatus+0x4e>
    425c:	89fb      	ldrh	r3, [r7, #14]
    425e:	2b00      	cmp	r3, #0
    4260:	d003      	beq.n	426a <TIM_GetITStatus+0x4e>
  {
    bitstatus = SET;
    4262:	f04f 0301 	mov.w	r3, #1	; 0x1
    4266:	72fb      	strb	r3, [r7, #11]
    4268:	e002      	b.n	4270 <TIM_GetITStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
    426a:	f04f 0300 	mov.w	r3, #0	; 0x0
    426e:	72fb      	strb	r3, [r7, #11]
  }
  return bitstatus;
    4270:	7afb      	ldrb	r3, [r7, #11]
}
    4272:	4618      	mov	r0, r3
    4274:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4278:	46bd      	mov	sp, r7
    427a:	bc80      	pop	{r7}
    427c:	4770      	bx	lr
    427e:	46c0      	nop			(mov r8, r8)

00004280 <TIM_ClearITPendingBit>:
  *   - TIM6 and TIM7 can generate only an update interrupt.
  *   - TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    4280:	b480      	push	{r7}
    4282:	b083      	sub	sp, #12
    4284:	af00      	add	r7, sp, #0
    4286:	6078      	str	r0, [r7, #4]
    4288:	460b      	mov	r3, r1
    428a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
    428c:	887b      	ldrh	r3, [r7, #2]
    428e:	ea6f 0303 	mvn.w	r3, r3
    4292:	b29b      	uxth	r3, r3
    4294:	687a      	ldr	r2, [r7, #4]
    4296:	8213      	strh	r3, [r2, #16]
}
    4298:	f107 070c 	add.w	r7, r7, #12	; 0xc
    429c:	46bd      	mov	sp, r7
    429e:	bc80      	pop	{r7}
    42a0:	4770      	bx	lr
    42a2:	46c0      	nop			(mov r8, r8)

000042a4 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    42a4:	b480      	push	{r7}
    42a6:	b087      	sub	sp, #28
    42a8:	af00      	add	r7, sp, #0
    42aa:	60f8      	str	r0, [r7, #12]
    42ac:	4618      	mov	r0, r3
    42ae:	460b      	mov	r3, r1
    42b0:	817b      	strh	r3, [r7, #10]
    42b2:	4613      	mov	r3, r2
    42b4:	813b      	strh	r3, [r7, #8]
    42b6:	4603      	mov	r3, r0
    42b8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
    42ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    42be:	82bb      	strh	r3, [r7, #20]
    42c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    42c4:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
    42c6:	68fb      	ldr	r3, [r7, #12]
    42c8:	8c1b      	ldrh	r3, [r3, #32]
    42ca:	b29b      	uxth	r3, r3
    42cc:	603b      	str	r3, [r7, #0]
    42ce:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    42d2:	6839      	ldr	r1, [r7, #0]
    42d4:	ea01 0303 	and.w	r3, r1, r3
    42d8:	603b      	str	r3, [r7, #0]
    42da:	68fa      	ldr	r2, [r7, #12]
    42dc:	6839      	ldr	r1, [r7, #0]
    42de:	460b      	mov	r3, r1
    42e0:	8413      	strh	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
    42e2:	68fb      	ldr	r3, [r7, #12]
    42e4:	8b1b      	ldrh	r3, [r3, #24]
    42e6:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    42e8:	68fb      	ldr	r3, [r7, #12]
    42ea:	8c1b      	ldrh	r3, [r3, #32]
    42ec:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
    42ee:	8abb      	ldrh	r3, [r7, #20]
    42f0:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    42f4:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    42f6:	88fb      	ldrh	r3, [r7, #6]
    42f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    42fc:	b29a      	uxth	r2, r3
    42fe:	893b      	ldrh	r3, [r7, #8]
    4300:	ea42 0303 	orr.w	r3, r2, r3
    4304:	b29a      	uxth	r2, r3
    4306:	8abb      	ldrh	r3, [r7, #20]
    4308:	ea42 0303 	orr.w	r3, r2, r3
    430c:	82bb      	strh	r3, [r7, #20]
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
    430e:	8afb      	ldrh	r3, [r7, #22]
    4310:	f023 0302 	bic.w	r3, r3, #2	; 0x2
    4314:	82fb      	strh	r3, [r7, #22]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
    4316:	897a      	ldrh	r2, [r7, #10]
    4318:	8afb      	ldrh	r3, [r7, #22]
    431a:	ea42 0303 	orr.w	r3, r2, r3
    431e:	b29b      	uxth	r3, r3
    4320:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    4324:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
    4326:	68fa      	ldr	r2, [r7, #12]
    4328:	8abb      	ldrh	r3, [r7, #20]
    432a:	8313      	strh	r3, [r2, #24]
  TIMx->CCER = tmpccer;
    432c:	68fa      	ldr	r2, [r7, #12]
    432e:	8afb      	ldrh	r3, [r7, #22]
    4330:	8413      	strh	r3, [r2, #32]
}
    4332:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    4336:	46bd      	mov	sp, r7
    4338:	bc80      	pop	{r7}
    433a:	4770      	bx	lr

0000433c <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    433c:	b480      	push	{r7}
    433e:	b087      	sub	sp, #28
    4340:	af00      	add	r7, sp, #0
    4342:	60f8      	str	r0, [r7, #12]
    4344:	4618      	mov	r0, r3
    4346:	460b      	mov	r3, r1
    4348:	817b      	strh	r3, [r7, #10]
    434a:	4613      	mov	r3, r2
    434c:	813b      	strh	r3, [r7, #8]
    434e:	4603      	mov	r3, r0
    4350:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
    4352:	f04f 0300 	mov.w	r3, #0	; 0x0
    4356:	827b      	strh	r3, [r7, #18]
    4358:	f04f 0300 	mov.w	r3, #0	; 0x0
    435c:	82bb      	strh	r3, [r7, #20]
    435e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4362:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
    4364:	68fb      	ldr	r3, [r7, #12]
    4366:	8c1b      	ldrh	r3, [r3, #32]
    4368:	b29b      	uxth	r3, r3
    436a:	603b      	str	r3, [r7, #0]
    436c:	f64f 73ef 	movw	r3, #65519	; 0xffef
    4370:	6839      	ldr	r1, [r7, #0]
    4372:	ea01 0303 	and.w	r3, r1, r3
    4376:	603b      	str	r3, [r7, #0]
    4378:	68fa      	ldr	r2, [r7, #12]
    437a:	6839      	ldr	r1, [r7, #0]
    437c:	460b      	mov	r3, r1
    437e:	8413      	strh	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
    4380:	68fb      	ldr	r3, [r7, #12]
    4382:	8b1b      	ldrh	r3, [r3, #24]
    4384:	827b      	strh	r3, [r7, #18]
  tmpccer = TIMx->CCER;
    4386:	68fb      	ldr	r3, [r7, #12]
    4388:	8c1b      	ldrh	r3, [r3, #32]
    438a:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
    438c:	897b      	ldrh	r3, [r7, #10]
    438e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4392:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
    4394:	8a7b      	ldrh	r3, [r7, #18]
    4396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    439a:	ea4f 5303 	mov.w	r3, r3, lsl #20
    439e:	ea4f 5313 	mov.w	r3, r3, lsr #20
    43a2:	827b      	strh	r3, [r7, #18]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
    43a4:	88fb      	ldrh	r3, [r7, #6]
    43a6:	ea4f 3303 	mov.w	r3, r3, lsl #12
    43aa:	b29a      	uxth	r2, r3
    43ac:	8a7b      	ldrh	r3, [r7, #18]
    43ae:	ea42 0303 	orr.w	r3, r2, r3
    43b2:	827b      	strh	r3, [r7, #18]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
    43b4:	893b      	ldrh	r3, [r7, #8]
    43b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    43ba:	b29a      	uxth	r2, r3
    43bc:	8a7b      	ldrh	r3, [r7, #18]
    43be:	ea42 0303 	orr.w	r3, r2, r3
    43c2:	827b      	strh	r3, [r7, #18]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
    43c4:	8abb      	ldrh	r3, [r7, #20]
    43c6:	f023 0320 	bic.w	r3, r3, #32	; 0x20
    43ca:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
    43cc:	8afa      	ldrh	r2, [r7, #22]
    43ce:	8abb      	ldrh	r3, [r7, #20]
    43d0:	ea42 0303 	orr.w	r3, r2, r3
    43d4:	b29b      	uxth	r3, r3
    43d6:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    43da:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
    43dc:	68fa      	ldr	r2, [r7, #12]
    43de:	8a7b      	ldrh	r3, [r7, #18]
    43e0:	8313      	strh	r3, [r2, #24]
  TIMx->CCER = tmpccer;
    43e2:	68fa      	ldr	r2, [r7, #12]
    43e4:	8abb      	ldrh	r3, [r7, #20]
    43e6:	8413      	strh	r3, [r2, #32]
}
    43e8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    43ec:	46bd      	mov	sp, r7
    43ee:	bc80      	pop	{r7}
    43f0:	4770      	bx	lr
    43f2:	46c0      	nop			(mov r8, r8)

000043f4 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    43f4:	b480      	push	{r7}
    43f6:	b087      	sub	sp, #28
    43f8:	af00      	add	r7, sp, #0
    43fa:	60f8      	str	r0, [r7, #12]
    43fc:	4618      	mov	r0, r3
    43fe:	460b      	mov	r3, r1
    4400:	817b      	strh	r3, [r7, #10]
    4402:	4613      	mov	r3, r2
    4404:	813b      	strh	r3, [r7, #8]
    4406:	4603      	mov	r3, r0
    4408:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    440a:	f04f 0300 	mov.w	r3, #0	; 0x0
    440e:	827b      	strh	r3, [r7, #18]
    4410:	f04f 0300 	mov.w	r3, #0	; 0x0
    4414:	82bb      	strh	r3, [r7, #20]
    4416:	f04f 0300 	mov.w	r3, #0	; 0x0
    441a:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
    441c:	68fb      	ldr	r3, [r7, #12]
    441e:	8c1b      	ldrh	r3, [r3, #32]
    4420:	b29b      	uxth	r3, r3
    4422:	603b      	str	r3, [r7, #0]
    4424:	f64f 63ff 	movw	r3, #65279	; 0xfeff
    4428:	6839      	ldr	r1, [r7, #0]
    442a:	ea01 0303 	and.w	r3, r1, r3
    442e:	603b      	str	r3, [r7, #0]
    4430:	68fa      	ldr	r2, [r7, #12]
    4432:	6839      	ldr	r1, [r7, #0]
    4434:	460b      	mov	r3, r1
    4436:	8413      	strh	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
    4438:	68fb      	ldr	r3, [r7, #12]
    443a:	8b9b      	ldrh	r3, [r3, #28]
    443c:	827b      	strh	r3, [r7, #18]
  tmpccer = TIMx->CCER;
    443e:	68fb      	ldr	r3, [r7, #12]
    4440:	8c1b      	ldrh	r3, [r3, #32]
    4442:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
    4444:	897b      	ldrh	r3, [r7, #10]
    4446:	ea4f 2303 	mov.w	r3, r3, lsl #8
    444a:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
    444c:	8a7b      	ldrh	r3, [r7, #18]
    444e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    4452:	827b      	strh	r3, [r7, #18]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    4454:	88fb      	ldrh	r3, [r7, #6]
    4456:	ea4f 1303 	mov.w	r3, r3, lsl #4
    445a:	b29a      	uxth	r2, r3
    445c:	893b      	ldrh	r3, [r7, #8]
    445e:	ea42 0303 	orr.w	r3, r2, r3
    4462:	b29a      	uxth	r2, r3
    4464:	8a7b      	ldrh	r3, [r7, #18]
    4466:	ea42 0303 	orr.w	r3, r2, r3
    446a:	827b      	strh	r3, [r7, #18]
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
    446c:	8abb      	ldrh	r3, [r7, #20]
    446e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    4472:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC3E_Set);
    4474:	8afa      	ldrh	r2, [r7, #22]
    4476:	8abb      	ldrh	r3, [r7, #20]
    4478:	ea42 0303 	orr.w	r3, r2, r3
    447c:	b29b      	uxth	r3, r3
    447e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4482:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    4484:	68fa      	ldr	r2, [r7, #12]
    4486:	8a7b      	ldrh	r3, [r7, #18]
    4488:	8393      	strh	r3, [r2, #28]
  TIMx->CCER = tmpccer;
    448a:	68fa      	ldr	r2, [r7, #12]
    448c:	8abb      	ldrh	r3, [r7, #20]
    448e:	8413      	strh	r3, [r2, #32]
}
    4490:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    4494:	46bd      	mov	sp, r7
    4496:	bc80      	pop	{r7}
    4498:	4770      	bx	lr
    449a:	46c0      	nop			(mov r8, r8)

0000449c <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    449c:	b480      	push	{r7}
    449e:	b087      	sub	sp, #28
    44a0:	af00      	add	r7, sp, #0
    44a2:	60f8      	str	r0, [r7, #12]
    44a4:	4618      	mov	r0, r3
    44a6:	460b      	mov	r3, r1
    44a8:	817b      	strh	r3, [r7, #10]
    44aa:	4613      	mov	r3, r2
    44ac:	813b      	strh	r3, [r7, #8]
    44ae:	4603      	mov	r3, r0
    44b0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    44b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    44b6:	827b      	strh	r3, [r7, #18]
    44b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    44bc:	82bb      	strh	r3, [r7, #20]
    44be:	f04f 0300 	mov.w	r3, #0	; 0x0
    44c2:	82fb      	strh	r3, [r7, #22]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
    44c4:	68fb      	ldr	r3, [r7, #12]
    44c6:	8c1b      	ldrh	r3, [r3, #32]
    44c8:	b29b      	uxth	r3, r3
    44ca:	603b      	str	r3, [r7, #0]
    44cc:	f64e 73ff 	movw	r3, #61439	; 0xefff
    44d0:	6839      	ldr	r1, [r7, #0]
    44d2:	ea01 0303 	and.w	r3, r1, r3
    44d6:	603b      	str	r3, [r7, #0]
    44d8:	68fa      	ldr	r2, [r7, #12]
    44da:	6839      	ldr	r1, [r7, #0]
    44dc:	460b      	mov	r3, r1
    44de:	8413      	strh	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
    44e0:	68fb      	ldr	r3, [r7, #12]
    44e2:	8b9b      	ldrh	r3, [r3, #28]
    44e4:	827b      	strh	r3, [r7, #18]
  tmpccer = TIMx->CCER;
    44e6:	68fb      	ldr	r3, [r7, #12]
    44e8:	8c1b      	ldrh	r3, [r3, #32]
    44ea:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
    44ec:	897b      	ldrh	r3, [r7, #10]
    44ee:	ea4f 3303 	mov.w	r3, r3, lsl #12
    44f2:	82fb      	strh	r3, [r7, #22]

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
    44f4:	8a7b      	ldrh	r3, [r7, #18]
    44f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    44fa:	ea4f 5303 	mov.w	r3, r3, lsl #20
    44fe:	ea4f 5313 	mov.w	r3, r3, lsr #20
    4502:	827b      	strh	r3, [r7, #18]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
    4504:	893b      	ldrh	r3, [r7, #8]
    4506:	ea4f 2303 	mov.w	r3, r3, lsl #8
    450a:	b29a      	uxth	r2, r3
    450c:	8a7b      	ldrh	r3, [r7, #18]
    450e:	ea42 0303 	orr.w	r3, r2, r3
    4512:	827b      	strh	r3, [r7, #18]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
    4514:	88fb      	ldrh	r3, [r7, #6]
    4516:	ea4f 3303 	mov.w	r3, r3, lsl #12
    451a:	b29a      	uxth	r2, r3
    451c:	8a7b      	ldrh	r3, [r7, #18]
    451e:	ea42 0303 	orr.w	r3, r2, r3
    4522:	827b      	strh	r3, [r7, #18]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
    4524:	8abb      	ldrh	r3, [r7, #20]
    4526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    452a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC4E_Set);
    452c:	8afa      	ldrh	r2, [r7, #22]
    452e:	8abb      	ldrh	r3, [r7, #20]
    4530:	ea42 0303 	orr.w	r3, r2, r3
    4534:	b29b      	uxth	r3, r3
    4536:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    453a:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    453c:	68fa      	ldr	r2, [r7, #12]
    453e:	8a7b      	ldrh	r3, [r7, #18]
    4540:	8393      	strh	r3, [r2, #28]
  TIMx->CCER = tmpccer ;
    4542:	68fa      	ldr	r2, [r7, #12]
    4544:	8abb      	ldrh	r3, [r7, #20]
    4546:	8413      	strh	r3, [r2, #32]
}
    4548:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    454c:	46bd      	mov	sp, r7
    454e:	bc80      	pop	{r7}
    4550:	4770      	bx	lr
    4552:	46c0      	nop			(mov r8, r8)

00004554 <USART_DeInit>:
  * @param  USARTx: Select the USART or the UART peripheral. 
  *   This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    4554:	b580      	push	{r7, lr}
    4556:	b082      	sub	sp, #8
    4558:	af00      	add	r7, sp, #0
    455a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    455c:	687a      	ldr	r2, [r7, #4]
    455e:	4b2b      	ldr	r3, [pc, #172]	(460c <USART_DeInit+0xb8>)
    4560:	429a      	cmp	r2, r3
    4562:	d10c      	bne.n	457e <USART_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    4564:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    4568:	f04f 0101 	mov.w	r1, #1	; 0x1
    456c:	f7fd ffd2 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    4570:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    4574:	f04f 0100 	mov.w	r1, #0	; 0x0
    4578:	f7fd ffcc 	bl	2514 <RCC_APB2PeriphResetCmd>
    457c:	e042      	b.n	4604 <USART_DeInit+0xb0>
  }
  else if (USARTx == USART2)
    457e:	687a      	ldr	r2, [r7, #4]
    4580:	4b23      	ldr	r3, [pc, #140]	(4610 <USART_DeInit+0xbc>)
    4582:	429a      	cmp	r2, r3
    4584:	d10c      	bne.n	45a0 <USART_DeInit+0x4c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    4586:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    458a:	f04f 0101 	mov.w	r1, #1	; 0x1
    458e:	f7fd ffe3 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    4592:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    4596:	f04f 0100 	mov.w	r1, #0	; 0x0
    459a:	f7fd ffdd 	bl	2558 <RCC_APB1PeriphResetCmd>
    459e:	e031      	b.n	4604 <USART_DeInit+0xb0>
  }
  else if (USARTx == USART3)
    45a0:	687a      	ldr	r2, [r7, #4]
    45a2:	4b1c      	ldr	r3, [pc, #112]	(4614 <USART_DeInit+0xc0>)
    45a4:	429a      	cmp	r2, r3
    45a6:	d10c      	bne.n	45c2 <USART_DeInit+0x6e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    45a8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    45ac:	f04f 0101 	mov.w	r1, #1	; 0x1
    45b0:	f7fd ffd2 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    45b4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    45b8:	f04f 0100 	mov.w	r1, #0	; 0x0
    45bc:	f7fd ffcc 	bl	2558 <RCC_APB1PeriphResetCmd>
    45c0:	e020      	b.n	4604 <USART_DeInit+0xb0>
  }    
  else if (USARTx == UART4)
    45c2:	687a      	ldr	r2, [r7, #4]
    45c4:	4b14      	ldr	r3, [pc, #80]	(4618 <USART_DeInit+0xc4>)
    45c6:	429a      	cmp	r2, r3
    45c8:	d10c      	bne.n	45e4 <USART_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    45ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    45ce:	f04f 0101 	mov.w	r1, #1	; 0x1
    45d2:	f7fd ffc1 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    45d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    45da:	f04f 0100 	mov.w	r1, #0	; 0x0
    45de:	f7fd ffbb 	bl	2558 <RCC_APB1PeriphResetCmd>
    45e2:	e00f      	b.n	4604 <USART_DeInit+0xb0>
  }    
  else
  {
    if (USARTx == UART5)
    45e4:	687a      	ldr	r2, [r7, #4]
    45e6:	4b0d      	ldr	r3, [pc, #52]	(461c <USART_DeInit+0xc8>)
    45e8:	429a      	cmp	r2, r3
    45ea:	d10b      	bne.n	4604 <USART_DeInit+0xb0>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    45ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    45f0:	f04f 0101 	mov.w	r1, #1	; 0x1
    45f4:	f7fd ffb0 	bl	2558 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    45f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    45fc:	f04f 0100 	mov.w	r1, #0	; 0x0
    4600:	f7fd ffaa 	bl	2558 <RCC_APB1PeriphResetCmd>
    }
  }
}
    4604:	f107 0708 	add.w	r7, r7, #8	; 0x8
    4608:	46bd      	mov	sp, r7
    460a:	bd80      	pop	{r7, pc}
    460c:	40013800 	.word	0x40013800
    4610:	40004400 	.word	0x40004400
    4614:	40004800 	.word	0x40004800
    4618:	40004c00 	.word	0x40004c00
    461c:	40005000 	.word	0x40005000

00004620 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    4620:	b580      	push	{r7, lr}
    4622:	b08c      	sub	sp, #48
    4624:	af00      	add	r7, sp, #0
    4626:	6078      	str	r0, [r7, #4]
    4628:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    462a:	f04f 0300 	mov.w	r3, #0	; 0x0
    462e:	61fb      	str	r3, [r7, #28]
    4630:	f04f 0300 	mov.w	r3, #0	; 0x0
    4634:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
    4636:	f04f 0300 	mov.w	r3, #0	; 0x0
    463a:	627b      	str	r3, [r7, #36]
  uint32_t fractionaldivider = 0x00;
    463c:	f04f 0300 	mov.w	r3, #0	; 0x0
    4640:	62bb      	str	r3, [r7, #40]
  uint32_t usartxbase = 0;
    4642:	f04f 0300 	mov.w	r3, #0	; 0x0
    4646:	62fb      	str	r3, [r7, #44]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    4648:	687b      	ldr	r3, [r7, #4]
    464a:	62fb      	str	r3, [r7, #44]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    464c:	687b      	ldr	r3, [r7, #4]
    464e:	8a1b      	ldrh	r3, [r3, #16]
    4650:	b29b      	uxth	r3, r3
    4652:	61fb      	str	r3, [r7, #28]
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    4654:	69fa      	ldr	r2, [r7, #28]
    4656:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    465a:	ea02 0303 	and.w	r3, r2, r3
    465e:	61fb      	str	r3, [r7, #28]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    4660:	683b      	ldr	r3, [r7, #0]
    4662:	88db      	ldrh	r3, [r3, #6]
    4664:	461a      	mov	r2, r3
    4666:	69fb      	ldr	r3, [r7, #28]
    4668:	ea43 0302 	orr.w	r3, r3, r2
    466c:	61fb      	str	r3, [r7, #28]
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    466e:	69fb      	ldr	r3, [r7, #28]
    4670:	b29b      	uxth	r3, r3
    4672:	687a      	ldr	r2, [r7, #4]
    4674:	8213      	strh	r3, [r2, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    4676:	687b      	ldr	r3, [r7, #4]
    4678:	899b      	ldrh	r3, [r3, #12]
    467a:	b29b      	uxth	r3, r3
    467c:	61fb      	str	r3, [r7, #28]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    467e:	69fa      	ldr	r2, [r7, #28]
    4680:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    4684:	ea02 0303 	and.w	r3, r2, r3
    4688:	61fb      	str	r3, [r7, #28]
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    468a:	683b      	ldr	r3, [r7, #0]
    468c:	889a      	ldrh	r2, [r3, #4]
    468e:	683b      	ldr	r3, [r7, #0]
    4690:	891b      	ldrh	r3, [r3, #8]
    4692:	ea42 0303 	orr.w	r3, r2, r3
    4696:	b29a      	uxth	r2, r3
    4698:	683b      	ldr	r3, [r7, #0]
    469a:	895b      	ldrh	r3, [r3, #10]
    469c:	ea42 0303 	orr.w	r3, r2, r3
    46a0:	b29b      	uxth	r3, r3
    46a2:	461a      	mov	r2, r3
    46a4:	69fb      	ldr	r3, [r7, #28]
    46a6:	ea43 0302 	orr.w	r3, r3, r2
    46aa:	61fb      	str	r3, [r7, #28]
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    46ac:	69fb      	ldr	r3, [r7, #28]
    46ae:	b29b      	uxth	r3, r3
    46b0:	687a      	ldr	r2, [r7, #4]
    46b2:	8193      	strh	r3, [r2, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
    46b4:	687b      	ldr	r3, [r7, #4]
    46b6:	8a9b      	ldrh	r3, [r3, #20]
    46b8:	b29b      	uxth	r3, r3
    46ba:	61fb      	str	r3, [r7, #28]
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    46bc:	69fa      	ldr	r2, [r7, #28]
    46be:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    46c2:	ea02 0303 	and.w	r3, r2, r3
    46c6:	61fb      	str	r3, [r7, #28]
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    46c8:	683b      	ldr	r3, [r7, #0]
    46ca:	899b      	ldrh	r3, [r3, #12]
    46cc:	461a      	mov	r2, r3
    46ce:	69fb      	ldr	r3, [r7, #28]
    46d0:	ea43 0302 	orr.w	r3, r3, r2
    46d4:	61fb      	str	r3, [r7, #28]
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    46d6:	69fb      	ldr	r3, [r7, #28]
    46d8:	b29b      	uxth	r3, r3
    46da:	687a      	ldr	r2, [r7, #4]
    46dc:	8293      	strh	r3, [r2, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    46de:	f107 0308 	add.w	r3, r7, #8	; 0x8
    46e2:	4618      	mov	r0, r3
    46e4:	f7fd fd94 	bl	2210 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    46e8:	6afa      	ldr	r2, [r7, #44]
    46ea:	4b24      	ldr	r3, [pc, #144]	(477c <USART_Init+0x15c>)
    46ec:	429a      	cmp	r2, r3
    46ee:	d102      	bne.n	46f6 <USART_Init+0xd6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    46f0:	697b      	ldr	r3, [r7, #20]
    46f2:	623b      	str	r3, [r7, #32]
    46f4:	e001      	b.n	46fa <USART_Init+0xda>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    46f6:	693b      	ldr	r3, [r7, #16]
    46f8:	623b      	str	r3, [r7, #32]
  }
  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
    46fa:	6a39      	ldr	r1, [r7, #32]
    46fc:	460b      	mov	r3, r1
    46fe:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    4702:	ea4f 0382 	mov.w	r3, r2, lsl #2
    4706:	ebc2 0303 	rsb	r3, r2, r3
    470a:	eb03 0201 	add.w	r2, r3, r1
    470e:	683b      	ldr	r3, [r7, #0]
    4710:	681b      	ldr	r3, [r3, #0]
    4712:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4716:	fbb2 f3f3 	udiv	r3, r2, r3
    471a:	627b      	str	r3, [r7, #36]
  tmpreg = (integerdivider / 0x64) << 0x04;
    471c:	6a7a      	ldr	r2, [r7, #36]
    471e:	4b18      	ldr	r3, [pc, #96]	(4780 <USART_Init+0x160>)
    4720:	fba3 1302 	umull	r1, r3, r3, r2
    4724:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4728:	ea4f 1303 	mov.w	r3, r3, lsl #4
    472c:	61fb      	str	r3, [r7, #28]
  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
    472e:	69fb      	ldr	r3, [r7, #28]
    4730:	ea4f 1313 	mov.w	r3, r3, lsr #4
    4734:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4738:	ea4f 0283 	mov.w	r2, r3, lsl #2
    473c:	4413      	add	r3, r2
    473e:	ea4f 0283 	mov.w	r2, r3, lsl #2
    4742:	441a      	add	r2, r3
    4744:	6a7b      	ldr	r3, [r7, #36]
    4746:	ebc2 0303 	rsb	r3, r2, r3
    474a:	62bb      	str	r3, [r7, #40]
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((uint8_t)0x0F);
    474c:	6abb      	ldr	r3, [r7, #40]
    474e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4752:	f103 0232 	add.w	r2, r3, #50	; 0x32
    4756:	4b0a      	ldr	r3, [pc, #40]	(4780 <USART_Init+0x160>)
    4758:	fba3 1302 	umull	r1, r3, r3, r2
    475c:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4760:	f003 020f 	and.w	r2, r3, #15	; 0xf
    4764:	69fb      	ldr	r3, [r7, #28]
    4766:	ea43 0302 	orr.w	r3, r3, r2
    476a:	61fb      	str	r3, [r7, #28]
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    476c:	69fb      	ldr	r3, [r7, #28]
    476e:	b29b      	uxth	r3, r3
    4770:	687a      	ldr	r2, [r7, #4]
    4772:	8113      	strh	r3, [r2, #8]
}
    4774:	f107 0730 	add.w	r7, r7, #48	; 0x30
    4778:	46bd      	mov	sp, r7
    477a:	bd80      	pop	{r7, pc}
    477c:	40013800 	.word	0x40013800
    4780:	51eb851f 	.word	0x51eb851f

00004784 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    4784:	b480      	push	{r7}
    4786:	b083      	sub	sp, #12
    4788:	af00      	add	r7, sp, #0
    478a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    478c:	687a      	ldr	r2, [r7, #4]
    478e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    4792:	6013      	str	r3, [r2, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    4794:	687a      	ldr	r2, [r7, #4]
    4796:	f04f 0300 	mov.w	r3, #0	; 0x0
    479a:	8093      	strh	r3, [r2, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    479c:	687a      	ldr	r2, [r7, #4]
    479e:	f04f 0300 	mov.w	r3, #0	; 0x0
    47a2:	80d3      	strh	r3, [r2, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    47a4:	687a      	ldr	r2, [r7, #4]
    47a6:	f04f 0300 	mov.w	r3, #0	; 0x0
    47aa:	8113      	strh	r3, [r2, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    47ac:	687a      	ldr	r2, [r7, #4]
    47ae:	f04f 030c 	mov.w	r3, #12	; 0xc
    47b2:	8153      	strh	r3, [r2, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    47b4:	687a      	ldr	r2, [r7, #4]
    47b6:	f04f 0300 	mov.w	r3, #0	; 0x0
    47ba:	8193      	strh	r3, [r2, #12]
}
    47bc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    47c0:	46bd      	mov	sp, r7
    47c2:	bc80      	pop	{r7}
    47c4:	4770      	bx	lr
    47c6:	46c0      	nop			(mov r8, r8)

000047c8 <USART_ClockInit>:
  *   USART peripheral.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    47c8:	b480      	push	{r7}
    47ca:	b085      	sub	sp, #20
    47cc:	af00      	add	r7, sp, #0
    47ce:	6078      	str	r0, [r7, #4]
    47d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    47d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    47d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    47d8:	687b      	ldr	r3, [r7, #4]
    47da:	8a1b      	ldrh	r3, [r3, #16]
    47dc:	b29b      	uxth	r3, r3
    47de:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    47e0:	68fa      	ldr	r2, [r7, #12]
    47e2:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    47e6:	ea02 0303 	and.w	r3, r2, r3
    47ea:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    47ec:	683b      	ldr	r3, [r7, #0]
    47ee:	881a      	ldrh	r2, [r3, #0]
    47f0:	683b      	ldr	r3, [r7, #0]
    47f2:	885b      	ldrh	r3, [r3, #2]
    47f4:	ea42 0303 	orr.w	r3, r2, r3
    47f8:	b29a      	uxth	r2, r3
    47fa:	683b      	ldr	r3, [r7, #0]
    47fc:	889b      	ldrh	r3, [r3, #4]
    47fe:	ea42 0303 	orr.w	r3, r2, r3
    4802:	b29a      	uxth	r2, r3
    4804:	683b      	ldr	r3, [r7, #0]
    4806:	88db      	ldrh	r3, [r3, #6]
    4808:	ea42 0303 	orr.w	r3, r2, r3
    480c:	b29b      	uxth	r3, r3
    480e:	461a      	mov	r2, r3
    4810:	68fb      	ldr	r3, [r7, #12]
    4812:	ea43 0302 	orr.w	r3, r3, r2
    4816:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    4818:	68fb      	ldr	r3, [r7, #12]
    481a:	b29b      	uxth	r3, r3
    481c:	687a      	ldr	r2, [r7, #4]
    481e:	8213      	strh	r3, [r2, #16]
}
    4820:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4824:	46bd      	mov	sp, r7
    4826:	bc80      	pop	{r7}
    4828:	4770      	bx	lr
    482a:	46c0      	nop			(mov r8, r8)

0000482c <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *   structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    482c:	b480      	push	{r7}
    482e:	b083      	sub	sp, #12
    4830:	af00      	add	r7, sp, #0
    4832:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    4834:	687a      	ldr	r2, [r7, #4]
    4836:	f04f 0300 	mov.w	r3, #0	; 0x0
    483a:	8013      	strh	r3, [r2, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    483c:	687a      	ldr	r2, [r7, #4]
    483e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4842:	8053      	strh	r3, [r2, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    4844:	687a      	ldr	r2, [r7, #4]
    4846:	f04f 0300 	mov.w	r3, #0	; 0x0
    484a:	8093      	strh	r3, [r2, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    484c:	687a      	ldr	r2, [r7, #4]
    484e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4852:	80d3      	strh	r3, [r2, #6]
}
    4854:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4858:	46bd      	mov	sp, r7
    485a:	bc80      	pop	{r7}
    485c:	4770      	bx	lr
    485e:	46c0      	nop			(mov r8, r8)

00004860 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4860:	b480      	push	{r7}
    4862:	b085      	sub	sp, #20
    4864:	af00      	add	r7, sp, #0
    4866:	60f8      	str	r0, [r7, #12]
    4868:	460b      	mov	r3, r1
    486a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    486c:	7afb      	ldrb	r3, [r7, #11]
    486e:	2b00      	cmp	r3, #0
    4870:	d008      	beq.n	4884 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    4872:	68fb      	ldr	r3, [r7, #12]
    4874:	899b      	ldrh	r3, [r3, #12]
    4876:	b29b      	uxth	r3, r3
    4878:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    487c:	b29b      	uxth	r3, r3
    487e:	68fa      	ldr	r2, [r7, #12]
    4880:	8193      	strh	r3, [r2, #12]
    4882:	e00d      	b.n	48a0 <USART_Cmd+0x40>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    4884:	68fb      	ldr	r3, [r7, #12]
    4886:	899b      	ldrh	r3, [r3, #12]
    4888:	b29b      	uxth	r3, r3
    488a:	607b      	str	r3, [r7, #4]
    488c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
    4890:	6879      	ldr	r1, [r7, #4]
    4892:	ea01 0303 	and.w	r3, r1, r3
    4896:	607b      	str	r3, [r7, #4]
    4898:	68fa      	ldr	r2, [r7, #12]
    489a:	6879      	ldr	r1, [r7, #4]
    489c:	460b      	mov	r3, r1
    489e:	8193      	strh	r3, [r2, #12]
  }
}
    48a0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    48a4:	46bd      	mov	sp, r7
    48a6:	bc80      	pop	{r7}
    48a8:	4770      	bx	lr
    48aa:	46c0      	nop			(mov r8, r8)

000048ac <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    48ac:	b480      	push	{r7}
    48ae:	b087      	sub	sp, #28
    48b0:	af00      	add	r7, sp, #0
    48b2:	6078      	str	r0, [r7, #4]
    48b4:	460b      	mov	r3, r1
    48b6:	807b      	strh	r3, [r7, #2]
    48b8:	4613      	mov	r3, r2
    48ba:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    48bc:	f04f 0300 	mov.w	r3, #0	; 0x0
    48c0:	60bb      	str	r3, [r7, #8]
    48c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    48c6:	60fb      	str	r3, [r7, #12]
    48c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    48cc:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0x00;
    48ce:	f04f 0300 	mov.w	r3, #0	; 0x0
    48d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    48d8:	887b      	ldrh	r3, [r7, #2]
    48da:	b2db      	uxtb	r3, r3
    48dc:	ea4f 1353 	mov.w	r3, r3, lsr #5
    48e0:	b2db      	uxtb	r3, r3
    48e2:	60bb      	str	r3, [r7, #8]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    48e4:	887b      	ldrh	r3, [r7, #2]
    48e6:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    48ea:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    48ec:	68fa      	ldr	r2, [r7, #12]
    48ee:	f04f 0301 	mov.w	r3, #1	; 0x1
    48f2:	fa03 f302 	lsl.w	r3, r3, r2
    48f6:	613b      	str	r3, [r7, #16]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
    48f8:	68bb      	ldr	r3, [r7, #8]
    48fa:	2b01      	cmp	r3, #1
    48fc:	d104      	bne.n	4908 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
    48fe:	697b      	ldr	r3, [r7, #20]
    4900:	f103 030c 	add.w	r3, r3, #12	; 0xc
    4904:	617b      	str	r3, [r7, #20]
    4906:	e00b      	b.n	4920 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    4908:	68bb      	ldr	r3, [r7, #8]
    490a:	2b02      	cmp	r3, #2
    490c:	d104      	bne.n	4918 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
    490e:	697b      	ldr	r3, [r7, #20]
    4910:	f103 0310 	add.w	r3, r3, #16	; 0x10
    4914:	617b      	str	r3, [r7, #20]
    4916:	e003      	b.n	4920 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
    4918:	697b      	ldr	r3, [r7, #20]
    491a:	f103 0314 	add.w	r3, r3, #20	; 0x14
    491e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    4920:	787b      	ldrb	r3, [r7, #1]
    4922:	2b00      	cmp	r3, #0
    4924:	d007      	beq.n	4936 <USART_ITConfig+0x8a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    4926:	6979      	ldr	r1, [r7, #20]
    4928:	697b      	ldr	r3, [r7, #20]
    492a:	681a      	ldr	r2, [r3, #0]
    492c:	693b      	ldr	r3, [r7, #16]
    492e:	ea42 0303 	orr.w	r3, r2, r3
    4932:	600b      	str	r3, [r1, #0]
    4934:	e008      	b.n	4948 <USART_ITConfig+0x9c>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    4936:	6979      	ldr	r1, [r7, #20]
    4938:	697b      	ldr	r3, [r7, #20]
    493a:	681a      	ldr	r2, [r3, #0]
    493c:	693b      	ldr	r3, [r7, #16]
    493e:	ea6f 0303 	mvn.w	r3, r3
    4942:	ea02 0303 	and.w	r3, r2, r3
    4946:	600b      	str	r3, [r1, #0]
  }
}
    4948:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    494c:	46bd      	mov	sp, r7
    494e:	bc80      	pop	{r7}
    4950:	4770      	bx	lr
    4952:	46c0      	nop			(mov r8, r8)

00004954 <USART_DMACmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The DMA mode is not available for UART5.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    4954:	b480      	push	{r7}
    4956:	b083      	sub	sp, #12
    4958:	af00      	add	r7, sp, #0
    495a:	6078      	str	r0, [r7, #4]
    495c:	460b      	mov	r3, r1
    495e:	807b      	strh	r3, [r7, #2]
    4960:	4613      	mov	r3, r2
    4962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
    4964:	787b      	ldrb	r3, [r7, #1]
    4966:	2b00      	cmp	r3, #0
    4968:	d009      	beq.n	497e <USART_DMACmd+0x2a>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    496a:	687b      	ldr	r3, [r7, #4]
    496c:	8a9b      	ldrh	r3, [r3, #20]
    496e:	b29a      	uxth	r2, r3
    4970:	887b      	ldrh	r3, [r7, #2]
    4972:	ea42 0303 	orr.w	r3, r2, r3
    4976:	b29b      	uxth	r3, r3
    4978:	687a      	ldr	r2, [r7, #4]
    497a:	8293      	strh	r3, [r2, #20]
    497c:	e00b      	b.n	4996 <USART_DMACmd+0x42>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    497e:	687b      	ldr	r3, [r7, #4]
    4980:	8a9b      	ldrh	r3, [r3, #20]
    4982:	b29a      	uxth	r2, r3
    4984:	887b      	ldrh	r3, [r7, #2]
    4986:	ea6f 0303 	mvn.w	r3, r3
    498a:	b29b      	uxth	r3, r3
    498c:	ea02 0303 	and.w	r3, r2, r3
    4990:	b29b      	uxth	r3, r3
    4992:	687a      	ldr	r2, [r7, #4]
    4994:	8293      	strh	r3, [r2, #20]
  }
}
    4996:	f107 070c 	add.w	r7, r7, #12	; 0xc
    499a:	46bd      	mov	sp, r7
    499c:	bc80      	pop	{r7}
    499e:	4770      	bx	lr

000049a0 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    49a0:	b480      	push	{r7}
    49a2:	b085      	sub	sp, #20
    49a4:	af00      	add	r7, sp, #0
    49a6:	60f8      	str	r0, [r7, #12]
    49a8:	460b      	mov	r3, r1
    49aa:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    49ac:	68fb      	ldr	r3, [r7, #12]
    49ae:	8a1b      	ldrh	r3, [r3, #16]
    49b0:	b29b      	uxth	r3, r3
    49b2:	607b      	str	r3, [r7, #4]
    49b4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    49b8:	6879      	ldr	r1, [r7, #4]
    49ba:	ea01 0303 	and.w	r3, r1, r3
    49be:	607b      	str	r3, [r7, #4]
    49c0:	68fa      	ldr	r2, [r7, #12]
    49c2:	6879      	ldr	r1, [r7, #4]
    49c4:	460b      	mov	r3, r1
    49c6:	8213      	strh	r3, [r2, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    49c8:	68fb      	ldr	r3, [r7, #12]
    49ca:	8a1b      	ldrh	r3, [r3, #16]
    49cc:	b29a      	uxth	r2, r3
    49ce:	7afb      	ldrb	r3, [r7, #11]
    49d0:	ea42 0303 	orr.w	r3, r2, r3
    49d4:	b29b      	uxth	r3, r3
    49d6:	68fa      	ldr	r2, [r7, #12]
    49d8:	8213      	strh	r3, [r2, #16]
}
    49da:	f107 0714 	add.w	r7, r7, #20	; 0x14
    49de:	46bd      	mov	sp, r7
    49e0:	bc80      	pop	{r7}
    49e2:	4770      	bx	lr

000049e4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    49e4:	b480      	push	{r7}
    49e6:	b085      	sub	sp, #20
    49e8:	af00      	add	r7, sp, #0
    49ea:	60f8      	str	r0, [r7, #12]
    49ec:	460b      	mov	r3, r1
    49ee:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
    49f0:	68fb      	ldr	r3, [r7, #12]
    49f2:	899b      	ldrh	r3, [r3, #12]
    49f4:	b29b      	uxth	r3, r3
    49f6:	607b      	str	r3, [r7, #4]
    49f8:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
    49fc:	6879      	ldr	r1, [r7, #4]
    49fe:	ea01 0303 	and.w	r3, r1, r3
    4a02:	607b      	str	r3, [r7, #4]
    4a04:	68fa      	ldr	r2, [r7, #12]
    4a06:	6879      	ldr	r1, [r7, #4]
    4a08:	460b      	mov	r3, r1
    4a0a:	8193      	strh	r3, [r2, #12]
  USARTx->CR1 |= USART_WakeUp;
    4a0c:	68fb      	ldr	r3, [r7, #12]
    4a0e:	899b      	ldrh	r3, [r3, #12]
    4a10:	b29a      	uxth	r2, r3
    4a12:	897b      	ldrh	r3, [r7, #10]
    4a14:	ea42 0303 	orr.w	r3, r2, r3
    4a18:	b29b      	uxth	r3, r3
    4a1a:	68fa      	ldr	r2, [r7, #12]
    4a1c:	8193      	strh	r3, [r2, #12]
}
    4a1e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4a22:	46bd      	mov	sp, r7
    4a24:	bc80      	pop	{r7}
    4a26:	4770      	bx	lr

00004a28 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4a28:	b480      	push	{r7}
    4a2a:	b085      	sub	sp, #20
    4a2c:	af00      	add	r7, sp, #0
    4a2e:	60f8      	str	r0, [r7, #12]
    4a30:	460b      	mov	r3, r1
    4a32:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
    4a34:	7afb      	ldrb	r3, [r7, #11]
    4a36:	2b00      	cmp	r3, #0
    4a38:	d008      	beq.n	4a4c <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    4a3a:	68fb      	ldr	r3, [r7, #12]
    4a3c:	899b      	ldrh	r3, [r3, #12]
    4a3e:	b29b      	uxth	r3, r3
    4a40:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    4a44:	b29b      	uxth	r3, r3
    4a46:	68fa      	ldr	r2, [r7, #12]
    4a48:	8193      	strh	r3, [r2, #12]
    4a4a:	e00d      	b.n	4a68 <USART_ReceiverWakeUpCmd+0x40>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    4a4c:	68fb      	ldr	r3, [r7, #12]
    4a4e:	899b      	ldrh	r3, [r3, #12]
    4a50:	b29b      	uxth	r3, r3
    4a52:	607b      	str	r3, [r7, #4]
    4a54:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    4a58:	6879      	ldr	r1, [r7, #4]
    4a5a:	ea01 0303 	and.w	r3, r1, r3
    4a5e:	607b      	str	r3, [r7, #4]
    4a60:	68fa      	ldr	r2, [r7, #12]
    4a62:	6879      	ldr	r1, [r7, #4]
    4a64:	460b      	mov	r3, r1
    4a66:	8193      	strh	r3, [r2, #12]
  }
}
    4a68:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4a6c:	46bd      	mov	sp, r7
    4a6e:	bc80      	pop	{r7}
    4a70:	4770      	bx	lr
    4a72:	46c0      	nop			(mov r8, r8)

00004a74 <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    4a74:	b480      	push	{r7}
    4a76:	b085      	sub	sp, #20
    4a78:	af00      	add	r7, sp, #0
    4a7a:	60f8      	str	r0, [r7, #12]
    4a7c:	460b      	mov	r3, r1
    4a7e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
    4a80:	68fb      	ldr	r3, [r7, #12]
    4a82:	8a1b      	ldrh	r3, [r3, #16]
    4a84:	b29b      	uxth	r3, r3
    4a86:	607b      	str	r3, [r7, #4]
    4a88:	f64f 73df 	movw	r3, #65503	; 0xffdf
    4a8c:	6879      	ldr	r1, [r7, #4]
    4a8e:	ea01 0303 	and.w	r3, r1, r3
    4a92:	607b      	str	r3, [r7, #4]
    4a94:	68fa      	ldr	r2, [r7, #12]
    4a96:	6879      	ldr	r1, [r7, #4]
    4a98:	460b      	mov	r3, r1
    4a9a:	8213      	strh	r3, [r2, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
    4a9c:	68fb      	ldr	r3, [r7, #12]
    4a9e:	8a1b      	ldrh	r3, [r3, #16]
    4aa0:	b29a      	uxth	r2, r3
    4aa2:	897b      	ldrh	r3, [r7, #10]
    4aa4:	ea42 0303 	orr.w	r3, r2, r3
    4aa8:	b29b      	uxth	r3, r3
    4aaa:	68fa      	ldr	r2, [r7, #12]
    4aac:	8213      	strh	r3, [r2, #16]
}
    4aae:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4ab2:	46bd      	mov	sp, r7
    4ab4:	bc80      	pop	{r7}
    4ab6:	4770      	bx	lr

00004ab8 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4ab8:	b480      	push	{r7}
    4aba:	b085      	sub	sp, #20
    4abc:	af00      	add	r7, sp, #0
    4abe:	60f8      	str	r0, [r7, #12]
    4ac0:	460b      	mov	r3, r1
    4ac2:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4ac4:	7afb      	ldrb	r3, [r7, #11]
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	d008      	beq.n	4adc <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    4aca:	68fb      	ldr	r3, [r7, #12]
    4acc:	8a1b      	ldrh	r3, [r3, #16]
    4ace:	b29b      	uxth	r3, r3
    4ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    4ad4:	b29b      	uxth	r3, r3
    4ad6:	68fa      	ldr	r2, [r7, #12]
    4ad8:	8213      	strh	r3, [r2, #16]
    4ada:	e00d      	b.n	4af8 <USART_LINCmd+0x40>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    4adc:	68fb      	ldr	r3, [r7, #12]
    4ade:	8a1b      	ldrh	r3, [r3, #16]
    4ae0:	b29b      	uxth	r3, r3
    4ae2:	607b      	str	r3, [r7, #4]
    4ae4:	f64b 73ff 	movw	r3, #49151	; 0xbfff
    4ae8:	6879      	ldr	r1, [r7, #4]
    4aea:	ea01 0303 	and.w	r3, r1, r3
    4aee:	607b      	str	r3, [r7, #4]
    4af0:	68fa      	ldr	r2, [r7, #12]
    4af2:	6879      	ldr	r1, [r7, #4]
    4af4:	460b      	mov	r3, r1
    4af6:	8213      	strh	r3, [r2, #16]
  }
}
    4af8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4afc:	46bd      	mov	sp, r7
    4afe:	bc80      	pop	{r7}
    4b00:	4770      	bx	lr
    4b02:	46c0      	nop			(mov r8, r8)

00004b04 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    4b04:	b480      	push	{r7}
    4b06:	b085      	sub	sp, #20
    4b08:	af00      	add	r7, sp, #0
    4b0a:	60f8      	str	r0, [r7, #12]
    4b0c:	460b      	mov	r3, r1
    4b0e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    4b10:	8979      	ldrh	r1, [r7, #10]
    4b12:	6079      	str	r1, [r7, #4]
    4b14:	687a      	ldr	r2, [r7, #4]
    4b16:	ea4f 53c2 	mov.w	r3, r2, lsl #23
    4b1a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    4b1e:	607b      	str	r3, [r7, #4]
    4b20:	68fa      	ldr	r2, [r7, #12]
    4b22:	6879      	ldr	r1, [r7, #4]
    4b24:	460b      	mov	r3, r1
    4b26:	8093      	strh	r3, [r2, #4]
}
    4b28:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4b2c:	46bd      	mov	sp, r7
    4b2e:	bc80      	pop	{r7}
    4b30:	4770      	bx	lr
    4b32:	46c0      	nop			(mov r8, r8)

00004b34 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    4b34:	b480      	push	{r7}
    4b36:	b083      	sub	sp, #12
    4b38:	af00      	add	r7, sp, #0
    4b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    4b3c:	687b      	ldr	r3, [r7, #4]
    4b3e:	889b      	ldrh	r3, [r3, #4]
    4b40:	b29b      	uxth	r3, r3
    4b42:	603b      	str	r3, [r7, #0]
    4b44:	683a      	ldr	r2, [r7, #0]
    4b46:	ea4f 53c2 	mov.w	r3, r2, lsl #23
    4b4a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    4b4e:	603b      	str	r3, [r7, #0]
    4b50:	683b      	ldr	r3, [r7, #0]
}
    4b52:	4618      	mov	r0, r3
    4b54:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4b58:	46bd      	mov	sp, r7
    4b5a:	bc80      	pop	{r7}
    4b5c:	4770      	bx	lr
    4b5e:	46c0      	nop			(mov r8, r8)

00004b60 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    4b60:	b480      	push	{r7}
    4b62:	b083      	sub	sp, #12
    4b64:	af00      	add	r7, sp, #0
    4b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    4b68:	687b      	ldr	r3, [r7, #4]
    4b6a:	899b      	ldrh	r3, [r3, #12]
    4b6c:	b29b      	uxth	r3, r3
    4b6e:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    4b72:	b29b      	uxth	r3, r3
    4b74:	687a      	ldr	r2, [r7, #4]
    4b76:	8193      	strh	r3, [r2, #12]
}
    4b78:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4b7c:	46bd      	mov	sp, r7
    4b7e:	bc80      	pop	{r7}
    4b80:	4770      	bx	lr
    4b82:	46c0      	nop			(mov r8, r8)

00004b84 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
    4b84:	b480      	push	{r7}
    4b86:	b083      	sub	sp, #12
    4b88:	af00      	add	r7, sp, #0
    4b8a:	6078      	str	r0, [r7, #4]
    4b8c:	460b      	mov	r3, r1
    4b8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    4b90:	687b      	ldr	r3, [r7, #4]
    4b92:	8b1b      	ldrh	r3, [r3, #24]
    4b94:	b29b      	uxth	r3, r3
    4b96:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    4b9a:	687a      	ldr	r2, [r7, #4]
    4b9c:	8313      	strh	r3, [r2, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    4b9e:	687b      	ldr	r3, [r7, #4]
    4ba0:	8b1b      	ldrh	r3, [r3, #24]
    4ba2:	b29a      	uxth	r2, r3
    4ba4:	78fb      	ldrb	r3, [r7, #3]
    4ba6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4baa:	b29b      	uxth	r3, r3
    4bac:	ea42 0303 	orr.w	r3, r2, r3
    4bb0:	b29b      	uxth	r3, r3
    4bb2:	687a      	ldr	r2, [r7, #4]
    4bb4:	8313      	strh	r3, [r2, #24]
}
    4bb6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4bba:	46bd      	mov	sp, r7
    4bbc:	bc80      	pop	{r7}
    4bbe:	4770      	bx	lr

00004bc0 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
    4bc0:	b480      	push	{r7}
    4bc2:	b083      	sub	sp, #12
    4bc4:	af00      	add	r7, sp, #0
    4bc6:	6078      	str	r0, [r7, #4]
    4bc8:	460b      	mov	r3, r1
    4bca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	8b1b      	ldrh	r3, [r3, #24]
    4bd0:	b29b      	uxth	r3, r3
    4bd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    4bd6:	687a      	ldr	r2, [r7, #4]
    4bd8:	8313      	strh	r3, [r2, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    4bda:	687b      	ldr	r3, [r7, #4]
    4bdc:	8b1b      	ldrh	r3, [r3, #24]
    4bde:	b29a      	uxth	r2, r3
    4be0:	78fb      	ldrb	r3, [r7, #3]
    4be2:	ea42 0303 	orr.w	r3, r2, r3
    4be6:	b29b      	uxth	r3, r3
    4be8:	687a      	ldr	r2, [r7, #4]
    4bea:	8313      	strh	r3, [r2, #24]
}
    4bec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4bf0:	46bd      	mov	sp, r7
    4bf2:	bc80      	pop	{r7}
    4bf4:	4770      	bx	lr
    4bf6:	46c0      	nop			(mov r8, r8)

00004bf8 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4bf8:	b480      	push	{r7}
    4bfa:	b085      	sub	sp, #20
    4bfc:	af00      	add	r7, sp, #0
    4bfe:	60f8      	str	r0, [r7, #12]
    4c00:	460b      	mov	r3, r1
    4c02:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4c04:	7afb      	ldrb	r3, [r7, #11]
    4c06:	2b00      	cmp	r3, #0
    4c08:	d008      	beq.n	4c1c <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    4c0a:	68fb      	ldr	r3, [r7, #12]
    4c0c:	8a9b      	ldrh	r3, [r3, #20]
    4c0e:	b29b      	uxth	r3, r3
    4c10:	f043 0320 	orr.w	r3, r3, #32	; 0x20
    4c14:	b29b      	uxth	r3, r3
    4c16:	68fa      	ldr	r2, [r7, #12]
    4c18:	8293      	strh	r3, [r2, #20]
    4c1a:	e00d      	b.n	4c38 <USART_SmartCardCmd+0x40>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    4c1c:	68fb      	ldr	r3, [r7, #12]
    4c1e:	8a9b      	ldrh	r3, [r3, #20]
    4c20:	b29b      	uxth	r3, r3
    4c22:	607b      	str	r3, [r7, #4]
    4c24:	f64f 73df 	movw	r3, #65503	; 0xffdf
    4c28:	6879      	ldr	r1, [r7, #4]
    4c2a:	ea01 0303 	and.w	r3, r1, r3
    4c2e:	607b      	str	r3, [r7, #4]
    4c30:	68fa      	ldr	r2, [r7, #12]
    4c32:	6879      	ldr	r1, [r7, #4]
    4c34:	460b      	mov	r3, r1
    4c36:	8293      	strh	r3, [r2, #20]
  }
}
    4c38:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4c3c:	46bd      	mov	sp, r7
    4c3e:	bc80      	pop	{r7}
    4c40:	4770      	bx	lr
    4c42:	46c0      	nop			(mov r8, r8)

00004c44 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4c44:	b480      	push	{r7}
    4c46:	b085      	sub	sp, #20
    4c48:	af00      	add	r7, sp, #0
    4c4a:	60f8      	str	r0, [r7, #12]
    4c4c:	460b      	mov	r3, r1
    4c4e:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4c50:	7afb      	ldrb	r3, [r7, #11]
    4c52:	2b00      	cmp	r3, #0
    4c54:	d008      	beq.n	4c68 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    4c56:	68fb      	ldr	r3, [r7, #12]
    4c58:	8a9b      	ldrh	r3, [r3, #20]
    4c5a:	b29b      	uxth	r3, r3
    4c5c:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    4c60:	b29b      	uxth	r3, r3
    4c62:	68fa      	ldr	r2, [r7, #12]
    4c64:	8293      	strh	r3, [r2, #20]
    4c66:	e00d      	b.n	4c84 <USART_SmartCardNACKCmd+0x40>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    4c68:	68fb      	ldr	r3, [r7, #12]
    4c6a:	8a9b      	ldrh	r3, [r3, #20]
    4c6c:	b29b      	uxth	r3, r3
    4c6e:	607b      	str	r3, [r7, #4]
    4c70:	f64f 73ef 	movw	r3, #65519	; 0xffef
    4c74:	6879      	ldr	r1, [r7, #4]
    4c76:	ea01 0303 	and.w	r3, r1, r3
    4c7a:	607b      	str	r3, [r7, #4]
    4c7c:	68fa      	ldr	r2, [r7, #12]
    4c7e:	6879      	ldr	r1, [r7, #4]
    4c80:	460b      	mov	r3, r1
    4c82:	8293      	strh	r3, [r2, #20]
  }
}
    4c84:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4c88:	46bd      	mov	sp, r7
    4c8a:	bc80      	pop	{r7}
    4c8c:	4770      	bx	lr
    4c8e:	46c0      	nop			(mov r8, r8)

00004c90 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4c90:	b480      	push	{r7}
    4c92:	b085      	sub	sp, #20
    4c94:	af00      	add	r7, sp, #0
    4c96:	60f8      	str	r0, [r7, #12]
    4c98:	460b      	mov	r3, r1
    4c9a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4c9c:	7afb      	ldrb	r3, [r7, #11]
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	d008      	beq.n	4cb4 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    4ca2:	68fb      	ldr	r3, [r7, #12]
    4ca4:	8a9b      	ldrh	r3, [r3, #20]
    4ca6:	b29b      	uxth	r3, r3
    4ca8:	f043 0308 	orr.w	r3, r3, #8	; 0x8
    4cac:	b29b      	uxth	r3, r3
    4cae:	68fa      	ldr	r2, [r7, #12]
    4cb0:	8293      	strh	r3, [r2, #20]
    4cb2:	e00d      	b.n	4cd0 <USART_HalfDuplexCmd+0x40>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    4cb4:	68fb      	ldr	r3, [r7, #12]
    4cb6:	8a9b      	ldrh	r3, [r3, #20]
    4cb8:	b29b      	uxth	r3, r3
    4cba:	607b      	str	r3, [r7, #4]
    4cbc:	f64f 73f7 	movw	r3, #65527	; 0xfff7
    4cc0:	6879      	ldr	r1, [r7, #4]
    4cc2:	ea01 0303 	and.w	r3, r1, r3
    4cc6:	607b      	str	r3, [r7, #4]
    4cc8:	68fa      	ldr	r2, [r7, #12]
    4cca:	6879      	ldr	r1, [r7, #4]
    4ccc:	460b      	mov	r3, r1
    4cce:	8293      	strh	r3, [r2, #20]
  }
}
    4cd0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4cd4:	46bd      	mov	sp, r7
    4cd6:	bc80      	pop	{r7}
    4cd8:	4770      	bx	lr
    4cda:	46c0      	nop			(mov r8, r8)

00004cdc <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    4cdc:	b480      	push	{r7}
    4cde:	b085      	sub	sp, #20
    4ce0:	af00      	add	r7, sp, #0
    4ce2:	60f8      	str	r0, [r7, #12]
    4ce4:	460b      	mov	r3, r1
    4ce6:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
    4ce8:	68fb      	ldr	r3, [r7, #12]
    4cea:	8a9b      	ldrh	r3, [r3, #20]
    4cec:	b29b      	uxth	r3, r3
    4cee:	607b      	str	r3, [r7, #4]
    4cf0:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    4cf4:	6879      	ldr	r1, [r7, #4]
    4cf6:	ea01 0303 	and.w	r3, r1, r3
    4cfa:	607b      	str	r3, [r7, #4]
    4cfc:	68fa      	ldr	r2, [r7, #12]
    4cfe:	6879      	ldr	r1, [r7, #4]
    4d00:	460b      	mov	r3, r1
    4d02:	8293      	strh	r3, [r2, #20]
  USARTx->CR3 |= USART_IrDAMode;
    4d04:	68fb      	ldr	r3, [r7, #12]
    4d06:	8a9b      	ldrh	r3, [r3, #20]
    4d08:	b29a      	uxth	r2, r3
    4d0a:	897b      	ldrh	r3, [r7, #10]
    4d0c:	ea42 0303 	orr.w	r3, r2, r3
    4d10:	b29b      	uxth	r3, r3
    4d12:	68fa      	ldr	r2, [r7, #12]
    4d14:	8293      	strh	r3, [r2, #20]
}
    4d16:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4d1a:	46bd      	mov	sp, r7
    4d1c:	bc80      	pop	{r7}
    4d1e:	4770      	bx	lr

00004d20 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4d20:	b480      	push	{r7}
    4d22:	b085      	sub	sp, #20
    4d24:	af00      	add	r7, sp, #0
    4d26:	60f8      	str	r0, [r7, #12]
    4d28:	460b      	mov	r3, r1
    4d2a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
    4d2c:	7afb      	ldrb	r3, [r7, #11]
    4d2e:	2b00      	cmp	r3, #0
    4d30:	d008      	beq.n	4d44 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    4d32:	68fb      	ldr	r3, [r7, #12]
    4d34:	8a9b      	ldrh	r3, [r3, #20]
    4d36:	b29b      	uxth	r3, r3
    4d38:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    4d3c:	b29b      	uxth	r3, r3
    4d3e:	68fa      	ldr	r2, [r7, #12]
    4d40:	8293      	strh	r3, [r2, #20]
    4d42:	e00d      	b.n	4d60 <USART_IrDACmd+0x40>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    4d44:	68fb      	ldr	r3, [r7, #12]
    4d46:	8a9b      	ldrh	r3, [r3, #20]
    4d48:	b29b      	uxth	r3, r3
    4d4a:	607b      	str	r3, [r7, #4]
    4d4c:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    4d50:	6879      	ldr	r1, [r7, #4]
    4d52:	ea01 0303 	and.w	r3, r1, r3
    4d56:	607b      	str	r3, [r7, #4]
    4d58:	68fa      	ldr	r2, [r7, #12]
    4d5a:	6879      	ldr	r1, [r7, #4]
    4d5c:	460b      	mov	r3, r1
    4d5e:	8293      	strh	r3, [r2, #20]
  }
}
    4d60:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4d64:	46bd      	mov	sp, r7
    4d66:	bc80      	pop	{r7}
    4d68:	4770      	bx	lr
    4d6a:	46c0      	nop			(mov r8, r8)

00004d6c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    4d6c:	b480      	push	{r7}
    4d6e:	b085      	sub	sp, #20
    4d70:	af00      	add	r7, sp, #0
    4d72:	6078      	str	r0, [r7, #4]
    4d74:	460b      	mov	r3, r1
    4d76:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    4d78:	f04f 0300 	mov.w	r3, #0	; 0x0
    4d7c:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    4d7e:	687b      	ldr	r3, [r7, #4]
    4d80:	881b      	ldrh	r3, [r3, #0]
    4d82:	b29a      	uxth	r2, r3
    4d84:	887b      	ldrh	r3, [r7, #2]
    4d86:	ea02 0303 	and.w	r3, r2, r3
    4d8a:	b29b      	uxth	r3, r3
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d003      	beq.n	4d98 <USART_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
    4d90:	f04f 0301 	mov.w	r3, #1	; 0x1
    4d94:	73fb      	strb	r3, [r7, #15]
    4d96:	e002      	b.n	4d9e <USART_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
    4d98:	f04f 0300 	mov.w	r3, #0	; 0x0
    4d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    4d9e:	7bfb      	ldrb	r3, [r7, #15]
}
    4da0:	4618      	mov	r0, r3
    4da2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4da6:	46bd      	mov	sp, r7
    4da8:	bc80      	pop	{r7}
    4daa:	4770      	bx	lr

00004dac <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    4dac:	b480      	push	{r7}
    4dae:	b083      	sub	sp, #12
    4db0:	af00      	add	r7, sp, #0
    4db2:	6078      	str	r0, [r7, #4]
    4db4:	460b      	mov	r3, r1
    4db6:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
    4db8:	887b      	ldrh	r3, [r7, #2]
    4dba:	ea6f 0303 	mvn.w	r3, r3
    4dbe:	b29b      	uxth	r3, r3
    4dc0:	687a      	ldr	r2, [r7, #4]
    4dc2:	8013      	strh	r3, [r2, #0]
}
    4dc4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4dc8:	46bd      	mov	sp, r7
    4dca:	bc80      	pop	{r7}
    4dcc:	4770      	bx	lr
    4dce:	46c0      	nop			(mov r8, r8)

00004dd0 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    4dd0:	b480      	push	{r7}
    4dd2:	b087      	sub	sp, #28
    4dd4:	af00      	add	r7, sp, #0
    4dd6:	6078      	str	r0, [r7, #4]
    4dd8:	460b      	mov	r3, r1
    4dda:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    4ddc:	f04f 0300 	mov.w	r3, #0	; 0x0
    4de0:	60bb      	str	r3, [r7, #8]
    4de2:	f04f 0300 	mov.w	r3, #0	; 0x0
    4de6:	60fb      	str	r3, [r7, #12]
    4de8:	f04f 0300 	mov.w	r3, #0	; 0x0
    4dec:	613b      	str	r3, [r7, #16]
  ITStatus bitstatus = RESET;
    4dee:	f04f 0300 	mov.w	r3, #0	; 0x0
    4df2:	75fb      	strb	r3, [r7, #23]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    4df4:	887b      	ldrh	r3, [r7, #2]
    4df6:	b2db      	uxtb	r3, r3
    4df8:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4dfc:	b2db      	uxtb	r3, r3
    4dfe:	613b      	str	r3, [r7, #16]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    4e00:	887b      	ldrh	r3, [r7, #2]
    4e02:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    4e06:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;
    4e08:	68fa      	ldr	r2, [r7, #12]
    4e0a:	f04f 0301 	mov.w	r3, #1	; 0x1
    4e0e:	fa03 f302 	lsl.w	r3, r3, r2
    4e12:	60fb      	str	r3, [r7, #12]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
    4e14:	693b      	ldr	r3, [r7, #16]
    4e16:	2b01      	cmp	r3, #1
    4e18:	d108      	bne.n	4e2c <USART_GetITStatus+0x5c>
  {
    itmask &= USARTx->CR1;
    4e1a:	687b      	ldr	r3, [r7, #4]
    4e1c:	899b      	ldrh	r3, [r3, #12]
    4e1e:	b29b      	uxth	r3, r3
    4e20:	461a      	mov	r2, r3
    4e22:	68fb      	ldr	r3, [r7, #12]
    4e24:	ea03 0302 	and.w	r3, r3, r2
    4e28:	60fb      	str	r3, [r7, #12]
    4e2a:	e013      	b.n	4e54 <USART_GetITStatus+0x84>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    4e2c:	693b      	ldr	r3, [r7, #16]
    4e2e:	2b02      	cmp	r3, #2
    4e30:	d108      	bne.n	4e44 <USART_GetITStatus+0x74>
  {
    itmask &= USARTx->CR2;
    4e32:	687b      	ldr	r3, [r7, #4]
    4e34:	8a1b      	ldrh	r3, [r3, #16]
    4e36:	b29b      	uxth	r3, r3
    4e38:	461a      	mov	r2, r3
    4e3a:	68fb      	ldr	r3, [r7, #12]
    4e3c:	ea03 0302 	and.w	r3, r3, r2
    4e40:	60fb      	str	r3, [r7, #12]
    4e42:	e007      	b.n	4e54 <USART_GetITStatus+0x84>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    4e44:	687b      	ldr	r3, [r7, #4]
    4e46:	8a9b      	ldrh	r3, [r3, #20]
    4e48:	b29b      	uxth	r3, r3
    4e4a:	461a      	mov	r2, r3
    4e4c:	68fb      	ldr	r3, [r7, #12]
    4e4e:	ea03 0302 	and.w	r3, r3, r2
    4e52:	60fb      	str	r3, [r7, #12]
  }
  
  bitpos = USART_IT >> 0x08;
    4e54:	887b      	ldrh	r3, [r7, #2]
    4e56:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4e5a:	b29b      	uxth	r3, r3
    4e5c:	60bb      	str	r3, [r7, #8]
  bitpos = (uint32_t)0x01 << bitpos;
    4e5e:	68ba      	ldr	r2, [r7, #8]
    4e60:	f04f 0301 	mov.w	r3, #1	; 0x1
    4e64:	fa03 f302 	lsl.w	r3, r3, r2
    4e68:	60bb      	str	r3, [r7, #8]
  bitpos &= USARTx->SR;
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	881b      	ldrh	r3, [r3, #0]
    4e6e:	b29b      	uxth	r3, r3
    4e70:	461a      	mov	r2, r3
    4e72:	68bb      	ldr	r3, [r7, #8]
    4e74:	ea03 0302 	and.w	r3, r3, r2
    4e78:	60bb      	str	r3, [r7, #8]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    4e7a:	68fb      	ldr	r3, [r7, #12]
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	d006      	beq.n	4e8e <USART_GetITStatus+0xbe>
    4e80:	68bb      	ldr	r3, [r7, #8]
    4e82:	2b00      	cmp	r3, #0
    4e84:	d003      	beq.n	4e8e <USART_GetITStatus+0xbe>
  {
    bitstatus = SET;
    4e86:	f04f 0301 	mov.w	r3, #1	; 0x1
    4e8a:	75fb      	strb	r3, [r7, #23]
    4e8c:	e002      	b.n	4e94 <USART_GetITStatus+0xc4>
  }
  else
  {
    bitstatus = RESET;
    4e8e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4e92:	75fb      	strb	r3, [r7, #23]
  }
  
  return bitstatus;  
    4e94:	7dfb      	ldrb	r3, [r7, #23]
}
    4e96:	4618      	mov	r0, r3
    4e98:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    4e9c:	46bd      	mov	sp, r7
    4e9e:	bc80      	pop	{r7}
    4ea0:	4770      	bx	lr
    4ea2:	46c0      	nop			(mov r8, r8)

00004ea4 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    4ea4:	b480      	push	{r7}
    4ea6:	b085      	sub	sp, #20
    4ea8:	af00      	add	r7, sp, #0
    4eaa:	6078      	str	r0, [r7, #4]
    4eac:	460b      	mov	r3, r1
    4eae:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    4eb0:	f04f 0300 	mov.w	r3, #0	; 0x0
    4eb4:	81bb      	strh	r3, [r7, #12]
    4eb6:	f04f 0300 	mov.w	r3, #0	; 0x0
    4eba:	81fb      	strh	r3, [r7, #14]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
    4ebc:	887b      	ldrh	r3, [r7, #2]
    4ebe:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4ec2:	81bb      	strh	r3, [r7, #12]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    4ec4:	89ba      	ldrh	r2, [r7, #12]
    4ec6:	f04f 0301 	mov.w	r3, #1	; 0x1
    4eca:	fa03 f302 	lsl.w	r3, r3, r2
    4ece:	81fb      	strh	r3, [r7, #14]
  USARTx->SR = (uint16_t)~itmask;
    4ed0:	89fb      	ldrh	r3, [r7, #14]
    4ed2:	ea6f 0303 	mvn.w	r3, r3
    4ed6:	b29b      	uxth	r3, r3
    4ed8:	687a      	ldr	r2, [r7, #4]
    4eda:	8013      	strh	r3, [r2, #0]
}
    4edc:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4ee0:	46bd      	mov	sp, r7
    4ee2:	bc80      	pop	{r7}
    4ee4:	4770      	bx	lr
    4ee6:	46c0      	nop			(mov r8, r8)

00004ee8 <_ZN9Ascenseur7estLeveEv>:
            qDebug() << "On ferme l'ascenseur";
}

#endif

bool Ascenseur::estLeve ()
    4ee8:	b480      	push	{r7}
    4eea:	b083      	sub	sp, #12
    4eec:	af00      	add	r7, sp, #0
    4eee:	6078      	str	r0, [r7, #4]
{
    return leve;
    4ef0:	687b      	ldr	r3, [r7, #4]
    4ef2:	781b      	ldrb	r3, [r3, #0]
}
    4ef4:	4618      	mov	r0, r3
    4ef6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4efa:	46bd      	mov	sp, r7
    4efc:	bc80      	pop	{r7}
    4efe:	4770      	bx	lr

00004f00 <_ZN9Ascenseur9estOuvertEv>:

bool Ascenseur::estOuvert ()
    4f00:	b480      	push	{r7}
    4f02:	b083      	sub	sp, #12
    4f04:	af00      	add	r7, sp, #0
    4f06:	6078      	str	r0, [r7, #4]
{
    return ouvert;
    4f08:	687b      	ldr	r3, [r7, #4]
    4f0a:	785b      	ldrb	r3, [r3, #1]
}
    4f0c:	4618      	mov	r0, r3
    4f0e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f12:	46bd      	mov	sp, r7
    4f14:	bc80      	pop	{r7}
    4f16:	4770      	bx	lr

00004f18 <_ZN9Ascenseur18getNbrPiedsStockesEv>:

int Ascenseur::getNbrPiedsStockes()
    4f18:	b480      	push	{r7}
    4f1a:	b083      	sub	sp, #12
    4f1c:	af00      	add	r7, sp, #0
    4f1e:	6078      	str	r0, [r7, #4]
{
    return nbrPiedsStockes;
    4f20:	687b      	ldr	r3, [r7, #4]
    4f22:	685b      	ldr	r3, [r3, #4]
}
    4f24:	4618      	mov	r0, r3
    4f26:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f2a:	46bd      	mov	sp, r7
    4f2c:	bc80      	pop	{r7}
    4f2e:	4770      	bx	lr

00004f30 <_ZN9Ascenseur18setNbrPiedsStockesEi>:

void Ascenseur::setNbrPiedsStockes(int nbrPiedsStockes)
    4f30:	b480      	push	{r7}
    4f32:	b083      	sub	sp, #12
    4f34:	af00      	add	r7, sp, #0
    4f36:	6078      	str	r0, [r7, #4]
    4f38:	6039      	str	r1, [r7, #0]
{
    this->nbrPiedsStockes = nbrPiedsStockes;
    4f3a:	687a      	ldr	r2, [r7, #4]
    4f3c:	683b      	ldr	r3, [r7, #0]
    4f3e:	6053      	str	r3, [r2, #4]
}
    4f40:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f44:	46bd      	mov	sp, r7
    4f46:	bc80      	pop	{r7}
    4f48:	4770      	bx	lr
    4f4a:	46c0      	nop			(mov r8, r8)

00004f4c <_ZN9Ascenseur7addPiedEv>:

void Ascenseur::addPied()
    4f4c:	b480      	push	{r7}
    4f4e:	b083      	sub	sp, #12
    4f50:	af00      	add	r7, sp, #0
    4f52:	6078      	str	r0, [r7, #4]
{
    this->nbrPiedsStockes++;
    4f54:	687b      	ldr	r3, [r7, #4]
    4f56:	685b      	ldr	r3, [r3, #4]
    4f58:	f103 0201 	add.w	r2, r3, #1	; 0x1
    4f5c:	687b      	ldr	r3, [r7, #4]
    4f5e:	605a      	str	r2, [r3, #4]
}
    4f60:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f64:	46bd      	mov	sp, r7
    4f66:	bc80      	pop	{r7}
    4f68:	4770      	bx	lr
    4f6a:	46c0      	nop			(mov r8, r8)

00004f6c <_ZN9Ascenseur20resetNbrPiedsStockesEv>:

void Ascenseur::resetNbrPiedsStockes()
    4f6c:	b480      	push	{r7}
    4f6e:	b083      	sub	sp, #12
    4f70:	af00      	add	r7, sp, #0
    4f72:	6078      	str	r0, [r7, #4]
{
    this->nbrPiedsStockes = 0;
    4f74:	687a      	ldr	r2, [r7, #4]
    4f76:	f04f 0300 	mov.w	r3, #0	; 0x0
    4f7a:	6053      	str	r3, [r2, #4]
}
    4f7c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f80:	46bd      	mov	sp, r7
    4f82:	bc80      	pop	{r7}
    4f84:	4770      	bx	lr
    4f86:	46c0      	nop			(mov r8, r8)

00004f88 <_ZN9Ascenseur15fermerAscenseurEv>:
    ServosNumeriques::moveTo(POS_ASC_OUVERT, INDEX_SERVO_PORTE_DROITE);
    ServosNumeriques::moveTo(POS_ASC_OUVERT, INDEX_SERVO_PORTE_GAUCHE);
    ouvert = true;
}

void Ascenseur::fermerAscenseur()
    4f88:	b580      	push	{r7, lr}
    4f8a:	b082      	sub	sp, #8
    4f8c:	af00      	add	r7, sp, #0
    4f8e:	6078      	str	r0, [r7, #4]
{
    ServosNumeriques::moveTo(POS_ASC_FERME, INDEX_SERVO_PORTE_DROITE);
    4f90:	f44f 700c 	mov.w	r0, #560	; 0x230
    4f94:	f04f 0110 	mov.w	r1, #16	; 0x10
    4f98:	f009 fa7c 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
    ServosNumeriques::moveTo(POS_ASC_FERME, INDEX_SERVO_PORTE_GAUCHE);
    4f9c:	f44f 700c 	mov.w	r0, #560	; 0x230
    4fa0:	f04f 010f 	mov.w	r1, #15	; 0xf
    4fa4:	f009 fa76 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
    ouvert = false;
    4fa8:	687b      	ldr	r3, [r7, #4]
    4faa:	f04f 0200 	mov.w	r2, #0	; 0x0
    4fae:	705a      	strb	r2, [r3, #1]
}
    4fb0:	f107 0708 	add.w	r7, r7, #8	; 0x8
    4fb4:	46bd      	mov	sp, r7
    4fb6:	bd80      	pop	{r7, pc}

00004fb8 <_ZN9Ascenseur15ouvrirAscenseurEv>:
{
    ServosNumeriques::moveTo(POS_ASC_BAISSE, INDEX_SERVO_ASC);
    leve = false;
}

void Ascenseur::ouvrirAscenseur()
    4fb8:	b580      	push	{r7, lr}
    4fba:	b082      	sub	sp, #8
    4fbc:	af00      	add	r7, sp, #0
    4fbe:	6078      	str	r0, [r7, #4]
{
    ServosNumeriques::moveTo(POS_ASC_OUVERT, INDEX_SERVO_PORTE_DROITE);
    4fc0:	f44f 7004 	mov.w	r0, #528	; 0x210
    4fc4:	f04f 0110 	mov.w	r1, #16	; 0x10
    4fc8:	f009 fa64 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
    ServosNumeriques::moveTo(POS_ASC_OUVERT, INDEX_SERVO_PORTE_GAUCHE);
    4fcc:	f44f 7004 	mov.w	r0, #528	; 0x210
    4fd0:	f04f 010f 	mov.w	r1, #15	; 0xf
    4fd4:	f009 fa5e 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
    ouvert = true;
    4fd8:	687b      	ldr	r3, [r7, #4]
    4fda:	f04f 0201 	mov.w	r2, #1	; 0x1
    4fde:	705a      	strb	r2, [r3, #1]
}
    4fe0:	f107 0708 	add.w	r7, r7, #8	; 0x8
    4fe4:	46bd      	mov	sp, r7
    4fe6:	bd80      	pop	{r7, pc}

00004fe8 <_ZN9Ascenseur16baisserAscenseurEv>:
{
    ServosNumeriques::moveTo(POS_ASC_LEVE, INDEX_SERVO_ASC);
    leve = true;
}

void Ascenseur::baisserAscenseur()
    4fe8:	b580      	push	{r7, lr}
    4fea:	b082      	sub	sp, #8
    4fec:	af00      	add	r7, sp, #0
    4fee:	6078      	str	r0, [r7, #4]
{
    ServosNumeriques::moveTo(POS_ASC_BAISSE, INDEX_SERVO_ASC);
    4ff0:	f04f 0000 	mov.w	r0, #0	; 0x0
    4ff4:	f04f 0100 	mov.w	r1, #0	; 0x0
    4ff8:	f009 fa4c 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
    leve = false;
    4ffc:	687b      	ldr	r3, [r7, #4]
    4ffe:	f04f 0200 	mov.w	r2, #0	; 0x0
    5002:	701a      	strb	r2, [r3, #0]
}
    5004:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5008:	46bd      	mov	sp, r7
    500a:	bd80      	pop	{r7, pc}

0000500c <_ZN9AscenseurC1Ev>:
        singleton = new Ascenseur();
    return singleton;
}

#ifdef ROBOTHW
Ascenseur::Ascenseur()
    500c:	b580      	push	{r7, lr}
    500e:	b082      	sub	sp, #8
    5010:	af00      	add	r7, sp, #0
    5012:	6078      	str	r0, [r7, #4]
{
    //this->fermerPincesAscenseur();
    this->baisserAscenseur();
    5014:	6878      	ldr	r0, [r7, #4]
    5016:	f7ff ffe7 	bl	4fe8 <_ZN9Ascenseur16baisserAscenseurEv>
}
    501a:	687b      	ldr	r3, [r7, #4]
    501c:	4618      	mov	r0, r3
    501e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5022:	46bd      	mov	sp, r7
    5024:	bd80      	pop	{r7, pc}
    5026:	46c0      	nop			(mov r8, r8)

00005028 <_ZN9AscenseurC2Ev>:
        singleton = new Ascenseur();
    return singleton;
}

#ifdef ROBOTHW
Ascenseur::Ascenseur()
    5028:	b580      	push	{r7, lr}
    502a:	b082      	sub	sp, #8
    502c:	af00      	add	r7, sp, #0
    502e:	6078      	str	r0, [r7, #4]
{
    //this->fermerPincesAscenseur();
    this->baisserAscenseur();
    5030:	6878      	ldr	r0, [r7, #4]
    5032:	f7ff ffd9 	bl	4fe8 <_ZN9Ascenseur16baisserAscenseurEv>
}
    5036:	687b      	ldr	r3, [r7, #4]
    5038:	4618      	mov	r0, r3
    503a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    503e:	46bd      	mov	sp, r7
    5040:	bd80      	pop	{r7, pc}
    5042:	46c0      	nop			(mov r8, r8)

00005044 <_ZN9Ascenseur14leverAscenseurEv>:

void Ascenseur::leverAscenseur()
    5044:	b580      	push	{r7, lr}
    5046:	b082      	sub	sp, #8
    5048:	af00      	add	r7, sp, #0
    504a:	6078      	str	r0, [r7, #4]
{
    ServosNumeriques::moveTo(POS_ASC_LEVE, INDEX_SERVO_ASC);
    504c:	f04f 0000 	mov.w	r0, #0	; 0x0
    5050:	f04f 0100 	mov.w	r1, #0	; 0x0
    5054:	f009 fa1e 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
    leve = true;
    5058:	687b      	ldr	r3, [r7, #4]
    505a:	f04f 0201 	mov.w	r2, #1	; 0x1
    505e:	701a      	strb	r2, [r3, #0]
}
    5060:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5064:	46bd      	mov	sp, r7
    5066:	bd80      	pop	{r7, pc}

00005068 <_ZN9Ascenseur12getSingletonEv>:
#define INDEX_SERVO_PORTE_DROITE 16
#define INDEX_SERVO_PORTE_GAUCHE 15

Ascenseur* Ascenseur::singleton = 0;

Ascenseur *Ascenseur::getSingleton()
    5068:	b580      	push	{r7, lr}
    506a:	b082      	sub	sp, #8
    506c:	af00      	add	r7, sp, #0
{
    if (singleton == 0)
    506e:	4b0f      	ldr	r3, [pc, #60]	(50ac <_ZN9Ascenseur12getSingletonEv+0x44>)
    5070:	681b      	ldr	r3, [r3, #0]
    5072:	2b00      	cmp	r3, #0
    5074:	d113      	bne.n	509e <_ZN9Ascenseur12getSingletonEv+0x36>
        singleton = new Ascenseur();
    5076:	f04f 0008 	mov.w	r0, #8	; 0x8
    507a:	f009 fd55 	bl	eb28 <_Znwj>
    507e:	4603      	mov	r3, r0
    5080:	603b      	str	r3, [r7, #0]
    5082:	683a      	ldr	r2, [r7, #0]
    5084:	2a00      	cmp	r2, #0
    5086:	d005      	beq.n	5094 <_ZN9Ascenseur12getSingletonEv+0x2c>
    5088:	6838      	ldr	r0, [r7, #0]
    508a:	f7ff ffbf 	bl	500c <_ZN9AscenseurC1Ev>
    508e:	683b      	ldr	r3, [r7, #0]
    5090:	607b      	str	r3, [r7, #4]
    5092:	e001      	b.n	5098 <_ZN9Ascenseur12getSingletonEv+0x30>
    5094:	683a      	ldr	r2, [r7, #0]
    5096:	607a      	str	r2, [r7, #4]
    5098:	4b04      	ldr	r3, [pc, #16]	(50ac <_ZN9Ascenseur12getSingletonEv+0x44>)
    509a:	687a      	ldr	r2, [r7, #4]
    509c:	601a      	str	r2, [r3, #0]
    return singleton;
    509e:	4b03      	ldr	r3, [pc, #12]	(50ac <_ZN9Ascenseur12getSingletonEv+0x44>)
    50a0:	681b      	ldr	r3, [r3, #0]
}
    50a2:	4618      	mov	r0, r3
    50a4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    50a8:	46bd      	mov	sp, r7
    50aa:	bd80      	pop	{r7, pc}
    50ac:	20000548 	.word	0x20000548

000050b0 <_ZN9BrasKrabi5frontEv>:
    void BrasKrabi::collapse()
    {
        servo->goToAngle(angleCollapsed);
    }

    void BrasKrabi::front()
    50b0:	b580      	push	{r7, lr}
    50b2:	b082      	sub	sp, #8
    50b4:	af00      	add	r7, sp, #0
    50b6:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleFront);
    50b8:	687b      	ldr	r3, [r7, #4]
    50ba:	681a      	ldr	r2, [r3, #0]
    50bc:	687b      	ldr	r3, [r7, #4]
    50be:	68db      	ldr	r3, [r3, #12]
    50c0:	4610      	mov	r0, r2
    50c2:	4619      	mov	r1, r3
    50c4:	f001 ff24 	bl	6f10 <_ZN5Servo9goToAngleEf>
    }
    50c8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    50cc:	46bd      	mov	sp, r7
    50ce:	bd80      	pop	{r7, pc}

000050d0 <_ZN9BrasKrabi8collapseEv>:
    void BrasKrabi::expand()
    {
        servo->goToAngle(angleExpanded);
    }

    void BrasKrabi::collapse()
    50d0:	b580      	push	{r7, lr}
    50d2:	b082      	sub	sp, #8
    50d4:	af00      	add	r7, sp, #0
    50d6:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleCollapsed);
    50d8:	687b      	ldr	r3, [r7, #4]
    50da:	681a      	ldr	r2, [r3, #0]
    50dc:	687b      	ldr	r3, [r7, #4]
    50de:	685b      	ldr	r3, [r3, #4]
    50e0:	4610      	mov	r0, r2
    50e2:	4619      	mov	r1, r3
    50e4:	f001 ff14 	bl	6f10 <_ZN5Servo9goToAngleEf>
    }
    50e8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    50ec:	46bd      	mov	sp, r7
    50ee:	bd80      	pop	{r7, pc}

000050f0 <_ZN9BrasKrabi6expandEv>:
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    {
        this->servo = new Servo(timer, OCx, RC0degre, RC180degres);
    }

    void BrasKrabi::expand()
    50f0:	b580      	push	{r7, lr}
    50f2:	b082      	sub	sp, #8
    50f4:	af00      	add	r7, sp, #0
    50f6:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleExpanded);
    50f8:	687b      	ldr	r3, [r7, #4]
    50fa:	681a      	ldr	r2, [r3, #0]
    50fc:	687b      	ldr	r3, [r7, #4]
    50fe:	689b      	ldr	r3, [r3, #8]
    5100:	4610      	mov	r0, r2
    5102:	4619      	mov	r1, r3
    5104:	f001 ff04 	bl	6f10 <_ZN5Servo9goToAngleEf>
    }
    5108:	f107 0708 	add.w	r7, r7, #8	; 0x8
    510c:	46bd      	mov	sp, r7
    510e:	bd80      	pop	{r7, pc}

00005110 <_ZN9BrasKrabiC1EP5Timerhfffff>:
#include "brasKrabi.h"

#ifdef ROBOTHW

    BrasKrabi::BrasKrabi(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    5110:	b580      	push	{r7, lr}
    5112:	b088      	sub	sp, #32
    5114:	af02      	add	r7, sp, #8
    5116:	6178      	str	r0, [r7, #20]
    5118:	6139      	str	r1, [r7, #16]
    511a:	60bb      	str	r3, [r7, #8]
    511c:	4613      	mov	r3, r2
    511e:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    5120:	697a      	ldr	r2, [r7, #20]
    5122:	6a7b      	ldr	r3, [r7, #36]
    5124:	6053      	str	r3, [r2, #4]
    5126:	697a      	ldr	r2, [r7, #20]
    5128:	6abb      	ldr	r3, [r7, #40]
    512a:	6093      	str	r3, [r2, #8]
    512c:	697a      	ldr	r2, [r7, #20]
    512e:	6afb      	ldr	r3, [r7, #44]
    5130:	60d3      	str	r3, [r2, #12]
    {
        this->servo = new Servo(timer, OCx, RC0degre, RC180degres);
    5132:	f04f 0014 	mov.w	r0, #20	; 0x14
    5136:	f009 fcf7 	bl	eb28 <_Znwj>
    513a:	4603      	mov	r3, r0
    513c:	603b      	str	r3, [r7, #0]
    513e:	683a      	ldr	r2, [r7, #0]
    5140:	2a00      	cmp	r2, #0
    5142:	d00a      	beq.n	515a <_ZN9BrasKrabiC1EP5Timerhfffff+0x4a>
    5144:	7bfa      	ldrb	r2, [r7, #15]
    5146:	6a3b      	ldr	r3, [r7, #32]
    5148:	9300      	str	r3, [sp, #0]
    514a:	6838      	ldr	r0, [r7, #0]
    514c:	6939      	ldr	r1, [r7, #16]
    514e:	68bb      	ldr	r3, [r7, #8]
    5150:	f001 ff4e 	bl	6ff0 <_ZN5ServoC1EP5Timerhff>
    5154:	683b      	ldr	r3, [r7, #0]
    5156:	607b      	str	r3, [r7, #4]
    5158:	e001      	b.n	515e <_ZN9BrasKrabiC1EP5Timerhfffff+0x4e>
    515a:	683a      	ldr	r2, [r7, #0]
    515c:	607a      	str	r2, [r7, #4]
    515e:	697b      	ldr	r3, [r7, #20]
    5160:	687a      	ldr	r2, [r7, #4]
    5162:	601a      	str	r2, [r3, #0]
    }
    5164:	697b      	ldr	r3, [r7, #20]
    5166:	4618      	mov	r0, r3
    5168:	f107 0718 	add.w	r7, r7, #24	; 0x18
    516c:	46bd      	mov	sp, r7
    516e:	bd80      	pop	{r7, pc}

00005170 <_ZN9BrasKrabiC2EP5Timerhfffff>:
#include "brasKrabi.h"

#ifdef ROBOTHW

    BrasKrabi::BrasKrabi(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    5170:	b580      	push	{r7, lr}
    5172:	b088      	sub	sp, #32
    5174:	af02      	add	r7, sp, #8
    5176:	6178      	str	r0, [r7, #20]
    5178:	6139      	str	r1, [r7, #16]
    517a:	60bb      	str	r3, [r7, #8]
    517c:	4613      	mov	r3, r2
    517e:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    5180:	697a      	ldr	r2, [r7, #20]
    5182:	6a7b      	ldr	r3, [r7, #36]
    5184:	6053      	str	r3, [r2, #4]
    5186:	697a      	ldr	r2, [r7, #20]
    5188:	6abb      	ldr	r3, [r7, #40]
    518a:	6093      	str	r3, [r2, #8]
    518c:	697a      	ldr	r2, [r7, #20]
    518e:	6afb      	ldr	r3, [r7, #44]
    5190:	60d3      	str	r3, [r2, #12]
    {
        this->servo = new Servo(timer, OCx, RC0degre, RC180degres);
    5192:	f04f 0014 	mov.w	r0, #20	; 0x14
    5196:	f009 fcc7 	bl	eb28 <_Znwj>
    519a:	4603      	mov	r3, r0
    519c:	603b      	str	r3, [r7, #0]
    519e:	683a      	ldr	r2, [r7, #0]
    51a0:	2a00      	cmp	r2, #0
    51a2:	d00a      	beq.n	51ba <_ZN9BrasKrabiC2EP5Timerhfffff+0x4a>
    51a4:	7bfa      	ldrb	r2, [r7, #15]
    51a6:	6a3b      	ldr	r3, [r7, #32]
    51a8:	9300      	str	r3, [sp, #0]
    51aa:	6838      	ldr	r0, [r7, #0]
    51ac:	6939      	ldr	r1, [r7, #16]
    51ae:	68bb      	ldr	r3, [r7, #8]
    51b0:	f001 ff1e 	bl	6ff0 <_ZN5ServoC1EP5Timerhff>
    51b4:	683b      	ldr	r3, [r7, #0]
    51b6:	607b      	str	r3, [r7, #4]
    51b8:	e001      	b.n	51be <_ZN9BrasKrabiC2EP5Timerhfffff+0x4e>
    51ba:	683a      	ldr	r2, [r7, #0]
    51bc:	607a      	str	r2, [r7, #4]
    51be:	697b      	ldr	r3, [r7, #20]
    51c0:	687a      	ldr	r2, [r7, #4]
    51c2:	601a      	str	r2, [r3, #0]
    }
    51c4:	697b      	ldr	r3, [r7, #20]
    51c6:	4618      	mov	r0, r3
    51c8:	f107 0718 	add.w	r7, r7, #24	; 0x18
    51cc:	46bd      	mov	sp, r7
    51ce:	bd80      	pop	{r7, pc}

000051d0 <_ZN12BrasLateraux5frontEv>:
    void BrasLateraux::collapse()
    {
        servo->goToAngle(angleCollapsed);
    }

    void BrasLateraux::front()
    51d0:	b580      	push	{r7, lr}
    51d2:	b082      	sub	sp, #8
    51d4:	af00      	add	r7, sp, #0
    51d6:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleFront);
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	681a      	ldr	r2, [r3, #0]
    51dc:	687b      	ldr	r3, [r7, #4]
    51de:	68db      	ldr	r3, [r3, #12]
    51e0:	4610      	mov	r0, r2
    51e2:	4619      	mov	r1, r3
    51e4:	f001 fe94 	bl	6f10 <_ZN5Servo9goToAngleEf>
    }
    51e8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    51ec:	46bd      	mov	sp, r7
    51ee:	bd80      	pop	{r7, pc}

000051f0 <_ZN12BrasLateraux8collapseEv>:
    void BrasLateraux::expand()
    {
        servo->goToAngle(angleExpanded);
    }

    void BrasLateraux::collapse()
    51f0:	b580      	push	{r7, lr}
    51f2:	b082      	sub	sp, #8
    51f4:	af00      	add	r7, sp, #0
    51f6:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleCollapsed);
    51f8:	687b      	ldr	r3, [r7, #4]
    51fa:	681a      	ldr	r2, [r3, #0]
    51fc:	687b      	ldr	r3, [r7, #4]
    51fe:	685b      	ldr	r3, [r3, #4]
    5200:	4610      	mov	r0, r2
    5202:	4619      	mov	r1, r3
    5204:	f001 fe84 	bl	6f10 <_ZN5Servo9goToAngleEf>
    }
    5208:	f107 0708 	add.w	r7, r7, #8	; 0x8
    520c:	46bd      	mov	sp, r7
    520e:	bd80      	pop	{r7, pc}

00005210 <_ZN12BrasLateraux6expandEv>:
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    {
        servo = new Servo(timer, OCx, RC0degre, RC180degres);
    }

    void BrasLateraux::expand()
    5210:	b580      	push	{r7, lr}
    5212:	b082      	sub	sp, #8
    5214:	af00      	add	r7, sp, #0
    5216:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleExpanded);
    5218:	687b      	ldr	r3, [r7, #4]
    521a:	681a      	ldr	r2, [r3, #0]
    521c:	687b      	ldr	r3, [r7, #4]
    521e:	689b      	ldr	r3, [r3, #8]
    5220:	4610      	mov	r0, r2
    5222:	4619      	mov	r1, r3
    5224:	f001 fe74 	bl	6f10 <_ZN5Servo9goToAngleEf>
    }
    5228:	f107 0708 	add.w	r7, r7, #8	; 0x8
    522c:	46bd      	mov	sp, r7
    522e:	bd80      	pop	{r7, pc}

00005230 <_ZN12BrasLaterauxC1EP5Timerhfffff>:
BrasLateraux* BrasLateraux::left = 0;
BrasLateraux* BrasLateraux::right = 0;

#ifdef ROBOTHW

    BrasLateraux::BrasLateraux(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    5230:	b580      	push	{r7, lr}
    5232:	b088      	sub	sp, #32
    5234:	af02      	add	r7, sp, #8
    5236:	6178      	str	r0, [r7, #20]
    5238:	6139      	str	r1, [r7, #16]
    523a:	60bb      	str	r3, [r7, #8]
    523c:	4613      	mov	r3, r2
    523e:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    5240:	697a      	ldr	r2, [r7, #20]
    5242:	6a7b      	ldr	r3, [r7, #36]
    5244:	6053      	str	r3, [r2, #4]
    5246:	697a      	ldr	r2, [r7, #20]
    5248:	6abb      	ldr	r3, [r7, #40]
    524a:	6093      	str	r3, [r2, #8]
    524c:	697a      	ldr	r2, [r7, #20]
    524e:	6afb      	ldr	r3, [r7, #44]
    5250:	60d3      	str	r3, [r2, #12]
    {
        servo = new Servo(timer, OCx, RC0degre, RC180degres);
    5252:	f04f 0014 	mov.w	r0, #20	; 0x14
    5256:	f009 fc67 	bl	eb28 <_Znwj>
    525a:	4603      	mov	r3, r0
    525c:	603b      	str	r3, [r7, #0]
    525e:	683a      	ldr	r2, [r7, #0]
    5260:	2a00      	cmp	r2, #0
    5262:	d00a      	beq.n	527a <_ZN12BrasLaterauxC1EP5Timerhfffff+0x4a>
    5264:	7bfa      	ldrb	r2, [r7, #15]
    5266:	6a3b      	ldr	r3, [r7, #32]
    5268:	9300      	str	r3, [sp, #0]
    526a:	6838      	ldr	r0, [r7, #0]
    526c:	6939      	ldr	r1, [r7, #16]
    526e:	68bb      	ldr	r3, [r7, #8]
    5270:	f001 febe 	bl	6ff0 <_ZN5ServoC1EP5Timerhff>
    5274:	683b      	ldr	r3, [r7, #0]
    5276:	607b      	str	r3, [r7, #4]
    5278:	e001      	b.n	527e <_ZN12BrasLaterauxC1EP5Timerhfffff+0x4e>
    527a:	683a      	ldr	r2, [r7, #0]
    527c:	607a      	str	r2, [r7, #4]
    527e:	697b      	ldr	r3, [r7, #20]
    5280:	687a      	ldr	r2, [r7, #4]
    5282:	601a      	str	r2, [r3, #0]
    }
    5284:	697b      	ldr	r3, [r7, #20]
    5286:	4618      	mov	r0, r3
    5288:	f107 0718 	add.w	r7, r7, #24	; 0x18
    528c:	46bd      	mov	sp, r7
    528e:	bd80      	pop	{r7, pc}

00005290 <_ZN12BrasLateraux16initBrasLaterauxEv>:
    void BrasLateraux::front()
    {
        servo->goToAngle(angleFront);
    }

    void BrasLateraux::initBrasLateraux()
    5290:	b580      	push	{r7, lr}
    5292:	b08c      	sub	sp, #48
    5294:	af04      	add	r7, sp, #16
            TIM_CtrlPWMOutputs(TIM3, ENABLE);

            left = new BrasLateraux(timer, 1, 0.01f, 0.11f, 87.f, 51.f, 15.f);
            right = new BrasLateraux(timer, 3, 0.01f, 0.11f, 0.f, 40.f, 77.f);
        #else // Krabi - STM32 H107
            Timer* timer = new Timer(TIM1, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    5296:	f04f 000c 	mov.w	r0, #12	; 0xc
    529a:	f009 fc45 	bl	eb28 <_Znwj>
    529e:	4603      	mov	r3, r0
    52a0:	603b      	str	r3, [r7, #0]
    52a2:	683a      	ldr	r2, [r7, #0]
    52a4:	2a00      	cmp	r2, #0
    52a6:	d00d      	beq.n	52c4 <_ZN12BrasLateraux16initBrasLaterauxEv+0x34>
    52a8:	f04f 0300 	mov.w	r3, #0	; 0x0
    52ac:	9300      	str	r3, [sp, #0]
    52ae:	6838      	ldr	r0, [r7, #0]
    52b0:	4930      	ldr	r1, [pc, #192]	(5374 <_ZN12BrasLateraux16initBrasLaterauxEv+0xe4>)
    52b2:	f644 6220 	movw	r2, #20000	; 0x4e20
    52b6:	f04f 0347 	mov.w	r3, #71	; 0x47
    52ba:	f008 fabd 	bl	d838 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    52be:	683b      	ldr	r3, [r7, #0]
    52c0:	607b      	str	r3, [r7, #4]
    52c2:	e001      	b.n	52c8 <_ZN12BrasLateraux16initBrasLaterauxEv+0x38>
    52c4:	683a      	ldr	r2, [r7, #0]
    52c6:	607a      	str	r2, [r7, #4]
    52c8:	687b      	ldr	r3, [r7, #4]
    52ca:	61fb      	str	r3, [r7, #28]
            TIM_CtrlPWMOutputs(TIM1, ENABLE);
    52cc:	4829      	ldr	r0, [pc, #164]	(5374 <_ZN12BrasLateraux16initBrasLaterauxEv+0xe4>)
    52ce:	f04f 0101 	mov.w	r1, #1	; 0x1
    52d2:	f7fd fecf 	bl	3074 <TIM_CtrlPWMOutputs>

            right = new BrasLateraux(timer, 2, 0.01f, 0.11f, 20.f, 86.f, 84.f);
    52d6:	f04f 0010 	mov.w	r0, #16	; 0x10
    52da:	f009 fc25 	bl	eb28 <_Znwj>
    52de:	4603      	mov	r3, r0
    52e0:	60bb      	str	r3, [r7, #8]
    52e2:	68ba      	ldr	r2, [r7, #8]
    52e4:	2a00      	cmp	r2, #0
    52e6:	d011      	beq.n	530c <_ZN12BrasLateraux16initBrasLaterauxEv+0x7c>
    52e8:	4b23      	ldr	r3, [pc, #140]	(5378 <_ZN12BrasLateraux16initBrasLaterauxEv+0xe8>)
    52ea:	9300      	str	r3, [sp, #0]
    52ec:	4b23      	ldr	r3, [pc, #140]	(537c <_ZN12BrasLateraux16initBrasLaterauxEv+0xec>)
    52ee:	9301      	str	r3, [sp, #4]
    52f0:	4b23      	ldr	r3, [pc, #140]	(5380 <_ZN12BrasLateraux16initBrasLaterauxEv+0xf0>)
    52f2:	9302      	str	r3, [sp, #8]
    52f4:	4b23      	ldr	r3, [pc, #140]	(5384 <_ZN12BrasLateraux16initBrasLaterauxEv+0xf4>)
    52f6:	9303      	str	r3, [sp, #12]
    52f8:	68b8      	ldr	r0, [r7, #8]
    52fa:	69f9      	ldr	r1, [r7, #28]
    52fc:	f04f 0202 	mov.w	r2, #2	; 0x2
    5300:	4b21      	ldr	r3, [pc, #132]	(5388 <_ZN12BrasLateraux16initBrasLaterauxEv+0xf8>)
    5302:	f7ff ff95 	bl	5230 <_ZN12BrasLaterauxC1EP5Timerhfffff>
    5306:	68bb      	ldr	r3, [r7, #8]
    5308:	60fb      	str	r3, [r7, #12]
    530a:	e001      	b.n	5310 <_ZN12BrasLateraux16initBrasLaterauxEv+0x80>
    530c:	68ba      	ldr	r2, [r7, #8]
    530e:	60fa      	str	r2, [r7, #12]
    5310:	4b1e      	ldr	r3, [pc, #120]	(538c <_ZN12BrasLateraux16initBrasLaterauxEv+0xfc>)
    5312:	68fa      	ldr	r2, [r7, #12]
    5314:	601a      	str	r2, [r3, #0]
            left = new BrasLateraux(timer, 3, 0.01f, 0.11f, 120.f, 36.f, 1.f);
    5316:	f04f 0010 	mov.w	r0, #16	; 0x10
    531a:	f009 fc05 	bl	eb28 <_Znwj>
    531e:	4603      	mov	r3, r0
    5320:	613b      	str	r3, [r7, #16]
    5322:	693b      	ldr	r3, [r7, #16]
    5324:	2b00      	cmp	r3, #0
    5326:	d011      	beq.n	534c <_ZN12BrasLateraux16initBrasLaterauxEv+0xbc>
    5328:	4b13      	ldr	r3, [pc, #76]	(5378 <_ZN12BrasLateraux16initBrasLaterauxEv+0xe8>)
    532a:	9300      	str	r3, [sp, #0]
    532c:	4b18      	ldr	r3, [pc, #96]	(5390 <_ZN12BrasLateraux16initBrasLaterauxEv+0x100>)
    532e:	9301      	str	r3, [sp, #4]
    5330:	4b18      	ldr	r3, [pc, #96]	(5394 <_ZN12BrasLateraux16initBrasLaterauxEv+0x104>)
    5332:	9302      	str	r3, [sp, #8]
    5334:	4b18      	ldr	r3, [pc, #96]	(5398 <_ZN12BrasLateraux16initBrasLaterauxEv+0x108>)
    5336:	9303      	str	r3, [sp, #12]
    5338:	6938      	ldr	r0, [r7, #16]
    533a:	69f9      	ldr	r1, [r7, #28]
    533c:	f04f 0203 	mov.w	r2, #3	; 0x3
    5340:	4b11      	ldr	r3, [pc, #68]	(5388 <_ZN12BrasLateraux16initBrasLaterauxEv+0xf8>)
    5342:	f7ff ff75 	bl	5230 <_ZN12BrasLaterauxC1EP5Timerhfffff>
    5346:	693a      	ldr	r2, [r7, #16]
    5348:	617a      	str	r2, [r7, #20]
    534a:	e001      	b.n	5350 <_ZN12BrasLateraux16initBrasLaterauxEv+0xc0>
    534c:	693b      	ldr	r3, [r7, #16]
    534e:	617b      	str	r3, [r7, #20]
    5350:	4b12      	ldr	r3, [pc, #72]	(539c <_ZN12BrasLateraux16initBrasLaterauxEv+0x10c>)
    5352:	697a      	ldr	r2, [r7, #20]
    5354:	601a      	str	r2, [r3, #0]


        #endif

        left->collapse();
    5356:	4b11      	ldr	r3, [pc, #68]	(539c <_ZN12BrasLateraux16initBrasLaterauxEv+0x10c>)
    5358:	681b      	ldr	r3, [r3, #0]
    535a:	4618      	mov	r0, r3
    535c:	f7ff ff48 	bl	51f0 <_ZN12BrasLateraux8collapseEv>
        right->collapse();
    5360:	4b0a      	ldr	r3, [pc, #40]	(538c <_ZN12BrasLateraux16initBrasLaterauxEv+0xfc>)
    5362:	681b      	ldr	r3, [r3, #0]
    5364:	4618      	mov	r0, r3
    5366:	f7ff ff43 	bl	51f0 <_ZN12BrasLateraux8collapseEv>
    }
    536a:	f107 0720 	add.w	r7, r7, #32	; 0x20
    536e:	46bd      	mov	sp, r7
    5370:	bd80      	pop	{r7, pc}
    5372:	46c0      	nop			(mov r8, r8)
    5374:	40012c00 	.word	0x40012c00
    5378:	3de147ae 	.word	0x3de147ae
    537c:	41a00000 	.word	0x41a00000
    5380:	42ac0000 	.word	0x42ac0000
    5384:	42a80000 	.word	0x42a80000
    5388:	3c23d70a 	.word	0x3c23d70a
    538c:	20000550 	.word	0x20000550
    5390:	42f00000 	.word	0x42f00000
    5394:	42100000 	.word	0x42100000
    5398:	3f800000 	.word	0x3f800000
    539c:	2000054c 	.word	0x2000054c

000053a0 <_ZN12BrasLateraux8getRightEv>:
        initBrasLateraux();

    return left;
}

BrasLateraux* BrasLateraux::getRight()
    53a0:	b580      	push	{r7, lr}
    53a2:	af00      	add	r7, sp, #0
{
    if (right==0)
    53a4:	4b05      	ldr	r3, [pc, #20]	(53bc <_ZN12BrasLateraux8getRightEv+0x1c>)
    53a6:	681b      	ldr	r3, [r3, #0]
    53a8:	2b00      	cmp	r3, #0
    53aa:	d101      	bne.n	53b0 <_ZN12BrasLateraux8getRightEv+0x10>
        initBrasLateraux();
    53ac:	f7ff ff70 	bl	5290 <_ZN12BrasLateraux16initBrasLaterauxEv>

    return right;
    53b0:	4b02      	ldr	r3, [pc, #8]	(53bc <_ZN12BrasLateraux8getRightEv+0x1c>)
    53b2:	681b      	ldr	r3, [r3, #0]
}
    53b4:	4618      	mov	r0, r3
    53b6:	46bd      	mov	sp, r7
    53b8:	bd80      	pop	{r7, pc}
    53ba:	46c0      	nop			(mov r8, r8)
    53bc:	20000550 	.word	0x20000550

000053c0 <_ZN12BrasLateraux7getLeftEv>:
        right = new BrasLateraux();
    }

#endif

BrasLateraux* BrasLateraux::getLeft()
    53c0:	b580      	push	{r7, lr}
    53c2:	af00      	add	r7, sp, #0
{
    if (left==0)
    53c4:	4b05      	ldr	r3, [pc, #20]	(53dc <_ZN12BrasLateraux7getLeftEv+0x1c>)
    53c6:	681b      	ldr	r3, [r3, #0]
    53c8:	2b00      	cmp	r3, #0
    53ca:	d101      	bne.n	53d0 <_ZN12BrasLateraux7getLeftEv+0x10>
        initBrasLateraux();
    53cc:	f7ff ff60 	bl	5290 <_ZN12BrasLateraux16initBrasLaterauxEv>

    return left;
    53d0:	4b02      	ldr	r3, [pc, #8]	(53dc <_ZN12BrasLateraux7getLeftEv+0x1c>)
    53d2:	681b      	ldr	r3, [r3, #0]
}
    53d4:	4618      	mov	r0, r3
    53d6:	46bd      	mov	sp, r7
    53d8:	bd80      	pop	{r7, pc}
    53da:	46c0      	nop			(mov r8, r8)
    53dc:	2000054c 	.word	0x2000054c

000053e0 <_ZN12BrasLaterauxC2EP5Timerhfffff>:
BrasLateraux* BrasLateraux::left = 0;
BrasLateraux* BrasLateraux::right = 0;

#ifdef ROBOTHW

    BrasLateraux::BrasLateraux(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    53e0:	b580      	push	{r7, lr}
    53e2:	b088      	sub	sp, #32
    53e4:	af02      	add	r7, sp, #8
    53e6:	6178      	str	r0, [r7, #20]
    53e8:	6139      	str	r1, [r7, #16]
    53ea:	60bb      	str	r3, [r7, #8]
    53ec:	4613      	mov	r3, r2
    53ee:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    53f0:	697a      	ldr	r2, [r7, #20]
    53f2:	6a7b      	ldr	r3, [r7, #36]
    53f4:	6053      	str	r3, [r2, #4]
    53f6:	697a      	ldr	r2, [r7, #20]
    53f8:	6abb      	ldr	r3, [r7, #40]
    53fa:	6093      	str	r3, [r2, #8]
    53fc:	697a      	ldr	r2, [r7, #20]
    53fe:	6afb      	ldr	r3, [r7, #44]
    5400:	60d3      	str	r3, [r2, #12]
    {
        servo = new Servo(timer, OCx, RC0degre, RC180degres);
    5402:	f04f 0014 	mov.w	r0, #20	; 0x14
    5406:	f009 fb8f 	bl	eb28 <_Znwj>
    540a:	4603      	mov	r3, r0
    540c:	603b      	str	r3, [r7, #0]
    540e:	683a      	ldr	r2, [r7, #0]
    5410:	2a00      	cmp	r2, #0
    5412:	d00a      	beq.n	542a <_ZN12BrasLaterauxC2EP5Timerhfffff+0x4a>
    5414:	7bfa      	ldrb	r2, [r7, #15]
    5416:	6a3b      	ldr	r3, [r7, #32]
    5418:	9300      	str	r3, [sp, #0]
    541a:	6838      	ldr	r0, [r7, #0]
    541c:	6939      	ldr	r1, [r7, #16]
    541e:	68bb      	ldr	r3, [r7, #8]
    5420:	f001 fde6 	bl	6ff0 <_ZN5ServoC1EP5Timerhff>
    5424:	683b      	ldr	r3, [r7, #0]
    5426:	607b      	str	r3, [r7, #4]
    5428:	e001      	b.n	542e <_ZN12BrasLaterauxC2EP5Timerhfffff+0x4e>
    542a:	683a      	ldr	r2, [r7, #0]
    542c:	607a      	str	r2, [r7, #4]
    542e:	697b      	ldr	r3, [r7, #20]
    5430:	687a      	ldr	r2, [r7, #4]
    5432:	601a      	str	r2, [r3, #0]
    }
    5434:	697b      	ldr	r3, [r7, #20]
    5436:	4618      	mov	r0, r3
    5438:	f107 0718 	add.w	r7, r7, #24	; 0x18
    543c:	46bd      	mov	sp, r7
    543e:	bd80      	pop	{r7, pc}

00005440 <_ZN9BrasTapis11fermerPinceEv>:
{
    ServosNumeriques::moveTo(positionPinceOuverte, moteurPinceHaut);
    ServosNumeriques::moveTo(positionPinceOuverte, moteurPinceBas);
}

void BrasTapis::fermerPince()
    5440:	b580      	push	{r7, lr}
    5442:	b082      	sub	sp, #8
    5444:	af00      	add	r7, sp, #0
    5446:	6078      	str	r0, [r7, #4]
{
    ServosNumeriques::moveTo(positionPinceFermee, moteurPinceHaut);
    5448:	687b      	ldr	r3, [r7, #4]
    544a:	68db      	ldr	r3, [r3, #12]
    544c:	b29a      	uxth	r2, r3
    544e:	687b      	ldr	r3, [r7, #4]
    5450:	695b      	ldr	r3, [r3, #20]
    5452:	b2db      	uxtb	r3, r3
    5454:	4610      	mov	r0, r2
    5456:	4619      	mov	r1, r3
    5458:	f009 f81c 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
    ServosNumeriques::moveTo(positionPinceFermee, moteurPinceBas);
    545c:	687b      	ldr	r3, [r7, #4]
    545e:	68db      	ldr	r3, [r3, #12]
    5460:	b29a      	uxth	r2, r3
    5462:	687b      	ldr	r3, [r7, #4]
    5464:	699b      	ldr	r3, [r3, #24]
    5466:	b2db      	uxtb	r3, r3
    5468:	4610      	mov	r0, r2
    546a:	4619      	mov	r1, r3
    546c:	f009 f812 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
}
    5470:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5474:	46bd      	mov	sp, r7
    5476:	bd80      	pop	{r7, pc}

00005478 <_ZN9BrasTapis11ouvrirPinceEv>:
void BrasTapis::fermerBras()
{
    ServosNumeriques::moveTo(positionBrasFerme, moteurBras);
}

void BrasTapis::ouvrirPince()
    5478:	b580      	push	{r7, lr}
    547a:	b082      	sub	sp, #8
    547c:	af00      	add	r7, sp, #0
    547e:	6078      	str	r0, [r7, #4]
{
    ServosNumeriques::moveTo(positionPinceOuverte, moteurPinceHaut);
    5480:	687b      	ldr	r3, [r7, #4]
    5482:	689b      	ldr	r3, [r3, #8]
    5484:	b29a      	uxth	r2, r3
    5486:	687b      	ldr	r3, [r7, #4]
    5488:	695b      	ldr	r3, [r3, #20]
    548a:	b2db      	uxtb	r3, r3
    548c:	4610      	mov	r0, r2
    548e:	4619      	mov	r1, r3
    5490:	f009 f800 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
    ServosNumeriques::moveTo(positionPinceOuverte, moteurPinceBas);
    5494:	687b      	ldr	r3, [r7, #4]
    5496:	689b      	ldr	r3, [r3, #8]
    5498:	b29a      	uxth	r2, r3
    549a:	687b      	ldr	r3, [r7, #4]
    549c:	699b      	ldr	r3, [r3, #24]
    549e:	b2db      	uxtb	r3, r3
    54a0:	4610      	mov	r0, r2
    54a2:	4619      	mov	r1, r3
    54a4:	f008 fff6 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
}
    54a8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    54ac:	46bd      	mov	sp, r7
    54ae:	bd80      	pop	{r7, pc}

000054b0 <_ZN9BrasTapis10fermerBrasEv>:
void BrasTapis::ouvrirBras()
{
    ServosNumeriques::moveTo(positionBrasOuvert, moteurBras);
}

void BrasTapis::fermerBras()
    54b0:	b580      	push	{r7, lr}
    54b2:	b082      	sub	sp, #8
    54b4:	af00      	add	r7, sp, #0
    54b6:	6078      	str	r0, [r7, #4]
{
    ServosNumeriques::moveTo(positionBrasFerme, moteurBras);
    54b8:	687b      	ldr	r3, [r7, #4]
    54ba:	685b      	ldr	r3, [r3, #4]
    54bc:	b29a      	uxth	r2, r3
    54be:	687b      	ldr	r3, [r7, #4]
    54c0:	691b      	ldr	r3, [r3, #16]
    54c2:	b2db      	uxtb	r3, r3
    54c4:	4610      	mov	r0, r2
    54c6:	4619      	mov	r1, r3
    54c8:	f008 ffe4 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
}
    54cc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    54d0:	46bd      	mov	sp, r7
    54d2:	bd80      	pop	{r7, pc}

000054d4 <_ZN9BrasTapisC1ENS_4COTEE>:


BrasTapis* BrasTapis::singleton = 0;

#ifdef ROBOTHW
BrasTapis::BrasTapis(COTE cote)
    54d4:	b580      	push	{r7, lr}
    54d6:	b082      	sub	sp, #8
    54d8:	af00      	add	r7, sp, #0
    54da:	6078      	str	r0, [r7, #4]
    54dc:	460b      	mov	r3, r1
    54de:	70fb      	strb	r3, [r7, #3]
{
    if (cote == DROIT)
    54e0:	78fb      	ldrb	r3, [r7, #3]
    54e2:	2b00      	cmp	r3, #0
    54e4:	d11c      	bne.n	5520 <_ZN9BrasTapisC1ENS_4COTEE+0x4c>
    {
        this->positionBrasOuvert = 0x00;
    54e6:	687a      	ldr	r2, [r7, #4]
    54e8:	f04f 0300 	mov.w	r3, #0	; 0x0
    54ec:	6013      	str	r3, [r2, #0]
        this->positionBrasFerme = 0x00;
    54ee:	687a      	ldr	r2, [r7, #4]
    54f0:	f04f 0300 	mov.w	r3, #0	; 0x0
    54f4:	6053      	str	r3, [r2, #4]
        this->positionPinceOuverte = 0x00;
    54f6:	687a      	ldr	r2, [r7, #4]
    54f8:	f04f 0300 	mov.w	r3, #0	; 0x0
    54fc:	6093      	str	r3, [r2, #8]
        this->positionPinceFermee = 0x00;
    54fe:	687a      	ldr	r2, [r7, #4]
    5500:	f04f 0300 	mov.w	r3, #0	; 0x0
    5504:	60d3      	str	r3, [r2, #12]
        this->moteurBras = 0;
    5506:	687a      	ldr	r2, [r7, #4]
    5508:	f04f 0300 	mov.w	r3, #0	; 0x0
    550c:	6113      	str	r3, [r2, #16]
        this->moteurPinceHaut = 0;
    550e:	687a      	ldr	r2, [r7, #4]
    5510:	f04f 0300 	mov.w	r3, #0	; 0x0
    5514:	6153      	str	r3, [r2, #20]
        this->moteurPinceBas = 0;
    5516:	687a      	ldr	r2, [r7, #4]
    5518:	f04f 0300 	mov.w	r3, #0	; 0x0
    551c:	6193      	str	r3, [r2, #24]
    551e:	e01e      	b.n	555e <_ZN9BrasTapisC1ENS_4COTEE+0x8a>
    }

    else if (cote == GAUCHE)
    5520:	78fb      	ldrb	r3, [r7, #3]
    5522:	2b01      	cmp	r3, #1
    5524:	d11b      	bne.n	555e <_ZN9BrasTapisC1ENS_4COTEE+0x8a>
    {
        this->positionBrasOuvert = 0x00;
    5526:	687a      	ldr	r2, [r7, #4]
    5528:	f04f 0300 	mov.w	r3, #0	; 0x0
    552c:	6013      	str	r3, [r2, #0]
        this->positionBrasFerme = 0x00;
    552e:	687a      	ldr	r2, [r7, #4]
    5530:	f04f 0300 	mov.w	r3, #0	; 0x0
    5534:	6053      	str	r3, [r2, #4]
        this->positionPinceOuverte = 0x00;
    5536:	687a      	ldr	r2, [r7, #4]
    5538:	f04f 0300 	mov.w	r3, #0	; 0x0
    553c:	6093      	str	r3, [r2, #8]
        this->positionPinceFermee = 0x00;
    553e:	687a      	ldr	r2, [r7, #4]
    5540:	f04f 0300 	mov.w	r3, #0	; 0x0
    5544:	60d3      	str	r3, [r2, #12]
        this->moteurBras = 0;
    5546:	687a      	ldr	r2, [r7, #4]
    5548:	f04f 0300 	mov.w	r3, #0	; 0x0
    554c:	6113      	str	r3, [r2, #16]
        this->moteurPinceHaut = 0;
    554e:	687a      	ldr	r2, [r7, #4]
    5550:	f04f 0300 	mov.w	r3, #0	; 0x0
    5554:	6153      	str	r3, [r2, #20]
        this->moteurPinceBas = 0;
    5556:	687a      	ldr	r2, [r7, #4]
    5558:	f04f 0300 	mov.w	r3, #0	; 0x0
    555c:	6193      	str	r3, [r2, #24]
    }
    this->fermerBras();
    555e:	6878      	ldr	r0, [r7, #4]
    5560:	f7ff ffa6 	bl	54b0 <_ZN9BrasTapis10fermerBrasEv>
}
    5564:	687b      	ldr	r3, [r7, #4]
    5566:	4618      	mov	r0, r3
    5568:	f107 0708 	add.w	r7, r7, #8	; 0x8
    556c:	46bd      	mov	sp, r7
    556e:	bd80      	pop	{r7, pc}

00005570 <_ZN9BrasTapisC2ENS_4COTEE>:


BrasTapis* BrasTapis::singleton = 0;

#ifdef ROBOTHW
BrasTapis::BrasTapis(COTE cote)
    5570:	b580      	push	{r7, lr}
    5572:	b082      	sub	sp, #8
    5574:	af00      	add	r7, sp, #0
    5576:	6078      	str	r0, [r7, #4]
    5578:	460b      	mov	r3, r1
    557a:	70fb      	strb	r3, [r7, #3]
{
    if (cote == DROIT)
    557c:	78fb      	ldrb	r3, [r7, #3]
    557e:	2b00      	cmp	r3, #0
    5580:	d11c      	bne.n	55bc <_ZN9BrasTapisC2ENS_4COTEE+0x4c>
    {
        this->positionBrasOuvert = 0x00;
    5582:	687a      	ldr	r2, [r7, #4]
    5584:	f04f 0300 	mov.w	r3, #0	; 0x0
    5588:	6013      	str	r3, [r2, #0]
        this->positionBrasFerme = 0x00;
    558a:	687a      	ldr	r2, [r7, #4]
    558c:	f04f 0300 	mov.w	r3, #0	; 0x0
    5590:	6053      	str	r3, [r2, #4]
        this->positionPinceOuverte = 0x00;
    5592:	687a      	ldr	r2, [r7, #4]
    5594:	f04f 0300 	mov.w	r3, #0	; 0x0
    5598:	6093      	str	r3, [r2, #8]
        this->positionPinceFermee = 0x00;
    559a:	687a      	ldr	r2, [r7, #4]
    559c:	f04f 0300 	mov.w	r3, #0	; 0x0
    55a0:	60d3      	str	r3, [r2, #12]
        this->moteurBras = 0;
    55a2:	687a      	ldr	r2, [r7, #4]
    55a4:	f04f 0300 	mov.w	r3, #0	; 0x0
    55a8:	6113      	str	r3, [r2, #16]
        this->moteurPinceHaut = 0;
    55aa:	687a      	ldr	r2, [r7, #4]
    55ac:	f04f 0300 	mov.w	r3, #0	; 0x0
    55b0:	6153      	str	r3, [r2, #20]
        this->moteurPinceBas = 0;
    55b2:	687a      	ldr	r2, [r7, #4]
    55b4:	f04f 0300 	mov.w	r3, #0	; 0x0
    55b8:	6193      	str	r3, [r2, #24]
    55ba:	e01e      	b.n	55fa <_ZN9BrasTapisC2ENS_4COTEE+0x8a>
    }

    else if (cote == GAUCHE)
    55bc:	78fb      	ldrb	r3, [r7, #3]
    55be:	2b01      	cmp	r3, #1
    55c0:	d11b      	bne.n	55fa <_ZN9BrasTapisC2ENS_4COTEE+0x8a>
    {
        this->positionBrasOuvert = 0x00;
    55c2:	687a      	ldr	r2, [r7, #4]
    55c4:	f04f 0300 	mov.w	r3, #0	; 0x0
    55c8:	6013      	str	r3, [r2, #0]
        this->positionBrasFerme = 0x00;
    55ca:	687a      	ldr	r2, [r7, #4]
    55cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    55d0:	6053      	str	r3, [r2, #4]
        this->positionPinceOuverte = 0x00;
    55d2:	687a      	ldr	r2, [r7, #4]
    55d4:	f04f 0300 	mov.w	r3, #0	; 0x0
    55d8:	6093      	str	r3, [r2, #8]
        this->positionPinceFermee = 0x00;
    55da:	687a      	ldr	r2, [r7, #4]
    55dc:	f04f 0300 	mov.w	r3, #0	; 0x0
    55e0:	60d3      	str	r3, [r2, #12]
        this->moteurBras = 0;
    55e2:	687a      	ldr	r2, [r7, #4]
    55e4:	f04f 0300 	mov.w	r3, #0	; 0x0
    55e8:	6113      	str	r3, [r2, #16]
        this->moteurPinceHaut = 0;
    55ea:	687a      	ldr	r2, [r7, #4]
    55ec:	f04f 0300 	mov.w	r3, #0	; 0x0
    55f0:	6153      	str	r3, [r2, #20]
        this->moteurPinceBas = 0;
    55f2:	687a      	ldr	r2, [r7, #4]
    55f4:	f04f 0300 	mov.w	r3, #0	; 0x0
    55f8:	6193      	str	r3, [r2, #24]
    }
    this->fermerBras();
    55fa:	6878      	ldr	r0, [r7, #4]
    55fc:	f7ff ff58 	bl	54b0 <_ZN9BrasTapis10fermerBrasEv>
}
    5600:	687b      	ldr	r3, [r7, #4]
    5602:	4618      	mov	r0, r3
    5604:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5608:	46bd      	mov	sp, r7
    560a:	bd80      	pop	{r7, pc}

0000560c <_ZN9BrasTapis10ouvrirBrasEv>:
    singleton = new BrasTapis(cote);
    return singleton;
}


void BrasTapis::ouvrirBras()
    560c:	b580      	push	{r7, lr}
    560e:	b082      	sub	sp, #8
    5610:	af00      	add	r7, sp, #0
    5612:	6078      	str	r0, [r7, #4]
{
    ServosNumeriques::moveTo(positionBrasOuvert, moteurBras);
    5614:	687b      	ldr	r3, [r7, #4]
    5616:	681b      	ldr	r3, [r3, #0]
    5618:	b29a      	uxth	r2, r3
    561a:	687b      	ldr	r3, [r7, #4]
    561c:	691b      	ldr	r3, [r3, #16]
    561e:	b2db      	uxtb	r3, r3
    5620:	4610      	mov	r0, r2
    5622:	4619      	mov	r1, r3
    5624:	f008 ff36 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
}
    5628:	f107 0708 	add.w	r7, r7, #8	; 0x8
    562c:	46bd      	mov	sp, r7
    562e:	bd80      	pop	{r7, pc}

00005630 <_ZN9BrasTapis12getSingletonENS_4COTEE>:
    this->fermerBras();
}

//TODO trouver une solution : comment discerner dans le singleton que l'on veut le bras droit ou le bras gauche? (2 getSingleton?)

BrasTapis* BrasTapis::getSingleton(COTE cote)
    5630:	b580      	push	{r7, lr}
    5632:	b084      	sub	sp, #16
    5634:	af00      	add	r7, sp, #0
    5636:	4603      	mov	r3, r0
    5638:	73fb      	strb	r3, [r7, #15]
{
    singleton = new BrasTapis(cote);
    563a:	f04f 001c 	mov.w	r0, #28	; 0x1c
    563e:	f009 fa73 	bl	eb28 <_Znwj>
    5642:	4603      	mov	r3, r0
    5644:	607b      	str	r3, [r7, #4]
    5646:	687a      	ldr	r2, [r7, #4]
    5648:	2a00      	cmp	r2, #0
    564a:	d007      	beq.n	565c <_ZN9BrasTapis12getSingletonENS_4COTEE+0x2c>
    564c:	7bfb      	ldrb	r3, [r7, #15]
    564e:	6878      	ldr	r0, [r7, #4]
    5650:	4619      	mov	r1, r3
    5652:	f7ff ff3f 	bl	54d4 <_ZN9BrasTapisC1ENS_4COTEE>
    5656:	687b      	ldr	r3, [r7, #4]
    5658:	60bb      	str	r3, [r7, #8]
    565a:	e001      	b.n	5660 <_ZN9BrasTapis12getSingletonENS_4COTEE+0x30>
    565c:	687a      	ldr	r2, [r7, #4]
    565e:	60ba      	str	r2, [r7, #8]
    5660:	4b04      	ldr	r3, [pc, #16]	(5674 <_ZN9BrasTapis12getSingletonENS_4COTEE+0x44>)
    5662:	68ba      	ldr	r2, [r7, #8]
    5664:	601a      	str	r2, [r3, #0]
    return singleton;
    5666:	4b03      	ldr	r3, [pc, #12]	(5674 <_ZN9BrasTapis12getSingletonENS_4COTEE+0x44>)
    5668:	681b      	ldr	r3, [r3, #0]
}
    566a:	4618      	mov	r0, r3
    566c:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5670:	46bd      	mov	sp, r7
    5672:	bd80      	pop	{r7, pc}
    5674:	20000554 	.word	0x20000554

00005678 <_ZN6Moteur6tourneEf>:
    #endif
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx_pwm, &GPIO_InitStructureSortie);
}

void Moteur::tourne(float rapport)
    5678:	b580      	push	{r7, lr}
    567a:	b082      	sub	sp, #8
    567c:	af00      	add	r7, sp, #0
    567e:	6078      	str	r0, [r7, #4]
    5680:	6039      	str	r1, [r7, #0]
{
    pwm.setDutyCycle(rapport);
    5682:	687b      	ldr	r3, [r7, #4]
    5684:	4618      	mov	r0, r3
    5686:	6839      	ldr	r1, [r7, #0]
    5688:	f007 f9f6 	bl	ca78 <_ZN10PWMHandler12setDutyCycleEf>
}
    568c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5690:	46bd      	mov	sp, r7
    5692:	bd80      	pop	{r7, pc}

00005694 <_ZN6MoteurC1EP11TIM_TypeDefhP12GPIO_TypeDeft>:
    #include "stm32f4xx_gpio.h"
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_gpio.h"
#endif

Moteur::Moteur(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm)
    5694:	b5b0      	push	{r4, r5, r7, lr}
    5696:	b088      	sub	sp, #32
    5698:	af02      	add	r7, sp, #8
    569a:	60f8      	str	r0, [r7, #12]
    569c:	60b9      	str	r1, [r7, #8]
    569e:	603b      	str	r3, [r7, #0]
    56a0:	4613      	mov	r3, r2
    56a2:	71fb      	strb	r3, [r7, #7]
    : pwm(new Timer(TIMx, PERIOD_TIMER_MOTEUR, PRESCALER_TIMER_MOTEUR, CLOCK_TIMER_MOTEUR), OCx)
    56a4:	68fd      	ldr	r5, [r7, #12]
    56a6:	f04f 000c 	mov.w	r0, #12	; 0xc
    56aa:	f009 fa3d 	bl	eb28 <_Znwj>
    56ae:	4603      	mov	r3, r0
    56b0:	461c      	mov	r4, r3
    56b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    56b6:	9300      	str	r3, [sp, #0]
    56b8:	4620      	mov	r0, r4
    56ba:	68b9      	ldr	r1, [r7, #8]
    56bc:	f04f 0228 	mov.w	r2, #40	; 0x28
    56c0:	f04f 0347 	mov.w	r3, #71	; 0x47
    56c4:	f008 f8b8 	bl	d838 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    56c8:	79fb      	ldrb	r3, [r7, #7]
    56ca:	4628      	mov	r0, r5
    56cc:	4621      	mov	r1, r4
    56ce:	461a      	mov	r2, r3
    56d0:	f007 f9f4 	bl	cabc <_ZN10PWMHandlerC1EP5Timerh>
{
    GPIO_InitTypeDef GPIO_InitStructureSortie;
    GPIO_InitStructureSortie.GPIO_Pin = GPIO_Pin_pwm;
    56d4:	8d3b      	ldrh	r3, [r7, #40]
    56d6:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructureSortie.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF_PP;
    56d8:	f04f 0318 	mov.w	r3, #24	; 0x18
    56dc:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    56de:	f04f 0303 	mov.w	r3, #3	; 0x3
    56e2:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_pwm, &GPIO_InitStructureSortie);
    56e4:	f107 0314 	add.w	r3, r7, #20	; 0x14
    56e8:	6838      	ldr	r0, [r7, #0]
    56ea:	4619      	mov	r1, r3
    56ec:	f7fb ffe0 	bl	16b0 <GPIO_Init>
}
    56f0:	68fb      	ldr	r3, [r7, #12]
    56f2:	4618      	mov	r0, r3
    56f4:	f107 0718 	add.w	r7, r7, #24	; 0x18
    56f8:	46bd      	mov	sp, r7
    56fa:	bdb0      	pop	{r4, r5, r7, pc}

000056fc <_ZN6MoteurC2EP11TIM_TypeDefhP12GPIO_TypeDeft>:
    #include "stm32f4xx_gpio.h"
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_gpio.h"
#endif

Moteur::Moteur(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm)
    56fc:	b5b0      	push	{r4, r5, r7, lr}
    56fe:	b088      	sub	sp, #32
    5700:	af02      	add	r7, sp, #8
    5702:	60f8      	str	r0, [r7, #12]
    5704:	60b9      	str	r1, [r7, #8]
    5706:	603b      	str	r3, [r7, #0]
    5708:	4613      	mov	r3, r2
    570a:	71fb      	strb	r3, [r7, #7]
    : pwm(new Timer(TIMx, PERIOD_TIMER_MOTEUR, PRESCALER_TIMER_MOTEUR, CLOCK_TIMER_MOTEUR), OCx)
    570c:	68fd      	ldr	r5, [r7, #12]
    570e:	f04f 000c 	mov.w	r0, #12	; 0xc
    5712:	f009 fa09 	bl	eb28 <_Znwj>
    5716:	4603      	mov	r3, r0
    5718:	461c      	mov	r4, r3
    571a:	f04f 0300 	mov.w	r3, #0	; 0x0
    571e:	9300      	str	r3, [sp, #0]
    5720:	4620      	mov	r0, r4
    5722:	68b9      	ldr	r1, [r7, #8]
    5724:	f04f 0228 	mov.w	r2, #40	; 0x28
    5728:	f04f 0347 	mov.w	r3, #71	; 0x47
    572c:	f008 f884 	bl	d838 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    5730:	79fb      	ldrb	r3, [r7, #7]
    5732:	4628      	mov	r0, r5
    5734:	4621      	mov	r1, r4
    5736:	461a      	mov	r2, r3
    5738:	f007 f9c0 	bl	cabc <_ZN10PWMHandlerC1EP5Timerh>
{
    GPIO_InitTypeDef GPIO_InitStructureSortie;
    GPIO_InitStructureSortie.GPIO_Pin = GPIO_Pin_pwm;
    573c:	8d3b      	ldrh	r3, [r7, #40]
    573e:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructureSortie.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF_PP;
    5740:	f04f 0318 	mov.w	r3, #24	; 0x18
    5744:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    5746:	f04f 0303 	mov.w	r3, #3	; 0x3
    574a:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_pwm, &GPIO_InitStructureSortie);
    574c:	f107 0314 	add.w	r3, r7, #20	; 0x14
    5750:	6838      	ldr	r0, [r7, #0]
    5752:	4619      	mov	r1, r3
    5754:	f7fb ffac 	bl	16b0 <GPIO_Init>
}
    5758:	68fb      	ldr	r3, [r7, #12]
    575a:	4618      	mov	r0, r3
    575c:	f107 0718 	add.w	r7, r7, #24	; 0x18
    5760:	46bd      	mov	sp, r7
    5762:	bdb0      	pop	{r4, r5, r7, pc}

00005764 <_ZN6Pinces11getEstDispoEv>:
    return singleton;
}

#endif

bool Pinces::getEstDispo()
    5764:	b480      	push	{r7}
    5766:	b083      	sub	sp, #12
    5768:	af00      	add	r7, sp, #0
    576a:	6078      	str	r0, [r7, #4]
{
    return estDispo;
    576c:	687b      	ldr	r3, [r7, #4]
    576e:	781b      	ldrb	r3, [r3, #0]
}
    5770:	4618      	mov	r0, r3
    5772:	f107 070c 	add.w	r7, r7, #12	; 0xc
    5776:	46bd      	mov	sp, r7
    5778:	bc80      	pop	{r7}
    577a:	4770      	bx	lr

0000577c <_ZN6Pinces11setEstDispoEv>:

void Pinces::setEstDispo()
    577c:	b480      	push	{r7}
    577e:	b083      	sub	sp, #12
    5780:	af00      	add	r7, sp, #0
    5782:	6078      	str	r0, [r7, #4]
{
    this->estDispo = true;
    5784:	687b      	ldr	r3, [r7, #4]
    5786:	f04f 0201 	mov.w	r2, #1	; 0x1
    578a:	701a      	strb	r2, [r3, #0]
}
    578c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    5790:	46bd      	mov	sp, r7
    5792:	bc80      	pop	{r7}
    5794:	4770      	bx	lr
    5796:	46c0      	nop			(mov r8, r8)

00005798 <_ZN6Pinces14setEstNonDispoEv>:

void Pinces::setEstNonDispo()
    5798:	b480      	push	{r7}
    579a:	b083      	sub	sp, #12
    579c:	af00      	add	r7, sp, #0
    579e:	6078      	str	r0, [r7, #4]
{
    this->estDispo = false;
    57a0:	687b      	ldr	r3, [r7, #4]
    57a2:	f04f 0200 	mov.w	r2, #0	; 0x0
    57a6:	701a      	strb	r2, [r3, #0]
}
    57a8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    57ac:	46bd      	mov	sp, r7
    57ae:	bc80      	pop	{r7}
    57b0:	4770      	bx	lr
    57b2:	46c0      	nop			(mov r8, r8)

000057b4 <_ZN6Pinces12fermerPincesEv>:
{
    ServosNumeriques::moveTo(positionPincesOuvertes, moteurPinceDroite);
    ServosNumeriques::moveTo(positionPincesOuvertes, moteurPinceGauche);
}

void Pinces::fermerPinces()
    57b4:	b580      	push	{r7, lr}
    57b6:	b082      	sub	sp, #8
    57b8:	af00      	add	r7, sp, #0
    57ba:	6078      	str	r0, [r7, #4]
{
    ServosNumeriques::moveTo(positionPincesFermees, moteurPinceDroite);
    57bc:	687b      	ldr	r3, [r7, #4]
    57be:	689b      	ldr	r3, [r3, #8]
    57c0:	b29a      	uxth	r2, r3
    57c2:	687b      	ldr	r3, [r7, #4]
    57c4:	691b      	ldr	r3, [r3, #16]
    57c6:	b2db      	uxtb	r3, r3
    57c8:	4610      	mov	r0, r2
    57ca:	4619      	mov	r1, r3
    57cc:	f008 fe62 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
    ServosNumeriques::moveTo(positionPincesFermees, moteurPinceGauche);
    57d0:	687b      	ldr	r3, [r7, #4]
    57d2:	689b      	ldr	r3, [r3, #8]
    57d4:	b29a      	uxth	r2, r3
    57d6:	687b      	ldr	r3, [r7, #4]
    57d8:	68db      	ldr	r3, [r3, #12]
    57da:	b2db      	uxtb	r3, r3
    57dc:	4610      	mov	r0, r2
    57de:	4619      	mov	r1, r3
    57e0:	f008 fe58 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
}
    57e4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    57e8:	46bd      	mov	sp, r7
    57ea:	bd80      	pop	{r7, pc}

000057ec <_ZN6PincesC1Ev>:
#include "pinces.h"

Pinces* Pinces::singleton = 0;

#ifdef ROBOTHW
Pinces::Pinces()
    57ec:	b580      	push	{r7, lr}
    57ee:	b082      	sub	sp, #8
    57f0:	af00      	add	r7, sp, #0
    57f2:	6078      	str	r0, [r7, #4]
{
    this->positionPincesOuvertes = 0x01D0;
    57f4:	687a      	ldr	r2, [r7, #4]
    57f6:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
    57fa:	6053      	str	r3, [r2, #4]
    this->positionPincesFermees = 0x0327;
    57fc:	687a      	ldr	r2, [r7, #4]
    57fe:	f240 3327 	movw	r3, #807	; 0x327
    5802:	6093      	str	r3, [r2, #8]
    this->moteurPinceGauche = 10;
    5804:	687a      	ldr	r2, [r7, #4]
    5806:	f04f 030a 	mov.w	r3, #10	; 0xa
    580a:	60d3      	str	r3, [r2, #12]
    this->moteurPinceDroite = 11;
    580c:	687a      	ldr	r2, [r7, #4]
    580e:	f04f 030b 	mov.w	r3, #11	; 0xb
    5812:	6113      	str	r3, [r2, #16]

    this->fermerPinces();
    5814:	6878      	ldr	r0, [r7, #4]
    5816:	f7ff ffcd 	bl	57b4 <_ZN6Pinces12fermerPincesEv>
}
    581a:	687b      	ldr	r3, [r7, #4]
    581c:	4618      	mov	r0, r3
    581e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5822:	46bd      	mov	sp, r7
    5824:	bd80      	pop	{r7, pc}
    5826:	46c0      	nop			(mov r8, r8)

00005828 <_ZN6PincesC2Ev>:
#include "pinces.h"

Pinces* Pinces::singleton = 0;

#ifdef ROBOTHW
Pinces::Pinces()
    5828:	b580      	push	{r7, lr}
    582a:	b082      	sub	sp, #8
    582c:	af00      	add	r7, sp, #0
    582e:	6078      	str	r0, [r7, #4]
{
    this->positionPincesOuvertes = 0x01D0;
    5830:	687a      	ldr	r2, [r7, #4]
    5832:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
    5836:	6053      	str	r3, [r2, #4]
    this->positionPincesFermees = 0x0327;
    5838:	687a      	ldr	r2, [r7, #4]
    583a:	f240 3327 	movw	r3, #807	; 0x327
    583e:	6093      	str	r3, [r2, #8]
    this->moteurPinceGauche = 10;
    5840:	687a      	ldr	r2, [r7, #4]
    5842:	f04f 030a 	mov.w	r3, #10	; 0xa
    5846:	60d3      	str	r3, [r2, #12]
    this->moteurPinceDroite = 11;
    5848:	687a      	ldr	r2, [r7, #4]
    584a:	f04f 030b 	mov.w	r3, #11	; 0xb
    584e:	6113      	str	r3, [r2, #16]

    this->fermerPinces();
    5850:	6878      	ldr	r0, [r7, #4]
    5852:	f7ff ffaf 	bl	57b4 <_ZN6Pinces12fermerPincesEv>
}
    5856:	687b      	ldr	r3, [r7, #4]
    5858:	4618      	mov	r0, r3
    585a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    585e:	46bd      	mov	sp, r7
    5860:	bd80      	pop	{r7, pc}
    5862:	46c0      	nop			(mov r8, r8)

00005864 <_ZN6Pinces12ouvrirPincesEv>:
    if (singleton == 0)
        singleton = new Pinces();
    return singleton;
}

void Pinces::ouvrirPinces()
    5864:	b580      	push	{r7, lr}
    5866:	b082      	sub	sp, #8
    5868:	af00      	add	r7, sp, #0
    586a:	6078      	str	r0, [r7, #4]
{
    ServosNumeriques::moveTo(positionPincesOuvertes, moteurPinceDroite);
    586c:	687b      	ldr	r3, [r7, #4]
    586e:	685b      	ldr	r3, [r3, #4]
    5870:	b29a      	uxth	r2, r3
    5872:	687b      	ldr	r3, [r7, #4]
    5874:	691b      	ldr	r3, [r3, #16]
    5876:	b2db      	uxtb	r3, r3
    5878:	4610      	mov	r0, r2
    587a:	4619      	mov	r1, r3
    587c:	f008 fe0a 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
    ServosNumeriques::moveTo(positionPincesOuvertes, moteurPinceGauche);
    5880:	687b      	ldr	r3, [r7, #4]
    5882:	685b      	ldr	r3, [r3, #4]
    5884:	b29a      	uxth	r2, r3
    5886:	687b      	ldr	r3, [r7, #4]
    5888:	68db      	ldr	r3, [r3, #12]
    588a:	b2db      	uxtb	r3, r3
    588c:	4610      	mov	r0, r2
    588e:	4619      	mov	r1, r3
    5890:	f008 fe00 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
}
    5894:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5898:	46bd      	mov	sp, r7
    589a:	bd80      	pop	{r7, pc}

0000589c <_ZN6Pinces12getSingletonEv>:
    this->moteurPinceDroite = 11;

    this->fermerPinces();
}

Pinces* Pinces::getSingleton()
    589c:	b580      	push	{r7, lr}
    589e:	b082      	sub	sp, #8
    58a0:	af00      	add	r7, sp, #0
{
    if (singleton == 0)
    58a2:	4b0f      	ldr	r3, [pc, #60]	(58e0 <_ZN6Pinces12getSingletonEv+0x44>)
    58a4:	681b      	ldr	r3, [r3, #0]
    58a6:	2b00      	cmp	r3, #0
    58a8:	d113      	bne.n	58d2 <_ZN6Pinces12getSingletonEv+0x36>
        singleton = new Pinces();
    58aa:	f04f 0014 	mov.w	r0, #20	; 0x14
    58ae:	f009 f93b 	bl	eb28 <_Znwj>
    58b2:	4603      	mov	r3, r0
    58b4:	603b      	str	r3, [r7, #0]
    58b6:	683a      	ldr	r2, [r7, #0]
    58b8:	2a00      	cmp	r2, #0
    58ba:	d005      	beq.n	58c8 <_ZN6Pinces12getSingletonEv+0x2c>
    58bc:	6838      	ldr	r0, [r7, #0]
    58be:	f7ff ff95 	bl	57ec <_ZN6PincesC1Ev>
    58c2:	683b      	ldr	r3, [r7, #0]
    58c4:	607b      	str	r3, [r7, #4]
    58c6:	e001      	b.n	58cc <_ZN6Pinces12getSingletonEv+0x30>
    58c8:	683a      	ldr	r2, [r7, #0]
    58ca:	607a      	str	r2, [r7, #4]
    58cc:	4b04      	ldr	r3, [pc, #16]	(58e0 <_ZN6Pinces12getSingletonEv+0x44>)
    58ce:	687a      	ldr	r2, [r7, #4]
    58d0:	601a      	str	r2, [r3, #0]
    return singleton;
    58d2:	4b03      	ldr	r3, [pc, #12]	(58e0 <_ZN6Pinces12getSingletonEv+0x44>)
    58d4:	681b      	ldr	r3, [r3, #0]
}
    58d6:	4618      	mov	r0, r3
    58d8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    58dc:	46bd      	mov	sp, r7
    58de:	bd80      	pop	{r7, pc}
    58e0:	20000558 	.word	0x20000558

000058e4 <_ZN5RouesC1Ev>:
#include "roues.h"

Roues::Roues()
    58e4:	b580      	push	{r7, lr}
    58e6:	b086      	sub	sp, #24
    58e8:	af04      	add	r7, sp, #16
    58ea:	6078      	str	r0, [r7, #4]
 // pour la v3 :
#ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif
#ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
    : droite(TIM5, 4, GPIOA, GPIO_Pin_3, GPIOD, GPIO_Pin_4), gauche(TIM5, 2, GPIOA, GPIO_Pin_1, GPIOD, GPIO_Pin_6)
    58ec:	687a      	ldr	r2, [r7, #4]
    58ee:	f04f 0302 	mov.w	r3, #2	; 0x2
    58f2:	9300      	str	r3, [sp, #0]
    58f4:	4b11      	ldr	r3, [pc, #68]	(593c <_ZN5RouesC1Ev+0x58>)
    58f6:	9301      	str	r3, [sp, #4]
    58f8:	f04f 0340 	mov.w	r3, #64	; 0x40
    58fc:	9302      	str	r3, [sp, #8]
    58fe:	4610      	mov	r0, r2
    5900:	490f      	ldr	r1, [pc, #60]	(5940 <_ZN5RouesC1Ev+0x5c>)
    5902:	f04f 0202 	mov.w	r2, #2	; 0x2
    5906:	4b0f      	ldr	r3, [pc, #60]	(5944 <_ZN5RouesC1Ev+0x60>)
    5908:	f007 fd1e 	bl	d348 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
    590c:	687b      	ldr	r3, [r7, #4]
    590e:	f103 0210 	add.w	r2, r3, #16	; 0x10
    5912:	f04f 0308 	mov.w	r3, #8	; 0x8
    5916:	9300      	str	r3, [sp, #0]
    5918:	4b08      	ldr	r3, [pc, #32]	(593c <_ZN5RouesC1Ev+0x58>)
    591a:	9301      	str	r3, [sp, #4]
    591c:	f04f 0310 	mov.w	r3, #16	; 0x10
    5920:	9302      	str	r3, [sp, #8]
    5922:	4610      	mov	r0, r2
    5924:	4906      	ldr	r1, [pc, #24]	(5940 <_ZN5RouesC1Ev+0x5c>)
    5926:	f04f 0204 	mov.w	r2, #4	; 0x4
    592a:	4b06      	ldr	r3, [pc, #24]	(5944 <_ZN5RouesC1Ev+0x60>)
    592c:	f007 fd0c 	bl	d348 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
#ifdef STM32F40_41xxx // pour la STM32 H405 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif

{
}
    5930:	687b      	ldr	r3, [r7, #4]
    5932:	4618      	mov	r0, r3
    5934:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5938:	46bd      	mov	sp, r7
    593a:	bd80      	pop	{r7, pc}
    593c:	40011400 	.word	0x40011400
    5940:	40000c00 	.word	0x40000c00
    5944:	40010800 	.word	0x40010800

00005948 <_ZN5RouesC2Ev>:
#include "roues.h"

Roues::Roues()
    5948:	b580      	push	{r7, lr}
    594a:	b086      	sub	sp, #24
    594c:	af04      	add	r7, sp, #16
    594e:	6078      	str	r0, [r7, #4]
 // pour la v3 :
#ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif
#ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
    : droite(TIM5, 4, GPIOA, GPIO_Pin_3, GPIOD, GPIO_Pin_4), gauche(TIM5, 2, GPIOA, GPIO_Pin_1, GPIOD, GPIO_Pin_6)
    5950:	687a      	ldr	r2, [r7, #4]
    5952:	f04f 0302 	mov.w	r3, #2	; 0x2
    5956:	9300      	str	r3, [sp, #0]
    5958:	4b11      	ldr	r3, [pc, #68]	(59a0 <_ZN5RouesC2Ev+0x58>)
    595a:	9301      	str	r3, [sp, #4]
    595c:	f04f 0340 	mov.w	r3, #64	; 0x40
    5960:	9302      	str	r3, [sp, #8]
    5962:	4610      	mov	r0, r2
    5964:	490f      	ldr	r1, [pc, #60]	(59a4 <_ZN5RouesC2Ev+0x5c>)
    5966:	f04f 0202 	mov.w	r2, #2	; 0x2
    596a:	4b0f      	ldr	r3, [pc, #60]	(59a8 <_ZN5RouesC2Ev+0x60>)
    596c:	f007 fcec 	bl	d348 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
    5970:	687b      	ldr	r3, [r7, #4]
    5972:	f103 0210 	add.w	r2, r3, #16	; 0x10
    5976:	f04f 0308 	mov.w	r3, #8	; 0x8
    597a:	9300      	str	r3, [sp, #0]
    597c:	4b08      	ldr	r3, [pc, #32]	(59a0 <_ZN5RouesC2Ev+0x58>)
    597e:	9301      	str	r3, [sp, #4]
    5980:	f04f 0310 	mov.w	r3, #16	; 0x10
    5984:	9302      	str	r3, [sp, #8]
    5986:	4610      	mov	r0, r2
    5988:	4906      	ldr	r1, [pc, #24]	(59a4 <_ZN5RouesC2Ev+0x5c>)
    598a:	f04f 0204 	mov.w	r2, #4	; 0x4
    598e:	4b06      	ldr	r3, [pc, #24]	(59a8 <_ZN5RouesC2Ev+0x60>)
    5990:	f007 fcda 	bl	d348 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
#ifdef STM32F40_41xxx // pour la STM32 H405 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif

{
}
    5994:	687b      	ldr	r3, [r7, #4]
    5996:	4618      	mov	r0, r3
    5998:	f107 0708 	add.w	r7, r7, #8	; 0x8
    599c:	46bd      	mov	sp, r7
    599e:	bd80      	pop	{r7, pc}
    59a0:	40011400 	.word	0x40011400
    59a4:	40000c00 	.word	0x40000c00
    59a8:	40010800 	.word	0x40010800

000059ac <_ZN6SensorC2Ev>:
#include "sensor.h"

Sensor::Sensor()
    59ac:	b480      	push	{r7}
    59ae:	b083      	sub	sp, #12
    59b0:	af00      	add	r7, sp, #0
    59b2:	6078      	str	r0, [r7, #4]
    59b4:	687a      	ldr	r2, [r7, #4]
    59b6:	4b04      	ldr	r3, [pc, #16]	(59c8 <_ZN6SensorC2Ev+0x1c>)
    59b8:	6013      	str	r3, [r2, #0]
{
}
    59ba:	687b      	ldr	r3, [r7, #4]
    59bc:	4618      	mov	r0, r3
    59be:	f107 070c 	add.w	r7, r7, #12	; 0xc
    59c2:	46bd      	mov	sp, r7
    59c4:	bc80      	pop	{r7}
    59c6:	4770      	bx	lr
    59c8:	00023e48 	.word	0x00023e48

000059cc <_ZN6SensorC1Ev>:
#include "sensor.h"

Sensor::Sensor()
    59cc:	b480      	push	{r7}
    59ce:	b083      	sub	sp, #12
    59d0:	af00      	add	r7, sp, #0
    59d2:	6078      	str	r0, [r7, #4]
    59d4:	687a      	ldr	r2, [r7, #4]
    59d6:	4b04      	ldr	r3, [pc, #16]	(59e8 <_ZN6SensorC1Ev+0x1c>)
    59d8:	6013      	str	r3, [r2, #0]
{
}
    59da:	687b      	ldr	r3, [r7, #4]
    59dc:	4618      	mov	r0, r3
    59de:	f107 070c 	add.w	r7, r7, #12	; 0xc
    59e2:	46bd      	mov	sp, r7
    59e4:	bc80      	pop	{r7}
    59e6:	4770      	bx	lr
    59e8:	00023e48 	.word	0x00023e48

000059ec <_ZN6SensorD0Ev>:

Sensor::~Sensor()
    59ec:	b580      	push	{r7, lr}
    59ee:	b082      	sub	sp, #8
    59f0:	af00      	add	r7, sp, #0
    59f2:	6078      	str	r0, [r7, #4]
    59f4:	687a      	ldr	r2, [r7, #4]
    59f6:	4b08      	ldr	r3, [pc, #32]	(5a18 <_ZN6SensorD0Ev+0x2c>)
    59f8:	6013      	str	r3, [r2, #0]
{
}
    59fa:	f04f 0301 	mov.w	r3, #1	; 0x1
    59fe:	b2db      	uxtb	r3, r3
    5a00:	2b00      	cmp	r3, #0
    5a02:	d002      	beq.n	5a0a <_ZN6SensorD0Ev+0x1e>
    5a04:	6878      	ldr	r0, [r7, #4]
    5a06:	f009 f935 	bl	ec74 <_ZdlPv>
    5a0a:	687b      	ldr	r3, [r7, #4]
    5a0c:	4618      	mov	r0, r3
    5a0e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5a12:	46bd      	mov	sp, r7
    5a14:	bd80      	pop	{r7, pc}
    5a16:	46c0      	nop			(mov r8, r8)
    5a18:	00023e48 	.word	0x00023e48

00005a1c <_ZN6SensorD1Ev>:

Sensor::Sensor()
{
}

Sensor::~Sensor()
    5a1c:	b580      	push	{r7, lr}
    5a1e:	b082      	sub	sp, #8
    5a20:	af00      	add	r7, sp, #0
    5a22:	6078      	str	r0, [r7, #4]
    5a24:	687a      	ldr	r2, [r7, #4]
    5a26:	4b08      	ldr	r3, [pc, #32]	(5a48 <_ZN6SensorD1Ev+0x2c>)
    5a28:	6013      	str	r3, [r2, #0]
{
}
    5a2a:	f04f 0300 	mov.w	r3, #0	; 0x0
    5a2e:	b2db      	uxtb	r3, r3
    5a30:	2b00      	cmp	r3, #0
    5a32:	d002      	beq.n	5a3a <_ZN6SensorD1Ev+0x1e>
    5a34:	6878      	ldr	r0, [r7, #4]
    5a36:	f009 f91d 	bl	ec74 <_ZdlPv>
    5a3a:	687b      	ldr	r3, [r7, #4]
    5a3c:	4618      	mov	r0, r3
    5a3e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5a42:	46bd      	mov	sp, r7
    5a44:	bd80      	pop	{r7, pc}
    5a46:	46c0      	nop			(mov r8, r8)
    5a48:	00023e48 	.word	0x00023e48

00005a4c <_ZN6SensorD2Ev>:

Sensor::Sensor()
{
}

Sensor::~Sensor()
    5a4c:	b580      	push	{r7, lr}
    5a4e:	b082      	sub	sp, #8
    5a50:	af00      	add	r7, sp, #0
    5a52:	6078      	str	r0, [r7, #4]
    5a54:	687a      	ldr	r2, [r7, #4]
    5a56:	4b08      	ldr	r3, [pc, #32]	(5a78 <_ZN6SensorD2Ev+0x2c>)
    5a58:	6013      	str	r3, [r2, #0]
{
}
    5a5a:	f04f 0300 	mov.w	r3, #0	; 0x0
    5a5e:	b2db      	uxtb	r3, r3
    5a60:	2b00      	cmp	r3, #0
    5a62:	d002      	beq.n	5a6a <_ZN6SensorD2Ev+0x1e>
    5a64:	6878      	ldr	r0, [r7, #4]
    5a66:	f009 f905 	bl	ec74 <_ZdlPv>
    5a6a:	687b      	ldr	r3, [r7, #4]
    5a6c:	4618      	mov	r0, r3
    5a6e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5a72:	46bd      	mov	sp, r7
    5a74:	bd80      	pop	{r7, pc}
    5a76:	46c0      	nop			(mov r8, r8)
    5a78:	00023e48 	.word	0x00023e48

00005a7c <_ZN7Sensors11sharpDetectEv>:
    }
   // sharpNameVector->resize();
    return sharpNameVector;
}
#include "leds.h"
bool Sensors::sharpDetect()
    5a7c:	b580      	push	{r7, lr}
    5a7e:	b086      	sub	sp, #24
    5a80:	af00      	add	r7, sp, #0
    5a82:	6078      	str	r0, [r7, #4]
{
    for (int i = 0; i< nbSharp; i++)
    5a84:	f04f 0300 	mov.w	r3, #0	; 0x0
    5a88:	617b      	str	r3, [r7, #20]
    5a8a:	e022      	b.n	5ad2 <_ZN7Sensors11sharpDetectEv+0x56>
    {
        if (sharps[i]->getValue().b == true)
    5a8c:	687b      	ldr	r3, [r7, #4]
    5a8e:	685a      	ldr	r2, [r3, #4]
    5a90:	697b      	ldr	r3, [r7, #20]
    5a92:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a96:	4413      	add	r3, r2
    5a98:	681b      	ldr	r3, [r3, #0]
    5a9a:	681b      	ldr	r3, [r3, #0]
    5a9c:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5aa0:	f8d3 c000 	ldr.w	ip, [r3]
    5aa4:	687b      	ldr	r3, [r7, #4]
    5aa6:	685a      	ldr	r2, [r3, #4]
    5aa8:	697b      	ldr	r3, [r7, #20]
    5aaa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5aae:	4413      	add	r3, r2
    5ab0:	681a      	ldr	r2, [r3, #0]
    5ab2:	f107 0308 	add.w	r3, r7, #8	; 0x8
    5ab6:	4618      	mov	r0, r3
    5ab8:	4611      	mov	r1, r2
    5aba:	47e0      	blx	ip
    5abc:	7c3b      	ldrb	r3, [r7, #16]
    5abe:	2b00      	cmp	r3, #0
    5ac0:	d003      	beq.n	5aca <_ZN7Sensors11sharpDetectEv+0x4e>
        {
            return true;
    5ac2:	f04f 0301 	mov.w	r3, #1	; 0x1
    5ac6:	603b      	str	r3, [r7, #0]
    5ac8:	e00b      	b.n	5ae2 <_ZN7Sensors11sharpDetectEv+0x66>
    return sharpNameVector;
}
#include "leds.h"
bool Sensors::sharpDetect()
{
    for (int i = 0; i< nbSharp; i++)
    5aca:	697b      	ldr	r3, [r7, #20]
    5acc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5ad0:	617b      	str	r3, [r7, #20]
    5ad2:	687b      	ldr	r3, [r7, #4]
    5ad4:	689a      	ldr	r2, [r3, #8]
    5ad6:	697b      	ldr	r3, [r7, #20]
    5ad8:	429a      	cmp	r2, r3
    5ada:	dcd7      	bgt.n	5a8c <_ZN7Sensors11sharpDetectEv+0x10>
        if (sharps[i]->getValue().b == true)
        {
            return true;
        }
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
    5adc:	f04f 0300 	mov.w	r3, #0	; 0x0
    5ae0:	603b      	str	r3, [r7, #0]
    5ae2:	683b      	ldr	r3, [r7, #0]
}
    5ae4:	4618      	mov	r0, r3
    5ae6:	f107 0718 	add.w	r7, r7, #24	; 0x18
    5aea:	46bd      	mov	sp, r7
    5aec:	bd80      	pop	{r7, pc}
    5aee:	46c0      	nop			(mov r8, r8)

00005af0 <_ZN7Sensors10getSensorsEv>:
    return outputSensorVector;
}

#endif

Sensors* Sensors::getSensors()
    5af0:	b480      	push	{r7}
    5af2:	af00      	add	r7, sp, #0
{
    return Sensors::sensors;
    5af4:	4b02      	ldr	r3, [pc, #8]	(5b00 <_ZN7Sensors10getSensorsEv+0x10>)
    5af6:	681b      	ldr	r3, [r3, #0]
}
    5af8:	4618      	mov	r0, r3
    5afa:	46bd      	mov	sp, r7
    5afc:	bc80      	pop	{r7}
    5afe:	4770      	bx	lr
    5b00:	2000055c 	.word	0x2000055c

00005b04 <_ZN7Sensors19getSharpSensorsListEv>:
       sharps[i]->setActif();
    }
}


SharpSensor** Sensors::getSharpSensorsList()
    5b04:	b480      	push	{r7}
    5b06:	b083      	sub	sp, #12
    5b08:	af00      	add	r7, sp, #0
    5b0a:	6078      	str	r0, [r7, #4]
{
    return Sensors::sharps;
    5b0c:	687b      	ldr	r3, [r7, #4]
    5b0e:	685b      	ldr	r3, [r3, #4]
}
    5b10:	4618      	mov	r0, r3
    5b12:	f107 070c 	add.w	r7, r7, #12	; 0xc
    5b16:	46bd      	mov	sp, r7
    5b18:	bc80      	pop	{r7}
    5b1a:	4770      	bx	lr

00005b1c <_ZN7Sensors14activeAllSharpEv>:
            sharps[i]->unsetActif();
            break;
        }
    }
}
void Sensors::activeAllSharp()
    5b1c:	b580      	push	{r7, lr}
    5b1e:	b084      	sub	sp, #16
    5b20:	af00      	add	r7, sp, #0
    5b22:	6078      	str	r0, [r7, #4]
{
    for (int i=0; i<nbSharp;i++)
    5b24:	f04f 0300 	mov.w	r3, #0	; 0x0
    5b28:	60fb      	str	r3, [r7, #12]
    5b2a:	e00d      	b.n	5b48 <_ZN7Sensors14activeAllSharpEv+0x2c>
    {
       sharps[i]->setActif();
    5b2c:	687b      	ldr	r3, [r7, #4]
    5b2e:	685a      	ldr	r2, [r3, #4]
    5b30:	68fb      	ldr	r3, [r7, #12]
    5b32:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b36:	4413      	add	r3, r2
    5b38:	681b      	ldr	r3, [r3, #0]
    5b3a:	4618      	mov	r0, r3
    5b3c:	f007 fc9c 	bl	d478 <_ZN11SharpSensor8setActifEv>
        }
    }
}
void Sensors::activeAllSharp()
{
    for (int i=0; i<nbSharp;i++)
    5b40:	68fb      	ldr	r3, [r7, #12]
    5b42:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5b46:	60fb      	str	r3, [r7, #12]
    5b48:	687b      	ldr	r3, [r7, #4]
    5b4a:	689a      	ldr	r2, [r3, #8]
    5b4c:	68fb      	ldr	r3, [r7, #12]
    5b4e:	429a      	cmp	r2, r3
    5b50:	dcec      	bgt.n	5b2c <_ZN7Sensors14activeAllSharpEv+0x10>
    {
       sharps[i]->setActif();
    }
}
    5b52:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5b56:	46bd      	mov	sp, r7
    5b58:	bd80      	pop	{r7, pc}
    5b5a:	46c0      	nop			(mov r8, r8)

00005b5c <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE>:
    }
    return false;
}
#endif

void Sensors::activeSharp(SharpSensor::SharpName name)
    5b5c:	b580      	push	{r7, lr}
    5b5e:	b084      	sub	sp, #16
    5b60:	af00      	add	r7, sp, #0
    5b62:	6078      	str	r0, [r7, #4]
    5b64:	460b      	mov	r3, r1
    5b66:	70fb      	strb	r3, [r7, #3]
{
    for (int i=0; i<nbSharp;i++)
    5b68:	f04f 0300 	mov.w	r3, #0	; 0x0
    5b6c:	60fb      	str	r3, [r7, #12]
    5b6e:	e022      	b.n	5bb6 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x5a>
    {
        if (sharps[i]->getName() == name)
    5b70:	687b      	ldr	r3, [r7, #4]
    5b72:	685a      	ldr	r2, [r3, #4]
    5b74:	68fb      	ldr	r3, [r7, #12]
    5b76:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b7a:	4413      	add	r3, r2
    5b7c:	681b      	ldr	r3, [r3, #0]
    5b7e:	4618      	mov	r0, r3
    5b80:	f007 fc6e 	bl	d460 <_ZN11SharpSensor7getNameEv>
    5b84:	4603      	mov	r3, r0
    5b86:	461a      	mov	r2, r3
    5b88:	78fb      	ldrb	r3, [r7, #3]
    5b8a:	4293      	cmp	r3, r2
    5b8c:	bf14      	ite	ne
    5b8e:	2300      	movne	r3, #0
    5b90:	2301      	moveq	r3, #1
    5b92:	b2db      	uxtb	r3, r3
    5b94:	2b00      	cmp	r3, #0
    5b96:	d00a      	beq.n	5bae <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x52>
        {
            sharps[i]->setActif();
    5b98:	687b      	ldr	r3, [r7, #4]
    5b9a:	685a      	ldr	r2, [r3, #4]
    5b9c:	68fb      	ldr	r3, [r7, #12]
    5b9e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ba2:	4413      	add	r3, r2
    5ba4:	681b      	ldr	r3, [r3, #0]
    5ba6:	4618      	mov	r0, r3
    5ba8:	f007 fc66 	bl	d478 <_ZN11SharpSensor8setActifEv>
    5bac:	e008      	b.n	5bc0 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x64>
}
#endif

void Sensors::activeSharp(SharpSensor::SharpName name)
{
    for (int i=0; i<nbSharp;i++)
    5bae:	68fb      	ldr	r3, [r7, #12]
    5bb0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5bb4:	60fb      	str	r3, [r7, #12]
    5bb6:	687b      	ldr	r3, [r7, #4]
    5bb8:	689a      	ldr	r2, [r3, #8]
    5bba:	68fb      	ldr	r3, [r7, #12]
    5bbc:	429a      	cmp	r2, r3
    5bbe:	dcd7      	bgt.n	5b70 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x14>
        {
            sharps[i]->setActif();
            break;
        }
    }
}
    5bc0:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5bc4:	46bd      	mov	sp, r7
    5bc6:	bd80      	pop	{r7, pc}

00005bc8 <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE>:
        }
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

bool Sensors::detectedSharp(SharpSensor::SharpName name)
    5bc8:	b580      	push	{r7, lr}
    5bca:	b088      	sub	sp, #32
    5bcc:	af00      	add	r7, sp, #0
    5bce:	60f8      	str	r0, [r7, #12]
    5bd0:	460b      	mov	r3, r1
    5bd2:	72fb      	strb	r3, [r7, #11]
{
    for (int i = 0; i< nbSharp; i++)
    5bd4:	f04f 0300 	mov.w	r3, #0	; 0x0
    5bd8:	61fb      	str	r3, [r7, #28]
    5bda:	e032      	b.n	5c42 <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x7a>
    {
        if (sharps[i]->getName() == name)
    5bdc:	68fb      	ldr	r3, [r7, #12]
    5bde:	685a      	ldr	r2, [r3, #4]
    5be0:	69fb      	ldr	r3, [r7, #28]
    5be2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5be6:	4413      	add	r3, r2
    5be8:	681b      	ldr	r3, [r3, #0]
    5bea:	4618      	mov	r0, r3
    5bec:	f007 fc38 	bl	d460 <_ZN11SharpSensor7getNameEv>
    5bf0:	4603      	mov	r3, r0
    5bf2:	461a      	mov	r2, r3
    5bf4:	7afb      	ldrb	r3, [r7, #11]
    5bf6:	4293      	cmp	r3, r2
    5bf8:	bf14      	ite	ne
    5bfa:	2300      	movne	r3, #0
    5bfc:	2301      	moveq	r3, #1
    5bfe:	b2db      	uxtb	r3, r3
    5c00:	2b00      	cmp	r3, #0
    5c02:	d01a      	beq.n	5c3a <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x72>
            return sharps[i]->getValue().b;
    5c04:	68fb      	ldr	r3, [r7, #12]
    5c06:	685a      	ldr	r2, [r3, #4]
    5c08:	69fb      	ldr	r3, [r7, #28]
    5c0a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c0e:	4413      	add	r3, r2
    5c10:	681b      	ldr	r3, [r3, #0]
    5c12:	681b      	ldr	r3, [r3, #0]
    5c14:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5c18:	f8d3 c000 	ldr.w	ip, [r3]
    5c1c:	68fb      	ldr	r3, [r7, #12]
    5c1e:	685a      	ldr	r2, [r3, #4]
    5c20:	69fb      	ldr	r3, [r7, #28]
    5c22:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c26:	4413      	add	r3, r2
    5c28:	681a      	ldr	r2, [r3, #0]
    5c2a:	f107 0310 	add.w	r3, r7, #16	; 0x10
    5c2e:	4618      	mov	r0, r3
    5c30:	4611      	mov	r1, r2
    5c32:	47e0      	blx	ip
    5c34:	7e3b      	ldrb	r3, [r7, #24]
    5c36:	607b      	str	r3, [r7, #4]
    5c38:	e00b      	b.n	5c52 <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x8a>
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

bool Sensors::detectedSharp(SharpSensor::SharpName name)
{
    for (int i = 0; i< nbSharp; i++)
    5c3a:	69fb      	ldr	r3, [r7, #28]
    5c3c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5c40:	61fb      	str	r3, [r7, #28]
    5c42:	68fb      	ldr	r3, [r7, #12]
    5c44:	689a      	ldr	r2, [r3, #8]
    5c46:	69fb      	ldr	r3, [r7, #28]
    5c48:	429a      	cmp	r2, r3
    5c4a:	dcc7      	bgt.n	5bdc <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x14>
    {
        if (sharps[i]->getName() == name)
            return sharps[i]->getValue().b;
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
    5c4c:	f04f 0300 	mov.w	r3, #0	; 0x0
    5c50:	607b      	str	r3, [r7, #4]
    5c52:	687b      	ldr	r3, [r7, #4]
}
    5c54:	4618      	mov	r0, r3
    5c56:	f107 0720 	add.w	r7, r7, #32	; 0x20
    5c5a:	46bd      	mov	sp, r7
    5c5c:	bd80      	pop	{r7, pc}
    5c5e:	46c0      	nop			(mov r8, r8)

00005c60 <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE>:
            break;
        }
    }
}

void Sensors::desactiveSharp(SharpSensor::SharpName name)
    5c60:	b580      	push	{r7, lr}
    5c62:	b084      	sub	sp, #16
    5c64:	af00      	add	r7, sp, #0
    5c66:	6078      	str	r0, [r7, #4]
    5c68:	460b      	mov	r3, r1
    5c6a:	70fb      	strb	r3, [r7, #3]
{
    for (int i=0; i<nbSharp;i++)
    5c6c:	f04f 0300 	mov.w	r3, #0	; 0x0
    5c70:	60fb      	str	r3, [r7, #12]
    5c72:	e022      	b.n	5cba <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x5a>
    {
        if (sharps[i]->getName() == name)
    5c74:	687b      	ldr	r3, [r7, #4]
    5c76:	685a      	ldr	r2, [r3, #4]
    5c78:	68fb      	ldr	r3, [r7, #12]
    5c7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c7e:	4413      	add	r3, r2
    5c80:	681b      	ldr	r3, [r3, #0]
    5c82:	4618      	mov	r0, r3
    5c84:	f007 fbec 	bl	d460 <_ZN11SharpSensor7getNameEv>
    5c88:	4603      	mov	r3, r0
    5c8a:	461a      	mov	r2, r3
    5c8c:	78fb      	ldrb	r3, [r7, #3]
    5c8e:	4293      	cmp	r3, r2
    5c90:	bf14      	ite	ne
    5c92:	2300      	movne	r3, #0
    5c94:	2301      	moveq	r3, #1
    5c96:	b2db      	uxtb	r3, r3
    5c98:	2b00      	cmp	r3, #0
    5c9a:	d00a      	beq.n	5cb2 <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x52>
        {
            sharps[i]->unsetActif();
    5c9c:	687b      	ldr	r3, [r7, #4]
    5c9e:	685a      	ldr	r2, [r3, #4]
    5ca0:	68fb      	ldr	r3, [r7, #12]
    5ca2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ca6:	4413      	add	r3, r2
    5ca8:	681b      	ldr	r3, [r3, #0]
    5caa:	4618      	mov	r0, r3
    5cac:	f007 fbf2 	bl	d494 <_ZN11SharpSensor10unsetActifEv>
    5cb0:	e008      	b.n	5cc4 <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x64>
    }
}

void Sensors::desactiveSharp(SharpSensor::SharpName name)
{
    for (int i=0; i<nbSharp;i++)
    5cb2:	68fb      	ldr	r3, [r7, #12]
    5cb4:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5cb8:	60fb      	str	r3, [r7, #12]
    5cba:	687b      	ldr	r3, [r7, #4]
    5cbc:	689a      	ldr	r2, [r3, #8]
    5cbe:	68fb      	ldr	r3, [r7, #12]
    5cc0:	429a      	cmp	r2, r3
    5cc2:	dcd7      	bgt.n	5c74 <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x14>
        {
            sharps[i]->unsetActif();
            break;
        }
    }
}
    5cc4:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5cc8:	46bd      	mov	sp, r7
    5cca:	bd80      	pop	{r7, pc}

00005ccc <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE>:
#endif
    // Les autres n'ont pas besoin d'être mis à jour car on obtient la valeur directement en lisant la valeur de la pin
}

#ifdef ROBOTHW
bool Sensors::detectedLimitSwitch(LimitSwitchSensor::LimitSwitchName limitSwitchName)
    5ccc:	b580      	push	{r7, lr}
    5cce:	b088      	sub	sp, #32
    5cd0:	af00      	add	r7, sp, #0
    5cd2:	60f8      	str	r0, [r7, #12]
    5cd4:	460b      	mov	r3, r1
    5cd6:	72fb      	strb	r3, [r7, #11]
{
    for (int i = 0; i<nbLimitSwitch; i++)
    5cd8:	f04f 0300 	mov.w	r3, #0	; 0x0
    5cdc:	61fb      	str	r3, [r7, #28]
    5cde:	e032      	b.n	5d46 <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x7a>
    {
        if (limitSwitchs[i]->getName() == limitSwitchName)
    5ce0:	68fb      	ldr	r3, [r7, #12]
    5ce2:	69da      	ldr	r2, [r3, #28]
    5ce4:	69fb      	ldr	r3, [r7, #28]
    5ce6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5cea:	4413      	add	r3, r2
    5cec:	681b      	ldr	r3, [r3, #0]
    5cee:	4618      	mov	r0, r3
    5cf0:	f006 fd70 	bl	c7d4 <_ZN17LimitSwitchSensor7getNameEv>
    5cf4:	4603      	mov	r3, r0
    5cf6:	461a      	mov	r2, r3
    5cf8:	7afb      	ldrb	r3, [r7, #11]
    5cfa:	4293      	cmp	r3, r2
    5cfc:	bf14      	ite	ne
    5cfe:	2300      	movne	r3, #0
    5d00:	2301      	moveq	r3, #1
    5d02:	b2db      	uxtb	r3, r3
    5d04:	2b00      	cmp	r3, #0
    5d06:	d01a      	beq.n	5d3e <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x72>
        {
            return limitSwitchs[i]->getValue().b;
    5d08:	68fb      	ldr	r3, [r7, #12]
    5d0a:	69da      	ldr	r2, [r3, #28]
    5d0c:	69fb      	ldr	r3, [r7, #28]
    5d0e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d12:	4413      	add	r3, r2
    5d14:	681b      	ldr	r3, [r3, #0]
    5d16:	681b      	ldr	r3, [r3, #0]
    5d18:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5d1c:	f8d3 c000 	ldr.w	ip, [r3]
    5d20:	68fb      	ldr	r3, [r7, #12]
    5d22:	69da      	ldr	r2, [r3, #28]
    5d24:	69fb      	ldr	r3, [r7, #28]
    5d26:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d2a:	4413      	add	r3, r2
    5d2c:	681a      	ldr	r2, [r3, #0]
    5d2e:	f107 0310 	add.w	r3, r7, #16	; 0x10
    5d32:	4618      	mov	r0, r3
    5d34:	4611      	mov	r1, r2
    5d36:	47e0      	blx	ip
    5d38:	7e3b      	ldrb	r3, [r7, #24]
    5d3a:	607b      	str	r3, [r7, #4]
    5d3c:	e00b      	b.n	5d56 <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x8a>
}

#ifdef ROBOTHW
bool Sensors::detectedLimitSwitch(LimitSwitchSensor::LimitSwitchName limitSwitchName)
{
    for (int i = 0; i<nbLimitSwitch; i++)
    5d3e:	69fb      	ldr	r3, [r7, #28]
    5d40:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5d44:	61fb      	str	r3, [r7, #28]
    5d46:	68fb      	ldr	r3, [r7, #12]
    5d48:	6a1a      	ldr	r2, [r3, #32]
    5d4a:	69fb      	ldr	r3, [r7, #28]
    5d4c:	429a      	cmp	r2, r3
    5d4e:	dcc7      	bgt.n	5ce0 <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x14>
        if (limitSwitchs[i]->getName() == limitSwitchName)
        {
            return limitSwitchs[i]->getValue().b;
        }
    }
    return false;
    5d50:	f04f 0300 	mov.w	r3, #0	; 0x0
    5d54:	607b      	str	r3, [r7, #4]
    5d56:	687b      	ldr	r3, [r7, #4]
}
    5d58:	4618      	mov	r0, r3
    5d5a:	f107 0720 	add.w	r7, r7, #32	; 0x20
    5d5e:	46bd      	mov	sp, r7
    5d60:	bd80      	pop	{r7, pc}
    5d62:	46c0      	nop			(mov r8, r8)

00005d64 <_ZN7Sensors6updateEv>:
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

#endif

void Sensors::update()
    5d64:	b580      	push	{r7, lr}
    5d66:	b086      	sub	sp, #24
    5d68:	af00      	add	r7, sp, #0
    5d6a:	6078      	str	r0, [r7, #4]
{
    for (int i=0; i<nbSharp; i++)
    5d6c:	f04f 0300 	mov.w	r3, #0	; 0x0
    5d70:	60fb      	str	r3, [r7, #12]
    5d72:	e00d      	b.n	5d90 <_ZN7Sensors6updateEv+0x2c>
    {
        sharps[i]->updateValue();
    5d74:	687b      	ldr	r3, [r7, #4]
    5d76:	685a      	ldr	r2, [r3, #4]
    5d78:	68fb      	ldr	r3, [r7, #12]
    5d7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d7e:	4413      	add	r3, r2
    5d80:	681b      	ldr	r3, [r3, #0]
    5d82:	4618      	mov	r0, r3
    5d84:	f007 fb94 	bl	d4b0 <_ZN11SharpSensor11updateValueEv>

#endif

void Sensors::update()
{
    for (int i=0; i<nbSharp; i++)
    5d88:	68fb      	ldr	r3, [r7, #12]
    5d8a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5d8e:	60fb      	str	r3, [r7, #12]
    5d90:	687b      	ldr	r3, [r7, #4]
    5d92:	689a      	ldr	r2, [r3, #8]
    5d94:	68fb      	ldr	r3, [r7, #12]
    5d96:	429a      	cmp	r2, r3
    5d98:	dcec      	bgt.n	5d74 <_ZN7Sensors6updateEv+0x10>
    {
        sharps[i]->updateValue();
    }
#ifdef ROBOTHW
    for (int i=0; i<nbLigthBarrier; i++)
    5d9a:	f04f 0300 	mov.w	r3, #0	; 0x0
    5d9e:	613b      	str	r3, [r7, #16]
    5da0:	e00d      	b.n	5dbe <_ZN7Sensors6updateEv+0x5a>
    {
        ligthBarriers[i]->updateValue();
    5da2:	687b      	ldr	r3, [r7, #4]
    5da4:	695a      	ldr	r2, [r3, #20]
    5da6:	693b      	ldr	r3, [r7, #16]
    5da8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5dac:	4413      	add	r3, r2
    5dae:	681b      	ldr	r3, [r3, #0]
    5db0:	4618      	mov	r0, r3
    5db2:	f006 fbf1 	bl	c598 <_ZN18LigthBarrierSensor11updateValueEv>
    for (int i=0; i<nbSharp; i++)
    {
        sharps[i]->updateValue();
    }
#ifdef ROBOTHW
    for (int i=0; i<nbLigthBarrier; i++)
    5db6:	693b      	ldr	r3, [r7, #16]
    5db8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5dbc:	613b      	str	r3, [r7, #16]
    5dbe:	687b      	ldr	r3, [r7, #4]
    5dc0:	699a      	ldr	r2, [r3, #24]
    5dc2:	693b      	ldr	r3, [r7, #16]
    5dc4:	429a      	cmp	r2, r3
    5dc6:	dcec      	bgt.n	5da2 <_ZN7Sensors6updateEv+0x3e>
    {
        ligthBarriers[i]->updateValue();
    }
    for (int i=0; i<nbLimitSwitch; i++)
    5dc8:	f04f 0300 	mov.w	r3, #0	; 0x0
    5dcc:	617b      	str	r3, [r7, #20]
    5dce:	e00d      	b.n	5dec <_ZN7Sensors6updateEv+0x88>
    {
        limitSwitchs[i]->updateValue();
    5dd0:	687b      	ldr	r3, [r7, #4]
    5dd2:	69da      	ldr	r2, [r3, #28]
    5dd4:	697b      	ldr	r3, [r7, #20]
    5dd6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5dda:	4413      	add	r3, r2
    5ddc:	681b      	ldr	r3, [r3, #0]
    5dde:	4618      	mov	r0, r3
    5de0:	f006 fd04 	bl	c7ec <_ZN17LimitSwitchSensor11updateValueEv>
#ifdef ROBOTHW
    for (int i=0; i<nbLigthBarrier; i++)
    {
        ligthBarriers[i]->updateValue();
    }
    for (int i=0; i<nbLimitSwitch; i++)
    5de4:	697b      	ldr	r3, [r7, #20]
    5de6:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5dea:	617b      	str	r3, [r7, #20]
    5dec:	687b      	ldr	r3, [r7, #4]
    5dee:	6a1a      	ldr	r2, [r3, #32]
    5df0:	697b      	ldr	r3, [r7, #20]
    5df2:	429a      	cmp	r2, r3
    5df4:	dcec      	bgt.n	5dd0 <_ZN7Sensors6updateEv+0x6c>
    {
        limitSwitchs[i]->updateValue();
    }
#endif
    // Les autres n'ont pas besoin d'être mis à jour car on obtient la valeur directement en lisant la valeur de la pin
}
    5df6:	f107 0718 	add.w	r7, r7, #24	; 0x18
    5dfa:	46bd      	mov	sp, r7
    5dfc:	bd80      	pop	{r7, pc}
    5dfe:	46c0      	nop			(mov r8, r8)

00005e00 <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE>:
    }
//    ligthBarrierNameVector->resize();
    return ligthBarrierNameVector;
}

bool Sensors::detectedLigthBarrier(LigthBarrierSensor::LigthBarrierName name)
    5e00:	b580      	push	{r7, lr}
    5e02:	b088      	sub	sp, #32
    5e04:	af00      	add	r7, sp, #0
    5e06:	60f8      	str	r0, [r7, #12]
    5e08:	460b      	mov	r3, r1
    5e0a:	72fb      	strb	r3, [r7, #11]
{
    for (int i=0; i<nbLigthBarrier; i++)
    5e0c:	f04f 0300 	mov.w	r3, #0	; 0x0
    5e10:	61fb      	str	r3, [r7, #28]
    5e12:	e032      	b.n	5e7a <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x7a>
    {
        if(ligthBarriers[i]->getName() == name)
    5e14:	68fb      	ldr	r3, [r7, #12]
    5e16:	695a      	ldr	r2, [r3, #20]
    5e18:	69fb      	ldr	r3, [r7, #28]
    5e1a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e1e:	4413      	add	r3, r2
    5e20:	681b      	ldr	r3, [r3, #0]
    5e22:	4618      	mov	r0, r3
    5e24:	f006 fbac 	bl	c580 <_ZN18LigthBarrierSensor7getNameEv>
    5e28:	4603      	mov	r3, r0
    5e2a:	461a      	mov	r2, r3
    5e2c:	7afb      	ldrb	r3, [r7, #11]
    5e2e:	4293      	cmp	r3, r2
    5e30:	bf14      	ite	ne
    5e32:	2300      	movne	r3, #0
    5e34:	2301      	moveq	r3, #1
    5e36:	b2db      	uxtb	r3, r3
    5e38:	2b00      	cmp	r3, #0
    5e3a:	d01a      	beq.n	5e72 <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x72>
        {
            return ligthBarriers[i]->getValue().b;
    5e3c:	68fb      	ldr	r3, [r7, #12]
    5e3e:	695a      	ldr	r2, [r3, #20]
    5e40:	69fb      	ldr	r3, [r7, #28]
    5e42:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e46:	4413      	add	r3, r2
    5e48:	681b      	ldr	r3, [r3, #0]
    5e4a:	681b      	ldr	r3, [r3, #0]
    5e4c:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5e50:	f8d3 c000 	ldr.w	ip, [r3]
    5e54:	68fb      	ldr	r3, [r7, #12]
    5e56:	695a      	ldr	r2, [r3, #20]
    5e58:	69fb      	ldr	r3, [r7, #28]
    5e5a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e5e:	4413      	add	r3, r2
    5e60:	681a      	ldr	r2, [r3, #0]
    5e62:	f107 0310 	add.w	r3, r7, #16	; 0x10
    5e66:	4618      	mov	r0, r3
    5e68:	4611      	mov	r1, r2
    5e6a:	47e0      	blx	ip
    5e6c:	7e3b      	ldrb	r3, [r7, #24]
    5e6e:	607b      	str	r3, [r7, #4]
    5e70:	e00b      	b.n	5e8a <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x8a>
    return ligthBarrierNameVector;
}

bool Sensors::detectedLigthBarrier(LigthBarrierSensor::LigthBarrierName name)
{
    for (int i=0; i<nbLigthBarrier; i++)
    5e72:	69fb      	ldr	r3, [r7, #28]
    5e74:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5e78:	61fb      	str	r3, [r7, #28]
    5e7a:	68fb      	ldr	r3, [r7, #12]
    5e7c:	699a      	ldr	r2, [r3, #24]
    5e7e:	69fb      	ldr	r3, [r7, #28]
    5e80:	429a      	cmp	r2, r3
    5e82:	dcc7      	bgt.n	5e14 <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x14>
        if(ligthBarriers[i]->getName() == name)
        {
            return ligthBarriers[i]->getValue().b;
        }
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
    5e84:	f04f 0300 	mov.w	r3, #0	; 0x0
    5e88:	607b      	str	r3, [r7, #4]
    5e8a:	687b      	ldr	r3, [r7, #4]
}
    5e8c:	4618      	mov	r0, r3
    5e8e:	f107 0720 	add.w	r7, r7, #32	; 0x20
    5e92:	46bd      	mov	sp, r7
    5e94:	bd80      	pop	{r7, pc}
    5e96:	46c0      	nop			(mov r8, r8)

00005e98 <_ZN7Sensors20detectedLigthBarrierEv>:
    }
    return -1;
}

#ifdef ROBOTHW
Sensors::LigthBarrierNameVector* Sensors::detectedLigthBarrier()
    5e98:	b590      	push	{r4, r7, lr}
    5e9a:	b089      	sub	sp, #36
    5e9c:	af00      	add	r7, sp, #0
    5e9e:	6078      	str	r0, [r7, #4]
{
    ligthBarrierNameVector->reset();
    5ea0:	687b      	ldr	r3, [r7, #4]
    5ea2:	6adb      	ldr	r3, [r3, #44]
    5ea4:	4618      	mov	r0, r3
    5ea6:	f018 fa77 	bl	1e398 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE5resetEv>
    for (int i=0; i<nbLigthBarrier; i++)
    5eaa:	f04f 0300 	mov.w	r3, #0	; 0x0
    5eae:	61fb      	str	r3, [r7, #28]
    5eb0:	e032      	b.n	5f18 <_ZN7Sensors20detectedLigthBarrierEv+0x80>
    {
        if(ligthBarriers[i]->getValue().b)
    5eb2:	687b      	ldr	r3, [r7, #4]
    5eb4:	695a      	ldr	r2, [r3, #20]
    5eb6:	69fb      	ldr	r3, [r7, #28]
    5eb8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ebc:	4413      	add	r3, r2
    5ebe:	681b      	ldr	r3, [r3, #0]
    5ec0:	681b      	ldr	r3, [r3, #0]
    5ec2:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5ec6:	f8d3 c000 	ldr.w	ip, [r3]
    5eca:	687b      	ldr	r3, [r7, #4]
    5ecc:	695a      	ldr	r2, [r3, #20]
    5ece:	69fb      	ldr	r3, [r7, #28]
    5ed0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ed4:	4413      	add	r3, r2
    5ed6:	681a      	ldr	r2, [r3, #0]
    5ed8:	f107 030c 	add.w	r3, r7, #12	; 0xc
    5edc:	4618      	mov	r0, r3
    5ede:	4611      	mov	r1, r2
    5ee0:	47e0      	blx	ip
    5ee2:	7d3b      	ldrb	r3, [r7, #20]
    5ee4:	2b00      	cmp	r3, #0
    5ee6:	d013      	beq.n	5f10 <_ZN7Sensors20detectedLigthBarrierEv+0x78>
        {
            ligthBarrierNameVector->push_back(ligthBarriers[i]->getName());
    5ee8:	687b      	ldr	r3, [r7, #4]
    5eea:	6adc      	ldr	r4, [r3, #44]
    5eec:	687b      	ldr	r3, [r7, #4]
    5eee:	695a      	ldr	r2, [r3, #20]
    5ef0:	69fb      	ldr	r3, [r7, #28]
    5ef2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ef6:	4413      	add	r3, r2
    5ef8:	681b      	ldr	r3, [r3, #0]
    5efa:	4618      	mov	r0, r3
    5efc:	f006 fb40 	bl	c580 <_ZN18LigthBarrierSensor7getNameEv>
    5f00:	4603      	mov	r3, r0
    5f02:	76fb      	strb	r3, [r7, #27]
    5f04:	f107 031b 	add.w	r3, r7, #27	; 0x1b
    5f08:	4620      	mov	r0, r4
    5f0a:	4619      	mov	r1, r3
    5f0c:	f018 fab8 	bl	1e480 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_>

#ifdef ROBOTHW
Sensors::LigthBarrierNameVector* Sensors::detectedLigthBarrier()
{
    ligthBarrierNameVector->reset();
    for (int i=0; i<nbLigthBarrier; i++)
    5f10:	69fb      	ldr	r3, [r7, #28]
    5f12:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5f16:	61fb      	str	r3, [r7, #28]
    5f18:	687b      	ldr	r3, [r7, #4]
    5f1a:	699a      	ldr	r2, [r3, #24]
    5f1c:	69fb      	ldr	r3, [r7, #28]
    5f1e:	429a      	cmp	r2, r3
    5f20:	dcc7      	bgt.n	5eb2 <_ZN7Sensors20detectedLigthBarrierEv+0x1a>
        {
            ligthBarrierNameVector->push_back(ligthBarriers[i]->getName());
        }
    }
//    ligthBarrierNameVector->resize();
    return ligthBarrierNameVector;
    5f22:	687b      	ldr	r3, [r7, #4]
    5f24:	6adb      	ldr	r3, [r3, #44]
}
    5f26:	4618      	mov	r0, r3
    5f28:	f107 0724 	add.w	r7, r7, #36	; 0x24
    5f2c:	46bd      	mov	sp, r7
    5f2e:	bd90      	pop	{r4, r7, pc}

00005f30 <_ZN7Sensors18getValueUltrasoundEt>:
    return Sensors::sensors;
}



Sensors::OutputSensorVector* Sensors::getValueUltrasound(uint16_t distance)
    5f30:	b590      	push	{r4, r7, lr}
    5f32:	b087      	sub	sp, #28
    5f34:	af00      	add	r7, sp, #0
    5f36:	6078      	str	r0, [r7, #4]
    5f38:	460b      	mov	r3, r1
    5f3a:	807b      	strh	r3, [r7, #2]
{
    outputSensorVector->reset();
    5f3c:	687b      	ldr	r3, [r7, #4]
    5f3e:	6b1b      	ldr	r3, [r3, #48]
    5f40:	4618      	mov	r0, r3
    5f42:	f018 fa1b 	bl	1e37c <_ZN6vectorIN6Sensor12OutputSensorEE5resetEv>
    for (int i = 0; i < nbUltrasound; i++)
    5f46:	f04f 0300 	mov.w	r3, #0	; 0x0
    5f4a:	617b      	str	r3, [r7, #20]
    5f4c:	e030      	b.n	5fb0 <_ZN7Sensors18getValueUltrasoundEt+0x80>
    {
        Sensor::OutputSensor v = ultrasounds[i]->getValue();
    5f4e:	687b      	ldr	r3, [r7, #4]
    5f50:	68da      	ldr	r2, [r3, #12]
    5f52:	697b      	ldr	r3, [r7, #20]
    5f54:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5f58:	4413      	add	r3, r2
    5f5a:	681b      	ldr	r3, [r3, #0]
    5f5c:	681b      	ldr	r3, [r3, #0]
    5f5e:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5f62:	f8d3 c000 	ldr.w	ip, [r3]
    5f66:	687b      	ldr	r3, [r7, #4]
    5f68:	68da      	ldr	r2, [r3, #12]
    5f6a:	697b      	ldr	r3, [r7, #20]
    5f6c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5f70:	4413      	add	r3, r2
    5f72:	681a      	ldr	r2, [r3, #0]
    5f74:	f107 0308 	add.w	r3, r7, #8	; 0x8
    5f78:	4618      	mov	r0, r3
    5f7a:	4611      	mov	r1, r2
    5f7c:	47e0      	blx	ip
         if (v.f < distance)
    5f7e:	68fc      	ldr	r4, [r7, #12]
    5f80:	887b      	ldrh	r3, [r7, #2]
    5f82:	4618      	mov	r0, r3
    5f84:	f016 ff58 	bl	1ce38 <__aeabi_i2f>
    5f88:	4603      	mov	r3, r0
    5f8a:	4620      	mov	r0, r4
    5f8c:	4619      	mov	r1, r3
    5f8e:	f017 f943 	bl	1d218 <__aeabi_fcmplt>
    5f92:	4603      	mov	r3, r0
    5f94:	2b00      	cmp	r3, #0
    5f96:	d007      	beq.n	5fa8 <_ZN7Sensors18getValueUltrasoundEt+0x78>
         {
             outputSensorVector->push_back(v);
    5f98:	687b      	ldr	r3, [r7, #4]
    5f9a:	6b1b      	ldr	r3, [r3, #48]
    5f9c:	f107 0208 	add.w	r2, r7, #8	; 0x8
    5fa0:	4618      	mov	r0, r3
    5fa2:	4611      	mov	r1, r2
    5fa4:	f018 fac8 	bl	1e538 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_>


Sensors::OutputSensorVector* Sensors::getValueUltrasound(uint16_t distance)
{
    outputSensorVector->reset();
    for (int i = 0; i < nbUltrasound; i++)
    5fa8:	697b      	ldr	r3, [r7, #20]
    5faa:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5fae:	617b      	str	r3, [r7, #20]
    5fb0:	687b      	ldr	r3, [r7, #4]
    5fb2:	691a      	ldr	r2, [r3, #16]
    5fb4:	697b      	ldr	r3, [r7, #20]
    5fb6:	429a      	cmp	r2, r3
    5fb8:	dcc9      	bgt.n	5f4e <_ZN7Sensors18getValueUltrasoundEt+0x1e>
         {
             outputSensorVector->push_back(v);
         }
    }
//    outputSensorVector->resize();
    return outputSensorVector;
    5fba:	687b      	ldr	r3, [r7, #4]
    5fbc:	6b1b      	ldr	r3, [r3, #48]
}
    5fbe:	4618      	mov	r0, r3
    5fc0:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    5fc4:	46bd      	mov	sp, r7
    5fc6:	bd90      	pop	{r4, r7, pc}

00005fc8 <_ZN7Sensors18getValueUltrasoundEv>:
//    limitSwitchNameVector->resize();
    return limitSwitchNameVector;
}


Sensors::OutputSensorVector* Sensors::getValueUltrasound()
    5fc8:	b590      	push	{r4, r7, lr}
    5fca:	b087      	sub	sp, #28
    5fcc:	af00      	add	r7, sp, #0
    5fce:	6078      	str	r0, [r7, #4]
{
    outputSensorVector->reset();
    5fd0:	687b      	ldr	r3, [r7, #4]
    5fd2:	6b1b      	ldr	r3, [r3, #48]
    5fd4:	4618      	mov	r0, r3
    5fd6:	f018 f9d1 	bl	1e37c <_ZN6vectorIN6Sensor12OutputSensorEE5resetEv>
    for (int i = 0; i < nbUltrasound; i++)
    5fda:	f04f 0300 	mov.w	r3, #0	; 0x0
    5fde:	617b      	str	r3, [r7, #20]
    5fe0:	e023      	b.n	602a <_ZN7Sensors18getValueUltrasoundEv+0x62>
    {
        outputSensorVector->push_back(ultrasounds[i]->getValue());
    5fe2:	687b      	ldr	r3, [r7, #4]
    5fe4:	6b1c      	ldr	r4, [r3, #48]
    5fe6:	687b      	ldr	r3, [r7, #4]
    5fe8:	68da      	ldr	r2, [r3, #12]
    5fea:	697b      	ldr	r3, [r7, #20]
    5fec:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ff0:	4413      	add	r3, r2
    5ff2:	681b      	ldr	r3, [r3, #0]
    5ff4:	681b      	ldr	r3, [r3, #0]
    5ff6:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5ffa:	f8d3 c000 	ldr.w	ip, [r3]
    5ffe:	687b      	ldr	r3, [r7, #4]
    6000:	68da      	ldr	r2, [r3, #12]
    6002:	697b      	ldr	r3, [r7, #20]
    6004:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6008:	4413      	add	r3, r2
    600a:	681a      	ldr	r2, [r3, #0]
    600c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    6010:	4618      	mov	r0, r3
    6012:	4611      	mov	r1, r2
    6014:	47e0      	blx	ip
    6016:	f107 0308 	add.w	r3, r7, #8	; 0x8
    601a:	4620      	mov	r0, r4
    601c:	4619      	mov	r1, r3
    601e:	f018 fa8b 	bl	1e538 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_>


Sensors::OutputSensorVector* Sensors::getValueUltrasound()
{
    outputSensorVector->reset();
    for (int i = 0; i < nbUltrasound; i++)
    6022:	697b      	ldr	r3, [r7, #20]
    6024:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6028:	617b      	str	r3, [r7, #20]
    602a:	687b      	ldr	r3, [r7, #4]
    602c:	691a      	ldr	r2, [r3, #16]
    602e:	697b      	ldr	r3, [r7, #20]
    6030:	429a      	cmp	r2, r3
    6032:	dcd6      	bgt.n	5fe2 <_ZN7Sensors18getValueUltrasoundEv+0x1a>
    {
        outputSensorVector->push_back(ultrasounds[i]->getValue());
    }
//    outputSensorVector->resize();
    return outputSensorVector;
    6034:	687b      	ldr	r3, [r7, #4]
    6036:	6b1b      	ldr	r3, [r3, #48]
}
    6038:	4618      	mov	r0, r3
    603a:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    603e:	46bd      	mov	sp, r7
    6040:	bd90      	pop	{r4, r7, pc}
    6042:	46c0      	nop			(mov r8, r8)

00006044 <_ZN7Sensors19detectedLimitSwitchEv>:
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

#ifdef ROBOTHW
Sensors::LimitSwitchNameVector* Sensors::detectedLimitSwitch()
    6044:	b590      	push	{r4, r7, lr}
    6046:	b089      	sub	sp, #36
    6048:	af00      	add	r7, sp, #0
    604a:	6078      	str	r0, [r7, #4]
{
    limitSwitchNameVector->reset();
    604c:	687b      	ldr	r3, [r7, #4]
    604e:	6a9b      	ldr	r3, [r3, #40]
    6050:	4618      	mov	r0, r3
    6052:	f018 f985 	bl	1e360 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE5resetEv>
    for (int i = 0; i<nbLimitSwitch; i++)
    6056:	f04f 0300 	mov.w	r3, #0	; 0x0
    605a:	61fb      	str	r3, [r7, #28]
    605c:	e032      	b.n	60c4 <_ZN7Sensors19detectedLimitSwitchEv+0x80>
    {
        if (limitSwitchs[i]->getValue().b)
    605e:	687b      	ldr	r3, [r7, #4]
    6060:	69da      	ldr	r2, [r3, #28]
    6062:	69fb      	ldr	r3, [r7, #28]
    6064:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6068:	4413      	add	r3, r2
    606a:	681b      	ldr	r3, [r3, #0]
    606c:	681b      	ldr	r3, [r3, #0]
    606e:	f103 0308 	add.w	r3, r3, #8	; 0x8
    6072:	f8d3 c000 	ldr.w	ip, [r3]
    6076:	687b      	ldr	r3, [r7, #4]
    6078:	69da      	ldr	r2, [r3, #28]
    607a:	69fb      	ldr	r3, [r7, #28]
    607c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6080:	4413      	add	r3, r2
    6082:	681a      	ldr	r2, [r3, #0]
    6084:	f107 030c 	add.w	r3, r7, #12	; 0xc
    6088:	4618      	mov	r0, r3
    608a:	4611      	mov	r1, r2
    608c:	47e0      	blx	ip
    608e:	7d3b      	ldrb	r3, [r7, #20]
    6090:	2b00      	cmp	r3, #0
    6092:	d013      	beq.n	60bc <_ZN7Sensors19detectedLimitSwitchEv+0x78>
        {
            limitSwitchNameVector->push_back(limitSwitchs[i]->getName());
    6094:	687b      	ldr	r3, [r7, #4]
    6096:	6a9c      	ldr	r4, [r3, #40]
    6098:	687b      	ldr	r3, [r7, #4]
    609a:	69da      	ldr	r2, [r3, #28]
    609c:	69fb      	ldr	r3, [r7, #28]
    609e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    60a2:	4413      	add	r3, r2
    60a4:	681b      	ldr	r3, [r3, #0]
    60a6:	4618      	mov	r0, r3
    60a8:	f006 fb94 	bl	c7d4 <_ZN17LimitSwitchSensor7getNameEv>
    60ac:	4603      	mov	r3, r0
    60ae:	76fb      	strb	r3, [r7, #27]
    60b0:	f107 031b 	add.w	r3, r7, #27	; 0x1b
    60b4:	4620      	mov	r0, r4
    60b6:	4619      	mov	r1, r3
    60b8:	f018 fac2 	bl	1e640 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_>

#ifdef ROBOTHW
Sensors::LimitSwitchNameVector* Sensors::detectedLimitSwitch()
{
    limitSwitchNameVector->reset();
    for (int i = 0; i<nbLimitSwitch; i++)
    60bc:	69fb      	ldr	r3, [r7, #28]
    60be:	f103 0301 	add.w	r3, r3, #1	; 0x1
    60c2:	61fb      	str	r3, [r7, #28]
    60c4:	687b      	ldr	r3, [r7, #4]
    60c6:	6a1a      	ldr	r2, [r3, #32]
    60c8:	69fb      	ldr	r3, [r7, #28]
    60ca:	429a      	cmp	r2, r3
    60cc:	dcc7      	bgt.n	605e <_ZN7Sensors19detectedLimitSwitchEv+0x1a>
        {
            limitSwitchNameVector->push_back(limitSwitchs[i]->getName());
        }
    }
//    limitSwitchNameVector->resize();
    return limitSwitchNameVector;
    60ce:	687b      	ldr	r3, [r7, #4]
    60d0:	6a9b      	ldr	r3, [r3, #40]
}
    60d2:	4618      	mov	r0, r3
    60d4:	f107 0724 	add.w	r7, r7, #36	; 0x24
    60d8:	46bd      	mov	sp, r7
    60da:	bd90      	pop	{r4, r7, pc}

000060dc <_ZN7Sensors13detectedSharpEv>:
    #endif
    if (outputSensorVector)
        delete outputSensorVector;
}

Sensors::SharpNameVector*  Sensors::detectedSharp()
    60dc:	b590      	push	{r4, r7, lr}
    60de:	b089      	sub	sp, #36
    60e0:	af00      	add	r7, sp, #0
    60e2:	6078      	str	r0, [r7, #4]
{
    sharpNameVector->reset();
    60e4:	687b      	ldr	r3, [r7, #4]
    60e6:	6a5b      	ldr	r3, [r3, #36]
    60e8:	4618      	mov	r0, r3
    60ea:	f018 f92b 	bl	1e344 <_ZN6vectorIN11SharpSensor9SharpNameEE5resetEv>
    for (int i = 0; i< nbSharp; i++)
    60ee:	f04f 0300 	mov.w	r3, #0	; 0x0
    60f2:	61fb      	str	r3, [r7, #28]
    60f4:	e032      	b.n	615c <_ZN7Sensors13detectedSharpEv+0x80>
    {
       if (sharps[i]->getValue().b)
    60f6:	687b      	ldr	r3, [r7, #4]
    60f8:	685a      	ldr	r2, [r3, #4]
    60fa:	69fb      	ldr	r3, [r7, #28]
    60fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6100:	4413      	add	r3, r2
    6102:	681b      	ldr	r3, [r3, #0]
    6104:	681b      	ldr	r3, [r3, #0]
    6106:	f103 0308 	add.w	r3, r3, #8	; 0x8
    610a:	f8d3 c000 	ldr.w	ip, [r3]
    610e:	687b      	ldr	r3, [r7, #4]
    6110:	685a      	ldr	r2, [r3, #4]
    6112:	69fb      	ldr	r3, [r7, #28]
    6114:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6118:	4413      	add	r3, r2
    611a:	681a      	ldr	r2, [r3, #0]
    611c:	f107 030c 	add.w	r3, r7, #12	; 0xc
    6120:	4618      	mov	r0, r3
    6122:	4611      	mov	r1, r2
    6124:	47e0      	blx	ip
    6126:	7d3b      	ldrb	r3, [r7, #20]
    6128:	2b00      	cmp	r3, #0
    612a:	d013      	beq.n	6154 <_ZN7Sensors13detectedSharpEv+0x78>
       {
            sharpNameVector->push_back(sharps[i]->getName());
    612c:	687b      	ldr	r3, [r7, #4]
    612e:	6a5c      	ldr	r4, [r3, #36]
    6130:	687b      	ldr	r3, [r7, #4]
    6132:	685a      	ldr	r2, [r3, #4]
    6134:	69fb      	ldr	r3, [r7, #28]
    6136:	ea4f 0383 	mov.w	r3, r3, lsl #2
    613a:	4413      	add	r3, r2
    613c:	681b      	ldr	r3, [r3, #0]
    613e:	4618      	mov	r0, r3
    6140:	f007 f98e 	bl	d460 <_ZN11SharpSensor7getNameEv>
    6144:	4603      	mov	r3, r0
    6146:	76fb      	strb	r3, [r7, #27]
    6148:	f107 031b 	add.w	r3, r7, #27	; 0x1b
    614c:	4620      	mov	r0, r4
    614e:	4619      	mov	r1, r3
    6150:	f018 fad2 	bl	1e6f8 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_>
}

Sensors::SharpNameVector*  Sensors::detectedSharp()
{
    sharpNameVector->reset();
    for (int i = 0; i< nbSharp; i++)
    6154:	69fb      	ldr	r3, [r7, #28]
    6156:	f103 0301 	add.w	r3, r3, #1	; 0x1
    615a:	61fb      	str	r3, [r7, #28]
    615c:	687b      	ldr	r3, [r7, #4]
    615e:	689a      	ldr	r2, [r3, #8]
    6160:	69fb      	ldr	r3, [r7, #28]
    6162:	429a      	cmp	r2, r3
    6164:	dcc7      	bgt.n	60f6 <_ZN7Sensors13detectedSharpEv+0x1a>
       {
            sharpNameVector->push_back(sharps[i]->getName());
       }
    }
   // sharpNameVector->resize();
    return sharpNameVector;
    6166:	687b      	ldr	r3, [r7, #4]
    6168:	6a5b      	ldr	r3, [r3, #36]
}
    616a:	4618      	mov	r0, r3
    616c:	f107 0724 	add.w	r7, r7, #36	; 0x24
    6170:	46bd      	mov	sp, r7
    6172:	bd90      	pop	{r4, r7, pc}

00006174 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE>:
//    outputSensorVector->resize();
    return outputSensorVector;
}


float Sensors::getValueUltrasound(UltrasoundSensor::UltrasoundName name)
    6174:	b580      	push	{r7, lr}
    6176:	b08c      	sub	sp, #48
    6178:	af00      	add	r7, sp, #0
    617a:	60f8      	str	r0, [r7, #12]
    617c:	460b      	mov	r3, r1
    617e:	72fb      	strb	r3, [r7, #11]
{
    for (int i = 0; i < nbUltrasound; i++)
    6180:	f04f 0300 	mov.w	r3, #0	; 0x0
    6184:	62fb      	str	r3, [r7, #44]
    6186:	e04a      	b.n	621e <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xaa>
    {
        ultrasounds[i]->getValue();
    6188:	68fb      	ldr	r3, [r7, #12]
    618a:	68da      	ldr	r2, [r3, #12]
    618c:	6afb      	ldr	r3, [r7, #44]
    618e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6192:	4413      	add	r3, r2
    6194:	681b      	ldr	r3, [r3, #0]
    6196:	681b      	ldr	r3, [r3, #0]
    6198:	f103 0308 	add.w	r3, r3, #8	; 0x8
    619c:	f8d3 c000 	ldr.w	ip, [r3]
    61a0:	68fb      	ldr	r3, [r7, #12]
    61a2:	68da      	ldr	r2, [r3, #12]
    61a4:	6afb      	ldr	r3, [r7, #44]
    61a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    61aa:	4413      	add	r3, r2
    61ac:	681a      	ldr	r2, [r3, #0]
    61ae:	f107 0314 	add.w	r3, r7, #20	; 0x14
    61b2:	4618      	mov	r0, r3
    61b4:	4611      	mov	r1, r2
    61b6:	47e0      	blx	ip
         if (ultrasounds[i]->getName() == name)
    61b8:	68fb      	ldr	r3, [r7, #12]
    61ba:	68da      	ldr	r2, [r3, #12]
    61bc:	6afb      	ldr	r3, [r7, #44]
    61be:	ea4f 0383 	mov.w	r3, r3, lsl #2
    61c2:	4413      	add	r3, r2
    61c4:	681b      	ldr	r3, [r3, #0]
    61c6:	4618      	mov	r0, r3
    61c8:	f007 fd3c 	bl	dc44 <_ZN16UltrasoundSensor7getNameEv>
    61cc:	4603      	mov	r3, r0
    61ce:	461a      	mov	r2, r3
    61d0:	7afb      	ldrb	r3, [r7, #11]
    61d2:	4293      	cmp	r3, r2
    61d4:	bf14      	ite	ne
    61d6:	2300      	movne	r3, #0
    61d8:	2301      	moveq	r3, #1
    61da:	b2db      	uxtb	r3, r3
    61dc:	2b00      	cmp	r3, #0
    61de:	d01a      	beq.n	6216 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xa2>
         {
             return ultrasounds[i]->getValue().f;
    61e0:	68fb      	ldr	r3, [r7, #12]
    61e2:	68da      	ldr	r2, [r3, #12]
    61e4:	6afb      	ldr	r3, [r7, #44]
    61e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    61ea:	4413      	add	r3, r2
    61ec:	681b      	ldr	r3, [r3, #0]
    61ee:	681b      	ldr	r3, [r3, #0]
    61f0:	f103 0308 	add.w	r3, r3, #8	; 0x8
    61f4:	f8d3 c000 	ldr.w	ip, [r3]
    61f8:	68fb      	ldr	r3, [r7, #12]
    61fa:	68da      	ldr	r2, [r3, #12]
    61fc:	6afb      	ldr	r3, [r7, #44]
    61fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6202:	4413      	add	r3, r2
    6204:	681a      	ldr	r2, [r3, #0]
    6206:	f107 0320 	add.w	r3, r7, #32	; 0x20
    620a:	4618      	mov	r0, r3
    620c:	4611      	mov	r1, r2
    620e:	47e0      	blx	ip
    6210:	6a7b      	ldr	r3, [r7, #36]
    6212:	607b      	str	r3, [r7, #4]
    6214:	e00a      	b.n	622c <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xb8>
}


float Sensors::getValueUltrasound(UltrasoundSensor::UltrasoundName name)
{
    for (int i = 0; i < nbUltrasound; i++)
    6216:	6afb      	ldr	r3, [r7, #44]
    6218:	f103 0301 	add.w	r3, r3, #1	; 0x1
    621c:	62fb      	str	r3, [r7, #44]
    621e:	68fb      	ldr	r3, [r7, #12]
    6220:	691a      	ldr	r2, [r3, #16]
    6222:	6afb      	ldr	r3, [r7, #44]
    6224:	429a      	cmp	r2, r3
    6226:	dcaf      	bgt.n	6188 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0x14>
         if (ultrasounds[i]->getName() == name)
         {
             return ultrasounds[i]->getValue().f;
         }
    }
    return -1;
    6228:	4b03      	ldr	r3, [pc, #12]	(6238 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xc4>)
    622a:	607b      	str	r3, [r7, #4]
    622c:	687b      	ldr	r3, [r7, #4]
}
    622e:	4618      	mov	r0, r3
    6230:	f107 0730 	add.w	r7, r7, #48	; 0x30
    6234:	46bd      	mov	sp, r7
    6236:	bd80      	pop	{r7, pc}
    6238:	bf800000 	.word	0xbf800000

0000623c <_ZN7SensorsD0Ev>:
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}

Sensors::~Sensors()
    623c:	b580      	push	{r7, lr}
    623e:	b086      	sub	sp, #24
    6240:	af00      	add	r7, sp, #0
    6242:	6078      	str	r0, [r7, #4]
    6244:	687b      	ldr	r3, [r7, #4]
    6246:	4a92      	ldr	r2, [pc, #584]	(6490 <_ZN7SensorsD0Ev+0x254>)
    6248:	601a      	str	r2, [r3, #0]
{
    for (int i = 0; i< nbSharp; i++)
    624a:	f04f 0300 	mov.w	r3, #0	; 0x0
    624e:	60bb      	str	r3, [r7, #8]
    6250:	e020      	b.n	6294 <_ZN7SensorsD0Ev+0x58>
        delete sharps[i];
    6252:	687b      	ldr	r3, [r7, #4]
    6254:	685a      	ldr	r2, [r3, #4]
    6256:	68bb      	ldr	r3, [r7, #8]
    6258:	ea4f 0383 	mov.w	r3, r3, lsl #2
    625c:	4413      	add	r3, r2
    625e:	681b      	ldr	r3, [r3, #0]
    6260:	2b00      	cmp	r3, #0
    6262:	d013      	beq.n	628c <_ZN7SensorsD0Ev+0x50>
    6264:	687b      	ldr	r3, [r7, #4]
    6266:	685a      	ldr	r2, [r3, #4]
    6268:	68bb      	ldr	r3, [r7, #8]
    626a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    626e:	4413      	add	r3, r2
    6270:	681b      	ldr	r3, [r3, #0]
    6272:	681b      	ldr	r3, [r3, #0]
    6274:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6278:	6819      	ldr	r1, [r3, #0]
    627a:	687b      	ldr	r3, [r7, #4]
    627c:	685a      	ldr	r2, [r3, #4]
    627e:	68bb      	ldr	r3, [r7, #8]
    6280:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6284:	4413      	add	r3, r2
    6286:	681b      	ldr	r3, [r3, #0]
    6288:	4618      	mov	r0, r3
    628a:	4788      	blx	r1
 #endif //ROBOTHW
}

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
    628c:	68bb      	ldr	r3, [r7, #8]
    628e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6292:	60bb      	str	r3, [r7, #8]
    6294:	687b      	ldr	r3, [r7, #4]
    6296:	689a      	ldr	r2, [r3, #8]
    6298:	68bb      	ldr	r3, [r7, #8]
    629a:	429a      	cmp	r2, r3
    629c:	dcd9      	bgt.n	6252 <_ZN7SensorsD0Ev+0x16>
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    629e:	f04f 0300 	mov.w	r3, #0	; 0x0
    62a2:	60fb      	str	r3, [r7, #12]
    62a4:	e020      	b.n	62e8 <_ZN7SensorsD0Ev+0xac>
        delete ultrasounds[i];
    62a6:	687b      	ldr	r3, [r7, #4]
    62a8:	68da      	ldr	r2, [r3, #12]
    62aa:	68fb      	ldr	r3, [r7, #12]
    62ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
    62b0:	4413      	add	r3, r2
    62b2:	681b      	ldr	r3, [r3, #0]
    62b4:	2b00      	cmp	r3, #0
    62b6:	d013      	beq.n	62e0 <_ZN7SensorsD0Ev+0xa4>
    62b8:	687b      	ldr	r3, [r7, #4]
    62ba:	68da      	ldr	r2, [r3, #12]
    62bc:	68fb      	ldr	r3, [r7, #12]
    62be:	ea4f 0383 	mov.w	r3, r3, lsl #2
    62c2:	4413      	add	r3, r2
    62c4:	681b      	ldr	r3, [r3, #0]
    62c6:	681b      	ldr	r3, [r3, #0]
    62c8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    62cc:	6819      	ldr	r1, [r3, #0]
    62ce:	687b      	ldr	r3, [r7, #4]
    62d0:	68da      	ldr	r2, [r3, #12]
    62d2:	68fb      	ldr	r3, [r7, #12]
    62d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    62d8:	4413      	add	r3, r2
    62da:	681b      	ldr	r3, [r3, #0]
    62dc:	4618      	mov	r0, r3
    62de:	4788      	blx	r1

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    62e0:	68fb      	ldr	r3, [r7, #12]
    62e2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    62e6:	60fb      	str	r3, [r7, #12]
    62e8:	687b      	ldr	r3, [r7, #4]
    62ea:	691a      	ldr	r2, [r3, #16]
    62ec:	68fb      	ldr	r3, [r7, #12]
    62ee:	429a      	cmp	r2, r3
    62f0:	dcd9      	bgt.n	62a6 <_ZN7SensorsD0Ev+0x6a>
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    62f2:	f04f 0300 	mov.w	r3, #0	; 0x0
    62f6:	613b      	str	r3, [r7, #16]
    62f8:	e020      	b.n	633c <_ZN7SensorsD0Ev+0x100>
        delete limitSwitchs[i];
    62fa:	687b      	ldr	r3, [r7, #4]
    62fc:	69da      	ldr	r2, [r3, #28]
    62fe:	693b      	ldr	r3, [r7, #16]
    6300:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6304:	4413      	add	r3, r2
    6306:	681b      	ldr	r3, [r3, #0]
    6308:	2b00      	cmp	r3, #0
    630a:	d013      	beq.n	6334 <_ZN7SensorsD0Ev+0xf8>
    630c:	687b      	ldr	r3, [r7, #4]
    630e:	69da      	ldr	r2, [r3, #28]
    6310:	693b      	ldr	r3, [r7, #16]
    6312:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6316:	4413      	add	r3, r2
    6318:	681b      	ldr	r3, [r3, #0]
    631a:	681b      	ldr	r3, [r3, #0]
    631c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6320:	6819      	ldr	r1, [r3, #0]
    6322:	687b      	ldr	r3, [r7, #4]
    6324:	69da      	ldr	r2, [r3, #28]
    6326:	693b      	ldr	r3, [r7, #16]
    6328:	ea4f 0383 	mov.w	r3, r3, lsl #2
    632c:	4413      	add	r3, r2
    632e:	681b      	ldr	r3, [r3, #0]
    6330:	4618      	mov	r0, r3
    6332:	4788      	blx	r1
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    6334:	693b      	ldr	r3, [r7, #16]
    6336:	f103 0301 	add.w	r3, r3, #1	; 0x1
    633a:	613b      	str	r3, [r7, #16]
    633c:	687b      	ldr	r3, [r7, #4]
    633e:	6a1a      	ldr	r2, [r3, #32]
    6340:	693b      	ldr	r3, [r7, #16]
    6342:	429a      	cmp	r2, r3
    6344:	dcd9      	bgt.n	62fa <_ZN7SensorsD0Ev+0xbe>
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6346:	f04f 0300 	mov.w	r3, #0	; 0x0
    634a:	617b      	str	r3, [r7, #20]
    634c:	e020      	b.n	6390 <_ZN7SensorsD0Ev+0x154>
        delete ligthBarriers[i];
    634e:	687b      	ldr	r3, [r7, #4]
    6350:	695a      	ldr	r2, [r3, #20]
    6352:	697b      	ldr	r3, [r7, #20]
    6354:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6358:	4413      	add	r3, r2
    635a:	681b      	ldr	r3, [r3, #0]
    635c:	2b00      	cmp	r3, #0
    635e:	d013      	beq.n	6388 <_ZN7SensorsD0Ev+0x14c>
    6360:	687b      	ldr	r3, [r7, #4]
    6362:	695a      	ldr	r2, [r3, #20]
    6364:	697b      	ldr	r3, [r7, #20]
    6366:	ea4f 0383 	mov.w	r3, r3, lsl #2
    636a:	4413      	add	r3, r2
    636c:	681b      	ldr	r3, [r3, #0]
    636e:	681b      	ldr	r3, [r3, #0]
    6370:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6374:	6819      	ldr	r1, [r3, #0]
    6376:	687b      	ldr	r3, [r7, #4]
    6378:	695a      	ldr	r2, [r3, #20]
    637a:	697b      	ldr	r3, [r7, #20]
    637c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6380:	4413      	add	r3, r2
    6382:	681b      	ldr	r3, [r3, #0]
    6384:	4618      	mov	r0, r3
    6386:	4788      	blx	r1
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6388:	697b      	ldr	r3, [r7, #20]
    638a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    638e:	617b      	str	r3, [r7, #20]
    6390:	687b      	ldr	r3, [r7, #4]
    6392:	699a      	ldr	r2, [r3, #24]
    6394:	697b      	ldr	r3, [r7, #20]
    6396:	429a      	cmp	r2, r3
    6398:	dcd9      	bgt.n	634e <_ZN7SensorsD0Ev+0x112>
        delete ligthBarriers[i];
    #endif
    delete[] sharps;
    639a:	687b      	ldr	r3, [r7, #4]
    639c:	685b      	ldr	r3, [r3, #4]
    639e:	2b00      	cmp	r3, #0
    63a0:	d004      	beq.n	63ac <_ZN7SensorsD0Ev+0x170>
    63a2:	687b      	ldr	r3, [r7, #4]
    63a4:	685b      	ldr	r3, [r3, #4]
    63a6:	4618      	mov	r0, r3
    63a8:	f008 fcdc 	bl	ed64 <_ZdaPv>
    delete[] ultrasounds;
    63ac:	687b      	ldr	r3, [r7, #4]
    63ae:	68db      	ldr	r3, [r3, #12]
    63b0:	2b00      	cmp	r3, #0
    63b2:	d004      	beq.n	63be <_ZN7SensorsD0Ev+0x182>
    63b4:	687b      	ldr	r3, [r7, #4]
    63b6:	68db      	ldr	r3, [r3, #12]
    63b8:	4618      	mov	r0, r3
    63ba:	f008 fcd3 	bl	ed64 <_ZdaPv>
    #ifdef ROBOTHW
    delete[] limitSwitchs;
    63be:	687b      	ldr	r3, [r7, #4]
    63c0:	69db      	ldr	r3, [r3, #28]
    63c2:	2b00      	cmp	r3, #0
    63c4:	d004      	beq.n	63d0 <_ZN7SensorsD0Ev+0x194>
    63c6:	687b      	ldr	r3, [r7, #4]
    63c8:	69db      	ldr	r3, [r3, #28]
    63ca:	4618      	mov	r0, r3
    63cc:	f008 fcca 	bl	ed64 <_ZdaPv>
    delete[] ligthBarriers;
    63d0:	687b      	ldr	r3, [r7, #4]
    63d2:	695b      	ldr	r3, [r3, #20]
    63d4:	2b00      	cmp	r3, #0
    63d6:	d004      	beq.n	63e2 <_ZN7SensorsD0Ev+0x1a6>
    63d8:	687b      	ldr	r3, [r7, #4]
    63da:	695b      	ldr	r3, [r3, #20]
    63dc:	4618      	mov	r0, r3
    63de:	f008 fcc1 	bl	ed64 <_ZdaPv>
    #endif

    if (sharpNameVector)
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	6a5b      	ldr	r3, [r3, #36]
    63e6:	2b00      	cmp	r3, #0
    63e8:	d00d      	beq.n	6406 <_ZN7SensorsD0Ev+0x1ca>
        delete sharpNameVector;
    63ea:	687b      	ldr	r3, [r7, #4]
    63ec:	6a5b      	ldr	r3, [r3, #36]
    63ee:	2b00      	cmp	r3, #0
    63f0:	d009      	beq.n	6406 <_ZN7SensorsD0Ev+0x1ca>
    63f2:	687b      	ldr	r3, [r7, #4]
    63f4:	6a5b      	ldr	r3, [r3, #36]
    63f6:	681b      	ldr	r3, [r3, #0]
    63f8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    63fc:	681a      	ldr	r2, [r3, #0]
    63fe:	687b      	ldr	r3, [r7, #4]
    6400:	6a5b      	ldr	r3, [r3, #36]
    6402:	4618      	mov	r0, r3
    6404:	4790      	blx	r2
    #ifdef ROBOTHW
    if (ligthBarrierNameVector)
    6406:	687b      	ldr	r3, [r7, #4]
    6408:	6adb      	ldr	r3, [r3, #44]
    640a:	2b00      	cmp	r3, #0
    640c:	d00d      	beq.n	642a <_ZN7SensorsD0Ev+0x1ee>
        delete ligthBarrierNameVector;
    640e:	687b      	ldr	r3, [r7, #4]
    6410:	6adb      	ldr	r3, [r3, #44]
    6412:	2b00      	cmp	r3, #0
    6414:	d009      	beq.n	642a <_ZN7SensorsD0Ev+0x1ee>
    6416:	687b      	ldr	r3, [r7, #4]
    6418:	6adb      	ldr	r3, [r3, #44]
    641a:	681b      	ldr	r3, [r3, #0]
    641c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6420:	681a      	ldr	r2, [r3, #0]
    6422:	687b      	ldr	r3, [r7, #4]
    6424:	6adb      	ldr	r3, [r3, #44]
    6426:	4618      	mov	r0, r3
    6428:	4790      	blx	r2
    if (limitSwitchNameVector)
    642a:	687b      	ldr	r3, [r7, #4]
    642c:	6a9b      	ldr	r3, [r3, #40]
    642e:	2b00      	cmp	r3, #0
    6430:	d00d      	beq.n	644e <_ZN7SensorsD0Ev+0x212>
        delete limitSwitchNameVector;
    6432:	687b      	ldr	r3, [r7, #4]
    6434:	6a9b      	ldr	r3, [r3, #40]
    6436:	2b00      	cmp	r3, #0
    6438:	d009      	beq.n	644e <_ZN7SensorsD0Ev+0x212>
    643a:	687b      	ldr	r3, [r7, #4]
    643c:	6a9b      	ldr	r3, [r3, #40]
    643e:	681b      	ldr	r3, [r3, #0]
    6440:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6444:	681a      	ldr	r2, [r3, #0]
    6446:	687b      	ldr	r3, [r7, #4]
    6448:	6a9b      	ldr	r3, [r3, #40]
    644a:	4618      	mov	r0, r3
    644c:	4790      	blx	r2
    #endif
    if (outputSensorVector)
    644e:	687b      	ldr	r3, [r7, #4]
    6450:	6b1b      	ldr	r3, [r3, #48]
    6452:	2b00      	cmp	r3, #0
    6454:	d00d      	beq.n	6472 <_ZN7SensorsD0Ev+0x236>
        delete outputSensorVector;
    6456:	687b      	ldr	r3, [r7, #4]
    6458:	6b1b      	ldr	r3, [r3, #48]
    645a:	2b00      	cmp	r3, #0
    645c:	d009      	beq.n	6472 <_ZN7SensorsD0Ev+0x236>
    645e:	687b      	ldr	r3, [r7, #4]
    6460:	6b1b      	ldr	r3, [r3, #48]
    6462:	681b      	ldr	r3, [r3, #0]
    6464:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6468:	681a      	ldr	r2, [r3, #0]
    646a:	687b      	ldr	r3, [r7, #4]
    646c:	6b1b      	ldr	r3, [r3, #48]
    646e:	4618      	mov	r0, r3
    6470:	4790      	blx	r2
}
    6472:	f04f 0301 	mov.w	r3, #1	; 0x1
    6476:	b2db      	uxtb	r3, r3
    6478:	2b00      	cmp	r3, #0
    647a:	d002      	beq.n	6482 <_ZN7SensorsD0Ev+0x246>
    647c:	6878      	ldr	r0, [r7, #4]
    647e:	f008 fbf9 	bl	ec74 <_ZdlPv>
    6482:	687b      	ldr	r3, [r7, #4]
    6484:	4618      	mov	r0, r3
    6486:	f107 0718 	add.w	r7, r7, #24	; 0x18
    648a:	46bd      	mov	sp, r7
    648c:	bd80      	pop	{r7, pc}
    648e:	46c0      	nop			(mov r8, r8)
    6490:	00023e60 	.word	0x00023e60

00006494 <_ZN7SensorsD1Ev>:
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}

Sensors::~Sensors()
    6494:	b580      	push	{r7, lr}
    6496:	b086      	sub	sp, #24
    6498:	af00      	add	r7, sp, #0
    649a:	6078      	str	r0, [r7, #4]
    649c:	687b      	ldr	r3, [r7, #4]
    649e:	4a92      	ldr	r2, [pc, #584]	(66e8 <_ZN7SensorsD1Ev+0x254>)
    64a0:	601a      	str	r2, [r3, #0]
{
    for (int i = 0; i< nbSharp; i++)
    64a2:	f04f 0300 	mov.w	r3, #0	; 0x0
    64a6:	60bb      	str	r3, [r7, #8]
    64a8:	e020      	b.n	64ec <_ZN7SensorsD1Ev+0x58>
        delete sharps[i];
    64aa:	687b      	ldr	r3, [r7, #4]
    64ac:	685a      	ldr	r2, [r3, #4]
    64ae:	68bb      	ldr	r3, [r7, #8]
    64b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    64b4:	4413      	add	r3, r2
    64b6:	681b      	ldr	r3, [r3, #0]
    64b8:	2b00      	cmp	r3, #0
    64ba:	d013      	beq.n	64e4 <_ZN7SensorsD1Ev+0x50>
    64bc:	687b      	ldr	r3, [r7, #4]
    64be:	685a      	ldr	r2, [r3, #4]
    64c0:	68bb      	ldr	r3, [r7, #8]
    64c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    64c6:	4413      	add	r3, r2
    64c8:	681b      	ldr	r3, [r3, #0]
    64ca:	681b      	ldr	r3, [r3, #0]
    64cc:	f103 0304 	add.w	r3, r3, #4	; 0x4
    64d0:	6819      	ldr	r1, [r3, #0]
    64d2:	687b      	ldr	r3, [r7, #4]
    64d4:	685a      	ldr	r2, [r3, #4]
    64d6:	68bb      	ldr	r3, [r7, #8]
    64d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    64dc:	4413      	add	r3, r2
    64de:	681b      	ldr	r3, [r3, #0]
    64e0:	4618      	mov	r0, r3
    64e2:	4788      	blx	r1
 #endif //ROBOTHW
}

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
    64e4:	68bb      	ldr	r3, [r7, #8]
    64e6:	f103 0301 	add.w	r3, r3, #1	; 0x1
    64ea:	60bb      	str	r3, [r7, #8]
    64ec:	687b      	ldr	r3, [r7, #4]
    64ee:	689a      	ldr	r2, [r3, #8]
    64f0:	68bb      	ldr	r3, [r7, #8]
    64f2:	429a      	cmp	r2, r3
    64f4:	dcd9      	bgt.n	64aa <_ZN7SensorsD1Ev+0x16>
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    64f6:	f04f 0300 	mov.w	r3, #0	; 0x0
    64fa:	60fb      	str	r3, [r7, #12]
    64fc:	e020      	b.n	6540 <_ZN7SensorsD1Ev+0xac>
        delete ultrasounds[i];
    64fe:	687b      	ldr	r3, [r7, #4]
    6500:	68da      	ldr	r2, [r3, #12]
    6502:	68fb      	ldr	r3, [r7, #12]
    6504:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6508:	4413      	add	r3, r2
    650a:	681b      	ldr	r3, [r3, #0]
    650c:	2b00      	cmp	r3, #0
    650e:	d013      	beq.n	6538 <_ZN7SensorsD1Ev+0xa4>
    6510:	687b      	ldr	r3, [r7, #4]
    6512:	68da      	ldr	r2, [r3, #12]
    6514:	68fb      	ldr	r3, [r7, #12]
    6516:	ea4f 0383 	mov.w	r3, r3, lsl #2
    651a:	4413      	add	r3, r2
    651c:	681b      	ldr	r3, [r3, #0]
    651e:	681b      	ldr	r3, [r3, #0]
    6520:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6524:	6819      	ldr	r1, [r3, #0]
    6526:	687b      	ldr	r3, [r7, #4]
    6528:	68da      	ldr	r2, [r3, #12]
    652a:	68fb      	ldr	r3, [r7, #12]
    652c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6530:	4413      	add	r3, r2
    6532:	681b      	ldr	r3, [r3, #0]
    6534:	4618      	mov	r0, r3
    6536:	4788      	blx	r1

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    6538:	68fb      	ldr	r3, [r7, #12]
    653a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    653e:	60fb      	str	r3, [r7, #12]
    6540:	687b      	ldr	r3, [r7, #4]
    6542:	691a      	ldr	r2, [r3, #16]
    6544:	68fb      	ldr	r3, [r7, #12]
    6546:	429a      	cmp	r2, r3
    6548:	dcd9      	bgt.n	64fe <_ZN7SensorsD1Ev+0x6a>
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    654a:	f04f 0300 	mov.w	r3, #0	; 0x0
    654e:	613b      	str	r3, [r7, #16]
    6550:	e020      	b.n	6594 <_ZN7SensorsD1Ev+0x100>
        delete limitSwitchs[i];
    6552:	687b      	ldr	r3, [r7, #4]
    6554:	69da      	ldr	r2, [r3, #28]
    6556:	693b      	ldr	r3, [r7, #16]
    6558:	ea4f 0383 	mov.w	r3, r3, lsl #2
    655c:	4413      	add	r3, r2
    655e:	681b      	ldr	r3, [r3, #0]
    6560:	2b00      	cmp	r3, #0
    6562:	d013      	beq.n	658c <_ZN7SensorsD1Ev+0xf8>
    6564:	687b      	ldr	r3, [r7, #4]
    6566:	69da      	ldr	r2, [r3, #28]
    6568:	693b      	ldr	r3, [r7, #16]
    656a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    656e:	4413      	add	r3, r2
    6570:	681b      	ldr	r3, [r3, #0]
    6572:	681b      	ldr	r3, [r3, #0]
    6574:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6578:	6819      	ldr	r1, [r3, #0]
    657a:	687b      	ldr	r3, [r7, #4]
    657c:	69da      	ldr	r2, [r3, #28]
    657e:	693b      	ldr	r3, [r7, #16]
    6580:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6584:	4413      	add	r3, r2
    6586:	681b      	ldr	r3, [r3, #0]
    6588:	4618      	mov	r0, r3
    658a:	4788      	blx	r1
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    658c:	693b      	ldr	r3, [r7, #16]
    658e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6592:	613b      	str	r3, [r7, #16]
    6594:	687b      	ldr	r3, [r7, #4]
    6596:	6a1a      	ldr	r2, [r3, #32]
    6598:	693b      	ldr	r3, [r7, #16]
    659a:	429a      	cmp	r2, r3
    659c:	dcd9      	bgt.n	6552 <_ZN7SensorsD1Ev+0xbe>
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    659e:	f04f 0300 	mov.w	r3, #0	; 0x0
    65a2:	617b      	str	r3, [r7, #20]
    65a4:	e020      	b.n	65e8 <_ZN7SensorsD1Ev+0x154>
        delete ligthBarriers[i];
    65a6:	687b      	ldr	r3, [r7, #4]
    65a8:	695a      	ldr	r2, [r3, #20]
    65aa:	697b      	ldr	r3, [r7, #20]
    65ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
    65b0:	4413      	add	r3, r2
    65b2:	681b      	ldr	r3, [r3, #0]
    65b4:	2b00      	cmp	r3, #0
    65b6:	d013      	beq.n	65e0 <_ZN7SensorsD1Ev+0x14c>
    65b8:	687b      	ldr	r3, [r7, #4]
    65ba:	695a      	ldr	r2, [r3, #20]
    65bc:	697b      	ldr	r3, [r7, #20]
    65be:	ea4f 0383 	mov.w	r3, r3, lsl #2
    65c2:	4413      	add	r3, r2
    65c4:	681b      	ldr	r3, [r3, #0]
    65c6:	681b      	ldr	r3, [r3, #0]
    65c8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    65cc:	6819      	ldr	r1, [r3, #0]
    65ce:	687b      	ldr	r3, [r7, #4]
    65d0:	695a      	ldr	r2, [r3, #20]
    65d2:	697b      	ldr	r3, [r7, #20]
    65d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    65d8:	4413      	add	r3, r2
    65da:	681b      	ldr	r3, [r3, #0]
    65dc:	4618      	mov	r0, r3
    65de:	4788      	blx	r1
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    65e0:	697b      	ldr	r3, [r7, #20]
    65e2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    65e6:	617b      	str	r3, [r7, #20]
    65e8:	687b      	ldr	r3, [r7, #4]
    65ea:	699a      	ldr	r2, [r3, #24]
    65ec:	697b      	ldr	r3, [r7, #20]
    65ee:	429a      	cmp	r2, r3
    65f0:	dcd9      	bgt.n	65a6 <_ZN7SensorsD1Ev+0x112>
        delete ligthBarriers[i];
    #endif
    delete[] sharps;
    65f2:	687b      	ldr	r3, [r7, #4]
    65f4:	685b      	ldr	r3, [r3, #4]
    65f6:	2b00      	cmp	r3, #0
    65f8:	d004      	beq.n	6604 <_ZN7SensorsD1Ev+0x170>
    65fa:	687b      	ldr	r3, [r7, #4]
    65fc:	685b      	ldr	r3, [r3, #4]
    65fe:	4618      	mov	r0, r3
    6600:	f008 fbb0 	bl	ed64 <_ZdaPv>
    delete[] ultrasounds;
    6604:	687b      	ldr	r3, [r7, #4]
    6606:	68db      	ldr	r3, [r3, #12]
    6608:	2b00      	cmp	r3, #0
    660a:	d004      	beq.n	6616 <_ZN7SensorsD1Ev+0x182>
    660c:	687b      	ldr	r3, [r7, #4]
    660e:	68db      	ldr	r3, [r3, #12]
    6610:	4618      	mov	r0, r3
    6612:	f008 fba7 	bl	ed64 <_ZdaPv>
    #ifdef ROBOTHW
    delete[] limitSwitchs;
    6616:	687b      	ldr	r3, [r7, #4]
    6618:	69db      	ldr	r3, [r3, #28]
    661a:	2b00      	cmp	r3, #0
    661c:	d004      	beq.n	6628 <_ZN7SensorsD1Ev+0x194>
    661e:	687b      	ldr	r3, [r7, #4]
    6620:	69db      	ldr	r3, [r3, #28]
    6622:	4618      	mov	r0, r3
    6624:	f008 fb9e 	bl	ed64 <_ZdaPv>
    delete[] ligthBarriers;
    6628:	687b      	ldr	r3, [r7, #4]
    662a:	695b      	ldr	r3, [r3, #20]
    662c:	2b00      	cmp	r3, #0
    662e:	d004      	beq.n	663a <_ZN7SensorsD1Ev+0x1a6>
    6630:	687b      	ldr	r3, [r7, #4]
    6632:	695b      	ldr	r3, [r3, #20]
    6634:	4618      	mov	r0, r3
    6636:	f008 fb95 	bl	ed64 <_ZdaPv>
    #endif

    if (sharpNameVector)
    663a:	687b      	ldr	r3, [r7, #4]
    663c:	6a5b      	ldr	r3, [r3, #36]
    663e:	2b00      	cmp	r3, #0
    6640:	d00d      	beq.n	665e <_ZN7SensorsD1Ev+0x1ca>
        delete sharpNameVector;
    6642:	687b      	ldr	r3, [r7, #4]
    6644:	6a5b      	ldr	r3, [r3, #36]
    6646:	2b00      	cmp	r3, #0
    6648:	d009      	beq.n	665e <_ZN7SensorsD1Ev+0x1ca>
    664a:	687b      	ldr	r3, [r7, #4]
    664c:	6a5b      	ldr	r3, [r3, #36]
    664e:	681b      	ldr	r3, [r3, #0]
    6650:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6654:	681a      	ldr	r2, [r3, #0]
    6656:	687b      	ldr	r3, [r7, #4]
    6658:	6a5b      	ldr	r3, [r3, #36]
    665a:	4618      	mov	r0, r3
    665c:	4790      	blx	r2
    #ifdef ROBOTHW
    if (ligthBarrierNameVector)
    665e:	687b      	ldr	r3, [r7, #4]
    6660:	6adb      	ldr	r3, [r3, #44]
    6662:	2b00      	cmp	r3, #0
    6664:	d00d      	beq.n	6682 <_ZN7SensorsD1Ev+0x1ee>
        delete ligthBarrierNameVector;
    6666:	687b      	ldr	r3, [r7, #4]
    6668:	6adb      	ldr	r3, [r3, #44]
    666a:	2b00      	cmp	r3, #0
    666c:	d009      	beq.n	6682 <_ZN7SensorsD1Ev+0x1ee>
    666e:	687b      	ldr	r3, [r7, #4]
    6670:	6adb      	ldr	r3, [r3, #44]
    6672:	681b      	ldr	r3, [r3, #0]
    6674:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6678:	681a      	ldr	r2, [r3, #0]
    667a:	687b      	ldr	r3, [r7, #4]
    667c:	6adb      	ldr	r3, [r3, #44]
    667e:	4618      	mov	r0, r3
    6680:	4790      	blx	r2
    if (limitSwitchNameVector)
    6682:	687b      	ldr	r3, [r7, #4]
    6684:	6a9b      	ldr	r3, [r3, #40]
    6686:	2b00      	cmp	r3, #0
    6688:	d00d      	beq.n	66a6 <_ZN7SensorsD1Ev+0x212>
        delete limitSwitchNameVector;
    668a:	687b      	ldr	r3, [r7, #4]
    668c:	6a9b      	ldr	r3, [r3, #40]
    668e:	2b00      	cmp	r3, #0
    6690:	d009      	beq.n	66a6 <_ZN7SensorsD1Ev+0x212>
    6692:	687b      	ldr	r3, [r7, #4]
    6694:	6a9b      	ldr	r3, [r3, #40]
    6696:	681b      	ldr	r3, [r3, #0]
    6698:	f103 0304 	add.w	r3, r3, #4	; 0x4
    669c:	681a      	ldr	r2, [r3, #0]
    669e:	687b      	ldr	r3, [r7, #4]
    66a0:	6a9b      	ldr	r3, [r3, #40]
    66a2:	4618      	mov	r0, r3
    66a4:	4790      	blx	r2
    #endif
    if (outputSensorVector)
    66a6:	687b      	ldr	r3, [r7, #4]
    66a8:	6b1b      	ldr	r3, [r3, #48]
    66aa:	2b00      	cmp	r3, #0
    66ac:	d00d      	beq.n	66ca <_ZN7SensorsD1Ev+0x236>
        delete outputSensorVector;
    66ae:	687b      	ldr	r3, [r7, #4]
    66b0:	6b1b      	ldr	r3, [r3, #48]
    66b2:	2b00      	cmp	r3, #0
    66b4:	d009      	beq.n	66ca <_ZN7SensorsD1Ev+0x236>
    66b6:	687b      	ldr	r3, [r7, #4]
    66b8:	6b1b      	ldr	r3, [r3, #48]
    66ba:	681b      	ldr	r3, [r3, #0]
    66bc:	f103 0304 	add.w	r3, r3, #4	; 0x4
    66c0:	681a      	ldr	r2, [r3, #0]
    66c2:	687b      	ldr	r3, [r7, #4]
    66c4:	6b1b      	ldr	r3, [r3, #48]
    66c6:	4618      	mov	r0, r3
    66c8:	4790      	blx	r2
}
    66ca:	f04f 0300 	mov.w	r3, #0	; 0x0
    66ce:	b2db      	uxtb	r3, r3
    66d0:	2b00      	cmp	r3, #0
    66d2:	d002      	beq.n	66da <_ZN7SensorsD1Ev+0x246>
    66d4:	6878      	ldr	r0, [r7, #4]
    66d6:	f008 facd 	bl	ec74 <_ZdlPv>
    66da:	687b      	ldr	r3, [r7, #4]
    66dc:	4618      	mov	r0, r3
    66de:	f107 0718 	add.w	r7, r7, #24	; 0x18
    66e2:	46bd      	mov	sp, r7
    66e4:	bd80      	pop	{r7, pc}
    66e6:	46c0      	nop			(mov r8, r8)
    66e8:	00023e60 	.word	0x00023e60

000066ec <_ZN7SensorsD2Ev>:
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}

Sensors::~Sensors()
    66ec:	b580      	push	{r7, lr}
    66ee:	b086      	sub	sp, #24
    66f0:	af00      	add	r7, sp, #0
    66f2:	6078      	str	r0, [r7, #4]
    66f4:	687b      	ldr	r3, [r7, #4]
    66f6:	4a92      	ldr	r2, [pc, #584]	(6940 <_ZN7SensorsD2Ev+0x254>)
    66f8:	601a      	str	r2, [r3, #0]
{
    for (int i = 0; i< nbSharp; i++)
    66fa:	f04f 0300 	mov.w	r3, #0	; 0x0
    66fe:	60bb      	str	r3, [r7, #8]
    6700:	e020      	b.n	6744 <_ZN7SensorsD2Ev+0x58>
        delete sharps[i];
    6702:	687b      	ldr	r3, [r7, #4]
    6704:	685a      	ldr	r2, [r3, #4]
    6706:	68bb      	ldr	r3, [r7, #8]
    6708:	ea4f 0383 	mov.w	r3, r3, lsl #2
    670c:	4413      	add	r3, r2
    670e:	681b      	ldr	r3, [r3, #0]
    6710:	2b00      	cmp	r3, #0
    6712:	d013      	beq.n	673c <_ZN7SensorsD2Ev+0x50>
    6714:	687b      	ldr	r3, [r7, #4]
    6716:	685a      	ldr	r2, [r3, #4]
    6718:	68bb      	ldr	r3, [r7, #8]
    671a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    671e:	4413      	add	r3, r2
    6720:	681b      	ldr	r3, [r3, #0]
    6722:	681b      	ldr	r3, [r3, #0]
    6724:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6728:	6819      	ldr	r1, [r3, #0]
    672a:	687b      	ldr	r3, [r7, #4]
    672c:	685a      	ldr	r2, [r3, #4]
    672e:	68bb      	ldr	r3, [r7, #8]
    6730:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6734:	4413      	add	r3, r2
    6736:	681b      	ldr	r3, [r3, #0]
    6738:	4618      	mov	r0, r3
    673a:	4788      	blx	r1
 #endif //ROBOTHW
}

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
    673c:	68bb      	ldr	r3, [r7, #8]
    673e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6742:	60bb      	str	r3, [r7, #8]
    6744:	687b      	ldr	r3, [r7, #4]
    6746:	689a      	ldr	r2, [r3, #8]
    6748:	68bb      	ldr	r3, [r7, #8]
    674a:	429a      	cmp	r2, r3
    674c:	dcd9      	bgt.n	6702 <_ZN7SensorsD2Ev+0x16>
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    674e:	f04f 0300 	mov.w	r3, #0	; 0x0
    6752:	60fb      	str	r3, [r7, #12]
    6754:	e020      	b.n	6798 <_ZN7SensorsD2Ev+0xac>
        delete ultrasounds[i];
    6756:	687b      	ldr	r3, [r7, #4]
    6758:	68da      	ldr	r2, [r3, #12]
    675a:	68fb      	ldr	r3, [r7, #12]
    675c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6760:	4413      	add	r3, r2
    6762:	681b      	ldr	r3, [r3, #0]
    6764:	2b00      	cmp	r3, #0
    6766:	d013      	beq.n	6790 <_ZN7SensorsD2Ev+0xa4>
    6768:	687b      	ldr	r3, [r7, #4]
    676a:	68da      	ldr	r2, [r3, #12]
    676c:	68fb      	ldr	r3, [r7, #12]
    676e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6772:	4413      	add	r3, r2
    6774:	681b      	ldr	r3, [r3, #0]
    6776:	681b      	ldr	r3, [r3, #0]
    6778:	f103 0304 	add.w	r3, r3, #4	; 0x4
    677c:	6819      	ldr	r1, [r3, #0]
    677e:	687b      	ldr	r3, [r7, #4]
    6780:	68da      	ldr	r2, [r3, #12]
    6782:	68fb      	ldr	r3, [r7, #12]
    6784:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6788:	4413      	add	r3, r2
    678a:	681b      	ldr	r3, [r3, #0]
    678c:	4618      	mov	r0, r3
    678e:	4788      	blx	r1

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    6790:	68fb      	ldr	r3, [r7, #12]
    6792:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6796:	60fb      	str	r3, [r7, #12]
    6798:	687b      	ldr	r3, [r7, #4]
    679a:	691a      	ldr	r2, [r3, #16]
    679c:	68fb      	ldr	r3, [r7, #12]
    679e:	429a      	cmp	r2, r3
    67a0:	dcd9      	bgt.n	6756 <_ZN7SensorsD2Ev+0x6a>
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    67a2:	f04f 0300 	mov.w	r3, #0	; 0x0
    67a6:	613b      	str	r3, [r7, #16]
    67a8:	e020      	b.n	67ec <_ZN7SensorsD2Ev+0x100>
        delete limitSwitchs[i];
    67aa:	687b      	ldr	r3, [r7, #4]
    67ac:	69da      	ldr	r2, [r3, #28]
    67ae:	693b      	ldr	r3, [r7, #16]
    67b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    67b4:	4413      	add	r3, r2
    67b6:	681b      	ldr	r3, [r3, #0]
    67b8:	2b00      	cmp	r3, #0
    67ba:	d013      	beq.n	67e4 <_ZN7SensorsD2Ev+0xf8>
    67bc:	687b      	ldr	r3, [r7, #4]
    67be:	69da      	ldr	r2, [r3, #28]
    67c0:	693b      	ldr	r3, [r7, #16]
    67c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    67c6:	4413      	add	r3, r2
    67c8:	681b      	ldr	r3, [r3, #0]
    67ca:	681b      	ldr	r3, [r3, #0]
    67cc:	f103 0304 	add.w	r3, r3, #4	; 0x4
    67d0:	6819      	ldr	r1, [r3, #0]
    67d2:	687b      	ldr	r3, [r7, #4]
    67d4:	69da      	ldr	r2, [r3, #28]
    67d6:	693b      	ldr	r3, [r7, #16]
    67d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    67dc:	4413      	add	r3, r2
    67de:	681b      	ldr	r3, [r3, #0]
    67e0:	4618      	mov	r0, r3
    67e2:	4788      	blx	r1
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    67e4:	693b      	ldr	r3, [r7, #16]
    67e6:	f103 0301 	add.w	r3, r3, #1	; 0x1
    67ea:	613b      	str	r3, [r7, #16]
    67ec:	687b      	ldr	r3, [r7, #4]
    67ee:	6a1a      	ldr	r2, [r3, #32]
    67f0:	693b      	ldr	r3, [r7, #16]
    67f2:	429a      	cmp	r2, r3
    67f4:	dcd9      	bgt.n	67aa <_ZN7SensorsD2Ev+0xbe>
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    67f6:	f04f 0300 	mov.w	r3, #0	; 0x0
    67fa:	617b      	str	r3, [r7, #20]
    67fc:	e020      	b.n	6840 <_ZN7SensorsD2Ev+0x154>
        delete ligthBarriers[i];
    67fe:	687b      	ldr	r3, [r7, #4]
    6800:	695a      	ldr	r2, [r3, #20]
    6802:	697b      	ldr	r3, [r7, #20]
    6804:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6808:	4413      	add	r3, r2
    680a:	681b      	ldr	r3, [r3, #0]
    680c:	2b00      	cmp	r3, #0
    680e:	d013      	beq.n	6838 <_ZN7SensorsD2Ev+0x14c>
    6810:	687b      	ldr	r3, [r7, #4]
    6812:	695a      	ldr	r2, [r3, #20]
    6814:	697b      	ldr	r3, [r7, #20]
    6816:	ea4f 0383 	mov.w	r3, r3, lsl #2
    681a:	4413      	add	r3, r2
    681c:	681b      	ldr	r3, [r3, #0]
    681e:	681b      	ldr	r3, [r3, #0]
    6820:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6824:	6819      	ldr	r1, [r3, #0]
    6826:	687b      	ldr	r3, [r7, #4]
    6828:	695a      	ldr	r2, [r3, #20]
    682a:	697b      	ldr	r3, [r7, #20]
    682c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6830:	4413      	add	r3, r2
    6832:	681b      	ldr	r3, [r3, #0]
    6834:	4618      	mov	r0, r3
    6836:	4788      	blx	r1
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6838:	697b      	ldr	r3, [r7, #20]
    683a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    683e:	617b      	str	r3, [r7, #20]
    6840:	687b      	ldr	r3, [r7, #4]
    6842:	699a      	ldr	r2, [r3, #24]
    6844:	697b      	ldr	r3, [r7, #20]
    6846:	429a      	cmp	r2, r3
    6848:	dcd9      	bgt.n	67fe <_ZN7SensorsD2Ev+0x112>
        delete ligthBarriers[i];
    #endif
    delete[] sharps;
    684a:	687b      	ldr	r3, [r7, #4]
    684c:	685b      	ldr	r3, [r3, #4]
    684e:	2b00      	cmp	r3, #0
    6850:	d004      	beq.n	685c <_ZN7SensorsD2Ev+0x170>
    6852:	687b      	ldr	r3, [r7, #4]
    6854:	685b      	ldr	r3, [r3, #4]
    6856:	4618      	mov	r0, r3
    6858:	f008 fa84 	bl	ed64 <_ZdaPv>
    delete[] ultrasounds;
    685c:	687b      	ldr	r3, [r7, #4]
    685e:	68db      	ldr	r3, [r3, #12]
    6860:	2b00      	cmp	r3, #0
    6862:	d004      	beq.n	686e <_ZN7SensorsD2Ev+0x182>
    6864:	687b      	ldr	r3, [r7, #4]
    6866:	68db      	ldr	r3, [r3, #12]
    6868:	4618      	mov	r0, r3
    686a:	f008 fa7b 	bl	ed64 <_ZdaPv>
    #ifdef ROBOTHW
    delete[] limitSwitchs;
    686e:	687b      	ldr	r3, [r7, #4]
    6870:	69db      	ldr	r3, [r3, #28]
    6872:	2b00      	cmp	r3, #0
    6874:	d004      	beq.n	6880 <_ZN7SensorsD2Ev+0x194>
    6876:	687b      	ldr	r3, [r7, #4]
    6878:	69db      	ldr	r3, [r3, #28]
    687a:	4618      	mov	r0, r3
    687c:	f008 fa72 	bl	ed64 <_ZdaPv>
    delete[] ligthBarriers;
    6880:	687b      	ldr	r3, [r7, #4]
    6882:	695b      	ldr	r3, [r3, #20]
    6884:	2b00      	cmp	r3, #0
    6886:	d004      	beq.n	6892 <_ZN7SensorsD2Ev+0x1a6>
    6888:	687b      	ldr	r3, [r7, #4]
    688a:	695b      	ldr	r3, [r3, #20]
    688c:	4618      	mov	r0, r3
    688e:	f008 fa69 	bl	ed64 <_ZdaPv>
    #endif

    if (sharpNameVector)
    6892:	687b      	ldr	r3, [r7, #4]
    6894:	6a5b      	ldr	r3, [r3, #36]
    6896:	2b00      	cmp	r3, #0
    6898:	d00d      	beq.n	68b6 <_ZN7SensorsD2Ev+0x1ca>
        delete sharpNameVector;
    689a:	687b      	ldr	r3, [r7, #4]
    689c:	6a5b      	ldr	r3, [r3, #36]
    689e:	2b00      	cmp	r3, #0
    68a0:	d009      	beq.n	68b6 <_ZN7SensorsD2Ev+0x1ca>
    68a2:	687b      	ldr	r3, [r7, #4]
    68a4:	6a5b      	ldr	r3, [r3, #36]
    68a6:	681b      	ldr	r3, [r3, #0]
    68a8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    68ac:	681a      	ldr	r2, [r3, #0]
    68ae:	687b      	ldr	r3, [r7, #4]
    68b0:	6a5b      	ldr	r3, [r3, #36]
    68b2:	4618      	mov	r0, r3
    68b4:	4790      	blx	r2
    #ifdef ROBOTHW
    if (ligthBarrierNameVector)
    68b6:	687b      	ldr	r3, [r7, #4]
    68b8:	6adb      	ldr	r3, [r3, #44]
    68ba:	2b00      	cmp	r3, #0
    68bc:	d00d      	beq.n	68da <_ZN7SensorsD2Ev+0x1ee>
        delete ligthBarrierNameVector;
    68be:	687b      	ldr	r3, [r7, #4]
    68c0:	6adb      	ldr	r3, [r3, #44]
    68c2:	2b00      	cmp	r3, #0
    68c4:	d009      	beq.n	68da <_ZN7SensorsD2Ev+0x1ee>
    68c6:	687b      	ldr	r3, [r7, #4]
    68c8:	6adb      	ldr	r3, [r3, #44]
    68ca:	681b      	ldr	r3, [r3, #0]
    68cc:	f103 0304 	add.w	r3, r3, #4	; 0x4
    68d0:	681a      	ldr	r2, [r3, #0]
    68d2:	687b      	ldr	r3, [r7, #4]
    68d4:	6adb      	ldr	r3, [r3, #44]
    68d6:	4618      	mov	r0, r3
    68d8:	4790      	blx	r2
    if (limitSwitchNameVector)
    68da:	687b      	ldr	r3, [r7, #4]
    68dc:	6a9b      	ldr	r3, [r3, #40]
    68de:	2b00      	cmp	r3, #0
    68e0:	d00d      	beq.n	68fe <_ZN7SensorsD2Ev+0x212>
        delete limitSwitchNameVector;
    68e2:	687b      	ldr	r3, [r7, #4]
    68e4:	6a9b      	ldr	r3, [r3, #40]
    68e6:	2b00      	cmp	r3, #0
    68e8:	d009      	beq.n	68fe <_ZN7SensorsD2Ev+0x212>
    68ea:	687b      	ldr	r3, [r7, #4]
    68ec:	6a9b      	ldr	r3, [r3, #40]
    68ee:	681b      	ldr	r3, [r3, #0]
    68f0:	f103 0304 	add.w	r3, r3, #4	; 0x4
    68f4:	681a      	ldr	r2, [r3, #0]
    68f6:	687b      	ldr	r3, [r7, #4]
    68f8:	6a9b      	ldr	r3, [r3, #40]
    68fa:	4618      	mov	r0, r3
    68fc:	4790      	blx	r2
    #endif
    if (outputSensorVector)
    68fe:	687b      	ldr	r3, [r7, #4]
    6900:	6b1b      	ldr	r3, [r3, #48]
    6902:	2b00      	cmp	r3, #0
    6904:	d00d      	beq.n	6922 <_ZN7SensorsD2Ev+0x236>
        delete outputSensorVector;
    6906:	687b      	ldr	r3, [r7, #4]
    6908:	6b1b      	ldr	r3, [r3, #48]
    690a:	2b00      	cmp	r3, #0
    690c:	d009      	beq.n	6922 <_ZN7SensorsD2Ev+0x236>
    690e:	687b      	ldr	r3, [r7, #4]
    6910:	6b1b      	ldr	r3, [r3, #48]
    6912:	681b      	ldr	r3, [r3, #0]
    6914:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6918:	681a      	ldr	r2, [r3, #0]
    691a:	687b      	ldr	r3, [r7, #4]
    691c:	6b1b      	ldr	r3, [r3, #48]
    691e:	4618      	mov	r0, r3
    6920:	4790      	blx	r2
}
    6922:	f04f 0300 	mov.w	r3, #0	; 0x0
    6926:	b2db      	uxtb	r3, r3
    6928:	2b00      	cmp	r3, #0
    692a:	d002      	beq.n	6932 <_ZN7SensorsD2Ev+0x246>
    692c:	6878      	ldr	r0, [r7, #4]
    692e:	f008 f9a1 	bl	ec74 <_ZdlPv>
    6932:	687b      	ldr	r3, [r7, #4]
    6934:	4618      	mov	r0, r3
    6936:	f107 0718 	add.w	r7, r7, #24	; 0x18
    693a:	46bd      	mov	sp, r7
    693c:	bd80      	pop	{r7, pc}
    693e:	46c0      	nop			(mov r8, r8)
    6940:	00023e60 	.word	0x00023e60

00006944 <_ZN7SensorsC1Ev>:
        singleton = new Sensors;
    }
    return singleton;
}

Sensors::Sensors()
    6944:	b5b0      	push	{r4, r5, r7, lr}
    6946:	b088      	sub	sp, #32
    6948:	af02      	add	r7, sp, #8
    694a:	6078      	str	r0, [r7, #4]
    694c:	687a      	ldr	r2, [r7, #4]
    694e:	4ba9      	ldr	r3, [pc, #676]	(6bf4 <_ZN7SensorsC1Ev+0x2b0>)
    6950:	6013      	str	r3, [r2, #0]
{

    Sensors::sensors = this;
    6952:	4aa9      	ldr	r2, [pc, #676]	(6bf8 <_ZN7SensorsC1Ev+0x2b4>)
    6954:	687b      	ldr	r3, [r7, #4]
    6956:	6013      	str	r3, [r2, #0]
    *  ce tableau car sinon on ne récupérera pas les données dans le bon emplacement dans la mémoire
    */
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,7,11,6,8,10,13,15}; // D2,G2,AG(AD?),F2,D1,G1,AD(AG?),F1 //{10,11,12,13,14,15}; //
    #else // K - H107
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,14,13,11,5,4,15,12,8,10};
    6958:	4ba8      	ldr	r3, [pc, #672]	(6bfc <_ZN7SensorsC1Ev+0x2b8>)
    695a:	f107 020a 	add.w	r2, r7, #10	; 0xa
    695e:	f04f 0c0a 	mov.w	ip, #10	; 0xa
    6962:	4610      	mov	r0, r2
    6964:	4619      	mov	r1, r3
    6966:	4662      	mov	r2, ip
    6968:	f01c f8e8 	bl	22b3c <memcpy>
    #endif


    DMA_MEMORY_TYPE* data = AnalogSensor::initialiserADC(NB_CAPTEUR_A_ADC, channels);
    696c:	f107 030a 	add.w	r3, r7, #10	; 0xa
    6970:	f04f 000a 	mov.w	r0, #10	; 0xa
    6974:	4619      	mov	r1, r3
    6976:	f004 f9b5 	bl	ace4 <_ZN12AnalogSensor14initialiserADCEhPh>
    697a:	4603      	mov	r3, r0
    697c:	617b      	str	r3, [r7, #20]

    // On initialise le nombre de capteur de chaque type
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        nbSharp = 8;
    #else // K - H107
        nbSharp = 10;
    697e:	687a      	ldr	r2, [r7, #4]
    6980:	f04f 030a 	mov.w	r3, #10	; 0xa
    6984:	6093      	str	r3, [r2, #8]
    #endif

    #ifdef ROBOTHW
        nbUltrasound = 0;
    6986:	687a      	ldr	r2, [r7, #4]
    6988:	f04f 0300 	mov.w	r3, #0	; 0x0
    698c:	6113      	str	r3, [r2, #16]
        nbLimitSwitch = 0;
    698e:	687a      	ldr	r2, [r7, #4]
    6990:	f04f 0300 	mov.w	r3, #0	; 0x0
    6994:	6213      	str	r3, [r2, #32]
        nbLigthBarrier = 0;
    6996:	687a      	ldr	r2, [r7, #4]
    6998:	f04f 0300 	mov.w	r3, #0	; 0x0
    699c:	6193      	str	r3, [r2, #24]
    #endif

    //sharpNameVector = new SharpNameVector(nbSharp);
#ifdef ROBOTHW
    outputSensorVector = new OutputSensorVector(nbUltrasound);
    699e:	f04f 0010 	mov.w	r0, #16	; 0x10
    69a2:	f008 f8c1 	bl	eb28 <_Znwj>
    69a6:	4603      	mov	r3, r0
    69a8:	461c      	mov	r4, r3
    69aa:	687b      	ldr	r3, [r7, #4]
    69ac:	691b      	ldr	r3, [r3, #16]
    69ae:	4620      	mov	r0, r4
    69b0:	4619      	mov	r1, r3
    69b2:	f017 fcff 	bl	1e3b4 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei>
    69b6:	687b      	ldr	r3, [r7, #4]
    69b8:	631c      	str	r4, [r3, #48]
    limitSwitchNameVector = new LimitSwitchNameVector(nbLimitSwitch);
    69ba:	f04f 0010 	mov.w	r0, #16	; 0x10
    69be:	f008 f8b3 	bl	eb28 <_Znwj>
    69c2:	4603      	mov	r3, r0
    69c4:	461c      	mov	r4, r3
    69c6:	687b      	ldr	r3, [r7, #4]
    69c8:	6a1b      	ldr	r3, [r3, #32]
    69ca:	4620      	mov	r0, r4
    69cc:	4619      	mov	r1, r3
    69ce:	f017 fd17 	bl	1e400 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei>
    69d2:	687b      	ldr	r3, [r7, #4]
    69d4:	629c      	str	r4, [r3, #40]
    ligthBarrierNameVector = new LigthBarrierNameVector(nbLigthBarrier);
    69d6:	f04f 0010 	mov.w	r0, #16	; 0x10
    69da:	f008 f8a5 	bl	eb28 <_Znwj>
    69de:	4603      	mov	r3, r0
    69e0:	461c      	mov	r4, r3
    69e2:	687b      	ldr	r3, [r7, #4]
    69e4:	699b      	ldr	r3, [r3, #24]
    69e6:	4620      	mov	r0, r4
    69e8:	4619      	mov	r1, r3
    69ea:	f017 fd29 	bl	1e440 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei>
    69ee:	687b      	ldr	r3, [r7, #4]
    69f0:	62dc      	str	r4, [r3, #44]
#endif

    // On initialise les tableaux de pointeur qui contiendront les capteurs
    sharps = new SharpSensor*[nbSharp];
    69f2:	687b      	ldr	r3, [r7, #4]
    69f4:	689b      	ldr	r3, [r3, #8]
    69f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    69fa:	4618      	mov	r0, r3
    69fc:	f008 f92c 	bl	ec58 <_Znaj>
    6a00:	4603      	mov	r3, r0
    6a02:	461a      	mov	r2, r3
    6a04:	687b      	ldr	r3, [r7, #4]
    6a06:	605a      	str	r2, [r3, #4]
        sharps[7] = new SharpSensor(SharpSensor::NONE, 15, data);           // rien
        /*sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);*/           // rien
    #endif
    #ifdef STM32F10X_CL // Pin pour le stm32 h107
        sharps[0] = new SharpSensor(SharpSensor::FRONT_LEFT, 9, data);      // F1 - 9
    6a08:	687b      	ldr	r3, [r7, #4]
    6a0a:	685d      	ldr	r5, [r3, #4]
    6a0c:	f04f 0018 	mov.w	r0, #24	; 0x18
    6a10:	f008 f88a 	bl	eb28 <_Znwj>
    6a14:	4603      	mov	r3, r0
    6a16:	461c      	mov	r4, r3
    6a18:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6a1c:	9300      	str	r3, [sp, #0]
    6a1e:	4620      	mov	r0, r4
    6a20:	f04f 0102 	mov.w	r1, #2	; 0x2
    6a24:	f04f 0209 	mov.w	r2, #9	; 0x9
    6a28:	697b      	ldr	r3, [r7, #20]
    6a2a:	f006 fddd 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6a2e:	602c      	str	r4, [r5, #0]
        sharps[1] = new SharpSensor(SharpSensor::FRONT_RIGHT, 14, data);    // F2 - 14
    6a30:	687b      	ldr	r3, [r7, #4]
    6a32:	685b      	ldr	r3, [r3, #4]
    6a34:	f103 0504 	add.w	r5, r3, #4	; 0x4
    6a38:	f04f 0018 	mov.w	r0, #24	; 0x18
    6a3c:	f008 f874 	bl	eb28 <_Znwj>
    6a40:	4603      	mov	r3, r0
    6a42:	461c      	mov	r4, r3
    6a44:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6a48:	9300      	str	r3, [sp, #0]
    6a4a:	4620      	mov	r0, r4
    6a4c:	f04f 0103 	mov.w	r1, #3	; 0x3
    6a50:	f04f 020e 	mov.w	r2, #14	; 0xe
    6a54:	697b      	ldr	r3, [r7, #20]
    6a56:	f006 fdc7 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6a5a:	602c      	str	r4, [r5, #0]
        sharps[2] = new SharpSensor(SharpSensor::LEFT_FRONT, 13, data);     // G2 - 13
    6a5c:	687b      	ldr	r3, [r7, #4]
    6a5e:	685b      	ldr	r3, [r3, #4]
    6a60:	f103 0508 	add.w	r5, r3, #8	; 0x8
    6a64:	f04f 0018 	mov.w	r0, #24	; 0x18
    6a68:	f008 f85e 	bl	eb28 <_Znwj>
    6a6c:	4603      	mov	r3, r0
    6a6e:	461c      	mov	r4, r3
    6a70:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6a74:	9300      	str	r3, [sp, #0]
    6a76:	4620      	mov	r0, r4
    6a78:	f04f 0104 	mov.w	r1, #4	; 0x4
    6a7c:	f04f 020d 	mov.w	r2, #13	; 0xd
    6a80:	697b      	ldr	r3, [r7, #20]
    6a82:	f006 fdb1 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6a86:	602c      	str	r4, [r5, #0]
        sharps[3] = new SharpSensor(SharpSensor::LEFT_BACK, 11, data);      // G1 - 11
    6a88:	687b      	ldr	r3, [r7, #4]
    6a8a:	685b      	ldr	r3, [r3, #4]
    6a8c:	f103 050c 	add.w	r5, r3, #12	; 0xc
    6a90:	f04f 0018 	mov.w	r0, #24	; 0x18
    6a94:	f008 f848 	bl	eb28 <_Znwj>
    6a98:	4603      	mov	r3, r0
    6a9a:	461c      	mov	r4, r3
    6a9c:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6aa0:	9300      	str	r3, [sp, #0]
    6aa2:	4620      	mov	r0, r4
    6aa4:	f04f 0105 	mov.w	r1, #5	; 0x5
    6aa8:	f04f 020b 	mov.w	r2, #11	; 0xb
    6aac:	697b      	ldr	r3, [r7, #20]
    6aae:	f006 fd9b 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6ab2:	602c      	str	r4, [r5, #0]
        sharps[4] = new SharpSensor(SharpSensor::BACK_RIGHT, 5, data);      // AD - 5
    6ab4:	687b      	ldr	r3, [r7, #4]
    6ab6:	685b      	ldr	r3, [r3, #4]
    6ab8:	f103 0510 	add.w	r5, r3, #16	; 0x10
    6abc:	f04f 0018 	mov.w	r0, #24	; 0x18
    6ac0:	f008 f832 	bl	eb28 <_Znwj>
    6ac4:	4603      	mov	r3, r0
    6ac6:	461c      	mov	r4, r3
    6ac8:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6acc:	9300      	str	r3, [sp, #0]
    6ace:	4620      	mov	r0, r4
    6ad0:	f04f 0100 	mov.w	r1, #0	; 0x0
    6ad4:	f04f 0205 	mov.w	r2, #5	; 0x5
    6ad8:	697b      	ldr	r3, [r7, #20]
    6ada:	f006 fd85 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6ade:	602c      	str	r4, [r5, #0]
        sharps[5] = new SharpSensor(SharpSensor::BACK_LEFT, 4, data);       // AG - 4
    6ae0:	687b      	ldr	r3, [r7, #4]
    6ae2:	685b      	ldr	r3, [r3, #4]
    6ae4:	f103 0514 	add.w	r5, r3, #20	; 0x14
    6ae8:	f04f 0018 	mov.w	r0, #24	; 0x18
    6aec:	f008 f81c 	bl	eb28 <_Znwj>
    6af0:	4603      	mov	r3, r0
    6af2:	461c      	mov	r4, r3
    6af4:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6af8:	9300      	str	r3, [sp, #0]
    6afa:	4620      	mov	r0, r4
    6afc:	f04f 0101 	mov.w	r1, #1	; 0x1
    6b00:	f04f 0204 	mov.w	r2, #4	; 0x4
    6b04:	697b      	ldr	r3, [r7, #20]
    6b06:	f006 fd6f 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6b0a:	602c      	str	r4, [r5, #0]
        sharps[6] = new SharpSensor(SharpSensor::RIGHT_FRONT, 15, data);    // D1 - 15
    6b0c:	687b      	ldr	r3, [r7, #4]
    6b0e:	685b      	ldr	r3, [r3, #4]
    6b10:	f103 0518 	add.w	r5, r3, #24	; 0x18
    6b14:	f04f 0018 	mov.w	r0, #24	; 0x18
    6b18:	f008 f806 	bl	eb28 <_Znwj>
    6b1c:	4603      	mov	r3, r0
    6b1e:	461c      	mov	r4, r3
    6b20:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6b24:	9300      	str	r3, [sp, #0]
    6b26:	4620      	mov	r0, r4
    6b28:	f04f 0106 	mov.w	r1, #6	; 0x6
    6b2c:	f04f 020f 	mov.w	r2, #15	; 0xf
    6b30:	697b      	ldr	r3, [r7, #20]
    6b32:	f006 fd59 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6b36:	602c      	str	r4, [r5, #0]
        sharps[7] = new SharpSensor(SharpSensor::RIGHT_BACK, 12, data);     // D2 - 12
    6b38:	687b      	ldr	r3, [r7, #4]
    6b3a:	685b      	ldr	r3, [r3, #4]
    6b3c:	f103 051c 	add.w	r5, r3, #28	; 0x1c
    6b40:	f04f 0018 	mov.w	r0, #24	; 0x18
    6b44:	f007 fff0 	bl	eb28 <_Znwj>
    6b48:	4603      	mov	r3, r0
    6b4a:	461c      	mov	r4, r3
    6b4c:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6b50:	9300      	str	r3, [sp, #0]
    6b52:	4620      	mov	r0, r4
    6b54:	f04f 0107 	mov.w	r1, #7	; 0x7
    6b58:	f04f 020c 	mov.w	r2, #12	; 0xc
    6b5c:	697b      	ldr	r3, [r7, #20]
    6b5e:	f006 fd43 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6b62:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
    6b64:	687b      	ldr	r3, [r7, #4]
    6b66:	685b      	ldr	r3, [r3, #4]
    6b68:	f103 0520 	add.w	r5, r3, #32	; 0x20
    6b6c:	f04f 0018 	mov.w	r0, #24	; 0x18
    6b70:	f007 ffda 	bl	eb28 <_Znwj>
    6b74:	4603      	mov	r3, r0
    6b76:	461c      	mov	r4, r3
    6b78:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6b7c:	9300      	str	r3, [sp, #0]
    6b7e:	4620      	mov	r0, r4
    6b80:	f04f 0108 	mov.w	r1, #8	; 0x8
    6b84:	f04f 0208 	mov.w	r2, #8	; 0x8
    6b88:	697b      	ldr	r3, [r7, #20]
    6b8a:	f006 fd2d 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6b8e:	602c      	str	r4, [r5, #0]
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);           // rien
    6b90:	687b      	ldr	r3, [r7, #4]
    6b92:	685b      	ldr	r3, [r3, #4]
    6b94:	f103 0524 	add.w	r5, r3, #36	; 0x24
    6b98:	f04f 0018 	mov.w	r0, #24	; 0x18
    6b9c:	f007 ffc4 	bl	eb28 <_Znwj>
    6ba0:	4603      	mov	r3, r0
    6ba2:	461c      	mov	r4, r3
    6ba4:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6ba8:	9300      	str	r3, [sp, #0]
    6baa:	4620      	mov	r0, r4
    6bac:	f04f 0108 	mov.w	r1, #8	; 0x8
    6bb0:	f04f 020a 	mov.w	r2, #10	; 0xa
    6bb4:	697b      	ldr	r3, [r7, #20]
    6bb6:	f006 fd17 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6bba:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 14, data); // capteur bas ascenseur 14
        sharps[9] = new SharpSensor(SharpSensor::NONE, 15, data); // rien
    #endif
    //activeAllSharp();
#ifdef ROBOTHW
    ultrasounds = new UltrasoundSensor*[nbUltrasound];
    6bbc:	687b      	ldr	r3, [r7, #4]
    6bbe:	691b      	ldr	r3, [r3, #16]
    6bc0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6bc4:	4618      	mov	r0, r3
    6bc6:	f008 f847 	bl	ec58 <_Znaj>
    6bca:	4603      	mov	r3, r0
    6bcc:	461a      	mov	r2, r3
    6bce:	687b      	ldr	r3, [r7, #4]
    6bd0:	60da      	str	r2, [r3, #12]
    limitSwitchs = new  LimitSwitchSensor*[nbLimitSwitch];
    6bd2:	687b      	ldr	r3, [r7, #4]
    6bd4:	6a1b      	ldr	r3, [r3, #32]
    6bd6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6bda:	4618      	mov	r0, r3
    6bdc:	f008 f83c 	bl	ec58 <_Znaj>
    6be0:	4603      	mov	r3, r0
    6be2:	461a      	mov	r2, r3
    6be4:	687b      	ldr	r3, [r7, #4]
    6be6:	61da      	str	r2, [r3, #28]
    limitSwitchs[2] = new LimitSwitchSensor(LimitSwitchSensor::FRONT, GPIO_Pin_11, GPIOC);
#endif
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}
    6be8:	687b      	ldr	r3, [r7, #4]
    6bea:	4618      	mov	r0, r3
    6bec:	f107 0718 	add.w	r7, r7, #24	; 0x18
    6bf0:	46bd      	mov	sp, r7
    6bf2:	bdb0      	pop	{r4, r5, r7, pc}
    6bf4:	00023e60 	.word	0x00023e60
    6bf8:	2000055c 	.word	0x2000055c
    6bfc:	00023e68 	.word	0x00023e68

00006c00 <_ZN7Sensors12getSingletonEv>:
#include "sensors.h"

Sensors* Sensors::sensors = NULL;
Sensors* Sensors::singleton = 0;

Sensors* Sensors::getSingleton()
    6c00:	b590      	push	{r4, r7, lr}
    6c02:	b081      	sub	sp, #4
    6c04:	af00      	add	r7, sp, #0
{
    if(singleton == 0)
    6c06:	4b0b      	ldr	r3, [pc, #44]	(6c34 <_ZN7Sensors12getSingletonEv+0x34>)
    6c08:	681b      	ldr	r3, [r3, #0]
    6c0a:	2b00      	cmp	r3, #0
    6c0c:	d10a      	bne.n	6c24 <_ZN7Sensors12getSingletonEv+0x24>
    {
        singleton = new Sensors;
    6c0e:	f04f 0034 	mov.w	r0, #52	; 0x34
    6c12:	f007 ff89 	bl	eb28 <_Znwj>
    6c16:	4603      	mov	r3, r0
    6c18:	461c      	mov	r4, r3
    6c1a:	4620      	mov	r0, r4
    6c1c:	f7ff fe92 	bl	6944 <_ZN7SensorsC1Ev>
    6c20:	4b04      	ldr	r3, [pc, #16]	(6c34 <_ZN7Sensors12getSingletonEv+0x34>)
    6c22:	601c      	str	r4, [r3, #0]
    }
    return singleton;
    6c24:	4b03      	ldr	r3, [pc, #12]	(6c34 <_ZN7Sensors12getSingletonEv+0x34>)
    6c26:	681b      	ldr	r3, [r3, #0]
}
    6c28:	4618      	mov	r0, r3
    6c2a:	f107 0704 	add.w	r7, r7, #4	; 0x4
    6c2e:	46bd      	mov	sp, r7
    6c30:	bd90      	pop	{r4, r7, pc}
    6c32:	46c0      	nop			(mov r8, r8)
    6c34:	20000560 	.word	0x20000560

00006c38 <_ZN7SensorsC2Ev>:

Sensors::Sensors()
    6c38:	b5b0      	push	{r4, r5, r7, lr}
    6c3a:	b088      	sub	sp, #32
    6c3c:	af02      	add	r7, sp, #8
    6c3e:	6078      	str	r0, [r7, #4]
    6c40:	687a      	ldr	r2, [r7, #4]
    6c42:	4ba9      	ldr	r3, [pc, #676]	(6ee8 <_ZN7SensorsC2Ev+0x2b0>)
    6c44:	6013      	str	r3, [r2, #0]
{

    Sensors::sensors = this;
    6c46:	4aa9      	ldr	r2, [pc, #676]	(6eec <_ZN7SensorsC2Ev+0x2b4>)
    6c48:	687b      	ldr	r3, [r7, #4]
    6c4a:	6013      	str	r3, [r2, #0]
    *  ce tableau car sinon on ne récupérera pas les données dans le bon emplacement dans la mémoire
    */
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,7,11,6,8,10,13,15}; // D2,G2,AG(AD?),F2,D1,G1,AD(AG?),F1 //{10,11,12,13,14,15}; //
    #else // K - H107
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,14,13,11,5,4,15,12,8,10};
    6c4c:	4ba8      	ldr	r3, [pc, #672]	(6ef0 <_ZN7SensorsC2Ev+0x2b8>)
    6c4e:	f107 020a 	add.w	r2, r7, #10	; 0xa
    6c52:	f04f 0c0a 	mov.w	ip, #10	; 0xa
    6c56:	4610      	mov	r0, r2
    6c58:	4619      	mov	r1, r3
    6c5a:	4662      	mov	r2, ip
    6c5c:	f01b ff6e 	bl	22b3c <memcpy>
    #endif


    DMA_MEMORY_TYPE* data = AnalogSensor::initialiserADC(NB_CAPTEUR_A_ADC, channels);
    6c60:	f107 030a 	add.w	r3, r7, #10	; 0xa
    6c64:	f04f 000a 	mov.w	r0, #10	; 0xa
    6c68:	4619      	mov	r1, r3
    6c6a:	f004 f83b 	bl	ace4 <_ZN12AnalogSensor14initialiserADCEhPh>
    6c6e:	4603      	mov	r3, r0
    6c70:	617b      	str	r3, [r7, #20]

    // On initialise le nombre de capteur de chaque type
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        nbSharp = 8;
    #else // K - H107
        nbSharp = 10;
    6c72:	687a      	ldr	r2, [r7, #4]
    6c74:	f04f 030a 	mov.w	r3, #10	; 0xa
    6c78:	6093      	str	r3, [r2, #8]
    #endif

    #ifdef ROBOTHW
        nbUltrasound = 0;
    6c7a:	687a      	ldr	r2, [r7, #4]
    6c7c:	f04f 0300 	mov.w	r3, #0	; 0x0
    6c80:	6113      	str	r3, [r2, #16]
        nbLimitSwitch = 0;
    6c82:	687a      	ldr	r2, [r7, #4]
    6c84:	f04f 0300 	mov.w	r3, #0	; 0x0
    6c88:	6213      	str	r3, [r2, #32]
        nbLigthBarrier = 0;
    6c8a:	687a      	ldr	r2, [r7, #4]
    6c8c:	f04f 0300 	mov.w	r3, #0	; 0x0
    6c90:	6193      	str	r3, [r2, #24]
    #endif

    //sharpNameVector = new SharpNameVector(nbSharp);
#ifdef ROBOTHW
    outputSensorVector = new OutputSensorVector(nbUltrasound);
    6c92:	f04f 0010 	mov.w	r0, #16	; 0x10
    6c96:	f007 ff47 	bl	eb28 <_Znwj>
    6c9a:	4603      	mov	r3, r0
    6c9c:	461c      	mov	r4, r3
    6c9e:	687b      	ldr	r3, [r7, #4]
    6ca0:	691b      	ldr	r3, [r3, #16]
    6ca2:	4620      	mov	r0, r4
    6ca4:	4619      	mov	r1, r3
    6ca6:	f017 fb85 	bl	1e3b4 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei>
    6caa:	687b      	ldr	r3, [r7, #4]
    6cac:	631c      	str	r4, [r3, #48]
    limitSwitchNameVector = new LimitSwitchNameVector(nbLimitSwitch);
    6cae:	f04f 0010 	mov.w	r0, #16	; 0x10
    6cb2:	f007 ff39 	bl	eb28 <_Znwj>
    6cb6:	4603      	mov	r3, r0
    6cb8:	461c      	mov	r4, r3
    6cba:	687b      	ldr	r3, [r7, #4]
    6cbc:	6a1b      	ldr	r3, [r3, #32]
    6cbe:	4620      	mov	r0, r4
    6cc0:	4619      	mov	r1, r3
    6cc2:	f017 fb9d 	bl	1e400 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei>
    6cc6:	687b      	ldr	r3, [r7, #4]
    6cc8:	629c      	str	r4, [r3, #40]
    ligthBarrierNameVector = new LigthBarrierNameVector(nbLigthBarrier);
    6cca:	f04f 0010 	mov.w	r0, #16	; 0x10
    6cce:	f007 ff2b 	bl	eb28 <_Znwj>
    6cd2:	4603      	mov	r3, r0
    6cd4:	461c      	mov	r4, r3
    6cd6:	687b      	ldr	r3, [r7, #4]
    6cd8:	699b      	ldr	r3, [r3, #24]
    6cda:	4620      	mov	r0, r4
    6cdc:	4619      	mov	r1, r3
    6cde:	f017 fbaf 	bl	1e440 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei>
    6ce2:	687b      	ldr	r3, [r7, #4]
    6ce4:	62dc      	str	r4, [r3, #44]
#endif

    // On initialise les tableaux de pointeur qui contiendront les capteurs
    sharps = new SharpSensor*[nbSharp];
    6ce6:	687b      	ldr	r3, [r7, #4]
    6ce8:	689b      	ldr	r3, [r3, #8]
    6cea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6cee:	4618      	mov	r0, r3
    6cf0:	f007 ffb2 	bl	ec58 <_Znaj>
    6cf4:	4603      	mov	r3, r0
    6cf6:	461a      	mov	r2, r3
    6cf8:	687b      	ldr	r3, [r7, #4]
    6cfa:	605a      	str	r2, [r3, #4]
        sharps[7] = new SharpSensor(SharpSensor::NONE, 15, data);           // rien
        /*sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);*/           // rien
    #endif
    #ifdef STM32F10X_CL // Pin pour le stm32 h107
        sharps[0] = new SharpSensor(SharpSensor::FRONT_LEFT, 9, data);      // F1 - 9
    6cfc:	687b      	ldr	r3, [r7, #4]
    6cfe:	685d      	ldr	r5, [r3, #4]
    6d00:	f04f 0018 	mov.w	r0, #24	; 0x18
    6d04:	f007 ff10 	bl	eb28 <_Znwj>
    6d08:	4603      	mov	r3, r0
    6d0a:	461c      	mov	r4, r3
    6d0c:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6d10:	9300      	str	r3, [sp, #0]
    6d12:	4620      	mov	r0, r4
    6d14:	f04f 0102 	mov.w	r1, #2	; 0x2
    6d18:	f04f 0209 	mov.w	r2, #9	; 0x9
    6d1c:	697b      	ldr	r3, [r7, #20]
    6d1e:	f006 fc63 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6d22:	602c      	str	r4, [r5, #0]
        sharps[1] = new SharpSensor(SharpSensor::FRONT_RIGHT, 14, data);    // F2 - 14
    6d24:	687b      	ldr	r3, [r7, #4]
    6d26:	685b      	ldr	r3, [r3, #4]
    6d28:	f103 0504 	add.w	r5, r3, #4	; 0x4
    6d2c:	f04f 0018 	mov.w	r0, #24	; 0x18
    6d30:	f007 fefa 	bl	eb28 <_Znwj>
    6d34:	4603      	mov	r3, r0
    6d36:	461c      	mov	r4, r3
    6d38:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6d3c:	9300      	str	r3, [sp, #0]
    6d3e:	4620      	mov	r0, r4
    6d40:	f04f 0103 	mov.w	r1, #3	; 0x3
    6d44:	f04f 020e 	mov.w	r2, #14	; 0xe
    6d48:	697b      	ldr	r3, [r7, #20]
    6d4a:	f006 fc4d 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6d4e:	602c      	str	r4, [r5, #0]
        sharps[2] = new SharpSensor(SharpSensor::LEFT_FRONT, 13, data);     // G2 - 13
    6d50:	687b      	ldr	r3, [r7, #4]
    6d52:	685b      	ldr	r3, [r3, #4]
    6d54:	f103 0508 	add.w	r5, r3, #8	; 0x8
    6d58:	f04f 0018 	mov.w	r0, #24	; 0x18
    6d5c:	f007 fee4 	bl	eb28 <_Znwj>
    6d60:	4603      	mov	r3, r0
    6d62:	461c      	mov	r4, r3
    6d64:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6d68:	9300      	str	r3, [sp, #0]
    6d6a:	4620      	mov	r0, r4
    6d6c:	f04f 0104 	mov.w	r1, #4	; 0x4
    6d70:	f04f 020d 	mov.w	r2, #13	; 0xd
    6d74:	697b      	ldr	r3, [r7, #20]
    6d76:	f006 fc37 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6d7a:	602c      	str	r4, [r5, #0]
        sharps[3] = new SharpSensor(SharpSensor::LEFT_BACK, 11, data);      // G1 - 11
    6d7c:	687b      	ldr	r3, [r7, #4]
    6d7e:	685b      	ldr	r3, [r3, #4]
    6d80:	f103 050c 	add.w	r5, r3, #12	; 0xc
    6d84:	f04f 0018 	mov.w	r0, #24	; 0x18
    6d88:	f007 fece 	bl	eb28 <_Znwj>
    6d8c:	4603      	mov	r3, r0
    6d8e:	461c      	mov	r4, r3
    6d90:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6d94:	9300      	str	r3, [sp, #0]
    6d96:	4620      	mov	r0, r4
    6d98:	f04f 0105 	mov.w	r1, #5	; 0x5
    6d9c:	f04f 020b 	mov.w	r2, #11	; 0xb
    6da0:	697b      	ldr	r3, [r7, #20]
    6da2:	f006 fc21 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6da6:	602c      	str	r4, [r5, #0]
        sharps[4] = new SharpSensor(SharpSensor::BACK_RIGHT, 5, data);      // AD - 5
    6da8:	687b      	ldr	r3, [r7, #4]
    6daa:	685b      	ldr	r3, [r3, #4]
    6dac:	f103 0510 	add.w	r5, r3, #16	; 0x10
    6db0:	f04f 0018 	mov.w	r0, #24	; 0x18
    6db4:	f007 feb8 	bl	eb28 <_Znwj>
    6db8:	4603      	mov	r3, r0
    6dba:	461c      	mov	r4, r3
    6dbc:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6dc0:	9300      	str	r3, [sp, #0]
    6dc2:	4620      	mov	r0, r4
    6dc4:	f04f 0100 	mov.w	r1, #0	; 0x0
    6dc8:	f04f 0205 	mov.w	r2, #5	; 0x5
    6dcc:	697b      	ldr	r3, [r7, #20]
    6dce:	f006 fc0b 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6dd2:	602c      	str	r4, [r5, #0]
        sharps[5] = new SharpSensor(SharpSensor::BACK_LEFT, 4, data);       // AG - 4
    6dd4:	687b      	ldr	r3, [r7, #4]
    6dd6:	685b      	ldr	r3, [r3, #4]
    6dd8:	f103 0514 	add.w	r5, r3, #20	; 0x14
    6ddc:	f04f 0018 	mov.w	r0, #24	; 0x18
    6de0:	f007 fea2 	bl	eb28 <_Znwj>
    6de4:	4603      	mov	r3, r0
    6de6:	461c      	mov	r4, r3
    6de8:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6dec:	9300      	str	r3, [sp, #0]
    6dee:	4620      	mov	r0, r4
    6df0:	f04f 0101 	mov.w	r1, #1	; 0x1
    6df4:	f04f 0204 	mov.w	r2, #4	; 0x4
    6df8:	697b      	ldr	r3, [r7, #20]
    6dfa:	f006 fbf5 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6dfe:	602c      	str	r4, [r5, #0]
        sharps[6] = new SharpSensor(SharpSensor::RIGHT_FRONT, 15, data);    // D1 - 15
    6e00:	687b      	ldr	r3, [r7, #4]
    6e02:	685b      	ldr	r3, [r3, #4]
    6e04:	f103 0518 	add.w	r5, r3, #24	; 0x18
    6e08:	f04f 0018 	mov.w	r0, #24	; 0x18
    6e0c:	f007 fe8c 	bl	eb28 <_Znwj>
    6e10:	4603      	mov	r3, r0
    6e12:	461c      	mov	r4, r3
    6e14:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6e18:	9300      	str	r3, [sp, #0]
    6e1a:	4620      	mov	r0, r4
    6e1c:	f04f 0106 	mov.w	r1, #6	; 0x6
    6e20:	f04f 020f 	mov.w	r2, #15	; 0xf
    6e24:	697b      	ldr	r3, [r7, #20]
    6e26:	f006 fbdf 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6e2a:	602c      	str	r4, [r5, #0]
        sharps[7] = new SharpSensor(SharpSensor::RIGHT_BACK, 12, data);     // D2 - 12
    6e2c:	687b      	ldr	r3, [r7, #4]
    6e2e:	685b      	ldr	r3, [r3, #4]
    6e30:	f103 051c 	add.w	r5, r3, #28	; 0x1c
    6e34:	f04f 0018 	mov.w	r0, #24	; 0x18
    6e38:	f007 fe76 	bl	eb28 <_Znwj>
    6e3c:	4603      	mov	r3, r0
    6e3e:	461c      	mov	r4, r3
    6e40:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6e44:	9300      	str	r3, [sp, #0]
    6e46:	4620      	mov	r0, r4
    6e48:	f04f 0107 	mov.w	r1, #7	; 0x7
    6e4c:	f04f 020c 	mov.w	r2, #12	; 0xc
    6e50:	697b      	ldr	r3, [r7, #20]
    6e52:	f006 fbc9 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6e56:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
    6e58:	687b      	ldr	r3, [r7, #4]
    6e5a:	685b      	ldr	r3, [r3, #4]
    6e5c:	f103 0520 	add.w	r5, r3, #32	; 0x20
    6e60:	f04f 0018 	mov.w	r0, #24	; 0x18
    6e64:	f007 fe60 	bl	eb28 <_Znwj>
    6e68:	4603      	mov	r3, r0
    6e6a:	461c      	mov	r4, r3
    6e6c:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6e70:	9300      	str	r3, [sp, #0]
    6e72:	4620      	mov	r0, r4
    6e74:	f04f 0108 	mov.w	r1, #8	; 0x8
    6e78:	f04f 0208 	mov.w	r2, #8	; 0x8
    6e7c:	697b      	ldr	r3, [r7, #20]
    6e7e:	f006 fbb3 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6e82:	602c      	str	r4, [r5, #0]
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);           // rien
    6e84:	687b      	ldr	r3, [r7, #4]
    6e86:	685b      	ldr	r3, [r3, #4]
    6e88:	f103 0524 	add.w	r5, r3, #36	; 0x24
    6e8c:	f04f 0018 	mov.w	r0, #24	; 0x18
    6e90:	f007 fe4a 	bl	eb28 <_Znwj>
    6e94:	4603      	mov	r3, r0
    6e96:	461c      	mov	r4, r3
    6e98:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6e9c:	9300      	str	r3, [sp, #0]
    6e9e:	4620      	mov	r0, r4
    6ea0:	f04f 0108 	mov.w	r1, #8	; 0x8
    6ea4:	f04f 020a 	mov.w	r2, #10	; 0xa
    6ea8:	697b      	ldr	r3, [r7, #20]
    6eaa:	f006 fb9d 	bl	d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6eae:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 14, data); // capteur bas ascenseur 14
        sharps[9] = new SharpSensor(SharpSensor::NONE, 15, data); // rien
    #endif
    //activeAllSharp();
#ifdef ROBOTHW
    ultrasounds = new UltrasoundSensor*[nbUltrasound];
    6eb0:	687b      	ldr	r3, [r7, #4]
    6eb2:	691b      	ldr	r3, [r3, #16]
    6eb4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6eb8:	4618      	mov	r0, r3
    6eba:	f007 fecd 	bl	ec58 <_Znaj>
    6ebe:	4603      	mov	r3, r0
    6ec0:	461a      	mov	r2, r3
    6ec2:	687b      	ldr	r3, [r7, #4]
    6ec4:	60da      	str	r2, [r3, #12]
    limitSwitchs = new  LimitSwitchSensor*[nbLimitSwitch];
    6ec6:	687b      	ldr	r3, [r7, #4]
    6ec8:	6a1b      	ldr	r3, [r3, #32]
    6eca:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6ece:	4618      	mov	r0, r3
    6ed0:	f007 fec2 	bl	ec58 <_Znaj>
    6ed4:	4603      	mov	r3, r0
    6ed6:	461a      	mov	r2, r3
    6ed8:	687b      	ldr	r3, [r7, #4]
    6eda:	61da      	str	r2, [r3, #28]
    limitSwitchs[2] = new LimitSwitchSensor(LimitSwitchSensor::FRONT, GPIO_Pin_11, GPIOC);
#endif
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}
    6edc:	687b      	ldr	r3, [r7, #4]
    6ede:	4618      	mov	r0, r3
    6ee0:	f107 0718 	add.w	r7, r7, #24	; 0x18
    6ee4:	46bd      	mov	sp, r7
    6ee6:	bdb0      	pop	{r4, r5, r7, pc}
    6ee8:	00023e60 	.word	0x00023e60
    6eec:	2000055c 	.word	0x2000055c
    6ef0:	00023e68 	.word	0x00023e68

00006ef4 <_ZN5Servo13shutDownServoEv>:

    float rc = m_RC0degre + m_coefRC * angle;
	pwm_handler.setDutyCycle(rc);
}

void Servo::shutDownServo()
    6ef4:	b580      	push	{r7, lr}
    6ef6:	b082      	sub	sp, #8
    6ef8:	af00      	add	r7, sp, #0
    6efa:	6078      	str	r0, [r7, #4]
{
    pwm_handler.setPulseWidth(0);
    6efc:	687b      	ldr	r3, [r7, #4]
    6efe:	4618      	mov	r0, r3
    6f00:	f04f 0100 	mov.w	r1, #0	; 0x0
    6f04:	f005 fd66 	bl	c9d4 <_ZN10PWMHandler13setPulseWidthEt>
}
    6f08:	f107 0708 	add.w	r7, r7, #8	; 0x8
    6f0c:	46bd      	mov	sp, r7
    6f0e:	bd80      	pop	{r7, pc}

00006f10 <_ZN5Servo9goToAngleEf>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx, &GPIO_InitStructure);
}

void Servo::goToAngle(Angle angle)
    6f10:	b590      	push	{r4, r7, lr}
    6f12:	b085      	sub	sp, #20
    6f14:	af00      	add	r7, sp, #0
    6f16:	6078      	str	r0, [r7, #4]
    6f18:	6039      	str	r1, [r7, #0]
	float pulseWidth = angle*19.5f+1200.0f; // pour le servo ES 539 made in malaysia

    // Donner la rapport au PWM
	pwm_handler.setPulseWidth(pulseWidth);*/

    if (angle < 0.0)
    6f1a:	6838      	ldr	r0, [r7, #0]
    6f1c:	4914      	ldr	r1, [pc, #80]	(6f70 <_ZN5Servo9goToAngleEf+0x60>)
    6f1e:	f016 f97b 	bl	1d218 <__aeabi_fcmplt>
    6f22:	4603      	mov	r3, r0
    6f24:	2b00      	cmp	r3, #0
    6f26:	d002      	beq.n	6f2e <_ZN5Servo9goToAngleEf+0x1e>
        angle = 0.0f;
    6f28:	4b11      	ldr	r3, [pc, #68]	(6f70 <_ZN5Servo9goToAngleEf+0x60>)
    6f2a:	603b      	str	r3, [r7, #0]
    6f2c:	e008      	b.n	6f40 <_ZN5Servo9goToAngleEf+0x30>
    else if (angle > 180.0f)
    6f2e:	6838      	ldr	r0, [r7, #0]
    6f30:	4910      	ldr	r1, [pc, #64]	(6f74 <_ZN5Servo9goToAngleEf+0x64>)
    6f32:	f016 f98f 	bl	1d254 <__aeabi_fcmpgt>
    6f36:	4603      	mov	r3, r0
    6f38:	2b00      	cmp	r3, #0
    6f3a:	d001      	beq.n	6f40 <_ZN5Servo9goToAngleEf+0x30>
        angle = 180.0f;
    6f3c:	4b0d      	ldr	r3, [pc, #52]	(6f74 <_ZN5Servo9goToAngleEf+0x64>)
    6f3e:	603b      	str	r3, [r7, #0]

    float rc = m_RC0degre + m_coefRC * angle;
    6f40:	687b      	ldr	r3, [r7, #4]
    6f42:	68dc      	ldr	r4, [r3, #12]
    6f44:	687b      	ldr	r3, [r7, #4]
    6f46:	691b      	ldr	r3, [r3, #16]
    6f48:	4618      	mov	r0, r3
    6f4a:	6839      	ldr	r1, [r7, #0]
    6f4c:	f015 ffc8 	bl	1cee0 <__aeabi_fmul>
    6f50:	4603      	mov	r3, r0
    6f52:	4620      	mov	r0, r4
    6f54:	4619      	mov	r1, r3
    6f56:	f015 febb 	bl	1ccd0 <__addsf3>
    6f5a:	4603      	mov	r3, r0
    6f5c:	60fb      	str	r3, [r7, #12]
	pwm_handler.setDutyCycle(rc);
    6f5e:	687b      	ldr	r3, [r7, #4]
    6f60:	4618      	mov	r0, r3
    6f62:	68f9      	ldr	r1, [r7, #12]
    6f64:	f005 fd88 	bl	ca78 <_ZN10PWMHandler12setDutyCycleEf>
}
    6f68:	f107 0714 	add.w	r7, r7, #20	; 0x14
    6f6c:	46bd      	mov	sp, r7
    6f6e:	bd90      	pop	{r4, r7, pc}
    6f70:	00000000 	.word	0x00000000
    6f74:	43340000 	.word	0x43340000

00006f78 <_ZN5Servo7initPinEP12GPIO_TypeDeft>:
{
    shutDownServo();
}

// initialise la pin du servo
void Servo::initPin(GPIO_TypeDef* GPIOx, uint16_t pinX)
    6f78:	b580      	push	{r7, lr}
    6f7a:	b084      	sub	sp, #16
    6f7c:	af00      	add	r7, sp, #0
    6f7e:	6078      	str	r0, [r7, #4]
    6f80:	460b      	mov	r3, r1
    6f82:	807b      	strh	r3, [r7, #2]
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = pinX;
    6f84:	887b      	ldrh	r3, [r7, #2]
    6f86:	81bb      	strh	r3, [r7, #12]

    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    6f88:	f04f 0348 	mov.w	r3, #72	; 0x48
    6f8c:	73fb      	strb	r3, [r7, #15]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    6f8e:	f04f 0303 	mov.w	r3, #3	; 0x3
    6f92:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(GPIOx, &GPIO_InitStructure);
    6f94:	f107 030c 	add.w	r3, r7, #12	; 0xc
    6f98:	6878      	ldr	r0, [r7, #4]
    6f9a:	4619      	mov	r1, r3
    6f9c:	f7fa fb88 	bl	16b0 <GPIO_Init>
}
    6fa0:	f107 0710 	add.w	r7, r7, #16	; 0x10
    6fa4:	46bd      	mov	sp, r7
    6fa6:	bd80      	pop	{r7, pc}

00006fa8 <_ZN5ServoD1Ev>:
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
{
}

Servo::~Servo()
    6fa8:	b580      	push	{r7, lr}
    6faa:	b082      	sub	sp, #8
    6fac:	af00      	add	r7, sp, #0
    6fae:	6078      	str	r0, [r7, #4]
{
    shutDownServo();
    6fb0:	6878      	ldr	r0, [r7, #4]
    6fb2:	f7ff ff9f 	bl	6ef4 <_ZN5Servo13shutDownServoEv>
}
    6fb6:	687b      	ldr	r3, [r7, #4]
    6fb8:	4618      	mov	r0, r3
    6fba:	f005 fd3d 	bl	ca38 <_ZN10PWMHandlerD1Ev>
    6fbe:	687b      	ldr	r3, [r7, #4]
    6fc0:	4618      	mov	r0, r3
    6fc2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    6fc6:	46bd      	mov	sp, r7
    6fc8:	bd80      	pop	{r7, pc}
    6fca:	46c0      	nop			(mov r8, r8)

00006fcc <_ZN5ServoD2Ev>:
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
{
}

Servo::~Servo()
    6fcc:	b580      	push	{r7, lr}
    6fce:	b082      	sub	sp, #8
    6fd0:	af00      	add	r7, sp, #0
    6fd2:	6078      	str	r0, [r7, #4]
{
    shutDownServo();
    6fd4:	6878      	ldr	r0, [r7, #4]
    6fd6:	f7ff ff8d 	bl	6ef4 <_ZN5Servo13shutDownServoEv>
}
    6fda:	687b      	ldr	r3, [r7, #4]
    6fdc:	4618      	mov	r0, r3
    6fde:	f005 fd2b 	bl	ca38 <_ZN10PWMHandlerD1Ev>
    6fe2:	687b      	ldr	r3, [r7, #4]
    6fe4:	4618      	mov	r0, r3
    6fe6:	f107 0708 	add.w	r7, r7, #8	; 0x8
    6fea:	46bd      	mov	sp, r7
    6fec:	bd80      	pop	{r7, pc}
    6fee:	46c0      	nop			(mov r8, r8)

00006ff0 <_ZN5ServoC1EP5Timerhff>:
#include "servo.h"

#ifdef ROBOTHW

// on donne le rapport cyclique de l'angle minimal (0 degré) et celui de l'angle maximal (180 degrés)
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    6ff0:	b580      	push	{r7, lr}
    6ff2:	b084      	sub	sp, #16
    6ff4:	af00      	add	r7, sp, #0
    6ff6:	60f8      	str	r0, [r7, #12]
    6ff8:	60b9      	str	r1, [r7, #8]
    6ffa:	603b      	str	r3, [r7, #0]
    6ffc:	4613      	mov	r3, r2
    6ffe:	71fb      	strb	r3, [r7, #7]
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
    7000:	68fb      	ldr	r3, [r7, #12]
    7002:	79fa      	ldrb	r2, [r7, #7]
    7004:	4618      	mov	r0, r3
    7006:	68b9      	ldr	r1, [r7, #8]
    7008:	f005 fd58 	bl	cabc <_ZN10PWMHandlerC1EP5Timerh>
    700c:	68fa      	ldr	r2, [r7, #12]
    700e:	68bb      	ldr	r3, [r7, #8]
    7010:	6093      	str	r3, [r2, #8]
    7012:	68fa      	ldr	r2, [r7, #12]
    7014:	683b      	ldr	r3, [r7, #0]
    7016:	60d3      	str	r3, [r2, #12]
    7018:	69b8      	ldr	r0, [r7, #24]
    701a:	6839      	ldr	r1, [r7, #0]
    701c:	f015 fe56 	bl	1cccc <__aeabi_fsub>
    7020:	4603      	mov	r3, r0
    7022:	4618      	mov	r0, r3
    7024:	4906      	ldr	r1, [pc, #24]	(7040 <_ZN5ServoC1EP5Timerhff+0x50>)
    7026:	f016 f80f 	bl	1d048 <__aeabi_fdiv>
    702a:	4603      	mov	r3, r0
    702c:	461a      	mov	r2, r3
    702e:	68fb      	ldr	r3, [r7, #12]
    7030:	611a      	str	r2, [r3, #16]
{
}
    7032:	68fb      	ldr	r3, [r7, #12]
    7034:	4618      	mov	r0, r3
    7036:	f107 0710 	add.w	r7, r7, #16	; 0x10
    703a:	46bd      	mov	sp, r7
    703c:	bd80      	pop	{r7, pc}
    703e:	46c0      	nop			(mov r8, r8)
    7040:	43340000 	.word	0x43340000

00007044 <_ZN5ServoC2EP5Timerhff>:
#include "servo.h"

#ifdef ROBOTHW

// on donne le rapport cyclique de l'angle minimal (0 degré) et celui de l'angle maximal (180 degrés)
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    7044:	b580      	push	{r7, lr}
    7046:	b084      	sub	sp, #16
    7048:	af00      	add	r7, sp, #0
    704a:	60f8      	str	r0, [r7, #12]
    704c:	60b9      	str	r1, [r7, #8]
    704e:	603b      	str	r3, [r7, #0]
    7050:	4613      	mov	r3, r2
    7052:	71fb      	strb	r3, [r7, #7]
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
    7054:	68fb      	ldr	r3, [r7, #12]
    7056:	79fa      	ldrb	r2, [r7, #7]
    7058:	4618      	mov	r0, r3
    705a:	68b9      	ldr	r1, [r7, #8]
    705c:	f005 fd2e 	bl	cabc <_ZN10PWMHandlerC1EP5Timerh>
    7060:	68fa      	ldr	r2, [r7, #12]
    7062:	68bb      	ldr	r3, [r7, #8]
    7064:	6093      	str	r3, [r2, #8]
    7066:	68fa      	ldr	r2, [r7, #12]
    7068:	683b      	ldr	r3, [r7, #0]
    706a:	60d3      	str	r3, [r2, #12]
    706c:	69b8      	ldr	r0, [r7, #24]
    706e:	6839      	ldr	r1, [r7, #0]
    7070:	f015 fe2c 	bl	1cccc <__aeabi_fsub>
    7074:	4603      	mov	r3, r0
    7076:	4618      	mov	r0, r3
    7078:	4906      	ldr	r1, [pc, #24]	(7094 <_ZN5ServoC2EP5Timerhff+0x50>)
    707a:	f015 ffe5 	bl	1d048 <__aeabi_fdiv>
    707e:	4603      	mov	r3, r0
    7080:	461a      	mov	r2, r3
    7082:	68fb      	ldr	r3, [r7, #12]
    7084:	611a      	str	r2, [r3, #16]
{
}
    7086:	68fb      	ldr	r3, [r7, #12]
    7088:	4618      	mov	r0, r3
    708a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    708e:	46bd      	mov	sp, r7
    7090:	bd80      	pop	{r7, pc}
    7092:	46c0      	nop			(mov r8, r8)
    7094:	43340000 	.word	0x43340000

00007098 <_Z9wrapAnglef>:
#include "angle.h"
#include <math.h>

// Retourne la valeur de l'angle dans un float entre -PI et PI.
Angle wrapAngle(Angle angle)
    7098:	b580      	push	{r7, lr}
    709a:	b082      	sub	sp, #8
    709c:	af00      	add	r7, sp, #0
    709e:	6078      	str	r0, [r7, #4]
{
    static const Angle M_2PI = 6.283185307179586476925;

    if (angle > 0)
    70a0:	6878      	ldr	r0, [r7, #4]
    70a2:	491f      	ldr	r1, [pc, #124]	(7120 <_Z9wrapAnglef+0x88>)
    70a4:	f016 f8d6 	bl	1d254 <__aeabi_fcmpgt>
    70a8:	4603      	mov	r3, r0
    70aa:	2b00      	cmp	r3, #0
    70ac:	d106      	bne.n	70bc <_Z9wrapAnglef+0x24>
    70ae:	e01a      	b.n	70e6 <_Z9wrapAnglef+0x4e>
    {
        while (angle > M_PI)
            angle -= M_2PI;
    70b0:	6878      	ldr	r0, [r7, #4]
    70b2:	491c      	ldr	r1, [pc, #112]	(7124 <_Z9wrapAnglef+0x8c>)
    70b4:	f015 fe0a 	bl	1cccc <__aeabi_fsub>
    70b8:	4603      	mov	r3, r0
    70ba:	607b      	str	r3, [r7, #4]
{
    static const Angle M_2PI = 6.283185307179586476925;

    if (angle > 0)
    {
        while (angle > M_PI)
    70bc:	6878      	ldr	r0, [r7, #4]
    70be:	f015 fa9d 	bl	1c5fc <__aeabi_f2d>
    70c2:	4602      	mov	r2, r0
    70c4:	460b      	mov	r3, r1
    70c6:	4610      	mov	r0, r2
    70c8:	4619      	mov	r1, r3
    70ca:	a211      	add	r2, pc, #68	(adr r2, 7110 <_Z9wrapAnglef+0x78>)
    70cc:	ca0c      	ldmia	r2!, {r2, r3}
    70ce:	f015 fd77 	bl	1cbc0 <__aeabi_dcmpgt>
    70d2:	4603      	mov	r3, r0
    70d4:	2b00      	cmp	r3, #0
    70d6:	d1eb      	bne.n	70b0 <_Z9wrapAnglef+0x18>
    70d8:	e013      	b.n	7102 <_Z9wrapAnglef+0x6a>
            angle -= M_2PI;
    }
    else
    {
        while (angle < -M_PI)
            angle += M_2PI;
    70da:	6878      	ldr	r0, [r7, #4]
    70dc:	4911      	ldr	r1, [pc, #68]	(7124 <_Z9wrapAnglef+0x8c>)
    70de:	f015 fdf7 	bl	1ccd0 <__addsf3>
    70e2:	4603      	mov	r3, r0
    70e4:	607b      	str	r3, [r7, #4]
        while (angle > M_PI)
            angle -= M_2PI;
    }
    else
    {
        while (angle < -M_PI)
    70e6:	6878      	ldr	r0, [r7, #4]
    70e8:	f015 fa88 	bl	1c5fc <__aeabi_f2d>
    70ec:	4602      	mov	r2, r0
    70ee:	460b      	mov	r3, r1
    70f0:	4610      	mov	r0, r2
    70f2:	4619      	mov	r1, r3
    70f4:	a208      	add	r2, pc, #32	(adr r2, 7118 <_Z9wrapAnglef+0x80>)
    70f6:	ca0c      	ldmia	r2!, {r2, r3}
    70f8:	f015 fd44 	bl	1cb84 <__aeabi_dcmplt>
    70fc:	4603      	mov	r3, r0
    70fe:	2b00      	cmp	r3, #0
    7100:	d1eb      	bne.n	70da <_Z9wrapAnglef+0x42>
            angle += M_2PI;
    }
    return angle;
    7102:	687b      	ldr	r3, [r7, #4]
}
    7104:	4618      	mov	r0, r3
    7106:	f107 0708 	add.w	r7, r7, #8	; 0x8
    710a:	46bd      	mov	sp, r7
    710c:	bd80      	pop	{r7, pc}
    710e:	46c0      	nop			(mov r8, r8)
    7110:	54442d18 	.word	0x54442d18
    7114:	400921fb 	.word	0x400921fb
    7118:	54442d18 	.word	0x54442d18
    711c:	c00921fb 	.word	0xc00921fb
    7120:	00000000 	.word	0x00000000
    7124:	40c90fdb 	.word	0x40c90fdb

00007128 <_Z7angleEqff>:

// Vérifie s'il y a égalité ou presque entre deux angles.
bool angleEq(Angle a1, Angle a2)
    7128:	b580      	push	{r7, lr}
    712a:	b084      	sub	sp, #16
    712c:	af00      	add	r7, sp, #0
    712e:	60f8      	str	r0, [r7, #12]
    7130:	60b9      	str	r1, [r7, #8]
{
    static const Angle epsilon = 0.1;
    return (fabs(wrapAngle(a1 - a2)) < epsilon);
    7132:	68f8      	ldr	r0, [r7, #12]
    7134:	68b9      	ldr	r1, [r7, #8]
    7136:	f015 fdc9 	bl	1cccc <__aeabi_fsub>
    713a:	4603      	mov	r3, r0
    713c:	4618      	mov	r0, r3
    713e:	f7ff ffab 	bl	7098 <_Z9wrapAnglef>
    7142:	4603      	mov	r3, r0
    7144:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    7148:	f04f 0300 	mov.w	r3, #0	; 0x0
    714c:	71fb      	strb	r3, [r7, #7]
    714e:	4610      	mov	r0, r2
    7150:	4907      	ldr	r1, [pc, #28]	(7170 <_Z7angleEqff+0x48>)
    7152:	f016 f861 	bl	1d218 <__aeabi_fcmplt>
    7156:	4603      	mov	r3, r0
    7158:	2b00      	cmp	r3, #0
    715a:	d002      	beq.n	7162 <_Z7angleEqff+0x3a>
    715c:	f04f 0301 	mov.w	r3, #1	; 0x1
    7160:	71fb      	strb	r3, [r7, #7]
    7162:	79fb      	ldrb	r3, [r7, #7]
}
    7164:	4618      	mov	r0, r3
    7166:	f107 0710 	add.w	r7, r7, #16	; 0x10
    716a:	46bd      	mov	sp, r7
    716c:	bd80      	pop	{r7, pc}
    716e:	46c0      	nop			(mov r8, r8)
    7170:	3dcccccd 	.word	0x3dcccccd
    7174:	46c046c0 	.word	0x46c046c0

00007178 <_ZN14Asservissement14setLinearSpeedEf>:
    SysTick_IRQ.NVIC_IRQChannelSubPriority = 1;
    NVIC_Init(&SysTick_IRQ);
#endif
}

void Asservissement::setLinearSpeed(Vitesse vitesse)
    7178:	b480      	push	{r7}
    717a:	b083      	sub	sp, #12
    717c:	af00      	add	r7, sp, #0
    717e:	6078      	str	r0, [r7, #4]
    7180:	6039      	str	r1, [r7, #0]
{
    vitesseLineaire = vitesse;
    7182:	687a      	ldr	r2, [r7, #4]
    7184:	683b      	ldr	r3, [r7, #0]
    7186:	f8c2 30fc 	str.w	r3, [r2, #252]
    //setEnabledPIDDistance(true);
}
    718a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    718e:	46bd      	mov	sp, r7
    7190:	bc80      	pop	{r7}
    7192:	4770      	bx	lr

00007194 <_ZN14Asservissement15setAngularSpeedEf>:

void Asservissement::setAngularSpeed(VitesseAngulaire vitesse)
    7194:	b480      	push	{r7}
    7196:	b083      	sub	sp, #12
    7198:	af00      	add	r7, sp, #0
    719a:	6078      	str	r0, [r7, #4]
    719c:	6039      	str	r1, [r7, #0]
{
    vitesseAngulaire = vitesse;
    719e:	687a      	ldr	r2, [r7, #4]
    71a0:	683b      	ldr	r3, [r7, #0]
    71a2:	f8c2 3100 	str.w	r3, [r2, #256]
    //setEnabledPIDAngle(true);
}
    71a6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    71aa:	46bd      	mov	sp, r7
    71ac:	bc80      	pop	{r7}
    71ae:	4770      	bx	lr

000071b0 <_ZN14Asservissement16setCommandSpeedsEP7Command>:

void Asservissement::setCommandSpeeds(Command* command)
    71b0:	b580      	push	{r7, lr}
    71b2:	b082      	sub	sp, #8
    71b4:	af00      	add	r7, sp, #0
    71b6:	6078      	str	r0, [r7, #4]
    71b8:	6039      	str	r1, [r7, #0]
{
    if (command != NULL)
    71ba:	683b      	ldr	r3, [r7, #0]
    71bc:	2b00      	cmp	r3, #0
    71be:	d018      	beq.n	71f2 <_ZN14Asservissement16setCommandSpeedsEP7Command+0x42>
    {
        setLinearSpeed(command->getLinearSpeed());
    71c0:	683b      	ldr	r3, [r7, #0]
    71c2:	681b      	ldr	r3, [r3, #0]
    71c4:	f103 0310 	add.w	r3, r3, #16	; 0x10
    71c8:	681b      	ldr	r3, [r3, #0]
    71ca:	6838      	ldr	r0, [r7, #0]
    71cc:	4798      	blx	r3
    71ce:	4603      	mov	r3, r0
    71d0:	6878      	ldr	r0, [r7, #4]
    71d2:	4619      	mov	r1, r3
    71d4:	f7ff ffd0 	bl	7178 <_ZN14Asservissement14setLinearSpeedEf>
        setAngularSpeed(command->getAngularSpeed());
    71d8:	683b      	ldr	r3, [r7, #0]
    71da:	681b      	ldr	r3, [r3, #0]
    71dc:	f103 0314 	add.w	r3, r3, #20	; 0x14
    71e0:	681b      	ldr	r3, [r3, #0]
    71e2:	6838      	ldr	r0, [r7, #0]
    71e4:	4798      	blx	r3
    71e6:	4603      	mov	r3, r0
    71e8:	6878      	ldr	r0, [r7, #4]
    71ea:	4619      	mov	r1, r3
    71ec:	f7ff ffd2 	bl	7194 <_ZN14Asservissement15setAngularSpeedEf>
    71f0:	e007      	b.n	7202 <_ZN14Asservissement16setCommandSpeedsEP7Command+0x52>
    }
    else
    {
        setLinearSpeed(0.0f);
    71f2:	6878      	ldr	r0, [r7, #4]
    71f4:	4905      	ldr	r1, [pc, #20]	(720c <_ZN14Asservissement16setCommandSpeedsEP7Command+0x5c>)
    71f6:	f7ff ffbf 	bl	7178 <_ZN14Asservissement14setLinearSpeedEf>
        setAngularSpeed(0.0f);
    71fa:	6878      	ldr	r0, [r7, #4]
    71fc:	4903      	ldr	r1, [pc, #12]	(720c <_ZN14Asservissement16setCommandSpeedsEP7Command+0x5c>)
    71fe:	f7ff ffc9 	bl	7194 <_ZN14Asservissement15setAngularSpeedEf>
    }

    /*setEnabledPIDDistance(true);
    setEnabledPIDAngle(true);
    resetFixedDuty();*/
}
    7202:	f107 0708 	add.w	r7, r7, #8	; 0x8
    7206:	46bd      	mov	sp, r7
    7208:	bd80      	pop	{r7, pc}
    720a:	46c0      	nop			(mov r8, r8)
    720c:	00000000 	.word	0x00000000

00007210 <_ZN14Asservissement14getLinearSpeedEv>:

Distance Asservissement::getLinearSpeed()
    7210:	b480      	push	{r7}
    7212:	b083      	sub	sp, #12
    7214:	af00      	add	r7, sp, #0
    7216:	6078      	str	r0, [r7, #4]
{
  /*  if (Remote::getSingleton()->isRemoteMode())
        return Remote::getSingleton()->getLeftPWM();
    else*/
        return vitesseLineaire;
    7218:	687b      	ldr	r3, [r7, #4]
    721a:	f8d3 30fc 	ldr.w	r3, [r3, #252]
}
    721e:	4618      	mov	r0, r3
    7220:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7224:	46bd      	mov	sp, r7
    7226:	bc80      	pop	{r7}
    7228:	4770      	bx	lr
    722a:	46c0      	nop			(mov r8, r8)

0000722c <_ZN14Asservissement15getAngularSpeedEv>:

Angle Asservissement::getAngularSpeed()
    722c:	b480      	push	{r7}
    722e:	b083      	sub	sp, #12
    7230:	af00      	add	r7, sp, #0
    7232:	6078      	str	r0, [r7, #4]
{
   /* if (Remote::getSingleton()->isRemoteMode())
        return Remote::getSingleton()->getRightPWM();
    else*/
        return vitesseAngulaire;
    7234:	687b      	ldr	r3, [r7, #4]
    7236:	f8d3 3100 	ldr.w	r3, [r3, #256]
}
    723a:	4618      	mov	r0, r3
    723c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7240:	46bd      	mov	sp, r7
    7242:	bc80      	pop	{r7}
    7244:	4770      	bx	lr
    7246:	46c0      	nop			(mov r8, r8)

00007248 <_ZN14Asservissement8finMatchEv>:
    Asservissement::asservissement->update();
}

#endif

void Asservissement::finMatch()
    7248:	b480      	push	{r7}
    724a:	af00      	add	r7, sp, #0
{
    Asservissement::matchFini = true;
    724c:	4b03      	ldr	r3, [pc, #12]	(725c <_ZN14Asservissement8finMatchEv+0x14>)
    724e:	f04f 0201 	mov.w	r2, #1	; 0x1
    7252:	701a      	strb	r2, [r3, #0]
    #ifdef ROBOTHW


    #endif
}
    7254:	46bd      	mov	sp, r7
    7256:	bc80      	pop	{r7}
    7258:	4770      	bx	lr
    725a:	46c0      	nop			(mov r8, r8)
    725c:	20000568 	.word	0x20000568

00007260 <_ZN14Asservissement21setEnabledPIDDistanceEb>:

void Asservissement::setEnabledPIDDistance(bool enabled)
    7260:	b480      	push	{r7}
    7262:	b083      	sub	sp, #12
    7264:	af00      	add	r7, sp, #0
    7266:	6078      	str	r0, [r7, #4]
    7268:	460b      	mov	r3, r1
    726a:	70fb      	strb	r3, [r7, #3]
{
    activePIDDistance = enabled;
    726c:	687a      	ldr	r2, [r7, #4]
    726e:	78fb      	ldrb	r3, [r7, #3]
    7270:	f882 3104 	strb.w	r3, [r2, #260]
}
    7274:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7278:	46bd      	mov	sp, r7
    727a:	bc80      	pop	{r7}
    727c:	4770      	bx	lr
    727e:	46c0      	nop			(mov r8, r8)

00007280 <_ZN14Asservissement18setEnabledPIDAngleEb>:

void Asservissement::setEnabledPIDAngle(bool enabled)
    7280:	b480      	push	{r7}
    7282:	b083      	sub	sp, #12
    7284:	af00      	add	r7, sp, #0
    7286:	6078      	str	r0, [r7, #4]
    7288:	460b      	mov	r3, r1
    728a:	70fb      	strb	r3, [r7, #3]
{
    activePIDAngle = enabled;
    728c:	687a      	ldr	r2, [r7, #4]
    728e:	78fb      	ldrb	r3, [r7, #3]
    7290:	f882 3105 	strb.w	r3, [r2, #261]
}
    7294:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7298:	46bd      	mov	sp, r7
    729a:	bc80      	pop	{r7}
    729c:	4770      	bx	lr
    729e:	46c0      	nop			(mov r8, r8)

000072a0 <_ZN14Asservissement13setLinearDutyEf>:

void Asservissement::setLinearDuty(float duty)
    72a0:	b580      	push	{r7, lr}
    72a2:	b086      	sub	sp, #24
    72a4:	af00      	add	r7, sp, #0
    72a6:	6178      	str	r0, [r7, #20]
    72a8:	6139      	str	r1, [r7, #16]
{
    setEnabledPIDDistance(false);
    72aa:	6978      	ldr	r0, [r7, #20]
    72ac:	f04f 0100 	mov.w	r1, #0	; 0x0
    72b0:	f7ff ffd6 	bl	7260 <_ZN14Asservissement21setEnabledPIDDistanceEb>
    fixedLinearDuty = MAX( MIN( duty, FIXED_LINEAR_DUTY_MAX), -FIXED_LINEAR_DUTY_MAX);
    72b4:	6938      	ldr	r0, [r7, #16]
    72b6:	f015 f9a1 	bl	1c5fc <__aeabi_f2d>
    72ba:	4602      	mov	r2, r0
    72bc:	460b      	mov	r3, r1
    72be:	4610      	mov	r0, r2
    72c0:	4619      	mov	r1, r3
    72c2:	a223      	add	r2, pc, #140	(adr r2, 7350 <_ZN14Asservissement13setLinearDutyEf+0xb0>)
    72c4:	ca0c      	ldmia	r2!, {r2, r3}
    72c6:	f015 fc7b 	bl	1cbc0 <__aeabi_dcmpgt>
    72ca:	4603      	mov	r3, r0
    72cc:	2b00      	cmp	r3, #0
    72ce:	d003      	beq.n	72d8 <_ZN14Asservissement13setLinearDutyEf+0x38>
    72d0:	f04f 0200 	mov.w	r2, #0	; 0x0
    72d4:	60ba      	str	r2, [r7, #8]
    72d6:	e015      	b.n	7304 <_ZN14Asservissement13setLinearDutyEf+0x64>
    72d8:	6938      	ldr	r0, [r7, #16]
    72da:	f015 f98f 	bl	1c5fc <__aeabi_f2d>
    72de:	4602      	mov	r2, r0
    72e0:	460b      	mov	r3, r1
    72e2:	f04f 0100 	mov.w	r1, #0	; 0x0
    72e6:	70f9      	strb	r1, [r7, #3]
    72e8:	4610      	mov	r0, r2
    72ea:	4619      	mov	r1, r3
    72ec:	a21a      	add	r2, pc, #104	(adr r2, 7358 <_ZN14Asservissement13setLinearDutyEf+0xb8>)
    72ee:	ca0c      	ldmia	r2!, {r2, r3}
    72f0:	f015 fc48 	bl	1cb84 <__aeabi_dcmplt>
    72f4:	4603      	mov	r3, r0
    72f6:	2b00      	cmp	r3, #0
    72f8:	d002      	beq.n	7300 <_ZN14Asservissement13setLinearDutyEf+0x60>
    72fa:	f04f 0301 	mov.w	r3, #1	; 0x1
    72fe:	70fb      	strb	r3, [r7, #3]
    7300:	78fb      	ldrb	r3, [r7, #3]
    7302:	60bb      	str	r3, [r7, #8]
    7304:	68ba      	ldr	r2, [r7, #8]
    7306:	2a00      	cmp	r2, #0
    7308:	d002      	beq.n	7310 <_ZN14Asservissement13setLinearDutyEf+0x70>
    730a:	4b15      	ldr	r3, [pc, #84]	(7360 <_ZN14Asservissement13setLinearDutyEf+0xc0>)
    730c:	607b      	str	r3, [r7, #4]
    730e:	e014      	b.n	733a <_ZN14Asservissement13setLinearDutyEf+0x9a>
    7310:	6938      	ldr	r0, [r7, #16]
    7312:	f015 f973 	bl	1c5fc <__aeabi_f2d>
    7316:	4602      	mov	r2, r0
    7318:	460b      	mov	r3, r1
    731a:	4610      	mov	r0, r2
    731c:	4619      	mov	r1, r3
    731e:	a20c      	add	r2, pc, #48	(adr r2, 7350 <_ZN14Asservissement13setLinearDutyEf+0xb0>)
    7320:	ca0c      	ldmia	r2!, {r2, r3}
    7322:	f015 fc4d 	bl	1cbc0 <__aeabi_dcmpgt>
    7326:	4603      	mov	r3, r0
    7328:	2b00      	cmp	r3, #0
    732a:	d002      	beq.n	7332 <_ZN14Asservissement13setLinearDutyEf+0x92>
    732c:	4a0d      	ldr	r2, [pc, #52]	(7364 <_ZN14Asservissement13setLinearDutyEf+0xc4>)
    732e:	60fa      	str	r2, [r7, #12]
    7330:	e001      	b.n	7336 <_ZN14Asservissement13setLinearDutyEf+0x96>
    7332:	693b      	ldr	r3, [r7, #16]
    7334:	60fb      	str	r3, [r7, #12]
    7336:	68fa      	ldr	r2, [r7, #12]
    7338:	607a      	str	r2, [r7, #4]
    733a:	697b      	ldr	r3, [r7, #20]
    733c:	687a      	ldr	r2, [r7, #4]
    733e:	f8c3 2108 	str.w	r2, [r3, #264]
}
    7342:	f107 0718 	add.w	r7, r7, #24	; 0x18
    7346:	46bd      	mov	sp, r7
    7348:	bd80      	pop	{r7, pc}
    734a:	46c0      	nop			(mov r8, r8)
    734c:	46c0      	nop			(mov r8, r8)
    734e:	46c0      	nop			(mov r8, r8)
    7350:	9a          	.byte	0x9a
    7351:	99          	.byte	0x99
    7352:	9999      	.short	0x9999
    7354:	3fc99999 	.word	0x3fc99999
    7358:	9999999a 	.word	0x9999999a
    735c:	bfc99999 	.word	0xbfc99999
    7360:	be4ccccd 	.word	0xbe4ccccd
    7364:	3e4ccccd 	.word	0x3e4ccccd

00007368 <_ZN14Asservissement14setAngularDutyEf>:

void Asservissement::setAngularDuty(float duty)
    7368:	b580      	push	{r7, lr}
    736a:	b086      	sub	sp, #24
    736c:	af00      	add	r7, sp, #0
    736e:	6178      	str	r0, [r7, #20]
    7370:	6139      	str	r1, [r7, #16]
{
    setEnabledPIDAngle(false);
    7372:	6978      	ldr	r0, [r7, #20]
    7374:	f04f 0100 	mov.w	r1, #0	; 0x0
    7378:	f7ff ff82 	bl	7280 <_ZN14Asservissement18setEnabledPIDAngleEb>
    fixedAngularDuty = MAX( MIN( duty, FIXED_ANGULAR_DUTY_MAX), -FIXED_ANGULAR_DUTY_MAX);
    737c:	6938      	ldr	r0, [r7, #16]
    737e:	f015 f93d 	bl	1c5fc <__aeabi_f2d>
    7382:	4602      	mov	r2, r0
    7384:	460b      	mov	r3, r1
    7386:	4610      	mov	r0, r2
    7388:	4619      	mov	r1, r3
    738a:	a223      	add	r2, pc, #140	(adr r2, 7418 <_ZN14Asservissement14setAngularDutyEf+0xb0>)
    738c:	ca0c      	ldmia	r2!, {r2, r3}
    738e:	f015 fc17 	bl	1cbc0 <__aeabi_dcmpgt>
    7392:	4603      	mov	r3, r0
    7394:	2b00      	cmp	r3, #0
    7396:	d003      	beq.n	73a0 <_ZN14Asservissement14setAngularDutyEf+0x38>
    7398:	f04f 0200 	mov.w	r2, #0	; 0x0
    739c:	60ba      	str	r2, [r7, #8]
    739e:	e015      	b.n	73cc <_ZN14Asservissement14setAngularDutyEf+0x64>
    73a0:	6938      	ldr	r0, [r7, #16]
    73a2:	f015 f92b 	bl	1c5fc <__aeabi_f2d>
    73a6:	4602      	mov	r2, r0
    73a8:	460b      	mov	r3, r1
    73aa:	f04f 0100 	mov.w	r1, #0	; 0x0
    73ae:	70f9      	strb	r1, [r7, #3]
    73b0:	4610      	mov	r0, r2
    73b2:	4619      	mov	r1, r3
    73b4:	a21a      	add	r2, pc, #104	(adr r2, 7420 <_ZN14Asservissement14setAngularDutyEf+0xb8>)
    73b6:	ca0c      	ldmia	r2!, {r2, r3}
    73b8:	f015 fbe4 	bl	1cb84 <__aeabi_dcmplt>
    73bc:	4603      	mov	r3, r0
    73be:	2b00      	cmp	r3, #0
    73c0:	d002      	beq.n	73c8 <_ZN14Asservissement14setAngularDutyEf+0x60>
    73c2:	f04f 0301 	mov.w	r3, #1	; 0x1
    73c6:	70fb      	strb	r3, [r7, #3]
    73c8:	78fb      	ldrb	r3, [r7, #3]
    73ca:	60bb      	str	r3, [r7, #8]
    73cc:	68ba      	ldr	r2, [r7, #8]
    73ce:	2a00      	cmp	r2, #0
    73d0:	d002      	beq.n	73d8 <_ZN14Asservissement14setAngularDutyEf+0x70>
    73d2:	4b15      	ldr	r3, [pc, #84]	(7428 <_ZN14Asservissement14setAngularDutyEf+0xc0>)
    73d4:	607b      	str	r3, [r7, #4]
    73d6:	e014      	b.n	7402 <_ZN14Asservissement14setAngularDutyEf+0x9a>
    73d8:	6938      	ldr	r0, [r7, #16]
    73da:	f015 f90f 	bl	1c5fc <__aeabi_f2d>
    73de:	4602      	mov	r2, r0
    73e0:	460b      	mov	r3, r1
    73e2:	4610      	mov	r0, r2
    73e4:	4619      	mov	r1, r3
    73e6:	a20c      	add	r2, pc, #48	(adr r2, 7418 <_ZN14Asservissement14setAngularDutyEf+0xb0>)
    73e8:	ca0c      	ldmia	r2!, {r2, r3}
    73ea:	f015 fbe9 	bl	1cbc0 <__aeabi_dcmpgt>
    73ee:	4603      	mov	r3, r0
    73f0:	2b00      	cmp	r3, #0
    73f2:	d002      	beq.n	73fa <_ZN14Asservissement14setAngularDutyEf+0x92>
    73f4:	4a0d      	ldr	r2, [pc, #52]	(742c <_ZN14Asservissement14setAngularDutyEf+0xc4>)
    73f6:	60fa      	str	r2, [r7, #12]
    73f8:	e001      	b.n	73fe <_ZN14Asservissement14setAngularDutyEf+0x96>
    73fa:	693b      	ldr	r3, [r7, #16]
    73fc:	60fb      	str	r3, [r7, #12]
    73fe:	68fa      	ldr	r2, [r7, #12]
    7400:	607a      	str	r2, [r7, #4]
    7402:	697b      	ldr	r3, [r7, #20]
    7404:	687a      	ldr	r2, [r7, #4]
    7406:	f8c3 210c 	str.w	r2, [r3, #268]
}
    740a:	f107 0718 	add.w	r7, r7, #24	; 0x18
    740e:	46bd      	mov	sp, r7
    7410:	bd80      	pop	{r7, pc}
    7412:	46c0      	nop			(mov r8, r8)
    7414:	46c0      	nop			(mov r8, r8)
    7416:	46c0      	nop			(mov r8, r8)
    7418:	9999999a 	.word	0x9999999a
    741c:	3fc99999 	.word	0x3fc99999
    7420:	9999999a 	.word	0x9999999a
    7424:	bfc99999 	.word	0xbfc99999
    7428:	be4ccccd 	.word	0xbe4ccccd
    742c:	3e4ccccd 	.word	0x3e4ccccd

00007430 <_ZN14Asservissement14resetFixedDutyEv>:

void Asservissement::resetFixedDuty()
    7430:	b480      	push	{r7}
    7432:	b083      	sub	sp, #12
    7434:	af00      	add	r7, sp, #0
    7436:	6078      	str	r0, [r7, #4]
{
    fixedLinearDuty = 0.;
    7438:	687a      	ldr	r2, [r7, #4]
    743a:	4b06      	ldr	r3, [pc, #24]	(7454 <_ZN14Asservissement14resetFixedDutyEv+0x24>)
    743c:	f8c2 3108 	str.w	r3, [r2, #264]
    fixedAngularDuty = 0.;
    7440:	687a      	ldr	r2, [r7, #4]
    7442:	4b04      	ldr	r3, [pc, #16]	(7454 <_ZN14Asservissement14resetFixedDutyEv+0x24>)
    7444:	f8c2 310c 	str.w	r3, [r2, #268]
}
    7448:	f107 070c 	add.w	r7, r7, #12	; 0xc
    744c:	46bd      	mov	sp, r7
    744e:	bc80      	pop	{r7}
    7450:	4770      	bx	lr
    7452:	46c0      	nop			(mov r8, r8)
    7454:	00000000 	.word	0x00000000

00007458 <_ZN14Asservissement11resetAsservEv>:
        }
    }
    return;
}

void Asservissement::resetAsserv()
    7458:	b580      	push	{r7, lr}
    745a:	b082      	sub	sp, #8
    745c:	af00      	add	r7, sp, #0
    745e:	6078      	str	r0, [r7, #4]
{
    pid_filter_distance.resetErrors();
    7460:	687b      	ldr	r3, [r7, #4]
    7462:	f103 0308 	add.w	r3, r3, #8	; 0x8
    7466:	4618      	mov	r0, r3
    7468:	f003 fa70 	bl	a94c <_ZN17PIDFilterDistance11resetErrorsEv>
    pid_filter_angle.resetErrors();
    746c:	687b      	ldr	r3, [r7, #4]
    746e:	f103 0310 	add.w	r3, r3, #16	; 0x10
    7472:	4618      	mov	r0, r3
    7474:	f003 f9ea 	bl	a84c <_ZN14PIDFilterAngle11resetErrorsEv>
}
    7478:	f107 0708 	add.w	r7, r7, #8	; 0x8
    747c:	46bd      	mov	sp, r7
    747e:	bd80      	pop	{r7, pc}

00007480 <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle>:
{
    fixedLinearDuty = 0.;
    fixedAngularDuty = 0.;
}

void Asservissement::computeObstacleDetecte(float linearDutySentArgument, float angularDutySentArgument, PositionPlusAngle* positionPlusAngleActuelleArgument)
    7480:	b590      	push	{r4, r7, lr}
    7482:	b093      	sub	sp, #76
    7484:	af00      	add	r7, sp, #0
    7486:	60f8      	str	r0, [r7, #12]
    7488:	60b9      	str	r1, [r7, #8]
    748a:	607a      	str	r2, [r7, #4]
    748c:	603b      	str	r3, [r7, #0]
{
    //Si on a vu un obstacle recemment
    if(this->obstacleDetecte)
    748e:	68fb      	ldr	r3, [r7, #12]
    7490:	f893 30ec 	ldrb.w	r3, [r3, #236]
    7494:	2b00      	cmp	r3, #0
    7496:	d01e      	beq.n	74d6 <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x56>
    {
        nbUpdateDepuisObstacleDetecte++;
    7498:	68fb      	ldr	r3, [r7, #12]
    749a:	f8d3 30f0 	ldr.w	r3, [r3, #240]
    749e:	f103 0201 	add.w	r2, r3, #1	; 0x1
    74a2:	68fb      	ldr	r3, [r7, #12]
    74a4:	f8c3 20f0 	str.w	r2, [r3, #240]

        //Si ça fait longtemps
        if(nbUpdateDepuisObstacleDetecte > (1000/MS_BETWEEN_UPDATE * 5))//5 secondes
    74a8:	68fb      	ldr	r3, [r7, #12]
    74aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]
    74ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    74b2:	f240 81fc 	bls.w	78ae <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x42e>
        {
            this->obstacleDetecte = false;
    74b6:	68fa      	ldr	r2, [r7, #12]
    74b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    74bc:	f882 30ec 	strb.w	r3, [r2, #236]
            nbUpdateDepuisObstacleDetecte = 0;
    74c0:	68fa      	ldr	r2, [r7, #12]
    74c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    74c6:	f8c2 30f0 	str.w	r3, [r2, #240]
            Asservissement::asservissement->resetAsserv();
    74ca:	4bfb      	ldr	r3, [pc, #1004]	(78b8 <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x438>)
    74cc:	681b      	ldr	r3, [r3, #0]
    74ce:	4618      	mov	r0, r3
    74d0:	f7ff ffc2 	bl	7458 <_ZN14Asservissement11resetAsservEv>
    74d4:	e1eb      	b.n	78ae <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x42e>
    }
    else
    {

        //On ajoute les déplacements élémentaires depuis la dernière boucle
        float variationLineaireX = positionPlusAngleActuelleArgument->position.getX()-positionPlusAnglePrecedenteX;
    74d6:	683b      	ldr	r3, [r7, #0]
    74d8:	4618      	mov	r0, r3
    74da:	f007 fc9f 	bl	ee1c <_ZNK8Position4getXEv>
    74de:	4602      	mov	r2, r0
    74e0:	68fb      	ldr	r3, [r7, #12]
    74e2:	6bdb      	ldr	r3, [r3, #60]
    74e4:	4610      	mov	r0, r2
    74e6:	4619      	mov	r1, r3
    74e8:	f015 fbf0 	bl	1cccc <__aeabi_fsub>
    74ec:	4603      	mov	r3, r0
    74ee:	617b      	str	r3, [r7, #20]
        float variationLineaireY = positionPlusAngleActuelleArgument->position.getY()-positionPlusAnglePrecedenteY;
    74f0:	683b      	ldr	r3, [r7, #0]
    74f2:	4618      	mov	r0, r3
    74f4:	f007 fc9e 	bl	ee34 <_ZNK8Position4getYEv>
    74f8:	4602      	mov	r2, r0
    74fa:	68fb      	ldr	r3, [r7, #12]
    74fc:	6c1b      	ldr	r3, [r3, #64]
    74fe:	4610      	mov	r0, r2
    7500:	4619      	mov	r1, r3
    7502:	f015 fbe3 	bl	1cccc <__aeabi_fsub>
    7506:	4603      	mov	r3, r0
    7508:	61bb      	str	r3, [r7, #24]
        float variationAngulaire = positionPlusAngleActuelleArgument->position.getAngle()-positionPlusAnglePrecedenteAngle;
    750a:	683b      	ldr	r3, [r7, #0]
    750c:	4618      	mov	r0, r3
    750e:	f007 fdcb 	bl	f0a8 <_ZNK8Position8getAngleEv>
    7512:	4602      	mov	r2, r0
    7514:	68fb      	ldr	r3, [r7, #12]
    7516:	6c5b      	ldr	r3, [r3, #68]
    7518:	4610      	mov	r0, r2
    751a:	4619      	mov	r1, r3
    751c:	f015 fbd6 	bl	1cccc <__aeabi_fsub>
    7520:	4603      	mov	r3, r0
    7522:	61fb      	str	r3, [r7, #28]

        //En valeur absolue
        if(variationLineaireX < 0)
    7524:	6978      	ldr	r0, [r7, #20]
    7526:	49e5      	ldr	r1, [pc, #916]	(78bc <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x43c>)
    7528:	f015 fe76 	bl	1d218 <__aeabi_fcmplt>
    752c:	4603      	mov	r3, r0
    752e:	2b00      	cmp	r3, #0
    7530:	d003      	beq.n	753a <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0xba>
        {
            variationLineaireX = -variationLineaireX;
    7532:	697b      	ldr	r3, [r7, #20]
    7534:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7538:	617b      	str	r3, [r7, #20]
        }
        if(variationLineaireY < 0)
    753a:	69b8      	ldr	r0, [r7, #24]
    753c:	49df      	ldr	r1, [pc, #892]	(78bc <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x43c>)
    753e:	f015 fe6b 	bl	1d218 <__aeabi_fcmplt>
    7542:	4603      	mov	r3, r0
    7544:	2b00      	cmp	r3, #0
    7546:	d003      	beq.n	7550 <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0xd0>
        {
            variationLineaireY = -variationLineaireY;
    7548:	69bb      	ldr	r3, [r7, #24]
    754a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    754e:	61bb      	str	r3, [r7, #24]
        }
        if(variationAngulaire < 0)
    7550:	69f8      	ldr	r0, [r7, #28]
    7552:	49da      	ldr	r1, [pc, #872]	(78bc <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x43c>)
    7554:	f015 fe60 	bl	1d218 <__aeabi_fcmplt>
    7558:	4603      	mov	r3, r0
    755a:	2b00      	cmp	r3, #0
    755c:	d003      	beq.n	7566 <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0xe6>
        {
            variationAngulaire = -variationAngulaire;
    755e:	69fb      	ldr	r3, [r7, #28]
    7560:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7564:	61fb      	str	r3, [r7, #28]
        }

        deplacementLineaires[0] += variationLineaireX + variationLineaireY;
    7566:	68fb      	ldr	r3, [r7, #12]
    7568:	6cdc      	ldr	r4, [r3, #76]
    756a:	6978      	ldr	r0, [r7, #20]
    756c:	69b9      	ldr	r1, [r7, #24]
    756e:	f015 fbaf 	bl	1ccd0 <__addsf3>
    7572:	4603      	mov	r3, r0
    7574:	4620      	mov	r0, r4
    7576:	4619      	mov	r1, r3
    7578:	f015 fbaa 	bl	1ccd0 <__addsf3>
    757c:	4603      	mov	r3, r0
    757e:	461a      	mov	r2, r3
    7580:	68fb      	ldr	r3, [r7, #12]
    7582:	64da      	str	r2, [r3, #76]
        deplacementAngulaire[0] += variationAngulaire;
    7584:	68fb      	ldr	r3, [r7, #12]
    7586:	6f5b      	ldr	r3, [r3, #116]
    7588:	4618      	mov	r0, r3
    758a:	69f9      	ldr	r1, [r7, #28]
    758c:	f015 fba0 	bl	1ccd0 <__addsf3>
    7590:	4603      	mov	r3, r0
    7592:	461a      	mov	r2, r3
    7594:	68fb      	ldr	r3, [r7, #12]
    7596:	675a      	str	r2, [r3, #116]

        positionPlusAnglePrecedenteX = positionPlusAngleActuelleArgument->position.getX();
    7598:	683b      	ldr	r3, [r7, #0]
    759a:	4618      	mov	r0, r3
    759c:	f007 fc3e 	bl	ee1c <_ZNK8Position4getXEv>
    75a0:	4602      	mov	r2, r0
    75a2:	68fb      	ldr	r3, [r7, #12]
    75a4:	63da      	str	r2, [r3, #60]
        positionPlusAnglePrecedenteY = positionPlusAngleActuelleArgument->position.getY();
    75a6:	683b      	ldr	r3, [r7, #0]
    75a8:	4618      	mov	r0, r3
    75aa:	f007 fc43 	bl	ee34 <_ZNK8Position4getYEv>
    75ae:	4602      	mov	r2, r0
    75b0:	68fb      	ldr	r3, [r7, #12]
    75b2:	641a      	str	r2, [r3, #64]
        positionPlusAnglePrecedenteAngle = positionPlusAngleActuelleArgument->position.getAngle();
    75b4:	683b      	ldr	r3, [r7, #0]
    75b6:	4618      	mov	r0, r3
    75b8:	f007 fd76 	bl	f0a8 <_ZNK8Position8getAngleEv>
    75bc:	4602      	mov	r2, r0
    75be:	68fb      	ldr	r3, [r7, #12]
    75c0:	645a      	str	r2, [r3, #68]

        //On ajoute les accélérations élémentaires depuis la dernière boucle
        accelerationLineaires[0]+=linearDutySentArgument;
    75c2:	68fb      	ldr	r3, [r7, #12]
    75c4:	f8d3 309c 	ldr.w	r3, [r3, #156]
    75c8:	4618      	mov	r0, r3
    75ca:	68b9      	ldr	r1, [r7, #8]
    75cc:	f015 fb80 	bl	1ccd0 <__addsf3>
    75d0:	4603      	mov	r3, r0
    75d2:	461a      	mov	r2, r3
    75d4:	68fb      	ldr	r3, [r7, #12]
    75d6:	f8c3 209c 	str.w	r2, [r3, #156]

        accelerationAngulaires[0]+=angularDutySentArgument;
    75da:	68fb      	ldr	r3, [r7, #12]
    75dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]
    75e0:	4618      	mov	r0, r3
    75e2:	6879      	ldr	r1, [r7, #4]
    75e4:	f015 fb74 	bl	1ccd0 <__addsf3>
    75e8:	4603      	mov	r3, r0
    75ea:	461a      	mov	r2, r3
    75ec:	68fb      	ldr	r3, [r7, #12]
    75ee:	f8c3 20c4 	str.w	r2, [r3, #196]

        compteurRemplissageQuatum++;
    75f2:	68fb      	ldr	r3, [r7, #12]
    75f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]
    75f8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    75fc:	b29b      	uxth	r3, r3
    75fe:	68fa      	ldr	r2, [r7, #12]
    7600:	f8a2 3048 	strh.w	r3, [r2, #72]

        //Si ça fait un dixième de seconde, on vérifie qu'on n'est pas bloqué
        if(compteurRemplissageQuatum > nombreQuatumParDixiemeDeSeconde)
    7604:	68fb      	ldr	r3, [r7, #12]
    7606:	f8b3 2048 	ldrh.w	r2, [r3, #72]
    760a:	68fb      	ldr	r3, [r7, #12]
    760c:	f8b3 304a 	ldrh.w	r3, [r3, #74]
    7610:	429a      	cmp	r2, r3
    7612:	f240 814c 	bls.w	78ae <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x42e>
        {
            compteurRemplissageQuatum = 0;
    7616:	68fa      	ldr	r2, [r7, #12]
    7618:	f04f 0300 	mov.w	r3, #0	; 0x0
    761c:	f8a2 3048 	strh.w	r3, [r2, #72]
            float sommageDeplacementLineaires = 0;
    7620:	4ba6      	ldr	r3, [pc, #664]	(78bc <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x43c>)
    7622:	623b      	str	r3, [r7, #32]
            float sommageDeplacementAngulaire = 0;
    7624:	4ba5      	ldr	r3, [pc, #660]	(78bc <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x43c>)
    7626:	627b      	str	r3, [r7, #36]
            float sommageAccelerationLineaires = 0;
    7628:	4ba4      	ldr	r3, [pc, #656]	(78bc <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x43c>)
    762a:	62bb      	str	r3, [r7, #40]
            float sommageAccelerationAngulaires = 0;
    762c:	4ba3      	ldr	r3, [pc, #652]	(78bc <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x43c>)
    762e:	62fb      	str	r3, [r7, #44]

            //Sommage des 10 derniers 10èmes
            for(int sommage = 0 ; sommage < NB_VERIFICATION_BLOQUAGE_PAR_SECONDE ; sommage++)
    7630:	f04f 0300 	mov.w	r3, #0	; 0x0
    7634:	63fb      	str	r3, [r7, #60]
    7636:	e03b      	b.n	76b0 <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x230>
            {
                sommageDeplacementLineaires+=deplacementLineaires[sommage];
    7638:	6bfb      	ldr	r3, [r7, #60]
    763a:	68fa      	ldr	r2, [r7, #12]
    763c:	f103 0312 	add.w	r3, r3, #18	; 0x12
    7640:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7644:	4413      	add	r3, r2
    7646:	685b      	ldr	r3, [r3, #4]
    7648:	6a38      	ldr	r0, [r7, #32]
    764a:	4619      	mov	r1, r3
    764c:	f015 fb40 	bl	1ccd0 <__addsf3>
    7650:	4603      	mov	r3, r0
    7652:	623b      	str	r3, [r7, #32]
                sommageDeplacementAngulaire+=deplacementAngulaire[sommage];
    7654:	6bfb      	ldr	r3, [r7, #60]
    7656:	68fa      	ldr	r2, [r7, #12]
    7658:	f103 031c 	add.w	r3, r3, #28	; 0x1c
    765c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7660:	4413      	add	r3, r2
    7662:	685b      	ldr	r3, [r3, #4]
    7664:	6a78      	ldr	r0, [r7, #36]
    7666:	4619      	mov	r1, r3
    7668:	f015 fb32 	bl	1ccd0 <__addsf3>
    766c:	4603      	mov	r3, r0
    766e:	627b      	str	r3, [r7, #36]
                sommageAccelerationLineaires+=accelerationLineaires[sommage];
    7670:	6bfb      	ldr	r3, [r7, #60]
    7672:	68fa      	ldr	r2, [r7, #12]
    7674:	f103 0326 	add.w	r3, r3, #38	; 0x26
    7678:	ea4f 0383 	mov.w	r3, r3, lsl #2
    767c:	4413      	add	r3, r2
    767e:	685b      	ldr	r3, [r3, #4]
    7680:	6ab8      	ldr	r0, [r7, #40]
    7682:	4619      	mov	r1, r3
    7684:	f015 fb24 	bl	1ccd0 <__addsf3>
    7688:	4603      	mov	r3, r0
    768a:	62bb      	str	r3, [r7, #40]
                sommageAccelerationAngulaires+=accelerationAngulaires[sommage];
    768c:	6bfb      	ldr	r3, [r7, #60]
    768e:	68fa      	ldr	r2, [r7, #12]
    7690:	f103 0330 	add.w	r3, r3, #48	; 0x30
    7694:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7698:	4413      	add	r3, r2
    769a:	685b      	ldr	r3, [r3, #4]
    769c:	6af8      	ldr	r0, [r7, #44]
    769e:	4619      	mov	r1, r3
    76a0:	f015 fb16 	bl	1ccd0 <__addsf3>
    76a4:	4603      	mov	r3, r0
    76a6:	62fb      	str	r3, [r7, #44]
            float sommageDeplacementAngulaire = 0;
            float sommageAccelerationLineaires = 0;
            float sommageAccelerationAngulaires = 0;

            //Sommage des 10 derniers 10èmes
            for(int sommage = 0 ; sommage < NB_VERIFICATION_BLOQUAGE_PAR_SECONDE ; sommage++)
    76a8:	6bfb      	ldr	r3, [r7, #60]
    76aa:	f103 0301 	add.w	r3, r3, #1	; 0x1
    76ae:	63fb      	str	r3, [r7, #60]
    76b0:	6bfb      	ldr	r3, [r7, #60]
    76b2:	2b09      	cmp	r3, #9
    76b4:	ddc0      	ble.n	7638 <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x1b8>
                sommageDeplacementAngulaire+=deplacementAngulaire[sommage];
                sommageAccelerationLineaires+=accelerationLineaires[sommage];
                sommageAccelerationAngulaires+=accelerationAngulaires[sommage];
            }

            float accelerationLineaireLimite = ACCELER_LIN_MINIMALE_DETECTION_BLOQUAGE * NB_VERIFICATION_BLOQUAGE_PAR_SECONDE * nombreQuatumParDixiemeDeSeconde;
    76b6:	68fb      	ldr	r3, [r7, #12]
    76b8:	f8b3 304a 	ldrh.w	r3, [r3, #74]
    76bc:	4618      	mov	r0, r3
    76be:	f014 ff8b 	bl	1c5d8 <__aeabi_i2d>
    76c2:	4602      	mov	r2, r0
    76c4:	460b      	mov	r3, r1
    76c6:	4610      	mov	r0, r2
    76c8:	4619      	mov	r1, r3
    76ca:	f04f 0200 	mov.w	r2, #0	; 0x0
    76ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    76d2:	f503 1308 	add.w	r3, r3, #2228224	; 0x220000
    76d6:	f014 ffe5 	bl	1c6a4 <__aeabi_dmul>
    76da:	4602      	mov	r2, r0
    76dc:	460b      	mov	r3, r1
    76de:	4610      	mov	r0, r2
    76e0:	4619      	mov	r1, r3
    76e2:	f015 fa9f 	bl	1cc24 <__aeabi_d2f>
    76e6:	4603      	mov	r3, r0
    76e8:	633b      	str	r3, [r7, #48]
            float accelerationAngulaireLimite = ACCELER_ANG_MINIMALE_DETECTION_BLOQUAGE * NB_VERIFICATION_BLOQUAGE_PAR_SECONDE * nombreQuatumParDixiemeDeSeconde;
    76ea:	68fb      	ldr	r3, [r7, #12]
    76ec:	f8b3 304a 	ldrh.w	r3, [r3, #74]
    76f0:	4618      	mov	r0, r3
    76f2:	f014 ff71 	bl	1c5d8 <__aeabi_i2d>
    76f6:	4602      	mov	r2, r0
    76f8:	460b      	mov	r3, r1
    76fa:	4610      	mov	r0, r2
    76fc:	4619      	mov	r1, r3
    76fe:	f04f 0200 	mov.w	r2, #0	; 0x0
    7702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7706:	f503 1308 	add.w	r3, r3, #2228224	; 0x220000
    770a:	f014 ffcb 	bl	1c6a4 <__aeabi_dmul>
    770e:	4602      	mov	r2, r0
    7710:	460b      	mov	r3, r1
    7712:	4610      	mov	r0, r2
    7714:	4619      	mov	r1, r3
    7716:	f015 fa85 	bl	1cc24 <__aeabi_d2f>
    771a:	4603      	mov	r3, r0
    771c:	637b      	str	r3, [r7, #52]

            //Si on accélère à fond en ne bougeant pas plus d'un centimètre en une seconde
//            if(((sommageAccelerationLineaires > accelerationLineaireLimite) && (abs(sommageDeplacementLineaires) < 10)) ||
//               ((sommageAccelerationAngulaires > accelerationAngulaireLimite) && (abs(sommageDeplacementAngulaire) < 3)))

            bool stop = false;
    771e:	f04f 0300 	mov.w	r3, #0	; 0x0
    7722:	f887 303b 	strb.w	r3, [r7, #59]

            if(sommageAccelerationLineaires > accelerationLineaireLimite)
    7726:	6ab8      	ldr	r0, [r7, #40]
    7728:	6b39      	ldr	r1, [r7, #48]
    772a:	f015 fd93 	bl	1d254 <__aeabi_fcmpgt>
    772e:	4603      	mov	r3, r0
    7730:	2b00      	cmp	r3, #0
    7732:	d00b      	beq.n	774c <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x2cc>
            {
                if(sommageDeplacementLineaires < DISTANCE_MINIMALE_DETECTION_BLOQUAGE)
    7734:	6a38      	ldr	r0, [r7, #32]
    7736:	4962      	ldr	r1, [pc, #392]	(78c0 <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x440>)
    7738:	f015 fd6e 	bl	1d218 <__aeabi_fcmplt>
    773c:	4603      	mov	r3, r0
    773e:	2b00      	cmp	r3, #0
    7740:	d016      	beq.n	7770 <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x2f0>
                {
                    stop = true;
    7742:	f04f 0301 	mov.w	r3, #1	; 0x1
    7746:	f887 303b 	strb.w	r3, [r7, #59]
    774a:	e011      	b.n	7770 <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x2f0>
                }
            }
            else if(sommageAccelerationAngulaires > accelerationAngulaireLimite)
    774c:	6af8      	ldr	r0, [r7, #44]
    774e:	6b79      	ldr	r1, [r7, #52]
    7750:	f015 fd80 	bl	1d254 <__aeabi_fcmpgt>
    7754:	4603      	mov	r3, r0
    7756:	2b00      	cmp	r3, #0
    7758:	d00a      	beq.n	7770 <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x2f0>
            {
                if(sommageDeplacementAngulaire < ANGLE_MINIMAL_DETECTION_BLOQUAGE)
    775a:	6a78      	ldr	r0, [r7, #36]
    775c:	4959      	ldr	r1, [pc, #356]	(78c4 <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x444>)
    775e:	f015 fd5b 	bl	1d218 <__aeabi_fcmplt>
    7762:	4603      	mov	r3, r0
    7764:	2b00      	cmp	r3, #0
    7766:	d003      	beq.n	7770 <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x2f0>
                {
                    stop = true;
    7768:	f04f 0301 	mov.w	r3, #1	; 0x1
    776c:	f887 303b 	strb.w	r3, [r7, #59]
                }
            }

            if(stop)
    7770:	f897 303b 	ldrb.w	r3, [r7, #59]
    7774:	2b00      	cmp	r3, #0
    7776:	d039      	beq.n	77ec <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x36c>
            {
                obstacleDetecte = true;
    7778:	68fa      	ldr	r2, [r7, #12]
    777a:	f04f 0301 	mov.w	r3, #1	; 0x1
    777e:	f882 30ec 	strb.w	r3, [r2, #236]
                nbUpdateDepuisObstacleDetecte = 0;
    7782:	68fa      	ldr	r2, [r7, #12]
    7784:	f04f 0300 	mov.w	r3, #0	; 0x0
    7788:	f8c2 30f0 	str.w	r3, [r2, #240]

//                //Remise à 0 du tableau
                for(int initTableaux = 0 ; initTableaux < NB_VERIFICATION_BLOQUAGE_PAR_SECONDE ; initTableaux++)
    778c:	f04f 0300 	mov.w	r3, #0	; 0x0
    7790:	643b      	str	r3, [r7, #64]
    7792:	e027      	b.n	77e4 <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x364>
                {
                    deplacementLineaires[initTableaux] = 0;
    7794:	6c3b      	ldr	r3, [r7, #64]
    7796:	68fa      	ldr	r2, [r7, #12]
    7798:	f103 0312 	add.w	r3, r3, #18	; 0x12
    779c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    77a0:	4413      	add	r3, r2
    77a2:	4a46      	ldr	r2, [pc, #280]	(78bc <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x43c>)
    77a4:	605a      	str	r2, [r3, #4]
                    deplacementAngulaire[initTableaux] = 0;
    77a6:	6c3b      	ldr	r3, [r7, #64]
    77a8:	68fa      	ldr	r2, [r7, #12]
    77aa:	f103 031c 	add.w	r3, r3, #28	; 0x1c
    77ae:	ea4f 0383 	mov.w	r3, r3, lsl #2
    77b2:	4413      	add	r3, r2
    77b4:	4a41      	ldr	r2, [pc, #260]	(78bc <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x43c>)
    77b6:	605a      	str	r2, [r3, #4]
                    accelerationLineaires[initTableaux] = 0;
    77b8:	6c3b      	ldr	r3, [r7, #64]
    77ba:	68fa      	ldr	r2, [r7, #12]
    77bc:	f103 0326 	add.w	r3, r3, #38	; 0x26
    77c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    77c4:	4413      	add	r3, r2
    77c6:	4a3d      	ldr	r2, [pc, #244]	(78bc <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x43c>)
    77c8:	605a      	str	r2, [r3, #4]
                    accelerationAngulaires[initTableaux] = 0;
    77ca:	6c3b      	ldr	r3, [r7, #64]
    77cc:	68fa      	ldr	r2, [r7, #12]
    77ce:	f103 0330 	add.w	r3, r3, #48	; 0x30
    77d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    77d6:	4413      	add	r3, r2
    77d8:	4a38      	ldr	r2, [pc, #224]	(78bc <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x43c>)
    77da:	605a      	str	r2, [r3, #4]
            {
                obstacleDetecte = true;
                nbUpdateDepuisObstacleDetecte = 0;

//                //Remise à 0 du tableau
                for(int initTableaux = 0 ; initTableaux < NB_VERIFICATION_BLOQUAGE_PAR_SECONDE ; initTableaux++)
    77dc:	6c3b      	ldr	r3, [r7, #64]
    77de:	f103 0301 	add.w	r3, r3, #1	; 0x1
    77e2:	643b      	str	r3, [r7, #64]
    77e4:	6c3b      	ldr	r3, [r7, #64]
    77e6:	2b09      	cmp	r3, #9
    77e8:	ddd4      	ble.n	7794 <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x314>
    77ea:	e060      	b.n	78ae <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x42e>
                }
                return;
            }

            //Shift du tableau, les valeurs sont plus vieilles
            for(int raz = NB_VERIFICATION_BLOQUAGE_PAR_SECONDE-1 ; raz > 0 ; raz--)
    77ec:	f04f 0309 	mov.w	r3, #9	; 0x9
    77f0:	647b      	str	r3, [r7, #68]
    77f2:	e04b      	b.n	788c <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x40c>
            {
                deplacementLineaires[raz]=deplacementLineaires[raz-1];
    77f4:	6c78      	ldr	r0, [r7, #68]
    77f6:	6c7b      	ldr	r3, [r7, #68]
    77f8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    77fc:	68fa      	ldr	r2, [r7, #12]
    77fe:	f103 0312 	add.w	r3, r3, #18	; 0x12
    7802:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7806:	4413      	add	r3, r2
    7808:	6859      	ldr	r1, [r3, #4]
    780a:	68fa      	ldr	r2, [r7, #12]
    780c:	f100 0312 	add.w	r3, r0, #18	; 0x12
    7810:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7814:	4413      	add	r3, r2
    7816:	6059      	str	r1, [r3, #4]
                deplacementAngulaire[raz]=deplacementAngulaire[raz-1];
    7818:	6c78      	ldr	r0, [r7, #68]
    781a:	6c7b      	ldr	r3, [r7, #68]
    781c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    7820:	68fa      	ldr	r2, [r7, #12]
    7822:	f103 031c 	add.w	r3, r3, #28	; 0x1c
    7826:	ea4f 0383 	mov.w	r3, r3, lsl #2
    782a:	4413      	add	r3, r2
    782c:	6859      	ldr	r1, [r3, #4]
    782e:	68fa      	ldr	r2, [r7, #12]
    7830:	f100 031c 	add.w	r3, r0, #28	; 0x1c
    7834:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7838:	4413      	add	r3, r2
    783a:	6059      	str	r1, [r3, #4]
                accelerationLineaires[raz]=accelerationLineaires[raz-1];
    783c:	6c78      	ldr	r0, [r7, #68]
    783e:	6c7b      	ldr	r3, [r7, #68]
    7840:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    7844:	68fa      	ldr	r2, [r7, #12]
    7846:	f103 0326 	add.w	r3, r3, #38	; 0x26
    784a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    784e:	4413      	add	r3, r2
    7850:	6859      	ldr	r1, [r3, #4]
    7852:	68fa      	ldr	r2, [r7, #12]
    7854:	f100 0326 	add.w	r3, r0, #38	; 0x26
    7858:	ea4f 0383 	mov.w	r3, r3, lsl #2
    785c:	4413      	add	r3, r2
    785e:	6059      	str	r1, [r3, #4]
                accelerationAngulaires[raz]=accelerationAngulaires[raz-1];
    7860:	6c78      	ldr	r0, [r7, #68]
    7862:	6c7b      	ldr	r3, [r7, #68]
    7864:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    7868:	68fa      	ldr	r2, [r7, #12]
    786a:	f103 0330 	add.w	r3, r3, #48	; 0x30
    786e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7872:	4413      	add	r3, r2
    7874:	6859      	ldr	r1, [r3, #4]
    7876:	68fa      	ldr	r2, [r7, #12]
    7878:	f100 0330 	add.w	r3, r0, #48	; 0x30
    787c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7880:	4413      	add	r3, r2
    7882:	6059      	str	r1, [r3, #4]
                }
                return;
            }

            //Shift du tableau, les valeurs sont plus vieilles
            for(int raz = NB_VERIFICATION_BLOQUAGE_PAR_SECONDE-1 ; raz > 0 ; raz--)
    7884:	6c7b      	ldr	r3, [r7, #68]
    7886:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    788a:	647b      	str	r3, [r7, #68]
    788c:	6c7b      	ldr	r3, [r7, #68]
    788e:	2b00      	cmp	r3, #0
    7890:	dcb0      	bgt.n	77f4 <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x374>
                accelerationLineaires[raz]=accelerationLineaires[raz-1];
                accelerationAngulaires[raz]=accelerationAngulaires[raz-1];
            }

            //Remise à 0 de la case 1
            deplacementLineaires[0] = 0;
    7892:	68fa      	ldr	r2, [r7, #12]
    7894:	4b09      	ldr	r3, [pc, #36]	(78bc <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x43c>)
    7896:	64d3      	str	r3, [r2, #76]
            deplacementAngulaire[0] = 0;
    7898:	68fa      	ldr	r2, [r7, #12]
    789a:	4b08      	ldr	r3, [pc, #32]	(78bc <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x43c>)
    789c:	6753      	str	r3, [r2, #116]
            accelerationLineaires[0] = 0;
    789e:	68fa      	ldr	r2, [r7, #12]
    78a0:	4b06      	ldr	r3, [pc, #24]	(78bc <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x43c>)
    78a2:	f8c2 309c 	str.w	r3, [r2, #156]
            accelerationAngulaires[0] = 0;
    78a6:	68fa      	ldr	r2, [r7, #12]
    78a8:	4b04      	ldr	r3, [pc, #16]	(78bc <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle+0x43c>)
    78aa:	f8c2 30c4 	str.w	r3, [r2, #196]
        }
    }
    return;
}
    78ae:	f107 074c 	add.w	r7, r7, #76	; 0x4c
    78b2:	46bd      	mov	sp, r7
    78b4:	bd90      	pop	{r4, r7, pc}
    78b6:	46c0      	nop			(mov r8, r8)
    78b8:	20000564 	.word	0x20000564
    78bc:	00000000 	.word	0x00000000
    78c0:	40a00000 	.word	0x40a00000
    78c4:	40000000 	.word	0x40000000

000078c8 <_ZN14Asservissement6updateEv>:
        return Remote::getSingleton()->getRightPWM();
    else*/
        return vitesseAngulaire;
}

void Asservissement::update(void)
    78c8:	b590      	push	{r4, r7, lr}
    78ca:	b09f      	sub	sp, #124
    78cc:	af00      	add	r7, sp, #0
    78ce:	6478      	str	r0, [r7, #68]
{
#ifdef ROBOTHW
    #if DEBUG_ODOMEDTRIE == 1
    PositionPlusAngle pos = Odometrie::odometrie->getPos();
    78d0:	4bfd      	ldr	r3, [pc, #1012]	(7cc8 <_ZN14Asservissement6updateEv+0x400>)
    78d2:	681a      	ldr	r2, [r3, #0]
    78d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
    78d8:	4618      	mov	r0, r3
    78da:	4611      	mov	r1, r2
    78dc:	f002 fa8c 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    Angle absAngle = Odometrie::odometrie->getAbsoluteAngle();
    78e0:	4bf9      	ldr	r3, [pc, #996]	(7cc8 <_ZN14Asservissement6updateEv+0x400>)
    78e2:	681b      	ldr	r3, [r3, #0]
    78e4:	4618      	mov	r0, r3
    78e6:	f002 fa7b 	bl	9de0 <_ZNK9Odometrie16getAbsoluteAngleEv>
    78ea:	4603      	mov	r3, r0
    78ec:	663b      	str	r3, [r7, #96]
    if ( pos.position.x > 400. /* absAngle > 3.14159265358979323846*2.*/)
    78ee:	6d7b      	ldr	r3, [r7, #84]
    78f0:	4618      	mov	r0, r3
    78f2:	49f6      	ldr	r1, [pc, #984]	(7ccc <_ZN14Asservissement6updateEv+0x404>)
    78f4:	f015 fcae 	bl	1d254 <__aeabi_fcmpgt>
    78f8:	4603      	mov	r3, r0
    78fa:	2b00      	cmp	r3, #0
    78fc:	d004      	beq.n	7908 <_ZN14Asservissement6updateEv+0x40>
        Led::setOn(0);
    78fe:	f04f 0000 	mov.w	r0, #0	; 0x0
    7902:	f004 fdcb 	bl	c49c <_ZN3Led5setOnEi>
    7906:	e003      	b.n	7910 <_ZN14Asservissement6updateEv+0x48>
    else
        Led::setOff(0);
    7908:	f04f 0000 	mov.w	r0, #0	; 0x0
    790c:	f004 fd86 	bl	c41c <_ZN3Led6setOffEi>
    #endif
#endif

    asserCount++;
    7910:	6c7b      	ldr	r3, [r7, #68]
    7912:	f8d3 30f8 	ldr.w	r3, [r3, #248]
    7916:	f103 0201 	add.w	r2, r3, #1	; 0x1
    791a:	6c7b      	ldr	r3, [r7, #68]
    791c:	f8c3 20f8 	str.w	r2, [r3, #248]

    if (true)
    {

        PositionPlusAngle positionPlusAngleActuelle = odometrie->getPos();      //Variable juste pour avoir un code plus lisible par la suite
    7920:	6c7b      	ldr	r3, [r7, #68]
    7922:	f8d3 20f4 	ldr.w	r2, [r3, #244]
    7926:	f107 0348 	add.w	r3, r7, #72	; 0x48
    792a:	4618      	mov	r0, r3
    792c:	4611      	mov	r1, r2
    792e:	f002 fa63 	bl	9df8 <_ZNK9Odometrie6getPosEv>
        Angle vitesse_angulaire_atteinte = odometrie->getVitesseAngulaire();    //idem
    7932:	6c7b      	ldr	r3, [r7, #68]
    7934:	f8d3 30f4 	ldr.w	r3, [r3, #244]
    7938:	4618      	mov	r0, r3
    793a:	f002 fa39 	bl	9db0 <_ZNK9Odometrie19getVitesseAngulaireEv>
    793e:	4603      	mov	r3, r0
    7940:	667b      	str	r3, [r7, #100]
        Distance vitesse_lineaire_atteinte = odometrie->getVitesseLineaire();   //idem
    7942:	6c7b      	ldr	r3, [r7, #68]
    7944:	f8d3 30f4 	ldr.w	r3, [r3, #244]
    7948:	4618      	mov	r0, r3
    794a:	f002 fa3d 	bl	9dc8 <_ZNK9Odometrie18getVitesseLineaireEv>
    794e:	4603      	mov	r3, r0
    7950:	66bb      	str	r3, [r7, #104]

        //Puis on les récupéres

        float vitesse_lineaire_a_atteindre = getLinearSpeed();
    7952:	6c78      	ldr	r0, [r7, #68]
    7954:	f7ff fc5c 	bl	7210 <_ZN14Asservissement14getLinearSpeedEv>
    7958:	4603      	mov	r3, r0
    795a:	66fb      	str	r3, [r7, #108]
        float vitesse_angulaire_a_atteindre = getAngularSpeed();
    795c:	6c78      	ldr	r0, [r7, #68]
    795e:	f7ff fc65 	bl	722c <_ZN14Asservissement15getAngularSpeedEv>
    7962:	4603      	mov	r3, r0
    7964:	673b      	str	r3, [r7, #112]
        //qDebug() << fixedLinearDuty << " = " << activePIDAngle;

#ifdef ROUES

        //on filtre l'erreur de vitesse lineaire et angulaire
        linearDutySent = activePIDDistance ? pid_filter_distance.getFilteredValue(vitesse_lineaire_a_atteindre-vitesse_lineaire_atteinte) : fixedLinearDuty;
    7966:	6c7b      	ldr	r3, [r7, #68]
    7968:	f893 3104 	ldrb.w	r3, [r3, #260]
    796c:	2b00      	cmp	r3, #0
    796e:	d00e      	beq.n	798e <_ZN14Asservissement6updateEv+0xc6>
    7970:	6c7b      	ldr	r3, [r7, #68]
    7972:	f103 0408 	add.w	r4, r3, #8	; 0x8
    7976:	6ef8      	ldr	r0, [r7, #108]
    7978:	6eb9      	ldr	r1, [r7, #104]
    797a:	f015 f9a7 	bl	1cccc <__aeabi_fsub>
    797e:	4603      	mov	r3, r0
    7980:	4620      	mov	r0, r4
    7982:	4619      	mov	r1, r3
    7984:	f002 ff9c 	bl	a8c0 <_ZN17PIDFilterDistance16getFilteredValueEf>
    7988:	4603      	mov	r3, r0
    798a:	607b      	str	r3, [r7, #4]
    798c:	e003      	b.n	7996 <_ZN14Asservissement6updateEv+0xce>
    798e:	6c7b      	ldr	r3, [r7, #68]
    7990:	f8d3 3108 	ldr.w	r3, [r3, #264]
    7994:	607b      	str	r3, [r7, #4]
    7996:	6c7b      	ldr	r3, [r7, #68]
    7998:	687a      	ldr	r2, [r7, #4]
    799a:	601a      	str	r2, [r3, #0]
        angularDutySent = activePIDAngle ? pid_filter_angle.getFilteredValue(vitesse_angulaire_a_atteindre-vitesse_angulaire_atteinte) : fixedAngularDuty;
    799c:	6c7b      	ldr	r3, [r7, #68]
    799e:	f893 3105 	ldrb.w	r3, [r3, #261]
    79a2:	2b00      	cmp	r3, #0
    79a4:	d00e      	beq.n	79c4 <_ZN14Asservissement6updateEv+0xfc>
    79a6:	6c7b      	ldr	r3, [r7, #68]
    79a8:	f103 0410 	add.w	r4, r3, #16	; 0x10
    79ac:	6f38      	ldr	r0, [r7, #112]
    79ae:	6e79      	ldr	r1, [r7, #100]
    79b0:	f015 f98c 	bl	1cccc <__aeabi_fsub>
    79b4:	4603      	mov	r3, r0
    79b6:	4620      	mov	r0, r4
    79b8:	4619      	mov	r1, r3
    79ba:	f002 ff01 	bl	a7c0 <_ZN14PIDFilterAngle16getFilteredValueEf>
    79be:	4603      	mov	r3, r0
    79c0:	60bb      	str	r3, [r7, #8]
    79c2:	e003      	b.n	79cc <_ZN14Asservissement6updateEv+0x104>
    79c4:	6c7b      	ldr	r3, [r7, #68]
    79c6:	f8d3 310c 	ldr.w	r3, [r3, #268]
    79ca:	60bb      	str	r3, [r7, #8]
    79cc:	6c7b      	ldr	r3, [r7, #68]
    79ce:	68ba      	ldr	r2, [r7, #8]
    79d0:	605a      	str	r2, [r3, #4]

        //Et on borne la somme de ces valeurs filtrée entre -> voir ci dessous
        float limit = 0.5f;
    79d2:	4bbf      	ldr	r3, [pc, #764]	(7cd0 <_ZN14Asservissement6updateEv+0x408>)
    79d4:	677b      	str	r3, [r7, #116]
        #ifdef RRD2
            limit = 0.5f;
        #endif


        linearDutySent =  MIN(MAX(linearDutySent, -limit),limit);
    79d6:	6c7b      	ldr	r3, [r7, #68]
    79d8:	681a      	ldr	r2, [r3, #0]
    79da:	6f7b      	ldr	r3, [r7, #116]
    79dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    79e0:	4610      	mov	r0, r2
    79e2:	4619      	mov	r1, r3
    79e4:	f015 fc18 	bl	1d218 <__aeabi_fcmplt>
    79e8:	4603      	mov	r3, r0
    79ea:	2b00      	cmp	r3, #0
    79ec:	d004      	beq.n	79f8 <_ZN14Asservissement6updateEv+0x130>
    79ee:	6f7b      	ldr	r3, [r7, #116]
    79f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    79f4:	613b      	str	r3, [r7, #16]
    79f6:	e002      	b.n	79fe <_ZN14Asservissement6updateEv+0x136>
    79f8:	6c7b      	ldr	r3, [r7, #68]
    79fa:	681b      	ldr	r3, [r3, #0]
    79fc:	613b      	str	r3, [r7, #16]
    79fe:	6938      	ldr	r0, [r7, #16]
    7a00:	6f79      	ldr	r1, [r7, #116]
    7a02:	f015 fc27 	bl	1d254 <__aeabi_fcmpgt>
    7a06:	4603      	mov	r3, r0
    7a08:	2b00      	cmp	r3, #0
    7a0a:	d002      	beq.n	7a12 <_ZN14Asservissement6updateEv+0x14a>
    7a0c:	6f7b      	ldr	r3, [r7, #116]
    7a0e:	60fb      	str	r3, [r7, #12]
    7a10:	e015      	b.n	7a3e <_ZN14Asservissement6updateEv+0x176>
    7a12:	6c7b      	ldr	r3, [r7, #68]
    7a14:	681a      	ldr	r2, [r3, #0]
    7a16:	6f7b      	ldr	r3, [r7, #116]
    7a18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7a1c:	4610      	mov	r0, r2
    7a1e:	4619      	mov	r1, r3
    7a20:	f015 fbfa 	bl	1d218 <__aeabi_fcmplt>
    7a24:	4603      	mov	r3, r0
    7a26:	2b00      	cmp	r3, #0
    7a28:	d004      	beq.n	7a34 <_ZN14Asservissement6updateEv+0x16c>
    7a2a:	6f7b      	ldr	r3, [r7, #116]
    7a2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7a30:	617b      	str	r3, [r7, #20]
    7a32:	e002      	b.n	7a3a <_ZN14Asservissement6updateEv+0x172>
    7a34:	6c7b      	ldr	r3, [r7, #68]
    7a36:	681b      	ldr	r3, [r3, #0]
    7a38:	617b      	str	r3, [r7, #20]
    7a3a:	697a      	ldr	r2, [r7, #20]
    7a3c:	60fa      	str	r2, [r7, #12]
    7a3e:	6c7b      	ldr	r3, [r7, #68]
    7a40:	68fa      	ldr	r2, [r7, #12]
    7a42:	601a      	str	r2, [r3, #0]
        angularDutySent = MIN(MAX(angularDutySent, -limit),limit);
    7a44:	6c7b      	ldr	r3, [r7, #68]
    7a46:	685a      	ldr	r2, [r3, #4]
    7a48:	6f7b      	ldr	r3, [r7, #116]
    7a4a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7a4e:	4610      	mov	r0, r2
    7a50:	4619      	mov	r1, r3
    7a52:	f015 fbe1 	bl	1d218 <__aeabi_fcmplt>
    7a56:	4603      	mov	r3, r0
    7a58:	2b00      	cmp	r3, #0
    7a5a:	d004      	beq.n	7a66 <_ZN14Asservissement6updateEv+0x19e>
    7a5c:	6f7b      	ldr	r3, [r7, #116]
    7a5e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7a62:	61fb      	str	r3, [r7, #28]
    7a64:	e002      	b.n	7a6c <_ZN14Asservissement6updateEv+0x1a4>
    7a66:	6c7b      	ldr	r3, [r7, #68]
    7a68:	685b      	ldr	r3, [r3, #4]
    7a6a:	61fb      	str	r3, [r7, #28]
    7a6c:	69f8      	ldr	r0, [r7, #28]
    7a6e:	6f79      	ldr	r1, [r7, #116]
    7a70:	f015 fbf0 	bl	1d254 <__aeabi_fcmpgt>
    7a74:	4603      	mov	r3, r0
    7a76:	2b00      	cmp	r3, #0
    7a78:	d002      	beq.n	7a80 <_ZN14Asservissement6updateEv+0x1b8>
    7a7a:	6f7b      	ldr	r3, [r7, #116]
    7a7c:	61bb      	str	r3, [r7, #24]
    7a7e:	e015      	b.n	7aac <_ZN14Asservissement6updateEv+0x1e4>
    7a80:	6c7b      	ldr	r3, [r7, #68]
    7a82:	685a      	ldr	r2, [r3, #4]
    7a84:	6f7b      	ldr	r3, [r7, #116]
    7a86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7a8a:	4610      	mov	r0, r2
    7a8c:	4619      	mov	r1, r3
    7a8e:	f015 fbc3 	bl	1d218 <__aeabi_fcmplt>
    7a92:	4603      	mov	r3, r0
    7a94:	2b00      	cmp	r3, #0
    7a96:	d004      	beq.n	7aa2 <_ZN14Asservissement6updateEv+0x1da>
    7a98:	6f7b      	ldr	r3, [r7, #116]
    7a9a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7a9e:	623b      	str	r3, [r7, #32]
    7aa0:	e002      	b.n	7aa8 <_ZN14Asservissement6updateEv+0x1e0>
    7aa2:	6c7b      	ldr	r3, [r7, #68]
    7aa4:	685b      	ldr	r3, [r3, #4]
    7aa6:	623b      	str	r3, [r7, #32]
    7aa8:	6a3a      	ldr	r2, [r7, #32]
    7aaa:	61ba      	str	r2, [r7, #24]
    7aac:	6c7b      	ldr	r3, [r7, #68]
    7aae:	69ba      	ldr	r2, [r7, #24]
    7ab0:	605a      	str	r2, [r3, #4]

        computeObstacleDetecte(linearDutySent, angularDutySent, &positionPlusAngleActuelle);
    7ab2:	6c7b      	ldr	r3, [r7, #68]
    7ab4:	681a      	ldr	r2, [r3, #0]
    7ab6:	6c7b      	ldr	r3, [r7, #68]
    7ab8:	685b      	ldr	r3, [r3, #4]
    7aba:	f107 0c48 	add.w	ip, r7, #72	; 0x48
    7abe:	6c78      	ldr	r0, [r7, #68]
    7ac0:	4611      	mov	r1, r2
    7ac2:	461a      	mov	r2, r3
    7ac4:	4663      	mov	r3, ip
    7ac6:	f7ff fcdb 	bl	7480 <_ZN14Asservissement22computeObstacleDetecteEffP17PositionPlusAngle>

        if(obstacleDetecte)
    7aca:	6c7b      	ldr	r3, [r7, #68]
    7acc:	f893 30ec 	ldrb.w	r3, [r3, #236]
    7ad0:	2b00      	cmp	r3, #0
    7ad2:	d005      	beq.n	7ae0 <_ZN14Asservissement6updateEv+0x218>
        {
            linearDutySent = 0;
    7ad4:	6c7a      	ldr	r2, [r7, #68]
    7ad6:	4b7f      	ldr	r3, [pc, #508]	(7cd4 <_ZN14Asservissement6updateEv+0x40c>)
    7ad8:	6013      	str	r3, [r2, #0]
            angularDutySent = 0;
    7ada:	6c7a      	ldr	r2, [r7, #68]
    7adc:	4b7d      	ldr	r3, [pc, #500]	(7cd4 <_ZN14Asservissement6updateEv+0x40c>)
    7ade:	6053      	str	r3, [r2, #4]
 //       linearDutySent = fabs(linearDutySent) > 0.05 || vitesse_lineaire_a_atteindre > 0.01 ? linearDutySent : 0;
 //       angularDutySent = fabs(angularDutySent) > 0.05 || vitesse_angulaire_a_atteindre > 0.0001 ? angularDutySent : 0;


        // test d'arret complet si c'est l'ordre qu'on lui donne
        if (vitesse_lineaire_a_atteindre == 0.0f && vitesse_angulaire_a_atteindre == 0.0f)
    7ae0:	6ef8      	ldr	r0, [r7, #108]
    7ae2:	497c      	ldr	r1, [pc, #496]	(7cd4 <_ZN14Asservissement6updateEv+0x40c>)
    7ae4:	f015 fb8e 	bl	1d204 <__aeabi_fcmpeq>
    7ae8:	4603      	mov	r3, r0
    7aea:	2b00      	cmp	r3, #0
    7aec:	d00c      	beq.n	7b08 <_ZN14Asservissement6updateEv+0x240>
    7aee:	6f38      	ldr	r0, [r7, #112]
    7af0:	4978      	ldr	r1, [pc, #480]	(7cd4 <_ZN14Asservissement6updateEv+0x40c>)
    7af2:	f015 fb87 	bl	1d204 <__aeabi_fcmpeq>
    7af6:	4603      	mov	r3, r0
    7af8:	2b00      	cmp	r3, #0
    7afa:	d005      	beq.n	7b08 <_ZN14Asservissement6updateEv+0x240>
        {
            linearDutySent = 0.0f;
    7afc:	6c7a      	ldr	r2, [r7, #68]
    7afe:	4b75      	ldr	r3, [pc, #468]	(7cd4 <_ZN14Asservissement6updateEv+0x40c>)
    7b00:	6013      	str	r3, [r2, #0]
            angularDutySent = 0.0f;
    7b02:	6c7a      	ldr	r2, [r7, #68]
    7b04:	4b73      	ldr	r3, [pc, #460]	(7cd4 <_ZN14Asservissement6updateEv+0x40c>)
    7b06:	6053      	str	r3, [r2, #4]
        {
        #if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
            roues.droite.tourne(0.8*MIN(MAX(+linearDutySent-angularDutySent, -limit),limit));
            roues.gauche.tourne(0.8*MIN(MAX(+linearDutySent+angularDutySent, -limit),limit));
        #else
            roues.droite.tourne(0.95*MIN(MAX(+linearDutySent+angularDutySent, -limit),limit));//*1
    7b08:	6c7b      	ldr	r3, [r7, #68]
    7b0a:	f103 0328 	add.w	r3, r3, #40	; 0x28
    7b0e:	627b      	str	r3, [r7, #36]
    7b10:	6c7b      	ldr	r3, [r7, #68]
    7b12:	681a      	ldr	r2, [r3, #0]
    7b14:	6c7b      	ldr	r3, [r7, #68]
    7b16:	685b      	ldr	r3, [r3, #4]
    7b18:	4610      	mov	r0, r2
    7b1a:	4619      	mov	r1, r3
    7b1c:	f015 f8d8 	bl	1ccd0 <__addsf3>
    7b20:	4603      	mov	r3, r0
    7b22:	461a      	mov	r2, r3
    7b24:	6f7b      	ldr	r3, [r7, #116]
    7b26:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7b2a:	4610      	mov	r0, r2
    7b2c:	4619      	mov	r1, r3
    7b2e:	f015 fb73 	bl	1d218 <__aeabi_fcmplt>
    7b32:	4603      	mov	r3, r0
    7b34:	2b00      	cmp	r3, #0
    7b36:	d004      	beq.n	7b42 <_ZN14Asservissement6updateEv+0x27a>
    7b38:	6f7b      	ldr	r3, [r7, #116]
    7b3a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7b3e:	62fb      	str	r3, [r7, #44]
    7b40:	e009      	b.n	7b56 <_ZN14Asservissement6updateEv+0x28e>
    7b42:	6c7b      	ldr	r3, [r7, #68]
    7b44:	681a      	ldr	r2, [r3, #0]
    7b46:	6c7b      	ldr	r3, [r7, #68]
    7b48:	685b      	ldr	r3, [r3, #4]
    7b4a:	4610      	mov	r0, r2
    7b4c:	4619      	mov	r1, r3
    7b4e:	f015 f8bf 	bl	1ccd0 <__addsf3>
    7b52:	4603      	mov	r3, r0
    7b54:	62fb      	str	r3, [r7, #44]
    7b56:	6af8      	ldr	r0, [r7, #44]
    7b58:	6f79      	ldr	r1, [r7, #116]
    7b5a:	f015 fb7b 	bl	1d254 <__aeabi_fcmpgt>
    7b5e:	4603      	mov	r3, r0
    7b60:	2b00      	cmp	r3, #0
    7b62:	d002      	beq.n	7b6a <_ZN14Asservissement6updateEv+0x2a2>
    7b64:	6f7b      	ldr	r3, [r7, #116]
    7b66:	62bb      	str	r3, [r7, #40]
    7b68:	e024      	b.n	7bb4 <_ZN14Asservissement6updateEv+0x2ec>
    7b6a:	6c7b      	ldr	r3, [r7, #68]
    7b6c:	681a      	ldr	r2, [r3, #0]
    7b6e:	6c7b      	ldr	r3, [r7, #68]
    7b70:	685b      	ldr	r3, [r3, #4]
    7b72:	4610      	mov	r0, r2
    7b74:	4619      	mov	r1, r3
    7b76:	f015 f8ab 	bl	1ccd0 <__addsf3>
    7b7a:	4603      	mov	r3, r0
    7b7c:	461a      	mov	r2, r3
    7b7e:	6f7b      	ldr	r3, [r7, #116]
    7b80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7b84:	4610      	mov	r0, r2
    7b86:	4619      	mov	r1, r3
    7b88:	f015 fb46 	bl	1d218 <__aeabi_fcmplt>
    7b8c:	4603      	mov	r3, r0
    7b8e:	2b00      	cmp	r3, #0
    7b90:	d004      	beq.n	7b9c <_ZN14Asservissement6updateEv+0x2d4>
    7b92:	6f7b      	ldr	r3, [r7, #116]
    7b94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7b98:	633b      	str	r3, [r7, #48]
    7b9a:	e009      	b.n	7bb0 <_ZN14Asservissement6updateEv+0x2e8>
    7b9c:	6c7b      	ldr	r3, [r7, #68]
    7b9e:	681a      	ldr	r2, [r3, #0]
    7ba0:	6c7b      	ldr	r3, [r7, #68]
    7ba2:	685b      	ldr	r3, [r3, #4]
    7ba4:	4610      	mov	r0, r2
    7ba6:	4619      	mov	r1, r3
    7ba8:	f015 f892 	bl	1ccd0 <__addsf3>
    7bac:	4603      	mov	r3, r0
    7bae:	633b      	str	r3, [r7, #48]
    7bb0:	6b3a      	ldr	r2, [r7, #48]
    7bb2:	62ba      	str	r2, [r7, #40]
    7bb4:	6ab8      	ldr	r0, [r7, #40]
    7bb6:	f014 fd21 	bl	1c5fc <__aeabi_f2d>
    7bba:	4602      	mov	r2, r0
    7bbc:	460b      	mov	r3, r1
    7bbe:	4610      	mov	r0, r2
    7bc0:	4619      	mov	r1, r3
    7bc2:	a23f      	add	r2, pc, #252	(adr r2, 7cc0 <_ZN14Asservissement6updateEv+0x3f8>)
    7bc4:	ca0c      	ldmia	r2!, {r2, r3}
    7bc6:	f014 fd6d 	bl	1c6a4 <__aeabi_dmul>
    7bca:	4602      	mov	r2, r0
    7bcc:	460b      	mov	r3, r1
    7bce:	4610      	mov	r0, r2
    7bd0:	4619      	mov	r1, r3
    7bd2:	f015 f827 	bl	1cc24 <__aeabi_d2f>
    7bd6:	4603      	mov	r3, r0
    7bd8:	6a78      	ldr	r0, [r7, #36]
    7bda:	4619      	mov	r1, r3
    7bdc:	f005 fb80 	bl	d2e0 <_ZN4Roue6tourneEf>
            roues.gauche.tourne(0.95*MIN(MAX(+linearDutySent-angularDutySent, -limit),limit));//*1
    7be0:	6c7b      	ldr	r3, [r7, #68]
    7be2:	f103 0318 	add.w	r3, r3, #24	; 0x18
    7be6:	637b      	str	r3, [r7, #52]
    7be8:	6c7b      	ldr	r3, [r7, #68]
    7bea:	681a      	ldr	r2, [r3, #0]
    7bec:	6c7b      	ldr	r3, [r7, #68]
    7bee:	685b      	ldr	r3, [r3, #4]
    7bf0:	4610      	mov	r0, r2
    7bf2:	4619      	mov	r1, r3
    7bf4:	f015 f86a 	bl	1cccc <__aeabi_fsub>
    7bf8:	4603      	mov	r3, r0
    7bfa:	461a      	mov	r2, r3
    7bfc:	6f7b      	ldr	r3, [r7, #116]
    7bfe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7c02:	4610      	mov	r0, r2
    7c04:	4619      	mov	r1, r3
    7c06:	f015 fb07 	bl	1d218 <__aeabi_fcmplt>
    7c0a:	4603      	mov	r3, r0
    7c0c:	2b00      	cmp	r3, #0
    7c0e:	d004      	beq.n	7c1a <_ZN14Asservissement6updateEv+0x352>
    7c10:	6f7b      	ldr	r3, [r7, #116]
    7c12:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7c16:	63fb      	str	r3, [r7, #60]
    7c18:	e009      	b.n	7c2e <_ZN14Asservissement6updateEv+0x366>
    7c1a:	6c7b      	ldr	r3, [r7, #68]
    7c1c:	681a      	ldr	r2, [r3, #0]
    7c1e:	6c7b      	ldr	r3, [r7, #68]
    7c20:	685b      	ldr	r3, [r3, #4]
    7c22:	4610      	mov	r0, r2
    7c24:	4619      	mov	r1, r3
    7c26:	f015 f851 	bl	1cccc <__aeabi_fsub>
    7c2a:	4603      	mov	r3, r0
    7c2c:	63fb      	str	r3, [r7, #60]
    7c2e:	6bf8      	ldr	r0, [r7, #60]
    7c30:	6f79      	ldr	r1, [r7, #116]
    7c32:	f015 fb0f 	bl	1d254 <__aeabi_fcmpgt>
    7c36:	4603      	mov	r3, r0
    7c38:	2b00      	cmp	r3, #0
    7c3a:	d002      	beq.n	7c42 <_ZN14Asservissement6updateEv+0x37a>
    7c3c:	6f7b      	ldr	r3, [r7, #116]
    7c3e:	63bb      	str	r3, [r7, #56]
    7c40:	e024      	b.n	7c8c <_ZN14Asservissement6updateEv+0x3c4>
    7c42:	6c7b      	ldr	r3, [r7, #68]
    7c44:	681a      	ldr	r2, [r3, #0]
    7c46:	6c7b      	ldr	r3, [r7, #68]
    7c48:	685b      	ldr	r3, [r3, #4]
    7c4a:	4610      	mov	r0, r2
    7c4c:	4619      	mov	r1, r3
    7c4e:	f015 f83d 	bl	1cccc <__aeabi_fsub>
    7c52:	4603      	mov	r3, r0
    7c54:	461a      	mov	r2, r3
    7c56:	6f7b      	ldr	r3, [r7, #116]
    7c58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7c5c:	4610      	mov	r0, r2
    7c5e:	4619      	mov	r1, r3
    7c60:	f015 fada 	bl	1d218 <__aeabi_fcmplt>
    7c64:	4603      	mov	r3, r0
    7c66:	2b00      	cmp	r3, #0
    7c68:	d004      	beq.n	7c74 <_ZN14Asservissement6updateEv+0x3ac>
    7c6a:	6f7b      	ldr	r3, [r7, #116]
    7c6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7c70:	643b      	str	r3, [r7, #64]
    7c72:	e009      	b.n	7c88 <_ZN14Asservissement6updateEv+0x3c0>
    7c74:	6c7b      	ldr	r3, [r7, #68]
    7c76:	681a      	ldr	r2, [r3, #0]
    7c78:	6c7b      	ldr	r3, [r7, #68]
    7c7a:	685b      	ldr	r3, [r3, #4]
    7c7c:	4610      	mov	r0, r2
    7c7e:	4619      	mov	r1, r3
    7c80:	f015 f824 	bl	1cccc <__aeabi_fsub>
    7c84:	4603      	mov	r3, r0
    7c86:	643b      	str	r3, [r7, #64]
    7c88:	6c3a      	ldr	r2, [r7, #64]
    7c8a:	63ba      	str	r2, [r7, #56]
    7c8c:	6bb8      	ldr	r0, [r7, #56]
    7c8e:	f014 fcb5 	bl	1c5fc <__aeabi_f2d>
    7c92:	4602      	mov	r2, r0
    7c94:	460b      	mov	r3, r1
    7c96:	4610      	mov	r0, r2
    7c98:	4619      	mov	r1, r3
    7c9a:	a209      	add	r2, pc, #36	(adr r2, 7cc0 <_ZN14Asservissement6updateEv+0x3f8>)
    7c9c:	ca0c      	ldmia	r2!, {r2, r3}
    7c9e:	f014 fd01 	bl	1c6a4 <__aeabi_dmul>
    7ca2:	4602      	mov	r2, r0
    7ca4:	460b      	mov	r3, r1
    7ca6:	4610      	mov	r0, r2
    7ca8:	4619      	mov	r1, r3
    7caa:	f014 ffbb 	bl	1cc24 <__aeabi_d2f>
    7cae:	4603      	mov	r3, r0
    7cb0:	6b78      	ldr	r0, [r7, #52]
    7cb2:	4619      	mov	r1, r3
    7cb4:	f005 fb14 	bl	d2e0 <_ZN4Roue6tourneEf>
        roues.droite.tourne(0.);
    }
#else
}
#endif
}
    7cb8:	f107 077c 	add.w	r7, r7, #124	; 0x7c
    7cbc:	46bd      	mov	sp, r7
    7cbe:	bd90      	pop	{r4, r7, pc}
    7cc0:	66666666 	.word	0x66666666
    7cc4:	3fee6666 	.word	0x3fee6666
    7cc8:	20000574 	.word	0x20000574
    7ccc:	43c80000 	.word	0x43c80000
    7cd0:	3f000000 	.word	0x3f000000
    7cd4:	00000000 	.word	0x00000000

00007cd8 <SysTick_Handler>:

#ifdef ROBOTHW
//pour lancer l'update à chaque tic d'horloge
extern "C" void SysTick_Handler()
    7cd8:	b580      	push	{r7, lr}
    7cda:	af00      	add	r7, sp, #0
{
    // Count the number of SysTick_Handler call
    systick_count++;
    7cdc:	4b09      	ldr	r3, [pc, #36]	(7d04 <SysTick_Handler+0x2c>)
    7cde:	681b      	ldr	r3, [r3, #0]
    7ce0:	f103 0201 	add.w	r2, r3, #1	; 0x1
    7ce4:	4b07      	ldr	r3, [pc, #28]	(7d04 <SysTick_Handler+0x2c>)
    7ce6:	601a      	str	r2, [r3, #0]
    if (systick_count%200 == 0){
        Led::toggle(0);
    }
#endif

    Odometrie::odometrie->update();
    7ce8:	4b07      	ldr	r3, [pc, #28]	(7d08 <SysTick_Handler+0x30>)
    7cea:	681b      	ldr	r3, [r3, #0]
    7cec:	4618      	mov	r0, r3
    7cee:	f002 f96d 	bl	9fcc <_ZN9Odometrie6updateEv>

    StrategieV2::update();
    7cf2:	f010 f891 	bl	17e18 <_ZN11StrategieV26updateEv>

    Asservissement::asservissement->update();
    7cf6:	4b05      	ldr	r3, [pc, #20]	(7d0c <SysTick_Handler+0x34>)
    7cf8:	681b      	ldr	r3, [r3, #0]
    7cfa:	4618      	mov	r0, r3
    7cfc:	f7ff fde4 	bl	78c8 <_ZN14Asservissement6updateEv>
}
    7d00:	46bd      	mov	sp, r7
    7d02:	bd80      	pop	{r7, pc}
    7d04:	2000056c 	.word	0x2000056c
    7d08:	20000574 	.word	0x20000574
    7d0c:	20000564 	.word	0x20000564

00007d10 <_ZN14AsservissementC1EP9Odometrie>:

Asservissement * Asservissement::asservissement = NULL; //Pour que nos variables static soient défini
bool Asservissement::matchFini = false;
const uint16_t Asservissement::nb_ms_between_updates = MS_BETWEEN_UPDATE;

Asservissement::Asservissement(Odometrie* _odometrie) /*:
    7d10:	b580      	push	{r7, lr}
    7d12:	b084      	sub	sp, #16
    7d14:	af00      	add	r7, sp, #0
    7d16:	6078      	str	r0, [r7, #4]
    7d18:	6039      	str	r1, [r7, #0]
    7d1a:	687b      	ldr	r3, [r7, #4]
    7d1c:	f103 0308 	add.w	r3, r3, #8	; 0x8
    7d20:	4618      	mov	r0, r3
    7d22:	f002 fdb9 	bl	a898 <_ZN17PIDFilterDistanceC1Ev>
    7d26:	687b      	ldr	r3, [r7, #4]
    7d28:	f103 0310 	add.w	r3, r3, #16	; 0x10
    7d2c:	4618      	mov	r0, r3
    7d2e:	f002 fd33 	bl	a798 <_ZN14PIDFilterAngleC1Ev>
    7d32:	687b      	ldr	r3, [r7, #4]
    7d34:	f103 0318 	add.w	r3, r3, #24	; 0x18
    7d38:	4618      	mov	r0, r3
    7d3a:	f7fd fdd3 	bl	58e4 <_ZN5RouesC1Ev>
    seuil_collision(SEUIL_COLISION),
    buffer_collision(0xffffffff)*/
{
    vitesseLineaire = 0;
    7d3e:	687a      	ldr	r2, [r7, #4]
    7d40:	4b48      	ldr	r3, [pc, #288]	(7e64 <_ZN14AsservissementC1EP9Odometrie+0x154>)
    7d42:	f8c2 30fc 	str.w	r3, [r2, #252]
    vitesseAngulaire = 0;
    7d46:	687a      	ldr	r2, [r7, #4]
    7d48:	4b46      	ldr	r3, [pc, #280]	(7e64 <_ZN14AsservissementC1EP9Odometrie+0x154>)
    7d4a:	f8c2 3100 	str.w	r3, [r2, #256]
	odometrie = _odometrie;
    7d4e:	687a      	ldr	r2, [r7, #4]
    7d50:	683b      	ldr	r3, [r7, #0]
    7d52:	f8c2 30f4 	str.w	r3, [r2, #244]

    activePIDDistance = true;
    7d56:	687a      	ldr	r2, [r7, #4]
    7d58:	f04f 0301 	mov.w	r3, #1	; 0x1
    7d5c:	f882 3104 	strb.w	r3, [r2, #260]
    activePIDAngle = true;
    7d60:	687a      	ldr	r2, [r7, #4]
    7d62:	f04f 0301 	mov.w	r3, #1	; 0x1
    7d66:	f882 3105 	strb.w	r3, [r2, #261]

    resetFixedDuty();
    7d6a:	6878      	ldr	r0, [r7, #4]
    7d6c:	f7ff fb60 	bl	7430 <_ZN14Asservissement14resetFixedDutyEv>

    linearDutySent = 0;
    7d70:	687a      	ldr	r2, [r7, #4]
    7d72:	4b3c      	ldr	r3, [pc, #240]	(7e64 <_ZN14AsservissementC1EP9Odometrie+0x154>)
    7d74:	6013      	str	r3, [r2, #0]
    angularDutySent = 0;
    7d76:	687a      	ldr	r2, [r7, #4]
    7d78:	4b3a      	ldr	r3, [pc, #232]	(7e64 <_ZN14AsservissementC1EP9Odometrie+0x154>)
    7d7a:	6053      	str	r3, [r2, #4]
    Asservissement::asservissement = this;
    7d7c:	4a3a      	ldr	r2, [pc, #232]	(7e68 <_ZN14AsservissementC1EP9Odometrie+0x158>)
    7d7e:	687b      	ldr	r3, [r7, #4]
    7d80:	6013      	str	r3, [r2, #0]
    asserCount = 0;
    7d82:	687a      	ldr	r2, [r7, #4]
    7d84:	f04f 0300 	mov.w	r3, #0	; 0x0
    7d88:	f8c2 30f8 	str.w	r3, [r2, #248]

    nombreQuatumParDixiemeDeSeconde = 1000/(NB_VERIFICATION_BLOQUAGE_PAR_SECONDE*MS_BETWEEN_UPDATE);
    7d8c:	687a      	ldr	r2, [r7, #4]
    7d8e:	f04f 0314 	mov.w	r3, #20	; 0x14
    7d92:	f8a2 304a 	strh.w	r3, [r2, #74]
    obstacleDetecte = false;
    7d96:	687a      	ldr	r2, [r7, #4]
    7d98:	f04f 0300 	mov.w	r3, #0	; 0x0
    7d9c:	f882 30ec 	strb.w	r3, [r2, #236]
    nbUpdateDepuisObstacleDetecte = 0;
    7da0:	687a      	ldr	r2, [r7, #4]
    7da2:	f04f 0300 	mov.w	r3, #0	; 0x0
    7da6:	f8c2 30f0 	str.w	r3, [r2, #240]
    positionPlusAnglePrecedenteX = 0;
    7daa:	687a      	ldr	r2, [r7, #4]
    7dac:	4b2d      	ldr	r3, [pc, #180]	(7e64 <_ZN14AsservissementC1EP9Odometrie+0x154>)
    7dae:	63d3      	str	r3, [r2, #60]
    positionPlusAnglePrecedenteY = 0;
    7db0:	687a      	ldr	r2, [r7, #4]
    7db2:	4b2c      	ldr	r3, [pc, #176]	(7e64 <_ZN14AsservissementC1EP9Odometrie+0x154>)
    7db4:	6413      	str	r3, [r2, #64]
    positionPlusAnglePrecedenteAngle = 0;
    7db6:	687a      	ldr	r2, [r7, #4]
    7db8:	4b2a      	ldr	r3, [pc, #168]	(7e64 <_ZN14AsservissementC1EP9Odometrie+0x154>)
    7dba:	6453      	str	r3, [r2, #68]

    for(int initTableaux = 0 ; initTableaux < NB_VERIFICATION_BLOQUAGE_PAR_SECONDE ; initTableaux++)
    7dbc:	f04f 0300 	mov.w	r3, #0	; 0x0
    7dc0:	60fb      	str	r3, [r7, #12]
    7dc2:	e027      	b.n	7e14 <_ZN14AsservissementC1EP9Odometrie+0x104>
    {
        deplacementLineaires[initTableaux] = 0;
    7dc4:	68fb      	ldr	r3, [r7, #12]
    7dc6:	687a      	ldr	r2, [r7, #4]
    7dc8:	f103 0312 	add.w	r3, r3, #18	; 0x12
    7dcc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7dd0:	4413      	add	r3, r2
    7dd2:	4a24      	ldr	r2, [pc, #144]	(7e64 <_ZN14AsservissementC1EP9Odometrie+0x154>)
    7dd4:	605a      	str	r2, [r3, #4]
        deplacementAngulaire[initTableaux] = 0;
    7dd6:	68fb      	ldr	r3, [r7, #12]
    7dd8:	687a      	ldr	r2, [r7, #4]
    7dda:	f103 031c 	add.w	r3, r3, #28	; 0x1c
    7dde:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7de2:	4413      	add	r3, r2
    7de4:	4a1f      	ldr	r2, [pc, #124]	(7e64 <_ZN14AsservissementC1EP9Odometrie+0x154>)
    7de6:	605a      	str	r2, [r3, #4]
        accelerationLineaires[initTableaux] = 0;
    7de8:	68fb      	ldr	r3, [r7, #12]
    7dea:	687a      	ldr	r2, [r7, #4]
    7dec:	f103 0326 	add.w	r3, r3, #38	; 0x26
    7df0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7df4:	4413      	add	r3, r2
    7df6:	4a1b      	ldr	r2, [pc, #108]	(7e64 <_ZN14AsservissementC1EP9Odometrie+0x154>)
    7df8:	605a      	str	r2, [r3, #4]
        accelerationAngulaires[initTableaux] = 0;
    7dfa:	68fb      	ldr	r3, [r7, #12]
    7dfc:	687a      	ldr	r2, [r7, #4]
    7dfe:	f103 0330 	add.w	r3, r3, #48	; 0x30
    7e02:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7e06:	4413      	add	r3, r2
    7e08:	4a16      	ldr	r2, [pc, #88]	(7e64 <_ZN14AsservissementC1EP9Odometrie+0x154>)
    7e0a:	605a      	str	r2, [r3, #4]
    nbUpdateDepuisObstacleDetecte = 0;
    positionPlusAnglePrecedenteX = 0;
    positionPlusAnglePrecedenteY = 0;
    positionPlusAnglePrecedenteAngle = 0;

    for(int initTableaux = 0 ; initTableaux < NB_VERIFICATION_BLOQUAGE_PAR_SECONDE ; initTableaux++)
    7e0c:	68fb      	ldr	r3, [r7, #12]
    7e0e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    7e12:	60fb      	str	r3, [r7, #12]
    7e14:	68fb      	ldr	r3, [r7, #12]
    7e16:	2b09      	cmp	r3, #9
    7e18:	ddd4      	ble.n	7dc4 <_ZN14AsservissementC1EP9Odometrie+0xb4>
        accelerationLineaires[initTableaux] = 0;
        accelerationAngulaires[initTableaux] = 0;
    }

#ifdef CAPTEURS
    sensors = Sensors::getSensors();
    7e1a:	f7fd fe69 	bl	5af0 <_ZN7Sensors10getSensorsEv>
    7e1e:	4602      	mov	r2, r0
    7e20:	687b      	ldr	r3, [r7, #4]
    7e22:	639a      	str	r2, [r3, #56]
#endif

#ifdef ROBOTHW  //on définie les interruptions possibles dues à certains ports
    *((uint32_t *)(STK_CTRL_ADDR)) = 0x03; // CLKSOURCE:0 ; TICKINT: 1 ; ENABLE:1
    7e24:	4a11      	ldr	r2, [pc, #68]	(7e6c <_ZN14AsservissementC1EP9Odometrie+0x15c>)
    7e26:	f04f 0303 	mov.w	r3, #3	; 0x3
    7e2a:	6013      	str	r3, [r2, #0]
#ifdef STM32F40_41xxx
    *((uint32_t *)(STK_LOAD_ADDR)) = 21000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
#else
    *((uint32_t *)(STK_LOAD_ADDR)) = 9000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
    7e2c:	4a10      	ldr	r2, [pc, #64]	(7e70 <_ZN14AsservissementC1EP9Odometrie+0x160>)
    7e2e:	f64a 73c8 	movw	r3, #45000	; 0xafc8
    7e32:	6013      	str	r3, [r2, #0]
    // le micro controlleur tourne à une frequence f (72Mhz ici), la valeur à mettre est (0.001*(f/8))*(temps en ms entre chaque update)
    // voir p190 de la doc

    NVIC_InitTypeDef SysTick_IRQ;

    SysTick_IRQ.NVIC_IRQChannel = SysTick_IRQn;
    7e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e38:	723b      	strb	r3, [r7, #8]
    SysTick_IRQ.NVIC_IRQChannelCmd = ENABLE;
    7e3a:	f04f 0301 	mov.w	r3, #1	; 0x1
    7e3e:	72fb      	strb	r3, [r7, #11]
    SysTick_IRQ.NVIC_IRQChannelPreemptionPriority = 0;
    7e40:	f04f 0300 	mov.w	r3, #0	; 0x0
    7e44:	727b      	strb	r3, [r7, #9]
    SysTick_IRQ.NVIC_IRQChannelSubPriority = 1;
    7e46:	f04f 0301 	mov.w	r3, #1	; 0x1
    7e4a:	72bb      	strb	r3, [r7, #10]
    NVIC_Init(&SysTick_IRQ);
    7e4c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    7e50:	4618      	mov	r0, r3
    7e52:	f7f8 f9e3 	bl	21c <NVIC_Init>
#endif
}
    7e56:	687b      	ldr	r3, [r7, #4]
    7e58:	4618      	mov	r0, r3
    7e5a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    7e5e:	46bd      	mov	sp, r7
    7e60:	bd80      	pop	{r7, pc}
    7e62:	46c0      	nop			(mov r8, r8)
    7e64:	00000000 	.word	0x00000000
    7e68:	20000564 	.word	0x20000564
    7e6c:	e000e010 	.word	0xe000e010
    7e70:	e000e014 	.word	0xe000e014

00007e74 <_ZN14AsservissementC2EP9Odometrie>:

Asservissement * Asservissement::asservissement = NULL; //Pour que nos variables static soient défini
bool Asservissement::matchFini = false;
const uint16_t Asservissement::nb_ms_between_updates = MS_BETWEEN_UPDATE;

Asservissement::Asservissement(Odometrie* _odometrie) /*:
    7e74:	b580      	push	{r7, lr}
    7e76:	b084      	sub	sp, #16
    7e78:	af00      	add	r7, sp, #0
    7e7a:	6078      	str	r0, [r7, #4]
    7e7c:	6039      	str	r1, [r7, #0]
    7e7e:	687b      	ldr	r3, [r7, #4]
    7e80:	f103 0308 	add.w	r3, r3, #8	; 0x8
    7e84:	4618      	mov	r0, r3
    7e86:	f002 fd07 	bl	a898 <_ZN17PIDFilterDistanceC1Ev>
    7e8a:	687b      	ldr	r3, [r7, #4]
    7e8c:	f103 0310 	add.w	r3, r3, #16	; 0x10
    7e90:	4618      	mov	r0, r3
    7e92:	f002 fc81 	bl	a798 <_ZN14PIDFilterAngleC1Ev>
    7e96:	687b      	ldr	r3, [r7, #4]
    7e98:	f103 0318 	add.w	r3, r3, #24	; 0x18
    7e9c:	4618      	mov	r0, r3
    7e9e:	f7fd fd21 	bl	58e4 <_ZN5RouesC1Ev>
    seuil_collision(SEUIL_COLISION),
    buffer_collision(0xffffffff)*/
{
    vitesseLineaire = 0;
    7ea2:	687a      	ldr	r2, [r7, #4]
    7ea4:	4b48      	ldr	r3, [pc, #288]	(7fc8 <_ZN14AsservissementC2EP9Odometrie+0x154>)
    7ea6:	f8c2 30fc 	str.w	r3, [r2, #252]
    vitesseAngulaire = 0;
    7eaa:	687a      	ldr	r2, [r7, #4]
    7eac:	4b46      	ldr	r3, [pc, #280]	(7fc8 <_ZN14AsservissementC2EP9Odometrie+0x154>)
    7eae:	f8c2 3100 	str.w	r3, [r2, #256]
	odometrie = _odometrie;
    7eb2:	687a      	ldr	r2, [r7, #4]
    7eb4:	683b      	ldr	r3, [r7, #0]
    7eb6:	f8c2 30f4 	str.w	r3, [r2, #244]

    activePIDDistance = true;
    7eba:	687a      	ldr	r2, [r7, #4]
    7ebc:	f04f 0301 	mov.w	r3, #1	; 0x1
    7ec0:	f882 3104 	strb.w	r3, [r2, #260]
    activePIDAngle = true;
    7ec4:	687a      	ldr	r2, [r7, #4]
    7ec6:	f04f 0301 	mov.w	r3, #1	; 0x1
    7eca:	f882 3105 	strb.w	r3, [r2, #261]

    resetFixedDuty();
    7ece:	6878      	ldr	r0, [r7, #4]
    7ed0:	f7ff faae 	bl	7430 <_ZN14Asservissement14resetFixedDutyEv>

    linearDutySent = 0;
    7ed4:	687a      	ldr	r2, [r7, #4]
    7ed6:	4b3c      	ldr	r3, [pc, #240]	(7fc8 <_ZN14AsservissementC2EP9Odometrie+0x154>)
    7ed8:	6013      	str	r3, [r2, #0]
    angularDutySent = 0;
    7eda:	687a      	ldr	r2, [r7, #4]
    7edc:	4b3a      	ldr	r3, [pc, #232]	(7fc8 <_ZN14AsservissementC2EP9Odometrie+0x154>)
    7ede:	6053      	str	r3, [r2, #4]
    Asservissement::asservissement = this;
    7ee0:	4a3a      	ldr	r2, [pc, #232]	(7fcc <_ZN14AsservissementC2EP9Odometrie+0x158>)
    7ee2:	687b      	ldr	r3, [r7, #4]
    7ee4:	6013      	str	r3, [r2, #0]
    asserCount = 0;
    7ee6:	687a      	ldr	r2, [r7, #4]
    7ee8:	f04f 0300 	mov.w	r3, #0	; 0x0
    7eec:	f8c2 30f8 	str.w	r3, [r2, #248]

    nombreQuatumParDixiemeDeSeconde = 1000/(NB_VERIFICATION_BLOQUAGE_PAR_SECONDE*MS_BETWEEN_UPDATE);
    7ef0:	687a      	ldr	r2, [r7, #4]
    7ef2:	f04f 0314 	mov.w	r3, #20	; 0x14
    7ef6:	f8a2 304a 	strh.w	r3, [r2, #74]
    obstacleDetecte = false;
    7efa:	687a      	ldr	r2, [r7, #4]
    7efc:	f04f 0300 	mov.w	r3, #0	; 0x0
    7f00:	f882 30ec 	strb.w	r3, [r2, #236]
    nbUpdateDepuisObstacleDetecte = 0;
    7f04:	687a      	ldr	r2, [r7, #4]
    7f06:	f04f 0300 	mov.w	r3, #0	; 0x0
    7f0a:	f8c2 30f0 	str.w	r3, [r2, #240]
    positionPlusAnglePrecedenteX = 0;
    7f0e:	687a      	ldr	r2, [r7, #4]
    7f10:	4b2d      	ldr	r3, [pc, #180]	(7fc8 <_ZN14AsservissementC2EP9Odometrie+0x154>)
    7f12:	63d3      	str	r3, [r2, #60]
    positionPlusAnglePrecedenteY = 0;
    7f14:	687a      	ldr	r2, [r7, #4]
    7f16:	4b2c      	ldr	r3, [pc, #176]	(7fc8 <_ZN14AsservissementC2EP9Odometrie+0x154>)
    7f18:	6413      	str	r3, [r2, #64]
    positionPlusAnglePrecedenteAngle = 0;
    7f1a:	687a      	ldr	r2, [r7, #4]
    7f1c:	4b2a      	ldr	r3, [pc, #168]	(7fc8 <_ZN14AsservissementC2EP9Odometrie+0x154>)
    7f1e:	6453      	str	r3, [r2, #68]

    for(int initTableaux = 0 ; initTableaux < NB_VERIFICATION_BLOQUAGE_PAR_SECONDE ; initTableaux++)
    7f20:	f04f 0300 	mov.w	r3, #0	; 0x0
    7f24:	60fb      	str	r3, [r7, #12]
    7f26:	e027      	b.n	7f78 <_ZN14AsservissementC2EP9Odometrie+0x104>
    {
        deplacementLineaires[initTableaux] = 0;
    7f28:	68fb      	ldr	r3, [r7, #12]
    7f2a:	687a      	ldr	r2, [r7, #4]
    7f2c:	f103 0312 	add.w	r3, r3, #18	; 0x12
    7f30:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7f34:	4413      	add	r3, r2
    7f36:	4a24      	ldr	r2, [pc, #144]	(7fc8 <_ZN14AsservissementC2EP9Odometrie+0x154>)
    7f38:	605a      	str	r2, [r3, #4]
        deplacementAngulaire[initTableaux] = 0;
    7f3a:	68fb      	ldr	r3, [r7, #12]
    7f3c:	687a      	ldr	r2, [r7, #4]
    7f3e:	f103 031c 	add.w	r3, r3, #28	; 0x1c
    7f42:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7f46:	4413      	add	r3, r2
    7f48:	4a1f      	ldr	r2, [pc, #124]	(7fc8 <_ZN14AsservissementC2EP9Odometrie+0x154>)
    7f4a:	605a      	str	r2, [r3, #4]
        accelerationLineaires[initTableaux] = 0;
    7f4c:	68fb      	ldr	r3, [r7, #12]
    7f4e:	687a      	ldr	r2, [r7, #4]
    7f50:	f103 0326 	add.w	r3, r3, #38	; 0x26
    7f54:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7f58:	4413      	add	r3, r2
    7f5a:	4a1b      	ldr	r2, [pc, #108]	(7fc8 <_ZN14AsservissementC2EP9Odometrie+0x154>)
    7f5c:	605a      	str	r2, [r3, #4]
        accelerationAngulaires[initTableaux] = 0;
    7f5e:	68fb      	ldr	r3, [r7, #12]
    7f60:	687a      	ldr	r2, [r7, #4]
    7f62:	f103 0330 	add.w	r3, r3, #48	; 0x30
    7f66:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7f6a:	4413      	add	r3, r2
    7f6c:	4a16      	ldr	r2, [pc, #88]	(7fc8 <_ZN14AsservissementC2EP9Odometrie+0x154>)
    7f6e:	605a      	str	r2, [r3, #4]
    nbUpdateDepuisObstacleDetecte = 0;
    positionPlusAnglePrecedenteX = 0;
    positionPlusAnglePrecedenteY = 0;
    positionPlusAnglePrecedenteAngle = 0;

    for(int initTableaux = 0 ; initTableaux < NB_VERIFICATION_BLOQUAGE_PAR_SECONDE ; initTableaux++)
    7f70:	68fb      	ldr	r3, [r7, #12]
    7f72:	f103 0301 	add.w	r3, r3, #1	; 0x1
    7f76:	60fb      	str	r3, [r7, #12]
    7f78:	68fb      	ldr	r3, [r7, #12]
    7f7a:	2b09      	cmp	r3, #9
    7f7c:	ddd4      	ble.n	7f28 <_ZN14AsservissementC2EP9Odometrie+0xb4>
        accelerationLineaires[initTableaux] = 0;
        accelerationAngulaires[initTableaux] = 0;
    }

#ifdef CAPTEURS
    sensors = Sensors::getSensors();
    7f7e:	f7fd fdb7 	bl	5af0 <_ZN7Sensors10getSensorsEv>
    7f82:	4602      	mov	r2, r0
    7f84:	687b      	ldr	r3, [r7, #4]
    7f86:	639a      	str	r2, [r3, #56]
#endif

#ifdef ROBOTHW  //on définie les interruptions possibles dues à certains ports
    *((uint32_t *)(STK_CTRL_ADDR)) = 0x03; // CLKSOURCE:0 ; TICKINT: 1 ; ENABLE:1
    7f88:	4a11      	ldr	r2, [pc, #68]	(7fd0 <_ZN14AsservissementC2EP9Odometrie+0x15c>)
    7f8a:	f04f 0303 	mov.w	r3, #3	; 0x3
    7f8e:	6013      	str	r3, [r2, #0]
#ifdef STM32F40_41xxx
    *((uint32_t *)(STK_LOAD_ADDR)) = 21000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
#else
    *((uint32_t *)(STK_LOAD_ADDR)) = 9000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
    7f90:	4a10      	ldr	r2, [pc, #64]	(7fd4 <_ZN14AsservissementC2EP9Odometrie+0x160>)
    7f92:	f64a 73c8 	movw	r3, #45000	; 0xafc8
    7f96:	6013      	str	r3, [r2, #0]
    // le micro controlleur tourne à une frequence f (72Mhz ici), la valeur à mettre est (0.001*(f/8))*(temps en ms entre chaque update)
    // voir p190 de la doc

    NVIC_InitTypeDef SysTick_IRQ;

    SysTick_IRQ.NVIC_IRQChannel = SysTick_IRQn;
    7f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7f9c:	723b      	strb	r3, [r7, #8]
    SysTick_IRQ.NVIC_IRQChannelCmd = ENABLE;
    7f9e:	f04f 0301 	mov.w	r3, #1	; 0x1
    7fa2:	72fb      	strb	r3, [r7, #11]
    SysTick_IRQ.NVIC_IRQChannelPreemptionPriority = 0;
    7fa4:	f04f 0300 	mov.w	r3, #0	; 0x0
    7fa8:	727b      	strb	r3, [r7, #9]
    SysTick_IRQ.NVIC_IRQChannelSubPriority = 1;
    7faa:	f04f 0301 	mov.w	r3, #1	; 0x1
    7fae:	72bb      	strb	r3, [r7, #10]
    NVIC_Init(&SysTick_IRQ);
    7fb0:	f107 0308 	add.w	r3, r7, #8	; 0x8
    7fb4:	4618      	mov	r0, r3
    7fb6:	f7f8 f931 	bl	21c <NVIC_Init>
#endif
}
    7fba:	687b      	ldr	r3, [r7, #4]
    7fbc:	4618      	mov	r0, r3
    7fbe:	f107 0710 	add.w	r7, r7, #16	; 0x10
    7fc2:	46bd      	mov	sp, r7
    7fc4:	bd80      	pop	{r7, pc}
    7fc6:	46c0      	nop			(mov r8, r8)
    7fc8:	00000000 	.word	0x00000000
    7fcc:	20000564 	.word	0x20000564
    7fd0:	e000e010 	.word	0xe000e010
    7fd4:	e000e014 	.word	0xe000e014

00007fd8 <_ZN7CommandC2Ev>:
Acceleration Command::acceleration_angulaire = ACCELERATION_ANGULAIRE_MAX; // en radian par nb_ms_between_updates

bool Command::stop = false;
bool Command::limiter = false;

Command::Command()
    7fd8:	b480      	push	{r7}
    7fda:	b083      	sub	sp, #12
    7fdc:	af00      	add	r7, sp, #0
    7fde:	6078      	str	r0, [r7, #4]
    7fe0:	687a      	ldr	r2, [r7, #4]
    7fe2:	4b06      	ldr	r3, [pc, #24]	(7ffc <_ZN7CommandC2Ev+0x24>)
    7fe4:	6013      	str	r3, [r2, #0]
{
    Command::stop = false;
    7fe6:	4a06      	ldr	r2, [pc, #24]	(8000 <_ZN7CommandC2Ev+0x28>)
    7fe8:	f04f 0300 	mov.w	r3, #0	; 0x0
    7fec:	7013      	strb	r3, [r2, #0]
}
    7fee:	687b      	ldr	r3, [r7, #4]
    7ff0:	4618      	mov	r0, r3
    7ff2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7ff6:	46bd      	mov	sp, r7
    7ff8:	bc80      	pop	{r7}
    7ffa:	4770      	bx	lr
    7ffc:	00023e88 	.word	0x00023e88
    8000:	20000570 	.word	0x20000570

00008004 <_ZN7CommandC1Ev>:
Acceleration Command::acceleration_angulaire = ACCELERATION_ANGULAIRE_MAX; // en radian par nb_ms_between_updates

bool Command::stop = false;
bool Command::limiter = false;

Command::Command()
    8004:	b480      	push	{r7}
    8006:	b083      	sub	sp, #12
    8008:	af00      	add	r7, sp, #0
    800a:	6078      	str	r0, [r7, #4]
    800c:	687a      	ldr	r2, [r7, #4]
    800e:	4b06      	ldr	r3, [pc, #24]	(8028 <_ZN7CommandC1Ev+0x24>)
    8010:	6013      	str	r3, [r2, #0]
{
    Command::stop = false;
    8012:	4a06      	ldr	r2, [pc, #24]	(802c <_ZN7CommandC1Ev+0x28>)
    8014:	f04f 0300 	mov.w	r3, #0	; 0x0
    8018:	7013      	strb	r3, [r2, #0]
}
    801a:	687b      	ldr	r3, [r7, #4]
    801c:	4618      	mov	r0, r3
    801e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8022:	46bd      	mov	sp, r7
    8024:	bc80      	pop	{r7}
    8026:	4770      	bx	lr
    8028:	00023e88 	.word	0x00023e88
    802c:	20000570 	.word	0x20000570

00008030 <_ZN7Command7getStopEv>:

Command::~Command()
{
}

bool Command::getStop(void)
    8030:	b480      	push	{r7}
    8032:	af00      	add	r7, sp, #0
{
    return Command::stop;
    8034:	4b02      	ldr	r3, [pc, #8]	(8040 <_ZN7Command7getStopEv+0x10>)
    8036:	781b      	ldrb	r3, [r3, #0]
}
    8038:	4618      	mov	r0, r3
    803a:	46bd      	mov	sp, r7
    803c:	bc80      	pop	{r7}
    803e:	4770      	bx	lr
    8040:	20000570 	.word	0x20000570

00008044 <_ZN7Command11resetSpeedsEv>:

void Command::resetSpeeds()
    8044:	b480      	push	{r7}
    8046:	b083      	sub	sp, #12
    8048:	af00      	add	r7, sp, #0
    804a:	6078      	str	r0, [r7, #4]
{

}
    804c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8050:	46bd      	mov	sp, r7
    8052:	bc80      	pop	{r7}
    8054:	4770      	bx	lr
    8056:	46c0      	nop			(mov r8, r8)

00008058 <_ZN7Command16freinageDUrgenceEb>:

void Command::freinageDUrgence(bool doitFreiner)
    8058:	b480      	push	{r7}
    805a:	b083      	sub	sp, #12
    805c:	af00      	add	r7, sp, #0
    805e:	4603      	mov	r3, r0
    8060:	71fb      	strb	r3, [r7, #7]
{
    Command::stop = doitFreiner;
    8062:	4a04      	ldr	r2, [pc, #16]	(8074 <_ZN7Command16freinageDUrgenceEb+0x1c>)
    8064:	79fb      	ldrb	r3, [r7, #7]
    8066:	7013      	strb	r3, [r2, #0]
}
    8068:	f107 070c 	add.w	r7, r7, #12	; 0xc
    806c:	46bd      	mov	sp, r7
    806e:	bc80      	pop	{r7}
    8070:	4770      	bx	lr
    8072:	46c0      	nop			(mov r8, r8)
    8074:	20000570 	.word	0x20000570

00008078 <_ZNK7Command4finiEv>:

// est ce que la commande a fini ?
bool Command::fini() const
    8078:	b480      	push	{r7}
    807a:	b083      	sub	sp, #12
    807c:	af00      	add	r7, sp, #0
    807e:	6078      	str	r0, [r7, #4]
{
    return false;
    8080:	f04f 0300 	mov.w	r3, #0	; 0x0
}
    8084:	4618      	mov	r0, r3
    8086:	f107 070c 	add.w	r7, r7, #12	; 0xc
    808a:	46bd      	mov	sp, r7
    808c:	bc80      	pop	{r7}
    808e:	4770      	bx	lr

00008090 <_ZN7Command10limitSpeedEb>:

void Command::limitSpeed(bool doitLimiter)
    8090:	b480      	push	{r7}
    8092:	b083      	sub	sp, #12
    8094:	af00      	add	r7, sp, #0
    8096:	4603      	mov	r3, r0
    8098:	71fb      	strb	r3, [r7, #7]
{
    Command::limiter = doitLimiter;
    809a:	4a04      	ldr	r2, [pc, #16]	(80ac <_ZN7Command10limitSpeedEb+0x1c>)
    809c:	79fb      	ldrb	r3, [r7, #7]
    809e:	7013      	strb	r3, [r2, #0]
    //vitesseLinMax = 1;//TODO : mettre une valeur réaliste, ou bien sauvegarder la première valeure et la diviser
}
    80a0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    80a4:	46bd      	mov	sp, r7
    80a6:	bc80      	pop	{r7}
    80a8:	4770      	bx	lr
    80aa:	46c0      	nop			(mov r8, r8)
    80ac:	20000571 	.word	0x20000571

000080b0 <_ZN7Command8getLimitEv>:

bool Command::getLimit(void)
    80b0:	b480      	push	{r7}
    80b2:	af00      	add	r7, sp, #0
{
    return Command::limiter;
    80b4:	4b02      	ldr	r3, [pc, #8]	(80c0 <_ZN7Command8getLimitEv+0x10>)
    80b6:	781b      	ldrb	r3, [r3, #0]
}
    80b8:	4618      	mov	r0, r3
    80ba:	46bd      	mov	sp, r7
    80bc:	bc80      	pop	{r7}
    80be:	4770      	bx	lr
    80c0:	20000571 	.word	0x20000571

000080c4 <_ZN7Command11isLookingAtEff>:
    Position vect = pos - Odometrie::odometrie->getPos().getPosition();

    return (vect.getNorme() < (int) precision);
}

bool Command::isLookingAt(Angle a, float precision)
    80c4:	b580      	push	{r7, lr}
    80c6:	b088      	sub	sp, #32
    80c8:	af00      	add	r7, sp, #0
    80ca:	60f8      	str	r0, [r7, #12]
    80cc:	60b9      	str	r1, [r7, #8]
{
    Angle diff = a - Odometrie::odometrie->getPos().angle;
    80ce:	4b3a      	ldr	r3, [pc, #232]	(81b8 <_ZN7Command11isLookingAtEff+0xf4>)
    80d0:	681a      	ldr	r2, [r3, #0]
    80d2:	f107 0310 	add.w	r3, r7, #16	; 0x10
    80d6:	4618      	mov	r0, r3
    80d8:	4611      	mov	r1, r2
    80da:	f001 fe8d 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    80de:	69bb      	ldr	r3, [r7, #24]
    80e0:	68f8      	ldr	r0, [r7, #12]
    80e2:	4619      	mov	r1, r3
    80e4:	f014 fdf2 	bl	1cccc <__aeabi_fsub>
    80e8:	4603      	mov	r3, r0
    80ea:	61fb      	str	r3, [r7, #28]
    80ec:	e012      	b.n	8114 <_ZN7Command11isLookingAtEff+0x50>

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    80ee:	69f8      	ldr	r0, [r7, #28]
    80f0:	f014 fa84 	bl	1c5fc <__aeabi_f2d>
    80f4:	4602      	mov	r2, r0
    80f6:	460b      	mov	r3, r1
    80f8:	4610      	mov	r0, r2
    80fa:	4619      	mov	r1, r3
    80fc:	a228      	add	r2, pc, #160	(adr r2, 81a0 <_ZN7Command11isLookingAtEff+0xdc>)
    80fe:	ca0c      	ldmia	r2!, {r2, r3}
    8100:	f014 f91c 	bl	1c33c <__aeabi_dsub>
    8104:	4602      	mov	r2, r0
    8106:	460b      	mov	r3, r1
    8108:	4610      	mov	r0, r2
    810a:	4619      	mov	r1, r3
    810c:	f014 fd8a 	bl	1cc24 <__aeabi_d2f>
    8110:	4603      	mov	r3, r0
    8112:	61fb      	str	r3, [r7, #28]

bool Command::isLookingAt(Angle a, float precision)
{
    Angle diff = a - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
    8114:	69f8      	ldr	r0, [r7, #28]
    8116:	f014 fa71 	bl	1c5fc <__aeabi_f2d>
    811a:	4602      	mov	r2, r0
    811c:	460b      	mov	r3, r1
    811e:	4610      	mov	r0, r2
    8120:	4619      	mov	r1, r3
    8122:	a221      	add	r2, pc, #132	(adr r2, 81a8 <_ZN7Command11isLookingAtEff+0xe4>)
    8124:	ca0c      	ldmia	r2!, {r2, r3}
    8126:	f014 fd41 	bl	1cbac <__aeabi_dcmpge>
    812a:	4603      	mov	r3, r0
    812c:	2b00      	cmp	r3, #0
    812e:	d1de      	bne.n	80ee <_ZN7Command11isLookingAtEff+0x2a>
    8130:	e012      	b.n	8158 <_ZN7Command11isLookingAtEff+0x94>
        diff -= 2.*M_PI;
    while(diff < -M_PI)
        diff += 2.*M_PI;
    8132:	69f8      	ldr	r0, [r7, #28]
    8134:	f014 fa62 	bl	1c5fc <__aeabi_f2d>
    8138:	4602      	mov	r2, r0
    813a:	460b      	mov	r3, r1
    813c:	4610      	mov	r0, r2
    813e:	4619      	mov	r1, r3
    8140:	a217      	add	r2, pc, #92	(adr r2, 81a0 <_ZN7Command11isLookingAtEff+0xdc>)
    8142:	ca0c      	ldmia	r2!, {r2, r3}
    8144:	f014 f8fc 	bl	1c340 <__adddf3>
    8148:	4602      	mov	r2, r0
    814a:	460b      	mov	r3, r1
    814c:	4610      	mov	r0, r2
    814e:	4619      	mov	r1, r3
    8150:	f014 fd68 	bl	1cc24 <__aeabi_d2f>
    8154:	4603      	mov	r3, r0
    8156:	61fb      	str	r3, [r7, #28]
{
    Angle diff = a - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    while(diff < -M_PI)
    8158:	69f8      	ldr	r0, [r7, #28]
    815a:	f014 fa4f 	bl	1c5fc <__aeabi_f2d>
    815e:	4602      	mov	r2, r0
    8160:	460b      	mov	r3, r1
    8162:	4610      	mov	r0, r2
    8164:	4619      	mov	r1, r3
    8166:	a212      	add	r2, pc, #72	(adr r2, 81b0 <_ZN7Command11isLookingAtEff+0xec>)
    8168:	ca0c      	ldmia	r2!, {r2, r3}
    816a:	f014 fd0b 	bl	1cb84 <__aeabi_dcmplt>
    816e:	4603      	mov	r3, r0
    8170:	2b00      	cmp	r3, #0
    8172:	d1de      	bne.n	8132 <_ZN7Command11isLookingAtEff+0x6e>
        diff += 2.*M_PI;

    return (fabs(diff) < precision);
    8174:	69fb      	ldr	r3, [r7, #28]
    8176:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    817a:	f04f 0300 	mov.w	r3, #0	; 0x0
    817e:	71fb      	strb	r3, [r7, #7]
    8180:	4610      	mov	r0, r2
    8182:	68b9      	ldr	r1, [r7, #8]
    8184:	f015 f848 	bl	1d218 <__aeabi_fcmplt>
    8188:	4603      	mov	r3, r0
    818a:	2b00      	cmp	r3, #0
    818c:	d002      	beq.n	8194 <_ZN7Command11isLookingAtEff+0xd0>
    818e:	f04f 0301 	mov.w	r3, #1	; 0x1
    8192:	71fb      	strb	r3, [r7, #7]
    8194:	79fb      	ldrb	r3, [r7, #7]
}
    8196:	4618      	mov	r0, r3
    8198:	f107 0720 	add.w	r7, r7, #32	; 0x20
    819c:	46bd      	mov	sp, r7
    819e:	bd80      	pop	{r7, pc}
    81a0:	54442d18 	.word	0x54442d18
    81a4:	401921fb 	.word	0x401921fb
    81a8:	54442d18 	.word	0x54442d18
    81ac:	400921fb 	.word	0x400921fb
    81b0:	54442d18 	.word	0x54442d18
    81b4:	c00921fb 	.word	0xc00921fb
    81b8:	20000574 	.word	0x20000574

000081bc <_ZN7Command11isLookingAtE8Positionf>:

bool Command::isLookingAt(Position pos, float precision)
    81bc:	b5b0      	push	{r4, r5, r7, lr}
    81be:	b090      	sub	sp, #64
    81c0:	af00      	add	r7, sp, #0
    81c2:	f107 0308 	add.w	r3, r7, #8	; 0x8
    81c6:	e883 0003 	stmia.w	r3, {r0, r1}
    81ca:	607a      	str	r2, [r7, #4]
{
    Position delta = pos - Odometrie::odometrie->getPos().getPosition();
    81cc:	4b58      	ldr	r3, [pc, #352]	(8330 <_ZN7Command11isLookingAtE8Positionf+0x174>)
    81ce:	681a      	ldr	r2, [r3, #0]
    81d0:	f107 0320 	add.w	r3, r7, #32	; 0x20
    81d4:	4618      	mov	r0, r3
    81d6:	4611      	mov	r1, r2
    81d8:	f001 fe0e 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    81dc:	f107 0318 	add.w	r3, r7, #24	; 0x18
    81e0:	f107 0220 	add.w	r2, r7, #32	; 0x20
    81e4:	4618      	mov	r0, r3
    81e6:	4611      	mov	r1, r2
    81e8:	f007 f840 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
    81ec:	f107 0310 	add.w	r3, r7, #16	; 0x10
    81f0:	f107 0208 	add.w	r2, r7, #8	; 0x8
    81f4:	f107 0c18 	add.w	ip, r7, #24	; 0x18
    81f8:	4618      	mov	r0, r3
    81fa:	4611      	mov	r1, r2
    81fc:	4662      	mov	r2, ip
    81fe:	f006 fe67 	bl	eed0 <_ZNK8PositionmiERKS_>
    Angle angleVise = atan2(delta.getY(),delta.getX());
    8202:	f107 0310 	add.w	r3, r7, #16	; 0x10
    8206:	4618      	mov	r0, r3
    8208:	f006 fe14 	bl	ee34 <_ZNK8Position4getYEv>
    820c:	4603      	mov	r3, r0
    820e:	4618      	mov	r0, r3
    8210:	f014 f9f4 	bl	1c5fc <__aeabi_f2d>
    8214:	4604      	mov	r4, r0
    8216:	460d      	mov	r5, r1
    8218:	f107 0310 	add.w	r3, r7, #16	; 0x10
    821c:	4618      	mov	r0, r3
    821e:	f006 fdfd 	bl	ee1c <_ZNK8Position4getXEv>
    8222:	4603      	mov	r3, r0
    8224:	4618      	mov	r0, r3
    8226:	f014 f9e9 	bl	1c5fc <__aeabi_f2d>
    822a:	4602      	mov	r2, r0
    822c:	460b      	mov	r3, r1
    822e:	4620      	mov	r0, r4
    8230:	4629      	mov	r1, r5
    8232:	f018 fbc9 	bl	209c8 <atan2>
    8236:	4602      	mov	r2, r0
    8238:	460b      	mov	r3, r1
    823a:	4610      	mov	r0, r2
    823c:	4619      	mov	r1, r3
    823e:	f014 fcf1 	bl	1cc24 <__aeabi_d2f>
    8242:	4603      	mov	r3, r0
    8244:	63bb      	str	r3, [r7, #56]
    Angle diff = angleVise - Odometrie::odometrie->getPos().angle;
    8246:	4b3a      	ldr	r3, [pc, #232]	(8330 <_ZN7Command11isLookingAtE8Positionf+0x174>)
    8248:	681a      	ldr	r2, [r3, #0]
    824a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    824e:	4618      	mov	r0, r3
    8250:	4611      	mov	r1, r2
    8252:	f001 fdd1 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    8256:	6b7b      	ldr	r3, [r7, #52]
    8258:	6bb8      	ldr	r0, [r7, #56]
    825a:	4619      	mov	r1, r3
    825c:	f014 fd36 	bl	1cccc <__aeabi_fsub>
    8260:	4603      	mov	r3, r0
    8262:	63fb      	str	r3, [r7, #60]
    8264:	e012      	b.n	828c <_ZN7Command11isLookingAtE8Positionf+0xd0>

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    8266:	6bf8      	ldr	r0, [r7, #60]
    8268:	f014 f9c8 	bl	1c5fc <__aeabi_f2d>
    826c:	4602      	mov	r2, r0
    826e:	460b      	mov	r3, r1
    8270:	4610      	mov	r0, r2
    8272:	4619      	mov	r1, r3
    8274:	a228      	add	r2, pc, #160	(adr r2, 8318 <_ZN7Command11isLookingAtE8Positionf+0x15c>)
    8276:	ca0c      	ldmia	r2!, {r2, r3}
    8278:	f014 f860 	bl	1c33c <__aeabi_dsub>
    827c:	4602      	mov	r2, r0
    827e:	460b      	mov	r3, r1
    8280:	4610      	mov	r0, r2
    8282:	4619      	mov	r1, r3
    8284:	f014 fcce 	bl	1cc24 <__aeabi_d2f>
    8288:	4603      	mov	r3, r0
    828a:	63fb      	str	r3, [r7, #60]
{
    Position delta = pos - Odometrie::odometrie->getPos().getPosition();
    Angle angleVise = atan2(delta.getY(),delta.getX());
    Angle diff = angleVise - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
    828c:	6bf8      	ldr	r0, [r7, #60]
    828e:	f014 f9b5 	bl	1c5fc <__aeabi_f2d>
    8292:	4602      	mov	r2, r0
    8294:	460b      	mov	r3, r1
    8296:	4610      	mov	r0, r2
    8298:	4619      	mov	r1, r3
    829a:	a221      	add	r2, pc, #132	(adr r2, 8320 <_ZN7Command11isLookingAtE8Positionf+0x164>)
    829c:	ca0c      	ldmia	r2!, {r2, r3}
    829e:	f014 fc85 	bl	1cbac <__aeabi_dcmpge>
    82a2:	4603      	mov	r3, r0
    82a4:	2b00      	cmp	r3, #0
    82a6:	d1de      	bne.n	8266 <_ZN7Command11isLookingAtE8Positionf+0xaa>
    82a8:	e012      	b.n	82d0 <_ZN7Command11isLookingAtE8Positionf+0x114>
        diff -= 2.*M_PI;
    while(diff < -M_PI)
        diff += 2.*M_PI;
    82aa:	6bf8      	ldr	r0, [r7, #60]
    82ac:	f014 f9a6 	bl	1c5fc <__aeabi_f2d>
    82b0:	4602      	mov	r2, r0
    82b2:	460b      	mov	r3, r1
    82b4:	4610      	mov	r0, r2
    82b6:	4619      	mov	r1, r3
    82b8:	a217      	add	r2, pc, #92	(adr r2, 8318 <_ZN7Command11isLookingAtE8Positionf+0x15c>)
    82ba:	ca0c      	ldmia	r2!, {r2, r3}
    82bc:	f014 f840 	bl	1c340 <__adddf3>
    82c0:	4602      	mov	r2, r0
    82c2:	460b      	mov	r3, r1
    82c4:	4610      	mov	r0, r2
    82c6:	4619      	mov	r1, r3
    82c8:	f014 fcac 	bl	1cc24 <__aeabi_d2f>
    82cc:	4603      	mov	r3, r0
    82ce:	63fb      	str	r3, [r7, #60]
    Angle angleVise = atan2(delta.getY(),delta.getX());
    Angle diff = angleVise - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    while(diff < -M_PI)
    82d0:	6bf8      	ldr	r0, [r7, #60]
    82d2:	f014 f993 	bl	1c5fc <__aeabi_f2d>
    82d6:	4602      	mov	r2, r0
    82d8:	460b      	mov	r3, r1
    82da:	4610      	mov	r0, r2
    82dc:	4619      	mov	r1, r3
    82de:	a212      	add	r2, pc, #72	(adr r2, 8328 <_ZN7Command11isLookingAtE8Positionf+0x16c>)
    82e0:	ca0c      	ldmia	r2!, {r2, r3}
    82e2:	f014 fc4f 	bl	1cb84 <__aeabi_dcmplt>
    82e6:	4603      	mov	r3, r0
    82e8:	2b00      	cmp	r3, #0
    82ea:	d1de      	bne.n	82aa <_ZN7Command11isLookingAtE8Positionf+0xee>
        diff += 2.*M_PI;

    return (fabs(diff) < precision);
    82ec:	6bfb      	ldr	r3, [r7, #60]
    82ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    82f2:	f04f 0300 	mov.w	r3, #0	; 0x0
    82f6:	70fb      	strb	r3, [r7, #3]
    82f8:	4610      	mov	r0, r2
    82fa:	6879      	ldr	r1, [r7, #4]
    82fc:	f014 ff8c 	bl	1d218 <__aeabi_fcmplt>
    8300:	4603      	mov	r3, r0
    8302:	2b00      	cmp	r3, #0
    8304:	d002      	beq.n	830c <_ZN7Command11isLookingAtE8Positionf+0x150>
    8306:	f04f 0301 	mov.w	r3, #1	; 0x1
    830a:	70fb      	strb	r3, [r7, #3]
    830c:	78fb      	ldrb	r3, [r7, #3]
}
    830e:	4618      	mov	r0, r3
    8310:	f107 0740 	add.w	r7, r7, #64	; 0x40
    8314:	46bd      	mov	sp, r7
    8316:	bdb0      	pop	{r4, r5, r7, pc}
    8318:	54442d18 	.word	0x54442d18
    831c:	401921fb 	.word	0x401921fb
    8320:	54442d18 	.word	0x54442d18
    8324:	400921fb 	.word	0x400921fb
    8328:	54442d18 	.word	0x54442d18
    832c:	c00921fb 	.word	0xc00921fb
    8330:	20000574 	.word	0x20000574

00008334 <_ZN7Command6isNearE8Positionf>:
bool Command::getLimit(void)
{
    return Command::limiter;
}

bool Command::isNear(Position pos, float precision)
    8334:	b590      	push	{r4, r7, lr}
    8336:	b08d      	sub	sp, #52
    8338:	af00      	add	r7, sp, #0
    833a:	f107 0308 	add.w	r3, r7, #8	; 0x8
    833e:	e883 0003 	stmia.w	r3, {r0, r1}
    8342:	607a      	str	r2, [r7, #4]
{
    Position vect = pos - Odometrie::odometrie->getPos().getPosition();
    8344:	4b1d      	ldr	r3, [pc, #116]	(83bc <_ZN7Command6isNearE8Positionf+0x88>)
    8346:	681a      	ldr	r2, [r3, #0]
    8348:	f107 0324 	add.w	r3, r7, #36	; 0x24
    834c:	4618      	mov	r0, r3
    834e:	4611      	mov	r1, r2
    8350:	f001 fd52 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    8354:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    8358:	f107 0224 	add.w	r2, r7, #36	; 0x24
    835c:	4618      	mov	r0, r3
    835e:	4611      	mov	r1, r2
    8360:	f006 ff84 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
    8364:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8368:	f107 0208 	add.w	r2, r7, #8	; 0x8
    836c:	f107 0c1c 	add.w	ip, r7, #28	; 0x1c
    8370:	4618      	mov	r0, r3
    8372:	4611      	mov	r1, r2
    8374:	4662      	mov	r2, ip
    8376:	f006 fdab 	bl	eed0 <_ZNK8PositionmiERKS_>

    return (vect.getNorme() < (int) precision);
    837a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    837e:	4618      	mov	r0, r3
    8380:	f006 feb4 	bl	f0ec <_ZNK8Position8getNormeEv>
    8384:	4604      	mov	r4, r0
    8386:	6878      	ldr	r0, [r7, #4]
    8388:	f014 ff6e 	bl	1d268 <__aeabi_f2iz>
    838c:	4603      	mov	r3, r0
    838e:	4618      	mov	r0, r3
    8390:	f014 fd52 	bl	1ce38 <__aeabi_i2f>
    8394:	4602      	mov	r2, r0
    8396:	f04f 0300 	mov.w	r3, #0	; 0x0
    839a:	70fb      	strb	r3, [r7, #3]
    839c:	4620      	mov	r0, r4
    839e:	4611      	mov	r1, r2
    83a0:	f014 ff3a 	bl	1d218 <__aeabi_fcmplt>
    83a4:	4603      	mov	r3, r0
    83a6:	2b00      	cmp	r3, #0
    83a8:	d002      	beq.n	83b0 <_ZN7Command6isNearE8Positionf+0x7c>
    83aa:	f04f 0301 	mov.w	r3, #1	; 0x1
    83ae:	70fb      	strb	r3, [r7, #3]
    83b0:	78fb      	ldrb	r3, [r7, #3]
}
    83b2:	4618      	mov	r0, r3
    83b4:	f107 0734 	add.w	r7, r7, #52	; 0x34
    83b8:	46bd      	mov	sp, r7
    83ba:	bd90      	pop	{r4, r7, pc}
    83bc:	20000574 	.word	0x20000574

000083c0 <_ZN7CommandD0Ev>:
Command::Command()
{
    Command::stop = false;
}

Command::~Command()
    83c0:	b580      	push	{r7, lr}
    83c2:	b082      	sub	sp, #8
    83c4:	af00      	add	r7, sp, #0
    83c6:	6078      	str	r0, [r7, #4]
    83c8:	687a      	ldr	r2, [r7, #4]
    83ca:	4b08      	ldr	r3, [pc, #32]	(83ec <_ZN7CommandD0Ev+0x2c>)
    83cc:	6013      	str	r3, [r2, #0]
{
}
    83ce:	f04f 0301 	mov.w	r3, #1	; 0x1
    83d2:	b2db      	uxtb	r3, r3
    83d4:	2b00      	cmp	r3, #0
    83d6:	d002      	beq.n	83de <_ZN7CommandD0Ev+0x1e>
    83d8:	6878      	ldr	r0, [r7, #4]
    83da:	f006 fc4b 	bl	ec74 <_ZdlPv>
    83de:	687b      	ldr	r3, [r7, #4]
    83e0:	4618      	mov	r0, r3
    83e2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    83e6:	46bd      	mov	sp, r7
    83e8:	bd80      	pop	{r7, pc}
    83ea:	46c0      	nop			(mov r8, r8)
    83ec:	00023e88 	.word	0x00023e88

000083f0 <_ZN7CommandD1Ev>:
Command::Command()
{
    Command::stop = false;
}

Command::~Command()
    83f0:	b580      	push	{r7, lr}
    83f2:	b082      	sub	sp, #8
    83f4:	af00      	add	r7, sp, #0
    83f6:	6078      	str	r0, [r7, #4]
    83f8:	687a      	ldr	r2, [r7, #4]
    83fa:	4b08      	ldr	r3, [pc, #32]	(841c <_ZN7CommandD1Ev+0x2c>)
    83fc:	6013      	str	r3, [r2, #0]
{
}
    83fe:	f04f 0300 	mov.w	r3, #0	; 0x0
    8402:	b2db      	uxtb	r3, r3
    8404:	2b00      	cmp	r3, #0
    8406:	d002      	beq.n	840e <_ZN7CommandD1Ev+0x1e>
    8408:	6878      	ldr	r0, [r7, #4]
    840a:	f006 fc33 	bl	ec74 <_ZdlPv>
    840e:	687b      	ldr	r3, [r7, #4]
    8410:	4618      	mov	r0, r3
    8412:	f107 0708 	add.w	r7, r7, #8	; 0x8
    8416:	46bd      	mov	sp, r7
    8418:	bd80      	pop	{r7, pc}
    841a:	46c0      	nop			(mov r8, r8)
    841c:	00023e88 	.word	0x00023e88

00008420 <_ZN7CommandD2Ev>:
Command::Command()
{
    Command::stop = false;
}

Command::~Command()
    8420:	b580      	push	{r7, lr}
    8422:	b082      	sub	sp, #8
    8424:	af00      	add	r7, sp, #0
    8426:	6078      	str	r0, [r7, #4]
    8428:	687a      	ldr	r2, [r7, #4]
    842a:	4b08      	ldr	r3, [pc, #32]	(844c <_ZN7CommandD2Ev+0x2c>)
    842c:	6013      	str	r3, [r2, #0]
{
}
    842e:	f04f 0300 	mov.w	r3, #0	; 0x0
    8432:	b2db      	uxtb	r3, r3
    8434:	2b00      	cmp	r3, #0
    8436:	d002      	beq.n	843e <_ZN7CommandD2Ev+0x1e>
    8438:	6878      	ldr	r0, [r7, #4]
    843a:	f006 fc1b 	bl	ec74 <_ZdlPv>
    843e:	687b      	ldr	r3, [r7, #4]
    8440:	4618      	mov	r0, r3
    8442:	f107 0708 	add.w	r7, r7, #8	; 0x8
    8446:	46bd      	mov	sp, r7
    8448:	bd80      	pop	{r7, pc}
    844a:	46c0      	nop			(mov r8, r8)
    844c:	00023e88 	.word	0x00023e88

00008450 <_Z9diffAngleff>:

#ifndef abs
#define abs(x) fabs(x)
#endif

float diffAngle(float a, float b)
    8450:	b580      	push	{r7, lr}
    8452:	b084      	sub	sp, #16
    8454:	af00      	add	r7, sp, #0
    8456:	6078      	str	r0, [r7, #4]
    8458:	6039      	str	r1, [r7, #0]
{
    float t = a-b;
    845a:	6878      	ldr	r0, [r7, #4]
    845c:	6839      	ldr	r1, [r7, #0]
    845e:	f014 fc35 	bl	1cccc <__aeabi_fsub>
    8462:	4603      	mov	r3, r0
    8464:	60fb      	str	r3, [r7, #12]
    8466:	e012      	b.n	848e <_Z9diffAngleff+0x3e>
    while (t > M_PI)
    {
        t -= 2*M_PI;
    8468:	68f8      	ldr	r0, [r7, #12]
    846a:	f014 f8c7 	bl	1c5fc <__aeabi_f2d>
    846e:	4602      	mov	r2, r0
    8470:	460b      	mov	r3, r1
    8472:	4610      	mov	r0, r2
    8474:	4619      	mov	r1, r3
    8476:	a222      	add	r2, pc, #136	(adr r2, 8500 <_Z9diffAngleff+0xb0>)
    8478:	ca0c      	ldmia	r2!, {r2, r3}
    847a:	f013 ff5f 	bl	1c33c <__aeabi_dsub>
    847e:	4602      	mov	r2, r0
    8480:	460b      	mov	r3, r1
    8482:	4610      	mov	r0, r2
    8484:	4619      	mov	r1, r3
    8486:	f014 fbcd 	bl	1cc24 <__aeabi_d2f>
    848a:	4603      	mov	r3, r0
    848c:	60fb      	str	r3, [r7, #12]
#endif

float diffAngle(float a, float b)
{
    float t = a-b;
    while (t > M_PI)
    848e:	68f8      	ldr	r0, [r7, #12]
    8490:	f014 f8b4 	bl	1c5fc <__aeabi_f2d>
    8494:	4602      	mov	r2, r0
    8496:	460b      	mov	r3, r1
    8498:	4610      	mov	r0, r2
    849a:	4619      	mov	r1, r3
    849c:	a21a      	add	r2, pc, #104	(adr r2, 8508 <_Z9diffAngleff+0xb8>)
    849e:	ca0c      	ldmia	r2!, {r2, r3}
    84a0:	f014 fb8e 	bl	1cbc0 <__aeabi_dcmpgt>
    84a4:	4603      	mov	r3, r0
    84a6:	2b00      	cmp	r3, #0
    84a8:	d1de      	bne.n	8468 <_Z9diffAngleff+0x18>
    84aa:	e012      	b.n	84d2 <_Z9diffAngleff+0x82>
    {
        t -= 2*M_PI;
    }
    while (t < -M_PI)
    {
        t += 2*M_PI;
    84ac:	68f8      	ldr	r0, [r7, #12]
    84ae:	f014 f8a5 	bl	1c5fc <__aeabi_f2d>
    84b2:	4602      	mov	r2, r0
    84b4:	460b      	mov	r3, r1
    84b6:	4610      	mov	r0, r2
    84b8:	4619      	mov	r1, r3
    84ba:	a211      	add	r2, pc, #68	(adr r2, 8500 <_Z9diffAngleff+0xb0>)
    84bc:	ca0c      	ldmia	r2!, {r2, r3}
    84be:	f013 ff3f 	bl	1c340 <__adddf3>
    84c2:	4602      	mov	r2, r0
    84c4:	460b      	mov	r3, r1
    84c6:	4610      	mov	r0, r2
    84c8:	4619      	mov	r1, r3
    84ca:	f014 fbab 	bl	1cc24 <__aeabi_d2f>
    84ce:	4603      	mov	r3, r0
    84d0:	60fb      	str	r3, [r7, #12]
    float t = a-b;
    while (t > M_PI)
    {
        t -= 2*M_PI;
    }
    while (t < -M_PI)
    84d2:	68f8      	ldr	r0, [r7, #12]
    84d4:	f014 f892 	bl	1c5fc <__aeabi_f2d>
    84d8:	4602      	mov	r2, r0
    84da:	460b      	mov	r3, r1
    84dc:	4610      	mov	r0, r2
    84de:	4619      	mov	r1, r3
    84e0:	a20b      	add	r2, pc, #44	(adr r2, 8510 <_Z9diffAngleff+0xc0>)
    84e2:	ca0c      	ldmia	r2!, {r2, r3}
    84e4:	f014 fb4e 	bl	1cb84 <__aeabi_dcmplt>
    84e8:	4603      	mov	r3, r0
    84ea:	2b00      	cmp	r3, #0
    84ec:	d1de      	bne.n	84ac <_Z9diffAngleff+0x5c>
    {
        t += 2*M_PI;
    }
    return t;
    84ee:	68fb      	ldr	r3, [r7, #12]
}
    84f0:	4618      	mov	r0, r3
    84f2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    84f6:	46bd      	mov	sp, r7
    84f8:	bd80      	pop	{r7, pc}
    84fa:	46c0      	nop			(mov r8, r8)
    84fc:	46c0      	nop			(mov r8, r8)
    84fe:	46c0      	nop			(mov r8, r8)
    8500:	54442d18 	.word	0x54442d18
    8504:	401921fb 	.word	0x401921fb
    8508:	54442d18 	.word	0x54442d18
    850c:	400921fb 	.word	0x400921fb
    8510:	54442d18 	.word	0x54442d18
    8514:	c00921fb 	.word	0xc00921fb

00008518 <_ZN18CommandAllerEnArcA14getLinearSpeedEv>:
        linSpeed = rVise*angSpeed;*/


}

Vitesse CommandAllerEnArcA::getLinearSpeed()
    8518:	b480      	push	{r7}
    851a:	b083      	sub	sp, #12
    851c:	af00      	add	r7, sp, #0
    851e:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    8520:	687b      	ldr	r3, [r7, #4]
    8522:	695b      	ldr	r3, [r3, #20]
}
    8524:	4618      	mov	r0, r3
    8526:	f107 070c 	add.w	r7, r7, #12	; 0xc
    852a:	46bd      	mov	sp, r7
    852c:	bc80      	pop	{r7}
    852e:	4770      	bx	lr

00008530 <_ZN18CommandAllerEnArcA15getAngularSpeedEv>:

Angle CommandAllerEnArcA::getAngularSpeed()
    8530:	b480      	push	{r7}
    8532:	b083      	sub	sp, #12
    8534:	af00      	add	r7, sp, #0
    8536:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    8538:	687b      	ldr	r3, [r7, #4]
    853a:	699b      	ldr	r3, [r3, #24]
}
    853c:	4618      	mov	r0, r3
    853e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8542:	46bd      	mov	sp, r7
    8544:	bc80      	pop	{r7}
    8546:	4770      	bx	lr

00008548 <_ZNK18CommandAllerEnArcA4finiEv>:

// est ce que la commande a fini ?
bool CommandAllerEnArcA::fini() const
    8548:	b480      	push	{r7}
    854a:	b083      	sub	sp, #12
    854c:	af00      	add	r7, sp, #0
    854e:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    8550:	687b      	ldr	r3, [r7, #4]
    8552:	f893 3028 	ldrb.w	r3, [r3, #40]
}
    8556:	4618      	mov	r0, r3
    8558:	f107 070c 	add.w	r7, r7, #12	; 0xc
    855c:	46bd      	mov	sp, r7
    855e:	bc80      	pop	{r7}
    8560:	4770      	bx	lr
    8562:	46c0      	nop			(mov r8, r8)

00008564 <_ZN13CommandAllerA14getLinearSpeedEv>:
{
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
}

Vitesse CommandAllerA::getLinearSpeed()
    8564:	b480      	push	{r7}
    8566:	b083      	sub	sp, #12
    8568:	af00      	add	r7, sp, #0
    856a:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    856c:	687b      	ldr	r3, [r7, #4]
    856e:	699b      	ldr	r3, [r3, #24]
}
    8570:	4618      	mov	r0, r3
    8572:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8576:	46bd      	mov	sp, r7
    8578:	bc80      	pop	{r7}
    857a:	4770      	bx	lr

0000857c <_ZN13CommandAllerA15getAngularSpeedEv>:

Angle CommandAllerA::getAngularSpeed()
    857c:	b480      	push	{r7}
    857e:	b083      	sub	sp, #12
    8580:	af00      	add	r7, sp, #0
    8582:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    8584:	687b      	ldr	r3, [r7, #4]
    8586:	69db      	ldr	r3, [r3, #28]
}
    8588:	4618      	mov	r0, r3
    858a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    858e:	46bd      	mov	sp, r7
    8590:	bc80      	pop	{r7}
    8592:	4770      	bx	lr

00008594 <_ZNK13CommandAllerA4finiEv>:

bool CommandAllerA::fini() const
    8594:	b480      	push	{r7}
    8596:	b083      	sub	sp, #12
    8598:	af00      	add	r7, sp, #0
    859a:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    859c:	687b      	ldr	r3, [r7, #4]
    859e:	f893 3028 	ldrb.w	r3, [r3, #40]
}
    85a2:	4618      	mov	r0, r3
    85a4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    85a8:	46bd      	mov	sp, r7
    85aa:	bc80      	pop	{r7}
    85ac:	4770      	bx	lr
    85ae:	46c0      	nop			(mov r8, r8)

000085b0 <_ZN18CommandTournerVers14getLinearSpeedEv>:
            angSpeed = -sqrt(-2.0f*diff*accAngMax);
    }*/

}

Vitesse CommandTournerVers::getLinearSpeed()
    85b0:	b480      	push	{r7}
    85b2:	b083      	sub	sp, #12
    85b4:	af00      	add	r7, sp, #0
    85b6:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    85b8:	4b03      	ldr	r3, [pc, #12]	(85c8 <_ZN18CommandTournerVers14getLinearSpeedEv+0x18>)
}
    85ba:	4618      	mov	r0, r3
    85bc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    85c0:	46bd      	mov	sp, r7
    85c2:	bc80      	pop	{r7}
    85c4:	4770      	bx	lr
    85c6:	46c0      	nop			(mov r8, r8)
    85c8:	00000000 	.word	0x00000000

000085cc <_ZN18CommandTournerVers15getAngularSpeedEv>:

Angle CommandTournerVers::getAngularSpeed()
    85cc:	b480      	push	{r7}
    85ce:	b083      	sub	sp, #12
    85d0:	af00      	add	r7, sp, #0
    85d2:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    85d4:	687b      	ldr	r3, [r7, #4]
    85d6:	68db      	ldr	r3, [r3, #12]
}
    85d8:	4618      	mov	r0, r3
    85da:	f107 070c 	add.w	r7, r7, #12	; 0xc
    85de:	46bd      	mov	sp, r7
    85e0:	bc80      	pop	{r7}
    85e2:	4770      	bx	lr

000085e4 <_ZNK18CommandTournerVers4finiEv>:

bool CommandTournerVers::fini() const
    85e4:	b480      	push	{r7}
    85e6:	b083      	sub	sp, #12
    85e8:	af00      	add	r7, sp, #0
    85ea:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    85ec:	687b      	ldr	r3, [r7, #4]
    85ee:	7d1b      	ldrb	r3, [r3, #20]
}
    85f0:	4618      	mov	r0, r3
    85f2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    85f6:	46bd      	mov	sp, r7
    85f8:	bc80      	pop	{r7}
    85fa:	4770      	bx	lr

000085fc <_ZN13CommandVirage14getLinearSpeedEv>:

    // calcul de la vitesse angulaire
    angSpeed = linSpeed/rayonCourbure;
}

Vitesse CommandVirage::getLinearSpeed()
    85fc:	b480      	push	{r7}
    85fe:	b083      	sub	sp, #12
    8600:	af00      	add	r7, sp, #0
    8602:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    8604:	687b      	ldr	r3, [r7, #4]
    8606:	689b      	ldr	r3, [r3, #8]
}
    8608:	4618      	mov	r0, r3
    860a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    860e:	46bd      	mov	sp, r7
    8610:	bc80      	pop	{r7}
    8612:	4770      	bx	lr

00008614 <_ZN13CommandVirage15getAngularSpeedEv>:

Angle CommandVirage::getAngularSpeed()
    8614:	b480      	push	{r7}
    8616:	b083      	sub	sp, #12
    8618:	af00      	add	r7, sp, #0
    861a:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    861c:	687b      	ldr	r3, [r7, #4]
    861e:	68db      	ldr	r3, [r3, #12]
}
    8620:	4618      	mov	r0, r3
    8622:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8626:	46bd      	mov	sp, r7
    8628:	bc80      	pop	{r7}
    862a:	4770      	bx	lr

0000862c <_ZNK13CommandVirage4finiEv>:

// est ce que la commande a fini ?
bool CommandVirage::fini() const
    862c:	b480      	push	{r7}
    862e:	b083      	sub	sp, #12
    8630:	af00      	add	r7, sp, #0
    8632:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    8634:	687b      	ldr	r3, [r7, #4]
    8636:	7f1b      	ldrb	r3, [r3, #28]
}
    8638:	4618      	mov	r0, r3
    863a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    863e:	46bd      	mov	sp, r7
    8640:	bc80      	pop	{r7}
    8642:	4770      	bx	lr

00008644 <_ZN15CommandAttendre6updateEv>:
CommandAttendre::CommandAttendre(int nbUpdates)
    : Command(), compte(nbUpdates)
{
}

void CommandAttendre::update()
    8644:	b480      	push	{r7}
    8646:	b083      	sub	sp, #12
    8648:	af00      	add	r7, sp, #0
    864a:	6078      	str	r0, [r7, #4]
{
    compte--;
    864c:	687b      	ldr	r3, [r7, #4]
    864e:	685b      	ldr	r3, [r3, #4]
    8650:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    8654:	687b      	ldr	r3, [r7, #4]
    8656:	605a      	str	r2, [r3, #4]
}
    8658:	f107 070c 	add.w	r7, r7, #12	; 0xc
    865c:	46bd      	mov	sp, r7
    865e:	bc80      	pop	{r7}
    8660:	4770      	bx	lr
    8662:	46c0      	nop			(mov r8, r8)

00008664 <_ZN15CommandAttendre14getLinearSpeedEv>:

Vitesse CommandAttendre::getLinearSpeed()
    8664:	b480      	push	{r7}
    8666:	b083      	sub	sp, #12
    8668:	af00      	add	r7, sp, #0
    866a:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    866c:	4b03      	ldr	r3, [pc, #12]	(867c <_ZN15CommandAttendre14getLinearSpeedEv+0x18>)
}
    866e:	4618      	mov	r0, r3
    8670:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8674:	46bd      	mov	sp, r7
    8676:	bc80      	pop	{r7}
    8678:	4770      	bx	lr
    867a:	46c0      	nop			(mov r8, r8)
    867c:	00000000 	.word	0x00000000

00008680 <_ZN15CommandAttendre15getAngularSpeedEv>:

Angle CommandAttendre::getAngularSpeed()
    8680:	b480      	push	{r7}
    8682:	b083      	sub	sp, #12
    8684:	af00      	add	r7, sp, #0
    8686:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    8688:	4b03      	ldr	r3, [pc, #12]	(8698 <_ZN15CommandAttendre15getAngularSpeedEv+0x18>)
}
    868a:	4618      	mov	r0, r3
    868c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8690:	46bd      	mov	sp, r7
    8692:	bc80      	pop	{r7}
    8694:	4770      	bx	lr
    8696:	46c0      	nop			(mov r8, r8)
    8698:	00000000 	.word	0x00000000

0000869c <_ZNK15CommandAttendre4finiEv>:

bool CommandAttendre::fini() const
    869c:	b480      	push	{r7}
    869e:	b083      	sub	sp, #12
    86a0:	af00      	add	r7, sp, #0
    86a2:	6078      	str	r0, [r7, #4]
{
    return (compte <= 0);
    86a4:	687b      	ldr	r3, [r7, #4]
    86a6:	685b      	ldr	r3, [r3, #4]
    86a8:	2b00      	cmp	r3, #0
    86aa:	bfcc      	ite	gt
    86ac:	2300      	movgt	r3, #0
    86ae:	2301      	movle	r3, #1
    86b0:	b2db      	uxtb	r3, r3
}
    86b2:	4618      	mov	r0, r3
    86b4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    86b8:	46bd      	mov	sp, r7
    86ba:	bc80      	pop	{r7}
    86bc:	4770      	bx	lr
    86be:	46c0      	nop			(mov r8, r8)

000086c0 <_ZN18CommandTestAvancer6updateEv>:
CommandTestAvancer::CommandTestAvancer()
    : Command()
{
}

void CommandTestAvancer::update()
    86c0:	b480      	push	{r7}
    86c2:	b083      	sub	sp, #12
    86c4:	af00      	add	r7, sp, #0
    86c6:	6078      	str	r0, [r7, #4]
{
}
    86c8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    86cc:	46bd      	mov	sp, r7
    86ce:	bc80      	pop	{r7}
    86d0:	4770      	bx	lr
    86d2:	46c0      	nop			(mov r8, r8)

000086d4 <_ZN18CommandTestAvancer14getLinearSpeedEv>:

Vitesse CommandTestAvancer::getLinearSpeed()
    86d4:	b480      	push	{r7}
    86d6:	b083      	sub	sp, #12
    86d8:	af00      	add	r7, sp, #0
    86da:	6078      	str	r0, [r7, #4]
{
    return VITESSE_LINEAIRE_MAX;
    86dc:	4b03      	ldr	r3, [pc, #12]	(86ec <_ZN18CommandTestAvancer14getLinearSpeedEv+0x18>)
}
    86de:	4618      	mov	r0, r3
    86e0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    86e4:	46bd      	mov	sp, r7
    86e6:	bc80      	pop	{r7}
    86e8:	4770      	bx	lr
    86ea:	46c0      	nop			(mov r8, r8)
    86ec:	40400000 	.word	0x40400000

000086f0 <_ZN18CommandTestAvancer15getAngularSpeedEv>:

Angle CommandTestAvancer::getAngularSpeed()
    86f0:	b480      	push	{r7}
    86f2:	b083      	sub	sp, #12
    86f4:	af00      	add	r7, sp, #0
    86f6:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    86f8:	4b03      	ldr	r3, [pc, #12]	(8708 <_ZN18CommandTestAvancer15getAngularSpeedEv+0x18>)
}
    86fa:	4618      	mov	r0, r3
    86fc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8700:	46bd      	mov	sp, r7
    8702:	bc80      	pop	{r7}
    8704:	4770      	bx	lr
    8706:	46c0      	nop			(mov r8, r8)
    8708:	00000000 	.word	0x00000000

0000870c <_ZN24CommandTestTournerGauche6updateEv>:
CommandTestTournerGauche::CommandTestTournerGauche()
    : Command()
{
}

void CommandTestTournerGauche::update()
    870c:	b480      	push	{r7}
    870e:	b083      	sub	sp, #12
    8710:	af00      	add	r7, sp, #0
    8712:	6078      	str	r0, [r7, #4]
{
}
    8714:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8718:	46bd      	mov	sp, r7
    871a:	bc80      	pop	{r7}
    871c:	4770      	bx	lr
    871e:	46c0      	nop			(mov r8, r8)

00008720 <_ZN24CommandTestTournerGauche14getLinearSpeedEv>:

Vitesse CommandTestTournerGauche::getLinearSpeed()
    8720:	b480      	push	{r7}
    8722:	b083      	sub	sp, #12
    8724:	af00      	add	r7, sp, #0
    8726:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    8728:	4b03      	ldr	r3, [pc, #12]	(8738 <_ZN24CommandTestTournerGauche14getLinearSpeedEv+0x18>)
}
    872a:	4618      	mov	r0, r3
    872c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8730:	46bd      	mov	sp, r7
    8732:	bc80      	pop	{r7}
    8734:	4770      	bx	lr
    8736:	46c0      	nop			(mov r8, r8)
    8738:	00000000 	.word	0x00000000

0000873c <_ZN24CommandTestTournerGauche15getAngularSpeedEv>:

Angle CommandTestTournerGauche::getAngularSpeed()
    873c:	b480      	push	{r7}
    873e:	b083      	sub	sp, #12
    8740:	af00      	add	r7, sp, #0
    8742:	6078      	str	r0, [r7, #4]
{
    return VITESSE_ANGULAIRE_MAX;
    8744:	4b03      	ldr	r3, [pc, #12]	(8754 <_ZN24CommandTestTournerGauche15getAngularSpeedEv+0x18>)
}
    8746:	4618      	mov	r0, r3
    8748:	f107 070c 	add.w	r7, r7, #12	; 0xc
    874c:	46bd      	mov	sp, r7
    874e:	bc80      	pop	{r7}
    8750:	4770      	bx	lr
    8752:	46c0      	nop			(mov r8, r8)
    8754:	3cf5c28f 	.word	0x3cf5c28f

00008758 <_ZN24CommandTestTournerGaucheC1Ev>:
    ////////////////////////////////
    //  CommandTestTournerGauche  //
    ////////////////////////////////


CommandTestTournerGauche::CommandTestTournerGauche()
    8758:	b580      	push	{r7, lr}
    875a:	b082      	sub	sp, #8
    875c:	af00      	add	r7, sp, #0
    875e:	6078      	str	r0, [r7, #4]
    : Command()
    8760:	687b      	ldr	r3, [r7, #4]
    8762:	4618      	mov	r0, r3
    8764:	f7ff fc38 	bl	7fd8 <_ZN7CommandC2Ev>
    8768:	687a      	ldr	r2, [r7, #4]
    876a:	4b04      	ldr	r3, [pc, #16]	(877c <_ZN24CommandTestTournerGaucheC1Ev+0x24>)
    876c:	6013      	str	r3, [r2, #0]
{
}
    876e:	687b      	ldr	r3, [r7, #4]
    8770:	4618      	mov	r0, r3
    8772:	f107 0708 	add.w	r7, r7, #8	; 0x8
    8776:	46bd      	mov	sp, r7
    8778:	bd80      	pop	{r7, pc}
    877a:	46c0      	nop			(mov r8, r8)
    877c:	00023eb0 	.word	0x00023eb0

00008780 <_ZN24CommandTestTournerGaucheC2Ev>:
    ////////////////////////////////
    //  CommandTestTournerGauche  //
    ////////////////////////////////


CommandTestTournerGauche::CommandTestTournerGauche()
    8780:	b580      	push	{r7, lr}
    8782:	b082      	sub	sp, #8
    8784:	af00      	add	r7, sp, #0
    8786:	6078      	str	r0, [r7, #4]
    : Command()
    8788:	687b      	ldr	r3, [r7, #4]
    878a:	4618      	mov	r0, r3
    878c:	f7ff fc24 	bl	7fd8 <_ZN7CommandC2Ev>
    8790:	687a      	ldr	r2, [r7, #4]
    8792:	4b04      	ldr	r3, [pc, #16]	(87a4 <_ZN24CommandTestTournerGaucheC2Ev+0x24>)
    8794:	6013      	str	r3, [r2, #0]
{
}
    8796:	687b      	ldr	r3, [r7, #4]
    8798:	4618      	mov	r0, r3
    879a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    879e:	46bd      	mov	sp, r7
    87a0:	bd80      	pop	{r7, pc}
    87a2:	46c0      	nop			(mov r8, r8)
    87a4:	00023eb0 	.word	0x00023eb0

000087a8 <_ZN18CommandTestAvancerC1Ev>:

    ////////////////////////////////
    //      CommandTestAvancer    //
    ////////////////////////////////

CommandTestAvancer::CommandTestAvancer()
    87a8:	b580      	push	{r7, lr}
    87aa:	b082      	sub	sp, #8
    87ac:	af00      	add	r7, sp, #0
    87ae:	6078      	str	r0, [r7, #4]
    : Command()
    87b0:	687b      	ldr	r3, [r7, #4]
    87b2:	4618      	mov	r0, r3
    87b4:	f7ff fc10 	bl	7fd8 <_ZN7CommandC2Ev>
    87b8:	687a      	ldr	r2, [r7, #4]
    87ba:	4b04      	ldr	r3, [pc, #16]	(87cc <_ZN18CommandTestAvancerC1Ev+0x24>)
    87bc:	6013      	str	r3, [r2, #0]
{
}
    87be:	687b      	ldr	r3, [r7, #4]
    87c0:	4618      	mov	r0, r3
    87c2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    87c6:	46bd      	mov	sp, r7
    87c8:	bd80      	pop	{r7, pc}
    87ca:	46c0      	nop			(mov r8, r8)
    87cc:	00023ed8 	.word	0x00023ed8

000087d0 <_ZN18CommandTestAvancerC2Ev>:

    ////////////////////////////////
    //      CommandTestAvancer    //
    ////////////////////////////////

CommandTestAvancer::CommandTestAvancer()
    87d0:	b580      	push	{r7, lr}
    87d2:	b082      	sub	sp, #8
    87d4:	af00      	add	r7, sp, #0
    87d6:	6078      	str	r0, [r7, #4]
    : Command()
    87d8:	687b      	ldr	r3, [r7, #4]
    87da:	4618      	mov	r0, r3
    87dc:	f7ff fbfc 	bl	7fd8 <_ZN7CommandC2Ev>
    87e0:	687a      	ldr	r2, [r7, #4]
    87e2:	4b04      	ldr	r3, [pc, #16]	(87f4 <_ZN18CommandTestAvancerC2Ev+0x24>)
    87e4:	6013      	str	r3, [r2, #0]
{
}
    87e6:	687b      	ldr	r3, [r7, #4]
    87e8:	4618      	mov	r0, r3
    87ea:	f107 0708 	add.w	r7, r7, #8	; 0x8
    87ee:	46bd      	mov	sp, r7
    87f0:	bd80      	pop	{r7, pc}
    87f2:	46c0      	nop			(mov r8, r8)
    87f4:	00023ed8 	.word	0x00023ed8

000087f8 <_ZN15CommandAttendreC1Ei>:

    ////////////////////////////////
    //      CommandAttendre       //
    ////////////////////////////////

CommandAttendre::CommandAttendre(int nbUpdates)
    87f8:	b580      	push	{r7, lr}
    87fa:	b082      	sub	sp, #8
    87fc:	af00      	add	r7, sp, #0
    87fe:	6078      	str	r0, [r7, #4]
    8800:	6039      	str	r1, [r7, #0]
    : Command(), compte(nbUpdates)
    8802:	687b      	ldr	r3, [r7, #4]
    8804:	4618      	mov	r0, r3
    8806:	f7ff fbe7 	bl	7fd8 <_ZN7CommandC2Ev>
    880a:	687a      	ldr	r2, [r7, #4]
    880c:	4b05      	ldr	r3, [pc, #20]	(8824 <_ZN15CommandAttendreC1Ei+0x2c>)
    880e:	6013      	str	r3, [r2, #0]
    8810:	687a      	ldr	r2, [r7, #4]
    8812:	683b      	ldr	r3, [r7, #0]
    8814:	6053      	str	r3, [r2, #4]
{
}
    8816:	687b      	ldr	r3, [r7, #4]
    8818:	4618      	mov	r0, r3
    881a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    881e:	46bd      	mov	sp, r7
    8820:	bd80      	pop	{r7, pc}
    8822:	46c0      	nop			(mov r8, r8)
    8824:	00023f00 	.word	0x00023f00

00008828 <_ZN15CommandAttendreC2Ei>:

    ////////////////////////////////
    //      CommandAttendre       //
    ////////////////////////////////

CommandAttendre::CommandAttendre(int nbUpdates)
    8828:	b580      	push	{r7, lr}
    882a:	b082      	sub	sp, #8
    882c:	af00      	add	r7, sp, #0
    882e:	6078      	str	r0, [r7, #4]
    8830:	6039      	str	r1, [r7, #0]
    : Command(), compte(nbUpdates)
    8832:	687b      	ldr	r3, [r7, #4]
    8834:	4618      	mov	r0, r3
    8836:	f7ff fbcf 	bl	7fd8 <_ZN7CommandC2Ev>
    883a:	687a      	ldr	r2, [r7, #4]
    883c:	4b05      	ldr	r3, [pc, #20]	(8854 <_ZN15CommandAttendreC2Ei+0x2c>)
    883e:	6013      	str	r3, [r2, #0]
    8840:	687a      	ldr	r2, [r7, #4]
    8842:	683b      	ldr	r3, [r7, #0]
    8844:	6053      	str	r3, [r2, #4]
{
}
    8846:	687b      	ldr	r3, [r7, #4]
    8848:	4618      	mov	r0, r3
    884a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    884e:	46bd      	mov	sp, r7
    8850:	bd80      	pop	{r7, pc}
    8852:	46c0      	nop			(mov r8, r8)
    8854:	00023f00 	.word	0x00023f00

00008858 <_ZN13CommandVirage6updateEv>:
    vitesseLinMax = vitesseLineaireMax;

    m_fini = false;
}

void CommandVirage::update()
    8858:	b590      	push	{r4, r7, lr}
    885a:	b091      	sub	sp, #68
    885c:	af00      	add	r7, sp, #0
    885e:	6178      	str	r0, [r7, #20]
{
    float accLinMax = ACCELERATION_LINEAIRE_MAX;
    8860:	4b85      	ldr	r3, [pc, #532]	(8a78 <_ZN13CommandVirage6updateEv+0x220>)
    8862:	62bb      	str	r3, [r7, #40]
    float decLinMax = DECELERATION_LINEAIRE_MAX;
    8864:	4b85      	ldr	r3, [pc, #532]	(8a7c <_ZN13CommandVirage6updateEv+0x224>)
    8866:	62fb      	str	r3, [r7, #44]
    float vitLinMax = vitesseLinMax;//VITESSE_LINEAIRE_MAX;
    8868:	697b      	ldr	r3, [r7, #20]
    886a:	695b      	ldr	r3, [r3, #20]
    886c:	633b      	str	r3, [r7, #48]

    float distanceVitesseMax = 0.5f*(vitLinMax*vitLinMax-vFin2)/decLinMax;
    886e:	6b38      	ldr	r0, [r7, #48]
    8870:	6b39      	ldr	r1, [r7, #48]
    8872:	f014 fb35 	bl	1cee0 <__aeabi_fmul>
    8876:	4603      	mov	r3, r0
    8878:	461a      	mov	r2, r3
    887a:	697b      	ldr	r3, [r7, #20]
    887c:	699b      	ldr	r3, [r3, #24]
    887e:	4610      	mov	r0, r2
    8880:	4619      	mov	r1, r3
    8882:	f014 fa23 	bl	1cccc <__aeabi_fsub>
    8886:	4603      	mov	r3, r0
    8888:	4618      	mov	r0, r3
    888a:	497d      	ldr	r1, [pc, #500]	(8a80 <_ZN13CommandVirage6updateEv+0x228>)
    888c:	f014 fb28 	bl	1cee0 <__aeabi_fmul>
    8890:	4603      	mov	r3, r0
    8892:	4618      	mov	r0, r3
    8894:	6af9      	ldr	r1, [r7, #44]
    8896:	f014 fbd7 	bl	1d048 <__aeabi_fdiv>
    889a:	4603      	mov	r3, r0
    889c:	637b      	str	r3, [r7, #52]

    float angleRestant = diffAngle(angleVise, Odometrie::odometrie->getPos().getAngle());
    889e:	697b      	ldr	r3, [r7, #20]
    88a0:	691c      	ldr	r4, [r3, #16]
    88a2:	4b78      	ldr	r3, [pc, #480]	(8a84 <_ZN13CommandVirage6updateEv+0x22c>)
    88a4:	681a      	ldr	r2, [r3, #0]
    88a6:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    88aa:	4618      	mov	r0, r3
    88ac:	4611      	mov	r1, r2
    88ae:	f001 faa3 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    88b2:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    88b6:	4618      	mov	r0, r3
    88b8:	f006 fcea 	bl	f290 <_ZNK17PositionPlusAngle8getAngleEv>
    88bc:	4603      	mov	r3, r0
    88be:	4620      	mov	r0, r4
    88c0:	4619      	mov	r1, r3
    88c2:	f7ff fdc5 	bl	8450 <_Z9diffAngleff>
    88c6:	4603      	mov	r3, r0
    88c8:	63bb      	str	r3, [r7, #56]
    float distanceRestante = abs(rayonCourbure*angleRestant);
    88ca:	697b      	ldr	r3, [r7, #20]
    88cc:	685b      	ldr	r3, [r3, #4]
    88ce:	4618      	mov	r0, r3
    88d0:	6bb9      	ldr	r1, [r7, #56]
    88d2:	f014 fb05 	bl	1cee0 <__aeabi_fmul>
    88d6:	4603      	mov	r3, r0
    88d8:	4618      	mov	r0, r3
    88da:	496b      	ldr	r1, [pc, #428]	(8a88 <_ZN13CommandVirage6updateEv+0x230>)
    88dc:	f014 fcba 	bl	1d254 <__aeabi_fcmpgt>
    88e0:	4603      	mov	r3, r0
    88e2:	2b00      	cmp	r3, #0
    88e4:	d008      	beq.n	88f8 <_ZN13CommandVirage6updateEv+0xa0>
    88e6:	697b      	ldr	r3, [r7, #20]
    88e8:	685b      	ldr	r3, [r3, #4]
    88ea:	4618      	mov	r0, r3
    88ec:	6bb9      	ldr	r1, [r7, #56]
    88ee:	f014 faf7 	bl	1cee0 <__aeabi_fmul>
    88f2:	4603      	mov	r3, r0
    88f4:	607b      	str	r3, [r7, #4]
    88f6:	e009      	b.n	890c <_ZN13CommandVirage6updateEv+0xb4>
    88f8:	697b      	ldr	r3, [r7, #20]
    88fa:	685b      	ldr	r3, [r3, #4]
    88fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    8900:	4618      	mov	r0, r3
    8902:	6bb9      	ldr	r1, [r7, #56]
    8904:	f014 faec 	bl	1cee0 <__aeabi_fmul>
    8908:	4603      	mov	r3, r0
    890a:	607b      	str	r3, [r7, #4]
    890c:	687a      	ldr	r2, [r7, #4]
    890e:	63fa      	str	r2, [r7, #60]

    // gestion de si la commande a fini
    // si l'angle restant est bon ou si on a dépassé l'angle visé
    if (abs(angleRestant) < M_PI/90.0f || ((angleRestant > 0.0f) != (rayonCourbure > 0.0f)))
    8910:	6bb8      	ldr	r0, [r7, #56]
    8912:	495d      	ldr	r1, [pc, #372]	(8a88 <_ZN13CommandVirage6updateEv+0x230>)
    8914:	f014 fc9e 	bl	1d254 <__aeabi_fcmpgt>
    8918:	4603      	mov	r3, r0
    891a:	2b00      	cmp	r3, #0
    891c:	d00f      	beq.n	893e <_ZN13CommandVirage6updateEv+0xe6>
    891e:	f04f 0300 	mov.w	r3, #0	; 0x0
    8922:	70fb      	strb	r3, [r7, #3]
    8924:	6bb8      	ldr	r0, [r7, #56]
    8926:	4958      	ldr	r1, [pc, #352]	(8a88 <_ZN13CommandVirage6updateEv+0x230>)
    8928:	f014 fc6c 	bl	1d204 <__aeabi_fcmpeq>
    892c:	4603      	mov	r3, r0
    892e:	2b00      	cmp	r3, #0
    8930:	d102      	bne.n	8938 <_ZN13CommandVirage6updateEv+0xe0>
    8932:	f04f 0301 	mov.w	r3, #1	; 0x1
    8936:	70fb      	strb	r3, [r7, #3]
    8938:	78fb      	ldrb	r3, [r7, #3]
    893a:	60bb      	str	r3, [r7, #8]
    893c:	e03e      	b.n	89bc <_ZN13CommandVirage6updateEv+0x164>
    893e:	6bbb      	ldr	r3, [r7, #56]
    8940:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    8944:	4618      	mov	r0, r3
    8946:	f013 fe59 	bl	1c5fc <__aeabi_f2d>
    894a:	4602      	mov	r2, r0
    894c:	460b      	mov	r3, r1
    894e:	4610      	mov	r0, r2
    8950:	4619      	mov	r1, r3
    8952:	a247      	add	r2, pc, #284	(adr r2, 8a70 <_ZN13CommandVirage6updateEv+0x218>)
    8954:	ca0c      	ldmia	r2!, {r2, r3}
    8956:	f014 f915 	bl	1cb84 <__aeabi_dcmplt>
    895a:	4603      	mov	r3, r0
    895c:	2b00      	cmp	r3, #0
    895e:	d124      	bne.n	89aa <_ZN13CommandVirage6updateEv+0x152>
    8960:	f04f 0300 	mov.w	r3, #0	; 0x0
    8964:	70bb      	strb	r3, [r7, #2]
    8966:	6bb8      	ldr	r0, [r7, #56]
    8968:	4947      	ldr	r1, [pc, #284]	(8a88 <_ZN13CommandVirage6updateEv+0x230>)
    896a:	f014 fc73 	bl	1d254 <__aeabi_fcmpgt>
    896e:	4603      	mov	r3, r0
    8970:	2b00      	cmp	r3, #0
    8972:	d002      	beq.n	897a <_ZN13CommandVirage6updateEv+0x122>
    8974:	f04f 0301 	mov.w	r3, #1	; 0x1
    8978:	70bb      	strb	r3, [r7, #2]
    897a:	78ba      	ldrb	r2, [r7, #2]
    897c:	613a      	str	r2, [r7, #16]
    897e:	697b      	ldr	r3, [r7, #20]
    8980:	685a      	ldr	r2, [r3, #4]
    8982:	f04f 0300 	mov.w	r3, #0	; 0x0
    8986:	707b      	strb	r3, [r7, #1]
    8988:	4610      	mov	r0, r2
    898a:	493f      	ldr	r1, [pc, #252]	(8a88 <_ZN13CommandVirage6updateEv+0x230>)
    898c:	f014 fc62 	bl	1d254 <__aeabi_fcmpgt>
    8990:	4603      	mov	r3, r0
    8992:	2b00      	cmp	r3, #0
    8994:	d002      	beq.n	899c <_ZN13CommandVirage6updateEv+0x144>
    8996:	f04f 0301 	mov.w	r3, #1	; 0x1
    899a:	707b      	strb	r3, [r7, #1]
    899c:	787b      	ldrb	r3, [r7, #1]
    899e:	693a      	ldr	r2, [r7, #16]
    89a0:	ea82 0303 	eor.w	r3, r2, r3
    89a4:	b2db      	uxtb	r3, r3
    89a6:	2b00      	cmp	r3, #0
    89a8:	d003      	beq.n	89b2 <_ZN13CommandVirage6updateEv+0x15a>
    89aa:	f04f 0301 	mov.w	r3, #1	; 0x1
    89ae:	60fb      	str	r3, [r7, #12]
    89b0:	e002      	b.n	89b8 <_ZN13CommandVirage6updateEv+0x160>
    89b2:	f04f 0200 	mov.w	r2, #0	; 0x0
    89b6:	60fa      	str	r2, [r7, #12]
    89b8:	68fb      	ldr	r3, [r7, #12]
    89ba:	60bb      	str	r3, [r7, #8]
    89bc:	68ba      	ldr	r2, [r7, #8]
    89be:	2a00      	cmp	r2, #0
    89c0:	d003      	beq.n	89ca <_ZN13CommandVirage6updateEv+0x172>
    {
        m_fini = true;
    89c2:	697b      	ldr	r3, [r7, #20]
    89c4:	f04f 0201 	mov.w	r2, #1	; 0x1
    89c8:	771a      	strb	r2, [r3, #28]
    }

    // phase de vitesse max
    if (distanceRestante > distanceVitesseMax)
    89ca:	6bf8      	ldr	r0, [r7, #60]
    89cc:	6b79      	ldr	r1, [r7, #52]
    89ce:	f014 fc41 	bl	1d254 <__aeabi_fcmpgt>
    89d2:	4603      	mov	r3, r0
    89d4:	2b00      	cmp	r3, #0
    89d6:	d016      	beq.n	8a06 <_ZN13CommandVirage6updateEv+0x1ae>
    {
            linSpeed += accLinMax;
    89d8:	697b      	ldr	r3, [r7, #20]
    89da:	689b      	ldr	r3, [r3, #8]
    89dc:	4618      	mov	r0, r3
    89de:	6ab9      	ldr	r1, [r7, #40]
    89e0:	f014 f976 	bl	1ccd0 <__addsf3>
    89e4:	4603      	mov	r3, r0
    89e6:	461a      	mov	r2, r3
    89e8:	697b      	ldr	r3, [r7, #20]
    89ea:	609a      	str	r2, [r3, #8]
        if (linSpeed > vitLinMax)
    89ec:	697b      	ldr	r3, [r7, #20]
    89ee:	689b      	ldr	r3, [r3, #8]
    89f0:	4618      	mov	r0, r3
    89f2:	6b39      	ldr	r1, [r7, #48]
    89f4:	f014 fc2e 	bl	1d254 <__aeabi_fcmpgt>
    89f8:	4603      	mov	r3, r0
    89fa:	2b00      	cmp	r3, #0
    89fc:	d027      	beq.n	8a4e <_ZN13CommandVirage6updateEv+0x1f6>
            linSpeed = vitLinMax;
    89fe:	697a      	ldr	r2, [r7, #20]
    8a00:	6b3b      	ldr	r3, [r7, #48]
    8a02:	6093      	str	r3, [r2, #8]
    8a04:	e023      	b.n	8a4e <_ZN13CommandVirage6updateEv+0x1f6>
    }

    // phase de décéleration
    else
    {
        linSpeed = sqrt(vFin2+2.0f*distanceRestante*decLinMax);
    8a06:	697b      	ldr	r3, [r7, #20]
    8a08:	699c      	ldr	r4, [r3, #24]
    8a0a:	6bfb      	ldr	r3, [r7, #60]
    8a0c:	4618      	mov	r0, r3
    8a0e:	4619      	mov	r1, r3
    8a10:	f014 f95e 	bl	1ccd0 <__addsf3>
    8a14:	4603      	mov	r3, r0
    8a16:	4618      	mov	r0, r3
    8a18:	6af9      	ldr	r1, [r7, #44]
    8a1a:	f014 fa61 	bl	1cee0 <__aeabi_fmul>
    8a1e:	4603      	mov	r3, r0
    8a20:	4620      	mov	r0, r4
    8a22:	4619      	mov	r1, r3
    8a24:	f014 f954 	bl	1ccd0 <__addsf3>
    8a28:	4603      	mov	r3, r0
    8a2a:	4618      	mov	r0, r3
    8a2c:	f013 fde6 	bl	1c5fc <__aeabi_f2d>
    8a30:	4602      	mov	r2, r0
    8a32:	460b      	mov	r3, r1
    8a34:	4610      	mov	r0, r2
    8a36:	4619      	mov	r1, r3
    8a38:	f017 ffcc 	bl	209d4 <sqrt>
    8a3c:	4602      	mov	r2, r0
    8a3e:	460b      	mov	r3, r1
    8a40:	4610      	mov	r0, r2
    8a42:	4619      	mov	r1, r3
    8a44:	f014 f8ee 	bl	1cc24 <__aeabi_d2f>
    8a48:	4602      	mov	r2, r0
    8a4a:	697b      	ldr	r3, [r7, #20]
    8a4c:	609a      	str	r2, [r3, #8]
    }

    // calcul de la vitesse angulaire
    angSpeed = linSpeed/rayonCourbure;
    8a4e:	697b      	ldr	r3, [r7, #20]
    8a50:	689a      	ldr	r2, [r3, #8]
    8a52:	697b      	ldr	r3, [r7, #20]
    8a54:	685b      	ldr	r3, [r3, #4]
    8a56:	4610      	mov	r0, r2
    8a58:	4619      	mov	r1, r3
    8a5a:	f014 faf5 	bl	1d048 <__aeabi_fdiv>
    8a5e:	4603      	mov	r3, r0
    8a60:	461a      	mov	r2, r3
    8a62:	697b      	ldr	r3, [r7, #20]
    8a64:	60da      	str	r2, [r3, #12]
}
    8a66:	f107 0744 	add.w	r7, r7, #68	; 0x44
    8a6a:	46bd      	mov	sp, r7
    8a6c:	bd90      	pop	{r4, r7, pc}
    8a6e:	46c0      	nop			(mov r8, r8)
    8a70:	a2529d39 	.word	0xa2529d39
    8a74:	3fa1df46 	.word	0x3fa1df46
    8a78:	3ccccccd 	.word	0x3ccccccd
    8a7c:	3ca3d70a 	.word	0x3ca3d70a
    8a80:	3f000000 	.word	0x3f000000
    8a84:	20000574 	.word	0x20000574
    8a88:	00000000 	.word	0x00000000

00008a8c <_ZN13CommandVirageC1Effff>:
    ////////////////////////////////


// rayon > 0
// angle > 0 : vers la gauche, angle < 0 : vers la droite
CommandVirage::CommandVirage(float rayon, float angle, float vitesseLineaireMax, float vitesseFin)
    8a8c:	b580      	push	{r7, lr}
    8a8e:	b088      	sub	sp, #32
    8a90:	af00      	add	r7, sp, #0
    8a92:	60f8      	str	r0, [r7, #12]
    8a94:	60b9      	str	r1, [r7, #8]
    8a96:	607a      	str	r2, [r7, #4]
    8a98:	603b      	str	r3, [r7, #0]
    8a9a:	68fb      	ldr	r3, [r7, #12]
    8a9c:	4618      	mov	r0, r3
    8a9e:	f7ff fa9b 	bl	7fd8 <_ZN7CommandC2Ev>
    8aa2:	68fa      	ldr	r2, [r7, #12]
    8aa4:	4b26      	ldr	r3, [pc, #152]	(8b40 <_ZN13CommandVirageC1Effff+0xb4>)
    8aa6:	6013      	str	r3, [r2, #0]
{
    if (angle > 0.0f)
    8aa8:	6878      	ldr	r0, [r7, #4]
    8aaa:	4926      	ldr	r1, [pc, #152]	(8b44 <_ZN13CommandVirageC1Effff+0xb8>)
    8aac:	f014 fbd2 	bl	1d254 <__aeabi_fcmpgt>
    8ab0:	4603      	mov	r3, r0
    8ab2:	2b00      	cmp	r3, #0
    8ab4:	d003      	beq.n	8abe <_ZN13CommandVirageC1Effff+0x32>
        rayonCourbure = rayon;
    8ab6:	68fa      	ldr	r2, [r7, #12]
    8ab8:	68bb      	ldr	r3, [r7, #8]
    8aba:	6053      	str	r3, [r2, #4]
    8abc:	e004      	b.n	8ac8 <_ZN13CommandVirageC1Effff+0x3c>
    else
        rayonCourbure = -rayon;
    8abe:	68bb      	ldr	r3, [r7, #8]
    8ac0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    8ac4:	68fb      	ldr	r3, [r7, #12]
    8ac6:	605a      	str	r2, [r3, #4]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8ac8:	4b1f      	ldr	r3, [pc, #124]	(8b48 <_ZN13CommandVirageC1Effff+0xbc>)
    8aca:	681b      	ldr	r3, [r3, #0]
    8acc:	4618      	mov	r0, r3
    8ace:	f001 f97b 	bl	9dc8 <_ZNK9Odometrie18getVitesseLineaireEv>
    8ad2:	4602      	mov	r2, r0
    8ad4:	68fb      	ldr	r3, [r7, #12]
    8ad6:	609a      	str	r2, [r3, #8]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8ad8:	4b1b      	ldr	r3, [pc, #108]	(8b48 <_ZN13CommandVirageC1Effff+0xbc>)
    8ada:	681b      	ldr	r3, [r3, #0]
    8adc:	4618      	mov	r0, r3
    8ade:	f001 f967 	bl	9db0 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8ae2:	4602      	mov	r2, r0
    8ae4:	68fb      	ldr	r3, [r7, #12]
    8ae6:	60da      	str	r2, [r3, #12]
    angleVise = angle + Odometrie::odometrie->getPos().getAngle();
    8ae8:	4b17      	ldr	r3, [pc, #92]	(8b48 <_ZN13CommandVirageC1Effff+0xbc>)
    8aea:	681a      	ldr	r2, [r3, #0]
    8aec:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8af0:	4618      	mov	r0, r3
    8af2:	4611      	mov	r1, r2
    8af4:	f001 f980 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    8af8:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8afc:	4618      	mov	r0, r3
    8afe:	f006 fbc7 	bl	f290 <_ZNK17PositionPlusAngle8getAngleEv>
    8b02:	4603      	mov	r3, r0
    8b04:	4618      	mov	r0, r3
    8b06:	6879      	ldr	r1, [r7, #4]
    8b08:	f014 f8e2 	bl	1ccd0 <__addsf3>
    8b0c:	4603      	mov	r3, r0
    8b0e:	461a      	mov	r2, r3
    8b10:	68fb      	ldr	r3, [r7, #12]
    8b12:	611a      	str	r2, [r3, #16]
    vFin2 = vitesseFin*vitesseFin;
    8b14:	6ab8      	ldr	r0, [r7, #40]
    8b16:	6ab9      	ldr	r1, [r7, #40]
    8b18:	f014 f9e2 	bl	1cee0 <__aeabi_fmul>
    8b1c:	4603      	mov	r3, r0
    8b1e:	461a      	mov	r2, r3
    8b20:	68fb      	ldr	r3, [r7, #12]
    8b22:	619a      	str	r2, [r3, #24]
    vitesseLinMax = vitesseLineaireMax;
    8b24:	68fa      	ldr	r2, [r7, #12]
    8b26:	683b      	ldr	r3, [r7, #0]
    8b28:	6153      	str	r3, [r2, #20]

    m_fini = false;
    8b2a:	68fa      	ldr	r2, [r7, #12]
    8b2c:	f04f 0300 	mov.w	r3, #0	; 0x0
    8b30:	7713      	strb	r3, [r2, #28]
}
    8b32:	68fb      	ldr	r3, [r7, #12]
    8b34:	4618      	mov	r0, r3
    8b36:	f107 0720 	add.w	r7, r7, #32	; 0x20
    8b3a:	46bd      	mov	sp, r7
    8b3c:	bd80      	pop	{r7, pc}
    8b3e:	46c0      	nop			(mov r8, r8)
    8b40:	00023f28 	.word	0x00023f28
    8b44:	00000000 	.word	0x00000000
    8b48:	20000574 	.word	0x20000574

00008b4c <_ZN13CommandVirageC2Effff>:
    ////////////////////////////////


// rayon > 0
// angle > 0 : vers la gauche, angle < 0 : vers la droite
CommandVirage::CommandVirage(float rayon, float angle, float vitesseLineaireMax, float vitesseFin)
    8b4c:	b580      	push	{r7, lr}
    8b4e:	b088      	sub	sp, #32
    8b50:	af00      	add	r7, sp, #0
    8b52:	60f8      	str	r0, [r7, #12]
    8b54:	60b9      	str	r1, [r7, #8]
    8b56:	607a      	str	r2, [r7, #4]
    8b58:	603b      	str	r3, [r7, #0]
    8b5a:	68fb      	ldr	r3, [r7, #12]
    8b5c:	4618      	mov	r0, r3
    8b5e:	f7ff fa3b 	bl	7fd8 <_ZN7CommandC2Ev>
    8b62:	68fa      	ldr	r2, [r7, #12]
    8b64:	4b26      	ldr	r3, [pc, #152]	(8c00 <_ZN13CommandVirageC2Effff+0xb4>)
    8b66:	6013      	str	r3, [r2, #0]
{
    if (angle > 0.0f)
    8b68:	6878      	ldr	r0, [r7, #4]
    8b6a:	4926      	ldr	r1, [pc, #152]	(8c04 <_ZN13CommandVirageC2Effff+0xb8>)
    8b6c:	f014 fb72 	bl	1d254 <__aeabi_fcmpgt>
    8b70:	4603      	mov	r3, r0
    8b72:	2b00      	cmp	r3, #0
    8b74:	d003      	beq.n	8b7e <_ZN13CommandVirageC2Effff+0x32>
        rayonCourbure = rayon;
    8b76:	68fa      	ldr	r2, [r7, #12]
    8b78:	68bb      	ldr	r3, [r7, #8]
    8b7a:	6053      	str	r3, [r2, #4]
    8b7c:	e004      	b.n	8b88 <_ZN13CommandVirageC2Effff+0x3c>
    else
        rayonCourbure = -rayon;
    8b7e:	68bb      	ldr	r3, [r7, #8]
    8b80:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    8b84:	68fb      	ldr	r3, [r7, #12]
    8b86:	605a      	str	r2, [r3, #4]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8b88:	4b1f      	ldr	r3, [pc, #124]	(8c08 <_ZN13CommandVirageC2Effff+0xbc>)
    8b8a:	681b      	ldr	r3, [r3, #0]
    8b8c:	4618      	mov	r0, r3
    8b8e:	f001 f91b 	bl	9dc8 <_ZNK9Odometrie18getVitesseLineaireEv>
    8b92:	4602      	mov	r2, r0
    8b94:	68fb      	ldr	r3, [r7, #12]
    8b96:	609a      	str	r2, [r3, #8]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8b98:	4b1b      	ldr	r3, [pc, #108]	(8c08 <_ZN13CommandVirageC2Effff+0xbc>)
    8b9a:	681b      	ldr	r3, [r3, #0]
    8b9c:	4618      	mov	r0, r3
    8b9e:	f001 f907 	bl	9db0 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8ba2:	4602      	mov	r2, r0
    8ba4:	68fb      	ldr	r3, [r7, #12]
    8ba6:	60da      	str	r2, [r3, #12]
    angleVise = angle + Odometrie::odometrie->getPos().getAngle();
    8ba8:	4b17      	ldr	r3, [pc, #92]	(8c08 <_ZN13CommandVirageC2Effff+0xbc>)
    8baa:	681a      	ldr	r2, [r3, #0]
    8bac:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8bb0:	4618      	mov	r0, r3
    8bb2:	4611      	mov	r1, r2
    8bb4:	f001 f920 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    8bb8:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8bbc:	4618      	mov	r0, r3
    8bbe:	f006 fb67 	bl	f290 <_ZNK17PositionPlusAngle8getAngleEv>
    8bc2:	4603      	mov	r3, r0
    8bc4:	4618      	mov	r0, r3
    8bc6:	6879      	ldr	r1, [r7, #4]
    8bc8:	f014 f882 	bl	1ccd0 <__addsf3>
    8bcc:	4603      	mov	r3, r0
    8bce:	461a      	mov	r2, r3
    8bd0:	68fb      	ldr	r3, [r7, #12]
    8bd2:	611a      	str	r2, [r3, #16]
    vFin2 = vitesseFin*vitesseFin;
    8bd4:	6ab8      	ldr	r0, [r7, #40]
    8bd6:	6ab9      	ldr	r1, [r7, #40]
    8bd8:	f014 f982 	bl	1cee0 <__aeabi_fmul>
    8bdc:	4603      	mov	r3, r0
    8bde:	461a      	mov	r2, r3
    8be0:	68fb      	ldr	r3, [r7, #12]
    8be2:	619a      	str	r2, [r3, #24]
    vitesseLinMax = vitesseLineaireMax;
    8be4:	68fa      	ldr	r2, [r7, #12]
    8be6:	683b      	ldr	r3, [r7, #0]
    8be8:	6153      	str	r3, [r2, #20]

    m_fini = false;
    8bea:	68fa      	ldr	r2, [r7, #12]
    8bec:	f04f 0300 	mov.w	r3, #0	; 0x0
    8bf0:	7713      	strb	r3, [r2, #28]
}
    8bf2:	68fb      	ldr	r3, [r7, #12]
    8bf4:	4618      	mov	r0, r3
    8bf6:	f107 0720 	add.w	r7, r7, #32	; 0x20
    8bfa:	46bd      	mov	sp, r7
    8bfc:	bd80      	pop	{r7, pc}
    8bfe:	46c0      	nop			(mov r8, r8)
    8c00:	00023f28 	.word	0x00023f28
    8c04:	00000000 	.word	0x00000000
    8c08:	20000574 	.word	0x20000574

00008c0c <_ZN13CommandAllerA11resetSpeedsEv>:
                linSpeed = linSpeedVisee;
        }
    }
}

void CommandAllerA::resetSpeeds()
    8c0c:	b580      	push	{r7, lr}
    8c0e:	b082      	sub	sp, #8
    8c10:	af00      	add	r7, sp, #0
    8c12:	6078      	str	r0, [r7, #4]
{
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8c14:	4b09      	ldr	r3, [pc, #36]	(8c3c <_ZN13CommandAllerA11resetSpeedsEv+0x30>)
    8c16:	681b      	ldr	r3, [r3, #0]
    8c18:	4618      	mov	r0, r3
    8c1a:	f001 f8d5 	bl	9dc8 <_ZNK9Odometrie18getVitesseLineaireEv>
    8c1e:	4602      	mov	r2, r0
    8c20:	687b      	ldr	r3, [r7, #4]
    8c22:	619a      	str	r2, [r3, #24]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8c24:	4b05      	ldr	r3, [pc, #20]	(8c3c <_ZN13CommandAllerA11resetSpeedsEv+0x30>)
    8c26:	681b      	ldr	r3, [r3, #0]
    8c28:	4618      	mov	r0, r3
    8c2a:	f001 f8c1 	bl	9db0 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8c2e:	4602      	mov	r2, r0
    8c30:	687b      	ldr	r3, [r7, #4]
    8c32:	61da      	str	r2, [r3, #28]
}
    8c34:	f107 0708 	add.w	r7, r7, #8	; 0x8
    8c38:	46bd      	mov	sp, r7
    8c3a:	bd80      	pop	{r7, pc}
    8c3c:	20000574 	.word	0x20000574

00008c40 <_ZN18CommandTournerVers6updateEv>:
    signeAngle = SGN_UNDEF;

    maxAngSpeed = maxSpeed;
}

void CommandTournerVers::update()
    8c40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    8c44:	b096      	sub	sp, #88
    8c46:	af00      	add	r7, sp, #0
    8c48:	60f8      	str	r0, [r7, #12]
{
    float accAngMax = ACCELERATION_ANGULAIRE_MAX;
    8c4a:	4bbe      	ldr	r3, [pc, #760]	(8f44 <_ZN18CommandTournerVers6updateEv+0x304>)
    8c4c:	63fb      	str	r3, [r7, #60]
    float vitAngMax = maxAngSpeed;
    8c4e:	68fb      	ldr	r3, [r7, #12]
    8c50:	69db      	ldr	r3, [r3, #28]
    8c52:	643b      	str	r3, [r7, #64]
    // float angleVitesseMax = M_PI/6.0f;
    float angleVitesseMax = 0.5f*vitAngMax*vitAngMax/accAngMax;
    8c54:	6c38      	ldr	r0, [r7, #64]
    8c56:	49bc      	ldr	r1, [pc, #752]	(8f48 <_ZN18CommandTournerVers6updateEv+0x308>)
    8c58:	f014 f942 	bl	1cee0 <__aeabi_fmul>
    8c5c:	4603      	mov	r3, r0
    8c5e:	4618      	mov	r0, r3
    8c60:	6c39      	ldr	r1, [r7, #64]
    8c62:	f014 f93d 	bl	1cee0 <__aeabi_fmul>
    8c66:	4603      	mov	r3, r0
    8c68:	4618      	mov	r0, r3
    8c6a:	6bf9      	ldr	r1, [r7, #60]
    8c6c:	f014 f9ec 	bl	1d048 <__aeabi_fdiv>
    8c70:	4603      	mov	r3, r0
    8c72:	647b      	str	r3, [r7, #68]
    float angle = Odometrie::odometrie->getPos().getAngle();
    8c74:	4bb5      	ldr	r3, [pc, #724]	(8f4c <_ZN18CommandTournerVers6updateEv+0x30c>)
    8c76:	681a      	ldr	r2, [r3, #0]
    8c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
    8c7c:	4618      	mov	r0, r3
    8c7e:	4611      	mov	r1, r2
    8c80:	f001 f8ba 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    8c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
    8c88:	4618      	mov	r0, r3
    8c8a:	f006 fb01 	bl	f290 <_ZNK17PositionPlusAngle8getAngleEv>
    8c8e:	4603      	mov	r3, r0
    8c90:	64bb      	str	r3, [r7, #72]
    Position pos = Odometrie::odometrie->getPos().getPosition();
    8c92:	4bae      	ldr	r3, [pc, #696]	(8f4c <_ZN18CommandTournerVers6updateEv+0x30c>)
    8c94:	681a      	ldr	r2, [r3, #0]
    8c96:	f107 0330 	add.w	r3, r7, #48	; 0x30
    8c9a:	4618      	mov	r0, r3
    8c9c:	4611      	mov	r1, r2
    8c9e:	f001 f8ab 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    8ca2:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    8ca6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8caa:	4618      	mov	r0, r3
    8cac:	4611      	mov	r1, r2
    8cae:	f006 fadd 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
    float angleVise;
    if (!useAngle)
    8cb2:	68fb      	ldr	r3, [r7, #12]
    8cb4:	7d5b      	ldrb	r3, [r3, #21]
    8cb6:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    8cba:	b2db      	uxtb	r3, r3
    8cbc:	2b00      	cmp	r3, #0
    8cbe:	d02c      	beq.n	8d1a <_ZN18CommandTournerVers6updateEv+0xda>
    {
        Position delta = but-pos;
    8cc0:	68fb      	ldr	r3, [r7, #12]
    8cc2:	f103 0104 	add.w	r1, r3, #4	; 0x4
    8cc6:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8cca:	f107 021c 	add.w	r2, r7, #28	; 0x1c
    8cce:	4618      	mov	r0, r3
    8cd0:	f006 f8fe 	bl	eed0 <_ZNK8PositionmiERKS_>
        angleVise = atan2(delta.getY(),delta.getX());
    8cd4:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8cd8:	4618      	mov	r0, r3
    8cda:	f006 f8ab 	bl	ee34 <_ZNK8Position4getYEv>
    8cde:	4603      	mov	r3, r0
    8ce0:	4618      	mov	r0, r3
    8ce2:	f013 fc8b 	bl	1c5fc <__aeabi_f2d>
    8ce6:	4604      	mov	r4, r0
    8ce8:	460d      	mov	r5, r1
    8cea:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8cee:	4618      	mov	r0, r3
    8cf0:	f006 f894 	bl	ee1c <_ZNK8Position4getXEv>
    8cf4:	4603      	mov	r3, r0
    8cf6:	4618      	mov	r0, r3
    8cf8:	f013 fc80 	bl	1c5fc <__aeabi_f2d>
    8cfc:	4602      	mov	r2, r0
    8cfe:	460b      	mov	r3, r1
    8d00:	4620      	mov	r0, r4
    8d02:	4629      	mov	r1, r5
    8d04:	f017 fe60 	bl	209c8 <atan2>
    8d08:	4602      	mov	r2, r0
    8d0a:	460b      	mov	r3, r1
    8d0c:	4610      	mov	r0, r2
    8d0e:	4619      	mov	r1, r3
    8d10:	f013 ff88 	bl	1cc24 <__aeabi_d2f>
    8d14:	4603      	mov	r3, r0
    8d16:	64fb      	str	r3, [r7, #76]
    8d18:	e002      	b.n	8d20 <_ZN18CommandTournerVers6updateEv+0xe0>
    }
    else
    {
        angleVise = butAngle;
    8d1a:	68fb      	ldr	r3, [r7, #12]
    8d1c:	691b      	ldr	r3, [r3, #16]
    8d1e:	64fb      	str	r3, [r7, #76]
    }
    float diffAng = diffAngle(angleVise,angle);
    8d20:	6cf8      	ldr	r0, [r7, #76]
    8d22:	6cb9      	ldr	r1, [r7, #72]
    8d24:	f7ff fb94 	bl	8450 <_Z9diffAngleff>
    8d28:	4603      	mov	r3, r0
    8d2a:	653b      	str	r3, [r7, #80]

    // Check sharps
    StrategieV2::setTourneSurSoiMeme(true);
    8d2c:	f04f 0001 	mov.w	r0, #1	; 0x1
    8d30:	f00e fe58 	bl	179e4 <_ZN11StrategieV219setTourneSurSoiMemeEb>


    //qDebug() << abs(angleVise)*180./3.14 << angleVitesseMax;

    if (abs(diffAng) > angleVitesseMax)
    8d34:	6d38      	ldr	r0, [r7, #80]
    8d36:	4986      	ldr	r1, [pc, #536]	(8f50 <_ZN18CommandTournerVers6updateEv+0x310>)
    8d38:	f014 fa8c 	bl	1d254 <__aeabi_fcmpgt>
    8d3c:	4603      	mov	r3, r0
    8d3e:	2b00      	cmp	r3, #0
    8d40:	d00f      	beq.n	8d62 <_ZN18CommandTournerVers6updateEv+0x122>
    8d42:	f04f 0300 	mov.w	r3, #0	; 0x0
    8d46:	71fb      	strb	r3, [r7, #7]
    8d48:	6d38      	ldr	r0, [r7, #80]
    8d4a:	4981      	ldr	r1, [pc, #516]	(8f50 <_ZN18CommandTournerVers6updateEv+0x310>)
    8d4c:	f014 fa5a 	bl	1d204 <__aeabi_fcmpeq>
    8d50:	4603      	mov	r3, r0
    8d52:	2b00      	cmp	r3, #0
    8d54:	d102      	bne.n	8d5c <_ZN18CommandTournerVers6updateEv+0x11c>
    8d56:	f04f 0301 	mov.w	r3, #1	; 0x1
    8d5a:	71fb      	strb	r3, [r7, #7]
    8d5c:	79fb      	ldrb	r3, [r7, #7]
    8d5e:	60bb      	str	r3, [r7, #8]
    8d60:	e011      	b.n	8d86 <_ZN18CommandTournerVers6updateEv+0x146>
    8d62:	6d3b      	ldr	r3, [r7, #80]
    8d64:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    8d68:	f04f 0300 	mov.w	r3, #0	; 0x0
    8d6c:	71bb      	strb	r3, [r7, #6]
    8d6e:	4610      	mov	r0, r2
    8d70:	6c79      	ldr	r1, [r7, #68]
    8d72:	f014 fa6f 	bl	1d254 <__aeabi_fcmpgt>
    8d76:	4603      	mov	r3, r0
    8d78:	2b00      	cmp	r3, #0
    8d7a:	d002      	beq.n	8d82 <_ZN18CommandTournerVers6updateEv+0x142>
    8d7c:	f04f 0301 	mov.w	r3, #1	; 0x1
    8d80:	71bb      	strb	r3, [r7, #6]
    8d82:	79bb      	ldrb	r3, [r7, #6]
    8d84:	60bb      	str	r3, [r7, #8]
    8d86:	68bb      	ldr	r3, [r7, #8]
    8d88:	2b00      	cmp	r3, #0
    8d8a:	f000 80c9 	beq.w	8f20 <_ZN18CommandTournerVers6updateEv+0x2e0>
    {
        bool hasToDecelerate = (fabs(diffAng) < (angSpeed * angSpeed / accAngMax - accAngMax*2.));
    8d8e:	6d3b      	ldr	r3, [r7, #80]
    8d90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8d94:	4618      	mov	r0, r3
    8d96:	f013 fc31 	bl	1c5fc <__aeabi_f2d>
    8d9a:	4680      	mov	r8, r0
    8d9c:	4689      	mov	r9, r1
    8d9e:	68fb      	ldr	r3, [r7, #12]
    8da0:	68da      	ldr	r2, [r3, #12]
    8da2:	68fb      	ldr	r3, [r7, #12]
    8da4:	68db      	ldr	r3, [r3, #12]
    8da6:	4610      	mov	r0, r2
    8da8:	4619      	mov	r1, r3
    8daa:	f014 f899 	bl	1cee0 <__aeabi_fmul>
    8dae:	4603      	mov	r3, r0
    8db0:	4618      	mov	r0, r3
    8db2:	6bf9      	ldr	r1, [r7, #60]
    8db4:	f014 f948 	bl	1d048 <__aeabi_fdiv>
    8db8:	4603      	mov	r3, r0
    8dba:	4618      	mov	r0, r3
    8dbc:	f013 fc1e 	bl	1c5fc <__aeabi_f2d>
    8dc0:	4604      	mov	r4, r0
    8dc2:	460d      	mov	r5, r1
    8dc4:	6bf8      	ldr	r0, [r7, #60]
    8dc6:	f013 fc19 	bl	1c5fc <__aeabi_f2d>
    8dca:	4602      	mov	r2, r0
    8dcc:	460b      	mov	r3, r1
    8dce:	4610      	mov	r0, r2
    8dd0:	4619      	mov	r1, r3
    8dd2:	f04f 0200 	mov.w	r2, #0	; 0x0
    8dd6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    8dda:	f013 fc63 	bl	1c6a4 <__aeabi_dmul>
    8dde:	4602      	mov	r2, r0
    8de0:	460b      	mov	r3, r1
    8de2:	4620      	mov	r0, r4
    8de4:	4629      	mov	r1, r5
    8de6:	f013 faab 	bl	1c340 <__adddf3>
    8dea:	4602      	mov	r2, r0
    8dec:	460b      	mov	r3, r1
    8dee:	4614      	mov	r4, r2
    8df0:	461d      	mov	r5, r3
    8df2:	f04f 0300 	mov.w	r3, #0	; 0x0
    8df6:	f887 3057 	strb.w	r3, [r7, #87]
    8dfa:	4640      	mov	r0, r8
    8dfc:	4649      	mov	r1, r9
    8dfe:	4622      	mov	r2, r4
    8e00:	462b      	mov	r3, r5
    8e02:	f013 febf 	bl	1cb84 <__aeabi_dcmplt>
    8e06:	4603      	mov	r3, r0
    8e08:	2b00      	cmp	r3, #0
    8e0a:	d003      	beq.n	8e14 <_ZN18CommandTournerVers6updateEv+0x1d4>
    8e0c:	f04f 0301 	mov.w	r3, #1	; 0x1
    8e10:	f887 3057 	strb.w	r3, [r7, #87]
        if (diffAng > 0)
    8e14:	6d38      	ldr	r0, [r7, #80]
    8e16:	494e      	ldr	r1, [pc, #312]	(8f50 <_ZN18CommandTournerVers6updateEv+0x310>)
    8e18:	f014 fa1c 	bl	1d254 <__aeabi_fcmpgt>
    8e1c:	4603      	mov	r3, r0
    8e1e:	2b00      	cmp	r3, #0
    8e20:	d03c      	beq.n	8e9c <_ZN18CommandTournerVers6updateEv+0x25c>
        {
            if (!hasToDecelerate)
    8e22:	f897 3057 	ldrb.w	r3, [r7, #87]
    8e26:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    8e2a:	b2db      	uxtb	r3, r3
    8e2c:	2b00      	cmp	r3, #0
    8e2e:	d00a      	beq.n	8e46 <_ZN18CommandTournerVers6updateEv+0x206>
                angSpeed += accAngMax;
    8e30:	68fb      	ldr	r3, [r7, #12]
    8e32:	68db      	ldr	r3, [r3, #12]
    8e34:	4618      	mov	r0, r3
    8e36:	6bf9      	ldr	r1, [r7, #60]
    8e38:	f013 ff4a 	bl	1ccd0 <__addsf3>
    8e3c:	4603      	mov	r3, r0
    8e3e:	461a      	mov	r2, r3
    8e40:	68fb      	ldr	r3, [r7, #12]
    8e42:	60da      	str	r2, [r3, #12]
    8e44:	e01d      	b.n	8e82 <_ZN18CommandTournerVers6updateEv+0x242>
            else if (angSpeed > accAngMax*2)
    8e46:	68fb      	ldr	r3, [r7, #12]
    8e48:	68dc      	ldr	r4, [r3, #12]
    8e4a:	6bfb      	ldr	r3, [r7, #60]
    8e4c:	4618      	mov	r0, r3
    8e4e:	4619      	mov	r1, r3
    8e50:	f013 ff3e 	bl	1ccd0 <__addsf3>
    8e54:	4603      	mov	r3, r0
    8e56:	4620      	mov	r0, r4
    8e58:	4619      	mov	r1, r3
    8e5a:	f014 f9fb 	bl	1d254 <__aeabi_fcmpgt>
    8e5e:	4603      	mov	r3, r0
    8e60:	2b00      	cmp	r3, #0
    8e62:	d00e      	beq.n	8e82 <_ZN18CommandTournerVers6updateEv+0x242>
                angSpeed -= accAngMax*2;
    8e64:	68fb      	ldr	r3, [r7, #12]
    8e66:	68dc      	ldr	r4, [r3, #12]
    8e68:	6bf8      	ldr	r0, [r7, #60]
    8e6a:	493a      	ldr	r1, [pc, #232]	(8f54 <_ZN18CommandTournerVers6updateEv+0x314>)
    8e6c:	f014 f838 	bl	1cee0 <__aeabi_fmul>
    8e70:	4603      	mov	r3, r0
    8e72:	4620      	mov	r0, r4
    8e74:	4619      	mov	r1, r3
    8e76:	f013 ff2b 	bl	1ccd0 <__addsf3>
    8e7a:	4603      	mov	r3, r0
    8e7c:	461a      	mov	r2, r3
    8e7e:	68fb      	ldr	r3, [r7, #12]
    8e80:	60da      	str	r2, [r3, #12]

            if (angSpeed > vitAngMax)
    8e82:	68fb      	ldr	r3, [r7, #12]
    8e84:	68db      	ldr	r3, [r3, #12]
    8e86:	4618      	mov	r0, r3
    8e88:	6c39      	ldr	r1, [r7, #64]
    8e8a:	f014 f9e3 	bl	1d254 <__aeabi_fcmpgt>
    8e8e:	4603      	mov	r3, r0
    8e90:	2b00      	cmp	r3, #0
    8e92:	d052      	beq.n	8f3a <_ZN18CommandTournerVers6updateEv+0x2fa>
                angSpeed = vitAngMax;
    8e94:	68fa      	ldr	r2, [r7, #12]
    8e96:	6c3b      	ldr	r3, [r7, #64]
    8e98:	60d3      	str	r3, [r2, #12]
    8e9a:	e04e      	b.n	8f3a <_ZN18CommandTournerVers6updateEv+0x2fa>
        }
        else
        {
            if (!hasToDecelerate)
    8e9c:	f897 3057 	ldrb.w	r3, [r7, #87]
    8ea0:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    8ea4:	b2db      	uxtb	r3, r3
    8ea6:	2b00      	cmp	r3, #0
    8ea8:	d00a      	beq.n	8ec0 <_ZN18CommandTournerVers6updateEv+0x280>
                angSpeed -= accAngMax;
    8eaa:	68fb      	ldr	r3, [r7, #12]
    8eac:	68db      	ldr	r3, [r3, #12]
    8eae:	4618      	mov	r0, r3
    8eb0:	6bf9      	ldr	r1, [r7, #60]
    8eb2:	f013 ff0b 	bl	1cccc <__aeabi_fsub>
    8eb6:	4603      	mov	r3, r0
    8eb8:	461a      	mov	r2, r3
    8eba:	68fb      	ldr	r3, [r7, #12]
    8ebc:	60da      	str	r2, [r3, #12]
    8ebe:	e01d      	b.n	8efc <_ZN18CommandTournerVers6updateEv+0x2bc>
            else if (angSpeed < -accAngMax*2)
    8ec0:	68fb      	ldr	r3, [r7, #12]
    8ec2:	68dc      	ldr	r4, [r3, #12]
    8ec4:	6bf8      	ldr	r0, [r7, #60]
    8ec6:	4923      	ldr	r1, [pc, #140]	(8f54 <_ZN18CommandTournerVers6updateEv+0x314>)
    8ec8:	f014 f80a 	bl	1cee0 <__aeabi_fmul>
    8ecc:	4603      	mov	r3, r0
    8ece:	4620      	mov	r0, r4
    8ed0:	4619      	mov	r1, r3
    8ed2:	f014 f9a1 	bl	1d218 <__aeabi_fcmplt>
    8ed6:	4603      	mov	r3, r0
    8ed8:	2b00      	cmp	r3, #0
    8eda:	d00f      	beq.n	8efc <_ZN18CommandTournerVers6updateEv+0x2bc>
                angSpeed += accAngMax*2;
    8edc:	68fb      	ldr	r3, [r7, #12]
    8ede:	68dc      	ldr	r4, [r3, #12]
    8ee0:	6bfb      	ldr	r3, [r7, #60]
    8ee2:	4618      	mov	r0, r3
    8ee4:	4619      	mov	r1, r3
    8ee6:	f013 fef3 	bl	1ccd0 <__addsf3>
    8eea:	4603      	mov	r3, r0
    8eec:	4620      	mov	r0, r4
    8eee:	4619      	mov	r1, r3
    8ef0:	f013 feee 	bl	1ccd0 <__addsf3>
    8ef4:	4603      	mov	r3, r0
    8ef6:	461a      	mov	r2, r3
    8ef8:	68fb      	ldr	r3, [r7, #12]
    8efa:	60da      	str	r2, [r3, #12]

            if (angSpeed < -vitAngMax)
    8efc:	68fb      	ldr	r3, [r7, #12]
    8efe:	68da      	ldr	r2, [r3, #12]
    8f00:	6c3b      	ldr	r3, [r7, #64]
    8f02:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    8f06:	4610      	mov	r0, r2
    8f08:	4619      	mov	r1, r3
    8f0a:	f014 f985 	bl	1d218 <__aeabi_fcmplt>
    8f0e:	4603      	mov	r3, r0
    8f10:	2b00      	cmp	r3, #0
    8f12:	d012      	beq.n	8f3a <_ZN18CommandTournerVers6updateEv+0x2fa>
                angSpeed = -vitAngMax;
    8f14:	6c3b      	ldr	r3, [r7, #64]
    8f16:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    8f1a:	68fb      	ldr	r3, [r7, #12]
    8f1c:	60da      	str	r2, [r3, #12]
    8f1e:	e00c      	b.n	8f3a <_ZN18CommandTournerVers6updateEv+0x2fa>
        }
    }
    else
    {
        angSpeed = diffAng*vitAngMax/angleVitesseMax;
    8f20:	6d38      	ldr	r0, [r7, #80]
    8f22:	6c39      	ldr	r1, [r7, #64]
    8f24:	f013 ffdc 	bl	1cee0 <__aeabi_fmul>
    8f28:	4603      	mov	r3, r0
    8f2a:	4618      	mov	r0, r3
    8f2c:	6c79      	ldr	r1, [r7, #68]
    8f2e:	f014 f88b 	bl	1d048 <__aeabi_fdiv>
    8f32:	4603      	mov	r3, r0
    8f34:	461a      	mov	r2, r3
    8f36:	68fb      	ldr	r3, [r7, #12]
    8f38:	60da      	str	r2, [r3, #12]
            angSpeed = sqrt(2.0f*diff*accAngMax);
        else
            angSpeed = -sqrt(-2.0f*diff*accAngMax);
    }*/

}
    8f3a:	f107 0758 	add.w	r7, r7, #88	; 0x58
    8f3e:	46bd      	mov	sp, r7
    8f40:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    8f44:	3983126f 	.word	0x3983126f
    8f48:	3f000000 	.word	0x3f000000
    8f4c:	20000574 	.word	0x20000574
    8f50:	00000000 	.word	0x00000000
    8f54:	c0000000 	.word	0xc0000000

00008f58 <_ZN18CommandTournerVersC1Eff>:
    maxAngSpeed = maxSpeed;
}

//#include <QDebug>

CommandTournerVers::CommandTournerVers(Angle a, float maxSpeed)
    8f58:	b590      	push	{r4, r7, lr}
    8f5a:	b087      	sub	sp, #28
    8f5c:	af00      	add	r7, sp, #0
    8f5e:	60f8      	str	r0, [r7, #12]
    8f60:	60b9      	str	r1, [r7, #8]
    8f62:	607a      	str	r2, [r7, #4]
    : Command()
    8f64:	68fb      	ldr	r3, [r7, #12]
    8f66:	4618      	mov	r0, r3
    8f68:	f7ff f836 	bl	7fd8 <_ZN7CommandC2Ev>
    8f6c:	68fa      	ldr	r2, [r7, #12]
    8f6e:	4b19      	ldr	r3, [pc, #100]	(8fd4 <_ZN18CommandTournerVersC1Eff+0x7c>)
    8f70:	6013      	str	r3, [r2, #0]
    8f72:	68fb      	ldr	r3, [r7, #12]
    8f74:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8f78:	4618      	mov	r0, r3
    8f7a:	f005 ff13 	bl	eda4 <_ZN8PositionC1Ev>
{
    but = Position();
    8f7e:	68fb      	ldr	r3, [r7, #12]
    8f80:	f103 0404 	add.w	r4, r3, #4	; 0x4
    8f84:	f107 0310 	add.w	r3, r7, #16	; 0x10
    8f88:	4618      	mov	r0, r3
    8f8a:	f005 ff0b 	bl	eda4 <_ZN8PositionC1Ev>
    8f8e:	4620      	mov	r0, r4
    8f90:	f107 0310 	add.w	r3, r7, #16	; 0x10
    8f94:	e893 0006 	ldmia.w	r3, {r1, r2}
    8f98:	f005 ffc0 	bl	ef1c <_ZN8PositionaSES_>
    butAngle = a;
    8f9c:	68fa      	ldr	r2, [r7, #12]
    8f9e:	68bb      	ldr	r3, [r7, #8]
    8fa0:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    8fa2:	68fa      	ldr	r2, [r7, #12]
    8fa4:	4b0c      	ldr	r3, [pc, #48]	(8fd8 <_ZN18CommandTournerVersC1Eff+0x80>)
    8fa6:	60d3      	str	r3, [r2, #12]
    useAngle = true;
    8fa8:	68fa      	ldr	r2, [r7, #12]
    8faa:	f04f 0301 	mov.w	r3, #1	; 0x1
    8fae:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    8fb0:	68fa      	ldr	r2, [r7, #12]
    8fb2:	f04f 0300 	mov.w	r3, #0	; 0x0
    8fb6:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    8fb8:	68fa      	ldr	r2, [r7, #12]
    8fba:	f04f 0300 	mov.w	r3, #0	; 0x0
    8fbe:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    8fc0:	68fa      	ldr	r2, [r7, #12]
    8fc2:	687b      	ldr	r3, [r7, #4]
    8fc4:	61d3      	str	r3, [r2, #28]
}
    8fc6:	68fb      	ldr	r3, [r7, #12]
    8fc8:	4618      	mov	r0, r3
    8fca:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    8fce:	46bd      	mov	sp, r7
    8fd0:	bd90      	pop	{r4, r7, pc}
    8fd2:	46c0      	nop			(mov r8, r8)
    8fd4:	00023f50 	.word	0x00023f50
    8fd8:	00000000 	.word	0x00000000

00008fdc <_ZN18CommandTournerVersC2Eff>:
    maxAngSpeed = maxSpeed;
}

//#include <QDebug>

CommandTournerVers::CommandTournerVers(Angle a, float maxSpeed)
    8fdc:	b590      	push	{r4, r7, lr}
    8fde:	b087      	sub	sp, #28
    8fe0:	af00      	add	r7, sp, #0
    8fe2:	60f8      	str	r0, [r7, #12]
    8fe4:	60b9      	str	r1, [r7, #8]
    8fe6:	607a      	str	r2, [r7, #4]
    : Command()
    8fe8:	68fb      	ldr	r3, [r7, #12]
    8fea:	4618      	mov	r0, r3
    8fec:	f7fe fff4 	bl	7fd8 <_ZN7CommandC2Ev>
    8ff0:	68fa      	ldr	r2, [r7, #12]
    8ff2:	4b19      	ldr	r3, [pc, #100]	(9058 <_ZN18CommandTournerVersC2Eff+0x7c>)
    8ff4:	6013      	str	r3, [r2, #0]
    8ff6:	68fb      	ldr	r3, [r7, #12]
    8ff8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8ffc:	4618      	mov	r0, r3
    8ffe:	f005 fed1 	bl	eda4 <_ZN8PositionC1Ev>
{
    but = Position();
    9002:	68fb      	ldr	r3, [r7, #12]
    9004:	f103 0404 	add.w	r4, r3, #4	; 0x4
    9008:	f107 0310 	add.w	r3, r7, #16	; 0x10
    900c:	4618      	mov	r0, r3
    900e:	f005 fec9 	bl	eda4 <_ZN8PositionC1Ev>
    9012:	4620      	mov	r0, r4
    9014:	f107 0310 	add.w	r3, r7, #16	; 0x10
    9018:	e893 0006 	ldmia.w	r3, {r1, r2}
    901c:	f005 ff7e 	bl	ef1c <_ZN8PositionaSES_>
    butAngle = a;
    9020:	68fa      	ldr	r2, [r7, #12]
    9022:	68bb      	ldr	r3, [r7, #8]
    9024:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    9026:	68fa      	ldr	r2, [r7, #12]
    9028:	4b0c      	ldr	r3, [pc, #48]	(905c <_ZN18CommandTournerVersC2Eff+0x80>)
    902a:	60d3      	str	r3, [r2, #12]
    useAngle = true;
    902c:	68fa      	ldr	r2, [r7, #12]
    902e:	f04f 0301 	mov.w	r3, #1	; 0x1
    9032:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    9034:	68fa      	ldr	r2, [r7, #12]
    9036:	f04f 0300 	mov.w	r3, #0	; 0x0
    903a:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    903c:	68fa      	ldr	r2, [r7, #12]
    903e:	f04f 0300 	mov.w	r3, #0	; 0x0
    9042:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    9044:	68fa      	ldr	r2, [r7, #12]
    9046:	687b      	ldr	r3, [r7, #4]
    9048:	61d3      	str	r3, [r2, #28]
}
    904a:	68fb      	ldr	r3, [r7, #12]
    904c:	4618      	mov	r0, r3
    904e:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    9052:	46bd      	mov	sp, r7
    9054:	bd90      	pop	{r4, r7, pc}
    9056:	46c0      	nop			(mov r8, r8)
    9058:	00023f50 	.word	0x00023f50
    905c:	00000000 	.word	0x00000000

00009060 <_ZN18CommandTournerVersC1E8Positionf>:

    ////////////////////////////////
    //    CommandTournerVers      //
    ////////////////////////////////

CommandTournerVers::CommandTournerVers(Position p, float maxSpeed)
    9060:	b580      	push	{r7, lr}
    9062:	b084      	sub	sp, #16
    9064:	af00      	add	r7, sp, #0
    9066:	60f8      	str	r0, [r7, #12]
    9068:	f107 0004 	add.w	r0, r7, #4	; 0x4
    906c:	e880 0006 	stmia.w	r0, {r1, r2}
    9070:	603b      	str	r3, [r7, #0]
    : Command()
    9072:	68fb      	ldr	r3, [r7, #12]
    9074:	4618      	mov	r0, r3
    9076:	f7fe ffaf 	bl	7fd8 <_ZN7CommandC2Ev>
    907a:	68fa      	ldr	r2, [r7, #12]
    907c:	4b16      	ldr	r3, [pc, #88]	(90d8 <_ZN18CommandTournerVersC1E8Positionf+0x78>)
    907e:	6013      	str	r3, [r2, #0]
    9080:	68fb      	ldr	r3, [r7, #12]
    9082:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9086:	4618      	mov	r0, r3
    9088:	f005 fe8c 	bl	eda4 <_ZN8PositionC1Ev>
{
    but = p;
    908c:	68fb      	ldr	r3, [r7, #12]
    908e:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9092:	4618      	mov	r0, r3
    9094:	f107 0304 	add.w	r3, r7, #4	; 0x4
    9098:	e893 0006 	ldmia.w	r3, {r1, r2}
    909c:	f005 ff3e 	bl	ef1c <_ZN8PositionaSES_>
    butAngle = 0;
    90a0:	68fa      	ldr	r2, [r7, #12]
    90a2:	4b0e      	ldr	r3, [pc, #56]	(90dc <_ZN18CommandTournerVersC1E8Positionf+0x7c>)
    90a4:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    90a6:	68fa      	ldr	r2, [r7, #12]
    90a8:	4b0c      	ldr	r3, [pc, #48]	(90dc <_ZN18CommandTournerVersC1E8Positionf+0x7c>)
    90aa:	60d3      	str	r3, [r2, #12]
    useAngle = false;
    90ac:	68fa      	ldr	r2, [r7, #12]
    90ae:	f04f 0300 	mov.w	r3, #0	; 0x0
    90b2:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    90b4:	68fa      	ldr	r2, [r7, #12]
    90b6:	f04f 0300 	mov.w	r3, #0	; 0x0
    90ba:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    90bc:	68fa      	ldr	r2, [r7, #12]
    90be:	f04f 0300 	mov.w	r3, #0	; 0x0
    90c2:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    90c4:	68fa      	ldr	r2, [r7, #12]
    90c6:	683b      	ldr	r3, [r7, #0]
    90c8:	61d3      	str	r3, [r2, #28]
}
    90ca:	68fb      	ldr	r3, [r7, #12]
    90cc:	4618      	mov	r0, r3
    90ce:	f107 0710 	add.w	r7, r7, #16	; 0x10
    90d2:	46bd      	mov	sp, r7
    90d4:	bd80      	pop	{r7, pc}
    90d6:	46c0      	nop			(mov r8, r8)
    90d8:	00023f50 	.word	0x00023f50
    90dc:	00000000 	.word	0x00000000

000090e0 <_ZN18CommandTournerVersC2E8Positionf>:

    ////////////////////////////////
    //    CommandTournerVers      //
    ////////////////////////////////

CommandTournerVers::CommandTournerVers(Position p, float maxSpeed)
    90e0:	b580      	push	{r7, lr}
    90e2:	b084      	sub	sp, #16
    90e4:	af00      	add	r7, sp, #0
    90e6:	60f8      	str	r0, [r7, #12]
    90e8:	f107 0004 	add.w	r0, r7, #4	; 0x4
    90ec:	e880 0006 	stmia.w	r0, {r1, r2}
    90f0:	603b      	str	r3, [r7, #0]
    : Command()
    90f2:	68fb      	ldr	r3, [r7, #12]
    90f4:	4618      	mov	r0, r3
    90f6:	f7fe ff6f 	bl	7fd8 <_ZN7CommandC2Ev>
    90fa:	68fa      	ldr	r2, [r7, #12]
    90fc:	4b16      	ldr	r3, [pc, #88]	(9158 <_ZN18CommandTournerVersC2E8Positionf+0x78>)
    90fe:	6013      	str	r3, [r2, #0]
    9100:	68fb      	ldr	r3, [r7, #12]
    9102:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9106:	4618      	mov	r0, r3
    9108:	f005 fe4c 	bl	eda4 <_ZN8PositionC1Ev>
{
    but = p;
    910c:	68fb      	ldr	r3, [r7, #12]
    910e:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9112:	4618      	mov	r0, r3
    9114:	f107 0304 	add.w	r3, r7, #4	; 0x4
    9118:	e893 0006 	ldmia.w	r3, {r1, r2}
    911c:	f005 fefe 	bl	ef1c <_ZN8PositionaSES_>
    butAngle = 0;
    9120:	68fa      	ldr	r2, [r7, #12]
    9122:	4b0e      	ldr	r3, [pc, #56]	(915c <_ZN18CommandTournerVersC2E8Positionf+0x7c>)
    9124:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    9126:	68fa      	ldr	r2, [r7, #12]
    9128:	4b0c      	ldr	r3, [pc, #48]	(915c <_ZN18CommandTournerVersC2E8Positionf+0x7c>)
    912a:	60d3      	str	r3, [r2, #12]
    useAngle = false;
    912c:	68fa      	ldr	r2, [r7, #12]
    912e:	f04f 0300 	mov.w	r3, #0	; 0x0
    9132:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    9134:	68fa      	ldr	r2, [r7, #12]
    9136:	f04f 0300 	mov.w	r3, #0	; 0x0
    913a:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    913c:	68fa      	ldr	r2, [r7, #12]
    913e:	f04f 0300 	mov.w	r3, #0	; 0x0
    9142:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    9144:	68fa      	ldr	r2, [r7, #12]
    9146:	683b      	ldr	r3, [r7, #0]
    9148:	61d3      	str	r3, [r2, #28]
}
    914a:	68fb      	ldr	r3, [r7, #12]
    914c:	4618      	mov	r0, r3
    914e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    9152:	46bd      	mov	sp, r7
    9154:	bd80      	pop	{r7, pc}
    9156:	46c0      	nop			(mov r8, r8)
    9158:	00023f50 	.word	0x00023f50
    915c:	00000000 	.word	0x00000000

00009160 <_ZN13CommandAllerAC1E8Positionbfff>:

    ////////////////////////////////
    //       CommandAllerA        //
    ////////////////////////////////

CommandAllerA::CommandAllerA(Position p, bool reculer, float vitesseLineaireMax, float vitesseFin, float precisionAngle)
    9160:	b580      	push	{r7, lr}
    9162:	b084      	sub	sp, #16
    9164:	af00      	add	r7, sp, #0
    9166:	60f8      	str	r0, [r7, #12]
    9168:	f107 0004 	add.w	r0, r7, #4	; 0x4
    916c:	e880 0006 	stmia.w	r0, {r1, r2}
    9170:	70fb      	strb	r3, [r7, #3]
    : Command()
    9172:	68fb      	ldr	r3, [r7, #12]
    9174:	4618      	mov	r0, r3
    9176:	f7fe ff2f 	bl	7fd8 <_ZN7CommandC2Ev>
    917a:	68fa      	ldr	r2, [r7, #12]
    917c:	4b21      	ldr	r3, [pc, #132]	(9204 <_ZN13CommandAllerAC1E8Positionbfff+0xa4>)
    917e:	6013      	str	r3, [r2, #0]
    9180:	68fb      	ldr	r3, [r7, #12]
    9182:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9186:	4618      	mov	r0, r3
    9188:	f005 fe0c 	bl	eda4 <_ZN8PositionC1Ev>
{
    but = p;
    918c:	68fb      	ldr	r3, [r7, #12]
    918e:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9192:	4618      	mov	r0, r3
    9194:	f107 0304 	add.w	r3, r7, #4	; 0x4
    9198:	e893 0006 	ldmia.w	r3, {r1, r2}
    919c:	f005 febe 	bl	ef1c <_ZN8PositionaSES_>
    vitesseLinMax = vitesseLineaireMax;
    91a0:	68fa      	ldr	r2, [r7, #12]
    91a2:	69bb      	ldr	r3, [r7, #24]
    91a4:	60d3      	str	r3, [r2, #12]
    vFin2 = vitesseFin*vitesseFin;
    91a6:	69f8      	ldr	r0, [r7, #28]
    91a8:	69f9      	ldr	r1, [r7, #28]
    91aa:	f013 fe99 	bl	1cee0 <__aeabi_fmul>
    91ae:	4603      	mov	r3, r0
    91b0:	461a      	mov	r2, r3
    91b2:	68fb      	ldr	r3, [r7, #12]
    91b4:	611a      	str	r2, [r3, #16]
    m_reculer = reculer;
    91b6:	68fa      	ldr	r2, [r7, #12]
    91b8:	78fb      	ldrb	r3, [r7, #3]
    91ba:	f882 3020 	strb.w	r3, [r2, #32]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    91be:	4b12      	ldr	r3, [pc, #72]	(9208 <_ZN13CommandAllerAC1E8Positionbfff+0xa8>)
    91c0:	681b      	ldr	r3, [r3, #0]
    91c2:	4618      	mov	r0, r3
    91c4:	f000 fe00 	bl	9dc8 <_ZNK9Odometrie18getVitesseLineaireEv>
    91c8:	4602      	mov	r2, r0
    91ca:	68fb      	ldr	r3, [r7, #12]
    91cc:	619a      	str	r2, [r3, #24]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    91ce:	4b0e      	ldr	r3, [pc, #56]	(9208 <_ZN13CommandAllerAC1E8Positionbfff+0xa8>)
    91d0:	681b      	ldr	r3, [r3, #0]
    91d2:	4618      	mov	r0, r3
    91d4:	f000 fdec 	bl	9db0 <_ZNK9Odometrie19getVitesseAngulaireEv>
    91d8:	4602      	mov	r2, r0
    91da:	68fb      	ldr	r3, [r7, #12]
    91dc:	61da      	str	r2, [r3, #28]
    bonAngle = false;
    91de:	68fa      	ldr	r2, [r7, #12]
    91e0:	f04f 0300 	mov.w	r3, #0	; 0x0
    91e4:	7513      	strb	r3, [r2, #20]
    this->precisionAngle = -1.f;//precisionAngle;
    91e6:	68fa      	ldr	r2, [r7, #12]
    91e8:	4b08      	ldr	r3, [pc, #32]	(920c <_ZN13CommandAllerAC1E8Positionbfff+0xac>)
    91ea:	62d3      	str	r3, [r2, #44]

    m_fini = false;
    91ec:	68fa      	ldr	r2, [r7, #12]
    91ee:	f04f 0300 	mov.w	r3, #0	; 0x0
    91f2:	f882 3028 	strb.w	r3, [r2, #40]
}
    91f6:	68fb      	ldr	r3, [r7, #12]
    91f8:	4618      	mov	r0, r3
    91fa:	f107 0710 	add.w	r7, r7, #16	; 0x10
    91fe:	46bd      	mov	sp, r7
    9200:	bd80      	pop	{r7, pc}
    9202:	46c0      	nop			(mov r8, r8)
    9204:	00023f78 	.word	0x00023f78
    9208:	20000574 	.word	0x20000574
    920c:	bf800000 	.word	0xbf800000

00009210 <_ZN13CommandAllerAC2E8Positionbfff>:

    ////////////////////////////////
    //       CommandAllerA        //
    ////////////////////////////////

CommandAllerA::CommandAllerA(Position p, bool reculer, float vitesseLineaireMax, float vitesseFin, float precisionAngle)
    9210:	b580      	push	{r7, lr}
    9212:	b084      	sub	sp, #16
    9214:	af00      	add	r7, sp, #0
    9216:	60f8      	str	r0, [r7, #12]
    9218:	f107 0004 	add.w	r0, r7, #4	; 0x4
    921c:	e880 0006 	stmia.w	r0, {r1, r2}
    9220:	70fb      	strb	r3, [r7, #3]
    : Command()
    9222:	68fb      	ldr	r3, [r7, #12]
    9224:	4618      	mov	r0, r3
    9226:	f7fe fed7 	bl	7fd8 <_ZN7CommandC2Ev>
    922a:	68fa      	ldr	r2, [r7, #12]
    922c:	4b21      	ldr	r3, [pc, #132]	(92b4 <_ZN13CommandAllerAC2E8Positionbfff+0xa4>)
    922e:	6013      	str	r3, [r2, #0]
    9230:	68fb      	ldr	r3, [r7, #12]
    9232:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9236:	4618      	mov	r0, r3
    9238:	f005 fdb4 	bl	eda4 <_ZN8PositionC1Ev>
{
    but = p;
    923c:	68fb      	ldr	r3, [r7, #12]
    923e:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9242:	4618      	mov	r0, r3
    9244:	f107 0304 	add.w	r3, r7, #4	; 0x4
    9248:	e893 0006 	ldmia.w	r3, {r1, r2}
    924c:	f005 fe66 	bl	ef1c <_ZN8PositionaSES_>
    vitesseLinMax = vitesseLineaireMax;
    9250:	68fa      	ldr	r2, [r7, #12]
    9252:	69bb      	ldr	r3, [r7, #24]
    9254:	60d3      	str	r3, [r2, #12]
    vFin2 = vitesseFin*vitesseFin;
    9256:	69f8      	ldr	r0, [r7, #28]
    9258:	69f9      	ldr	r1, [r7, #28]
    925a:	f013 fe41 	bl	1cee0 <__aeabi_fmul>
    925e:	4603      	mov	r3, r0
    9260:	461a      	mov	r2, r3
    9262:	68fb      	ldr	r3, [r7, #12]
    9264:	611a      	str	r2, [r3, #16]
    m_reculer = reculer;
    9266:	68fa      	ldr	r2, [r7, #12]
    9268:	78fb      	ldrb	r3, [r7, #3]
    926a:	f882 3020 	strb.w	r3, [r2, #32]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    926e:	4b12      	ldr	r3, [pc, #72]	(92b8 <_ZN13CommandAllerAC2E8Positionbfff+0xa8>)
    9270:	681b      	ldr	r3, [r3, #0]
    9272:	4618      	mov	r0, r3
    9274:	f000 fda8 	bl	9dc8 <_ZNK9Odometrie18getVitesseLineaireEv>
    9278:	4602      	mov	r2, r0
    927a:	68fb      	ldr	r3, [r7, #12]
    927c:	619a      	str	r2, [r3, #24]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    927e:	4b0e      	ldr	r3, [pc, #56]	(92b8 <_ZN13CommandAllerAC2E8Positionbfff+0xa8>)
    9280:	681b      	ldr	r3, [r3, #0]
    9282:	4618      	mov	r0, r3
    9284:	f000 fd94 	bl	9db0 <_ZNK9Odometrie19getVitesseAngulaireEv>
    9288:	4602      	mov	r2, r0
    928a:	68fb      	ldr	r3, [r7, #12]
    928c:	61da      	str	r2, [r3, #28]
    bonAngle = false;
    928e:	68fa      	ldr	r2, [r7, #12]
    9290:	f04f 0300 	mov.w	r3, #0	; 0x0
    9294:	7513      	strb	r3, [r2, #20]
    this->precisionAngle = -1.f;//precisionAngle;
    9296:	68fa      	ldr	r2, [r7, #12]
    9298:	4b08      	ldr	r3, [pc, #32]	(92bc <_ZN13CommandAllerAC2E8Positionbfff+0xac>)
    929a:	62d3      	str	r3, [r2, #44]

    m_fini = false;
    929c:	68fa      	ldr	r2, [r7, #12]
    929e:	f04f 0300 	mov.w	r3, #0	; 0x0
    92a2:	f882 3028 	strb.w	r3, [r2, #40]
}
    92a6:	68fb      	ldr	r3, [r7, #12]
    92a8:	4618      	mov	r0, r3
    92aa:	f107 0710 	add.w	r7, r7, #16	; 0x10
    92ae:	46bd      	mov	sp, r7
    92b0:	bd80      	pop	{r7, pc}
    92b2:	46c0      	nop			(mov r8, r8)
    92b4:	00023f78 	.word	0x00023f78
    92b8:	20000574 	.word	0x20000574
    92bc:	bf800000 	.word	0xbf800000

000092c0 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb>:

    ////////////////////////////////
    //    CommandAllerEnArcA      //
    ////////////////////////////////

CommandAllerEnArcA::CommandAllerEnArcA(Position p, Position c, float v, bool reculer)
    92c0:	b082      	sub	sp, #8
    92c2:	b590      	push	{r4, r7, lr}
    92c4:	b08f      	sub	sp, #60
    92c6:	af00      	add	r7, sp, #0
    92c8:	60f8      	str	r0, [r7, #12]
    92ca:	f107 0004 	add.w	r0, r7, #4	; 0x4
    92ce:	e880 0006 	stmia.w	r0, {r1, r2}
    92d2:	64fb      	str	r3, [r7, #76]
    : Command()
    92d4:	68fb      	ldr	r3, [r7, #12]
    92d6:	4618      	mov	r0, r3
    92d8:	f7fe fe7e 	bl	7fd8 <_ZN7CommandC2Ev>
    92dc:	68fa      	ldr	r2, [r7, #12]
    92de:	4b50      	ldr	r3, [pc, #320]	(9420 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x160>)
    92e0:	6013      	str	r3, [r2, #0]
    92e2:	68fb      	ldr	r3, [r7, #12]
    92e4:	f103 0304 	add.w	r3, r3, #4	; 0x4
    92e8:	4618      	mov	r0, r3
    92ea:	f005 fd5b 	bl	eda4 <_ZN8PositionC1Ev>
    92ee:	68fb      	ldr	r3, [r7, #12]
    92f0:	f103 0320 	add.w	r3, r3, #32	; 0x20
    92f4:	4618      	mov	r0, r3
    92f6:	f005 fd55 	bl	eda4 <_ZN8PositionC1Ev>
{
    but = p;
    92fa:	68fb      	ldr	r3, [r7, #12]
    92fc:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9300:	4618      	mov	r0, r3
    9302:	f107 0304 	add.w	r3, r7, #4	; 0x4
    9306:	e893 0006 	ldmia.w	r3, {r1, r2}
    930a:	f005 fe07 	bl	ef1c <_ZN8PositionaSES_>
    centre = c;
    930e:	68fb      	ldr	r3, [r7, #12]
    9310:	f103 0320 	add.w	r3, r3, #32	; 0x20
    9314:	4618      	mov	r0, r3
    9316:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    931a:	e893 0006 	ldmia.w	r3, {r1, r2}
    931e:	f005 fdfd 	bl	ef1c <_ZN8PositionaSES_>
    vMax = v;
    9322:	68fa      	ldr	r2, [r7, #12]
    9324:	6d7b      	ldr	r3, [r7, #84]
    9326:	60d3      	str	r3, [r2, #12]
    m_reculer = reculer;
    9328:	68fa      	ldr	r2, [r7, #12]
    932a:	f897 3058 	ldrb.w	r3, [r7, #88]
    932e:	7713      	strb	r3, [r2, #28]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    9330:	4b3c      	ldr	r3, [pc, #240]	(9424 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x164>)
    9332:	681b      	ldr	r3, [r3, #0]
    9334:	4618      	mov	r0, r3
    9336:	f000 fd47 	bl	9dc8 <_ZNK9Odometrie18getVitesseLineaireEv>
    933a:	4602      	mov	r2, r0
    933c:	68fb      	ldr	r3, [r7, #12]
    933e:	615a      	str	r2, [r3, #20]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    9340:	4b38      	ldr	r3, [pc, #224]	(9424 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x164>)
    9342:	681b      	ldr	r3, [r3, #0]
    9344:	4618      	mov	r0, r3
    9346:	f000 fd33 	bl	9db0 <_ZNK9Odometrie19getVitesseAngulaireEv>
    934a:	4602      	mov	r2, r0
    934c:	68fb      	ldr	r3, [r7, #12]
    934e:	619a      	str	r2, [r3, #24]
    bonAngle = false;
    9350:	68fa      	ldr	r2, [r7, #12]
    9352:	f04f 0300 	mov.w	r3, #0	; 0x0
    9356:	7413      	strb	r3, [r2, #16]

    m_fini = false;
    9358:	68fa      	ldr	r2, [r7, #12]
    935a:	f04f 0300 	mov.w	r3, #0	; 0x0
    935e:	f882 3028 	strb.w	r3, [r2, #40]

    Position pos = Odometrie::odometrie->getPos().getPosition();
    9362:	4b30      	ldr	r3, [pc, #192]	(9424 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x164>)
    9364:	681a      	ldr	r2, [r3, #0]
    9366:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    936a:	4618      	mov	r0, r3
    936c:	4611      	mov	r1, r2
    936e:	f000 fd43 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    9372:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9376:	f107 021c 	add.w	r2, r7, #28	; 0x1c
    937a:	4618      	mov	r0, r3
    937c:	4611      	mov	r1, r2
    937e:	f005 ff75 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
    float pmcx = pos.x-centre.x;
    9382:	697a      	ldr	r2, [r7, #20]
    9384:	68fb      	ldr	r3, [r7, #12]
    9386:	6a1b      	ldr	r3, [r3, #32]
    9388:	4610      	mov	r0, r2
    938a:	4619      	mov	r1, r3
    938c:	f013 fc9e 	bl	1cccc <__aeabi_fsub>
    9390:	4603      	mov	r3, r0
    9392:	62bb      	str	r3, [r7, #40]
    float pmcy = pos.y-centre.y;
    9394:	69ba      	ldr	r2, [r7, #24]
    9396:	68fb      	ldr	r3, [r7, #12]
    9398:	6a5b      	ldr	r3, [r3, #36]
    939a:	4610      	mov	r0, r2
    939c:	4619      	mov	r1, r3
    939e:	f013 fc95 	bl	1cccc <__aeabi_fsub>
    93a2:	4603      	mov	r3, r0
    93a4:	62fb      	str	r3, [r7, #44]
    float bmcx = but.x-centre.x;
    93a6:	68fb      	ldr	r3, [r7, #12]
    93a8:	685a      	ldr	r2, [r3, #4]
    93aa:	68fb      	ldr	r3, [r7, #12]
    93ac:	6a1b      	ldr	r3, [r3, #32]
    93ae:	4610      	mov	r0, r2
    93b0:	4619      	mov	r1, r3
    93b2:	f013 fc8b 	bl	1cccc <__aeabi_fsub>
    93b6:	4603      	mov	r3, r0
    93b8:	633b      	str	r3, [r7, #48]
    float bmcy = but.y-centre.y;
    93ba:	68fb      	ldr	r3, [r7, #12]
    93bc:	689a      	ldr	r2, [r3, #8]
    93be:	68fb      	ldr	r3, [r7, #12]
    93c0:	6a5b      	ldr	r3, [r3, #36]
    93c2:	4610      	mov	r0, r2
    93c4:	4619      	mov	r1, r3
    93c6:	f013 fc81 	bl	1cccc <__aeabi_fsub>
    93ca:	4603      	mov	r3, r0
    93cc:	637b      	str	r3, [r7, #52]
    if (pmcx*bmcy-pmcy*bmcx > 0.0f)
    93ce:	6ab8      	ldr	r0, [r7, #40]
    93d0:	6b79      	ldr	r1, [r7, #52]
    93d2:	f013 fd85 	bl	1cee0 <__aeabi_fmul>
    93d6:	4603      	mov	r3, r0
    93d8:	461c      	mov	r4, r3
    93da:	6af8      	ldr	r0, [r7, #44]
    93dc:	6b39      	ldr	r1, [r7, #48]
    93de:	f013 fd7f 	bl	1cee0 <__aeabi_fmul>
    93e2:	4603      	mov	r3, r0
    93e4:	4620      	mov	r0, r4
    93e6:	4619      	mov	r1, r3
    93e8:	f013 fc70 	bl	1cccc <__aeabi_fsub>
    93ec:	4603      	mov	r3, r0
    93ee:	4618      	mov	r0, r3
    93f0:	490d      	ldr	r1, [pc, #52]	(9428 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x168>)
    93f2:	f013 ff2f 	bl	1d254 <__aeabi_fcmpgt>
    93f6:	4603      	mov	r3, r0
    93f8:	2b00      	cmp	r3, #0
    93fa:	d004      	beq.n	9406 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x146>
        cote = SGN_POS;
    93fc:	68fa      	ldr	r2, [r7, #12]
    93fe:	f04f 0301 	mov.w	r3, #1	; 0x1
    9402:	62d3      	str	r3, [r2, #44]
    9404:	e003      	b.n	940e <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x14e>
    else
        cote = SGN_NEG;
    9406:	68fa      	ldr	r2, [r7, #12]
    9408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    940c:	62d3      	str	r3, [r2, #44]
}
    940e:	68fb      	ldr	r3, [r7, #12]
    9410:	4618      	mov	r0, r3
    9412:	f107 073c 	add.w	r7, r7, #60	; 0x3c
    9416:	46bd      	mov	sp, r7
    9418:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    941c:	b002      	add	sp, #8
    941e:	4770      	bx	lr
    9420:	00023fa0 	.word	0x00023fa0
    9424:	20000574 	.word	0x20000574
    9428:	00000000 	.word	0x00000000

0000942c <_ZN18CommandAllerEnArcAC2E8PositionS0_fb>:

    ////////////////////////////////
    //    CommandAllerEnArcA      //
    ////////////////////////////////

CommandAllerEnArcA::CommandAllerEnArcA(Position p, Position c, float v, bool reculer)
    942c:	b082      	sub	sp, #8
    942e:	b590      	push	{r4, r7, lr}
    9430:	b08f      	sub	sp, #60
    9432:	af00      	add	r7, sp, #0
    9434:	60f8      	str	r0, [r7, #12]
    9436:	f107 0004 	add.w	r0, r7, #4	; 0x4
    943a:	e880 0006 	stmia.w	r0, {r1, r2}
    943e:	64fb      	str	r3, [r7, #76]
    : Command()
    9440:	68fb      	ldr	r3, [r7, #12]
    9442:	4618      	mov	r0, r3
    9444:	f7fe fdc8 	bl	7fd8 <_ZN7CommandC2Ev>
    9448:	68fa      	ldr	r2, [r7, #12]
    944a:	4b50      	ldr	r3, [pc, #320]	(958c <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x160>)
    944c:	6013      	str	r3, [r2, #0]
    944e:	68fb      	ldr	r3, [r7, #12]
    9450:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9454:	4618      	mov	r0, r3
    9456:	f005 fca5 	bl	eda4 <_ZN8PositionC1Ev>
    945a:	68fb      	ldr	r3, [r7, #12]
    945c:	f103 0320 	add.w	r3, r3, #32	; 0x20
    9460:	4618      	mov	r0, r3
    9462:	f005 fc9f 	bl	eda4 <_ZN8PositionC1Ev>
{
    but = p;
    9466:	68fb      	ldr	r3, [r7, #12]
    9468:	f103 0304 	add.w	r3, r3, #4	; 0x4
    946c:	4618      	mov	r0, r3
    946e:	f107 0304 	add.w	r3, r7, #4	; 0x4
    9472:	e893 0006 	ldmia.w	r3, {r1, r2}
    9476:	f005 fd51 	bl	ef1c <_ZN8PositionaSES_>
    centre = c;
    947a:	68fb      	ldr	r3, [r7, #12]
    947c:	f103 0320 	add.w	r3, r3, #32	; 0x20
    9480:	4618      	mov	r0, r3
    9482:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    9486:	e893 0006 	ldmia.w	r3, {r1, r2}
    948a:	f005 fd47 	bl	ef1c <_ZN8PositionaSES_>
    vMax = v;
    948e:	68fa      	ldr	r2, [r7, #12]
    9490:	6d7b      	ldr	r3, [r7, #84]
    9492:	60d3      	str	r3, [r2, #12]
    m_reculer = reculer;
    9494:	68fa      	ldr	r2, [r7, #12]
    9496:	f897 3058 	ldrb.w	r3, [r7, #88]
    949a:	7713      	strb	r3, [r2, #28]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    949c:	4b3c      	ldr	r3, [pc, #240]	(9590 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x164>)
    949e:	681b      	ldr	r3, [r3, #0]
    94a0:	4618      	mov	r0, r3
    94a2:	f000 fc91 	bl	9dc8 <_ZNK9Odometrie18getVitesseLineaireEv>
    94a6:	4602      	mov	r2, r0
    94a8:	68fb      	ldr	r3, [r7, #12]
    94aa:	615a      	str	r2, [r3, #20]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    94ac:	4b38      	ldr	r3, [pc, #224]	(9590 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x164>)
    94ae:	681b      	ldr	r3, [r3, #0]
    94b0:	4618      	mov	r0, r3
    94b2:	f000 fc7d 	bl	9db0 <_ZNK9Odometrie19getVitesseAngulaireEv>
    94b6:	4602      	mov	r2, r0
    94b8:	68fb      	ldr	r3, [r7, #12]
    94ba:	619a      	str	r2, [r3, #24]
    bonAngle = false;
    94bc:	68fa      	ldr	r2, [r7, #12]
    94be:	f04f 0300 	mov.w	r3, #0	; 0x0
    94c2:	7413      	strb	r3, [r2, #16]

    m_fini = false;
    94c4:	68fa      	ldr	r2, [r7, #12]
    94c6:	f04f 0300 	mov.w	r3, #0	; 0x0
    94ca:	f882 3028 	strb.w	r3, [r2, #40]

    Position pos = Odometrie::odometrie->getPos().getPosition();
    94ce:	4b30      	ldr	r3, [pc, #192]	(9590 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x164>)
    94d0:	681a      	ldr	r2, [r3, #0]
    94d2:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    94d6:	4618      	mov	r0, r3
    94d8:	4611      	mov	r1, r2
    94da:	f000 fc8d 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    94de:	f107 0314 	add.w	r3, r7, #20	; 0x14
    94e2:	f107 021c 	add.w	r2, r7, #28	; 0x1c
    94e6:	4618      	mov	r0, r3
    94e8:	4611      	mov	r1, r2
    94ea:	f005 febf 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
    float pmcx = pos.x-centre.x;
    94ee:	697a      	ldr	r2, [r7, #20]
    94f0:	68fb      	ldr	r3, [r7, #12]
    94f2:	6a1b      	ldr	r3, [r3, #32]
    94f4:	4610      	mov	r0, r2
    94f6:	4619      	mov	r1, r3
    94f8:	f013 fbe8 	bl	1cccc <__aeabi_fsub>
    94fc:	4603      	mov	r3, r0
    94fe:	62bb      	str	r3, [r7, #40]
    float pmcy = pos.y-centre.y;
    9500:	69ba      	ldr	r2, [r7, #24]
    9502:	68fb      	ldr	r3, [r7, #12]
    9504:	6a5b      	ldr	r3, [r3, #36]
    9506:	4610      	mov	r0, r2
    9508:	4619      	mov	r1, r3
    950a:	f013 fbdf 	bl	1cccc <__aeabi_fsub>
    950e:	4603      	mov	r3, r0
    9510:	62fb      	str	r3, [r7, #44]
    float bmcx = but.x-centre.x;
    9512:	68fb      	ldr	r3, [r7, #12]
    9514:	685a      	ldr	r2, [r3, #4]
    9516:	68fb      	ldr	r3, [r7, #12]
    9518:	6a1b      	ldr	r3, [r3, #32]
    951a:	4610      	mov	r0, r2
    951c:	4619      	mov	r1, r3
    951e:	f013 fbd5 	bl	1cccc <__aeabi_fsub>
    9522:	4603      	mov	r3, r0
    9524:	633b      	str	r3, [r7, #48]
    float bmcy = but.y-centre.y;
    9526:	68fb      	ldr	r3, [r7, #12]
    9528:	689a      	ldr	r2, [r3, #8]
    952a:	68fb      	ldr	r3, [r7, #12]
    952c:	6a5b      	ldr	r3, [r3, #36]
    952e:	4610      	mov	r0, r2
    9530:	4619      	mov	r1, r3
    9532:	f013 fbcb 	bl	1cccc <__aeabi_fsub>
    9536:	4603      	mov	r3, r0
    9538:	637b      	str	r3, [r7, #52]
    if (pmcx*bmcy-pmcy*bmcx > 0.0f)
    953a:	6ab8      	ldr	r0, [r7, #40]
    953c:	6b79      	ldr	r1, [r7, #52]
    953e:	f013 fccf 	bl	1cee0 <__aeabi_fmul>
    9542:	4603      	mov	r3, r0
    9544:	461c      	mov	r4, r3
    9546:	6af8      	ldr	r0, [r7, #44]
    9548:	6b39      	ldr	r1, [r7, #48]
    954a:	f013 fcc9 	bl	1cee0 <__aeabi_fmul>
    954e:	4603      	mov	r3, r0
    9550:	4620      	mov	r0, r4
    9552:	4619      	mov	r1, r3
    9554:	f013 fbba 	bl	1cccc <__aeabi_fsub>
    9558:	4603      	mov	r3, r0
    955a:	4618      	mov	r0, r3
    955c:	490d      	ldr	r1, [pc, #52]	(9594 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x168>)
    955e:	f013 fe79 	bl	1d254 <__aeabi_fcmpgt>
    9562:	4603      	mov	r3, r0
    9564:	2b00      	cmp	r3, #0
    9566:	d004      	beq.n	9572 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x146>
        cote = SGN_POS;
    9568:	68fa      	ldr	r2, [r7, #12]
    956a:	f04f 0301 	mov.w	r3, #1	; 0x1
    956e:	62d3      	str	r3, [r2, #44]
    9570:	e003      	b.n	957a <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x14e>
    else
        cote = SGN_NEG;
    9572:	68fa      	ldr	r2, [r7, #12]
    9574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9578:	62d3      	str	r3, [r2, #44]
}
    957a:	68fb      	ldr	r3, [r7, #12]
    957c:	4618      	mov	r0, r3
    957e:	f107 073c 	add.w	r7, r7, #60	; 0x3c
    9582:	46bd      	mov	sp, r7
    9584:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    9588:	b002      	add	sp, #8
    958a:	4770      	bx	lr
    958c:	00023fa0 	.word	0x00023fa0
    9590:	20000574 	.word	0x20000574
    9594:	00000000 	.word	0x00000000

00009598 <_ZN13CommandAllerA6updateEv>:
    this->precisionAngle = -1.f;//precisionAngle;

    m_fini = false;
}

void CommandAllerA::update()
    9598:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    959c:	b09e      	sub	sp, #120
    959e:	af00      	add	r7, sp, #0
    95a0:	6178      	str	r0, [r7, #20]
{
    float accAngMax = ACCELERATION_ANGULAIRE_MAX;
    95a2:	4bcb      	ldr	r3, [pc, #812]	(98d0 <_ZN13CommandAllerA6updateEv+0x338>)
    95a4:	643b      	str	r3, [r7, #64]
    float vitAngMax = VITESSE_ANGULAIRE_MAX;
    95a6:	4bcb      	ldr	r3, [pc, #812]	(98d4 <_ZN13CommandAllerA6updateEv+0x33c>)
    95a8:	647b      	str	r3, [r7, #68]
    float accLinMax = ACCELERATION_LINEAIRE_MAX;
    95aa:	4bcb      	ldr	r3, [pc, #812]	(98d8 <_ZN13CommandAllerA6updateEv+0x340>)
    95ac:	64bb      	str	r3, [r7, #72]
    float decLinMax = DECELERATION_LINEAIRE_MAX;
    95ae:	4bcb      	ldr	r3, [pc, #812]	(98dc <_ZN13CommandAllerA6updateEv+0x344>)
    95b0:	64fb      	str	r3, [r7, #76]
    float vitLinMax = vitesseLinMax;//VITESSE_LINEAIRE_MAX;
    95b2:	697b      	ldr	r3, [r7, #20]
    95b4:	68db      	ldr	r3, [r3, #12]
    95b6:	653b      	str	r3, [r7, #80]

    if(this->getLimit())
    95b8:	f7fe fd7a 	bl	80b0 <_ZN7Command8getLimitEv>
    95bc:	4603      	mov	r3, r0
    95be:	2b00      	cmp	r3, #0
    95c0:	d00b      	beq.n	95da <_ZN13CommandAllerA6updateEv+0x42>
    {
        vitLinMax = vitesseLinMax/3;
    95c2:	697b      	ldr	r3, [r7, #20]
    95c4:	68db      	ldr	r3, [r3, #12]
    95c6:	4618      	mov	r0, r3
    95c8:	49c5      	ldr	r1, [pc, #788]	(98e0 <_ZN13CommandAllerA6updateEv+0x348>)
    95ca:	f013 fd3d 	bl	1d048 <__aeabi_fdiv>
    95ce:	4603      	mov	r3, r0
    95d0:	653b      	str	r3, [r7, #80]
        allumerLED();
    95d2:	f002 ffb7 	bl	c544 <_Z10allumerLEDv>
        allumerLED2();
    95d6:	f002 ffad 	bl	c534 <_Z11allumerLED2v>
    {
        //eteindreLED();
    }

    //float angleVitesseMax = M_PI/10.0f;
    float angleVitesseMax = 0.5f*vitAngMax*vitAngMax/accAngMax;
    95da:	6c78      	ldr	r0, [r7, #68]
    95dc:	49c1      	ldr	r1, [pc, #772]	(98e4 <_ZN13CommandAllerA6updateEv+0x34c>)
    95de:	f013 fc7f 	bl	1cee0 <__aeabi_fmul>
    95e2:	4603      	mov	r3, r0
    95e4:	4618      	mov	r0, r3
    95e6:	6c79      	ldr	r1, [r7, #68]
    95e8:	f013 fc7a 	bl	1cee0 <__aeabi_fmul>
    95ec:	4603      	mov	r3, r0
    95ee:	4618      	mov	r0, r3
    95f0:	6c39      	ldr	r1, [r7, #64]
    95f2:	f013 fd29 	bl	1d048 <__aeabi_fdiv>
    95f6:	4603      	mov	r3, r0
    95f8:	657b      	str	r3, [r7, #84]
    //float distanceVitesseMax = 350.0f;
    float distanceVitesseMax = 0.5f*(vitLinMax*vitLinMax-vFin2)/decLinMax;
    95fa:	6d38      	ldr	r0, [r7, #80]
    95fc:	6d39      	ldr	r1, [r7, #80]
    95fe:	f013 fc6f 	bl	1cee0 <__aeabi_fmul>
    9602:	4603      	mov	r3, r0
    9604:	461a      	mov	r2, r3
    9606:	697b      	ldr	r3, [r7, #20]
    9608:	691b      	ldr	r3, [r3, #16]
    960a:	4610      	mov	r0, r2
    960c:	4619      	mov	r1, r3
    960e:	f013 fb5d 	bl	1cccc <__aeabi_fsub>
    9612:	4603      	mov	r3, r0
    9614:	4618      	mov	r0, r3
    9616:	49b3      	ldr	r1, [pc, #716]	(98e4 <_ZN13CommandAllerA6updateEv+0x34c>)
    9618:	f013 fc62 	bl	1cee0 <__aeabi_fmul>
    961c:	4603      	mov	r3, r0
    961e:	4618      	mov	r0, r3
    9620:	6cf9      	ldr	r1, [r7, #76]
    9622:	f013 fd11 	bl	1d048 <__aeabi_fdiv>
    9626:	4603      	mov	r3, r0
    9628:	65bb      	str	r3, [r7, #88]
    float angle = Odometrie::odometrie->getPos().getAngle();
    962a:	4baf      	ldr	r3, [pc, #700]	(98e8 <_ZN13CommandAllerA6updateEv+0x350>)
    962c:	681a      	ldr	r2, [r3, #0]
    962e:	f107 0328 	add.w	r3, r7, #40	; 0x28
    9632:	4618      	mov	r0, r3
    9634:	4611      	mov	r1, r2
    9636:	f000 fbdf 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    963a:	f107 0328 	add.w	r3, r7, #40	; 0x28
    963e:	4618      	mov	r0, r3
    9640:	f005 fe26 	bl	f290 <_ZNK17PositionPlusAngle8getAngleEv>
    9644:	4603      	mov	r3, r0
    9646:	65fb      	str	r3, [r7, #92]
    Position pos = Odometrie::odometrie->getPos().getPosition();
    9648:	4ba7      	ldr	r3, [pc, #668]	(98e8 <_ZN13CommandAllerA6updateEv+0x350>)
    964a:	681a      	ldr	r2, [r3, #0]
    964c:	f107 0334 	add.w	r3, r7, #52	; 0x34
    9650:	4618      	mov	r0, r3
    9652:	4611      	mov	r1, r2
    9654:	f000 fbd0 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    9658:	f107 0320 	add.w	r3, r7, #32	; 0x20
    965c:	f107 0234 	add.w	r2, r7, #52	; 0x34
    9660:	4618      	mov	r0, r3
    9662:	4611      	mov	r1, r2
    9664:	f005 fe02 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
    Position delta = but-pos;
    9668:	697b      	ldr	r3, [r7, #20]
    966a:	f103 0104 	add.w	r1, r3, #4	; 0x4
    966e:	f107 0318 	add.w	r3, r7, #24	; 0x18
    9672:	f107 0220 	add.w	r2, r7, #32	; 0x20
    9676:	4618      	mov	r0, r3
    9678:	f005 fc2a 	bl	eed0 <_ZNK8PositionmiERKS_>
    float angleVise = atan2(delta.getY(),delta.getX());
    967c:	f107 0318 	add.w	r3, r7, #24	; 0x18
    9680:	4618      	mov	r0, r3
    9682:	f005 fbd7 	bl	ee34 <_ZNK8Position4getYEv>
    9686:	4603      	mov	r3, r0
    9688:	4618      	mov	r0, r3
    968a:	f012 ffb7 	bl	1c5fc <__aeabi_f2d>
    968e:	4604      	mov	r4, r0
    9690:	460d      	mov	r5, r1
    9692:	f107 0318 	add.w	r3, r7, #24	; 0x18
    9696:	4618      	mov	r0, r3
    9698:	f005 fbc0 	bl	ee1c <_ZNK8Position4getXEv>
    969c:	4603      	mov	r3, r0
    969e:	4618      	mov	r0, r3
    96a0:	f012 ffac 	bl	1c5fc <__aeabi_f2d>
    96a4:	4602      	mov	r2, r0
    96a6:	460b      	mov	r3, r1
    96a8:	4620      	mov	r0, r4
    96aa:	4629      	mov	r1, r5
    96ac:	f017 f98c 	bl	209c8 <atan2>
    96b0:	4602      	mov	r2, r0
    96b2:	460b      	mov	r3, r1
    96b4:	4610      	mov	r0, r2
    96b6:	4619      	mov	r1, r3
    96b8:	f013 fab4 	bl	1cc24 <__aeabi_d2f>
    96bc:	4603      	mov	r3, r0
    96be:	663b      	str	r3, [r7, #96]

    if (m_reculer)
    96c0:	697b      	ldr	r3, [r7, #20]
    96c2:	f893 3020 	ldrb.w	r3, [r3, #32]
    96c6:	2b00      	cmp	r3, #0
    96c8:	d012      	beq.n	96f0 <_ZN13CommandAllerA6updateEv+0x158>
        angleVise += M_PI;
    96ca:	6e38      	ldr	r0, [r7, #96]
    96cc:	f012 ff96 	bl	1c5fc <__aeabi_f2d>
    96d0:	4602      	mov	r2, r0
    96d2:	460b      	mov	r3, r1
    96d4:	4610      	mov	r0, r2
    96d6:	4619      	mov	r1, r3
    96d8:	a27b      	add	r2, pc, #492	(adr r2, 98c8 <_ZN13CommandAllerA6updateEv+0x330>)
    96da:	ca0c      	ldmia	r2!, {r2, r3}
    96dc:	f012 fe30 	bl	1c340 <__adddf3>
    96e0:	4602      	mov	r2, r0
    96e2:	460b      	mov	r3, r1
    96e4:	4610      	mov	r0, r2
    96e6:	4619      	mov	r1, r3
    96e8:	f013 fa9c 	bl	1cc24 <__aeabi_d2f>
    96ec:	4603      	mov	r3, r0
    96ee:	663b      	str	r3, [r7, #96]

    float diffAng = diffAngle(angleVise,angle);
    96f0:	6e38      	ldr	r0, [r7, #96]
    96f2:	6df9      	ldr	r1, [r7, #92]
    96f4:	f7fe feac 	bl	8450 <_Z9diffAngleff>
    96f8:	4603      	mov	r3, r0
    96fa:	667b      	str	r3, [r7, #100]

    // reste sur place tant que le robot n'a pas le bon angle
    float angleMaxPourAvancer;
    if (precisionAngle<0.)
    96fc:	697b      	ldr	r3, [r7, #20]
    96fe:	6adb      	ldr	r3, [r3, #44]
    9700:	4618      	mov	r0, r3
    9702:	497a      	ldr	r1, [pc, #488]	(98ec <_ZN13CommandAllerA6updateEv+0x354>)
    9704:	f013 fd88 	bl	1d218 <__aeabi_fcmplt>
    9708:	4603      	mov	r3, r0
    970a:	2b00      	cmp	r3, #0
    970c:	d002      	beq.n	9714 <_ZN13CommandAllerA6updateEv+0x17c>
        angleMaxPourAvancer = M_PI/25.0f;//25.0f;
    970e:	4b78      	ldr	r3, [pc, #480]	(98f0 <_ZN13CommandAllerA6updateEv+0x358>)
    9710:	66bb      	str	r3, [r7, #104]
    9712:	e001      	b.n	9718 <_ZN13CommandAllerA6updateEv+0x180>
    else
        angleMaxPourAvancer = DEGTORAD(3.);//25.0f;
    9714:	4b77      	ldr	r3, [pc, #476]	(98f4 <_ZN13CommandAllerA6updateEv+0x35c>)
    9716:	66bb      	str	r3, [r7, #104]
    if (!bonAngle)
    9718:	697b      	ldr	r3, [r7, #20]
    971a:	7d1b      	ldrb	r3, [r3, #20]
    971c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9720:	b2db      	uxtb	r3, r3
    9722:	2b00      	cmp	r3, #0
    9724:	d01b      	beq.n	975e <_ZN13CommandAllerA6updateEv+0x1c6>
    {
        if (fabs(diffAng) < angleMaxPourAvancer)
    9726:	6e7b      	ldr	r3, [r7, #100]
    9728:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    972c:	4618      	mov	r0, r3
    972e:	6eb9      	ldr	r1, [r7, #104]
    9730:	f013 fd72 	bl	1d218 <__aeabi_fcmplt>
    9734:	4603      	mov	r3, r0
    9736:	2b00      	cmp	r3, #0
    9738:	d007      	beq.n	974a <_ZN13CommandAllerA6updateEv+0x1b2>
        {
            bonAngle = true;
    973a:	697a      	ldr	r2, [r7, #20]
    973c:	f04f 0301 	mov.w	r3, #1	; 0x1
    9740:	7513      	strb	r3, [r2, #20]
            derniereDistance = 1000000.0f;
    9742:	697a      	ldr	r2, [r7, #20]
    9744:	4b6c      	ldr	r3, [pc, #432]	(98f8 <_ZN13CommandAllerA6updateEv+0x360>)
    9746:	6253      	str	r3, [r2, #36]
    9748:	e009      	b.n	975e <_ZN13CommandAllerA6updateEv+0x1c6>
        }
        else
        {
            linSpeed *= 0.95f;
    974a:	697b      	ldr	r3, [r7, #20]
    974c:	699b      	ldr	r3, [r3, #24]
    974e:	4618      	mov	r0, r3
    9750:	496a      	ldr	r1, [pc, #424]	(98fc <_ZN13CommandAllerA6updateEv+0x364>)
    9752:	f013 fbc5 	bl	1cee0 <__aeabi_fmul>
    9756:	4603      	mov	r3, r0
    9758:	461a      	mov	r2, r3
    975a:	697b      	ldr	r3, [r7, #20]
    975c:	619a      	str	r2, [r3, #24]
        }
    }

    // Check sharps
    StrategieV2::setTourneSurSoiMeme((!bonAngle)&&(abs(linSpeed)<0.2f));
    975e:	697b      	ldr	r3, [r7, #20]
    9760:	7d1b      	ldrb	r3, [r3, #20]
    9762:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9766:	b2db      	uxtb	r3, r3
    9768:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    976c:	b2db      	uxtb	r3, r3
    976e:	2b00      	cmp	r3, #0
    9770:	d137      	bne.n	97e2 <_ZN13CommandAllerA6updateEv+0x24a>
    9772:	697b      	ldr	r3, [r7, #20]
    9774:	699b      	ldr	r3, [r3, #24]
    9776:	4618      	mov	r0, r3
    9778:	495c      	ldr	r1, [pc, #368]	(98ec <_ZN13CommandAllerA6updateEv+0x354>)
    977a:	f013 fd6b 	bl	1d254 <__aeabi_fcmpgt>
    977e:	4603      	mov	r3, r0
    9780:	2b00      	cmp	r3, #0
    9782:	d015      	beq.n	97b0 <_ZN13CommandAllerA6updateEv+0x218>
    9784:	697b      	ldr	r3, [r7, #20]
    9786:	699a      	ldr	r2, [r3, #24]
    9788:	f04f 0300 	mov.w	r3, #0	; 0x0
    978c:	71fb      	strb	r3, [r7, #7]
    978e:	4610      	mov	r0, r2
    9790:	4956      	ldr	r1, [pc, #344]	(98ec <_ZN13CommandAllerA6updateEv+0x354>)
    9792:	f013 fd37 	bl	1d204 <__aeabi_fcmpeq>
    9796:	4603      	mov	r3, r0
    9798:	2b00      	cmp	r3, #0
    979a:	d102      	bne.n	97a2 <_ZN13CommandAllerA6updateEv+0x20a>
    979c:	f04f 0301 	mov.w	r3, #1	; 0x1
    97a0:	71fb      	strb	r3, [r7, #7]
    97a2:	79fb      	ldrb	r3, [r7, #7]
    97a4:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    97a8:	b2db      	uxtb	r3, r3
    97aa:	2b00      	cmp	r3, #0
    97ac:	d119      	bne.n	97e2 <_ZN13CommandAllerA6updateEv+0x24a>
    97ae:	e014      	b.n	97da <_ZN13CommandAllerA6updateEv+0x242>
    97b0:	697b      	ldr	r3, [r7, #20]
    97b2:	699a      	ldr	r2, [r3, #24]
    97b4:	f04f 0300 	mov.w	r3, #0	; 0x0
    97b8:	71bb      	strb	r3, [r7, #6]
    97ba:	4610      	mov	r0, r2
    97bc:	4950      	ldr	r1, [pc, #320]	(9900 <_ZN13CommandAllerA6updateEv+0x368>)
    97be:	f013 fd49 	bl	1d254 <__aeabi_fcmpgt>
    97c2:	4603      	mov	r3, r0
    97c4:	2b00      	cmp	r3, #0
    97c6:	d002      	beq.n	97ce <_ZN13CommandAllerA6updateEv+0x236>
    97c8:	f04f 0301 	mov.w	r3, #1	; 0x1
    97cc:	71bb      	strb	r3, [r7, #6]
    97ce:	79bb      	ldrb	r3, [r7, #6]
    97d0:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    97d4:	b2db      	uxtb	r3, r3
    97d6:	2b00      	cmp	r3, #0
    97d8:	d103      	bne.n	97e2 <_ZN13CommandAllerA6updateEv+0x24a>
    97da:	f04f 0301 	mov.w	r3, #1	; 0x1
    97de:	60bb      	str	r3, [r7, #8]
    97e0:	e002      	b.n	97e8 <_ZN13CommandAllerA6updateEv+0x250>
    97e2:	f04f 0300 	mov.w	r3, #0	; 0x0
    97e6:	60bb      	str	r3, [r7, #8]
    97e8:	68b8      	ldr	r0, [r7, #8]
    97ea:	f00e f8fb 	bl	179e4 <_ZN11StrategieV219setTourneSurSoiMemeEb>

    if (linSpeed > 0.2f)
    97ee:	697b      	ldr	r3, [r7, #20]
    97f0:	699b      	ldr	r3, [r3, #24]
    97f2:	4618      	mov	r0, r3
    97f4:	4943      	ldr	r1, [pc, #268]	(9904 <_ZN13CommandAllerA6updateEv+0x36c>)
    97f6:	f013 fd2d 	bl	1d254 <__aeabi_fcmpgt>
    97fa:	4603      	mov	r3, r0
    97fc:	2b00      	cmp	r3, #0
    97fe:	d004      	beq.n	980a <_ZN13CommandAllerA6updateEv+0x272>
        StrategieV2::enableSharpsGroup(true);
    9800:	f04f 0001 	mov.w	r0, #1	; 0x1
    9804:	f00e f992 	bl	17b2c <_ZN11StrategieV217enableSharpsGroupEb>
    9808:	e00f      	b.n	982a <_ZN13CommandAllerA6updateEv+0x292>
    else if (linSpeed < -0.2f)
    980a:	697b      	ldr	r3, [r7, #20]
    980c:	699b      	ldr	r3, [r3, #24]
    980e:	4618      	mov	r0, r3
    9810:	493b      	ldr	r1, [pc, #236]	(9900 <_ZN13CommandAllerA6updateEv+0x368>)
    9812:	f013 fd01 	bl	1d218 <__aeabi_fcmplt>
    9816:	4603      	mov	r3, r0
    9818:	2b00      	cmp	r3, #0
    981a:	d004      	beq.n	9826 <_ZN13CommandAllerA6updateEv+0x28e>
        StrategieV2::enableSharpsGroup(false);
    981c:	f04f 0000 	mov.w	r0, #0	; 0x0
    9820:	f00e f984 	bl	17b2c <_ZN11StrategieV217enableSharpsGroupEb>
    9824:	e001      	b.n	982a <_ZN13CommandAllerA6updateEv+0x292>
    else
        StrategieV2::emptySharpsToCheck();
    9826:	f00e f8b5 	bl	17994 <_ZN11StrategieV218emptySharpsToCheckEv>

    float distanceBut = delta.getNorme();
    982a:	f107 0318 	add.w	r3, r7, #24	; 0x18
    982e:	4618      	mov	r0, r3
    9830:	f005 fc5c 	bl	f0ec <_ZNK8Position8getNormeEv>
    9834:	4603      	mov	r3, r0
    9836:	66fb      	str	r3, [r7, #108]

    bool distanceOk = /*(distanceBut > derniereDistance) || */(distanceBut < 30.0f);
    9838:	f04f 0300 	mov.w	r3, #0	; 0x0
    983c:	f887 3072 	strb.w	r3, [r7, #114]
    9840:	6ef8      	ldr	r0, [r7, #108]
    9842:	4931      	ldr	r1, [pc, #196]	(9908 <_ZN13CommandAllerA6updateEv+0x370>)
    9844:	f013 fce8 	bl	1d218 <__aeabi_fcmplt>
    9848:	4603      	mov	r3, r0
    984a:	2b00      	cmp	r3, #0
    984c:	d003      	beq.n	9856 <_ZN13CommandAllerA6updateEv+0x2be>
    984e:	f04f 0301 	mov.w	r3, #1	; 0x1
    9852:	f887 3072 	strb.w	r3, [r7, #114]
    if (distanceOk)
    {
        //vitAngMax = VITESSE_ANGULAIRE_SLOW_MAX;
        //linSpeed = 0.;
    }
    if (bonAngle && precisionAngle>0.)
    9856:	697b      	ldr	r3, [r7, #20]
    9858:	7d1b      	ldrb	r3, [r3, #20]
    985a:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    985e:	b2db      	uxtb	r3, r3
    9860:	2b00      	cmp	r3, #0
    9862:	d118      	bne.n	9896 <_ZN13CommandAllerA6updateEv+0x2fe>
    9864:	697b      	ldr	r3, [r7, #20]
    9866:	6ada      	ldr	r2, [r3, #44]
    9868:	f04f 0300 	mov.w	r3, #0	; 0x0
    986c:	717b      	strb	r3, [r7, #5]
    986e:	4610      	mov	r0, r2
    9870:	491e      	ldr	r1, [pc, #120]	(98ec <_ZN13CommandAllerA6updateEv+0x354>)
    9872:	f013 fcef 	bl	1d254 <__aeabi_fcmpgt>
    9876:	4603      	mov	r3, r0
    9878:	2b00      	cmp	r3, #0
    987a:	d002      	beq.n	9882 <_ZN13CommandAllerA6updateEv+0x2ea>
    987c:	f04f 0301 	mov.w	r3, #1	; 0x1
    9880:	717b      	strb	r3, [r7, #5]
    9882:	797b      	ldrb	r3, [r7, #5]
    9884:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9888:	b2db      	uxtb	r3, r3
    988a:	2b00      	cmp	r3, #0
    988c:	d103      	bne.n	9896 <_ZN13CommandAllerA6updateEv+0x2fe>
    {
        angSpeed = 0.;
    988e:	697a      	ldr	r2, [r7, #20]
    9890:	4b16      	ldr	r3, [pc, #88]	(98ec <_ZN13CommandAllerA6updateEv+0x354>)
    9892:	61d3      	str	r3, [r2, #28]
    9894:	e126      	b.n	9ae4 <_ZN13CommandAllerA6updateEv+0x54c>
    }
    else if (abs(diffAng) > angleVitesseMax)
    9896:	6e78      	ldr	r0, [r7, #100]
    9898:	4914      	ldr	r1, [pc, #80]	(98ec <_ZN13CommandAllerA6updateEv+0x354>)
    989a:	f013 fcdb 	bl	1d254 <__aeabi_fcmpgt>
    989e:	4603      	mov	r3, r0
    98a0:	2b00      	cmp	r3, #0
    98a2:	d033      	beq.n	990c <_ZN13CommandAllerA6updateEv+0x374>
    98a4:	f04f 0300 	mov.w	r3, #0	; 0x0
    98a8:	713b      	strb	r3, [r7, #4]
    98aa:	6e78      	ldr	r0, [r7, #100]
    98ac:	490f      	ldr	r1, [pc, #60]	(98ec <_ZN13CommandAllerA6updateEv+0x354>)
    98ae:	f013 fca9 	bl	1d204 <__aeabi_fcmpeq>
    98b2:	4603      	mov	r3, r0
    98b4:	2b00      	cmp	r3, #0
    98b6:	d102      	bne.n	98be <_ZN13CommandAllerA6updateEv+0x326>
    98b8:	f04f 0301 	mov.w	r3, #1	; 0x1
    98bc:	713b      	strb	r3, [r7, #4]
    98be:	793b      	ldrb	r3, [r7, #4]
    98c0:	60fb      	str	r3, [r7, #12]
    98c2:	e035      	b.n	9930 <_ZN13CommandAllerA6updateEv+0x398>
    98c4:	46c0      	nop			(mov r8, r8)
    98c6:	46c0      	nop			(mov r8, r8)
    98c8:	54442d18 	.word	0x54442d18
    98cc:	400921fb 	.word	0x400921fb
    98d0:	3983126f 	.word	0x3983126f
    98d4:	3cf5c28f 	.word	0x3cf5c28f
    98d8:	3ccccccd 	.word	0x3ccccccd
    98dc:	3ca3d70a 	.word	0x3ca3d70a
    98e0:	40400000 	.word	0x40400000
    98e4:	3f000000 	.word	0x3f000000
    98e8:	20000574 	.word	0x20000574
    98ec:	00000000 	.word	0x00000000
    98f0:	3e00adfd 	.word	0x3e00adfd
    98f4:	3d567750 	.word	0x3d567750
    98f8:	49742400 	.word	0x49742400
    98fc:	3f733333 	.word	0x3f733333
    9900:	be4ccccd 	.word	0xbe4ccccd
    9904:	3e4ccccd 	.word	0x3e4ccccd
    9908:	41f00000 	.word	0x41f00000
    990c:	6e7b      	ldr	r3, [r7, #100]
    990e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    9912:	f04f 0300 	mov.w	r3, #0	; 0x0
    9916:	70fb      	strb	r3, [r7, #3]
    9918:	4610      	mov	r0, r2
    991a:	6d79      	ldr	r1, [r7, #84]
    991c:	f013 fc9a 	bl	1d254 <__aeabi_fcmpgt>
    9920:	4603      	mov	r3, r0
    9922:	2b00      	cmp	r3, #0
    9924:	d002      	beq.n	992c <_ZN13CommandAllerA6updateEv+0x394>
    9926:	f04f 0301 	mov.w	r3, #1	; 0x1
    992a:	70fb      	strb	r3, [r7, #3]
    992c:	78fb      	ldrb	r3, [r7, #3]
    992e:	60fb      	str	r3, [r7, #12]
    9930:	68fb      	ldr	r3, [r7, #12]
    9932:	2b00      	cmp	r3, #0
    9934:	f000 80c9 	beq.w	9aca <_ZN13CommandAllerA6updateEv+0x532>
    {
        bool hasToDecelerate = /*(!distanceOk) && */(fabs(diffAng) < (angSpeed * angSpeed / accAngMax - accAngMax*2.));
    9938:	6e7b      	ldr	r3, [r7, #100]
    993a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    993e:	4618      	mov	r0, r3
    9940:	f012 fe5c 	bl	1c5fc <__aeabi_f2d>
    9944:	4680      	mov	r8, r0
    9946:	4689      	mov	r9, r1
    9948:	697b      	ldr	r3, [r7, #20]
    994a:	69da      	ldr	r2, [r3, #28]
    994c:	697b      	ldr	r3, [r7, #20]
    994e:	69db      	ldr	r3, [r3, #28]
    9950:	4610      	mov	r0, r2
    9952:	4619      	mov	r1, r3
    9954:	f013 fac4 	bl	1cee0 <__aeabi_fmul>
    9958:	4603      	mov	r3, r0
    995a:	4618      	mov	r0, r3
    995c:	6c39      	ldr	r1, [r7, #64]
    995e:	f013 fb73 	bl	1d048 <__aeabi_fdiv>
    9962:	4603      	mov	r3, r0
    9964:	4618      	mov	r0, r3
    9966:	f012 fe49 	bl	1c5fc <__aeabi_f2d>
    996a:	4604      	mov	r4, r0
    996c:	460d      	mov	r5, r1
    996e:	6c38      	ldr	r0, [r7, #64]
    9970:	f012 fe44 	bl	1c5fc <__aeabi_f2d>
    9974:	4602      	mov	r2, r0
    9976:	460b      	mov	r3, r1
    9978:	4610      	mov	r0, r2
    997a:	4619      	mov	r1, r3
    997c:	f04f 0200 	mov.w	r2, #0	; 0x0
    9980:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    9984:	f012 fe8e 	bl	1c6a4 <__aeabi_dmul>
    9988:	4602      	mov	r2, r0
    998a:	460b      	mov	r3, r1
    998c:	4620      	mov	r0, r4
    998e:	4629      	mov	r1, r5
    9990:	f012 fcd6 	bl	1c340 <__adddf3>
    9994:	4602      	mov	r2, r0
    9996:	460b      	mov	r3, r1
    9998:	4614      	mov	r4, r2
    999a:	461d      	mov	r5, r3
    999c:	f04f 0300 	mov.w	r3, #0	; 0x0
    99a0:	f887 3073 	strb.w	r3, [r7, #115]
    99a4:	4640      	mov	r0, r8
    99a6:	4649      	mov	r1, r9
    99a8:	4622      	mov	r2, r4
    99aa:	462b      	mov	r3, r5
    99ac:	f013 f8ea 	bl	1cb84 <__aeabi_dcmplt>
    99b0:	4603      	mov	r3, r0
    99b2:	2b00      	cmp	r3, #0
    99b4:	d003      	beq.n	99be <_ZN13CommandAllerA6updateEv+0x426>
    99b6:	f04f 0301 	mov.w	r3, #1	; 0x1
    99ba:	f887 3073 	strb.w	r3, [r7, #115]
        if (diffAng > 0)
    99be:	6e78      	ldr	r0, [r7, #100]
    99c0:	49cf      	ldr	r1, [pc, #828]	(9d00 <_ZN13CommandAllerA6updateEv+0x768>)
    99c2:	f013 fc47 	bl	1d254 <__aeabi_fcmpgt>
    99c6:	4603      	mov	r3, r0
    99c8:	2b00      	cmp	r3, #0
    99ca:	d03c      	beq.n	9a46 <_ZN13CommandAllerA6updateEv+0x4ae>
        {
            if (!hasToDecelerate)
    99cc:	f897 3073 	ldrb.w	r3, [r7, #115]
    99d0:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    99d4:	b2db      	uxtb	r3, r3
    99d6:	2b00      	cmp	r3, #0
    99d8:	d00a      	beq.n	99f0 <_ZN13CommandAllerA6updateEv+0x458>
                angSpeed += accAngMax;
    99da:	697b      	ldr	r3, [r7, #20]
    99dc:	69db      	ldr	r3, [r3, #28]
    99de:	4618      	mov	r0, r3
    99e0:	6c39      	ldr	r1, [r7, #64]
    99e2:	f013 f975 	bl	1ccd0 <__addsf3>
    99e6:	4603      	mov	r3, r0
    99e8:	461a      	mov	r2, r3
    99ea:	697b      	ldr	r3, [r7, #20]
    99ec:	61da      	str	r2, [r3, #28]
    99ee:	e01d      	b.n	9a2c <_ZN13CommandAllerA6updateEv+0x494>
            else if (angSpeed > accAngMax*2)
    99f0:	697b      	ldr	r3, [r7, #20]
    99f2:	69dc      	ldr	r4, [r3, #28]
    99f4:	6c3b      	ldr	r3, [r7, #64]
    99f6:	4618      	mov	r0, r3
    99f8:	4619      	mov	r1, r3
    99fa:	f013 f969 	bl	1ccd0 <__addsf3>
    99fe:	4603      	mov	r3, r0
    9a00:	4620      	mov	r0, r4
    9a02:	4619      	mov	r1, r3
    9a04:	f013 fc26 	bl	1d254 <__aeabi_fcmpgt>
    9a08:	4603      	mov	r3, r0
    9a0a:	2b00      	cmp	r3, #0
    9a0c:	d00e      	beq.n	9a2c <_ZN13CommandAllerA6updateEv+0x494>
                angSpeed -= accAngMax*2;
    9a0e:	697b      	ldr	r3, [r7, #20]
    9a10:	69dc      	ldr	r4, [r3, #28]
    9a12:	6c38      	ldr	r0, [r7, #64]
    9a14:	49bb      	ldr	r1, [pc, #748]	(9d04 <_ZN13CommandAllerA6updateEv+0x76c>)
    9a16:	f013 fa63 	bl	1cee0 <__aeabi_fmul>
    9a1a:	4603      	mov	r3, r0
    9a1c:	4620      	mov	r0, r4
    9a1e:	4619      	mov	r1, r3
    9a20:	f013 f956 	bl	1ccd0 <__addsf3>
    9a24:	4603      	mov	r3, r0
    9a26:	461a      	mov	r2, r3
    9a28:	697b      	ldr	r3, [r7, #20]
    9a2a:	61da      	str	r2, [r3, #28]

            if (angSpeed > vitAngMax)
    9a2c:	697b      	ldr	r3, [r7, #20]
    9a2e:	69db      	ldr	r3, [r3, #28]
    9a30:	4618      	mov	r0, r3
    9a32:	6c79      	ldr	r1, [r7, #68]
    9a34:	f013 fc0e 	bl	1d254 <__aeabi_fcmpgt>
    9a38:	4603      	mov	r3, r0
    9a3a:	2b00      	cmp	r3, #0
    9a3c:	d052      	beq.n	9ae4 <_ZN13CommandAllerA6updateEv+0x54c>
                angSpeed = vitAngMax;
    9a3e:	697a      	ldr	r2, [r7, #20]
    9a40:	6c7b      	ldr	r3, [r7, #68]
    9a42:	61d3      	str	r3, [r2, #28]
    9a44:	e04e      	b.n	9ae4 <_ZN13CommandAllerA6updateEv+0x54c>
        }
        else
        {
            if (!hasToDecelerate)
    9a46:	f897 3073 	ldrb.w	r3, [r7, #115]
    9a4a:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9a4e:	b2db      	uxtb	r3, r3
    9a50:	2b00      	cmp	r3, #0
    9a52:	d00a      	beq.n	9a6a <_ZN13CommandAllerA6updateEv+0x4d2>
                angSpeed -= accAngMax;
    9a54:	697b      	ldr	r3, [r7, #20]
    9a56:	69db      	ldr	r3, [r3, #28]
    9a58:	4618      	mov	r0, r3
    9a5a:	6c39      	ldr	r1, [r7, #64]
    9a5c:	f013 f936 	bl	1cccc <__aeabi_fsub>
    9a60:	4603      	mov	r3, r0
    9a62:	461a      	mov	r2, r3
    9a64:	697b      	ldr	r3, [r7, #20]
    9a66:	61da      	str	r2, [r3, #28]
    9a68:	e01d      	b.n	9aa6 <_ZN13CommandAllerA6updateEv+0x50e>
            else if (angSpeed < -accAngMax*2)
    9a6a:	697b      	ldr	r3, [r7, #20]
    9a6c:	69dc      	ldr	r4, [r3, #28]
    9a6e:	6c38      	ldr	r0, [r7, #64]
    9a70:	49a4      	ldr	r1, [pc, #656]	(9d04 <_ZN13CommandAllerA6updateEv+0x76c>)
    9a72:	f013 fa35 	bl	1cee0 <__aeabi_fmul>
    9a76:	4603      	mov	r3, r0
    9a78:	4620      	mov	r0, r4
    9a7a:	4619      	mov	r1, r3
    9a7c:	f013 fbcc 	bl	1d218 <__aeabi_fcmplt>
    9a80:	4603      	mov	r3, r0
    9a82:	2b00      	cmp	r3, #0
    9a84:	d00f      	beq.n	9aa6 <_ZN13CommandAllerA6updateEv+0x50e>
                angSpeed += accAngMax*2;
    9a86:	697b      	ldr	r3, [r7, #20]
    9a88:	69dc      	ldr	r4, [r3, #28]
    9a8a:	6c3b      	ldr	r3, [r7, #64]
    9a8c:	4618      	mov	r0, r3
    9a8e:	4619      	mov	r1, r3
    9a90:	f013 f91e 	bl	1ccd0 <__addsf3>
    9a94:	4603      	mov	r3, r0
    9a96:	4620      	mov	r0, r4
    9a98:	4619      	mov	r1, r3
    9a9a:	f013 f919 	bl	1ccd0 <__addsf3>
    9a9e:	4603      	mov	r3, r0
    9aa0:	461a      	mov	r2, r3
    9aa2:	697b      	ldr	r3, [r7, #20]
    9aa4:	61da      	str	r2, [r3, #28]

            if (angSpeed < -vitAngMax)
    9aa6:	697b      	ldr	r3, [r7, #20]
    9aa8:	69da      	ldr	r2, [r3, #28]
    9aaa:	6c7b      	ldr	r3, [r7, #68]
    9aac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    9ab0:	4610      	mov	r0, r2
    9ab2:	4619      	mov	r1, r3
    9ab4:	f013 fbb0 	bl	1d218 <__aeabi_fcmplt>
    9ab8:	4603      	mov	r3, r0
    9aba:	2b00      	cmp	r3, #0
    9abc:	d012      	beq.n	9ae4 <_ZN13CommandAllerA6updateEv+0x54c>
                angSpeed = -vitAngMax;
    9abe:	6c7b      	ldr	r3, [r7, #68]
    9ac0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    9ac4:	697b      	ldr	r3, [r7, #20]
    9ac6:	61da      	str	r2, [r3, #28]
    9ac8:	e00c      	b.n	9ae4 <_ZN13CommandAllerA6updateEv+0x54c>
        }

    }
    else
    {
        angSpeed = diffAng*vitAngMax/angleVitesseMax;
    9aca:	6e78      	ldr	r0, [r7, #100]
    9acc:	6c79      	ldr	r1, [r7, #68]
    9ace:	f013 fa07 	bl	1cee0 <__aeabi_fmul>
    9ad2:	4603      	mov	r3, r0
    9ad4:	4618      	mov	r0, r3
    9ad6:	6d79      	ldr	r1, [r7, #84]
    9ad8:	f013 fab6 	bl	1d048 <__aeabi_fdiv>
    9adc:	4603      	mov	r3, r0
    9ade:	461a      	mov	r2, r3
    9ae0:	697b      	ldr	r3, [r7, #20]
    9ae2:	61da      	str	r2, [r3, #28]
    {
        angSpeed = diffAng*vitAngMax/angleVitesseMax;
    }*/

    // vitesse linéaire
    if (distanceBut > derniereDistance || distanceBut < 10.0f)
    9ae4:	697b      	ldr	r3, [r7, #20]
    9ae6:	6a5b      	ldr	r3, [r3, #36]
    9ae8:	4618      	mov	r0, r3
    9aea:	6ef9      	ldr	r1, [r7, #108]
    9aec:	f013 fb94 	bl	1d218 <__aeabi_fcmplt>
    9af0:	4603      	mov	r3, r0
    9af2:	2b00      	cmp	r3, #0
    9af4:	d106      	bne.n	9b04 <_ZN13CommandAllerA6updateEv+0x56c>
    9af6:	6ef8      	ldr	r0, [r7, #108]
    9af8:	4983      	ldr	r1, [pc, #524]	(9d08 <_ZN13CommandAllerA6updateEv+0x770>)
    9afa:	f013 fb8d 	bl	1d218 <__aeabi_fcmplt>
    9afe:	4603      	mov	r3, r0
    9b00:	2b00      	cmp	r3, #0
    9b02:	d004      	beq.n	9b0e <_ZN13CommandAllerA6updateEv+0x576>
    {
        m_fini = true;
    9b04:	697b      	ldr	r3, [r7, #20]
    9b06:	f04f 0201 	mov.w	r2, #1	; 0x1
    9b0a:	f883 2028 	strb.w	r2, [r3, #40]
    }

    if (bonAngle)
    9b0e:	697b      	ldr	r3, [r7, #20]
    9b10:	7d1b      	ldrb	r3, [r3, #20]
    9b12:	2b00      	cmp	r3, #0
    9b14:	f000 80ee 	beq.w	9cf4 <_ZN13CommandAllerA6updateEv+0x75c>
    {

        if (fabs(diffAng) > angleMaxPourAvancer)
    9b18:	6e7b      	ldr	r3, [r7, #100]
    9b1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9b1e:	4618      	mov	r0, r3
    9b20:	6eb9      	ldr	r1, [r7, #104]
    9b22:	f013 fb97 	bl	1d254 <__aeabi_fcmpgt>
    9b26:	4603      	mov	r3, r0
    9b28:	2b00      	cmp	r3, #0
    9b2a:	d00a      	beq.n	9b42 <_ZN13CommandAllerA6updateEv+0x5aa>
        {
            linSpeed *= 0.97f;
    9b2c:	697b      	ldr	r3, [r7, #20]
    9b2e:	699b      	ldr	r3, [r3, #24]
    9b30:	4618      	mov	r0, r3
    9b32:	4976      	ldr	r1, [pc, #472]	(9d0c <_ZN13CommandAllerA6updateEv+0x774>)
    9b34:	f013 f9d4 	bl	1cee0 <__aeabi_fmul>
    9b38:	4603      	mov	r3, r0
    9b3a:	461a      	mov	r2, r3
    9b3c:	697b      	ldr	r3, [r7, #20]
    9b3e:	619a      	str	r2, [r3, #24]
    9b40:	e0d8      	b.n	9cf4 <_ZN13CommandAllerA6updateEv+0x75c>
        }
        else if (distanceBut > distanceVitesseMax)
    9b42:	6ef8      	ldr	r0, [r7, #108]
    9b44:	6db9      	ldr	r1, [r7, #88]
    9b46:	f013 fb85 	bl	1d254 <__aeabi_fcmpgt>
    9b4a:	4603      	mov	r3, r0
    9b4c:	2b00      	cmp	r3, #0
    9b4e:	d039      	beq.n	9bc4 <_ZN13CommandAllerA6updateEv+0x62c>
        {
             if (m_reculer)
    9b50:	697b      	ldr	r3, [r7, #20]
    9b52:	f893 3020 	ldrb.w	r3, [r3, #32]
    9b56:	2b00      	cmp	r3, #0
    9b58:	d00a      	beq.n	9b70 <_ZN13CommandAllerA6updateEv+0x5d8>
                linSpeed -= accLinMax;
    9b5a:	697b      	ldr	r3, [r7, #20]
    9b5c:	699b      	ldr	r3, [r3, #24]
    9b5e:	4618      	mov	r0, r3
    9b60:	6cb9      	ldr	r1, [r7, #72]
    9b62:	f013 f8b3 	bl	1cccc <__aeabi_fsub>
    9b66:	4603      	mov	r3, r0
    9b68:	461a      	mov	r2, r3
    9b6a:	697b      	ldr	r3, [r7, #20]
    9b6c:	619a      	str	r2, [r3, #24]
    9b6e:	e009      	b.n	9b84 <_ZN13CommandAllerA6updateEv+0x5ec>
             else
                linSpeed += accLinMax;
    9b70:	697b      	ldr	r3, [r7, #20]
    9b72:	699b      	ldr	r3, [r3, #24]
    9b74:	4618      	mov	r0, r3
    9b76:	6cb9      	ldr	r1, [r7, #72]
    9b78:	f013 f8aa 	bl	1ccd0 <__addsf3>
    9b7c:	4603      	mov	r3, r0
    9b7e:	461a      	mov	r2, r3
    9b80:	697b      	ldr	r3, [r7, #20]
    9b82:	619a      	str	r2, [r3, #24]

            if (linSpeed > vitLinMax)
    9b84:	697b      	ldr	r3, [r7, #20]
    9b86:	699b      	ldr	r3, [r3, #24]
    9b88:	4618      	mov	r0, r3
    9b8a:	6d39      	ldr	r1, [r7, #80]
    9b8c:	f013 fb62 	bl	1d254 <__aeabi_fcmpgt>
    9b90:	4603      	mov	r3, r0
    9b92:	2b00      	cmp	r3, #0
    9b94:	d003      	beq.n	9b9e <_ZN13CommandAllerA6updateEv+0x606>
                linSpeed = vitLinMax;
    9b96:	697a      	ldr	r2, [r7, #20]
    9b98:	6d3b      	ldr	r3, [r7, #80]
    9b9a:	6193      	str	r3, [r2, #24]
    9b9c:	e0aa      	b.n	9cf4 <_ZN13CommandAllerA6updateEv+0x75c>
            else if (linSpeed < -vitLinMax)
    9b9e:	697b      	ldr	r3, [r7, #20]
    9ba0:	699a      	ldr	r2, [r3, #24]
    9ba2:	6d3b      	ldr	r3, [r7, #80]
    9ba4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    9ba8:	4610      	mov	r0, r2
    9baa:	4619      	mov	r1, r3
    9bac:	f013 fb34 	bl	1d218 <__aeabi_fcmplt>
    9bb0:	4603      	mov	r3, r0
    9bb2:	2b00      	cmp	r3, #0
    9bb4:	f000 809e 	beq.w	9cf4 <_ZN13CommandAllerA6updateEv+0x75c>
                linSpeed = -vitLinMax;
    9bb8:	6d3b      	ldr	r3, [r7, #80]
    9bba:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    9bbe:	697b      	ldr	r3, [r7, #20]
    9bc0:	619a      	str	r2, [r3, #24]
    9bc2:	e097      	b.n	9cf4 <_ZN13CommandAllerA6updateEv+0x75c>
        }
        else
        {
            float linSpeedVisee;
            if (m_reculer)
    9bc4:	697b      	ldr	r3, [r7, #20]
    9bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
    9bca:	2b00      	cmp	r3, #0
    9bcc:	d025      	beq.n	9c1a <_ZN13CommandAllerA6updateEv+0x682>
                linSpeedVisee = -sqrt(vFin2+2.0f*distanceBut*decLinMax);
    9bce:	697b      	ldr	r3, [r7, #20]
    9bd0:	691c      	ldr	r4, [r3, #16]
    9bd2:	6efb      	ldr	r3, [r7, #108]
    9bd4:	4618      	mov	r0, r3
    9bd6:	4619      	mov	r1, r3
    9bd8:	f013 f87a 	bl	1ccd0 <__addsf3>
    9bdc:	4603      	mov	r3, r0
    9bde:	4618      	mov	r0, r3
    9be0:	6cf9      	ldr	r1, [r7, #76]
    9be2:	f013 f97d 	bl	1cee0 <__aeabi_fmul>
    9be6:	4603      	mov	r3, r0
    9be8:	4620      	mov	r0, r4
    9bea:	4619      	mov	r1, r3
    9bec:	f013 f870 	bl	1ccd0 <__addsf3>
    9bf0:	4603      	mov	r3, r0
    9bf2:	4618      	mov	r0, r3
    9bf4:	f012 fd02 	bl	1c5fc <__aeabi_f2d>
    9bf8:	4602      	mov	r2, r0
    9bfa:	460b      	mov	r3, r1
    9bfc:	4610      	mov	r0, r2
    9bfe:	4619      	mov	r1, r3
    9c00:	f016 fee8 	bl	209d4 <sqrt>
    9c04:	4602      	mov	r2, r0
    9c06:	460b      	mov	r3, r1
    9c08:	4610      	mov	r0, r2
    9c0a:	4619      	mov	r1, r3
    9c0c:	f013 f80a 	bl	1cc24 <__aeabi_d2f>
    9c10:	4603      	mov	r3, r0
    9c12:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    9c16:	677b      	str	r3, [r7, #116]
    9c18:	e022      	b.n	9c60 <_ZN13CommandAllerA6updateEv+0x6c8>
            else
                linSpeedVisee = sqrt(vFin2+2.0f*distanceBut*decLinMax);
    9c1a:	697b      	ldr	r3, [r7, #20]
    9c1c:	691c      	ldr	r4, [r3, #16]
    9c1e:	6efb      	ldr	r3, [r7, #108]
    9c20:	4618      	mov	r0, r3
    9c22:	4619      	mov	r1, r3
    9c24:	f013 f854 	bl	1ccd0 <__addsf3>
    9c28:	4603      	mov	r3, r0
    9c2a:	4618      	mov	r0, r3
    9c2c:	6cf9      	ldr	r1, [r7, #76]
    9c2e:	f013 f957 	bl	1cee0 <__aeabi_fmul>
    9c32:	4603      	mov	r3, r0
    9c34:	4620      	mov	r0, r4
    9c36:	4619      	mov	r1, r3
    9c38:	f013 f84a 	bl	1ccd0 <__addsf3>
    9c3c:	4603      	mov	r3, r0
    9c3e:	4618      	mov	r0, r3
    9c40:	f012 fcdc 	bl	1c5fc <__aeabi_f2d>
    9c44:	4602      	mov	r2, r0
    9c46:	460b      	mov	r3, r1
    9c48:	4610      	mov	r0, r2
    9c4a:	4619      	mov	r1, r3
    9c4c:	f016 fec2 	bl	209d4 <sqrt>
    9c50:	4602      	mov	r2, r0
    9c52:	460b      	mov	r3, r1
    9c54:	4610      	mov	r0, r2
    9c56:	4619      	mov	r1, r3
    9c58:	f012 ffe4 	bl	1cc24 <__aeabi_d2f>
    9c5c:	4603      	mov	r3, r0
    9c5e:	677b      	str	r3, [r7, #116]

             if (m_reculer)
    9c60:	697b      	ldr	r3, [r7, #20]
    9c62:	f893 3020 	ldrb.w	r3, [r3, #32]
    9c66:	2b00      	cmp	r3, #0
    9c68:	d00a      	beq.n	9c80 <_ZN13CommandAllerA6updateEv+0x6e8>
                linSpeed -= accLinMax;
    9c6a:	697b      	ldr	r3, [r7, #20]
    9c6c:	699b      	ldr	r3, [r3, #24]
    9c6e:	4618      	mov	r0, r3
    9c70:	6cb9      	ldr	r1, [r7, #72]
    9c72:	f013 f82b 	bl	1cccc <__aeabi_fsub>
    9c76:	4603      	mov	r3, r0
    9c78:	461a      	mov	r2, r3
    9c7a:	697b      	ldr	r3, [r7, #20]
    9c7c:	619a      	str	r2, [r3, #24]
    9c7e:	e009      	b.n	9c94 <_ZN13CommandAllerA6updateEv+0x6fc>
             else
                linSpeed += accLinMax;
    9c80:	697b      	ldr	r3, [r7, #20]
    9c82:	699b      	ldr	r3, [r3, #24]
    9c84:	4618      	mov	r0, r3
    9c86:	6cb9      	ldr	r1, [r7, #72]
    9c88:	f013 f822 	bl	1ccd0 <__addsf3>
    9c8c:	4603      	mov	r3, r0
    9c8e:	461a      	mov	r2, r3
    9c90:	697b      	ldr	r3, [r7, #20]
    9c92:	619a      	str	r2, [r3, #24]

            if (abs(linSpeed) > abs(linSpeedVisee))
    9c94:	697b      	ldr	r3, [r7, #20]
    9c96:	699b      	ldr	r3, [r3, #24]
    9c98:	4618      	mov	r0, r3
    9c9a:	4919      	ldr	r1, [pc, #100]	(9d00 <_ZN13CommandAllerA6updateEv+0x768>)
    9c9c:	f013 fada 	bl	1d254 <__aeabi_fcmpgt>
    9ca0:	4603      	mov	r3, r0
    9ca2:	2b00      	cmp	r3, #0
    9ca4:	d011      	beq.n	9cca <_ZN13CommandAllerA6updateEv+0x732>
    9ca6:	697b      	ldr	r3, [r7, #20]
    9ca8:	699a      	ldr	r2, [r3, #24]
    9caa:	f04f 0300 	mov.w	r3, #0	; 0x0
    9cae:	70bb      	strb	r3, [r7, #2]
    9cb0:	4610      	mov	r0, r2
    9cb2:	4913      	ldr	r1, [pc, #76]	(9d00 <_ZN13CommandAllerA6updateEv+0x768>)
    9cb4:	f013 faa6 	bl	1d204 <__aeabi_fcmpeq>
    9cb8:	4603      	mov	r3, r0
    9cba:	2b00      	cmp	r3, #0
    9cbc:	d102      	bne.n	9cc4 <_ZN13CommandAllerA6updateEv+0x72c>
    9cbe:	f04f 0301 	mov.w	r3, #1	; 0x1
    9cc2:	70bb      	strb	r3, [r7, #2]
    9cc4:	78bb      	ldrb	r3, [r7, #2]
    9cc6:	613b      	str	r3, [r7, #16]
    9cc8:	e00e      	b.n	9ce8 <_ZN13CommandAllerA6updateEv+0x750>
    9cca:	f04f 0300 	mov.w	r3, #0	; 0x0
    9cce:	707b      	strb	r3, [r7, #1]
    9cd0:	6f78      	ldr	r0, [r7, #116]
    9cd2:	490b      	ldr	r1, [pc, #44]	(9d00 <_ZN13CommandAllerA6updateEv+0x768>)
    9cd4:	f013 fa96 	bl	1d204 <__aeabi_fcmpeq>
    9cd8:	4603      	mov	r3, r0
    9cda:	2b00      	cmp	r3, #0
    9cdc:	d102      	bne.n	9ce4 <_ZN13CommandAllerA6updateEv+0x74c>
    9cde:	f04f 0301 	mov.w	r3, #1	; 0x1
    9ce2:	707b      	strb	r3, [r7, #1]
    9ce4:	787b      	ldrb	r3, [r7, #1]
    9ce6:	613b      	str	r3, [r7, #16]
    9ce8:	693b      	ldr	r3, [r7, #16]
    9cea:	2b00      	cmp	r3, #0
    9cec:	d002      	beq.n	9cf4 <_ZN13CommandAllerA6updateEv+0x75c>
                linSpeed = linSpeedVisee;
    9cee:	697a      	ldr	r2, [r7, #20]
    9cf0:	6f7b      	ldr	r3, [r7, #116]
    9cf2:	6193      	str	r3, [r2, #24]
        }
    }
}
    9cf4:	f107 0778 	add.w	r7, r7, #120	; 0x78
    9cf8:	46bd      	mov	sp, r7
    9cfa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    9cfe:	46c0      	nop			(mov r8, r8)
    9d00:	00000000 	.word	0x00000000
    9d04:	c0000000 	.word	0xc0000000
    9d08:	41200000 	.word	0x41200000
    9d0c:	3f7851ec 	.word	0x3f7851ec

00009d10 <_ZN18CommandAllerEnArcA6updateEv>:
        cote = SGN_POS;
    else
        cote = SGN_NEG;
}

void CommandAllerEnArcA::update()
    9d10:	b580      	push	{r7, lr}
    9d12:	b094      	sub	sp, #80
    9d14:	af00      	add	r7, sp, #0
    9d16:	6078      	str	r0, [r7, #4]
{
    float accAngMax = ACCELERATION_ANGULAIRE_MAX;
    9d18:	4b20      	ldr	r3, [pc, #128]	(9d9c <_ZN18CommandAllerEnArcA6updateEv+0x8c>)
    9d1a:	637b      	str	r3, [r7, #52]
    float vitAngMax = VITESSE_ANGULAIRE_MAX;
    9d1c:	4b20      	ldr	r3, [pc, #128]	(9da0 <_ZN18CommandAllerEnArcA6updateEv+0x90>)
    9d1e:	63bb      	str	r3, [r7, #56]
    float accLinMax = ACCELERATION_LINEAIRE_MAX;
    9d20:	4b20      	ldr	r3, [pc, #128]	(9da4 <_ZN18CommandAllerEnArcA6updateEv+0x94>)
    9d22:	63fb      	str	r3, [r7, #60]
    float decLinMax = DECELERATION_LINEAIRE_MAX;
    9d24:	4b20      	ldr	r3, [pc, #128]	(9da8 <_ZN18CommandAllerEnArcA6updateEv+0x98>)
    9d26:	643b      	str	r3, [r7, #64]
    float vitLinMax = vMax;//VITESSE_LINEAIRE_MAX;
    9d28:	687b      	ldr	r3, [r7, #4]
    9d2a:	68db      	ldr	r3, [r3, #12]
    9d2c:	647b      	str	r3, [r7, #68]

    float angle = Odometrie::odometrie->getPos().getAngle();
    9d2e:	4b1f      	ldr	r3, [pc, #124]	(9dac <_ZN18CommandAllerEnArcA6updateEv+0x9c>)
    9d30:	681a      	ldr	r2, [r3, #0]
    9d32:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9d36:	4618      	mov	r0, r3
    9d38:	4611      	mov	r1, r2
    9d3a:	f000 f85d 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    9d3e:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9d42:	4618      	mov	r0, r3
    9d44:	f005 faa4 	bl	f290 <_ZNK17PositionPlusAngle8getAngleEv>
    9d48:	4603      	mov	r3, r0
    9d4a:	64bb      	str	r3, [r7, #72]
    Position pos = Odometrie::odometrie->getPos().getPosition();
    9d4c:	4b17      	ldr	r3, [pc, #92]	(9dac <_ZN18CommandAllerEnArcA6updateEv+0x9c>)
    9d4e:	681a      	ldr	r2, [r3, #0]
    9d50:	f107 0320 	add.w	r3, r7, #32	; 0x20
    9d54:	4618      	mov	r0, r3
    9d56:	4611      	mov	r1, r2
    9d58:	f000 f84e 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    9d5c:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9d60:	f107 0220 	add.w	r2, r7, #32	; 0x20
    9d64:	4618      	mov	r0, r3
    9d66:	4611      	mov	r1, r2
    9d68:	f005 fa80 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>

    float rayon = (centre-but).getNorme();
    9d6c:	687b      	ldr	r3, [r7, #4]
    9d6e:	f103 0220 	add.w	r2, r3, #32	; 0x20
    9d72:	687b      	ldr	r3, [r7, #4]
    9d74:	f103 0c04 	add.w	ip, r3, #4	; 0x4
    9d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    9d7c:	4618      	mov	r0, r3
    9d7e:	4611      	mov	r1, r2
    9d80:	4662      	mov	r2, ip
    9d82:	f005 f8a5 	bl	eed0 <_ZNK8PositionmiERKS_>
    9d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    9d8a:	4618      	mov	r0, r3
    9d8c:	f005 f9ae 	bl	f0ec <_ZNK8Position8getNormeEv>
    9d90:	4603      	mov	r3, r0
    9d92:	64fb      	str	r3, [r7, #76]
        angSpeed = linSpeed/rVise;
    else if (abs(linSpeed) > abs(rVise*angSpeed))
        linSpeed = rVise*angSpeed;*/


}
    9d94:	f107 0750 	add.w	r7, r7, #80	; 0x50
    9d98:	46bd      	mov	sp, r7
    9d9a:	bd80      	pop	{r7, pc}
    9d9c:	3983126f 	.word	0x3983126f
    9da0:	3cf5c28f 	.word	0x3cf5c28f
    9da4:	3ccccccd 	.word	0x3ccccccd
    9da8:	3ca3d70a 	.word	0x3ca3d70a
    9dac:	20000574 	.word	0x20000574

00009db0 <_ZNK9Odometrie19getVitesseAngulaireEv>:
PositionPlusAngle Odometrie::getPos() const
{
    return positionPlusAngle;
}

Angle Odometrie::getVitesseAngulaire() const
    9db0:	b480      	push	{r7}
    9db2:	b083      	sub	sp, #12
    9db4:	af00      	add	r7, sp, #0
    9db6:	6078      	str	r0, [r7, #4]
{
    return vitesseAngulaire;
    9db8:	687b      	ldr	r3, [r7, #4]
    9dba:	699b      	ldr	r3, [r3, #24]
}
    9dbc:	4618      	mov	r0, r3
    9dbe:	f107 070c 	add.w	r7, r7, #12	; 0xc
    9dc2:	46bd      	mov	sp, r7
    9dc4:	bc80      	pop	{r7}
    9dc6:	4770      	bx	lr

00009dc8 <_ZNK9Odometrie18getVitesseLineaireEv>:

Distance Odometrie::getVitesseLineaire() const
    9dc8:	b480      	push	{r7}
    9dca:	b083      	sub	sp, #12
    9dcc:	af00      	add	r7, sp, #0
    9dce:	6078      	str	r0, [r7, #4]
{
    return vitesseLineaire;
    9dd0:	687b      	ldr	r3, [r7, #4]
    9dd2:	695b      	ldr	r3, [r3, #20]
}
    9dd4:	4618      	mov	r0, r3
    9dd6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    9dda:	46bd      	mov	sp, r7
    9ddc:	bc80      	pop	{r7}
    9dde:	4770      	bx	lr

00009de0 <_ZNK9Odometrie16getAbsoluteAngleEv>:

Angle Odometrie::getAbsoluteAngle() const
    9de0:	b480      	push	{r7}
    9de2:	b083      	sub	sp, #12
    9de4:	af00      	add	r7, sp, #0
    9de6:	6078      	str	r0, [r7, #4]
{
    return absAngle;
    9de8:	687b      	ldr	r3, [r7, #4]
    9dea:	6f1b      	ldr	r3, [r3, #112]
}
    9dec:	4618      	mov	r0, r3
    9dee:	f107 070c 	add.w	r7, r7, #12	; 0xc
    9df2:	46bd      	mov	sp, r7
    9df4:	bc80      	pop	{r7}
    9df6:	4770      	bx	lr

00009df8 <_ZNK9Odometrie6getPosEv>:
    posY = p.getPosition().getY();
    ang = p.getAngle();
    positionPlusAngle = p;
}

PositionPlusAngle Odometrie::getPos() const
    9df8:	b590      	push	{r4, r7, lr}
    9dfa:	b083      	sub	sp, #12
    9dfc:	af00      	add	r7, sp, #0
    9dfe:	4604      	mov	r4, r0
    9e00:	6079      	str	r1, [r7, #4]
{
    return positionPlusAngle;
    9e02:	4622      	mov	r2, r4
    9e04:	687b      	ldr	r3, [r7, #4]
    9e06:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9e0a:	4610      	mov	r0, r2
    9e0c:	4619      	mov	r1, r3
    9e0e:	f005 fa15 	bl	f23c <_ZN17PositionPlusAngleC1ERKS_>
}
    9e12:	4620      	mov	r0, r4
    9e14:	4620      	mov	r0, r4
    9e16:	f107 070c 	add.w	r7, r7, #12	; 0xc
    9e1a:	46bd      	mov	sp, r7
    9e1c:	bd90      	pop	{r4, r7, pc}
    9e1e:	46c0      	nop			(mov r8, r8)

00009e20 <_ZN9Odometrie6setPosERK17PositionPlusAngle>:
    positionPlusAngle.setX(posX);
    positionPlusAngle.setY(posY);

}

void Odometrie::setPos(const PositionPlusAngle& p)
    9e20:	b580      	push	{r7, lr}
    9e22:	b086      	sub	sp, #24
    9e24:	af00      	add	r7, sp, #0
    9e26:	6078      	str	r0, [r7, #4]
    9e28:	6039      	str	r1, [r7, #0]
{
    posX = p.getPosition().getX();
    9e2a:	f107 0308 	add.w	r3, r7, #8	; 0x8
    9e2e:	4618      	mov	r0, r3
    9e30:	6839      	ldr	r1, [r7, #0]
    9e32:	f005 fa1b 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
    9e36:	f107 0308 	add.w	r3, r7, #8	; 0x8
    9e3a:	4618      	mov	r0, r3
    9e3c:	f004 ffee 	bl	ee1c <_ZNK8Position4getXEv>
    9e40:	4603      	mov	r3, r0
    9e42:	4618      	mov	r0, r3
    9e44:	f012 fbda 	bl	1c5fc <__aeabi_f2d>
    9e48:	4602      	mov	r2, r0
    9e4a:	460b      	mov	r3, r1
    9e4c:	6879      	ldr	r1, [r7, #4]
    9e4e:	e9c1 2316 	strd	r2, r3, [r1, #88]
    posY = p.getPosition().getY();
    9e52:	f107 0310 	add.w	r3, r7, #16	; 0x10
    9e56:	4618      	mov	r0, r3
    9e58:	6839      	ldr	r1, [r7, #0]
    9e5a:	f005 fa07 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
    9e5e:	f107 0310 	add.w	r3, r7, #16	; 0x10
    9e62:	4618      	mov	r0, r3
    9e64:	f004 ffe6 	bl	ee34 <_ZNK8Position4getYEv>
    9e68:	4603      	mov	r3, r0
    9e6a:	4618      	mov	r0, r3
    9e6c:	f012 fbc6 	bl	1c5fc <__aeabi_f2d>
    9e70:	4602      	mov	r2, r0
    9e72:	460b      	mov	r3, r1
    9e74:	6879      	ldr	r1, [r7, #4]
    9e76:	e9c1 2318 	strd	r2, r3, [r1, #96]
    ang = p.getAngle();
    9e7a:	6838      	ldr	r0, [r7, #0]
    9e7c:	f005 fa08 	bl	f290 <_ZNK17PositionPlusAngle8getAngleEv>
    9e80:	4603      	mov	r3, r0
    9e82:	4618      	mov	r0, r3
    9e84:	f012 fbba 	bl	1c5fc <__aeabi_f2d>
    9e88:	4602      	mov	r2, r0
    9e8a:	460b      	mov	r3, r1
    9e8c:	6879      	ldr	r1, [r7, #4]
    9e8e:	e9c1 231a 	strd	r2, r3, [r1, #104]
    positionPlusAngle = p;
    9e92:	687b      	ldr	r3, [r7, #4]
    9e94:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9e98:	4618      	mov	r0, r3
    9e9a:	6839      	ldr	r1, [r7, #0]
    9e9c:	f005 fa3e 	bl	f31c <_ZN17PositionPlusAngleaSERKS_>
}
    9ea0:	f107 0718 	add.w	r7, r7, #24	; 0x18
    9ea4:	46bd      	mov	sp, r7
    9ea6:	bd80      	pop	{r7, pc}

00009ea8 <_ZN9Odometrie8setAngleEf>:
    setPos(posPA);

    odometrie->posY = y;
}

void Odometrie::setAngle(Angle a)
    9ea8:	b590      	push	{r4, r7, lr}
    9eaa:	b087      	sub	sp, #28
    9eac:	af00      	add	r7, sp, #0
    9eae:	6078      	str	r0, [r7, #4]
    9eb0:	6039      	str	r1, [r7, #0]
{
    PositionPlusAngle posPA = getPos();
    9eb2:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9eb6:	4618      	mov	r0, r3
    9eb8:	6879      	ldr	r1, [r7, #4]
    9eba:	f7ff ff9d 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    posPA.setAngle(a);
    9ebe:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9ec2:	4618      	mov	r0, r3
    9ec4:	6839      	ldr	r1, [r7, #0]
    9ec6:	f005 f9ef 	bl	f2a8 <_ZN17PositionPlusAngle8setAngleEf>
    setPos(posPA);
    9eca:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9ece:	6878      	ldr	r0, [r7, #4]
    9ed0:	4619      	mov	r1, r3
    9ed2:	f7ff ffa5 	bl	9e20 <_ZN9Odometrie6setPosERK17PositionPlusAngle>

    odometrie->ang = a;
    9ed6:	4b06      	ldr	r3, [pc, #24]	(9ef0 <_ZN9Odometrie8setAngleEf+0x48>)
    9ed8:	681c      	ldr	r4, [r3, #0]
    9eda:	6838      	ldr	r0, [r7, #0]
    9edc:	f012 fb8e 	bl	1c5fc <__aeabi_f2d>
    9ee0:	4602      	mov	r2, r0
    9ee2:	460b      	mov	r3, r1
    9ee4:	e9c4 231a 	strd	r2, r3, [r4, #104]
}
    9ee8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    9eec:	46bd      	mov	sp, r7
    9eee:	bd90      	pop	{r4, r7, pc}
    9ef0:	20000574 	.word	0x20000574

00009ef4 <_ZN9Odometrie4setYEf>:
    posPA.setPosition(pos);
    setPos(posPA);
    odometrie->posX = x;
}

void Odometrie::setY(Distance y)
    9ef4:	b590      	push	{r4, r7, lr}
    9ef6:	b089      	sub	sp, #36
    9ef8:	af00      	add	r7, sp, #0
    9efa:	6078      	str	r0, [r7, #4]
    9efc:	6039      	str	r1, [r7, #0]
{
    PositionPlusAngle posPA = getPos();
    9efe:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9f02:	4618      	mov	r0, r3
    9f04:	6879      	ldr	r1, [r7, #4]
    9f06:	f7ff ff77 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    Position pos = posPA.getPosition();
    9f0a:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9f0e:	f107 0214 	add.w	r2, r7, #20	; 0x14
    9f12:	4618      	mov	r0, r3
    9f14:	4611      	mov	r1, r2
    9f16:	f005 f9a9 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
    pos.setY(y);
    9f1a:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9f1e:	4618      	mov	r0, r3
    9f20:	6839      	ldr	r1, [r7, #0]
    9f22:	f004 ffa1 	bl	ee68 <_ZN8Position4setYEf>
    posPA.setPosition(pos);
    9f26:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9f2a:	f107 020c 	add.w	r2, r7, #12	; 0xc
    9f2e:	4618      	mov	r0, r3
    9f30:	4611      	mov	r1, r2
    9f32:	f005 f9e3 	bl	f2fc <_ZN17PositionPlusAngle11setPositionERK8Position>
    setPos(posPA);
    9f36:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9f3a:	6878      	ldr	r0, [r7, #4]
    9f3c:	4619      	mov	r1, r3
    9f3e:	f7ff ff6f 	bl	9e20 <_ZN9Odometrie6setPosERK17PositionPlusAngle>

    odometrie->posY = y;
    9f42:	4b06      	ldr	r3, [pc, #24]	(9f5c <_ZN9Odometrie4setYEf+0x68>)
    9f44:	681c      	ldr	r4, [r3, #0]
    9f46:	6838      	ldr	r0, [r7, #0]
    9f48:	f012 fb58 	bl	1c5fc <__aeabi_f2d>
    9f4c:	4602      	mov	r2, r0
    9f4e:	460b      	mov	r3, r1
    9f50:	e9c4 2318 	strd	r2, r3, [r4, #96]
}
    9f54:	f107 0724 	add.w	r7, r7, #36	; 0x24
    9f58:	46bd      	mov	sp, r7
    9f5a:	bd90      	pop	{r4, r7, pc}
    9f5c:	20000574 	.word	0x20000574

00009f60 <_ZN9Odometrie4setXEf>:
Angle Odometrie::getAbsoluteAngle() const
{
    return absAngle;
}

void Odometrie::setX(Distance x)
    9f60:	b590      	push	{r4, r7, lr}
    9f62:	b089      	sub	sp, #36
    9f64:	af00      	add	r7, sp, #0
    9f66:	6078      	str	r0, [r7, #4]
    9f68:	6039      	str	r1, [r7, #0]
{
    PositionPlusAngle posPA = getPos();
    9f6a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9f6e:	4618      	mov	r0, r3
    9f70:	6879      	ldr	r1, [r7, #4]
    9f72:	f7ff ff41 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    Position pos = posPA.getPosition();
    9f76:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9f7a:	f107 0214 	add.w	r2, r7, #20	; 0x14
    9f7e:	4618      	mov	r0, r3
    9f80:	4611      	mov	r1, r2
    9f82:	f005 f973 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
    pos.setX(x);
    9f86:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9f8a:	4618      	mov	r0, r3
    9f8c:	6839      	ldr	r1, [r7, #0]
    9f8e:	f004 ff5d 	bl	ee4c <_ZN8Position4setXEf>
    posPA.setPosition(pos);
    9f92:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9f96:	f107 020c 	add.w	r2, r7, #12	; 0xc
    9f9a:	4618      	mov	r0, r3
    9f9c:	4611      	mov	r1, r2
    9f9e:	f005 f9ad 	bl	f2fc <_ZN17PositionPlusAngle11setPositionERK8Position>
    setPos(posPA);
    9fa2:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9fa6:	6878      	ldr	r0, [r7, #4]
    9fa8:	4619      	mov	r1, r3
    9faa:	f7ff ff39 	bl	9e20 <_ZN9Odometrie6setPosERK17PositionPlusAngle>
    odometrie->posX = x;
    9fae:	4b06      	ldr	r3, [pc, #24]	(9fc8 <_ZN9Odometrie4setXEf+0x68>)
    9fb0:	681c      	ldr	r4, [r3, #0]
    9fb2:	6838      	ldr	r0, [r7, #0]
    9fb4:	f012 fb22 	bl	1c5fc <__aeabi_f2d>
    9fb8:	4602      	mov	r2, r0
    9fba:	460b      	mov	r3, r1
    9fbc:	e9c4 2316 	strd	r2, r3, [r4, #88]
}
    9fc0:	f107 0724 	add.w	r7, r7, #36	; 0x24
    9fc4:	46bd      	mov	sp, r7
    9fc6:	bd90      	pop	{r4, r7, pc}
    9fc8:	20000574 	.word	0x20000574

00009fcc <_ZN9Odometrie6updateEv>:
{
    delete roueCodeuseGauche;
    delete roueCodeuseDroite;
}

void Odometrie::update()
    9fcc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    9fd0:	b094      	sub	sp, #80
    9fd2:	af00      	add	r7, sp, #0
    9fd4:	6078      	str	r0, [r7, #4]
{
    // pour filtrer les ticks
    for (int i = tailleTabPrevTicks-2 ; i >= 0; i--)
    9fd6:	f04f 0300 	mov.w	r3, #0	; 0x0
    9fda:	633b      	str	r3, [r7, #48]
    9fdc:	e027      	b.n	a02e <_ZN9Odometrie6updateEv+0x62>
    {
        prevDeltaTicksRoueDroite[i+1] = prevDeltaTicksRoueDroite[i];
    9fde:	6b3b      	ldr	r3, [r7, #48]
    9fe0:	f103 0001 	add.w	r0, r3, #1	; 0x1
    9fe4:	6b3b      	ldr	r3, [r7, #48]
    9fe6:	687a      	ldr	r2, [r7, #4]
    9fe8:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9fec:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9ff0:	4413      	add	r3, r2
    9ff2:	6859      	ldr	r1, [r3, #4]
    9ff4:	687a      	ldr	r2, [r7, #4]
    9ff6:	f100 0308 	add.w	r3, r0, #8	; 0x8
    9ffa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9ffe:	4413      	add	r3, r2
    a000:	6059      	str	r1, [r3, #4]
        prevDeltaTicksRoueGauche[i+1] = prevDeltaTicksRoueGauche[i];
    a002:	6b3b      	ldr	r3, [r7, #48]
    a004:	f103 0001 	add.w	r0, r3, #1	; 0x1
    a008:	6b3b      	ldr	r3, [r7, #48]
    a00a:	687a      	ldr	r2, [r7, #4]
    a00c:	f103 0306 	add.w	r3, r3, #6	; 0x6
    a010:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a014:	4413      	add	r3, r2
    a016:	6859      	ldr	r1, [r3, #4]
    a018:	687a      	ldr	r2, [r7, #4]
    a01a:	f100 0306 	add.w	r3, r0, #6	; 0x6
    a01e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a022:	4413      	add	r3, r2
    a024:	6059      	str	r1, [r3, #4]
}

void Odometrie::update()
{
    // pour filtrer les ticks
    for (int i = tailleTabPrevTicks-2 ; i >= 0; i--)
    a026:	6b3b      	ldr	r3, [r7, #48]
    a028:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    a02c:	633b      	str	r3, [r7, #48]
    a02e:	6b3b      	ldr	r3, [r7, #48]
    a030:	2b00      	cmp	r3, #0
    a032:	dad4      	bge.n	9fde <_ZN9Odometrie6updateEv+0x12>
        prevDeltaTicksRoueDroite[i+1] = prevDeltaTicksRoueDroite[i];
        prevDeltaTicksRoueGauche[i+1] = prevDeltaTicksRoueGauche[i];
    }

    // On a le moins pour prendre en compte que les deux roux codeuses sont montées dans des sens opposés car pas du même coté du robot
    prevDeltaTicksRoueDroite[0] = -roueCodeuseDroite->getTickValue();
    a034:	687b      	ldr	r3, [r7, #4]
    a036:	681b      	ldr	r3, [r3, #0]
    a038:	4618      	mov	r0, r3
    a03a:	f002 fe1b 	bl	cc74 <_ZN22QuadratureCoderHandler12getTickValueEv>
    a03e:	4603      	mov	r3, r0
    a040:	b29b      	uxth	r3, r3
    a042:	b21b      	sxth	r3, r3
    a044:	f1c3 0200 	rsb	r2, r3, #0	; 0x0
    a048:	687b      	ldr	r3, [r7, #4]
    a04a:	625a      	str	r2, [r3, #36]
    #if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
        prevDeltaTicksRoueGauche[0] = -roueCodeuseGauche->getTickValue();
    #else
        prevDeltaTicksRoueGauche[0] = roueCodeuseGauche->getTickValue();
    a04c:	687b      	ldr	r3, [r7, #4]
    a04e:	685b      	ldr	r3, [r3, #4]
    a050:	4618      	mov	r0, r3
    a052:	f002 fe0f 	bl	cc74 <_ZN22QuadratureCoderHandler12getTickValueEv>
    a056:	4603      	mov	r3, r0
    a058:	b29b      	uxth	r3, r3
    a05a:	b21a      	sxth	r2, r3
    a05c:	687b      	ldr	r3, [r7, #4]
    a05e:	61da      	str	r2, [r3, #28]
    #endif

    int32_t sommeGauche = 0;
    a060:	f04f 0300 	mov.w	r3, #0	; 0x0
    a064:	60bb      	str	r3, [r7, #8]
    int32_t sommeDroite = 0;
    a066:	f04f 0300 	mov.w	r3, #0	; 0x0
    a06a:	60fb      	str	r3, [r7, #12]
    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a06c:	f04f 0300 	mov.w	r3, #0	; 0x0
    a070:	637b      	str	r3, [r7, #52]
    a072:	e019      	b.n	a0a8 <_ZN9Odometrie6updateEv+0xdc>
    {
        sommeGauche += prevDeltaTicksRoueGauche[i];
    a074:	6b7b      	ldr	r3, [r7, #52]
    a076:	687a      	ldr	r2, [r7, #4]
    a078:	f103 0306 	add.w	r3, r3, #6	; 0x6
    a07c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a080:	4413      	add	r3, r2
    a082:	685a      	ldr	r2, [r3, #4]
    a084:	68bb      	ldr	r3, [r7, #8]
    a086:	4413      	add	r3, r2
    a088:	60bb      	str	r3, [r7, #8]
        sommeDroite += prevDeltaTicksRoueDroite[i];
    a08a:	6b7b      	ldr	r3, [r7, #52]
    a08c:	687a      	ldr	r2, [r7, #4]
    a08e:	f103 0308 	add.w	r3, r3, #8	; 0x8
    a092:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a096:	4413      	add	r3, r2
    a098:	685a      	ldr	r2, [r3, #4]
    a09a:	68fb      	ldr	r3, [r7, #12]
    a09c:	4413      	add	r3, r2
    a09e:	60fb      	str	r3, [r7, #12]
        prevDeltaTicksRoueGauche[0] = roueCodeuseGauche->getTickValue();
    #endif

    int32_t sommeGauche = 0;
    int32_t sommeDroite = 0;
    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a0a0:	6b7b      	ldr	r3, [r7, #52]
    a0a2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a0a6:	637b      	str	r3, [r7, #52]
    a0a8:	6b7b      	ldr	r3, [r7, #52]
    a0aa:	2b01      	cmp	r3, #1
    a0ac:	dde2      	ble.n	a074 <_ZN9Odometrie6updateEv+0xa8>
        sommeGauche += prevDeltaTicksRoueGauche[i];
        sommeDroite += prevDeltaTicksRoueDroite[i];
    }

    // double filteredDeltaTicksRoueGauche = (deltaTicksRoueGauche+prevDeltaTicksRoueGauche)/2.0;
    double filteredDeltaTicksRoueGauche = (double)sommeGauche/(double)tailleTabPrevTicks;
    a0ae:	68b8      	ldr	r0, [r7, #8]
    a0b0:	f012 fa92 	bl	1c5d8 <__aeabi_i2d>
    a0b4:	4602      	mov	r2, r0
    a0b6:	460b      	mov	r3, r1
    a0b8:	4610      	mov	r0, r2
    a0ba:	4619      	mov	r1, r3
    a0bc:	f04f 0200 	mov.w	r2, #0	; 0x0
    a0c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a0c4:	f012 fc18 	bl	1c8f8 <__aeabi_ddiv>
    a0c8:	4602      	mov	r2, r0
    a0ca:	460b      	mov	r3, r1
    a0cc:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // double filteredDeltaTicksRoueDroite = (deltaTicksRoueDroite+prevDeltaTicksRoueDroite)/2.0;
    double filteredDeltaTicksRoueDroite = (double)sommeDroite/(double)tailleTabPrevTicks;
    a0d0:	68f8      	ldr	r0, [r7, #12]
    a0d2:	f012 fa81 	bl	1c5d8 <__aeabi_i2d>
    a0d6:	4602      	mov	r2, r0
    a0d8:	460b      	mov	r3, r1
    a0da:	4610      	mov	r0, r2
    a0dc:	4619      	mov	r1, r3
    a0de:	f04f 0200 	mov.w	r2, #0	; 0x0
    a0e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a0e6:	f012 fc07 	bl	1c8f8 <__aeabi_ddiv>
    a0ea:	4602      	mov	r2, r0
    a0ec:	460b      	mov	r3, r1
    a0ee:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double tmpDeltaAngle = (filteredDeltaTicksRoueGauche-filteredDeltaTicksRoueDroite)*coeffAngle;  // cf coef angle
    a0f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    a0f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    a0fa:	f012 f91f 	bl	1c33c <__aeabi_dsub>
    a0fe:	4602      	mov	r2, r0
    a100:	460b      	mov	r3, r1
    a102:	4610      	mov	r0, r2
    a104:	4619      	mov	r1, r3
    a106:	687b      	ldr	r3, [r7, #4]
    a108:	e9d3 2314 	ldrd	r2, r3, [r3, #80]
    a10c:	f012 faca 	bl	1c6a4 <__aeabi_dmul>
    a110:	4602      	mov	r2, r0
    a112:	460b      	mov	r3, r1
    a114:	e9c7 2308 	strd	r2, r3, [r7, #32]

	double tmpDist = (filteredDeltaTicksRoueGauche+filteredDeltaTicksRoueDroite)*coeffDistance;     // soit le nombre moyen de tours de roue * le perimetre de la roue
    a118:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    a11c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    a120:	f012 f90e 	bl	1c340 <__adddf3>
    a124:	4602      	mov	r2, r0
    a126:	460b      	mov	r3, r1
    a128:	4610      	mov	r0, r2
    a12a:	4619      	mov	r1, r3
    a12c:	687b      	ldr	r3, [r7, #4]
    a12e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]
    a132:	f012 fab7 	bl	1c6a4 <__aeabi_dmul>
    a136:	4602      	mov	r2, r0
    a138:	460b      	mov	r3, r1
    a13a:	e9c7 230a 	strd	r2, r3, [r7, #40]

    vitesseLineaire = Distance(tmpDist);
    a13e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]
    a142:	f012 fd6f 	bl	1cc24 <__aeabi_d2f>
    a146:	4602      	mov	r2, r0
    a148:	687b      	ldr	r3, [r7, #4]
    a14a:	615a      	str	r2, [r3, #20]

    vitesseAngulaire = Angle(tmpDeltaAngle);
    a14c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    a150:	f012 fd68 	bl	1cc24 <__aeabi_d2f>
    a154:	4602      	mov	r2, r0
    a156:	687b      	ldr	r3, [r7, #4]
    a158:	619a      	str	r2, [r3, #24]

	//positionPlusAngle.setAngle(positionPlusAngle.getAngle()+vitesseAngulaire);
	//positionPlusAngle.setPosition(positionPlusAngle.getPosition() + Position(tmpDist*cos(positionPlusAngle.getAngle()), tmpDist*sin(positionPlusAngle.getAngle())));    //mettre sinx si ça marche pas et non sin


    if (tmpDeltaAngle == 0.0)
    a15a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    a15e:	f04f 0200 	mov.w	r2, #0	; 0x0
    a162:	f04f 0300 	mov.w	r3, #0	; 0x0
    a166:	f012 fd03 	bl	1cb70 <__aeabi_dcmpeq>
    a16a:	4603      	mov	r3, r0
    a16c:	2b00      	cmp	r3, #0
    a16e:	d03a      	beq.n	a1e6 <_ZN9Odometrie6updateEv+0x21a>
    {
        posX += tmpDist*cos(ang);
    a170:	687b      	ldr	r3, [r7, #4]
    a172:	e9d3 4516 	ldrd	r4, r5, [r3, #88]
    a176:	687b      	ldr	r3, [r7, #4]
    a178:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a17c:	4610      	mov	r0, r2
    a17e:	4619      	mov	r1, r3
    a180:	f016 fb9a 	bl	208b8 <cos>
    a184:	4602      	mov	r2, r0
    a186:	460b      	mov	r3, r1
    a188:	4610      	mov	r0, r2
    a18a:	4619      	mov	r1, r3
    a18c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]
    a190:	f012 fa88 	bl	1c6a4 <__aeabi_dmul>
    a194:	4602      	mov	r2, r0
    a196:	460b      	mov	r3, r1
    a198:	4620      	mov	r0, r4
    a19a:	4629      	mov	r1, r5
    a19c:	f012 f8d0 	bl	1c340 <__adddf3>
    a1a0:	4602      	mov	r2, r0
    a1a2:	460b      	mov	r3, r1
    a1a4:	6879      	ldr	r1, [r7, #4]
    a1a6:	e9c1 2316 	strd	r2, r3, [r1, #88]
        posY += tmpDist*sin(ang);
    a1aa:	687b      	ldr	r3, [r7, #4]
    a1ac:	e9d3 4518 	ldrd	r4, r5, [r3, #96]
    a1b0:	687b      	ldr	r3, [r7, #4]
    a1b2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a1b6:	4610      	mov	r0, r2
    a1b8:	4619      	mov	r1, r3
    a1ba:	f016 fbbf 	bl	2093c <sin>
    a1be:	4602      	mov	r2, r0
    a1c0:	460b      	mov	r3, r1
    a1c2:	4610      	mov	r0, r2
    a1c4:	4619      	mov	r1, r3
    a1c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]
    a1ca:	f012 fa6b 	bl	1c6a4 <__aeabi_dmul>
    a1ce:	4602      	mov	r2, r0
    a1d0:	460b      	mov	r3, r1
    a1d2:	4620      	mov	r0, r4
    a1d4:	4629      	mov	r1, r5
    a1d6:	f012 f8b3 	bl	1c340 <__adddf3>
    a1da:	4602      	mov	r2, r0
    a1dc:	460b      	mov	r3, r1
    a1de:	6879      	ldr	r1, [r7, #4]
    a1e0:	e9c1 2318 	strd	r2, r3, [r1, #96]
    a1e4:	e0f3      	b.n	a3ce <_ZN9Odometrie6updateEv+0x402>
    }
    else
    {
        double rayonCourbure = tmpDist/tmpDeltaAngle;
    a1e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]
    a1ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
    a1ee:	f012 fb83 	bl	1c8f8 <__aeabi_ddiv>
    a1f2:	4602      	mov	r2, r0
    a1f4:	460b      	mov	r3, r1
    a1f6:	e9c7 230e 	strd	r2, r3, [r7, #56]
        double distAvancee = rayonCourbure*sin(tmpDeltaAngle);
    a1fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    a1fe:	f016 fb9d 	bl	2093c <sin>
    a202:	4602      	mov	r2, r0
    a204:	460b      	mov	r3, r1
    a206:	4610      	mov	r0, r2
    a208:	4619      	mov	r1, r3
    a20a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]
    a20e:	f012 fa49 	bl	1c6a4 <__aeabi_dmul>
    a212:	4602      	mov	r2, r0
    a214:	460b      	mov	r3, r1
    a216:	e9c7 2310 	strd	r2, r3, [r7, #64]
        double distTranslatee = rayonCourbure*(1.0-cos(tmpDeltaAngle));
    a21a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    a21e:	f016 fb4b 	bl	208b8 <cos>
    a222:	4602      	mov	r2, r0
    a224:	460b      	mov	r3, r1
    a226:	f04f 0000 	mov.w	r0, #0	; 0x0
    a22a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    a22e:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
    a232:	f012 f883 	bl	1c33c <__aeabi_dsub>
    a236:	4602      	mov	r2, r0
    a238:	460b      	mov	r3, r1
    a23a:	4610      	mov	r0, r2
    a23c:	4619      	mov	r1, r3
    a23e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]
    a242:	f012 fa2f 	bl	1c6a4 <__aeabi_dmul>
    a246:	4602      	mov	r2, r0
    a248:	460b      	mov	r3, r1
    a24a:	e9c7 2312 	strd	r2, r3, [r7, #72]

        posX += distAvancee*cos(ang)-distTranslatee*sin(ang);
    a24e:	687b      	ldr	r3, [r7, #4]
    a250:	e9d3 8916 	ldrd	r8, r9, [r3, #88]
    a254:	687b      	ldr	r3, [r7, #4]
    a256:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a25a:	4610      	mov	r0, r2
    a25c:	4619      	mov	r1, r3
    a25e:	f016 fb2b 	bl	208b8 <cos>
    a262:	4602      	mov	r2, r0
    a264:	460b      	mov	r3, r1
    a266:	4610      	mov	r0, r2
    a268:	4619      	mov	r1, r3
    a26a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]
    a26e:	f012 fa19 	bl	1c6a4 <__aeabi_dmul>
    a272:	4602      	mov	r2, r0
    a274:	460b      	mov	r3, r1
    a276:	4614      	mov	r4, r2
    a278:	461d      	mov	r5, r3
    a27a:	687b      	ldr	r3, [r7, #4]
    a27c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a280:	4610      	mov	r0, r2
    a282:	4619      	mov	r1, r3
    a284:	f016 fb5a 	bl	2093c <sin>
    a288:	4602      	mov	r2, r0
    a28a:	460b      	mov	r3, r1
    a28c:	4610      	mov	r0, r2
    a28e:	4619      	mov	r1, r3
    a290:	e9d7 2312 	ldrd	r2, r3, [r7, #72]
    a294:	f012 fa06 	bl	1c6a4 <__aeabi_dmul>
    a298:	4602      	mov	r2, r0
    a29a:	460b      	mov	r3, r1
    a29c:	4620      	mov	r0, r4
    a29e:	4629      	mov	r1, r5
    a2a0:	f012 f84c 	bl	1c33c <__aeabi_dsub>
    a2a4:	4602      	mov	r2, r0
    a2a6:	460b      	mov	r3, r1
    a2a8:	4640      	mov	r0, r8
    a2aa:	4649      	mov	r1, r9
    a2ac:	f012 f848 	bl	1c340 <__adddf3>
    a2b0:	4602      	mov	r2, r0
    a2b2:	460b      	mov	r3, r1
    a2b4:	6879      	ldr	r1, [r7, #4]
    a2b6:	e9c1 2316 	strd	r2, r3, [r1, #88]
        posY += distAvancee*sin(ang)+distTranslatee*cos(ang);
    a2ba:	687b      	ldr	r3, [r7, #4]
    a2bc:	e9d3 8918 	ldrd	r8, r9, [r3, #96]
    a2c0:	687b      	ldr	r3, [r7, #4]
    a2c2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a2c6:	4610      	mov	r0, r2
    a2c8:	4619      	mov	r1, r3
    a2ca:	f016 fb37 	bl	2093c <sin>
    a2ce:	4602      	mov	r2, r0
    a2d0:	460b      	mov	r3, r1
    a2d2:	4610      	mov	r0, r2
    a2d4:	4619      	mov	r1, r3
    a2d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]
    a2da:	f012 f9e3 	bl	1c6a4 <__aeabi_dmul>
    a2de:	4602      	mov	r2, r0
    a2e0:	460b      	mov	r3, r1
    a2e2:	4614      	mov	r4, r2
    a2e4:	461d      	mov	r5, r3
    a2e6:	687b      	ldr	r3, [r7, #4]
    a2e8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a2ec:	4610      	mov	r0, r2
    a2ee:	4619      	mov	r1, r3
    a2f0:	f016 fae2 	bl	208b8 <cos>
    a2f4:	4602      	mov	r2, r0
    a2f6:	460b      	mov	r3, r1
    a2f8:	4610      	mov	r0, r2
    a2fa:	4619      	mov	r1, r3
    a2fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]
    a300:	f012 f9d0 	bl	1c6a4 <__aeabi_dmul>
    a304:	4602      	mov	r2, r0
    a306:	460b      	mov	r3, r1
    a308:	4620      	mov	r0, r4
    a30a:	4629      	mov	r1, r5
    a30c:	f012 f818 	bl	1c340 <__adddf3>
    a310:	4602      	mov	r2, r0
    a312:	460b      	mov	r3, r1
    a314:	4640      	mov	r0, r8
    a316:	4649      	mov	r1, r9
    a318:	f012 f812 	bl	1c340 <__adddf3>
    a31c:	4602      	mov	r2, r0
    a31e:	460b      	mov	r3, r1
    a320:	6879      	ldr	r1, [r7, #4]
    a322:	e9c1 2318 	strd	r2, r3, [r1, #96]

        ang += vitesseAngulaire;
    a326:	687b      	ldr	r3, [r7, #4]
    a328:	e9d3 451a 	ldrd	r4, r5, [r3, #104]
    a32c:	687b      	ldr	r3, [r7, #4]
    a32e:	699b      	ldr	r3, [r3, #24]
    a330:	4618      	mov	r0, r3
    a332:	f012 f963 	bl	1c5fc <__aeabi_f2d>
    a336:	4602      	mov	r2, r0
    a338:	460b      	mov	r3, r1
    a33a:	4620      	mov	r0, r4
    a33c:	4629      	mov	r1, r5
    a33e:	f011 ffff 	bl	1c340 <__adddf3>
    a342:	4602      	mov	r2, r0
    a344:	460b      	mov	r3, r1
    a346:	6879      	ldr	r1, [r7, #4]
    a348:	e9c1 231a 	strd	r2, r3, [r1, #104]
        absAngle += vitesseAngulaire;
    a34c:	687b      	ldr	r3, [r7, #4]
    a34e:	6f1a      	ldr	r2, [r3, #112]
    a350:	687b      	ldr	r3, [r7, #4]
    a352:	699b      	ldr	r3, [r3, #24]
    a354:	4610      	mov	r0, r2
    a356:	4619      	mov	r1, r3
    a358:	f012 fcba 	bl	1ccd0 <__addsf3>
    a35c:	4603      	mov	r3, r0
    a35e:	461a      	mov	r2, r3
    a360:	687b      	ldr	r3, [r7, #4]
    a362:	671a      	str	r2, [r3, #112]
        if (ang > M_PI)
    a364:	687b      	ldr	r3, [r7, #4]
    a366:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a36a:	4610      	mov	r0, r2
    a36c:	4619      	mov	r1, r3
    a36e:	a232      	add	r2, pc, #200	(adr r2, a438 <_ZN9Odometrie6updateEv+0x46c>)
    a370:	ca0c      	ldmia	r2!, {r2, r3}
    a372:	f012 fc25 	bl	1cbc0 <__aeabi_dcmpgt>
    a376:	4603      	mov	r3, r0
    a378:	2b00      	cmp	r3, #0
    a37a:	d00e      	beq.n	a39a <_ZN9Odometrie6updateEv+0x3ce>
            ang -= 2.0*M_PI;
    a37c:	687b      	ldr	r3, [r7, #4]
    a37e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a382:	4610      	mov	r0, r2
    a384:	4619      	mov	r1, r3
    a386:	a22e      	add	r2, pc, #184	(adr r2, a440 <_ZN9Odometrie6updateEv+0x474>)
    a388:	ca0c      	ldmia	r2!, {r2, r3}
    a38a:	f011 ffd7 	bl	1c33c <__aeabi_dsub>
    a38e:	4602      	mov	r2, r0
    a390:	460b      	mov	r3, r1
    a392:	6879      	ldr	r1, [r7, #4]
    a394:	e9c1 231a 	strd	r2, r3, [r1, #104]
    a398:	e019      	b.n	a3ce <_ZN9Odometrie6updateEv+0x402>
        else if (ang < -M_PI)
    a39a:	687b      	ldr	r3, [r7, #4]
    a39c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a3a0:	4610      	mov	r0, r2
    a3a2:	4619      	mov	r1, r3
    a3a4:	a228      	add	r2, pc, #160	(adr r2, a448 <_ZN9Odometrie6updateEv+0x47c>)
    a3a6:	ca0c      	ldmia	r2!, {r2, r3}
    a3a8:	f012 fbec 	bl	1cb84 <__aeabi_dcmplt>
    a3ac:	4603      	mov	r3, r0
    a3ae:	2b00      	cmp	r3, #0
    a3b0:	d00d      	beq.n	a3ce <_ZN9Odometrie6updateEv+0x402>
            ang += 2.0*M_PI;
    a3b2:	687b      	ldr	r3, [r7, #4]
    a3b4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a3b8:	4610      	mov	r0, r2
    a3ba:	4619      	mov	r1, r3
    a3bc:	a220      	add	r2, pc, #128	(adr r2, a440 <_ZN9Odometrie6updateEv+0x474>)
    a3be:	ca0c      	ldmia	r2!, {r2, r3}
    a3c0:	f011 ffbe 	bl	1c340 <__adddf3>
    a3c4:	4602      	mov	r2, r0
    a3c6:	460b      	mov	r3, r1
    a3c8:	6879      	ldr	r1, [r7, #4]
    a3ca:	e9c1 231a 	strd	r2, r3, [r1, #104]
    }

    positionPlusAngle.setAngle(ang);
    a3ce:	687b      	ldr	r3, [r7, #4]
    a3d0:	f103 0408 	add.w	r4, r3, #8	; 0x8
    a3d4:	687b      	ldr	r3, [r7, #4]
    a3d6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a3da:	4610      	mov	r0, r2
    a3dc:	4619      	mov	r1, r3
    a3de:	f012 fc21 	bl	1cc24 <__aeabi_d2f>
    a3e2:	4603      	mov	r3, r0
    a3e4:	4620      	mov	r0, r4
    a3e6:	4619      	mov	r1, r3
    a3e8:	f004 ff5e 	bl	f2a8 <_ZN17PositionPlusAngle8setAngleEf>
    positionPlusAngle.setX(posX);
    a3ec:	687b      	ldr	r3, [r7, #4]
    a3ee:	f103 0408 	add.w	r4, r3, #8	; 0x8
    a3f2:	687b      	ldr	r3, [r7, #4]
    a3f4:	e9d3 2316 	ldrd	r2, r3, [r3, #88]
    a3f8:	4610      	mov	r0, r2
    a3fa:	4619      	mov	r1, r3
    a3fc:	f012 fc12 	bl	1cc24 <__aeabi_d2f>
    a400:	4603      	mov	r3, r0
    a402:	4620      	mov	r0, r4
    a404:	4619      	mov	r1, r3
    a406:	f004 ff6b 	bl	f2e0 <_ZN17PositionPlusAngle4setXEf>
    positionPlusAngle.setY(posY);
    a40a:	687b      	ldr	r3, [r7, #4]
    a40c:	f103 0408 	add.w	r4, r3, #8	; 0x8
    a410:	687b      	ldr	r3, [r7, #4]
    a412:	e9d3 2318 	ldrd	r2, r3, [r3, #96]
    a416:	4610      	mov	r0, r2
    a418:	4619      	mov	r1, r3
    a41a:	f012 fc03 	bl	1cc24 <__aeabi_d2f>
    a41e:	4603      	mov	r3, r0
    a420:	4620      	mov	r0, r4
    a422:	4619      	mov	r1, r3
    a424:	f004 ff4e 	bl	f2c4 <_ZN17PositionPlusAngle4setYEf>

}
    a428:	f107 0750 	add.w	r7, r7, #80	; 0x50
    a42c:	46bd      	mov	sp, r7
    a42e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    a432:	46c0      	nop			(mov r8, r8)
    a434:	46c0      	nop			(mov r8, r8)
    a436:	46c0      	nop			(mov r8, r8)
    a438:	54442d18 	.word	0x54442d18
    a43c:	400921fb 	.word	0x400921fb
    a440:	54442d18 	.word	0x54442d18
    a444:	401921fb 	.word	0x401921fb
    a448:	54442d18 	.word	0x54442d18
    a44c:	c00921fb 	.word	0xc00921fb

0000a450 <_ZN9OdometrieD1Ev>:

    absAngle = 0.0;

}

Odometrie::~Odometrie()
    a450:	b580      	push	{r7, lr}
    a452:	b082      	sub	sp, #8
    a454:	af00      	add	r7, sp, #0
    a456:	6078      	str	r0, [r7, #4]
{
    delete roueCodeuseGauche;
    a458:	687b      	ldr	r3, [r7, #4]
    a45a:	685b      	ldr	r3, [r3, #4]
    a45c:	4618      	mov	r0, r3
    a45e:	f004 fc09 	bl	ec74 <_ZdlPv>
    delete roueCodeuseDroite;
    a462:	687b      	ldr	r3, [r7, #4]
    a464:	681b      	ldr	r3, [r3, #0]
    a466:	4618      	mov	r0, r3
    a468:	f004 fc04 	bl	ec74 <_ZdlPv>
}
    a46c:	687b      	ldr	r3, [r7, #4]
    a46e:	4618      	mov	r0, r3
    a470:	f107 0708 	add.w	r7, r7, #8	; 0x8
    a474:	46bd      	mov	sp, r7
    a476:	bd80      	pop	{r7, pc}

0000a478 <_ZN9OdometrieD2Ev>:

    absAngle = 0.0;

}

Odometrie::~Odometrie()
    a478:	b580      	push	{r7, lr}
    a47a:	b082      	sub	sp, #8
    a47c:	af00      	add	r7, sp, #0
    a47e:	6078      	str	r0, [r7, #4]
{
    delete roueCodeuseGauche;
    a480:	687b      	ldr	r3, [r7, #4]
    a482:	685b      	ldr	r3, [r3, #4]
    a484:	4618      	mov	r0, r3
    a486:	f004 fbf5 	bl	ec74 <_ZdlPv>
    delete roueCodeuseDroite;
    a48a:	687b      	ldr	r3, [r7, #4]
    a48c:	681b      	ldr	r3, [r3, #0]
    a48e:	4618      	mov	r0, r3
    a490:	f004 fbf0 	bl	ec74 <_ZdlPv>
}
    a494:	687b      	ldr	r3, [r7, #4]
    a496:	4618      	mov	r0, r3
    a498:	f107 0708 	add.w	r7, r7, #8	; 0x8
    a49c:	46bd      	mov	sp, r7
    a49e:	bd80      	pop	{r7, pc}

0000a4a0 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_>:

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

Odometrie::Odometrie(QuadratureCoderHandler* roueCodeuseGauche, QuadratureCoderHandler* roueCodeuseDroite)
    a4a0:	b580      	push	{r7, lr}
    a4a2:	b086      	sub	sp, #24
    a4a4:	af00      	add	r7, sp, #0
    a4a6:	60f8      	str	r0, [r7, #12]
    a4a8:	60b9      	str	r1, [r7, #8]
    a4aa:	607a      	str	r2, [r7, #4]
: rayonRoueCodeuse(RAYON_ROUE)
    a4ac:	68fb      	ldr	r3, [r7, #12]
    a4ae:	f103 0308 	add.w	r3, r3, #8	; 0x8
    a4b2:	4618      	mov	r0, r3
    a4b4:	f005 f890 	bl	f5d8 <_ZN17PositionPlusAngleC1Ev>
    a4b8:	68f9      	ldr	r1, [r7, #12]
    a4ba:	f04f 0200 	mov.w	r2, #0	; 0x0
    a4be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a4c2:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    a4c6:	e9c1 230e 	strd	r2, r3, [r1, #56]
{

    vitesseLineaire =0;
    a4ca:	68fa      	ldr	r2, [r7, #12]
    a4cc:	4b4c      	ldr	r3, [pc, #304]	(a600 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x160>)
    a4ce:	6153      	str	r3, [r2, #20]
    vitesseAngulaire=0;
    a4d0:	68fa      	ldr	r2, [r7, #12]
    a4d2:	4b4b      	ldr	r3, [pc, #300]	(a600 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x160>)
    a4d4:	6193      	str	r3, [r2, #24]
    entraxe=TAILLE_ENTRAXE;
    a4d6:	68f9      	ldr	r1, [r7, #12]
    a4d8:	a245      	add	r2, pc, #276	(adr r2, a5f0 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x150>)
    a4da:	ca0c      	ldmia	r2!, {r2, r3}
    a4dc:	e9c1 230c 	strd	r2, r3, [r1, #48]
    rayonRoueCodeuse=RAYON_ROUE;
    a4e0:	68f9      	ldr	r1, [r7, #12]
    a4e2:	f04f 0200 	mov.w	r2, #0	; 0x0
    a4e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a4ea:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    a4ee:	e9c1 230e 	strd	r2, r3, [r1, #56]
    nbTicksParTour=NBR_TICK_PAR_TOUR;
    a4f2:	68f9      	ldr	r1, [r7, #12]
    a4f4:	f04f 0200 	mov.w	r2, #0	; 0x0
    a4f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a4fc:	f503 0340 	add.w	r3, r3, #12582912	; 0xc00000
    a500:	e9c1 2310 	strd	r2, r3, [r1, #64]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue
    a504:	68fb      	ldr	r3, [r7, #12]
    a506:	e9d3 230e 	ldrd	r2, r3, [r3, #56]
    a50a:	4610      	mov	r0, r2
    a50c:	4619      	mov	r1, r3
    a50e:	a23a      	add	r2, pc, #232	(adr r2, a5f8 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x158>)
    a510:	ca0c      	ldmia	r2!, {r2, r3}
    a512:	f012 f8c7 	bl	1c6a4 <__aeabi_dmul>
    a516:	4602      	mov	r2, r0
    a518:	460b      	mov	r3, r1
    a51a:	4610      	mov	r0, r2
    a51c:	4619      	mov	r1, r3
    a51e:	68fb      	ldr	r3, [r7, #12]
    a520:	e9d3 2310 	ldrd	r2, r3, [r3, #64]
    a524:	f012 f9e8 	bl	1c8f8 <__aeabi_ddiv>
    a528:	4602      	mov	r2, r0
    a52a:	460b      	mov	r3, r1
    a52c:	68f9      	ldr	r1, [r7, #12]
    a52e:	e9c1 2312 	strd	r2, r3, [r1, #72]

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1
    a532:	68fb      	ldr	r3, [r7, #12]
    a534:	e9d3 2312 	ldrd	r2, r3, [r3, #72]
    a538:	4610      	mov	r0, r2
    a53a:	4619      	mov	r1, r3
    a53c:	f04f 0200 	mov.w	r2, #0	; 0x0
    a540:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    a544:	f012 f8ae 	bl	1c6a4 <__aeabi_dmul>
    a548:	4602      	mov	r2, r0
    a54a:	460b      	mov	r3, r1
    a54c:	4610      	mov	r0, r2
    a54e:	4619      	mov	r1, r3
    a550:	68fb      	ldr	r3, [r7, #12]
    a552:	e9d3 230c 	ldrd	r2, r3, [r3, #48]
    a556:	f012 f9cf 	bl	1c8f8 <__aeabi_ddiv>
    a55a:	4602      	mov	r2, r0
    a55c:	460b      	mov	r3, r1
    a55e:	68f9      	ldr	r1, [r7, #12]
    a560:	e9c1 2314 	strd	r2, r3, [r1, #80]

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a564:	f04f 0300 	mov.w	r3, #0	; 0x0
    a568:	617b      	str	r3, [r7, #20]
    a56a:	e017      	b.n	a59c <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0xfc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
    a56c:	697b      	ldr	r3, [r7, #20]
    a56e:	68fa      	ldr	r2, [r7, #12]
    a570:	f103 0308 	add.w	r3, r3, #8	; 0x8
    a574:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a578:	4413      	add	r3, r2
    a57a:	f04f 0200 	mov.w	r2, #0	; 0x0
    a57e:	605a      	str	r2, [r3, #4]
        prevDeltaTicksRoueGauche[i] = 0;
    a580:	697b      	ldr	r3, [r7, #20]
    a582:	68fa      	ldr	r2, [r7, #12]
    a584:	f103 0306 	add.w	r3, r3, #6	; 0x6
    a588:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a58c:	4413      	add	r3, r2
    a58e:	f04f 0200 	mov.w	r2, #0	; 0x0
    a592:	605a      	str	r2, [r3, #4]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a594:	697b      	ldr	r3, [r7, #20]
    a596:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a59a:	617b      	str	r3, [r7, #20]
    a59c:	697b      	ldr	r3, [r7, #20]
    a59e:	2b01      	cmp	r3, #1
    a5a0:	dde4      	ble.n	a56c <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0xcc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
        prevDeltaTicksRoueGauche[i] = 0;
    }

    this->roueCodeuseGauche = roueCodeuseGauche;
    a5a2:	68fa      	ldr	r2, [r7, #12]
    a5a4:	68bb      	ldr	r3, [r7, #8]
    a5a6:	6053      	str	r3, [r2, #4]
    this->roueCodeuseDroite = roueCodeuseDroite;
    a5a8:	68fa      	ldr	r2, [r7, #12]
    a5aa:	687b      	ldr	r3, [r7, #4]
    a5ac:	6013      	str	r3, [r2, #0]
    Odometrie::odometrie = this;
    a5ae:	4a15      	ldr	r2, [pc, #84]	(a604 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x164>)
    a5b0:	68fb      	ldr	r3, [r7, #12]
    a5b2:	6013      	str	r3, [r2, #0]

    posX = 0.0;
    a5b4:	68f9      	ldr	r1, [r7, #12]
    a5b6:	f04f 0200 	mov.w	r2, #0	; 0x0
    a5ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    a5be:	e9c1 2316 	strd	r2, r3, [r1, #88]
    posY = 0.0;
    a5c2:	68f9      	ldr	r1, [r7, #12]
    a5c4:	f04f 0200 	mov.w	r2, #0	; 0x0
    a5c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    a5cc:	e9c1 2318 	strd	r2, r3, [r1, #96]
    ang = 0.0;
    a5d0:	68f9      	ldr	r1, [r7, #12]
    a5d2:	f04f 0200 	mov.w	r2, #0	; 0x0
    a5d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    a5da:	e9c1 231a 	strd	r2, r3, [r1, #104]

    absAngle = 0.0;
    a5de:	68fa      	ldr	r2, [r7, #12]
    a5e0:	4b07      	ldr	r3, [pc, #28]	(a600 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x160>)
    a5e2:	6713      	str	r3, [r2, #112]

}
    a5e4:	68fb      	ldr	r3, [r7, #12]
    a5e6:	4618      	mov	r0, r3
    a5e8:	f107 0718 	add.w	r7, r7, #24	; 0x18
    a5ec:	46bd      	mov	sp, r7
    a5ee:	bd80      	pop	{r7, pc}
    a5f0:	045fe111 	.word	0x045fe111
    a5f4:	4075908d 	.word	0x4075908d
    a5f8:	54442d18 	.word	0x54442d18
    a5fc:	400921fb 	.word	0x400921fb
    a600:	00000000 	.word	0x00000000
    a604:	20000574 	.word	0x20000574

0000a608 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_>:

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

Odometrie::Odometrie(QuadratureCoderHandler* roueCodeuseGauche, QuadratureCoderHandler* roueCodeuseDroite)
    a608:	b580      	push	{r7, lr}
    a60a:	b086      	sub	sp, #24
    a60c:	af00      	add	r7, sp, #0
    a60e:	60f8      	str	r0, [r7, #12]
    a610:	60b9      	str	r1, [r7, #8]
    a612:	607a      	str	r2, [r7, #4]
: rayonRoueCodeuse(RAYON_ROUE)
    a614:	68fb      	ldr	r3, [r7, #12]
    a616:	f103 0308 	add.w	r3, r3, #8	; 0x8
    a61a:	4618      	mov	r0, r3
    a61c:	f004 ffdc 	bl	f5d8 <_ZN17PositionPlusAngleC1Ev>
    a620:	68f9      	ldr	r1, [r7, #12]
    a622:	f04f 0200 	mov.w	r2, #0	; 0x0
    a626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a62a:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    a62e:	e9c1 230e 	strd	r2, r3, [r1, #56]
{

    vitesseLineaire =0;
    a632:	68fa      	ldr	r2, [r7, #12]
    a634:	4b4c      	ldr	r3, [pc, #304]	(a768 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x160>)
    a636:	6153      	str	r3, [r2, #20]
    vitesseAngulaire=0;
    a638:	68fa      	ldr	r2, [r7, #12]
    a63a:	4b4b      	ldr	r3, [pc, #300]	(a768 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x160>)
    a63c:	6193      	str	r3, [r2, #24]
    entraxe=TAILLE_ENTRAXE;
    a63e:	68f9      	ldr	r1, [r7, #12]
    a640:	a245      	add	r2, pc, #276	(adr r2, a758 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x150>)
    a642:	ca0c      	ldmia	r2!, {r2, r3}
    a644:	e9c1 230c 	strd	r2, r3, [r1, #48]
    rayonRoueCodeuse=RAYON_ROUE;
    a648:	68f9      	ldr	r1, [r7, #12]
    a64a:	f04f 0200 	mov.w	r2, #0	; 0x0
    a64e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a652:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    a656:	e9c1 230e 	strd	r2, r3, [r1, #56]
    nbTicksParTour=NBR_TICK_PAR_TOUR;
    a65a:	68f9      	ldr	r1, [r7, #12]
    a65c:	f04f 0200 	mov.w	r2, #0	; 0x0
    a660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a664:	f503 0340 	add.w	r3, r3, #12582912	; 0xc00000
    a668:	e9c1 2310 	strd	r2, r3, [r1, #64]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue
    a66c:	68fb      	ldr	r3, [r7, #12]
    a66e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]
    a672:	4610      	mov	r0, r2
    a674:	4619      	mov	r1, r3
    a676:	a23a      	add	r2, pc, #232	(adr r2, a760 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x158>)
    a678:	ca0c      	ldmia	r2!, {r2, r3}
    a67a:	f012 f813 	bl	1c6a4 <__aeabi_dmul>
    a67e:	4602      	mov	r2, r0
    a680:	460b      	mov	r3, r1
    a682:	4610      	mov	r0, r2
    a684:	4619      	mov	r1, r3
    a686:	68fb      	ldr	r3, [r7, #12]
    a688:	e9d3 2310 	ldrd	r2, r3, [r3, #64]
    a68c:	f012 f934 	bl	1c8f8 <__aeabi_ddiv>
    a690:	4602      	mov	r2, r0
    a692:	460b      	mov	r3, r1
    a694:	68f9      	ldr	r1, [r7, #12]
    a696:	e9c1 2312 	strd	r2, r3, [r1, #72]

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1
    a69a:	68fb      	ldr	r3, [r7, #12]
    a69c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]
    a6a0:	4610      	mov	r0, r2
    a6a2:	4619      	mov	r1, r3
    a6a4:	f04f 0200 	mov.w	r2, #0	; 0x0
    a6a8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    a6ac:	f011 fffa 	bl	1c6a4 <__aeabi_dmul>
    a6b0:	4602      	mov	r2, r0
    a6b2:	460b      	mov	r3, r1
    a6b4:	4610      	mov	r0, r2
    a6b6:	4619      	mov	r1, r3
    a6b8:	68fb      	ldr	r3, [r7, #12]
    a6ba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]
    a6be:	f012 f91b 	bl	1c8f8 <__aeabi_ddiv>
    a6c2:	4602      	mov	r2, r0
    a6c4:	460b      	mov	r3, r1
    a6c6:	68f9      	ldr	r1, [r7, #12]
    a6c8:	e9c1 2314 	strd	r2, r3, [r1, #80]

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a6cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    a6d0:	617b      	str	r3, [r7, #20]
    a6d2:	e017      	b.n	a704 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0xfc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
    a6d4:	697b      	ldr	r3, [r7, #20]
    a6d6:	68fa      	ldr	r2, [r7, #12]
    a6d8:	f103 0308 	add.w	r3, r3, #8	; 0x8
    a6dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a6e0:	4413      	add	r3, r2
    a6e2:	f04f 0200 	mov.w	r2, #0	; 0x0
    a6e6:	605a      	str	r2, [r3, #4]
        prevDeltaTicksRoueGauche[i] = 0;
    a6e8:	697b      	ldr	r3, [r7, #20]
    a6ea:	68fa      	ldr	r2, [r7, #12]
    a6ec:	f103 0306 	add.w	r3, r3, #6	; 0x6
    a6f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a6f4:	4413      	add	r3, r2
    a6f6:	f04f 0200 	mov.w	r2, #0	; 0x0
    a6fa:	605a      	str	r2, [r3, #4]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a6fc:	697b      	ldr	r3, [r7, #20]
    a6fe:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a702:	617b      	str	r3, [r7, #20]
    a704:	697b      	ldr	r3, [r7, #20]
    a706:	2b01      	cmp	r3, #1
    a708:	dde4      	ble.n	a6d4 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0xcc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
        prevDeltaTicksRoueGauche[i] = 0;
    }

    this->roueCodeuseGauche = roueCodeuseGauche;
    a70a:	68fa      	ldr	r2, [r7, #12]
    a70c:	68bb      	ldr	r3, [r7, #8]
    a70e:	6053      	str	r3, [r2, #4]
    this->roueCodeuseDroite = roueCodeuseDroite;
    a710:	68fa      	ldr	r2, [r7, #12]
    a712:	687b      	ldr	r3, [r7, #4]
    a714:	6013      	str	r3, [r2, #0]
    Odometrie::odometrie = this;
    a716:	4a15      	ldr	r2, [pc, #84]	(a76c <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x164>)
    a718:	68fb      	ldr	r3, [r7, #12]
    a71a:	6013      	str	r3, [r2, #0]

    posX = 0.0;
    a71c:	68f9      	ldr	r1, [r7, #12]
    a71e:	f04f 0200 	mov.w	r2, #0	; 0x0
    a722:	f04f 0300 	mov.w	r3, #0	; 0x0
    a726:	e9c1 2316 	strd	r2, r3, [r1, #88]
    posY = 0.0;
    a72a:	68f9      	ldr	r1, [r7, #12]
    a72c:	f04f 0200 	mov.w	r2, #0	; 0x0
    a730:	f04f 0300 	mov.w	r3, #0	; 0x0
    a734:	e9c1 2318 	strd	r2, r3, [r1, #96]
    ang = 0.0;
    a738:	68f9      	ldr	r1, [r7, #12]
    a73a:	f04f 0200 	mov.w	r2, #0	; 0x0
    a73e:	f04f 0300 	mov.w	r3, #0	; 0x0
    a742:	e9c1 231a 	strd	r2, r3, [r1, #104]

    absAngle = 0.0;
    a746:	68fa      	ldr	r2, [r7, #12]
    a748:	4b07      	ldr	r3, [pc, #28]	(a768 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x160>)
    a74a:	6713      	str	r3, [r2, #112]

}
    a74c:	68fb      	ldr	r3, [r7, #12]
    a74e:	4618      	mov	r0, r3
    a750:	f107 0718 	add.w	r7, r7, #24	; 0x18
    a754:	46bd      	mov	sp, r7
    a756:	bd80      	pop	{r7, pc}
    a758:	045fe111 	.word	0x045fe111
    a75c:	4075908d 	.word	0x4075908d
    a760:	54442d18 	.word	0x54442d18
    a764:	400921fb 	.word	0x400921fb
    a768:	00000000 	.word	0x00000000
    a76c:	20000574 	.word	0x20000574

0000a770 <_ZN14PIDFilterAngleC2Ev>:

const float PIDFilterAngle::Kp = FILTER_ANGLE_KP;
const float PIDFilterAngle::Kd = FILTER_ANGLE_KD;
const float PIDFilterAngle::Ki = FILTER_ANGLE_KI;

PIDFilterAngle::PIDFilterAngle() :
    a770:	b480      	push	{r7}
    a772:	b083      	sub	sp, #12
    a774:	af00      	add	r7, sp, #0
    a776:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a778:	687a      	ldr	r2, [r7, #4]
    a77a:	4b06      	ldr	r3, [pc, #24]	(a794 <_ZN14PIDFilterAngleC2Ev+0x24>)
    a77c:	6013      	str	r3, [r2, #0]
    a77e:	687a      	ldr	r2, [r7, #4]
    a780:	4b04      	ldr	r3, [pc, #16]	(a794 <_ZN14PIDFilterAngleC2Ev+0x24>)
    a782:	6053      	str	r3, [r2, #4]
{
}
    a784:	687b      	ldr	r3, [r7, #4]
    a786:	4618      	mov	r0, r3
    a788:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a78c:	46bd      	mov	sp, r7
    a78e:	bc80      	pop	{r7}
    a790:	4770      	bx	lr
    a792:	46c0      	nop			(mov r8, r8)
    a794:	00000000 	.word	0x00000000

0000a798 <_ZN14PIDFilterAngleC1Ev>:

const float PIDFilterAngle::Kp = FILTER_ANGLE_KP;
const float PIDFilterAngle::Kd = FILTER_ANGLE_KD;
const float PIDFilterAngle::Ki = FILTER_ANGLE_KI;

PIDFilterAngle::PIDFilterAngle() :
    a798:	b480      	push	{r7}
    a79a:	b083      	sub	sp, #12
    a79c:	af00      	add	r7, sp, #0
    a79e:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a7a0:	687a      	ldr	r2, [r7, #4]
    a7a2:	4b06      	ldr	r3, [pc, #24]	(a7bc <_ZN14PIDFilterAngleC1Ev+0x24>)
    a7a4:	6013      	str	r3, [r2, #0]
    a7a6:	687a      	ldr	r2, [r7, #4]
    a7a8:	4b04      	ldr	r3, [pc, #16]	(a7bc <_ZN14PIDFilterAngleC1Ev+0x24>)
    a7aa:	6053      	str	r3, [r2, #4]
{
}
    a7ac:	687b      	ldr	r3, [r7, #4]
    a7ae:	4618      	mov	r0, r3
    a7b0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a7b4:	46bd      	mov	sp, r7
    a7b6:	bc80      	pop	{r7}
    a7b8:	4770      	bx	lr
    a7ba:	46c0      	nop			(mov r8, r8)
    a7bc:	00000000 	.word	0x00000000

0000a7c0 <_ZN14PIDFilterAngle16getFilteredValueEf>:

float PIDFilterAngle::getFilteredValue(Angle erreur){
    a7c0:	b590      	push	{r4, r7, lr}
    a7c2:	b087      	sub	sp, #28
    a7c4:	af00      	add	r7, sp, #0
    a7c6:	6078      	str	r0, [r7, #4]
    a7c8:	6039      	str	r1, [r7, #0]
    sommeErreurs=sommeErreurs*FILTER_ANGLE_COEF+erreur;
    a7ca:	687b      	ldr	r3, [r7, #4]
    a7cc:	681b      	ldr	r3, [r3, #0]
    a7ce:	4618      	mov	r0, r3
    a7d0:	6839      	ldr	r1, [r7, #0]
    a7d2:	f012 fa7d 	bl	1ccd0 <__addsf3>
    a7d6:	4603      	mov	r3, r0
    a7d8:	461a      	mov	r2, r3
    a7da:	687b      	ldr	r3, [r7, #4]
    a7dc:	601a      	str	r2, [r3, #0]
    Angle proportionnel = erreur;
    a7de:	683b      	ldr	r3, [r7, #0]
    a7e0:	60fb      	str	r3, [r7, #12]
    Angle integrale = sommeErreurs;
    a7e2:	687b      	ldr	r3, [r7, #4]
    a7e4:	681b      	ldr	r3, [r3, #0]
    a7e6:	613b      	str	r3, [r7, #16]
    Angle derivee = erreur - erreurPrecedente;
    a7e8:	687b      	ldr	r3, [r7, #4]
    a7ea:	685b      	ldr	r3, [r3, #4]
    a7ec:	6838      	ldr	r0, [r7, #0]
    a7ee:	4619      	mov	r1, r3
    a7f0:	f012 fa6c 	bl	1cccc <__aeabi_fsub>
    a7f4:	4603      	mov	r3, r0
    a7f6:	617b      	str	r3, [r7, #20]
    erreurPrecedente=erreur;
    a7f8:	687a      	ldr	r2, [r7, #4]
    a7fa:	683b      	ldr	r3, [r7, #0]
    a7fc:	6053      	str	r3, [r2, #4]
    return proportionnel*Kp
         + integrale*Ki
         + derivee*Kd;
    a7fe:	68f8      	ldr	r0, [r7, #12]
    a800:	490f      	ldr	r1, [pc, #60]	(a840 <_ZN14PIDFilterAngle16getFilteredValueEf+0x80>)
    a802:	f012 fb6d 	bl	1cee0 <__aeabi_fmul>
    a806:	4603      	mov	r3, r0
    a808:	461c      	mov	r4, r3
    a80a:	6938      	ldr	r0, [r7, #16]
    a80c:	490d      	ldr	r1, [pc, #52]	(a844 <_ZN14PIDFilterAngle16getFilteredValueEf+0x84>)
    a80e:	f012 fb67 	bl	1cee0 <__aeabi_fmul>
    a812:	4603      	mov	r3, r0
    a814:	4620      	mov	r0, r4
    a816:	4619      	mov	r1, r3
    a818:	f012 fa5a 	bl	1ccd0 <__addsf3>
    a81c:	4603      	mov	r3, r0
    a81e:	461c      	mov	r4, r3
    a820:	6978      	ldr	r0, [r7, #20]
    a822:	4909      	ldr	r1, [pc, #36]	(a848 <_ZN14PIDFilterAngle16getFilteredValueEf+0x88>)
    a824:	f012 fb5c 	bl	1cee0 <__aeabi_fmul>
    a828:	4603      	mov	r3, r0
    a82a:	4620      	mov	r0, r4
    a82c:	4619      	mov	r1, r3
    a82e:	f012 fa4f 	bl	1ccd0 <__addsf3>
    a832:	4603      	mov	r3, r0
}
    a834:	4618      	mov	r0, r3
    a836:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    a83a:	46bd      	mov	sp, r7
    a83c:	bd90      	pop	{r4, r7, pc}
    a83e:	46c0      	nop			(mov r8, r8)
    a840:	42960000 	.word	0x42960000
    a844:	3f333333 	.word	0x3f333333
    a848:	3f000000 	.word	0x3f000000

0000a84c <_ZN14PIDFilterAngle11resetErrorsEv>:

void PIDFilterAngle::resetErrors(){
    a84c:	b480      	push	{r7}
    a84e:	b083      	sub	sp, #12
    a850:	af00      	add	r7, sp, #0
    a852:	6078      	str	r0, [r7, #4]
    sommeErreurs = 0;
    a854:	687a      	ldr	r2, [r7, #4]
    a856:	4b05      	ldr	r3, [pc, #20]	(a86c <_ZN14PIDFilterAngle11resetErrorsEv+0x20>)
    a858:	6013      	str	r3, [r2, #0]
    erreurPrecedente = 0;
    a85a:	687a      	ldr	r2, [r7, #4]
    a85c:	4b03      	ldr	r3, [pc, #12]	(a86c <_ZN14PIDFilterAngle11resetErrorsEv+0x20>)
    a85e:	6053      	str	r3, [r2, #4]
}
    a860:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a864:	46bd      	mov	sp, r7
    a866:	bc80      	pop	{r7}
    a868:	4770      	bx	lr
    a86a:	46c0      	nop			(mov r8, r8)
    a86c:	00000000 	.word	0x00000000

0000a870 <_ZN17PIDFilterDistanceC2Ev>:
const float PIDFilterDistance::Kp = FILTER_LINEAIRE_KP;
const float PIDFilterDistance::Kd = FILTER_LINEAIRE_KD;
const float PIDFilterDistance::Ki = FILTER_LINEAIRE_KI;


PIDFilterDistance::PIDFilterDistance() :
    a870:	b480      	push	{r7}
    a872:	b083      	sub	sp, #12
    a874:	af00      	add	r7, sp, #0
    a876:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a878:	687a      	ldr	r2, [r7, #4]
    a87a:	4b06      	ldr	r3, [pc, #24]	(a894 <_ZN17PIDFilterDistanceC2Ev+0x24>)
    a87c:	6013      	str	r3, [r2, #0]
    a87e:	687a      	ldr	r2, [r7, #4]
    a880:	4b04      	ldr	r3, [pc, #16]	(a894 <_ZN17PIDFilterDistanceC2Ev+0x24>)
    a882:	6053      	str	r3, [r2, #4]
{
}
    a884:	687b      	ldr	r3, [r7, #4]
    a886:	4618      	mov	r0, r3
    a888:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a88c:	46bd      	mov	sp, r7
    a88e:	bc80      	pop	{r7}
    a890:	4770      	bx	lr
    a892:	46c0      	nop			(mov r8, r8)
    a894:	00000000 	.word	0x00000000

0000a898 <_ZN17PIDFilterDistanceC1Ev>:
const float PIDFilterDistance::Kp = FILTER_LINEAIRE_KP;
const float PIDFilterDistance::Kd = FILTER_LINEAIRE_KD;
const float PIDFilterDistance::Ki = FILTER_LINEAIRE_KI;


PIDFilterDistance::PIDFilterDistance() :
    a898:	b480      	push	{r7}
    a89a:	b083      	sub	sp, #12
    a89c:	af00      	add	r7, sp, #0
    a89e:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a8a0:	687a      	ldr	r2, [r7, #4]
    a8a2:	4b06      	ldr	r3, [pc, #24]	(a8bc <_ZN17PIDFilterDistanceC1Ev+0x24>)
    a8a4:	6013      	str	r3, [r2, #0]
    a8a6:	687a      	ldr	r2, [r7, #4]
    a8a8:	4b04      	ldr	r3, [pc, #16]	(a8bc <_ZN17PIDFilterDistanceC1Ev+0x24>)
    a8aa:	6053      	str	r3, [r2, #4]
{
}
    a8ac:	687b      	ldr	r3, [r7, #4]
    a8ae:	4618      	mov	r0, r3
    a8b0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a8b4:	46bd      	mov	sp, r7
    a8b6:	bc80      	pop	{r7}
    a8b8:	4770      	bx	lr
    a8ba:	46c0      	nop			(mov r8, r8)
    a8bc:	00000000 	.word	0x00000000

0000a8c0 <_ZN17PIDFilterDistance16getFilteredValueEf>:

float PIDFilterDistance::getFilteredValue(Distance erreur){
    a8c0:	b590      	push	{r4, r7, lr}
    a8c2:	b087      	sub	sp, #28
    a8c4:	af00      	add	r7, sp, #0
    a8c6:	6078      	str	r0, [r7, #4]
    a8c8:	6039      	str	r1, [r7, #0]
    sommeErreurs=sommeErreurs*FILTER_LINEAIRE_COEF+erreur;
    a8ca:	687b      	ldr	r3, [r7, #4]
    a8cc:	681b      	ldr	r3, [r3, #0]
    a8ce:	4618      	mov	r0, r3
    a8d0:	6839      	ldr	r1, [r7, #0]
    a8d2:	f012 f9fd 	bl	1ccd0 <__addsf3>
    a8d6:	4603      	mov	r3, r0
    a8d8:	461a      	mov	r2, r3
    a8da:	687b      	ldr	r3, [r7, #4]
    a8dc:	601a      	str	r2, [r3, #0]
    Distance proportionnel = erreur;
    a8de:	683b      	ldr	r3, [r7, #0]
    a8e0:	60fb      	str	r3, [r7, #12]
    Distance integrale = sommeErreurs;
    a8e2:	687b      	ldr	r3, [r7, #4]
    a8e4:	681b      	ldr	r3, [r3, #0]
    a8e6:	613b      	str	r3, [r7, #16]
    Distance derivee = erreur - erreurPrecedente;
    a8e8:	687b      	ldr	r3, [r7, #4]
    a8ea:	685b      	ldr	r3, [r3, #4]
    a8ec:	6838      	ldr	r0, [r7, #0]
    a8ee:	4619      	mov	r1, r3
    a8f0:	f012 f9ec 	bl	1cccc <__aeabi_fsub>
    a8f4:	4603      	mov	r3, r0
    a8f6:	617b      	str	r3, [r7, #20]
    erreurPrecedente=erreur;
    a8f8:	687a      	ldr	r2, [r7, #4]
    a8fa:	683b      	ldr	r3, [r7, #0]
    a8fc:	6053      	str	r3, [r2, #4]
    return proportionnel*Kp
         + integrale*Ki
         + derivee*Kd;
    a8fe:	68f8      	ldr	r0, [r7, #12]
    a900:	490f      	ldr	r1, [pc, #60]	(a940 <_ZN17PIDFilterDistance16getFilteredValueEf+0x80>)
    a902:	f012 faed 	bl	1cee0 <__aeabi_fmul>
    a906:	4603      	mov	r3, r0
    a908:	461c      	mov	r4, r3
    a90a:	6938      	ldr	r0, [r7, #16]
    a90c:	490d      	ldr	r1, [pc, #52]	(a944 <_ZN17PIDFilterDistance16getFilteredValueEf+0x84>)
    a90e:	f012 fae7 	bl	1cee0 <__aeabi_fmul>
    a912:	4603      	mov	r3, r0
    a914:	4620      	mov	r0, r4
    a916:	4619      	mov	r1, r3
    a918:	f012 f9da 	bl	1ccd0 <__addsf3>
    a91c:	4603      	mov	r3, r0
    a91e:	461c      	mov	r4, r3
    a920:	6978      	ldr	r0, [r7, #20]
    a922:	4909      	ldr	r1, [pc, #36]	(a948 <_ZN17PIDFilterDistance16getFilteredValueEf+0x88>)
    a924:	f012 fadc 	bl	1cee0 <__aeabi_fmul>
    a928:	4603      	mov	r3, r0
    a92a:	4620      	mov	r0, r4
    a92c:	4619      	mov	r1, r3
    a92e:	f012 f9cf 	bl	1ccd0 <__addsf3>
    a932:	4603      	mov	r3, r0
}
    a934:	4618      	mov	r0, r3
    a936:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    a93a:	46bd      	mov	sp, r7
    a93c:	bd90      	pop	{r4, r7, pc}
    a93e:	46c0      	nop			(mov r8, r8)
    a940:	3e4ccccd 	.word	0x3e4ccccd
    a944:	3ba3d70a 	.word	0x3ba3d70a
    a948:	3f333333 	.word	0x3f333333

0000a94c <_ZN17PIDFilterDistance11resetErrorsEv>:

void PIDFilterDistance::resetErrors(){
    a94c:	b480      	push	{r7}
    a94e:	b083      	sub	sp, #12
    a950:	af00      	add	r7, sp, #0
    a952:	6078      	str	r0, [r7, #4]
    sommeErreurs = 0;
    a954:	687a      	ldr	r2, [r7, #4]
    a956:	4b05      	ldr	r3, [pc, #20]	(a96c <_ZN17PIDFilterDistance11resetErrorsEv+0x20>)
    a958:	6013      	str	r3, [r2, #0]
    erreurPrecedente = 0;
    a95a:	687a      	ldr	r2, [r7, #4]
    a95c:	4b03      	ldr	r3, [pc, #12]	(a96c <_ZN17PIDFilterDistance11resetErrorsEv+0x20>)
    a95e:	6053      	str	r3, [r2, #4]
}
    a960:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a964:	46bd      	mov	sp, r7
    a966:	bc80      	pop	{r7}
    a968:	4770      	bx	lr
    a96a:	46c0      	nop			(mov r8, r8)
    a96c:	00000000 	.word	0x00000000

0000a970 <_ZN5Debug3runEv>:
//#include "krabipacket.h"

// DMA
#define ADC3_DR_ADDRESS     ((uint32_t)0x4001224C)

void Debug::run()
    a970:	b480      	push	{r7}
    a972:	af00      	add	r7, sp, #0
{
    // test run
}
    a974:	46bd      	mov	sp, r7
    a976:	bc80      	pop	{r7}
    a978:	4770      	bx	lr
    a97a:	46c0      	nop			(mov r8, r8)

0000a97c <_ZN5Debug27__ADCSampleF4_adc_configureEv>:
    {
        convertedValue = __ADCSampleF4_adc_convert();//Read the ADC converted value
    }
}

void Debug::__ADCSampleF4_adc_configure()
    a97c:	b480      	push	{r7}
    a97e:	af00      	add	r7, sp, #0
    //Enable ADC conversion
    ADC_Cmd(ADC1,ENABLE);
    //Select the channel to be read from
    ADC_RegularChannelConfig(ADC1,ADC_Channel_10,1,ADC_SampleTime_144Cycles);
#endif
}
    a980:	46bd      	mov	sp, r7
    a982:	bc80      	pop	{r7}
    a984:	4770      	bx	lr
    a986:	46c0      	nop			(mov r8, r8)

0000a988 <_ZN5Debug25__ADCSampleF4_adc_convertEv>:

int Debug::__ADCSampleF4_adc_convert(){
    a988:	b480      	push	{r7}
    a98a:	b083      	sub	sp, #12
    a98c:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx)
    ADC_SoftwareStartConv(ADC1);//Start the conversion
    while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));//Processing the conversion
    return ADC_GetConversionValue(ADC1); //Return the converted data
#endif
}
    a98e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a992:	46bd      	mov	sp, r7
    a994:	bc80      	pop	{r7}
    a996:	4770      	bx	lr

0000a998 <_ZN5Debug15testADCSampleF4Ev>:
}

/**
    @brief Read the PC0 pin
*/
void Debug::testADCSampleF4()
    a998:	b580      	push	{r7, lr}
    a99a:	b082      	sub	sp, #8
    a99c:	af00      	add	r7, sp, #0
{
    __ADCSampleF4_adc_configure();//Start configuration
    a99e:	f7ff ffed 	bl	a97c <_ZN5Debug27__ADCSampleF4_adc_configureEv>

    int convertedValue = -1;
    a9a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a9a6:	607b      	str	r3, [r7, #4]
    while(true)
    {
        convertedValue = __ADCSampleF4_adc_convert();//Read the ADC converted value
    a9a8:	f7ff ffee 	bl	a988 <_ZN5Debug25__ADCSampleF4_adc_convertEv>
    a9ac:	4603      	mov	r3, r0
    a9ae:	607b      	str	r3, [r7, #4]
    a9b0:	e7fa      	b.n	a9a8 <_ZN5Debug15testADCSampleF4Ev+0x10>
    a9b2:	46c0      	nop			(mov r8, r8)

0000a9b4 <_ZN5Debug10testSharpsEv>:
    while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));//Processing the conversion
    return ADC_GetConversionValue(ADC1); //Return the converted data
#endif
}

void Debug::testSharps()
    a9b4:	b480      	push	{r7}
    a9b6:	af00      	add	r7, sp, #0
        for (int i = 0; i < 1000; i++)
        {
        }*/
  //  }

}
    a9b8:	46bd      	mov	sp, r7
    a9ba:	bc80      	pop	{r7}
    a9bc:	4770      	bx	lr
    a9be:	46c0      	nop			(mov r8, r8)

0000a9c0 <_ZN5Debug19testADC_DMASampleF4Ev>:


//__IO uint32_t ADC3ConvertedValue[4];
__IO uint16_t ADC3ConvertedValueN = 0;

void Debug::testADC_DMASampleF4()
    a9c0:	b480      	push	{r7}
    a9c2:	af00      	add	r7, sp, #0
    while(true)
    {
        convertedValue = ADC3ConvertedValueN;//Read the ADC converted value
    }
#endif
}
    a9c4:	46bd      	mov	sp, r7
    a9c6:	bc80      	pop	{r7}
    a9c8:	4770      	bx	lr
    a9ca:	46c0      	nop			(mov r8, r8)

0000a9cc <_ZN5Debug22__ADC_DMASampleF4_initEv>:

void Debug::__ADC_DMASampleF4_init(void)
    a9cc:	b480      	push	{r7}
    a9ce:	af00      	add	r7, sp, #0
    ADC_DMACmd(ADC3, ENABLE);

    /* Enable ADC3 */
    ADC_Cmd(ADC3, ENABLE);
#endif
}
    a9d0:	46bd      	mov	sp, r7
    a9d2:	bc80      	pop	{r7}
    a9d4:	4770      	bx	lr
    a9d6:	46c0      	nop			(mov r8, r8)

0000a9d8 <_ZN5Debug11testTiretteEP7Tirette>:

        for(int i=0; i<10000000; i++);
    }
}*/

void Debug::testTirette(Tirette* t)
    a9d8:	b580      	push	{r7, lr}
    a9da:	b082      	sub	sp, #8
    a9dc:	af00      	add	r7, sp, #0
    a9de:	6078      	str	r0, [r7, #4]
{
    while(true)
    {
        if (t->enlevee())
    a9e0:	6878      	ldr	r0, [r7, #4]
    a9e2:	f002 ff95 	bl	d910 <_ZNK7Tirette7enleveeEv>
    a9e6:	4603      	mov	r3, r0
    a9e8:	2b00      	cmp	r3, #0
    a9ea:	d004      	beq.n	a9f6 <_ZN5Debug11testTiretteEP7Tirette+0x1e>
            Led::setOff(0);
    a9ec:	f04f 0000 	mov.w	r0, #0	; 0x0
    a9f0:	f001 fd14 	bl	c41c <_ZN3Led6setOffEi>
    a9f4:	e7f4      	b.n	a9e0 <_ZN5Debug11testTiretteEP7Tirette+0x8>
        else
            Led::setOn(0);
    a9f6:	f04f 0000 	mov.w	r0, #0	; 0x0
    a9fa:	f001 fd4f 	bl	c49c <_ZN3Led5setOnEi>
    a9fe:	e7ef      	b.n	a9e0 <_ZN5Debug11testTiretteEP7Tirette+0x8>

0000aa00 <_ZN5Debug16testBrasLaterauxEv>:
        l += rcg->getTickValue();
        for(int i=0; i<1000000; i++);
    }
}

void Debug::testBrasLateraux()
    aa00:	b580      	push	{r7, lr}
    aa02:	b082      	sub	sp, #8
    aa04:	af00      	add	r7, sp, #0
        porteDroiteBas->goToAngle(90.0f);
        porteGaucheBas->goToAngle(90.0f);
        for (int i = 0; i < 10000000; i++);
    }*/

    BrasLateraux::initBrasLateraux();
    aa06:	f7fa fc43 	bl	5290 <_ZN12BrasLateraux16initBrasLaterauxEv>

    while(true)
    {
        BrasLateraux::getLeft()->expand();
    aa0a:	f7fa fcd9 	bl	53c0 <_ZN12BrasLateraux7getLeftEv>
    aa0e:	4603      	mov	r3, r0
    aa10:	4618      	mov	r0, r3
    aa12:	f7fa fbfd 	bl	5210 <_ZN12BrasLateraux6expandEv>
        BrasLateraux::getRight()->expand();
    aa16:	f7fa fcc3 	bl	53a0 <_ZN12BrasLateraux8getRightEv>
    aa1a:	4603      	mov	r3, r0
    aa1c:	4618      	mov	r0, r3
    aa1e:	f7fa fbf7 	bl	5210 <_ZN12BrasLateraux6expandEv>
        Led::toggle(0);
    aa22:	f04f 0000 	mov.w	r0, #0	; 0x0
    aa26:	f001 fd69 	bl	c4fc <_ZN3Led6toggleEi>

        for(int i=0; i<10000000; i++);
    aa2a:	f04f 0300 	mov.w	r3, #0	; 0x0
    aa2e:	603b      	str	r3, [r7, #0]
    aa30:	e003      	b.n	aa3a <_ZN5Debug16testBrasLaterauxEv+0x3a>
    aa32:	683b      	ldr	r3, [r7, #0]
    aa34:	f103 0301 	add.w	r3, r3, #1	; 0x1
    aa38:	603b      	str	r3, [r7, #0]
    aa3a:	683a      	ldr	r2, [r7, #0]
    aa3c:	4b0f      	ldr	r3, [pc, #60]	(aa7c <_ZN5Debug16testBrasLaterauxEv+0x7c>)
    aa3e:	429a      	cmp	r2, r3
    aa40:	ddf7      	ble.n	aa32 <_ZN5Debug16testBrasLaterauxEv+0x32>
        /*BrasLateral::getRight()->front();
        Led::toggle(0);

        for(int i=0; i<10000000; i++);*/

        BrasLateraux::getLeft()->collapse();
    aa42:	f7fa fcbd 	bl	53c0 <_ZN12BrasLateraux7getLeftEv>
    aa46:	4603      	mov	r3, r0
    aa48:	4618      	mov	r0, r3
    aa4a:	f7fa fbd1 	bl	51f0 <_ZN12BrasLateraux8collapseEv>
        BrasLateraux::getRight()->collapse();
    aa4e:	f7fa fca7 	bl	53a0 <_ZN12BrasLateraux8getRightEv>
    aa52:	4603      	mov	r3, r0
    aa54:	4618      	mov	r0, r3
    aa56:	f7fa fbcb 	bl	51f0 <_ZN12BrasLateraux8collapseEv>
        Led::toggle(0);
    aa5a:	f04f 0000 	mov.w	r0, #0	; 0x0
    aa5e:	f001 fd4d 	bl	c4fc <_ZN3Led6toggleEi>

        for(int i=0; i<10000000; i++);
    aa62:	f04f 0300 	mov.w	r3, #0	; 0x0
    aa66:	607b      	str	r3, [r7, #4]
    aa68:	e003      	b.n	aa72 <_ZN5Debug16testBrasLaterauxEv+0x72>
    aa6a:	687b      	ldr	r3, [r7, #4]
    aa6c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    aa70:	607b      	str	r3, [r7, #4]
    aa72:	687a      	ldr	r2, [r7, #4]
    aa74:	4b01      	ldr	r3, [pc, #4]	(aa7c <_ZN5Debug16testBrasLaterauxEv+0x7c>)
    aa76:	429a      	cmp	r2, r3
    aa78:	ddf7      	ble.n	aa6a <_ZN5Debug16testBrasLaterauxEv+0x6a>
    aa7a:	e7c6      	b.n	aa0a <_ZN5Debug16testBrasLaterauxEv+0xa>
    aa7c:	0098967f 	.word	0x0098967f

0000aa80 <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_>:
    /* Enable ADC3 */
    ADC_Cmd(ADC3, ENABLE);
#endif
}

void Debug::testQuadrature(QuadratureCoderHandler* rcg, QuadratureCoderHandler* rcd)
    aa80:	b580      	push	{r7, lr}
    aa82:	b086      	sub	sp, #24
    aa84:	af00      	add	r7, sp, #0
    aa86:	6078      	str	r0, [r7, #4]
    aa88:	6039      	str	r1, [r7, #0]
{
    long r = 0, l = 0;
    aa8a:	f04f 0300 	mov.w	r3, #0	; 0x0
    aa8e:	60fb      	str	r3, [r7, #12]
    aa90:	f04f 0300 	mov.w	r3, #0	; 0x0
    aa94:	613b      	str	r3, [r7, #16]
    while(true)
    {
        r += rcd->getTickValue();
    aa96:	6838      	ldr	r0, [r7, #0]
    aa98:	f002 f8ec 	bl	cc74 <_ZN22QuadratureCoderHandler12getTickValueEv>
    aa9c:	4603      	mov	r3, r0
    aa9e:	b29b      	uxth	r3, r3
    aaa0:	b21a      	sxth	r2, r3
    aaa2:	68fb      	ldr	r3, [r7, #12]
    aaa4:	4413      	add	r3, r2
    aaa6:	60fb      	str	r3, [r7, #12]
        l += rcg->getTickValue();
    aaa8:	6878      	ldr	r0, [r7, #4]
    aaaa:	f002 f8e3 	bl	cc74 <_ZN22QuadratureCoderHandler12getTickValueEv>
    aaae:	4603      	mov	r3, r0
    aab0:	b29b      	uxth	r3, r3
    aab2:	b21a      	sxth	r2, r3
    aab4:	693b      	ldr	r3, [r7, #16]
    aab6:	4413      	add	r3, r2
    aab8:	613b      	str	r3, [r7, #16]
        for(int i=0; i<1000000; i++);
    aaba:	f04f 0300 	mov.w	r3, #0	; 0x0
    aabe:	617b      	str	r3, [r7, #20]
    aac0:	e003      	b.n	aaca <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x4a>
    aac2:	697b      	ldr	r3, [r7, #20]
    aac4:	f103 0301 	add.w	r3, r3, #1	; 0x1
    aac8:	617b      	str	r3, [r7, #20]
    aaca:	697a      	ldr	r2, [r7, #20]
    aacc:	4b01      	ldr	r3, [pc, #4]	(aad4 <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x54>)
    aace:	429a      	cmp	r2, r3
    aad0:	ddf7      	ble.n	aac2 <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x42>
    aad2:	e7e0      	b.n	aa96 <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x16>
    aad4:	000f423f 	.word	0x000f423f

0000aad8 <_ZN5Debug15testServoAnalogEv>:
void Debug::run()
{
    // test run
}

void Debug::testServoAnalog()
    aad8:	b580      	push	{r7, lr}
    aada:	b094      	sub	sp, #80
    aadc:	af02      	add	r7, sp, #8
{
    Timer* timer1 = new Timer(TIM1, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    aade:	f04f 000c 	mov.w	r0, #12	; 0xc
    aae2:	f004 f821 	bl	eb28 <_Znwj>
    aae6:	4603      	mov	r3, r0
    aae8:	603b      	str	r3, [r7, #0]
    aaea:	683b      	ldr	r3, [r7, #0]
    aaec:	2b00      	cmp	r3, #0
    aaee:	d00d      	beq.n	ab0c <_ZN5Debug15testServoAnalogEv+0x34>
    aaf0:	f04f 0300 	mov.w	r3, #0	; 0x0
    aaf4:	9300      	str	r3, [sp, #0]
    aaf6:	6838      	ldr	r0, [r7, #0]
    aaf8:	4955      	ldr	r1, [pc, #340]	(ac50 <_ZN5Debug15testServoAnalogEv+0x178>)
    aafa:	f644 6220 	movw	r2, #20000	; 0x4e20
    aafe:	f04f 0347 	mov.w	r3, #71	; 0x47
    ab02:	f002 fe99 	bl	d838 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    ab06:	683b      	ldr	r3, [r7, #0]
    ab08:	607b      	str	r3, [r7, #4]
    ab0a:	e001      	b.n	ab10 <_ZN5Debug15testServoAnalogEv+0x38>
    ab0c:	683b      	ldr	r3, [r7, #0]
    ab0e:	607b      	str	r3, [r7, #4]
    ab10:	687b      	ldr	r3, [r7, #4]
    ab12:	62bb      	str	r3, [r7, #40]
    TIM_CtrlPWMOutputs(TIM1, ENABLE);
    ab14:	484e      	ldr	r0, [pc, #312]	(ac50 <_ZN5Debug15testServoAnalogEv+0x178>)
    ab16:	f04f 0101 	mov.w	r1, #1	; 0x1
    ab1a:	f7f8 faab 	bl	3074 <TIM_CtrlPWMOutputs>

    Servo* servo1 = new Servo(timer1, 1, 0.01f, 0.11f);
    ab1e:	f04f 0014 	mov.w	r0, #20	; 0x14
    ab22:	f004 f801 	bl	eb28 <_Znwj>
    ab26:	4603      	mov	r3, r0
    ab28:	60bb      	str	r3, [r7, #8]
    ab2a:	68bb      	ldr	r3, [r7, #8]
    ab2c:	2b00      	cmp	r3, #0
    ab2e:	d00b      	beq.n	ab48 <_ZN5Debug15testServoAnalogEv+0x70>
    ab30:	4b48      	ldr	r3, [pc, #288]	(ac54 <_ZN5Debug15testServoAnalogEv+0x17c>)
    ab32:	9300      	str	r3, [sp, #0]
    ab34:	68b8      	ldr	r0, [r7, #8]
    ab36:	6ab9      	ldr	r1, [r7, #40]
    ab38:	f04f 0201 	mov.w	r2, #1	; 0x1
    ab3c:	4b46      	ldr	r3, [pc, #280]	(ac58 <_ZN5Debug15testServoAnalogEv+0x180>)
    ab3e:	f7fc fa57 	bl	6ff0 <_ZN5ServoC1EP5Timerhff>
    ab42:	68bb      	ldr	r3, [r7, #8]
    ab44:	60fb      	str	r3, [r7, #12]
    ab46:	e001      	b.n	ab4c <_ZN5Debug15testServoAnalogEv+0x74>
    ab48:	68bb      	ldr	r3, [r7, #8]
    ab4a:	60fb      	str	r3, [r7, #12]
    ab4c:	68fb      	ldr	r3, [r7, #12]
    ab4e:	62fb      	str	r3, [r7, #44]
    Servo* servo2 = new Servo(timer1, 2, 0.01f, 0.11f);
    ab50:	f04f 0014 	mov.w	r0, #20	; 0x14
    ab54:	f003 ffe8 	bl	eb28 <_Znwj>
    ab58:	4603      	mov	r3, r0
    ab5a:	613b      	str	r3, [r7, #16]
    ab5c:	693b      	ldr	r3, [r7, #16]
    ab5e:	2b00      	cmp	r3, #0
    ab60:	d00b      	beq.n	ab7a <_ZN5Debug15testServoAnalogEv+0xa2>
    ab62:	4b3c      	ldr	r3, [pc, #240]	(ac54 <_ZN5Debug15testServoAnalogEv+0x17c>)
    ab64:	9300      	str	r3, [sp, #0]
    ab66:	6938      	ldr	r0, [r7, #16]
    ab68:	6ab9      	ldr	r1, [r7, #40]
    ab6a:	f04f 0202 	mov.w	r2, #2	; 0x2
    ab6e:	4b3a      	ldr	r3, [pc, #232]	(ac58 <_ZN5Debug15testServoAnalogEv+0x180>)
    ab70:	f7fc fa3e 	bl	6ff0 <_ZN5ServoC1EP5Timerhff>
    ab74:	693b      	ldr	r3, [r7, #16]
    ab76:	617b      	str	r3, [r7, #20]
    ab78:	e001      	b.n	ab7e <_ZN5Debug15testServoAnalogEv+0xa6>
    ab7a:	693b      	ldr	r3, [r7, #16]
    ab7c:	617b      	str	r3, [r7, #20]
    ab7e:	697b      	ldr	r3, [r7, #20]
    ab80:	633b      	str	r3, [r7, #48]
    Servo* servo3 = new Servo(timer1, 3, 0.01f, 0.11f);
    ab82:	f04f 0014 	mov.w	r0, #20	; 0x14
    ab86:	f003 ffcf 	bl	eb28 <_Znwj>
    ab8a:	4603      	mov	r3, r0
    ab8c:	61bb      	str	r3, [r7, #24]
    ab8e:	69bb      	ldr	r3, [r7, #24]
    ab90:	2b00      	cmp	r3, #0
    ab92:	d00b      	beq.n	abac <_ZN5Debug15testServoAnalogEv+0xd4>
    ab94:	4b2f      	ldr	r3, [pc, #188]	(ac54 <_ZN5Debug15testServoAnalogEv+0x17c>)
    ab96:	9300      	str	r3, [sp, #0]
    ab98:	69b8      	ldr	r0, [r7, #24]
    ab9a:	6ab9      	ldr	r1, [r7, #40]
    ab9c:	f04f 0203 	mov.w	r2, #3	; 0x3
    aba0:	4b2d      	ldr	r3, [pc, #180]	(ac58 <_ZN5Debug15testServoAnalogEv+0x180>)
    aba2:	f7fc fa25 	bl	6ff0 <_ZN5ServoC1EP5Timerhff>
    aba6:	69bb      	ldr	r3, [r7, #24]
    aba8:	61fb      	str	r3, [r7, #28]
    abaa:	e001      	b.n	abb0 <_ZN5Debug15testServoAnalogEv+0xd8>
    abac:	69bb      	ldr	r3, [r7, #24]
    abae:	61fb      	str	r3, [r7, #28]
    abb0:	69fb      	ldr	r3, [r7, #28]
    abb2:	637b      	str	r3, [r7, #52]
    Servo* servo4 = new Servo(timer1, 4, 0.01f, 0.11f);
    abb4:	f04f 0014 	mov.w	r0, #20	; 0x14
    abb8:	f003 ffb6 	bl	eb28 <_Znwj>
    abbc:	4603      	mov	r3, r0
    abbe:	623b      	str	r3, [r7, #32]
    abc0:	6a3b      	ldr	r3, [r7, #32]
    abc2:	2b00      	cmp	r3, #0
    abc4:	d00b      	beq.n	abde <_ZN5Debug15testServoAnalogEv+0x106>
    abc6:	4b23      	ldr	r3, [pc, #140]	(ac54 <_ZN5Debug15testServoAnalogEv+0x17c>)
    abc8:	9300      	str	r3, [sp, #0]
    abca:	6a38      	ldr	r0, [r7, #32]
    abcc:	6ab9      	ldr	r1, [r7, #40]
    abce:	f04f 0204 	mov.w	r2, #4	; 0x4
    abd2:	4b21      	ldr	r3, [pc, #132]	(ac58 <_ZN5Debug15testServoAnalogEv+0x180>)
    abd4:	f7fc fa0c 	bl	6ff0 <_ZN5ServoC1EP5Timerhff>
    abd8:	6a3b      	ldr	r3, [r7, #32]
    abda:	627b      	str	r3, [r7, #36]
    abdc:	e001      	b.n	abe2 <_ZN5Debug15testServoAnalogEv+0x10a>
    abde:	6a3b      	ldr	r3, [r7, #32]
    abe0:	627b      	str	r3, [r7, #36]
    abe2:	6a7b      	ldr	r3, [r7, #36]
    abe4:	63bb      	str	r3, [r7, #56]

    for(int i=0; i<2000; i++)
    abe6:	f04f 0300 	mov.w	r3, #0	; 0x0
    abea:	63fb      	str	r3, [r7, #60]
    abec:	e027      	b.n	ac3e <_ZN5Debug15testServoAnalogEv+0x166>
    {
        servo1->goToAngle(70);
    abee:	6af8      	ldr	r0, [r7, #44]
    abf0:	491a      	ldr	r1, [pc, #104]	(ac5c <_ZN5Debug15testServoAnalogEv+0x184>)
    abf2:	f7fc f98d 	bl	6f10 <_ZN5Servo9goToAngleEf>
        /*servo2->goToAngle(BALAI_G_CLOSED);
        servo3->goToAngle(BALAI_G_CLOSED);
        servo4->goToAngle(BALAI_G_CLOSED);*/
        allumerLED();
    abf6:	f001 fca5 	bl	c544 <_Z10allumerLEDv>

        for(int j=0; j<10000000; j++);
    abfa:	f04f 0300 	mov.w	r3, #0	; 0x0
    abfe:	643b      	str	r3, [r7, #64]
    ac00:	e003      	b.n	ac0a <_ZN5Debug15testServoAnalogEv+0x132>
    ac02:	6c3b      	ldr	r3, [r7, #64]
    ac04:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ac08:	643b      	str	r3, [r7, #64]
    ac0a:	6c3a      	ldr	r2, [r7, #64]
    ac0c:	4b14      	ldr	r3, [pc, #80]	(ac60 <_ZN5Debug15testServoAnalogEv+0x188>)
    ac0e:	429a      	cmp	r2, r3
    ac10:	ddf7      	ble.n	ac02 <_ZN5Debug15testServoAnalogEv+0x12a>

        servo1->goToAngle(165);
    ac12:	6af8      	ldr	r0, [r7, #44]
    ac14:	4913      	ldr	r1, [pc, #76]	(ac64 <_ZN5Debug15testServoAnalogEv+0x18c>)
    ac16:	f7fc f97b 	bl	6f10 <_ZN5Servo9goToAngleEf>
        /*servo2->goToAngle(BALAI_G_OPEN);
        servo3->goToAngle(BALAI_G_OPEN);
        servo4->goToAngle(BALAI_G_OPEN);*/
        eteindreLED();
    ac1a:	f001 fc37 	bl	c48c <_Z11eteindreLEDv>

        for(int j=0; j<10000000; j++);
    ac1e:	f04f 0300 	mov.w	r3, #0	; 0x0
    ac22:	647b      	str	r3, [r7, #68]
    ac24:	e003      	b.n	ac2e <_ZN5Debug15testServoAnalogEv+0x156>
    ac26:	6c7b      	ldr	r3, [r7, #68]
    ac28:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ac2c:	647b      	str	r3, [r7, #68]
    ac2e:	6c7a      	ldr	r2, [r7, #68]
    ac30:	4b0b      	ldr	r3, [pc, #44]	(ac60 <_ZN5Debug15testServoAnalogEv+0x188>)
    ac32:	429a      	cmp	r2, r3
    ac34:	ddf7      	ble.n	ac26 <_ZN5Debug15testServoAnalogEv+0x14e>
    Servo* servo1 = new Servo(timer1, 1, 0.01f, 0.11f);
    Servo* servo2 = new Servo(timer1, 2, 0.01f, 0.11f);
    Servo* servo3 = new Servo(timer1, 3, 0.01f, 0.11f);
    Servo* servo4 = new Servo(timer1, 4, 0.01f, 0.11f);

    for(int i=0; i<2000; i++)
    ac36:	6bfb      	ldr	r3, [r7, #60]
    ac38:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ac3c:	63fb      	str	r3, [r7, #60]
    ac3e:	6bfa      	ldr	r2, [r7, #60]
    ac40:	f240 73cf 	movw	r3, #1999	; 0x7cf
    ac44:	429a      	cmp	r2, r3
    ac46:	ddd2      	ble.n	abee <_ZN5Debug15testServoAnalogEv+0x116>
        servo4->goToAngle(BALAI_G_OPEN);*/
        eteindreLED();

        for(int j=0; j<10000000; j++);
    }
}
    ac48:	f107 0748 	add.w	r7, r7, #72	; 0x48
    ac4c:	46bd      	mov	sp, r7
    ac4e:	bd80      	pop	{r7, pc}
    ac50:	40012c00 	.word	0x40012c00
    ac54:	3de147ae 	.word	0x3de147ae
    ac58:	3c23d70a 	.word	0x3c23d70a
    ac5c:	428c0000 	.word	0x428c0000
    ac60:	0098967f 	.word	0x0098967f
    ac64:	43250000 	.word	0x43250000

0000ac68 <_Z21distancePresqueEgalesff>:
#include "distance.h"

#include <math.h>

// On vérifie qu'il y a égalité ou presque entre deux distances
bool distancePresqueEgales(Distance d1, Distance d2)
    ac68:	b580      	push	{r7, lr}
    ac6a:	b084      	sub	sp, #16
    ac6c:	af00      	add	r7, sp, #0
    ac6e:	60f8      	str	r0, [r7, #12]
    ac70:	60b9      	str	r1, [r7, #8]
{
    static const Distance epsilon = 10;
    return (fabs(d1 - d2) < epsilon);
    ac72:	68f8      	ldr	r0, [r7, #12]
    ac74:	68b9      	ldr	r1, [r7, #8]
    ac76:	f012 f829 	bl	1cccc <__aeabi_fsub>
    ac7a:	4603      	mov	r3, r0
    ac7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    ac80:	f04f 0300 	mov.w	r3, #0	; 0x0
    ac84:	71fb      	strb	r3, [r7, #7]
    ac86:	4610      	mov	r0, r2
    ac88:	4907      	ldr	r1, [pc, #28]	(aca8 <_Z21distancePresqueEgalesff+0x40>)
    ac8a:	f012 fac5 	bl	1d218 <__aeabi_fcmplt>
    ac8e:	4603      	mov	r3, r0
    ac90:	2b00      	cmp	r3, #0
    ac92:	d002      	beq.n	ac9a <_Z21distancePresqueEgalesff+0x32>
    ac94:	f04f 0301 	mov.w	r3, #1	; 0x1
    ac98:	71fb      	strb	r3, [r7, #7]
    ac9a:	79fb      	ldrb	r3, [r7, #7]
}
    ac9c:	4618      	mov	r0, r3
    ac9e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    aca2:	46bd      	mov	sp, r7
    aca4:	bd80      	pop	{r7, pc}
    aca6:	46c0      	nop			(mov r8, r8)
    aca8:	41200000 	.word	0x41200000

0000acac <_ZN12AnalogSensor18conversionFinishedEv>:
    #else
        ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
    #endif
}

bool AnalogSensor::conversionFinished()
    acac:	b580      	push	{r7, lr}
    acae:	af00      	add	r7, sp, #0
   //return DMA_GetFlagStatus(DMA1_Stream1, DMA_FLAG_TCIF1);//I have no idea what I am doing
    //TOBECONTINUED
    #ifdef STM32F40_41xxx
        return true;
    #else
        return DMA_GetFlagStatus(DMA1_FLAG_TC1);
    acb0:	f04f 0002 	mov.w	r0, #2	; 0x2
    acb4:	f7f6 faa4 	bl	1200 <DMA_GetFlagStatus>
    acb8:	4603      	mov	r3, r0
    acba:	2b00      	cmp	r3, #0
    acbc:	bf0c      	ite	eq
    acbe:	2300      	moveq	r3, #0
    acc0:	2301      	movne	r3, #1
    acc2:	b2db      	uxtb	r3, r3
    #endif
}
    acc4:	4618      	mov	r0, r3
    acc6:	46bd      	mov	sp, r7
    acc8:	bd80      	pop	{r7, pc}
    acca:	46c0      	nop			(mov r8, r8)

0000accc <_ZN12AnalogSensor15startConversionEv>:
        DMA_Cmd(DMA1_Channel1, ENABLE);
        return data;
    #endif
}

void AnalogSensor::startConversion()
    accc:	b580      	push	{r7, lr}
    acce:	af00      	add	r7, sp, #0
{
    #ifdef STM32F40_41xxx
        ADC_SoftwareStartConv(ADC1);
    #else
        ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
    acd0:	4803      	ldr	r0, [pc, #12]	(ace0 <_ZN12AnalogSensor15startConversionEv+0x14>)
    acd2:	f04f 0101 	mov.w	r1, #1	; 0x1
    acd6:	f7f5 fcdf 	bl	698 <ADC_SoftwareStartConvCmd>
    #endif
}
    acda:	46bd      	mov	sp, r7
    acdc:	bd80      	pop	{r7, pc}
    acde:	46c0      	nop			(mov r8, r8)
    ace0:	40012400 	.word	0x40012400

0000ace4 <_ZN12AnalogSensor14initialiserADCEhPh>:
{
}

#ifdef ROBOTHW // pour le vrai robot

DMA_MEMORY_TYPE* AnalogSensor::initialiserADC(uint8_t nbChannel, uint8_t* channels)
    ace4:	b580      	push	{r7, lr}
    ace6:	b094      	sub	sp, #80
    ace8:	af00      	add	r7, sp, #0
    acea:	4603      	mov	r3, r0
    acec:	6039      	str	r1, [r7, #0]
    acee:	71fb      	strb	r3, [r7, #7]
        /* Start ADC3 Software Conversion */
        ADC_SoftwareStartConv(ADC3);

        return data;
    #else
        DMA_MEMORY_TYPE* data = new DMA_MEMORY_TYPE[nbChannel];
    acf0:	79fb      	ldrb	r3, [r7, #7]
    acf2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    acf6:	4618      	mov	r0, r3
    acf8:	f003 ffae 	bl	ec58 <_Znaj>
    acfc:	4603      	mov	r3, r0
    acfe:	64bb      	str	r3, [r7, #72]

        ADC_InitTypeDef ADC_InitStructure;
        // ADC1 fonctionne tout seul (on n'utilise ni ADC2 ni ADC3)
        ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    ad00:	f04f 0300 	mov.w	r3, #0	; 0x0
    ad04:	637b      	str	r3, [r7, #52]
        // On scanne tous les channels
        ADC_InitStructure.ADC_ScanConvMode = ENABLE;
    ad06:	f04f 0301 	mov.w	r3, #1	; 0x1
    ad0a:	f887 3038 	strb.w	r3, [r7, #56]
        // Single conversion mode
        ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    ad0e:	f04f 0300 	mov.w	r3, #0	; 0x0
    ad12:	f887 3039 	strb.w	r3, [r7, #57]
        // Pas d'external trigger (on lance la conversion à la main)
        ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    ad16:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
    ad1a:	63fb      	str	r3, [r7, #60]
        ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    ad1c:	f04f 0300 	mov.w	r3, #0	; 0x0
    ad20:	643b      	str	r3, [r7, #64]
        ADC_InitStructure.ADC_NbrOfChannel = nbChannel;
    ad22:	79fb      	ldrb	r3, [r7, #7]
    ad24:	f887 3044 	strb.w	r3, [r7, #68]
        ADC_Init(ADC1, &ADC_InitStructure);
    ad28:	f107 0334 	add.w	r3, r7, #52	; 0x34
    ad2c:	483b      	ldr	r0, [pc, #236]	(ae1c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    ad2e:	4619      	mov	r1, r3
    ad30:	f7f5 fb7a 	bl	428 <ADC_Init>

        // Activation du périphérique
        ADC_Cmd(ADC1, ENABLE);
    ad34:	4839      	ldr	r0, [pc, #228]	(ae1c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    ad36:	f04f 0101 	mov.w	r1, #1	; 0x1
    ad3a:	f7f5 fbf7 	bl	52c <ADC_Cmd>

        // Calibrage
        // On remet la calibration à zéro
        ADC_ResetCalibration(ADC1);
    ad3e:	4837      	ldr	r0, [pc, #220]	(ae1c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    ad40:	f7f5 fc52 	bl	5e8 <ADC_ResetCalibration>
        while(ADC_GetResetCalibrationStatus(ADC1));
    ad44:	4835      	ldr	r0, [pc, #212]	(ae1c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    ad46:	f7f5 fc5f 	bl	608 <ADC_GetResetCalibrationStatus>
    ad4a:	4603      	mov	r3, r0
    ad4c:	2b00      	cmp	r3, #0
    ad4e:	bf0c      	ite	eq
    ad50:	2300      	moveq	r3, #0
    ad52:	2301      	movne	r3, #1
    ad54:	b2db      	uxtb	r3, r3
    ad56:	2b00      	cmp	r3, #0
    ad58:	d1f4      	bne.n	ad44 <_ZN12AnalogSensor14initialiserADCEhPh+0x60>
        // On lance la calibration
        ADC_StartCalibration(ADC1);
    ad5a:	4830      	ldr	r0, [pc, #192]	(ae1c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    ad5c:	f7f5 fc70 	bl	640 <ADC_StartCalibration>
        // Et on attend que ce soit fini
        while(ADC_GetCalibrationStatus(ADC1));
    ad60:	482e      	ldr	r0, [pc, #184]	(ae1c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    ad62:	f7f5 fc7d 	bl	660 <ADC_GetCalibrationStatus>
    ad66:	4603      	mov	r3, r0
    ad68:	2b00      	cmp	r3, #0
    ad6a:	bf0c      	ite	eq
    ad6c:	2300      	moveq	r3, #0
    ad6e:	2301      	movne	r3, #1
    ad70:	b2db      	uxtb	r3, r3
    ad72:	2b00      	cmp	r3, #0
    ad74:	d1f4      	bne.n	ad60 <_ZN12AnalogSensor14initialiserADCEhPh+0x7c>

        // Définition des canaux à convertir
        //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
        for (int i=0; i<nbChannel; i++)
    ad76:	f04f 0300 	mov.w	r3, #0	; 0x0
    ad7a:	64fb      	str	r3, [r7, #76]
    ad7c:	e013      	b.n	ada6 <_ZN12AnalogSensor14initialiserADCEhPh+0xc2>
            ADC_RegularChannelConfig (ADC1, channels[i], i+1, ADC_SampleTime_1Cycles5);
    ad7e:	6cfa      	ldr	r2, [r7, #76]
    ad80:	683b      	ldr	r3, [r7, #0]
    ad82:	4413      	add	r3, r2
    ad84:	781a      	ldrb	r2, [r3, #0]
    ad86:	6cfb      	ldr	r3, [r7, #76]
    ad88:	b2db      	uxtb	r3, r3
    ad8a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ad8e:	b2db      	uxtb	r3, r3
    ad90:	4822      	ldr	r0, [pc, #136]	(ae1c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    ad92:	4611      	mov	r1, r2
    ad94:	461a      	mov	r2, r3
    ad96:	f04f 0300 	mov.w	r3, #0	; 0x0
    ad9a:	f7f5 fcf7 	bl	78c <ADC_RegularChannelConfig>
        // Et on attend que ce soit fini
        while(ADC_GetCalibrationStatus(ADC1));

        // Définition des canaux à convertir
        //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
        for (int i=0; i<nbChannel; i++)
    ad9e:	6cfb      	ldr	r3, [r7, #76]
    ada0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ada4:	64fb      	str	r3, [r7, #76]
    ada6:	79fa      	ldrb	r2, [r7, #7]
    ada8:	6cfb      	ldr	r3, [r7, #76]
    adaa:	429a      	cmp	r2, r3
    adac:	dce7      	bgt.n	ad7e <_ZN12AnalogSensor14initialiserADCEhPh+0x9a>
            ADC_RegularChannelConfig (ADC1, channels[i], i+1, ADC_SampleTime_1Cycles5);

        // active le transfert des résultats de conversion en SRAM
        ADC_DMACmd(ADC1, ENABLE);
    adae:	481b      	ldr	r0, [pc, #108]	(ae1c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    adb0:	f04f 0101 	mov.w	r1, #1	; 0x1
    adb4:	f7f5 fbd6 	bl	564 <ADC_DMACmd>

        DMA_InitTypeDef DMA_InitStructure;
        DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); // ADC regular data register contient le résultat de la conversion
    adb8:	4b18      	ldr	r3, [pc, #96]	(ae1c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    adba:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    adbe:	60bb      	str	r3, [r7, #8]
        DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)data ; // Adresse de destination
    adc0:	6cbb      	ldr	r3, [r7, #72]
    adc2:	60fb      	str	r3, [r7, #12]
        DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; // On transfère du périphérique (ADC) à la mémoire (SRAM)
    adc4:	f04f 0300 	mov.w	r3, #0	; 0x0
    adc8:	613b      	str	r3, [r7, #16]
        DMA_InitStructure.DMA_BufferSize = nbChannel; // Nombre de conversions à transférer
    adca:	79fb      	ldrb	r3, [r7, #7]
    adcc:	617b      	str	r3, [r7, #20]
        DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; // L'adresse du résultat de la conversion ne change pas
    adce:	f04f 0300 	mov.w	r3, #0	; 0x0
    add2:	61bb      	str	r3, [r7, #24]
        DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; // Incrémente le pointeur destination pour enregistrer les différentes conversions
    add4:	f04f 0380 	mov.w	r3, #128	; 0x80
    add8:	61fb      	str	r3, [r7, #28]
        DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    adda:	f44f 7300 	mov.w	r3, #512	; 0x200
    adde:	623b      	str	r3, [r7, #32]
        DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    ade0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ade4:	627b      	str	r3, [r7, #36]
        // Note : le registre ADC_DR fait 32 bits mais seuls les bits 0:15 nous intéressent
        // Ici tout devrait fonctionner correctement : cf doc p.189 (tableau 56) (malgré une petite erreur dans le tableau)
        DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    ade6:	f04f 0320 	mov.w	r3, #32	; 0x20
    adea:	62bb      	str	r3, [r7, #40]
        DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    adec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    adf0:	62fb      	str	r3, [r7, #44]
        // On ne permet pas de lancer un transfert en software (car lancé par le périphérique ADC)
        DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    adf2:	f04f 0300 	mov.w	r3, #0	; 0x0
    adf6:	633b      	str	r3, [r7, #48]
        // Channel1 : cf p.192 tableau 58
        DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    adf8:	f107 0308 	add.w	r3, r7, #8	; 0x8
    adfc:	4808      	ldr	r0, [pc, #32]	(ae20 <_ZN12AnalogSensor14initialiserADCEhPh+0x13c>)
    adfe:	4619      	mov	r1, r3
    ae00:	f7f6 f936 	bl	1070 <DMA_Init>
        DMA_Cmd(DMA1_Channel1, ENABLE);
    ae04:	4806      	ldr	r0, [pc, #24]	(ae20 <_ZN12AnalogSensor14initialiserADCEhPh+0x13c>)
    ae06:	f04f 0101 	mov.w	r1, #1	; 0x1
    ae0a:	f7f6 f9af 	bl	116c <DMA_Cmd>
        return data;
    ae0e:	6cbb      	ldr	r3, [r7, #72]
    #endif
}
    ae10:	4618      	mov	r0, r3
    ae12:	f107 0750 	add.w	r7, r7, #80	; 0x50
    ae16:	46bd      	mov	sp, r7
    ae18:	bd80      	pop	{r7, pc}
    ae1a:	46c0      	nop			(mov r8, r8)
    ae1c:	40012400 	.word	0x40012400
    ae20:	40020008 	.word	0x40020008

0000ae24 <_ZN12AnalogSensorD0Ev>:
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;

    AnalogSensor::nbCapteurDejaInitialise++;
}

AnalogSensor::~AnalogSensor()
    ae24:	b580      	push	{r7, lr}
    ae26:	b082      	sub	sp, #8
    ae28:	af00      	add	r7, sp, #0
    ae2a:	6078      	str	r0, [r7, #4]
    ae2c:	687a      	ldr	r2, [r7, #4]
    ae2e:	4b0a      	ldr	r3, [pc, #40]	(ae58 <_ZN12AnalogSensorD0Ev+0x34>)
    ae30:	6013      	str	r3, [r2, #0]
{
}
    ae32:	687b      	ldr	r3, [r7, #4]
    ae34:	4618      	mov	r0, r3
    ae36:	f7fa fe09 	bl	5a4c <_ZN6SensorD2Ev>
    ae3a:	f04f 0301 	mov.w	r3, #1	; 0x1
    ae3e:	b2db      	uxtb	r3, r3
    ae40:	2b00      	cmp	r3, #0
    ae42:	d002      	beq.n	ae4a <_ZN12AnalogSensorD0Ev+0x26>
    ae44:	6878      	ldr	r0, [r7, #4]
    ae46:	f003 ff15 	bl	ec74 <_ZdlPv>
    ae4a:	687b      	ldr	r3, [r7, #4]
    ae4c:	4618      	mov	r0, r3
    ae4e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ae52:	46bd      	mov	sp, r7
    ae54:	bd80      	pop	{r7, pc}
    ae56:	46c0      	nop			(mov r8, r8)
    ae58:	00023fe0 	.word	0x00023fe0

0000ae5c <_ZN12AnalogSensorD1Ev>:
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;

    AnalogSensor::nbCapteurDejaInitialise++;
}

AnalogSensor::~AnalogSensor()
    ae5c:	b580      	push	{r7, lr}
    ae5e:	b082      	sub	sp, #8
    ae60:	af00      	add	r7, sp, #0
    ae62:	6078      	str	r0, [r7, #4]
    ae64:	687a      	ldr	r2, [r7, #4]
    ae66:	4b0a      	ldr	r3, [pc, #40]	(ae90 <_ZN12AnalogSensorD1Ev+0x34>)
    ae68:	6013      	str	r3, [r2, #0]
{
}
    ae6a:	687b      	ldr	r3, [r7, #4]
    ae6c:	4618      	mov	r0, r3
    ae6e:	f7fa fded 	bl	5a4c <_ZN6SensorD2Ev>
    ae72:	f04f 0300 	mov.w	r3, #0	; 0x0
    ae76:	b2db      	uxtb	r3, r3
    ae78:	2b00      	cmp	r3, #0
    ae7a:	d002      	beq.n	ae82 <_ZN12AnalogSensorD1Ev+0x26>
    ae7c:	6878      	ldr	r0, [r7, #4]
    ae7e:	f003 fef9 	bl	ec74 <_ZdlPv>
    ae82:	687b      	ldr	r3, [r7, #4]
    ae84:	4618      	mov	r0, r3
    ae86:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ae8a:	46bd      	mov	sp, r7
    ae8c:	bd80      	pop	{r7, pc}
    ae8e:	46c0      	nop			(mov r8, r8)
    ae90:	00023fe0 	.word	0x00023fe0

0000ae94 <_ZN12AnalogSensorD2Ev>:
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;

    AnalogSensor::nbCapteurDejaInitialise++;
}

AnalogSensor::~AnalogSensor()
    ae94:	b580      	push	{r7, lr}
    ae96:	b082      	sub	sp, #8
    ae98:	af00      	add	r7, sp, #0
    ae9a:	6078      	str	r0, [r7, #4]
    ae9c:	687a      	ldr	r2, [r7, #4]
    ae9e:	4b0a      	ldr	r3, [pc, #40]	(aec8 <_ZN12AnalogSensorD2Ev+0x34>)
    aea0:	6013      	str	r3, [r2, #0]
{
}
    aea2:	687b      	ldr	r3, [r7, #4]
    aea4:	4618      	mov	r0, r3
    aea6:	f7fa fdd1 	bl	5a4c <_ZN6SensorD2Ev>
    aeaa:	f04f 0300 	mov.w	r3, #0	; 0x0
    aeae:	b2db      	uxtb	r3, r3
    aeb0:	2b00      	cmp	r3, #0
    aeb2:	d002      	beq.n	aeba <_ZN12AnalogSensorD2Ev+0x26>
    aeb4:	6878      	ldr	r0, [r7, #4]
    aeb6:	f003 fedd 	bl	ec74 <_ZdlPv>
    aeba:	687b      	ldr	r3, [r7, #4]
    aebc:	4618      	mov	r0, r3
    aebe:	f107 0708 	add.w	r7, r7, #8	; 0x8
    aec2:	46bd      	mov	sp, r7
    aec4:	bd80      	pop	{r7, pc}
    aec6:	46c0      	nop			(mov r8, r8)
    aec8:	00023fe0 	.word	0x00023fe0

0000aecc <_ZN12AnalogSensorC1EhPt>:
#include "analogSensor.h"

int AnalogSensor::nbCapteurDejaInitialise = 0;

AnalogSensor::AnalogSensor(uint8_t channel, DMA_MEMORY_TYPE* pData)
    aecc:	b580      	push	{r7, lr}
    aece:	b084      	sub	sp, #16
    aed0:	af00      	add	r7, sp, #0
    aed2:	60f8      	str	r0, [r7, #12]
    aed4:	460b      	mov	r3, r1
    aed6:	607a      	str	r2, [r7, #4]
    aed8:	72fb      	strb	r3, [r7, #11]
    aeda:	68fb      	ldr	r3, [r7, #12]
    aedc:	4618      	mov	r0, r3
    aede:	f7fa fd65 	bl	59ac <_ZN6SensorC2Ev>
    aee2:	68fa      	ldr	r2, [r7, #12]
    aee4:	4b0c      	ldr	r3, [pc, #48]	(af18 <_ZN12AnalogSensorC1EhPt+0x4c>)
    aee6:	6013      	str	r3, [r2, #0]
{
    this->channel = channel;
    aee8:	68fa      	ldr	r2, [r7, #12]
    aeea:	7afb      	ldrb	r3, [r7, #11]
    aeec:	7113      	strb	r3, [r2, #4]
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;
    aeee:	4b0b      	ldr	r3, [pc, #44]	(af1c <_ZN12AnalogSensorC1EhPt+0x50>)
    aef0:	681b      	ldr	r3, [r3, #0]
    aef2:	ea4f 0243 	mov.w	r2, r3, lsl #1
    aef6:	687b      	ldr	r3, [r7, #4]
    aef8:	441a      	add	r2, r3
    aefa:	68fb      	ldr	r3, [r7, #12]
    aefc:	609a      	str	r2, [r3, #8]

    AnalogSensor::nbCapteurDejaInitialise++;
    aefe:	4b07      	ldr	r3, [pc, #28]	(af1c <_ZN12AnalogSensorC1EhPt+0x50>)
    af00:	681b      	ldr	r3, [r3, #0]
    af02:	f103 0201 	add.w	r2, r3, #1	; 0x1
    af06:	4b05      	ldr	r3, [pc, #20]	(af1c <_ZN12AnalogSensorC1EhPt+0x50>)
    af08:	601a      	str	r2, [r3, #0]
}
    af0a:	68fb      	ldr	r3, [r7, #12]
    af0c:	4618      	mov	r0, r3
    af0e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    af12:	46bd      	mov	sp, r7
    af14:	bd80      	pop	{r7, pc}
    af16:	46c0      	nop			(mov r8, r8)
    af18:	00023fe0 	.word	0x00023fe0
    af1c:	2000057c 	.word	0x2000057c

0000af20 <_ZN12AnalogSensorC2EhPt>:
#include "analogSensor.h"

int AnalogSensor::nbCapteurDejaInitialise = 0;

AnalogSensor::AnalogSensor(uint8_t channel, DMA_MEMORY_TYPE* pData)
    af20:	b580      	push	{r7, lr}
    af22:	b084      	sub	sp, #16
    af24:	af00      	add	r7, sp, #0
    af26:	60f8      	str	r0, [r7, #12]
    af28:	460b      	mov	r3, r1
    af2a:	607a      	str	r2, [r7, #4]
    af2c:	72fb      	strb	r3, [r7, #11]
    af2e:	68fb      	ldr	r3, [r7, #12]
    af30:	4618      	mov	r0, r3
    af32:	f7fa fd3b 	bl	59ac <_ZN6SensorC2Ev>
    af36:	68fa      	ldr	r2, [r7, #12]
    af38:	4b0c      	ldr	r3, [pc, #48]	(af6c <_ZN12AnalogSensorC2EhPt+0x4c>)
    af3a:	6013      	str	r3, [r2, #0]
{
    this->channel = channel;
    af3c:	68fa      	ldr	r2, [r7, #12]
    af3e:	7afb      	ldrb	r3, [r7, #11]
    af40:	7113      	strb	r3, [r2, #4]
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;
    af42:	4b0b      	ldr	r3, [pc, #44]	(af70 <_ZN12AnalogSensorC2EhPt+0x50>)
    af44:	681b      	ldr	r3, [r3, #0]
    af46:	ea4f 0243 	mov.w	r2, r3, lsl #1
    af4a:	687b      	ldr	r3, [r7, #4]
    af4c:	441a      	add	r2, r3
    af4e:	68fb      	ldr	r3, [r7, #12]
    af50:	609a      	str	r2, [r3, #8]

    AnalogSensor::nbCapteurDejaInitialise++;
    af52:	4b07      	ldr	r3, [pc, #28]	(af70 <_ZN12AnalogSensorC2EhPt+0x50>)
    af54:	681b      	ldr	r3, [r3, #0]
    af56:	f103 0201 	add.w	r2, r3, #1	; 0x1
    af5a:	4b05      	ldr	r3, [pc, #20]	(af70 <_ZN12AnalogSensorC2EhPt+0x50>)
    af5c:	601a      	str	r2, [r3, #0]
}
    af5e:	68fb      	ldr	r3, [r7, #12]
    af60:	4618      	mov	r0, r3
    af62:	f107 0710 	add.w	r7, r7, #16	; 0x10
    af66:	46bd      	mov	sp, r7
    af68:	bd80      	pop	{r7, pc}
    af6a:	46c0      	nop			(mov r8, r8)
    af6c:	00023fe0 	.word	0x00023fe0
    af70:	2000057c 	.word	0x2000057c

0000af74 <_Z12ax12ChecksumaPi>:
#include "ax12api.h"

int ax12Checksum(int8_t length, int* parameters)
    af74:	b480      	push	{r7}
    af76:	b085      	sub	sp, #20
    af78:	af00      	add	r7, sp, #0
    af7a:	4603      	mov	r3, r0
    af7c:	6039      	str	r1, [r7, #0]
    af7e:	71fb      	strb	r3, [r7, #7]
{
	int checksum = 0;
    af80:	f04f 0300 	mov.w	r3, #0	; 0x0
    af84:	60bb      	str	r3, [r7, #8]
    for(int i = 0; i < length+1; i++) {
    af86:	f04f 0300 	mov.w	r3, #0	; 0x0
    af8a:	60fb      	str	r3, [r7, #12]
    af8c:	e00c      	b.n	afa8 <_Z12ax12ChecksumaPi+0x34>
		checksum += parameters[i];
    af8e:	68fb      	ldr	r3, [r7, #12]
    af90:	ea4f 0283 	mov.w	r2, r3, lsl #2
    af94:	683b      	ldr	r3, [r7, #0]
    af96:	4413      	add	r3, r2
    af98:	681a      	ldr	r2, [r3, #0]
    af9a:	68bb      	ldr	r3, [r7, #8]
    af9c:	4413      	add	r3, r2
    af9e:	60bb      	str	r3, [r7, #8]
#include "ax12api.h"

int ax12Checksum(int8_t length, int* parameters)
{
	int checksum = 0;
    for(int i = 0; i < length+1; i++) {
    afa0:	68fb      	ldr	r3, [r7, #12]
    afa2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    afa6:	60fb      	str	r3, [r7, #12]
    afa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
    afac:	f103 0201 	add.w	r2, r3, #1	; 0x1
    afb0:	68fb      	ldr	r3, [r7, #12]
    afb2:	429a      	cmp	r2, r3
    afb4:	dceb      	bgt.n	af8e <_Z12ax12ChecksumaPi+0x1a>
		checksum += parameters[i];
	}
	return (int)(int8_t)(~checksum); // ~ est l'opérateur NOT bit a bit
    afb6:	68bb      	ldr	r3, [r7, #8]
    afb8:	b2db      	uxtb	r3, r3
    afba:	ea6f 0303 	mvn.w	r3, r3
    afbe:	b2db      	uxtb	r3, r3
    afc0:	b25b      	sxtb	r3, r3
}
    afc2:	4618      	mov	r0, r3
    afc4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    afc8:	46bd      	mov	sp, r7
    afca:	bc80      	pop	{r7}
    afcc:	4770      	bx	lr
    afce:	46c0      	nop			(mov r8, r8)

0000afd0 <_ZN4AX1217createWriteHeaderEPiii>:
    retour[6] = 2;
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    return 8;
}

void AX12::createWriteHeader(int* retour, int servo, int nombreParamsAjoutes)
    afd0:	b480      	push	{r7}
    afd2:	b085      	sub	sp, #20
    afd4:	af00      	add	r7, sp, #0
    afd6:	60f8      	str	r0, [r7, #12]
    afd8:	60b9      	str	r1, [r7, #8]
    afda:	607a      	str	r2, [r7, #4]
{
    retour[0] = 0xff;
    afdc:	68fa      	ldr	r2, [r7, #12]
    afde:	f04f 03ff 	mov.w	r3, #255	; 0xff
    afe2:	6013      	str	r3, [r2, #0]
    retour[1] = 0xff;
    afe4:	68fb      	ldr	r3, [r7, #12]
    afe6:	f103 0204 	add.w	r2, r3, #4	; 0x4
    afea:	f04f 03ff 	mov.w	r3, #255	; 0xff
    afee:	6013      	str	r3, [r2, #0]
    retour[2] = servo;
    aff0:	68fb      	ldr	r3, [r7, #12]
    aff2:	f103 0208 	add.w	r2, r3, #8	; 0x8
    aff6:	68bb      	ldr	r3, [r7, #8]
    aff8:	6013      	str	r3, [r2, #0]
    retour[3] = AX12_WRITE_DATA_PARAMS+2+nombreParamsAjoutes;
    affa:	68fb      	ldr	r3, [r7, #12]
    affc:	f103 020c 	add.w	r2, r3, #12	; 0xc
    b000:	687b      	ldr	r3, [r7, #4]
    b002:	f103 0304 	add.w	r3, r3, #4	; 0x4
    b006:	6013      	str	r3, [r2, #0]
    retour[4] = AX12_WRITE_DATA;
    b008:	68fb      	ldr	r3, [r7, #12]
    b00a:	f103 0210 	add.w	r2, r3, #16	; 0x10
    b00e:	f04f 0303 	mov.w	r3, #3	; 0x3
    b012:	6013      	str	r3, [r2, #0]
}
    b014:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b018:	46bd      	mov	sp, r7
    b01a:	bc80      	pop	{r7}
    b01c:	4770      	bx	lr
    b01e:	46c0      	nop			(mov r8, r8)

0000b020 <_ZN4AX1222getBaudRateInstructionEPihi>:
    retour[5] = AX12_LED;
    retour[6] = ledOn;
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    return 8;
}
int AX12::getBaudRateInstruction(int* retour, uint8_t baudRate, int servo)
    b020:	b590      	push	{r4, r7, lr}
    b022:	b085      	sub	sp, #20
    b024:	af00      	add	r7, sp, #0
    b026:	60f8      	str	r0, [r7, #12]
    b028:	460b      	mov	r3, r1
    b02a:	607a      	str	r2, [r7, #4]
    b02c:	72fb      	strb	r3, [r7, #11]
{
    createWriteHeader(retour, servo, 0); // first, we create a write header with 3 more params (for low/high pos and low/high speed)
    b02e:	68f8      	ldr	r0, [r7, #12]
    b030:	6879      	ldr	r1, [r7, #4]
    b032:	f04f 0200 	mov.w	r2, #0	; 0x0
    b036:	f7ff ffcb 	bl	afd0 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_BAUD_RATE;
    b03a:	68fb      	ldr	r3, [r7, #12]
    b03c:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b040:	f04f 0304 	mov.w	r3, #4	; 0x4
    b044:	6013      	str	r3, [r2, #0]
    retour[6] = baudRate;
    b046:	68fb      	ldr	r3, [r7, #12]
    b048:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b04c:	7afb      	ldrb	r3, [r7, #11]
    b04e:	6013      	str	r3, [r2, #0]
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    b050:	68fb      	ldr	r3, [r7, #12]
    b052:	f103 041c 	add.w	r4, r3, #28	; 0x1c
    b056:	68fb      	ldr	r3, [r7, #12]
    b058:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b05c:	681b      	ldr	r3, [r3, #0]
    b05e:	b2da      	uxtb	r2, r3
    b060:	68fb      	ldr	r3, [r7, #12]
    b062:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b066:	b253      	sxtb	r3, r2
    b068:	4618      	mov	r0, r3
    b06a:	f7ff ff83 	bl	af74 <_Z12ax12ChecksumaPi>
    b06e:	4603      	mov	r3, r0
    b070:	6023      	str	r3, [r4, #0]
    return 8;
    b072:	f04f 0308 	mov.w	r3, #8	; 0x8
}
    b076:	4618      	mov	r0, r3
    b078:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b07c:	46bd      	mov	sp, r7
    b07e:	bd90      	pop	{r4, r7, pc}

0000b080 <_ZN4AX1217getLedInstructionEPihi>:
    retour[6] = (uint8_t)(maxTorque);
    retour[7] = (uint8_t)(maxTorque>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getLedInstruction(int* retour, uint8_t ledOn, int servo)
    b080:	b590      	push	{r4, r7, lr}
    b082:	b085      	sub	sp, #20
    b084:	af00      	add	r7, sp, #0
    b086:	60f8      	str	r0, [r7, #12]
    b088:	460b      	mov	r3, r1
    b08a:	607a      	str	r2, [r7, #4]
    b08c:	72fb      	strb	r3, [r7, #11]
{
    createWriteHeader(retour, servo, 0); // first, we create a write header with 3 more params (for low/high pos and low/high speed)
    b08e:	68f8      	ldr	r0, [r7, #12]
    b090:	6879      	ldr	r1, [r7, #4]
    b092:	f04f 0200 	mov.w	r2, #0	; 0x0
    b096:	f7ff ff9b 	bl	afd0 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_LED;
    b09a:	68fb      	ldr	r3, [r7, #12]
    b09c:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b0a0:	f04f 0319 	mov.w	r3, #25	; 0x19
    b0a4:	6013      	str	r3, [r2, #0]
    retour[6] = ledOn;
    b0a6:	68fb      	ldr	r3, [r7, #12]
    b0a8:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b0ac:	7afb      	ldrb	r3, [r7, #11]
    b0ae:	6013      	str	r3, [r2, #0]
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    b0b0:	68fb      	ldr	r3, [r7, #12]
    b0b2:	f103 041c 	add.w	r4, r3, #28	; 0x1c
    b0b6:	68fb      	ldr	r3, [r7, #12]
    b0b8:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b0bc:	681b      	ldr	r3, [r3, #0]
    b0be:	b2da      	uxtb	r2, r3
    b0c0:	68fb      	ldr	r3, [r7, #12]
    b0c2:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b0c6:	b253      	sxtb	r3, r2
    b0c8:	4618      	mov	r0, r3
    b0ca:	f7ff ff53 	bl	af74 <_Z12ax12ChecksumaPi>
    b0ce:	4603      	mov	r3, r0
    b0d0:	6023      	str	r3, [r4, #0]
    return 8;
    b0d2:	f04f 0308 	mov.w	r3, #8	; 0x8
}
    b0d6:	4618      	mov	r0, r3
    b0d8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b0dc:	46bd      	mov	sp, r7
    b0de:	bd90      	pop	{r4, r7, pc}

0000b0e0 <_ZN4AX1223getMaxTorqueInstructionEPiti>:
    retour[6] = (uint8_t)(torqueLimite);
    retour[7] = (uint8_t)(torqueLimite>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getMaxTorqueInstruction(int* retour, uint16_t maxTorque, int servo) // torque dans l'eeprom (pour l'écrire dans la ram au démarrage)
    b0e0:	b590      	push	{r4, r7, lr}
    b0e2:	b085      	sub	sp, #20
    b0e4:	af00      	add	r7, sp, #0
    b0e6:	60f8      	str	r0, [r7, #12]
    b0e8:	460b      	mov	r3, r1
    b0ea:	607a      	str	r2, [r7, #4]
    b0ec:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    b0ee:	68f8      	ldr	r0, [r7, #12]
    b0f0:	6879      	ldr	r1, [r7, #4]
    b0f2:	f04f 0201 	mov.w	r2, #1	; 0x1
    b0f6:	f7ff ff6b 	bl	afd0 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_MAX_TORQUE_L;
    b0fa:	68fb      	ldr	r3, [r7, #12]
    b0fc:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b100:	f04f 030e 	mov.w	r3, #14	; 0xe
    b104:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(maxTorque);
    b106:	68fb      	ldr	r3, [r7, #12]
    b108:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b10c:	897b      	ldrh	r3, [r7, #10]
    b10e:	b2db      	uxtb	r3, r3
    b110:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(maxTorque>>8); // high bits
    b112:	68fb      	ldr	r3, [r7, #12]
    b114:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b118:	897b      	ldrh	r3, [r7, #10]
    b11a:	ea4f 2323 	mov.w	r3, r3, asr #8
    b11e:	b2db      	uxtb	r3, r3
    b120:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    b122:	68fb      	ldr	r3, [r7, #12]
    b124:	f103 0420 	add.w	r4, r3, #32	; 0x20
    b128:	68fb      	ldr	r3, [r7, #12]
    b12a:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b12e:	681b      	ldr	r3, [r3, #0]
    b130:	b2da      	uxtb	r2, r3
    b132:	68fb      	ldr	r3, [r7, #12]
    b134:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b138:	b253      	sxtb	r3, r2
    b13a:	4618      	mov	r0, r3
    b13c:	f7ff ff1a 	bl	af74 <_Z12ax12ChecksumaPi>
    b140:	4603      	mov	r3, r0
    b142:	6023      	str	r3, [r4, #0]
    return 9;
    b144:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    b148:	4618      	mov	r0, r3
    b14a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b14e:	46bd      	mov	sp, r7
    b150:	bd90      	pop	{r4, r7, pc}
    b152:	46c0      	nop			(mov r8, r8)

0000b154 <_ZN4AX1225getTorqueLimitInstructionEPiti>:
    retour[6] = (uint8_t)(angleLimite);
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getTorqueLimitInstruction(int* retour, uint16_t torqueLimite, int servo) // la torque dans la RAM
    b154:	b590      	push	{r4, r7, lr}
    b156:	b085      	sub	sp, #20
    b158:	af00      	add	r7, sp, #0
    b15a:	60f8      	str	r0, [r7, #12]
    b15c:	460b      	mov	r3, r1
    b15e:	607a      	str	r2, [r7, #4]
    b160:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    b162:	68f8      	ldr	r0, [r7, #12]
    b164:	6879      	ldr	r1, [r7, #4]
    b166:	f04f 0201 	mov.w	r2, #1	; 0x1
    b16a:	f7ff ff31 	bl	afd0 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_TORQUE_LIMIT_L;
    b16e:	68fb      	ldr	r3, [r7, #12]
    b170:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b174:	f04f 0322 	mov.w	r3, #34	; 0x22
    b178:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(torqueLimite);
    b17a:	68fb      	ldr	r3, [r7, #12]
    b17c:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b180:	897b      	ldrh	r3, [r7, #10]
    b182:	b2db      	uxtb	r3, r3
    b184:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(torqueLimite>>8); // high bits
    b186:	68fb      	ldr	r3, [r7, #12]
    b188:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b18c:	897b      	ldrh	r3, [r7, #10]
    b18e:	ea4f 2323 	mov.w	r3, r3, asr #8
    b192:	b2db      	uxtb	r3, r3
    b194:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    b196:	68fb      	ldr	r3, [r7, #12]
    b198:	f103 0420 	add.w	r4, r3, #32	; 0x20
    b19c:	68fb      	ldr	r3, [r7, #12]
    b19e:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b1a2:	681b      	ldr	r3, [r3, #0]
    b1a4:	b2da      	uxtb	r2, r3
    b1a6:	68fb      	ldr	r3, [r7, #12]
    b1a8:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b1ac:	b253      	sxtb	r3, r2
    b1ae:	4618      	mov	r0, r3
    b1b0:	f7ff fee0 	bl	af74 <_Z12ax12ChecksumaPi>
    b1b4:	4603      	mov	r3, r0
    b1b6:	6023      	str	r3, [r4, #0]
    return 9;
    b1b8:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    b1bc:	4618      	mov	r0, r3
    b1be:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b1c2:	46bd      	mov	sp, r7
    b1c4:	bd90      	pop	{r4, r7, pc}
    b1c6:	46c0      	nop			(mov r8, r8)

0000b1c8 <_ZN4AX1229getAngleUpperLimitInstructionEPiti>:
    retour[6] = (uint8_t)(angleLimite);
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getAngleUpperLimitInstruction(int* retour, uint16_t angleLimite, int servo)
    b1c8:	b590      	push	{r4, r7, lr}
    b1ca:	b085      	sub	sp, #20
    b1cc:	af00      	add	r7, sp, #0
    b1ce:	60f8      	str	r0, [r7, #12]
    b1d0:	460b      	mov	r3, r1
    b1d2:	607a      	str	r2, [r7, #4]
    b1d4:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    b1d6:	68f8      	ldr	r0, [r7, #12]
    b1d8:	6879      	ldr	r1, [r7, #4]
    b1da:	f04f 0201 	mov.w	r2, #1	; 0x1
    b1de:	f7ff fef7 	bl	afd0 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_CCW_ANGLE_LIMIT_L;
    b1e2:	68fb      	ldr	r3, [r7, #12]
    b1e4:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b1e8:	f04f 0308 	mov.w	r3, #8	; 0x8
    b1ec:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(angleLimite);
    b1ee:	68fb      	ldr	r3, [r7, #12]
    b1f0:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b1f4:	897b      	ldrh	r3, [r7, #10]
    b1f6:	b2db      	uxtb	r3, r3
    b1f8:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    b1fa:	68fb      	ldr	r3, [r7, #12]
    b1fc:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b200:	897b      	ldrh	r3, [r7, #10]
    b202:	ea4f 2323 	mov.w	r3, r3, asr #8
    b206:	b2db      	uxtb	r3, r3
    b208:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    b20a:	68fb      	ldr	r3, [r7, #12]
    b20c:	f103 0420 	add.w	r4, r3, #32	; 0x20
    b210:	68fb      	ldr	r3, [r7, #12]
    b212:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b216:	681b      	ldr	r3, [r3, #0]
    b218:	b2da      	uxtb	r2, r3
    b21a:	68fb      	ldr	r3, [r7, #12]
    b21c:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b220:	b253      	sxtb	r3, r2
    b222:	4618      	mov	r0, r3
    b224:	f7ff fea6 	bl	af74 <_Z12ax12ChecksumaPi>
    b228:	4603      	mov	r3, r0
    b22a:	6023      	str	r3, [r4, #0]
    return 9;
    b22c:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    b230:	4618      	mov	r0, r3
    b232:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b236:	46bd      	mov	sp, r7
    b238:	bd90      	pop	{r4, r7, pc}
    b23a:	46c0      	nop			(mov r8, r8)

0000b23c <_ZN4AX1229getAngleLowerLimitInstructionEPiti>:
    retour[6] = (uint8_t)(vitesse);
    retour[7] = (uint8_t)(vitesse>>8);
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getAngleLowerLimitInstruction(int* retour, uint16_t angleLimite, int servo)
    b23c:	b590      	push	{r4, r7, lr}
    b23e:	b085      	sub	sp, #20
    b240:	af00      	add	r7, sp, #0
    b242:	60f8      	str	r0, [r7, #12]
    b244:	460b      	mov	r3, r1
    b246:	607a      	str	r2, [r7, #4]
    b248:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    b24a:	68f8      	ldr	r0, [r7, #12]
    b24c:	6879      	ldr	r1, [r7, #4]
    b24e:	f04f 0201 	mov.w	r2, #1	; 0x1
    b252:	f7ff febd 	bl	afd0 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_CW_ANGLE_LIMIT_L;
    b256:	68fb      	ldr	r3, [r7, #12]
    b258:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b25c:	f04f 0306 	mov.w	r3, #6	; 0x6
    b260:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(angleLimite);
    b262:	68fb      	ldr	r3, [r7, #12]
    b264:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b268:	897b      	ldrh	r3, [r7, #10]
    b26a:	b2db      	uxtb	r3, r3
    b26c:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    b26e:	68fb      	ldr	r3, [r7, #12]
    b270:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b274:	897b      	ldrh	r3, [r7, #10]
    b276:	ea4f 2323 	mov.w	r3, r3, asr #8
    b27a:	b2db      	uxtb	r3, r3
    b27c:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    b27e:	68fb      	ldr	r3, [r7, #12]
    b280:	f103 0420 	add.w	r4, r3, #32	; 0x20
    b284:	68fb      	ldr	r3, [r7, #12]
    b286:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b28a:	681b      	ldr	r3, [r3, #0]
    b28c:	b2da      	uxtb	r2, r3
    b28e:	68fb      	ldr	r3, [r7, #12]
    b290:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b294:	b253      	sxtb	r3, r2
    b296:	4618      	mov	r0, r3
    b298:	f7ff fe6c 	bl	af74 <_Z12ax12ChecksumaPi>
    b29c:	4603      	mov	r3, r0
    b29e:	6023      	str	r3, [r4, #0]
    return 9;
    b2a0:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    b2a4:	4618      	mov	r0, r3
    b2a6:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b2aa:	46bd      	mov	sp, r7
    b2ac:	bd90      	pop	{r4, r7, pc}
    b2ae:	46c0      	nop			(mov r8, r8)

0000b2b0 <_ZN4AX1223getMoveSpeedInstructionEPith>:
    retour[6] = (uint8_t)(position);
    retour[7] = (uint8_t)(position>>8);
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getMoveSpeedInstruction(int* retour, uint16_t vitesse, uint8_t servo)
    b2b0:	b590      	push	{r4, r7, lr}
    b2b2:	b083      	sub	sp, #12
    b2b4:	af00      	add	r7, sp, #0
    b2b6:	6078      	str	r0, [r7, #4]
    b2b8:	460b      	mov	r3, r1
    b2ba:	807b      	strh	r3, [r7, #2]
    b2bc:	4613      	mov	r3, r2
    b2be:	707b      	strb	r3, [r7, #1]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for high speed)
    b2c0:	787b      	ldrb	r3, [r7, #1]
    b2c2:	6878      	ldr	r0, [r7, #4]
    b2c4:	4619      	mov	r1, r3
    b2c6:	f04f 0201 	mov.w	r2, #1	; 0x1
    b2ca:	f7ff fe81 	bl	afd0 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_MOVING_SPEED_L;
    b2ce:	687b      	ldr	r3, [r7, #4]
    b2d0:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b2d4:	f04f 0320 	mov.w	r3, #32	; 0x20
    b2d8:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(vitesse);
    b2da:	687b      	ldr	r3, [r7, #4]
    b2dc:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b2e0:	887b      	ldrh	r3, [r7, #2]
    b2e2:	b2db      	uxtb	r3, r3
    b2e4:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(vitesse>>8);
    b2e6:	687b      	ldr	r3, [r7, #4]
    b2e8:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b2ec:	887b      	ldrh	r3, [r7, #2]
    b2ee:	ea4f 2323 	mov.w	r3, r3, asr #8
    b2f2:	b2db      	uxtb	r3, r3
    b2f4:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    b2f6:	687b      	ldr	r3, [r7, #4]
    b2f8:	f103 0420 	add.w	r4, r3, #32	; 0x20
    b2fc:	687b      	ldr	r3, [r7, #4]
    b2fe:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b302:	681b      	ldr	r3, [r3, #0]
    b304:	b2da      	uxtb	r2, r3
    b306:	687b      	ldr	r3, [r7, #4]
    b308:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b30c:	b253      	sxtb	r3, r2
    b30e:	4618      	mov	r0, r3
    b310:	f7ff fe30 	bl	af74 <_Z12ax12ChecksumaPi>
    b314:	4603      	mov	r3, r0
    b316:	6023      	str	r3, [r4, #0]
    return 9;
    b318:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    b31c:	4618      	mov	r0, r3
    b31e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b322:	46bd      	mov	sp, r7
    b324:	bd90      	pop	{r4, r7, pc}
    b326:	46c0      	nop			(mov r8, r8)

0000b328 <_ZN4AX1220getMoveToInstructionEPith>:
    retour[8] = (uint8_t)(vitesse);
    retour[9] = (uint8_t)(vitesse>>8);
    retour[10] = ax12Checksum(retour[3], &retour[2]);
    return 11;
}
int AX12::getMoveToInstruction(int* retour, uint16_t position, uint8_t servo)
    b328:	b590      	push	{r4, r7, lr}
    b32a:	b083      	sub	sp, #12
    b32c:	af00      	add	r7, sp, #0
    b32e:	6078      	str	r0, [r7, #4]
    b330:	460b      	mov	r3, r1
    b332:	807b      	strh	r3, [r7, #2]
    b334:	4613      	mov	r3, r2
    b336:	707b      	strb	r3, [r7, #1]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for high position bits)
    b338:	787b      	ldrb	r3, [r7, #1]
    b33a:	6878      	ldr	r0, [r7, #4]
    b33c:	4619      	mov	r1, r3
    b33e:	f04f 0201 	mov.w	r2, #1	; 0x1
    b342:	f7ff fe45 	bl	afd0 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_GOAL_POSITION_L;
    b346:	687b      	ldr	r3, [r7, #4]
    b348:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b34c:	f04f 031e 	mov.w	r3, #30	; 0x1e
    b350:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(position);
    b352:	687b      	ldr	r3, [r7, #4]
    b354:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b358:	887b      	ldrh	r3, [r7, #2]
    b35a:	b2db      	uxtb	r3, r3
    b35c:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(position>>8);
    b35e:	687b      	ldr	r3, [r7, #4]
    b360:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b364:	887b      	ldrh	r3, [r7, #2]
    b366:	ea4f 2323 	mov.w	r3, r3, asr #8
    b36a:	b2db      	uxtb	r3, r3
    b36c:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    b36e:	687b      	ldr	r3, [r7, #4]
    b370:	f103 0420 	add.w	r4, r3, #32	; 0x20
    b374:	687b      	ldr	r3, [r7, #4]
    b376:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b37a:	681b      	ldr	r3, [r3, #0]
    b37c:	b2da      	uxtb	r2, r3
    b37e:	687b      	ldr	r3, [r7, #4]
    b380:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b384:	b253      	sxtb	r3, r2
    b386:	4618      	mov	r0, r3
    b388:	f7ff fdf4 	bl	af74 <_Z12ax12ChecksumaPi>
    b38c:	4603      	mov	r3, r0
    b38e:	6023      	str	r3, [r4, #0]
    return 9;
    b390:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    b394:	4618      	mov	r0, r3
    b396:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b39a:	46bd      	mov	sp, r7
    b39c:	bd90      	pop	{r4, r7, pc}
    b39e:	46c0      	nop			(mov r8, r8)

0000b3a0 <_ZN4AX1218getMoveInstructionEPitth>:
    for(int i = 0; i < length+1; i++) {
		checksum += parameters[i];
	}
	return (int)(int8_t)(~checksum); // ~ est l'opérateur NOT bit a bit
}
int AX12::getMoveInstruction(int* retour, uint16_t position, uint16_t vitesse, uint8_t servo)
    b3a0:	b590      	push	{r4, r7, lr}
    b3a2:	b085      	sub	sp, #20
    b3a4:	af00      	add	r7, sp, #0
    b3a6:	60f8      	str	r0, [r7, #12]
    b3a8:	4618      	mov	r0, r3
    b3aa:	460b      	mov	r3, r1
    b3ac:	817b      	strh	r3, [r7, #10]
    b3ae:	4613      	mov	r3, r2
    b3b0:	813b      	strh	r3, [r7, #8]
    b3b2:	4603      	mov	r3, r0
    b3b4:	71fb      	strb	r3, [r7, #7]
{
    createWriteHeader(retour, servo, 3); // first, we create a write header with 3 more params (for low/height pos and low/height speed)
    b3b6:	79fb      	ldrb	r3, [r7, #7]
    b3b8:	68f8      	ldr	r0, [r7, #12]
    b3ba:	4619      	mov	r1, r3
    b3bc:	f04f 0203 	mov.w	r2, #3	; 0x3
    b3c0:	f7ff fe06 	bl	afd0 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_GOAL_POSITION_L;
    b3c4:	68fb      	ldr	r3, [r7, #12]
    b3c6:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b3ca:	f04f 031e 	mov.w	r3, #30	; 0x1e
    b3ce:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(position);
    b3d0:	68fb      	ldr	r3, [r7, #12]
    b3d2:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b3d6:	897b      	ldrh	r3, [r7, #10]
    b3d8:	b2db      	uxtb	r3, r3
    b3da:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(position>>8);
    b3dc:	68fb      	ldr	r3, [r7, #12]
    b3de:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b3e2:	897b      	ldrh	r3, [r7, #10]
    b3e4:	ea4f 2323 	mov.w	r3, r3, asr #8
    b3e8:	b2db      	uxtb	r3, r3
    b3ea:	6013      	str	r3, [r2, #0]
    retour[8] = (uint8_t)(vitesse);
    b3ec:	68fb      	ldr	r3, [r7, #12]
    b3ee:	f103 0220 	add.w	r2, r3, #32	; 0x20
    b3f2:	893b      	ldrh	r3, [r7, #8]
    b3f4:	b2db      	uxtb	r3, r3
    b3f6:	6013      	str	r3, [r2, #0]
    retour[9] = (uint8_t)(vitesse>>8);
    b3f8:	68fb      	ldr	r3, [r7, #12]
    b3fa:	f103 0224 	add.w	r2, r3, #36	; 0x24
    b3fe:	893b      	ldrh	r3, [r7, #8]
    b400:	ea4f 2323 	mov.w	r3, r3, asr #8
    b404:	b2db      	uxtb	r3, r3
    b406:	6013      	str	r3, [r2, #0]
    retour[10] = ax12Checksum(retour[3], &retour[2]);
    b408:	68fb      	ldr	r3, [r7, #12]
    b40a:	f103 0428 	add.w	r4, r3, #40	; 0x28
    b40e:	68fb      	ldr	r3, [r7, #12]
    b410:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b414:	681b      	ldr	r3, [r3, #0]
    b416:	b2da      	uxtb	r2, r3
    b418:	68fb      	ldr	r3, [r7, #12]
    b41a:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b41e:	b253      	sxtb	r3, r2
    b420:	4618      	mov	r0, r3
    b422:	f7ff fda7 	bl	af74 <_Z12ax12ChecksumaPi>
    b426:	4603      	mov	r3, r0
    b428:	6023      	str	r3, [r4, #0]
    return 11;
    b42a:	f04f 030b 	mov.w	r3, #11	; 0xb
}
    b42e:	4618      	mov	r0, r3
    b430:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b434:	46bd      	mov	sp, r7
    b436:	bd90      	pop	{r4, r7, pc}

0000b438 <_ZN4AX1216createReadHeaderEPiii>:
    retour[2] = servo;
    retour[3] = AX12_WRITE_DATA_PARAMS+2+nombreParamsAjoutes;
    retour[4] = AX12_WRITE_DATA;
}

void AX12::createReadHeader(int* retour, int servo, int nombreParamsAjoutes)
    b438:	b480      	push	{r7}
    b43a:	b085      	sub	sp, #20
    b43c:	af00      	add	r7, sp, #0
    b43e:	60f8      	str	r0, [r7, #12]
    b440:	60b9      	str	r1, [r7, #8]
    b442:	607a      	str	r2, [r7, #4]
{
    retour[0] = 0xff;
    b444:	68fa      	ldr	r2, [r7, #12]
    b446:	f04f 03ff 	mov.w	r3, #255	; 0xff
    b44a:	6013      	str	r3, [r2, #0]
    retour[1] = 0xff;
    b44c:	68fb      	ldr	r3, [r7, #12]
    b44e:	f103 0204 	add.w	r2, r3, #4	; 0x4
    b452:	f04f 03ff 	mov.w	r3, #255	; 0xff
    b456:	6013      	str	r3, [r2, #0]
    retour[2] = servo;
    b458:	68fb      	ldr	r3, [r7, #12]
    b45a:	f103 0208 	add.w	r2, r3, #8	; 0x8
    b45e:	68bb      	ldr	r3, [r7, #8]
    b460:	6013      	str	r3, [r2, #0]
    retour[3] = AX12_READ_DATA_PARAMS+2+nombreParamsAjoutes;
    b462:	68fb      	ldr	r3, [r7, #12]
    b464:	f103 020c 	add.w	r2, r3, #12	; 0xc
    b468:	687b      	ldr	r3, [r7, #4]
    b46a:	f103 0304 	add.w	r3, r3, #4	; 0x4
    b46e:	6013      	str	r3, [r2, #0]
    retour[4] = AX12_READ_DATA;
    b470:	68fb      	ldr	r3, [r7, #12]
    b472:	f103 0210 	add.w	r2, r3, #16	; 0x10
    b476:	f04f 0302 	mov.w	r3, #2	; 0x2
    b47a:	6013      	str	r3, [r2, #0]
}
    b47c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b480:	46bd      	mov	sp, r7
    b482:	bc80      	pop	{r7}
    b484:	4770      	bx	lr
    b486:	46c0      	nop			(mov r8, r8)

0000b488 <_ZN4AX1226receivePositionInformationEPih>:
    retour[6] = baudRate;
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    return 8;
}

int AX12::receivePositionInformation(int* retour, uint8_t servo)
    b488:	b590      	push	{r4, r7, lr}
    b48a:	b083      	sub	sp, #12
    b48c:	af00      	add	r7, sp, #0
    b48e:	6078      	str	r0, [r7, #4]
    b490:	460b      	mov	r3, r1
    b492:	70fb      	strb	r3, [r7, #3]
{
    createReadHeader(retour, servo, 0);
    b494:	78fb      	ldrb	r3, [r7, #3]
    b496:	6878      	ldr	r0, [r7, #4]
    b498:	4619      	mov	r1, r3
    b49a:	f04f 0200 	mov.w	r2, #0	; 0x0
    b49e:	f7ff ffcb 	bl	b438 <_ZN4AX1216createReadHeaderEPiii>
    retour[5] = AX12_PRESENT_POSITION_L;
    b4a2:	687b      	ldr	r3, [r7, #4]
    b4a4:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b4a8:	f04f 0324 	mov.w	r3, #36	; 0x24
    b4ac:	6013      	str	r3, [r2, #0]
    retour[6] = 2;
    b4ae:	687b      	ldr	r3, [r7, #4]
    b4b0:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b4b4:	f04f 0302 	mov.w	r3, #2	; 0x2
    b4b8:	6013      	str	r3, [r2, #0]
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    b4ba:	687b      	ldr	r3, [r7, #4]
    b4bc:	f103 041c 	add.w	r4, r3, #28	; 0x1c
    b4c0:	687b      	ldr	r3, [r7, #4]
    b4c2:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b4c6:	681b      	ldr	r3, [r3, #0]
    b4c8:	b2da      	uxtb	r2, r3
    b4ca:	687b      	ldr	r3, [r7, #4]
    b4cc:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b4d0:	b253      	sxtb	r3, r2
    b4d2:	4618      	mov	r0, r3
    b4d4:	f7ff fd4e 	bl	af74 <_Z12ax12ChecksumaPi>
    b4d8:	4603      	mov	r3, r0
    b4da:	6023      	str	r3, [r4, #0]
    return 8;
    b4dc:	f04f 0308 	mov.w	r3, #8	; 0x8
}
    b4e0:	4618      	mov	r0, r3
    b4e2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b4e6:	46bd      	mov	sp, r7
    b4e8:	bd90      	pop	{r4, r7, pc}
    b4ea:	46c0      	nop			(mov r8, r8)

0000b4ec <_ZN29CommandCalibrerCapteurCouleur14getLinearSpeedEv>:
            break;
    }
}

// renvoient 0
Vitesse CommandCalibrerCapteurCouleur::getLinearSpeed()
    b4ec:	b480      	push	{r7}
    b4ee:	b083      	sub	sp, #12
    b4f0:	af00      	add	r7, sp, #0
    b4f2:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    b4f4:	4b03      	ldr	r3, [pc, #12]	(b504 <_ZN29CommandCalibrerCapteurCouleur14getLinearSpeedEv+0x18>)
}
    b4f6:	4618      	mov	r0, r3
    b4f8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b4fc:	46bd      	mov	sp, r7
    b4fe:	bc80      	pop	{r7}
    b500:	4770      	bx	lr
    b502:	46c0      	nop			(mov r8, r8)
    b504:	00000000 	.word	0x00000000

0000b508 <_ZN29CommandCalibrerCapteurCouleur15getAngularSpeedEv>:

Angle CommandCalibrerCapteurCouleur::getAngularSpeed()
    b508:	b480      	push	{r7}
    b50a:	b083      	sub	sp, #12
    b50c:	af00      	add	r7, sp, #0
    b50e:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    b510:	4b03      	ldr	r3, [pc, #12]	(b520 <_ZN29CommandCalibrerCapteurCouleur15getAngularSpeedEv+0x18>)
}
    b512:	4618      	mov	r0, r3
    b514:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b518:	46bd      	mov	sp, r7
    b51a:	bc80      	pop	{r7}
    b51c:	4770      	bx	lr
    b51e:	46c0      	nop			(mov r8, r8)
    b520:	00000000 	.word	0x00000000

0000b524 <_ZNK29CommandCalibrerCapteurCouleur4finiEv>:

// renvoit si le capteur a fini sa calibration
// le résultat est lisible dans getTicksMoyens()
bool CommandCalibrerCapteurCouleur::fini() const
    b524:	b480      	push	{r7}
    b526:	b083      	sub	sp, #12
    b528:	af00      	add	r7, sp, #0
    b52a:	6078      	str	r0, [r7, #4]
{
    return (state > 4);
    b52c:	687b      	ldr	r3, [r7, #4]
    b52e:	689b      	ldr	r3, [r3, #8]
    b530:	2b04      	cmp	r3, #4
    b532:	bfd4      	ite	le
    b534:	2300      	movle	r3, #0
    b536:	2301      	movgt	r3, #1
    b538:	b2db      	uxtb	r3, r3
}
    b53a:	4618      	mov	r0, r3
    b53c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b540:	46bd      	mov	sp, r7
    b542:	bc80      	pop	{r7}
    b544:	4770      	bx	lr
    b546:	46c0      	nop			(mov r8, r8)

0000b548 <_ZNK29CommandCalibrerCapteurCouleur14getTicksMoyensEv>:

// une fois fini, renvoit le seuil calculé
uint16_t CommandCalibrerCapteurCouleur::getTicksMoyens() const
    b548:	b480      	push	{r7}
    b54a:	b083      	sub	sp, #12
    b54c:	af00      	add	r7, sp, #0
    b54e:	6078      	str	r0, [r7, #4]
{
    return resultat;
    b550:	687b      	ldr	r3, [r7, #4]
    b552:	899b      	ldrh	r3, [r3, #12]
}
    b554:	4618      	mov	r0, r3
    b556:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b55a:	46bd      	mov	sp, r7
    b55c:	bc80      	pop	{r7}
    b55e:	4770      	bx	lr

0000b560 <_ZN19CommandCheckCouleur14getLinearSpeedEv>:
            state++;
    }
}

// renvoient 0
Vitesse CommandCheckCouleur::getLinearSpeed()
    b560:	b480      	push	{r7}
    b562:	b083      	sub	sp, #12
    b564:	af00      	add	r7, sp, #0
    b566:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    b568:	4b03      	ldr	r3, [pc, #12]	(b578 <_ZN19CommandCheckCouleur14getLinearSpeedEv+0x18>)
}
    b56a:	4618      	mov	r0, r3
    b56c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b570:	46bd      	mov	sp, r7
    b572:	bc80      	pop	{r7}
    b574:	4770      	bx	lr
    b576:	46c0      	nop			(mov r8, r8)
    b578:	00000000 	.word	0x00000000

0000b57c <_ZN19CommandCheckCouleur15getAngularSpeedEv>:

Angle CommandCheckCouleur::getAngularSpeed()
    b57c:	b480      	push	{r7}
    b57e:	b083      	sub	sp, #12
    b580:	af00      	add	r7, sp, #0
    b582:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    b584:	4b03      	ldr	r3, [pc, #12]	(b594 <_ZN19CommandCheckCouleur15getAngularSpeedEv+0x18>)
}
    b586:	4618      	mov	r0, r3
    b588:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b58c:	46bd      	mov	sp, r7
    b58e:	bc80      	pop	{r7}
    b590:	4770      	bx	lr
    b592:	46c0      	nop			(mov r8, r8)
    b594:	00000000 	.word	0x00000000

0000b598 <_ZNK19CommandCheckCouleur4finiEv>:

// renvoit si le capteur a fini de check la couleur
// le résultat est disponible dans les fonctions bleue() et rouge()
bool CommandCheckCouleur::fini() const
    b598:	b480      	push	{r7}
    b59a:	b083      	sub	sp, #12
    b59c:	af00      	add	r7, sp, #0
    b59e:	6078      	str	r0, [r7, #4]
{
    return (state >= 4);
    b5a0:	687b      	ldr	r3, [r7, #4]
    b5a2:	695b      	ldr	r3, [r3, #20]
    b5a4:	2b03      	cmp	r3, #3
    b5a6:	bfd4      	ite	le
    b5a8:	2300      	movle	r3, #0
    b5aa:	2301      	movgt	r3, #1
    b5ac:	b2db      	uxtb	r3, r3
}
    b5ae:	4618      	mov	r0, r3
    b5b0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b5b4:	46bd      	mov	sp, r7
    b5b6:	bc80      	pop	{r7}
    b5b8:	4770      	bx	lr
    b5ba:	46c0      	nop			(mov r8, r8)

0000b5bc <_ZNK19CommandCheckCouleur5bleueEv>:

// une fois fini, renvoit la couleur
// les 2 peuvent renvoyer true si on est pas sur de la couleur
bool CommandCheckCouleur::bleue() const
    b5bc:	b590      	push	{r4, r7, lr}
    b5be:	b083      	sub	sp, #12
    b5c0:	af00      	add	r7, sp, #0
    b5c2:	6078      	str	r0, [r7, #4]
{
    return (float)bleuMesure > 1.15f*(float)seuilMoyenne;
    b5c4:	687b      	ldr	r3, [r7, #4]
    b5c6:	899b      	ldrh	r3, [r3, #12]
    b5c8:	4618      	mov	r0, r3
    b5ca:	f011 fc31 	bl	1ce30 <__aeabi_ui2f>
    b5ce:	4604      	mov	r4, r0
    b5d0:	687b      	ldr	r3, [r7, #4]
    b5d2:	889b      	ldrh	r3, [r3, #4]
    b5d4:	4618      	mov	r0, r3
    b5d6:	f011 fc2b 	bl	1ce30 <__aeabi_ui2f>
    b5da:	4603      	mov	r3, r0
    b5dc:	4618      	mov	r0, r3
    b5de:	490c      	ldr	r1, [pc, #48]	(b610 <_ZNK19CommandCheckCouleur5bleueEv+0x54>)
    b5e0:	f011 fc7e 	bl	1cee0 <__aeabi_fmul>
    b5e4:	4603      	mov	r3, r0
    b5e6:	461a      	mov	r2, r3
    b5e8:	f04f 0300 	mov.w	r3, #0	; 0x0
    b5ec:	70fb      	strb	r3, [r7, #3]
    b5ee:	4620      	mov	r0, r4
    b5f0:	4611      	mov	r1, r2
    b5f2:	f011 fe2f 	bl	1d254 <__aeabi_fcmpgt>
    b5f6:	4603      	mov	r3, r0
    b5f8:	2b00      	cmp	r3, #0
    b5fa:	d002      	beq.n	b602 <_ZNK19CommandCheckCouleur5bleueEv+0x46>
    b5fc:	f04f 0301 	mov.w	r3, #1	; 0x1
    b600:	70fb      	strb	r3, [r7, #3]
    b602:	78fb      	ldrb	r3, [r7, #3]
}
    b604:	4618      	mov	r0, r3
    b606:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b60a:	46bd      	mov	sp, r7
    b60c:	bd90      	pop	{r4, r7, pc}
    b60e:	46c0      	nop			(mov r8, r8)
    b610:	3f933333 	.word	0x3f933333

0000b614 <_ZNK19CommandCheckCouleur5rougeEv>:

bool CommandCheckCouleur::rouge() const
    b614:	b590      	push	{r4, r7, lr}
    b616:	b083      	sub	sp, #12
    b618:	af00      	add	r7, sp, #0
    b61a:	6078      	str	r0, [r7, #4]
{
    return (float)rougeMesure > 1.15f*(float)seuilMoyenne;
    b61c:	687b      	ldr	r3, [r7, #4]
    b61e:	89db      	ldrh	r3, [r3, #14]
    b620:	4618      	mov	r0, r3
    b622:	f011 fc05 	bl	1ce30 <__aeabi_ui2f>
    b626:	4604      	mov	r4, r0
    b628:	687b      	ldr	r3, [r7, #4]
    b62a:	889b      	ldrh	r3, [r3, #4]
    b62c:	4618      	mov	r0, r3
    b62e:	f011 fbff 	bl	1ce30 <__aeabi_ui2f>
    b632:	4603      	mov	r3, r0
    b634:	4618      	mov	r0, r3
    b636:	490c      	ldr	r1, [pc, #48]	(b668 <_ZNK19CommandCheckCouleur5rougeEv+0x54>)
    b638:	f011 fc52 	bl	1cee0 <__aeabi_fmul>
    b63c:	4603      	mov	r3, r0
    b63e:	461a      	mov	r2, r3
    b640:	f04f 0300 	mov.w	r3, #0	; 0x0
    b644:	70fb      	strb	r3, [r7, #3]
    b646:	4620      	mov	r0, r4
    b648:	4611      	mov	r1, r2
    b64a:	f011 fe03 	bl	1d254 <__aeabi_fcmpgt>
    b64e:	4603      	mov	r3, r0
    b650:	2b00      	cmp	r3, #0
    b652:	d002      	beq.n	b65a <_ZNK19CommandCheckCouleur5rougeEv+0x46>
    b654:	f04f 0301 	mov.w	r3, #1	; 0x1
    b658:	70fb      	strb	r3, [r7, #3]
    b65a:	78fb      	ldrb	r3, [r7, #3]
}
    b65c:	4618      	mov	r0, r3
    b65e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b662:	46bd      	mov	sp, r7
    b664:	bd90      	pop	{r4, r7, pc}
    b666:	46c0      	nop			(mov r8, r8)
    b668:	3f933333 	.word	0x3f933333

0000b66c <_ZN29CommandCalibrerCapteurCouleurC1EP14CapteurCouleur>:


// permet de calibrer le capteur couleur en calculant la valeur moyenne de chaque capteur
// nécessite 5 updates chaque 5 ms
// la première update peut se faire juste après la construction
CommandCalibrerCapteurCouleur::CommandCalibrerCapteurCouleur(CapteurCouleur* capteur)
    b66c:	b580      	push	{r7, lr}
    b66e:	b082      	sub	sp, #8
    b670:	af00      	add	r7, sp, #0
    b672:	6078      	str	r0, [r7, #4]
    b674:	6039      	str	r1, [r7, #0]
    : capteurCouleur(capteur), state(0), resultat(0)
    b676:	687b      	ldr	r3, [r7, #4]
    b678:	4618      	mov	r0, r3
    b67a:	f7fc fcad 	bl	7fd8 <_ZN7CommandC2Ev>
    b67e:	687a      	ldr	r2, [r7, #4]
    b680:	4b09      	ldr	r3, [pc, #36]	(b6a8 <_ZN29CommandCalibrerCapteurCouleurC1EP14CapteurCouleur+0x3c>)
    b682:	6013      	str	r3, [r2, #0]
    b684:	687a      	ldr	r2, [r7, #4]
    b686:	683b      	ldr	r3, [r7, #0]
    b688:	6053      	str	r3, [r2, #4]
    b68a:	687a      	ldr	r2, [r7, #4]
    b68c:	f04f 0300 	mov.w	r3, #0	; 0x0
    b690:	6093      	str	r3, [r2, #8]
    b692:	687a      	ldr	r2, [r7, #4]
    b694:	f04f 0300 	mov.w	r3, #0	; 0x0
    b698:	8193      	strh	r3, [r2, #12]
{
}
    b69a:	687b      	ldr	r3, [r7, #4]
    b69c:	4618      	mov	r0, r3
    b69e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b6a2:	46bd      	mov	sp, r7
    b6a4:	bd80      	pop	{r7, pc}
    b6a6:	46c0      	nop			(mov r8, r8)
    b6a8:	00024020 	.word	0x00024020

0000b6ac <_ZN29CommandCalibrerCapteurCouleurC2EP14CapteurCouleur>:


// permet de calibrer le capteur couleur en calculant la valeur moyenne de chaque capteur
// nécessite 5 updates chaque 5 ms
// la première update peut se faire juste après la construction
CommandCalibrerCapteurCouleur::CommandCalibrerCapteurCouleur(CapteurCouleur* capteur)
    b6ac:	b580      	push	{r7, lr}
    b6ae:	b082      	sub	sp, #8
    b6b0:	af00      	add	r7, sp, #0
    b6b2:	6078      	str	r0, [r7, #4]
    b6b4:	6039      	str	r1, [r7, #0]
    : capteurCouleur(capteur), state(0), resultat(0)
    b6b6:	687b      	ldr	r3, [r7, #4]
    b6b8:	4618      	mov	r0, r3
    b6ba:	f7fc fc8d 	bl	7fd8 <_ZN7CommandC2Ev>
    b6be:	687a      	ldr	r2, [r7, #4]
    b6c0:	4b09      	ldr	r3, [pc, #36]	(b6e8 <_ZN29CommandCalibrerCapteurCouleurC2EP14CapteurCouleur+0x3c>)
    b6c2:	6013      	str	r3, [r2, #0]
    b6c4:	687a      	ldr	r2, [r7, #4]
    b6c6:	683b      	ldr	r3, [r7, #0]
    b6c8:	6053      	str	r3, [r2, #4]
    b6ca:	687a      	ldr	r2, [r7, #4]
    b6cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    b6d0:	6093      	str	r3, [r2, #8]
    b6d2:	687a      	ldr	r2, [r7, #4]
    b6d4:	f04f 0300 	mov.w	r3, #0	; 0x0
    b6d8:	8193      	strh	r3, [r2, #12]
{
}
    b6da:	687b      	ldr	r3, [r7, #4]
    b6dc:	4618      	mov	r0, r3
    b6de:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b6e2:	46bd      	mov	sp, r7
    b6e4:	bd80      	pop	{r7, pc}
    b6e6:	46c0      	nop			(mov r8, r8)
    b6e8:	00024020 	.word	0x00024020

0000b6ec <_ZN14CapteurCouleur12getTickValueEv>:
    TIM_SetCounter(m_TIMx, 0);
}

// Permet de connaitre le nombre de ticks depuis le dernier appel de cette fonction
// ou depuis le dernier appel de la selection du capteur
uint16_t CapteurCouleur::getTickValue()
    b6ec:	b580      	push	{r7, lr}
    b6ee:	b084      	sub	sp, #16
    b6f0:	af00      	add	r7, sp, #0
    b6f2:	6078      	str	r0, [r7, #4]
{
    // récupère le nombre de ticks depuis la dernière mise à 0
    uint16_t tick = TIM_GetCounter(m_TIMx);
    b6f4:	687b      	ldr	r3, [r7, #4]
    b6f6:	681b      	ldr	r3, [r3, #0]
    b6f8:	4618      	mov	r0, r3
    b6fa:	f7f8 fd41 	bl	4180 <TIM_GetCounter>
    b6fe:	4603      	mov	r3, r0
    b700:	81fb      	strh	r3, [r7, #14]

    // remet à 0
    TIM_SetCounter(m_TIMx, 0);
    b702:	687b      	ldr	r3, [r7, #4]
    b704:	681b      	ldr	r3, [r3, #0]
    b706:	4618      	mov	r0, r3
    b708:	f04f 0100 	mov.w	r1, #0	; 0x0
    b70c:	f7f8 fbfe 	bl	3f0c <TIM_SetCounter>

    return tick;
    b710:	89fb      	ldrh	r3, [r7, #14]
}
    b712:	4618      	mov	r0, r3
    b714:	f107 0710 	add.w	r7, r7, #16	; 0x10
    b718:	46bd      	mov	sp, r7
    b71a:	bd80      	pop	{r7, pc}

0000b71c <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>:
            break;
    }
}

// selectionne le capteur
void CapteurCouleur::activerCapteur(PositionCapteurCouleur position)
    b71c:	b580      	push	{r7, lr}
    b71e:	b082      	sub	sp, #8
    b720:	af00      	add	r7, sp, #0
    b722:	6078      	str	r0, [r7, #4]
    b724:	460b      	mov	r3, r1
    b726:	70fb      	strb	r3, [r7, #3]
{
    // selection du capteur
    switch (position)
    b728:	78fb      	ldrb	r3, [r7, #3]
    b72a:	2b03      	cmp	r3, #3
    b72c:	d85d      	bhi.n	b7ea <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
    b72e:	a201      	add	r2, pc, #4	(adr r2, b734 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0x18>)
    b730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b734:	0000b745 	.word	0x0000b745
    b738:	0000b76f 	.word	0x0000b76f
    b73c:	0000b799 	.word	0x0000b799
    b740:	0000b7c3 	.word	0x0000b7c3
    {
        case GAUCHE_HAUT:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_RESET);
    b744:	687b      	ldr	r3, [r7, #4]
    b746:	695a      	ldr	r2, [r3, #20]
    b748:	687b      	ldr	r3, [r7, #4]
    b74a:	8b1b      	ldrh	r3, [r3, #24]
    b74c:	4610      	mov	r0, r2
    b74e:	4619      	mov	r1, r3
    b750:	f04f 0200 	mov.w	r2, #0	; 0x0
    b754:	f7f6 f91a 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_SET);
    b758:	687b      	ldr	r3, [r7, #4]
    b75a:	69da      	ldr	r2, [r3, #28]
    b75c:	687b      	ldr	r3, [r7, #4]
    b75e:	8c1b      	ldrh	r3, [r3, #32]
    b760:	4610      	mov	r0, r2
    b762:	4619      	mov	r1, r3
    b764:	f04f 0201 	mov.w	r2, #1	; 0x1
    b768:	f7f6 f910 	bl	198c <GPIO_WriteBit>
    b76c:	e03d      	b.n	b7ea <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
            break;
        case GAUCHE_BAS:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_SET);
    b76e:	687b      	ldr	r3, [r7, #4]
    b770:	695a      	ldr	r2, [r3, #20]
    b772:	687b      	ldr	r3, [r7, #4]
    b774:	8b1b      	ldrh	r3, [r3, #24]
    b776:	4610      	mov	r0, r2
    b778:	4619      	mov	r1, r3
    b77a:	f04f 0201 	mov.w	r2, #1	; 0x1
    b77e:	f7f6 f905 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_SET);
    b782:	687b      	ldr	r3, [r7, #4]
    b784:	69da      	ldr	r2, [r3, #28]
    b786:	687b      	ldr	r3, [r7, #4]
    b788:	8c1b      	ldrh	r3, [r3, #32]
    b78a:	4610      	mov	r0, r2
    b78c:	4619      	mov	r1, r3
    b78e:	f04f 0201 	mov.w	r2, #1	; 0x1
    b792:	f7f6 f8fb 	bl	198c <GPIO_WriteBit>
    b796:	e028      	b.n	b7ea <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
            break;
        case DROITE_HAUT:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_RESET);
    b798:	687b      	ldr	r3, [r7, #4]
    b79a:	695a      	ldr	r2, [r3, #20]
    b79c:	687b      	ldr	r3, [r7, #4]
    b79e:	8b1b      	ldrh	r3, [r3, #24]
    b7a0:	4610      	mov	r0, r2
    b7a2:	4619      	mov	r1, r3
    b7a4:	f04f 0200 	mov.w	r2, #0	; 0x0
    b7a8:	f7f6 f8f0 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_RESET);
    b7ac:	687b      	ldr	r3, [r7, #4]
    b7ae:	69da      	ldr	r2, [r3, #28]
    b7b0:	687b      	ldr	r3, [r7, #4]
    b7b2:	8c1b      	ldrh	r3, [r3, #32]
    b7b4:	4610      	mov	r0, r2
    b7b6:	4619      	mov	r1, r3
    b7b8:	f04f 0200 	mov.w	r2, #0	; 0x0
    b7bc:	f7f6 f8e6 	bl	198c <GPIO_WriteBit>
    b7c0:	e013      	b.n	b7ea <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
            break;
        case DROITE_BAS:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_SET);
    b7c2:	687b      	ldr	r3, [r7, #4]
    b7c4:	695a      	ldr	r2, [r3, #20]
    b7c6:	687b      	ldr	r3, [r7, #4]
    b7c8:	8b1b      	ldrh	r3, [r3, #24]
    b7ca:	4610      	mov	r0, r2
    b7cc:	4619      	mov	r1, r3
    b7ce:	f04f 0201 	mov.w	r2, #1	; 0x1
    b7d2:	f7f6 f8db 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_RESET);
    b7d6:	687b      	ldr	r3, [r7, #4]
    b7d8:	69da      	ldr	r2, [r3, #28]
    b7da:	687b      	ldr	r3, [r7, #4]
    b7dc:	8c1b      	ldrh	r3, [r3, #32]
    b7de:	4610      	mov	r0, r2
    b7e0:	4619      	mov	r1, r3
    b7e2:	f04f 0200 	mov.w	r2, #0	; 0x0
    b7e6:	f7f6 f8d1 	bl	198c <GPIO_WriteBit>
            break;
    }

    // remet à 0
    TIM_SetCounter(m_TIMx, 0);
    b7ea:	687b      	ldr	r3, [r7, #4]
    b7ec:	681b      	ldr	r3, [r3, #0]
    b7ee:	4618      	mov	r0, r3
    b7f0:	f04f 0100 	mov.w	r1, #0	; 0x0
    b7f4:	f7f8 fb8a 	bl	3f0c <TIM_SetCounter>
}
    b7f8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b7fc:	46bd      	mov	sp, r7
    b7fe:	bd80      	pop	{r7, pc}

0000b800 <_ZN29CommandCalibrerCapteurCouleur6updateEv>:
    : capteurCouleur(capteur), state(0), resultat(0)
{
}

// récupère la valeur d'un capteur et passe à un autre
void CommandCalibrerCapteurCouleur::update()
    b800:	b590      	push	{r4, r7, lr}
    b802:	b083      	sub	sp, #12
    b804:	af00      	add	r7, sp, #0
    b806:	6078      	str	r0, [r7, #4]
{
    switch (state)
    b808:	687b      	ldr	r3, [r7, #4]
    b80a:	689b      	ldr	r3, [r3, #8]
    b80c:	2b04      	cmp	r3, #4
    b80e:	f200 8082 	bhi.w	b916 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
    b812:	a201      	add	r2, pc, #4	(adr r2, b818 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x18>)
    b814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b818:	0000b82d 	.word	0x0000b82d
    b81c:	0000b849 	.word	0x0000b849
    b820:	0000b87d 	.word	0x0000b87d
    b824:	0000b8b1 	.word	0x0000b8b1
    b828:	0000b8e5 	.word	0x0000b8e5
    {
        case 0:
            capteurCouleur->activerCapteur(GAUCHE_HAUT);
    b82c:	687b      	ldr	r3, [r7, #4]
    b82e:	685b      	ldr	r3, [r3, #4]
    b830:	4618      	mov	r0, r3
    b832:	f04f 0100 	mov.w	r1, #0	; 0x0
    b836:	f7ff ff71 	bl	b71c <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    b83a:	687b      	ldr	r3, [r7, #4]
    b83c:	689b      	ldr	r3, [r3, #8]
    b83e:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b842:	687b      	ldr	r3, [r7, #4]
    b844:	609a      	str	r2, [r3, #8]
    b846:	e066      	b.n	b916 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 1:
            resultat += capteurCouleur->getTickValue();
    b848:	687b      	ldr	r3, [r7, #4]
    b84a:	899c      	ldrh	r4, [r3, #12]
    b84c:	687b      	ldr	r3, [r7, #4]
    b84e:	685b      	ldr	r3, [r3, #4]
    b850:	4618      	mov	r0, r3
    b852:	f7ff ff4b 	bl	b6ec <_ZN14CapteurCouleur12getTickValueEv>
    b856:	4603      	mov	r3, r0
    b858:	4423      	add	r3, r4
    b85a:	b29b      	uxth	r3, r3
    b85c:	687a      	ldr	r2, [r7, #4]
    b85e:	8193      	strh	r3, [r2, #12]
            capteurCouleur->activerCapteur(GAUCHE_BAS);
    b860:	687b      	ldr	r3, [r7, #4]
    b862:	685b      	ldr	r3, [r3, #4]
    b864:	4618      	mov	r0, r3
    b866:	f04f 0101 	mov.w	r1, #1	; 0x1
    b86a:	f7ff ff57 	bl	b71c <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    b86e:	687b      	ldr	r3, [r7, #4]
    b870:	689b      	ldr	r3, [r3, #8]
    b872:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b876:	687b      	ldr	r3, [r7, #4]
    b878:	609a      	str	r2, [r3, #8]
    b87a:	e04c      	b.n	b916 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 2:
            resultat += capteurCouleur->getTickValue();
    b87c:	687b      	ldr	r3, [r7, #4]
    b87e:	899c      	ldrh	r4, [r3, #12]
    b880:	687b      	ldr	r3, [r7, #4]
    b882:	685b      	ldr	r3, [r3, #4]
    b884:	4618      	mov	r0, r3
    b886:	f7ff ff31 	bl	b6ec <_ZN14CapteurCouleur12getTickValueEv>
    b88a:	4603      	mov	r3, r0
    b88c:	4423      	add	r3, r4
    b88e:	b29b      	uxth	r3, r3
    b890:	687a      	ldr	r2, [r7, #4]
    b892:	8193      	strh	r3, [r2, #12]
            capteurCouleur->activerCapteur(DROITE_HAUT);
    b894:	687b      	ldr	r3, [r7, #4]
    b896:	685b      	ldr	r3, [r3, #4]
    b898:	4618      	mov	r0, r3
    b89a:	f04f 0102 	mov.w	r1, #2	; 0x2
    b89e:	f7ff ff3d 	bl	b71c <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    b8a2:	687b      	ldr	r3, [r7, #4]
    b8a4:	689b      	ldr	r3, [r3, #8]
    b8a6:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b8aa:	687b      	ldr	r3, [r7, #4]
    b8ac:	609a      	str	r2, [r3, #8]
    b8ae:	e032      	b.n	b916 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 3:
            resultat += capteurCouleur->getTickValue();
    b8b0:	687b      	ldr	r3, [r7, #4]
    b8b2:	899c      	ldrh	r4, [r3, #12]
    b8b4:	687b      	ldr	r3, [r7, #4]
    b8b6:	685b      	ldr	r3, [r3, #4]
    b8b8:	4618      	mov	r0, r3
    b8ba:	f7ff ff17 	bl	b6ec <_ZN14CapteurCouleur12getTickValueEv>
    b8be:	4603      	mov	r3, r0
    b8c0:	4423      	add	r3, r4
    b8c2:	b29b      	uxth	r3, r3
    b8c4:	687a      	ldr	r2, [r7, #4]
    b8c6:	8193      	strh	r3, [r2, #12]
            capteurCouleur->activerCapteur(DROITE_BAS);
    b8c8:	687b      	ldr	r3, [r7, #4]
    b8ca:	685b      	ldr	r3, [r3, #4]
    b8cc:	4618      	mov	r0, r3
    b8ce:	f04f 0103 	mov.w	r1, #3	; 0x3
    b8d2:	f7ff ff23 	bl	b71c <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    b8d6:	687b      	ldr	r3, [r7, #4]
    b8d8:	689b      	ldr	r3, [r3, #8]
    b8da:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b8de:	687b      	ldr	r3, [r7, #4]
    b8e0:	609a      	str	r2, [r3, #8]
    b8e2:	e018      	b.n	b916 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 4:
            resultat += capteurCouleur->getTickValue();
    b8e4:	687b      	ldr	r3, [r7, #4]
    b8e6:	899c      	ldrh	r4, [r3, #12]
    b8e8:	687b      	ldr	r3, [r7, #4]
    b8ea:	685b      	ldr	r3, [r3, #4]
    b8ec:	4618      	mov	r0, r3
    b8ee:	f7ff fefd 	bl	b6ec <_ZN14CapteurCouleur12getTickValueEv>
    b8f2:	4603      	mov	r3, r0
    b8f4:	4423      	add	r3, r4
    b8f6:	b29b      	uxth	r3, r3
    b8f8:	687a      	ldr	r2, [r7, #4]
    b8fa:	8193      	strh	r3, [r2, #12]
            resultat /= 4;
    b8fc:	687b      	ldr	r3, [r7, #4]
    b8fe:	899b      	ldrh	r3, [r3, #12]
    b900:	ea4f 0393 	mov.w	r3, r3, lsr #2
    b904:	b29b      	uxth	r3, r3
    b906:	687a      	ldr	r2, [r7, #4]
    b908:	8193      	strh	r3, [r2, #12]
            state++;
    b90a:	687b      	ldr	r3, [r7, #4]
    b90c:	689b      	ldr	r3, [r3, #8]
    b90e:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b912:	687b      	ldr	r3, [r7, #4]
    b914:	609a      	str	r2, [r3, #8]
            break;
    }
}
    b916:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b91a:	46bd      	mov	sp, r7
    b91c:	bd90      	pop	{r4, r7, pc}
    b91e:	46c0      	nop			(mov r8, r8)

0000b920 <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur>:
{
    GPIO_WriteBit(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues, allumer ? Bit_SET : Bit_RESET);
}

// selectionne un filtre
void CapteurCouleur::selectionnerFiltre(FiltreCapteurCouleur filtre)
    b920:	b580      	push	{r7, lr}
    b922:	b082      	sub	sp, #8
    b924:	af00      	add	r7, sp, #0
    b926:	6078      	str	r0, [r7, #4]
    b928:	460b      	mov	r3, r1
    b92a:	70fb      	strb	r3, [r7, #3]
{
    switch (filtre)
    b92c:	78fb      	ldrb	r3, [r7, #3]
    b92e:	2b03      	cmp	r3, #3
    b930:	d85d      	bhi.n	b9ee <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>
    b932:	a201      	add	r2, pc, #4	(adr r2, b938 <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0x18>)
    b934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b938:	0000b949 	.word	0x0000b949
    b93c:	0000b9c7 	.word	0x0000b9c7
    b940:	0000b973 	.word	0x0000b973
    b944:	0000b99d 	.word	0x0000b99d
    {
        case FILTRE_ROUGE:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_RESET);
    b948:	687b      	ldr	r3, [r7, #4]
    b94a:	6a5a      	ldr	r2, [r3, #36]
    b94c:	687b      	ldr	r3, [r7, #4]
    b94e:	8d1b      	ldrh	r3, [r3, #40]
    b950:	4610      	mov	r0, r2
    b952:	4619      	mov	r1, r3
    b954:	f04f 0200 	mov.w	r2, #0	; 0x0
    b958:	f7f6 f818 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_RESET);
    b95c:	687b      	ldr	r3, [r7, #4]
    b95e:	6ada      	ldr	r2, [r3, #44]
    b960:	687b      	ldr	r3, [r7, #4]
    b962:	8e1b      	ldrh	r3, [r3, #48]
    b964:	4610      	mov	r0, r2
    b966:	4619      	mov	r1, r3
    b968:	f04f 0200 	mov.w	r2, #0	; 0x0
    b96c:	f7f6 f80e 	bl	198c <GPIO_WriteBit>
    b970:	e03d      	b.n	b9ee <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>

            break;
        case FILTRE_BLEU:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_SET);
    b972:	687b      	ldr	r3, [r7, #4]
    b974:	6a5a      	ldr	r2, [r3, #36]
    b976:	687b      	ldr	r3, [r7, #4]
    b978:	8d1b      	ldrh	r3, [r3, #40]
    b97a:	4610      	mov	r0, r2
    b97c:	4619      	mov	r1, r3
    b97e:	f04f 0201 	mov.w	r2, #1	; 0x1
    b982:	f7f6 f803 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_RESET);
    b986:	687b      	ldr	r3, [r7, #4]
    b988:	6ada      	ldr	r2, [r3, #44]
    b98a:	687b      	ldr	r3, [r7, #4]
    b98c:	8e1b      	ldrh	r3, [r3, #48]
    b98e:	4610      	mov	r0, r2
    b990:	4619      	mov	r1, r3
    b992:	f04f 0200 	mov.w	r2, #0	; 0x0
    b996:	f7f5 fff9 	bl	198c <GPIO_WriteBit>
    b99a:	e028      	b.n	b9ee <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>
            break;
        case FILTRE_BLANC:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_RESET);
    b99c:	687b      	ldr	r3, [r7, #4]
    b99e:	6a5a      	ldr	r2, [r3, #36]
    b9a0:	687b      	ldr	r3, [r7, #4]
    b9a2:	8d1b      	ldrh	r3, [r3, #40]
    b9a4:	4610      	mov	r0, r2
    b9a6:	4619      	mov	r1, r3
    b9a8:	f04f 0200 	mov.w	r2, #0	; 0x0
    b9ac:	f7f5 ffee 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_SET);
    b9b0:	687b      	ldr	r3, [r7, #4]
    b9b2:	6ada      	ldr	r2, [r3, #44]
    b9b4:	687b      	ldr	r3, [r7, #4]
    b9b6:	8e1b      	ldrh	r3, [r3, #48]
    b9b8:	4610      	mov	r0, r2
    b9ba:	4619      	mov	r1, r3
    b9bc:	f04f 0201 	mov.w	r2, #1	; 0x1
    b9c0:	f7f5 ffe4 	bl	198c <GPIO_WriteBit>
    b9c4:	e013      	b.n	b9ee <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>
            break;
        case FILTRE_VERT:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_SET);
    b9c6:	687b      	ldr	r3, [r7, #4]
    b9c8:	6a5a      	ldr	r2, [r3, #36]
    b9ca:	687b      	ldr	r3, [r7, #4]
    b9cc:	8d1b      	ldrh	r3, [r3, #40]
    b9ce:	4610      	mov	r0, r2
    b9d0:	4619      	mov	r1, r3
    b9d2:	f04f 0201 	mov.w	r2, #1	; 0x1
    b9d6:	f7f5 ffd9 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_SET);
    b9da:	687b      	ldr	r3, [r7, #4]
    b9dc:	6ada      	ldr	r2, [r3, #44]
    b9de:	687b      	ldr	r3, [r7, #4]
    b9e0:	8e1b      	ldrh	r3, [r3, #48]
    b9e2:	4610      	mov	r0, r2
    b9e4:	4619      	mov	r1, r3
    b9e6:	f04f 0201 	mov.w	r2, #1	; 0x1
    b9ea:	f7f5 ffcf 	bl	198c <GPIO_WriteBit>
            break;
    }
}
    b9ee:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b9f2:	46bd      	mov	sp, r7
    b9f4:	bd80      	pop	{r7, pc}
    b9f6:	46c0      	nop			(mov r8, r8)

0000b9f8 <_ZN14CapteurCouleur19allumerDiodesBleuesEb>:
void CapteurCouleur::allumerDiodesRouges(bool allumer)
{
    GPIO_WriteBit(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges, allumer ? Bit_SET : Bit_RESET);
}

void CapteurCouleur::allumerDiodesBleues(bool allumer)
    b9f8:	b580      	push	{r7, lr}
    b9fa:	b086      	sub	sp, #24
    b9fc:	af00      	add	r7, sp, #0
    b9fe:	6178      	str	r0, [r7, #20]
    ba00:	460b      	mov	r3, r1
    ba02:	74fb      	strb	r3, [r7, #19]
{
    GPIO_WriteBit(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues, allumer ? Bit_SET : Bit_RESET);
    ba04:	697b      	ldr	r3, [r7, #20]
    ba06:	68db      	ldr	r3, [r3, #12]
    ba08:	607b      	str	r3, [r7, #4]
    ba0a:	697b      	ldr	r3, [r7, #20]
    ba0c:	8a1b      	ldrh	r3, [r3, #16]
    ba0e:	60bb      	str	r3, [r7, #8]
    ba10:	7cfb      	ldrb	r3, [r7, #19]
    ba12:	2b00      	cmp	r3, #0
    ba14:	d003      	beq.n	ba1e <_ZN14CapteurCouleur19allumerDiodesBleuesEb+0x26>
    ba16:	f04f 0301 	mov.w	r3, #1	; 0x1
    ba1a:	60fb      	str	r3, [r7, #12]
    ba1c:	e002      	b.n	ba24 <_ZN14CapteurCouleur19allumerDiodesBleuesEb+0x2c>
    ba1e:	f04f 0300 	mov.w	r3, #0	; 0x0
    ba22:	60fb      	str	r3, [r7, #12]
    ba24:	6878      	ldr	r0, [r7, #4]
    ba26:	68b9      	ldr	r1, [r7, #8]
    ba28:	68fa      	ldr	r2, [r7, #12]
    ba2a:	f7f5 ffaf 	bl	198c <GPIO_WriteBit>
}
    ba2e:	f107 0718 	add.w	r7, r7, #24	; 0x18
    ba32:	46bd      	mov	sp, r7
    ba34:	bd80      	pop	{r7, pc}
    ba36:	46c0      	nop			(mov r8, r8)

0000ba38 <_ZN14CapteurCouleur19allumerDiodesRougesEb>:
    initialiserPinCapteur(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1);
    initialiserPinCapteur(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2);
}

// allume/éteint les diodes
void CapteurCouleur::allumerDiodesRouges(bool allumer)
    ba38:	b580      	push	{r7, lr}
    ba3a:	b086      	sub	sp, #24
    ba3c:	af00      	add	r7, sp, #0
    ba3e:	6178      	str	r0, [r7, #20]
    ba40:	460b      	mov	r3, r1
    ba42:	74fb      	strb	r3, [r7, #19]
{
    GPIO_WriteBit(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges, allumer ? Bit_SET : Bit_RESET);
    ba44:	697b      	ldr	r3, [r7, #20]
    ba46:	685b      	ldr	r3, [r3, #4]
    ba48:	607b      	str	r3, [r7, #4]
    ba4a:	697b      	ldr	r3, [r7, #20]
    ba4c:	891b      	ldrh	r3, [r3, #8]
    ba4e:	60bb      	str	r3, [r7, #8]
    ba50:	7cfb      	ldrb	r3, [r7, #19]
    ba52:	2b00      	cmp	r3, #0
    ba54:	d003      	beq.n	ba5e <_ZN14CapteurCouleur19allumerDiodesRougesEb+0x26>
    ba56:	f04f 0301 	mov.w	r3, #1	; 0x1
    ba5a:	60fb      	str	r3, [r7, #12]
    ba5c:	e002      	b.n	ba64 <_ZN14CapteurCouleur19allumerDiodesRougesEb+0x2c>
    ba5e:	f04f 0300 	mov.w	r3, #0	; 0x0
    ba62:	60fb      	str	r3, [r7, #12]
    ba64:	6878      	ldr	r0, [r7, #4]
    ba66:	68b9      	ldr	r1, [r7, #8]
    ba68:	68fa      	ldr	r2, [r7, #12]
    ba6a:	f7f5 ff8f 	bl	198c <GPIO_WriteBit>
}
    ba6e:	f107 0718 	add.w	r7, r7, #24	; 0x18
    ba72:	46bd      	mov	sp, r7
    ba74:	bd80      	pop	{r7, pc}
    ba76:	46c0      	nop			(mov r8, r8)

0000ba78 <_ZN19CommandCheckCouleur6updateEv>:
    capteur->activerCapteur(pos);
    nbUpdatesRestantes = nbUpdatePourAllumerLed;
}

// check la couleur
void CommandCheckCouleur::update()
    ba78:	b580      	push	{r7, lr}
    ba7a:	b082      	sub	sp, #8
    ba7c:	af00      	add	r7, sp, #0
    ba7e:	6078      	str	r0, [r7, #4]
{
    switch (state)
    ba80:	687b      	ldr	r3, [r7, #4]
    ba82:	695b      	ldr	r3, [r3, #20]
    ba84:	2b03      	cmp	r3, #3
    ba86:	d875      	bhi.n	bb74 <_ZN19CommandCheckCouleur6updateEv+0xfc>
    ba88:	a201      	add	r2, pc, #4	(adr r2, ba90 <_ZN19CommandCheckCouleur6updateEv+0x18>)
    ba8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ba8e:	46c0      	nop			(mov r8, r8)
    ba90:	0000baa1 	.word	0x0000baa1
    ba94:	0000bacf 	.word	0x0000bacf
    ba98:	0000bb0f 	.word	0x0000bb0f
    ba9c:	0000bb3d 	.word	0x0000bb3d
    {
        // attente d'allumage de la diode bleu
        case 0:
            if (nbUpdatesRestantes >=0)
    baa0:	687b      	ldr	r3, [r7, #4]
    baa2:	691b      	ldr	r3, [r3, #16]
    baa4:	2b00      	cmp	r3, #0
    baa6:	db06      	blt.n	bab6 <_ZN19CommandCheckCouleur6updateEv+0x3e>
                nbUpdatesRestantes--;
    baa8:	687b      	ldr	r3, [r7, #4]
    baaa:	691b      	ldr	r3, [r3, #16]
    baac:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    bab0:	687b      	ldr	r3, [r7, #4]
    bab2:	611a      	str	r2, [r3, #16]
    bab4:	e05e      	b.n	bb74 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            else
            {
                state++;
    bab6:	687b      	ldr	r3, [r7, #4]
    bab8:	695b      	ldr	r3, [r3, #20]
    baba:	f103 0201 	add.w	r2, r3, #1	; 0x1
    babe:	687b      	ldr	r3, [r7, #4]
    bac0:	615a      	str	r2, [r3, #20]
                capteurCouleur->getTickValue();
    bac2:	687b      	ldr	r3, [r7, #4]
    bac4:	689b      	ldr	r3, [r3, #8]
    bac6:	4618      	mov	r0, r3
    bac8:	f7ff fe10 	bl	b6ec <_ZN14CapteurCouleur12getTickValueEv>
    bacc:	e052      	b.n	bb74 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            }
            break;

        // récupération de la valeur bleu
        case 1:
            bleuMesure = capteurCouleur->getTickValue();
    bace:	687b      	ldr	r3, [r7, #4]
    bad0:	689b      	ldr	r3, [r3, #8]
    bad2:	4618      	mov	r0, r3
    bad4:	f7ff fe0a 	bl	b6ec <_ZN14CapteurCouleur12getTickValueEv>
    bad8:	4603      	mov	r3, r0
    bada:	687a      	ldr	r2, [r7, #4]
    badc:	8193      	strh	r3, [r2, #12]
            capteurCouleur->allumerDiodesBleues(false);
    bade:	687b      	ldr	r3, [r7, #4]
    bae0:	689b      	ldr	r3, [r3, #8]
    bae2:	4618      	mov	r0, r3
    bae4:	f04f 0100 	mov.w	r1, #0	; 0x0
    bae8:	f7ff ff86 	bl	b9f8 <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
            capteurCouleur->allumerDiodesRouges(true);
    baec:	687b      	ldr	r3, [r7, #4]
    baee:	689b      	ldr	r3, [r3, #8]
    baf0:	4618      	mov	r0, r3
    baf2:	f04f 0101 	mov.w	r1, #1	; 0x1
    baf6:	f7ff ff9f 	bl	ba38 <_ZN14CapteurCouleur19allumerDiodesRougesEb>
            nbUpdatesRestantes = nbUpdatePourAllumerLed;
    bafa:	687a      	ldr	r2, [r7, #4]
    bafc:	f04f 030a 	mov.w	r3, #10	; 0xa
    bb00:	6113      	str	r3, [r2, #16]
            state++;
    bb02:	687b      	ldr	r3, [r7, #4]
    bb04:	695b      	ldr	r3, [r3, #20]
    bb06:	f103 0201 	add.w	r2, r3, #1	; 0x1
    bb0a:	687b      	ldr	r3, [r7, #4]
    bb0c:	615a      	str	r2, [r3, #20]

        // attente d'allumage de la diode rouge
        case 2:
            if (nbUpdatesRestantes >=0)
    bb0e:	687b      	ldr	r3, [r7, #4]
    bb10:	691b      	ldr	r3, [r3, #16]
    bb12:	2b00      	cmp	r3, #0
    bb14:	db06      	blt.n	bb24 <_ZN19CommandCheckCouleur6updateEv+0xac>
                nbUpdatesRestantes--;
    bb16:	687b      	ldr	r3, [r7, #4]
    bb18:	691b      	ldr	r3, [r3, #16]
    bb1a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    bb1e:	687b      	ldr	r3, [r7, #4]
    bb20:	611a      	str	r2, [r3, #16]
    bb22:	e027      	b.n	bb74 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            else
            {
                state++;
    bb24:	687b      	ldr	r3, [r7, #4]
    bb26:	695b      	ldr	r3, [r3, #20]
    bb28:	f103 0201 	add.w	r2, r3, #1	; 0x1
    bb2c:	687b      	ldr	r3, [r7, #4]
    bb2e:	615a      	str	r2, [r3, #20]
                capteurCouleur->getTickValue();
    bb30:	687b      	ldr	r3, [r7, #4]
    bb32:	689b      	ldr	r3, [r3, #8]
    bb34:	4618      	mov	r0, r3
    bb36:	f7ff fdd9 	bl	b6ec <_ZN14CapteurCouleur12getTickValueEv>
    bb3a:	e01b      	b.n	bb74 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            }
            break;
        // récupération de la valeur bleu
        case 3:
            rougeMesure = capteurCouleur->getTickValue();
    bb3c:	687b      	ldr	r3, [r7, #4]
    bb3e:	689b      	ldr	r3, [r3, #8]
    bb40:	4618      	mov	r0, r3
    bb42:	f7ff fdd3 	bl	b6ec <_ZN14CapteurCouleur12getTickValueEv>
    bb46:	4603      	mov	r3, r0
    bb48:	687a      	ldr	r2, [r7, #4]
    bb4a:	81d3      	strh	r3, [r2, #14]
            capteurCouleur->allumerDiodesBleues(false);
    bb4c:	687b      	ldr	r3, [r7, #4]
    bb4e:	689b      	ldr	r3, [r3, #8]
    bb50:	4618      	mov	r0, r3
    bb52:	f04f 0100 	mov.w	r1, #0	; 0x0
    bb56:	f7ff ff4f 	bl	b9f8 <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
            capteurCouleur->allumerDiodesRouges(false);
    bb5a:	687b      	ldr	r3, [r7, #4]
    bb5c:	689b      	ldr	r3, [r3, #8]
    bb5e:	4618      	mov	r0, r3
    bb60:	f04f 0100 	mov.w	r1, #0	; 0x0
    bb64:	f7ff ff68 	bl	ba38 <_ZN14CapteurCouleur19allumerDiodesRougesEb>
            state++;
    bb68:	687b      	ldr	r3, [r7, #4]
    bb6a:	695b      	ldr	r3, [r3, #20]
    bb6c:	f103 0201 	add.w	r2, r3, #1	; 0x1
    bb70:	687b      	ldr	r3, [r7, #4]
    bb72:	615a      	str	r2, [r3, #20]
    }
}
    bb74:	f107 0708 	add.w	r7, r7, #8	; 0x8
    bb78:	46bd      	mov	sp, r7
    bb7a:	bd80      	pop	{r7, pc}

0000bb7c <_ZN19CommandCheckCouleurC1EP14CapteurCouleur22PositionCapteurCouleurt>:
    //////////////////////////////
    //    CommandCheckCouleur   //
    //////////////////////////////

// check la couleur d'un capteur
CommandCheckCouleur::CommandCheckCouleur(CapteurCouleur* capteur, PositionCapteurCouleur pos, uint16_t seuil)
    bb7c:	b580      	push	{r7, lr}
    bb7e:	b084      	sub	sp, #16
    bb80:	af00      	add	r7, sp, #0
    bb82:	60f8      	str	r0, [r7, #12]
    bb84:	60b9      	str	r1, [r7, #8]
    bb86:	4619      	mov	r1, r3
    bb88:	4613      	mov	r3, r2
    bb8a:	71fb      	strb	r3, [r7, #7]
    bb8c:	460b      	mov	r3, r1
    bb8e:	80bb      	strh	r3, [r7, #4]
    : seuilMoyenne(seuil), capteurCouleur(capteur), bleuMesure(0), rougeMesure(0)
    , nbUpdatesRestantes(nbUpdatePourAllumerLed), state(0)
    bb90:	68fb      	ldr	r3, [r7, #12]
    bb92:	4618      	mov	r0, r3
    bb94:	f7fc fa20 	bl	7fd8 <_ZN7CommandC2Ev>
    bb98:	68fa      	ldr	r2, [r7, #12]
    bb9a:	4b18      	ldr	r3, [pc, #96]	(bbfc <_ZN19CommandCheckCouleurC1EP14CapteurCouleur22PositionCapteurCouleurt+0x80>)
    bb9c:	6013      	str	r3, [r2, #0]
    bb9e:	68fa      	ldr	r2, [r7, #12]
    bba0:	88bb      	ldrh	r3, [r7, #4]
    bba2:	8093      	strh	r3, [r2, #4]
    bba4:	68fa      	ldr	r2, [r7, #12]
    bba6:	68bb      	ldr	r3, [r7, #8]
    bba8:	6093      	str	r3, [r2, #8]
    bbaa:	68fa      	ldr	r2, [r7, #12]
    bbac:	f04f 0300 	mov.w	r3, #0	; 0x0
    bbb0:	8193      	strh	r3, [r2, #12]
    bbb2:	68fa      	ldr	r2, [r7, #12]
    bbb4:	f04f 0300 	mov.w	r3, #0	; 0x0
    bbb8:	81d3      	strh	r3, [r2, #14]
    bbba:	68fa      	ldr	r2, [r7, #12]
    bbbc:	f04f 030a 	mov.w	r3, #10	; 0xa
    bbc0:	6113      	str	r3, [r2, #16]
    bbc2:	68fa      	ldr	r2, [r7, #12]
    bbc4:	f04f 0300 	mov.w	r3, #0	; 0x0
    bbc8:	6153      	str	r3, [r2, #20]
{
    capteur->allumerDiodesBleues(true);
    bbca:	68b8      	ldr	r0, [r7, #8]
    bbcc:	f04f 0101 	mov.w	r1, #1	; 0x1
    bbd0:	f7ff ff12 	bl	b9f8 <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
    capteur->allumerDiodesRouges(false);
    bbd4:	68b8      	ldr	r0, [r7, #8]
    bbd6:	f04f 0100 	mov.w	r1, #0	; 0x0
    bbda:	f7ff ff2d 	bl	ba38 <_ZN14CapteurCouleur19allumerDiodesRougesEb>
    capteur->activerCapteur(pos);
    bbde:	79fb      	ldrb	r3, [r7, #7]
    bbe0:	68b8      	ldr	r0, [r7, #8]
    bbe2:	4619      	mov	r1, r3
    bbe4:	f7ff fd9a 	bl	b71c <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
    nbUpdatesRestantes = nbUpdatePourAllumerLed;
    bbe8:	68fa      	ldr	r2, [r7, #12]
    bbea:	f04f 030a 	mov.w	r3, #10	; 0xa
    bbee:	6113      	str	r3, [r2, #16]
}
    bbf0:	68fb      	ldr	r3, [r7, #12]
    bbf2:	4618      	mov	r0, r3
    bbf4:	f107 0710 	add.w	r7, r7, #16	; 0x10
    bbf8:	46bd      	mov	sp, r7
    bbfa:	bd80      	pop	{r7, pc}
    bbfc:	00023ff8 	.word	0x00023ff8

0000bc00 <_ZN19CommandCheckCouleurC2EP14CapteurCouleur22PositionCapteurCouleurt>:
    //////////////////////////////
    //    CommandCheckCouleur   //
    //////////////////////////////

// check la couleur d'un capteur
CommandCheckCouleur::CommandCheckCouleur(CapteurCouleur* capteur, PositionCapteurCouleur pos, uint16_t seuil)
    bc00:	b580      	push	{r7, lr}
    bc02:	b084      	sub	sp, #16
    bc04:	af00      	add	r7, sp, #0
    bc06:	60f8      	str	r0, [r7, #12]
    bc08:	60b9      	str	r1, [r7, #8]
    bc0a:	4619      	mov	r1, r3
    bc0c:	4613      	mov	r3, r2
    bc0e:	71fb      	strb	r3, [r7, #7]
    bc10:	460b      	mov	r3, r1
    bc12:	80bb      	strh	r3, [r7, #4]
    : seuilMoyenne(seuil), capteurCouleur(capteur), bleuMesure(0), rougeMesure(0)
    , nbUpdatesRestantes(nbUpdatePourAllumerLed), state(0)
    bc14:	68fb      	ldr	r3, [r7, #12]
    bc16:	4618      	mov	r0, r3
    bc18:	f7fc f9de 	bl	7fd8 <_ZN7CommandC2Ev>
    bc1c:	68fa      	ldr	r2, [r7, #12]
    bc1e:	4b18      	ldr	r3, [pc, #96]	(bc80 <_ZN19CommandCheckCouleurC2EP14CapteurCouleur22PositionCapteurCouleurt+0x80>)
    bc20:	6013      	str	r3, [r2, #0]
    bc22:	68fa      	ldr	r2, [r7, #12]
    bc24:	88bb      	ldrh	r3, [r7, #4]
    bc26:	8093      	strh	r3, [r2, #4]
    bc28:	68fa      	ldr	r2, [r7, #12]
    bc2a:	68bb      	ldr	r3, [r7, #8]
    bc2c:	6093      	str	r3, [r2, #8]
    bc2e:	68fa      	ldr	r2, [r7, #12]
    bc30:	f04f 0300 	mov.w	r3, #0	; 0x0
    bc34:	8193      	strh	r3, [r2, #12]
    bc36:	68fa      	ldr	r2, [r7, #12]
    bc38:	f04f 0300 	mov.w	r3, #0	; 0x0
    bc3c:	81d3      	strh	r3, [r2, #14]
    bc3e:	68fa      	ldr	r2, [r7, #12]
    bc40:	f04f 030a 	mov.w	r3, #10	; 0xa
    bc44:	6113      	str	r3, [r2, #16]
    bc46:	68fa      	ldr	r2, [r7, #12]
    bc48:	f04f 0300 	mov.w	r3, #0	; 0x0
    bc4c:	6153      	str	r3, [r2, #20]
{
    capteur->allumerDiodesBleues(true);
    bc4e:	68b8      	ldr	r0, [r7, #8]
    bc50:	f04f 0101 	mov.w	r1, #1	; 0x1
    bc54:	f7ff fed0 	bl	b9f8 <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
    capteur->allumerDiodesRouges(false);
    bc58:	68b8      	ldr	r0, [r7, #8]
    bc5a:	f04f 0100 	mov.w	r1, #0	; 0x0
    bc5e:	f7ff feeb 	bl	ba38 <_ZN14CapteurCouleur19allumerDiodesRougesEb>
    capteur->activerCapteur(pos);
    bc62:	79fb      	ldrb	r3, [r7, #7]
    bc64:	68b8      	ldr	r0, [r7, #8]
    bc66:	4619      	mov	r1, r3
    bc68:	f7ff fd58 	bl	b71c <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
    nbUpdatesRestantes = nbUpdatePourAllumerLed;
    bc6c:	68fa      	ldr	r2, [r7, #12]
    bc6e:	f04f 030a 	mov.w	r3, #10	; 0xa
    bc72:	6113      	str	r3, [r2, #16]
}
    bc74:	68fb      	ldr	r3, [r7, #12]
    bc76:	4618      	mov	r0, r3
    bc78:	f107 0710 	add.w	r7, r7, #16	; 0x10
    bc7c:	46bd      	mov	sp, r7
    bc7e:	bd80      	pop	{r7, pc}
    bc80:	00023ff8 	.word	0x00023ff8

0000bc84 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>:

#include "capteurCouleur.h"
#include "timerHandler.h"

// permet d'initialiser une pin
void initialiserPinCapteur(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x)
    bc84:	b580      	push	{r7, lr}
    bc86:	b084      	sub	sp, #16
    bc88:	af00      	add	r7, sp, #0
    bc8a:	6078      	str	r0, [r7, #4]
    bc8c:	460b      	mov	r3, r1
    bc8e:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStructure;
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    bc90:	f04f 0310 	mov.w	r3, #16	; 0x10
    bc94:	73fb      	strb	r3, [r7, #15]
    #endif
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    bc96:	f04f 0303 	mov.w	r3, #3	; 0x3
    bc9a:	73bb      	strb	r3, [r7, #14]
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_x;
    bc9c:	887b      	ldrh	r3, [r7, #2]
    bc9e:	81bb      	strh	r3, [r7, #12]
    GPIO_Init(GPIOx, &GPIO_InitStructure);
    bca0:	f107 030c 	add.w	r3, r7, #12	; 0xc
    bca4:	6878      	ldr	r0, [r7, #4]
    bca6:	4619      	mov	r1, r3
    bca8:	f7f5 fd02 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOx, GPIO_Pin_x, Bit_RESET);
    bcac:	887b      	ldrh	r3, [r7, #2]
    bcae:	6878      	ldr	r0, [r7, #4]
    bcb0:	4619      	mov	r1, r3
    bcb2:	f04f 0200 	mov.w	r2, #0	; 0x0
    bcb6:	f7f5 fe69 	bl	198c <GPIO_WriteBit>
}
    bcba:	f107 0710 	add.w	r7, r7, #16	; 0x10
    bcbe:	46bd      	mov	sp, r7
    bcc0:	bd80      	pop	{r7, pc}
    bcc2:	46c0      	nop			(mov r8, r8)

0000bcc4 <_ZN14CapteurCouleurC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tS3_t>:
                               GPIO_TypeDef* GPIO_diodesRouges, uint16_t GPIO_Pin_diodesRouges,
                               GPIO_TypeDef* GPIO_diodesBleues, uint16_t GPIO_Pin_diodesBleues,
                               GPIO_TypeDef* GPIO_selectCapteur1, uint16_t GPIO_Pin_selectCapteur1,
                               GPIO_TypeDef* GPIO_selectCapteur2, uint16_t GPIO_Pin_selectCapteur2,
                               GPIO_TypeDef* GPIO_selectFiltre1, uint16_t GPIO_Pin_selectFiltre1,
                               GPIO_TypeDef* GPIO_selectFiltre2, uint16_t GPIO_Pin_selectFiltre2)
    bcc4:	b580      	push	{r7, lr}
    bcc6:	b088      	sub	sp, #32
    bcc8:	af00      	add	r7, sp, #0
    bcca:	60f8      	str	r0, [r7, #12]
    bccc:	60b9      	str	r1, [r7, #8]
    bcce:	607a      	str	r2, [r7, #4]
    bcd0:	807b      	strh	r3, [r7, #2]
    , m_GPIO_diodesRouges(GPIO_diodesRouges), m_GPIO_Pin_diodesRouges(GPIO_Pin_diodesRouges)
    , m_GPIO_diodesBleues(GPIO_diodesBleues), m_GPIO_Pin_diodesBleues(GPIO_Pin_diodesBleues)
    , m_GPIO_selectCapteur1(GPIO_selectCapteur1), m_GPIO_Pin_selectCapteur1(GPIO_Pin_selectCapteur1)
    , m_GPIO_selectCapteur2(GPIO_selectCapteur2), m_GPIO_Pin_selectCapteur2(GPIO_Pin_selectCapteur2)
    , m_GPIO_selectFiltre1(GPIO_selectFiltre1), m_GPIO_Pin_selectFiltre1(GPIO_Pin_selectFiltre1)
    , m_GPIO_selectFiltre2(GPIO_selectFiltre2), m_GPIO_Pin_selectFiltre2(GPIO_Pin_selectFiltre2)
    bcd2:	68fa      	ldr	r2, [r7, #12]
    bcd4:	68bb      	ldr	r3, [r7, #8]
    bcd6:	6013      	str	r3, [r2, #0]
    bcd8:	68fa      	ldr	r2, [r7, #12]
    bcda:	6abb      	ldr	r3, [r7, #40]
    bcdc:	6053      	str	r3, [r2, #4]
    bcde:	68fa      	ldr	r2, [r7, #12]
    bce0:	8dbb      	ldrh	r3, [r7, #44]
    bce2:	8113      	strh	r3, [r2, #8]
    bce4:	68fa      	ldr	r2, [r7, #12]
    bce6:	6b3b      	ldr	r3, [r7, #48]
    bce8:	60d3      	str	r3, [r2, #12]
    bcea:	68fa      	ldr	r2, [r7, #12]
    bcec:	8ebb      	ldrh	r3, [r7, #52]
    bcee:	8213      	strh	r3, [r2, #16]
    bcf0:	68fa      	ldr	r2, [r7, #12]
    bcf2:	6bbb      	ldr	r3, [r7, #56]
    bcf4:	6153      	str	r3, [r2, #20]
    bcf6:	68fa      	ldr	r2, [r7, #12]
    bcf8:	8fbb      	ldrh	r3, [r7, #60]
    bcfa:	8313      	strh	r3, [r2, #24]
    bcfc:	68fa      	ldr	r2, [r7, #12]
    bcfe:	6c3b      	ldr	r3, [r7, #64]
    bd00:	61d3      	str	r3, [r2, #28]
    bd02:	68fa      	ldr	r2, [r7, #12]
    bd04:	f8b7 3044 	ldrh.w	r3, [r7, #68]
    bd08:	8413      	strh	r3, [r2, #32]
    bd0a:	68fa      	ldr	r2, [r7, #12]
    bd0c:	6cbb      	ldr	r3, [r7, #72]
    bd0e:	6253      	str	r3, [r2, #36]
    bd10:	68fa      	ldr	r2, [r7, #12]
    bd12:	f8b7 304c 	ldrh.w	r3, [r7, #76]
    bd16:	8513      	strh	r3, [r2, #40]
    bd18:	68fa      	ldr	r2, [r7, #12]
    bd1a:	6d3b      	ldr	r3, [r7, #80]
    bd1c:	62d3      	str	r3, [r2, #44]
    bd1e:	68fa      	ldr	r2, [r7, #12]
    bd20:	f8b7 3054 	ldrh.w	r3, [r7, #84]
    bd24:	8613      	strh	r3, [r2, #48]
    GPIO_InitTypeDef GPIO_InitStructure;
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    bd26:	f04f 0348 	mov.w	r3, #72	; 0x48
    bd2a:	77fb      	strb	r3, [r7, #31]
    #endif
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    bd2c:	f04f 0303 	mov.w	r3, #3	; 0x3
    bd30:	77bb      	strb	r3, [r7, #30]
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_timer;
    bd32:	887b      	ldrh	r3, [r7, #2]
    bd34:	83bb      	strh	r3, [r7, #28]
    GPIO_Init(GPIO_timer, &GPIO_InitStructure);
    bd36:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    bd3a:	6878      	ldr	r0, [r7, #4]
    bd3c:	4619      	mov	r1, r3
    bd3e:	f7f5 fcb7 	bl	16b0 <GPIO_Init>

    // Active l'horloge du timer
    Timer::enableTimerClock(TIMx);
    bd42:	68b8      	ldr	r0, [r7, #8]
    bd44:	f001 fccc 	bl	d6e0 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>

    // initialisation du timer
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    bd48:	f04f 0300 	mov.w	r3, #0	; 0x0
    bd4c:	827b      	strh	r3, [r7, #18]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    bd4e:	f04f 0300 	mov.w	r3, #0	; 0x0
    bd52:	82bb      	strh	r3, [r7, #20]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    bd54:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bd58:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    bd5a:	f04f 0300 	mov.w	r3, #0	; 0x0
    bd5e:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    bd60:	f04f 0300 	mov.w	r3, #0	; 0x0
    bd64:	76bb      	strb	r3, [r7, #26]
    TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
    bd66:	f107 0312 	add.w	r3, r7, #18	; 0x12
    bd6a:	68b8      	ldr	r0, [r7, #8]
    bd6c:	4619      	mov	r1, r3
    bd6e:	f7f6 fd63 	bl	2838 <TIM_TimeBaseInit>

    // utilise une horloge externe
    // le counter est incrementé à chaque monté du signal sur le channel 1
    TIM_TIxExternalClockConfig(TIMx, TIM_TIxExternalCLK1Source_TI1ED, TIM_ICPolarity_Rising, 0);
    bd72:	68b8      	ldr	r0, [r7, #8]
    bd74:	f04f 0140 	mov.w	r1, #64	; 0x40
    bd78:	f04f 0200 	mov.w	r2, #0	; 0x0
    bd7c:	f04f 0300 	mov.w	r3, #0	; 0x0
    bd80:	f7f7 fa44 	bl	320c <TIM_TIxExternalClockConfig>

    // met le timer à disposition
    TIM_Cmd(TIMx, ENABLE);
    bd84:	68b8      	ldr	r0, [r7, #8]
    bd86:	f04f 0101 	mov.w	r1, #1	; 0x1
    bd8a:	f7f7 f94d 	bl	3028 <TIM_Cmd>

    // met le counter à 0
    TIM_SetCounter(TIMx, 0);
    bd8e:	68b8      	ldr	r0, [r7, #8]
    bd90:	f04f 0100 	mov.w	r1, #0	; 0x0
    bd94:	f7f8 f8ba 	bl	3f0c <TIM_SetCounter>

    // initialisation des autres pins
    initialiserPinCapteur(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges);
    bd98:	68fb      	ldr	r3, [r7, #12]
    bd9a:	685a      	ldr	r2, [r3, #4]
    bd9c:	68fb      	ldr	r3, [r7, #12]
    bd9e:	891b      	ldrh	r3, [r3, #8]
    bda0:	4610      	mov	r0, r2
    bda2:	4619      	mov	r1, r3
    bda4:	f7ff ff6e 	bl	bc84 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues);
    bda8:	68fb      	ldr	r3, [r7, #12]
    bdaa:	68da      	ldr	r2, [r3, #12]
    bdac:	68fb      	ldr	r3, [r7, #12]
    bdae:	8a1b      	ldrh	r3, [r3, #16]
    bdb0:	4610      	mov	r0, r2
    bdb2:	4619      	mov	r1, r3
    bdb4:	f7ff ff66 	bl	bc84 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1);
    bdb8:	68fb      	ldr	r3, [r7, #12]
    bdba:	695a      	ldr	r2, [r3, #20]
    bdbc:	68fb      	ldr	r3, [r7, #12]
    bdbe:	8b1b      	ldrh	r3, [r3, #24]
    bdc0:	4610      	mov	r0, r2
    bdc2:	4619      	mov	r1, r3
    bdc4:	f7ff ff5e 	bl	bc84 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2);
    bdc8:	68fb      	ldr	r3, [r7, #12]
    bdca:	69da      	ldr	r2, [r3, #28]
    bdcc:	68fb      	ldr	r3, [r7, #12]
    bdce:	8c1b      	ldrh	r3, [r3, #32]
    bdd0:	4610      	mov	r0, r2
    bdd2:	4619      	mov	r1, r3
    bdd4:	f7ff ff56 	bl	bc84 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1);
    bdd8:	68fb      	ldr	r3, [r7, #12]
    bdda:	6a5a      	ldr	r2, [r3, #36]
    bddc:	68fb      	ldr	r3, [r7, #12]
    bdde:	8d1b      	ldrh	r3, [r3, #40]
    bde0:	4610      	mov	r0, r2
    bde2:	4619      	mov	r1, r3
    bde4:	f7ff ff4e 	bl	bc84 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2);
    bde8:	68fb      	ldr	r3, [r7, #12]
    bdea:	6ada      	ldr	r2, [r3, #44]
    bdec:	68fb      	ldr	r3, [r7, #12]
    bdee:	8e1b      	ldrh	r3, [r3, #48]
    bdf0:	4610      	mov	r0, r2
    bdf2:	4619      	mov	r1, r3
    bdf4:	f7ff ff46 	bl	bc84 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
}
    bdf8:	68fb      	ldr	r3, [r7, #12]
    bdfa:	4618      	mov	r0, r3
    bdfc:	f107 0720 	add.w	r7, r7, #32	; 0x20
    be00:	46bd      	mov	sp, r7
    be02:	bd80      	pop	{r7, pc}

0000be04 <_ZN14CapteurCouleurC2EP11TIM_TypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tS3_t>:
                               GPIO_TypeDef* GPIO_diodesRouges, uint16_t GPIO_Pin_diodesRouges,
                               GPIO_TypeDef* GPIO_diodesBleues, uint16_t GPIO_Pin_diodesBleues,
                               GPIO_TypeDef* GPIO_selectCapteur1, uint16_t GPIO_Pin_selectCapteur1,
                               GPIO_TypeDef* GPIO_selectCapteur2, uint16_t GPIO_Pin_selectCapteur2,
                               GPIO_TypeDef* GPIO_selectFiltre1, uint16_t GPIO_Pin_selectFiltre1,
                               GPIO_TypeDef* GPIO_selectFiltre2, uint16_t GPIO_Pin_selectFiltre2)
    be04:	b580      	push	{r7, lr}
    be06:	b088      	sub	sp, #32
    be08:	af00      	add	r7, sp, #0
    be0a:	60f8      	str	r0, [r7, #12]
    be0c:	60b9      	str	r1, [r7, #8]
    be0e:	607a      	str	r2, [r7, #4]
    be10:	807b      	strh	r3, [r7, #2]
    , m_GPIO_diodesRouges(GPIO_diodesRouges), m_GPIO_Pin_diodesRouges(GPIO_Pin_diodesRouges)
    , m_GPIO_diodesBleues(GPIO_diodesBleues), m_GPIO_Pin_diodesBleues(GPIO_Pin_diodesBleues)
    , m_GPIO_selectCapteur1(GPIO_selectCapteur1), m_GPIO_Pin_selectCapteur1(GPIO_Pin_selectCapteur1)
    , m_GPIO_selectCapteur2(GPIO_selectCapteur2), m_GPIO_Pin_selectCapteur2(GPIO_Pin_selectCapteur2)
    , m_GPIO_selectFiltre1(GPIO_selectFiltre1), m_GPIO_Pin_selectFiltre1(GPIO_Pin_selectFiltre1)
    , m_GPIO_selectFiltre2(GPIO_selectFiltre2), m_GPIO_Pin_selectFiltre2(GPIO_Pin_selectFiltre2)
    be12:	68fa      	ldr	r2, [r7, #12]
    be14:	68bb      	ldr	r3, [r7, #8]
    be16:	6013      	str	r3, [r2, #0]
    be18:	68fa      	ldr	r2, [r7, #12]
    be1a:	6abb      	ldr	r3, [r7, #40]
    be1c:	6053      	str	r3, [r2, #4]
    be1e:	68fa      	ldr	r2, [r7, #12]
    be20:	8dbb      	ldrh	r3, [r7, #44]
    be22:	8113      	strh	r3, [r2, #8]
    be24:	68fa      	ldr	r2, [r7, #12]
    be26:	6b3b      	ldr	r3, [r7, #48]
    be28:	60d3      	str	r3, [r2, #12]
    be2a:	68fa      	ldr	r2, [r7, #12]
    be2c:	8ebb      	ldrh	r3, [r7, #52]
    be2e:	8213      	strh	r3, [r2, #16]
    be30:	68fa      	ldr	r2, [r7, #12]
    be32:	6bbb      	ldr	r3, [r7, #56]
    be34:	6153      	str	r3, [r2, #20]
    be36:	68fa      	ldr	r2, [r7, #12]
    be38:	8fbb      	ldrh	r3, [r7, #60]
    be3a:	8313      	strh	r3, [r2, #24]
    be3c:	68fa      	ldr	r2, [r7, #12]
    be3e:	6c3b      	ldr	r3, [r7, #64]
    be40:	61d3      	str	r3, [r2, #28]
    be42:	68fa      	ldr	r2, [r7, #12]
    be44:	f8b7 3044 	ldrh.w	r3, [r7, #68]
    be48:	8413      	strh	r3, [r2, #32]
    be4a:	68fa      	ldr	r2, [r7, #12]
    be4c:	6cbb      	ldr	r3, [r7, #72]
    be4e:	6253      	str	r3, [r2, #36]
    be50:	68fa      	ldr	r2, [r7, #12]
    be52:	f8b7 304c 	ldrh.w	r3, [r7, #76]
    be56:	8513      	strh	r3, [r2, #40]
    be58:	68fa      	ldr	r2, [r7, #12]
    be5a:	6d3b      	ldr	r3, [r7, #80]
    be5c:	62d3      	str	r3, [r2, #44]
    be5e:	68fa      	ldr	r2, [r7, #12]
    be60:	f8b7 3054 	ldrh.w	r3, [r7, #84]
    be64:	8613      	strh	r3, [r2, #48]
    GPIO_InitTypeDef GPIO_InitStructure;
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    be66:	f04f 0348 	mov.w	r3, #72	; 0x48
    be6a:	77fb      	strb	r3, [r7, #31]
    #endif
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    be6c:	f04f 0303 	mov.w	r3, #3	; 0x3
    be70:	77bb      	strb	r3, [r7, #30]
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_timer;
    be72:	887b      	ldrh	r3, [r7, #2]
    be74:	83bb      	strh	r3, [r7, #28]
    GPIO_Init(GPIO_timer, &GPIO_InitStructure);
    be76:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    be7a:	6878      	ldr	r0, [r7, #4]
    be7c:	4619      	mov	r1, r3
    be7e:	f7f5 fc17 	bl	16b0 <GPIO_Init>

    // Active l'horloge du timer
    Timer::enableTimerClock(TIMx);
    be82:	68b8      	ldr	r0, [r7, #8]
    be84:	f001 fc2c 	bl	d6e0 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>

    // initialisation du timer
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    be88:	f04f 0300 	mov.w	r3, #0	; 0x0
    be8c:	827b      	strh	r3, [r7, #18]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    be8e:	f04f 0300 	mov.w	r3, #0	; 0x0
    be92:	82bb      	strh	r3, [r7, #20]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    be94:	f64f 73ff 	movw	r3, #65535	; 0xffff
    be98:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    be9a:	f04f 0300 	mov.w	r3, #0	; 0x0
    be9e:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    bea0:	f04f 0300 	mov.w	r3, #0	; 0x0
    bea4:	76bb      	strb	r3, [r7, #26]
    TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
    bea6:	f107 0312 	add.w	r3, r7, #18	; 0x12
    beaa:	68b8      	ldr	r0, [r7, #8]
    beac:	4619      	mov	r1, r3
    beae:	f7f6 fcc3 	bl	2838 <TIM_TimeBaseInit>

    // utilise une horloge externe
    // le counter est incrementé à chaque monté du signal sur le channel 1
    TIM_TIxExternalClockConfig(TIMx, TIM_TIxExternalCLK1Source_TI1ED, TIM_ICPolarity_Rising, 0);
    beb2:	68b8      	ldr	r0, [r7, #8]
    beb4:	f04f 0140 	mov.w	r1, #64	; 0x40
    beb8:	f04f 0200 	mov.w	r2, #0	; 0x0
    bebc:	f04f 0300 	mov.w	r3, #0	; 0x0
    bec0:	f7f7 f9a4 	bl	320c <TIM_TIxExternalClockConfig>

    // met le timer à disposition
    TIM_Cmd(TIMx, ENABLE);
    bec4:	68b8      	ldr	r0, [r7, #8]
    bec6:	f04f 0101 	mov.w	r1, #1	; 0x1
    beca:	f7f7 f8ad 	bl	3028 <TIM_Cmd>

    // met le counter à 0
    TIM_SetCounter(TIMx, 0);
    bece:	68b8      	ldr	r0, [r7, #8]
    bed0:	f04f 0100 	mov.w	r1, #0	; 0x0
    bed4:	f7f8 f81a 	bl	3f0c <TIM_SetCounter>

    // initialisation des autres pins
    initialiserPinCapteur(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges);
    bed8:	68fb      	ldr	r3, [r7, #12]
    beda:	685a      	ldr	r2, [r3, #4]
    bedc:	68fb      	ldr	r3, [r7, #12]
    bede:	891b      	ldrh	r3, [r3, #8]
    bee0:	4610      	mov	r0, r2
    bee2:	4619      	mov	r1, r3
    bee4:	f7ff fece 	bl	bc84 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues);
    bee8:	68fb      	ldr	r3, [r7, #12]
    beea:	68da      	ldr	r2, [r3, #12]
    beec:	68fb      	ldr	r3, [r7, #12]
    beee:	8a1b      	ldrh	r3, [r3, #16]
    bef0:	4610      	mov	r0, r2
    bef2:	4619      	mov	r1, r3
    bef4:	f7ff fec6 	bl	bc84 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1);
    bef8:	68fb      	ldr	r3, [r7, #12]
    befa:	695a      	ldr	r2, [r3, #20]
    befc:	68fb      	ldr	r3, [r7, #12]
    befe:	8b1b      	ldrh	r3, [r3, #24]
    bf00:	4610      	mov	r0, r2
    bf02:	4619      	mov	r1, r3
    bf04:	f7ff febe 	bl	bc84 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2);
    bf08:	68fb      	ldr	r3, [r7, #12]
    bf0a:	69da      	ldr	r2, [r3, #28]
    bf0c:	68fb      	ldr	r3, [r7, #12]
    bf0e:	8c1b      	ldrh	r3, [r3, #32]
    bf10:	4610      	mov	r0, r2
    bf12:	4619      	mov	r1, r3
    bf14:	f7ff feb6 	bl	bc84 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1);
    bf18:	68fb      	ldr	r3, [r7, #12]
    bf1a:	6a5a      	ldr	r2, [r3, #36]
    bf1c:	68fb      	ldr	r3, [r7, #12]
    bf1e:	8d1b      	ldrh	r3, [r3, #40]
    bf20:	4610      	mov	r0, r2
    bf22:	4619      	mov	r1, r3
    bf24:	f7ff feae 	bl	bc84 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2);
    bf28:	68fb      	ldr	r3, [r7, #12]
    bf2a:	6ada      	ldr	r2, [r3, #44]
    bf2c:	68fb      	ldr	r3, [r7, #12]
    bf2e:	8e1b      	ldrh	r3, [r3, #48]
    bf30:	4610      	mov	r0, r2
    bf32:	4619      	mov	r1, r3
    bf34:	f7ff fea6 	bl	bc84 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
}
    bf38:	68fb      	ldr	r3, [r7, #12]
    bf3a:	4618      	mov	r0, r3
    bf3c:	f107 0720 	add.w	r7, r7, #32	; 0x20
    bf40:	46bd      	mov	sp, r7
    bf42:	bd80      	pop	{r7, pc}

0000bf44 <_ZN8Capteurs15getNbrOfChannelEv>:
    if (!isConverted)
        convertirDonnees();
    return (output[direction] & 0xff) == 0xff;
}

uint8_t Capteurs::getNbrOfChannel(){
    bf44:	b480      	push	{r7}
    bf46:	b083      	sub	sp, #12
    bf48:	af00      	add	r7, sp, #0
    bf4a:	6078      	str	r0, [r7, #4]
    return NbrOfChannel;
    bf4c:	687b      	ldr	r3, [r7, #4]
    bf4e:	781b      	ldrb	r3, [r3, #0]
}
    bf50:	4618      	mov	r0, r3
    bf52:	f107 070c 	add.w	r7, r7, #12	; 0xc
    bf56:	46bd      	mov	sp, r7
    bf58:	bc80      	pop	{r7}
    bf5a:	4770      	bx	lr

0000bf5c <_ZN8Capteurs18conversionFinishedEv>:
{
    isConverted = false;
    ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
}

bool Capteurs::conversionFinished()
    bf5c:	b580      	push	{r7, lr}
    bf5e:	b082      	sub	sp, #8
    bf60:	af00      	add	r7, sp, #0
    bf62:	6078      	str	r0, [r7, #4]
{
    //return (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == SET);
    return DMA_GetFlagStatus(DMA1_FLAG_TC1);
    bf64:	f04f 0002 	mov.w	r0, #2	; 0x2
    bf68:	f7f5 f94a 	bl	1200 <DMA_GetFlagStatus>
    bf6c:	4603      	mov	r3, r0
    bf6e:	2b00      	cmp	r3, #0
    bf70:	bf0c      	ite	eq
    bf72:	2300      	moveq	r3, #0
    bf74:	2301      	movne	r3, #1
    bf76:	b2db      	uxtb	r3, r3
}
    bf78:	4618      	mov	r0, r3
    bf7a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    bf7e:	46bd      	mov	sp, r7
    bf80:	bd80      	pop	{r7, pc}
    bf82:	46c0      	nop			(mov r8, r8)

0000bf84 <_ZN8Capteurs16convertirDonneesEv>:

void Capteurs::convertirDonnees()
    bf84:	b580      	push	{r7, lr}
    bf86:	b084      	sub	sp, #16
    bf88:	af00      	add	r7, sp, #0
    bf8a:	6078      	str	r0, [r7, #4]
{
    isConverted = true;
    bf8c:	687b      	ldr	r3, [r7, #4]
    bf8e:	f04f 0201 	mov.w	r2, #1	; 0x1
    bf92:	739a      	strb	r2, [r3, #14]
    while (!conversionFinished());    // au cas où l'interrupt de l'asservissement tombe avant la fin de l'acquisition/conversion
    bf94:	6878      	ldr	r0, [r7, #4]
    bf96:	f7ff ffe1 	bl	bf5c <_ZN8Capteurs18conversionFinishedEv>
    bf9a:	4603      	mov	r3, r0
    bf9c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    bfa0:	b2db      	uxtb	r3, r3
    bfa2:	2b00      	cmp	r3, #0
    bfa4:	d1f6      	bne.n	bf94 <_ZN8Capteurs16convertirDonneesEv+0x10>
     ** C'EST ICI QU'IL FAUT METTRE LE BREAKPOINT **
     **     POUR AVOIR LA VALEUR DES CAPTEURS     **
     **                                           **
     **                                           **
     ***********************************************/
    for(int i=0;i<NbrOfChannel;i++)  { // Ceci est un compteur binaire, qui ajoute un bit à droite chaque fois qu'un objet est detecté
    bfa6:	f04f 0300 	mov.w	r3, #0	; 0x0
    bfaa:	60fb      	str	r3, [r7, #12]
    bfac:	e032      	b.n	c014 <_ZN8Capteurs16convertirDonneesEv+0x90>
        output[i] <<= 1;
    bfae:	687b      	ldr	r3, [r7, #4]
    bfb0:	689a      	ldr	r2, [r3, #8]
    bfb2:	68fb      	ldr	r3, [r7, #12]
    bfb4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    bfb8:	eb02 0103 	add.w	r1, r2, r3
    bfbc:	687b      	ldr	r3, [r7, #4]
    bfbe:	689a      	ldr	r2, [r3, #8]
    bfc0:	68fb      	ldr	r3, [r7, #12]
    bfc2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    bfc6:	4413      	add	r3, r2
    bfc8:	681b      	ldr	r3, [r3, #0]
    bfca:	ea4f 0343 	mov.w	r3, r3, lsl #1
    bfce:	600b      	str	r3, [r1, #0]
        output[i] |= (data[i] > threshold);
    bfd0:	687b      	ldr	r3, [r7, #4]
    bfd2:	689a      	ldr	r2, [r3, #8]
    bfd4:	68fb      	ldr	r3, [r7, #12]
    bfd6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    bfda:	eb02 0103 	add.w	r1, r2, r3
    bfde:	687b      	ldr	r3, [r7, #4]
    bfe0:	689a      	ldr	r2, [r3, #8]
    bfe2:	68fb      	ldr	r3, [r7, #12]
    bfe4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    bfe8:	4413      	add	r3, r2
    bfea:	6818      	ldr	r0, [r3, #0]
    bfec:	687b      	ldr	r3, [r7, #4]
    bfee:	685a      	ldr	r2, [r3, #4]
    bff0:	68fb      	ldr	r3, [r7, #12]
    bff2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    bff6:	4413      	add	r3, r2
    bff8:	881a      	ldrh	r2, [r3, #0]
    bffa:	687b      	ldr	r3, [r7, #4]
    bffc:	899b      	ldrh	r3, [r3, #12]
    bffe:	429a      	cmp	r2, r3
    c000:	bf94      	ite	ls
    c002:	2300      	movls	r3, #0
    c004:	2301      	movhi	r3, #1
    c006:	ea40 0303 	orr.w	r3, r0, r3
    c00a:	600b      	str	r3, [r1, #0]
     ** C'EST ICI QU'IL FAUT METTRE LE BREAKPOINT **
     **     POUR AVOIR LA VALEUR DES CAPTEURS     **
     **                                           **
     **                                           **
     ***********************************************/
    for(int i=0;i<NbrOfChannel;i++)  { // Ceci est un compteur binaire, qui ajoute un bit à droite chaque fois qu'un objet est detecté
    c00c:	68fb      	ldr	r3, [r7, #12]
    c00e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c012:	60fb      	str	r3, [r7, #12]
    c014:	687b      	ldr	r3, [r7, #4]
    c016:	781b      	ldrb	r3, [r3, #0]
    c018:	461a      	mov	r2, r3
    c01a:	68fb      	ldr	r3, [r7, #12]
    c01c:	429a      	cmp	r2, r3
    c01e:	dcc6      	bgt.n	bfae <_ZN8Capteurs16convertirDonneesEv+0x2a>
        output[i] <<= 1;
        output[i] |= (data[i] > threshold);
    }
}
    c020:	f107 0710 	add.w	r7, r7, #16	; 0x10
    c024:	46bd      	mov	sp, r7
    c026:	bd80      	pop	{r7, pc}

0000c028 <_ZN8Capteurs8getValueENS_9DirectionE>:

uint16_t Capteurs::getValue(Capteurs::Direction direction) // Retourne vrai si et seulement si le seuil du capteur a été dépassé pendant plus de 8 coups d'horloge car àxff = 8bits à 1
    c028:	b580      	push	{r7, lr}
    c02a:	b082      	sub	sp, #8
    c02c:	af00      	add	r7, sp, #0
    c02e:	6078      	str	r0, [r7, #4]
    c030:	460b      	mov	r3, r1
    c032:	70fb      	strb	r3, [r7, #3]
{
    if (!isConverted)
    c034:	687b      	ldr	r3, [r7, #4]
    c036:	7b9b      	ldrb	r3, [r3, #14]
    c038:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    c03c:	b2db      	uxtb	r3, r3
    c03e:	2b00      	cmp	r3, #0
    c040:	d002      	beq.n	c048 <_ZN8Capteurs8getValueENS_9DirectionE+0x20>
        convertirDonnees();
    c042:	6878      	ldr	r0, [r7, #4]
    c044:	f7ff ff9e 	bl	bf84 <_ZN8Capteurs16convertirDonneesEv>
    return (output[direction] & 0xff) == 0xff;
    c048:	687b      	ldr	r3, [r7, #4]
    c04a:	689a      	ldr	r2, [r3, #8]
    c04c:	78fb      	ldrb	r3, [r7, #3]
    c04e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    c052:	4413      	add	r3, r2
    c054:	681b      	ldr	r3, [r3, #0]
    c056:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    c05a:	2bff      	cmp	r3, #255
    c05c:	bf14      	ite	ne
    c05e:	2300      	movne	r3, #0
    c060:	2301      	moveq	r3, #1
}
    c062:	4618      	mov	r0, r3
    c064:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c068:	46bd      	mov	sp, r7
    c06a:	bd80      	pop	{r7, pc}

0000c06c <_ZN8Capteurs15startConversionEv>:
    // Channel1 : cf p.192 tableau 58
    DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    DMA_Cmd(DMA1_Channel1, ENABLE);
}

void Capteurs::startConversion()
    c06c:	b580      	push	{r7, lr}
    c06e:	b082      	sub	sp, #8
    c070:	af00      	add	r7, sp, #0
    c072:	6078      	str	r0, [r7, #4]
{
    isConverted = false;
    c074:	687b      	ldr	r3, [r7, #4]
    c076:	f04f 0200 	mov.w	r2, #0	; 0x0
    c07a:	739a      	strb	r2, [r3, #14]
    ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
    c07c:	4804      	ldr	r0, [pc, #16]	(c090 <_ZN8Capteurs15startConversionEv+0x24>)
    c07e:	f04f 0101 	mov.w	r1, #1	; 0x1
    c082:	f7f4 fb09 	bl	698 <ADC_SoftwareStartConvCmd>
}
    c086:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c08a:	46bd      	mov	sp, r7
    c08c:	bd80      	pop	{r7, pc}
    c08e:	46c0      	nop			(mov r8, r8)
    c090:	40012400 	.word	0x40012400

0000c094 <_ZN8CapteursC1Ev>:
#include "capteurs.h"

Capteurs::Capteurs(): threshold(SEUIL_DETECTION), isConverted(false)
    c094:	b580      	push	{r7, lr}
    c096:	b096      	sub	sp, #88
    c098:	af00      	add	r7, sp, #0
    c09a:	6078      	str	r0, [r7, #4]
    c09c:	687a      	ldr	r2, [r7, #4]
    c09e:	f640 13c4 	movw	r3, #2500	; 0x9c4
    c0a2:	8193      	strh	r3, [r2, #12]
    c0a4:	687a      	ldr	r2, [r7, #4]
    c0a6:	f04f 0300 	mov.w	r3, #0	; 0x0
    c0aa:	7393      	strb	r3, [r2, #14]
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
       uint8_t Channels[] = {6,7,8,9,10,11,13,15};
       NbrOfChannel = 8;
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        uint8_t Channels[] = {10,11,12,13,15};
    c0ac:	4b67      	ldr	r3, [pc, #412]	(c24c <_ZN8CapteursC1Ev+0x1b8>)
    c0ae:	f107 024b 	add.w	r2, r7, #75	; 0x4b
    c0b2:	f04f 0c05 	mov.w	ip, #5	; 0x5
    c0b6:	4610      	mov	r0, r2
    c0b8:	4619      	mov	r1, r3
    c0ba:	4662      	mov	r2, ip
    c0bc:	f016 fd3e 	bl	22b3c <memcpy>
        NbrOfChannel = 5;
    c0c0:	687a      	ldr	r2, [r7, #4]
    c0c2:	f04f 0305 	mov.w	r3, #5	; 0x5
    c0c6:	7013      	strb	r3, [r2, #0]
    #endif

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    c0c8:	687b      	ldr	r3, [r7, #4]
    c0ca:	781b      	ldrb	r3, [r3, #0]
    c0cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c0d0:	4618      	mov	r0, r3
    c0d2:	f002 fdc1 	bl	ec58 <_Znaj>
    c0d6:	4603      	mov	r3, r0
    c0d8:	461a      	mov	r2, r3
    c0da:	687b      	ldr	r3, [r7, #4]
    c0dc:	605a      	str	r2, [r3, #4]
    output = new uint32_t[NbrOfChannel];
    c0de:	687b      	ldr	r3, [r7, #4]
    c0e0:	781b      	ldrb	r3, [r3, #0]
    c0e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    c0e6:	4618      	mov	r0, r3
    c0e8:	f002 fdb6 	bl	ec58 <_Znaj>
    c0ec:	4603      	mov	r3, r0
    c0ee:	461a      	mov	r2, r3
    c0f0:	687b      	ldr	r3, [r7, #4]
    c0f2:	609a      	str	r2, [r3, #8]

    for(unsigned int i=0; i < NbrOfChannel; i++)
    c0f4:	f04f 0300 	mov.w	r3, #0	; 0x0
    c0f8:	653b      	str	r3, [r7, #80]
    c0fa:	e00c      	b.n	c116 <_ZN8CapteursC1Ev+0x82>
        output[i] = 0;
    c0fc:	687b      	ldr	r3, [r7, #4]
    c0fe:	689a      	ldr	r2, [r3, #8]
    c100:	6d3b      	ldr	r3, [r7, #80]
    c102:	ea4f 0383 	mov.w	r3, r3, lsl #2
    c106:	441a      	add	r2, r3
    c108:	f04f 0300 	mov.w	r3, #0	; 0x0
    c10c:	6013      	str	r3, [r2, #0]

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    output = new uint32_t[NbrOfChannel];

    for(unsigned int i=0; i < NbrOfChannel; i++)
    c10e:	6d3b      	ldr	r3, [r7, #80]
    c110:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c114:	653b      	str	r3, [r7, #80]
    c116:	687b      	ldr	r3, [r7, #4]
    c118:	781b      	ldrb	r3, [r3, #0]
    c11a:	461a      	mov	r2, r3
    c11c:	6d3b      	ldr	r3, [r7, #80]
    c11e:	429a      	cmp	r2, r3
    c120:	d8ec      	bhi.n	c0fc <_ZN8CapteursC1Ev+0x68>
        output[i] = 0;

    ADC_InitTypeDef ADC_InitStructure;
    // ADC1 fonctionne tout seul (on n'utilise ni ADC2 ni ADC3)
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    c122:	f04f 0300 	mov.w	r3, #0	; 0x0
    c126:	637b      	str	r3, [r7, #52]
    // On scanne tous les channels
    ADC_InitStructure.ADC_ScanConvMode = ENABLE;
    c128:	f04f 0301 	mov.w	r3, #1	; 0x1
    c12c:	f887 3038 	strb.w	r3, [r7, #56]
    // Single conversion mode
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    c130:	f04f 0300 	mov.w	r3, #0	; 0x0
    c134:	f887 3039 	strb.w	r3, [r7, #57]
    // Pas d'external trigger (on lance la conversion à la main)
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    c138:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
    c13c:	63fb      	str	r3, [r7, #60]
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    c13e:	f04f 0300 	mov.w	r3, #0	; 0x0
    c142:	643b      	str	r3, [r7, #64]
    ADC_InitStructure.ADC_NbrOfChannel = NbrOfChannel;
    c144:	687b      	ldr	r3, [r7, #4]
    c146:	781b      	ldrb	r3, [r3, #0]
    c148:	f887 3044 	strb.w	r3, [r7, #68]
    ADC_Init(ADC1, &ADC_InitStructure);
    c14c:	f107 0334 	add.w	r3, r7, #52	; 0x34
    c150:	483f      	ldr	r0, [pc, #252]	(c250 <_ZN8CapteursC1Ev+0x1bc>)
    c152:	4619      	mov	r1, r3
    c154:	f7f4 f968 	bl	428 <ADC_Init>

    // Activation du périphérique
    ADC_Cmd(ADC1, ENABLE);
    c158:	483d      	ldr	r0, [pc, #244]	(c250 <_ZN8CapteursC1Ev+0x1bc>)
    c15a:	f04f 0101 	mov.w	r1, #1	; 0x1
    c15e:	f7f4 f9e5 	bl	52c <ADC_Cmd>

    // Calibrage
    // On remet la calibration à zéro
    ADC_ResetCalibration(ADC1);
    c162:	483b      	ldr	r0, [pc, #236]	(c250 <_ZN8CapteursC1Ev+0x1bc>)
    c164:	f7f4 fa40 	bl	5e8 <ADC_ResetCalibration>
    while(ADC_GetResetCalibrationStatus(ADC1));
    c168:	4839      	ldr	r0, [pc, #228]	(c250 <_ZN8CapteursC1Ev+0x1bc>)
    c16a:	f7f4 fa4d 	bl	608 <ADC_GetResetCalibrationStatus>
    c16e:	4603      	mov	r3, r0
    c170:	2b00      	cmp	r3, #0
    c172:	bf0c      	ite	eq
    c174:	2300      	moveq	r3, #0
    c176:	2301      	movne	r3, #1
    c178:	b2db      	uxtb	r3, r3
    c17a:	2b00      	cmp	r3, #0
    c17c:	d1f4      	bne.n	c168 <_ZN8CapteursC1Ev+0xd4>
    // On lance la calibration
    ADC_StartCalibration(ADC1);
    c17e:	4834      	ldr	r0, [pc, #208]	(c250 <_ZN8CapteursC1Ev+0x1bc>)
    c180:	f7f4 fa5e 	bl	640 <ADC_StartCalibration>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));
    c184:	4832      	ldr	r0, [pc, #200]	(c250 <_ZN8CapteursC1Ev+0x1bc>)
    c186:	f7f4 fa6b 	bl	660 <ADC_GetCalibrationStatus>
    c18a:	4603      	mov	r3, r0
    c18c:	2b00      	cmp	r3, #0
    c18e:	bf0c      	ite	eq
    c190:	2300      	moveq	r3, #0
    c192:	2301      	movne	r3, #1
    c194:	b2db      	uxtb	r3, r3
    c196:	2b00      	cmp	r3, #0
    c198:	d1f4      	bne.n	c184 <_ZN8CapteursC1Ev+0xf0>

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    c19a:	f04f 0300 	mov.w	r3, #0	; 0x0
    c19e:	657b      	str	r3, [r7, #84]
    c1a0:	e015      	b.n	c1ce <_ZN8CapteursC1Ev+0x13a>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    c1a2:	6d7b      	ldr	r3, [r7, #84]
    c1a4:	f107 0258 	add.w	r2, r7, #88	; 0x58
    c1a8:	4413      	add	r3, r2
    c1aa:	f813 2c0d 	ldrb.w	r2, [r3, #-13]
    c1ae:	6d7b      	ldr	r3, [r7, #84]
    c1b0:	b2db      	uxtb	r3, r3
    c1b2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c1b6:	b2db      	uxtb	r3, r3
    c1b8:	4825      	ldr	r0, [pc, #148]	(c250 <_ZN8CapteursC1Ev+0x1bc>)
    c1ba:	4611      	mov	r1, r2
    c1bc:	461a      	mov	r2, r3
    c1be:	f04f 0300 	mov.w	r3, #0	; 0x0
    c1c2:	f7f4 fae3 	bl	78c <ADC_RegularChannelConfig>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    c1c6:	6d7b      	ldr	r3, [r7, #84]
    c1c8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c1cc:	657b      	str	r3, [r7, #84]
    c1ce:	687b      	ldr	r3, [r7, #4]
    c1d0:	781b      	ldrb	r3, [r3, #0]
    c1d2:	461a      	mov	r2, r3
    c1d4:	6d7b      	ldr	r3, [r7, #84]
    c1d6:	429a      	cmp	r2, r3
    c1d8:	dce3      	bgt.n	c1a2 <_ZN8CapteursC1Ev+0x10e>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    }
    // active le transfert des résultats de conversion en SRAM
    ADC_DMACmd(ADC1, ENABLE);
    c1da:	481d      	ldr	r0, [pc, #116]	(c250 <_ZN8CapteursC1Ev+0x1bc>)
    c1dc:	f04f 0101 	mov.w	r1, #1	; 0x1
    c1e0:	f7f4 f9c0 	bl	564 <ADC_DMACmd>

    DMA_InitTypeDef DMA_InitStructure;
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); // ADC regular data register contient le résultat de la conversion
    c1e4:	4b1a      	ldr	r3, [pc, #104]	(c250 <_ZN8CapteursC1Ev+0x1bc>)
    c1e6:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    c1ea:	60bb      	str	r3, [r7, #8]
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)data ; // Adresse de destination
    c1ec:	687b      	ldr	r3, [r7, #4]
    c1ee:	685b      	ldr	r3, [r3, #4]
    c1f0:	60fb      	str	r3, [r7, #12]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; // On transfère du périphérique (ADC) à la mémoire (SRAM)
    c1f2:	f04f 0300 	mov.w	r3, #0	; 0x0
    c1f6:	613b      	str	r3, [r7, #16]
    DMA_InitStructure.DMA_BufferSize = NbrOfChannel; // Nombre de conversions à transférer
    c1f8:	687b      	ldr	r3, [r7, #4]
    c1fa:	781b      	ldrb	r3, [r3, #0]
    c1fc:	617b      	str	r3, [r7, #20]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; // L'adresse du résultat de la conversion ne change pas
    c1fe:	f04f 0300 	mov.w	r3, #0	; 0x0
    c202:	61bb      	str	r3, [r7, #24]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; // Incrémente le pointeur destination pour enregistrer les différentes conversions
    c204:	f04f 0380 	mov.w	r3, #128	; 0x80
    c208:	61fb      	str	r3, [r7, #28]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    c20a:	f44f 7300 	mov.w	r3, #512	; 0x200
    c20e:	623b      	str	r3, [r7, #32]
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    c210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c214:	627b      	str	r3, [r7, #36]
    // Note : le registre ADC_DR fait 32 bits mais seuls les bits 0:15 nous intéressent
    // Ici tout devrait fonctionner correctement : cf doc p.189 (tableau 56) (malgré une petite erreur dans le tableau)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    c216:	f04f 0320 	mov.w	r3, #32	; 0x20
    c21a:	62bb      	str	r3, [r7, #40]
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    c21c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    c220:	62fb      	str	r3, [r7, #44]
    // On ne permet pas de lancer un transfert en software (car lancé par le périphérique ADC)
    DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    c222:	f04f 0300 	mov.w	r3, #0	; 0x0
    c226:	633b      	str	r3, [r7, #48]
    // Channel1 : cf p.192 tableau 58
    DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    c228:	f107 0308 	add.w	r3, r7, #8	; 0x8
    c22c:	4809      	ldr	r0, [pc, #36]	(c254 <_ZN8CapteursC1Ev+0x1c0>)
    c22e:	4619      	mov	r1, r3
    c230:	f7f4 ff1e 	bl	1070 <DMA_Init>
    DMA_Cmd(DMA1_Channel1, ENABLE);
    c234:	4807      	ldr	r0, [pc, #28]	(c254 <_ZN8CapteursC1Ev+0x1c0>)
    c236:	f04f 0101 	mov.w	r1, #1	; 0x1
    c23a:	f7f4 ff97 	bl	116c <DMA_Cmd>
}
    c23e:	687b      	ldr	r3, [r7, #4]
    c240:	4618      	mov	r0, r3
    c242:	f107 0758 	add.w	r7, r7, #88	; 0x58
    c246:	46bd      	mov	sp, r7
    c248:	bd80      	pop	{r7, pc}
    c24a:	46c0      	nop			(mov r8, r8)
    c24c:	00024040 	.word	0x00024040
    c250:	40012400 	.word	0x40012400
    c254:	40020008 	.word	0x40020008

0000c258 <_ZN8CapteursC2Ev>:
#include "capteurs.h"

Capteurs::Capteurs(): threshold(SEUIL_DETECTION), isConverted(false)
    c258:	b580      	push	{r7, lr}
    c25a:	b096      	sub	sp, #88
    c25c:	af00      	add	r7, sp, #0
    c25e:	6078      	str	r0, [r7, #4]
    c260:	687a      	ldr	r2, [r7, #4]
    c262:	f640 13c4 	movw	r3, #2500	; 0x9c4
    c266:	8193      	strh	r3, [r2, #12]
    c268:	687a      	ldr	r2, [r7, #4]
    c26a:	f04f 0300 	mov.w	r3, #0	; 0x0
    c26e:	7393      	strb	r3, [r2, #14]
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
       uint8_t Channels[] = {6,7,8,9,10,11,13,15};
       NbrOfChannel = 8;
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        uint8_t Channels[] = {10,11,12,13,15};
    c270:	4b67      	ldr	r3, [pc, #412]	(c410 <_ZN8CapteursC2Ev+0x1b8>)
    c272:	f107 024b 	add.w	r2, r7, #75	; 0x4b
    c276:	f04f 0c05 	mov.w	ip, #5	; 0x5
    c27a:	4610      	mov	r0, r2
    c27c:	4619      	mov	r1, r3
    c27e:	4662      	mov	r2, ip
    c280:	f016 fc5c 	bl	22b3c <memcpy>
        NbrOfChannel = 5;
    c284:	687a      	ldr	r2, [r7, #4]
    c286:	f04f 0305 	mov.w	r3, #5	; 0x5
    c28a:	7013      	strb	r3, [r2, #0]
    #endif

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    c28c:	687b      	ldr	r3, [r7, #4]
    c28e:	781b      	ldrb	r3, [r3, #0]
    c290:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c294:	4618      	mov	r0, r3
    c296:	f002 fcdf 	bl	ec58 <_Znaj>
    c29a:	4603      	mov	r3, r0
    c29c:	461a      	mov	r2, r3
    c29e:	687b      	ldr	r3, [r7, #4]
    c2a0:	605a      	str	r2, [r3, #4]
    output = new uint32_t[NbrOfChannel];
    c2a2:	687b      	ldr	r3, [r7, #4]
    c2a4:	781b      	ldrb	r3, [r3, #0]
    c2a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    c2aa:	4618      	mov	r0, r3
    c2ac:	f002 fcd4 	bl	ec58 <_Znaj>
    c2b0:	4603      	mov	r3, r0
    c2b2:	461a      	mov	r2, r3
    c2b4:	687b      	ldr	r3, [r7, #4]
    c2b6:	609a      	str	r2, [r3, #8]

    for(unsigned int i=0; i < NbrOfChannel; i++)
    c2b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    c2bc:	653b      	str	r3, [r7, #80]
    c2be:	e00c      	b.n	c2da <_ZN8CapteursC2Ev+0x82>
        output[i] = 0;
    c2c0:	687b      	ldr	r3, [r7, #4]
    c2c2:	689a      	ldr	r2, [r3, #8]
    c2c4:	6d3b      	ldr	r3, [r7, #80]
    c2c6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    c2ca:	441a      	add	r2, r3
    c2cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    c2d0:	6013      	str	r3, [r2, #0]

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    output = new uint32_t[NbrOfChannel];

    for(unsigned int i=0; i < NbrOfChannel; i++)
    c2d2:	6d3b      	ldr	r3, [r7, #80]
    c2d4:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c2d8:	653b      	str	r3, [r7, #80]
    c2da:	687b      	ldr	r3, [r7, #4]
    c2dc:	781b      	ldrb	r3, [r3, #0]
    c2de:	461a      	mov	r2, r3
    c2e0:	6d3b      	ldr	r3, [r7, #80]
    c2e2:	429a      	cmp	r2, r3
    c2e4:	d8ec      	bhi.n	c2c0 <_ZN8CapteursC2Ev+0x68>
        output[i] = 0;

    ADC_InitTypeDef ADC_InitStructure;
    // ADC1 fonctionne tout seul (on n'utilise ni ADC2 ni ADC3)
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    c2e6:	f04f 0300 	mov.w	r3, #0	; 0x0
    c2ea:	637b      	str	r3, [r7, #52]
    // On scanne tous les channels
    ADC_InitStructure.ADC_ScanConvMode = ENABLE;
    c2ec:	f04f 0301 	mov.w	r3, #1	; 0x1
    c2f0:	f887 3038 	strb.w	r3, [r7, #56]
    // Single conversion mode
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    c2f4:	f04f 0300 	mov.w	r3, #0	; 0x0
    c2f8:	f887 3039 	strb.w	r3, [r7, #57]
    // Pas d'external trigger (on lance la conversion à la main)
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    c2fc:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
    c300:	63fb      	str	r3, [r7, #60]
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    c302:	f04f 0300 	mov.w	r3, #0	; 0x0
    c306:	643b      	str	r3, [r7, #64]
    ADC_InitStructure.ADC_NbrOfChannel = NbrOfChannel;
    c308:	687b      	ldr	r3, [r7, #4]
    c30a:	781b      	ldrb	r3, [r3, #0]
    c30c:	f887 3044 	strb.w	r3, [r7, #68]
    ADC_Init(ADC1, &ADC_InitStructure);
    c310:	f107 0334 	add.w	r3, r7, #52	; 0x34
    c314:	483f      	ldr	r0, [pc, #252]	(c414 <_ZN8CapteursC2Ev+0x1bc>)
    c316:	4619      	mov	r1, r3
    c318:	f7f4 f886 	bl	428 <ADC_Init>

    // Activation du périphérique
    ADC_Cmd(ADC1, ENABLE);
    c31c:	483d      	ldr	r0, [pc, #244]	(c414 <_ZN8CapteursC2Ev+0x1bc>)
    c31e:	f04f 0101 	mov.w	r1, #1	; 0x1
    c322:	f7f4 f903 	bl	52c <ADC_Cmd>

    // Calibrage
    // On remet la calibration à zéro
    ADC_ResetCalibration(ADC1);
    c326:	483b      	ldr	r0, [pc, #236]	(c414 <_ZN8CapteursC2Ev+0x1bc>)
    c328:	f7f4 f95e 	bl	5e8 <ADC_ResetCalibration>
    while(ADC_GetResetCalibrationStatus(ADC1));
    c32c:	4839      	ldr	r0, [pc, #228]	(c414 <_ZN8CapteursC2Ev+0x1bc>)
    c32e:	f7f4 f96b 	bl	608 <ADC_GetResetCalibrationStatus>
    c332:	4603      	mov	r3, r0
    c334:	2b00      	cmp	r3, #0
    c336:	bf0c      	ite	eq
    c338:	2300      	moveq	r3, #0
    c33a:	2301      	movne	r3, #1
    c33c:	b2db      	uxtb	r3, r3
    c33e:	2b00      	cmp	r3, #0
    c340:	d1f4      	bne.n	c32c <_ZN8CapteursC2Ev+0xd4>
    // On lance la calibration
    ADC_StartCalibration(ADC1);
    c342:	4834      	ldr	r0, [pc, #208]	(c414 <_ZN8CapteursC2Ev+0x1bc>)
    c344:	f7f4 f97c 	bl	640 <ADC_StartCalibration>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));
    c348:	4832      	ldr	r0, [pc, #200]	(c414 <_ZN8CapteursC2Ev+0x1bc>)
    c34a:	f7f4 f989 	bl	660 <ADC_GetCalibrationStatus>
    c34e:	4603      	mov	r3, r0
    c350:	2b00      	cmp	r3, #0
    c352:	bf0c      	ite	eq
    c354:	2300      	moveq	r3, #0
    c356:	2301      	movne	r3, #1
    c358:	b2db      	uxtb	r3, r3
    c35a:	2b00      	cmp	r3, #0
    c35c:	d1f4      	bne.n	c348 <_ZN8CapteursC2Ev+0xf0>

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    c35e:	f04f 0300 	mov.w	r3, #0	; 0x0
    c362:	657b      	str	r3, [r7, #84]
    c364:	e015      	b.n	c392 <_ZN8CapteursC2Ev+0x13a>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    c366:	6d7b      	ldr	r3, [r7, #84]
    c368:	f107 0258 	add.w	r2, r7, #88	; 0x58
    c36c:	4413      	add	r3, r2
    c36e:	f813 2c0d 	ldrb.w	r2, [r3, #-13]
    c372:	6d7b      	ldr	r3, [r7, #84]
    c374:	b2db      	uxtb	r3, r3
    c376:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c37a:	b2db      	uxtb	r3, r3
    c37c:	4825      	ldr	r0, [pc, #148]	(c414 <_ZN8CapteursC2Ev+0x1bc>)
    c37e:	4611      	mov	r1, r2
    c380:	461a      	mov	r2, r3
    c382:	f04f 0300 	mov.w	r3, #0	; 0x0
    c386:	f7f4 fa01 	bl	78c <ADC_RegularChannelConfig>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    c38a:	6d7b      	ldr	r3, [r7, #84]
    c38c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c390:	657b      	str	r3, [r7, #84]
    c392:	687b      	ldr	r3, [r7, #4]
    c394:	781b      	ldrb	r3, [r3, #0]
    c396:	461a      	mov	r2, r3
    c398:	6d7b      	ldr	r3, [r7, #84]
    c39a:	429a      	cmp	r2, r3
    c39c:	dce3      	bgt.n	c366 <_ZN8CapteursC2Ev+0x10e>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    }
    // active le transfert des résultats de conversion en SRAM
    ADC_DMACmd(ADC1, ENABLE);
    c39e:	481d      	ldr	r0, [pc, #116]	(c414 <_ZN8CapteursC2Ev+0x1bc>)
    c3a0:	f04f 0101 	mov.w	r1, #1	; 0x1
    c3a4:	f7f4 f8de 	bl	564 <ADC_DMACmd>

    DMA_InitTypeDef DMA_InitStructure;
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); // ADC regular data register contient le résultat de la conversion
    c3a8:	4b1a      	ldr	r3, [pc, #104]	(c414 <_ZN8CapteursC2Ev+0x1bc>)
    c3aa:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    c3ae:	60bb      	str	r3, [r7, #8]
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)data ; // Adresse de destination
    c3b0:	687b      	ldr	r3, [r7, #4]
    c3b2:	685b      	ldr	r3, [r3, #4]
    c3b4:	60fb      	str	r3, [r7, #12]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; // On transfère du périphérique (ADC) à la mémoire (SRAM)
    c3b6:	f04f 0300 	mov.w	r3, #0	; 0x0
    c3ba:	613b      	str	r3, [r7, #16]
    DMA_InitStructure.DMA_BufferSize = NbrOfChannel; // Nombre de conversions à transférer
    c3bc:	687b      	ldr	r3, [r7, #4]
    c3be:	781b      	ldrb	r3, [r3, #0]
    c3c0:	617b      	str	r3, [r7, #20]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; // L'adresse du résultat de la conversion ne change pas
    c3c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    c3c6:	61bb      	str	r3, [r7, #24]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; // Incrémente le pointeur destination pour enregistrer les différentes conversions
    c3c8:	f04f 0380 	mov.w	r3, #128	; 0x80
    c3cc:	61fb      	str	r3, [r7, #28]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    c3ce:	f44f 7300 	mov.w	r3, #512	; 0x200
    c3d2:	623b      	str	r3, [r7, #32]
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    c3d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c3d8:	627b      	str	r3, [r7, #36]
    // Note : le registre ADC_DR fait 32 bits mais seuls les bits 0:15 nous intéressent
    // Ici tout devrait fonctionner correctement : cf doc p.189 (tableau 56) (malgré une petite erreur dans le tableau)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    c3da:	f04f 0320 	mov.w	r3, #32	; 0x20
    c3de:	62bb      	str	r3, [r7, #40]
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    c3e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    c3e4:	62fb      	str	r3, [r7, #44]
    // On ne permet pas de lancer un transfert en software (car lancé par le périphérique ADC)
    DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    c3e6:	f04f 0300 	mov.w	r3, #0	; 0x0
    c3ea:	633b      	str	r3, [r7, #48]
    // Channel1 : cf p.192 tableau 58
    DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    c3ec:	f107 0308 	add.w	r3, r7, #8	; 0x8
    c3f0:	4809      	ldr	r0, [pc, #36]	(c418 <_ZN8CapteursC2Ev+0x1c0>)
    c3f2:	4619      	mov	r1, r3
    c3f4:	f7f4 fe3c 	bl	1070 <DMA_Init>
    DMA_Cmd(DMA1_Channel1, ENABLE);
    c3f8:	4807      	ldr	r0, [pc, #28]	(c418 <_ZN8CapteursC2Ev+0x1c0>)
    c3fa:	f04f 0101 	mov.w	r1, #1	; 0x1
    c3fe:	f7f4 feb5 	bl	116c <DMA_Cmd>
}
    c402:	687b      	ldr	r3, [r7, #4]
    c404:	4618      	mov	r0, r3
    c406:	f107 0758 	add.w	r7, r7, #88	; 0x58
    c40a:	46bd      	mov	sp, r7
    c40c:	bd80      	pop	{r7, pc}
    c40e:	46c0      	nop			(mov r8, r8)
    c410:	00024040 	.word	0x00024040
    c414:	40012400 	.word	0x40012400
    c418:	40020008 	.word	0x40020008

0000c41c <_ZN3Led6setOffEi>:
        default:
            break;
    }
}

void Led::setOff(int index)
    c41c:	b580      	push	{r7, lr}
    c41e:	b082      	sub	sp, #8
    c420:	af00      	add	r7, sp, #0
    c422:	6078      	str	r0, [r7, #4]
{
    if (index>=0 and index<LED_NUMBER)
    c424:	687b      	ldr	r3, [r7, #4]
    c426:	2b00      	cmp	r3, #0
    c428:	db07      	blt.n	c43a <_ZN3Led6setOffEi+0x1e>
    c42a:	687b      	ldr	r3, [r7, #4]
    c42c:	2b01      	cmp	r3, #1
    c42e:	dc04      	bgt.n	c43a <_ZN3Led6setOffEi+0x1e>
        ledOn[index] = false;
    c430:	6879      	ldr	r1, [r7, #4]
    c432:	4a10      	ldr	r2, [pc, #64]	(c474 <_ZN3Led6setOffEi+0x58>)
    c434:	f04f 0300 	mov.w	r3, #0	; 0x0
    c438:	5453      	strb	r3, [r2, r1]

    switch(index)
    c43a:	687b      	ldr	r3, [r7, #4]
    c43c:	603b      	str	r3, [r7, #0]
    c43e:	683b      	ldr	r3, [r7, #0]
    c440:	2b00      	cmp	r3, #0
    c442:	d003      	beq.n	c44c <_ZN3Led6setOffEi+0x30>
    c444:	683b      	ldr	r3, [r7, #0]
    c446:	2b01      	cmp	r3, #1
    c448:	d008      	beq.n	c45c <_ZN3Led6setOffEi+0x40>
    c44a:	e00e      	b.n	c46a <_ZN3Led6setOffEi+0x4e>
        #ifdef ROBOTHW
            #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_12, Bit_SET); // LED verte
            #endif
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_RESET); // LED verte
    c44c:	480a      	ldr	r0, [pc, #40]	(c478 <_ZN3Led6setOffEi+0x5c>)
    c44e:	f04f 0140 	mov.w	r1, #64	; 0x40
    c452:	f04f 0200 	mov.w	r2, #0	; 0x0
    c456:	f7f5 fa99 	bl	198c <GPIO_WriteBit>
    c45a:	e006      	b.n	c46a <_ZN3Led6setOffEi+0x4e>
            break;

        case 1:
        #ifdef ROBOTHW
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_7, Bit_RESET); // LED jaune
    c45c:	4806      	ldr	r0, [pc, #24]	(c478 <_ZN3Led6setOffEi+0x5c>)
    c45e:	f04f 0180 	mov.w	r1, #128	; 0x80
    c462:	f04f 0200 	mov.w	r2, #0	; 0x0
    c466:	f7f5 fa91 	bl	198c <GPIO_WriteBit>
        #endif
            break;
        default:
            break;
    }
}
    c46a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c46e:	46bd      	mov	sp, r7
    c470:	bd80      	pop	{r7, pc}
    c472:	46c0      	nop			(mov r8, r8)
    c474:	20000580 	.word	0x20000580
    c478:	40011000 	.word	0x40011000

0000c47c <_Z12eteindreLED2v>:
void allumerLED2()
{
    Led::setOn(1);
}

void eteindreLED2()
    c47c:	b580      	push	{r7, lr}
    c47e:	af00      	add	r7, sp, #0
{
    Led::setOff(1);
    c480:	f04f 0001 	mov.w	r0, #1	; 0x1
    c484:	f7ff ffca 	bl	c41c <_ZN3Led6setOffEi>
}
    c488:	46bd      	mov	sp, r7
    c48a:	bd80      	pop	{r7, pc}

0000c48c <_Z11eteindreLEDv>:
void allumerLED()
{
    Led::setOn(0);
}

void eteindreLED()
    c48c:	b580      	push	{r7, lr}
    c48e:	af00      	add	r7, sp, #0
{
    Led::setOff(0);
    c490:	f04f 0000 	mov.w	r0, #0	; 0x0
    c494:	f7ff ffc2 	bl	c41c <_ZN3Led6setOffEi>
}
    c498:	46bd      	mov	sp, r7
    c49a:	bd80      	pop	{r7, pc}

0000c49c <_ZN3Led5setOnEi>:
        else
            setOn(index);
    }
}

void Led::setOn(int index)
    c49c:	b580      	push	{r7, lr}
    c49e:	b082      	sub	sp, #8
    c4a0:	af00      	add	r7, sp, #0
    c4a2:	6078      	str	r0, [r7, #4]
{
    if (index>=0 and index<LED_NUMBER)
    c4a4:	687b      	ldr	r3, [r7, #4]
    c4a6:	2b00      	cmp	r3, #0
    c4a8:	db07      	blt.n	c4ba <_ZN3Led5setOnEi+0x1e>
    c4aa:	687b      	ldr	r3, [r7, #4]
    c4ac:	2b01      	cmp	r3, #1
    c4ae:	dc04      	bgt.n	c4ba <_ZN3Led5setOnEi+0x1e>
        ledOn[index] = true;
    c4b0:	6879      	ldr	r1, [r7, #4]
    c4b2:	4a10      	ldr	r2, [pc, #64]	(c4f4 <_ZN3Led5setOnEi+0x58>)
    c4b4:	f04f 0301 	mov.w	r3, #1	; 0x1
    c4b8:	5453      	strb	r3, [r2, r1]

    switch(index)
    c4ba:	687b      	ldr	r3, [r7, #4]
    c4bc:	603b      	str	r3, [r7, #0]
    c4be:	683b      	ldr	r3, [r7, #0]
    c4c0:	2b00      	cmp	r3, #0
    c4c2:	d003      	beq.n	c4cc <_ZN3Led5setOnEi+0x30>
    c4c4:	683b      	ldr	r3, [r7, #0]
    c4c6:	2b01      	cmp	r3, #1
    c4c8:	d008      	beq.n	c4dc <_ZN3Led5setOnEi+0x40>
    c4ca:	e00e      	b.n	c4ea <_ZN3Led5setOnEi+0x4e>
        #ifdef ROBOTHW
            #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_12, Bit_RESET); // LED verte
            #endif
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_SET); // LED verte
    c4cc:	480a      	ldr	r0, [pc, #40]	(c4f8 <_ZN3Led5setOnEi+0x5c>)
    c4ce:	f04f 0140 	mov.w	r1, #64	; 0x40
    c4d2:	f04f 0201 	mov.w	r2, #1	; 0x1
    c4d6:	f7f5 fa59 	bl	198c <GPIO_WriteBit>
    c4da:	e006      	b.n	c4ea <_ZN3Led5setOnEi+0x4e>
        #ifdef ROBOTHW
            #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
               // Pas de LED jaune sur le H103 :'(
            #endif
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_7, Bit_SET); // LED jaune
    c4dc:	4806      	ldr	r0, [pc, #24]	(c4f8 <_ZN3Led5setOnEi+0x5c>)
    c4de:	f04f 0180 	mov.w	r1, #128	; 0x80
    c4e2:	f04f 0201 	mov.w	r2, #1	; 0x1
    c4e6:	f7f5 fa51 	bl	198c <GPIO_WriteBit>
            break;

        default:
            break;
    }
}
    c4ea:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c4ee:	46bd      	mov	sp, r7
    c4f0:	bd80      	pop	{r7, pc}
    c4f2:	46c0      	nop			(mov r8, r8)
    c4f4:	20000580 	.word	0x20000580
    c4f8:	40011000 	.word	0x40011000

0000c4fc <_ZN3Led6toggleEi>:
    Led::setOff(1);
}

bool Led::ledOn[LED_NUMBER] = {0};

void Led::toggle(int index)
    c4fc:	b580      	push	{r7, lr}
    c4fe:	b082      	sub	sp, #8
    c500:	af00      	add	r7, sp, #0
    c502:	6078      	str	r0, [r7, #4]
{
    if (index>=0 and index<LED_NUMBER)
    c504:	687b      	ldr	r3, [r7, #4]
    c506:	2b00      	cmp	r3, #0
    c508:	db0e      	blt.n	c528 <_ZN3Led6toggleEi+0x2c>
    c50a:	687b      	ldr	r3, [r7, #4]
    c50c:	2b01      	cmp	r3, #1
    c50e:	dc0b      	bgt.n	c528 <_ZN3Led6toggleEi+0x2c>
    {
        if (ledOn[index])
    c510:	687b      	ldr	r3, [r7, #4]
    c512:	4a07      	ldr	r2, [pc, #28]	(c530 <_ZN3Led6toggleEi+0x34>)
    c514:	5cd3      	ldrb	r3, [r2, r3]
    c516:	2b00      	cmp	r3, #0
    c518:	d003      	beq.n	c522 <_ZN3Led6toggleEi+0x26>
            setOff(index);
    c51a:	6878      	ldr	r0, [r7, #4]
    c51c:	f7ff ff7e 	bl	c41c <_ZN3Led6setOffEi>
    c520:	e002      	b.n	c528 <_ZN3Led6toggleEi+0x2c>
        else
            setOn(index);
    c522:	6878      	ldr	r0, [r7, #4]
    c524:	f7ff ffba 	bl	c49c <_ZN3Led5setOnEi>
    }
}
    c528:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c52c:	46bd      	mov	sp, r7
    c52e:	bd80      	pop	{r7, pc}
    c530:	20000580 	.word	0x20000580

0000c534 <_Z11allumerLED2v>:
void eteindreLED()
{
    Led::setOff(0);
}

void allumerLED2()
    c534:	b580      	push	{r7, lr}
    c536:	af00      	add	r7, sp, #0
{
    Led::setOn(1);
    c538:	f04f 0001 	mov.w	r0, #1	; 0x1
    c53c:	f7ff ffae 	bl	c49c <_ZN3Led5setOnEi>
}
    c540:	46bd      	mov	sp, r7
    c542:	bd80      	pop	{r7, pc}

0000c544 <_Z10allumerLEDv>:
#include "leds.h"

// allume ou éteint une LED
void allumerLED()
    c544:	b580      	push	{r7, lr}
    c546:	af00      	add	r7, sp, #0
{
    Led::setOn(0);
    c548:	f04f 0000 	mov.w	r0, #0	; 0x0
    c54c:	f7ff ffa6 	bl	c49c <_ZN3Led5setOnEi>
}
    c550:	46bd      	mov	sp, r7
    c552:	bd80      	pop	{r7, pc}

0000c554 <_ZN18LigthBarrierSensor8getValueEv>:
    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de
    // retourner un true et que rien a été detecté au moins 8 fois pour retourner false.
    output = output ? !((counter & 0xff) == 0x00) : (counter & 0xff) == 0xff ;
}

Sensor::OutputSensor LigthBarrierSensor::getValue()
    c554:	b480      	push	{r7}
    c556:	b087      	sub	sp, #28
    c558:	af00      	add	r7, sp, #0
    c55a:	4602      	mov	r2, r0
    c55c:	6079      	str	r1, [r7, #4]
{
    OutputSensor outputR;
    outputR.type = LIMIT_SWITCH;
    c55e:	f04f 0302 	mov.w	r3, #2	; 0x2
    c562:	7013      	strb	r3, [r2, #0]
    outputR.f = 0;
    c564:	4b05      	ldr	r3, [pc, #20]	(c57c <_ZN18LigthBarrierSensor8getValueEv+0x28>)
    c566:	6053      	str	r3, [r2, #4]
    outputR.b = output;
    c568:	687b      	ldr	r3, [r7, #4]
    c56a:	7bdb      	ldrb	r3, [r3, #15]
    c56c:	7213      	strb	r3, [r2, #8]
    return outputR;
}
    c56e:	4610      	mov	r0, r2
    c570:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    c574:	46bd      	mov	sp, r7
    c576:	bc80      	pop	{r7}
    c578:	4770      	bx	lr
    c57a:	46c0      	nop			(mov r8, r8)
    c57c:	00000000 	.word	0x00000000

0000c580 <_ZN18LigthBarrierSensor7getNameEv>:

LigthBarrierSensor::LigthBarrierName LigthBarrierSensor::getName()
    c580:	b480      	push	{r7}
    c582:	b083      	sub	sp, #12
    c584:	af00      	add	r7, sp, #0
    c586:	6078      	str	r0, [r7, #4]
{
    return name;
    c588:	687b      	ldr	r3, [r7, #4]
    c58a:	7b9b      	ldrb	r3, [r3, #14]
}
    c58c:	4618      	mov	r0, r3
    c58e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c592:	46bd      	mov	sp, r7
    c594:	bc80      	pop	{r7}
    c596:	4770      	bx	lr

0000c598 <_ZN18LigthBarrierSensor11updateValueEv>:

LigthBarrierSensor::~LigthBarrierSensor()
{
}

void LigthBarrierSensor::updateValue()
    c598:	b590      	push	{r4, r7, lr}
    c59a:	b083      	sub	sp, #12
    c59c:	af00      	add	r7, sp, #0
    c59e:	6078      	str	r0, [r7, #4]
{
    counter <<=1;
    c5a0:	687b      	ldr	r3, [r7, #4]
    c5a2:	899b      	ldrh	r3, [r3, #12]
    c5a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c5a8:	b29b      	uxth	r3, r3
    c5aa:	687a      	ldr	r2, [r7, #4]
    c5ac:	8193      	strh	r3, [r2, #12]
    counter |= (GPIO_ReadInputDataBit(group,pin)==SET);
    c5ae:	687b      	ldr	r3, [r7, #4]
    c5b0:	899b      	ldrh	r3, [r3, #12]
    c5b2:	461c      	mov	r4, r3
    c5b4:	687b      	ldr	r3, [r7, #4]
    c5b6:	689a      	ldr	r2, [r3, #8]
    c5b8:	687b      	ldr	r3, [r7, #4]
    c5ba:	889b      	ldrh	r3, [r3, #4]
    c5bc:	4610      	mov	r0, r2
    c5be:	4619      	mov	r1, r3
    c5c0:	f7f5 f970 	bl	18a4 <GPIO_ReadInputDataBit>
    c5c4:	4603      	mov	r3, r0
    c5c6:	2b01      	cmp	r3, #1
    c5c8:	bf14      	ite	ne
    c5ca:	2300      	movne	r3, #0
    c5cc:	2301      	moveq	r3, #1
    c5ce:	4622      	mov	r2, r4
    c5d0:	ea42 0303 	orr.w	r3, r2, r3
    c5d4:	b29b      	uxth	r3, r3
    c5d6:	b29b      	uxth	r3, r3
    c5d8:	687a      	ldr	r2, [r7, #4]
    c5da:	8193      	strh	r3, [r2, #12]

    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de
    // retourner un true et que rien a été detecté au moins 8 fois pour retourner false.
    output = output ? !((counter & 0xff) == 0x00) : (counter & 0xff) == 0xff ;
    c5dc:	687b      	ldr	r3, [r7, #4]
    c5de:	7bdb      	ldrb	r3, [r3, #15]
    c5e0:	2b00      	cmp	r3, #0
    c5e2:	d00a      	beq.n	c5fa <_ZN18LigthBarrierSensor11updateValueEv+0x62>
    c5e4:	687b      	ldr	r3, [r7, #4]
    c5e6:	899b      	ldrh	r3, [r3, #12]
    c5e8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    c5ec:	2b00      	cmp	r3, #0
    c5ee:	bf0c      	ite	eq
    c5f0:	2300      	moveq	r3, #0
    c5f2:	2301      	movne	r3, #1
    c5f4:	b2db      	uxtb	r3, r3
    c5f6:	603b      	str	r3, [r7, #0]
    c5f8:	e009      	b.n	c60e <_ZN18LigthBarrierSensor11updateValueEv+0x76>
    c5fa:	687b      	ldr	r3, [r7, #4]
    c5fc:	899b      	ldrh	r3, [r3, #12]
    c5fe:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    c602:	2bff      	cmp	r3, #255
    c604:	bf14      	ite	ne
    c606:	2300      	movne	r3, #0
    c608:	2301      	moveq	r3, #1
    c60a:	b2db      	uxtb	r3, r3
    c60c:	603b      	str	r3, [r7, #0]
    c60e:	687a      	ldr	r2, [r7, #4]
    c610:	6839      	ldr	r1, [r7, #0]
    c612:	460b      	mov	r3, r1
    c614:	73d3      	strb	r3, [r2, #15]
}
    c616:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c61a:	46bd      	mov	sp, r7
    c61c:	bd90      	pop	{r4, r7, pc}
    c61e:	46c0      	nop			(mov r8, r8)

0000c620 <_ZN18LigthBarrierSensorD0Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LigthBarrierSensor::~LigthBarrierSensor()
    c620:	b580      	push	{r7, lr}
    c622:	b082      	sub	sp, #8
    c624:	af00      	add	r7, sp, #0
    c626:	6078      	str	r0, [r7, #4]
    c628:	687a      	ldr	r2, [r7, #4]
    c62a:	4b0a      	ldr	r3, [pc, #40]	(c654 <_ZN18LigthBarrierSensorD0Ev+0x34>)
    c62c:	6013      	str	r3, [r2, #0]
{
}
    c62e:	687b      	ldr	r3, [r7, #4]
    c630:	4618      	mov	r0, r3
    c632:	f7f9 fa0b 	bl	5a4c <_ZN6SensorD2Ev>
    c636:	f04f 0301 	mov.w	r3, #1	; 0x1
    c63a:	b2db      	uxtb	r3, r3
    c63c:	2b00      	cmp	r3, #0
    c63e:	d002      	beq.n	c646 <_ZN18LigthBarrierSensorD0Ev+0x26>
    c640:	6878      	ldr	r0, [r7, #4]
    c642:	f002 fb17 	bl	ec74 <_ZdlPv>
    c646:	687b      	ldr	r3, [r7, #4]
    c648:	4618      	mov	r0, r3
    c64a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c64e:	46bd      	mov	sp, r7
    c650:	bd80      	pop	{r7, pc}
    c652:	46c0      	nop			(mov r8, r8)
    c654:	00024050 	.word	0x00024050

0000c658 <_ZN18LigthBarrierSensorD1Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LigthBarrierSensor::~LigthBarrierSensor()
    c658:	b580      	push	{r7, lr}
    c65a:	b082      	sub	sp, #8
    c65c:	af00      	add	r7, sp, #0
    c65e:	6078      	str	r0, [r7, #4]
    c660:	687a      	ldr	r2, [r7, #4]
    c662:	4b0a      	ldr	r3, [pc, #40]	(c68c <_ZN18LigthBarrierSensorD1Ev+0x34>)
    c664:	6013      	str	r3, [r2, #0]
{
}
    c666:	687b      	ldr	r3, [r7, #4]
    c668:	4618      	mov	r0, r3
    c66a:	f7f9 f9ef 	bl	5a4c <_ZN6SensorD2Ev>
    c66e:	f04f 0300 	mov.w	r3, #0	; 0x0
    c672:	b2db      	uxtb	r3, r3
    c674:	2b00      	cmp	r3, #0
    c676:	d002      	beq.n	c67e <_ZN18LigthBarrierSensorD1Ev+0x26>
    c678:	6878      	ldr	r0, [r7, #4]
    c67a:	f002 fafb 	bl	ec74 <_ZdlPv>
    c67e:	687b      	ldr	r3, [r7, #4]
    c680:	4618      	mov	r0, r3
    c682:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c686:	46bd      	mov	sp, r7
    c688:	bd80      	pop	{r7, pc}
    c68a:	46c0      	nop			(mov r8, r8)
    c68c:	00024050 	.word	0x00024050

0000c690 <_ZN18LigthBarrierSensorD2Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LigthBarrierSensor::~LigthBarrierSensor()
    c690:	b580      	push	{r7, lr}
    c692:	b082      	sub	sp, #8
    c694:	af00      	add	r7, sp, #0
    c696:	6078      	str	r0, [r7, #4]
    c698:	687a      	ldr	r2, [r7, #4]
    c69a:	4b0a      	ldr	r3, [pc, #40]	(c6c4 <_ZN18LigthBarrierSensorD2Ev+0x34>)
    c69c:	6013      	str	r3, [r2, #0]
{
}
    c69e:	687b      	ldr	r3, [r7, #4]
    c6a0:	4618      	mov	r0, r3
    c6a2:	f7f9 f9d3 	bl	5a4c <_ZN6SensorD2Ev>
    c6a6:	f04f 0300 	mov.w	r3, #0	; 0x0
    c6aa:	b2db      	uxtb	r3, r3
    c6ac:	2b00      	cmp	r3, #0
    c6ae:	d002      	beq.n	c6b6 <_ZN18LigthBarrierSensorD2Ev+0x26>
    c6b0:	6878      	ldr	r0, [r7, #4]
    c6b2:	f002 fadf 	bl	ec74 <_ZdlPv>
    c6b6:	687b      	ldr	r3, [r7, #4]
    c6b8:	4618      	mov	r0, r3
    c6ba:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c6be:	46bd      	mov	sp, r7
    c6c0:	bd80      	pop	{r7, pc}
    c6c2:	46c0      	nop			(mov r8, r8)
    c6c4:	00024050 	.word	0x00024050

0000c6c8 <_ZN18LigthBarrierSensorC1ENS_16LigthBarrierNameEtP12GPIO_TypeDef>:
#include "ligthBarrierSensor.h"

#ifdef ROBOTHW

LigthBarrierSensor::LigthBarrierSensor(LigthBarrierName name, uint16_t pin, GPIO_TypeDef* group)
    c6c8:	b580      	push	{r7, lr}
    c6ca:	b086      	sub	sp, #24
    c6cc:	af00      	add	r7, sp, #0
    c6ce:	60f8      	str	r0, [r7, #12]
    c6d0:	607b      	str	r3, [r7, #4]
    c6d2:	460b      	mov	r3, r1
    c6d4:	72fb      	strb	r3, [r7, #11]
    c6d6:	4613      	mov	r3, r2
    c6d8:	813b      	strh	r3, [r7, #8]
    c6da:	68fb      	ldr	r3, [r7, #12]
    c6dc:	4618      	mov	r0, r3
    c6de:	f7f9 f965 	bl	59ac <_ZN6SensorC2Ev>
    c6e2:	68fa      	ldr	r2, [r7, #12]
    c6e4:	4b13      	ldr	r3, [pc, #76]	(c734 <_ZN18LigthBarrierSensorC1ENS_16LigthBarrierNameEtP12GPIO_TypeDef+0x6c>)
    c6e6:	6013      	str	r3, [r2, #0]
{
    this->pin = pin;
    c6e8:	68fa      	ldr	r2, [r7, #12]
    c6ea:	893b      	ldrh	r3, [r7, #8]
    c6ec:	8093      	strh	r3, [r2, #4]
    this->group = group;
    c6ee:	68fa      	ldr	r2, [r7, #12]
    c6f0:	687b      	ldr	r3, [r7, #4]
    c6f2:	6093      	str	r3, [r2, #8]
    counter = 0;
    c6f4:	68fa      	ldr	r2, [r7, #12]
    c6f6:	f04f 0300 	mov.w	r3, #0	; 0x0
    c6fa:	8193      	strh	r3, [r2, #12]
    this->name = name;
    c6fc:	68fa      	ldr	r2, [r7, #12]
    c6fe:	7afb      	ldrb	r3, [r7, #11]
    c700:	7393      	strb	r3, [r2, #14]
    output = false;
    c702:	68fa      	ldr	r2, [r7, #12]
    c704:	f04f 0300 	mov.w	r3, #0	; 0x0
    c708:	73d3      	strb	r3, [r2, #15]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    c70a:	893b      	ldrh	r3, [r7, #8]
    c70c:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    c70e:	f04f 0348 	mov.w	r3, #72	; 0x48
    c712:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c714:	f04f 0303 	mov.w	r3, #3	; 0x3
    c718:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    c71a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c71e:	6878      	ldr	r0, [r7, #4]
    c720:	4619      	mov	r1, r3
    c722:	f7f4 ffc5 	bl	16b0 <GPIO_Init>
}
    c726:	68fb      	ldr	r3, [r7, #12]
    c728:	4618      	mov	r0, r3
    c72a:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c72e:	46bd      	mov	sp, r7
    c730:	bd80      	pop	{r7, pc}
    c732:	46c0      	nop			(mov r8, r8)
    c734:	00024050 	.word	0x00024050

0000c738 <_ZN18LigthBarrierSensorC2ENS_16LigthBarrierNameEtP12GPIO_TypeDef>:
#include "ligthBarrierSensor.h"

#ifdef ROBOTHW

LigthBarrierSensor::LigthBarrierSensor(LigthBarrierName name, uint16_t pin, GPIO_TypeDef* group)
    c738:	b580      	push	{r7, lr}
    c73a:	b086      	sub	sp, #24
    c73c:	af00      	add	r7, sp, #0
    c73e:	60f8      	str	r0, [r7, #12]
    c740:	607b      	str	r3, [r7, #4]
    c742:	460b      	mov	r3, r1
    c744:	72fb      	strb	r3, [r7, #11]
    c746:	4613      	mov	r3, r2
    c748:	813b      	strh	r3, [r7, #8]
    c74a:	68fb      	ldr	r3, [r7, #12]
    c74c:	4618      	mov	r0, r3
    c74e:	f7f9 f92d 	bl	59ac <_ZN6SensorC2Ev>
    c752:	68fa      	ldr	r2, [r7, #12]
    c754:	4b13      	ldr	r3, [pc, #76]	(c7a4 <_ZN18LigthBarrierSensorC2ENS_16LigthBarrierNameEtP12GPIO_TypeDef+0x6c>)
    c756:	6013      	str	r3, [r2, #0]
{
    this->pin = pin;
    c758:	68fa      	ldr	r2, [r7, #12]
    c75a:	893b      	ldrh	r3, [r7, #8]
    c75c:	8093      	strh	r3, [r2, #4]
    this->group = group;
    c75e:	68fa      	ldr	r2, [r7, #12]
    c760:	687b      	ldr	r3, [r7, #4]
    c762:	6093      	str	r3, [r2, #8]
    counter = 0;
    c764:	68fa      	ldr	r2, [r7, #12]
    c766:	f04f 0300 	mov.w	r3, #0	; 0x0
    c76a:	8193      	strh	r3, [r2, #12]
    this->name = name;
    c76c:	68fa      	ldr	r2, [r7, #12]
    c76e:	7afb      	ldrb	r3, [r7, #11]
    c770:	7393      	strb	r3, [r2, #14]
    output = false;
    c772:	68fa      	ldr	r2, [r7, #12]
    c774:	f04f 0300 	mov.w	r3, #0	; 0x0
    c778:	73d3      	strb	r3, [r2, #15]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    c77a:	893b      	ldrh	r3, [r7, #8]
    c77c:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    c77e:	f04f 0348 	mov.w	r3, #72	; 0x48
    c782:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c784:	f04f 0303 	mov.w	r3, #3	; 0x3
    c788:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    c78a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c78e:	6878      	ldr	r0, [r7, #4]
    c790:	4619      	mov	r1, r3
    c792:	f7f4 ff8d 	bl	16b0 <GPIO_Init>
}
    c796:	68fb      	ldr	r3, [r7, #12]
    c798:	4618      	mov	r0, r3
    c79a:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c79e:	46bd      	mov	sp, r7
    c7a0:	bd80      	pop	{r7, pc}
    c7a2:	46c0      	nop			(mov r8, r8)
    c7a4:	00024050 	.word	0x00024050

0000c7a8 <_ZN17LimitSwitchSensor8getValueEv>:
    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de retourner un true
    // et que rien a été detecté au moins 8 fois pour retourner false.
    output = (counter == 0xff);/*output ? !((counter & 0xff) == 0x00) :*/
}

Sensor::OutputSensor LimitSwitchSensor::getValue()
    c7a8:	b480      	push	{r7}
    c7aa:	b087      	sub	sp, #28
    c7ac:	af00      	add	r7, sp, #0
    c7ae:	4602      	mov	r2, r0
    c7b0:	6079      	str	r1, [r7, #4]
{
    OutputSensor outputR;
    outputR.type = LIMIT_SWITCH;
    c7b2:	f04f 0302 	mov.w	r3, #2	; 0x2
    c7b6:	7013      	strb	r3, [r2, #0]
    outputR.f = 0;
    c7b8:	4b05      	ldr	r3, [pc, #20]	(c7d0 <_ZN17LimitSwitchSensor8getValueEv+0x28>)
    c7ba:	6053      	str	r3, [r2, #4]
    outputR.b = this->output;
    c7bc:	687b      	ldr	r3, [r7, #4]
    c7be:	7b9b      	ldrb	r3, [r3, #14]
    c7c0:	7213      	strb	r3, [r2, #8]
    return outputR;
}
    c7c2:	4610      	mov	r0, r2
    c7c4:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    c7c8:	46bd      	mov	sp, r7
    c7ca:	bc80      	pop	{r7}
    c7cc:	4770      	bx	lr
    c7ce:	46c0      	nop			(mov r8, r8)
    c7d0:	00000000 	.word	0x00000000

0000c7d4 <_ZN17LimitSwitchSensor7getNameEv>:

LimitSwitchSensor::LimitSwitchName LimitSwitchSensor::getName()
    c7d4:	b480      	push	{r7}
    c7d6:	b083      	sub	sp, #12
    c7d8:	af00      	add	r7, sp, #0
    c7da:	6078      	str	r0, [r7, #4]
{
    return name;
    c7dc:	687b      	ldr	r3, [r7, #4]
    c7de:	7b5b      	ldrb	r3, [r3, #13]
}
    c7e0:	4618      	mov	r0, r3
    c7e2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c7e6:	46bd      	mov	sp, r7
    c7e8:	bc80      	pop	{r7}
    c7ea:	4770      	bx	lr

0000c7ec <_ZN17LimitSwitchSensor11updateValueEv>:

LimitSwitchSensor::~LimitSwitchSensor()
{
}

void  LimitSwitchSensor::updateValue()
    c7ec:	b590      	push	{r4, r7, lr}
    c7ee:	b083      	sub	sp, #12
    c7f0:	af00      	add	r7, sp, #0
    c7f2:	6078      	str	r0, [r7, #4]
{
    counter <<= 1;
    c7f4:	687b      	ldr	r3, [r7, #4]
    c7f6:	7b1b      	ldrb	r3, [r3, #12]
    c7f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c7fc:	b2db      	uxtb	r3, r3
    c7fe:	687a      	ldr	r2, [r7, #4]
    c800:	7313      	strb	r3, [r2, #12]
    counter |= (GPIO_ReadInputDataBit(group,pin)== Bit_SET);
    c802:	687b      	ldr	r3, [r7, #4]
    c804:	7b1b      	ldrb	r3, [r3, #12]
    c806:	461c      	mov	r4, r3
    c808:	687b      	ldr	r3, [r7, #4]
    c80a:	689a      	ldr	r2, [r3, #8]
    c80c:	687b      	ldr	r3, [r7, #4]
    c80e:	889b      	ldrh	r3, [r3, #4]
    c810:	4610      	mov	r0, r2
    c812:	4619      	mov	r1, r3
    c814:	f7f5 f846 	bl	18a4 <GPIO_ReadInputDataBit>
    c818:	4603      	mov	r3, r0
    c81a:	2b01      	cmp	r3, #1
    c81c:	bf14      	ite	ne
    c81e:	2300      	movne	r3, #0
    c820:	2301      	moveq	r3, #1
    c822:	4622      	mov	r2, r4
    c824:	ea42 0303 	orr.w	r3, r2, r3
    c828:	b2db      	uxtb	r3, r3
    c82a:	b2db      	uxtb	r3, r3
    c82c:	687a      	ldr	r2, [r7, #4]
    c82e:	7313      	strb	r3, [r2, #12]

    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de retourner un true
    // et que rien a été detecté au moins 8 fois pour retourner false.
    output = (counter == 0xff);/*output ? !((counter & 0xff) == 0x00) :*/
    c830:	687b      	ldr	r3, [r7, #4]
    c832:	7b1b      	ldrb	r3, [r3, #12]
    c834:	2bff      	cmp	r3, #255
    c836:	bf14      	ite	ne
    c838:	2300      	movne	r3, #0
    c83a:	2301      	moveq	r3, #1
    c83c:	b2db      	uxtb	r3, r3
    c83e:	687a      	ldr	r2, [r7, #4]
    c840:	7393      	strb	r3, [r2, #14]
}
    c842:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c846:	46bd      	mov	sp, r7
    c848:	bd90      	pop	{r4, r7, pc}
    c84a:	46c0      	nop			(mov r8, r8)

0000c84c <_ZN17LimitSwitchSensorD0Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LimitSwitchSensor::~LimitSwitchSensor()
    c84c:	b580      	push	{r7, lr}
    c84e:	b082      	sub	sp, #8
    c850:	af00      	add	r7, sp, #0
    c852:	6078      	str	r0, [r7, #4]
    c854:	687a      	ldr	r2, [r7, #4]
    c856:	4b0a      	ldr	r3, [pc, #40]	(c880 <_ZN17LimitSwitchSensorD0Ev+0x34>)
    c858:	6013      	str	r3, [r2, #0]
{
}
    c85a:	687b      	ldr	r3, [r7, #4]
    c85c:	4618      	mov	r0, r3
    c85e:	f7f9 f8f5 	bl	5a4c <_ZN6SensorD2Ev>
    c862:	f04f 0301 	mov.w	r3, #1	; 0x1
    c866:	b2db      	uxtb	r3, r3
    c868:	2b00      	cmp	r3, #0
    c86a:	d002      	beq.n	c872 <_ZN17LimitSwitchSensorD0Ev+0x26>
    c86c:	6878      	ldr	r0, [r7, #4]
    c86e:	f002 fa01 	bl	ec74 <_ZdlPv>
    c872:	687b      	ldr	r3, [r7, #4]
    c874:	4618      	mov	r0, r3
    c876:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c87a:	46bd      	mov	sp, r7
    c87c:	bd80      	pop	{r7, pc}
    c87e:	46c0      	nop			(mov r8, r8)
    c880:	00024068 	.word	0x00024068

0000c884 <_ZN17LimitSwitchSensorD1Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LimitSwitchSensor::~LimitSwitchSensor()
    c884:	b580      	push	{r7, lr}
    c886:	b082      	sub	sp, #8
    c888:	af00      	add	r7, sp, #0
    c88a:	6078      	str	r0, [r7, #4]
    c88c:	687a      	ldr	r2, [r7, #4]
    c88e:	4b0a      	ldr	r3, [pc, #40]	(c8b8 <_ZN17LimitSwitchSensorD1Ev+0x34>)
    c890:	6013      	str	r3, [r2, #0]
{
}
    c892:	687b      	ldr	r3, [r7, #4]
    c894:	4618      	mov	r0, r3
    c896:	f7f9 f8d9 	bl	5a4c <_ZN6SensorD2Ev>
    c89a:	f04f 0300 	mov.w	r3, #0	; 0x0
    c89e:	b2db      	uxtb	r3, r3
    c8a0:	2b00      	cmp	r3, #0
    c8a2:	d002      	beq.n	c8aa <_ZN17LimitSwitchSensorD1Ev+0x26>
    c8a4:	6878      	ldr	r0, [r7, #4]
    c8a6:	f002 f9e5 	bl	ec74 <_ZdlPv>
    c8aa:	687b      	ldr	r3, [r7, #4]
    c8ac:	4618      	mov	r0, r3
    c8ae:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c8b2:	46bd      	mov	sp, r7
    c8b4:	bd80      	pop	{r7, pc}
    c8b6:	46c0      	nop			(mov r8, r8)
    c8b8:	00024068 	.word	0x00024068

0000c8bc <_ZN17LimitSwitchSensorD2Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LimitSwitchSensor::~LimitSwitchSensor()
    c8bc:	b580      	push	{r7, lr}
    c8be:	b082      	sub	sp, #8
    c8c0:	af00      	add	r7, sp, #0
    c8c2:	6078      	str	r0, [r7, #4]
    c8c4:	687a      	ldr	r2, [r7, #4]
    c8c6:	4b0a      	ldr	r3, [pc, #40]	(c8f0 <_ZN17LimitSwitchSensorD2Ev+0x34>)
    c8c8:	6013      	str	r3, [r2, #0]
{
}
    c8ca:	687b      	ldr	r3, [r7, #4]
    c8cc:	4618      	mov	r0, r3
    c8ce:	f7f9 f8bd 	bl	5a4c <_ZN6SensorD2Ev>
    c8d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    c8d6:	b2db      	uxtb	r3, r3
    c8d8:	2b00      	cmp	r3, #0
    c8da:	d002      	beq.n	c8e2 <_ZN17LimitSwitchSensorD2Ev+0x26>
    c8dc:	6878      	ldr	r0, [r7, #4]
    c8de:	f002 f9c9 	bl	ec74 <_ZdlPv>
    c8e2:	687b      	ldr	r3, [r7, #4]
    c8e4:	4618      	mov	r0, r3
    c8e6:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c8ea:	46bd      	mov	sp, r7
    c8ec:	bd80      	pop	{r7, pc}
    c8ee:	46c0      	nop			(mov r8, r8)
    c8f0:	00024068 	.word	0x00024068

0000c8f4 <_ZN17LimitSwitchSensorC1ENS_15LimitSwitchNameEtP12GPIO_TypeDef>:
#include "limitSwitchSensor.h"

#ifdef ROBOTHW
LimitSwitchSensor::LimitSwitchSensor(LimitSwitchSensor::LimitSwitchName name, uint16_t pin, GPIO_TypeDef* group)
    c8f4:	b580      	push	{r7, lr}
    c8f6:	b086      	sub	sp, #24
    c8f8:	af00      	add	r7, sp, #0
    c8fa:	60f8      	str	r0, [r7, #12]
    c8fc:	607b      	str	r3, [r7, #4]
    c8fe:	460b      	mov	r3, r1
    c900:	72fb      	strb	r3, [r7, #11]
    c902:	4613      	mov	r3, r2
    c904:	813b      	strh	r3, [r7, #8]
    c906:	68fb      	ldr	r3, [r7, #12]
    c908:	4618      	mov	r0, r3
    c90a:	f7f9 f84f 	bl	59ac <_ZN6SensorC2Ev>
    c90e:	68fa      	ldr	r2, [r7, #12]
    c910:	4b13      	ldr	r3, [pc, #76]	(c960 <_ZN17LimitSwitchSensorC1ENS_15LimitSwitchNameEtP12GPIO_TypeDef+0x6c>)
    c912:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    c914:	68fa      	ldr	r2, [r7, #12]
    c916:	7afb      	ldrb	r3, [r7, #11]
    c918:	7353      	strb	r3, [r2, #13]
    this->pin = pin;
    c91a:	68fa      	ldr	r2, [r7, #12]
    c91c:	893b      	ldrh	r3, [r7, #8]
    c91e:	8093      	strh	r3, [r2, #4]
    this->group = group;
    c920:	68fa      	ldr	r2, [r7, #12]
    c922:	687b      	ldr	r3, [r7, #4]
    c924:	6093      	str	r3, [r2, #8]
    counter = 0x0;
    c926:	68fa      	ldr	r2, [r7, #12]
    c928:	f04f 0300 	mov.w	r3, #0	; 0x0
    c92c:	7313      	strb	r3, [r2, #12]
    output = false;
    c92e:	68fa      	ldr	r2, [r7, #12]
    c930:	f04f 0300 	mov.w	r3, #0	; 0x0
    c934:	7393      	strb	r3, [r2, #14]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    c936:	893b      	ldrh	r3, [r7, #8]
    c938:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    c93a:	f04f 0304 	mov.w	r3, #4	; 0x4
    c93e:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c940:	f04f 0303 	mov.w	r3, #3	; 0x3
    c944:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    c946:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c94a:	6878      	ldr	r0, [r7, #4]
    c94c:	4619      	mov	r1, r3
    c94e:	f7f4 feaf 	bl	16b0 <GPIO_Init>
}
    c952:	68fb      	ldr	r3, [r7, #12]
    c954:	4618      	mov	r0, r3
    c956:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c95a:	46bd      	mov	sp, r7
    c95c:	bd80      	pop	{r7, pc}
    c95e:	46c0      	nop			(mov r8, r8)
    c960:	00024068 	.word	0x00024068

0000c964 <_ZN17LimitSwitchSensorC2ENS_15LimitSwitchNameEtP12GPIO_TypeDef>:
#include "limitSwitchSensor.h"

#ifdef ROBOTHW
LimitSwitchSensor::LimitSwitchSensor(LimitSwitchSensor::LimitSwitchName name, uint16_t pin, GPIO_TypeDef* group)
    c964:	b580      	push	{r7, lr}
    c966:	b086      	sub	sp, #24
    c968:	af00      	add	r7, sp, #0
    c96a:	60f8      	str	r0, [r7, #12]
    c96c:	607b      	str	r3, [r7, #4]
    c96e:	460b      	mov	r3, r1
    c970:	72fb      	strb	r3, [r7, #11]
    c972:	4613      	mov	r3, r2
    c974:	813b      	strh	r3, [r7, #8]
    c976:	68fb      	ldr	r3, [r7, #12]
    c978:	4618      	mov	r0, r3
    c97a:	f7f9 f817 	bl	59ac <_ZN6SensorC2Ev>
    c97e:	68fa      	ldr	r2, [r7, #12]
    c980:	4b13      	ldr	r3, [pc, #76]	(c9d0 <_ZN17LimitSwitchSensorC2ENS_15LimitSwitchNameEtP12GPIO_TypeDef+0x6c>)
    c982:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    c984:	68fa      	ldr	r2, [r7, #12]
    c986:	7afb      	ldrb	r3, [r7, #11]
    c988:	7353      	strb	r3, [r2, #13]
    this->pin = pin;
    c98a:	68fa      	ldr	r2, [r7, #12]
    c98c:	893b      	ldrh	r3, [r7, #8]
    c98e:	8093      	strh	r3, [r2, #4]
    this->group = group;
    c990:	68fa      	ldr	r2, [r7, #12]
    c992:	687b      	ldr	r3, [r7, #4]
    c994:	6093      	str	r3, [r2, #8]
    counter = 0x0;
    c996:	68fa      	ldr	r2, [r7, #12]
    c998:	f04f 0300 	mov.w	r3, #0	; 0x0
    c99c:	7313      	strb	r3, [r2, #12]
    output = false;
    c99e:	68fa      	ldr	r2, [r7, #12]
    c9a0:	f04f 0300 	mov.w	r3, #0	; 0x0
    c9a4:	7393      	strb	r3, [r2, #14]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    c9a6:	893b      	ldrh	r3, [r7, #8]
    c9a8:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    c9aa:	f04f 0304 	mov.w	r3, #4	; 0x4
    c9ae:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c9b0:	f04f 0303 	mov.w	r3, #3	; 0x3
    c9b4:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    c9b6:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c9ba:	6878      	ldr	r0, [r7, #4]
    c9bc:	4619      	mov	r1, r3
    c9be:	f7f4 fe77 	bl	16b0 <GPIO_Init>
}
    c9c2:	68fb      	ldr	r3, [r7, #12]
    c9c4:	4618      	mov	r0, r3
    c9c6:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c9ca:	46bd      	mov	sp, r7
    c9cc:	bd80      	pop	{r7, pc}
    c9ce:	46c0      	nop			(mov r8, r8)
    c9d0:	00024068 	.word	0x00024068

0000c9d4 <_ZN10PWMHandler13setPulseWidthEt>:
{
    setPulseWidth(dutyCycle*timer->getPeriod());
}

// Change la taille de l’impulsion.
void PWMHandler::setPulseWidth(uint16_t pulseWidth)
    c9d4:	b580      	push	{r7, lr}
    c9d6:	b084      	sub	sp, #16
    c9d8:	af00      	add	r7, sp, #0
    c9da:	6078      	str	r0, [r7, #4]
    c9dc:	460b      	mov	r3, r1
    c9de:	807b      	strh	r3, [r7, #2]
{
    TIM_TypeDef* TIMx = timer->getTIMx();
    c9e0:	687b      	ldr	r3, [r7, #4]
    c9e2:	681b      	ldr	r3, [r3, #0]
    c9e4:	4618      	mov	r0, r3
    c9e6:	f000 fe63 	bl	d6b0 <_ZN5Timer7getTIMxEv>
    c9ea:	4603      	mov	r3, r0
    c9ec:	60fb      	str	r3, [r7, #12]
    if(OCx == 1)
    c9ee:	687b      	ldr	r3, [r7, #4]
    c9f0:	791b      	ldrb	r3, [r3, #4]
    c9f2:	2b01      	cmp	r3, #1
    c9f4:	d103      	bne.n	c9fe <_ZN10PWMHandler13setPulseWidthEt+0x2a>
        TIMx->CCR1 = pulseWidth;
    c9f6:	68fa      	ldr	r2, [r7, #12]
    c9f8:	887b      	ldrh	r3, [r7, #2]
    c9fa:	8693      	strh	r3, [r2, #52]
    c9fc:	e017      	b.n	ca2e <_ZN10PWMHandler13setPulseWidthEt+0x5a>
    else if(OCx == 2)
    c9fe:	687b      	ldr	r3, [r7, #4]
    ca00:	791b      	ldrb	r3, [r3, #4]
    ca02:	2b02      	cmp	r3, #2
    ca04:	d103      	bne.n	ca0e <_ZN10PWMHandler13setPulseWidthEt+0x3a>
        TIMx->CCR2 = pulseWidth;
    ca06:	68fa      	ldr	r2, [r7, #12]
    ca08:	887b      	ldrh	r3, [r7, #2]
    ca0a:	8713      	strh	r3, [r2, #56]
    ca0c:	e00f      	b.n	ca2e <_ZN10PWMHandler13setPulseWidthEt+0x5a>
    else if(OCx == 3)
    ca0e:	687b      	ldr	r3, [r7, #4]
    ca10:	791b      	ldrb	r3, [r3, #4]
    ca12:	2b03      	cmp	r3, #3
    ca14:	d103      	bne.n	ca1e <_ZN10PWMHandler13setPulseWidthEt+0x4a>
        TIMx->CCR3 = pulseWidth;
    ca16:	68fa      	ldr	r2, [r7, #12]
    ca18:	887b      	ldrh	r3, [r7, #2]
    ca1a:	8793      	strh	r3, [r2, #60]
    ca1c:	e007      	b.n	ca2e <_ZN10PWMHandler13setPulseWidthEt+0x5a>
    else if(OCx == 4)
    ca1e:	687b      	ldr	r3, [r7, #4]
    ca20:	791b      	ldrb	r3, [r3, #4]
    ca22:	2b04      	cmp	r3, #4
    ca24:	d103      	bne.n	ca2e <_ZN10PWMHandler13setPulseWidthEt+0x5a>
        TIMx->CCR4 = pulseWidth;
    ca26:	68fa      	ldr	r2, [r7, #12]
    ca28:	887b      	ldrh	r3, [r7, #2]
    ca2a:	f8a2 3040 	strh.w	r3, [r2, #64]
}
    ca2e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ca32:	46bd      	mov	sp, r7
    ca34:	bd80      	pop	{r7, pc}
    ca36:	46c0      	nop			(mov r8, r8)

0000ca38 <_ZN10PWMHandlerD1Ev>:
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    TIM_Cmd(TIMx, ENABLE);
}

// Stoppe la génération de PWM et détruit le générateur de PWM
PWMHandler::~PWMHandler()
    ca38:	b580      	push	{r7, lr}
    ca3a:	b082      	sub	sp, #8
    ca3c:	af00      	add	r7, sp, #0
    ca3e:	6078      	str	r0, [r7, #4]
{
    setPulseWidth(0);
    ca40:	6878      	ldr	r0, [r7, #4]
    ca42:	f04f 0100 	mov.w	r1, #0	; 0x0
    ca46:	f7ff ffc5 	bl	c9d4 <_ZN10PWMHandler13setPulseWidthEt>
}
    ca4a:	687b      	ldr	r3, [r7, #4]
    ca4c:	4618      	mov	r0, r3
    ca4e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ca52:	46bd      	mov	sp, r7
    ca54:	bd80      	pop	{r7, pc}
    ca56:	46c0      	nop			(mov r8, r8)

0000ca58 <_ZN10PWMHandlerD2Ev>:
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    TIM_Cmd(TIMx, ENABLE);
}

// Stoppe la génération de PWM et détruit le générateur de PWM
PWMHandler::~PWMHandler()
    ca58:	b580      	push	{r7, lr}
    ca5a:	b082      	sub	sp, #8
    ca5c:	af00      	add	r7, sp, #0
    ca5e:	6078      	str	r0, [r7, #4]
{
    setPulseWidth(0);
    ca60:	6878      	ldr	r0, [r7, #4]
    ca62:	f04f 0100 	mov.w	r1, #0	; 0x0
    ca66:	f7ff ffb5 	bl	c9d4 <_ZN10PWMHandler13setPulseWidthEt>
}
    ca6a:	687b      	ldr	r3, [r7, #4]
    ca6c:	4618      	mov	r0, r3
    ca6e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ca72:	46bd      	mov	sp, r7
    ca74:	bd80      	pop	{r7, pc}
    ca76:	46c0      	nop			(mov r8, r8)

0000ca78 <_ZN10PWMHandler12setDutyCycleEf>:

//Change le rapport cyclique
void PWMHandler::setDutyCycle(float dutyCycle)
    ca78:	b580      	push	{r7, lr}
    ca7a:	b082      	sub	sp, #8
    ca7c:	af00      	add	r7, sp, #0
    ca7e:	6078      	str	r0, [r7, #4]
    ca80:	6039      	str	r1, [r7, #0]
{
    setPulseWidth(dutyCycle*timer->getPeriod());
    ca82:	687b      	ldr	r3, [r7, #4]
    ca84:	681b      	ldr	r3, [r3, #0]
    ca86:	4618      	mov	r0, r3
    ca88:	f000 fe1e 	bl	d6c8 <_ZN5Timer9getPeriodEv>
    ca8c:	4603      	mov	r3, r0
    ca8e:	4618      	mov	r0, r3
    ca90:	f010 f9d2 	bl	1ce38 <__aeabi_i2f>
    ca94:	4603      	mov	r3, r0
    ca96:	4618      	mov	r0, r3
    ca98:	6839      	ldr	r1, [r7, #0]
    ca9a:	f010 fa21 	bl	1cee0 <__aeabi_fmul>
    ca9e:	4603      	mov	r3, r0
    caa0:	4618      	mov	r0, r3
    caa2:	f010 fc07 	bl	1d2b4 <__aeabi_f2uiz>
    caa6:	4603      	mov	r3, r0
    caa8:	b29b      	uxth	r3, r3
    caaa:	6878      	ldr	r0, [r7, #4]
    caac:	4619      	mov	r1, r3
    caae:	f7ff ff91 	bl	c9d4 <_ZN10PWMHandler13setPulseWidthEt>
}
    cab2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    cab6:	46bd      	mov	sp, r7
    cab8:	bd80      	pop	{r7, pc}
    caba:	46c0      	nop			(mov r8, r8)

0000cabc <_ZN10PWMHandlerC1EP5Timerh>:
#include "pwmHandler.h"

// Initialise un nouveau générateur de PWM sur la sortie OCx du timer TIMx.
PWMHandler::PWMHandler(Timer* tim, unsigned char OCx)
    cabc:	b580      	push	{r7, lr}
    cabe:	b08a      	sub	sp, #40
    cac0:	af00      	add	r7, sp, #0
    cac2:	60f8      	str	r0, [r7, #12]
    cac4:	60b9      	str	r1, [r7, #8]
    cac6:	4613      	mov	r3, r2
    cac8:	71fb      	strb	r3, [r7, #7]
{
    timer = tim;
    caca:	68fa      	ldr	r2, [r7, #12]
    cacc:	68bb      	ldr	r3, [r7, #8]
    cace:	6013      	str	r3, [r2, #0]
    this->OCx = OCx;
    cad0:	68fa      	ldr	r2, [r7, #12]
    cad2:	79fb      	ldrb	r3, [r7, #7]
    cad4:	7113      	strb	r3, [r2, #4]
    TIM_OCInitTypeDef timOCInit;
    timOCInit.TIM_OCMode = TIM_OCMode_PWM1; //TIM_OCMode_PWM2;
    cad6:	f04f 0360 	mov.w	r3, #96	; 0x60
    cada:	82bb      	strh	r3, [r7, #20]
    timOCInit.TIM_OutputState = TIM_OutputState_Enable;
    cadc:	f04f 0301 	mov.w	r3, #1	; 0x1
    cae0:	82fb      	strh	r3, [r7, #22]
    timOCInit.TIM_Pulse = 0; // rapport cyclique
    cae2:	f04f 0300 	mov.w	r3, #0	; 0x0
    cae6:	837b      	strh	r3, [r7, #26]
    timOCInit.TIM_OCPolarity = TIM_OCPolarity_High;
    cae8:	f04f 0300 	mov.w	r3, #0	; 0x0
    caec:	83bb      	strh	r3, [r7, #28]

    TIM_TypeDef* TIMx = tim->getTIMx();
    caee:	68b8      	ldr	r0, [r7, #8]
    caf0:	f000 fdde 	bl	d6b0 <_ZN5Timer7getTIMxEv>
    caf4:	4603      	mov	r3, r0
    caf6:	627b      	str	r3, [r7, #36]

    switch(OCx)
    caf8:	79fb      	ldrb	r3, [r7, #7]
    cafa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    cafe:	2b03      	cmp	r3, #3
    cb00:	d839      	bhi.n	cb76 <_ZN10PWMHandlerC1EP5Timerh+0xba>
    cb02:	a201      	add	r2, pc, #4	(adr r2, cb08 <_ZN10PWMHandlerC1EP5Timerh+0x4c>)
    cb04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cb08:	0000cb19 	.word	0x0000cb19
    cb0c:	0000cb31 	.word	0x0000cb31
    cb10:	0000cb49 	.word	0x0000cb49
    cb14:	0000cb61 	.word	0x0000cb61
    {
        case 1:
            TIM_OC1Init(TIMx, &timOCInit);
    cb18:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cb1c:	6a78      	ldr	r0, [r7, #36]
    cb1e:	4619      	mov	r1, r3
    cb20:	f7f5 fec6 	bl	28b0 <TIM_OC1Init>
            TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
    cb24:	6a78      	ldr	r0, [r7, #36]
    cb26:	f04f 0108 	mov.w	r1, #8	; 0x8
    cb2a:	f7f6 fddb 	bl	36e4 <TIM_OC1PreloadConfig>
    cb2e:	e022      	b.n	cb76 <_ZN10PWMHandlerC1EP5Timerh+0xba>
            break;
        case 2:
            TIM_OC2Init(TIMx, &timOCInit);
    cb30:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cb34:	6a78      	ldr	r0, [r7, #36]
    cb36:	4619      	mov	r1, r3
    cb38:	f7f5 ff48 	bl	29cc <TIM_OC2Init>
            TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
    cb3c:	6a78      	ldr	r0, [r7, #36]
    cb3e:	f04f 0108 	mov.w	r1, #8	; 0x8
    cb42:	f7f6 fded 	bl	3720 <TIM_OC2PreloadConfig>
    cb46:	e016      	b.n	cb76 <_ZN10PWMHandlerC1EP5Timerh+0xba>
            break;
        case 3:
            TIM_OC3Init(TIMx, &timOCInit);
    cb48:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cb4c:	6a78      	ldr	r0, [r7, #36]
    cb4e:	4619      	mov	r1, r3
    cb50:	f7f5 ffde 	bl	2b10 <TIM_OC3Init>
            TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
    cb54:	6a78      	ldr	r0, [r7, #36]
    cb56:	f04f 0108 	mov.w	r1, #8	; 0x8
    cb5a:	f7f6 fe01 	bl	3760 <TIM_OC3PreloadConfig>
    cb5e:	e00a      	b.n	cb76 <_ZN10PWMHandlerC1EP5Timerh+0xba>
            break;
        case 4:
            TIM_OC4Init(TIMx, &timOCInit);
    cb60:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cb64:	6a78      	ldr	r0, [r7, #36]
    cb66:	4619      	mov	r1, r3
    cb68:	f7f6 f872 	bl	2c50 <TIM_OC4Init>
            TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
    cb6c:	6a78      	ldr	r0, [r7, #36]
    cb6e:	f04f 0108 	mov.w	r1, #8	; 0x8
    cb72:	f7f6 fe13 	bl	379c <TIM_OC4PreloadConfig>
            break;
    }
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    cb76:	6a78      	ldr	r0, [r7, #36]
    cb78:	f04f 0101 	mov.w	r1, #1	; 0x1
    cb7c:	f7f6 fd1a 	bl	35b4 <TIM_ARRPreloadConfig>
    TIM_Cmd(TIMx, ENABLE);
    cb80:	6a78      	ldr	r0, [r7, #36]
    cb82:	f04f 0101 	mov.w	r1, #1	; 0x1
    cb86:	f7f6 fa4f 	bl	3028 <TIM_Cmd>
}
    cb8a:	68fb      	ldr	r3, [r7, #12]
    cb8c:	4618      	mov	r0, r3
    cb8e:	f107 0728 	add.w	r7, r7, #40	; 0x28
    cb92:	46bd      	mov	sp, r7
    cb94:	bd80      	pop	{r7, pc}
    cb96:	46c0      	nop			(mov r8, r8)

0000cb98 <_ZN10PWMHandlerC2EP5Timerh>:
#include "pwmHandler.h"

// Initialise un nouveau générateur de PWM sur la sortie OCx du timer TIMx.
PWMHandler::PWMHandler(Timer* tim, unsigned char OCx)
    cb98:	b580      	push	{r7, lr}
    cb9a:	b08a      	sub	sp, #40
    cb9c:	af00      	add	r7, sp, #0
    cb9e:	60f8      	str	r0, [r7, #12]
    cba0:	60b9      	str	r1, [r7, #8]
    cba2:	4613      	mov	r3, r2
    cba4:	71fb      	strb	r3, [r7, #7]
{
    timer = tim;
    cba6:	68fa      	ldr	r2, [r7, #12]
    cba8:	68bb      	ldr	r3, [r7, #8]
    cbaa:	6013      	str	r3, [r2, #0]
    this->OCx = OCx;
    cbac:	68fa      	ldr	r2, [r7, #12]
    cbae:	79fb      	ldrb	r3, [r7, #7]
    cbb0:	7113      	strb	r3, [r2, #4]
    TIM_OCInitTypeDef timOCInit;
    timOCInit.TIM_OCMode = TIM_OCMode_PWM1; //TIM_OCMode_PWM2;
    cbb2:	f04f 0360 	mov.w	r3, #96	; 0x60
    cbb6:	82bb      	strh	r3, [r7, #20]
    timOCInit.TIM_OutputState = TIM_OutputState_Enable;
    cbb8:	f04f 0301 	mov.w	r3, #1	; 0x1
    cbbc:	82fb      	strh	r3, [r7, #22]
    timOCInit.TIM_Pulse = 0; // rapport cyclique
    cbbe:	f04f 0300 	mov.w	r3, #0	; 0x0
    cbc2:	837b      	strh	r3, [r7, #26]
    timOCInit.TIM_OCPolarity = TIM_OCPolarity_High;
    cbc4:	f04f 0300 	mov.w	r3, #0	; 0x0
    cbc8:	83bb      	strh	r3, [r7, #28]

    TIM_TypeDef* TIMx = tim->getTIMx();
    cbca:	68b8      	ldr	r0, [r7, #8]
    cbcc:	f000 fd70 	bl	d6b0 <_ZN5Timer7getTIMxEv>
    cbd0:	4603      	mov	r3, r0
    cbd2:	627b      	str	r3, [r7, #36]

    switch(OCx)
    cbd4:	79fb      	ldrb	r3, [r7, #7]
    cbd6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    cbda:	2b03      	cmp	r3, #3
    cbdc:	d839      	bhi.n	cc52 <_ZN10PWMHandlerC2EP5Timerh+0xba>
    cbde:	a201      	add	r2, pc, #4	(adr r2, cbe4 <_ZN10PWMHandlerC2EP5Timerh+0x4c>)
    cbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cbe4:	0000cbf5 	.word	0x0000cbf5
    cbe8:	0000cc0d 	.word	0x0000cc0d
    cbec:	0000cc25 	.word	0x0000cc25
    cbf0:	0000cc3d 	.word	0x0000cc3d
    {
        case 1:
            TIM_OC1Init(TIMx, &timOCInit);
    cbf4:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cbf8:	6a78      	ldr	r0, [r7, #36]
    cbfa:	4619      	mov	r1, r3
    cbfc:	f7f5 fe58 	bl	28b0 <TIM_OC1Init>
            TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
    cc00:	6a78      	ldr	r0, [r7, #36]
    cc02:	f04f 0108 	mov.w	r1, #8	; 0x8
    cc06:	f7f6 fd6d 	bl	36e4 <TIM_OC1PreloadConfig>
    cc0a:	e022      	b.n	cc52 <_ZN10PWMHandlerC2EP5Timerh+0xba>
            break;
        case 2:
            TIM_OC2Init(TIMx, &timOCInit);
    cc0c:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cc10:	6a78      	ldr	r0, [r7, #36]
    cc12:	4619      	mov	r1, r3
    cc14:	f7f5 feda 	bl	29cc <TIM_OC2Init>
            TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
    cc18:	6a78      	ldr	r0, [r7, #36]
    cc1a:	f04f 0108 	mov.w	r1, #8	; 0x8
    cc1e:	f7f6 fd7f 	bl	3720 <TIM_OC2PreloadConfig>
    cc22:	e016      	b.n	cc52 <_ZN10PWMHandlerC2EP5Timerh+0xba>
            break;
        case 3:
            TIM_OC3Init(TIMx, &timOCInit);
    cc24:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cc28:	6a78      	ldr	r0, [r7, #36]
    cc2a:	4619      	mov	r1, r3
    cc2c:	f7f5 ff70 	bl	2b10 <TIM_OC3Init>
            TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
    cc30:	6a78      	ldr	r0, [r7, #36]
    cc32:	f04f 0108 	mov.w	r1, #8	; 0x8
    cc36:	f7f6 fd93 	bl	3760 <TIM_OC3PreloadConfig>
    cc3a:	e00a      	b.n	cc52 <_ZN10PWMHandlerC2EP5Timerh+0xba>
            break;
        case 4:
            TIM_OC4Init(TIMx, &timOCInit);
    cc3c:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cc40:	6a78      	ldr	r0, [r7, #36]
    cc42:	4619      	mov	r1, r3
    cc44:	f7f6 f804 	bl	2c50 <TIM_OC4Init>
            TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
    cc48:	6a78      	ldr	r0, [r7, #36]
    cc4a:	f04f 0108 	mov.w	r1, #8	; 0x8
    cc4e:	f7f6 fda5 	bl	379c <TIM_OC4PreloadConfig>
            break;
    }
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    cc52:	6a78      	ldr	r0, [r7, #36]
    cc54:	f04f 0101 	mov.w	r1, #1	; 0x1
    cc58:	f7f6 fcac 	bl	35b4 <TIM_ARRPreloadConfig>
    TIM_Cmd(TIMx, ENABLE);
    cc5c:	6a78      	ldr	r0, [r7, #36]
    cc5e:	f04f 0101 	mov.w	r1, #1	; 0x1
    cc62:	f7f6 f9e1 	bl	3028 <TIM_Cmd>
}
    cc66:	68fb      	ldr	r3, [r7, #12]
    cc68:	4618      	mov	r0, r3
    cc6a:	f107 0728 	add.w	r7, r7, #40	; 0x28
    cc6e:	46bd      	mov	sp, r7
    cc70:	bd80      	pop	{r7, pc}
    cc72:	46c0      	nop			(mov r8, r8)

0000cc74 <_ZN22QuadratureCoderHandler12getTickValueEv>:

    // Met à disposition le timer
    TIM_Cmd(coder_tim_port, ENABLE);
}

int16_t QuadratureCoderHandler::getTickValue()
    cc74:	b580      	push	{r7, lr}
    cc76:	b084      	sub	sp, #16
    cc78:	af00      	add	r7, sp, #0
    cc7a:	6078      	str	r0, [r7, #4]
{
    // On enregistre le nbr de tick depuis la dernière remise à zero
    int16_t tick = TIM_GetCounter(coder_tim_port);
    cc7c:	687b      	ldr	r3, [r7, #4]
    cc7e:	681b      	ldr	r3, [r3, #0]
    cc80:	4618      	mov	r0, r3
    cc82:	f7f7 fa7d 	bl	4180 <TIM_GetCounter>
    cc86:	4603      	mov	r3, r0
    cc88:	81fb      	strh	r3, [r7, #14]

    // On remet à zero
    TIM_SetCounter(coder_tim_port, 0);
    cc8a:	687b      	ldr	r3, [r7, #4]
    cc8c:	681b      	ldr	r3, [r3, #0]
    cc8e:	4618      	mov	r0, r3
    cc90:	f04f 0100 	mov.w	r1, #0	; 0x0
    cc94:	f7f7 f93a 	bl	3f0c <TIM_SetCounter>

    // On retourne ces ticks
    return tick;
    cc98:	89fb      	ldrh	r3, [r7, #14]
    cc9a:	b21b      	sxth	r3, r3
}
    cc9c:	4618      	mov	r0, r3
    cc9e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    cca2:	46bd      	mov	sp, r7
    cca4:	bd80      	pop	{r7, pc}
    cca6:	46c0      	nop			(mov r8, r8)

0000cca8 <_ZN22QuadratureCoderHandlerC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>:
#include "timerHandler.h"

// GPIO_ch1 et pin_Ch1 : pour la pin du channel 1 du timer
// GPIO_ch2 et pin_Ch2 : pour la pin du channel 2 du timer
QuadratureCoderHandler::QuadratureCoderHandler(TIM_TypeDef* TIMx, GPIO_TypeDef* GPIO_ch1, uint16_t pin_Ch1, GPIO_TypeDef* GPIO_ch2,
                                               uint16_t pin_Ch2, uint8_t TIMx_AF, uint8_t pinSource_Ch1, uint8_t pinSource_Ch2)
    cca8:	b580      	push	{r7, lr}
    ccaa:	b088      	sub	sp, #32
    ccac:	af00      	add	r7, sp, #0
    ccae:	60f8      	str	r0, [r7, #12]
    ccb0:	60b9      	str	r1, [r7, #8]
    ccb2:	607a      	str	r2, [r7, #4]
    ccb4:	807b      	strh	r3, [r7, #2]
{
    this->coder_tim_port = TIMx;
    ccb6:	68fa      	ldr	r2, [r7, #12]
    ccb8:	68bb      	ldr	r3, [r7, #8]
    ccba:	6013      	str	r3, [r2, #0]

    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    // Enable timer clock
    Timer::enableTimerClock(TIMx);
    ccbc:	68b8      	ldr	r0, [r7, #8]
    ccbe:	f000 fd0f 	bl	d6e0 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    ccc2:	f04f 0348 	mov.w	r3, #72	; 0x48
    ccc6:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    ccc8:	f04f 0301 	mov.w	r3, #1	; 0x1
    cccc:	753b      	strb	r3, [r7, #20]
    #endif

    GPIO_InitStructure.GPIO_Pin     = pin_Ch1;
    ccce:	887b      	ldrh	r3, [r7, #2]
    ccd0:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch1, &GPIO_InitStructure);
    ccd2:	f107 0312 	add.w	r3, r7, #18	; 0x12
    ccd6:	6878      	ldr	r0, [r7, #4]
    ccd8:	4619      	mov	r1, r3
    ccda:	f7f4 fce9 	bl	16b0 <GPIO_Init>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    ccde:	f04f 0348 	mov.w	r3, #72	; 0x48
    cce2:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    cce4:	f04f 0301 	mov.w	r3, #1	; 0x1
    cce8:	753b      	strb	r3, [r7, #20]
    #endif
    GPIO_InitStructure.GPIO_Pin     = pin_Ch2;
    ccea:	8dbb      	ldrh	r3, [r7, #44]
    ccec:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch2, &GPIO_InitStructure);
    ccee:	f107 0312 	add.w	r3, r7, #18	; 0x12
    ccf2:	6ab8      	ldr	r0, [r7, #40]
    ccf4:	4619      	mov	r1, r3
    ccf6:	f7f4 fcdb 	bl	16b0 <GPIO_Init>

    // Time Base configuration
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    ccfa:	f04f 0300 	mov.w	r3, #0	; 0x0
    ccfe:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    cd00:	f04f 0300 	mov.w	r3, #0	; 0x0
    cd04:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    cd06:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cd0a:	837b      	strh	r3, [r7, #26]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    cd0c:	f04f 0300 	mov.w	r3, #0	; 0x0
    cd10:	83bb      	strh	r3, [r7, #28]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    cd12:	f04f 0300 	mov.w	r3, #0	; 0x0
    cd16:	77bb      	strb	r3, [r7, #30]
    TIM_TimeBaseInit(coder_tim_port, &TIM_TimeBaseStructure);
    cd18:	68fb      	ldr	r3, [r7, #12]
    cd1a:	681b      	ldr	r3, [r3, #0]
    cd1c:	f107 0216 	add.w	r2, r7, #22	; 0x16
    cd20:	4618      	mov	r0, r3
    cd22:	4611      	mov	r1, r2
    cd24:	f7f5 fd88 	bl	2838 <TIM_TimeBaseInit>

    // Encoder Interface Configuration
    TIM_EncoderInterfaceConfig(coder_tim_port,
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    cd28:	68fb      	ldr	r3, [r7, #12]
    cd2a:	681b      	ldr	r3, [r3, #0]
    cd2c:	4618      	mov	r0, r3
    cd2e:	f04f 0103 	mov.w	r1, #3	; 0x3
    cd32:	f04f 0200 	mov.w	r2, #0	; 0x0
    cd36:	f04f 0300 	mov.w	r3, #0	; 0x0
    cd3a:	f7f6 fb6f 	bl	341c <TIM_EncoderInterfaceConfig>

    // Met à disposition le timer
    TIM_Cmd(coder_tim_port, ENABLE);
    cd3e:	68fb      	ldr	r3, [r7, #12]
    cd40:	681b      	ldr	r3, [r3, #0]
    cd42:	4618      	mov	r0, r3
    cd44:	f04f 0101 	mov.w	r1, #1	; 0x1
    cd48:	f7f6 f96e 	bl	3028 <TIM_Cmd>
}
    cd4c:	68fb      	ldr	r3, [r7, #12]
    cd4e:	4618      	mov	r0, r3
    cd50:	f107 0720 	add.w	r7, r7, #32	; 0x20
    cd54:	46bd      	mov	sp, r7
    cd56:	bd80      	pop	{r7, pc}

0000cd58 <_ZN22QuadratureCoderHandlerC2EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>:
#include "timerHandler.h"

// GPIO_ch1 et pin_Ch1 : pour la pin du channel 1 du timer
// GPIO_ch2 et pin_Ch2 : pour la pin du channel 2 du timer
QuadratureCoderHandler::QuadratureCoderHandler(TIM_TypeDef* TIMx, GPIO_TypeDef* GPIO_ch1, uint16_t pin_Ch1, GPIO_TypeDef* GPIO_ch2,
                                               uint16_t pin_Ch2, uint8_t TIMx_AF, uint8_t pinSource_Ch1, uint8_t pinSource_Ch2)
    cd58:	b580      	push	{r7, lr}
    cd5a:	b088      	sub	sp, #32
    cd5c:	af00      	add	r7, sp, #0
    cd5e:	60f8      	str	r0, [r7, #12]
    cd60:	60b9      	str	r1, [r7, #8]
    cd62:	607a      	str	r2, [r7, #4]
    cd64:	807b      	strh	r3, [r7, #2]
{
    this->coder_tim_port = TIMx;
    cd66:	68fa      	ldr	r2, [r7, #12]
    cd68:	68bb      	ldr	r3, [r7, #8]
    cd6a:	6013      	str	r3, [r2, #0]

    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    // Enable timer clock
    Timer::enableTimerClock(TIMx);
    cd6c:	68b8      	ldr	r0, [r7, #8]
    cd6e:	f000 fcb7 	bl	d6e0 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    cd72:	f04f 0348 	mov.w	r3, #72	; 0x48
    cd76:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    cd78:	f04f 0301 	mov.w	r3, #1	; 0x1
    cd7c:	753b      	strb	r3, [r7, #20]
    #endif

    GPIO_InitStructure.GPIO_Pin     = pin_Ch1;
    cd7e:	887b      	ldrh	r3, [r7, #2]
    cd80:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch1, &GPIO_InitStructure);
    cd82:	f107 0312 	add.w	r3, r7, #18	; 0x12
    cd86:	6878      	ldr	r0, [r7, #4]
    cd88:	4619      	mov	r1, r3
    cd8a:	f7f4 fc91 	bl	16b0 <GPIO_Init>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    cd8e:	f04f 0348 	mov.w	r3, #72	; 0x48
    cd92:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    cd94:	f04f 0301 	mov.w	r3, #1	; 0x1
    cd98:	753b      	strb	r3, [r7, #20]
    #endif
    GPIO_InitStructure.GPIO_Pin     = pin_Ch2;
    cd9a:	8dbb      	ldrh	r3, [r7, #44]
    cd9c:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch2, &GPIO_InitStructure);
    cd9e:	f107 0312 	add.w	r3, r7, #18	; 0x12
    cda2:	6ab8      	ldr	r0, [r7, #40]
    cda4:	4619      	mov	r1, r3
    cda6:	f7f4 fc83 	bl	16b0 <GPIO_Init>

    // Time Base configuration
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    cdaa:	f04f 0300 	mov.w	r3, #0	; 0x0
    cdae:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    cdb0:	f04f 0300 	mov.w	r3, #0	; 0x0
    cdb4:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    cdb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cdba:	837b      	strh	r3, [r7, #26]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    cdbc:	f04f 0300 	mov.w	r3, #0	; 0x0
    cdc0:	83bb      	strh	r3, [r7, #28]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    cdc2:	f04f 0300 	mov.w	r3, #0	; 0x0
    cdc6:	77bb      	strb	r3, [r7, #30]
    TIM_TimeBaseInit(coder_tim_port, &TIM_TimeBaseStructure);
    cdc8:	68fb      	ldr	r3, [r7, #12]
    cdca:	681b      	ldr	r3, [r3, #0]
    cdcc:	f107 0216 	add.w	r2, r7, #22	; 0x16
    cdd0:	4618      	mov	r0, r3
    cdd2:	4611      	mov	r1, r2
    cdd4:	f7f5 fd30 	bl	2838 <TIM_TimeBaseInit>

    // Encoder Interface Configuration
    TIM_EncoderInterfaceConfig(coder_tim_port,
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    cdd8:	68fb      	ldr	r3, [r7, #12]
    cdda:	681b      	ldr	r3, [r3, #0]
    cddc:	4618      	mov	r0, r3
    cdde:	f04f 0103 	mov.w	r1, #3	; 0x3
    cde2:	f04f 0200 	mov.w	r2, #0	; 0x0
    cde6:	f04f 0300 	mov.w	r3, #0	; 0x0
    cdea:	f7f6 fb17 	bl	341c <TIM_EncoderInterfaceConfig>

    // Met à disposition le timer
    TIM_Cmd(coder_tim_port, ENABLE);
    cdee:	68fb      	ldr	r3, [r7, #12]
    cdf0:	681b      	ldr	r3, [r3, #0]
    cdf2:	4618      	mov	r0, r3
    cdf4:	f04f 0101 	mov.w	r1, #1	; 0x1
    cdf8:	f7f6 f916 	bl	3028 <TIM_Cmd>
}
    cdfc:	68fb      	ldr	r3, [r7, #12]
    cdfe:	4618      	mov	r0, r3
    ce00:	f107 0720 	add.w	r7, r7, #32	; 0x20
    ce04:	46bd      	mov	sp, r7
    ce06:	bd80      	pop	{r7, pc}

0000ce08 <_ZN6Remote13dataAvailableEv>:
    }
    for(int i=0; i<10; i++)
        Remote::getSingleton()->sendData(' ');
}

bool Remote::dataAvailable()
    ce08:	b480      	push	{r7}
    ce0a:	b083      	sub	sp, #12
    ce0c:	af00      	add	r7, sp, #0
    ce0e:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    return REMOTE_USART_INDEX->SR & USART_FLAG_RXNE;
    ce10:	4b07      	ldr	r3, [pc, #28]	(ce30 <_ZN6Remote13dataAvailableEv+0x28>)
    ce12:	881b      	ldrh	r3, [r3, #0]
    ce14:	b29b      	uxth	r3, r3
    ce16:	f003 0320 	and.w	r3, r3, #32	; 0x20
    ce1a:	2b00      	cmp	r3, #0
    ce1c:	bf0c      	ite	eq
    ce1e:	2300      	moveq	r3, #0
    ce20:	2301      	movne	r3, #1
    ce22:	b2db      	uxtb	r3, r3
#else
    return false;
#endif
}
    ce24:	4618      	mov	r0, r3
    ce26:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ce2a:	46bd      	mov	sp, r7
    ce2c:	bc80      	pop	{r7}
    ce2e:	4770      	bx	lr
    ce30:	40013800 	.word	0x40013800

0000ce34 <_ZN6Remote11receiveDataEv>:

int Remote::receiveData()
    ce34:	b480      	push	{r7}
    ce36:	b083      	sub	sp, #12
    ce38:	af00      	add	r7, sp, #0
    ce3a:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    while (!(REMOTE_USART_INDEX->SR & USART_FLAG_RXNE));
    ce3c:	4b0c      	ldr	r3, [pc, #48]	(ce70 <_ZN6Remote11receiveDataEv+0x3c>)
    ce3e:	881b      	ldrh	r3, [r3, #0]
    ce40:	b29b      	uxth	r3, r3
    ce42:	f003 0320 	and.w	r3, r3, #32	; 0x20
    ce46:	2b00      	cmp	r3, #0
    ce48:	bf14      	ite	ne
    ce4a:	2300      	movne	r3, #0
    ce4c:	2301      	moveq	r3, #1
    ce4e:	b2db      	uxtb	r3, r3
    ce50:	2b00      	cmp	r3, #0
    ce52:	d1f3      	bne.n	ce3c <_ZN6Remote11receiveDataEv+0x8>

    return ((int)(REMOTE_USART_INDEX->DR & 0x1FF));
    ce54:	4b06      	ldr	r3, [pc, #24]	(ce70 <_ZN6Remote11receiveDataEv+0x3c>)
    ce56:	889b      	ldrh	r3, [r3, #4]
    ce58:	b29b      	uxth	r3, r3
    ce5a:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    ce5e:	ea4f 53d3 	mov.w	r3, r3, lsr #23
#else
    return 0;
#endif
}
    ce62:	4618      	mov	r0, r3
    ce64:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ce68:	46bd      	mov	sp, r7
    ce6a:	bc80      	pop	{r7}
    ce6c:	4770      	bx	lr
    ce6e:	46c0      	nop			(mov r8, r8)
    ce70:	40013800 	.word	0x40013800

0000ce74 <_ZN6Remote12isRemoteModeEv>:
        if (order>=51 and order<=101)
            angSpeed = -((float)(order-75)) / 25. * ANGULAR_REMOTE_SPEED_LIMIT;
    }
}

bool Remote::isRemoteMode()
    ce74:	b480      	push	{r7}
    ce76:	b083      	sub	sp, #12
    ce78:	af00      	add	r7, sp, #0
    ce7a:	6078      	str	r0, [r7, #4]
{
    return remoteMode;
    ce7c:	687b      	ldr	r3, [r7, #4]
    ce7e:	791b      	ldrb	r3, [r3, #4]
}
    ce80:	4618      	mov	r0, r3
    ce82:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ce86:	46bd      	mov	sp, r7
    ce88:	bc80      	pop	{r7}
    ce8a:	4770      	bx	lr

0000ce8c <_ZN6Remote10getLeftPWMEv>:

float Remote::getLeftPWM()
    ce8c:	b480      	push	{r7}
    ce8e:	b083      	sub	sp, #12
    ce90:	af00      	add	r7, sp, #0
    ce92:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    ce94:	687b      	ldr	r3, [r7, #4]
    ce96:	68db      	ldr	r3, [r3, #12]
#if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
    return linSpeed + angSpeed;
#else
    return linSpeed - angSpeed;
#endif
}
    ce98:	4618      	mov	r0, r3
    ce9a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ce9e:	46bd      	mov	sp, r7
    cea0:	bc80      	pop	{r7}
    cea2:	4770      	bx	lr

0000cea4 <_ZN6Remote11getRightPWMEv>:

float Remote::getRightPWM()
    cea4:	b480      	push	{r7}
    cea6:	b083      	sub	sp, #12
    cea8:	af00      	add	r7, sp, #0
    ceaa:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    ceac:	687b      	ldr	r3, [r7, #4]
    ceae:	691b      	ldr	r3, [r3, #16]
#if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
    return linSpeed - angSpeed;
#else
    return linSpeed + angSpeed;
#endif
}
    ceb0:	4618      	mov	r0, r3
    ceb2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ceb6:	46bd      	mov	sp, r7
    ceb8:	bc80      	pop	{r7}
    ceba:	4770      	bx	lr

0000cebc <_ZN6Remote8sendDataEi>:

    USART_Cmd(REMOTE_USART_INDEX, ENABLE);
#endif
}

void Remote::sendData(int data)
    cebc:	b580      	push	{r7, lr}
    cebe:	b082      	sub	sp, #8
    cec0:	af00      	add	r7, sp, #0
    cec2:	6078      	str	r0, [r7, #4]
    cec4:	6039      	str	r1, [r7, #0]
{
#ifdef ROBOTHW
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(REMOTE_USART_INDEX, USART_FLAG_TXE) == RESET);
    cec6:	480b      	ldr	r0, [pc, #44]	(cef4 <_ZN6Remote8sendDataEi+0x38>)
    cec8:	f04f 0180 	mov.w	r1, #128	; 0x80
    cecc:	f7f7 ff4e 	bl	4d6c <USART_GetFlagStatus>
    ced0:	4603      	mov	r3, r0
    ced2:	2b00      	cmp	r3, #0
    ced4:	bf14      	ite	ne
    ced6:	2300      	movne	r3, #0
    ced8:	2301      	moveq	r3, #1
    ceda:	b2db      	uxtb	r3, r3
    cedc:	2b00      	cmp	r3, #0
    cede:	d1f2      	bne.n	cec6 <_ZN6Remote8sendDataEi+0xa>
    USART_SendData(REMOTE_USART_INDEX, (u16) data);
    cee0:	683b      	ldr	r3, [r7, #0]
    cee2:	b29b      	uxth	r3, r3
    cee4:	4803      	ldr	r0, [pc, #12]	(cef4 <_ZN6Remote8sendDataEi+0x38>)
    cee6:	4619      	mov	r1, r3
    cee8:	f7f7 fe0c 	bl	4b04 <USART_SendData>
#endif
}
    ceec:	f107 0708 	add.w	r7, r7, #8	; 0x8
    cef0:	46bd      	mov	sp, r7
    cef2:	bd80      	pop	{r7, pc}
    cef4:	40013800 	.word	0x40013800

0000cef8 <_ZN6Remote8initUARTEi>:

#endif

}

void Remote::initUART(int baudRate)
    cef8:	b580      	push	{r7, lr}
    cefa:	b086      	sub	sp, #24
    cefc:	af00      	add	r7, sp, #0
    cefe:	6078      	str	r0, [r7, #4]
    cf00:	6039      	str	r1, [r7, #0]
{
#ifdef ROBOTHW
    USART_InitTypeDef USART_InitStructure;

    USART_InitStructure.USART_BaudRate = baudRate;
    cf02:	683b      	ldr	r3, [r7, #0]
    cf04:	60bb      	str	r3, [r7, #8]

    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    cf06:	f04f 0300 	mov.w	r3, #0	; 0x0
    cf0a:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    cf0c:	f04f 0300 	mov.w	r3, #0	; 0x0
    cf10:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    cf12:	f04f 0300 	mov.w	r3, #0	; 0x0
    cf16:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    cf18:	f04f 0300 	mov.w	r3, #0	; 0x0
    cf1c:	82bb      	strh	r3, [r7, #20]

    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    cf1e:	f04f 030c 	mov.w	r3, #12	; 0xc
    cf22:	827b      	strh	r3, [r7, #18]

    USART_Init(REMOTE_USART_INDEX, &USART_InitStructure);
    cf24:	f107 0308 	add.w	r3, r7, #8	; 0x8
    cf28:	4806      	ldr	r0, [pc, #24]	(cf44 <_ZN6Remote8initUARTEi+0x4c>)
    cf2a:	4619      	mov	r1, r3
    cf2c:	f7f7 fb78 	bl	4620 <USART_Init>

    USART_Cmd(REMOTE_USART_INDEX, ENABLE);
    cf30:	4804      	ldr	r0, [pc, #16]	(cf44 <_ZN6Remote8initUARTEi+0x4c>)
    cf32:	f04f 0101 	mov.w	r1, #1	; 0x1
    cf36:	f7f7 fc93 	bl	4860 <USART_Cmd>
#endif
}
    cf3a:	f107 0718 	add.w	r7, r7, #24	; 0x18
    cf3e:	46bd      	mov	sp, r7
    cf40:	bd80      	pop	{r7, pc}
    cf42:	46c0      	nop			(mov r8, r8)
    cf44:	40013800 	.word	0x40013800

0000cf48 <_ZN6Remote22initClocksAndPortsGPIOEv>:

    linSpeed = 0.;
    angSpeed = 0.;
}

void Remote::initClocksAndPortsGPIO()
    cf48:	b580      	push	{r7, lr}
    cf4a:	b084      	sub	sp, #16
    cf4c:	af00      	add	r7, sp, #0
    cf4e:	6078      	str	r0, [r7, #4]
//    GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
//    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
#endif
#ifdef STM32F10X_CL // Pin pour le stm32 h107
    //RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
    cf50:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    cf54:	f04f 0101 	mov.w	r1, #1	; 0x1
    cf58:	f7f5 fa76 	bl	2448 <RCC_APB2PeriphClockCmd>

    GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE);
    cf5c:	f04f 0004 	mov.w	r0, #4	; 0x4
    cf60:	f04f 0101 	mov.w	r1, #1	; 0x1
    cf64:	f7f4 fd94 	bl	1a90 <GPIO_PinRemapConfig>

    GPIO_InitTypeDef GPIO_InitStructure;
    // port D pin 8 TX : un servo numérique en Ecriture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
    cf68:	f04f 0340 	mov.w	r3, #64	; 0x40
    cf6c:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    cf6e:	f04f 0318 	mov.w	r3, #24	; 0x18
    cf72:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    cf74:	f04f 0303 	mov.w	r3, #3	; 0x3
    cf78:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    cf7a:	f107 030c 	add.w	r3, r7, #12	; 0xc
    cf7e:	480b      	ldr	r0, [pc, #44]	(cfac <_ZN6Remote22initClocksAndPortsGPIOEv+0x64>)
    cf80:	4619      	mov	r1, r3
    cf82:	f7f4 fb95 	bl	16b0 <GPIO_Init>

    // port D pin 9 RX : un servo numérique en Lecture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
    cf86:	f04f 0380 	mov.w	r3, #128	; 0x80
    cf8a:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    cf8c:	f04f 0304 	mov.w	r3, #4	; 0x4
    cf90:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    cf92:	f04f 0303 	mov.w	r3, #3	; 0x3
    cf96:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    cf98:	f107 030c 	add.w	r3, r7, #12	; 0xc
    cf9c:	4803      	ldr	r0, [pc, #12]	(cfac <_ZN6Remote22initClocksAndPortsGPIOEv+0x64>)
    cf9e:	4619      	mov	r1, r3
    cfa0:	f7f4 fb86 	bl	16b0 <GPIO_Init>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3);*/     // Rx
#endif

#endif

}
    cfa4:	f107 0710 	add.w	r7, r7, #16	; 0x10
    cfa8:	46bd      	mov	sp, r7
    cfaa:	bd80      	pop	{r7, pc}
    cfac:	40010c00 	.word	0x40010c00

0000cfb0 <_ZN6RemoteC1Ev>:

    return singleton;
}


Remote::Remote()
    cfb0:	b580      	push	{r7, lr}
    cfb2:	b082      	sub	sp, #8
    cfb4:	af00      	add	r7, sp, #0
    cfb6:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    initClocksAndPortsGPIO();
    cfb8:	6878      	ldr	r0, [r7, #4]
    cfba:	f7ff ffc5 	bl	cf48 <_ZN6Remote22initClocksAndPortsGPIOEv>
    initUART(USART_BAUDRATE);
    cfbe:	6878      	ldr	r0, [r7, #4]
    cfc0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    cfc4:	f7ff ff98 	bl	cef8 <_ZN6Remote8initUARTEi>
#endif

    remoteMode = false;
    cfc8:	687a      	ldr	r2, [r7, #4]
    cfca:	f04f 0300 	mov.w	r3, #0	; 0x0
    cfce:	7113      	strb	r3, [r2, #4]

    isOpenContainer = false;
    cfd0:	687a      	ldr	r2, [r7, #4]
    cfd2:	f04f 0300 	mov.w	r3, #0	; 0x0
    cfd6:	7153      	strb	r3, [r2, #5]
    isOpenLeftArm = false;
    cfd8:	687a      	ldr	r2, [r7, #4]
    cfda:	f04f 0300 	mov.w	r3, #0	; 0x0
    cfde:	7193      	strb	r3, [r2, #6]
    isOpenRightArm = false;
    cfe0:	687a      	ldr	r2, [r7, #4]
    cfe2:	f04f 0300 	mov.w	r3, #0	; 0x0
    cfe6:	71d3      	strb	r3, [r2, #7]
    timerLances = -1;
    cfe8:	687a      	ldr	r2, [r7, #4]
    cfea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cfee:	6013      	str	r3, [r2, #0]

    brakInv = false;
    cff0:	687a      	ldr	r2, [r7, #4]
    cff2:	f04f 0300 	mov.w	r3, #0	; 0x0
    cff6:	7213      	strb	r3, [r2, #8]
    brakOut = false;
    cff8:	687a      	ldr	r2, [r7, #4]
    cffa:	f04f 0300 	mov.w	r3, #0	; 0x0
    cffe:	7253      	strb	r3, [r2, #9]

    linSpeed = 0.;
    d000:	687a      	ldr	r2, [r7, #4]
    d002:	4b05      	ldr	r3, [pc, #20]	(d018 <_ZN6RemoteC1Ev+0x68>)
    d004:	60d3      	str	r3, [r2, #12]
    angSpeed = 0.;
    d006:	687a      	ldr	r2, [r7, #4]
    d008:	4b03      	ldr	r3, [pc, #12]	(d018 <_ZN6RemoteC1Ev+0x68>)
    d00a:	6113      	str	r3, [r2, #16]
}
    d00c:	687b      	ldr	r3, [r7, #4]
    d00e:	4618      	mov	r0, r3
    d010:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d014:	46bd      	mov	sp, r7
    d016:	bd80      	pop	{r7, pc}
    d018:	00000000 	.word	0x00000000

0000d01c <_ZN6RemoteC2Ev>:

    return singleton;
}


Remote::Remote()
    d01c:	b580      	push	{r7, lr}
    d01e:	b082      	sub	sp, #8
    d020:	af00      	add	r7, sp, #0
    d022:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    initClocksAndPortsGPIO();
    d024:	6878      	ldr	r0, [r7, #4]
    d026:	f7ff ff8f 	bl	cf48 <_ZN6Remote22initClocksAndPortsGPIOEv>
    initUART(USART_BAUDRATE);
    d02a:	6878      	ldr	r0, [r7, #4]
    d02c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    d030:	f7ff ff62 	bl	cef8 <_ZN6Remote8initUARTEi>
#endif

    remoteMode = false;
    d034:	687a      	ldr	r2, [r7, #4]
    d036:	f04f 0300 	mov.w	r3, #0	; 0x0
    d03a:	7113      	strb	r3, [r2, #4]

    isOpenContainer = false;
    d03c:	687a      	ldr	r2, [r7, #4]
    d03e:	f04f 0300 	mov.w	r3, #0	; 0x0
    d042:	7153      	strb	r3, [r2, #5]
    isOpenLeftArm = false;
    d044:	687a      	ldr	r2, [r7, #4]
    d046:	f04f 0300 	mov.w	r3, #0	; 0x0
    d04a:	7193      	strb	r3, [r2, #6]
    isOpenRightArm = false;
    d04c:	687a      	ldr	r2, [r7, #4]
    d04e:	f04f 0300 	mov.w	r3, #0	; 0x0
    d052:	71d3      	strb	r3, [r2, #7]
    timerLances = -1;
    d054:	687a      	ldr	r2, [r7, #4]
    d056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d05a:	6013      	str	r3, [r2, #0]

    brakInv = false;
    d05c:	687a      	ldr	r2, [r7, #4]
    d05e:	f04f 0300 	mov.w	r3, #0	; 0x0
    d062:	7213      	strb	r3, [r2, #8]
    brakOut = false;
    d064:	687a      	ldr	r2, [r7, #4]
    d066:	f04f 0300 	mov.w	r3, #0	; 0x0
    d06a:	7253      	strb	r3, [r2, #9]

    linSpeed = 0.;
    d06c:	687a      	ldr	r2, [r7, #4]
    d06e:	4b05      	ldr	r3, [pc, #20]	(d084 <_ZN6RemoteC2Ev+0x68>)
    d070:	60d3      	str	r3, [r2, #12]
    angSpeed = 0.;
    d072:	687a      	ldr	r2, [r7, #4]
    d074:	4b03      	ldr	r3, [pc, #12]	(d084 <_ZN6RemoteC2Ev+0x68>)
    d076:	6113      	str	r3, [r2, #16]
}
    d078:	687b      	ldr	r3, [r7, #4]
    d07a:	4618      	mov	r0, r3
    d07c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d080:	46bd      	mov	sp, r7
    d082:	bd80      	pop	{r7, pc}
    d084:	00000000 	.word	0x00000000

0000d088 <_ZN6Remote12getSingletonEv>:
//#include "brak.h"
#include "brasLateraux.h"

Remote* Remote::singleton = 0;

Remote* Remote::getSingleton()
    d088:	b580      	push	{r7, lr}
    d08a:	b082      	sub	sp, #8
    d08c:	af00      	add	r7, sp, #0
{
    if (singleton==0)
    d08e:	4b0f      	ldr	r3, [pc, #60]	(d0cc <_ZN6Remote12getSingletonEv+0x44>)
    d090:	681b      	ldr	r3, [r3, #0]
    d092:	2b00      	cmp	r3, #0
    d094:	d113      	bne.n	d0be <_ZN6Remote12getSingletonEv+0x36>
        singleton = new Remote();
    d096:	f04f 0014 	mov.w	r0, #20	; 0x14
    d09a:	f001 fd45 	bl	eb28 <_Znwj>
    d09e:	4603      	mov	r3, r0
    d0a0:	603b      	str	r3, [r7, #0]
    d0a2:	683a      	ldr	r2, [r7, #0]
    d0a4:	2a00      	cmp	r2, #0
    d0a6:	d005      	beq.n	d0b4 <_ZN6Remote12getSingletonEv+0x2c>
    d0a8:	6838      	ldr	r0, [r7, #0]
    d0aa:	f7ff ff81 	bl	cfb0 <_ZN6RemoteC1Ev>
    d0ae:	683b      	ldr	r3, [r7, #0]
    d0b0:	607b      	str	r3, [r7, #4]
    d0b2:	e001      	b.n	d0b8 <_ZN6Remote12getSingletonEv+0x30>
    d0b4:	683a      	ldr	r2, [r7, #0]
    d0b6:	607a      	str	r2, [r7, #4]
    d0b8:	4b04      	ldr	r3, [pc, #16]	(d0cc <_ZN6Remote12getSingletonEv+0x44>)
    d0ba:	687a      	ldr	r2, [r7, #4]
    d0bc:	601a      	str	r2, [r3, #0]

    return singleton;
    d0be:	4b03      	ldr	r3, [pc, #12]	(d0cc <_ZN6Remote12getSingletonEv+0x44>)
    d0c0:	681b      	ldr	r3, [r3, #0]
}
    d0c2:	4618      	mov	r0, r3
    d0c4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d0c8:	46bd      	mov	sp, r7
    d0ca:	bd80      	pop	{r7, pc}
    d0cc:	20000584 	.word	0x20000584

0000d0d0 <_ZN6Remote3logEPc>:
//        sendData(data[i]);

//    delete [] data;
//}

void Remote::log(char* msg)
    d0d0:	b580      	push	{r7, lr}
    d0d2:	b084      	sub	sp, #16
    d0d4:	af00      	add	r7, sp, #0
    d0d6:	6078      	str	r0, [r7, #4]
{
    int pos = 0;
    d0d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    d0dc:	60bb      	str	r3, [r7, #8]
    d0de:	e00e      	b.n	d0fe <_ZN6Remote3logEPc+0x2e>
    while(msg[pos] != '\0' )
    {
        Remote::getSingleton()->sendData(msg[pos]);
    d0e0:	f7ff ffd2 	bl	d088 <_ZN6Remote12getSingletonEv>
    d0e4:	4601      	mov	r1, r0
    d0e6:	68ba      	ldr	r2, [r7, #8]
    d0e8:	687b      	ldr	r3, [r7, #4]
    d0ea:	4413      	add	r3, r2
    d0ec:	781b      	ldrb	r3, [r3, #0]
    d0ee:	4608      	mov	r0, r1
    d0f0:	4619      	mov	r1, r3
    d0f2:	f7ff fee3 	bl	cebc <_ZN6Remote8sendDataEi>
        pos++;
    d0f6:	68bb      	ldr	r3, [r7, #8]
    d0f8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    d0fc:	60bb      	str	r3, [r7, #8]
//}

void Remote::log(char* msg)
{
    int pos = 0;
    while(msg[pos] != '\0' )
    d0fe:	68ba      	ldr	r2, [r7, #8]
    d100:	687b      	ldr	r3, [r7, #4]
    d102:	4413      	add	r3, r2
    d104:	781b      	ldrb	r3, [r3, #0]
    d106:	2b00      	cmp	r3, #0
    d108:	d1ea      	bne.n	d0e0 <_ZN6Remote3logEPc+0x10>
    {
        Remote::getSingleton()->sendData(msg[pos]);
        pos++;
    }
    for(int i=0; i<10; i++)
    d10a:	f04f 0300 	mov.w	r3, #0	; 0x0
    d10e:	60fb      	str	r3, [r7, #12]
    d110:	e00b      	b.n	d12a <_ZN6Remote3logEPc+0x5a>
        Remote::getSingleton()->sendData(' ');
    d112:	f7ff ffb9 	bl	d088 <_ZN6Remote12getSingletonEv>
    d116:	4603      	mov	r3, r0
    d118:	4618      	mov	r0, r3
    d11a:	f04f 0120 	mov.w	r1, #32	; 0x20
    d11e:	f7ff fecd 	bl	cebc <_ZN6Remote8sendDataEi>
    while(msg[pos] != '\0' )
    {
        Remote::getSingleton()->sendData(msg[pos]);
        pos++;
    }
    for(int i=0; i<10; i++)
    d122:	68fb      	ldr	r3, [r7, #12]
    d124:	f103 0301 	add.w	r3, r3, #1	; 0x1
    d128:	60fb      	str	r3, [r7, #12]
    d12a:	68fb      	ldr	r3, [r7, #12]
    d12c:	2b09      	cmp	r3, #9
    d12e:	ddf0      	ble.n	d112 <_ZN6Remote3logEPc+0x42>
        Remote::getSingleton()->sendData(' ');
}
    d130:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d134:	46bd      	mov	sp, r7
    d136:	bd80      	pop	{r7, pc}

0000d138 <_ZN6Remote6updateEb>:
#else
    return 0;
#endif
}

void Remote::update(bool allowChangeMode)
    d138:	b580      	push	{r7, lr}
    d13a:	b086      	sub	sp, #24
    d13c:	af00      	add	r7, sp, #0
    d13e:	60f8      	str	r0, [r7, #12]
    d140:	460b      	mov	r3, r1
    d142:	72fb      	strb	r3, [r7, #11]
    }
#endif
*/
    //if (allowChangeMode)
    {
        if (dataAvailable() && !remoteMode)
    d144:	68f8      	ldr	r0, [r7, #12]
    d146:	f7ff fe5f 	bl	ce08 <_ZN6Remote13dataAvailableEv>
    d14a:	4603      	mov	r3, r0
    d14c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d150:	b2db      	uxtb	r3, r3
    d152:	2b00      	cmp	r3, #0
    d154:	d10d      	bne.n	d172 <_ZN6Remote6updateEb+0x3a>
    d156:	68fb      	ldr	r3, [r7, #12]
    d158:	791b      	ldrb	r3, [r3, #4]
    d15a:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d15e:	b2db      	uxtb	r3, r3
    d160:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d164:	b2db      	uxtb	r3, r3
    d166:	2b00      	cmp	r3, #0
    d168:	d103      	bne.n	d172 <_ZN6Remote6updateEb+0x3a>
    d16a:	f04f 0301 	mov.w	r3, #1	; 0x1
    d16e:	603b      	str	r3, [r7, #0]
    d170:	e002      	b.n	d178 <_ZN6Remote6updateEb+0x40>
    d172:	f04f 0300 	mov.w	r3, #0	; 0x0
    d176:	603b      	str	r3, [r7, #0]
    d178:	683b      	ldr	r3, [r7, #0]
    d17a:	2b00      	cmp	r3, #0
    d17c:	d007      	beq.n	d18e <_ZN6Remote6updateEb+0x56>
        {
            remoteMode = true;
    d17e:	68fa      	ldr	r2, [r7, #12]
    d180:	f04f 0301 	mov.w	r3, #1	; 0x1
    d184:	7113      	strb	r3, [r2, #4]
            Remote::log("Reçu, avant toute commandant !");
    d186:	4b54      	ldr	r3, [pc, #336]	(d2d8 <_ZN6Remote6updateEb+0x1a0>)
    d188:	4618      	mov	r0, r3
    d18a:	f7ff ffa1 	bl	d0d0 <_ZN6Remote3logEPc>
        }
        if (remoteMode)
    d18e:	68fb      	ldr	r3, [r7, #12]
    d190:	791b      	ldrb	r3, [r3, #4]
    d192:	2b00      	cmp	r3, #0
    d194:	d004      	beq.n	d1a0 <_ZN6Remote6updateEb+0x68>
            Led::setOn(1);
    d196:	f04f 0001 	mov.w	r0, #1	; 0x1
    d19a:	f7ff f97f 	bl	c49c <_ZN3Led5setOnEi>
    d19e:	e003      	b.n	d1a8 <_ZN6Remote6updateEb+0x70>
        else
            Led::setOff(1);
    d1a0:	f04f 0001 	mov.w	r0, #1	; 0x1
    d1a4:	f7ff f93a 	bl	c41c <_ZN3Led6setOffEi>
    }

    if (!allowChangeMode && remoteMode && dataAvailable())
    d1a8:	7afb      	ldrb	r3, [r7, #11]
    d1aa:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d1ae:	b2db      	uxtb	r3, r3
    d1b0:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d1b4:	b2db      	uxtb	r3, r3
    d1b6:	2b00      	cmp	r3, #0
    d1b8:	d113      	bne.n	d1e2 <_ZN6Remote6updateEb+0xaa>
    d1ba:	68fb      	ldr	r3, [r7, #12]
    d1bc:	791b      	ldrb	r3, [r3, #4]
    d1be:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d1c2:	b2db      	uxtb	r3, r3
    d1c4:	2b00      	cmp	r3, #0
    d1c6:	d10c      	bne.n	d1e2 <_ZN6Remote6updateEb+0xaa>
    d1c8:	68f8      	ldr	r0, [r7, #12]
    d1ca:	f7ff fe1d 	bl	ce08 <_ZN6Remote13dataAvailableEv>
    d1ce:	4603      	mov	r3, r0
    d1d0:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d1d4:	b2db      	uxtb	r3, r3
    d1d6:	2b00      	cmp	r3, #0
    d1d8:	d103      	bne.n	d1e2 <_ZN6Remote6updateEb+0xaa>
    d1da:	f04f 0301 	mov.w	r3, #1	; 0x1
    d1de:	607b      	str	r3, [r7, #4]
    d1e0:	e002      	b.n	d1e8 <_ZN6Remote6updateEb+0xb0>
    d1e2:	f04f 0300 	mov.w	r3, #0	; 0x0
    d1e6:	607b      	str	r3, [r7, #4]
    d1e8:	687b      	ldr	r3, [r7, #4]
    d1ea:	2b00      	cmp	r3, #0
    d1ec:	d069      	beq.n	d2c2 <_ZN6Remote6updateEb+0x18a>
    {
        int order = receiveData();
    d1ee:	68f8      	ldr	r0, [r7, #12]
    d1f0:	f7ff fe20 	bl	ce34 <_ZN6Remote11receiveDataEv>
    d1f4:	4603      	mov	r3, r0
    d1f6:	617b      	str	r3, [r7, #20]
        Remote::log("Got:");
    d1f8:	4b38      	ldr	r3, [pc, #224]	(d2dc <_ZN6Remote6updateEb+0x1a4>)
    d1fa:	4618      	mov	r0, r3
    d1fc:	f7ff ff68 	bl	d0d0 <_ZN6Remote3logEPc>
        Remote::getSingleton()->sendData(order);
    d200:	f7ff ff42 	bl	d088 <_ZN6Remote12getSingletonEv>
    d204:	4603      	mov	r3, r0
    d206:	4618      	mov	r0, r3
    d208:	6979      	ldr	r1, [r7, #20]
    d20a:	f7ff fe57 	bl	cebc <_ZN6Remote8sendDataEi>
            break;
        }
#endif
*/
        // Linear Speed
        if (order>=0 and order<=50)
    d20e:	697b      	ldr	r3, [r7, #20]
    d210:	2b00      	cmp	r3, #0
    d212:	db27      	blt.n	d264 <_ZN6Remote6updateEb+0x12c>
    d214:	697b      	ldr	r3, [r7, #20]
    d216:	2b32      	cmp	r3, #50
    d218:	dc24      	bgt.n	d264 <_ZN6Remote6updateEb+0x12c>
            linSpeed = ((float)(order-25)) / 25. * LINEAR_REMOTE_SPEED_LIMIT;
    d21a:	697b      	ldr	r3, [r7, #20]
    d21c:	f1a3 0319 	sub.w	r3, r3, #25	; 0x19
    d220:	4618      	mov	r0, r3
    d222:	f00f fe09 	bl	1ce38 <__aeabi_i2f>
    d226:	4603      	mov	r3, r0
    d228:	4618      	mov	r0, r3
    d22a:	f00f f9e7 	bl	1c5fc <__aeabi_f2d>
    d22e:	4602      	mov	r2, r0
    d230:	460b      	mov	r3, r1
    d232:	4610      	mov	r0, r2
    d234:	4619      	mov	r1, r3
    d236:	f04f 0200 	mov.w	r2, #0	; 0x0
    d23a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d23e:	f503 1364 	add.w	r3, r3, #3735552	; 0x390000
    d242:	f00f fb59 	bl	1c8f8 <__aeabi_ddiv>
    d246:	4602      	mov	r2, r0
    d248:	460b      	mov	r3, r1
    d24a:	4610      	mov	r0, r2
    d24c:	4619      	mov	r1, r3
    d24e:	f00f f877 	bl	1c340 <__adddf3>
    d252:	4602      	mov	r2, r0
    d254:	460b      	mov	r3, r1
    d256:	4610      	mov	r0, r2
    d258:	4619      	mov	r1, r3
    d25a:	f00f fce3 	bl	1cc24 <__aeabi_d2f>
    d25e:	4602      	mov	r2, r0
    d260:	68fb      	ldr	r3, [r7, #12]
    d262:	60da      	str	r2, [r3, #12]

        // Angular Speed
        if (order>=51 and order<=101)
    d264:	697b      	ldr	r3, [r7, #20]
    d266:	2b32      	cmp	r3, #50
    d268:	dd2b      	ble.n	d2c2 <_ZN6Remote6updateEb+0x18a>
    d26a:	697b      	ldr	r3, [r7, #20]
    d26c:	2b65      	cmp	r3, #101
    d26e:	dc28      	bgt.n	d2c2 <_ZN6Remote6updateEb+0x18a>
            angSpeed = -((float)(order-75)) / 25. * ANGULAR_REMOTE_SPEED_LIMIT;
    d270:	697b      	ldr	r3, [r7, #20]
    d272:	f1a3 034b 	sub.w	r3, r3, #75	; 0x4b
    d276:	4618      	mov	r0, r3
    d278:	f00f fdde 	bl	1ce38 <__aeabi_i2f>
    d27c:	4603      	mov	r3, r0
    d27e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    d282:	4618      	mov	r0, r3
    d284:	f00f f9ba 	bl	1c5fc <__aeabi_f2d>
    d288:	4602      	mov	r2, r0
    d28a:	460b      	mov	r3, r1
    d28c:	4610      	mov	r0, r2
    d28e:	4619      	mov	r1, r3
    d290:	f04f 0200 	mov.w	r2, #0	; 0x0
    d294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d298:	f503 1364 	add.w	r3, r3, #3735552	; 0x390000
    d29c:	f00f fb2c 	bl	1c8f8 <__aeabi_ddiv>
    d2a0:	4602      	mov	r2, r0
    d2a2:	460b      	mov	r3, r1
    d2a4:	4610      	mov	r0, r2
    d2a6:	4619      	mov	r1, r3
    d2a8:	a209      	add	r2, pc, #36	(adr r2, d2d0 <_ZN6Remote6updateEb+0x198>)
    d2aa:	ca0c      	ldmia	r2!, {r2, r3}
    d2ac:	f00f f9fa 	bl	1c6a4 <__aeabi_dmul>
    d2b0:	4602      	mov	r2, r0
    d2b2:	460b      	mov	r3, r1
    d2b4:	4610      	mov	r0, r2
    d2b6:	4619      	mov	r1, r3
    d2b8:	f00f fcb4 	bl	1cc24 <__aeabi_d2f>
    d2bc:	4602      	mov	r2, r0
    d2be:	68fb      	ldr	r3, [r7, #12]
    d2c0:	611a      	str	r2, [r3, #16]
    }
}
    d2c2:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d2c6:	46bd      	mov	sp, r7
    d2c8:	bd80      	pop	{r7, pc}
    d2ca:	46c0      	nop			(mov r8, r8)
    d2cc:	46c0      	nop			(mov r8, r8)
    d2ce:	46c0      	nop			(mov r8, r8)
    d2d0:	47ae147b 	.word	0x47ae147b
    d2d4:	3f847ae1 	.word	0x3f847ae1
    d2d8:	00024078 	.word	0x00024078
    d2dc:	00024098 	.word	0x00024098

0000d2e0 <_ZN4Roue6tourneEf>:
    GPIO_InitStructureSortie2.GPIO_Speed = GPIO_Speed_2MHz;        //La vitesse de rafraichissement du port
    GPIO_Init(GPIOx_Sens, &GPIO_InitStructureSortie2);

}

void Roue::tourne(float rapport)
    d2e0:	b580      	push	{r7, lr}
    d2e2:	b082      	sub	sp, #8
    d2e4:	af00      	add	r7, sp, #0
    d2e6:	6078      	str	r0, [r7, #4]
    d2e8:	6039      	str	r1, [r7, #0]
{
    //rapport = 1;
    if(rapport >=0)
    d2ea:	6838      	ldr	r0, [r7, #0]
    d2ec:	4915      	ldr	r1, [pc, #84]	(d344 <_ZN4Roue6tourneEf+0x64>)
    d2ee:	f00f ffa7 	bl	1d240 <__aeabi_fcmpge>
    d2f2:	4603      	mov	r3, r0
    d2f4:	2b00      	cmp	r3, #0
    d2f6:	d00f      	beq.n	d318 <_ZN4Roue6tourneEf+0x38>
    //if((rapport >= 0 && !oppositeDirection) || (rapport<0 && oppositeDirection))
    {
        GPIO_WriteBit(GPIOx_Sens, GPIO_Pin_Sens, Bit_RESET);
    d2f8:	687b      	ldr	r3, [r7, #4]
    d2fa:	689a      	ldr	r2, [r3, #8]
    d2fc:	687b      	ldr	r3, [r7, #4]
    d2fe:	899b      	ldrh	r3, [r3, #12]
    d300:	4610      	mov	r0, r2
    d302:	4619      	mov	r1, r3
    d304:	f04f 0200 	mov.w	r2, #0	; 0x0
    d308:	f7f4 fb40 	bl	198c <GPIO_WriteBit>
        pwm.setDutyCycle(rapport);
    d30c:	687b      	ldr	r3, [r7, #4]
    d30e:	4618      	mov	r0, r3
    d310:	6839      	ldr	r1, [r7, #0]
    d312:	f7ff fbb1 	bl	ca78 <_ZN10PWMHandler12setDutyCycleEf>
    d316:	e011      	b.n	d33c <_ZN4Roue6tourneEf+0x5c>
    }
    else
    {
        GPIO_WriteBit(GPIOx_Sens, GPIO_Pin_Sens, Bit_SET);
    d318:	687b      	ldr	r3, [r7, #4]
    d31a:	689a      	ldr	r2, [r3, #8]
    d31c:	687b      	ldr	r3, [r7, #4]
    d31e:	899b      	ldrh	r3, [r3, #12]
    d320:	4610      	mov	r0, r2
    d322:	4619      	mov	r1, r3
    d324:	f04f 0201 	mov.w	r2, #1	; 0x1
    d328:	f7f4 fb30 	bl	198c <GPIO_WriteBit>
        pwm.setDutyCycle(-rapport);
    d32c:	687a      	ldr	r2, [r7, #4]
    d32e:	683b      	ldr	r3, [r7, #0]
    d330:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    d334:	4610      	mov	r0, r2
    d336:	4619      	mov	r1, r3
    d338:	f7ff fb9e 	bl	ca78 <_ZN10PWMHandler12setDutyCycleEf>
/*
    if(fabs(rapport) < RAPPORT_OK)
        pwm.setDutyCycle(0);
    else
        pwm.setDutyCycle(fabs(rapport)+RAPPORT_SUPPLEMENTAIRE);*/
}
    d33c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d340:	46bd      	mov	sp, r7
    d342:	bd80      	pop	{r7, pc}
    d344:	00000000 	.word	0x00000000

0000d348 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>:
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_rcc.h"
#endif
#include <math.h>

Roue::Roue(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm, GPIO_TypeDef* GPIOx_Sens, uint16_t GPIO_Pin_Sens)
    d348:	b580      	push	{r7, lr}
    d34a:	b088      	sub	sp, #32
    d34c:	af02      	add	r7, sp, #8
    d34e:	60f8      	str	r0, [r7, #12]
    d350:	60b9      	str	r1, [r7, #8]
    d352:	603b      	str	r3, [r7, #0]
    d354:	4613      	mov	r3, r2
    d356:	71fb      	strb	r3, [r7, #7]
    : Moteur(TIMx, OCx, GPIOx_pwm, GPIO_Pin_pwm)
    d358:	68fa      	ldr	r2, [r7, #12]
    d35a:	f897 c007 	ldrb.w	ip, [r7, #7]
    d35e:	8c3b      	ldrh	r3, [r7, #32]
    d360:	9300      	str	r3, [sp, #0]
    d362:	4610      	mov	r0, r2
    d364:	68b9      	ldr	r1, [r7, #8]
    d366:	4662      	mov	r2, ip
    d368:	683b      	ldr	r3, [r7, #0]
    d36a:	f7f8 f9c7 	bl	56fc <_ZN6MoteurC2EP11TIM_TypeDefhP12GPIO_TypeDeft>
{
    this->GPIOx_Sens = GPIOx_Sens;
    d36e:	68fa      	ldr	r2, [r7, #12]
    d370:	6a7b      	ldr	r3, [r7, #36]
    d372:	6093      	str	r3, [r2, #8]
    this->GPIO_Pin_Sens = GPIO_Pin_Sens;
    d374:	68fa      	ldr	r2, [r7, #12]
    d376:	8d3b      	ldrh	r3, [r7, #40]
    d378:	8193      	strh	r3, [r2, #12]
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOD, &GPIO_InitStructureSortie);
*/
    // initialiser pins d'entrée sur le STM du port x_sens
    GPIO_InitTypeDef GPIO_InitStructureSortie2;
    GPIO_InitStructureSortie2.GPIO_Pin =  GPIO_Pin_Sens;
    d37a:	8d3b      	ldrh	r3, [r7, #40]
    d37c:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructureSortie2.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_Out_PP;
    d37e:	f04f 0310 	mov.w	r3, #16	; 0x10
    d382:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie2.GPIO_Speed = GPIO_Speed_2MHz;        //La vitesse de rafraichissement du port
    d384:	f04f 0302 	mov.w	r3, #2	; 0x2
    d388:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_Sens, &GPIO_InitStructureSortie2);
    d38a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    d38e:	6a78      	ldr	r0, [r7, #36]
    d390:	4619      	mov	r1, r3
    d392:	f7f4 f98d 	bl	16b0 <GPIO_Init>

}
    d396:	68fb      	ldr	r3, [r7, #12]
    d398:	4618      	mov	r0, r3
    d39a:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d39e:	46bd      	mov	sp, r7
    d3a0:	bd80      	pop	{r7, pc}
    d3a2:	46c0      	nop			(mov r8, r8)

0000d3a4 <_ZN4RoueC2EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>:
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_rcc.h"
#endif
#include <math.h>

Roue::Roue(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm, GPIO_TypeDef* GPIOx_Sens, uint16_t GPIO_Pin_Sens)
    d3a4:	b580      	push	{r7, lr}
    d3a6:	b088      	sub	sp, #32
    d3a8:	af02      	add	r7, sp, #8
    d3aa:	60f8      	str	r0, [r7, #12]
    d3ac:	60b9      	str	r1, [r7, #8]
    d3ae:	603b      	str	r3, [r7, #0]
    d3b0:	4613      	mov	r3, r2
    d3b2:	71fb      	strb	r3, [r7, #7]
    : Moteur(TIMx, OCx, GPIOx_pwm, GPIO_Pin_pwm)
    d3b4:	68fa      	ldr	r2, [r7, #12]
    d3b6:	f897 c007 	ldrb.w	ip, [r7, #7]
    d3ba:	8c3b      	ldrh	r3, [r7, #32]
    d3bc:	9300      	str	r3, [sp, #0]
    d3be:	4610      	mov	r0, r2
    d3c0:	68b9      	ldr	r1, [r7, #8]
    d3c2:	4662      	mov	r2, ip
    d3c4:	683b      	ldr	r3, [r7, #0]
    d3c6:	f7f8 f999 	bl	56fc <_ZN6MoteurC2EP11TIM_TypeDefhP12GPIO_TypeDeft>
{
    this->GPIOx_Sens = GPIOx_Sens;
    d3ca:	68fa      	ldr	r2, [r7, #12]
    d3cc:	6a7b      	ldr	r3, [r7, #36]
    d3ce:	6093      	str	r3, [r2, #8]
    this->GPIO_Pin_Sens = GPIO_Pin_Sens;
    d3d0:	68fa      	ldr	r2, [r7, #12]
    d3d2:	8d3b      	ldrh	r3, [r7, #40]
    d3d4:	8193      	strh	r3, [r2, #12]
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOD, &GPIO_InitStructureSortie);
*/
    // initialiser pins d'entrée sur le STM du port x_sens
    GPIO_InitTypeDef GPIO_InitStructureSortie2;
    GPIO_InitStructureSortie2.GPIO_Pin =  GPIO_Pin_Sens;
    d3d6:	8d3b      	ldrh	r3, [r7, #40]
    d3d8:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructureSortie2.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_Out_PP;
    d3da:	f04f 0310 	mov.w	r3, #16	; 0x10
    d3de:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie2.GPIO_Speed = GPIO_Speed_2MHz;        //La vitesse de rafraichissement du port
    d3e0:	f04f 0302 	mov.w	r3, #2	; 0x2
    d3e4:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_Sens, &GPIO_InitStructureSortie2);
    d3e6:	f107 0314 	add.w	r3, r7, #20	; 0x14
    d3ea:	6a78      	ldr	r0, [r7, #36]
    d3ec:	4619      	mov	r1, r3
    d3ee:	f7f4 f95f 	bl	16b0 <GPIO_Init>

}
    d3f2:	68fb      	ldr	r3, [r7, #12]
    d3f4:	4618      	mov	r0, r3
    d3f6:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d3fa:	46bd      	mov	sp, r7
    d3fc:	bd80      	pop	{r7, pc}
    d3fe:	46c0      	nop			(mov r8, r8)

0000d400 <_ZN11SharpSensor8getValueEv>:
        output = false;
    #endif

}

Sensor::OutputSensor SharpSensor::getValue()
    d400:	b580      	push	{r7, lr}
    d402:	b088      	sub	sp, #32
    d404:	af00      	add	r7, sp, #0
    d406:	6078      	str	r0, [r7, #4]
    d408:	60f9      	str	r1, [r7, #12]
{
    OutputSensor outputR;
    outputR.type = SHARP;
    d40a:	f04f 0300 	mov.w	r3, #0	; 0x0
    d40e:	687a      	ldr	r2, [r7, #4]
    d410:	7013      	strb	r3, [r2, #0]
    outputR.f = (float)value;
    d412:	68fb      	ldr	r3, [r7, #12]
    d414:	691b      	ldr	r3, [r3, #16]
    d416:	4618      	mov	r0, r3
    d418:	f00f fd0e 	bl	1ce38 <__aeabi_i2f>
    d41c:	4603      	mov	r3, r0
    d41e:	687a      	ldr	r2, [r7, #4]
    d420:	6053      	str	r3, [r2, #4]
    outputR.b = (output && actif);// && actif && !SharpSensor::estDesactive);
    d422:	68fb      	ldr	r3, [r7, #12]
    d424:	7b9b      	ldrb	r3, [r3, #14]
    d426:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d42a:	b2db      	uxtb	r3, r3
    d42c:	2b00      	cmp	r3, #0
    d42e:	d10a      	bne.n	d446 <_ZN11SharpSensor8getValueEv+0x46>
    d430:	68fb      	ldr	r3, [r7, #12]
    d432:	7bdb      	ldrb	r3, [r3, #15]
    d434:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d438:	b2db      	uxtb	r3, r3
    d43a:	2b00      	cmp	r3, #0
    d43c:	d103      	bne.n	d446 <_ZN11SharpSensor8getValueEv+0x46>
    d43e:	f04f 0301 	mov.w	r3, #1	; 0x1
    d442:	60bb      	str	r3, [r7, #8]
    d444:	e002      	b.n	d44c <_ZN11SharpSensor8getValueEv+0x4c>
    d446:	f04f 0200 	mov.w	r2, #0	; 0x0
    d44a:	60ba      	str	r2, [r7, #8]
    d44c:	68ba      	ldr	r2, [r7, #8]
    d44e:	4613      	mov	r3, r2
    d450:	687a      	ldr	r2, [r7, #4]
    d452:	7213      	strb	r3, [r2, #8]
    return outputR;
}
    d454:	6878      	ldr	r0, [r7, #4]
    d456:	f107 0720 	add.w	r7, r7, #32	; 0x20
    d45a:	46bd      	mov	sp, r7
    d45c:	bd80      	pop	{r7, pc}
    d45e:	46c0      	nop			(mov r8, r8)

0000d460 <_ZN11SharpSensor7getNameEv>:

SharpSensor::SharpName SharpSensor::getName()
    d460:	b480      	push	{r7}
    d462:	b083      	sub	sp, #12
    d464:	af00      	add	r7, sp, #0
    d466:	6078      	str	r0, [r7, #4]
{
    return name;
    d468:	687b      	ldr	r3, [r7, #4]
    d46a:	7b5b      	ldrb	r3, [r3, #13]
}
    d46c:	4618      	mov	r0, r3
    d46e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d472:	46bd      	mov	sp, r7
    d474:	bc80      	pop	{r7}
    d476:	4770      	bx	lr

0000d478 <_ZN11SharpSensor8setActifEv>:


void SharpSensor::setActif()
    d478:	b480      	push	{r7}
    d47a:	b083      	sub	sp, #12
    d47c:	af00      	add	r7, sp, #0
    d47e:	6078      	str	r0, [r7, #4]
{
    actif = true;
    d480:	687b      	ldr	r3, [r7, #4]
    d482:	f04f 0201 	mov.w	r2, #1	; 0x1
    d486:	73da      	strb	r2, [r3, #15]
}
    d488:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d48c:	46bd      	mov	sp, r7
    d48e:	bc80      	pop	{r7}
    d490:	4770      	bx	lr
    d492:	46c0      	nop			(mov r8, r8)

0000d494 <_ZN11SharpSensor10unsetActifEv>:

void SharpSensor::unsetActif()
    d494:	b480      	push	{r7}
    d496:	b083      	sub	sp, #12
    d498:	af00      	add	r7, sp, #0
    d49a:	6078      	str	r0, [r7, #4]
{
    actif = false;
    d49c:	687b      	ldr	r3, [r7, #4]
    d49e:	f04f 0200 	mov.w	r2, #0	; 0x0
    d4a2:	73da      	strb	r2, [r3, #15]
}
    d4a4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d4a8:	46bd      	mov	sp, r7
    d4aa:	bc80      	pop	{r7}
    d4ac:	4770      	bx	lr
    d4ae:	46c0      	nop			(mov r8, r8)

0000d4b0 <_ZN11SharpSensor11updateValueEv>:
SharpSensor::~SharpSensor()
{
    //dtor
}

void SharpSensor::updateValue()
    d4b0:	b580      	push	{r7, lr}
    d4b2:	b082      	sub	sp, #8
    d4b4:	af00      	add	r7, sp, #0
    d4b6:	6078      	str	r0, [r7, #4]
{
    #ifdef ROBOTHW
    while(!AnalogSensor::conversionFinished());    // au cas où l'interrupt de l'asservissement tombe avant la fin de l'acquisition/conversion
    d4b8:	f7fd fbf8 	bl	acac <_ZN12AnalogSensor18conversionFinishedEv>
    d4bc:	4603      	mov	r3, r0
    d4be:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d4c2:	b2db      	uxtb	r3, r3
    d4c4:	2b00      	cmp	r3, #0
    d4c6:	d1f7      	bne.n	d4b8 <_ZN11SharpSensor11updateValueEv+0x8>

    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        value = *data;
        value >>= 4;
    #else // K - H107
        value = *data;
    d4c8:	687b      	ldr	r3, [r7, #4]
    d4ca:	689b      	ldr	r3, [r3, #8]
    d4cc:	881b      	ldrh	r3, [r3, #0]
    d4ce:	461a      	mov	r2, r3
    d4d0:	687b      	ldr	r3, [r7, #4]
    d4d2:	611a      	str	r2, [r3, #16]
    #endif

    counter <<= 1;
    d4d4:	687b      	ldr	r3, [r7, #4]
    d4d6:	7b1b      	ldrb	r3, [r3, #12]
    d4d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d4dc:	b2db      	uxtb	r3, r3
    d4de:	687a      	ldr	r2, [r7, #4]
    d4e0:	7313      	strb	r3, [r2, #12]
    counter |= (value > seuilDetection);
    d4e2:	687b      	ldr	r3, [r7, #4]
    d4e4:	7b1b      	ldrb	r3, [r3, #12]
    d4e6:	4619      	mov	r1, r3
    d4e8:	687b      	ldr	r3, [r7, #4]
    d4ea:	691a      	ldr	r2, [r3, #16]
    d4ec:	687b      	ldr	r3, [r7, #4]
    d4ee:	8a9b      	ldrh	r3, [r3, #20]
    d4f0:	429a      	cmp	r2, r3
    d4f2:	bfd4      	ite	le
    d4f4:	2300      	movle	r3, #0
    d4f6:	2301      	movgt	r3, #1
    d4f8:	460a      	mov	r2, r1
    d4fa:	ea42 0303 	orr.w	r3, r2, r3
    d4fe:	b2db      	uxtb	r3, r3
    d500:	b2db      	uxtb	r3, r3
    d502:	687a      	ldr	r2, [r7, #4]
    d504:	7313      	strb	r3, [r2, #12]
    //if (*data > threshold)
    //    allumerLED();
    output = output ? !((counter & 0xff) == 0x00) : (counter & 0xff) == 0xff ; // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de retourner un true et que rien a été detecté au moins 8 fois pour retourner false.
    d506:	687b      	ldr	r3, [r7, #4]
    d508:	7b9b      	ldrb	r3, [r3, #14]
    d50a:	2b00      	cmp	r3, #0
    d50c:	d008      	beq.n	d520 <_ZN11SharpSensor11updateValueEv+0x70>
    d50e:	687b      	ldr	r3, [r7, #4]
    d510:	7b1b      	ldrb	r3, [r3, #12]
    d512:	2b00      	cmp	r3, #0
    d514:	bf0c      	ite	eq
    d516:	2300      	moveq	r3, #0
    d518:	2301      	movne	r3, #1
    d51a:	b2db      	uxtb	r3, r3
    d51c:	603b      	str	r3, [r7, #0]
    d51e:	e007      	b.n	d530 <_ZN11SharpSensor11updateValueEv+0x80>
    d520:	687b      	ldr	r3, [r7, #4]
    d522:	7b1b      	ldrb	r3, [r3, #12]
    d524:	2bff      	cmp	r3, #255
    d526:	bf14      	ite	ne
    d528:	2300      	movne	r3, #0
    d52a:	2301      	moveq	r3, #1
    d52c:	b2db      	uxtb	r3, r3
    d52e:	603b      	str	r3, [r7, #0]
    d530:	687a      	ldr	r2, [r7, #4]
    d532:	6839      	ldr	r1, [r7, #0]
    d534:	460b      	mov	r3, r1
    d536:	7393      	strb	r3, [r2, #14]
    }
    else
        output = false;
    #endif

}
    d538:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d53c:	46bd      	mov	sp, r7
    d53e:	bd80      	pop	{r7, pc}

0000d540 <_ZN11SharpSensorD0Ev>:
    this->evt = false;
    #endif

}

SharpSensor::~SharpSensor()
    d540:	b580      	push	{r7, lr}
    d542:	b082      	sub	sp, #8
    d544:	af00      	add	r7, sp, #0
    d546:	6078      	str	r0, [r7, #4]
    d548:	687a      	ldr	r2, [r7, #4]
    d54a:	4b0a      	ldr	r3, [pc, #40]	(d574 <_ZN11SharpSensorD0Ev+0x34>)
    d54c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    d54e:	687b      	ldr	r3, [r7, #4]
    d550:	4618      	mov	r0, r3
    d552:	f7fd fc9f 	bl	ae94 <_ZN12AnalogSensorD2Ev>
    d556:	f04f 0301 	mov.w	r3, #1	; 0x1
    d55a:	b2db      	uxtb	r3, r3
    d55c:	2b00      	cmp	r3, #0
    d55e:	d002      	beq.n	d566 <_ZN11SharpSensorD0Ev+0x26>
    d560:	6878      	ldr	r0, [r7, #4]
    d562:	f001 fb87 	bl	ec74 <_ZdlPv>
    d566:	687b      	ldr	r3, [r7, #4]
    d568:	4618      	mov	r0, r3
    d56a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d56e:	46bd      	mov	sp, r7
    d570:	bd80      	pop	{r7, pc}
    d572:	46c0      	nop			(mov r8, r8)
    d574:	000240a8 	.word	0x000240a8

0000d578 <_ZN11SharpSensorD1Ev>:
    this->evt = false;
    #endif

}

SharpSensor::~SharpSensor()
    d578:	b580      	push	{r7, lr}
    d57a:	b082      	sub	sp, #8
    d57c:	af00      	add	r7, sp, #0
    d57e:	6078      	str	r0, [r7, #4]
    d580:	687a      	ldr	r2, [r7, #4]
    d582:	4b0a      	ldr	r3, [pc, #40]	(d5ac <_ZN11SharpSensorD1Ev+0x34>)
    d584:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    d586:	687b      	ldr	r3, [r7, #4]
    d588:	4618      	mov	r0, r3
    d58a:	f7fd fc83 	bl	ae94 <_ZN12AnalogSensorD2Ev>
    d58e:	f04f 0300 	mov.w	r3, #0	; 0x0
    d592:	b2db      	uxtb	r3, r3
    d594:	2b00      	cmp	r3, #0
    d596:	d002      	beq.n	d59e <_ZN11SharpSensorD1Ev+0x26>
    d598:	6878      	ldr	r0, [r7, #4]
    d59a:	f001 fb6b 	bl	ec74 <_ZdlPv>
    d59e:	687b      	ldr	r3, [r7, #4]
    d5a0:	4618      	mov	r0, r3
    d5a2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d5a6:	46bd      	mov	sp, r7
    d5a8:	bd80      	pop	{r7, pc}
    d5aa:	46c0      	nop			(mov r8, r8)
    d5ac:	000240a8 	.word	0x000240a8

0000d5b0 <_ZN11SharpSensorD2Ev>:
    this->evt = false;
    #endif

}

SharpSensor::~SharpSensor()
    d5b0:	b580      	push	{r7, lr}
    d5b2:	b082      	sub	sp, #8
    d5b4:	af00      	add	r7, sp, #0
    d5b6:	6078      	str	r0, [r7, #4]
    d5b8:	687a      	ldr	r2, [r7, #4]
    d5ba:	4b0a      	ldr	r3, [pc, #40]	(d5e4 <_ZN11SharpSensorD2Ev+0x34>)
    d5bc:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    d5be:	687b      	ldr	r3, [r7, #4]
    d5c0:	4618      	mov	r0, r3
    d5c2:	f7fd fc67 	bl	ae94 <_ZN12AnalogSensorD2Ev>
    d5c6:	f04f 0300 	mov.w	r3, #0	; 0x0
    d5ca:	b2db      	uxtb	r3, r3
    d5cc:	2b00      	cmp	r3, #0
    d5ce:	d002      	beq.n	d5d6 <_ZN11SharpSensorD2Ev+0x26>
    d5d0:	6878      	ldr	r0, [r7, #4]
    d5d2:	f001 fb4f 	bl	ec74 <_ZdlPv>
    d5d6:	687b      	ldr	r3, [r7, #4]
    d5d8:	4618      	mov	r0, r3
    d5da:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d5de:	46bd      	mov	sp, r7
    d5e0:	bd80      	pop	{r7, pc}
    d5e2:	46c0      	nop			(mov r8, r8)
    d5e4:	000240a8 	.word	0x000240a8

0000d5e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>:
#include "leds.h"

int SharpSensor::threshold = SEUIL_DETECTION;
bool SharpSensor::estDesactive = false;

SharpSensor::SharpSensor(SharpName name, uint8_t channel, DMA_MEMORY_TYPE* pData, int seuil) : AnalogSensor(channel, pData)
    d5e8:	b580      	push	{r7, lr}
    d5ea:	b084      	sub	sp, #16
    d5ec:	af00      	add	r7, sp, #0
    d5ee:	60f8      	str	r0, [r7, #12]
    d5f0:	607b      	str	r3, [r7, #4]
    d5f2:	460b      	mov	r3, r1
    d5f4:	72fb      	strb	r3, [r7, #11]
    d5f6:	4613      	mov	r3, r2
    d5f8:	72bb      	strb	r3, [r7, #10]
    d5fa:	68fb      	ldr	r3, [r7, #12]
    d5fc:	7aba      	ldrb	r2, [r7, #10]
    d5fe:	4618      	mov	r0, r3
    d600:	4611      	mov	r1, r2
    d602:	687a      	ldr	r2, [r7, #4]
    d604:	f7fd fc8c 	bl	af20 <_ZN12AnalogSensorC2EhPt>
    d608:	68fa      	ldr	r2, [r7, #12]
    d60a:	4b0f      	ldr	r3, [pc, #60]	(d648 <_ZN11SharpSensorC1ENS_9SharpNameEhPti+0x60>)
    d60c:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    d60e:	68fa      	ldr	r2, [r7, #12]
    d610:	7afb      	ldrb	r3, [r7, #11]
    d612:	7353      	strb	r3, [r2, #13]
    counter = 0;
    d614:	68fa      	ldr	r2, [r7, #12]
    d616:	f04f 0300 	mov.w	r3, #0	; 0x0
    d61a:	7313      	strb	r3, [r2, #12]
    output = false;
    d61c:	68fa      	ldr	r2, [r7, #12]
    d61e:	f04f 0300 	mov.w	r3, #0	; 0x0
    d622:	7393      	strb	r3, [r2, #14]
    actif = true;
    d624:	68fa      	ldr	r2, [r7, #12]
    d626:	f04f 0301 	mov.w	r3, #1	; 0x1
    d62a:	73d3      	strb	r3, [r2, #15]
    seuilDetection = seuil;
    d62c:	69bb      	ldr	r3, [r7, #24]
    d62e:	b29b      	uxth	r3, r3
    d630:	68fa      	ldr	r2, [r7, #12]
    d632:	8293      	strh	r3, [r2, #20]
    value = 0;
    d634:	68fa      	ldr	r2, [r7, #12]
    d636:	f04f 0300 	mov.w	r3, #0	; 0x0
    d63a:	6113      	str	r3, [r2, #16]
    #ifndef ROBOTHW
    this->evt = false;
    #endif

}
    d63c:	68fb      	ldr	r3, [r7, #12]
    d63e:	4618      	mov	r0, r3
    d640:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d644:	46bd      	mov	sp, r7
    d646:	bd80      	pop	{r7, pc}
    d648:	000240a8 	.word	0x000240a8

0000d64c <_ZN11SharpSensorC2ENS_9SharpNameEhPti>:
#include "leds.h"

int SharpSensor::threshold = SEUIL_DETECTION;
bool SharpSensor::estDesactive = false;

SharpSensor::SharpSensor(SharpName name, uint8_t channel, DMA_MEMORY_TYPE* pData, int seuil) : AnalogSensor(channel, pData)
    d64c:	b580      	push	{r7, lr}
    d64e:	b084      	sub	sp, #16
    d650:	af00      	add	r7, sp, #0
    d652:	60f8      	str	r0, [r7, #12]
    d654:	607b      	str	r3, [r7, #4]
    d656:	460b      	mov	r3, r1
    d658:	72fb      	strb	r3, [r7, #11]
    d65a:	4613      	mov	r3, r2
    d65c:	72bb      	strb	r3, [r7, #10]
    d65e:	68fb      	ldr	r3, [r7, #12]
    d660:	7aba      	ldrb	r2, [r7, #10]
    d662:	4618      	mov	r0, r3
    d664:	4611      	mov	r1, r2
    d666:	687a      	ldr	r2, [r7, #4]
    d668:	f7fd fc5a 	bl	af20 <_ZN12AnalogSensorC2EhPt>
    d66c:	68fa      	ldr	r2, [r7, #12]
    d66e:	4b0f      	ldr	r3, [pc, #60]	(d6ac <_ZN11SharpSensorC2ENS_9SharpNameEhPti+0x60>)
    d670:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    d672:	68fa      	ldr	r2, [r7, #12]
    d674:	7afb      	ldrb	r3, [r7, #11]
    d676:	7353      	strb	r3, [r2, #13]
    counter = 0;
    d678:	68fa      	ldr	r2, [r7, #12]
    d67a:	f04f 0300 	mov.w	r3, #0	; 0x0
    d67e:	7313      	strb	r3, [r2, #12]
    output = false;
    d680:	68fa      	ldr	r2, [r7, #12]
    d682:	f04f 0300 	mov.w	r3, #0	; 0x0
    d686:	7393      	strb	r3, [r2, #14]
    actif = true;
    d688:	68fa      	ldr	r2, [r7, #12]
    d68a:	f04f 0301 	mov.w	r3, #1	; 0x1
    d68e:	73d3      	strb	r3, [r2, #15]
    seuilDetection = seuil;
    d690:	69bb      	ldr	r3, [r7, #24]
    d692:	b29b      	uxth	r3, r3
    d694:	68fa      	ldr	r2, [r7, #12]
    d696:	8293      	strh	r3, [r2, #20]
    value = 0;
    d698:	68fa      	ldr	r2, [r7, #12]
    d69a:	f04f 0300 	mov.w	r3, #0	; 0x0
    d69e:	6113      	str	r3, [r2, #16]
    #ifndef ROBOTHW
    this->evt = false;
    #endif

}
    d6a0:	68fb      	ldr	r3, [r7, #12]
    d6a2:	4618      	mov	r0, r3
    d6a4:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d6a8:	46bd      	mov	sp, r7
    d6aa:	bd80      	pop	{r7, pc}
    d6ac:	000240a8 	.word	0x000240a8

0000d6b0 <_ZN5Timer7getTIMxEv>:
    else if (m_TIMx == TIM5)
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5,ENABLE);
}

// Retourne le timer (TIM1, TIM2 ou TIM3), voir TIM_TypeDef.
TIM_TypeDef* Timer::getTIMx()
    d6b0:	b480      	push	{r7}
    d6b2:	b083      	sub	sp, #12
    d6b4:	af00      	add	r7, sp, #0
    d6b6:	6078      	str	r0, [r7, #4]
{
    return m_TIMx;
    d6b8:	687b      	ldr	r3, [r7, #4]
    d6ba:	681b      	ldr	r3, [r3, #0]
}
    d6bc:	4618      	mov	r0, r3
    d6be:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d6c2:	46bd      	mov	sp, r7
    d6c4:	bc80      	pop	{r7}
    d6c6:	4770      	bx	lr

0000d6c8 <_ZN5Timer9getPeriodEv>:
    timInit.TIM_RepetitionCounter = 0;

    TIM_TimeBaseInit(getTIMx(), &timInit);
}

uint16_t Timer::getPeriod()
    d6c8:	b480      	push	{r7}
    d6ca:	b083      	sub	sp, #12
    d6cc:	af00      	add	r7, sp, #0
    d6ce:	6078      	str	r0, [r7, #4]
{
    return m_period;
    d6d0:	687b      	ldr	r3, [r7, #4]
    d6d2:	891b      	ldrh	r3, [r3, #8]
}
    d6d4:	4618      	mov	r0, r3
    d6d6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d6da:	46bd      	mov	sp, r7
    d6dc:	bc80      	pop	{r7}
    d6de:	4770      	bx	lr

0000d6e0 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>:

void Timer::enableTimerClock(TIM_TypeDef* TIMx)
    d6e0:	b580      	push	{r7, lr}
    d6e2:	b082      	sub	sp, #8
    d6e4:	af00      	add	r7, sp, #0
    d6e6:	6078      	str	r0, [r7, #4]
{
    if (TIMx == TIM1)
    d6e8:	687a      	ldr	r2, [r7, #4]
    d6ea:	4b27      	ldr	r3, [pc, #156]	(d788 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa8>)
    d6ec:	429a      	cmp	r2, r3
    d6ee:	d106      	bne.n	d6fe <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x1e>
    {
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
    d6f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
    d6f4:	f04f 0101 	mov.w	r1, #1	; 0x1
    d6f8:	f7f4 fea6 	bl	2448 <RCC_APB2PeriphClockCmd>
    d6fc:	e040      	b.n	d780 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM2)
    d6fe:	687b      	ldr	r3, [r7, #4]
    d700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    d704:	d106      	bne.n	d714 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x34>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
    d706:	f04f 0001 	mov.w	r0, #1	; 0x1
    d70a:	f04f 0101 	mov.w	r1, #1	; 0x1
    d70e:	f7f4 febd 	bl	248c <RCC_APB1PeriphClockCmd>
    d712:	e035      	b.n	d780 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM3)
    d714:	687a      	ldr	r2, [r7, #4]
    d716:	4b1d      	ldr	r3, [pc, #116]	(d78c <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xac>)
    d718:	429a      	cmp	r2, r3
    d71a:	d106      	bne.n	d72a <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x4a>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
    d71c:	f04f 0002 	mov.w	r0, #2	; 0x2
    d720:	f04f 0101 	mov.w	r1, #1	; 0x1
    d724:	f7f4 feb2 	bl	248c <RCC_APB1PeriphClockCmd>
    d728:	e02a      	b.n	d780 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM4)
    d72a:	687a      	ldr	r2, [r7, #4]
    d72c:	4b18      	ldr	r3, [pc, #96]	(d790 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xb0>)
    d72e:	429a      	cmp	r2, r3
    d730:	d106      	bne.n	d740 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x60>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
    d732:	f04f 0004 	mov.w	r0, #4	; 0x4
    d736:	f04f 0101 	mov.w	r1, #1	; 0x1
    d73a:	f7f4 fea7 	bl	248c <RCC_APB1PeriphClockCmd>
    d73e:	e01f      	b.n	d780 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM5)
    d740:	687a      	ldr	r2, [r7, #4]
    d742:	4b14      	ldr	r3, [pc, #80]	(d794 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xb4>)
    d744:	429a      	cmp	r2, r3
    d746:	d106      	bne.n	d756 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x76>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
    d748:	f04f 0008 	mov.w	r0, #8	; 0x8
    d74c:	f04f 0101 	mov.w	r1, #1	; 0x1
    d750:	f7f4 fe9c 	bl	248c <RCC_APB1PeriphClockCmd>
    d754:	e014      	b.n	d780 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM6)
    d756:	687a      	ldr	r2, [r7, #4]
    d758:	4b0f      	ldr	r3, [pc, #60]	(d798 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xb8>)
    d75a:	429a      	cmp	r2, r3
    d75c:	d106      	bne.n	d76c <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x8c>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
    d75e:	f04f 0010 	mov.w	r0, #16	; 0x10
    d762:	f04f 0101 	mov.w	r1, #1	; 0x1
    d766:	f7f4 fe91 	bl	248c <RCC_APB1PeriphClockCmd>
    d76a:	e009      	b.n	d780 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM7)
    d76c:	687a      	ldr	r2, [r7, #4]
    d76e:	4b0b      	ldr	r3, [pc, #44]	(d79c <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xbc>)
    d770:	429a      	cmp	r2, r3
    d772:	d105      	bne.n	d780 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
    d774:	f04f 0020 	mov.w	r0, #32	; 0x20
    d778:	f04f 0101 	mov.w	r1, #1	; 0x1
    d77c:	f7f4 fe86 	bl	248c <RCC_APB1PeriphClockCmd>
    }
}
    d780:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d784:	46bd      	mov	sp, r7
    d786:	bd80      	pop	{r7, pc}
    d788:	40012c00 	.word	0x40012c00
    d78c:	40000400 	.word	0x40000400
    d790:	40000800 	.word	0x40000800
    d794:	40000c00 	.word	0x40000c00
    d798:	40001000 	.word	0x40001000
    d79c:	40001400 	.word	0x40001400

0000d7a0 <_ZN5Timer11enableClockEv>:
#include "timerHandler.h"

// Propage le signal de l’horloge système au timer.
void Timer::enableClock()
    d7a0:	b580      	push	{r7, lr}
    d7a2:	b082      	sub	sp, #8
    d7a4:	af00      	add	r7, sp, #0
    d7a6:	6078      	str	r0, [r7, #4]
{
    if (m_TIMx == TIM1)
    d7a8:	687b      	ldr	r3, [r7, #4]
    d7aa:	681a      	ldr	r2, [r3, #0]
    d7ac:	4b1e      	ldr	r3, [pc, #120]	(d828 <_ZN5Timer11enableClockEv+0x88>)
    d7ae:	429a      	cmp	r2, r3
    d7b0:	d106      	bne.n	d7c0 <_ZN5Timer11enableClockEv+0x20>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,ENABLE);
    d7b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
    d7b6:	f04f 0101 	mov.w	r1, #1	; 0x1
    d7ba:	f7f4 fe45 	bl	2448 <RCC_APB2PeriphClockCmd>
    d7be:	e02e      	b.n	d81e <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM2)
    d7c0:	687b      	ldr	r3, [r7, #4]
    d7c2:	681b      	ldr	r3, [r3, #0]
    d7c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    d7c8:	d106      	bne.n	d7d8 <_ZN5Timer11enableClockEv+0x38>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
    d7ca:	f04f 0001 	mov.w	r0, #1	; 0x1
    d7ce:	f04f 0101 	mov.w	r1, #1	; 0x1
    d7d2:	f7f4 fe5b 	bl	248c <RCC_APB1PeriphClockCmd>
    d7d6:	e022      	b.n	d81e <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM3)
    d7d8:	687b      	ldr	r3, [r7, #4]
    d7da:	681a      	ldr	r2, [r3, #0]
    d7dc:	4b13      	ldr	r3, [pc, #76]	(d82c <_ZN5Timer11enableClockEv+0x8c>)
    d7de:	429a      	cmp	r2, r3
    d7e0:	d106      	bne.n	d7f0 <_ZN5Timer11enableClockEv+0x50>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
    d7e2:	f04f 0002 	mov.w	r0, #2	; 0x2
    d7e6:	f04f 0101 	mov.w	r1, #1	; 0x1
    d7ea:	f7f4 fe4f 	bl	248c <RCC_APB1PeriphClockCmd>
    d7ee:	e016      	b.n	d81e <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM4)
    d7f0:	687b      	ldr	r3, [r7, #4]
    d7f2:	681a      	ldr	r2, [r3, #0]
    d7f4:	4b0e      	ldr	r3, [pc, #56]	(d830 <_ZN5Timer11enableClockEv+0x90>)
    d7f6:	429a      	cmp	r2, r3
    d7f8:	d106      	bne.n	d808 <_ZN5Timer11enableClockEv+0x68>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4,ENABLE);
    d7fa:	f04f 0004 	mov.w	r0, #4	; 0x4
    d7fe:	f04f 0101 	mov.w	r1, #1	; 0x1
    d802:	f7f4 fe43 	bl	248c <RCC_APB1PeriphClockCmd>
    d806:	e00a      	b.n	d81e <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM5)
    d808:	687b      	ldr	r3, [r7, #4]
    d80a:	681a      	ldr	r2, [r3, #0]
    d80c:	4b09      	ldr	r3, [pc, #36]	(d834 <_ZN5Timer11enableClockEv+0x94>)
    d80e:	429a      	cmp	r2, r3
    d810:	d105      	bne.n	d81e <_ZN5Timer11enableClockEv+0x7e>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5,ENABLE);
    d812:	f04f 0008 	mov.w	r0, #8	; 0x8
    d816:	f04f 0101 	mov.w	r1, #1	; 0x1
    d81a:	f7f4 fe37 	bl	248c <RCC_APB1PeriphClockCmd>
}
    d81e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d822:	46bd      	mov	sp, r7
    d824:	bd80      	pop	{r7, pc}
    d826:	46c0      	nop			(mov r8, r8)
    d828:	40012c00 	.word	0x40012c00
    d82c:	40000400 	.word	0x40000400
    d830:	40000800 	.word	0x40000800
    d834:	40000c00 	.word	0x40000c00

0000d838 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>:
TIM_TypeDef* Timer::getTIMx()
{
    return m_TIMx;
}

Timer::Timer(TIM_TypeDef* TIMx, uint16_t period, uint16_t prescaler, ClkDivision clockDivision)
    d838:	b580      	push	{r7, lr}
    d83a:	b088      	sub	sp, #32
    d83c:	af00      	add	r7, sp, #0
    d83e:	60f8      	str	r0, [r7, #12]
    d840:	60b9      	str	r1, [r7, #8]
    d842:	4619      	mov	r1, r3
    d844:	4613      	mov	r3, r2
    d846:	80fb      	strh	r3, [r7, #6]
    d848:	460b      	mov	r3, r1
    d84a:	80bb      	strh	r3, [r7, #4]
{
    m_TIMx = TIMx;
    d84c:	68fa      	ldr	r2, [r7, #12]
    d84e:	68bb      	ldr	r3, [r7, #8]
    d850:	6013      	str	r3, [r2, #0]
    m_period = period;
    d852:	68fa      	ldr	r2, [r7, #12]
    d854:	88fb      	ldrh	r3, [r7, #6]
    d856:	8113      	strh	r3, [r2, #8]
    m_prescaler = prescaler;
    d858:	68fa      	ldr	r2, [r7, #12]
    d85a:	88bb      	ldrh	r3, [r7, #4]
    d85c:	8093      	strh	r3, [r2, #4]
    m_div = clockDivision;
    d85e:	68fa      	ldr	r2, [r7, #12]
    d860:	8d3b      	ldrh	r3, [r7, #40]
    d862:	80d3      	strh	r3, [r2, #6]

    enableClock();
    d864:	68f8      	ldr	r0, [r7, #12]
    d866:	f7ff ff9b 	bl	d7a0 <_ZN5Timer11enableClockEv>

    TIM_TimeBaseInitTypeDef timInit;
    timInit.TIM_Prescaler = prescaler;
    d86a:	88bb      	ldrh	r3, [r7, #4]
    d86c:	82fb      	strh	r3, [r7, #22]
    timInit.TIM_CounterMode = TIM_CounterMode_Up;
    d86e:	f04f 0300 	mov.w	r3, #0	; 0x0
    d872:	833b      	strh	r3, [r7, #24]
    timInit.TIM_Period = period;
    d874:	88fb      	ldrh	r3, [r7, #6]
    d876:	837b      	strh	r3, [r7, #26]
    timInit.TIM_ClockDivision = clockDivision;
    d878:	8d3b      	ldrh	r3, [r7, #40]
    d87a:	83bb      	strh	r3, [r7, #28]
    timInit.TIM_RepetitionCounter = 0;
    d87c:	f04f 0300 	mov.w	r3, #0	; 0x0
    d880:	77bb      	strb	r3, [r7, #30]

    TIM_TimeBaseInit(getTIMx(), &timInit);
    d882:	68f8      	ldr	r0, [r7, #12]
    d884:	f7ff ff14 	bl	d6b0 <_ZN5Timer7getTIMxEv>
    d888:	4603      	mov	r3, r0
    d88a:	f107 0216 	add.w	r2, r7, #22	; 0x16
    d88e:	4618      	mov	r0, r3
    d890:	4611      	mov	r1, r2
    d892:	f7f4 ffd1 	bl	2838 <TIM_TimeBaseInit>
}
    d896:	68fb      	ldr	r3, [r7, #12]
    d898:	4618      	mov	r0, r3
    d89a:	f107 0720 	add.w	r7, r7, #32	; 0x20
    d89e:	46bd      	mov	sp, r7
    d8a0:	bd80      	pop	{r7, pc}
    d8a2:	46c0      	nop			(mov r8, r8)

0000d8a4 <_ZN5TimerC2EP11TIM_TypeDefttNS_11ClkDivisionE>:
TIM_TypeDef* Timer::getTIMx()
{
    return m_TIMx;
}

Timer::Timer(TIM_TypeDef* TIMx, uint16_t period, uint16_t prescaler, ClkDivision clockDivision)
    d8a4:	b580      	push	{r7, lr}
    d8a6:	b088      	sub	sp, #32
    d8a8:	af00      	add	r7, sp, #0
    d8aa:	60f8      	str	r0, [r7, #12]
    d8ac:	60b9      	str	r1, [r7, #8]
    d8ae:	4619      	mov	r1, r3
    d8b0:	4613      	mov	r3, r2
    d8b2:	80fb      	strh	r3, [r7, #6]
    d8b4:	460b      	mov	r3, r1
    d8b6:	80bb      	strh	r3, [r7, #4]
{
    m_TIMx = TIMx;
    d8b8:	68fa      	ldr	r2, [r7, #12]
    d8ba:	68bb      	ldr	r3, [r7, #8]
    d8bc:	6013      	str	r3, [r2, #0]
    m_period = period;
    d8be:	68fa      	ldr	r2, [r7, #12]
    d8c0:	88fb      	ldrh	r3, [r7, #6]
    d8c2:	8113      	strh	r3, [r2, #8]
    m_prescaler = prescaler;
    d8c4:	68fa      	ldr	r2, [r7, #12]
    d8c6:	88bb      	ldrh	r3, [r7, #4]
    d8c8:	8093      	strh	r3, [r2, #4]
    m_div = clockDivision;
    d8ca:	68fa      	ldr	r2, [r7, #12]
    d8cc:	8d3b      	ldrh	r3, [r7, #40]
    d8ce:	80d3      	strh	r3, [r2, #6]

    enableClock();
    d8d0:	68f8      	ldr	r0, [r7, #12]
    d8d2:	f7ff ff65 	bl	d7a0 <_ZN5Timer11enableClockEv>

    TIM_TimeBaseInitTypeDef timInit;
    timInit.TIM_Prescaler = prescaler;
    d8d6:	88bb      	ldrh	r3, [r7, #4]
    d8d8:	82fb      	strh	r3, [r7, #22]
    timInit.TIM_CounterMode = TIM_CounterMode_Up;
    d8da:	f04f 0300 	mov.w	r3, #0	; 0x0
    d8de:	833b      	strh	r3, [r7, #24]
    timInit.TIM_Period = period;
    d8e0:	88fb      	ldrh	r3, [r7, #6]
    d8e2:	837b      	strh	r3, [r7, #26]
    timInit.TIM_ClockDivision = clockDivision;
    d8e4:	8d3b      	ldrh	r3, [r7, #40]
    d8e6:	83bb      	strh	r3, [r7, #28]
    timInit.TIM_RepetitionCounter = 0;
    d8e8:	f04f 0300 	mov.w	r3, #0	; 0x0
    d8ec:	77bb      	strb	r3, [r7, #30]

    TIM_TimeBaseInit(getTIMx(), &timInit);
    d8ee:	68f8      	ldr	r0, [r7, #12]
    d8f0:	f7ff fede 	bl	d6b0 <_ZN5Timer7getTIMxEv>
    d8f4:	4603      	mov	r3, r0
    d8f6:	f107 0216 	add.w	r2, r7, #22	; 0x16
    d8fa:	4618      	mov	r0, r3
    d8fc:	4611      	mov	r1, r2
    d8fe:	f7f4 ff9b 	bl	2838 <TIM_TimeBaseInit>
}
    d902:	68fb      	ldr	r3, [r7, #12]
    d904:	4618      	mov	r0, r3
    d906:	f107 0720 	add.w	r7, r7, #32	; 0x20
    d90a:	46bd      	mov	sp, r7
    d90c:	bd80      	pop	{r7, pc}
    d90e:	46c0      	nop			(mov r8, r8)

0000d910 <_ZNK7Tirette7enleveeEv>:
        buffer |= enlevee();
    }
}

// est ce que la tirette est enlevée ?
bool Tirette::enlevee() const
    d910:	b580      	push	{r7, lr}
    d912:	b082      	sub	sp, #8
    d914:	af00      	add	r7, sp, #0
    d916:	6078      	str	r0, [r7, #4]
{
    #ifdef STM32F40_41xxx
        return GPIO_ReadInputDataBit(GPIOx, GPIO_Pin_x) == Bit_RESET;
    #else
        return GPIO_ReadInputDataBit(GPIOx, GPIO_Pin_x) == Bit_SET;
    d918:	687b      	ldr	r3, [r7, #4]
    d91a:	681a      	ldr	r2, [r3, #0]
    d91c:	687b      	ldr	r3, [r7, #4]
    d91e:	889b      	ldrh	r3, [r3, #4]
    d920:	4610      	mov	r0, r2
    d922:	4619      	mov	r1, r3
    d924:	f7f3 ffbe 	bl	18a4 <GPIO_ReadInputDataBit>
    d928:	4603      	mov	r3, r0
    d92a:	2b01      	cmp	r3, #1
    d92c:	bf14      	ite	ne
    d92e:	2300      	movne	r3, #0
    d930:	2301      	moveq	r3, #1
    d932:	b2db      	uxtb	r3, r3
    #endif
}
    d934:	4618      	mov	r0, r3
    d936:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d93a:	46bd      	mov	sp, r7
    d93c:	bd80      	pop	{r7, pc}
    d93e:	46c0      	nop			(mov r8, r8)

0000d940 <_ZNK7Tirette14attendreRemiseEv>:
        buffer |= !enlevee();
    }
}

// attends jusqu'à ce que la tirette soit remise
void Tirette::attendreRemise() const
    d940:	b580      	push	{r7, lr}
    d942:	b084      	sub	sp, #16
    d944:	af00      	add	r7, sp, #0
    d946:	6078      	str	r0, [r7, #4]
{
    #ifdef REMOTE_ON
        Remote::log("Waiting for 'tirette remise'");
    #endif
    int buffer = 0xffffffff;
    d948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d94c:	60fb      	str	r3, [r7, #12]
    d94e:	e00c      	b.n	d96a <_ZNK7Tirette14attendreRemiseEv+0x2a>
        Remote::getSingleton()->update(true);
        if (Remote::getSingleton()->isRemoteMode())
            break;
        #endif

        buffer <<= 1;
    d950:	68fb      	ldr	r3, [r7, #12]
    d952:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d956:	60fb      	str	r3, [r7, #12]
        buffer |= enlevee();
    d958:	6878      	ldr	r0, [r7, #4]
    d95a:	f7ff ffd9 	bl	d910 <_ZNK7Tirette7enleveeEv>
    d95e:	4603      	mov	r3, r0
    d960:	461a      	mov	r2, r3
    d962:	68fb      	ldr	r3, [r7, #12]
    d964:	ea43 0302 	orr.w	r3, r3, r2
    d968:	60fb      	str	r3, [r7, #12]
{
    #ifdef REMOTE_ON
        Remote::log("Waiting for 'tirette remise'");
    #endif
    int buffer = 0xffffffff;
    while (buffer)
    d96a:	68fb      	ldr	r3, [r7, #12]
    d96c:	2b00      	cmp	r3, #0
    d96e:	d1ef      	bne.n	d950 <_ZNK7Tirette14attendreRemiseEv+0x10>
        #endif

        buffer <<= 1;
        buffer |= enlevee();
    }
}
    d970:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d974:	46bd      	mov	sp, r7
    d976:	bd80      	pop	{r7, pc}

0000d978 <_ZNK7Tirette15attendreEnleveeEv>:
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx_tirette, &GPIO_InitStructure);
}

// attends jusqu'à ce que la tirette soit enlevée
void Tirette::attendreEnlevee() const
    d978:	b580      	push	{r7, lr}
    d97a:	b084      	sub	sp, #16
    d97c:	af00      	add	r7, sp, #0
    d97e:	6078      	str	r0, [r7, #4]
{
    #ifdef REMOTE_ON
        Remote::log("Waiting for 'tirette enleve'");
    #endif
    int buffer = 0xffffffff;
    d980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d984:	60fb      	str	r3, [r7, #12]
    d986:	e00f      	b.n	d9a8 <_ZNK7Tirette15attendreEnleveeEv+0x30>
        Remote::getSingleton()->update(true);
        if (Remote::getSingleton()->isRemoteMode())
            break;
        #endif

        buffer <<= 1;
    d988:	68fb      	ldr	r3, [r7, #12]
    d98a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d98e:	60fb      	str	r3, [r7, #12]
        buffer |= !enlevee();
    d990:	6878      	ldr	r0, [r7, #4]
    d992:	f7ff ffbd 	bl	d910 <_ZNK7Tirette7enleveeEv>
    d996:	4603      	mov	r3, r0
    d998:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d99c:	b2db      	uxtb	r3, r3
    d99e:	461a      	mov	r2, r3
    d9a0:	68fb      	ldr	r3, [r7, #12]
    d9a2:	ea43 0302 	orr.w	r3, r3, r2
    d9a6:	60fb      	str	r3, [r7, #12]
    #ifdef REMOTE_ON
        Remote::log("Waiting for 'tirette enleve'");
    #endif
    int buffer = 0xffffffff;
    //int waiting = 0;
    while (buffer)
    d9a8:	68fb      	ldr	r3, [r7, #12]
    d9aa:	2b00      	cmp	r3, #0
    d9ac:	d1ec      	bne.n	d988 <_ZNK7Tirette15attendreEnleveeEv+0x10>
        #endif

        buffer <<= 1;
        buffer |= !enlevee();
    }
}
    d9ae:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d9b2:	46bd      	mov	sp, r7
    d9b4:	bd80      	pop	{r7, pc}
    d9b6:	46c0      	nop			(mov r8, r8)

0000d9b8 <_ZN7TiretteC1EP12GPIO_TypeDeft>:
#endif
#include "leds.h"


// initialise la pin de la tirette
Tirette::Tirette(GPIO_TypeDef* GPIOx_tirette, uint16_t GPIO_Pin_x_tirette)
    d9b8:	b580      	push	{r7, lr}
    d9ba:	b086      	sub	sp, #24
    d9bc:	af00      	add	r7, sp, #0
    d9be:	60f8      	str	r0, [r7, #12]
    d9c0:	60b9      	str	r1, [r7, #8]
    d9c2:	4613      	mov	r3, r2
    d9c4:	80fb      	strh	r3, [r7, #6]
    : GPIOx(GPIOx_tirette), GPIO_Pin_x(GPIO_Pin_x_tirette)
    d9c6:	68fa      	ldr	r2, [r7, #12]
    d9c8:	68bb      	ldr	r3, [r7, #8]
    d9ca:	6013      	str	r3, [r2, #0]
    d9cc:	68fa      	ldr	r2, [r7, #12]
    d9ce:	88fb      	ldrh	r3, [r7, #6]
    d9d0:	8093      	strh	r3, [r2, #4]
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_x_tirette;
    d9d2:	88fb      	ldrh	r3, [r7, #6]
    d9d4:	82bb      	strh	r3, [r7, #20]

    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    d9d6:	f04f 0348 	mov.w	r3, #72	; 0x48
    d9da:	75fb      	strb	r3, [r7, #23]
    #endif

    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    d9dc:	f04f 0303 	mov.w	r3, #3	; 0x3
    d9e0:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_tirette, &GPIO_InitStructure);
    d9e2:	f107 0314 	add.w	r3, r7, #20	; 0x14
    d9e6:	68b8      	ldr	r0, [r7, #8]
    d9e8:	4619      	mov	r1, r3
    d9ea:	f7f3 fe61 	bl	16b0 <GPIO_Init>
}
    d9ee:	68fb      	ldr	r3, [r7, #12]
    d9f0:	4618      	mov	r0, r3
    d9f2:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d9f6:	46bd      	mov	sp, r7
    d9f8:	bd80      	pop	{r7, pc}
    d9fa:	46c0      	nop			(mov r8, r8)

0000d9fc <_ZN7TiretteC2EP12GPIO_TypeDeft>:
#endif
#include "leds.h"


// initialise la pin de la tirette
Tirette::Tirette(GPIO_TypeDef* GPIOx_tirette, uint16_t GPIO_Pin_x_tirette)
    d9fc:	b580      	push	{r7, lr}
    d9fe:	b086      	sub	sp, #24
    da00:	af00      	add	r7, sp, #0
    da02:	60f8      	str	r0, [r7, #12]
    da04:	60b9      	str	r1, [r7, #8]
    da06:	4613      	mov	r3, r2
    da08:	80fb      	strh	r3, [r7, #6]
    : GPIOx(GPIOx_tirette), GPIO_Pin_x(GPIO_Pin_x_tirette)
    da0a:	68fa      	ldr	r2, [r7, #12]
    da0c:	68bb      	ldr	r3, [r7, #8]
    da0e:	6013      	str	r3, [r2, #0]
    da10:	68fa      	ldr	r2, [r7, #12]
    da12:	88fb      	ldrh	r3, [r7, #6]
    da14:	8093      	strh	r3, [r2, #4]
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_x_tirette;
    da16:	88fb      	ldrh	r3, [r7, #6]
    da18:	82bb      	strh	r3, [r7, #20]

    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    da1a:	f04f 0348 	mov.w	r3, #72	; 0x48
    da1e:	75fb      	strb	r3, [r7, #23]
    #endif

    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    da20:	f04f 0303 	mov.w	r3, #3	; 0x3
    da24:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_tirette, &GPIO_InitStructure);
    da26:	f107 0314 	add.w	r3, r7, #20	; 0x14
    da2a:	68b8      	ldr	r0, [r7, #8]
    da2c:	4619      	mov	r1, r3
    da2e:	f7f3 fe3f 	bl	16b0 <GPIO_Init>
}
    da32:	68fb      	ldr	r3, [r7, #12]
    da34:	4618      	mov	r0, r3
    da36:	f107 0718 	add.w	r7, r7, #24	; 0x18
    da3a:	46bd      	mov	sp, r7
    da3c:	bd80      	pop	{r7, pc}
    da3e:	46c0      	nop			(mov r8, r8)

0000da40 <_ZN8Tourelle9getAlerteEv>:
//{
//    this->zonesCritiques[numeroZone][0] = (uint16_t) -1;
//    this->zonesCritiques[numeroZone][1] = (uint16_t) -1;
//}

bool Tourelle::getAlerte(void)
    da40:	b480      	push	{r7}
    da42:	b083      	sub	sp, #12
    da44:	af00      	add	r7, sp, #0
    da46:	6078      	str	r0, [r7, #4]
{
    return this->alerte;
    da48:	687b      	ldr	r3, [r7, #4]
    da4a:	781b      	ldrb	r3, [r3, #0]
}
    da4c:	4618      	mov	r0, r3
    da4e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    da52:	46bd      	mov	sp, r7
    da54:	bc80      	pop	{r7}
    da56:	4770      	bx	lr

0000da58 <_ZN8Tourelle12updateSimpleEv>:
//    this->alerte = newAlerte;
//
//    return newAlerte;
//}

bool Tourelle::updateSimple(void)
    da58:	b480      	push	{r7}
    da5a:	b085      	sub	sp, #20
    da5c:	af00      	add	r7, sp, #0
    da5e:	6078      	str	r0, [r7, #4]
{
    //Copie locale pour être thread-safe, et avoir une chance infime de louper un objet une fois
    uint8_t nombreObjets = nombreObjetDetecte;
    da60:	4b0f      	ldr	r3, [pc, #60]	(daa0 <_ZN8Tourelle12updateSimpleEv+0x48>)
    da62:	781b      	ldrb	r3, [r3, #0]
    da64:	73fb      	strb	r3, [r7, #15]
    nombreObjetDetecte = 0;
    da66:	4a0e      	ldr	r2, [pc, #56]	(daa0 <_ZN8Tourelle12updateSimpleEv+0x48>)
    da68:	f04f 0300 	mov.w	r3, #0	; 0x0
    da6c:	7013      	strb	r3, [r2, #0]
    if(nombreObjets)
    da6e:	7bfb      	ldrb	r3, [r7, #15]
    da70:	2b00      	cmp	r3, #0
    da72:	d007      	beq.n	da84 <_ZN8Tourelle12updateSimpleEv+0x2c>
    {
        this->alerte = true;
    da74:	687b      	ldr	r3, [r7, #4]
    da76:	f04f 0201 	mov.w	r2, #1	; 0x1
    da7a:	701a      	strb	r2, [r3, #0]
        return true;
    da7c:	f04f 0301 	mov.w	r3, #1	; 0x1
    da80:	603b      	str	r3, [r7, #0]
    da82:	e006      	b.n	da92 <_ZN8Tourelle12updateSimpleEv+0x3a>
    }
    else
    {
        this->alerte = false;
    da84:	687b      	ldr	r3, [r7, #4]
    da86:	f04f 0200 	mov.w	r2, #0	; 0x0
    da8a:	701a      	strb	r2, [r3, #0]
        return false;
    da8c:	f04f 0300 	mov.w	r3, #0	; 0x0
    da90:	603b      	str	r3, [r7, #0]
    da92:	683b      	ldr	r3, [r7, #0]
    }
}
    da94:	4618      	mov	r0, r3
    da96:	f107 0714 	add.w	r7, r7, #20	; 0x14
    da9a:	46bd      	mov	sp, r7
    da9c:	bc80      	pop	{r7}
    da9e:	4770      	bx	lr
    daa0:	20000589 	.word	0x20000589

0000daa4 <EXTI3_IRQHandler>:
/**
  * @brief  This function handles External line 3 interrupt request.
  * @param  None
  * @retval None
  */
extern "C" void EXTI3_IRQHandler(void)
    daa4:	b580      	push	{r7, lr}
    daa6:	af00      	add	r7, sp, #0
{
    if(EXTI_GetITStatus(EXTI_Line3) != RESET)
    daa8:	f04f 0008 	mov.w	r0, #8	; 0x8
    daac:	f7f3 fd2c 	bl	1508 <EXTI_GetITStatus>
    dab0:	4603      	mov	r3, r0
    dab2:	2b00      	cmp	r3, #0
    dab4:	bf0c      	ite	eq
    dab6:	2300      	moveq	r3, #0
    dab8:	2301      	movne	r3, #1
    daba:	b2db      	uxtb	r3, r3
    dabc:	2b00      	cmp	r3, #0
    dabe:	d00c      	beq.n	dada <EXTI3_IRQHandler+0x36>

//        if(nombreObjetDetecte < 20)
//        {
            //Stocke l'instant de détection de l'objet
            //objectDetectionInstant[nombreObjetDetecte] = TIM_GetCounter(TIM6);
            nombreObjetDetecte++;
    dac0:	4b07      	ldr	r3, [pc, #28]	(dae0 <EXTI3_IRQHandler+0x3c>)
    dac2:	781b      	ldrb	r3, [r3, #0]
    dac4:	f103 0301 	add.w	r3, r3, #1	; 0x1
    dac8:	b2db      	uxtb	r3, r3
    daca:	4a05      	ldr	r2, [pc, #20]	(dae0 <EXTI3_IRQHandler+0x3c>)
    dacc:	7013      	strb	r3, [r2, #0]

            allumerLED2();
    dace:	f7fe fd31 	bl	c534 <_Z11allumerLED2v>

//        }

        /* Clear the EXTI line 2 pending bit */
        EXTI_ClearITPendingBit(EXTI_Line3);
    dad2:	f04f 0008 	mov.w	r0, #8	; 0x8
    dad6:	f7f3 fd41 	bl	155c <EXTI_ClearITPendingBit>
    }
}
    dada:	46bd      	mov	sp, r7
    dadc:	bd80      	pop	{r7, pc}
    dade:	46c0      	nop			(mov r8, r8)
    dae0:	20000589 	.word	0x20000589

0000dae4 <_Z16EXTILine5_Configv>:
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
#endif
}

void EXTILine5_Config(void)
    dae4:	b580      	push	{r7, lr}
    dae6:	b084      	sub	sp, #16
    dae8:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef   NVIC_InitStructure;

    EXTI_InitTypeDef   EXTI_InitStructure;

    /* Enable GPIOA clock */
    RCC_AHBPeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
    daea:	f04f 0020 	mov.w	r0, #32	; 0x20
    daee:	f04f 0101 	mov.w	r1, #1	; 0x1
    daf2:	f7f4 fc87 	bl	2404 <RCC_AHBPeriphClockCmd>
    //RCC_AHBPeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    /* AFIO clock enabled dans initialisation.cpp */


    /* Configure PA3 pin as input floating */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
    daf6:	f04f 0328 	mov.w	r3, #40	; 0x28
    dafa:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
    dafc:	f04f 0320 	mov.w	r3, #32	; 0x20
    db00:	81bb      	strh	r3, [r7, #12]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    db02:	f107 030c 	add.w	r3, r7, #12	; 0xc
    db06:	4817      	ldr	r0, [pc, #92]	(db64 <_Z16EXTILine5_Configv+0x80>)
    db08:	4619      	mov	r1, r3
    db0a:	f7f3 fdd1 	bl	16b0 <GPIO_Init>

    /* Connect EXTI Line3 to PD5 pin */
    //GPIO_EventOutputConfig(GPIO_PortSourceGPIOA, GPIO_PinSource3);
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource5);
    db0e:	f04f 0003 	mov.w	r0, #3	; 0x3
    db12:	f04f 0105 	mov.w	r1, #5	; 0x5
    db16:	f7f4 f831 	bl	1b7c <GPIO_EXTILineConfig>

    /* Configure EXTI Line5 */
    EXTI_InitStructure.EXTI_Line = EXTI_Line5;
    db1a:	f04f 0320 	mov.w	r3, #32	; 0x20
    db1e:	603b      	str	r3, [r7, #0]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    db20:	f04f 0300 	mov.w	r3, #0	; 0x0
    db24:	713b      	strb	r3, [r7, #4]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    db26:	f04f 0308 	mov.w	r3, #8	; 0x8
    db2a:	717b      	strb	r3, [r7, #5]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    db2c:	f04f 0301 	mov.w	r3, #1	; 0x1
    db30:	71bb      	strb	r3, [r7, #6]
    EXTI_Init(&EXTI_InitStructure);
    db32:	463b      	mov	r3, r7
    db34:	4618      	mov	r0, r3
    db36:	f7f3 fc0f 	bl	1358 <EXTI_Init>

    /* Enable and set EXTI Line5 Interrupt to the (not anymore) lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;//EXTI5_IRQn;
    db3a:	f04f 0317 	mov.w	r3, #23	; 0x17
    db3e:	723b      	strb	r3, [r7, #8]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//0x01 for lowest priority
    db40:	f04f 0301 	mov.w	r3, #1	; 0x1
    db44:	727b      	strb	r3, [r7, #9]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
    db46:	f04f 0301 	mov.w	r3, #1	; 0x1
    db4a:	72bb      	strb	r3, [r7, #10]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    db4c:	f04f 0301 	mov.w	r3, #1	; 0x1
    db50:	72fb      	strb	r3, [r7, #11]
    NVIC_Init(&NVIC_InitStructure);
    db52:	f107 0308 	add.w	r3, r7, #8	; 0x8
    db56:	4618      	mov	r0, r3
    db58:	f7f2 fb60 	bl	21c <NVIC_Init>
#endif
}
    db5c:	f107 0710 	add.w	r7, r7, #16	; 0x10
    db60:	46bd      	mov	sp, r7
    db62:	bd80      	pop	{r7, pc}
    db64:	40010800 	.word	0x40010800

0000db68 <_Z16EXTILine3_Configv>:
/**
  * @brief  Configures EXTI Line3 (connected to PA3 pin) in interrupt mode
  * @param  None
  * @retval None
  */
void EXTILine3_Config(void)
    db68:	b580      	push	{r7, lr}
    db6a:	b084      	sub	sp, #16
    db6c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef   NVIC_InitStructure;

    EXTI_InitTypeDef   EXTI_InitStructure;

    /* Enable GPIOA clock */
    RCC_AHBPeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
    db6e:	f04f 0020 	mov.w	r0, #32	; 0x20
    db72:	f04f 0101 	mov.w	r1, #1	; 0x1
    db76:	f7f4 fc45 	bl	2404 <RCC_AHBPeriphClockCmd>
    //RCC_AHBPeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    /* AFIO clock enabled dans initialisation.cpp */


    /* Configure PA3 pin as input floating */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
    db7a:	f04f 0328 	mov.w	r3, #40	; 0x28
    db7e:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    db80:	f04f 0308 	mov.w	r3, #8	; 0x8
    db84:	81bb      	strh	r3, [r7, #12]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    db86:	f107 030c 	add.w	r3, r7, #12	; 0xc
    db8a:	4817      	ldr	r0, [pc, #92]	(dbe8 <_Z16EXTILine3_Configv+0x80>)
    db8c:	4619      	mov	r1, r3
    db8e:	f7f3 fd8f 	bl	16b0 <GPIO_Init>

    /* Connect EXTI Line3 to PD5 pin */
    //GPIO_EventOutputConfig(GPIO_PortSourceGPIOA, GPIO_PinSource3);
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource3);
    db92:	f04f 0003 	mov.w	r0, #3	; 0x3
    db96:	f04f 0103 	mov.w	r1, #3	; 0x3
    db9a:	f7f3 ffef 	bl	1b7c <GPIO_EXTILineConfig>

    /* Configure EXTI Line3 */
    EXTI_InitStructure.EXTI_Line = EXTI_Line3;
    db9e:	f04f 0308 	mov.w	r3, #8	; 0x8
    dba2:	603b      	str	r3, [r7, #0]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    dba4:	f04f 0300 	mov.w	r3, #0	; 0x0
    dba8:	713b      	strb	r3, [r7, #4]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    dbaa:	f04f 0308 	mov.w	r3, #8	; 0x8
    dbae:	717b      	strb	r3, [r7, #5]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    dbb0:	f04f 0301 	mov.w	r3, #1	; 0x1
    dbb4:	71bb      	strb	r3, [r7, #6]
    EXTI_Init(&EXTI_InitStructure);
    dbb6:	463b      	mov	r3, r7
    dbb8:	4618      	mov	r0, r3
    dbba:	f7f3 fbcd 	bl	1358 <EXTI_Init>

    /* Enable and set EXTI Line5 Interrupt to the (not anymore) lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn;//EXTI5_IRQn;
    dbbe:	f04f 0309 	mov.w	r3, #9	; 0x9
    dbc2:	723b      	strb	r3, [r7, #8]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x08;//0x01 for lowest priority
    dbc4:	f04f 0308 	mov.w	r3, #8	; 0x8
    dbc8:	727b      	strb	r3, [r7, #9]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
    dbca:	f04f 0301 	mov.w	r3, #1	; 0x1
    dbce:	72bb      	strb	r3, [r7, #10]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    dbd0:	f04f 0301 	mov.w	r3, #1	; 0x1
    dbd4:	72fb      	strb	r3, [r7, #11]
    NVIC_Init(&NVIC_InitStructure);
    dbd6:	f107 0308 	add.w	r3, r7, #8	; 0x8
    dbda:	4618      	mov	r0, r3
    dbdc:	f7f2 fb1e 	bl	21c <NVIC_Init>
#endif
}
    dbe0:	f107 0710 	add.w	r7, r7, #16	; 0x10
    dbe4:	46bd      	mov	sp, r7
    dbe6:	bd80      	pop	{r7, pc}
    dbe8:	40010800 	.word	0x40010800

0000dbec <_ZN8TourelleC1Ev>:
//uint16_t objectDetectionInstant[20];

/** @brief nombre d'objets détectés */
uint8_t nombreObjetDetecte;

Tourelle::Tourelle()
    dbec:	b580      	push	{r7, lr}
    dbee:	b082      	sub	sp, #8
    dbf0:	af00      	add	r7, sp, #0
    dbf2:	6078      	str	r0, [r7, #4]
{
    alerte = false;
    dbf4:	687a      	ldr	r2, [r7, #4]
    dbf6:	f04f 0300 	mov.w	r3, #0	; 0x0
    dbfa:	7013      	strb	r3, [r2, #0]

    nombreObjetDetecte = 0;
    dbfc:	4a05      	ldr	r2, [pc, #20]	(dc14 <_ZN8TourelleC1Ev+0x28>)
    dbfe:	f04f 0300 	mov.w	r3, #0	; 0x0
    dc02:	7013      	strb	r3, [r2, #0]

    //EXTILine2_Config();
    EXTILine3_Config();
    dc04:	f7ff ffb0 	bl	db68 <_Z16EXTILine3_Configv>
//        EXTILine3_Config();
//    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
//        EXTILine5_Config();
//    #endif

}
    dc08:	687b      	ldr	r3, [r7, #4]
    dc0a:	4618      	mov	r0, r3
    dc0c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    dc10:	46bd      	mov	sp, r7
    dc12:	bd80      	pop	{r7, pc}
    dc14:	20000589 	.word	0x20000589

0000dc18 <_ZN8TourelleC2Ev>:
//uint16_t objectDetectionInstant[20];

/** @brief nombre d'objets détectés */
uint8_t nombreObjetDetecte;

Tourelle::Tourelle()
    dc18:	b580      	push	{r7, lr}
    dc1a:	b082      	sub	sp, #8
    dc1c:	af00      	add	r7, sp, #0
    dc1e:	6078      	str	r0, [r7, #4]
{
    alerte = false;
    dc20:	687a      	ldr	r2, [r7, #4]
    dc22:	f04f 0300 	mov.w	r3, #0	; 0x0
    dc26:	7013      	strb	r3, [r2, #0]

    nombreObjetDetecte = 0;
    dc28:	4a05      	ldr	r2, [pc, #20]	(dc40 <_ZN8TourelleC2Ev+0x28>)
    dc2a:	f04f 0300 	mov.w	r3, #0	; 0x0
    dc2e:	7013      	strb	r3, [r2, #0]

    //EXTILine2_Config();
    EXTILine3_Config();
    dc30:	f7ff ff9a 	bl	db68 <_Z16EXTILine3_Configv>
//        EXTILine3_Config();
//    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
//        EXTILine5_Config();
//    #endif

}
    dc34:	687b      	ldr	r3, [r7, #4]
    dc36:	4618      	mov	r0, r3
    dc38:	f107 0708 	add.w	r7, r7, #8	; 0x8
    dc3c:	46bd      	mov	sp, r7
    dc3e:	bd80      	pop	{r7, pc}
    dc40:	20000589 	.word	0x20000589

0000dc44 <_ZN16UltrasoundSensor7getNameEv>:
UltrasoundSensor::~UltrasoundSensor()
{
    //dtor
}

UltrasoundSensor::UltrasoundName UltrasoundSensor::getName()
    dc44:	b480      	push	{r7}
    dc46:	b083      	sub	sp, #12
    dc48:	af00      	add	r7, sp, #0
    dc4a:	6078      	str	r0, [r7, #4]
{
    return name;
    dc4c:	687b      	ldr	r3, [r7, #4]
    dc4e:	7b1b      	ldrb	r3, [r3, #12]
}
    dc50:	4618      	mov	r0, r3
    dc52:	f107 070c 	add.w	r7, r7, #12	; 0xc
    dc56:	46bd      	mov	sp, r7
    dc58:	bc80      	pop	{r7}
    dc5a:	4770      	bx	lr

0000dc5c <_ZN16UltrasoundSensor8getValueEv>:


Sensor::OutputSensor UltrasoundSensor::getValue()
    dc5c:	b580      	push	{r7, lr}
    dc5e:	b086      	sub	sp, #24
    dc60:	af00      	add	r7, sp, #0
    dc62:	6038      	str	r0, [r7, #0]
    dc64:	6079      	str	r1, [r7, #4]
{
    while(!AnalogSensor::conversionFinished());    // au cas où l'interrupt de l'asservissement tombe avant la fin de l'acquisition/conversion
    dc66:	f7fd f821 	bl	acac <_ZN12AnalogSensor18conversionFinishedEv>
    dc6a:	4603      	mov	r3, r0
    dc6c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    dc70:	b2db      	uxtb	r3, r3
    dc72:	2b00      	cmp	r3, #0
    dc74:	d1f7      	bne.n	dc66 <_ZN16UltrasoundSensor8getValueEv+0xa>
     **     POUR AVOIR LA VALEUR DES CAPTEURS     **
     **                                           **
     **                                           **
     ***********************************************/
    OutputSensor output;
    output.type = ULTRASOUND;
    dc76:	f04f 0301 	mov.w	r3, #1	; 0x1
    dc7a:	683a      	ldr	r2, [r7, #0]
    dc7c:	7013      	strb	r3, [r2, #0]
    output.b = false;
    dc7e:	f04f 0300 	mov.w	r3, #0	; 0x0
    dc82:	683a      	ldr	r2, [r7, #0]
    dc84:	7213      	strb	r3, [r2, #8]
    #ifdef ROBOTHW
    output.f = coeff*(*data)/2.;
    dc86:	687b      	ldr	r3, [r7, #4]
    dc88:	689b      	ldr	r3, [r3, #8]
    dc8a:	881b      	ldrh	r3, [r3, #0]
    dc8c:	4618      	mov	r0, r3
    dc8e:	f00f f8d3 	bl	1ce38 <__aeabi_i2f>
    dc92:	4602      	mov	r2, r0
    dc94:	4b09      	ldr	r3, [pc, #36]	(dcbc <_ZN16UltrasoundSensor8getValueEv+0x60>)
    dc96:	681b      	ldr	r3, [r3, #0]
    dc98:	4610      	mov	r0, r2
    dc9a:	4619      	mov	r1, r3
    dc9c:	f00f f920 	bl	1cee0 <__aeabi_fmul>
    dca0:	4603      	mov	r3, r0
    dca2:	4618      	mov	r0, r3
    dca4:	4906      	ldr	r1, [pc, #24]	(dcc0 <_ZN16UltrasoundSensor8getValueEv+0x64>)
    dca6:	f00f f9cf 	bl	1d048 <__aeabi_fdiv>
    dcaa:	4603      	mov	r3, r0
    dcac:	683a      	ldr	r2, [r7, #0]
    dcae:	6053      	str	r3, [r2, #4]
    #else
    output.f = 0;
    #endif
    return output;
}
    dcb0:	6838      	ldr	r0, [r7, #0]
    dcb2:	f107 0718 	add.w	r7, r7, #24	; 0x18
    dcb6:	46bd      	mov	sp, r7
    dcb8:	bd80      	pop	{r7, pc}
    dcba:	46c0      	nop			(mov r8, r8)
    dcbc:	20000028 	.word	0x20000028
    dcc0:	40000000 	.word	0x40000000

0000dcc4 <_ZN16UltrasoundSensorD0Ev>:
UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
{
    this->name = name;
}

UltrasoundSensor::~UltrasoundSensor()
    dcc4:	b580      	push	{r7, lr}
    dcc6:	b082      	sub	sp, #8
    dcc8:	af00      	add	r7, sp, #0
    dcca:	6078      	str	r0, [r7, #4]
    dccc:	687a      	ldr	r2, [r7, #4]
    dcce:	4b0a      	ldr	r3, [pc, #40]	(dcf8 <_ZN16UltrasoundSensorD0Ev+0x34>)
    dcd0:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    dcd2:	687b      	ldr	r3, [r7, #4]
    dcd4:	4618      	mov	r0, r3
    dcd6:	f7fd f8dd 	bl	ae94 <_ZN12AnalogSensorD2Ev>
    dcda:	f04f 0301 	mov.w	r3, #1	; 0x1
    dcde:	b2db      	uxtb	r3, r3
    dce0:	2b00      	cmp	r3, #0
    dce2:	d002      	beq.n	dcea <_ZN16UltrasoundSensorD0Ev+0x26>
    dce4:	6878      	ldr	r0, [r7, #4]
    dce6:	f000 ffc5 	bl	ec74 <_ZdlPv>
    dcea:	687b      	ldr	r3, [r7, #4]
    dcec:	4618      	mov	r0, r3
    dcee:	f107 0708 	add.w	r7, r7, #8	; 0x8
    dcf2:	46bd      	mov	sp, r7
    dcf4:	bd80      	pop	{r7, pc}
    dcf6:	46c0      	nop			(mov r8, r8)
    dcf8:	000240c0 	.word	0x000240c0

0000dcfc <_ZN16UltrasoundSensorD1Ev>:
UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
{
    this->name = name;
}

UltrasoundSensor::~UltrasoundSensor()
    dcfc:	b580      	push	{r7, lr}
    dcfe:	b082      	sub	sp, #8
    dd00:	af00      	add	r7, sp, #0
    dd02:	6078      	str	r0, [r7, #4]
    dd04:	687a      	ldr	r2, [r7, #4]
    dd06:	4b0a      	ldr	r3, [pc, #40]	(dd30 <_ZN16UltrasoundSensorD1Ev+0x34>)
    dd08:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    dd0a:	687b      	ldr	r3, [r7, #4]
    dd0c:	4618      	mov	r0, r3
    dd0e:	f7fd f8c1 	bl	ae94 <_ZN12AnalogSensorD2Ev>
    dd12:	f04f 0300 	mov.w	r3, #0	; 0x0
    dd16:	b2db      	uxtb	r3, r3
    dd18:	2b00      	cmp	r3, #0
    dd1a:	d002      	beq.n	dd22 <_ZN16UltrasoundSensorD1Ev+0x26>
    dd1c:	6878      	ldr	r0, [r7, #4]
    dd1e:	f000 ffa9 	bl	ec74 <_ZdlPv>
    dd22:	687b      	ldr	r3, [r7, #4]
    dd24:	4618      	mov	r0, r3
    dd26:	f107 0708 	add.w	r7, r7, #8	; 0x8
    dd2a:	46bd      	mov	sp, r7
    dd2c:	bd80      	pop	{r7, pc}
    dd2e:	46c0      	nop			(mov r8, r8)
    dd30:	000240c0 	.word	0x000240c0

0000dd34 <_ZN16UltrasoundSensorD2Ev>:
UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
{
    this->name = name;
}

UltrasoundSensor::~UltrasoundSensor()
    dd34:	b580      	push	{r7, lr}
    dd36:	b082      	sub	sp, #8
    dd38:	af00      	add	r7, sp, #0
    dd3a:	6078      	str	r0, [r7, #4]
    dd3c:	687a      	ldr	r2, [r7, #4]
    dd3e:	4b0a      	ldr	r3, [pc, #40]	(dd68 <_ZN16UltrasoundSensorD2Ev+0x34>)
    dd40:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    dd42:	687b      	ldr	r3, [r7, #4]
    dd44:	4618      	mov	r0, r3
    dd46:	f7fd f8a5 	bl	ae94 <_ZN12AnalogSensorD2Ev>
    dd4a:	f04f 0300 	mov.w	r3, #0	; 0x0
    dd4e:	b2db      	uxtb	r3, r3
    dd50:	2b00      	cmp	r3, #0
    dd52:	d002      	beq.n	dd5a <_ZN16UltrasoundSensorD2Ev+0x26>
    dd54:	6878      	ldr	r0, [r7, #4]
    dd56:	f000 ff8d 	bl	ec74 <_ZdlPv>
    dd5a:	687b      	ldr	r3, [r7, #4]
    dd5c:	4618      	mov	r0, r3
    dd5e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    dd62:	46bd      	mov	sp, r7
    dd64:	bd80      	pop	{r7, pc}
    dd66:	46c0      	nop			(mov r8, r8)
    dd68:	000240c0 	.word	0x000240c0

0000dd6c <_ZN16UltrasoundSensorC1ENS_14UltrasoundNameEhPt>:
#include "ultrasoundSensor.h"

float UltrasoundSensor::coeff = COEFFICIENT_LIN_ULTRASON;

UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
    dd6c:	b580      	push	{r7, lr}
    dd6e:	b084      	sub	sp, #16
    dd70:	af00      	add	r7, sp, #0
    dd72:	60f8      	str	r0, [r7, #12]
    dd74:	607b      	str	r3, [r7, #4]
    dd76:	460b      	mov	r3, r1
    dd78:	72fb      	strb	r3, [r7, #11]
    dd7a:	4613      	mov	r3, r2
    dd7c:	72bb      	strb	r3, [r7, #10]
    dd7e:	68fb      	ldr	r3, [r7, #12]
    dd80:	7aba      	ldrb	r2, [r7, #10]
    dd82:	4618      	mov	r0, r3
    dd84:	4611      	mov	r1, r2
    dd86:	687a      	ldr	r2, [r7, #4]
    dd88:	f7fd f8ca 	bl	af20 <_ZN12AnalogSensorC2EhPt>
    dd8c:	68fa      	ldr	r2, [r7, #12]
    dd8e:	4b05      	ldr	r3, [pc, #20]	(dda4 <_ZN16UltrasoundSensorC1ENS_14UltrasoundNameEhPt+0x38>)
    dd90:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    dd92:	68fa      	ldr	r2, [r7, #12]
    dd94:	7afb      	ldrb	r3, [r7, #11]
    dd96:	7313      	strb	r3, [r2, #12]
}
    dd98:	68fb      	ldr	r3, [r7, #12]
    dd9a:	4618      	mov	r0, r3
    dd9c:	f107 0710 	add.w	r7, r7, #16	; 0x10
    dda0:	46bd      	mov	sp, r7
    dda2:	bd80      	pop	{r7, pc}
    dda4:	000240c0 	.word	0x000240c0

0000dda8 <_ZN16UltrasoundSensorC2ENS_14UltrasoundNameEhPt>:
#include "ultrasoundSensor.h"

float UltrasoundSensor::coeff = COEFFICIENT_LIN_ULTRASON;

UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
    dda8:	b580      	push	{r7, lr}
    ddaa:	b084      	sub	sp, #16
    ddac:	af00      	add	r7, sp, #0
    ddae:	60f8      	str	r0, [r7, #12]
    ddb0:	607b      	str	r3, [r7, #4]
    ddb2:	460b      	mov	r3, r1
    ddb4:	72fb      	strb	r3, [r7, #11]
    ddb6:	4613      	mov	r3, r2
    ddb8:	72bb      	strb	r3, [r7, #10]
    ddba:	68fb      	ldr	r3, [r7, #12]
    ddbc:	7aba      	ldrb	r2, [r7, #10]
    ddbe:	4618      	mov	r0, r3
    ddc0:	4611      	mov	r1, r2
    ddc2:	687a      	ldr	r2, [r7, #4]
    ddc4:	f7fd f8ac 	bl	af20 <_ZN12AnalogSensorC2EhPt>
    ddc8:	68fa      	ldr	r2, [r7, #12]
    ddca:	4b05      	ldr	r3, [pc, #20]	(dde0 <_ZN16UltrasoundSensorC2ENS_14UltrasoundNameEhPt+0x38>)
    ddcc:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    ddce:	68fa      	ldr	r2, [r7, #12]
    ddd0:	7afb      	ldrb	r3, [r7, #11]
    ddd2:	7313      	strb	r3, [r2, #12]
}
    ddd4:	68fb      	ldr	r3, [r7, #12]
    ddd6:	4618      	mov	r0, r3
    ddd8:	f107 0710 	add.w	r7, r7, #16	; 0x10
    dddc:	46bd      	mov	sp, r7
    ddde:	bd80      	pop	{r7, pc}
    dde0:	000240c0 	.word	0x000240c0

0000dde4 <_Z20initialisationDesPINv>:



// Mettez toutes vos initialisations de PIN dans la fonction "initialisation"
// On l'appellera ensuite dans le main au tout début pour tout initialiser d'un coup
void initialisationDesPIN()
    dde4:	b580      	push	{r7, lr}
    dde6:	b082      	sub	sp, #8
    dde8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

#ifdef STM32F10X_CL // Pour le stm32 h107

    // Pompe à vide
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
    ddea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    ddee:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    ddf0:	f04f 0310 	mov.w	r3, #16	; 0x10
    ddf4:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    ddf6:	f04f 0302 	mov.w	r3, #2	; 0x2
    ddfa:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    ddfc:	f107 0304 	add.w	r3, r7, #4	; 0x4
    de00:	4845      	ldr	r0, [pc, #276]	(df18 <_Z20initialisationDesPINv+0x134>)
    de02:	4619      	mov	r1, r3
    de04:	f7f3 fc54 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOD, GPIO_Pin_14, Bit_RESET);
    de08:	4843      	ldr	r0, [pc, #268]	(df18 <_Z20initialisationDesPINv+0x134>)
    de0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    de0e:	f04f 0200 	mov.w	r2, #0	; 0x0
    de12:	f7f3 fdbb 	bl	198c <GPIO_WriteBit>

    // Patte coté de la partie bleu ou jaune
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
    de16:	f04f 0310 	mov.w	r3, #16	; 0x10
    de1a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    de1c:	f04f 0304 	mov.w	r3, #4	; 0x4
    de20:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    de22:	f04f 0303 	mov.w	r3, #3	; 0x3
    de26:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    de28:	f107 0304 	add.w	r3, r7, #4	; 0x4
    de2c:	483b      	ldr	r0, [pc, #236]	(df1c <_Z20initialisationDesPINv+0x138>)
    de2e:	4619      	mov	r1, r3
    de30:	f7f3 fc3e 	bl	16b0 <GPIO_Init>
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOB, &GPIO_InitStructure);
*/

    GPIO_PinRemapConfig(GPIO_FullRemap_TIM1, ENABLE);
    de34:	483a      	ldr	r0, [pc, #232]	(df20 <_Z20initialisationDesPINv+0x13c>)
    de36:	f04f 0101 	mov.w	r1, #1	; 0x1
    de3a:	f7f3 fe29 	bl	1a90 <GPIO_PinRemapConfig>

    // Pattes des servos
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    de3e:	f44f 7300 	mov.w	r3, #512	; 0x200
    de42:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    de44:	f04f 0318 	mov.w	r3, #24	; 0x18
    de48:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    de4a:	f04f 0303 	mov.w	r3, #3	; 0x3
    de4e:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    de50:	f107 0304 	add.w	r3, r7, #4	; 0x4
    de54:	4831      	ldr	r0, [pc, #196]	(df1c <_Z20initialisationDesPINv+0x138>)
    de56:	4619      	mov	r1, r3
    de58:	f7f3 fc2a 	bl	16b0 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
    de5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    de60:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    de62:	f04f 0318 	mov.w	r3, #24	; 0x18
    de66:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    de68:	f04f 0303 	mov.w	r3, #3	; 0x3
    de6c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    de6e:	f107 0304 	add.w	r3, r7, #4	; 0x4
    de72:	482a      	ldr	r0, [pc, #168]	(df1c <_Z20initialisationDesPINv+0x138>)
    de74:	4619      	mov	r1, r3
    de76:	f7f3 fc1b 	bl	16b0 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
    de7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    de7e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    de80:	f04f 0318 	mov.w	r3, #24	; 0x18
    de84:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    de86:	f04f 0303 	mov.w	r3, #3	; 0x3
    de8a:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    de8c:	f107 0304 	add.w	r3, r7, #4	; 0x4
    de90:	4822      	ldr	r0, [pc, #136]	(df1c <_Z20initialisationDesPINv+0x138>)
    de92:	4619      	mov	r1, r3
    de94:	f7f3 fc0c 	bl	16b0 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
    de98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    de9c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    de9e:	f04f 0318 	mov.w	r3, #24	; 0x18
    dea2:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    dea4:	f04f 0303 	mov.w	r3, #3	; 0x3
    dea8:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    deaa:	f107 0304 	add.w	r3, r7, #4	; 0x4
    deae:	481b      	ldr	r0, [pc, #108]	(df1c <_Z20initialisationDesPINv+0x138>)
    deb0:	4619      	mov	r1, r3
    deb2:	f7f3 fbfd 	bl	16b0 <GPIO_Init>

    // LED Verte
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
    deb6:	f04f 0340 	mov.w	r3, #64	; 0x40
    deba:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    debc:	f04f 0310 	mov.w	r3, #16	; 0x10
    dec0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    dec2:	f04f 0302 	mov.w	r3, #2	; 0x2
    dec6:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    dec8:	f107 0304 	add.w	r3, r7, #4	; 0x4
    decc:	4815      	ldr	r0, [pc, #84]	(df24 <_Z20initialisationDesPINv+0x140>)
    dece:	4619      	mov	r1, r3
    ded0:	f7f3 fbee 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_RESET);
    ded4:	4813      	ldr	r0, [pc, #76]	(df24 <_Z20initialisationDesPINv+0x140>)
    ded6:	f04f 0140 	mov.w	r1, #64	; 0x40
    deda:	f04f 0200 	mov.w	r2, #0	; 0x0
    dede:	f7f3 fd55 	bl	198c <GPIO_WriteBit>

    // LED Jaune
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
    dee2:	f04f 0380 	mov.w	r3, #128	; 0x80
    dee6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    dee8:	f04f 0310 	mov.w	r3, #16	; 0x10
    deec:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    deee:	f04f 0302 	mov.w	r3, #2	; 0x2
    def2:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    def4:	f107 0304 	add.w	r3, r7, #4	; 0x4
    def8:	480a      	ldr	r0, [pc, #40]	(df24 <_Z20initialisationDesPINv+0x140>)
    defa:	4619      	mov	r1, r3
    defc:	f7f3 fbd8 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOC, GPIO_Pin_7, Bit_RESET);
    df00:	4808      	ldr	r0, [pc, #32]	(df24 <_Z20initialisationDesPINv+0x140>)
    df02:	f04f 0180 	mov.w	r1, #128	; 0x80
    df06:	f04f 0200 	mov.w	r2, #0	; 0x0
    df0a:	f7f3 fd3f 	bl	198c <GPIO_WriteBit>
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    GPIO_WriteBit(GPIOC, GPIO_Pin_12, Bit_SET);

#endif //STM32F40_41xxx

}
    df0e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    df12:	46bd      	mov	sp, r7
    df14:	bd80      	pop	{r7, pc}
    df16:	46c0      	nop			(mov r8, r8)
    df18:	40011400 	.word	0x40011400
    df1c:	40011800 	.word	0x40011800
    df20:	001600c0 	.word	0x001600c0
    df24:	40011000 	.word	0x40011000

0000df28 <_Z18initAutresHorlogesv>:
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK); // system clock (SYSCLK) : 72MHz
    #endif
}

// Définit quelques horloges supplémentaires
void initAutresHorloges()
    df28:	b580      	push	{r7, lr}
    df2a:	af00      	add	r7, sp, #0
        // Sharps
        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);

    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
    df2c:	f04f 0001 	mov.w	r0, #1	; 0x1
    df30:	f04f 0101 	mov.w	r1, #1	; 0x1
    df34:	f7f4 fa66 	bl	2404 <RCC_AHBPeriphClockCmd>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
    df38:	f44f 7000 	mov.w	r0, #512	; 0x200
    df3c:	f04f 0101 	mov.w	r1, #1	; 0x1
    df40:	f7f4 fa82 	bl	2448 <RCC_APB2PeriphClockCmd>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    df44:	f04f 0001 	mov.w	r0, #1	; 0x1
    df48:	f04f 0101 	mov.w	r1, #1	; 0x1
    df4c:	f7f4 fa7c 	bl	2448 <RCC_APB2PeriphClockCmd>
        #ifdef STM32F10X_CL // stm h107
            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOE, ENABLE);
    df50:	f04f 007c 	mov.w	r0, #124	; 0x7c
    df54:	f04f 0101 	mov.w	r1, #1	; 0x1
    df58:	f7f4 fa76 	bl	2448 <RCC_APB2PeriphClockCmd>
        #endif
    #endif
}
    df5c:	46bd      	mov	sp, r7
    df5e:	bd80      	pop	{r7, pc}

0000df60 <_Z8Clk_Initv>:
//#include "stm32f10x_remap.h"

#include "initialisation.h"

// Initialise le système d'horloge
void Clk_Init()
    df60:	b580      	push	{r7, lr}
    df62:	af00      	add	r7, sp, #0
{
    //Rien pour le STM32F4, tout est déjà fait dans SystemInit(), appelée implicitement
    #if defined(STM32F10X_MD) || defined(STM32F10X_CL)
        // Démarre l'horloge interne (8 MHz)
        RCC_HSICmd(ENABLE);
    df64:	f04f 0001 	mov.w	r0, #1	; 0x1
    df68:	f7f3 ff22 	bl	1db0 <RCC_HSICmd>
        // On attend qu'elle soit allumée
        while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
    df6c:	f04f 0021 	mov.w	r0, #33	; 0x21
    df70:	f7f4 fb44 	bl	25fc <RCC_GetFlagStatus>
    df74:	4603      	mov	r3, r0
    df76:	2b00      	cmp	r3, #0
    df78:	bf14      	ite	ne
    df7a:	2300      	movne	r3, #0
    df7c:	2301      	moveq	r3, #1
    df7e:	b2db      	uxtb	r3, r3
    df80:	2b00      	cmp	r3, #0
    df82:	d1f3      	bne.n	df6c <_Z8Clk_Initv+0xc>
        // Une fois demarée, on utilise celle ci
        RCC_SYSCLKConfig(RCC_SYSCLKSource_HSI);
    df84:	f04f 0000 	mov.w	r0, #0	; 0x0
    df88:	f7f3 fff2 	bl	1f70 <RCC_SYSCLKConfig>

        // Démarre l'horloge externe à 25MHz
        RCC_HSEConfig(RCC_HSE_ON);
    df8c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    df90:	f7f3 fe8c 	bl	1cac <RCC_HSEConfig>
        // On attend qu'elle soit allumée
        while(RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
    df94:	f04f 0031 	mov.w	r0, #49	; 0x31
    df98:	f7f4 fb30 	bl	25fc <RCC_GetFlagStatus>
    df9c:	4603      	mov	r3, r0
    df9e:	2b00      	cmp	r3, #0
    dfa0:	bf14      	ite	ne
    dfa2:	2300      	movne	r3, #0
    dfa4:	2301      	moveq	r3, #1
    dfa6:	b2db      	uxtb	r3, r3
    dfa8:	2b00      	cmp	r3, #0
    dfaa:	d1f3      	bne.n	df94 <_Z8Clk_Initv+0x34>


        // PLL2 à (8/5) * 25Mhz = 40 Mhz
        RCC_PREDIV2Config(RCC_PREDIV2_Div5);
    dfac:	f04f 0040 	mov.w	r0, #64	; 0x40
    dfb0:	f7f3 ff64 	bl	1e7c <RCC_PREDIV2Config>
        RCC_PLL2Config(RCC_PLL2Mul_8);
    dfb4:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    dfb8:	f7f3 ff7e 	bl	1eb8 <RCC_PLL2Config>
        // On démarre le PLL2 une fois la config entrée
        RCC_PLL2Cmd(ENABLE);
    dfbc:	f04f 0001 	mov.w	r0, #1	; 0x1
    dfc0:	f7f3 ff98 	bl	1ef4 <RCC_PLL2Cmd>
        // On attend qu'il soit vraiment allumé
        while(RCC_GetFlagStatus(RCC_FLAG_PLL2RDY) == RESET);
    dfc4:	f04f 003b 	mov.w	r0, #59	; 0x3b
    dfc8:	f7f4 fb18 	bl	25fc <RCC_GetFlagStatus>
    dfcc:	4603      	mov	r3, r0
    dfce:	2b00      	cmp	r3, #0
    dfd0:	bf14      	ite	ne
    dfd2:	2300      	movne	r3, #0
    dfd4:	2301      	moveq	r3, #1
    dfd6:	b2db      	uxtb	r3, r3
    dfd8:	2b00      	cmp	r3, #0
    dfda:	d1f3      	bne.n	dfc4 <_Z8Clk_Initv+0x64>

        // Initialisation du PL à (9/5) * 40MHz = 72MHz
        RCC_PREDIV1Config(RCC_PREDIV1_Source_PLL2, RCC_PREDIV1_Div5);
    dfdc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    dfe0:	f04f 0104 	mov.w	r1, #4	; 0x4
    dfe4:	f7f3 ff26 	bl	1e34 <RCC_PREDIV1Config>
        RCC_PLLConfig(RCC_PLLSource_PREDIV1, RCC_PLLMul_9);
    dfe8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    dfec:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
    dff0:	f7f3 feee 	bl	1dd0 <RCC_PLLConfig>
        // On démarre le PLL une fois la config entrée
        RCC_PLLCmd(ENABLE);
    dff4:	f04f 0001 	mov.w	r0, #1	; 0x1
    dff8:	f7f3 ff0c 	bl	1e14 <RCC_PLLCmd>
        // On attend qu'il soit vraiment allumé
        while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
    dffc:	f04f 0039 	mov.w	r0, #57	; 0x39
    e000:	f7f4 fafc 	bl	25fc <RCC_GetFlagStatus>
    e004:	4603      	mov	r3, r0
    e006:	2b00      	cmp	r3, #0
    e008:	bf14      	ite	ne
    e00a:	2300      	movne	r3, #0
    e00c:	2301      	moveq	r3, #1
    e00e:	b2db      	uxtb	r3, r3
    e010:	2b00      	cmp	r3, #0
    e012:	d1f3      	bne.n	dffc <_Z8Clk_Initv+0x9c>

        // On démarre les composants internes au microcontroleur
        RCC_OTGFSCLKConfig(RCC_OTGFSCLKSource_PLLVCO_Div3); // USB OTG FS clock (OTGFSCLK)
    e014:	f04f 0000 	mov.w	r0, #0	; 0x0
    e018:	f7f4 f85a 	bl	20d0 <RCC_OTGFSCLKConfig>
        RCC_ADCCLKConfig(RCC_PCLK2_Div6); // ADC clock (ADCCLK) : 72MHz / 6 = 12MHz
    e01c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    e020:	f7f4 f864 	bl	20ec <RCC_ADCCLKConfig>
        RCC_PCLK2Config(RCC_HCLK_Div1); // High Speed APB clock (PCLK2) : 72Mhz
    e024:	f04f 0000 	mov.w	r0, #0	; 0x0
    e028:	f7f4 f80a 	bl	2040 <RCC_PCLK2Config>
        RCC_PCLK1Config(RCC_HCLK_Div2); // Low Speed APB clock (PCLK1) : 72Mhz / 2 = 36MHz
    e02c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    e030:	f7f3 ffe8 	bl	2004 <RCC_PCLK1Config>
        RCC_HCLKConfig(RCC_SYSCLK_Div1); // AHB clock (HCLK) : 72Mhz
    e034:	f04f 0000 	mov.w	r0, #0	; 0x0
    e038:	f7f3 ffc6 	bl	1fc8 <RCC_HCLKConfig>
        // Flash 1 wait state
        *(vu32 *)0x40022000 = 0x12;
    e03c:	4a04      	ldr	r2, [pc, #16]	(e050 <_Z8Clk_Initv+0xf0>)
    e03e:	f04f 0312 	mov.w	r3, #18	; 0x12
    e042:	6013      	str	r3, [r2, #0]
        // On utilise le PLL comme horloge de référence
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK); // system clock (SYSCLK) : 72MHz
    e044:	f04f 0002 	mov.w	r0, #2	; 0x2
    e048:	f7f3 ff92 	bl	1f70 <RCC_SYSCLKConfig>
    #endif
}
    e04c:	46bd      	mov	sp, r7
    e04e:	bd80      	pop	{r7, pc}
    e050:	40022000 	.word	0x40022000

0000e054 <_ZN16ServosNumeriques11receiveDataEv>:
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
    USART_SendData(USART3, (u16) data);
}

int receiveData()
    e054:	b480      	push	{r7}
    e056:	af00      	add	r7, sp, #0
{
    while (!(USART3->SR & USART_FLAG_RXNE));
    e058:	4b0b      	ldr	r3, [pc, #44]	(e088 <_ZN16ServosNumeriques11receiveDataEv+0x34>)
    e05a:	881b      	ldrh	r3, [r3, #0]
    e05c:	b29b      	uxth	r3, r3
    e05e:	f003 0320 	and.w	r3, r3, #32	; 0x20
    e062:	2b00      	cmp	r3, #0
    e064:	bf14      	ite	ne
    e066:	2300      	movne	r3, #0
    e068:	2301      	moveq	r3, #1
    e06a:	b2db      	uxtb	r3, r3
    e06c:	2b00      	cmp	r3, #0
    e06e:	d1f3      	bne.n	e058 <_ZN16ServosNumeriques11receiveDataEv+0x4>

    return ((int)(USART3->DR & 0x1FF));
    e070:	4b05      	ldr	r3, [pc, #20]	(e088 <_ZN16ServosNumeriques11receiveDataEv+0x34>)
    e072:	889b      	ldrh	r3, [r3, #4]
    e074:	b29b      	uxth	r3, r3
    e076:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    e07a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
}
    e07e:	4618      	mov	r0, r3
    e080:	46bd      	mov	sp, r7
    e082:	bc80      	pop	{r7}
    e084:	4770      	bx	lr
    e086:	46c0      	nop			(mov r8, r8)
    e088:	40004800 	.word	0x40004800

0000e08c <_ZN16ServosNumeriques19receiveStatusPacketEPi>:

int receiveStatusPacket(int* tableau)
    e08c:	b590      	push	{r4, r7, lr}
    e08e:	b089      	sub	sp, #36
    e090:	af00      	add	r7, sp, #0
    e092:	6078      	str	r0, [r7, #4]
{
    int msg = receiveData();
    e094:	f7ff ffde 	bl	e054 <_ZN16ServosNumeriques11receiveDataEv>
    e098:	4603      	mov	r3, r0
    e09a:	60fb      	str	r3, [r7, #12]
    int i = 0;
    e09c:	f04f 0300 	mov.w	r3, #0	; 0x0
    e0a0:	613b      	str	r3, [r7, #16]
    e0a2:	e003      	b.n	e0ac <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x20>
    while(msg == 0) {
        msg = receiveData();
    e0a4:	f7ff ffd6 	bl	e054 <_ZN16ServosNumeriques11receiveDataEv>
    e0a8:	4603      	mov	r3, r0
    e0aa:	60fb      	str	r3, [r7, #12]

int receiveStatusPacket(int* tableau)
{
    int msg = receiveData();
    int i = 0;
    while(msg == 0) {
    e0ac:	68fb      	ldr	r3, [r7, #12]
    e0ae:	2b00      	cmp	r3, #0
    e0b0:	d0f8      	beq.n	e0a4 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x18>
        msg = receiveData();
    } // on attend de lire quelque chose
    if (msg == 0xff) { // début fanion
    e0b2:	68fb      	ldr	r3, [r7, #12]
    e0b4:	2bff      	cmp	r3, #255
    e0b6:	d176      	bne.n	e1a6 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x11a>
        msg = receiveData();
    e0b8:	f7ff ffcc 	bl	e054 <_ZN16ServosNumeriques11receiveDataEv>
    e0bc:	4603      	mov	r3, r0
    e0be:	60fb      	str	r3, [r7, #12]
        if (msg == 0xff) { // fin fanion
    e0c0:	68fb      	ldr	r3, [r7, #12]
    e0c2:	2bff      	cmp	r3, #255
    e0c4:	d16f      	bne.n	e1a6 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x11a>
            tableau[i++] = receiveData(); // on lit quel servo a envoyé le msg
    e0c6:	693b      	ldr	r3, [r7, #16]
    e0c8:	ea4f 0283 	mov.w	r2, r3, lsl #2
    e0cc:	687b      	ldr	r3, [r7, #4]
    e0ce:	eb03 0402 	add.w	r4, r3, r2
    e0d2:	f7ff ffbf 	bl	e054 <_ZN16ServosNumeriques11receiveDataEv>
    e0d6:	4603      	mov	r3, r0
    e0d8:	6023      	str	r3, [r4, #0]
    e0da:	693b      	ldr	r3, [r7, #16]
    e0dc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e0e0:	613b      	str	r3, [r7, #16]
            tableau[i++] = receiveData(); // on lit la taille du message
    e0e2:	693b      	ldr	r3, [r7, #16]
    e0e4:	ea4f 0283 	mov.w	r2, r3, lsl #2
    e0e8:	687b      	ldr	r3, [r7, #4]
    e0ea:	eb03 0402 	add.w	r4, r3, r2
    e0ee:	f7ff ffb1 	bl	e054 <_ZN16ServosNumeriques11receiveDataEv>
    e0f2:	4603      	mov	r3, r0
    e0f4:	6023      	str	r3, [r4, #0]
    e0f6:	693b      	ldr	r3, [r7, #16]
    e0f8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e0fc:	613b      	str	r3, [r7, #16]
            for (int i = 2; i < tableau[1]+2; i++) {
    e0fe:	f04f 0302 	mov.w	r3, #2	; 0x2
    e102:	61bb      	str	r3, [r7, #24]
    e104:	e00d      	b.n	e122 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x96>
                tableau[i] = receiveData();
    e106:	69bb      	ldr	r3, [r7, #24]
    e108:	ea4f 0283 	mov.w	r2, r3, lsl #2
    e10c:	687b      	ldr	r3, [r7, #4]
    e10e:	eb03 0402 	add.w	r4, r3, r2
    e112:	f7ff ff9f 	bl	e054 <_ZN16ServosNumeriques11receiveDataEv>
    e116:	4603      	mov	r3, r0
    e118:	6023      	str	r3, [r4, #0]
    if (msg == 0xff) { // début fanion
        msg = receiveData();
        if (msg == 0xff) { // fin fanion
            tableau[i++] = receiveData(); // on lit quel servo a envoyé le msg
            tableau[i++] = receiveData(); // on lit la taille du message
            for (int i = 2; i < tableau[1]+2; i++) {
    e11a:	69bb      	ldr	r3, [r7, #24]
    e11c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e120:	61bb      	str	r3, [r7, #24]
    e122:	687b      	ldr	r3, [r7, #4]
    e124:	f103 0304 	add.w	r3, r3, #4	; 0x4
    e128:	681b      	ldr	r3, [r3, #0]
    e12a:	f103 0202 	add.w	r2, r3, #2	; 0x2
    e12e:	69bb      	ldr	r3, [r7, #24]
    e130:	429a      	cmp	r2, r3
    e132:	dce8      	bgt.n	e106 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x7a>
                tableau[i] = receiveData();
            }
            // on a tout lu : check la checksum
            unsigned int sum = 0;
    e134:	f04f 0300 	mov.w	r3, #0	; 0x0
    e138:	617b      	str	r3, [r7, #20]
            for (int i = 0; i < tableau[1]+2; i++) {
    e13a:	f04f 0300 	mov.w	r3, #0	; 0x0
    e13e:	61fb      	str	r3, [r7, #28]
    e140:	e00d      	b.n	e15e <_ZN16ServosNumeriques19receiveStatusPacketEPi+0xd2>
                sum += tableau[i];
    e142:	69fb      	ldr	r3, [r7, #28]
    e144:	ea4f 0283 	mov.w	r2, r3, lsl #2
    e148:	687b      	ldr	r3, [r7, #4]
    e14a:	4413      	add	r3, r2
    e14c:	681b      	ldr	r3, [r3, #0]
    e14e:	461a      	mov	r2, r3
    e150:	697b      	ldr	r3, [r7, #20]
    e152:	4413      	add	r3, r2
    e154:	617b      	str	r3, [r7, #20]
            for (int i = 2; i < tableau[1]+2; i++) {
                tableau[i] = receiveData();
            }
            // on a tout lu : check la checksum
            unsigned int sum = 0;
            for (int i = 0; i < tableau[1]+2; i++) {
    e156:	69fb      	ldr	r3, [r7, #28]
    e158:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e15c:	61fb      	str	r3, [r7, #28]
    e15e:	687b      	ldr	r3, [r7, #4]
    e160:	f103 0304 	add.w	r3, r3, #4	; 0x4
    e164:	681b      	ldr	r3, [r3, #0]
    e166:	f103 0202 	add.w	r2, r3, #2	; 0x2
    e16a:	69fb      	ldr	r3, [r7, #28]
    e16c:	429a      	cmp	r2, r3
    e16e:	dce8      	bgt.n	e142 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0xb6>
                sum += tableau[i];
            }
            if ((int16_t)~(sum) != tableau[tableau[1]+1])
    e170:	697b      	ldr	r3, [r7, #20]
    e172:	b29b      	uxth	r3, r3
    e174:	ea6f 0303 	mvn.w	r3, r3
    e178:	b29b      	uxth	r3, r3
    e17a:	b219      	sxth	r1, r3
    e17c:	687b      	ldr	r3, [r7, #4]
    e17e:	f103 0304 	add.w	r3, r3, #4	; 0x4
    e182:	681b      	ldr	r3, [r3, #0]
    e184:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e188:	ea4f 0283 	mov.w	r2, r3, lsl #2
    e18c:	687b      	ldr	r3, [r7, #4]
    e18e:	4413      	add	r3, r2
    e190:	681b      	ldr	r3, [r3, #0]
    e192:	4299      	cmp	r1, r3
    e194:	d003      	beq.n	e19e <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x112>
                return -1;
    e196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e19a:	603b      	str	r3, [r7, #0]
    e19c:	e006      	b.n	e1ac <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x120>
            return 0;
    e19e:	f04f 0300 	mov.w	r3, #0	; 0x0
    e1a2:	603b      	str	r3, [r7, #0]
    e1a4:	e002      	b.n	e1ac <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x120>
        }
    }
    return 1;
    e1a6:	f04f 0301 	mov.w	r3, #1	; 0x1
    e1aa:	603b      	str	r3, [r7, #0]
    e1ac:	683b      	ldr	r3, [r7, #0]
}
    e1ae:	4618      	mov	r0, r3
    e1b0:	f107 0724 	add.w	r7, r7, #36	; 0x24
    e1b4:	46bd      	mov	sp, r7
    e1b6:	bd90      	pop	{r4, r7, pc}

0000e1b8 <_ZN16ServosNumeriques8sendDataEi>:
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}

void sendData(int data)
    e1b8:	b580      	push	{r7, lr}
    e1ba:	b082      	sub	sp, #8
    e1bc:	af00      	add	r7, sp, #0
    e1be:	6078      	str	r0, [r7, #4]
{
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
    e1c0:	480b      	ldr	r0, [pc, #44]	(e1f0 <_ZN16ServosNumeriques8sendDataEi+0x38>)
    e1c2:	f04f 0180 	mov.w	r1, #128	; 0x80
    e1c6:	f7f6 fdd1 	bl	4d6c <USART_GetFlagStatus>
    e1ca:	4603      	mov	r3, r0
    e1cc:	2b00      	cmp	r3, #0
    e1ce:	bf14      	ite	ne
    e1d0:	2300      	movne	r3, #0
    e1d2:	2301      	moveq	r3, #1
    e1d4:	b2db      	uxtb	r3, r3
    e1d6:	2b00      	cmp	r3, #0
    e1d8:	d1f2      	bne.n	e1c0 <_ZN16ServosNumeriques8sendDataEi+0x8>
    USART_SendData(USART3, (u16) data);
    e1da:	687b      	ldr	r3, [r7, #4]
    e1dc:	b29b      	uxth	r3, r3
    e1de:	4804      	ldr	r0, [pc, #16]	(e1f0 <_ZN16ServosNumeriques8sendDataEi+0x38>)
    e1e0:	4619      	mov	r1, r3
    e1e2:	f7f6 fc8f 	bl	4b04 <USART_SendData>
}
    e1e6:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e1ea:	46bd      	mov	sp, r7
    e1ec:	bd80      	pop	{r7, pc}
    e1ee:	46c0      	nop			(mov r8, r8)
    e1f0:	40004800 	.word	0x40004800

0000e1f4 <_ZN16ServosNumeriques12setMaxTorqueEth>:
    int packetLength = AX12::getTorqueLimitInstruction(packet, torque, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void setMaxTorque(uint16_t torque, uint8_t servo) // EEPROM, automatiquement mis dans la RAM au démarrage
    e1f4:	b580      	push	{r7, lr}
    e1f6:	b094      	sub	sp, #80
    e1f8:	af00      	add	r7, sp, #0
    e1fa:	4603      	mov	r3, r0
    e1fc:	460a      	mov	r2, r1
    e1fe:	80fb      	strh	r3, [r7, #6]
    e200:	4613      	mov	r3, r2
    e202:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getMaxTorqueInstruction(packet, torque, servo);
    e204:	f897 c005 	ldrb.w	ip, [r7, #5]
    e208:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e20c:	88fa      	ldrh	r2, [r7, #6]
    e20e:	4618      	mov	r0, r3
    e210:	4611      	mov	r1, r2
    e212:	4662      	mov	r2, ip
    e214:	f7fc ff64 	bl	b0e0 <_ZN4AX1223getMaxTorqueInstructionEPiti>
    e218:	4603      	mov	r3, r0
    e21a:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e21c:	f04f 0300 	mov.w	r3, #0	; 0x0
    e220:	64fb      	str	r3, [r7, #76]
    e222:	e00e      	b.n	e242 <_ZN16ServosNumeriques12setMaxTorqueEth+0x4e>
        sendData(packet[i]);
    e224:	6cfb      	ldr	r3, [r7, #76]
    e226:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e22a:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e22e:	4413      	add	r3, r2
    e230:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e234:	4618      	mov	r0, r3
    e236:	f7ff ffbf 	bl	e1b8 <_ZN16ServosNumeriques8sendDataEi>
}
void setMaxTorque(uint16_t torque, uint8_t servo) // EEPROM, automatiquement mis dans la RAM au démarrage
{
    int packet[16];
    int packetLength = AX12::getMaxTorqueInstruction(packet, torque, servo);
    for (int i = 0; i < packetLength; i++) {
    e23a:	6cfb      	ldr	r3, [r7, #76]
    e23c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e240:	64fb      	str	r3, [r7, #76]
    e242:	6cfa      	ldr	r2, [r7, #76]
    e244:	6cbb      	ldr	r3, [r7, #72]
    e246:	429a      	cmp	r2, r3
    e248:	dbec      	blt.n	e224 <_ZN16ServosNumeriques12setMaxTorqueEth+0x30>
        sendData(packet[i]);
    }
}
    e24a:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e24e:	46bd      	mov	sp, r7
    e250:	bd80      	pop	{r7, pc}
    e252:	46c0      	nop			(mov r8, r8)

0000e254 <_ZN16ServosNumeriques15setTorqueLimiteEth>:
        sendData(packet[i]);
    }
}


void setTorqueLimite(uint16_t torque, uint8_t servo) // dans la RAM
    e254:	b580      	push	{r7, lr}
    e256:	b094      	sub	sp, #80
    e258:	af00      	add	r7, sp, #0
    e25a:	4603      	mov	r3, r0
    e25c:	460a      	mov	r2, r1
    e25e:	80fb      	strh	r3, [r7, #6]
    e260:	4613      	mov	r3, r2
    e262:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getTorqueLimitInstruction(packet, torque, servo);
    e264:	f897 c005 	ldrb.w	ip, [r7, #5]
    e268:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e26c:	88fa      	ldrh	r2, [r7, #6]
    e26e:	4618      	mov	r0, r3
    e270:	4611      	mov	r1, r2
    e272:	4662      	mov	r2, ip
    e274:	f7fc ff6e 	bl	b154 <_ZN4AX1225getTorqueLimitInstructionEPiti>
    e278:	4603      	mov	r3, r0
    e27a:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e27c:	f04f 0300 	mov.w	r3, #0	; 0x0
    e280:	64fb      	str	r3, [r7, #76]
    e282:	e00e      	b.n	e2a2 <_ZN16ServosNumeriques15setTorqueLimiteEth+0x4e>
        sendData(packet[i]);
    e284:	6cfb      	ldr	r3, [r7, #76]
    e286:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e28a:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e28e:	4413      	add	r3, r2
    e290:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e294:	4618      	mov	r0, r3
    e296:	f7ff ff8f 	bl	e1b8 <_ZN16ServosNumeriques8sendDataEi>

void setTorqueLimite(uint16_t torque, uint8_t servo) // dans la RAM
{
    int packet[16];
    int packetLength = AX12::getTorqueLimitInstruction(packet, torque, servo);
    for (int i = 0; i < packetLength; i++) {
    e29a:	6cfb      	ldr	r3, [r7, #76]
    e29c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e2a0:	64fb      	str	r3, [r7, #76]
    e2a2:	6cfa      	ldr	r2, [r7, #76]
    e2a4:	6cbb      	ldr	r3, [r7, #72]
    e2a6:	429a      	cmp	r2, r3
    e2a8:	dbec      	blt.n	e284 <_ZN16ServosNumeriques15setTorqueLimiteEth+0x30>
        sendData(packet[i]);
    }
}
    e2aa:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e2ae:	46bd      	mov	sp, r7
    e2b0:	bd80      	pop	{r7, pc}
    e2b2:	46c0      	nop			(mov r8, r8)

0000e2b4 <_ZN16ServosNumeriques11setBaudRateEhh>:
    int packetLength = AX12::getAngleUpperLimitInstruction(packet, angle, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void setBaudRate(uint8_t baudRate, uint8_t servo)
    e2b4:	b580      	push	{r7, lr}
    e2b6:	b094      	sub	sp, #80
    e2b8:	af00      	add	r7, sp, #0
    e2ba:	4603      	mov	r3, r0
    e2bc:	460a      	mov	r2, r1
    e2be:	71fb      	strb	r3, [r7, #7]
    e2c0:	4613      	mov	r3, r2
    e2c2:	71bb      	strb	r3, [r7, #6]
{
    int packet[16];
    int packetLength = AX12::getBaudRateInstruction(packet, baudRate, servo);
    e2c4:	f897 c006 	ldrb.w	ip, [r7, #6]
    e2c8:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e2cc:	79fa      	ldrb	r2, [r7, #7]
    e2ce:	4618      	mov	r0, r3
    e2d0:	4611      	mov	r1, r2
    e2d2:	4662      	mov	r2, ip
    e2d4:	f7fc fea4 	bl	b020 <_ZN4AX1222getBaudRateInstructionEPihi>
    e2d8:	4603      	mov	r3, r0
    e2da:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e2dc:	f04f 0300 	mov.w	r3, #0	; 0x0
    e2e0:	64fb      	str	r3, [r7, #76]
    e2e2:	e00e      	b.n	e302 <_ZN16ServosNumeriques11setBaudRateEhh+0x4e>
        sendData(packet[i]);
    e2e4:	6cfb      	ldr	r3, [r7, #76]
    e2e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e2ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e2ee:	4413      	add	r3, r2
    e2f0:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e2f4:	4618      	mov	r0, r3
    e2f6:	f7ff ff5f 	bl	e1b8 <_ZN16ServosNumeriques8sendDataEi>
}
void setBaudRate(uint8_t baudRate, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getBaudRateInstruction(packet, baudRate, servo);
    for (int i = 0; i < packetLength; i++) {
    e2fa:	6cfb      	ldr	r3, [r7, #76]
    e2fc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e300:	64fb      	str	r3, [r7, #76]
    e302:	6cfa      	ldr	r2, [r7, #76]
    e304:	6cbb      	ldr	r3, [r7, #72]
    e306:	429a      	cmp	r2, r3
    e308:	dbec      	blt.n	e2e4 <_ZN16ServosNumeriques11setBaudRateEhh+0x30>
        sendData(packet[i]);
    }
}
    e30a:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e30e:	46bd      	mov	sp, r7
    e310:	bd80      	pop	{r7, pc}
    e312:	46c0      	nop			(mov r8, r8)

0000e314 <_ZN16ServosNumeriques15setMaximumAngleEth>:
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}

void setMaximumAngle(uint16_t angle, uint8_t servo)
    e314:	b580      	push	{r7, lr}
    e316:	b094      	sub	sp, #80
    e318:	af00      	add	r7, sp, #0
    e31a:	4603      	mov	r3, r0
    e31c:	460a      	mov	r2, r1
    e31e:	80fb      	strh	r3, [r7, #6]
    e320:	4613      	mov	r3, r2
    e322:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getAngleUpperLimitInstruction(packet, angle, servo);
    e324:	f897 c005 	ldrb.w	ip, [r7, #5]
    e328:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e32c:	88fa      	ldrh	r2, [r7, #6]
    e32e:	4618      	mov	r0, r3
    e330:	4611      	mov	r1, r2
    e332:	4662      	mov	r2, ip
    e334:	f7fc ff48 	bl	b1c8 <_ZN4AX1229getAngleUpperLimitInstructionEPiti>
    e338:	4603      	mov	r3, r0
    e33a:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e33c:	f04f 0300 	mov.w	r3, #0	; 0x0
    e340:	64fb      	str	r3, [r7, #76]
    e342:	e00e      	b.n	e362 <_ZN16ServosNumeriques15setMaximumAngleEth+0x4e>
        sendData(packet[i]);
    e344:	6cfb      	ldr	r3, [r7, #76]
    e346:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e34a:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e34e:	4413      	add	r3, r2
    e350:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e354:	4618      	mov	r0, r3
    e356:	f7ff ff2f 	bl	e1b8 <_ZN16ServosNumeriques8sendDataEi>

void setMaximumAngle(uint16_t angle, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getAngleUpperLimitInstruction(packet, angle, servo);
    for (int i = 0; i < packetLength; i++) {
    e35a:	6cfb      	ldr	r3, [r7, #76]
    e35c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e360:	64fb      	str	r3, [r7, #76]
    e362:	6cfa      	ldr	r2, [r7, #76]
    e364:	6cbb      	ldr	r3, [r7, #72]
    e366:	429a      	cmp	r2, r3
    e368:	dbec      	blt.n	e344 <_ZN16ServosNumeriques15setMaximumAngleEth+0x30>
        sendData(packet[i]);
    }
}
    e36a:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e36e:	46bd      	mov	sp, r7
    e370:	bd80      	pop	{r7, pc}
    e372:	46c0      	nop			(mov r8, r8)

0000e374 <_ZN16ServosNumeriques15setMinimumAngleEth>:
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}

void setMinimumAngle(uint16_t angle, uint8_t servo)
    e374:	b580      	push	{r7, lr}
    e376:	b094      	sub	sp, #80
    e378:	af00      	add	r7, sp, #0
    e37a:	4603      	mov	r3, r0
    e37c:	460a      	mov	r2, r1
    e37e:	80fb      	strh	r3, [r7, #6]
    e380:	4613      	mov	r3, r2
    e382:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getAngleLowerLimitInstruction(packet, angle, servo);
    e384:	f897 c005 	ldrb.w	ip, [r7, #5]
    e388:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e38c:	88fa      	ldrh	r2, [r7, #6]
    e38e:	4618      	mov	r0, r3
    e390:	4611      	mov	r1, r2
    e392:	4662      	mov	r2, ip
    e394:	f7fc ff52 	bl	b23c <_ZN4AX1229getAngleLowerLimitInstructionEPiti>
    e398:	4603      	mov	r3, r0
    e39a:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e39c:	f04f 0300 	mov.w	r3, #0	; 0x0
    e3a0:	64fb      	str	r3, [r7, #76]
    e3a2:	e00e      	b.n	e3c2 <_ZN16ServosNumeriques15setMinimumAngleEth+0x4e>
        sendData(packet[i]);
    e3a4:	6cfb      	ldr	r3, [r7, #76]
    e3a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e3aa:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e3ae:	4413      	add	r3, r2
    e3b0:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e3b4:	4618      	mov	r0, r3
    e3b6:	f7ff feff 	bl	e1b8 <_ZN16ServosNumeriques8sendDataEi>

void setMinimumAngle(uint16_t angle, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getAngleLowerLimitInstruction(packet, angle, servo);
    for (int i = 0; i < packetLength; i++) {
    e3ba:	6cfb      	ldr	r3, [r7, #76]
    e3bc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e3c0:	64fb      	str	r3, [r7, #76]
    e3c2:	6cfa      	ldr	r2, [r7, #76]
    e3c4:	6cbb      	ldr	r3, [r7, #72]
    e3c6:	429a      	cmp	r2, r3
    e3c8:	dbec      	blt.n	e3a4 <_ZN16ServosNumeriques15setMinimumAngleEth+0x30>
        sendData(packet[i]);
    }
}
    e3ca:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e3ce:	46bd      	mov	sp, r7
    e3d0:	bd80      	pop	{r7, pc}
    e3d2:	46c0      	nop			(mov r8, r8)

0000e3d4 <_ZN16ServosNumeriques11setLedStateEhh>:
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}

void setLedState(uint8_t ledOn, uint8_t servo)
    e3d4:	b580      	push	{r7, lr}
    e3d6:	b094      	sub	sp, #80
    e3d8:	af00      	add	r7, sp, #0
    e3da:	4603      	mov	r3, r0
    e3dc:	460a      	mov	r2, r1
    e3de:	71fb      	strb	r3, [r7, #7]
    e3e0:	4613      	mov	r3, r2
    e3e2:	71bb      	strb	r3, [r7, #6]
{
    int packet[16];
    int packetLength = AX12::getLedInstruction(packet, ledOn, servo);
    e3e4:	f897 c006 	ldrb.w	ip, [r7, #6]
    e3e8:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e3ec:	79fa      	ldrb	r2, [r7, #7]
    e3ee:	4618      	mov	r0, r3
    e3f0:	4611      	mov	r1, r2
    e3f2:	4662      	mov	r2, ip
    e3f4:	f7fc fe44 	bl	b080 <_ZN4AX1217getLedInstructionEPihi>
    e3f8:	4603      	mov	r3, r0
    e3fa:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e3fc:	f04f 0300 	mov.w	r3, #0	; 0x0
    e400:	64fb      	str	r3, [r7, #76]
    e402:	e00e      	b.n	e422 <_ZN16ServosNumeriques11setLedStateEhh+0x4e>
        sendData(packet[i]);
    e404:	6cfb      	ldr	r3, [r7, #76]
    e406:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e40a:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e40e:	4413      	add	r3, r2
    e410:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e414:	4618      	mov	r0, r3
    e416:	f7ff fecf 	bl	e1b8 <_ZN16ServosNumeriques8sendDataEi>

void setLedState(uint8_t ledOn, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getLedInstruction(packet, ledOn, servo);
    for (int i = 0; i < packetLength; i++) {
    e41a:	6cfb      	ldr	r3, [r7, #76]
    e41c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e420:	64fb      	str	r3, [r7, #76]
    e422:	6cfa      	ldr	r2, [r7, #76]
    e424:	6cbb      	ldr	r3, [r7, #72]
    e426:	429a      	cmp	r2, r3
    e428:	dbec      	blt.n	e404 <_ZN16ServosNumeriques11setLedStateEhh+0x30>
        sendData(packet[i]);
    }
}
    e42a:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e42e:	46bd      	mov	sp, r7
    e430:	bd80      	pop	{r7, pc}
    e432:	46c0      	nop			(mov r8, r8)

0000e434 <_ZN16ServosNumeriques11moveAtSpeedEth>:
    int packetLength = AX12::getMoveToInstruction(packet, position, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void moveAtSpeed(uint16_t vitesse, uint8_t servo)
    e434:	b580      	push	{r7, lr}
    e436:	b094      	sub	sp, #80
    e438:	af00      	add	r7, sp, #0
    e43a:	4603      	mov	r3, r0
    e43c:	460a      	mov	r2, r1
    e43e:	80fb      	strh	r3, [r7, #6]
    e440:	4613      	mov	r3, r2
    e442:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getMoveSpeedInstruction(packet, vitesse, servo);
    e444:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e448:	88fa      	ldrh	r2, [r7, #6]
    e44a:	f897 c005 	ldrb.w	ip, [r7, #5]
    e44e:	4618      	mov	r0, r3
    e450:	4611      	mov	r1, r2
    e452:	4662      	mov	r2, ip
    e454:	f7fc ff2c 	bl	b2b0 <_ZN4AX1223getMoveSpeedInstructionEPith>
    e458:	4603      	mov	r3, r0
    e45a:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e45c:	f04f 0300 	mov.w	r3, #0	; 0x0
    e460:	64fb      	str	r3, [r7, #76]
    e462:	e00e      	b.n	e482 <_ZN16ServosNumeriques11moveAtSpeedEth+0x4e>
        sendData(packet[i]);
    e464:	6cfb      	ldr	r3, [r7, #76]
    e466:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e46a:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e46e:	4413      	add	r3, r2
    e470:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e474:	4618      	mov	r0, r3
    e476:	f7ff fe9f 	bl	e1b8 <_ZN16ServosNumeriques8sendDataEi>
}
void moveAtSpeed(uint16_t vitesse, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getMoveSpeedInstruction(packet, vitesse, servo);
    for (int i = 0; i < packetLength; i++) {
    e47a:	6cfb      	ldr	r3, [r7, #76]
    e47c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e480:	64fb      	str	r3, [r7, #76]
    e482:	6cfa      	ldr	r2, [r7, #76]
    e484:	6cbb      	ldr	r3, [r7, #72]
    e486:	429a      	cmp	r2, r3
    e488:	dbec      	blt.n	e464 <_ZN16ServosNumeriques11moveAtSpeedEth+0x30>
        sendData(packet[i]);
    }
}
    e48a:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e48e:	46bd      	mov	sp, r7
    e490:	bd80      	pop	{r7, pc}
    e492:	46c0      	nop			(mov r8, r8)

0000e494 <_ZN16ServosNumeriques6moveToEth>:
    int packetLength = AX12::getMoveInstruction(packet, position, vitesse, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void moveTo(uint16_t position, uint8_t servo)
    e494:	b580      	push	{r7, lr}
    e496:	b094      	sub	sp, #80
    e498:	af00      	add	r7, sp, #0
    e49a:	4603      	mov	r3, r0
    e49c:	460a      	mov	r2, r1
    e49e:	80fb      	strh	r3, [r7, #6]
    e4a0:	4613      	mov	r3, r2
    e4a2:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getMoveToInstruction(packet, position, servo);
    e4a4:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e4a8:	88fa      	ldrh	r2, [r7, #6]
    e4aa:	f897 c005 	ldrb.w	ip, [r7, #5]
    e4ae:	4618      	mov	r0, r3
    e4b0:	4611      	mov	r1, r2
    e4b2:	4662      	mov	r2, ip
    e4b4:	f7fc ff38 	bl	b328 <_ZN4AX1220getMoveToInstructionEPith>
    e4b8:	4603      	mov	r3, r0
    e4ba:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e4bc:	f04f 0300 	mov.w	r3, #0	; 0x0
    e4c0:	64fb      	str	r3, [r7, #76]
    e4c2:	e00e      	b.n	e4e2 <_ZN16ServosNumeriques6moveToEth+0x4e>
        sendData(packet[i]);
    e4c4:	6cfb      	ldr	r3, [r7, #76]
    e4c6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e4ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e4ce:	4413      	add	r3, r2
    e4d0:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e4d4:	4618      	mov	r0, r3
    e4d6:	f7ff fe6f 	bl	e1b8 <_ZN16ServosNumeriques8sendDataEi>
}
void moveTo(uint16_t position, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getMoveToInstruction(packet, position, servo);
    for (int i = 0; i < packetLength; i++) {
    e4da:	6cfb      	ldr	r3, [r7, #76]
    e4dc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e4e0:	64fb      	str	r3, [r7, #76]
    e4e2:	6cfa      	ldr	r2, [r7, #76]
    e4e4:	6cbb      	ldr	r3, [r7, #72]
    e4e6:	429a      	cmp	r2, r3
    e4e8:	dbec      	blt.n	e4c4 <_ZN16ServosNumeriques6moveToEth+0x30>
        sendData(packet[i]);
    }
}
    e4ea:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e4ee:	46bd      	mov	sp, r7
    e4f0:	bd80      	pop	{r7, pc}
    e4f2:	46c0      	nop			(mov r8, r8)

0000e4f4 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh>:
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}

void changeContinuousRotationMode(uint8_t servo, bool continuous, uint8_t step)
    e4f4:	b580      	push	{r7, lr}
    e4f6:	b08a      	sub	sp, #40
    e4f8:	af00      	add	r7, sp, #0
    e4fa:	4603      	mov	r3, r0
    e4fc:	73fb      	strb	r3, [r7, #15]
    e4fe:	460b      	mov	r3, r1
    e500:	73bb      	strb	r3, [r7, #14]
    e502:	4613      	mov	r3, r2
    e504:	737b      	strb	r3, [r7, #13]
{
    if(continuous)
    e506:	7bbb      	ldrb	r3, [r7, #14]
    e508:	2b00      	cmp	r3, #0
    e50a:	d056      	beq.n	e5ba <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0xc6>
    {
        //On set les angles min et max à 0, et la position goal à 0
        switch(step)
    e50c:	7b7b      	ldrb	r3, [r7, #13]
    e50e:	607b      	str	r3, [r7, #4]
    e510:	687b      	ldr	r3, [r7, #4]
    e512:	2b02      	cmp	r3, #2
    e514:	d00c      	beq.n	e530 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x3c>
    e516:	687b      	ldr	r3, [r7, #4]
    e518:	2b03      	cmp	r3, #3
    e51a:	d010      	beq.n	e53e <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x4a>
    e51c:	687b      	ldr	r3, [r7, #4]
    e51e:	2b01      	cmp	r3, #1
    e520:	d114      	bne.n	e54c <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x58>
        {
            case 1:
                setMinimumAngle(0, servo);
    e522:	7bfb      	ldrb	r3, [r7, #15]
    e524:	f04f 0000 	mov.w	r0, #0	; 0x0
    e528:	4619      	mov	r1, r3
    e52a:	f7ff ff23 	bl	e374 <_ZN16ServosNumeriques15setMinimumAngleEth>
    e52e:	e09a      	b.n	e666 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x172>
                break;

            case 2:
                setMaximumAngle(0, servo);
    e530:	7bfb      	ldrb	r3, [r7, #15]
    e532:	f04f 0000 	mov.w	r0, #0	; 0x0
    e536:	4619      	mov	r1, r3
    e538:	f7ff feec 	bl	e314 <_ZN16ServosNumeriques15setMaximumAngleEth>
    e53c:	e093      	b.n	e666 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x172>
                break;

            case 3:
                moveTo(0, servo);
    e53e:	7bfb      	ldrb	r3, [r7, #15]
    e540:	f04f 0000 	mov.w	r0, #0	; 0x0
    e544:	4619      	mov	r1, r3
    e546:	f7ff ffa5 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
    e54a:	e08c      	b.n	e666 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x172>
                break;

            default:
                setMinimumAngle(0, servo);
    e54c:	7bfb      	ldrb	r3, [r7, #15]
    e54e:	f04f 0000 	mov.w	r0, #0	; 0x0
    e552:	4619      	mov	r1, r3
    e554:	f7ff ff0e 	bl	e374 <_ZN16ServosNumeriques15setMinimumAngleEth>
                for(int i = 0 ; i < 100000 ; i++){}//@TODO : trouver le temps minimum qui marche encore à coup sûr
    e558:	f04f 0300 	mov.w	r3, #0	; 0x0
    e55c:	613b      	str	r3, [r7, #16]
    e55e:	e003      	b.n	e568 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x74>
    e560:	693b      	ldr	r3, [r7, #16]
    e562:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e566:	613b      	str	r3, [r7, #16]
    e568:	693a      	ldr	r2, [r7, #16]
    e56a:	4b41      	ldr	r3, [pc, #260]	(e670 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x17c>)
    e56c:	429a      	cmp	r2, r3
    e56e:	ddf7      	ble.n	e560 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x6c>
                setMaximumAngle(0, servo);
    e570:	7bfb      	ldrb	r3, [r7, #15]
    e572:	f04f 0000 	mov.w	r0, #0	; 0x0
    e576:	4619      	mov	r1, r3
    e578:	f7ff fecc 	bl	e314 <_ZN16ServosNumeriques15setMaximumAngleEth>
                for(int i = 0 ; i < 100000 ; i++){}
    e57c:	f04f 0300 	mov.w	r3, #0	; 0x0
    e580:	617b      	str	r3, [r7, #20]
    e582:	e003      	b.n	e58c <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x98>
    e584:	697b      	ldr	r3, [r7, #20]
    e586:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e58a:	617b      	str	r3, [r7, #20]
    e58c:	697a      	ldr	r2, [r7, #20]
    e58e:	4b38      	ldr	r3, [pc, #224]	(e670 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x17c>)
    e590:	429a      	cmp	r2, r3
    e592:	ddf7      	ble.n	e584 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x90>
                moveTo(0, servo);
    e594:	7bfb      	ldrb	r3, [r7, #15]
    e596:	f04f 0000 	mov.w	r0, #0	; 0x0
    e59a:	4619      	mov	r1, r3
    e59c:	f7ff ff7a 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
                for(int i = 0 ; i < 100000 ; i++){}
    e5a0:	f04f 0300 	mov.w	r3, #0	; 0x0
    e5a4:	61bb      	str	r3, [r7, #24]
    e5a6:	e003      	b.n	e5b0 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0xbc>
    e5a8:	69bb      	ldr	r3, [r7, #24]
    e5aa:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e5ae:	61bb      	str	r3, [r7, #24]
    e5b0:	69ba      	ldr	r2, [r7, #24]
    e5b2:	4b2f      	ldr	r3, [pc, #188]	(e670 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x17c>)
    e5b4:	429a      	cmp	r2, r3
    e5b6:	ddf7      	ble.n	e5a8 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0xb4>
    e5b8:	e055      	b.n	e666 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x172>
        }
    }
    else
    {
        //On remet les valeurs par défaut
        switch(step)
    e5ba:	7b7b      	ldrb	r3, [r7, #13]
    e5bc:	60bb      	str	r3, [r7, #8]
    e5be:	68bb      	ldr	r3, [r7, #8]
    e5c0:	2b02      	cmp	r3, #2
    e5c2:	d00c      	beq.n	e5de <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0xea>
    e5c4:	68bb      	ldr	r3, [r7, #8]
    e5c6:	2b03      	cmp	r3, #3
    e5c8:	d010      	beq.n	e5ec <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0xf8>
    e5ca:	68bb      	ldr	r3, [r7, #8]
    e5cc:	2b01      	cmp	r3, #1
    e5ce:	d114      	bne.n	e5fa <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x106>
        {
            case 1:
                setMinimumAngle(0, servo);
    e5d0:	7bfb      	ldrb	r3, [r7, #15]
    e5d2:	f04f 0000 	mov.w	r0, #0	; 0x0
    e5d6:	4619      	mov	r1, r3
    e5d8:	f7ff fecc 	bl	e374 <_ZN16ServosNumeriques15setMinimumAngleEth>
    e5dc:	e043      	b.n	e666 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x172>
                break;

            case 2:
                setMaximumAngle(0, servo);
    e5de:	7bfb      	ldrb	r3, [r7, #15]
    e5e0:	f04f 0000 	mov.w	r0, #0	; 0x0
    e5e4:	4619      	mov	r1, r3
    e5e6:	f7ff fe95 	bl	e314 <_ZN16ServosNumeriques15setMaximumAngleEth>
    e5ea:	e03c      	b.n	e666 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x172>
                break;

            case 3:
                moveTo(0, servo);
    e5ec:	7bfb      	ldrb	r3, [r7, #15]
    e5ee:	f04f 0000 	mov.w	r0, #0	; 0x0
    e5f2:	4619      	mov	r1, r3
    e5f4:	f7ff ff4e 	bl	e494 <_ZN16ServosNumeriques6moveToEth>
    e5f8:	e035      	b.n	e666 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x172>
                break;

            default:
                setMinimumAngle(0, servo);
    e5fa:	7bfb      	ldrb	r3, [r7, #15]
    e5fc:	f04f 0000 	mov.w	r0, #0	; 0x0
    e600:	4619      	mov	r1, r3
    e602:	f7ff feb7 	bl	e374 <_ZN16ServosNumeriques15setMinimumAngleEth>
                for(int i = 0 ; i < 100000 ; i++){}
    e606:	f04f 0300 	mov.w	r3, #0	; 0x0
    e60a:	61fb      	str	r3, [r7, #28]
    e60c:	e003      	b.n	e616 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x122>
    e60e:	69fb      	ldr	r3, [r7, #28]
    e610:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e614:	61fb      	str	r3, [r7, #28]
    e616:	69fa      	ldr	r2, [r7, #28]
    e618:	4b15      	ldr	r3, [pc, #84]	(e670 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x17c>)
    e61a:	429a      	cmp	r2, r3
    e61c:	ddf7      	ble.n	e60e <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x11a>
                setMaximumAngle(1023, servo);
    e61e:	7bfb      	ldrb	r3, [r7, #15]
    e620:	f240 30ff 	movw	r0, #1023	; 0x3ff
    e624:	4619      	mov	r1, r3
    e626:	f7ff fe75 	bl	e314 <_ZN16ServosNumeriques15setMaximumAngleEth>
                for(int i = 0 ; i < 100000 ; i++){}
    e62a:	f04f 0300 	mov.w	r3, #0	; 0x0
    e62e:	623b      	str	r3, [r7, #32]
    e630:	e003      	b.n	e63a <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x146>
    e632:	6a3b      	ldr	r3, [r7, #32]
    e634:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e638:	623b      	str	r3, [r7, #32]
    e63a:	6a3a      	ldr	r2, [r7, #32]
    e63c:	4b0c      	ldr	r3, [pc, #48]	(e670 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x17c>)
    e63e:	429a      	cmp	r2, r3
    e640:	ddf7      	ble.n	e632 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x13e>
                moveAtSpeed(0, servo);
    e642:	7bfb      	ldrb	r3, [r7, #15]
    e644:	f04f 0000 	mov.w	r0, #0	; 0x0
    e648:	4619      	mov	r1, r3
    e64a:	f7ff fef3 	bl	e434 <_ZN16ServosNumeriques11moveAtSpeedEth>
                for(int i = 0 ; i < 100000 ; i++){}
    e64e:	f04f 0300 	mov.w	r3, #0	; 0x0
    e652:	627b      	str	r3, [r7, #36]
    e654:	e003      	b.n	e65e <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x16a>
    e656:	6a7b      	ldr	r3, [r7, #36]
    e658:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e65c:	627b      	str	r3, [r7, #36]
    e65e:	6a7a      	ldr	r2, [r7, #36]
    e660:	4b03      	ldr	r3, [pc, #12]	(e670 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x17c>)
    e662:	429a      	cmp	r2, r3
    e664:	ddf7      	ble.n	e656 <_ZN16ServosNumeriques28changeContinuousRotationModeEhbh+0x162>
        }
    }
}
    e666:	f107 0728 	add.w	r7, r7, #40	; 0x28
    e66a:	46bd      	mov	sp, r7
    e66c:	bd80      	pop	{r7, pc}
    e66e:	46c0      	nop			(mov r8, r8)
    e670:	0001869f 	.word	0x0001869f

0000e674 <_ZN16ServosNumeriques13moveToAtSpeedEtth>:
        }
    }
    return 1;
}

void moveToAtSpeed(uint16_t position, uint16_t vitesse, uint8_t servo)
    e674:	b580      	push	{r7, lr}
    e676:	b094      	sub	sp, #80
    e678:	af00      	add	r7, sp, #0
    e67a:	4603      	mov	r3, r0
    e67c:	80fb      	strh	r3, [r7, #6]
    e67e:	460b      	mov	r3, r1
    e680:	80bb      	strh	r3, [r7, #4]
    e682:	4613      	mov	r3, r2
    e684:	70fb      	strb	r3, [r7, #3]
{
    int packet[16];
    int packetLength = AX12::getMoveInstruction(packet, position, vitesse, servo);
    e686:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e68a:	88fa      	ldrh	r2, [r7, #6]
    e68c:	f8b7 c004 	ldrh.w	ip, [r7, #4]
    e690:	f897 e003 	ldrb.w	lr, [r7, #3]
    e694:	4618      	mov	r0, r3
    e696:	4611      	mov	r1, r2
    e698:	4662      	mov	r2, ip
    e69a:	4673      	mov	r3, lr
    e69c:	f7fc fe80 	bl	b3a0 <_ZN4AX1218getMoveInstructionEPitth>
    e6a0:	4603      	mov	r3, r0
    e6a2:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e6a4:	f04f 0300 	mov.w	r3, #0	; 0x0
    e6a8:	64fb      	str	r3, [r7, #76]
    e6aa:	e00e      	b.n	e6ca <_ZN16ServosNumeriques13moveToAtSpeedEtth+0x56>
        sendData(packet[i]);
    e6ac:	6cfb      	ldr	r3, [r7, #76]
    e6ae:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e6b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e6b6:	4413      	add	r3, r2
    e6b8:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e6bc:	4618      	mov	r0, r3
    e6be:	f7ff fd7b 	bl	e1b8 <_ZN16ServosNumeriques8sendDataEi>

void moveToAtSpeed(uint16_t position, uint16_t vitesse, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getMoveInstruction(packet, position, vitesse, servo);
    for (int i = 0; i < packetLength; i++) {
    e6c2:	6cfb      	ldr	r3, [r7, #76]
    e6c4:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e6c8:	64fb      	str	r3, [r7, #76]
    e6ca:	6cfa      	ldr	r2, [r7, #76]
    e6cc:	6cbb      	ldr	r3, [r7, #72]
    e6ce:	429a      	cmp	r2, r3
    e6d0:	dbec      	blt.n	e6ac <_ZN16ServosNumeriques13moveToAtSpeedEtth+0x38>
        sendData(packet[i]);
    }
}
    e6d2:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e6d6:	46bd      	mov	sp, r7
    e6d8:	bd80      	pop	{r7, pc}
    e6da:	46c0      	nop			(mov r8, r8)

0000e6dc <_Z25ServosNumeriques_sendDatai>:
#include "interfaceServosNumeriques.h"
//#include "stm32f4xx_usart.h"

void ServosNumeriques_sendData(int data)
    e6dc:	b580      	push	{r7, lr}
    e6de:	b082      	sub	sp, #8
    e6e0:	af00      	add	r7, sp, #0
    e6e2:	6078      	str	r0, [r7, #4]
{
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
    e6e4:	480b      	ldr	r0, [pc, #44]	(e714 <_Z25ServosNumeriques_sendDatai+0x38>)
    e6e6:	f04f 0180 	mov.w	r1, #128	; 0x80
    e6ea:	f7f6 fb3f 	bl	4d6c <USART_GetFlagStatus>
    e6ee:	4603      	mov	r3, r0
    e6f0:	2b00      	cmp	r3, #0
    e6f2:	bf14      	ite	ne
    e6f4:	2300      	movne	r3, #0
    e6f6:	2301      	moveq	r3, #1
    e6f8:	b2db      	uxtb	r3, r3
    e6fa:	2b00      	cmp	r3, #0
    e6fc:	d1f2      	bne.n	e6e4 <_Z25ServosNumeriques_sendDatai+0x8>
    USART_SendData(USART3, (u16) data);
    e6fe:	687b      	ldr	r3, [r7, #4]
    e700:	b29b      	uxth	r3, r3
    e702:	4804      	ldr	r0, [pc, #16]	(e714 <_Z25ServosNumeriques_sendDatai+0x38>)
    e704:	4619      	mov	r1, r3
    e706:	f7f6 f9fd 	bl	4b04 <USART_SendData>
}
    e70a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e70e:	46bd      	mov	sp, r7
    e710:	bd80      	pop	{r7, pc}
    e712:	46c0      	nop			(mov r8, r8)
    e714:	40004800 	.word	0x40004800

0000e718 <_ZN16ServosNumeriques11receiveModeEv>:
	GPIO_WriteBit(GPIOD, GPIO_Pin_10, Bit_SET);
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}
void receiveMode()
    e718:	b580      	push	{r7, lr}
    e71a:	af00      	add	r7, sp, #0
{
	// on veut recevoir des paquets, on met le bit d'envoi à 0
	#ifdef STM32F10X_CL
	GPIO_WriteBit(GPIOD, GPIO_Pin_10, Bit_RESET);
    e71c:	4804      	ldr	r0, [pc, #16]	(e730 <_ZN16ServosNumeriques11receiveModeEv+0x18>)
    e71e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e722:	f04f 0200 	mov.w	r2, #0	; 0x0
    e726:	f7f3 f931 	bl	198c <GPIO_WriteBit>
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}
    e72a:	46bd      	mov	sp, r7
    e72c:	bd80      	pop	{r7, pc}
    e72e:	46c0      	nop			(mov r8, r8)
    e730:	40011400 	.word	0x40011400

0000e734 <_ZN16ServosNumeriques8sendModeEv>:
	USART_Init(USART3, &USART_InitStruct);
	//USART_ClockInit(USART3, &USART_ClockInitStruct);
	USART_Cmd(USART3, ENABLE);
}

void sendMode()
    e734:	b580      	push	{r7, lr}
    e736:	af00      	add	r7, sp, #0
{
	// on veut envoyer des paquets, on met le bit d'envoi à 1
	#ifdef STM32F10X_CL
	GPIO_WriteBit(GPIOD, GPIO_Pin_10, Bit_SET);
    e738:	4804      	ldr	r0, [pc, #16]	(e74c <_ZN16ServosNumeriques8sendModeEv+0x18>)
    e73a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e73e:	f04f 0201 	mov.w	r2, #1	; 0x1
    e742:	f7f3 f923 	bl	198c <GPIO_WriteBit>
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}
    e746:	46bd      	mov	sp, r7
    e748:	bd80      	pop	{r7, pc}
    e74a:	46c0      	nop			(mov r8, r8)
    e74c:	40011400 	.word	0x40011400

0000e750 <_ZN16ServosNumeriques11getPositionEh>:
                for(int i = 0 ; i < 100000 ; i++){}
        }
    }
}

int getPosition(uint8_t servo)
    e750:	b580      	push	{r7, lr}
    e752:	b0a6      	sub	sp, #152
    e754:	af00      	add	r7, sp, #0
    e756:	4603      	mov	r3, r0
    e758:	71fb      	strb	r3, [r7, #7]
{
    int packet[16];
    int packetLength = 8;
    e75a:	f04f 0308 	mov.w	r3, #8	; 0x8
    e75e:	f8c7 308c 	str.w	r3, [r7, #140]
    AX12::receivePositionInformation(packet, servo);
    e762:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    e766:	79fa      	ldrb	r2, [r7, #7]
    e768:	4618      	mov	r0, r3
    e76a:	4611      	mov	r1, r2
    e76c:	f7fc fe8c 	bl	b488 <_ZN4AX1226receivePositionInformationEPih>
    for (int i = 0; i < packetLength; i++)
    e770:	f04f 0300 	mov.w	r3, #0	; 0x0
    e774:	f8c7 3094 	str.w	r3, [r7, #148]
    e778:	e011      	b.n	e79e <_ZN16ServosNumeriques11getPositionEh+0x4e>
    {
        sendData(packet[i]);
    e77a:	f8d7 3094 	ldr.w	r3, [r7, #148]
    e77e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e782:	f107 0298 	add.w	r2, r7, #152	; 0x98
    e786:	4413      	add	r3, r2
    e788:	f853 3c4c 	ldr.w	r3, [r3, #-76]
    e78c:	4618      	mov	r0, r3
    e78e:	f7ff fd13 	bl	e1b8 <_ZN16ServosNumeriques8sendDataEi>
int getPosition(uint8_t servo)
{
    int packet[16];
    int packetLength = 8;
    AX12::receivePositionInformation(packet, servo);
    for (int i = 0; i < packetLength; i++)
    e792:	f8d7 3094 	ldr.w	r3, [r7, #148]
    e796:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e79a:	f8c7 3094 	str.w	r3, [r7, #148]
    e79e:	f8d7 2094 	ldr.w	r2, [r7, #148]
    e7a2:	f8d7 308c 	ldr.w	r3, [r7, #140]
    e7a6:	429a      	cmp	r2, r3
    e7a8:	dbe7      	blt.n	e77a <_ZN16ServosNumeriques11getPositionEh+0x2a>
    {
        sendData(packet[i]);
    }

    ServosNumeriques::receiveMode();
    e7aa:	f7ff ffb5 	bl	e718 <_ZN16ServosNumeriques11receiveModeEv>
    int packetReceived[16];
    receiveStatusPacket(packetReceived);
    e7ae:	f107 030c 	add.w	r3, r7, #12	; 0xc
    e7b2:	4618      	mov	r0, r3
    e7b4:	f7ff fc6a 	bl	e08c <_ZN16ServosNumeriques19receiveStatusPacketEPi>
    ServosNumeriques::sendMode();
    e7b8:	f7ff ffbc 	bl	e734 <_ZN16ServosNumeriques8sendModeEv>
    uint16_t position = 0;
    e7bc:	f04f 0300 	mov.w	r3, #0	; 0x0
    e7c0:	f8a7 3092 	strh.w	r3, [r7, #146]

    if(packetReceived[0] == servo)
    e7c4:	68fa      	ldr	r2, [r7, #12]
    e7c6:	79fb      	ldrb	r3, [r7, #7]
    e7c8:	429a      	cmp	r2, r3
    e7ca:	d109      	bne.n	e7e0 <_ZN16ServosNumeriques11getPositionEh+0x90>
    {
        position = packetReceived[3] + (packetReceived[4] << 8);
    e7cc:	69bb      	ldr	r3, [r7, #24]
    e7ce:	b29a      	uxth	r2, r3
    e7d0:	69fb      	ldr	r3, [r7, #28]
    e7d2:	b29b      	uxth	r3, r3
    e7d4:	ea4f 2303 	mov.w	r3, r3, lsl #8
    e7d8:	b29b      	uxth	r3, r3
    e7da:	4413      	add	r3, r2
    e7dc:	f8a7 3092 	strh.w	r3, [r7, #146]
    }
    return (int) position;
    e7e0:	f8b7 3092 	ldrh.w	r3, [r7, #146]
}
    e7e4:	4618      	mov	r0, r3
    e7e6:	f107 0798 	add.w	r7, r7, #152	; 0x98
    e7ea:	46bd      	mov	sp, r7
    e7ec:	bd80      	pop	{r7, pc}
    e7ee:	46c0      	nop			(mov r8, r8)

0000e7f0 <_ZN16ServosNumeriques8initUARTEi>:
#endif


}

void initUART(int baudRate)
    e7f0:	b580      	push	{r7, lr}
    e7f2:	b086      	sub	sp, #24
    e7f4:	af00      	add	r7, sp, #0
    e7f6:	6078      	str	r0, [r7, #4]
{
    USART_InitTypeDef USART_InitStruct;
	// Protocole ax12 : Half duplex Asynchronous Serial Communication (8bit,1stop,No Parity)
 	/* Initialisation des caracteristiques USART_InitStruct */
 	USART_InitStruct.USART_BaudRate = baudRate;
    e7f8:	687b      	ldr	r3, [r7, #4]
    e7fa:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
    e7fc:	f04f 0300 	mov.w	r3, #0	; 0x0
    e800:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
    e802:	f04f 0300 	mov.w	r3, #0	; 0x0
    e806:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No ;
    e808:	f04f 0300 	mov.w	r3, #0	; 0x0
    e80c:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    e80e:	f04f 0300 	mov.w	r3, #0	; 0x0
    e812:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    e814:	f04f 030c 	mov.w	r3, #12	; 0xc
    e818:	827b      	strh	r3, [r7, #18]

	/* On configure et on lance */
	USART_Init(USART3, &USART_InitStruct);
    e81a:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e81e:	4806      	ldr	r0, [pc, #24]	(e838 <_ZN16ServosNumeriques8initUARTEi+0x48>)
    e820:	4619      	mov	r1, r3
    e822:	f7f5 fefd 	bl	4620 <USART_Init>
	//USART_ClockInit(USART3, &USART_ClockInitStruct);
	USART_Cmd(USART3, ENABLE);
    e826:	4804      	ldr	r0, [pc, #16]	(e838 <_ZN16ServosNumeriques8initUARTEi+0x48>)
    e828:	f04f 0101 	mov.w	r1, #1	; 0x1
    e82c:	f7f6 f818 	bl	4860 <USART_Cmd>
}
    e830:	f107 0718 	add.w	r7, r7, #24	; 0x18
    e834:	46bd      	mov	sp, r7
    e836:	bd80      	pop	{r7, pc}
    e838:	40004800 	.word	0x40004800

0000e83c <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv>:
}

namespace ServosNumeriques
{

void initClocksAndPortsGPIO()
    e83c:	b580      	push	{r7, lr}
    e83e:	b082      	sub	sp, #8
    e840:	af00      	add	r7, sp, #0
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    GPIO_Init(GPIOB, &GPIO_InitStructure);
#endif
#ifdef STM32F10X_CL // Pin pour le stm32 h107
    // bus APB1 : allow usart 3
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
    e842:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    e846:	f04f 0101 	mov.w	r1, #1	; 0x1
    e84a:	f7f3 fe1f 	bl	248c <RCC_APB1PeriphClockCmd>

    // on remap l'usart3 pour que le stm soit bien configuré sur les ports 8 9 et 10 du GPIOD
    GPIO_PinRemapConfig(GPIO_FullRemap_USART3, ENABLE);
    e84e:	481b      	ldr	r0, [pc, #108]	(e8bc <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x80>)
    e850:	f04f 0101 	mov.w	r1, #1	; 0x1
    e854:	f7f3 f91c 	bl	1a90 <GPIO_PinRemapConfig>

    GPIO_InitTypeDef GPIO_InitStructure;
 	// port D pin 8 TX : un servo numérique en Ecriture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
    e858:	f44f 7380 	mov.w	r3, #256	; 0x100
    e85c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    e85e:	f04f 0318 	mov.w	r3, #24	; 0x18
    e862:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    e864:	f04f 0303 	mov.w	r3, #3	; 0x3
    e868:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    e86a:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e86e:	4814      	ldr	r0, [pc, #80]	(e8c0 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x84>)
    e870:	4619      	mov	r1, r3
    e872:	f7f2 ff1d 	bl	16b0 <GPIO_Init>

 	// port D pin 9 RX : un servo numérique en Lecture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    e876:	f44f 7300 	mov.w	r3, #512	; 0x200
    e87a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    e87c:	f04f 0304 	mov.w	r3, #4	; 0x4
    e880:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    e882:	f04f 0303 	mov.w	r3, #3	; 0x3
    e886:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    e888:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e88c:	480c      	ldr	r0, [pc, #48]	(e8c0 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x84>)
    e88e:	4619      	mov	r1, r3
    e890:	f7f2 ff0e 	bl	16b0 <GPIO_Init>

 	// port D pin 10 : la direction (TX/RX)
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    e894:	f44f 6380 	mov.w	r3, #1024	; 0x400
    e898:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    e89a:	f04f 0310 	mov.w	r3, #16	; 0x10
    e89e:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    e8a0:	f04f 0302 	mov.w	r3, #2	; 0x2
    e8a4:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    e8a6:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e8aa:	4805      	ldr	r0, [pc, #20]	(e8c0 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x84>)
    e8ac:	4619      	mov	r1, r3
    e8ae:	f7f2 feff 	bl	16b0 <GPIO_Init>
#endif


}
    e8b2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e8b6:	46bd      	mov	sp, r7
    e8b8:	bd80      	pop	{r7, pc}
    e8ba:	46c0      	nop			(mov r8, r8)
    e8bc:	00140030 	.word	0x00140030
    e8c0:	40011400 	.word	0x40011400

0000e8c4 <_Z6isBluev>:


#define NVIC_CCR ((volatile unsigned long *)(0xE000ED14))

// Dit si on est du coté bleu
bool isBlue() // = ROUGE
    e8c4:	b580      	push	{r7, lr}
    e8c6:	af00      	add	r7, sp, #0
{
#ifdef STM32F40_41xxx // Pin pour le stm32 h103
    return GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_9) == Bit_RESET;
#endif
#ifdef STM32F10X_CL // Pin pour le stm32 h107
    return GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_4) == Bit_RESET;
    e8c8:	4806      	ldr	r0, [pc, #24]	(e8e4 <_Z6isBluev+0x20>)
    e8ca:	f04f 0110 	mov.w	r1, #16	; 0x10
    e8ce:	f7f2 ffe9 	bl	18a4 <GPIO_ReadInputDataBit>
    e8d2:	4603      	mov	r3, r0
    e8d4:	2b00      	cmp	r3, #0
    e8d6:	bf14      	ite	ne
    e8d8:	2300      	movne	r3, #0
    e8da:	2301      	moveq	r3, #1
    e8dc:	b2db      	uxtb	r3, r3
#endif
#ifdef STM32F10X_MD // Pin pour le stm32 h103
    return GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_9) == Bit_RESET;
#endif
}
    e8de:	4618      	mov	r0, r3
    e8e0:	46bd      	mov	sp, r7
    e8e2:	bd80      	pop	{r7, pc}
    e8e4:	40011800 	.word	0x40011800

0000e8e8 <main>:
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx, &GPIO_InitStructure);
}
*/

int main()
    e8e8:	b580      	push	{r7, lr}
    e8ea:	b0a2      	sub	sp, #136
    e8ec:	af06      	add	r7, sp, #24
{
    #if defined(STM32F10X_MD) || defined(STM32F10X_CL)
        *NVIC_CCR = *NVIC_CCR | 0x200; // Set STKALIGN in NVIC
    e8ee:	4a84      	ldr	r2, [pc, #528]	(eb00 <main+0x218>)
    e8f0:	4b83      	ldr	r3, [pc, #524]	(eb00 <main+0x218>)
    e8f2:	681b      	ldr	r3, [r3, #0]
    e8f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e8f8:	6013      	str	r3, [r2, #0]
    #else
        SystemInit(); // Appelée implicitement ?
    #endif

    // On initialise les horloges
    Clk_Init();
    e8fa:	f7ff fb31 	bl	df60 <_Z8Clk_Initv>

    // Définit quelques horloges supplémentaires
    initAutresHorloges();
    e8fe:	f7ff fb13 	bl	df28 <_Z18initAutresHorlogesv>

    // Appel de la fonction qui permet d'initialiser tous les PINS
    initialisationDesPIN();
    e902:	f7ff fa6f 	bl	dde4 <_Z20initialisationDesPINv>
    //Debug::testBrasLateraux();
    //Debug::testADC_DMASampleF4();
    //Debug::testSharps();
#endif

    allumerLED();
    e906:	f7fd fe1d 	bl	c544 <_Z10allumerLEDv>
    eteindreLED();
    e90a:	f7fd fdbf 	bl	c48c <_Z11eteindreLEDv>
    allumerLED2();
    e90e:	f7fd fe11 	bl	c534 <_Z11allumerLED2v>
    eteindreLED2();
    e912:	f7fd fdb3 	bl	c47c <_Z12eteindreLED2v>
    allumerLED();
    e916:	f7fd fe15 	bl	c544 <_Z10allumerLEDv>

    Remote::log("Init");
    e91a:	4b7a      	ldr	r3, [pc, #488]	(eb04 <main+0x21c>)
    e91c:	4618      	mov	r0, r3
    e91e:	f7fe fbd7 	bl	d0d0 <_ZN6Remote3logEPc>


    ServosNumeriques::initClocksAndPortsGPIO();
    e922:	f7ff ff8b 	bl	e83c <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv>
    ServosNumeriques::initUART(19231);
    e926:	f644 301f 	movw	r0, #19231	; 0x4b1f
    e92a:	f7ff ff61 	bl	e7f0 <_ZN16ServosNumeriques8initUARTEi>
    ServosNumeriques::sendMode();
    e92e:	f7ff ff01 	bl	e734 <_ZN16ServosNumeriques8sendModeEv>
    #endif
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
        Tirette tirette(GPIOA, GPIO_Pin_10);
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        Tirette tirette(GPIOE, GPIO_Pin_5);
    e932:	f107 0344 	add.w	r3, r7, #68	; 0x44
    e936:	4618      	mov	r0, r3
    e938:	4973      	ldr	r1, [pc, #460]	(eb08 <main+0x220>)
    e93a:	f04f 0220 	mov.w	r2, #32	; 0x20
    e93e:	f7ff f83b 	bl	d9b8 <_ZN7TiretteC1EP12GPIO_TypeDeft>
    // Initialisation des actionneurs 1
    #if defined(STM32F40_41xxx) || defined(STM32F10X_MD) // H405
        //BrasLateraux::initBrasLateraux();
        //Container::getSingleton();
    #elif defined(STM32F10X_CL) // H107
        BrasLateraux::initBrasLateraux();
    e942:	f7f6 fca5 	bl	5290 <_ZN12BrasLateraux16initBrasLaterauxEv>

#ifdef ALLOW_DEBUG
    //Debug::testBrasLateraux();
#endif

    tirette.attendreRemise();
    e946:	f107 0344 	add.w	r3, r7, #68	; 0x44
    e94a:	4618      	mov	r0, r3
    e94c:	f7fe fff8 	bl	d940 <_ZNK7Tirette14attendreRemiseEv>
    tirette.attendreEnlevee();
    e950:	f107 0344 	add.w	r3, r7, #68	; 0x44
    e954:	4618      	mov	r0, r3
    e956:	f7ff f80f 	bl	d978 <_ZNK7Tirette15attendreEnleveeEv>

    #if defined(STM32F10X_CL)
        Remote::getSingleton();
    e95a:	f7fe fb95 	bl	d088 <_ZN6Remote12getSingletonEv>
    // Initialisation des actionneurs 2
    #if defined(STM32F40_41xxx) || defined(STM32F10X_MD) // H405

    #elif defined(STM32F10X_CL) // H107
//        Brak* bracquemart = Brak::getSingleton();
        Sensors* sensors = Sensors::getSingleton();
    e95e:	f7f8 f94f 	bl	6c00 <_ZN7Sensors12getSingletonEv>
    e962:	4603      	mov	r3, r0
    e964:	65bb      	str	r3, [r7, #88]
        ServosNumeriques::setLedState(1, 12);
    e966:	f04f 0001 	mov.w	r0, #1	; 0x1
    e96a:	f04f 010c 	mov.w	r1, #12	; 0xc
    e96e:	f7ff fd31 	bl	e3d4 <_ZN16ServosNumeriques11setLedStateEhh>
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
        QuadratureCoderHandler* rcd = new QuadratureCoderHandler(TIM4, GPIOB, GPIO_Pin_6, GPIOB, GPIO_Pin_7);
        QuadratureCoderHandler* rcg = new QuadratureCoderHandler(TIM1, GPIOA, GPIO_Pin_8, GPIOA, GPIO_Pin_9);
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        QuadratureCoderHandler* rcd = new QuadratureCoderHandler(TIM4, GPIOD, GPIO_Pin_12, GPIOD, GPIO_Pin_13);
    e972:	f04f 0004 	mov.w	r0, #4	; 0x4
    e976:	f000 f8d7 	bl	eb28 <_Znwj>
    e97a:	4603      	mov	r3, r0
    e97c:	607b      	str	r3, [r7, #4]
    e97e:	687b      	ldr	r3, [r7, #4]
    e980:	2b00      	cmp	r3, #0
    e982:	d017      	beq.n	e9b4 <main+0xcc>
    e984:	4b61      	ldr	r3, [pc, #388]	(eb0c <main+0x224>)
    e986:	9300      	str	r3, [sp, #0]
    e988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e98c:	9301      	str	r3, [sp, #4]
    e98e:	f04f 0300 	mov.w	r3, #0	; 0x0
    e992:	9302      	str	r3, [sp, #8]
    e994:	f04f 0300 	mov.w	r3, #0	; 0x0
    e998:	9303      	str	r3, [sp, #12]
    e99a:	f04f 0300 	mov.w	r3, #0	; 0x0
    e99e:	9304      	str	r3, [sp, #16]
    e9a0:	6878      	ldr	r0, [r7, #4]
    e9a2:	495b      	ldr	r1, [pc, #364]	(eb10 <main+0x228>)
    e9a4:	4a59      	ldr	r2, [pc, #356]	(eb0c <main+0x224>)
    e9a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    e9aa:	f7fe f97d 	bl	cca8 <_ZN22QuadratureCoderHandlerC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>
    e9ae:	687b      	ldr	r3, [r7, #4]
    e9b0:	60bb      	str	r3, [r7, #8]
    e9b2:	e001      	b.n	e9b8 <main+0xd0>
    e9b4:	687b      	ldr	r3, [r7, #4]
    e9b6:	60bb      	str	r3, [r7, #8]
    e9b8:	68bb      	ldr	r3, [r7, #8]
    e9ba:	65fb      	str	r3, [r7, #92]
        GPIO_PinRemapConfig(GPIO_Remap_TIM4, ENABLE);
    e9bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    e9c0:	f04f 0101 	mov.w	r1, #1	; 0x1
    e9c4:	f7f3 f864 	bl	1a90 <GPIO_PinRemapConfig>
        QuadratureCoderHandler* rcg = new QuadratureCoderHandler(TIM3, GPIOA, GPIO_Pin_6, GPIOA, GPIO_Pin_7);
    e9c8:	f04f 0004 	mov.w	r0, #4	; 0x4
    e9cc:	f000 f8ac 	bl	eb28 <_Znwj>
    e9d0:	4603      	mov	r3, r0
    e9d2:	60fb      	str	r3, [r7, #12]
    e9d4:	68fb      	ldr	r3, [r7, #12]
    e9d6:	2b00      	cmp	r3, #0
    e9d8:	d017      	beq.n	ea0a <main+0x122>
    e9da:	4b4e      	ldr	r3, [pc, #312]	(eb14 <main+0x22c>)
    e9dc:	9300      	str	r3, [sp, #0]
    e9de:	f04f 0380 	mov.w	r3, #128	; 0x80
    e9e2:	9301      	str	r3, [sp, #4]
    e9e4:	f04f 0300 	mov.w	r3, #0	; 0x0
    e9e8:	9302      	str	r3, [sp, #8]
    e9ea:	f04f 0300 	mov.w	r3, #0	; 0x0
    e9ee:	9303      	str	r3, [sp, #12]
    e9f0:	f04f 0300 	mov.w	r3, #0	; 0x0
    e9f4:	9304      	str	r3, [sp, #16]
    e9f6:	68f8      	ldr	r0, [r7, #12]
    e9f8:	4947      	ldr	r1, [pc, #284]	(eb18 <main+0x230>)
    e9fa:	4a46      	ldr	r2, [pc, #280]	(eb14 <main+0x22c>)
    e9fc:	f04f 0340 	mov.w	r3, #64	; 0x40
    ea00:	f7fe f952 	bl	cca8 <_ZN22QuadratureCoderHandlerC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>
    ea04:	68fb      	ldr	r3, [r7, #12]
    ea06:	613b      	str	r3, [r7, #16]
    ea08:	e001      	b.n	ea0e <main+0x126>
    ea0a:	68fb      	ldr	r3, [r7, #12]
    ea0c:	613b      	str	r3, [r7, #16]
    ea0e:	693b      	ldr	r3, [r7, #16]
    ea10:	663b      	str	r3, [r7, #96]


// Pour la v1 :
//    QuadratureCoderHandler* rcd = new QuadratureCoderHandler(TIM2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_1);
 //   QuadratureCoderHandler* rcg = new QuadratureCoderHandler(TIM3, GPIOA, GPIO_Pin_6, GPIOA, GPIO_Pin_7);
    Odometrie* odometrie = new Odometrie(rcg, rcd);
    ea12:	f04f 0078 	mov.w	r0, #120	; 0x78
    ea16:	f000 f887 	bl	eb28 <_Znwj>
    ea1a:	4603      	mov	r3, r0
    ea1c:	617b      	str	r3, [r7, #20]
    ea1e:	697b      	ldr	r3, [r7, #20]
    ea20:	2b00      	cmp	r3, #0
    ea22:	d007      	beq.n	ea34 <main+0x14c>
    ea24:	6978      	ldr	r0, [r7, #20]
    ea26:	6e39      	ldr	r1, [r7, #96]
    ea28:	6dfa      	ldr	r2, [r7, #92]
    ea2a:	f7fb fd39 	bl	a4a0 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_>
    ea2e:	697b      	ldr	r3, [r7, #20]
    ea30:	61bb      	str	r3, [r7, #24]
    ea32:	e001      	b.n	ea38 <main+0x150>
    ea34:	697b      	ldr	r3, [r7, #20]
    ea36:	61bb      	str	r3, [r7, #24]
    ea38:	69bb      	ldr	r3, [r7, #24]
    ea3a:	667b      	str	r3, [r7, #100]
    Position pos(250,1000, isBlue());//1500, isBlue());
    ea3c:	f7ff ff42 	bl	e8c4 <_Z6isBluev>
    ea40:	4603      	mov	r3, r0
    ea42:	469c      	mov	ip, r3
    ea44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    ea48:	4618      	mov	r0, r3
    ea4a:	4934      	ldr	r1, [pc, #208]	(eb1c <main+0x234>)
    ea4c:	4a34      	ldr	r2, [pc, #208]	(eb20 <main+0x238>)
    ea4e:	4663      	mov	r3, ip
    ea50:	f000 f9d0 	bl	edf4 <_ZN8PositionC1Effb>
    PositionPlusAngle posPlusAngle(pos,-M_PI/4);
    ea54:	f107 0330 	add.w	r3, r7, #48	; 0x30
    ea58:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    ea5c:	4618      	mov	r0, r3
    ea5e:	4611      	mov	r1, r2
    ea60:	4a30      	ldr	r2, [pc, #192]	(eb24 <main+0x23c>)
    ea62:	f000 fbbb 	bl	f1dc <_ZN17PositionPlusAngleC1ERK8Positionf>
    if (!isBlue())
    ea66:	f7ff ff2d 	bl	e8c4 <_Z6isBluev>
    ea6a:	4603      	mov	r3, r0
    ea6c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ea70:	b2db      	uxtb	r3, r3
    ea72:	2b00      	cmp	r3, #0
    ea74:	d010      	beq.n	ea98 <main+0x1b0>
        posPlusAngle = PositionPlusAngle(pos,-M_PI/4);
    ea76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    ea7a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    ea7e:	4618      	mov	r0, r3
    ea80:	4611      	mov	r1, r2
    ea82:	4a28      	ldr	r2, [pc, #160]	(eb24 <main+0x23c>)
    ea84:	f000 fbaa 	bl	f1dc <_ZN17PositionPlusAngleC1ERK8Positionf>
    ea88:	f107 0330 	add.w	r3, r7, #48	; 0x30
    ea8c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
    ea90:	4618      	mov	r0, r3
    ea92:	4611      	mov	r1, r2
    ea94:	f000 fc42 	bl	f31c <_ZN17PositionPlusAngleaSERKS_>
    odometrie->setPos(posPlusAngle);
    ea98:	f107 0330 	add.w	r3, r7, #48	; 0x30
    ea9c:	6e78      	ldr	r0, [r7, #100]
    ea9e:	4619      	mov	r1, r3
    eaa0:	f7fb f9be 	bl	9e20 <_ZN9Odometrie6setPosERK17PositionPlusAngle>

    StrategieV2* strat = new StrategieV2(isBlue());
    eaa4:	f7ff ff0e 	bl	e8c4 <_Z6isBluev>
    eaa8:	4603      	mov	r3, r0
    eaaa:	61fb      	str	r3, [r7, #28]
    eaac:	f04f 0004 	mov.w	r0, #4	; 0x4
    eab0:	f000 f83a 	bl	eb28 <_Znwj>
    eab4:	4603      	mov	r3, r0
    eab6:	623b      	str	r3, [r7, #32]
    eab8:	6a3b      	ldr	r3, [r7, #32]
    eaba:	2b00      	cmp	r3, #0
    eabc:	d006      	beq.n	eacc <main+0x1e4>
    eabe:	6a38      	ldr	r0, [r7, #32]
    eac0:	69f9      	ldr	r1, [r7, #28]
    eac2:	f009 fce9 	bl	18498 <_ZN11StrategieV2C1Eb>
    eac6:	6a3b      	ldr	r3, [r7, #32]
    eac8:	627b      	str	r3, [r7, #36]
    eaca:	e001      	b.n	ead0 <main+0x1e8>
    eacc:	6a3b      	ldr	r3, [r7, #32]
    eace:	627b      	str	r3, [r7, #36]
    ead0:	6a7b      	ldr	r3, [r7, #36]
    ead2:	66bb      	str	r3, [r7, #104]
    Asservissement* asserv = new Asservissement(odometrie);
    ead4:	f44f 7088 	mov.w	r0, #272	; 0x110
    ead8:	f000 f826 	bl	eb28 <_Znwj>
    eadc:	4603      	mov	r3, r0
    eade:	62bb      	str	r3, [r7, #40]
    eae0:	6abb      	ldr	r3, [r7, #40]
    eae2:	2b00      	cmp	r3, #0
    eae4:	d006      	beq.n	eaf4 <main+0x20c>
    eae6:	6ab8      	ldr	r0, [r7, #40]
    eae8:	6e79      	ldr	r1, [r7, #100]
    eaea:	f7f9 f911 	bl	7d10 <_ZN14AsservissementC1EP9Odometrie>
    eaee:	6abb      	ldr	r3, [r7, #40]
    eaf0:	62fb      	str	r3, [r7, #44]
    eaf2:	e001      	b.n	eaf8 <main+0x210>
    eaf4:	6abb      	ldr	r3, [r7, #40]
    eaf6:	62fb      	str	r3, [r7, #44]
    eaf8:	6afb      	ldr	r3, [r7, #44]
    eafa:	66fb      	str	r3, [r7, #108]
    eafc:	e7fe      	b.n	eafc <main+0x214>
    eafe:	46c0      	nop			(mov r8, r8)
    eb00:	e000ed14 	.word	0xe000ed14
    eb04:	000240d0 	.word	0x000240d0
    eb08:	40011800 	.word	0x40011800
    eb0c:	40011400 	.word	0x40011400
    eb10:	40000800 	.word	0x40000800
    eb14:	40010800 	.word	0x40010800
    eb18:	40000400 	.word	0x40000400
    eb1c:	437a0000 	.word	0x437a0000
    eb20:	447a0000 	.word	0x447a0000
    eb24:	bf490fdb 	.word	0xbf490fdb

0000eb28 <_Znwj>:
static Header* nextFreeMemory;
static Header* base = NULL;
static int nbPlace = 0;
static int sizeM = 0;

void * operator new(size_t size) throw()
    eb28:	b480      	push	{r7}
    eb2a:	b089      	sub	sp, #36
    eb2c:	af00      	add	r7, sp, #0
    eb2e:	6078      	str	r0, [r7, #4]
{
    nbPlace++;
    eb30:	4b44      	ldr	r3, [pc, #272]	(ec44 <_Znwj+0x11c>)
    eb32:	681b      	ldr	r3, [r3, #0]
    eb34:	f103 0201 	add.w	r2, r3, #1	; 0x1
    eb38:	4b42      	ldr	r3, [pc, #264]	(ec44 <_Znwj+0x11c>)
    eb3a:	601a      	str	r2, [r3, #0]
    if (base == NULL)
    eb3c:	4b42      	ldr	r3, [pc, #264]	(ec48 <_Znwj+0x120>)
    eb3e:	681b      	ldr	r3, [r3, #0]
    eb40:	2b00      	cmp	r3, #0
    eb42:	d111      	bne.n	eb68 <_Znwj+0x40>
    {
        base = memory_ptr;
    eb44:	4b41      	ldr	r3, [pc, #260]	(ec4c <_Znwj+0x124>)
    eb46:	681a      	ldr	r2, [r3, #0]
    eb48:	4b3f      	ldr	r3, [pc, #252]	(ec48 <_Znwj+0x120>)
    eb4a:	601a      	str	r2, [r3, #0]
        base->s.nextFree = memory_ptr;
    eb4c:	4b3e      	ldr	r3, [pc, #248]	(ec48 <_Znwj+0x120>)
    eb4e:	681a      	ldr	r2, [r3, #0]
    eb50:	4b3e      	ldr	r3, [pc, #248]	(ec4c <_Znwj+0x124>)
    eb52:	681b      	ldr	r3, [r3, #0]
    eb54:	6013      	str	r3, [r2, #0]
        #endif
        #ifdef STM32F10X_MD // stm h103
        base->s.size = 5000;   // Initialisation de la mémoire = Taille disponible dans la ram en unit de base de la mémoire (une unité = 4 octets). Ici 20kB -> 5000 unit
        #endif
        #ifdef STM32F10X_CL // stm h107
        base->s.size = 16000;   // Initialisation de la mémoire = Taille disponible dans la ram en unit de base de la mémoire (une unité = 4 octets). Ici 64kB -> 16000 unit
    eb56:	4b3c      	ldr	r3, [pc, #240]	(ec48 <_Znwj+0x120>)
    eb58:	681a      	ldr	r2, [r3, #0]
    eb5a:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
    eb5e:	6053      	str	r3, [r2, #4]
        #endif
        nextFreeMemory = memory_ptr;
    eb60:	4b3a      	ldr	r3, [pc, #232]	(ec4c <_Znwj+0x124>)
    eb62:	681a      	ldr	r2, [r3, #0]
    eb64:	4b3a      	ldr	r3, [pc, #232]	(ec50 <_Znwj+0x128>)
    eb66:	601a      	str	r2, [r3, #0]

    }
    unsigned nunit = (size + sizeof(Header)-1)/sizeof(Header)+1;
    eb68:	687b      	ldr	r3, [r7, #4]
    eb6a:	f103 0307 	add.w	r3, r3, #7	; 0x7
    eb6e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    eb72:	f103 0301 	add.w	r3, r3, #1	; 0x1
    eb76:	60fb      	str	r3, [r7, #12]
    sizeM += nunit;
    eb78:	4b36      	ldr	r3, [pc, #216]	(ec54 <_Znwj+0x12c>)
    eb7a:	681b      	ldr	r3, [r3, #0]
    eb7c:	461a      	mov	r2, r3
    eb7e:	68fb      	ldr	r3, [r7, #12]
    eb80:	4413      	add	r3, r2
    eb82:	461a      	mov	r2, r3
    eb84:	4b33      	ldr	r3, [pc, #204]	(ec54 <_Znwj+0x12c>)
    eb86:	601a      	str	r2, [r3, #0]
    Header *p = nextFreeMemory;
    eb88:	4b31      	ldr	r3, [pc, #196]	(ec50 <_Znwj+0x128>)
    eb8a:	681b      	ldr	r3, [r3, #0]
    eb8c:	613b      	str	r3, [r7, #16]
    Header  *oldP = p;
    eb8e:	693b      	ldr	r3, [r7, #16]
    eb90:	617b      	str	r3, [r7, #20]
    Header *ip;
    for (ip = nextFreeMemory; ; p = ip, ip = ip->s.nextFree)
    eb92:	4b2f      	ldr	r3, [pc, #188]	(ec50 <_Znwj+0x128>)
    eb94:	681b      	ldr	r3, [r3, #0]
    eb96:	61bb      	str	r3, [r7, #24]
    {
        if (nunit <= ip->s.size )
    eb98:	69bb      	ldr	r3, [r7, #24]
    eb9a:	685a      	ldr	r2, [r3, #4]
    eb9c:	68fb      	ldr	r3, [r7, #12]
    eb9e:	429a      	cmp	r2, r3
    eba0:	d33a      	bcc.n	ec18 <_Znwj+0xf0>
        {
            if (nunit == ip->s.size)
    eba2:	69bb      	ldr	r3, [r7, #24]
    eba4:	685a      	ldr	r2, [r3, #4]
    eba6:	68fb      	ldr	r3, [r7, #12]
    eba8:	429a      	cmp	r2, r3
    ebaa:	d10e      	bne.n	ebca <_Znwj+0xa2>
            {
                if (ip->s.nextFree != ip)
    ebac:	69bb      	ldr	r3, [r7, #24]
    ebae:	681a      	ldr	r2, [r3, #0]
    ebb0:	69bb      	ldr	r3, [r7, #24]
    ebb2:	429a      	cmp	r2, r3
    ebb4:	d004      	beq.n	ebc0 <_Znwj+0x98>
                {
                    nextFreeMemory = ip->s.nextFree;
    ebb6:	69bb      	ldr	r3, [r7, #24]
    ebb8:	681a      	ldr	r2, [r3, #0]
    ebba:	4b25      	ldr	r3, [pc, #148]	(ec50 <_Znwj+0x128>)
    ebbc:	601a      	str	r2, [r3, #0]
    ebbe:	e026      	b.n	ec0e <_Znwj+0xe6>
                }
                else
                {
                    nextFreeMemory = NULL;
    ebc0:	4a23      	ldr	r2, [pc, #140]	(ec50 <_Znwj+0x128>)
    ebc2:	f04f 0300 	mov.w	r3, #0	; 0x0
    ebc6:	6013      	str	r3, [r2, #0]
    ebc8:	e021      	b.n	ec0e <_Znwj+0xe6>
                }
            }
            else
            {
                unsigned oldFreeUnit = p->s.size;
    ebca:	693b      	ldr	r3, [r7, #16]
    ebcc:	685b      	ldr	r3, [r3, #4]
    ebce:	61fb      	str	r3, [r7, #28]
                p->s.size = nunit;
    ebd0:	693a      	ldr	r2, [r7, #16]
    ebd2:	68fb      	ldr	r3, [r7, #12]
    ebd4:	6053      	str	r3, [r2, #4]
                oldP = p;
    ebd6:	693b      	ldr	r3, [r7, #16]
    ebd8:	617b      	str	r3, [r7, #20]
                p += nunit;
    ebda:	68fb      	ldr	r3, [r7, #12]
    ebdc:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    ebe0:	693b      	ldr	r3, [r7, #16]
    ebe2:	4413      	add	r3, r2
    ebe4:	613b      	str	r3, [r7, #16]
                oldP->s.nextFree = p;
    ebe6:	697a      	ldr	r2, [r7, #20]
    ebe8:	693b      	ldr	r3, [r7, #16]
    ebea:	6013      	str	r3, [r2, #0]
                p->s.size = oldFreeUnit - nunit;
    ebec:	69fa      	ldr	r2, [r7, #28]
    ebee:	68fb      	ldr	r3, [r7, #12]
    ebf0:	ebc3 0202 	rsb	r2, r3, r2
    ebf4:	693b      	ldr	r3, [r7, #16]
    ebf6:	605a      	str	r2, [r3, #4]
                p->s.nextFree = p;
    ebf8:	693a      	ldr	r2, [r7, #16]
    ebfa:	693b      	ldr	r3, [r7, #16]
    ebfc:	6013      	str	r3, [r2, #0]
                if (ip == nextFreeMemory)
    ebfe:	4b14      	ldr	r3, [pc, #80]	(ec50 <_Znwj+0x128>)
    ec00:	681a      	ldr	r2, [r3, #0]
    ec02:	69bb      	ldr	r3, [r7, #24]
    ec04:	4293      	cmp	r3, r2
    ec06:	d102      	bne.n	ec0e <_Znwj+0xe6>
                {
                   nextFreeMemory = p;
    ec08:	4a11      	ldr	r2, [pc, #68]	(ec50 <_Znwj+0x128>)
    ec0a:	693b      	ldr	r3, [r7, #16]
    ec0c:	6013      	str	r3, [r2, #0]
                }
            }

            return ip+1;
    ec0e:	69bb      	ldr	r3, [r7, #24]
    ec10:	f103 0308 	add.w	r3, r3, #8	; 0x8
    ec14:	603b      	str	r3, [r7, #0]
    ec16:	e00d      	b.n	ec34 <_Znwj+0x10c>
        }
        if (ip==oldP)
    ec18:	69ba      	ldr	r2, [r7, #24]
    ec1a:	697b      	ldr	r3, [r7, #20]
    ec1c:	429a      	cmp	r2, r3
    ec1e:	d103      	bne.n	ec28 <_Znwj+0x100>
        {
            return NULL;
    ec20:	f04f 0300 	mov.w	r3, #0	; 0x0
    ec24:	603b      	str	r3, [r7, #0]
    ec26:	e005      	b.n	ec34 <_Znwj+0x10c>
    unsigned nunit = (size + sizeof(Header)-1)/sizeof(Header)+1;
    sizeM += nunit;
    Header *p = nextFreeMemory;
    Header  *oldP = p;
    Header *ip;
    for (ip = nextFreeMemory; ; p = ip, ip = ip->s.nextFree)
    ec28:	69bb      	ldr	r3, [r7, #24]
    ec2a:	613b      	str	r3, [r7, #16]
    ec2c:	69bb      	ldr	r3, [r7, #24]
    ec2e:	681b      	ldr	r3, [r3, #0]
    ec30:	61bb      	str	r3, [r7, #24]
    ec32:	e7b1      	b.n	eb98 <_Znwj+0x70>
    ec34:	683b      	ldr	r3, [r7, #0]
        if (ip==oldP)
        {
            return NULL;
        }
    }
}
    ec36:	4618      	mov	r0, r3
    ec38:	f107 0724 	add.w	r7, r7, #36	; 0x24
    ec3c:	46bd      	mov	sp, r7
    ec3e:	bc80      	pop	{r7}
    ec40:	4770      	bx	lr
    ec42:	46c0      	nop			(mov r8, r8)
    ec44:	2000058c 	.word	0x2000058c
    ec48:	20000598 	.word	0x20000598
    ec4c:	2000002c 	.word	0x2000002c
    ec50:	20000594 	.word	0x20000594
    ec54:	20000590 	.word	0x20000590

0000ec58 <_Znaj>:

void * operator new[](size_t size) throw()
    ec58:	b580      	push	{r7, lr}
    ec5a:	b082      	sub	sp, #8
    ec5c:	af00      	add	r7, sp, #0
    ec5e:	6078      	str	r0, [r7, #4]
{
  return operator new(size);
    ec60:	6878      	ldr	r0, [r7, #4]
    ec62:	f7ff ff61 	bl	eb28 <_Znwj>
    ec66:	4603      	mov	r3, r0
}
    ec68:	4618      	mov	r0, r3
    ec6a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ec6e:	46bd      	mov	sp, r7
    ec70:	bd80      	pop	{r7, pc}
    ec72:	46c0      	nop			(mov r8, r8)

0000ec74 <_ZdlPv>:

void operator delete(void * p)    throw()
    ec74:	b480      	push	{r7}
    ec76:	b085      	sub	sp, #20
    ec78:	af00      	add	r7, sp, #0
    ec7a:	6078      	str	r0, [r7, #4]
{
    nbPlace--;
    ec7c:	4b36      	ldr	r3, [pc, #216]	(ed58 <_ZdlPv+0xe4>)
    ec7e:	681b      	ldr	r3, [r3, #0]
    ec80:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    ec84:	4b34      	ldr	r3, [pc, #208]	(ed58 <_ZdlPv+0xe4>)
    ec86:	601a      	str	r2, [r3, #0]
    Header* d = (Header*)p -1;
    ec88:	687b      	ldr	r3, [r7, #4]
    ec8a:	f1a3 0308 	sub.w	r3, r3, #8	; 0x8
    ec8e:	60bb      	str	r3, [r7, #8]
    sizeM -= d->s.size;
    ec90:	4b32      	ldr	r3, [pc, #200]	(ed5c <_ZdlPv+0xe8>)
    ec92:	681b      	ldr	r3, [r3, #0]
    ec94:	461a      	mov	r2, r3
    ec96:	68bb      	ldr	r3, [r7, #8]
    ec98:	685b      	ldr	r3, [r3, #4]
    ec9a:	ebc3 0302 	rsb	r3, r3, r2
    ec9e:	461a      	mov	r2, r3
    eca0:	4b2e      	ldr	r3, [pc, #184]	(ed5c <_ZdlPv+0xe8>)
    eca2:	601a      	str	r2, [r3, #0]
    Header* predFree;
    for(predFree = nextFreeMemory;  !((d > predFree)&&(d<predFree->s.nextFree)); predFree = predFree->s.nextFree )
    eca4:	4b2e      	ldr	r3, [pc, #184]	(ed60 <_ZdlPv+0xec>)
    eca6:	681b      	ldr	r3, [r3, #0]
    eca8:	60fb      	str	r3, [r7, #12]
    ecaa:	e010      	b.n	ecce <_ZdlPv+0x5a>
    {
        if(predFree>=predFree->s.nextFree && (d > predFree || d<predFree->s.nextFree))
    ecac:	68fb      	ldr	r3, [r7, #12]
    ecae:	681a      	ldr	r2, [r3, #0]
    ecb0:	68fb      	ldr	r3, [r7, #12]
    ecb2:	429a      	cmp	r2, r3
    ecb4:	d808      	bhi.n	ecc8 <_ZdlPv+0x54>
    ecb6:	68ba      	ldr	r2, [r7, #8]
    ecb8:	68fb      	ldr	r3, [r7, #12]
    ecba:	429a      	cmp	r2, r3
    ecbc:	d810      	bhi.n	ece0 <_ZdlPv+0x6c>
    ecbe:	68fb      	ldr	r3, [r7, #12]
    ecc0:	681a      	ldr	r2, [r3, #0]
    ecc2:	68bb      	ldr	r3, [r7, #8]
    ecc4:	429a      	cmp	r2, r3
    ecc6:	d80b      	bhi.n	ece0 <_ZdlPv+0x6c>
{
    nbPlace--;
    Header* d = (Header*)p -1;
    sizeM -= d->s.size;
    Header* predFree;
    for(predFree = nextFreeMemory;  !((d > predFree)&&(d<predFree->s.nextFree)); predFree = predFree->s.nextFree )
    ecc8:	68fb      	ldr	r3, [r7, #12]
    ecca:	681b      	ldr	r3, [r3, #0]
    eccc:	60fb      	str	r3, [r7, #12]
    ecce:	68ba      	ldr	r2, [r7, #8]
    ecd0:	68fb      	ldr	r3, [r7, #12]
    ecd2:	429a      	cmp	r2, r3
    ecd4:	d9ea      	bls.n	ecac <_ZdlPv+0x38>
    ecd6:	68fb      	ldr	r3, [r7, #12]
    ecd8:	681a      	ldr	r2, [r3, #0]
    ecda:	68bb      	ldr	r3, [r7, #8]
    ecdc:	429a      	cmp	r2, r3
    ecde:	d9e5      	bls.n	ecac <_ZdlPv+0x38>
    {
        if(predFree>=predFree->s.nextFree && (d > predFree || d<predFree->s.nextFree))
        break;
    }

    if ( d + d->s.size == predFree->s.nextFree ) // si le prochain vide est collé au block libéré
    ece0:	68bb      	ldr	r3, [r7, #8]
    ece2:	685b      	ldr	r3, [r3, #4]
    ece4:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    ece8:	68bb      	ldr	r3, [r7, #8]
    ecea:	441a      	add	r2, r3
    ecec:	68fb      	ldr	r3, [r7, #12]
    ecee:	681b      	ldr	r3, [r3, #0]
    ecf0:	429a      	cmp	r2, r3
    ecf2:	d10d      	bne.n	ed10 <_ZdlPv+0x9c>
    {
        d->s.size += predFree->s.nextFree->s.size;
    ecf4:	68bb      	ldr	r3, [r7, #8]
    ecf6:	685a      	ldr	r2, [r3, #4]
    ecf8:	68fb      	ldr	r3, [r7, #12]
    ecfa:	681b      	ldr	r3, [r3, #0]
    ecfc:	685b      	ldr	r3, [r3, #4]
    ecfe:	441a      	add	r2, r3
    ed00:	68bb      	ldr	r3, [r7, #8]
    ed02:	605a      	str	r2, [r3, #4]
        d->s.nextFree = predFree->s.nextFree->s.nextFree;
    ed04:	68fb      	ldr	r3, [r7, #12]
    ed06:	681b      	ldr	r3, [r3, #0]
    ed08:	681a      	ldr	r2, [r3, #0]
    ed0a:	68bb      	ldr	r3, [r7, #8]
    ed0c:	601a      	str	r2, [r3, #0]
    ed0e:	e003      	b.n	ed18 <_ZdlPv+0xa4>
    }
    else
    {
        d->s.nextFree = predFree->s.nextFree;
    ed10:	68fb      	ldr	r3, [r7, #12]
    ed12:	681a      	ldr	r2, [r3, #0]
    ed14:	68bb      	ldr	r3, [r7, #8]
    ed16:	601a      	str	r2, [r3, #0]
    }
    if (predFree+predFree->s.size == d)
    ed18:	68fb      	ldr	r3, [r7, #12]
    ed1a:	685b      	ldr	r3, [r3, #4]
    ed1c:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    ed20:	68fb      	ldr	r3, [r7, #12]
    ed22:	441a      	add	r2, r3
    ed24:	68bb      	ldr	r3, [r7, #8]
    ed26:	429a      	cmp	r2, r3
    ed28:	d10b      	bne.n	ed42 <_ZdlPv+0xce>
    {
        predFree->s.nextFree = d->s.nextFree;
    ed2a:	68bb      	ldr	r3, [r7, #8]
    ed2c:	681a      	ldr	r2, [r3, #0]
    ed2e:	68fb      	ldr	r3, [r7, #12]
    ed30:	601a      	str	r2, [r3, #0]
        predFree->s.size += d->s.size;
    ed32:	68fb      	ldr	r3, [r7, #12]
    ed34:	685a      	ldr	r2, [r3, #4]
    ed36:	68bb      	ldr	r3, [r7, #8]
    ed38:	685b      	ldr	r3, [r3, #4]
    ed3a:	441a      	add	r2, r3
    ed3c:	68fb      	ldr	r3, [r7, #12]
    ed3e:	605a      	str	r2, [r3, #4]
    ed40:	e002      	b.n	ed48 <_ZdlPv+0xd4>
    }
    else
    {
        predFree->s.nextFree = d;
    ed42:	68fa      	ldr	r2, [r7, #12]
    ed44:	68bb      	ldr	r3, [r7, #8]
    ed46:	6013      	str	r3, [r2, #0]
    }
    nextFreeMemory = predFree;
    ed48:	4a05      	ldr	r2, [pc, #20]	(ed60 <_ZdlPv+0xec>)
    ed4a:	68fb      	ldr	r3, [r7, #12]
    ed4c:	6013      	str	r3, [r2, #0]

  /*  d--; // d est maintenant le Header de la zone mémoire contenant l'objet que l'on delete
    d->s.nextFree = nextFreeMemory; // On indique que la prochaîne mémoire vide sera la première mémoire vide au moment où on a lancé le delete
    nextFreeMemory = d;
    */
}
    ed4e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ed52:	46bd      	mov	sp, r7
    ed54:	bc80      	pop	{r7}
    ed56:	4770      	bx	lr
    ed58:	2000058c 	.word	0x2000058c
    ed5c:	20000590 	.word	0x20000590
    ed60:	20000594 	.word	0x20000594

0000ed64 <_ZdaPv>:

void operator delete[](void * p)    throw()
    ed64:	b580      	push	{r7, lr}
    ed66:	b082      	sub	sp, #8
    ed68:	af00      	add	r7, sp, #0
    ed6a:	6078      	str	r0, [r7, #4]
{
    return operator delete(p);
    ed6c:	6878      	ldr	r0, [r7, #4]
    ed6e:	f7ff ff81 	bl	ec74 <_ZdlPv>
}
    ed72:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ed76:	46bd      	mov	sp, r7
    ed78:	bd80      	pop	{r7, pc}
    ed7a:	46c0      	nop			(mov r8, r8)

0000ed7c <_ZN8PositionC2Ev>:

#include "position.h"


// Constructeur par défaut avec des coordonnées nulles.
Position::Position()
    ed7c:	b480      	push	{r7}
    ed7e:	b083      	sub	sp, #12
    ed80:	af00      	add	r7, sp, #0
    ed82:	6078      	str	r0, [r7, #4]
    : x(0), y(0)
    ed84:	687a      	ldr	r2, [r7, #4]
    ed86:	4b06      	ldr	r3, [pc, #24]	(eda0 <_ZN8PositionC2Ev+0x24>)
    ed88:	6013      	str	r3, [r2, #0]
    ed8a:	687a      	ldr	r2, [r7, #4]
    ed8c:	4b04      	ldr	r3, [pc, #16]	(eda0 <_ZN8PositionC2Ev+0x24>)
    ed8e:	6053      	str	r3, [r2, #4]
{
}
    ed90:	687b      	ldr	r3, [r7, #4]
    ed92:	4618      	mov	r0, r3
    ed94:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ed98:	46bd      	mov	sp, r7
    ed9a:	bc80      	pop	{r7}
    ed9c:	4770      	bx	lr
    ed9e:	46c0      	nop			(mov r8, r8)
    eda0:	00000000 	.word	0x00000000

0000eda4 <_ZN8PositionC1Ev>:

#include "position.h"


// Constructeur par défaut avec des coordonnées nulles.
Position::Position()
    eda4:	b480      	push	{r7}
    eda6:	b083      	sub	sp, #12
    eda8:	af00      	add	r7, sp, #0
    edaa:	6078      	str	r0, [r7, #4]
    : x(0), y(0)
    edac:	687a      	ldr	r2, [r7, #4]
    edae:	4b06      	ldr	r3, [pc, #24]	(edc8 <_ZN8PositionC1Ev+0x24>)
    edb0:	6013      	str	r3, [r2, #0]
    edb2:	687a      	ldr	r2, [r7, #4]
    edb4:	4b04      	ldr	r3, [pc, #16]	(edc8 <_ZN8PositionC1Ev+0x24>)
    edb6:	6053      	str	r3, [r2, #4]
{
}
    edb8:	687b      	ldr	r3, [r7, #4]
    edba:	4618      	mov	r0, r3
    edbc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    edc0:	46bd      	mov	sp, r7
    edc2:	bc80      	pop	{r7}
    edc4:	4770      	bx	lr
    edc6:	46c0      	nop			(mov r8, r8)
    edc8:	00000000 	.word	0x00000000

0000edcc <_ZN8PositionC2Effb>:

Position::Position(Distance X, Distance Y, bool isBlue)
    edcc:	b480      	push	{r7}
    edce:	b085      	sub	sp, #20
    edd0:	af00      	add	r7, sp, #0
    edd2:	60f8      	str	r0, [r7, #12]
    edd4:	60b9      	str	r1, [r7, #8]
    edd6:	607a      	str	r2, [r7, #4]
    edd8:	70fb      	strb	r3, [r7, #3]
    : x(X), y(Y)
    edda:	68fa      	ldr	r2, [r7, #12]
    eddc:	68bb      	ldr	r3, [r7, #8]
    edde:	6013      	str	r3, [r2, #0]
    ede0:	68fa      	ldr	r2, [r7, #12]
    ede2:	687b      	ldr	r3, [r7, #4]
    ede4:	6053      	str	r3, [r2, #4]
{
    /*if (!isBlue)
    {
        x = 3000-x;
    }*/
}
    ede6:	68fb      	ldr	r3, [r7, #12]
    ede8:	4618      	mov	r0, r3
    edea:	f107 0714 	add.w	r7, r7, #20	; 0x14
    edee:	46bd      	mov	sp, r7
    edf0:	bc80      	pop	{r7}
    edf2:	4770      	bx	lr

0000edf4 <_ZN8PositionC1Effb>:
Position::Position()
    : x(0), y(0)
{
}

Position::Position(Distance X, Distance Y, bool isBlue)
    edf4:	b480      	push	{r7}
    edf6:	b085      	sub	sp, #20
    edf8:	af00      	add	r7, sp, #0
    edfa:	60f8      	str	r0, [r7, #12]
    edfc:	60b9      	str	r1, [r7, #8]
    edfe:	607a      	str	r2, [r7, #4]
    ee00:	70fb      	strb	r3, [r7, #3]
    : x(X), y(Y)
    ee02:	68fa      	ldr	r2, [r7, #12]
    ee04:	68bb      	ldr	r3, [r7, #8]
    ee06:	6013      	str	r3, [r2, #0]
    ee08:	68fa      	ldr	r2, [r7, #12]
    ee0a:	687b      	ldr	r3, [r7, #4]
    ee0c:	6053      	str	r3, [r2, #4]
{
    /*if (!isBlue)
    {
        x = 3000-x;
    }*/
}
    ee0e:	68fb      	ldr	r3, [r7, #12]
    ee10:	4618      	mov	r0, r3
    ee12:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ee16:	46bd      	mov	sp, r7
    ee18:	bc80      	pop	{r7}
    ee1a:	4770      	bx	lr

0000ee1c <_ZNK8Position4getXEv>:

Distance Position::getX() const
    ee1c:	b480      	push	{r7}
    ee1e:	b083      	sub	sp, #12
    ee20:	af00      	add	r7, sp, #0
    ee22:	6078      	str	r0, [r7, #4]
{
    return x;
    ee24:	687b      	ldr	r3, [r7, #4]
    ee26:	681b      	ldr	r3, [r3, #0]
}
    ee28:	4618      	mov	r0, r3
    ee2a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ee2e:	46bd      	mov	sp, r7
    ee30:	bc80      	pop	{r7}
    ee32:	4770      	bx	lr

0000ee34 <_ZNK8Position4getYEv>:

Distance Position::getY() const
    ee34:	b480      	push	{r7}
    ee36:	b083      	sub	sp, #12
    ee38:	af00      	add	r7, sp, #0
    ee3a:	6078      	str	r0, [r7, #4]
{
    return y;
    ee3c:	687b      	ldr	r3, [r7, #4]
    ee3e:	685b      	ldr	r3, [r3, #4]
}
    ee40:	4618      	mov	r0, r3
    ee42:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ee46:	46bd      	mov	sp, r7
    ee48:	bc80      	pop	{r7}
    ee4a:	4770      	bx	lr

0000ee4c <_ZN8Position4setXEf>:

void Position::setX(Distance X)
    ee4c:	b480      	push	{r7}
    ee4e:	b083      	sub	sp, #12
    ee50:	af00      	add	r7, sp, #0
    ee52:	6078      	str	r0, [r7, #4]
    ee54:	6039      	str	r1, [r7, #0]
{
    x = X;
    ee56:	687a      	ldr	r2, [r7, #4]
    ee58:	683b      	ldr	r3, [r7, #0]
    ee5a:	6013      	str	r3, [r2, #0]
}
    ee5c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ee60:	46bd      	mov	sp, r7
    ee62:	bc80      	pop	{r7}
    ee64:	4770      	bx	lr
    ee66:	46c0      	nop			(mov r8, r8)

0000ee68 <_ZN8Position4setYEf>:

void Position::setY(Distance Y)
    ee68:	b480      	push	{r7}
    ee6a:	b083      	sub	sp, #12
    ee6c:	af00      	add	r7, sp, #0
    ee6e:	6078      	str	r0, [r7, #4]
    ee70:	6039      	str	r1, [r7, #0]
{
    y = Y;
    ee72:	687a      	ldr	r2, [r7, #4]
    ee74:	683b      	ldr	r3, [r7, #0]
    ee76:	6053      	str	r3, [r2, #4]
}
    ee78:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ee7c:	46bd      	mov	sp, r7
    ee7e:	bc80      	pop	{r7}
    ee80:	4770      	bx	lr
    ee82:	46c0      	nop			(mov r8, r8)

0000ee84 <_ZNK8PositionplERKS_>:

Position Position::operator+(const Position &position) const
    ee84:	b5b0      	push	{r4, r5, r7, lr}
    ee86:	b084      	sub	sp, #16
    ee88:	af00      	add	r7, sp, #0
    ee8a:	4604      	mov	r4, r0
    ee8c:	6079      	str	r1, [r7, #4]
    ee8e:	603a      	str	r2, [r7, #0]
{
    Position resultat(x+position.x,y+position.y);
    ee90:	687b      	ldr	r3, [r7, #4]
    ee92:	681a      	ldr	r2, [r3, #0]
    ee94:	683b      	ldr	r3, [r7, #0]
    ee96:	681b      	ldr	r3, [r3, #0]
    ee98:	4610      	mov	r0, r2
    ee9a:	4619      	mov	r1, r3
    ee9c:	f00d ff18 	bl	1ccd0 <__addsf3>
    eea0:	4603      	mov	r3, r0
    eea2:	461d      	mov	r5, r3
    eea4:	687b      	ldr	r3, [r7, #4]
    eea6:	685a      	ldr	r2, [r3, #4]
    eea8:	683b      	ldr	r3, [r7, #0]
    eeaa:	685b      	ldr	r3, [r3, #4]
    eeac:	4610      	mov	r0, r2
    eeae:	4619      	mov	r1, r3
    eeb0:	f00d ff0e 	bl	1ccd0 <__addsf3>
    eeb4:	4603      	mov	r3, r0
    eeb6:	4620      	mov	r0, r4
    eeb8:	4629      	mov	r1, r5
    eeba:	461a      	mov	r2, r3
    eebc:	f04f 0301 	mov.w	r3, #1	; 0x1
    eec0:	f7ff ff98 	bl	edf4 <_ZN8PositionC1Effb>
    return resultat;
}
    eec4:	4620      	mov	r0, r4
    eec6:	f107 0710 	add.w	r7, r7, #16	; 0x10
    eeca:	46bd      	mov	sp, r7
    eecc:	bdb0      	pop	{r4, r5, r7, pc}
    eece:	46c0      	nop			(mov r8, r8)

0000eed0 <_ZNK8PositionmiERKS_>:

Position Position::operator-(const Position &position) const
    eed0:	b5b0      	push	{r4, r5, r7, lr}
    eed2:	b084      	sub	sp, #16
    eed4:	af00      	add	r7, sp, #0
    eed6:	4604      	mov	r4, r0
    eed8:	6079      	str	r1, [r7, #4]
    eeda:	603a      	str	r2, [r7, #0]
{
    Position resultat(x-position.x,y-position.y);
    eedc:	687b      	ldr	r3, [r7, #4]
    eede:	681a      	ldr	r2, [r3, #0]
    eee0:	683b      	ldr	r3, [r7, #0]
    eee2:	681b      	ldr	r3, [r3, #0]
    eee4:	4610      	mov	r0, r2
    eee6:	4619      	mov	r1, r3
    eee8:	f00d fef0 	bl	1cccc <__aeabi_fsub>
    eeec:	4603      	mov	r3, r0
    eeee:	461d      	mov	r5, r3
    eef0:	687b      	ldr	r3, [r7, #4]
    eef2:	685a      	ldr	r2, [r3, #4]
    eef4:	683b      	ldr	r3, [r7, #0]
    eef6:	685b      	ldr	r3, [r3, #4]
    eef8:	4610      	mov	r0, r2
    eefa:	4619      	mov	r1, r3
    eefc:	f00d fee6 	bl	1cccc <__aeabi_fsub>
    ef00:	4603      	mov	r3, r0
    ef02:	4620      	mov	r0, r4
    ef04:	4629      	mov	r1, r5
    ef06:	461a      	mov	r2, r3
    ef08:	f04f 0301 	mov.w	r3, #1	; 0x1
    ef0c:	f7ff ff72 	bl	edf4 <_ZN8PositionC1Effb>
    return resultat;
}
    ef10:	4620      	mov	r0, r4
    ef12:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ef16:	46bd      	mov	sp, r7
    ef18:	bdb0      	pop	{r4, r5, r7, pc}
    ef1a:	46c0      	nop			(mov r8, r8)

0000ef1c <_ZN8PositionaSES_>:

void Position::operator=(Position position)
    ef1c:	b480      	push	{r7}
    ef1e:	b085      	sub	sp, #20
    ef20:	af00      	add	r7, sp, #0
    ef22:	60f8      	str	r0, [r7, #12]
    ef24:	f107 0304 	add.w	r3, r7, #4	; 0x4
    ef28:	e883 0006 	stmia.w	r3, {r1, r2}
{

    x = position.x;
    ef2c:	687a      	ldr	r2, [r7, #4]
    ef2e:	68fb      	ldr	r3, [r7, #12]
    ef30:	601a      	str	r2, [r3, #0]
    y = position.y;
    ef32:	68ba      	ldr	r2, [r7, #8]
    ef34:	68fb      	ldr	r3, [r7, #12]
    ef36:	605a      	str	r2, [r3, #4]

}
    ef38:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ef3c:	46bd      	mov	sp, r7
    ef3e:	bc80      	pop	{r7}
    ef40:	4770      	bx	lr
    ef42:	46c0      	nop			(mov r8, r8)

0000ef44 <_ZN8PositionpLERKS_>:

Position Position::operator+=(const Position &position)
    ef44:	b590      	push	{r4, r7, lr}
    ef46:	b083      	sub	sp, #12
    ef48:	af00      	add	r7, sp, #0
    ef4a:	4604      	mov	r4, r0
    ef4c:	6079      	str	r1, [r7, #4]
    ef4e:	603a      	str	r2, [r7, #0]
{
    this->x+=position.x;
    ef50:	687b      	ldr	r3, [r7, #4]
    ef52:	681a      	ldr	r2, [r3, #0]
    ef54:	683b      	ldr	r3, [r7, #0]
    ef56:	681b      	ldr	r3, [r3, #0]
    ef58:	4610      	mov	r0, r2
    ef5a:	4619      	mov	r1, r3
    ef5c:	f00d feb8 	bl	1ccd0 <__addsf3>
    ef60:	4603      	mov	r3, r0
    ef62:	461a      	mov	r2, r3
    ef64:	687b      	ldr	r3, [r7, #4]
    ef66:	601a      	str	r2, [r3, #0]
    this->y+=position.y;
    ef68:	687b      	ldr	r3, [r7, #4]
    ef6a:	685a      	ldr	r2, [r3, #4]
    ef6c:	683b      	ldr	r3, [r7, #0]
    ef6e:	685b      	ldr	r3, [r3, #4]
    ef70:	4610      	mov	r0, r2
    ef72:	4619      	mov	r1, r3
    ef74:	f00d feac 	bl	1ccd0 <__addsf3>
    ef78:	4603      	mov	r3, r0
    ef7a:	461a      	mov	r2, r3
    ef7c:	687b      	ldr	r3, [r7, #4]
    ef7e:	605a      	str	r2, [r3, #4]

    return *this;
    ef80:	687b      	ldr	r3, [r7, #4]
    ef82:	4620      	mov	r0, r4
    ef84:	4619      	mov	r1, r3
    ef86:	f04f 0208 	mov.w	r2, #8	; 0x8
    ef8a:	f013 fde5 	bl	22b58 <memmove>
}
    ef8e:	4620      	mov	r0, r4
    ef90:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ef94:	46bd      	mov	sp, r7
    ef96:	bd90      	pop	{r4, r7, pc}

0000ef98 <_ZN8PositionmIERKS_>:

Position Position::operator-=(const Position &position)
    ef98:	b590      	push	{r4, r7, lr}
    ef9a:	b083      	sub	sp, #12
    ef9c:	af00      	add	r7, sp, #0
    ef9e:	4604      	mov	r4, r0
    efa0:	6079      	str	r1, [r7, #4]
    efa2:	603a      	str	r2, [r7, #0]
{
    this->x-=position.x;
    efa4:	687b      	ldr	r3, [r7, #4]
    efa6:	681a      	ldr	r2, [r3, #0]
    efa8:	683b      	ldr	r3, [r7, #0]
    efaa:	681b      	ldr	r3, [r3, #0]
    efac:	4610      	mov	r0, r2
    efae:	4619      	mov	r1, r3
    efb0:	f00d fe8c 	bl	1cccc <__aeabi_fsub>
    efb4:	4603      	mov	r3, r0
    efb6:	461a      	mov	r2, r3
    efb8:	687b      	ldr	r3, [r7, #4]
    efba:	601a      	str	r2, [r3, #0]
    this->y-=position.y;
    efbc:	687b      	ldr	r3, [r7, #4]
    efbe:	685a      	ldr	r2, [r3, #4]
    efc0:	683b      	ldr	r3, [r7, #0]
    efc2:	685b      	ldr	r3, [r3, #4]
    efc4:	4610      	mov	r0, r2
    efc6:	4619      	mov	r1, r3
    efc8:	f00d fe80 	bl	1cccc <__aeabi_fsub>
    efcc:	4603      	mov	r3, r0
    efce:	461a      	mov	r2, r3
    efd0:	687b      	ldr	r3, [r7, #4]
    efd2:	605a      	str	r2, [r3, #4]

    return *this;
    efd4:	687b      	ldr	r3, [r7, #4]
    efd6:	4620      	mov	r0, r4
    efd8:	4619      	mov	r1, r3
    efda:	f04f 0208 	mov.w	r2, #8	; 0x8
    efde:	f013 fdbb 	bl	22b58 <memmove>
}
    efe2:	4620      	mov	r0, r4
    efe4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    efe8:	46bd      	mov	sp, r7
    efea:	bd90      	pop	{r4, r7, pc}

0000efec <_ZNK8PositioneqERKS_>:
bool Position::presqueEgales(const Position &p) const
{
	return (distancePresqueEgales(x, p.x) && distancePresqueEgales(y,p.y));
}

bool Position::operator==(const Position &p) const
    efec:	b580      	push	{r7, lr}
    efee:	b084      	sub	sp, #16
    eff0:	af00      	add	r7, sp, #0
    eff2:	60f8      	str	r0, [r7, #12]
    eff4:	60b9      	str	r1, [r7, #8]
{
    return (x == p.x && y == p.y);
    eff6:	68fb      	ldr	r3, [r7, #12]
    eff8:	681a      	ldr	r2, [r3, #0]
    effa:	68bb      	ldr	r3, [r7, #8]
    effc:	6819      	ldr	r1, [r3, #0]
    effe:	f04f 0300 	mov.w	r3, #0	; 0x0
    f002:	70fb      	strb	r3, [r7, #3]
    f004:	4610      	mov	r0, r2
    f006:	f00e f8fd 	bl	1d204 <__aeabi_fcmpeq>
    f00a:	4603      	mov	r3, r0
    f00c:	2b00      	cmp	r3, #0
    f00e:	d002      	beq.n	f016 <_ZNK8PositioneqERKS_+0x2a>
    f010:	f04f 0301 	mov.w	r3, #1	; 0x1
    f014:	70fb      	strb	r3, [r7, #3]
    f016:	78fb      	ldrb	r3, [r7, #3]
    f018:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f01c:	b2db      	uxtb	r3, r3
    f01e:	2b00      	cmp	r3, #0
    f020:	d119      	bne.n	f056 <_ZNK8PositioneqERKS_+0x6a>
    f022:	68fb      	ldr	r3, [r7, #12]
    f024:	685a      	ldr	r2, [r3, #4]
    f026:	68bb      	ldr	r3, [r7, #8]
    f028:	6859      	ldr	r1, [r3, #4]
    f02a:	f04f 0300 	mov.w	r3, #0	; 0x0
    f02e:	70bb      	strb	r3, [r7, #2]
    f030:	4610      	mov	r0, r2
    f032:	f00e f8e7 	bl	1d204 <__aeabi_fcmpeq>
    f036:	4603      	mov	r3, r0
    f038:	2b00      	cmp	r3, #0
    f03a:	d002      	beq.n	f042 <_ZNK8PositioneqERKS_+0x56>
    f03c:	f04f 0301 	mov.w	r3, #1	; 0x1
    f040:	70bb      	strb	r3, [r7, #2]
    f042:	78bb      	ldrb	r3, [r7, #2]
    f044:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f048:	b2db      	uxtb	r3, r3
    f04a:	2b00      	cmp	r3, #0
    f04c:	d103      	bne.n	f056 <_ZNK8PositioneqERKS_+0x6a>
    f04e:	f04f 0301 	mov.w	r3, #1	; 0x1
    f052:	607b      	str	r3, [r7, #4]
    f054:	e002      	b.n	f05c <_ZNK8PositioneqERKS_+0x70>
    f056:	f04f 0300 	mov.w	r3, #0	; 0x0
    f05a:	607b      	str	r3, [r7, #4]
    f05c:	687b      	ldr	r3, [r7, #4]
}
    f05e:	4618      	mov	r0, r3
    f060:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f064:	46bd      	mov	sp, r7
    f066:	bd80      	pop	{r7, pc}

0000f068 <_ZN8PositionmLEf>:

bool Position::operator*=(float val)
    f068:	b580      	push	{r7, lr}
    f06a:	b082      	sub	sp, #8
    f06c:	af00      	add	r7, sp, #0
    f06e:	6078      	str	r0, [r7, #4]
    f070:	6039      	str	r1, [r7, #0]
{
    this->x = this->x*val;
    f072:	687b      	ldr	r3, [r7, #4]
    f074:	681b      	ldr	r3, [r3, #0]
    f076:	4618      	mov	r0, r3
    f078:	6839      	ldr	r1, [r7, #0]
    f07a:	f00d ff31 	bl	1cee0 <__aeabi_fmul>
    f07e:	4603      	mov	r3, r0
    f080:	461a      	mov	r2, r3
    f082:	687b      	ldr	r3, [r7, #4]
    f084:	601a      	str	r2, [r3, #0]
    this->y = this->y*val;
    f086:	687b      	ldr	r3, [r7, #4]
    f088:	685b      	ldr	r3, [r3, #4]
    f08a:	4618      	mov	r0, r3
    f08c:	6839      	ldr	r1, [r7, #0]
    f08e:	f00d ff27 	bl	1cee0 <__aeabi_fmul>
    f092:	4603      	mov	r3, r0
    f094:	461a      	mov	r2, r3
    f096:	687b      	ldr	r3, [r7, #4]
    f098:	605a      	str	r2, [r3, #4]

    return true;
    f09a:	f04f 0301 	mov.w	r3, #1	; 0x1
}
    f09e:	4618      	mov	r0, r3
    f0a0:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f0a4:	46bd      	mov	sp, r7
    f0a6:	bd80      	pop	{r7, pc}

0000f0a8 <_ZNK8Position8getAngleEv>:
Distance Position::getNorme() const
{
    return Distance(sqrt(x*x+y*y));
}

Angle Position::getAngle() const
    f0a8:	b5b0      	push	{r4, r5, r7, lr}
    f0aa:	b082      	sub	sp, #8
    f0ac:	af00      	add	r7, sp, #0
    f0ae:	6078      	str	r0, [r7, #4]
{
	return atan2(y,x);
    f0b0:	687b      	ldr	r3, [r7, #4]
    f0b2:	685b      	ldr	r3, [r3, #4]
    f0b4:	4618      	mov	r0, r3
    f0b6:	f00d faa1 	bl	1c5fc <__aeabi_f2d>
    f0ba:	4604      	mov	r4, r0
    f0bc:	460d      	mov	r5, r1
    f0be:	687b      	ldr	r3, [r7, #4]
    f0c0:	681b      	ldr	r3, [r3, #0]
    f0c2:	4618      	mov	r0, r3
    f0c4:	f00d fa9a 	bl	1c5fc <__aeabi_f2d>
    f0c8:	4602      	mov	r2, r0
    f0ca:	460b      	mov	r3, r1
    f0cc:	4620      	mov	r0, r4
    f0ce:	4629      	mov	r1, r5
    f0d0:	f011 fc7a 	bl	209c8 <atan2>
    f0d4:	4602      	mov	r2, r0
    f0d6:	460b      	mov	r3, r1
    f0d8:	4610      	mov	r0, r2
    f0da:	4619      	mov	r1, r3
    f0dc:	f00d fda2 	bl	1cc24 <__aeabi_d2f>
    f0e0:	4603      	mov	r3, r0
}
    f0e2:	4618      	mov	r0, r3
    f0e4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f0e8:	46bd      	mov	sp, r7
    f0ea:	bdb0      	pop	{r4, r5, r7, pc}

0000f0ec <_ZNK8Position8getNormeEv>:
    this->y = this->y*val;

    return true;
}

Distance Position::getNorme() const
    f0ec:	b590      	push	{r4, r7, lr}
    f0ee:	b083      	sub	sp, #12
    f0f0:	af00      	add	r7, sp, #0
    f0f2:	6078      	str	r0, [r7, #4]
{
    return Distance(sqrt(x*x+y*y));
    f0f4:	687b      	ldr	r3, [r7, #4]
    f0f6:	681a      	ldr	r2, [r3, #0]
    f0f8:	687b      	ldr	r3, [r7, #4]
    f0fa:	681b      	ldr	r3, [r3, #0]
    f0fc:	4610      	mov	r0, r2
    f0fe:	4619      	mov	r1, r3
    f100:	f00d feee 	bl	1cee0 <__aeabi_fmul>
    f104:	4603      	mov	r3, r0
    f106:	461c      	mov	r4, r3
    f108:	687b      	ldr	r3, [r7, #4]
    f10a:	685a      	ldr	r2, [r3, #4]
    f10c:	687b      	ldr	r3, [r7, #4]
    f10e:	685b      	ldr	r3, [r3, #4]
    f110:	4610      	mov	r0, r2
    f112:	4619      	mov	r1, r3
    f114:	f00d fee4 	bl	1cee0 <__aeabi_fmul>
    f118:	4603      	mov	r3, r0
    f11a:	4620      	mov	r0, r4
    f11c:	4619      	mov	r1, r3
    f11e:	f00d fdd7 	bl	1ccd0 <__addsf3>
    f122:	4603      	mov	r3, r0
    f124:	4618      	mov	r0, r3
    f126:	f00d fa69 	bl	1c5fc <__aeabi_f2d>
    f12a:	4602      	mov	r2, r0
    f12c:	460b      	mov	r3, r1
    f12e:	4610      	mov	r0, r2
    f130:	4619      	mov	r1, r3
    f132:	f011 fc4f 	bl	209d4 <sqrt>
    f136:	4602      	mov	r2, r0
    f138:	460b      	mov	r3, r1
    f13a:	4610      	mov	r0, r2
    f13c:	4619      	mov	r1, r3
    f13e:	f00d fd71 	bl	1cc24 <__aeabi_d2f>
    f142:	4603      	mov	r3, r0
}
    f144:	4618      	mov	r0, r3
    f146:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f14a:	46bd      	mov	sp, r7
    f14c:	bd90      	pop	{r4, r7, pc}
    f14e:	46c0      	nop			(mov r8, r8)

0000f150 <_ZNK8Position13presqueEgalesERKS_>:
    this->y-=position.y;

    return *this;
}

bool Position::presqueEgales(const Position &p) const
    f150:	b580      	push	{r7, lr}
    f152:	b084      	sub	sp, #16
    f154:	af00      	add	r7, sp, #0
    f156:	60f8      	str	r0, [r7, #12]
    f158:	60b9      	str	r1, [r7, #8]
{
	return (distancePresqueEgales(x, p.x) && distancePresqueEgales(y,p.y));
    f15a:	68fb      	ldr	r3, [r7, #12]
    f15c:	681a      	ldr	r2, [r3, #0]
    f15e:	68bb      	ldr	r3, [r7, #8]
    f160:	681b      	ldr	r3, [r3, #0]
    f162:	4610      	mov	r0, r2
    f164:	4619      	mov	r1, r3
    f166:	f7fb fd7f 	bl	ac68 <_Z21distancePresqueEgalesff>
    f16a:	4603      	mov	r3, r0
    f16c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f170:	b2db      	uxtb	r3, r3
    f172:	2b00      	cmp	r3, #0
    f174:	d111      	bne.n	f19a <_ZNK8Position13presqueEgalesERKS_+0x4a>
    f176:	68fb      	ldr	r3, [r7, #12]
    f178:	685a      	ldr	r2, [r3, #4]
    f17a:	68bb      	ldr	r3, [r7, #8]
    f17c:	685b      	ldr	r3, [r3, #4]
    f17e:	4610      	mov	r0, r2
    f180:	4619      	mov	r1, r3
    f182:	f7fb fd71 	bl	ac68 <_Z21distancePresqueEgalesff>
    f186:	4603      	mov	r3, r0
    f188:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f18c:	b2db      	uxtb	r3, r3
    f18e:	2b00      	cmp	r3, #0
    f190:	d103      	bne.n	f19a <_ZNK8Position13presqueEgalesERKS_+0x4a>
    f192:	f04f 0301 	mov.w	r3, #1	; 0x1
    f196:	607b      	str	r3, [r7, #4]
    f198:	e002      	b.n	f1a0 <_ZNK8Position13presqueEgalesERKS_+0x50>
    f19a:	f04f 0300 	mov.w	r3, #0	; 0x0
    f19e:	607b      	str	r3, [r7, #4]
    f1a0:	687b      	ldr	r3, [r7, #4]
}
    f1a2:	4618      	mov	r0, r3
    f1a4:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f1a8:	46bd      	mov	sp, r7
    f1aa:	bd80      	pop	{r7, pc}

0000f1ac <_ZN17PositionPlusAngleC2ERK8Positionf>:

PositionPlusAngle::PositionPlusAngle()
{
}

PositionPlusAngle::PositionPlusAngle(const Position& pos, Angle ang)
    f1ac:	b480      	push	{r7}
    f1ae:	b085      	sub	sp, #20
    f1b0:	af00      	add	r7, sp, #0
    f1b2:	60f8      	str	r0, [r7, #12]
    f1b4:	60b9      	str	r1, [r7, #8]
    f1b6:	607a      	str	r2, [r7, #4]
    : position(pos), angle(ang)
    f1b8:	68fb      	ldr	r3, [r7, #12]
    f1ba:	68ba      	ldr	r2, [r7, #8]
    f1bc:	469c      	mov	ip, r3
    f1be:	4613      	mov	r3, r2
    f1c0:	e893 0003 	ldmia.w	r3, {r0, r1}
    f1c4:	e88c 0003 	stmia.w	ip, {r0, r1}
    f1c8:	68fa      	ldr	r2, [r7, #12]
    f1ca:	687b      	ldr	r3, [r7, #4]
    f1cc:	6093      	str	r3, [r2, #8]
{
}
    f1ce:	68fb      	ldr	r3, [r7, #12]
    f1d0:	4618      	mov	r0, r3
    f1d2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f1d6:	46bd      	mov	sp, r7
    f1d8:	bc80      	pop	{r7}
    f1da:	4770      	bx	lr

0000f1dc <_ZN17PositionPlusAngleC1ERK8Positionf>:

PositionPlusAngle::PositionPlusAngle()
{
}

PositionPlusAngle::PositionPlusAngle(const Position& pos, Angle ang)
    f1dc:	b480      	push	{r7}
    f1de:	b085      	sub	sp, #20
    f1e0:	af00      	add	r7, sp, #0
    f1e2:	60f8      	str	r0, [r7, #12]
    f1e4:	60b9      	str	r1, [r7, #8]
    f1e6:	607a      	str	r2, [r7, #4]
    : position(pos), angle(ang)
    f1e8:	68fb      	ldr	r3, [r7, #12]
    f1ea:	68ba      	ldr	r2, [r7, #8]
    f1ec:	469c      	mov	ip, r3
    f1ee:	4613      	mov	r3, r2
    f1f0:	e893 0003 	ldmia.w	r3, {r0, r1}
    f1f4:	e88c 0003 	stmia.w	ip, {r0, r1}
    f1f8:	68fa      	ldr	r2, [r7, #12]
    f1fa:	687b      	ldr	r3, [r7, #4]
    f1fc:	6093      	str	r3, [r2, #8]
{
}
    f1fe:	68fb      	ldr	r3, [r7, #12]
    f200:	4618      	mov	r0, r3
    f202:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f206:	46bd      	mov	sp, r7
    f208:	bc80      	pop	{r7}
    f20a:	4770      	bx	lr

0000f20c <_ZN17PositionPlusAngleC2ERKS_>:

PositionPlusAngle::PositionPlusAngle(const PositionPlusAngle& original)
    f20c:	b480      	push	{r7}
    f20e:	b083      	sub	sp, #12
    f210:	af00      	add	r7, sp, #0
    f212:	6078      	str	r0, [r7, #4]
    f214:	6039      	str	r1, [r7, #0]
    : position(original.position), angle(original.angle)
    f216:	687b      	ldr	r3, [r7, #4]
    f218:	683a      	ldr	r2, [r7, #0]
    f21a:	469c      	mov	ip, r3
    f21c:	4613      	mov	r3, r2
    f21e:	e893 0003 	ldmia.w	r3, {r0, r1}
    f222:	e88c 0003 	stmia.w	ip, {r0, r1}
    f226:	683b      	ldr	r3, [r7, #0]
    f228:	689a      	ldr	r2, [r3, #8]
    f22a:	687b      	ldr	r3, [r7, #4]
    f22c:	609a      	str	r2, [r3, #8]
{
}
    f22e:	687b      	ldr	r3, [r7, #4]
    f230:	4618      	mov	r0, r3
    f232:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f236:	46bd      	mov	sp, r7
    f238:	bc80      	pop	{r7}
    f23a:	4770      	bx	lr

0000f23c <_ZN17PositionPlusAngleC1ERKS_>:
PositionPlusAngle::PositionPlusAngle(const Position& pos, Angle ang)
    : position(pos), angle(ang)
{
}

PositionPlusAngle::PositionPlusAngle(const PositionPlusAngle& original)
    f23c:	b480      	push	{r7}
    f23e:	b083      	sub	sp, #12
    f240:	af00      	add	r7, sp, #0
    f242:	6078      	str	r0, [r7, #4]
    f244:	6039      	str	r1, [r7, #0]
    : position(original.position), angle(original.angle)
    f246:	687b      	ldr	r3, [r7, #4]
    f248:	683a      	ldr	r2, [r7, #0]
    f24a:	469c      	mov	ip, r3
    f24c:	4613      	mov	r3, r2
    f24e:	e893 0003 	ldmia.w	r3, {r0, r1}
    f252:	e88c 0003 	stmia.w	ip, {r0, r1}
    f256:	683b      	ldr	r3, [r7, #0]
    f258:	689a      	ldr	r2, [r3, #8]
    f25a:	687b      	ldr	r3, [r7, #4]
    f25c:	609a      	str	r2, [r3, #8]
{
}
    f25e:	687b      	ldr	r3, [r7, #4]
    f260:	4618      	mov	r0, r3
    f262:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f266:	46bd      	mov	sp, r7
    f268:	bc80      	pop	{r7}
    f26a:	4770      	bx	lr

0000f26c <_ZNK17PositionPlusAngle11getPositionEv>:
bool PositionPlusAngle::presqueEgales(const PositionPlusAngle& positionPlusAngle) const
{
    return(position.presqueEgales(positionPlusAngle.position) && angleEq(angle,positionPlusAngle.angle));
}

Position PositionPlusAngle::getPosition() const
    f26c:	b480      	push	{r7}
    f26e:	b083      	sub	sp, #12
    f270:	af00      	add	r7, sp, #0
    f272:	4684      	mov	ip, r0
    f274:	6079      	str	r1, [r7, #4]
{
    return position;
    f276:	687b      	ldr	r3, [r7, #4]
    f278:	4662      	mov	r2, ip
    f27a:	e893 0003 	ldmia.w	r3, {r0, r1}
    f27e:	e882 0003 	stmia.w	r2, {r0, r1}
}
    f282:	4660      	mov	r0, ip
    f284:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f288:	46bd      	mov	sp, r7
    f28a:	bc80      	pop	{r7}
    f28c:	4770      	bx	lr
    f28e:	46c0      	nop			(mov r8, r8)

0000f290 <_ZNK17PositionPlusAngle8getAngleEv>:
void PositionPlusAngle::setPosition(const Position& p)
{
    position = p;
}

Angle PositionPlusAngle::getAngle() const
    f290:	b480      	push	{r7}
    f292:	b083      	sub	sp, #12
    f294:	af00      	add	r7, sp, #0
    f296:	6078      	str	r0, [r7, #4]
{
    return angle;
    f298:	687b      	ldr	r3, [r7, #4]
    f29a:	689b      	ldr	r3, [r3, #8]
}
    f29c:	4618      	mov	r0, r3
    f29e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f2a2:	46bd      	mov	sp, r7
    f2a4:	bc80      	pop	{r7}
    f2a6:	4770      	bx	lr

0000f2a8 <_ZN17PositionPlusAngle8setAngleEf>:

void PositionPlusAngle::setAngle(Angle a)
    f2a8:	b480      	push	{r7}
    f2aa:	b083      	sub	sp, #12
    f2ac:	af00      	add	r7, sp, #0
    f2ae:	6078      	str	r0, [r7, #4]
    f2b0:	6039      	str	r1, [r7, #0]
{
    angle = a;
    f2b2:	687a      	ldr	r2, [r7, #4]
    f2b4:	683b      	ldr	r3, [r7, #0]
    f2b6:	6093      	str	r3, [r2, #8]
}
    f2b8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f2bc:	46bd      	mov	sp, r7
    f2be:	bc80      	pop	{r7}
    f2c0:	4770      	bx	lr
    f2c2:	46c0      	nop			(mov r8, r8)

0000f2c4 <_ZN17PositionPlusAngle4setYEf>:
void PositionPlusAngle::setX(Distance X)
{
    position.setX(X);
}

void PositionPlusAngle::setY(Distance Y)
    f2c4:	b580      	push	{r7, lr}
    f2c6:	b082      	sub	sp, #8
    f2c8:	af00      	add	r7, sp, #0
    f2ca:	6078      	str	r0, [r7, #4]
    f2cc:	6039      	str	r1, [r7, #0]
{
    position.setY(Y);
    f2ce:	687b      	ldr	r3, [r7, #4]
    f2d0:	4618      	mov	r0, r3
    f2d2:	6839      	ldr	r1, [r7, #0]
    f2d4:	f7ff fdc8 	bl	ee68 <_ZN8Position4setYEf>
}
    f2d8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f2dc:	46bd      	mov	sp, r7
    f2de:	bd80      	pop	{r7, pc}

0000f2e0 <_ZN17PositionPlusAngle4setXEf>:
void PositionPlusAngle::setAngle(Angle a)
{
    angle = a;
}

void PositionPlusAngle::setX(Distance X)
    f2e0:	b580      	push	{r7, lr}
    f2e2:	b082      	sub	sp, #8
    f2e4:	af00      	add	r7, sp, #0
    f2e6:	6078      	str	r0, [r7, #4]
    f2e8:	6039      	str	r1, [r7, #0]
{
    position.setX(X);
    f2ea:	687b      	ldr	r3, [r7, #4]
    f2ec:	4618      	mov	r0, r3
    f2ee:	6839      	ldr	r1, [r7, #0]
    f2f0:	f7ff fdac 	bl	ee4c <_ZN8Position4setXEf>
}
    f2f4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f2f8:	46bd      	mov	sp, r7
    f2fa:	bd80      	pop	{r7, pc}

0000f2fc <_ZN17PositionPlusAngle11setPositionERK8Position>:
Position PositionPlusAngle::getPosition() const
{
    return position;
}

void PositionPlusAngle::setPosition(const Position& p)
    f2fc:	b580      	push	{r7, lr}
    f2fe:	b082      	sub	sp, #8
    f300:	af00      	add	r7, sp, #0
    f302:	6078      	str	r0, [r7, #4]
    f304:	6039      	str	r1, [r7, #0]
{
    position = p;
    f306:	687a      	ldr	r2, [r7, #4]
    f308:	683b      	ldr	r3, [r7, #0]
    f30a:	4610      	mov	r0, r2
    f30c:	e893 0006 	ldmia.w	r3, {r1, r2}
    f310:	f7ff fe04 	bl	ef1c <_ZN8PositionaSES_>
}
    f314:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f318:	46bd      	mov	sp, r7
    f31a:	bd80      	pop	{r7, pc}

0000f31c <_ZN17PositionPlusAngleaSERKS_>:
PositionPlusAngle PositionPlusAngle::operator-(Distance distance) const
{
    return *this + (-distance);
}

const PositionPlusAngle& PositionPlusAngle::operator=(const PositionPlusAngle& positionPlusAngle)
    f31c:	b580      	push	{r7, lr}
    f31e:	b082      	sub	sp, #8
    f320:	af00      	add	r7, sp, #0
    f322:	6078      	str	r0, [r7, #4]
    f324:	6039      	str	r1, [r7, #0]
{
    position = positionPlusAngle.position;
    f326:	687a      	ldr	r2, [r7, #4]
    f328:	683b      	ldr	r3, [r7, #0]
    f32a:	4610      	mov	r0, r2
    f32c:	e893 0006 	ldmia.w	r3, {r1, r2}
    f330:	f7ff fdf4 	bl	ef1c <_ZN8PositionaSES_>
    angle = positionPlusAngle.angle;
    f334:	683b      	ldr	r3, [r7, #0]
    f336:	689a      	ldr	r2, [r3, #8]
    f338:	687b      	ldr	r3, [r7, #4]
    f33a:	609a      	str	r2, [r3, #8]

    return *this;
    f33c:	687b      	ldr	r3, [r7, #4]
}
    f33e:	4618      	mov	r0, r3
    f340:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f344:	46bd      	mov	sp, r7
    f346:	bd80      	pop	{r7, pc}

0000f348 <_ZNK17PositionPlusAngle13presqueEgalesERKS_>:
bool PositionPlusAngle::operator==(const PositionPlusAngle& p) const
{
    return ((position==p.position) && (angle==p.angle));
}

bool PositionPlusAngle::presqueEgales(const PositionPlusAngle& positionPlusAngle) const
    f348:	b580      	push	{r7, lr}
    f34a:	b084      	sub	sp, #16
    f34c:	af00      	add	r7, sp, #0
    f34e:	60f8      	str	r0, [r7, #12]
    f350:	60b9      	str	r1, [r7, #8]
{
    return(position.presqueEgales(positionPlusAngle.position) && angleEq(angle,positionPlusAngle.angle));
    f352:	68fb      	ldr	r3, [r7, #12]
    f354:	68ba      	ldr	r2, [r7, #8]
    f356:	4618      	mov	r0, r3
    f358:	4611      	mov	r1, r2
    f35a:	f7ff fef9 	bl	f150 <_ZNK8Position13presqueEgalesERKS_>
    f35e:	4603      	mov	r3, r0
    f360:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f364:	b2db      	uxtb	r3, r3
    f366:	2b00      	cmp	r3, #0
    f368:	d111      	bne.n	f38e <_ZNK17PositionPlusAngle13presqueEgalesERKS_+0x46>
    f36a:	68fb      	ldr	r3, [r7, #12]
    f36c:	689a      	ldr	r2, [r3, #8]
    f36e:	68bb      	ldr	r3, [r7, #8]
    f370:	689b      	ldr	r3, [r3, #8]
    f372:	4610      	mov	r0, r2
    f374:	4619      	mov	r1, r3
    f376:	f7f7 fed7 	bl	7128 <_Z7angleEqff>
    f37a:	4603      	mov	r3, r0
    f37c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f380:	b2db      	uxtb	r3, r3
    f382:	2b00      	cmp	r3, #0
    f384:	d103      	bne.n	f38e <_ZNK17PositionPlusAngle13presqueEgalesERKS_+0x46>
    f386:	f04f 0301 	mov.w	r3, #1	; 0x1
    f38a:	607b      	str	r3, [r7, #4]
    f38c:	e002      	b.n	f394 <_ZNK17PositionPlusAngle13presqueEgalesERKS_+0x4c>
    f38e:	f04f 0300 	mov.w	r3, #0	; 0x0
    f392:	607b      	str	r3, [r7, #4]
    f394:	687b      	ldr	r3, [r7, #4]
}
    f396:	4618      	mov	r0, r3
    f398:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f39c:	46bd      	mov	sp, r7
    f39e:	bd80      	pop	{r7, pc}

0000f3a0 <_ZNK17PositionPlusAngleeqERKS_>:
    angle = positionPlusAngle.angle;

    return *this;
}

bool PositionPlusAngle::operator==(const PositionPlusAngle& p) const
    f3a0:	b580      	push	{r7, lr}
    f3a2:	b084      	sub	sp, #16
    f3a4:	af00      	add	r7, sp, #0
    f3a6:	60f8      	str	r0, [r7, #12]
    f3a8:	60b9      	str	r1, [r7, #8]
{
    return ((position==p.position) && (angle==p.angle));
    f3aa:	68fb      	ldr	r3, [r7, #12]
    f3ac:	68ba      	ldr	r2, [r7, #8]
    f3ae:	4618      	mov	r0, r3
    f3b0:	4611      	mov	r1, r2
    f3b2:	f7ff fe1b 	bl	efec <_ZNK8PositioneqERKS_>
    f3b6:	4603      	mov	r3, r0
    f3b8:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f3bc:	b2db      	uxtb	r3, r3
    f3be:	2b00      	cmp	r3, #0
    f3c0:	d119      	bne.n	f3f6 <_ZNK17PositionPlusAngleeqERKS_+0x56>
    f3c2:	68fb      	ldr	r3, [r7, #12]
    f3c4:	689a      	ldr	r2, [r3, #8]
    f3c6:	68bb      	ldr	r3, [r7, #8]
    f3c8:	6899      	ldr	r1, [r3, #8]
    f3ca:	f04f 0300 	mov.w	r3, #0	; 0x0
    f3ce:	70fb      	strb	r3, [r7, #3]
    f3d0:	4610      	mov	r0, r2
    f3d2:	f00d ff17 	bl	1d204 <__aeabi_fcmpeq>
    f3d6:	4603      	mov	r3, r0
    f3d8:	2b00      	cmp	r3, #0
    f3da:	d002      	beq.n	f3e2 <_ZNK17PositionPlusAngleeqERKS_+0x42>
    f3dc:	f04f 0301 	mov.w	r3, #1	; 0x1
    f3e0:	70fb      	strb	r3, [r7, #3]
    f3e2:	78fb      	ldrb	r3, [r7, #3]
    f3e4:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f3e8:	b2db      	uxtb	r3, r3
    f3ea:	2b00      	cmp	r3, #0
    f3ec:	d103      	bne.n	f3f6 <_ZNK17PositionPlusAngleeqERKS_+0x56>
    f3ee:	f04f 0301 	mov.w	r3, #1	; 0x1
    f3f2:	607b      	str	r3, [r7, #4]
    f3f4:	e002      	b.n	f3fc <_ZNK17PositionPlusAngleeqERKS_+0x5c>
    f3f6:	f04f 0300 	mov.w	r3, #0	; 0x0
    f3fa:	607b      	str	r3, [r7, #4]
    f3fc:	687b      	ldr	r3, [r7, #4]
}
    f3fe:	4618      	mov	r0, r3
    f400:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f404:	46bd      	mov	sp, r7
    f406:	bd80      	pop	{r7, pc}

0000f408 <_ZNK17PositionPlusAngleplERKS_>:
PositionPlusAngle PositionPlusAngle::operator+(Distance distance) const
{
    return PositionPlusAngle(Position(position.getX() + distance*cos(angle), position.getY() + distance*sin(angle)), angle);
}

PositionPlusAngle PositionPlusAngle::operator+(const PositionPlusAngle& posAngAdd) const
    f408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f40c:	b088      	sub	sp, #32
    f40e:	af00      	add	r7, sp, #0
    f410:	4605      	mov	r5, r0
    f412:	6079      	str	r1, [r7, #4]
    f414:	603a      	str	r2, [r7, #0]
{
    return PositionPlusAngle(Position(position.getX() + posAngAdd.getPosition().getX(), position.getY() + posAngAdd.getPosition().getY()), angle + posAngAdd.getAngle());
    f416:	462e      	mov	r6, r5
    f418:	687b      	ldr	r3, [r7, #4]
    f41a:	4618      	mov	r0, r3
    f41c:	f7ff fcfe 	bl	ee1c <_ZNK8Position4getXEv>
    f420:	4604      	mov	r4, r0
    f422:	f107 0310 	add.w	r3, r7, #16	; 0x10
    f426:	4618      	mov	r0, r3
    f428:	6839      	ldr	r1, [r7, #0]
    f42a:	f7ff ff1f 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
    f42e:	f107 0310 	add.w	r3, r7, #16	; 0x10
    f432:	4618      	mov	r0, r3
    f434:	f7ff fcf2 	bl	ee1c <_ZNK8Position4getXEv>
    f438:	4603      	mov	r3, r0
    f43a:	4620      	mov	r0, r4
    f43c:	4619      	mov	r1, r3
    f43e:	f00d fc47 	bl	1ccd0 <__addsf3>
    f442:	4603      	mov	r3, r0
    f444:	4698      	mov	r8, r3
    f446:	687b      	ldr	r3, [r7, #4]
    f448:	4618      	mov	r0, r3
    f44a:	f7ff fcf3 	bl	ee34 <_ZNK8Position4getYEv>
    f44e:	4604      	mov	r4, r0
    f450:	f107 0318 	add.w	r3, r7, #24	; 0x18
    f454:	4618      	mov	r0, r3
    f456:	6839      	ldr	r1, [r7, #0]
    f458:	f7ff ff08 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
    f45c:	f107 0318 	add.w	r3, r7, #24	; 0x18
    f460:	4618      	mov	r0, r3
    f462:	f7ff fce7 	bl	ee34 <_ZNK8Position4getYEv>
    f466:	4603      	mov	r3, r0
    f468:	4620      	mov	r0, r4
    f46a:	4619      	mov	r1, r3
    f46c:	f00d fc30 	bl	1ccd0 <__addsf3>
    f470:	4603      	mov	r3, r0
    f472:	461a      	mov	r2, r3
    f474:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f478:	4618      	mov	r0, r3
    f47a:	4641      	mov	r1, r8
    f47c:	f04f 0301 	mov.w	r3, #1	; 0x1
    f480:	f7ff fcb8 	bl	edf4 <_ZN8PositionC1Effb>
    f484:	687b      	ldr	r3, [r7, #4]
    f486:	689c      	ldr	r4, [r3, #8]
    f488:	6838      	ldr	r0, [r7, #0]
    f48a:	f7ff ff01 	bl	f290 <_ZNK17PositionPlusAngle8getAngleEv>
    f48e:	4603      	mov	r3, r0
    f490:	4620      	mov	r0, r4
    f492:	4619      	mov	r1, r3
    f494:	f00d fc1c 	bl	1ccd0 <__addsf3>
    f498:	4603      	mov	r3, r0
    f49a:	461a      	mov	r2, r3
    f49c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f4a0:	4630      	mov	r0, r6
    f4a2:	4619      	mov	r1, r3
    f4a4:	f7ff fe9a 	bl	f1dc <_ZN17PositionPlusAngleC1ERK8Positionf>
}
    f4a8:	4628      	mov	r0, r5
    f4aa:	4628      	mov	r0, r5
    f4ac:	f107 0720 	add.w	r7, r7, #32	; 0x20
    f4b0:	46bd      	mov	sp, r7
    f4b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f4b6:	46c0      	nop			(mov r8, r8)

0000f4b8 <_ZNK17PositionPlusAngleplEf>:
PositionPlusAngle::PositionPlusAngle(const PositionPlusAngle& original)
    : position(original.position), angle(original.angle)
{
}

PositionPlusAngle PositionPlusAngle::operator+(Distance distance) const
    f4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f4bc:	b085      	sub	sp, #20
    f4be:	af00      	add	r7, sp, #0
    f4c0:	4606      	mov	r6, r0
    f4c2:	6079      	str	r1, [r7, #4]
    f4c4:	603a      	str	r2, [r7, #0]
{
    return PositionPlusAngle(Position(position.getX() + distance*cos(angle), position.getY() + distance*sin(angle)), angle);
    f4c6:	46b2      	mov	sl, r6
    f4c8:	687b      	ldr	r3, [r7, #4]
    f4ca:	4618      	mov	r0, r3
    f4cc:	f7ff fca6 	bl	ee1c <_ZNK8Position4getXEv>
    f4d0:	4603      	mov	r3, r0
    f4d2:	4618      	mov	r0, r3
    f4d4:	f00d f892 	bl	1c5fc <__aeabi_f2d>
    f4d8:	4680      	mov	r8, r0
    f4da:	4689      	mov	r9, r1
    f4dc:	6838      	ldr	r0, [r7, #0]
    f4de:	f00d f88d 	bl	1c5fc <__aeabi_f2d>
    f4e2:	4604      	mov	r4, r0
    f4e4:	460d      	mov	r5, r1
    f4e6:	687b      	ldr	r3, [r7, #4]
    f4e8:	689b      	ldr	r3, [r3, #8]
    f4ea:	4618      	mov	r0, r3
    f4ec:	f00d f886 	bl	1c5fc <__aeabi_f2d>
    f4f0:	4602      	mov	r2, r0
    f4f2:	460b      	mov	r3, r1
    f4f4:	4610      	mov	r0, r2
    f4f6:	4619      	mov	r1, r3
    f4f8:	f011 f9de 	bl	208b8 <cos>
    f4fc:	4602      	mov	r2, r0
    f4fe:	460b      	mov	r3, r1
    f500:	4620      	mov	r0, r4
    f502:	4629      	mov	r1, r5
    f504:	f00d f8ce 	bl	1c6a4 <__aeabi_dmul>
    f508:	4602      	mov	r2, r0
    f50a:	460b      	mov	r3, r1
    f50c:	4640      	mov	r0, r8
    f50e:	4649      	mov	r1, r9
    f510:	f00c ff16 	bl	1c340 <__adddf3>
    f514:	4602      	mov	r2, r0
    f516:	460b      	mov	r3, r1
    f518:	4610      	mov	r0, r2
    f51a:	4619      	mov	r1, r3
    f51c:	f00d fb82 	bl	1cc24 <__aeabi_d2f>
    f520:	4683      	mov	fp, r0
    f522:	687b      	ldr	r3, [r7, #4]
    f524:	4618      	mov	r0, r3
    f526:	f7ff fc85 	bl	ee34 <_ZNK8Position4getYEv>
    f52a:	4603      	mov	r3, r0
    f52c:	4618      	mov	r0, r3
    f52e:	f00d f865 	bl	1c5fc <__aeabi_f2d>
    f532:	4680      	mov	r8, r0
    f534:	4689      	mov	r9, r1
    f536:	6838      	ldr	r0, [r7, #0]
    f538:	f00d f860 	bl	1c5fc <__aeabi_f2d>
    f53c:	4604      	mov	r4, r0
    f53e:	460d      	mov	r5, r1
    f540:	687b      	ldr	r3, [r7, #4]
    f542:	689b      	ldr	r3, [r3, #8]
    f544:	4618      	mov	r0, r3
    f546:	f00d f859 	bl	1c5fc <__aeabi_f2d>
    f54a:	4602      	mov	r2, r0
    f54c:	460b      	mov	r3, r1
    f54e:	4610      	mov	r0, r2
    f550:	4619      	mov	r1, r3
    f552:	f011 f9f3 	bl	2093c <sin>
    f556:	4602      	mov	r2, r0
    f558:	460b      	mov	r3, r1
    f55a:	4620      	mov	r0, r4
    f55c:	4629      	mov	r1, r5
    f55e:	f00d f8a1 	bl	1c6a4 <__aeabi_dmul>
    f562:	4602      	mov	r2, r0
    f564:	460b      	mov	r3, r1
    f566:	4640      	mov	r0, r8
    f568:	4649      	mov	r1, r9
    f56a:	f00c fee9 	bl	1c340 <__adddf3>
    f56e:	4602      	mov	r2, r0
    f570:	460b      	mov	r3, r1
    f572:	4610      	mov	r0, r2
    f574:	4619      	mov	r1, r3
    f576:	f00d fb55 	bl	1cc24 <__aeabi_d2f>
    f57a:	4602      	mov	r2, r0
    f57c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f580:	4618      	mov	r0, r3
    f582:	4659      	mov	r1, fp
    f584:	f04f 0301 	mov.w	r3, #1	; 0x1
    f588:	f7ff fc34 	bl	edf4 <_ZN8PositionC1Effb>
    f58c:	687b      	ldr	r3, [r7, #4]
    f58e:	689a      	ldr	r2, [r3, #8]
    f590:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f594:	4650      	mov	r0, sl
    f596:	4619      	mov	r1, r3
    f598:	f7ff fe20 	bl	f1dc <_ZN17PositionPlusAngleC1ERK8Positionf>
}
    f59c:	4630      	mov	r0, r6
    f59e:	4630      	mov	r0, r6
    f5a0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f5a4:	46bd      	mov	sp, r7
    f5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f5aa:	46c0      	nop			(mov r8, r8)

0000f5ac <_ZNK17PositionPlusAnglemiEf>:
PositionPlusAngle PositionPlusAngle::operator+(const PositionPlusAngle& posAngAdd) const
{
    return PositionPlusAngle(Position(position.getX() + posAngAdd.getPosition().getX(), position.getY() + posAngAdd.getPosition().getY()), angle + posAngAdd.getAngle());
}

PositionPlusAngle PositionPlusAngle::operator-(Distance distance) const
    f5ac:	b590      	push	{r4, r7, lr}
    f5ae:	b083      	sub	sp, #12
    f5b0:	af00      	add	r7, sp, #0
    f5b2:	4604      	mov	r4, r0
    f5b4:	6079      	str	r1, [r7, #4]
    f5b6:	603a      	str	r2, [r7, #0]
{
    return *this + (-distance);
    f5b8:	4622      	mov	r2, r4
    f5ba:	683b      	ldr	r3, [r7, #0]
    f5bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    f5c0:	4610      	mov	r0, r2
    f5c2:	6879      	ldr	r1, [r7, #4]
    f5c4:	461a      	mov	r2, r3
    f5c6:	f7ff ff77 	bl	f4b8 <_ZNK17PositionPlusAngleplEf>
}
    f5ca:	4620      	mov	r0, r4
    f5cc:	4620      	mov	r0, r4
    f5ce:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f5d2:	46bd      	mov	sp, r7
    f5d4:	bd90      	pop	{r4, r7, pc}
    f5d6:	46c0      	nop			(mov r8, r8)

0000f5d8 <_ZN17PositionPlusAngleC1Ev>:
#include <math.h>

#include "positionPlusAngle.h"

PositionPlusAngle::PositionPlusAngle()
    f5d8:	b580      	push	{r7, lr}
    f5da:	b082      	sub	sp, #8
    f5dc:	af00      	add	r7, sp, #0
    f5de:	6078      	str	r0, [r7, #4]
    f5e0:	687b      	ldr	r3, [r7, #4]
    f5e2:	4618      	mov	r0, r3
    f5e4:	f7ff fbde 	bl	eda4 <_ZN8PositionC1Ev>
{
}
    f5e8:	687b      	ldr	r3, [r7, #4]
    f5ea:	4618      	mov	r0, r3
    f5ec:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f5f0:	46bd      	mov	sp, r7
    f5f2:	bd80      	pop	{r7, pc}

0000f5f4 <_ZN17PositionPlusAngleC2Ev>:
#include <math.h>

#include "positionPlusAngle.h"

PositionPlusAngle::PositionPlusAngle()
    f5f4:	b580      	push	{r7, lr}
    f5f6:	b082      	sub	sp, #8
    f5f8:	af00      	add	r7, sp, #0
    f5fa:	6078      	str	r0, [r7, #4]
    f5fc:	687b      	ldr	r3, [r7, #4]
    f5fe:	4618      	mov	r0, r3
    f600:	f7ff fbd0 	bl	eda4 <_ZN8PositionC1Ev>
{
}
    f604:	687b      	ldr	r3, [r7, #4]
    f606:	4618      	mov	r0, r3
    f608:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f60c:	46bd      	mov	sp, r7
    f60e:	bd80      	pop	{r7, pc}

0000f610 <_ZN10ActionGoTo16collisionAvoidedEv>:
            status = -1;
    }
    return status;
}

void ActionGoTo::collisionAvoided()
    f610:	b480      	push	{r7}
    f612:	b083      	sub	sp, #12
    f614:	af00      	add	r7, sp, #0
    f616:	6078      	str	r0, [r7, #4]
{
    //if (status > 0)
        this->status = 0;
    f618:	687a      	ldr	r2, [r7, #4]
    f61a:	f04f 0300 	mov.w	r3, #0	; 0x0
    f61e:	60d3      	str	r3, [r2, #12]
}
    f620:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f624:	46bd      	mov	sp, r7
    f626:	bc80      	pop	{r7}
    f628:	4770      	bx	lr
    f62a:	46c0      	nop			(mov r8, r8)

0000f62c <_ZN10ActionGoTo5resetEv>:

void ActionGoTo::reset()
    f62c:	b480      	push	{r7}
    f62e:	b083      	sub	sp, #12
    f630:	af00      	add	r7, sp, #0
    f632:	6078      	str	r0, [r7, #4]
{
    this->status = 0;
    f634:	687a      	ldr	r2, [r7, #4]
    f636:	f04f 0300 	mov.w	r3, #0	; 0x0
    f63a:	60d3      	str	r3, [r2, #12]
}
    f63c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f640:	46bd      	mov	sp, r7
    f642:	bc80      	pop	{r7}
    f644:	4770      	bx	lr
    f646:	46c0      	nop			(mov r8, r8)

0000f648 <_ZN10ActionGoTo6updateEv>:
ActionGoTo::~ActionGoTo()
{
    //dtor
}

int ActionGoTo::update()
    f648:	b590      	push	{r4, r7, lr}
    f64a:	b099      	sub	sp, #100
    f64c:	af02      	add	r7, sp, #8
    f64e:	6078      	str	r0, [r7, #4]
{
    if (status == 0)
    f650:	687b      	ldr	r3, [r7, #4]
    f652:	68db      	ldr	r3, [r3, #12]
    f654:	2b00      	cmp	r3, #0
    f656:	d126      	bne.n	f6a6 <_ZN10ActionGoTo6updateEv+0x5e>
    {
#ifndef ROBOTHW
        qDebug() << "actionGoTo";
#endif
        //allumerLED2();
        Position pos = Odometrie::odometrie->getPos().getPosition();
    f658:	4b4c      	ldr	r3, [pc, #304]	(f78c <_ZN10ActionGoTo6updateEv+0x144>)
    f65a:	681a      	ldr	r2, [r3, #0]
    f65c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    f660:	4618      	mov	r0, r3
    f662:	4611      	mov	r1, r2
    f664:	f7fa fbc8 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    f668:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    f66c:	f107 0224 	add.w	r2, r7, #36	; 0x24
    f670:	4618      	mov	r0, r3
    f672:	4611      	mov	r1, r2
    f674:	f7ff fdfa 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
        //Position vect = goalPosition - pos;
        //vect *= (1.f/vect.getNorme());

        goingCurve = false;//StrategieV2::getJustAvoided();
    f678:	687a      	ldr	r2, [r7, #4]
    f67a:	f04f 0300 	mov.w	r3, #0	; 0x0
    f67e:	7713      	strb	r3, [r2, #28]
            StrategieV2::setCurrentGoal(intermediateGoalPosition, true); // a changer selon le servo qui détecte
            status = 1;
        }
        else*/
        {
            StrategieV2::setCurrentGoal(goalPosition, goBack);
    f680:	687b      	ldr	r3, [r7, #4]
    f682:	f893 c010 	ldrb.w	ip, [r3, #16]
    f686:	687a      	ldr	r2, [r7, #4]
    f688:	4b41      	ldr	r3, [pc, #260]	(f790 <_ZN10ActionGoTo6updateEv+0x148>)
    f68a:	9300      	str	r3, [sp, #0]
    f68c:	f102 0304 	add.w	r3, r2, #4	; 0x4
    f690:	e893 0003 	ldmia.w	r3, {r0, r1}
    f694:	4662      	mov	r2, ip
    f696:	4b3f      	ldr	r3, [pc, #252]	(f794 <_ZN10ActionGoTo6updateEv+0x14c>)
    f698:	f008 fb6c 	bl	17d74 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            status = 3;
    f69c:	687a      	ldr	r2, [r7, #4]
    f69e:	f04f 0303 	mov.w	r3, #3	; 0x3
    f6a2:	60d3      	str	r3, [r2, #12]
    f6a4:	e06b      	b.n	f77e <_ZN10ActionGoTo6updateEv+0x136>
        }

    }
    else if (status ==1) // on recule
    f6a6:	687b      	ldr	r3, [r7, #4]
    f6a8:	68db      	ldr	r3, [r3, #12]
    f6aa:	2b01      	cmp	r3, #1
    f6ac:	d129      	bne.n	f702 <_ZN10ActionGoTo6updateEv+0xba>
    {
        Position vect = intermediateGoalPosition - Odometrie::odometrie->getPos().getPosition();
    f6ae:	687b      	ldr	r3, [r7, #4]
    f6b0:	f103 0428 	add.w	r4, r3, #40	; 0x28
    f6b4:	4b35      	ldr	r3, [pc, #212]	(f78c <_ZN10ActionGoTo6updateEv+0x144>)
    f6b6:	681a      	ldr	r2, [r3, #0]
    f6b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
    f6bc:	4618      	mov	r0, r3
    f6be:	4611      	mov	r1, r2
    f6c0:	f7fa fb9a 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    f6c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
    f6c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
    f6cc:	4618      	mov	r0, r3
    f6ce:	4611      	mov	r1, r2
    f6d0:	f7ff fdcc 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
    f6d4:	f107 0314 	add.w	r3, r7, #20	; 0x14
    f6d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
    f6dc:	4618      	mov	r0, r3
    f6de:	4621      	mov	r1, r4
    f6e0:	f7ff fbf6 	bl	eed0 <_ZNK8PositionmiERKS_>
        //std::cout << "status = 1 " << vect.getNorme() << std::endl;
        if (vect.getNorme() < precision) // now we have
    f6e4:	f107 0314 	add.w	r3, r7, #20	; 0x14
    f6e8:	4618      	mov	r0, r3
    f6ea:	f7ff fcff 	bl	f0ec <_ZNK8Position8getNormeEv>
    f6ee:	4602      	mov	r2, r0
    f6f0:	687b      	ldr	r3, [r7, #4]
    f6f2:	6a5b      	ldr	r3, [r3, #36]
    f6f4:	4610      	mov	r0, r2
    f6f6:	4619      	mov	r1, r3
    f6f8:	f00d fd8e 	bl	1d218 <__aeabi_fcmplt>
    f6fc:	4603      	mov	r3, r0
    f6fe:	2b00      	cmp	r3, #0
    f700:	e03d      	b.n	f77e <_ZN10ActionGoTo6updateEv+0x136>
                sign = -1;
            else if (vect.getX() < 0)
            vect = vect + Position(500*vect.getY(), 500*vect.getX());*/
        }
    }
    else if (status == 2)
    f702:	687b      	ldr	r3, [r7, #4]
    f704:	68db      	ldr	r3, [r3, #12]
    f706:	2b02      	cmp	r3, #2
    f708:	d039      	beq.n	f77e <_ZN10ActionGoTo6updateEv+0x136>
                StrategieV2::setCurrentGoal(goalPosition, goBack);
                status = 3;
            }
        }*/
    }
    else if (status == 3)
    f70a:	687b      	ldr	r3, [r7, #4]
    f70c:	68db      	ldr	r3, [r3, #12]
    f70e:	2b03      	cmp	r3, #3
    f710:	d135      	bne.n	f77e <_ZN10ActionGoTo6updateEv+0x136>
    {
//        allumerLED();
        //std::cout << "status = 3" << std::endl;
        Position vect = goalPosition - Odometrie::odometrie->getPos().getPosition();
    f712:	687b      	ldr	r3, [r7, #4]
    f714:	f103 0404 	add.w	r4, r3, #4	; 0x4
    f718:	4b1c      	ldr	r3, [pc, #112]	(f78c <_ZN10ActionGoTo6updateEv+0x144>)
    f71a:	681a      	ldr	r2, [r3, #0]
    f71c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    f720:	4618      	mov	r0, r3
    f722:	4611      	mov	r1, r2
    f724:	f7fa fb68 	bl	9df8 <_ZNK9Odometrie6getPosEv>
    f728:	f107 0344 	add.w	r3, r7, #68	; 0x44
    f72c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
    f730:	4618      	mov	r0, r3
    f732:	4611      	mov	r1, r2
    f734:	f7ff fd9a 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
    f738:	f107 030c 	add.w	r3, r7, #12	; 0xc
    f73c:	f107 0244 	add.w	r2, r7, #68	; 0x44
    f740:	4618      	mov	r0, r3
    f742:	4621      	mov	r1, r4
    f744:	f7ff fbc4 	bl	eed0 <_ZNK8PositionmiERKS_>
        //std::cout << vect.getNorme() << std::endl;
        //std::cout << Odometrie::odometrie->getPos().getPosition().getX() << " "<< Odometrie::odometrie->getPos().getPosition().getY()   << std::endl;
        if (vect.getNorme() < precision)
    f748:	f107 030c 	add.w	r3, r7, #12	; 0xc
    f74c:	4618      	mov	r0, r3
    f74e:	f7ff fccd 	bl	f0ec <_ZNK8Position8getNormeEv>
    f752:	4602      	mov	r2, r0
    f754:	687b      	ldr	r3, [r7, #4]
    f756:	6a59      	ldr	r1, [r3, #36]
    f758:	f04f 0300 	mov.w	r3, #0	; 0x0
    f75c:	70fb      	strb	r3, [r7, #3]
    f75e:	4610      	mov	r0, r2
    f760:	f00d fd5a 	bl	1d218 <__aeabi_fcmplt>
    f764:	4603      	mov	r3, r0
    f766:	2b00      	cmp	r3, #0
    f768:	d002      	beq.n	f770 <_ZN10ActionGoTo6updateEv+0x128>
    f76a:	f04f 0301 	mov.w	r3, #1	; 0x1
    f76e:	70fb      	strb	r3, [r7, #3]
    f770:	78fb      	ldrb	r3, [r7, #3]
    f772:	2b00      	cmp	r3, #0
    f774:	d003      	beq.n	f77e <_ZN10ActionGoTo6updateEv+0x136>
            status = -1;
    f776:	687a      	ldr	r2, [r7, #4]
    f778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f77c:	60d3      	str	r3, [r2, #12]
    }
    return status;
    f77e:	687b      	ldr	r3, [r7, #4]
    f780:	68db      	ldr	r3, [r3, #12]
}
    f782:	4618      	mov	r0, r3
    f784:	f107 075c 	add.w	r7, r7, #92	; 0x5c
    f788:	46bd      	mov	sp, r7
    f78a:	bd90      	pop	{r4, r7, pc}
    f78c:	20000574 	.word	0x20000574
    f790:	c2c80000 	.word	0xc2c80000
    f794:	40400000 	.word	0x40400000

0000f798 <_ZN10ActionGoToD0Ev>:
    goingCurve = false;
    curveFactor = 1;
    precision = _precision;
}

ActionGoTo::~ActionGoTo()
    f798:	b580      	push	{r7, lr}
    f79a:	b082      	sub	sp, #8
    f79c:	af00      	add	r7, sp, #0
    f79e:	6078      	str	r0, [r7, #4]
    f7a0:	687a      	ldr	r2, [r7, #4]
    f7a2:	4b0a      	ldr	r3, [pc, #40]	(f7cc <_ZN10ActionGoToD0Ev+0x34>)
    f7a4:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    f7a6:	687b      	ldr	r3, [r7, #4]
    f7a8:	4618      	mov	r0, r3
    f7aa:	f007 f8f3 	bl	16994 <_ZN17MediumLevelActionD2Ev>
    f7ae:	f04f 0301 	mov.w	r3, #1	; 0x1
    f7b2:	b2db      	uxtb	r3, r3
    f7b4:	2b00      	cmp	r3, #0
    f7b6:	d002      	beq.n	f7be <_ZN10ActionGoToD0Ev+0x26>
    f7b8:	6878      	ldr	r0, [r7, #4]
    f7ba:	f7ff fa5b 	bl	ec74 <_ZdlPv>
    f7be:	687b      	ldr	r3, [r7, #4]
    f7c0:	4618      	mov	r0, r3
    f7c2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f7c6:	46bd      	mov	sp, r7
    f7c8:	bd80      	pop	{r7, pc}
    f7ca:	46c0      	nop			(mov r8, r8)
    f7cc:	000240e0 	.word	0x000240e0

0000f7d0 <_ZN10ActionGoToD1Ev>:
    goingCurve = false;
    curveFactor = 1;
    precision = _precision;
}

ActionGoTo::~ActionGoTo()
    f7d0:	b580      	push	{r7, lr}
    f7d2:	b082      	sub	sp, #8
    f7d4:	af00      	add	r7, sp, #0
    f7d6:	6078      	str	r0, [r7, #4]
    f7d8:	687a      	ldr	r2, [r7, #4]
    f7da:	4b0a      	ldr	r3, [pc, #40]	(f804 <_ZN10ActionGoToD1Ev+0x34>)
    f7dc:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    f7de:	687b      	ldr	r3, [r7, #4]
    f7e0:	4618      	mov	r0, r3
    f7e2:	f007 f8d7 	bl	16994 <_ZN17MediumLevelActionD2Ev>
    f7e6:	f04f 0300 	mov.w	r3, #0	; 0x0
    f7ea:	b2db      	uxtb	r3, r3
    f7ec:	2b00      	cmp	r3, #0
    f7ee:	d002      	beq.n	f7f6 <_ZN10ActionGoToD1Ev+0x26>
    f7f0:	6878      	ldr	r0, [r7, #4]
    f7f2:	f7ff fa3f 	bl	ec74 <_ZdlPv>
    f7f6:	687b      	ldr	r3, [r7, #4]
    f7f8:	4618      	mov	r0, r3
    f7fa:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f7fe:	46bd      	mov	sp, r7
    f800:	bd80      	pop	{r7, pc}
    f802:	46c0      	nop			(mov r8, r8)
    f804:	000240e0 	.word	0x000240e0

0000f808 <_ZN10ActionGoToD2Ev>:
    goingCurve = false;
    curveFactor = 1;
    precision = _precision;
}

ActionGoTo::~ActionGoTo()
    f808:	b580      	push	{r7, lr}
    f80a:	b082      	sub	sp, #8
    f80c:	af00      	add	r7, sp, #0
    f80e:	6078      	str	r0, [r7, #4]
    f810:	687a      	ldr	r2, [r7, #4]
    f812:	4b0a      	ldr	r3, [pc, #40]	(f83c <_ZN10ActionGoToD2Ev+0x34>)
    f814:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    f816:	687b      	ldr	r3, [r7, #4]
    f818:	4618      	mov	r0, r3
    f81a:	f007 f8bb 	bl	16994 <_ZN17MediumLevelActionD2Ev>
    f81e:	f04f 0300 	mov.w	r3, #0	; 0x0
    f822:	b2db      	uxtb	r3, r3
    f824:	2b00      	cmp	r3, #0
    f826:	d002      	beq.n	f82e <_ZN10ActionGoToD2Ev+0x26>
    f828:	6878      	ldr	r0, [r7, #4]
    f82a:	f7ff fa23 	bl	ec74 <_ZdlPv>
    f82e:	687b      	ldr	r3, [r7, #4]
    f830:	4618      	mov	r0, r3
    f832:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f836:	46bd      	mov	sp, r7
    f838:	bd80      	pop	{r7, pc}
    f83a:	46c0      	nop			(mov r8, r8)
    f83c:	000240e0 	.word	0x000240e0

0000f840 <_ZN10ActionGoToC1E8Positionbf>:
        1, 1, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 1, 1, // 2
        1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 1, // 1
        3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, // 0
    };//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
    */
ActionGoTo::ActionGoTo(Position goalPos, bool goBack1, float _precision) : MediumLevelAction(goalPos)
    f840:	b580      	push	{r7, lr}
    f842:	b084      	sub	sp, #16
    f844:	af00      	add	r7, sp, #0
    f846:	60f8      	str	r0, [r7, #12]
    f848:	f107 0004 	add.w	r0, r7, #4	; 0x4
    f84c:	e880 0006 	stmia.w	r0, {r1, r2}
    f850:	70fb      	strb	r3, [r7, #3]
    f852:	68fb      	ldr	r3, [r7, #12]
    f854:	4618      	mov	r0, r3
    f856:	f107 0304 	add.w	r3, r7, #4	; 0x4
    f85a:	e893 0006 	ldmia.w	r3, {r1, r2}
    f85e:	f007 f8d9 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
    f862:	68fa      	ldr	r2, [r7, #12]
    f864:	4b0f      	ldr	r3, [pc, #60]	(f8a4 <_ZN10ActionGoToC1E8Positionbf+0x64>)
    f866:	6013      	str	r3, [r2, #0]
    f868:	68fb      	ldr	r3, [r7, #12]
    f86a:	f103 0328 	add.w	r3, r3, #40	; 0x28
    f86e:	4618      	mov	r0, r3
    f870:	f7ff fa98 	bl	eda4 <_ZN8PositionC1Ev>
{
    goBack = goBack1;
    f874:	68fa      	ldr	r2, [r7, #12]
    f876:	78fb      	ldrb	r3, [r7, #3]
    f878:	7413      	strb	r3, [r2, #16]
    goalAngle = 0;
    f87a:	68fa      	ldr	r2, [r7, #12]
    f87c:	4b0a      	ldr	r3, [pc, #40]	(f8a8 <_ZN10ActionGoToC1E8Positionbf+0x68>)
    f87e:	6193      	str	r3, [r2, #24]
    goingCurve = false;
    f880:	68fa      	ldr	r2, [r7, #12]
    f882:	f04f 0300 	mov.w	r3, #0	; 0x0
    f886:	7713      	strb	r3, [r2, #28]
    curveFactor = 1;
    f888:	68fa      	ldr	r2, [r7, #12]
    f88a:	f04f 0301 	mov.w	r3, #1	; 0x1
    f88e:	6213      	str	r3, [r2, #32]
    precision = _precision;
    f890:	68fa      	ldr	r2, [r7, #12]
    f892:	69bb      	ldr	r3, [r7, #24]
    f894:	6253      	str	r3, [r2, #36]
}
    f896:	68fb      	ldr	r3, [r7, #12]
    f898:	4618      	mov	r0, r3
    f89a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f89e:	46bd      	mov	sp, r7
    f8a0:	bd80      	pop	{r7, pc}
    f8a2:	46c0      	nop			(mov r8, r8)
    f8a4:	000240e0 	.word	0x000240e0
    f8a8:	00000000 	.word	0x00000000

0000f8ac <_ZN10ActionGoToC2E8Positionbf>:
        1, 1, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 1, 1, // 2
        1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 1, // 1
        3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, // 0
    };//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
    */
ActionGoTo::ActionGoTo(Position goalPos, bool goBack1, float _precision) : MediumLevelAction(goalPos)
    f8ac:	b580      	push	{r7, lr}
    f8ae:	b084      	sub	sp, #16
    f8b0:	af00      	add	r7, sp, #0
    f8b2:	60f8      	str	r0, [r7, #12]
    f8b4:	f107 0004 	add.w	r0, r7, #4	; 0x4
    f8b8:	e880 0006 	stmia.w	r0, {r1, r2}
    f8bc:	70fb      	strb	r3, [r7, #3]
    f8be:	68fb      	ldr	r3, [r7, #12]
    f8c0:	4618      	mov	r0, r3
    f8c2:	f107 0304 	add.w	r3, r7, #4	; 0x4
    f8c6:	e893 0006 	ldmia.w	r3, {r1, r2}
    f8ca:	f007 f8a3 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
    f8ce:	68fa      	ldr	r2, [r7, #12]
    f8d0:	4b0f      	ldr	r3, [pc, #60]	(f910 <_ZN10ActionGoToC2E8Positionbf+0x64>)
    f8d2:	6013      	str	r3, [r2, #0]
    f8d4:	68fb      	ldr	r3, [r7, #12]
    f8d6:	f103 0328 	add.w	r3, r3, #40	; 0x28
    f8da:	4618      	mov	r0, r3
    f8dc:	f7ff fa62 	bl	eda4 <_ZN8PositionC1Ev>
{
    goBack = goBack1;
    f8e0:	68fa      	ldr	r2, [r7, #12]
    f8e2:	78fb      	ldrb	r3, [r7, #3]
    f8e4:	7413      	strb	r3, [r2, #16]
    goalAngle = 0;
    f8e6:	68fa      	ldr	r2, [r7, #12]
    f8e8:	4b0a      	ldr	r3, [pc, #40]	(f914 <_ZN10ActionGoToC2E8Positionbf+0x68>)
    f8ea:	6193      	str	r3, [r2, #24]
    goingCurve = false;
    f8ec:	68fa      	ldr	r2, [r7, #12]
    f8ee:	f04f 0300 	mov.w	r3, #0	; 0x0
    f8f2:	7713      	strb	r3, [r2, #28]
    curveFactor = 1;
    f8f4:	68fa      	ldr	r2, [r7, #12]
    f8f6:	f04f 0301 	mov.w	r3, #1	; 0x1
    f8fa:	6213      	str	r3, [r2, #32]
    precision = _precision;
    f8fc:	68fa      	ldr	r2, [r7, #12]
    f8fe:	69bb      	ldr	r3, [r7, #24]
    f900:	6253      	str	r3, [r2, #36]
}
    f902:	68fb      	ldr	r3, [r7, #12]
    f904:	4618      	mov	r0, r3
    f906:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f90a:	46bd      	mov	sp, r7
    f90c:	bd80      	pop	{r7, pc}
    f90e:	46c0      	nop			(mov r8, r8)
    f910:	000240e0 	.word	0x000240e0
    f914:	00000000 	.word	0x00000000

0000f918 <_ZN4Clap6updateEv>:
}


Clap::~Clap(){}

int Clap::update()
    f918:	b590      	push	{r4, r7, lr}
    f91a:	b085      	sub	sp, #20
    f91c:	af02      	add	r7, sp, #8
    f91e:	6078      	str	r0, [r7, #4]
{

    if (status == 0)
    f920:	687b      	ldr	r3, [r7, #4]
    f922:	68db      	ldr	r3, [r3, #12]
    f924:	2b00      	cmp	r3, #0
    f926:	d106      	bne.n	f936 <_ZN4Clap6updateEv+0x1e>
    {
#ifndef ROBOTHW
        qDebug() << "clap";
#endif
        status++;
    f928:	687b      	ldr	r3, [r7, #4]
    f92a:	68db      	ldr	r3, [r3, #12]
    f92c:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f930:	687b      	ldr	r3, [r7, #4]
    f932:	60da      	str	r2, [r3, #12]
    f934:	e105      	b.n	fb42 <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 1)
    f936:	687b      	ldr	r3, [r7, #4]
    f938:	68db      	ldr	r3, [r3, #12]
    f93a:	2b01      	cmp	r3, #1
    f93c:	d114      	bne.n	f968 <_ZN4Clap6updateEv+0x50>
    {
        StrategieV2::setCurrentGoal(goalPosition, goBack);
    f93e:	687b      	ldr	r3, [r7, #4]
    f940:	f893 c010 	ldrb.w	ip, [r3, #16]
    f944:	687a      	ldr	r2, [r7, #4]
    f946:	4b82      	ldr	r3, [pc, #520]	(fb50 <_ZN4Clap6updateEv+0x238>)
    f948:	9300      	str	r3, [sp, #0]
    f94a:	f102 0304 	add.w	r3, r2, #4	; 0x4
    f94e:	e893 0003 	ldmia.w	r3, {r0, r1}
    f952:	4662      	mov	r2, ip
    f954:	4b7f      	ldr	r3, [pc, #508]	(fb54 <_ZN4Clap6updateEv+0x23c>)
    f956:	f008 fa0d 	bl	17d74 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
    f95a:	687b      	ldr	r3, [r7, #4]
    f95c:	68db      	ldr	r3, [r3, #12]
    f95e:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f962:	687b      	ldr	r3, [r7, #4]
    f964:	60da      	str	r2, [r3, #12]
    f966:	e0ec      	b.n	fb42 <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 2)
    f968:	687b      	ldr	r3, [r7, #4]
    f96a:	68db      	ldr	r3, [r3, #12]
    f96c:	2b02      	cmp	r3, #2
    f96e:	d11a      	bne.n	f9a6 <_ZN4Clap6updateEv+0x8e>
    {
        if (Command::isNear(goalPosition))
    f970:	687b      	ldr	r3, [r7, #4]
    f972:	f103 0304 	add.w	r3, r3, #4	; 0x4
    f976:	e893 0003 	ldmia.w	r3, {r0, r1}
    f97a:	4a77      	ldr	r2, [pc, #476]	(fb58 <_ZN4Clap6updateEv+0x240>)
    f97c:	f7f8 fcda 	bl	8334 <_ZN7Command6isNearE8Positionf>
    f980:	4603      	mov	r3, r0
    f982:	2b00      	cmp	r3, #0
    f984:	f000 80dd 	beq.w	fb42 <_ZN4Clap6updateEv+0x22a>
        {
            StrategieV2::lookAt(positionArrivee);
    f988:	687b      	ldr	r3, [r7, #4]
    f98a:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f98e:	e893 0003 	ldmia.w	r3, {r0, r1}
    f992:	4a72      	ldr	r2, [pc, #456]	(fb5c <_ZN4Clap6updateEv+0x244>)
    f994:	f008 f956 	bl	17c44 <_ZN11StrategieV26lookAtE8Positionf>
            status++;
    f998:	687b      	ldr	r3, [r7, #4]
    f99a:	68db      	ldr	r3, [r3, #12]
    f99c:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f9a0:	687b      	ldr	r3, [r7, #4]
    f9a2:	60da      	str	r2, [r3, #12]
    f9a4:	e0cd      	b.n	fb42 <_ZN4Clap6updateEv+0x22a>
        }
    }

    else if (status == 3)
    f9a6:	687b      	ldr	r3, [r7, #4]
    f9a8:	68db      	ldr	r3, [r3, #12]
    f9aa:	2b03      	cmp	r3, #3
    f9ac:	d143      	bne.n	fa36 <_ZN4Clap6updateEv+0x11e>
    {
        if (Command::isLookingAt(positionArrivee))
    f9ae:	687b      	ldr	r3, [r7, #4]
    f9b0:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f9b4:	e893 0003 	ldmia.w	r3, {r0, r1}
    f9b8:	4a69      	ldr	r2, [pc, #420]	(fb60 <_ZN4Clap6updateEv+0x248>)
    f9ba:	f7f8 fbff 	bl	81bc <_ZN7Command11isLookingAtE8Positionf>
    f9be:	4603      	mov	r3, r0
    f9c0:	2b00      	cmp	r3, #0
    f9c2:	f000 80be 	beq.w	fb42 <_ZN4Clap6updateEv+0x22a>
        {
            //ouvrir le bras
#ifndef ROBOTHW
            qDebug() << "On ouvre le bras";
#endif
            if ((goalPosition.getX()-positionArrivee.getX())>0)
    f9c6:	687b      	ldr	r3, [r7, #4]
    f9c8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    f9cc:	4618      	mov	r0, r3
    f9ce:	f7ff fa25 	bl	ee1c <_ZNK8Position4getXEv>
    f9d2:	4604      	mov	r4, r0
    f9d4:	687b      	ldr	r3, [r7, #4]
    f9d6:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f9da:	4618      	mov	r0, r3
    f9dc:	f7ff fa1e 	bl	ee1c <_ZNK8Position4getXEv>
    f9e0:	4603      	mov	r3, r0
    f9e2:	4620      	mov	r0, r4
    f9e4:	4619      	mov	r1, r3
    f9e6:	f00d f971 	bl	1cccc <__aeabi_fsub>
    f9ea:	4603      	mov	r3, r0
    f9ec:	461a      	mov	r2, r3
    f9ee:	f04f 0300 	mov.w	r3, #0	; 0x0
    f9f2:	70fb      	strb	r3, [r7, #3]
    f9f4:	4610      	mov	r0, r2
    f9f6:	495b      	ldr	r1, [pc, #364]	(fb64 <_ZN4Clap6updateEv+0x24c>)
    f9f8:	f00d fc2c 	bl	1d254 <__aeabi_fcmpgt>
    f9fc:	4603      	mov	r3, r0
    f9fe:	2b00      	cmp	r3, #0
    fa00:	d002      	beq.n	fa08 <_ZN4Clap6updateEv+0xf0>
    fa02:	f04f 0301 	mov.w	r3, #1	; 0x1
    fa06:	70fb      	strb	r3, [r7, #3]
    fa08:	78fb      	ldrb	r3, [r7, #3]
    fa0a:	2b00      	cmp	r3, #0
    fa0c:	d006      	beq.n	fa1c <_ZN4Clap6updateEv+0x104>
                BrasLateraux::getRight()->expand();
    fa0e:	f7f5 fcc7 	bl	53a0 <_ZN12BrasLateraux8getRightEv>
    fa12:	4603      	mov	r3, r0
    fa14:	4618      	mov	r0, r3
    fa16:	f7f5 fbfb 	bl	5210 <_ZN12BrasLateraux6expandEv>
    fa1a:	e005      	b.n	fa28 <_ZN4Clap6updateEv+0x110>
            else
                BrasLateraux::getLeft()->expand();
    fa1c:	f7f5 fcd0 	bl	53c0 <_ZN12BrasLateraux7getLeftEv>
    fa20:	4603      	mov	r3, r0
    fa22:	4618      	mov	r0, r3
    fa24:	f7f5 fbf4 	bl	5210 <_ZN12BrasLateraux6expandEv>
            status++;
    fa28:	687b      	ldr	r3, [r7, #4]
    fa2a:	68db      	ldr	r3, [r3, #12]
    fa2c:	f103 0201 	add.w	r2, r3, #1	; 0x1
    fa30:	687b      	ldr	r3, [r7, #4]
    fa32:	60da      	str	r2, [r3, #12]
    fa34:	e085      	b.n	fb42 <_ZN4Clap6updateEv+0x22a>
        }
    }

    else if ((status <= 53) && (status > -1 ))    //On attend que le bras du robot s'ouvre : 50ms par incrémentation du status
    fa36:	687b      	ldr	r3, [r7, #4]
    fa38:	68db      	ldr	r3, [r3, #12]
    fa3a:	2b35      	cmp	r3, #53
    fa3c:	dc0a      	bgt.n	fa54 <_ZN4Clap6updateEv+0x13c>
    fa3e:	687b      	ldr	r3, [r7, #4]
    fa40:	68db      	ldr	r3, [r3, #12]
    fa42:	2b00      	cmp	r3, #0
    fa44:	db06      	blt.n	fa54 <_ZN4Clap6updateEv+0x13c>
    {
        status++;
    fa46:	687b      	ldr	r3, [r7, #4]
    fa48:	68db      	ldr	r3, [r3, #12]
    fa4a:	f103 0201 	add.w	r2, r3, #1	; 0x1
    fa4e:	687b      	ldr	r3, [r7, #4]
    fa50:	60da      	str	r2, [r3, #12]
    fa52:	e076      	b.n	fb42 <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 54)
    fa54:	687b      	ldr	r3, [r7, #4]
    fa56:	68db      	ldr	r3, [r3, #12]
    fa58:	2b36      	cmp	r3, #54
    fa5a:	d114      	bne.n	fa86 <_ZN4Clap6updateEv+0x16e>
    {
        StrategieV2::setCurrentGoal(positionArrivee, goBack);
    fa5c:	687b      	ldr	r3, [r7, #4]
    fa5e:	f893 c010 	ldrb.w	ip, [r3, #16]
    fa62:	687a      	ldr	r2, [r7, #4]
    fa64:	4b3a      	ldr	r3, [pc, #232]	(fb50 <_ZN4Clap6updateEv+0x238>)
    fa66:	9300      	str	r3, [sp, #0]
    fa68:	f102 0320 	add.w	r3, r2, #32	; 0x20
    fa6c:	e893 0003 	ldmia.w	r3, {r0, r1}
    fa70:	4662      	mov	r2, ip
    fa72:	4b38      	ldr	r3, [pc, #224]	(fb54 <_ZN4Clap6updateEv+0x23c>)
    fa74:	f008 f97e 	bl	17d74 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
    fa78:	687b      	ldr	r3, [r7, #4]
    fa7a:	68db      	ldr	r3, [r3, #12]
    fa7c:	f103 0201 	add.w	r2, r3, #1	; 0x1
    fa80:	687b      	ldr	r3, [r7, #4]
    fa82:	60da      	str	r2, [r3, #12]
    fa84:	e05d      	b.n	fb42 <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 55)
    fa86:	687b      	ldr	r3, [r7, #4]
    fa88:	68db      	ldr	r3, [r3, #12]
    fa8a:	2b37      	cmp	r3, #55
    fa8c:	d142      	bne.n	fb14 <_ZN4Clap6updateEv+0x1fc>
    {
        if (Command::isNear(positionArrivee))
    fa8e:	687b      	ldr	r3, [r7, #4]
    fa90:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fa94:	e893 0003 	ldmia.w	r3, {r0, r1}
    fa98:	4a2f      	ldr	r2, [pc, #188]	(fb58 <_ZN4Clap6updateEv+0x240>)
    fa9a:	f7f8 fc4b 	bl	8334 <_ZN7Command6isNearE8Positionf>
    fa9e:	4603      	mov	r3, r0
    faa0:	2b00      	cmp	r3, #0
    faa2:	d04e      	beq.n	fb42 <_ZN4Clap6updateEv+0x22a>
        {
            //fermer bras
#ifndef ROBOTHW
            qDebug() << "On ferme le bras";
#endif
            if ((goalPosition.getX()-positionArrivee.getX())>0)
    faa4:	687b      	ldr	r3, [r7, #4]
    faa6:	f103 0304 	add.w	r3, r3, #4	; 0x4
    faaa:	4618      	mov	r0, r3
    faac:	f7ff f9b6 	bl	ee1c <_ZNK8Position4getXEv>
    fab0:	4604      	mov	r4, r0
    fab2:	687b      	ldr	r3, [r7, #4]
    fab4:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fab8:	4618      	mov	r0, r3
    faba:	f7ff f9af 	bl	ee1c <_ZNK8Position4getXEv>
    fabe:	4603      	mov	r3, r0
    fac0:	4620      	mov	r0, r4
    fac2:	4619      	mov	r1, r3
    fac4:	f00d f902 	bl	1cccc <__aeabi_fsub>
    fac8:	4603      	mov	r3, r0
    faca:	461a      	mov	r2, r3
    facc:	f04f 0300 	mov.w	r3, #0	; 0x0
    fad0:	70bb      	strb	r3, [r7, #2]
    fad2:	4610      	mov	r0, r2
    fad4:	4923      	ldr	r1, [pc, #140]	(fb64 <_ZN4Clap6updateEv+0x24c>)
    fad6:	f00d fbbd 	bl	1d254 <__aeabi_fcmpgt>
    fada:	4603      	mov	r3, r0
    fadc:	2b00      	cmp	r3, #0
    fade:	d002      	beq.n	fae6 <_ZN4Clap6updateEv+0x1ce>
    fae0:	f04f 0301 	mov.w	r3, #1	; 0x1
    fae4:	70bb      	strb	r3, [r7, #2]
    fae6:	78bb      	ldrb	r3, [r7, #2]
    fae8:	2b00      	cmp	r3, #0
    faea:	d006      	beq.n	fafa <_ZN4Clap6updateEv+0x1e2>
                BrasLateraux::getLeft()->collapse();
    faec:	f7f5 fc68 	bl	53c0 <_ZN12BrasLateraux7getLeftEv>
    faf0:	4603      	mov	r3, r0
    faf2:	4618      	mov	r0, r3
    faf4:	f7f5 fb7c 	bl	51f0 <_ZN12BrasLateraux8collapseEv>
    faf8:	e005      	b.n	fb06 <_ZN4Clap6updateEv+0x1ee>
            else
                BrasLateraux::getRight()->collapse();
    fafa:	f7f5 fc51 	bl	53a0 <_ZN12BrasLateraux8getRightEv>
    fafe:	4603      	mov	r3, r0
    fb00:	4618      	mov	r0, r3
    fb02:	f7f5 fb75 	bl	51f0 <_ZN12BrasLateraux8collapseEv>
            status++;
    fb06:	687b      	ldr	r3, [r7, #4]
    fb08:	68db      	ldr	r3, [r3, #12]
    fb0a:	f103 0201 	add.w	r2, r3, #1	; 0x1
    fb0e:	687b      	ldr	r3, [r7, #4]
    fb10:	60da      	str	r2, [r3, #12]
    fb12:	e016      	b.n	fb42 <_ZN4Clap6updateEv+0x22a>
        }
    }

    else if ((status <= 105) && (status > -1))
    fb14:	687b      	ldr	r3, [r7, #4]
    fb16:	68db      	ldr	r3, [r3, #12]
    fb18:	2b69      	cmp	r3, #105
    fb1a:	dc0a      	bgt.n	fb32 <_ZN4Clap6updateEv+0x21a>
    fb1c:	687b      	ldr	r3, [r7, #4]
    fb1e:	68db      	ldr	r3, [r3, #12]
    fb20:	2b00      	cmp	r3, #0
    fb22:	db06      	blt.n	fb32 <_ZN4Clap6updateEv+0x21a>
    {
        status++;
    fb24:	687b      	ldr	r3, [r7, #4]
    fb26:	68db      	ldr	r3, [r3, #12]
    fb28:	f103 0201 	add.w	r2, r3, #1	; 0x1
    fb2c:	687b      	ldr	r3, [r7, #4]
    fb2e:	60da      	str	r2, [r3, #12]
    fb30:	e007      	b.n	fb42 <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 106){
    fb32:	687b      	ldr	r3, [r7, #4]
    fb34:	68db      	ldr	r3, [r3, #12]
    fb36:	2b6a      	cmp	r3, #106
    fb38:	d103      	bne.n	fb42 <_ZN4Clap6updateEv+0x22a>
        status = -1;
    fb3a:	687a      	ldr	r2, [r7, #4]
    fb3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fb40:	60d3      	str	r3, [r2, #12]
#ifndef ROBOTHW
        qDebug() << "Etape clap finie";
#endif
    }

    return status;
    fb42:	687b      	ldr	r3, [r7, #4]
    fb44:	68db      	ldr	r3, [r3, #12]
}
    fb46:	4618      	mov	r0, r3
    fb48:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fb4c:	46bd      	mov	sp, r7
    fb4e:	bd90      	pop	{r4, r7, pc}
    fb50:	c2c80000 	.word	0xc2c80000
    fb54:	40400000 	.word	0x40400000
    fb58:	41f00000 	.word	0x41f00000
    fb5c:	3cf5c28f 	.word	0x3cf5c28f
    fb60:	3db2b8c2 	.word	0x3db2b8c2
    fb64:	00000000 	.word	0x00000000

0000fb68 <_ZN4ClapD0Ev>:
    this->positionArrivee = positionArrivee;
    this->goBack = false;
}


Clap::~Clap(){}
    fb68:	b580      	push	{r7, lr}
    fb6a:	b082      	sub	sp, #8
    fb6c:	af00      	add	r7, sp, #0
    fb6e:	6078      	str	r0, [r7, #4]
    fb70:	687a      	ldr	r2, [r7, #4]
    fb72:	4b0a      	ldr	r3, [pc, #40]	(fb9c <_ZN4ClapD0Ev+0x34>)
    fb74:	6013      	str	r3, [r2, #0]
    fb76:	687b      	ldr	r3, [r7, #4]
    fb78:	4618      	mov	r0, r3
    fb7a:	f006 ff0b 	bl	16994 <_ZN17MediumLevelActionD2Ev>
    fb7e:	f04f 0301 	mov.w	r3, #1	; 0x1
    fb82:	b2db      	uxtb	r3, r3
    fb84:	2b00      	cmp	r3, #0
    fb86:	d002      	beq.n	fb8e <_ZN4ClapD0Ev+0x26>
    fb88:	6878      	ldr	r0, [r7, #4]
    fb8a:	f7ff f873 	bl	ec74 <_ZdlPv>
    fb8e:	687b      	ldr	r3, [r7, #4]
    fb90:	4618      	mov	r0, r3
    fb92:	f107 0708 	add.w	r7, r7, #8	; 0x8
    fb96:	46bd      	mov	sp, r7
    fb98:	bd80      	pop	{r7, pc}
    fb9a:	46c0      	nop			(mov r8, r8)
    fb9c:	00024100 	.word	0x00024100

0000fba0 <_ZN4ClapD1Ev>:
    fba0:	b580      	push	{r7, lr}
    fba2:	b082      	sub	sp, #8
    fba4:	af00      	add	r7, sp, #0
    fba6:	6078      	str	r0, [r7, #4]
    fba8:	687a      	ldr	r2, [r7, #4]
    fbaa:	4b0a      	ldr	r3, [pc, #40]	(fbd4 <_ZN4ClapD1Ev+0x34>)
    fbac:	6013      	str	r3, [r2, #0]
    fbae:	687b      	ldr	r3, [r7, #4]
    fbb0:	4618      	mov	r0, r3
    fbb2:	f006 feef 	bl	16994 <_ZN17MediumLevelActionD2Ev>
    fbb6:	f04f 0300 	mov.w	r3, #0	; 0x0
    fbba:	b2db      	uxtb	r3, r3
    fbbc:	2b00      	cmp	r3, #0
    fbbe:	d002      	beq.n	fbc6 <_ZN4ClapD1Ev+0x26>
    fbc0:	6878      	ldr	r0, [r7, #4]
    fbc2:	f7ff f857 	bl	ec74 <_ZdlPv>
    fbc6:	687b      	ldr	r3, [r7, #4]
    fbc8:	4618      	mov	r0, r3
    fbca:	f107 0708 	add.w	r7, r7, #8	; 0x8
    fbce:	46bd      	mov	sp, r7
    fbd0:	bd80      	pop	{r7, pc}
    fbd2:	46c0      	nop			(mov r8, r8)
    fbd4:	00024100 	.word	0x00024100

0000fbd8 <_ZN4ClapD2Ev>:
    fbd8:	b580      	push	{r7, lr}
    fbda:	b082      	sub	sp, #8
    fbdc:	af00      	add	r7, sp, #0
    fbde:	6078      	str	r0, [r7, #4]
    fbe0:	687a      	ldr	r2, [r7, #4]
    fbe2:	4b0a      	ldr	r3, [pc, #40]	(fc0c <_ZN4ClapD2Ev+0x34>)
    fbe4:	6013      	str	r3, [r2, #0]
    fbe6:	687b      	ldr	r3, [r7, #4]
    fbe8:	4618      	mov	r0, r3
    fbea:	f006 fed3 	bl	16994 <_ZN17MediumLevelActionD2Ev>
    fbee:	f04f 0300 	mov.w	r3, #0	; 0x0
    fbf2:	b2db      	uxtb	r3, r3
    fbf4:	2b00      	cmp	r3, #0
    fbf6:	d002      	beq.n	fbfe <_ZN4ClapD2Ev+0x26>
    fbf8:	6878      	ldr	r0, [r7, #4]
    fbfa:	f7ff f83b 	bl	ec74 <_ZdlPv>
    fbfe:	687b      	ldr	r3, [r7, #4]
    fc00:	4618      	mov	r0, r3
    fc02:	f107 0708 	add.w	r7, r7, #8	; 0x8
    fc06:	46bd      	mov	sp, r7
    fc08:	bd80      	pop	{r7, pc}
    fc0a:	46c0      	nop			(mov r8, r8)
    fc0c:	00024100 	.word	0x00024100

0000fc10 <_ZN4ClapC1E8PositionS0_>:
#include <QDebug>
#endif

Clap::Clap(){}

Clap::Clap(Position positionDepart, Position positionArrivee):MediumLevelAction(positionDepart)
    fc10:	b082      	sub	sp, #8
    fc12:	b580      	push	{r7, lr}
    fc14:	b084      	sub	sp, #16
    fc16:	af00      	add	r7, sp, #0
    fc18:	60f8      	str	r0, [r7, #12]
    fc1a:	f107 0004 	add.w	r0, r7, #4	; 0x4
    fc1e:	e880 0006 	stmia.w	r0, {r1, r2}
    fc22:	61fb      	str	r3, [r7, #28]
    fc24:	68fb      	ldr	r3, [r7, #12]
    fc26:	4618      	mov	r0, r3
    fc28:	f107 0304 	add.w	r3, r7, #4	; 0x4
    fc2c:	e893 0006 	ldmia.w	r3, {r1, r2}
    fc30:	f006 fef0 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
    fc34:	68fa      	ldr	r2, [r7, #12]
    fc36:	4b12      	ldr	r3, [pc, #72]	(fc80 <_ZN4ClapC1E8PositionS0_+0x70>)
    fc38:	6013      	str	r3, [r2, #0]
    fc3a:	68fb      	ldr	r3, [r7, #12]
    fc3c:	f103 0318 	add.w	r3, r3, #24	; 0x18
    fc40:	4618      	mov	r0, r3
    fc42:	f7ff f8af 	bl	eda4 <_ZN8PositionC1Ev>
    fc46:	68fb      	ldr	r3, [r7, #12]
    fc48:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fc4c:	4618      	mov	r0, r3
    fc4e:	f7ff f8a9 	bl	eda4 <_ZN8PositionC1Ev>
{
    this->positionArrivee = positionArrivee;
    fc52:	68fb      	ldr	r3, [r7, #12]
    fc54:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fc58:	4618      	mov	r0, r3
    fc5a:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    fc5e:	e893 0006 	ldmia.w	r3, {r1, r2}
    fc62:	f7ff f95b 	bl	ef1c <_ZN8PositionaSES_>
    this->goBack = false;
    fc66:	68fa      	ldr	r2, [r7, #12]
    fc68:	f04f 0300 	mov.w	r3, #0	; 0x0
    fc6c:	7413      	strb	r3, [r2, #16]
}
    fc6e:	68fb      	ldr	r3, [r7, #12]
    fc70:	4618      	mov	r0, r3
    fc72:	f107 0710 	add.w	r7, r7, #16	; 0x10
    fc76:	46bd      	mov	sp, r7
    fc78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    fc7c:	b002      	add	sp, #8
    fc7e:	4770      	bx	lr
    fc80:	00024100 	.word	0x00024100

0000fc84 <_ZN4ClapC2E8PositionS0_>:
#include <QDebug>
#endif

Clap::Clap(){}

Clap::Clap(Position positionDepart, Position positionArrivee):MediumLevelAction(positionDepart)
    fc84:	b082      	sub	sp, #8
    fc86:	b580      	push	{r7, lr}
    fc88:	b084      	sub	sp, #16
    fc8a:	af00      	add	r7, sp, #0
    fc8c:	60f8      	str	r0, [r7, #12]
    fc8e:	f107 0004 	add.w	r0, r7, #4	; 0x4
    fc92:	e880 0006 	stmia.w	r0, {r1, r2}
    fc96:	61fb      	str	r3, [r7, #28]
    fc98:	68fb      	ldr	r3, [r7, #12]
    fc9a:	4618      	mov	r0, r3
    fc9c:	f107 0304 	add.w	r3, r7, #4	; 0x4
    fca0:	e893 0006 	ldmia.w	r3, {r1, r2}
    fca4:	f006 feb6 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
    fca8:	68fa      	ldr	r2, [r7, #12]
    fcaa:	4b12      	ldr	r3, [pc, #72]	(fcf4 <_ZN4ClapC2E8PositionS0_+0x70>)
    fcac:	6013      	str	r3, [r2, #0]
    fcae:	68fb      	ldr	r3, [r7, #12]
    fcb0:	f103 0318 	add.w	r3, r3, #24	; 0x18
    fcb4:	4618      	mov	r0, r3
    fcb6:	f7ff f875 	bl	eda4 <_ZN8PositionC1Ev>
    fcba:	68fb      	ldr	r3, [r7, #12]
    fcbc:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fcc0:	4618      	mov	r0, r3
    fcc2:	f7ff f86f 	bl	eda4 <_ZN8PositionC1Ev>
{
    this->positionArrivee = positionArrivee;
    fcc6:	68fb      	ldr	r3, [r7, #12]
    fcc8:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fccc:	4618      	mov	r0, r3
    fcce:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    fcd2:	e893 0006 	ldmia.w	r3, {r1, r2}
    fcd6:	f7ff f921 	bl	ef1c <_ZN8PositionaSES_>
    this->goBack = false;
    fcda:	68fa      	ldr	r2, [r7, #12]
    fcdc:	f04f 0300 	mov.w	r3, #0	; 0x0
    fce0:	7413      	strb	r3, [r2, #16]
}
    fce2:	68fb      	ldr	r3, [r7, #12]
    fce4:	4618      	mov	r0, r3
    fce6:	f107 0710 	add.w	r7, r7, #16	; 0x10
    fcea:	46bd      	mov	sp, r7
    fcec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    fcf0:	b002      	add	sp, #8
    fcf2:	4770      	bx	lr
    fcf4:	00024100 	.word	0x00024100

0000fcf8 <_ZN4ClapC1Ev>:

#ifndef ROBOTHW
#include <QDebug>
#endif

Clap::Clap(){}
    fcf8:	b590      	push	{r4, r7, lr}
    fcfa:	b085      	sub	sp, #20
    fcfc:	af00      	add	r7, sp, #0
    fcfe:	6078      	str	r0, [r7, #4]
    fd00:	687c      	ldr	r4, [r7, #4]
    fd02:	f107 0308 	add.w	r3, r7, #8	; 0x8
    fd06:	4618      	mov	r0, r3
    fd08:	4910      	ldr	r1, [pc, #64]	(fd4c <_ZN4ClapC1Ev+0x54>)
    fd0a:	4a10      	ldr	r2, [pc, #64]	(fd4c <_ZN4ClapC1Ev+0x54>)
    fd0c:	f04f 0301 	mov.w	r3, #1	; 0x1
    fd10:	f7ff f870 	bl	edf4 <_ZN8PositionC1Effb>
    fd14:	4620      	mov	r0, r4
    fd16:	f107 0308 	add.w	r3, r7, #8	; 0x8
    fd1a:	e893 0006 	ldmia.w	r3, {r1, r2}
    fd1e:	f006 fe79 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
    fd22:	687a      	ldr	r2, [r7, #4]
    fd24:	4b0a      	ldr	r3, [pc, #40]	(fd50 <_ZN4ClapC1Ev+0x58>)
    fd26:	6013      	str	r3, [r2, #0]
    fd28:	687b      	ldr	r3, [r7, #4]
    fd2a:	f103 0318 	add.w	r3, r3, #24	; 0x18
    fd2e:	4618      	mov	r0, r3
    fd30:	f7ff f838 	bl	eda4 <_ZN8PositionC1Ev>
    fd34:	687b      	ldr	r3, [r7, #4]
    fd36:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fd3a:	4618      	mov	r0, r3
    fd3c:	f7ff f832 	bl	eda4 <_ZN8PositionC1Ev>
    fd40:	687b      	ldr	r3, [r7, #4]
    fd42:	4618      	mov	r0, r3
    fd44:	f107 0714 	add.w	r7, r7, #20	; 0x14
    fd48:	46bd      	mov	sp, r7
    fd4a:	bd90      	pop	{r4, r7, pc}
    fd4c:	00000000 	.word	0x00000000
    fd50:	00024100 	.word	0x00024100

0000fd54 <_ZN4ClapC2Ev>:
    fd54:	b590      	push	{r4, r7, lr}
    fd56:	b085      	sub	sp, #20
    fd58:	af00      	add	r7, sp, #0
    fd5a:	6078      	str	r0, [r7, #4]
    fd5c:	687c      	ldr	r4, [r7, #4]
    fd5e:	f107 0308 	add.w	r3, r7, #8	; 0x8
    fd62:	4618      	mov	r0, r3
    fd64:	4910      	ldr	r1, [pc, #64]	(fda8 <_ZN4ClapC2Ev+0x54>)
    fd66:	4a10      	ldr	r2, [pc, #64]	(fda8 <_ZN4ClapC2Ev+0x54>)
    fd68:	f04f 0301 	mov.w	r3, #1	; 0x1
    fd6c:	f7ff f842 	bl	edf4 <_ZN8PositionC1Effb>
    fd70:	4620      	mov	r0, r4
    fd72:	f107 0308 	add.w	r3, r7, #8	; 0x8
    fd76:	e893 0006 	ldmia.w	r3, {r1, r2}
    fd7a:	f006 fe4b 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
    fd7e:	687a      	ldr	r2, [r7, #4]
    fd80:	4b0a      	ldr	r3, [pc, #40]	(fdac <_ZN4ClapC2Ev+0x58>)
    fd82:	6013      	str	r3, [r2, #0]
    fd84:	687b      	ldr	r3, [r7, #4]
    fd86:	f103 0318 	add.w	r3, r3, #24	; 0x18
    fd8a:	4618      	mov	r0, r3
    fd8c:	f7ff f80a 	bl	eda4 <_ZN8PositionC1Ev>
    fd90:	687b      	ldr	r3, [r7, #4]
    fd92:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fd96:	4618      	mov	r0, r3
    fd98:	f7ff f804 	bl	eda4 <_ZN8PositionC1Ev>
    fd9c:	687b      	ldr	r3, [r7, #4]
    fd9e:	4618      	mov	r0, r3
    fda0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    fda4:	46bd      	mov	sp, r7
    fda6:	bd90      	pop	{r4, r7, pc}
    fda8:	00000000 	.word	0x00000000
    fdac:	00024100 	.word	0x00024100

0000fdb0 <_ZN14DeposerGobelet6updateEv>:

DeposerGobelet::DeposerGobelet(Position goalposition):MediumLevelAction(goalposition){}

DeposerGobelet::~DeposerGobelet(){}

int DeposerGobelet::update()
    fdb0:	b580      	push	{r7, lr}
    fdb2:	b084      	sub	sp, #16
    fdb4:	af02      	add	r7, sp, #8
    fdb6:	6078      	str	r0, [r7, #4]
{
    if (status == 0)
    fdb8:	687b      	ldr	r3, [r7, #4]
    fdba:	68db      	ldr	r3, [r3, #12]
    fdbc:	2b00      	cmp	r3, #0
    fdbe:	d106      	bne.n	fdce <_ZN14DeposerGobelet6updateEv+0x1e>
    {
#ifndef ROBOTHW
        qDebug() << "deposerGobelet";
#endif
        status++;
    fdc0:	687b      	ldr	r3, [r7, #4]
    fdc2:	68db      	ldr	r3, [r3, #12]
    fdc4:	f103 0201 	add.w	r2, r3, #1	; 0x1
    fdc8:	687b      	ldr	r3, [r7, #4]
    fdca:	60da      	str	r2, [r3, #12]
    fdcc:	e089      	b.n	fee2 <_ZN14DeposerGobelet6updateEv+0x132>
    }

    else if (status == 1)
    fdce:	687b      	ldr	r3, [r7, #4]
    fdd0:	68db      	ldr	r3, [r3, #12]
    fdd2:	2b01      	cmp	r3, #1
    fdd4:	d114      	bne.n	fe00 <_ZN14DeposerGobelet6updateEv+0x50>
    {
        StrategieV2::setCurrentGoal(this->goalPosition, this->goBack);
    fdd6:	687b      	ldr	r3, [r7, #4]
    fdd8:	f893 c010 	ldrb.w	ip, [r3, #16]
    fddc:	687a      	ldr	r2, [r7, #4]
    fdde:	4b44      	ldr	r3, [pc, #272]	(fef0 <_ZN14DeposerGobelet6updateEv+0x140>)
    fde0:	9300      	str	r3, [sp, #0]
    fde2:	f102 0304 	add.w	r3, r2, #4	; 0x4
    fde6:	e893 0003 	ldmia.w	r3, {r0, r1}
    fdea:	4662      	mov	r2, ip
    fdec:	4b41      	ldr	r3, [pc, #260]	(fef4 <_ZN14DeposerGobelet6updateEv+0x144>)
    fdee:	f007 ffc1 	bl	17d74 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
    fdf2:	687b      	ldr	r3, [r7, #4]
    fdf4:	68db      	ldr	r3, [r3, #12]
    fdf6:	f103 0201 	add.w	r2, r3, #1	; 0x1
    fdfa:	687b      	ldr	r3, [r7, #4]
    fdfc:	60da      	str	r2, [r3, #12]
    fdfe:	e070      	b.n	fee2 <_ZN14DeposerGobelet6updateEv+0x132>
    }

    else if (status == 2)
    fe00:	687b      	ldr	r3, [r7, #4]
    fe02:	68db      	ldr	r3, [r3, #12]
    fe04:	2b02      	cmp	r3, #2
    fe06:	d119      	bne.n	fe3c <_ZN14DeposerGobelet6updateEv+0x8c>
    {
        if (Command::isNear(goalPosition))
    fe08:	687b      	ldr	r3, [r7, #4]
    fe0a:	f103 0304 	add.w	r3, r3, #4	; 0x4
    fe0e:	e893 0003 	ldmia.w	r3, {r0, r1}
    fe12:	4a39      	ldr	r2, [pc, #228]	(fef8 <_ZN14DeposerGobelet6updateEv+0x148>)
    fe14:	f7f8 fa8e 	bl	8334 <_ZN7Command6isNearE8Positionf>
    fe18:	4603      	mov	r3, r0
    fe1a:	2b00      	cmp	r3, #0
    fe1c:	d061      	beq.n	fee2 <_ZN14DeposerGobelet6updateEv+0x132>
        {
            StrategieV2::lookAt(goalPosition);
    fe1e:	687b      	ldr	r3, [r7, #4]
    fe20:	f103 0304 	add.w	r3, r3, #4	; 0x4
    fe24:	e893 0003 	ldmia.w	r3, {r0, r1}
    fe28:	4a34      	ldr	r2, [pc, #208]	(fefc <_ZN14DeposerGobelet6updateEv+0x14c>)
    fe2a:	f007 ff0b 	bl	17c44 <_ZN11StrategieV26lookAtE8Positionf>
            status++;
    fe2e:	687b      	ldr	r3, [r7, #4]
    fe30:	68db      	ldr	r3, [r3, #12]
    fe32:	f103 0201 	add.w	r2, r3, #1	; 0x1
    fe36:	687b      	ldr	r3, [r7, #4]
    fe38:	60da      	str	r2, [r3, #12]
    fe3a:	e052      	b.n	fee2 <_ZN14DeposerGobelet6updateEv+0x132>
        }
    }

    else if (status == 3)
    fe3c:	687b      	ldr	r3, [r7, #4]
    fe3e:	68db      	ldr	r3, [r3, #12]
    fe40:	2b03      	cmp	r3, #3
    fe42:	d117      	bne.n	fe74 <_ZN14DeposerGobelet6updateEv+0xc4>
    {
        if (Command::isLookingAt(goalPosition))
    fe44:	687b      	ldr	r3, [r7, #4]
    fe46:	f103 0304 	add.w	r3, r3, #4	; 0x4
    fe4a:	e893 0003 	ldmia.w	r3, {r0, r1}
    fe4e:	4a2c      	ldr	r2, [pc, #176]	(ff00 <_ZN14DeposerGobelet6updateEv+0x150>)
    fe50:	f7f8 f9b4 	bl	81bc <_ZN7Command11isLookingAtE8Positionf>
    fe54:	4603      	mov	r3, r0
    fe56:	2b00      	cmp	r3, #0
    fe58:	d043      	beq.n	fee2 <_ZN14DeposerGobelet6updateEv+0x132>
        {
#ifndef ROBOTHW
            qDebug() << "On lache le gobelet";
#endif
            Ascenseur::getSingleton()->ouvrirAscenseur();
    fe5a:	f7f5 f905 	bl	5068 <_ZN9Ascenseur12getSingletonEv>
    fe5e:	4603      	mov	r3, r0
    fe60:	4618      	mov	r0, r3
    fe62:	f7f5 f8a9 	bl	4fb8 <_ZN9Ascenseur15ouvrirAscenseurEv>
        status++;
    fe66:	687b      	ldr	r3, [r7, #4]
    fe68:	68db      	ldr	r3, [r3, #12]
    fe6a:	f103 0201 	add.w	r2, r3, #1	; 0x1
    fe6e:	687b      	ldr	r3, [r7, #4]
    fe70:	60da      	str	r2, [r3, #12]
    fe72:	e036      	b.n	fee2 <_ZN14DeposerGobelet6updateEv+0x132>
        }
    }

    else if ((status <23) && (status > 0))  //On attend que les pinces aient laché le gobelet.
    fe74:	687b      	ldr	r3, [r7, #4]
    fe76:	68db      	ldr	r3, [r3, #12]
    fe78:	2b16      	cmp	r3, #22
    fe7a:	dc0a      	bgt.n	fe92 <_ZN14DeposerGobelet6updateEv+0xe2>
    fe7c:	687b      	ldr	r3, [r7, #4]
    fe7e:	68db      	ldr	r3, [r3, #12]
    fe80:	2b00      	cmp	r3, #0
    fe82:	dd06      	ble.n	fe92 <_ZN14DeposerGobelet6updateEv+0xe2>
    {
        status++;
    fe84:	687b      	ldr	r3, [r7, #4]
    fe86:	68db      	ldr	r3, [r3, #12]
    fe88:	f103 0201 	add.w	r2, r3, #1	; 0x1
    fe8c:	687b      	ldr	r3, [r7, #4]
    fe8e:	60da      	str	r2, [r3, #12]
    fe90:	e027      	b.n	fee2 <_ZN14DeposerGobelet6updateEv+0x132>
    }

    else if (status == 23)
    fe92:	687b      	ldr	r3, [r7, #4]
    fe94:	68db      	ldr	r3, [r3, #12]
    fe96:	2b17      	cmp	r3, #23
    fe98:	d10c      	bne.n	feb4 <_ZN14DeposerGobelet6updateEv+0x104>
    {
#ifndef ROBOTHW
            qDebug() << "On referme les pinces";
#endif
            Ascenseur::getSingleton()->fermerAscenseur();
    fe9a:	f7f5 f8e5 	bl	5068 <_ZN9Ascenseur12getSingletonEv>
    fe9e:	4603      	mov	r3, r0
    fea0:	4618      	mov	r0, r3
    fea2:	f7f5 f871 	bl	4f88 <_ZN9Ascenseur15fermerAscenseurEv>
            status++;
    fea6:	687b      	ldr	r3, [r7, #4]
    fea8:	68db      	ldr	r3, [r3, #12]
    feaa:	f103 0201 	add.w	r2, r3, #1	; 0x1
    feae:	687b      	ldr	r3, [r7, #4]
    feb0:	60da      	str	r2, [r3, #12]
    feb2:	e016      	b.n	fee2 <_ZN14DeposerGobelet6updateEv+0x132>
    }

    else if ((status <63) && (status > 0))  //On attend que l'ascenseur ferme ses pinces
    feb4:	687b      	ldr	r3, [r7, #4]
    feb6:	68db      	ldr	r3, [r3, #12]
    feb8:	2b3e      	cmp	r3, #62
    feba:	dc0a      	bgt.n	fed2 <_ZN14DeposerGobelet6updateEv+0x122>
    febc:	687b      	ldr	r3, [r7, #4]
    febe:	68db      	ldr	r3, [r3, #12]
    fec0:	2b00      	cmp	r3, #0
    fec2:	dd06      	ble.n	fed2 <_ZN14DeposerGobelet6updateEv+0x122>
    {
        status++;
    fec4:	687b      	ldr	r3, [r7, #4]
    fec6:	68db      	ldr	r3, [r3, #12]
    fec8:	f103 0201 	add.w	r2, r3, #1	; 0x1
    fecc:	687b      	ldr	r3, [r7, #4]
    fece:	60da      	str	r2, [r3, #12]
    fed0:	e007      	b.n	fee2 <_ZN14DeposerGobelet6updateEv+0x132>
    }

    else if (status == 63)
    fed2:	687b      	ldr	r3, [r7, #4]
    fed4:	68db      	ldr	r3, [r3, #12]
    fed6:	2b3f      	cmp	r3, #63
    fed8:	d103      	bne.n	fee2 <_ZN14DeposerGobelet6updateEv+0x132>
    {
        status = -1;
    feda:	687a      	ldr	r2, [r7, #4]
    fedc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fee0:	60d3      	str	r3, [r2, #12]
    }

    return status;
    fee2:	687b      	ldr	r3, [r7, #4]
    fee4:	68db      	ldr	r3, [r3, #12]
}
    fee6:	4618      	mov	r0, r3
    fee8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    feec:	46bd      	mov	sp, r7
    feee:	bd80      	pop	{r7, pc}
    fef0:	c2c80000 	.word	0xc2c80000
    fef4:	40400000 	.word	0x40400000
    fef8:	41f00000 	.word	0x41f00000
    fefc:	3cf5c28f 	.word	0x3cf5c28f
    ff00:	3db2b8c2 	.word	0x3db2b8c2

0000ff04 <_ZN14DeposerGobeletD0Ev>:

DeposerGobelet::DeposerGobelet(){}

DeposerGobelet::DeposerGobelet(Position goalposition):MediumLevelAction(goalposition){}

DeposerGobelet::~DeposerGobelet(){}
    ff04:	b580      	push	{r7, lr}
    ff06:	b082      	sub	sp, #8
    ff08:	af00      	add	r7, sp, #0
    ff0a:	6078      	str	r0, [r7, #4]
    ff0c:	687a      	ldr	r2, [r7, #4]
    ff0e:	4b0a      	ldr	r3, [pc, #40]	(ff38 <_ZN14DeposerGobeletD0Ev+0x34>)
    ff10:	6013      	str	r3, [r2, #0]
    ff12:	687b      	ldr	r3, [r7, #4]
    ff14:	4618      	mov	r0, r3
    ff16:	f006 fd3d 	bl	16994 <_ZN17MediumLevelActionD2Ev>
    ff1a:	f04f 0301 	mov.w	r3, #1	; 0x1
    ff1e:	b2db      	uxtb	r3, r3
    ff20:	2b00      	cmp	r3, #0
    ff22:	d002      	beq.n	ff2a <_ZN14DeposerGobeletD0Ev+0x26>
    ff24:	6878      	ldr	r0, [r7, #4]
    ff26:	f7fe fea5 	bl	ec74 <_ZdlPv>
    ff2a:	687b      	ldr	r3, [r7, #4]
    ff2c:	4618      	mov	r0, r3
    ff2e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ff32:	46bd      	mov	sp, r7
    ff34:	bd80      	pop	{r7, pc}
    ff36:	46c0      	nop			(mov r8, r8)
    ff38:	00024120 	.word	0x00024120

0000ff3c <_ZN14DeposerGobeletD1Ev>:
    ff3c:	b580      	push	{r7, lr}
    ff3e:	b082      	sub	sp, #8
    ff40:	af00      	add	r7, sp, #0
    ff42:	6078      	str	r0, [r7, #4]
    ff44:	687a      	ldr	r2, [r7, #4]
    ff46:	4b0a      	ldr	r3, [pc, #40]	(ff70 <_ZN14DeposerGobeletD1Ev+0x34>)
    ff48:	6013      	str	r3, [r2, #0]
    ff4a:	687b      	ldr	r3, [r7, #4]
    ff4c:	4618      	mov	r0, r3
    ff4e:	f006 fd21 	bl	16994 <_ZN17MediumLevelActionD2Ev>
    ff52:	f04f 0300 	mov.w	r3, #0	; 0x0
    ff56:	b2db      	uxtb	r3, r3
    ff58:	2b00      	cmp	r3, #0
    ff5a:	d002      	beq.n	ff62 <_ZN14DeposerGobeletD1Ev+0x26>
    ff5c:	6878      	ldr	r0, [r7, #4]
    ff5e:	f7fe fe89 	bl	ec74 <_ZdlPv>
    ff62:	687b      	ldr	r3, [r7, #4]
    ff64:	4618      	mov	r0, r3
    ff66:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ff6a:	46bd      	mov	sp, r7
    ff6c:	bd80      	pop	{r7, pc}
    ff6e:	46c0      	nop			(mov r8, r8)
    ff70:	00024120 	.word	0x00024120

0000ff74 <_ZN14DeposerGobeletD2Ev>:
    ff74:	b580      	push	{r7, lr}
    ff76:	b082      	sub	sp, #8
    ff78:	af00      	add	r7, sp, #0
    ff7a:	6078      	str	r0, [r7, #4]
    ff7c:	687a      	ldr	r2, [r7, #4]
    ff7e:	4b0a      	ldr	r3, [pc, #40]	(ffa8 <_ZN14DeposerGobeletD2Ev+0x34>)
    ff80:	6013      	str	r3, [r2, #0]
    ff82:	687b      	ldr	r3, [r7, #4]
    ff84:	4618      	mov	r0, r3
    ff86:	f006 fd05 	bl	16994 <_ZN17MediumLevelActionD2Ev>
    ff8a:	f04f 0300 	mov.w	r3, #0	; 0x0
    ff8e:	b2db      	uxtb	r3, r3
    ff90:	2b00      	cmp	r3, #0
    ff92:	d002      	beq.n	ff9a <_ZN14DeposerGobeletD2Ev+0x26>
    ff94:	6878      	ldr	r0, [r7, #4]
    ff96:	f7fe fe6d 	bl	ec74 <_ZdlPv>
    ff9a:	687b      	ldr	r3, [r7, #4]
    ff9c:	4618      	mov	r0, r3
    ff9e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ffa2:	46bd      	mov	sp, r7
    ffa4:	bd80      	pop	{r7, pc}
    ffa6:	46c0      	nop			(mov r8, r8)
    ffa8:	00024120 	.word	0x00024120

0000ffac <_ZN14DeposerGobeletC1E8Position>:
#include <QDebug>
#endif

DeposerGobelet::DeposerGobelet(){}

DeposerGobelet::DeposerGobelet(Position goalposition):MediumLevelAction(goalposition){}
    ffac:	b580      	push	{r7, lr}
    ffae:	b084      	sub	sp, #16
    ffb0:	af00      	add	r7, sp, #0
    ffb2:	60f8      	str	r0, [r7, #12]
    ffb4:	f107 0304 	add.w	r3, r7, #4	; 0x4
    ffb8:	e883 0006 	stmia.w	r3, {r1, r2}
    ffbc:	68fb      	ldr	r3, [r7, #12]
    ffbe:	4618      	mov	r0, r3
    ffc0:	f107 0304 	add.w	r3, r7, #4	; 0x4
    ffc4:	e893 0006 	ldmia.w	r3, {r1, r2}
    ffc8:	f006 fd24 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
    ffcc:	68fa      	ldr	r2, [r7, #12]
    ffce:	4b07      	ldr	r3, [pc, #28]	(ffec <_ZN14DeposerGobeletC1E8Position+0x40>)
    ffd0:	6013      	str	r3, [r2, #0]
    ffd2:	68fb      	ldr	r3, [r7, #12]
    ffd4:	f103 0318 	add.w	r3, r3, #24	; 0x18
    ffd8:	4618      	mov	r0, r3
    ffda:	f7fe fee3 	bl	eda4 <_ZN8PositionC1Ev>
    ffde:	68fb      	ldr	r3, [r7, #12]
    ffe0:	4618      	mov	r0, r3
    ffe2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ffe6:	46bd      	mov	sp, r7
    ffe8:	bd80      	pop	{r7, pc}
    ffea:	46c0      	nop			(mov r8, r8)
    ffec:	00024120 	.word	0x00024120

0000fff0 <_ZN14DeposerGobeletC2E8Position>:
    fff0:	b580      	push	{r7, lr}
    fff2:	b084      	sub	sp, #16
    fff4:	af00      	add	r7, sp, #0
    fff6:	60f8      	str	r0, [r7, #12]
    fff8:	f107 0304 	add.w	r3, r7, #4	; 0x4
    fffc:	e883 0006 	stmia.w	r3, {r1, r2}
   10000:	68fb      	ldr	r3, [r7, #12]
   10002:	4618      	mov	r0, r3
   10004:	f107 0304 	add.w	r3, r7, #4	; 0x4
   10008:	e893 0006 	ldmia.w	r3, {r1, r2}
   1000c:	f006 fd02 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   10010:	68fa      	ldr	r2, [r7, #12]
   10012:	4b07      	ldr	r3, [pc, #28]	(10030 <_ZN14DeposerGobeletC2E8Position+0x40>)
   10014:	6013      	str	r3, [r2, #0]
   10016:	68fb      	ldr	r3, [r7, #12]
   10018:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1001c:	4618      	mov	r0, r3
   1001e:	f7fe fec1 	bl	eda4 <_ZN8PositionC1Ev>
   10022:	68fb      	ldr	r3, [r7, #12]
   10024:	4618      	mov	r0, r3
   10026:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1002a:	46bd      	mov	sp, r7
   1002c:	bd80      	pop	{r7, pc}
   1002e:	46c0      	nop			(mov r8, r8)
   10030:	00024120 	.word	0x00024120

00010034 <_ZN14DeposerGobeletC1Ev>:

#ifndef ROBOTHW
#include <QDebug>
#endif

DeposerGobelet::DeposerGobelet(){}
   10034:	b590      	push	{r4, r7, lr}
   10036:	b085      	sub	sp, #20
   10038:	af00      	add	r7, sp, #0
   1003a:	6078      	str	r0, [r7, #4]
   1003c:	687c      	ldr	r4, [r7, #4]
   1003e:	f107 0308 	add.w	r3, r7, #8	; 0x8
   10042:	4618      	mov	r0, r3
   10044:	490d      	ldr	r1, [pc, #52]	(1007c <_ZN14DeposerGobeletC1Ev+0x48>)
   10046:	4a0d      	ldr	r2, [pc, #52]	(1007c <_ZN14DeposerGobeletC1Ev+0x48>)
   10048:	f04f 0301 	mov.w	r3, #1	; 0x1
   1004c:	f7fe fed2 	bl	edf4 <_ZN8PositionC1Effb>
   10050:	4620      	mov	r0, r4
   10052:	f107 0308 	add.w	r3, r7, #8	; 0x8
   10056:	e893 0006 	ldmia.w	r3, {r1, r2}
   1005a:	f006 fcdb 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   1005e:	687a      	ldr	r2, [r7, #4]
   10060:	4b07      	ldr	r3, [pc, #28]	(10080 <_ZN14DeposerGobeletC1Ev+0x4c>)
   10062:	6013      	str	r3, [r2, #0]
   10064:	687b      	ldr	r3, [r7, #4]
   10066:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1006a:	4618      	mov	r0, r3
   1006c:	f7fe fe9a 	bl	eda4 <_ZN8PositionC1Ev>
   10070:	687b      	ldr	r3, [r7, #4]
   10072:	4618      	mov	r0, r3
   10074:	f107 0714 	add.w	r7, r7, #20	; 0x14
   10078:	46bd      	mov	sp, r7
   1007a:	bd90      	pop	{r4, r7, pc}
   1007c:	00000000 	.word	0x00000000
   10080:	00024120 	.word	0x00024120

00010084 <_ZN14DeposerGobeletC2Ev>:
   10084:	b590      	push	{r4, r7, lr}
   10086:	b085      	sub	sp, #20
   10088:	af00      	add	r7, sp, #0
   1008a:	6078      	str	r0, [r7, #4]
   1008c:	687c      	ldr	r4, [r7, #4]
   1008e:	f107 0308 	add.w	r3, r7, #8	; 0x8
   10092:	4618      	mov	r0, r3
   10094:	490d      	ldr	r1, [pc, #52]	(100cc <_ZN14DeposerGobeletC2Ev+0x48>)
   10096:	4a0d      	ldr	r2, [pc, #52]	(100cc <_ZN14DeposerGobeletC2Ev+0x48>)
   10098:	f04f 0301 	mov.w	r3, #1	; 0x1
   1009c:	f7fe feaa 	bl	edf4 <_ZN8PositionC1Effb>
   100a0:	4620      	mov	r0, r4
   100a2:	f107 0308 	add.w	r3, r7, #8	; 0x8
   100a6:	e893 0006 	ldmia.w	r3, {r1, r2}
   100aa:	f006 fcb3 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   100ae:	687a      	ldr	r2, [r7, #4]
   100b0:	4b07      	ldr	r3, [pc, #28]	(100d0 <_ZN14DeposerGobeletC2Ev+0x4c>)
   100b2:	6013      	str	r3, [r2, #0]
   100b4:	687b      	ldr	r3, [r7, #4]
   100b6:	f103 0318 	add.w	r3, r3, #24	; 0x18
   100ba:	4618      	mov	r0, r3
   100bc:	f7fe fe72 	bl	eda4 <_ZN8PositionC1Ev>
   100c0:	687b      	ldr	r3, [r7, #4]
   100c2:	4618      	mov	r0, r3
   100c4:	f107 0714 	add.w	r7, r7, #20	; 0x14
   100c8:	46bd      	mov	sp, r7
   100ca:	bd90      	pop	{r4, r7, pc}
   100cc:	00000000 	.word	0x00000000
   100d0:	00024120 	.word	0x00024120

000100d4 <_ZN8DijkstraC2Ev>:
//http://fr.wikipedia.org/wiki/Algorithme_de_Dijkstra

#include "dijkstra.h"
#include <math.h>

Dijkstra::Dijkstra(){}
   100d4:	b480      	push	{r7}
   100d6:	b083      	sub	sp, #12
   100d8:	af00      	add	r7, sp, #0
   100da:	6078      	str	r0, [r7, #4]
   100dc:	687b      	ldr	r3, [r7, #4]
   100de:	4618      	mov	r0, r3
   100e0:	f107 070c 	add.w	r7, r7, #12	; 0xc
   100e4:	46bd      	mov	sp, r7
   100e6:	bc80      	pop	{r7}
   100e8:	4770      	bx	lr
   100ea:	46c0      	nop			(mov r8, r8)

000100ec <_ZN8DijkstraC1Ev>:
   100ec:	b480      	push	{r7}
   100ee:	b083      	sub	sp, #12
   100f0:	af00      	add	r7, sp, #0
   100f2:	6078      	str	r0, [r7, #4]
   100f4:	687b      	ldr	r3, [r7, #4]
   100f6:	4618      	mov	r0, r3
   100f8:	f107 070c 	add.w	r7, r7, #12	; 0xc
   100fc:	46bd      	mov	sp, r7
   100fe:	bc80      	pop	{r7}
   10100:	4770      	bx	lr
   10102:	46c0      	nop			(mov r8, r8)

00010104 <_ZN8DijkstraC2EPP5Etapei>:


Dijkstra::Dijkstra(Etape** tableauEtapes, int nbEtapes)
   10104:	b480      	push	{r7}
   10106:	b085      	sub	sp, #20
   10108:	af00      	add	r7, sp, #0
   1010a:	60f8      	str	r0, [r7, #12]
   1010c:	60b9      	str	r1, [r7, #8]
   1010e:	607a      	str	r2, [r7, #4]
{
    this->tableauEtapes = tableauEtapes;
   10110:	68fa      	ldr	r2, [r7, #12]
   10112:	68bb      	ldr	r3, [r7, #8]
   10114:	6013      	str	r3, [r2, #0]
    this->nombreEtapes = nbEtapes;
   10116:	68fa      	ldr	r2, [r7, #12]
   10118:	687b      	ldr	r3, [r7, #4]
   1011a:	6053      	str	r3, [r2, #4]
}
   1011c:	68fb      	ldr	r3, [r7, #12]
   1011e:	4618      	mov	r0, r3
   10120:	f107 0714 	add.w	r7, r7, #20	; 0x14
   10124:	46bd      	mov	sp, r7
   10126:	bc80      	pop	{r7}
   10128:	4770      	bx	lr
   1012a:	46c0      	nop			(mov r8, r8)

0001012c <_ZN8DijkstraC1EPP5Etapei>:
#include <math.h>

Dijkstra::Dijkstra(){}


Dijkstra::Dijkstra(Etape** tableauEtapes, int nbEtapes)
   1012c:	b480      	push	{r7}
   1012e:	b085      	sub	sp, #20
   10130:	af00      	add	r7, sp, #0
   10132:	60f8      	str	r0, [r7, #12]
   10134:	60b9      	str	r1, [r7, #8]
   10136:	607a      	str	r2, [r7, #4]
{
    this->tableauEtapes = tableauEtapes;
   10138:	68fa      	ldr	r2, [r7, #12]
   1013a:	68bb      	ldr	r3, [r7, #8]
   1013c:	6013      	str	r3, [r2, #0]
    this->nombreEtapes = nbEtapes;
   1013e:	68fa      	ldr	r2, [r7, #12]
   10140:	687b      	ldr	r3, [r7, #4]
   10142:	6053      	str	r3, [r2, #4]
}
   10144:	68fb      	ldr	r3, [r7, #12]
   10146:	4618      	mov	r0, r3
   10148:	f107 0714 	add.w	r7, r7, #20	; 0x14
   1014c:	46bd      	mov	sp, r7
   1014e:	bc80      	pop	{r7}
   10150:	4770      	bx	lr
   10152:	46c0      	nop			(mov r8, r8)

00010154 <_ZN8Dijkstra16getEtapeCouranteEv>:

Etape* Dijkstra::getEtapeCourante()
   10154:	b480      	push	{r7}
   10156:	b083      	sub	sp, #12
   10158:	af00      	add	r7, sp, #0
   1015a:	6078      	str	r0, [r7, #4]
{
    return tableauEtapes[this->numeroEtapeCourante];
   1015c:	687b      	ldr	r3, [r7, #4]
   1015e:	681a      	ldr	r2, [r3, #0]
   10160:	687b      	ldr	r3, [r7, #4]
   10162:	689b      	ldr	r3, [r3, #8]
   10164:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10168:	4413      	add	r3, r2
   1016a:	681b      	ldr	r3, [r3, #0]
}
   1016c:	4618      	mov	r0, r3
   1016e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10172:	46bd      	mov	sp, r7
   10174:	bc80      	pop	{r7}
   10176:	4770      	bx	lr

00010178 <_ZN8Dijkstra16setEtapeCouranteEi>:
                    pow(fabs((int) etapeDepart->getPosition().getX()-etapeArrivee->getPosition().getX()),2)+
                    pow(fabs((int) etapeDepart->getPosition().getY()-etapeArrivee->getPosition().getY()),2)
                    );
}

void Dijkstra::setEtapeCourante(int numeroEtapeCourante)
   10178:	b480      	push	{r7}
   1017a:	b083      	sub	sp, #12
   1017c:	af00      	add	r7, sp, #0
   1017e:	6078      	str	r0, [r7, #4]
   10180:	6039      	str	r1, [r7, #0]
{
    this->numeroEtapeCourante = numeroEtapeCourante;
   10182:	687a      	ldr	r2, [r7, #4]
   10184:	683b      	ldr	r3, [r7, #0]
   10186:	6093      	str	r3, [r2, #8]
}
   10188:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1018c:	46bd      	mov	sp, r7
   1018e:	bc80      	pop	{r7}
   10190:	4770      	bx	lr
   10192:	46c0      	nop			(mov r8, r8)

00010194 <_ZN8Dijkstra13etapeRapporteEP5Etape>:
int Dijkstra::getDistance(Etape* etape)
{
    return etape->getDistance();
}

bool Dijkstra::etapeRapporte(Etape* etape)
   10194:	b580      	push	{r7, lr}
   10196:	b082      	sub	sp, #8
   10198:	af00      	add	r7, sp, #0
   1019a:	6078      	str	r0, [r7, #4]
   1019c:	6039      	str	r1, [r7, #0]
{
    return (bool) etape->getScore();
   1019e:	6838      	ldr	r0, [r7, #0]
   101a0:	f000 fcdc 	bl	10b5c <_ZN5Etape8getScoreEv>
   101a4:	4603      	mov	r3, r0
   101a6:	2b00      	cmp	r3, #0
   101a8:	bf0c      	ite	eq
   101aa:	2300      	moveq	r3, #0
   101ac:	2301      	movne	r3, #1
   101ae:	b2db      	uxtb	r3, r3
}
   101b0:	4618      	mov	r0, r3
   101b2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   101b6:	46bd      	mov	sp, r7
   101b8:	bd80      	pop	{r7, pc}
   101ba:	46c0      	nop			(mov r8, r8)

000101bc <_ZN8Dijkstra11getDistanceEP5Etape>:
int Dijkstra::getDistance(int numeroEtape)
{
    return tableauEtapes[numeroEtape]->getDistance();
}

int Dijkstra::getDistance(Etape* etape)
   101bc:	b580      	push	{r7, lr}
   101be:	b082      	sub	sp, #8
   101c0:	af00      	add	r7, sp, #0
   101c2:	6078      	str	r0, [r7, #4]
   101c4:	6039      	str	r1, [r7, #0]
{
    return etape->getDistance();
   101c6:	6838      	ldr	r0, [r7, #0]
   101c8:	f000 fbb2 	bl	10930 <_ZN5Etape11getDistanceEv>
   101cc:	4603      	mov	r3, r0
}
   101ce:	4618      	mov	r0, r3
   101d0:	f107 0708 	add.w	r7, r7, #8	; 0x8
   101d4:	46bd      	mov	sp, r7
   101d6:	bd80      	pop	{r7, pc}

000101d8 <_ZN8Dijkstra11getDistanceEi>:
            }
        }
    }
}

int Dijkstra::getDistance(int numeroEtape)
   101d8:	b580      	push	{r7, lr}
   101da:	b082      	sub	sp, #8
   101dc:	af00      	add	r7, sp, #0
   101de:	6078      	str	r0, [r7, #4]
   101e0:	6039      	str	r1, [r7, #0]
{
    return tableauEtapes[numeroEtape]->getDistance();
   101e2:	687b      	ldr	r3, [r7, #4]
   101e4:	681a      	ldr	r2, [r3, #0]
   101e6:	683b      	ldr	r3, [r7, #0]
   101e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   101ec:	4413      	add	r3, r2
   101ee:	681b      	ldr	r3, [r3, #0]
   101f0:	4618      	mov	r0, r3
   101f2:	f000 fb9d 	bl	10930 <_ZN5Etape11getDistanceEv>
   101f6:	4603      	mov	r3, r0
}
   101f8:	4618      	mov	r0, r3
   101fa:	f107 0708 	add.w	r7, r7, #8	; 0x8
   101fe:	46bd      	mov	sp, r7
   10200:	bd80      	pop	{r7, pc}
   10202:	46c0      	nop			(mov r8, r8)

00010204 <_ZN8Dijkstra18mettreAJourVoisinsEi>:
    this->tableauEtapes[numeroEtapeLaPlusProche]->setState(classementEtapeMinimale);
    return numeroEtapeLaPlusProche;
}

//Met à jour les voisin de l'étape spécifiée.
void Dijkstra::mettreAJourVoisins(int numeroEtape)
   10204:	b580      	push	{r7, lr}
   10206:	b086      	sub	sp, #24
   10208:	af00      	add	r7, sp, #0
   1020a:	6078      	str	r0, [r7, #4]
   1020c:	6039      	str	r1, [r7, #0]
{
    int distanceEtapeCourante = this->tableauEtapes[numeroEtape]->getDistance();
   1020e:	687b      	ldr	r3, [r7, #4]
   10210:	681a      	ldr	r2, [r3, #0]
   10212:	683b      	ldr	r3, [r7, #0]
   10214:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10218:	4413      	add	r3, r2
   1021a:	681b      	ldr	r3, [r3, #0]
   1021c:	4618      	mov	r0, r3
   1021e:	f000 fb87 	bl	10930 <_ZN5Etape11getDistanceEv>
   10222:	4603      	mov	r3, r0
   10224:	60bb      	str	r3, [r7, #8]
    int distanceChildCourant;
    int distanceEtapeVersChild;

    for(int i = 0 ; i < this->tableauEtapes[numeroEtape]->getNbChildren() ; i++)
   10226:	f04f 0300 	mov.w	r3, #0	; 0x0
   1022a:	617b      	str	r3, [r7, #20]
   1022c:	e075      	b.n	1031a <_ZN8Dijkstra18mettreAJourVoisinsEi+0x116>
    {
        //Si cette étape n'est pas bannie
        //if(this->tableauEtapes[numeroEtape]->getChild(i)->getState() > -2 && ((int) this->tableauEtapes[numeroEtape]->getChild(i)->getEtapeType() < 20))
        if(!(this->tableauEtapes[numeroEtape]->getChild(i)->aEviter()))
   1022e:	687b      	ldr	r3, [r7, #4]
   10230:	681a      	ldr	r2, [r3, #0]
   10232:	683b      	ldr	r3, [r7, #0]
   10234:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10238:	4413      	add	r3, r2
   1023a:	681b      	ldr	r3, [r3, #0]
   1023c:	4618      	mov	r0, r3
   1023e:	6979      	ldr	r1, [r7, #20]
   10240:	f000 fb1e 	bl	10880 <_ZN5Etape8getChildEi>
   10244:	4603      	mov	r3, r0
   10246:	4618      	mov	r0, r3
   10248:	f000 fbda 	bl	10a00 <_ZN5Etape7aEviterEv>
   1024c:	4603      	mov	r3, r0
   1024e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   10252:	b2db      	uxtb	r3, r3
   10254:	2b00      	cmp	r3, #0
   10256:	d05c      	beq.n	10312 <_ZN8Dijkstra18mettreAJourVoisinsEi+0x10e>
        {
            distanceChildCourant = this->tableauEtapes[numeroEtape]->getChild(i)->getDistance();
   10258:	687b      	ldr	r3, [r7, #4]
   1025a:	681a      	ldr	r2, [r3, #0]
   1025c:	683b      	ldr	r3, [r7, #0]
   1025e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10262:	4413      	add	r3, r2
   10264:	681b      	ldr	r3, [r3, #0]
   10266:	4618      	mov	r0, r3
   10268:	6979      	ldr	r1, [r7, #20]
   1026a:	f000 fb09 	bl	10880 <_ZN5Etape8getChildEi>
   1026e:	4603      	mov	r3, r0
   10270:	4618      	mov	r0, r3
   10272:	f000 fb5d 	bl	10930 <_ZN5Etape11getDistanceEv>
   10276:	4603      	mov	r3, r0
   10278:	60fb      	str	r3, [r7, #12]
            distanceEtapeVersChild = this->tableauEtapes[numeroEtape]->getDistances()[i];
   1027a:	687b      	ldr	r3, [r7, #4]
   1027c:	681a      	ldr	r2, [r3, #0]
   1027e:	683b      	ldr	r3, [r7, #0]
   10280:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10284:	4413      	add	r3, r2
   10286:	681b      	ldr	r3, [r3, #0]
   10288:	4618      	mov	r0, r3
   1028a:	f000 fc07 	bl	10a9c <_ZN5Etape12getDistancesEv>
   1028e:	4602      	mov	r2, r0
   10290:	697b      	ldr	r3, [r7, #20]
   10292:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10296:	4413      	add	r3, r2
   10298:	681b      	ldr	r3, [r3, #0]
   1029a:	613b      	str	r3, [r7, #16]
            //distanceEtapeVersChild = calculDistanceDirect(this->tableauEtapes[numeroEtape]->getChild(i), this->tableauEtapes[numeroEtape]);
            if(!distanceEtapeVersChild)
   1029c:	693b      	ldr	r3, [r7, #16]
   1029e:	2b00      	cmp	r3, #0
   102a0:	d102      	bne.n	102a8 <_ZN8Dijkstra18mettreAJourVoisinsEi+0xa4>
                distanceEtapeVersChild = 1;//Pas de distances nulles
   102a2:	f04f 0301 	mov.w	r3, #1	; 0x1
   102a6:	613b      	str	r3, [r7, #16]
            //Si le chemin vers ce voisin est plus court en passant par l'étape actuelle, mise à jour de ce voisin
            //Si le voisin n'avait pas encore été atteind par un chemin, alors on le met à jour aussi (distanceChildCourant == -1)
            if(distanceChildCourant == -1 || distanceChildCourant > distanceEtapeCourante + distanceEtapeVersChild)
   102a8:	68fb      	ldr	r3, [r7, #12]
   102aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   102ae:	d005      	beq.n	102bc <_ZN8Dijkstra18mettreAJourVoisinsEi+0xb8>
   102b0:	68ba      	ldr	r2, [r7, #8]
   102b2:	693b      	ldr	r3, [r7, #16]
   102b4:	441a      	add	r2, r3
   102b6:	68fb      	ldr	r3, [r7, #12]
   102b8:	429a      	cmp	r2, r3
   102ba:	da2a      	bge.n	10312 <_ZN8Dijkstra18mettreAJourVoisinsEi+0x10e>
            {
                this->tableauEtapes[numeroEtape]->getChild(i)->setDistance(distanceEtapeCourante + distanceEtapeVersChild);
   102bc:	687b      	ldr	r3, [r7, #4]
   102be:	681a      	ldr	r2, [r3, #0]
   102c0:	683b      	ldr	r3, [r7, #0]
   102c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
   102c6:	4413      	add	r3, r2
   102c8:	681b      	ldr	r3, [r3, #0]
   102ca:	4618      	mov	r0, r3
   102cc:	6979      	ldr	r1, [r7, #20]
   102ce:	f000 fad7 	bl	10880 <_ZN5Etape8getChildEi>
   102d2:	4601      	mov	r1, r0
   102d4:	68ba      	ldr	r2, [r7, #8]
   102d6:	693b      	ldr	r3, [r7, #16]
   102d8:	4413      	add	r3, r2
   102da:	4608      	mov	r0, r1
   102dc:	4619      	mov	r1, r3
   102de:	f000 fb33 	bl	10948 <_ZN5Etape11setDistanceEi>
                this->tableauEtapes[numeroEtape]->getChild(i)->setParent(this->tableauEtapes[this->numeroEtapeCourante]);
   102e2:	687b      	ldr	r3, [r7, #4]
   102e4:	681a      	ldr	r2, [r3, #0]
   102e6:	683b      	ldr	r3, [r7, #0]
   102e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   102ec:	4413      	add	r3, r2
   102ee:	681b      	ldr	r3, [r3, #0]
   102f0:	4618      	mov	r0, r3
   102f2:	6979      	ldr	r1, [r7, #20]
   102f4:	f000 fac4 	bl	10880 <_ZN5Etape8getChildEi>
   102f8:	4601      	mov	r1, r0
   102fa:	687b      	ldr	r3, [r7, #4]
   102fc:	681a      	ldr	r2, [r3, #0]
   102fe:	687b      	ldr	r3, [r7, #4]
   10300:	689b      	ldr	r3, [r3, #8]
   10302:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10306:	4413      	add	r3, r2
   10308:	681b      	ldr	r3, [r3, #0]
   1030a:	4608      	mov	r0, r1
   1030c:	4619      	mov	r1, r3
   1030e:	f000 fb29 	bl	10964 <_ZN5Etape9setParentEPS_>
{
    int distanceEtapeCourante = this->tableauEtapes[numeroEtape]->getDistance();
    int distanceChildCourant;
    int distanceEtapeVersChild;

    for(int i = 0 ; i < this->tableauEtapes[numeroEtape]->getNbChildren() ; i++)
   10312:	697b      	ldr	r3, [r7, #20]
   10314:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10318:	617b      	str	r3, [r7, #20]
   1031a:	687b      	ldr	r3, [r7, #4]
   1031c:	681a      	ldr	r2, [r3, #0]
   1031e:	683b      	ldr	r3, [r7, #0]
   10320:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10324:	4413      	add	r3, r2
   10326:	681b      	ldr	r3, [r3, #0]
   10328:	4618      	mov	r0, r3
   1032a:	f000 fb29 	bl	10980 <_ZN5Etape13getNbChildrenEv>
   1032e:	4602      	mov	r2, r0
   10330:	697b      	ldr	r3, [r7, #20]
   10332:	429a      	cmp	r2, r3
   10334:	bfd4      	ite	le
   10336:	2300      	movle	r3, #0
   10338:	2301      	movgt	r3, #1
   1033a:	b2db      	uxtb	r3, r3
   1033c:	2b00      	cmp	r3, #0
   1033e:	f47f af76 	bne.w	1022e <_ZN8Dijkstra18mettreAJourVoisinsEi+0x2a>
                this->tableauEtapes[numeroEtape]->getChild(i)->setDistance(distanceEtapeCourante + distanceEtapeVersChild);
                this->tableauEtapes[numeroEtape]->getChild(i)->setParent(this->tableauEtapes[this->numeroEtapeCourante]);
            }
        }
    }
}
   10342:	f107 0718 	add.w	r7, r7, #24	; 0x18
   10346:	46bd      	mov	sp, r7
   10348:	bd80      	pop	{r7, pc}
   1034a:	46c0      	nop			(mov r8, r8)

0001034c <_ZN8Dijkstra11initialiserEv>:
    }
    return 0;*/
}

//On réinitialise le tableau avant le commencer une nouvelle recherche
void Dijkstra::initialiser()
   1034c:	b580      	push	{r7, lr}
   1034e:	b084      	sub	sp, #16
   10350:	af00      	add	r7, sp, #0
   10352:	6078      	str	r0, [r7, #4]
{
    for(int i = 0 ; i<this->nombreEtapes ; i++)
   10354:	f04f 0300 	mov.w	r3, #0	; 0x0
   10358:	60fb      	str	r3, [r7, #12]
   1035a:	e038      	b.n	103ce <_ZN8Dijkstra11initialiserEv+0x82>
    {
        this->tableauEtapes[i]->setDistance(-1);
   1035c:	687b      	ldr	r3, [r7, #4]
   1035e:	681a      	ldr	r2, [r3, #0]
   10360:	68fb      	ldr	r3, [r7, #12]
   10362:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10366:	4413      	add	r3, r2
   10368:	681b      	ldr	r3, [r3, #0]
   1036a:	4618      	mov	r0, r3
   1036c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10370:	f000 faea 	bl	10948 <_ZN5Etape11setDistanceEi>
        if(!(this->tableauEtapes[i]->aEviter()))//getState() != -2)
   10374:	687b      	ldr	r3, [r7, #4]
   10376:	681a      	ldr	r2, [r3, #0]
   10378:	68fb      	ldr	r3, [r7, #12]
   1037a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1037e:	4413      	add	r3, r2
   10380:	681b      	ldr	r3, [r3, #0]
   10382:	4618      	mov	r0, r3
   10384:	f000 fb3c 	bl	10a00 <_ZN5Etape7aEviterEv>
   10388:	4603      	mov	r3, r0
   1038a:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   1038e:	b2db      	uxtb	r3, r3
   10390:	2b00      	cmp	r3, #0
   10392:	d00c      	beq.n	103ae <_ZN8Dijkstra11initialiserEv+0x62>
        {
            this->tableauEtapes[i]->setState(-1);
   10394:	687b      	ldr	r3, [r7, #4]
   10396:	681a      	ldr	r2, [r3, #0]
   10398:	68fb      	ldr	r3, [r7, #12]
   1039a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1039e:	4413      	add	r3, r2
   103a0:	681b      	ldr	r3, [r3, #0]
   103a2:	4618      	mov	r0, r3
   103a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   103a8:	f000 fab4 	bl	10914 <_ZN5Etape8setStateEi>
   103ac:	e00b      	b.n	103c6 <_ZN8Dijkstra11initialiserEv+0x7a>
        }
        else
        {
            this->tableauEtapes[i]->setState(-2);
   103ae:	687b      	ldr	r3, [r7, #4]
   103b0:	681a      	ldr	r2, [r3, #0]
   103b2:	68fb      	ldr	r3, [r7, #12]
   103b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   103b8:	4413      	add	r3, r2
   103ba:	681b      	ldr	r3, [r3, #0]
   103bc:	4618      	mov	r0, r3
   103be:	f06f 0101 	mvn.w	r1, #1	; 0x1
   103c2:	f000 faa7 	bl	10914 <_ZN5Etape8setStateEi>
}

//On réinitialise le tableau avant le commencer une nouvelle recherche
void Dijkstra::initialiser()
{
    for(int i = 0 ; i<this->nombreEtapes ; i++)
   103c6:	68fb      	ldr	r3, [r7, #12]
   103c8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   103cc:	60fb      	str	r3, [r7, #12]
   103ce:	687b      	ldr	r3, [r7, #4]
   103d0:	685a      	ldr	r2, [r3, #4]
   103d2:	68fb      	ldr	r3, [r7, #12]
   103d4:	429a      	cmp	r2, r3
   103d6:	dcc1      	bgt.n	1035c <_ZN8Dijkstra11initialiserEv+0x10>
        else
        {
            this->tableauEtapes[i]->setState(-2);
        }
    }
    this->tableauEtapes[this->numeroEtapeCourante]->setDistance(0);
   103d8:	687b      	ldr	r3, [r7, #4]
   103da:	681a      	ldr	r2, [r3, #0]
   103dc:	687b      	ldr	r3, [r7, #4]
   103de:	689b      	ldr	r3, [r3, #8]
   103e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   103e4:	4413      	add	r3, r2
   103e6:	681b      	ldr	r3, [r3, #0]
   103e8:	4618      	mov	r0, r3
   103ea:	f04f 0100 	mov.w	r1, #0	; 0x0
   103ee:	f000 faab 	bl	10948 <_ZN5Etape11setDistanceEi>
    this->tableauEtapes[this->numeroEtapeCourante]->setState(0);
   103f2:	687b      	ldr	r3, [r7, #4]
   103f4:	681a      	ldr	r2, [r3, #0]
   103f6:	687b      	ldr	r3, [r7, #4]
   103f8:	689b      	ldr	r3, [r3, #8]
   103fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
   103fe:	4413      	add	r3, r2
   10400:	681b      	ldr	r3, [r3, #0]
   10402:	4618      	mov	r0, r3
   10404:	f04f 0100 	mov.w	r1, #0	; 0x0
   10408:	f000 fa84 	bl	10914 <_ZN5Etape8setStateEi>
}
   1040c:	f107 0710 	add.w	r7, r7, #16	; 0x10
   10410:	46bd      	mov	sp, r7
   10412:	bd80      	pop	{r7, pc}

00010414 <_ZN8Dijkstra10trouverMinEi>:

// Renvoi le numéro de l'étape la plus proche dont on n'a pas encore mis à jour les voisins
int Dijkstra::trouverMin(int classementEtapeMinimale)
   10414:	b580      	push	{r7, lr}
   10416:	b08c      	sub	sp, #48
   10418:	af00      	add	r7, sp, #0
   1041a:	6178      	str	r0, [r7, #20]
   1041c:	6139      	str	r1, [r7, #16]
{
    int minimum = -1;
   1041e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10422:	61bb      	str	r3, [r7, #24]
    int numeroEtapeLaPlusProche = -1;
   10424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10428:	61fb      	str	r3, [r7, #28]

    for(int i = 0 ; i < this->nombreEtapes ; i++)
   1042a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1042e:	623b      	str	r3, [r7, #32]
   10430:	e05c      	b.n	104ec <_ZN8Dijkstra10trouverMinEi+0xd8>
    {
        if(this->tableauEtapes[i]->getState()==-1 && (!(this->tableauEtapes[i]->aEviter())) && (!(this->tableauEtapes[i]->getDistance()==-1)) && (minimum == -1 || this->tableauEtapes[i]->getDistance() < minimum))
   10432:	697b      	ldr	r3, [r7, #20]
   10434:	681a      	ldr	r2, [r3, #0]
   10436:	6a3b      	ldr	r3, [r7, #32]
   10438:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1043c:	4413      	add	r3, r2
   1043e:	681b      	ldr	r3, [r3, #0]
   10440:	4618      	mov	r0, r3
   10442:	f000 fa5b 	bl	108fc <_ZN5Etape8getStateEv>
   10446:	4603      	mov	r3, r0
   10448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1044c:	d136      	bne.n	104bc <_ZN8Dijkstra10trouverMinEi+0xa8>
   1044e:	697b      	ldr	r3, [r7, #20]
   10450:	681a      	ldr	r2, [r3, #0]
   10452:	6a3b      	ldr	r3, [r7, #32]
   10454:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10458:	4413      	add	r3, r2
   1045a:	681b      	ldr	r3, [r3, #0]
   1045c:	4618      	mov	r0, r3
   1045e:	f000 facf 	bl	10a00 <_ZN5Etape7aEviterEv>
   10462:	4603      	mov	r3, r0
   10464:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   10468:	b2db      	uxtb	r3, r3
   1046a:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   1046e:	b2db      	uxtb	r3, r3
   10470:	2b00      	cmp	r3, #0
   10472:	d123      	bne.n	104bc <_ZN8Dijkstra10trouverMinEi+0xa8>
   10474:	697b      	ldr	r3, [r7, #20]
   10476:	681a      	ldr	r2, [r3, #0]
   10478:	6a3b      	ldr	r3, [r7, #32]
   1047a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1047e:	4413      	add	r3, r2
   10480:	681b      	ldr	r3, [r3, #0]
   10482:	4618      	mov	r0, r3
   10484:	f000 fa54 	bl	10930 <_ZN5Etape11getDistanceEv>
   10488:	4603      	mov	r3, r0
   1048a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1048e:	d015      	beq.n	104bc <_ZN8Dijkstra10trouverMinEi+0xa8>
   10490:	69bb      	ldr	r3, [r7, #24]
   10492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10496:	d00d      	beq.n	104b4 <_ZN8Dijkstra10trouverMinEi+0xa0>
   10498:	697b      	ldr	r3, [r7, #20]
   1049a:	681a      	ldr	r2, [r3, #0]
   1049c:	6a3b      	ldr	r3, [r7, #32]
   1049e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   104a2:	4413      	add	r3, r2
   104a4:	681b      	ldr	r3, [r3, #0]
   104a6:	4618      	mov	r0, r3
   104a8:	f000 fa42 	bl	10930 <_ZN5Etape11getDistanceEv>
   104ac:	4602      	mov	r2, r0
   104ae:	69bb      	ldr	r3, [r7, #24]
   104b0:	429a      	cmp	r2, r3
   104b2:	da03      	bge.n	104bc <_ZN8Dijkstra10trouverMinEi+0xa8>
   104b4:	f04f 0301 	mov.w	r3, #1	; 0x1
   104b8:	607b      	str	r3, [r7, #4]
   104ba:	e002      	b.n	104c2 <_ZN8Dijkstra10trouverMinEi+0xae>
   104bc:	f04f 0300 	mov.w	r3, #0	; 0x0
   104c0:	607b      	str	r3, [r7, #4]
   104c2:	687b      	ldr	r3, [r7, #4]
   104c4:	2b00      	cmp	r3, #0
   104c6:	d00d      	beq.n	104e4 <_ZN8Dijkstra10trouverMinEi+0xd0>
        {
            minimum = this->tableauEtapes[i]->getDistance();
   104c8:	697b      	ldr	r3, [r7, #20]
   104ca:	681a      	ldr	r2, [r3, #0]
   104cc:	6a3b      	ldr	r3, [r7, #32]
   104ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
   104d2:	4413      	add	r3, r2
   104d4:	681b      	ldr	r3, [r3, #0]
   104d6:	4618      	mov	r0, r3
   104d8:	f000 fa2a 	bl	10930 <_ZN5Etape11getDistanceEv>
   104dc:	4603      	mov	r3, r0
   104de:	61bb      	str	r3, [r7, #24]
            numeroEtapeLaPlusProche = i;
   104e0:	6a3b      	ldr	r3, [r7, #32]
   104e2:	61fb      	str	r3, [r7, #28]
int Dijkstra::trouverMin(int classementEtapeMinimale)
{
    int minimum = -1;
    int numeroEtapeLaPlusProche = -1;

    for(int i = 0 ; i < this->nombreEtapes ; i++)
   104e4:	6a3b      	ldr	r3, [r7, #32]
   104e6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   104ea:	623b      	str	r3, [r7, #32]
   104ec:	697b      	ldr	r3, [r7, #20]
   104ee:	685a      	ldr	r2, [r3, #4]
   104f0:	6a3b      	ldr	r3, [r7, #32]
   104f2:	429a      	cmp	r2, r3
   104f4:	dc9d      	bgt.n	10432 <_ZN8Dijkstra10trouverMinEi+0x1e>
    Etape* etape38= this->tableauEtapes[37];
    Etape* etape39= this->tableauEtapes[38];*/
    //Si on ne trouve pas d'étape la plus proche, alors c'est qu'on est coincé par les autres robots.
    //Il faut donc faire des allers-retours entre les différentes étapes possibles.
    //Pour cela, on change le status des étapes "robot vu" à "point de passage", puis relancer une passe de Dijkstra (récursion powa!!!).
    if(numeroEtapeLaPlusProche == -1)
   104f6:	69fb      	ldr	r3, [r7, #28]
   104f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   104fc:	f040 809a 	bne.w	10634 <_ZN8Dijkstra10trouverMinEi+0x220>
    {
        //On check si on a encore des points à marquer dans la zone ou on est confiné
        bool onEstCoinceDansUnEndroitPourri = true;
   10500:	f04f 0301 	mov.w	r3, #1	; 0x1
   10504:	f887 3027 	strb.w	r3, [r7, #39]
        for(int i = 0 ; i < this->nombreEtapes ; i++)
   10508:	f04f 0300 	mov.w	r3, #0	; 0x0
   1050c:	62bb      	str	r3, [r7, #40]
   1050e:	e051      	b.n	105b4 <_ZN8Dijkstra10trouverMinEi+0x1a0>
        {
            if(this->etapeRapporte(this->tableauEtapes[i]) && (!(this->tableauEtapes[i]->aEviter())) && this->tableauEtapes[i]->getDistance() != -1 && this->tableauEtapes[i]->getState() != -2)
   10510:	697b      	ldr	r3, [r7, #20]
   10512:	681a      	ldr	r2, [r3, #0]
   10514:	6abb      	ldr	r3, [r7, #40]
   10516:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1051a:	4413      	add	r3, r2
   1051c:	681b      	ldr	r3, [r3, #0]
   1051e:	6978      	ldr	r0, [r7, #20]
   10520:	4619      	mov	r1, r3
   10522:	f7ff fe37 	bl	10194 <_ZN8Dijkstra13etapeRapporteEP5Etape>
   10526:	4603      	mov	r3, r0
   10528:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   1052c:	b2db      	uxtb	r3, r3
   1052e:	2b00      	cmp	r3, #0
   10530:	d132      	bne.n	10598 <_ZN8Dijkstra10trouverMinEi+0x184>
   10532:	697b      	ldr	r3, [r7, #20]
   10534:	681a      	ldr	r2, [r3, #0]
   10536:	6abb      	ldr	r3, [r7, #40]
   10538:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1053c:	4413      	add	r3, r2
   1053e:	681b      	ldr	r3, [r3, #0]
   10540:	4618      	mov	r0, r3
   10542:	f000 fa5d 	bl	10a00 <_ZN5Etape7aEviterEv>
   10546:	4603      	mov	r3, r0
   10548:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   1054c:	b2db      	uxtb	r3, r3
   1054e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   10552:	b2db      	uxtb	r3, r3
   10554:	2b00      	cmp	r3, #0
   10556:	d11f      	bne.n	10598 <_ZN8Dijkstra10trouverMinEi+0x184>
   10558:	697b      	ldr	r3, [r7, #20]
   1055a:	681a      	ldr	r2, [r3, #0]
   1055c:	6abb      	ldr	r3, [r7, #40]
   1055e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10562:	4413      	add	r3, r2
   10564:	681b      	ldr	r3, [r3, #0]
   10566:	4618      	mov	r0, r3
   10568:	f000 f9e2 	bl	10930 <_ZN5Etape11getDistanceEv>
   1056c:	4603      	mov	r3, r0
   1056e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10572:	d011      	beq.n	10598 <_ZN8Dijkstra10trouverMinEi+0x184>
   10574:	697b      	ldr	r3, [r7, #20]
   10576:	681a      	ldr	r2, [r3, #0]
   10578:	6abb      	ldr	r3, [r7, #40]
   1057a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1057e:	4413      	add	r3, r2
   10580:	681b      	ldr	r3, [r3, #0]
   10582:	4618      	mov	r0, r3
   10584:	f000 f9ba 	bl	108fc <_ZN5Etape8getStateEv>
   10588:	4603      	mov	r3, r0
   1058a:	f113 0f02 	cmn.w	r3, #2	; 0x2
   1058e:	d003      	beq.n	10598 <_ZN8Dijkstra10trouverMinEi+0x184>
   10590:	f04f 0301 	mov.w	r3, #1	; 0x1
   10594:	60bb      	str	r3, [r7, #8]
   10596:	e002      	b.n	1059e <_ZN8Dijkstra10trouverMinEi+0x18a>
   10598:	f04f 0300 	mov.w	r3, #0	; 0x0
   1059c:	60bb      	str	r3, [r7, #8]
   1059e:	68bb      	ldr	r3, [r7, #8]
   105a0:	2b00      	cmp	r3, #0
   105a2:	d003      	beq.n	105ac <_ZN8Dijkstra10trouverMinEi+0x198>
            {
                onEstCoinceDansUnEndroitPourri = false;
   105a4:	f04f 0300 	mov.w	r3, #0	; 0x0
   105a8:	f887 3027 	strb.w	r3, [r7, #39]
    //Pour cela, on change le status des étapes "robot vu" à "point de passage", puis relancer une passe de Dijkstra (récursion powa!!!).
    if(numeroEtapeLaPlusProche == -1)
    {
        //On check si on a encore des points à marquer dans la zone ou on est confiné
        bool onEstCoinceDansUnEndroitPourri = true;
        for(int i = 0 ; i < this->nombreEtapes ; i++)
   105ac:	6abb      	ldr	r3, [r7, #40]
   105ae:	f103 0301 	add.w	r3, r3, #1	; 0x1
   105b2:	62bb      	str	r3, [r7, #40]
   105b4:	697b      	ldr	r3, [r7, #20]
   105b6:	685a      	ldr	r2, [r3, #4]
   105b8:	6abb      	ldr	r3, [r7, #40]
   105ba:	429a      	cmp	r2, r3
   105bc:	dca8      	bgt.n	10510 <_ZN8Dijkstra10trouverMinEi+0xfc>
            {
                onEstCoinceDansUnEndroitPourri = false;
            }
        }
        //Sinon on supprime les barrières en oubliant qu'on a vu des robots
        if(onEstCoinceDansUnEndroitPourri)
   105be:	f897 3027 	ldrb.w	r3, [r7, #39]
   105c2:	2b00      	cmp	r3, #0
   105c4:	d032      	beq.n	1062c <_ZN8Dijkstra10trouverMinEi+0x218>
        {
            for(int i = 0 ; i < this->nombreEtapes ; i++)
   105c6:	f04f 0300 	mov.w	r3, #0	; 0x0
   105ca:	62fb      	str	r3, [r7, #44]
   105cc:	e022      	b.n	10614 <_ZN8Dijkstra10trouverMinEi+0x200>
            {
                //On reset numeroEtapeEnCours à l'étape où on est actuellement
                if(this->tableauEtapes[i]->getDistance() == 0)
   105ce:	697b      	ldr	r3, [r7, #20]
   105d0:	681a      	ldr	r2, [r3, #0]
   105d2:	6afb      	ldr	r3, [r7, #44]
   105d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   105d8:	4413      	add	r3, r2
   105da:	681b      	ldr	r3, [r3, #0]
   105dc:	4618      	mov	r0, r3
   105de:	f000 f9a7 	bl	10930 <_ZN5Etape11getDistanceEv>
   105e2:	4603      	mov	r3, r0
   105e4:	2b00      	cmp	r3, #0
   105e6:	bf14      	ite	ne
   105e8:	2300      	movne	r3, #0
   105ea:	2301      	moveq	r3, #1
   105ec:	b2db      	uxtb	r3, r3
   105ee:	2b00      	cmp	r3, #0
   105f0:	d002      	beq.n	105f8 <_ZN8Dijkstra10trouverMinEi+0x1e4>
                {
                    this->numeroEtapeCourante = i; //-1?
   105f2:	697a      	ldr	r2, [r7, #20]
   105f4:	6afb      	ldr	r3, [r7, #44]
   105f6:	6093      	str	r3, [r2, #8]
                }

                this->tableauEtapes[i]->oublieRobotVu();
   105f8:	697b      	ldr	r3, [r7, #20]
   105fa:	681a      	ldr	r2, [r3, #0]
   105fc:	6afb      	ldr	r3, [r7, #44]
   105fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10602:	4413      	add	r3, r2
   10604:	681b      	ldr	r3, [r3, #0]
   10606:	4618      	mov	r0, r3
   10608:	f000 fa2e 	bl	10a68 <_ZN5Etape13oublieRobotVuEv>
            }
        }
        //Sinon on supprime les barrières en oubliant qu'on a vu des robots
        if(onEstCoinceDansUnEndroitPourri)
        {
            for(int i = 0 ; i < this->nombreEtapes ; i++)
   1060c:	6afb      	ldr	r3, [r7, #44]
   1060e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10612:	62fb      	str	r3, [r7, #44]
   10614:	697b      	ldr	r3, [r7, #20]
   10616:	685a      	ldr	r2, [r3, #4]
   10618:	6afb      	ldr	r3, [r7, #44]
   1061a:	429a      	cmp	r2, r3
   1061c:	dcd7      	bgt.n	105ce <_ZN8Dijkstra10trouverMinEi+0x1ba>
                }

                this->tableauEtapes[i]->oublieRobotVu();
            }

            this->run();
   1061e:	6978      	ldr	r0, [r7, #20]
   10620:	f000 f81c 	bl	1065c <_ZN8Dijkstra3runEv>
            return -1;
   10624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10628:	60fb      	str	r3, [r7, #12]
   1062a:	e010      	b.n	1064e <_ZN8Dijkstra10trouverMinEi+0x23a>
        }
        else
        {
            return -2;
   1062c:	f06f 0301 	mvn.w	r3, #1	; 0x1
   10630:	60fb      	str	r3, [r7, #12]
   10632:	e00c      	b.n	1064e <_ZN8Dijkstra10trouverMinEi+0x23a>
        }
    }
    this->tableauEtapes[numeroEtapeLaPlusProche]->setState(classementEtapeMinimale);
   10634:	697b      	ldr	r3, [r7, #20]
   10636:	681a      	ldr	r2, [r3, #0]
   10638:	69fb      	ldr	r3, [r7, #28]
   1063a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1063e:	4413      	add	r3, r2
   10640:	681b      	ldr	r3, [r3, #0]
   10642:	4618      	mov	r0, r3
   10644:	6939      	ldr	r1, [r7, #16]
   10646:	f000 f965 	bl	10914 <_ZN5Etape8setStateEi>
    return numeroEtapeLaPlusProche;
   1064a:	69fb      	ldr	r3, [r7, #28]
   1064c:	60fb      	str	r3, [r7, #12]
   1064e:	68fb      	ldr	r3, [r7, #12]
}
   10650:	4618      	mov	r0, r3
   10652:	f107 0730 	add.w	r7, r7, #48	; 0x30
   10656:	46bd      	mov	sp, r7
   10658:	bd80      	pop	{r7, pc}
   1065a:	46c0      	nop			(mov r8, r8)

0001065c <_ZN8Dijkstra3runEv>:
{
    this->numeroEtapeCourante = numeroEtapeCourante;
}

//Calcul des distances de toutes les étapes par rapport à l'étape en cours (étape origine)
int Dijkstra::run()
   1065c:	b580      	push	{r7, lr}
   1065e:	b084      	sub	sp, #16
   10660:	af00      	add	r7, sp, #0
   10662:	6078      	str	r0, [r7, #4]
    else
        return 0;*/



    int min = -2;
   10664:	f06f 0301 	mvn.w	r3, #1	; 0x1
   10668:	60bb      	str	r3, [r7, #8]
    initialiser();
   1066a:	6878      	ldr	r0, [r7, #4]
   1066c:	f7ff fe6e 	bl	1034c <_ZN8Dijkstra11initialiserEv>

    mettreAJourVoisins(this->numeroEtapeCourante);
   10670:	687b      	ldr	r3, [r7, #4]
   10672:	689b      	ldr	r3, [r3, #8]
   10674:	6878      	ldr	r0, [r7, #4]
   10676:	4619      	mov	r1, r3
   10678:	f7ff fdc4 	bl	10204 <_ZN8Dijkstra18mettreAJourVoisinsEi>

    for(int i = 0 ; i < this->nombreEtapes-2 ; i++)
   1067c:	f04f 0300 	mov.w	r3, #0	; 0x0
   10680:	60fb      	str	r3, [r7, #12]
   10682:	e025      	b.n	106d0 <_ZN8Dijkstra3runEv+0x74>
    {
        min = trouverMin(i+1);
   10684:	68fb      	ldr	r3, [r7, #12]
   10686:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1068a:	6878      	ldr	r0, [r7, #4]
   1068c:	4619      	mov	r1, r3
   1068e:	f7ff fec1 	bl	10414 <_ZN8Dijkstra10trouverMinEi>
   10692:	4603      	mov	r3, r0
   10694:	60bb      	str	r3, [r7, #8]
        // Si min vaut -1, c'est que le robot était coincé, et donc qu'il a fallut réinitialiser la recherche
        // Donc on arrete la recherche en cours, une nouvelle a été lancée
        if(min == -1)
   10696:	68bb      	ldr	r3, [r7, #8]
   10698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1069c:	d103      	bne.n	106a6 <_ZN8Dijkstra3runEv+0x4a>
        {
            return -1;
   1069e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   106a2:	603b      	str	r3, [r7, #0]
   106a4:	e01e      	b.n	106e4 <_ZN8Dijkstra3runEv+0x88>
        }
        if(min == -2)
   106a6:	68bb      	ldr	r3, [r7, #8]
   106a8:	f113 0f02 	cmn.w	r3, #2	; 0x2
   106ac:	d103      	bne.n	106b6 <_ZN8Dijkstra3runEv+0x5a>
        {
            return 0;
   106ae:	f04f 0300 	mov.w	r3, #0	; 0x0
   106b2:	603b      	str	r3, [r7, #0]
   106b4:	e016      	b.n	106e4 <_ZN8Dijkstra3runEv+0x88>
        }
        this->numeroEtapeCourante = min;
   106b6:	687a      	ldr	r2, [r7, #4]
   106b8:	68bb      	ldr	r3, [r7, #8]
   106ba:	6093      	str	r3, [r2, #8]
        mettreAJourVoisins(this->numeroEtapeCourante);
   106bc:	687b      	ldr	r3, [r7, #4]
   106be:	689b      	ldr	r3, [r3, #8]
   106c0:	6878      	ldr	r0, [r7, #4]
   106c2:	4619      	mov	r1, r3
   106c4:	f7ff fd9e 	bl	10204 <_ZN8Dijkstra18mettreAJourVoisinsEi>
    int min = -2;
    initialiser();

    mettreAJourVoisins(this->numeroEtapeCourante);

    for(int i = 0 ; i < this->nombreEtapes-2 ; i++)
   106c8:	68fb      	ldr	r3, [r7, #12]
   106ca:	f103 0301 	add.w	r3, r3, #1	; 0x1
   106ce:	60fb      	str	r3, [r7, #12]
   106d0:	687b      	ldr	r3, [r7, #4]
   106d2:	685b      	ldr	r3, [r3, #4]
   106d4:	f1a3 0202 	sub.w	r2, r3, #2	; 0x2
   106d8:	68fb      	ldr	r3, [r7, #12]
   106da:	429a      	cmp	r2, r3
   106dc:	dcd2      	bgt.n	10684 <_ZN8Dijkstra3runEv+0x28>
            return 0;
        }
        this->numeroEtapeCourante = min;
        mettreAJourVoisins(this->numeroEtapeCourante);
    }
    return 0;
   106de:	f04f 0300 	mov.w	r3, #0	; 0x0
   106e2:	603b      	str	r3, [r7, #0]
   106e4:	683b      	ldr	r3, [r7, #0]
}
   106e6:	4618      	mov	r0, r3
   106e8:	f107 0710 	add.w	r7, r7, #16	; 0x10
   106ec:	46bd      	mov	sp, r7
   106ee:	bd80      	pop	{r7, pc}

000106f0 <_ZN8Dijkstra7miniRunEi>:

int Dijkstra::miniRun(int step)
   106f0:	b580      	push	{r7, lr}
   106f2:	b086      	sub	sp, #24
   106f4:	af00      	add	r7, sp, #0
   106f6:	60f8      	str	r0, [r7, #12]
   106f8:	60b9      	str	r1, [r7, #8]
{
    if (step == 0)
   106fa:	68bb      	ldr	r3, [r7, #8]
   106fc:	2b00      	cmp	r3, #0
   106fe:	d103      	bne.n	10708 <_ZN8Dijkstra7miniRunEi+0x18>
    {
        initialiser();
   10700:	68f8      	ldr	r0, [r7, #12]
   10702:	f7ff fe23 	bl	1034c <_ZN8Dijkstra11initialiserEv>
   10706:	e02d      	b.n	10764 <_ZN8Dijkstra7miniRunEi+0x74>
    }
    else if(step < this->nombreEtapes-2)
   10708:	68fb      	ldr	r3, [r7, #12]
   1070a:	685b      	ldr	r3, [r3, #4]
   1070c:	f1a3 0202 	sub.w	r2, r3, #2	; 0x2
   10710:	68bb      	ldr	r3, [r7, #8]
   10712:	429a      	cmp	r2, r3
   10714:	dd22      	ble.n	1075c <_ZN8Dijkstra7miniRunEi+0x6c>
    {
        int min = trouverMin(step+1);
   10716:	68bb      	ldr	r3, [r7, #8]
   10718:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1071c:	68f8      	ldr	r0, [r7, #12]
   1071e:	4619      	mov	r1, r3
   10720:	f7ff fe78 	bl	10414 <_ZN8Dijkstra10trouverMinEi>
   10724:	4603      	mov	r3, r0
   10726:	617b      	str	r3, [r7, #20]
        // Si min vaut -1, c'est que le robot était coincé, et donc qu'il a fallut réinitialiser la recherche
        // Donc on arrete la recherche en cours, une nouvelle a été lancée
        if(min == -1)
   10728:	697b      	ldr	r3, [r7, #20]
   1072a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1072e:	d103      	bne.n	10738 <_ZN8Dijkstra7miniRunEi+0x48>
        {
            return -1;
   10730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10734:	607b      	str	r3, [r7, #4]
   10736:	e018      	b.n	1076a <_ZN8Dijkstra7miniRunEi+0x7a>
        }
        if(min == -2)
   10738:	697b      	ldr	r3, [r7, #20]
   1073a:	f113 0f02 	cmn.w	r3, #2	; 0x2
   1073e:	d103      	bne.n	10748 <_ZN8Dijkstra7miniRunEi+0x58>
        {
            return 0;
   10740:	f04f 0300 	mov.w	r3, #0	; 0x0
   10744:	607b      	str	r3, [r7, #4]
   10746:	e010      	b.n	1076a <_ZN8Dijkstra7miniRunEi+0x7a>
        }
        this->numeroEtapeCourante = min;
   10748:	68fa      	ldr	r2, [r7, #12]
   1074a:	697b      	ldr	r3, [r7, #20]
   1074c:	6093      	str	r3, [r2, #8]
        mettreAJourVoisins(this->numeroEtapeCourante);
   1074e:	68fb      	ldr	r3, [r7, #12]
   10750:	689b      	ldr	r3, [r3, #8]
   10752:	68f8      	ldr	r0, [r7, #12]
   10754:	4619      	mov	r1, r3
   10756:	f7ff fd55 	bl	10204 <_ZN8Dijkstra18mettreAJourVoisinsEi>
   1075a:	e003      	b.n	10764 <_ZN8Dijkstra7miniRunEi+0x74>
    }
    else
    {
        return 0;
   1075c:	f04f 0300 	mov.w	r3, #0	; 0x0
   10760:	607b      	str	r3, [r7, #4]
   10762:	e002      	b.n	1076a <_ZN8Dijkstra7miniRunEi+0x7a>
    }
    return -2;
   10764:	f06f 0301 	mvn.w	r3, #1	; 0x1
   10768:	607b      	str	r3, [r7, #4]
   1076a:	687b      	ldr	r3, [r7, #4]
        }
        this->numeroEtapeCourante = min;
        mettreAJourVoisins(this->numeroEtapeCourante);
    }
    return 0;*/
}
   1076c:	4618      	mov	r0, r3
   1076e:	f107 0718 	add.w	r7, r7, #24	; 0x18
   10772:	46bd      	mov	sp, r7
   10774:	bd80      	pop	{r7, pc}
   10776:	46c0      	nop			(mov r8, r8)

00010778 <_ZN8Dijkstra20calculDistanceDirectEP5EtapeS1_>:
Etape* Dijkstra::getEtapeCourante()
{
    return tableauEtapes[this->numeroEtapeCourante];
}

int Dijkstra::calculDistanceDirect(Etape* etapeDepart, Etape* etapeArrivee)
   10778:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   1077c:	b08b      	sub	sp, #44
   1077e:	af00      	add	r7, sp, #0
   10780:	6078      	str	r0, [r7, #4]
   10782:	6039      	str	r1, [r7, #0]
    //Une solution, vu que le STM32-H405 a plein de mémoire, serait de pré-calculer les distances, et de les stocker.
    //Cela permettrait aussi d'ajuster certaines distances si besoin, pour préférer certains passages à d'autres
    return sqrt(
                    pow(fabs((int) etapeDepart->getPosition().getX()-etapeArrivee->getPosition().getX()),2)+
                    pow(fabs((int) etapeDepart->getPosition().getY()-etapeArrivee->getPosition().getY()),2)
                    );
   10784:	f107 0308 	add.w	r3, r7, #8	; 0x8
   10788:	4618      	mov	r0, r3
   1078a:	6879      	ldr	r1, [r7, #4]
   1078c:	f000 f8a2 	bl	108d4 <_ZN5Etape11getPositionEv>
   10790:	f107 0308 	add.w	r3, r7, #8	; 0x8
   10794:	4618      	mov	r0, r3
   10796:	f7fe fb41 	bl	ee1c <_ZNK8Position4getXEv>
   1079a:	4603      	mov	r3, r0
   1079c:	4618      	mov	r0, r3
   1079e:	f00c fd63 	bl	1d268 <__aeabi_f2iz>
   107a2:	4603      	mov	r3, r0
   107a4:	4618      	mov	r0, r3
   107a6:	f00c fb47 	bl	1ce38 <__aeabi_i2f>
   107aa:	4604      	mov	r4, r0
   107ac:	f107 0310 	add.w	r3, r7, #16	; 0x10
   107b0:	4618      	mov	r0, r3
   107b2:	6839      	ldr	r1, [r7, #0]
   107b4:	f000 f88e 	bl	108d4 <_ZN5Etape11getPositionEv>
   107b8:	f107 0310 	add.w	r3, r7, #16	; 0x10
   107bc:	4618      	mov	r0, r3
   107be:	f7fe fb2d 	bl	ee1c <_ZNK8Position4getXEv>
   107c2:	4603      	mov	r3, r0
   107c4:	4620      	mov	r0, r4
   107c6:	4619      	mov	r1, r3
   107c8:	f00c fa80 	bl	1cccc <__aeabi_fsub>
   107cc:	4603      	mov	r3, r0
   107ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   107d2:	4618      	mov	r0, r3
   107d4:	f00b ff12 	bl	1c5fc <__aeabi_f2d>
   107d8:	4602      	mov	r2, r0
   107da:	460b      	mov	r3, r1
   107dc:	4610      	mov	r0, r2
   107de:	4619      	mov	r1, r3
   107e0:	f00b ff60 	bl	1c6a4 <__aeabi_dmul>
   107e4:	4602      	mov	r2, r0
   107e6:	460b      	mov	r3, r1
   107e8:	4690      	mov	r8, r2
   107ea:	4699      	mov	r9, r3
   107ec:	f107 0318 	add.w	r3, r7, #24	; 0x18
   107f0:	4618      	mov	r0, r3
   107f2:	6879      	ldr	r1, [r7, #4]
   107f4:	f000 f86e 	bl	108d4 <_ZN5Etape11getPositionEv>
   107f8:	f107 0318 	add.w	r3, r7, #24	; 0x18
   107fc:	4618      	mov	r0, r3
   107fe:	f7fe fb19 	bl	ee34 <_ZNK8Position4getYEv>
   10802:	4603      	mov	r3, r0
   10804:	4618      	mov	r0, r3
   10806:	f00c fd2f 	bl	1d268 <__aeabi_f2iz>
   1080a:	4603      	mov	r3, r0
   1080c:	4618      	mov	r0, r3
   1080e:	f00c fb13 	bl	1ce38 <__aeabi_i2f>
   10812:	4604      	mov	r4, r0
   10814:	f107 0320 	add.w	r3, r7, #32	; 0x20
   10818:	4618      	mov	r0, r3
   1081a:	6839      	ldr	r1, [r7, #0]
   1081c:	f000 f85a 	bl	108d4 <_ZN5Etape11getPositionEv>
   10820:	f107 0320 	add.w	r3, r7, #32	; 0x20
   10824:	4618      	mov	r0, r3
   10826:	f7fe fb05 	bl	ee34 <_ZNK8Position4getYEv>
   1082a:	4603      	mov	r3, r0
   1082c:	4620      	mov	r0, r4
   1082e:	4619      	mov	r1, r3
   10830:	f00c fa4c 	bl	1cccc <__aeabi_fsub>
   10834:	4603      	mov	r3, r0
   10836:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1083a:	4618      	mov	r0, r3
   1083c:	f00b fede 	bl	1c5fc <__aeabi_f2d>
   10840:	4602      	mov	r2, r0
   10842:	460b      	mov	r3, r1
   10844:	4610      	mov	r0, r2
   10846:	4619      	mov	r1, r3
   10848:	f00b ff2c 	bl	1c6a4 <__aeabi_dmul>
   1084c:	4602      	mov	r2, r0
   1084e:	460b      	mov	r3, r1
   10850:	4640      	mov	r0, r8
   10852:	4649      	mov	r1, r9
   10854:	f00b fd74 	bl	1c340 <__adddf3>
   10858:	4602      	mov	r2, r0
   1085a:	460b      	mov	r3, r1
   1085c:	4610      	mov	r0, r2
   1085e:	4619      	mov	r1, r3
   10860:	f010 f8b8 	bl	209d4 <sqrt>
   10864:	4602      	mov	r2, r0
   10866:	460b      	mov	r3, r1
   10868:	4610      	mov	r0, r2
   1086a:	4619      	mov	r1, r3
   1086c:	f00c f9b2 	bl	1cbd4 <__aeabi_d2iz>
   10870:	4603      	mov	r3, r0
}
   10872:	4618      	mov	r0, r3
   10874:	f107 072c 	add.w	r7, r7, #44	; 0x2c
   10878:	46bd      	mov	sp, r7
   1087a:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   1087e:	46c0      	nop			(mov r8, r8)

00010880 <_ZN5Etape8getChildEi>:
    tableauEtapesTotal[numero] = this;
}

Etape::Etape(){}

Etape* Etape::getChild(int nb){
   10880:	b480      	push	{r7}
   10882:	b083      	sub	sp, #12
   10884:	af00      	add	r7, sp, #0
   10886:	6078      	str	r0, [r7, #4]
   10888:	6039      	str	r1, [r7, #0]
    return this->children[nb];
   1088a:	687b      	ldr	r3, [r7, #4]
   1088c:	681a      	ldr	r2, [r3, #0]
   1088e:	683b      	ldr	r3, [r7, #0]
   10890:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10894:	4413      	add	r3, r2
   10896:	681b      	ldr	r3, [r3, #0]
}
   10898:	4618      	mov	r0, r3
   1089a:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1089e:	46bd      	mov	sp, r7
   108a0:	bc80      	pop	{r7}
   108a2:	4770      	bx	lr

000108a4 <_ZN5Etape11getChildrenEv>:

Etape** Etape::getChildren(){
   108a4:	b480      	push	{r7}
   108a6:	b083      	sub	sp, #12
   108a8:	af00      	add	r7, sp, #0
   108aa:	6078      	str	r0, [r7, #4]
    return this->children;
   108ac:	687b      	ldr	r3, [r7, #4]
   108ae:	681b      	ldr	r3, [r3, #0]
}
   108b0:	4618      	mov	r0, r3
   108b2:	f107 070c 	add.w	r7, r7, #12	; 0xc
   108b6:	46bd      	mov	sp, r7
   108b8:	bc80      	pop	{r7}
   108ba:	4770      	bx	lr

000108bc <_ZN5Etape9getParentEv>:

Etape* Etape::getParent(){
   108bc:	b480      	push	{r7}
   108be:	b083      	sub	sp, #12
   108c0:	af00      	add	r7, sp, #0
   108c2:	6078      	str	r0, [r7, #4]
    return this->parent;
   108c4:	687b      	ldr	r3, [r7, #4]
   108c6:	685b      	ldr	r3, [r3, #4]
}
   108c8:	4618      	mov	r0, r3
   108ca:	f107 070c 	add.w	r7, r7, #12	; 0xc
   108ce:	46bd      	mov	sp, r7
   108d0:	bc80      	pop	{r7}
   108d2:	4770      	bx	lr

000108d4 <_ZN5Etape11getPositionEv>:

Position Etape::getPosition()
   108d4:	b480      	push	{r7}
   108d6:	b083      	sub	sp, #12
   108d8:	af00      	add	r7, sp, #0
   108da:	4684      	mov	ip, r0
   108dc:	6079      	str	r1, [r7, #4]
{
    return this->position;
   108de:	687b      	ldr	r3, [r7, #4]
   108e0:	4662      	mov	r2, ip
   108e2:	f103 0308 	add.w	r3, r3, #8	; 0x8
   108e6:	e893 0003 	ldmia.w	r3, {r0, r1}
   108ea:	e882 0003 	stmia.w	r2, {r0, r1}
}
   108ee:	4660      	mov	r0, ip
   108f0:	f107 070c 	add.w	r7, r7, #12	; 0xc
   108f4:	46bd      	mov	sp, r7
   108f6:	bc80      	pop	{r7}
   108f8:	4770      	bx	lr
   108fa:	46c0      	nop			(mov r8, r8)

000108fc <_ZN5Etape8getStateEv>:

int Etape::getState(){
   108fc:	b480      	push	{r7}
   108fe:	b083      	sub	sp, #12
   10900:	af00      	add	r7, sp, #0
   10902:	6078      	str	r0, [r7, #4]
    return this->state;
   10904:	687b      	ldr	r3, [r7, #4]
   10906:	691b      	ldr	r3, [r3, #16]
}
   10908:	4618      	mov	r0, r3
   1090a:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1090e:	46bd      	mov	sp, r7
   10910:	bc80      	pop	{r7}
   10912:	4770      	bx	lr

00010914 <_ZN5Etape8setStateEi>:

void Etape::setState(int state){
   10914:	b480      	push	{r7}
   10916:	b083      	sub	sp, #12
   10918:	af00      	add	r7, sp, #0
   1091a:	6078      	str	r0, [r7, #4]
   1091c:	6039      	str	r1, [r7, #0]
    this->state = state;
   1091e:	687a      	ldr	r2, [r7, #4]
   10920:	683b      	ldr	r3, [r7, #0]
   10922:	6113      	str	r3, [r2, #16]
}
   10924:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10928:	46bd      	mov	sp, r7
   1092a:	bc80      	pop	{r7}
   1092c:	4770      	bx	lr
   1092e:	46c0      	nop			(mov r8, r8)

00010930 <_ZN5Etape11getDistanceEv>:

int Etape::getDistance(){
   10930:	b480      	push	{r7}
   10932:	b083      	sub	sp, #12
   10934:	af00      	add	r7, sp, #0
   10936:	6078      	str	r0, [r7, #4]
    return this->distance;
   10938:	687b      	ldr	r3, [r7, #4]
   1093a:	695b      	ldr	r3, [r3, #20]
}
   1093c:	4618      	mov	r0, r3
   1093e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10942:	46bd      	mov	sp, r7
   10944:	bc80      	pop	{r7}
   10946:	4770      	bx	lr

00010948 <_ZN5Etape11setDistanceEi>:

void Etape::setDistance(int distance){
   10948:	b480      	push	{r7}
   1094a:	b083      	sub	sp, #12
   1094c:	af00      	add	r7, sp, #0
   1094e:	6078      	str	r0, [r7, #4]
   10950:	6039      	str	r1, [r7, #0]
    this->distance = distance;
   10952:	687a      	ldr	r2, [r7, #4]
   10954:	683b      	ldr	r3, [r7, #0]
   10956:	6153      	str	r3, [r2, #20]
}
   10958:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1095c:	46bd      	mov	sp, r7
   1095e:	bc80      	pop	{r7}
   10960:	4770      	bx	lr
   10962:	46c0      	nop			(mov r8, r8)

00010964 <_ZN5Etape9setParentEPS_>:

void Etape::setParent(Etape* parent){
   10964:	b480      	push	{r7}
   10966:	b083      	sub	sp, #12
   10968:	af00      	add	r7, sp, #0
   1096a:	6078      	str	r0, [r7, #4]
   1096c:	6039      	str	r1, [r7, #0]
    this->parent = parent;
   1096e:	687a      	ldr	r2, [r7, #4]
   10970:	683b      	ldr	r3, [r7, #0]
   10972:	6053      	str	r3, [r2, #4]
}
   10974:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10978:	46bd      	mov	sp, r7
   1097a:	bc80      	pop	{r7}
   1097c:	4770      	bx	lr
   1097e:	46c0      	nop			(mov r8, r8)

00010980 <_ZN5Etape13getNbChildrenEv>:

int Etape::getNbChildren(){
   10980:	b480      	push	{r7}
   10982:	b083      	sub	sp, #12
   10984:	af00      	add	r7, sp, #0
   10986:	6078      	str	r0, [r7, #4]
    return this->nbChildren;
   10988:	687b      	ldr	r3, [r7, #4]
   1098a:	69db      	ldr	r3, [r3, #28]
}
   1098c:	4618      	mov	r0, r3
   1098e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10992:	46bd      	mov	sp, r7
   10994:	bc80      	pop	{r7}
   10996:	4770      	bx	lr

00010998 <_ZN5Etape11setChildrenEPPS_>:

void Etape::setChildren(Etape** children)
   10998:	b480      	push	{r7}
   1099a:	b083      	sub	sp, #12
   1099c:	af00      	add	r7, sp, #0
   1099e:	6078      	str	r0, [r7, #4]
   109a0:	6039      	str	r1, [r7, #0]
{
    this->children = children;
   109a2:	687a      	ldr	r2, [r7, #4]
   109a4:	683b      	ldr	r3, [r7, #0]
   109a6:	6013      	str	r3, [r2, #0]
}
   109a8:	f107 070c 	add.w	r7, r7, #12	; 0xc
   109ac:	46bd      	mov	sp, r7
   109ae:	bc80      	pop	{r7}
   109b0:	4770      	bx	lr
   109b2:	46c0      	nop			(mov r8, r8)

000109b4 <_ZN5Etape12getEtapeTypeEv>:

Etape::EtapeType Etape::getEtapeType()
   109b4:	b480      	push	{r7}
   109b6:	b083      	sub	sp, #12
   109b8:	af00      	add	r7, sp, #0
   109ba:	6078      	str	r0, [r7, #4]
{
    return this->type;
   109bc:	687b      	ldr	r3, [r7, #4]
   109be:	7e1b      	ldrb	r3, [r3, #24]
}
   109c0:	4618      	mov	r0, r3
   109c2:	f107 070c 	add.w	r7, r7, #12	; 0xc
   109c6:	46bd      	mov	sp, r7
   109c8:	bc80      	pop	{r7}
   109ca:	4770      	bx	lr

000109cc <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>:

void Etape::setEtapeType(Etape::EtapeType type)
   109cc:	b480      	push	{r7}
   109ce:	b083      	sub	sp, #12
   109d0:	af00      	add	r7, sp, #0
   109d2:	6078      	str	r0, [r7, #4]
   109d4:	460b      	mov	r3, r1
   109d6:	70fb      	strb	r3, [r7, #3]
{
    this->type = type;
   109d8:	687a      	ldr	r2, [r7, #4]
   109da:	78fb      	ldrb	r3, [r7, #3]
   109dc:	7613      	strb	r3, [r2, #24]
}
   109de:	f107 070c 	add.w	r7, r7, #12	; 0xc
   109e2:	46bd      	mov	sp, r7
   109e4:	bc80      	pop	{r7}
   109e6:	4770      	bx	lr

000109e8 <_ZN5Etape9getNumeroEv>:
    {
        this->type = (EtapeType)(this->type + ROBOT_VU_ICI);
    }
}

int Etape::getNumero()
   109e8:	b480      	push	{r7}
   109ea:	b083      	sub	sp, #12
   109ec:	af00      	add	r7, sp, #0
   109ee:	6078      	str	r0, [r7, #4]
{
    return this->numero;
   109f0:	687b      	ldr	r3, [r7, #4]
   109f2:	6a1b      	ldr	r3, [r3, #32]
}
   109f4:	4618      	mov	r0, r3
   109f6:	f107 070c 	add.w	r7, r7, #12	; 0xc
   109fa:	46bd      	mov	sp, r7
   109fc:	bc80      	pop	{r7}
   109fe:	4770      	bx	lr

00010a00 <_ZN5Etape7aEviterEv>:

bool Etape::aEviter()
   10a00:	b580      	push	{r7, lr}
   10a02:	b082      	sub	sp, #8
   10a04:	af00      	add	r7, sp, #0
   10a06:	6078      	str	r0, [r7, #4]
{
    if(((int) this->getEtapeType()) > ROBOT_VU_ICI-1)
   10a08:	6878      	ldr	r0, [r7, #4]
   10a0a:	f7ff ffd3 	bl	109b4 <_ZN5Etape12getEtapeTypeEv>
   10a0e:	4603      	mov	r3, r0
   10a10:	2b63      	cmp	r3, #99
   10a12:	bf94      	ite	ls
   10a14:	2300      	movls	r3, #0
   10a16:	2301      	movhi	r3, #1
   10a18:	b2db      	uxtb	r3, r3
   10a1a:	2b00      	cmp	r3, #0
   10a1c:	d003      	beq.n	10a26 <_ZN5Etape7aEviterEv+0x26>
    {
        return true;
   10a1e:	f04f 0301 	mov.w	r3, #1	; 0x1
   10a22:	603b      	str	r3, [r7, #0]
   10a24:	e002      	b.n	10a2c <_ZN5Etape7aEviterEv+0x2c>
    }
    else
    {
        return false;
   10a26:	f04f 0300 	mov.w	r3, #0	; 0x0
   10a2a:	603b      	str	r3, [r7, #0]
   10a2c:	683b      	ldr	r3, [r7, #0]
    }
}
   10a2e:	4618      	mov	r0, r3
   10a30:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10a34:	46bd      	mov	sp, r7
   10a36:	bd80      	pop	{r7, pc}

00010a38 <_ZN5Etape7robotVuEv>:
void Etape::setEtapeType(Etape::EtapeType type)
{
    this->type = type;
}

void Etape::robotVu()
   10a38:	b580      	push	{r7, lr}
   10a3a:	b082      	sub	sp, #8
   10a3c:	af00      	add	r7, sp, #0
   10a3e:	6078      	str	r0, [r7, #4]
{
    if(!aEviter())
   10a40:	6878      	ldr	r0, [r7, #4]
   10a42:	f7ff ffdd 	bl	10a00 <_ZN5Etape7aEviterEv>
   10a46:	4603      	mov	r3, r0
   10a48:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   10a4c:	b2db      	uxtb	r3, r3
   10a4e:	2b00      	cmp	r3, #0
   10a50:	d006      	beq.n	10a60 <_ZN5Etape7robotVuEv+0x28>
    {
        this->type = (EtapeType)(this->type + ROBOT_VU_ICI);
   10a52:	687b      	ldr	r3, [r7, #4]
   10a54:	7e1b      	ldrb	r3, [r3, #24]
   10a56:	f103 0364 	add.w	r3, r3, #100	; 0x64
   10a5a:	b2db      	uxtb	r3, r3
   10a5c:	687a      	ldr	r2, [r7, #4]
   10a5e:	7613      	strb	r3, [r2, #24]
    }
}
   10a60:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10a64:	46bd      	mov	sp, r7
   10a66:	bd80      	pop	{r7, pc}

00010a68 <_ZN5Etape13oublieRobotVuEv>:
    {
        return false;
    }
}

void Etape::oublieRobotVu()
   10a68:	b580      	push	{r7, lr}
   10a6a:	b082      	sub	sp, #8
   10a6c:	af00      	add	r7, sp, #0
   10a6e:	6078      	str	r0, [r7, #4]
{
    if(this->aEviter())
   10a70:	6878      	ldr	r0, [r7, #4]
   10a72:	f7ff ffc5 	bl	10a00 <_ZN5Etape7aEviterEv>
   10a76:	4603      	mov	r3, r0
   10a78:	2b00      	cmp	r3, #0
   10a7a:	d00a      	beq.n	10a92 <_ZN5Etape13oublieRobotVuEv+0x2a>
    {
        //On oublie qu'on a vu un robot
        this->setEtapeType((EtapeType) ((int)this->getEtapeType() - ROBOT_VU_ICI));
   10a7c:	6878      	ldr	r0, [r7, #4]
   10a7e:	f7ff ff99 	bl	109b4 <_ZN5Etape12getEtapeTypeEv>
   10a82:	4603      	mov	r3, r0
   10a84:	f1a3 0364 	sub.w	r3, r3, #100	; 0x64
   10a88:	b2db      	uxtb	r3, r3
   10a8a:	6878      	ldr	r0, [r7, #4]
   10a8c:	4619      	mov	r1, r3
   10a8e:	f7ff ff9d 	bl	109cc <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>
    }
}
   10a92:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10a96:	46bd      	mov	sp, r7
   10a98:	bd80      	pop	{r7, pc}
   10a9a:	46c0      	nop			(mov r8, r8)

00010a9c <_ZN5Etape12getDistancesEv>:

int* Etape::getDistances()
   10a9c:	b480      	push	{r7}
   10a9e:	b083      	sub	sp, #12
   10aa0:	af00      	add	r7, sp, #0
   10aa2:	6078      	str	r0, [r7, #4]
{
    return this->distances;
   10aa4:	687b      	ldr	r3, [r7, #4]
   10aa6:	6a5b      	ldr	r3, [r3, #36]
}
   10aa8:	4618      	mov	r0, r3
   10aaa:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10aae:	46bd      	mov	sp, r7
   10ab0:	bc80      	pop	{r7}
   10ab2:	4770      	bx	lr

00010ab4 <_ZN5Etape12setDistancesEPi>:

void Etape::setDistances(int* distances)
   10ab4:	b480      	push	{r7}
   10ab6:	b083      	sub	sp, #12
   10ab8:	af00      	add	r7, sp, #0
   10aba:	6078      	str	r0, [r7, #4]
   10abc:	6039      	str	r1, [r7, #0]
{
    this->distances = distances;
   10abe:	687a      	ldr	r2, [r7, #4]
   10ac0:	683b      	ldr	r3, [r7, #0]
   10ac2:	6253      	str	r3, [r2, #36]
}
   10ac4:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10ac8:	46bd      	mov	sp, r7
   10aca:	bc80      	pop	{r7}
   10acc:	4770      	bx	lr
   10ace:	46c0      	nop			(mov r8, r8)

00010ad0 <_ZN5Etape27getEtapesLieesParFinirEtapeEv>:
    {
        this->distances[i] = Dijkstra::calculDistanceDirect(this->children[i], this);
    }
}

int* Etape::getEtapesLieesParFinirEtape()
   10ad0:	b480      	push	{r7}
   10ad2:	b083      	sub	sp, #12
   10ad4:	af00      	add	r7, sp, #0
   10ad6:	6078      	str	r0, [r7, #4]
{
    return this->numerosEtapesLieesParFinirEtape;
   10ad8:	687b      	ldr	r3, [r7, #4]
   10ada:	6adb      	ldr	r3, [r3, #44]
}
   10adc:	4618      	mov	r0, r3
   10ade:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10ae2:	46bd      	mov	sp, r7
   10ae4:	bc80      	pop	{r7}
   10ae6:	4770      	bx	lr

00010ae8 <_ZN5Etape27setEtapesLieesParFinirEtapeEPi>:

void Etape::setEtapesLieesParFinirEtape(int* numerosEtapesLieesParFinirEtape)
   10ae8:	b480      	push	{r7}
   10aea:	b083      	sub	sp, #12
   10aec:	af00      	add	r7, sp, #0
   10aee:	6078      	str	r0, [r7, #4]
   10af0:	6039      	str	r1, [r7, #0]
{
    this->numerosEtapesLieesParFinirEtape = numerosEtapesLieesParFinirEtape;
   10af2:	687a      	ldr	r2, [r7, #4]
   10af4:	683b      	ldr	r3, [r7, #0]
   10af6:	62d3      	str	r3, [r2, #44]
}
   10af8:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10afc:	46bd      	mov	sp, r7
   10afe:	bc80      	pop	{r7}
   10b00:	4770      	bx	lr
   10b02:	46c0      	nop			(mov r8, r8)

00010b04 <_ZN5Etape33getNombreEtapesLieesParFinirEtapeEv>:

int Etape::getNombreEtapesLieesParFinirEtape()
   10b04:	b480      	push	{r7}
   10b06:	b083      	sub	sp, #12
   10b08:	af00      	add	r7, sp, #0
   10b0a:	6078      	str	r0, [r7, #4]
{
    return this->nombreEtapesLieesParFinirEtape;
   10b0c:	687b      	ldr	r3, [r7, #4]
   10b0e:	6a9b      	ldr	r3, [r3, #40]
}
   10b10:	4618      	mov	r0, r3
   10b12:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10b16:	46bd      	mov	sp, r7
   10b18:	bc80      	pop	{r7}
   10b1a:	4770      	bx	lr

00010b1c <_ZN5Etape5finirEv>:

void Etape::finir(void)
   10b1c:	b480      	push	{r7}
   10b1e:	b083      	sub	sp, #12
   10b20:	af00      	add	r7, sp, #0
   10b22:	6078      	str	r0, [r7, #4]
{
    if(this->type == FRUIT)
   10b24:	687b      	ldr	r3, [r7, #4]
   10b26:	7e1b      	ldrb	r3, [r3, #24]
   10b28:	2b02      	cmp	r3, #2
   10b2a:	d103      	bne.n	10b34 <_ZN5Etape5finirEv+0x18>
    {
        this->type = POINT_PASSAGE;
   10b2c:	687b      	ldr	r3, [r7, #4]
   10b2e:	f04f 0200 	mov.w	r2, #0	; 0x0
   10b32:	761a      	strb	r2, [r3, #24]
    }
}
   10b34:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10b38:	46bd      	mov	sp, r7
   10b3a:	bc80      	pop	{r7}
   10b3c:	4770      	bx	lr
   10b3e:	46c0      	nop			(mov r8, r8)

00010b40 <_ZN5Etape8setScoreEi>:

void Etape::setScore(int score)
   10b40:	b480      	push	{r7}
   10b42:	b083      	sub	sp, #12
   10b44:	af00      	add	r7, sp, #0
   10b46:	6078      	str	r0, [r7, #4]
   10b48:	6039      	str	r1, [r7, #0]
{
    this->score = score;
   10b4a:	687a      	ldr	r2, [r7, #4]
   10b4c:	683b      	ldr	r3, [r7, #0]
   10b4e:	6313      	str	r3, [r2, #48]
}
   10b50:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10b54:	46bd      	mov	sp, r7
   10b56:	bc80      	pop	{r7}
   10b58:	4770      	bx	lr
   10b5a:	46c0      	nop			(mov r8, r8)

00010b5c <_ZN5Etape8getScoreEv>:

int Etape::getScore()
   10b5c:	b480      	push	{r7}
   10b5e:	b083      	sub	sp, #12
   10b60:	af00      	add	r7, sp, #0
   10b62:	6078      	str	r0, [r7, #4]
{
    return this->score;
   10b64:	687b      	ldr	r3, [r7, #4]
   10b66:	6b1b      	ldr	r3, [r3, #48]
}
   10b68:	4618      	mov	r0, r3
   10b6a:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10b6e:	46bd      	mov	sp, r7
   10b70:	bc80      	pop	{r7}
   10b72:	4770      	bx	lr

00010b74 <_ZN5Etape23setNumeroEtapeFinActionEi>:
    {
        newVoisin->addVoisin(this, false);
    }
}

void Etape::setNumeroEtapeFinAction(int newNumeroEtapeFinAction)
   10b74:	b480      	push	{r7}
   10b76:	b083      	sub	sp, #12
   10b78:	af00      	add	r7, sp, #0
   10b7a:	6078      	str	r0, [r7, #4]
   10b7c:	6039      	str	r1, [r7, #0]
{
    this->numeroEtapeFinAction = newNumeroEtapeFinAction;
   10b7e:	687a      	ldr	r2, [r7, #4]
   10b80:	683b      	ldr	r3, [r7, #0]
   10b82:	6353      	str	r3, [r2, #52]
}
   10b84:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10b88:	46bd      	mov	sp, r7
   10b8a:	bc80      	pop	{r7}
   10b8c:	4770      	bx	lr
   10b8e:	46c0      	nop			(mov r8, r8)

00010b90 <_ZN5Etape23getNumeroEtapeFinActionEv>:

int Etape::getNumeroEtapeFinAction()
   10b90:	b480      	push	{r7}
   10b92:	b083      	sub	sp, #12
   10b94:	af00      	add	r7, sp, #0
   10b96:	6078      	str	r0, [r7, #4]
{
    return this->numeroEtapeFinAction;
   10b98:	687b      	ldr	r3, [r7, #4]
   10b9a:	6b5b      	ldr	r3, [r3, #52]
}
   10b9c:	4618      	mov	r0, r3
   10b9e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10ba2:	46bd      	mov	sp, r7
   10ba4:	bc80      	pop	{r7}
   10ba6:	4770      	bx	lr

00010ba8 <_ZN5Etape9addVoisinEPS_b>:
int Etape::getScore()
{
    return this->score;
}

Etape* Etape::addVoisin(Etape* newVoisin, bool autreSens)
   10ba8:	b580      	push	{r7, lr}
   10baa:	b088      	sub	sp, #32
   10bac:	af00      	add	r7, sp, #0
   10bae:	60f8      	str	r0, [r7, #12]
   10bb0:	60b9      	str	r1, [r7, #8]
   10bb2:	4613      	mov	r3, r2
   10bb4:	71fb      	strb	r3, [r7, #7]
{
    if(this->nbChildren==0)
   10bb6:	68fb      	ldr	r3, [r7, #12]
   10bb8:	69db      	ldr	r3, [r3, #28]
   10bba:	2b00      	cmp	r3, #0
   10bbc:	d112      	bne.n	10be4 <_ZN5Etape9addVoisinEPS_b+0x3c>
    {
        this->children = new Etape*[1];
   10bbe:	f04f 0004 	mov.w	r0, #4	; 0x4
   10bc2:	f7fe f849 	bl	ec58 <_Znaj>
   10bc6:	4603      	mov	r3, r0
   10bc8:	461a      	mov	r2, r3
   10bca:	68fb      	ldr	r3, [r7, #12]
   10bcc:	601a      	str	r2, [r3, #0]
        this->children[0] = newVoisin;
   10bce:	68fb      	ldr	r3, [r7, #12]
   10bd0:	681a      	ldr	r2, [r3, #0]
   10bd2:	68bb      	ldr	r3, [r7, #8]
   10bd4:	6013      	str	r3, [r2, #0]
        this->nbChildren++;
   10bd6:	68fb      	ldr	r3, [r7, #12]
   10bd8:	69db      	ldr	r3, [r3, #28]
   10bda:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10bde:	68fb      	ldr	r3, [r7, #12]
   10be0:	61da      	str	r2, [r3, #28]
   10be2:	e060      	b.n	10ca6 <_ZN5Etape9addVoisinEPS_b+0xfe>
    }
    else
    {
        Etape** temp = new Etape*[nbChildren];
   10be4:	68fb      	ldr	r3, [r7, #12]
   10be6:	69db      	ldr	r3, [r3, #28]
   10be8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10bec:	4618      	mov	r0, r3
   10bee:	f7fe f833 	bl	ec58 <_Znaj>
   10bf2:	4603      	mov	r3, r0
   10bf4:	617b      	str	r3, [r7, #20]
        for(int i=0; i<nbChildren; i++)
   10bf6:	f04f 0300 	mov.w	r3, #0	; 0x0
   10bfa:	61bb      	str	r3, [r7, #24]
   10bfc:	e011      	b.n	10c22 <_ZN5Etape9addVoisinEPS_b+0x7a>
        {
            temp[i] = this->children[i];
   10bfe:	69bb      	ldr	r3, [r7, #24]
   10c00:	ea4f 0283 	mov.w	r2, r3, lsl #2
   10c04:	697b      	ldr	r3, [r7, #20]
   10c06:	eb03 0102 	add.w	r1, r3, r2
   10c0a:	68fb      	ldr	r3, [r7, #12]
   10c0c:	681a      	ldr	r2, [r3, #0]
   10c0e:	69bb      	ldr	r3, [r7, #24]
   10c10:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10c14:	4413      	add	r3, r2
   10c16:	681b      	ldr	r3, [r3, #0]
   10c18:	600b      	str	r3, [r1, #0]
        this->nbChildren++;
    }
    else
    {
        Etape** temp = new Etape*[nbChildren];
        for(int i=0; i<nbChildren; i++)
   10c1a:	69bb      	ldr	r3, [r7, #24]
   10c1c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10c20:	61bb      	str	r3, [r7, #24]
   10c22:	68fb      	ldr	r3, [r7, #12]
   10c24:	69da      	ldr	r2, [r3, #28]
   10c26:	69bb      	ldr	r3, [r7, #24]
   10c28:	429a      	cmp	r2, r3
   10c2a:	dce8      	bgt.n	10bfe <_ZN5Etape9addVoisinEPS_b+0x56>
        {
            temp[i] = this->children[i];
        }
        this->children = new Etape*[nbChildren+1];
   10c2c:	68fb      	ldr	r3, [r7, #12]
   10c2e:	69db      	ldr	r3, [r3, #28]
   10c30:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10c34:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10c38:	4618      	mov	r0, r3
   10c3a:	f7fe f80d 	bl	ec58 <_Znaj>
   10c3e:	4603      	mov	r3, r0
   10c40:	461a      	mov	r2, r3
   10c42:	68fb      	ldr	r3, [r7, #12]
   10c44:	601a      	str	r2, [r3, #0]
        for(int i=0; i<nbChildren; i++)
   10c46:	f04f 0300 	mov.w	r3, #0	; 0x0
   10c4a:	61fb      	str	r3, [r7, #28]
   10c4c:	e011      	b.n	10c72 <_ZN5Etape9addVoisinEPS_b+0xca>
        {
            this->children[i] = temp[i];
   10c4e:	68fb      	ldr	r3, [r7, #12]
   10c50:	681a      	ldr	r2, [r3, #0]
   10c52:	69fb      	ldr	r3, [r7, #28]
   10c54:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10c58:	eb02 0103 	add.w	r1, r2, r3
   10c5c:	69fb      	ldr	r3, [r7, #28]
   10c5e:	ea4f 0283 	mov.w	r2, r3, lsl #2
   10c62:	697b      	ldr	r3, [r7, #20]
   10c64:	4413      	add	r3, r2
   10c66:	681b      	ldr	r3, [r3, #0]
   10c68:	600b      	str	r3, [r1, #0]
        for(int i=0; i<nbChildren; i++)
        {
            temp[i] = this->children[i];
        }
        this->children = new Etape*[nbChildren+1];
        for(int i=0; i<nbChildren; i++)
   10c6a:	69fb      	ldr	r3, [r7, #28]
   10c6c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10c70:	61fb      	str	r3, [r7, #28]
   10c72:	68fb      	ldr	r3, [r7, #12]
   10c74:	69da      	ldr	r2, [r3, #28]
   10c76:	69fb      	ldr	r3, [r7, #28]
   10c78:	429a      	cmp	r2, r3
   10c7a:	dce8      	bgt.n	10c4e <_ZN5Etape9addVoisinEPS_b+0xa6>
        {
            this->children[i] = temp[i];
        }
        delete[] temp;
   10c7c:	697b      	ldr	r3, [r7, #20]
   10c7e:	2b00      	cmp	r3, #0
   10c80:	d002      	beq.n	10c88 <_ZN5Etape9addVoisinEPS_b+0xe0>
   10c82:	6978      	ldr	r0, [r7, #20]
   10c84:	f7fe f86e 	bl	ed64 <_ZdaPv>
        this->children[nbChildren] = newVoisin;
   10c88:	68fb      	ldr	r3, [r7, #12]
   10c8a:	681a      	ldr	r2, [r3, #0]
   10c8c:	68fb      	ldr	r3, [r7, #12]
   10c8e:	69db      	ldr	r3, [r3, #28]
   10c90:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10c94:	441a      	add	r2, r3
   10c96:	68bb      	ldr	r3, [r7, #8]
   10c98:	6013      	str	r3, [r2, #0]
        this->nbChildren++;
   10c9a:	68fb      	ldr	r3, [r7, #12]
   10c9c:	69db      	ldr	r3, [r3, #28]
   10c9e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10ca2:	68fb      	ldr	r3, [r7, #12]
   10ca4:	61da      	str	r2, [r3, #28]
        qDebug() << "ERREUR, TROP DE VOISINS !!!";
#endif
    }
    this->children[i] = newVoisin;
    */
    if (autreSens)
   10ca6:	79fb      	ldrb	r3, [r7, #7]
   10ca8:	2b00      	cmp	r3, #0
   10caa:	d005      	beq.n	10cb8 <_ZN5Etape9addVoisinEPS_b+0x110>
    {
        newVoisin->addVoisin(this, false);
   10cac:	68b8      	ldr	r0, [r7, #8]
   10cae:	68f9      	ldr	r1, [r7, #12]
   10cb0:	f04f 0200 	mov.w	r2, #0	; 0x0
   10cb4:	f7ff ff78 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    }
}
   10cb8:	f107 0720 	add.w	r7, r7, #32	; 0x20
   10cbc:	46bd      	mov	sp, r7
   10cbe:	bd80      	pop	{r7, pc}

00010cc0 <_ZN5Etape21computeChildDistancesEv>:
void Etape::setDistances(int* distances)
{
    this->distances = distances;
}

void Etape::computeChildDistances(){
   10cc0:	b590      	push	{r4, r7, lr}
   10cc2:	b085      	sub	sp, #20
   10cc4:	af00      	add	r7, sp, #0
   10cc6:	6078      	str	r0, [r7, #4]
    this->distances = new int[this->nbChildren];
   10cc8:	687b      	ldr	r3, [r7, #4]
   10cca:	69db      	ldr	r3, [r3, #28]
   10ccc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10cd0:	4618      	mov	r0, r3
   10cd2:	f7fd ffc1 	bl	ec58 <_Znaj>
   10cd6:	4603      	mov	r3, r0
   10cd8:	461a      	mov	r2, r3
   10cda:	687b      	ldr	r3, [r7, #4]
   10cdc:	625a      	str	r2, [r3, #36]

    for(int i=0; i<this->nbChildren; i++)
   10cde:	f04f 0300 	mov.w	r3, #0	; 0x0
   10ce2:	60fb      	str	r3, [r7, #12]
   10ce4:	e017      	b.n	10d16 <_ZN5Etape21computeChildDistancesEv+0x56>
    {
        this->distances[i] = Dijkstra::calculDistanceDirect(this->children[i], this);
   10ce6:	687b      	ldr	r3, [r7, #4]
   10ce8:	6a5a      	ldr	r2, [r3, #36]
   10cea:	68fb      	ldr	r3, [r7, #12]
   10cec:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10cf0:	eb02 0403 	add.w	r4, r2, r3
   10cf4:	687b      	ldr	r3, [r7, #4]
   10cf6:	681a      	ldr	r2, [r3, #0]
   10cf8:	68fb      	ldr	r3, [r7, #12]
   10cfa:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10cfe:	4413      	add	r3, r2
   10d00:	681b      	ldr	r3, [r3, #0]
   10d02:	4618      	mov	r0, r3
   10d04:	6879      	ldr	r1, [r7, #4]
   10d06:	f7ff fd37 	bl	10778 <_ZN8Dijkstra20calculDistanceDirectEP5EtapeS1_>
   10d0a:	4603      	mov	r3, r0
   10d0c:	6023      	str	r3, [r4, #0]
}

void Etape::computeChildDistances(){
    this->distances = new int[this->nbChildren];

    for(int i=0; i<this->nbChildren; i++)
   10d0e:	68fb      	ldr	r3, [r7, #12]
   10d10:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10d14:	60fb      	str	r3, [r7, #12]
   10d16:	687b      	ldr	r3, [r7, #4]
   10d18:	69da      	ldr	r2, [r3, #28]
   10d1a:	68fb      	ldr	r3, [r7, #12]
   10d1c:	429a      	cmp	r2, r3
   10d1e:	dce2      	bgt.n	10ce6 <_ZN5Etape21computeChildDistancesEv+0x26>
    {
        this->distances[i] = Dijkstra::calculDistanceDirect(this->children[i], this);
    }
}
   10d20:	f107 0714 	add.w	r7, r7, #20	; 0x14
   10d24:	46bd      	mov	sp, r7
   10d26:	bd90      	pop	{r4, r7, pc}

00010d28 <_ZN5EtapeC1Ev>:
    }

    tableauEtapesTotal[numero] = this;
}

Etape::Etape(){}
   10d28:	b580      	push	{r7, lr}
   10d2a:	b082      	sub	sp, #8
   10d2c:	af00      	add	r7, sp, #0
   10d2e:	6078      	str	r0, [r7, #4]
   10d30:	687b      	ldr	r3, [r7, #4]
   10d32:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10d36:	4618      	mov	r0, r3
   10d38:	f7fe f834 	bl	eda4 <_ZN8PositionC1Ev>
   10d3c:	687b      	ldr	r3, [r7, #4]
   10d3e:	4618      	mov	r0, r3
   10d40:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10d44:	46bd      	mov	sp, r7
   10d46:	bd80      	pop	{r7, pc}

00010d48 <_ZN5EtapeC2Ev>:
   10d48:	b580      	push	{r7, lr}
   10d4a:	b082      	sub	sp, #8
   10d4c:	af00      	add	r7, sp, #0
   10d4e:	6078      	str	r0, [r7, #4]
   10d50:	687b      	ldr	r3, [r7, #4]
   10d52:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10d56:	4618      	mov	r0, r3
   10d58:	f7fe f824 	bl	eda4 <_ZN8PositionC1Ev>
   10d5c:	687b      	ldr	r3, [r7, #4]
   10d5e:	4618      	mov	r0, r3
   10d60:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10d64:	46bd      	mov	sp, r7
   10d66:	bd80      	pop	{r7, pc}

00010d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>:
#include "dijkstra.h"
#ifndef ROBOTHW
    #include <QDebug>
#endif

Etape::Etape(Position position, /*int nbChildren, */int numero, Etape** tableauEtapesTotal, EtapeType type = POINT_PASSAGE, int state=-1, int nombreEtapesLieesParFinirEtape = 0)
   10d68:	b580      	push	{r7, lr}
   10d6a:	b086      	sub	sp, #24
   10d6c:	af00      	add	r7, sp, #0
   10d6e:	60f8      	str	r0, [r7, #12]
   10d70:	f107 0004 	add.w	r0, r7, #4	; 0x4
   10d74:	e880 0006 	stmia.w	r0, {r1, r2}
   10d78:	603b      	str	r3, [r7, #0]
   10d7a:	68fb      	ldr	r3, [r7, #12]
   10d7c:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10d80:	4618      	mov	r0, r3
   10d82:	f7fe f80f 	bl	eda4 <_ZN8PositionC1Ev>
{
    this->position = position;
   10d86:	68fb      	ldr	r3, [r7, #12]
   10d88:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10d8c:	4618      	mov	r0, r3
   10d8e:	f107 0304 	add.w	r3, r7, #4	; 0x4
   10d92:	e893 0006 	ldmia.w	r3, {r1, r2}
   10d96:	f7fe f8c1 	bl	ef1c <_ZN8PositionaSES_>
    //this->children = new Etape*[nbChildren];
    this->type = type;
   10d9a:	68fa      	ldr	r2, [r7, #12]
   10d9c:	f897 3024 	ldrb.w	r3, [r7, #36]
   10da0:	7613      	strb	r3, [r2, #24]
    this->state = state;
   10da2:	68fa      	ldr	r2, [r7, #12]
   10da4:	6abb      	ldr	r3, [r7, #40]
   10da6:	6113      	str	r3, [r2, #16]
    //this->nbChildren = nbChildren;
    this->nbChildren = 0;
   10da8:	68fa      	ldr	r2, [r7, #12]
   10daa:	f04f 0300 	mov.w	r3, #0	; 0x0
   10dae:	61d3      	str	r3, [r2, #28]
    this->distance = -1;
   10db0:	68fa      	ldr	r2, [r7, #12]
   10db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10db6:	6153      	str	r3, [r2, #20]
    this->numero = numero;
   10db8:	68fa      	ldr	r2, [r7, #12]
   10dba:	683b      	ldr	r3, [r7, #0]
   10dbc:	6213      	str	r3, [r2, #32]
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
   10dbe:	68fa      	ldr	r2, [r7, #12]
   10dc0:	6afb      	ldr	r3, [r7, #44]
   10dc2:	6293      	str	r3, [r2, #40]
    this->score = 0;
   10dc4:	68fa      	ldr	r2, [r7, #12]
   10dc6:	f04f 0300 	mov.w	r3, #0	; 0x0
   10dca:	6313      	str	r3, [r2, #48]
    this->numeroEtapeFinAction = numero;//Par défaut, on fini à l'endroit de l'étape
   10dcc:	68fa      	ldr	r2, [r7, #12]
   10dce:	683b      	ldr	r3, [r7, #0]
   10dd0:	6353      	str	r3, [r2, #52]

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   10dd2:	f04f 0300 	mov.w	r3, #0	; 0x0
   10dd6:	617b      	str	r3, [r7, #20]
   10dd8:	e00c      	b.n	10df4 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii+0x8c>
    {
        this->children[i] = 0;
   10dda:	68fb      	ldr	r3, [r7, #12]
   10ddc:	681a      	ldr	r2, [r3, #0]
   10dde:	697b      	ldr	r3, [r7, #20]
   10de0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10de4:	441a      	add	r2, r3
   10de6:	f04f 0300 	mov.w	r3, #0	; 0x0
   10dea:	6013      	str	r3, [r2, #0]
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
    this->score = 0;
    this->numeroEtapeFinAction = numero;//Par défaut, on fini à l'endroit de l'étape

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   10dec:	697b      	ldr	r3, [r7, #20]
   10dee:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10df2:	617b      	str	r3, [r7, #20]
   10df4:	68fb      	ldr	r3, [r7, #12]
   10df6:	69da      	ldr	r2, [r3, #28]
   10df8:	697b      	ldr	r3, [r7, #20]
   10dfa:	429a      	cmp	r2, r3
   10dfc:	dced      	bgt.n	10dda <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii+0x72>
    {
        this->children[i] = 0;
    }

    tableauEtapesTotal[numero] = this;
   10dfe:	683b      	ldr	r3, [r7, #0]
   10e00:	ea4f 0283 	mov.w	r2, r3, lsl #2
   10e04:	6a3b      	ldr	r3, [r7, #32]
   10e06:	441a      	add	r2, r3
   10e08:	68fb      	ldr	r3, [r7, #12]
   10e0a:	6013      	str	r3, [r2, #0]
}
   10e0c:	68fb      	ldr	r3, [r7, #12]
   10e0e:	4618      	mov	r0, r3
   10e10:	f107 0718 	add.w	r7, r7, #24	; 0x18
   10e14:	46bd      	mov	sp, r7
   10e16:	bd80      	pop	{r7, pc}

00010e18 <_ZN5EtapeC2E8PositioniPPS_NS_9EtapeTypeEii>:
#include "dijkstra.h"
#ifndef ROBOTHW
    #include <QDebug>
#endif

Etape::Etape(Position position, /*int nbChildren, */int numero, Etape** tableauEtapesTotal, EtapeType type = POINT_PASSAGE, int state=-1, int nombreEtapesLieesParFinirEtape = 0)
   10e18:	b580      	push	{r7, lr}
   10e1a:	b086      	sub	sp, #24
   10e1c:	af00      	add	r7, sp, #0
   10e1e:	60f8      	str	r0, [r7, #12]
   10e20:	f107 0004 	add.w	r0, r7, #4	; 0x4
   10e24:	e880 0006 	stmia.w	r0, {r1, r2}
   10e28:	603b      	str	r3, [r7, #0]
   10e2a:	68fb      	ldr	r3, [r7, #12]
   10e2c:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10e30:	4618      	mov	r0, r3
   10e32:	f7fd ffb7 	bl	eda4 <_ZN8PositionC1Ev>
{
    this->position = position;
   10e36:	68fb      	ldr	r3, [r7, #12]
   10e38:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10e3c:	4618      	mov	r0, r3
   10e3e:	f107 0304 	add.w	r3, r7, #4	; 0x4
   10e42:	e893 0006 	ldmia.w	r3, {r1, r2}
   10e46:	f7fe f869 	bl	ef1c <_ZN8PositionaSES_>
    //this->children = new Etape*[nbChildren];
    this->type = type;
   10e4a:	68fa      	ldr	r2, [r7, #12]
   10e4c:	f897 3024 	ldrb.w	r3, [r7, #36]
   10e50:	7613      	strb	r3, [r2, #24]
    this->state = state;
   10e52:	68fa      	ldr	r2, [r7, #12]
   10e54:	6abb      	ldr	r3, [r7, #40]
   10e56:	6113      	str	r3, [r2, #16]
    //this->nbChildren = nbChildren;
    this->nbChildren = 0;
   10e58:	68fa      	ldr	r2, [r7, #12]
   10e5a:	f04f 0300 	mov.w	r3, #0	; 0x0
   10e5e:	61d3      	str	r3, [r2, #28]
    this->distance = -1;
   10e60:	68fa      	ldr	r2, [r7, #12]
   10e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10e66:	6153      	str	r3, [r2, #20]
    this->numero = numero;
   10e68:	68fa      	ldr	r2, [r7, #12]
   10e6a:	683b      	ldr	r3, [r7, #0]
   10e6c:	6213      	str	r3, [r2, #32]
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
   10e6e:	68fa      	ldr	r2, [r7, #12]
   10e70:	6afb      	ldr	r3, [r7, #44]
   10e72:	6293      	str	r3, [r2, #40]
    this->score = 0;
   10e74:	68fa      	ldr	r2, [r7, #12]
   10e76:	f04f 0300 	mov.w	r3, #0	; 0x0
   10e7a:	6313      	str	r3, [r2, #48]
    this->numeroEtapeFinAction = numero;//Par défaut, on fini à l'endroit de l'étape
   10e7c:	68fa      	ldr	r2, [r7, #12]
   10e7e:	683b      	ldr	r3, [r7, #0]
   10e80:	6353      	str	r3, [r2, #52]

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   10e82:	f04f 0300 	mov.w	r3, #0	; 0x0
   10e86:	617b      	str	r3, [r7, #20]
   10e88:	e00c      	b.n	10ea4 <_ZN5EtapeC2E8PositioniPPS_NS_9EtapeTypeEii+0x8c>
    {
        this->children[i] = 0;
   10e8a:	68fb      	ldr	r3, [r7, #12]
   10e8c:	681a      	ldr	r2, [r3, #0]
   10e8e:	697b      	ldr	r3, [r7, #20]
   10e90:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10e94:	441a      	add	r2, r3
   10e96:	f04f 0300 	mov.w	r3, #0	; 0x0
   10e9a:	6013      	str	r3, [r2, #0]
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
    this->score = 0;
    this->numeroEtapeFinAction = numero;//Par défaut, on fini à l'endroit de l'étape

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   10e9c:	697b      	ldr	r3, [r7, #20]
   10e9e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10ea2:	617b      	str	r3, [r7, #20]
   10ea4:	68fb      	ldr	r3, [r7, #12]
   10ea6:	69da      	ldr	r2, [r3, #28]
   10ea8:	697b      	ldr	r3, [r7, #20]
   10eaa:	429a      	cmp	r2, r3
   10eac:	dced      	bgt.n	10e8a <_ZN5EtapeC2E8PositioniPPS_NS_9EtapeTypeEii+0x72>
    {
        this->children[i] = 0;
    }

    tableauEtapesTotal[numero] = this;
   10eae:	683b      	ldr	r3, [r7, #0]
   10eb0:	ea4f 0283 	mov.w	r2, r3, lsl #2
   10eb4:	6a3b      	ldr	r3, [r7, #32]
   10eb6:	441a      	add	r2, r3
   10eb8:	68fb      	ldr	r3, [r7, #12]
   10eba:	6013      	str	r3, [r2, #0]
}
   10ebc:	68fb      	ldr	r3, [r7, #12]
   10ebe:	4618      	mov	r0, r3
   10ec0:	f107 0718 	add.w	r7, r7, #24	; 0x18
   10ec4:	46bd      	mov	sp, r7
   10ec6:	bd80      	pop	{r7, pc}

00010ec8 <_ZN7Gobelet6updateEv>:

Gobelet::Gobelet(Position goalposition):MediumLevelAction(goalposition){}

Gobelet::~Gobelet(){}

int Gobelet::update()
   10ec8:	b580      	push	{r7, lr}
   10eca:	b084      	sub	sp, #16
   10ecc:	af02      	add	r7, sp, #8
   10ece:	6078      	str	r0, [r7, #4]
{
    if (status == 0)
   10ed0:	687b      	ldr	r3, [r7, #4]
   10ed2:	68db      	ldr	r3, [r3, #12]
   10ed4:	2b00      	cmp	r3, #0
   10ed6:	d106      	bne.n	10ee6 <_ZN7Gobelet6updateEv+0x1e>
    {
#ifndef ROBOTHW
        qDebug() << "gobelet";
#endif
        status++;
   10ed8:	687b      	ldr	r3, [r7, #4]
   10eda:	68db      	ldr	r3, [r3, #12]
   10edc:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10ee0:	687b      	ldr	r3, [r7, #4]
   10ee2:	60da      	str	r2, [r3, #12]
   10ee4:	e0e2      	b.n	110ac <_ZN7Gobelet6updateEv+0x1e4>
    }

    else if (status == 1)
   10ee6:	687b      	ldr	r3, [r7, #4]
   10ee8:	68db      	ldr	r3, [r3, #12]
   10eea:	2b01      	cmp	r3, #1
   10eec:	d114      	bne.n	10f18 <_ZN7Gobelet6updateEv+0x50>
    {
        StrategieV2::setCurrentGoal(this->goalPosition, this->goBack);
   10eee:	687b      	ldr	r3, [r7, #4]
   10ef0:	f893 c010 	ldrb.w	ip, [r3, #16]
   10ef4:	687a      	ldr	r2, [r7, #4]
   10ef6:	4b71      	ldr	r3, [pc, #452]	(110bc <_ZN7Gobelet6updateEv+0x1f4>)
   10ef8:	9300      	str	r3, [sp, #0]
   10efa:	f102 0304 	add.w	r3, r2, #4	; 0x4
   10efe:	e893 0003 	ldmia.w	r3, {r0, r1}
   10f02:	4662      	mov	r2, ip
   10f04:	4b6e      	ldr	r3, [pc, #440]	(110c0 <_ZN7Gobelet6updateEv+0x1f8>)
   10f06:	f006 ff35 	bl	17d74 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
   10f0a:	687b      	ldr	r3, [r7, #4]
   10f0c:	68db      	ldr	r3, [r3, #12]
   10f0e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10f12:	687b      	ldr	r3, [r7, #4]
   10f14:	60da      	str	r2, [r3, #12]
   10f16:	e0c9      	b.n	110ac <_ZN7Gobelet6updateEv+0x1e4>
    }

    else if (status == 2)
   10f18:	687b      	ldr	r3, [r7, #4]
   10f1a:	68db      	ldr	r3, [r3, #12]
   10f1c:	2b02      	cmp	r3, #2
   10f1e:	d11a      	bne.n	10f56 <_ZN7Gobelet6updateEv+0x8e>
    {
        if (Command::isNear(goalPosition, 175.0f))
   10f20:	687b      	ldr	r3, [r7, #4]
   10f22:	f103 0304 	add.w	r3, r3, #4	; 0x4
   10f26:	e893 0003 	ldmia.w	r3, {r0, r1}
   10f2a:	4a66      	ldr	r2, [pc, #408]	(110c4 <_ZN7Gobelet6updateEv+0x1fc>)
   10f2c:	f7f7 fa02 	bl	8334 <_ZN7Command6isNearE8Positionf>
   10f30:	4603      	mov	r3, r0
   10f32:	2b00      	cmp	r3, #0
   10f34:	f000 80ba 	beq.w	110ac <_ZN7Gobelet6updateEv+0x1e4>
        {
            StrategieV2::lookAt(goalPosition);
   10f38:	687b      	ldr	r3, [r7, #4]
   10f3a:	f103 0304 	add.w	r3, r3, #4	; 0x4
   10f3e:	e893 0003 	ldmia.w	r3, {r0, r1}
   10f42:	4a61      	ldr	r2, [pc, #388]	(110c8 <_ZN7Gobelet6updateEv+0x200>)
   10f44:	f006 fe7e 	bl	17c44 <_ZN11StrategieV26lookAtE8Positionf>
            status++;
   10f48:	687b      	ldr	r3, [r7, #4]
   10f4a:	68db      	ldr	r3, [r3, #12]
   10f4c:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10f50:	687b      	ldr	r3, [r7, #4]
   10f52:	60da      	str	r2, [r3, #12]
   10f54:	e0aa      	b.n	110ac <_ZN7Gobelet6updateEv+0x1e4>
        }
    }

    else if (status == 3)
   10f56:	687b      	ldr	r3, [r7, #4]
   10f58:	68db      	ldr	r3, [r3, #12]
   10f5a:	2b03      	cmp	r3, #3
   10f5c:	d118      	bne.n	10f90 <_ZN7Gobelet6updateEv+0xc8>
    {
        if (Command::isLookingAt(goalPosition))
   10f5e:	687b      	ldr	r3, [r7, #4]
   10f60:	f103 0304 	add.w	r3, r3, #4	; 0x4
   10f64:	e893 0003 	ldmia.w	r3, {r0, r1}
   10f68:	4a58      	ldr	r2, [pc, #352]	(110cc <_ZN7Gobelet6updateEv+0x204>)
   10f6a:	f7f7 f927 	bl	81bc <_ZN7Command11isLookingAtE8Positionf>
   10f6e:	4603      	mov	r3, r0
   10f70:	2b00      	cmp	r3, #0
   10f72:	f000 809b 	beq.w	110ac <_ZN7Gobelet6updateEv+0x1e4>
        {
#ifndef ROBOTHW
            qDebug() << "On baisse l'ascenseur";
#endif
            Ascenseur::getSingleton()->baisserAscenseur();
   10f76:	f7f4 f877 	bl	5068 <_ZN9Ascenseur12getSingletonEv>
   10f7a:	4603      	mov	r3, r0
   10f7c:	4618      	mov	r0, r3
   10f7e:	f7f4 f833 	bl	4fe8 <_ZN9Ascenseur16baisserAscenseurEv>
        status++;
   10f82:	687b      	ldr	r3, [r7, #4]
   10f84:	68db      	ldr	r3, [r3, #12]
   10f86:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10f8a:	687b      	ldr	r3, [r7, #4]
   10f8c:	60da      	str	r2, [r3, #12]
   10f8e:	e08d      	b.n	110ac <_ZN7Gobelet6updateEv+0x1e4>
        }
    }

    else if ((status <23) && (status > 0))  //On attend que l'ascenseur se baisse
   10f90:	687b      	ldr	r3, [r7, #4]
   10f92:	68db      	ldr	r3, [r3, #12]
   10f94:	2b16      	cmp	r3, #22
   10f96:	dc0a      	bgt.n	10fae <_ZN7Gobelet6updateEv+0xe6>
   10f98:	687b      	ldr	r3, [r7, #4]
   10f9a:	68db      	ldr	r3, [r3, #12]
   10f9c:	2b00      	cmp	r3, #0
   10f9e:	dd06      	ble.n	10fae <_ZN7Gobelet6updateEv+0xe6>
    {
        status++;
   10fa0:	687b      	ldr	r3, [r7, #4]
   10fa2:	68db      	ldr	r3, [r3, #12]
   10fa4:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10fa8:	687b      	ldr	r3, [r7, #4]
   10faa:	60da      	str	r2, [r3, #12]
   10fac:	e07e      	b.n	110ac <_ZN7Gobelet6updateEv+0x1e4>
    }

    else if (status == 23)
   10fae:	687b      	ldr	r3, [r7, #4]
   10fb0:	68db      	ldr	r3, [r3, #12]
   10fb2:	2b17      	cmp	r3, #23
   10fb4:	d10c      	bne.n	10fd0 <_ZN7Gobelet6updateEv+0x108>
    {
#ifndef ROBOTHW
            qDebug() << "On ouvre les pinces";
#endif
            Ascenseur::getSingleton()->ouvrirAscenseur();
   10fb6:	f7f4 f857 	bl	5068 <_ZN9Ascenseur12getSingletonEv>
   10fba:	4603      	mov	r3, r0
   10fbc:	4618      	mov	r0, r3
   10fbe:	f7f3 fffb 	bl	4fb8 <_ZN9Ascenseur15ouvrirAscenseurEv>
            status++;
   10fc2:	687b      	ldr	r3, [r7, #4]
   10fc4:	68db      	ldr	r3, [r3, #12]
   10fc6:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10fca:	687b      	ldr	r3, [r7, #4]
   10fcc:	60da      	str	r2, [r3, #12]
   10fce:	e06d      	b.n	110ac <_ZN7Gobelet6updateEv+0x1e4>
    }

    else if ((status <43) && (status > 0))  //On attend que l'ascenseur ouvre les pinces
   10fd0:	687b      	ldr	r3, [r7, #4]
   10fd2:	68db      	ldr	r3, [r3, #12]
   10fd4:	2b2a      	cmp	r3, #42
   10fd6:	dc0a      	bgt.n	10fee <_ZN7Gobelet6updateEv+0x126>
   10fd8:	687b      	ldr	r3, [r7, #4]
   10fda:	68db      	ldr	r3, [r3, #12]
   10fdc:	2b00      	cmp	r3, #0
   10fde:	dd06      	ble.n	10fee <_ZN7Gobelet6updateEv+0x126>
    {
        status++;
   10fe0:	687b      	ldr	r3, [r7, #4]
   10fe2:	68db      	ldr	r3, [r3, #12]
   10fe4:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10fe8:	687b      	ldr	r3, [r7, #4]
   10fea:	60da      	str	r2, [r3, #12]
   10fec:	e05e      	b.n	110ac <_ZN7Gobelet6updateEv+0x1e4>
    }

    else if (status == 43)
   10fee:	687b      	ldr	r3, [r7, #4]
   10ff0:	68db      	ldr	r3, [r3, #12]
   10ff2:	2b2b      	cmp	r3, #43
   10ff4:	d10c      	bne.n	11010 <_ZN7Gobelet6updateEv+0x148>
    {
#ifndef ROBOTHW
            qDebug() << "On ferme les pinces";
#endif
            Ascenseur::getSingleton()->fermerAscenseur();
   10ff6:	f7f4 f837 	bl	5068 <_ZN9Ascenseur12getSingletonEv>
   10ffa:	4603      	mov	r3, r0
   10ffc:	4618      	mov	r0, r3
   10ffe:	f7f3 ffc3 	bl	4f88 <_ZN9Ascenseur15fermerAscenseurEv>
        status++;
   11002:	687b      	ldr	r3, [r7, #4]
   11004:	68db      	ldr	r3, [r3, #12]
   11006:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1100a:	687b      	ldr	r3, [r7, #4]
   1100c:	60da      	str	r2, [r3, #12]
   1100e:	e04d      	b.n	110ac <_ZN7Gobelet6updateEv+0x1e4>
    }

    else if ((status <63) && (status > 0))  //On attend que l'ascenseur ferme ses pinces
   11010:	687b      	ldr	r3, [r7, #4]
   11012:	68db      	ldr	r3, [r3, #12]
   11014:	2b3e      	cmp	r3, #62
   11016:	dc0a      	bgt.n	1102e <_ZN7Gobelet6updateEv+0x166>
   11018:	687b      	ldr	r3, [r7, #4]
   1101a:	68db      	ldr	r3, [r3, #12]
   1101c:	2b00      	cmp	r3, #0
   1101e:	dd06      	ble.n	1102e <_ZN7Gobelet6updateEv+0x166>
    {
        status++;
   11020:	687b      	ldr	r3, [r7, #4]
   11022:	68db      	ldr	r3, [r3, #12]
   11024:	f103 0201 	add.w	r2, r3, #1	; 0x1
   11028:	687b      	ldr	r3, [r7, #4]
   1102a:	60da      	str	r2, [r3, #12]
   1102c:	e03e      	b.n	110ac <_ZN7Gobelet6updateEv+0x1e4>
    }

    else if (status == 63)
   1102e:	687b      	ldr	r3, [r7, #4]
   11030:	68db      	ldr	r3, [r3, #12]
   11032:	2b3f      	cmp	r3, #63
   11034:	d114      	bne.n	11060 <_ZN7Gobelet6updateEv+0x198>
    {
#ifndef ROBOTHW
        qDebug() << "Etape gobelet finie";
#endif
        StrategieV2::setCurrentGoal(this->goalPosition, this->goBack);
   11036:	687b      	ldr	r3, [r7, #4]
   11038:	f893 c010 	ldrb.w	ip, [r3, #16]
   1103c:	687a      	ldr	r2, [r7, #4]
   1103e:	4b1f      	ldr	r3, [pc, #124]	(110bc <_ZN7Gobelet6updateEv+0x1f4>)
   11040:	9300      	str	r3, [sp, #0]
   11042:	f102 0304 	add.w	r3, r2, #4	; 0x4
   11046:	e893 0003 	ldmia.w	r3, {r0, r1}
   1104a:	4662      	mov	r2, ip
   1104c:	4b1c      	ldr	r3, [pc, #112]	(110c0 <_ZN7Gobelet6updateEv+0x1f8>)
   1104e:	f006 fe91 	bl	17d74 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
   11052:	687b      	ldr	r3, [r7, #4]
   11054:	68db      	ldr	r3, [r3, #12]
   11056:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1105a:	687b      	ldr	r3, [r7, #4]
   1105c:	60da      	str	r2, [r3, #12]
   1105e:	e025      	b.n	110ac <_ZN7Gobelet6updateEv+0x1e4>
    }

    else if (status == 64)
   11060:	687b      	ldr	r3, [r7, #4]
   11062:	68db      	ldr	r3, [r3, #12]
   11064:	2b40      	cmp	r3, #64
   11066:	d119      	bne.n	1109c <_ZN7Gobelet6updateEv+0x1d4>
    {
        if (Command::isNear(goalPosition))
   11068:	687b      	ldr	r3, [r7, #4]
   1106a:	f103 0304 	add.w	r3, r3, #4	; 0x4
   1106e:	e893 0003 	ldmia.w	r3, {r0, r1}
   11072:	4a17      	ldr	r2, [pc, #92]	(110d0 <_ZN7Gobelet6updateEv+0x208>)
   11074:	f7f7 f95e 	bl	8334 <_ZN7Command6isNearE8Positionf>
   11078:	4603      	mov	r3, r0
   1107a:	2b00      	cmp	r3, #0
   1107c:	d016      	beq.n	110ac <_ZN7Gobelet6updateEv+0x1e4>
        {
            StrategieV2::lookAt(goalPosition);
   1107e:	687b      	ldr	r3, [r7, #4]
   11080:	f103 0304 	add.w	r3, r3, #4	; 0x4
   11084:	e893 0003 	ldmia.w	r3, {r0, r1}
   11088:	4a0f      	ldr	r2, [pc, #60]	(110c8 <_ZN7Gobelet6updateEv+0x200>)
   1108a:	f006 fddb 	bl	17c44 <_ZN11StrategieV26lookAtE8Positionf>
            status++;
   1108e:	687b      	ldr	r3, [r7, #4]
   11090:	68db      	ldr	r3, [r3, #12]
   11092:	f103 0201 	add.w	r2, r3, #1	; 0x1
   11096:	687b      	ldr	r3, [r7, #4]
   11098:	60da      	str	r2, [r3, #12]
   1109a:	e007      	b.n	110ac <_ZN7Gobelet6updateEv+0x1e4>
        }
    }

    else if (status == 65)
   1109c:	687b      	ldr	r3, [r7, #4]
   1109e:	68db      	ldr	r3, [r3, #12]
   110a0:	2b41      	cmp	r3, #65
   110a2:	d103      	bne.n	110ac <_ZN7Gobelet6updateEv+0x1e4>
    {
        status = -1;
   110a4:	687a      	ldr	r2, [r7, #4]
   110a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   110aa:	60d3      	str	r3, [r2, #12]
    }

    return status;
   110ac:	687b      	ldr	r3, [r7, #4]
   110ae:	68db      	ldr	r3, [r3, #12]
}
   110b0:	4618      	mov	r0, r3
   110b2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   110b6:	46bd      	mov	sp, r7
   110b8:	bd80      	pop	{r7, pc}
   110ba:	46c0      	nop			(mov r8, r8)
   110bc:	c2c80000 	.word	0xc2c80000
   110c0:	40400000 	.word	0x40400000
   110c4:	432f0000 	.word	0x432f0000
   110c8:	3cf5c28f 	.word	0x3cf5c28f
   110cc:	3db2b8c2 	.word	0x3db2b8c2
   110d0:	41f00000 	.word	0x41f00000

000110d4 <_ZN7GobeletD0Ev>:

Gobelet::Gobelet(){}

Gobelet::Gobelet(Position goalposition):MediumLevelAction(goalposition){}

Gobelet::~Gobelet(){}
   110d4:	b580      	push	{r7, lr}
   110d6:	b082      	sub	sp, #8
   110d8:	af00      	add	r7, sp, #0
   110da:	6078      	str	r0, [r7, #4]
   110dc:	687a      	ldr	r2, [r7, #4]
   110de:	4b0a      	ldr	r3, [pc, #40]	(11108 <_ZN7GobeletD0Ev+0x34>)
   110e0:	6013      	str	r3, [r2, #0]
   110e2:	687b      	ldr	r3, [r7, #4]
   110e4:	4618      	mov	r0, r3
   110e6:	f005 fc55 	bl	16994 <_ZN17MediumLevelActionD2Ev>
   110ea:	f04f 0301 	mov.w	r3, #1	; 0x1
   110ee:	b2db      	uxtb	r3, r3
   110f0:	2b00      	cmp	r3, #0
   110f2:	d002      	beq.n	110fa <_ZN7GobeletD0Ev+0x26>
   110f4:	6878      	ldr	r0, [r7, #4]
   110f6:	f7fd fdbd 	bl	ec74 <_ZdlPv>
   110fa:	687b      	ldr	r3, [r7, #4]
   110fc:	4618      	mov	r0, r3
   110fe:	f107 0708 	add.w	r7, r7, #8	; 0x8
   11102:	46bd      	mov	sp, r7
   11104:	bd80      	pop	{r7, pc}
   11106:	46c0      	nop			(mov r8, r8)
   11108:	00024140 	.word	0x00024140

0001110c <_ZN7GobeletD1Ev>:
   1110c:	b580      	push	{r7, lr}
   1110e:	b082      	sub	sp, #8
   11110:	af00      	add	r7, sp, #0
   11112:	6078      	str	r0, [r7, #4]
   11114:	687a      	ldr	r2, [r7, #4]
   11116:	4b0a      	ldr	r3, [pc, #40]	(11140 <_ZN7GobeletD1Ev+0x34>)
   11118:	6013      	str	r3, [r2, #0]
   1111a:	687b      	ldr	r3, [r7, #4]
   1111c:	4618      	mov	r0, r3
   1111e:	f005 fc39 	bl	16994 <_ZN17MediumLevelActionD2Ev>
   11122:	f04f 0300 	mov.w	r3, #0	; 0x0
   11126:	b2db      	uxtb	r3, r3
   11128:	2b00      	cmp	r3, #0
   1112a:	d002      	beq.n	11132 <_ZN7GobeletD1Ev+0x26>
   1112c:	6878      	ldr	r0, [r7, #4]
   1112e:	f7fd fda1 	bl	ec74 <_ZdlPv>
   11132:	687b      	ldr	r3, [r7, #4]
   11134:	4618      	mov	r0, r3
   11136:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1113a:	46bd      	mov	sp, r7
   1113c:	bd80      	pop	{r7, pc}
   1113e:	46c0      	nop			(mov r8, r8)
   11140:	00024140 	.word	0x00024140

00011144 <_ZN7GobeletD2Ev>:
   11144:	b580      	push	{r7, lr}
   11146:	b082      	sub	sp, #8
   11148:	af00      	add	r7, sp, #0
   1114a:	6078      	str	r0, [r7, #4]
   1114c:	687a      	ldr	r2, [r7, #4]
   1114e:	4b0a      	ldr	r3, [pc, #40]	(11178 <_ZN7GobeletD2Ev+0x34>)
   11150:	6013      	str	r3, [r2, #0]
   11152:	687b      	ldr	r3, [r7, #4]
   11154:	4618      	mov	r0, r3
   11156:	f005 fc1d 	bl	16994 <_ZN17MediumLevelActionD2Ev>
   1115a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1115e:	b2db      	uxtb	r3, r3
   11160:	2b00      	cmp	r3, #0
   11162:	d002      	beq.n	1116a <_ZN7GobeletD2Ev+0x26>
   11164:	6878      	ldr	r0, [r7, #4]
   11166:	f7fd fd85 	bl	ec74 <_ZdlPv>
   1116a:	687b      	ldr	r3, [r7, #4]
   1116c:	4618      	mov	r0, r3
   1116e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   11172:	46bd      	mov	sp, r7
   11174:	bd80      	pop	{r7, pc}
   11176:	46c0      	nop			(mov r8, r8)
   11178:	00024140 	.word	0x00024140

0001117c <_ZN7GobeletC1E8Position>:
#include <QDebug>
#endif

Gobelet::Gobelet(){}

Gobelet::Gobelet(Position goalposition):MediumLevelAction(goalposition){}
   1117c:	b580      	push	{r7, lr}
   1117e:	b084      	sub	sp, #16
   11180:	af00      	add	r7, sp, #0
   11182:	60f8      	str	r0, [r7, #12]
   11184:	f107 0304 	add.w	r3, r7, #4	; 0x4
   11188:	e883 0006 	stmia.w	r3, {r1, r2}
   1118c:	68fb      	ldr	r3, [r7, #12]
   1118e:	4618      	mov	r0, r3
   11190:	f107 0304 	add.w	r3, r7, #4	; 0x4
   11194:	e893 0006 	ldmia.w	r3, {r1, r2}
   11198:	f005 fc3c 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   1119c:	68fa      	ldr	r2, [r7, #12]
   1119e:	4b07      	ldr	r3, [pc, #28]	(111bc <_ZN7GobeletC1E8Position+0x40>)
   111a0:	6013      	str	r3, [r2, #0]
   111a2:	68fb      	ldr	r3, [r7, #12]
   111a4:	f103 0318 	add.w	r3, r3, #24	; 0x18
   111a8:	4618      	mov	r0, r3
   111aa:	f7fd fdfb 	bl	eda4 <_ZN8PositionC1Ev>
   111ae:	68fb      	ldr	r3, [r7, #12]
   111b0:	4618      	mov	r0, r3
   111b2:	f107 0710 	add.w	r7, r7, #16	; 0x10
   111b6:	46bd      	mov	sp, r7
   111b8:	bd80      	pop	{r7, pc}
   111ba:	46c0      	nop			(mov r8, r8)
   111bc:	00024140 	.word	0x00024140

000111c0 <_ZN7GobeletC2E8Position>:
   111c0:	b580      	push	{r7, lr}
   111c2:	b084      	sub	sp, #16
   111c4:	af00      	add	r7, sp, #0
   111c6:	60f8      	str	r0, [r7, #12]
   111c8:	f107 0304 	add.w	r3, r7, #4	; 0x4
   111cc:	e883 0006 	stmia.w	r3, {r1, r2}
   111d0:	68fb      	ldr	r3, [r7, #12]
   111d2:	4618      	mov	r0, r3
   111d4:	f107 0304 	add.w	r3, r7, #4	; 0x4
   111d8:	e893 0006 	ldmia.w	r3, {r1, r2}
   111dc:	f005 fc1a 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   111e0:	68fa      	ldr	r2, [r7, #12]
   111e2:	4b07      	ldr	r3, [pc, #28]	(11200 <_ZN7GobeletC2E8Position+0x40>)
   111e4:	6013      	str	r3, [r2, #0]
   111e6:	68fb      	ldr	r3, [r7, #12]
   111e8:	f103 0318 	add.w	r3, r3, #24	; 0x18
   111ec:	4618      	mov	r0, r3
   111ee:	f7fd fdd9 	bl	eda4 <_ZN8PositionC1Ev>
   111f2:	68fb      	ldr	r3, [r7, #12]
   111f4:	4618      	mov	r0, r3
   111f6:	f107 0710 	add.w	r7, r7, #16	; 0x10
   111fa:	46bd      	mov	sp, r7
   111fc:	bd80      	pop	{r7, pc}
   111fe:	46c0      	nop			(mov r8, r8)
   11200:	00024140 	.word	0x00024140

00011204 <_ZN7GobeletC1Ev>:

#ifndef ROBOTHW
#include <QDebug>
#endif

Gobelet::Gobelet(){}
   11204:	b590      	push	{r4, r7, lr}
   11206:	b085      	sub	sp, #20
   11208:	af00      	add	r7, sp, #0
   1120a:	6078      	str	r0, [r7, #4]
   1120c:	687c      	ldr	r4, [r7, #4]
   1120e:	f107 0308 	add.w	r3, r7, #8	; 0x8
   11212:	4618      	mov	r0, r3
   11214:	490d      	ldr	r1, [pc, #52]	(1124c <_ZN7GobeletC1Ev+0x48>)
   11216:	4a0d      	ldr	r2, [pc, #52]	(1124c <_ZN7GobeletC1Ev+0x48>)
   11218:	f04f 0301 	mov.w	r3, #1	; 0x1
   1121c:	f7fd fdea 	bl	edf4 <_ZN8PositionC1Effb>
   11220:	4620      	mov	r0, r4
   11222:	f107 0308 	add.w	r3, r7, #8	; 0x8
   11226:	e893 0006 	ldmia.w	r3, {r1, r2}
   1122a:	f005 fbf3 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   1122e:	687a      	ldr	r2, [r7, #4]
   11230:	4b07      	ldr	r3, [pc, #28]	(11250 <_ZN7GobeletC1Ev+0x4c>)
   11232:	6013      	str	r3, [r2, #0]
   11234:	687b      	ldr	r3, [r7, #4]
   11236:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1123a:	4618      	mov	r0, r3
   1123c:	f7fd fdb2 	bl	eda4 <_ZN8PositionC1Ev>
   11240:	687b      	ldr	r3, [r7, #4]
   11242:	4618      	mov	r0, r3
   11244:	f107 0714 	add.w	r7, r7, #20	; 0x14
   11248:	46bd      	mov	sp, r7
   1124a:	bd90      	pop	{r4, r7, pc}
   1124c:	00000000 	.word	0x00000000
   11250:	00024140 	.word	0x00024140

00011254 <_ZN7GobeletC2Ev>:
   11254:	b590      	push	{r4, r7, lr}
   11256:	b085      	sub	sp, #20
   11258:	af00      	add	r7, sp, #0
   1125a:	6078      	str	r0, [r7, #4]
   1125c:	687c      	ldr	r4, [r7, #4]
   1125e:	f107 0308 	add.w	r3, r7, #8	; 0x8
   11262:	4618      	mov	r0, r3
   11264:	490d      	ldr	r1, [pc, #52]	(1129c <_ZN7GobeletC2Ev+0x48>)
   11266:	4a0d      	ldr	r2, [pc, #52]	(1129c <_ZN7GobeletC2Ev+0x48>)
   11268:	f04f 0301 	mov.w	r3, #1	; 0x1
   1126c:	f7fd fdc2 	bl	edf4 <_ZN8PositionC1Effb>
   11270:	4620      	mov	r0, r4
   11272:	f107 0308 	add.w	r3, r7, #8	; 0x8
   11276:	e893 0006 	ldmia.w	r3, {r1, r2}
   1127a:	f005 fbcb 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   1127e:	687a      	ldr	r2, [r7, #4]
   11280:	4b07      	ldr	r3, [pc, #28]	(112a0 <_ZN7GobeletC2Ev+0x4c>)
   11282:	6013      	str	r3, [r2, #0]
   11284:	687b      	ldr	r3, [r7, #4]
   11286:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1128a:	4618      	mov	r0, r3
   1128c:	f7fd fd8a 	bl	eda4 <_ZN8PositionC1Ev>
   11290:	687b      	ldr	r3, [r7, #4]
   11292:	4618      	mov	r0, r3
   11294:	f107 0714 	add.w	r7, r7, #20	; 0x14
   11298:	46bd      	mov	sp, r7
   1129a:	bd90      	pop	{r4, r7, pc}
   1129c:	00000000 	.word	0x00000000
   112a0:	00024140 	.word	0x00024140

000112a4 <_ZN9Krabi201513getScoreEtapeEi>:
        default :
            this->tableauEtapes[this->etapeEnCours]->setEtapeType(Etape::POINT_PASSAGE);
    }
}

int Krabi2015::getScoreEtape(int i){
   112a4:	b580      	push	{r7, lr}
   112a6:	b084      	sub	sp, #16
   112a8:	af00      	add	r7, sp, #0
   112aa:	60f8      	str	r0, [r7, #12]
   112ac:	60b9      	str	r1, [r7, #8]
    /* TODO : Supprimer le modificateur temporel et inclure directement un coefficient dans le score pour les actions longues
       Plus tard : pourquoi pas changer le système en ayant les FEU etc... fils de Etape, ça éviterait aussi le switch dans updateStock().
       Juste faire attention à comment transmettre le stock à update.
     */
    switch (this->tableauEtapesTotal[i]->getEtapeType()){
   112ae:	68fb      	ldr	r3, [r7, #12]
   112b0:	6b5a      	ldr	r2, [r3, #52]
   112b2:	68bb      	ldr	r3, [r7, #8]
   112b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   112b8:	4413      	add	r3, r2
   112ba:	681b      	ldr	r3, [r3, #0]
   112bc:	4618      	mov	r0, r3
   112be:	f7ff fb79 	bl	109b4 <_ZN5Etape12getEtapeTypeEv>
   112c2:	4603      	mov	r3, r0
   112c4:	2b16      	cmp	r3, #22
   112c6:	d851      	bhi.n	1136c <_ZN9Krabi201513getScoreEtapeEi+0xc8>
   112c8:	a201      	add	r2, pc, #4	(adr r2, 112d0 <_ZN9Krabi201513getScoreEtapeEi+0x2c>)
   112ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   112ce:	46c0      	nop			(mov r8, r8)
   112d0:	00011365 	.word	0x00011365
   112d4:	0001136d 	.word	0x0001136d
   112d8:	0001136d 	.word	0x0001136d
   112dc:	0001136d 	.word	0x0001136d
   112e0:	0001136d 	.word	0x0001136d
   112e4:	0001132d 	.word	0x0001132d
   112e8:	0001136d 	.word	0x0001136d
   112ec:	0001136d 	.word	0x0001136d
   112f0:	0001136d 	.word	0x0001136d
   112f4:	0001136d 	.word	0x0001136d
   112f8:	0001136d 	.word	0x0001136d
   112fc:	0001136d 	.word	0x0001136d
   11300:	0001136d 	.word	0x0001136d
   11304:	0001136d 	.word	0x0001136d
   11308:	0001136d 	.word	0x0001136d
   1130c:	0001136d 	.word	0x0001136d
   11310:	0001136d 	.word	0x0001136d
   11314:	00011335 	.word	0x00011335
   11318:	0001133d 	.word	0x0001133d
   1131c:	0001134d 	.word	0x0001134d
   11320:	00011345 	.word	0x00011345
   11324:	00011355 	.word	0x00011355
   11328:	0001135d 	.word	0x0001135d
        case Etape::DEPART :
            return 0;
   1132c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11330:	607b      	str	r3, [r7, #4]
   11332:	e01e      	b.n	11372 <_ZN9Krabi201513getScoreEtapeEi+0xce>
            break;
        case Etape::CLAP :
            return 0;
   11334:	f04f 0200 	mov.w	r2, #0	; 0x0
   11338:	607a      	str	r2, [r7, #4]
   1133a:	e01a      	b.n	11372 <_ZN9Krabi201513getScoreEtapeEi+0xce>
            break;
        case Etape::GOBELET :
            return 0;//ce devrait être 40
   1133c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11340:	607b      	str	r3, [r7, #4]
   11342:	e016      	b.n	11372 <_ZN9Krabi201513getScoreEtapeEi+0xce>
            break;
        case Etape::AMPOULE :
            return 0;
   11344:	f04f 0200 	mov.w	r2, #0	; 0x0
   11348:	607a      	str	r2, [r7, #4]
   1134a:	e012      	b.n	11372 <_ZN9Krabi201513getScoreEtapeEi+0xce>
            break;
        case Etape::RAMASSER_PIED :
            return 100;//ce devrait être 20
   1134c:	f04f 0364 	mov.w	r3, #100	; 0x64
   11350:	607b      	str	r3, [r7, #4]
   11352:	e00e      	b.n	11372 <_ZN9Krabi201513getScoreEtapeEi+0xce>
            break;
        case Etape::TAPIS :
            return 0;
   11354:	f04f 0200 	mov.w	r2, #0	; 0x0
   11358:	607a      	str	r2, [r7, #4]
   1135a:	e00a      	b.n	11372 <_ZN9Krabi201513getScoreEtapeEi+0xce>
            break;
        case Etape::DEPOSE_GOBELET :
            return 0;
   1135c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11360:	607b      	str	r3, [r7, #4]
   11362:	e006      	b.n	11372 <_ZN9Krabi201513getScoreEtapeEi+0xce>
            break;
        case Etape::POINT_PASSAGE :
            return 0;
   11364:	f04f 0200 	mov.w	r2, #0	; 0x0
   11368:	607a      	str	r2, [r7, #4]
   1136a:	e002      	b.n	11372 <_ZN9Krabi201513getScoreEtapeEi+0xce>
            break;
        default :
            return 0;
   1136c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11370:	607b      	str	r3, [r7, #4]
   11372:	687b      	ldr	r3, [r7, #4]
            break;
    }
}
   11374:	4618      	mov	r0, r3
   11376:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1137a:	46bd      	mov	sp, r7
   1137c:	bd80      	pop	{r7, pc}
   1137e:	46c0      	nop			(mov r8, r8)

00011380 <_ZN9Krabi201511updateStockEv>:
    etape6->setNumeroEtapeFinAction(7);//Clapet côté adverse
    // Lancer Dijkstra
    startDijkstra();
}

void Krabi2015::updateStock(){
   11380:	b580      	push	{r7, lr}
   11382:	b082      	sub	sp, #8
   11384:	af00      	add	r7, sp, #0
   11386:	6078      	str	r0, [r7, #4]
    switch(this->tableauEtapes[this->etapeEnCours]->getEtapeType()){
   11388:	687b      	ldr	r3, [r7, #4]
   1138a:	6b1a      	ldr	r2, [r3, #48]
   1138c:	687b      	ldr	r3, [r7, #4]
   1138e:	699b      	ldr	r3, [r3, #24]
   11390:	ea4f 0383 	mov.w	r3, r3, lsl #2
   11394:	4413      	add	r3, r2
   11396:	681b      	ldr	r3, [r3, #0]
   11398:	4618      	mov	r0, r3
   1139a:	f7ff fb0b 	bl	109b4 <_ZN5Etape12getEtapeTypeEv>
   1139e:	4603      	mov	r3, r0
   113a0:	2b05      	cmp	r3, #5
   113a2:	d10d      	bne.n	113c0 <_ZN9Krabi201511updateStockEv+0x40>
        case Etape::DEPART :
            this->tableauEtapes[this->etapeEnCours]->setEtapeType(Etape::POINT_PASSAGE);
   113a4:	687b      	ldr	r3, [r7, #4]
   113a6:	6b1a      	ldr	r2, [r3, #48]
   113a8:	687b      	ldr	r3, [r7, #4]
   113aa:	699b      	ldr	r3, [r3, #24]
   113ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
   113b0:	4413      	add	r3, r2
   113b2:	681b      	ldr	r3, [r3, #0]
   113b4:	4618      	mov	r0, r3
   113b6:	f04f 0100 	mov.w	r1, #0	; 0x0
   113ba:	f7ff fb07 	bl	109cc <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>
   113be:	e00c      	b.n	113da <_ZN9Krabi201511updateStockEv+0x5a>
            break;
        default :
            this->tableauEtapes[this->etapeEnCours]->setEtapeType(Etape::POINT_PASSAGE);
   113c0:	687b      	ldr	r3, [r7, #4]
   113c2:	6b1a      	ldr	r2, [r3, #48]
   113c4:	687b      	ldr	r3, [r7, #4]
   113c6:	699b      	ldr	r3, [r3, #24]
   113c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   113cc:	4413      	add	r3, r2
   113ce:	681b      	ldr	r3, [r3, #0]
   113d0:	4618      	mov	r0, r3
   113d2:	f04f 0100 	mov.w	r1, #0	; 0x0
   113d6:	f7ff faf9 	bl	109cc <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>
    }
}
   113da:	f107 0708 	add.w	r7, r7, #8	; 0x8
   113de:	46bd      	mov	sp, r7
   113e0:	bd80      	pop	{r7, pc}
   113e2:	46c0      	nop			(mov r8, r8)

000113e4 <_ZN9Krabi2015C1Eb>:
#include "krabi2015.h"

Krabi2015::Krabi2015(bool isYellow) : StrategieV3(isYellow)
   113e4:	b590      	push	{r4, r7, lr}
   113e6:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
   113ea:	b085      	sub	sp, #20
   113ec:	af04      	add	r7, sp, #16
   113ee:	f507 730c 	add.w	r3, r7, #560	; 0x230
   113f2:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   113f6:	6018      	str	r0, [r3, #0]
   113f8:	460a      	mov	r2, r1
   113fa:	f507 730c 	add.w	r3, r7, #560	; 0x230
   113fe:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   11402:	701a      	strb	r2, [r3, #0]
   11404:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11408:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1140c:	681a      	ldr	r2, [r3, #0]
   1140e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11412:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   11416:	781b      	ldrb	r3, [r3, #0]
   11418:	4610      	mov	r0, r2
   1141a:	4619      	mov	r1, r3
   1141c:	f007 fd4a 	bl	18eb4 <_ZN11StrategieV3C2Eb>
   11420:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11424:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11428:	681a      	ldr	r2, [r3, #0]
   1142a:	f8df 3c4c 	ldr.w	r3, [pc, #3148]	; 12078 <_ZN9Krabi2015C1Eb+0xc94>
   1142e:	6013      	str	r3, [r2, #0]
   11430:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11434:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11438:	681b      	ldr	r3, [r3, #0]
   1143a:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1143e:	607b      	str	r3, [r7, #4]
   11440:	f04f 0302 	mov.w	r3, #2	; 0x2
   11444:	60bb      	str	r3, [r7, #8]
   11446:	e00a      	b.n	1145e <_ZN9Krabi2015C1Eb+0x7a>
   11448:	6878      	ldr	r0, [r7, #4]
   1144a:	f7fe fc55 	bl	fcf8 <_ZN4ClapC1Ev>
   1144e:	687b      	ldr	r3, [r7, #4]
   11450:	f103 0328 	add.w	r3, r3, #40	; 0x28
   11454:	607b      	str	r3, [r7, #4]
   11456:	68bb      	ldr	r3, [r7, #8]
   11458:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   1145c:	60bb      	str	r3, [r7, #8]
   1145e:	68bb      	ldr	r3, [r7, #8]
   11460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   11464:	d1f0      	bne.n	11448 <_ZN9Krabi2015C1Eb+0x64>
   11466:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1146a:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1146e:	681b      	ldr	r3, [r3, #0]
   11470:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   11474:	60fb      	str	r3, [r7, #12]
   11476:	f04f 0304 	mov.w	r3, #4	; 0x4
   1147a:	613b      	str	r3, [r7, #16]
   1147c:	e00a      	b.n	11494 <_ZN9Krabi2015C1Eb+0xb0>
   1147e:	68f8      	ldr	r0, [r7, #12]
   11480:	f7ff fec0 	bl	11204 <_ZN7GobeletC1Ev>
   11484:	68fb      	ldr	r3, [r7, #12]
   11486:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1148a:	60fb      	str	r3, [r7, #12]
   1148c:	693b      	ldr	r3, [r7, #16]
   1148e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   11492:	613b      	str	r3, [r7, #16]
   11494:	693b      	ldr	r3, [r7, #16]
   11496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1149a:	d1f0      	bne.n	1147e <_ZN9Krabi2015C1Eb+0x9a>
   1149c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   114a0:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   114a4:	681b      	ldr	r3, [r3, #0]
   114a6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   114aa:	617b      	str	r3, [r7, #20]
   114ac:	f04f 0301 	mov.w	r3, #1	; 0x1
   114b0:	61bb      	str	r3, [r7, #24]
   114b2:	e00a      	b.n	114ca <_ZN9Krabi2015C1Eb+0xe6>
   114b4:	6978      	ldr	r0, [r7, #20]
   114b6:	f007 fe8d 	bl	191d4 <_ZN5TapisC1Ev>
   114ba:	697b      	ldr	r3, [r7, #20]
   114bc:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   114c0:	617b      	str	r3, [r7, #20]
   114c2:	69bb      	ldr	r3, [r7, #24]
   114c4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   114c8:	61bb      	str	r3, [r7, #24]
   114ca:	69bb      	ldr	r3, [r7, #24]
   114cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   114d0:	d1f0      	bne.n	114b4 <_ZN9Krabi2015C1Eb+0xd0>
   114d2:	f507 730c 	add.w	r3, r7, #560	; 0x230
   114d6:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   114da:	681b      	ldr	r3, [r3, #0]
   114dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
   114e0:	61fb      	str	r3, [r7, #28]
   114e2:	f04f 0302 	mov.w	r3, #2	; 0x2
   114e6:	623b      	str	r3, [r7, #32]
   114e8:	e00a      	b.n	11500 <_ZN9Krabi2015C1Eb+0x11c>
   114ea:	69f8      	ldr	r0, [r7, #28]
   114ec:	f7fe fda2 	bl	10034 <_ZN14DeposerGobeletC1Ev>
   114f0:	69fb      	ldr	r3, [r7, #28]
   114f2:	f103 0320 	add.w	r3, r3, #32	; 0x20
   114f6:	61fb      	str	r3, [r7, #28]
   114f8:	6a3b      	ldr	r3, [r7, #32]
   114fa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   114fe:	623b      	str	r3, [r7, #32]
   11500:	6a3b      	ldr	r3, [r7, #32]
   11502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   11506:	d1f0      	bne.n	114ea <_ZN9Krabi2015C1Eb+0x106>
   11508:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1150c:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11510:	681b      	ldr	r3, [r3, #0]
   11512:	f503 7306 	add.w	r3, r3, #536	; 0x218
   11516:	627b      	str	r3, [r7, #36]
   11518:	f04f 0307 	mov.w	r3, #7	; 0x7
   1151c:	62bb      	str	r3, [r7, #40]
   1151e:	e00a      	b.n	11536 <_ZN9Krabi2015C1Eb+0x152>
   11520:	6a78      	ldr	r0, [r7, #36]
   11522:	f005 fc49 	bl	16db8 <_ZN12RamasserPiedC1Ev>
   11526:	6a7b      	ldr	r3, [r7, #36]
   11528:	f103 0324 	add.w	r3, r3, #36	; 0x24
   1152c:	627b      	str	r3, [r7, #36]
   1152e:	6abb      	ldr	r3, [r7, #40]
   11530:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   11534:	62bb      	str	r3, [r7, #40]
   11536:	6abb      	ldr	r3, [r7, #40]
   11538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1153c:	d1f0      	bne.n	11520 <_ZN9Krabi2015C1Eb+0x13c>
{
    // Initialisation des stocks

    //Initialisation des tableaux d'étapes
    this->nombreEtapes = NOMBRE_ETAPES;
   1153e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11542:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11546:	681a      	ldr	r2, [r3, #0]
   11548:	f04f 0328 	mov.w	r3, #40	; 0x28
   1154c:	61d3      	str	r3, [r2, #28]
    this->numeroEtapeGarage = ETAPE_GARAGE;
   1154e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11552:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11556:	681a      	ldr	r2, [r3, #0]
   11558:	f04f 0301 	mov.w	r3, #1	; 0x1
   1155c:	6213      	str	r3, [r2, #32]
    tableauEtapesTotal = new Etape*[NOMBRE_ETAPES];
   1155e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   11562:	f7fd fb79 	bl	ec58 <_Znaj>
   11566:	4603      	mov	r3, r0
   11568:	461a      	mov	r2, r3
   1156a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1156e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11572:	681b      	ldr	r3, [r3, #0]
   11574:	635a      	str	r2, [r3, #52]
    actionEtape = new MediumLevelAction*[NOMBRE_ETAPES];
   11576:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   1157a:	f7fd fb6d 	bl	ec58 <_Znaj>
   1157e:	4603      	mov	r3, r0
   11580:	461a      	mov	r2, r3
   11582:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11586:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1158a:	681b      	ldr	r3, [r3, #0]
   1158c:	625a      	str	r2, [r3, #36]
    actionGoto = new ActionGoTo[NOMBRE_ETAPES];
   1158e:	f44f 60f1 	mov.w	r0, #1928	; 0x788
   11592:	f7fd fb61 	bl	ec58 <_Znaj>
   11596:	4603      	mov	r3, r0
   11598:	62fb      	str	r3, [r7, #44]
   1159a:	6afb      	ldr	r3, [r7, #44]
   1159c:	2b00      	cmp	r3, #0
   1159e:	d03c      	beq.n	1161a <_ZN9Krabi2015C1Eb+0x236>
   115a0:	6afb      	ldr	r3, [r7, #44]
   115a2:	f103 0308 	add.w	r3, r3, #8	; 0x8
   115a6:	637b      	str	r3, [r7, #52]
   115a8:	6b7b      	ldr	r3, [r7, #52]
   115aa:	f1a3 0304 	sub.w	r3, r3, #4	; 0x4
   115ae:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   115b2:	f04f 0330 	mov.w	r3, #48	; 0x30
   115b6:	6013      	str	r3, [r2, #0]
   115b8:	6b7b      	ldr	r3, [r7, #52]
   115ba:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   115be:	f04f 0328 	mov.w	r3, #40	; 0x28
   115c2:	6013      	str	r3, [r2, #0]
   115c4:	6b7b      	ldr	r3, [r7, #52]
   115c6:	63bb      	str	r3, [r7, #56]
   115c8:	f04f 0327 	mov.w	r3, #39	; 0x27
   115cc:	63fb      	str	r3, [r7, #60]
   115ce:	e01d      	b.n	1160c <_ZN9Krabi2015C1Eb+0x228>
   115d0:	f507 730a 	add.w	r3, r7, #552	; 0x228
   115d4:	4618      	mov	r0, r3
   115d6:	f8df 1aa4 	ldr.w	r1, [pc, #2724]	; 1207c <_ZN9Krabi2015C1Eb+0xc98>
   115da:	f8df 2aa0 	ldr.w	r2, [pc, #2720]	; 1207c <_ZN9Krabi2015C1Eb+0xc98>
   115de:	f04f 0301 	mov.w	r3, #1	; 0x1
   115e2:	f7fd fc07 	bl	edf4 <_ZN8PositionC1Effb>
   115e6:	f507 720a 	add.w	r2, r7, #552	; 0x228
   115ea:	f8df 3a94 	ldr.w	r3, [pc, #2708]	; 12080 <_ZN9Krabi2015C1Eb+0xc9c>
   115ee:	9300      	str	r3, [sp, #0]
   115f0:	6bb8      	ldr	r0, [r7, #56]
   115f2:	ca06      	ldmia	r2!, {r1, r2}
   115f4:	f04f 0300 	mov.w	r3, #0	; 0x0
   115f8:	f7fe f922 	bl	f840 <_ZN10ActionGoToC1E8Positionbf>
   115fc:	6bbb      	ldr	r3, [r7, #56]
   115fe:	f103 0330 	add.w	r3, r3, #48	; 0x30
   11602:	63bb      	str	r3, [r7, #56]
   11604:	6bfb      	ldr	r3, [r7, #60]
   11606:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   1160a:	63fb      	str	r3, [r7, #60]
   1160c:	6bfb      	ldr	r3, [r7, #60]
   1160e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   11612:	d1dd      	bne.n	115d0 <_ZN9Krabi2015C1Eb+0x1ec>
   11614:	6b7b      	ldr	r3, [r7, #52]
   11616:	633b      	str	r3, [r7, #48]
   11618:	e001      	b.n	1161e <_ZN9Krabi2015C1Eb+0x23a>
   1161a:	6afb      	ldr	r3, [r7, #44]
   1161c:	633b      	str	r3, [r7, #48]
   1161e:	6b3a      	ldr	r2, [r7, #48]
   11620:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11624:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11628:	681b      	ldr	r3, [r3, #0]
   1162a:	629a      	str	r2, [r3, #40]
    // TODO: A supprimer pour une variable statique dans Etape
    int numeroEtape = 0;
   1162c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11630:	f8c7 3758 	str.w	r3, [r7, #1880]

    // Création des étapes
    // Arguments : Position, numéro étape, tableau des étapes, type d'étape, état de l'étape, nombre étapes liées
    Etape* etape0 = new Etape(Position(250, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPART, -1, 0); //départ au fond de la zone de départ
   11634:	f507 720c 	add.w	r2, r7, #560	; 0x230
   11638:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1163c:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   11640:	781b      	ldrb	r3, [r3, #0]
   11642:	4610      	mov	r0, r2
   11644:	f8df 1a3c 	ldr.w	r1, [pc, #2620]	; 12084 <_ZN9Krabi2015C1Eb+0xca0>
   11648:	f8df 2a3c 	ldr.w	r2, [pc, #2620]	; 12088 <_ZN9Krabi2015C1Eb+0xca4>
   1164c:	f7fd fbd2 	bl	edf4 <_ZN8PositionC1Effb>
   11650:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11654:	643b      	str	r3, [r7, #64]
   11656:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1165a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1165e:	f8c7 3758 	str.w	r3, [r7, #1880]
   11662:	f04f 0038 	mov.w	r0, #56	; 0x38
   11666:	f7fd fa5f 	bl	eb28 <_Znwj>
   1166a:	4603      	mov	r3, r0
   1166c:	647b      	str	r3, [r7, #68]
   1166e:	6c7b      	ldr	r3, [r7, #68]
   11670:	2b00      	cmp	r3, #0
   11672:	d019      	beq.n	116a8 <_ZN9Krabi2015C1Eb+0x2c4>
   11674:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11678:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1167c:	681b      	ldr	r3, [r3, #0]
   1167e:	6b5b      	ldr	r3, [r3, #52]
   11680:	f507 720c 	add.w	r2, r7, #560	; 0x230
   11684:	9300      	str	r3, [sp, #0]
   11686:	f04f 0305 	mov.w	r3, #5	; 0x5
   1168a:	9301      	str	r3, [sp, #4]
   1168c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11690:	9302      	str	r3, [sp, #8]
   11692:	f04f 0300 	mov.w	r3, #0	; 0x0
   11696:	9303      	str	r3, [sp, #12]
   11698:	6c78      	ldr	r0, [r7, #68]
   1169a:	ca06      	ldmia	r2!, {r1, r2}
   1169c:	6c3b      	ldr	r3, [r7, #64]
   1169e:	f7ff fb63 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   116a2:	6c7b      	ldr	r3, [r7, #68]
   116a4:	64bb      	str	r3, [r7, #72]
   116a6:	e001      	b.n	116ac <_ZN9Krabi2015C1Eb+0x2c8>
   116a8:	6c7b      	ldr	r3, [r7, #68]
   116aa:	64bb      	str	r3, [r7, #72]
   116ac:	6cbb      	ldr	r3, [r7, #72]
   116ae:	f8c7 375c 	str.w	r3, [r7, #1884]
    Etape* etape1 = new Etape(Position(700, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPOSE_GOBELET, -1, 0);
   116b2:	f507 720e 	add.w	r2, r7, #568	; 0x238
   116b6:	f507 730c 	add.w	r3, r7, #560	; 0x230
   116ba:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   116be:	781b      	ldrb	r3, [r3, #0]
   116c0:	4610      	mov	r0, r2
   116c2:	f8df 19c8 	ldr.w	r1, [pc, #2504]	; 1208c <_ZN9Krabi2015C1Eb+0xca8>
   116c6:	f8df 29c0 	ldr.w	r2, [pc, #2496]	; 12088 <_ZN9Krabi2015C1Eb+0xca4>
   116ca:	f7fd fb93 	bl	edf4 <_ZN8PositionC1Effb>
   116ce:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   116d2:	64fb      	str	r3, [r7, #76]
   116d4:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   116d8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   116dc:	f8c7 3758 	str.w	r3, [r7, #1880]
   116e0:	f04f 0038 	mov.w	r0, #56	; 0x38
   116e4:	f7fd fa20 	bl	eb28 <_Znwj>
   116e8:	4603      	mov	r3, r0
   116ea:	653b      	str	r3, [r7, #80]
   116ec:	6d3b      	ldr	r3, [r7, #80]
   116ee:	2b00      	cmp	r3, #0
   116f0:	d019      	beq.n	11726 <_ZN9Krabi2015C1Eb+0x342>
   116f2:	f507 730c 	add.w	r3, r7, #560	; 0x230
   116f6:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   116fa:	681b      	ldr	r3, [r3, #0]
   116fc:	6b5b      	ldr	r3, [r3, #52]
   116fe:	f507 720e 	add.w	r2, r7, #568	; 0x238
   11702:	9300      	str	r3, [sp, #0]
   11704:	f04f 0316 	mov.w	r3, #22	; 0x16
   11708:	9301      	str	r3, [sp, #4]
   1170a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1170e:	9302      	str	r3, [sp, #8]
   11710:	f04f 0300 	mov.w	r3, #0	; 0x0
   11714:	9303      	str	r3, [sp, #12]
   11716:	6d38      	ldr	r0, [r7, #80]
   11718:	ca06      	ldmia	r2!, {r1, r2}
   1171a:	6cfb      	ldr	r3, [r7, #76]
   1171c:	f7ff fb24 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11720:	6d3b      	ldr	r3, [r7, #80]
   11722:	657b      	str	r3, [r7, #84]
   11724:	e001      	b.n	1172a <_ZN9Krabi2015C1Eb+0x346>
   11726:	6d3b      	ldr	r3, [r7, #80]
   11728:	657b      	str	r3, [r7, #84]
   1172a:	6d7b      	ldr	r3, [r7, #84]
   1172c:	f8c7 3760 	str.w	r3, [r7, #1888]
    Etape* etape2 = new Etape(Position(836, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   11730:	f507 7210 	add.w	r2, r7, #576	; 0x240
   11734:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11738:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   1173c:	781b      	ldrb	r3, [r3, #0]
   1173e:	4610      	mov	r0, r2
   11740:	f8df 194c 	ldr.w	r1, [pc, #2380]	; 12090 <_ZN9Krabi2015C1Eb+0xcac>
   11744:	f8df 294c 	ldr.w	r2, [pc, #2380]	; 12094 <_ZN9Krabi2015C1Eb+0xcb0>
   11748:	f7fd fb54 	bl	edf4 <_ZN8PositionC1Effb>
   1174c:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11750:	65bb      	str	r3, [r7, #88]
   11752:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11756:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1175a:	f8c7 3758 	str.w	r3, [r7, #1880]
   1175e:	f04f 0038 	mov.w	r0, #56	; 0x38
   11762:	f7fd f9e1 	bl	eb28 <_Znwj>
   11766:	4603      	mov	r3, r0
   11768:	65fb      	str	r3, [r7, #92]
   1176a:	6dfb      	ldr	r3, [r7, #92]
   1176c:	2b00      	cmp	r3, #0
   1176e:	d019      	beq.n	117a4 <_ZN9Krabi2015C1Eb+0x3c0>
   11770:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11774:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11778:	681b      	ldr	r3, [r3, #0]
   1177a:	6b5b      	ldr	r3, [r3, #52]
   1177c:	f507 7210 	add.w	r2, r7, #576	; 0x240
   11780:	9300      	str	r3, [sp, #0]
   11782:	f04f 0311 	mov.w	r3, #17	; 0x11
   11786:	9301      	str	r3, [sp, #4]
   11788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1178c:	9302      	str	r3, [sp, #8]
   1178e:	f04f 0300 	mov.w	r3, #0	; 0x0
   11792:	9303      	str	r3, [sp, #12]
   11794:	6df8      	ldr	r0, [r7, #92]
   11796:	ca06      	ldmia	r2!, {r1, r2}
   11798:	6dbb      	ldr	r3, [r7, #88]
   1179a:	f7ff fae5 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1179e:	6dfb      	ldr	r3, [r7, #92]
   117a0:	663b      	str	r3, [r7, #96]
   117a2:	e001      	b.n	117a8 <_ZN9Krabi2015C1Eb+0x3c4>
   117a4:	6dfb      	ldr	r3, [r7, #92]
   117a6:	663b      	str	r3, [r7, #96]
   117a8:	6e3b      	ldr	r3, [r7, #96]
   117aa:	f8c7 3764 	str.w	r3, [r7, #1892]
    Etape* etape3 = new Etape(Position(1000, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   117ae:	f507 7212 	add.w	r2, r7, #584	; 0x248
   117b2:	f507 730c 	add.w	r3, r7, #560	; 0x230
   117b6:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   117ba:	781b      	ldrb	r3, [r3, #0]
   117bc:	4610      	mov	r0, r2
   117be:	f8df 18c8 	ldr.w	r1, [pc, #2248]	; 12088 <_ZN9Krabi2015C1Eb+0xca4>
   117c2:	f8df 28d0 	ldr.w	r2, [pc, #2256]	; 12094 <_ZN9Krabi2015C1Eb+0xcb0>
   117c6:	f7fd fb15 	bl	edf4 <_ZN8PositionC1Effb>
   117ca:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   117ce:	667b      	str	r3, [r7, #100]
   117d0:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   117d4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   117d8:	f8c7 3758 	str.w	r3, [r7, #1880]
   117dc:	f04f 0038 	mov.w	r0, #56	; 0x38
   117e0:	f7fd f9a2 	bl	eb28 <_Znwj>
   117e4:	4603      	mov	r3, r0
   117e6:	66bb      	str	r3, [r7, #104]
   117e8:	6ebb      	ldr	r3, [r7, #104]
   117ea:	2b00      	cmp	r3, #0
   117ec:	d019      	beq.n	11822 <_ZN9Krabi2015C1Eb+0x43e>
   117ee:	f507 730c 	add.w	r3, r7, #560	; 0x230
   117f2:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   117f6:	681b      	ldr	r3, [r3, #0]
   117f8:	6b5b      	ldr	r3, [r3, #52]
   117fa:	f507 7212 	add.w	r2, r7, #584	; 0x248
   117fe:	9300      	str	r3, [sp, #0]
   11800:	f04f 0300 	mov.w	r3, #0	; 0x0
   11804:	9301      	str	r3, [sp, #4]
   11806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1180a:	9302      	str	r3, [sp, #8]
   1180c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11810:	9303      	str	r3, [sp, #12]
   11812:	6eb8      	ldr	r0, [r7, #104]
   11814:	ca06      	ldmia	r2!, {r1, r2}
   11816:	6e7b      	ldr	r3, [r7, #100]
   11818:	f7ff faa6 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1181c:	6ebb      	ldr	r3, [r7, #104]
   1181e:	66fb      	str	r3, [r7, #108]
   11820:	e001      	b.n	11826 <_ZN9Krabi2015C1Eb+0x442>
   11822:	6ebb      	ldr	r3, [r7, #104]
   11824:	66fb      	str	r3, [r7, #108]
   11826:	6efb      	ldr	r3, [r7, #108]
   11828:	f8c7 3768 	str.w	r3, [r7, #1896]
    Etape* etape4 = new Etape(Position(236, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   1182c:	f507 7214 	add.w	r2, r7, #592	; 0x250
   11830:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11834:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   11838:	781b      	ldrb	r3, [r3, #0]
   1183a:	4610      	mov	r0, r2
   1183c:	f8df 1858 	ldr.w	r1, [pc, #2136]	; 12098 <_ZN9Krabi2015C1Eb+0xcb4>
   11840:	f8df 2850 	ldr.w	r2, [pc, #2128]	; 12094 <_ZN9Krabi2015C1Eb+0xcb0>
   11844:	f7fd fad6 	bl	edf4 <_ZN8PositionC1Effb>
   11848:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1184c:	673b      	str	r3, [r7, #112]
   1184e:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11852:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11856:	f8c7 3758 	str.w	r3, [r7, #1880]
   1185a:	f04f 0038 	mov.w	r0, #56	; 0x38
   1185e:	f7fd f963 	bl	eb28 <_Znwj>
   11862:	4603      	mov	r3, r0
   11864:	677b      	str	r3, [r7, #116]
   11866:	6f7b      	ldr	r3, [r7, #116]
   11868:	2b00      	cmp	r3, #0
   1186a:	d019      	beq.n	118a0 <_ZN9Krabi2015C1Eb+0x4bc>
   1186c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11870:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11874:	681b      	ldr	r3, [r3, #0]
   11876:	6b5b      	ldr	r3, [r3, #52]
   11878:	f507 7214 	add.w	r2, r7, #592	; 0x250
   1187c:	9300      	str	r3, [sp, #0]
   1187e:	f04f 0311 	mov.w	r3, #17	; 0x11
   11882:	9301      	str	r3, [sp, #4]
   11884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11888:	9302      	str	r3, [sp, #8]
   1188a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1188e:	9303      	str	r3, [sp, #12]
   11890:	6f78      	ldr	r0, [r7, #116]
   11892:	ca06      	ldmia	r2!, {r1, r2}
   11894:	6f3b      	ldr	r3, [r7, #112]
   11896:	f7ff fa67 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1189a:	6f7b      	ldr	r3, [r7, #116]
   1189c:	67bb      	str	r3, [r7, #120]
   1189e:	e001      	b.n	118a4 <_ZN9Krabi2015C1Eb+0x4c0>
   118a0:	6f7b      	ldr	r3, [r7, #116]
   118a2:	67bb      	str	r3, [r7, #120]
   118a4:	6fbb      	ldr	r3, [r7, #120]
   118a6:	f8c7 376c 	str.w	r3, [r7, #1900]
    Etape* etape5 = new Etape(Position(400, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   118aa:	f507 7216 	add.w	r2, r7, #600	; 0x258
   118ae:	f507 730c 	add.w	r3, r7, #560	; 0x230
   118b2:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   118b6:	781b      	ldrb	r3, [r3, #0]
   118b8:	4610      	mov	r0, r2
   118ba:	f8df 17e0 	ldr.w	r1, [pc, #2016]	; 1209c <_ZN9Krabi2015C1Eb+0xcb8>
   118be:	f8df 27d4 	ldr.w	r2, [pc, #2004]	; 12094 <_ZN9Krabi2015C1Eb+0xcb0>
   118c2:	f7fd fa97 	bl	edf4 <_ZN8PositionC1Effb>
   118c6:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   118ca:	67fb      	str	r3, [r7, #124]
   118cc:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   118d0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   118d4:	f8c7 3758 	str.w	r3, [r7, #1880]
   118d8:	f04f 0038 	mov.w	r0, #56	; 0x38
   118dc:	f7fd f924 	bl	eb28 <_Znwj>
   118e0:	4603      	mov	r3, r0
   118e2:	f8c7 3080 	str.w	r3, [r7, #128]
   118e6:	f8d7 3080 	ldr.w	r3, [r7, #128]
   118ea:	2b00      	cmp	r3, #0
   118ec:	d01c      	beq.n	11928 <_ZN9Krabi2015C1Eb+0x544>
   118ee:	f507 730c 	add.w	r3, r7, #560	; 0x230
   118f2:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   118f6:	681b      	ldr	r3, [r3, #0]
   118f8:	6b5b      	ldr	r3, [r3, #52]
   118fa:	f507 7216 	add.w	r2, r7, #600	; 0x258
   118fe:	9300      	str	r3, [sp, #0]
   11900:	f04f 0300 	mov.w	r3, #0	; 0x0
   11904:	9301      	str	r3, [sp, #4]
   11906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1190a:	9302      	str	r3, [sp, #8]
   1190c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11910:	9303      	str	r3, [sp, #12]
   11912:	f8d7 0080 	ldr.w	r0, [r7, #128]
   11916:	ca06      	ldmia	r2!, {r1, r2}
   11918:	6ffb      	ldr	r3, [r7, #124]
   1191a:	f7ff fa25 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1191e:	f8d7 3080 	ldr.w	r3, [r7, #128]
   11922:	f8c7 3084 	str.w	r3, [r7, #132]
   11926:	e003      	b.n	11930 <_ZN9Krabi2015C1Eb+0x54c>
   11928:	f8d7 3080 	ldr.w	r3, [r7, #128]
   1192c:	f8c7 3084 	str.w	r3, [r7, #132]
   11930:	f8d7 3084 	ldr.w	r3, [r7, #132]
   11934:	f8c7 3770 	str.w	r3, [r7, #1904]
    Etape* etape6 = new Etape(Position(2500, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   11938:	f507 7218 	add.w	r2, r7, #608	; 0x260
   1193c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11940:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   11944:	781b      	ldrb	r3, [r3, #0]
   11946:	4610      	mov	r0, r2
   11948:	f8df 1754 	ldr.w	r1, [pc, #1876]	; 120a0 <_ZN9Krabi2015C1Eb+0xcbc>
   1194c:	f8df 2744 	ldr.w	r2, [pc, #1860]	; 12094 <_ZN9Krabi2015C1Eb+0xcb0>
   11950:	f7fd fa50 	bl	edf4 <_ZN8PositionC1Effb>
   11954:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11958:	f8c7 3088 	str.w	r3, [r7, #136]
   1195c:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11960:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11964:	f8c7 3758 	str.w	r3, [r7, #1880]
   11968:	f04f 0038 	mov.w	r0, #56	; 0x38
   1196c:	f7fd f8dc 	bl	eb28 <_Znwj>
   11970:	4603      	mov	r3, r0
   11972:	f8c7 308c 	str.w	r3, [r7, #140]
   11976:	f8d7 308c 	ldr.w	r3, [r7, #140]
   1197a:	2b00      	cmp	r3, #0
   1197c:	d01d      	beq.n	119ba <_ZN9Krabi2015C1Eb+0x5d6>
   1197e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11982:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11986:	681b      	ldr	r3, [r3, #0]
   11988:	6b5b      	ldr	r3, [r3, #52]
   1198a:	f507 7218 	add.w	r2, r7, #608	; 0x260
   1198e:	9300      	str	r3, [sp, #0]
   11990:	f04f 0311 	mov.w	r3, #17	; 0x11
   11994:	9301      	str	r3, [sp, #4]
   11996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1199a:	9302      	str	r3, [sp, #8]
   1199c:	f04f 0300 	mov.w	r3, #0	; 0x0
   119a0:	9303      	str	r3, [sp, #12]
   119a2:	f8d7 008c 	ldr.w	r0, [r7, #140]
   119a6:	ca06      	ldmia	r2!, {r1, r2}
   119a8:	f8d7 3088 	ldr.w	r3, [r7, #136]
   119ac:	f7ff f9dc 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   119b0:	f8d7 308c 	ldr.w	r3, [r7, #140]
   119b4:	f8c7 3090 	str.w	r3, [r7, #144]
   119b8:	e003      	b.n	119c2 <_ZN9Krabi2015C1Eb+0x5de>
   119ba:	f8d7 308c 	ldr.w	r3, [r7, #140]
   119be:	f8c7 3090 	str.w	r3, [r7, #144]
   119c2:	f8d7 3090 	ldr.w	r3, [r7, #144]
   119c6:	f8c7 3774 	str.w	r3, [r7, #1908]
    Etape* etape7 = new Etape(Position(2300, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   119ca:	f507 721a 	add.w	r2, r7, #616	; 0x268
   119ce:	f507 730c 	add.w	r3, r7, #560	; 0x230
   119d2:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   119d6:	781b      	ldrb	r3, [r3, #0]
   119d8:	4610      	mov	r0, r2
   119da:	f8df 16c8 	ldr.w	r1, [pc, #1736]	; 120a4 <_ZN9Krabi2015C1Eb+0xcc0>
   119de:	f8df 26b4 	ldr.w	r2, [pc, #1716]	; 12094 <_ZN9Krabi2015C1Eb+0xcb0>
   119e2:	f7fd fa07 	bl	edf4 <_ZN8PositionC1Effb>
   119e6:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   119ea:	f8c7 3094 	str.w	r3, [r7, #148]
   119ee:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   119f2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   119f6:	f8c7 3758 	str.w	r3, [r7, #1880]
   119fa:	f04f 0038 	mov.w	r0, #56	; 0x38
   119fe:	f7fd f893 	bl	eb28 <_Znwj>
   11a02:	4603      	mov	r3, r0
   11a04:	f8c7 3098 	str.w	r3, [r7, #152]
   11a08:	f8d7 3098 	ldr.w	r3, [r7, #152]
   11a0c:	2b00      	cmp	r3, #0
   11a0e:	d01d      	beq.n	11a4c <_ZN9Krabi2015C1Eb+0x668>
   11a10:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11a14:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11a18:	681b      	ldr	r3, [r3, #0]
   11a1a:	6b5b      	ldr	r3, [r3, #52]
   11a1c:	f507 721a 	add.w	r2, r7, #616	; 0x268
   11a20:	9300      	str	r3, [sp, #0]
   11a22:	f04f 0300 	mov.w	r3, #0	; 0x0
   11a26:	9301      	str	r3, [sp, #4]
   11a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11a2c:	9302      	str	r3, [sp, #8]
   11a2e:	f04f 0300 	mov.w	r3, #0	; 0x0
   11a32:	9303      	str	r3, [sp, #12]
   11a34:	f8d7 0098 	ldr.w	r0, [r7, #152]
   11a38:	ca06      	ldmia	r2!, {r1, r2}
   11a3a:	f8d7 3094 	ldr.w	r3, [r7, #148]
   11a3e:	f7ff f993 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11a42:	f8d7 3098 	ldr.w	r3, [r7, #152]
   11a46:	f8c7 309c 	str.w	r3, [r7, #156]
   11a4a:	e003      	b.n	11a54 <_ZN9Krabi2015C1Eb+0x670>
   11a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]
   11a50:	f8c7 309c 	str.w	r3, [r7, #156]
   11a54:	f8d7 309c 	ldr.w	r3, [r7, #156]
   11a58:	f8c7 3778 	str.w	r3, [r7, #1912]
    Etape* etape8 = new Etape(Position(250, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   11a5c:	f507 721c 	add.w	r2, r7, #624	; 0x270
   11a60:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11a64:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   11a68:	781b      	ldrb	r3, [r3, #0]
   11a6a:	4610      	mov	r0, r2
   11a6c:	f8df 1614 	ldr.w	r1, [pc, #1556]	; 12084 <_ZN9Krabi2015C1Eb+0xca0>
   11a70:	f8df 2634 	ldr.w	r2, [pc, #1588]	; 120a8 <_ZN9Krabi2015C1Eb+0xcc4>
   11a74:	f7fd f9be 	bl	edf4 <_ZN8PositionC1Effb>
   11a78:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11a7c:	f8c7 30a0 	str.w	r3, [r7, #160]
   11a80:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11a84:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11a88:	f8c7 3758 	str.w	r3, [r7, #1880]
   11a8c:	f04f 0038 	mov.w	r0, #56	; 0x38
   11a90:	f7fd f84a 	bl	eb28 <_Znwj>
   11a94:	4603      	mov	r3, r0
   11a96:	f8c7 30a4 	str.w	r3, [r7, #164]
   11a9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   11a9e:	2b00      	cmp	r3, #0
   11aa0:	d01d      	beq.n	11ade <_ZN9Krabi2015C1Eb+0x6fa>
   11aa2:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11aa6:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11aaa:	681b      	ldr	r3, [r3, #0]
   11aac:	6b5b      	ldr	r3, [r3, #52]
   11aae:	f507 721c 	add.w	r2, r7, #624	; 0x270
   11ab2:	9300      	str	r3, [sp, #0]
   11ab4:	f04f 0312 	mov.w	r3, #18	; 0x12
   11ab8:	9301      	str	r3, [sp, #4]
   11aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11abe:	9302      	str	r3, [sp, #8]
   11ac0:	f04f 0300 	mov.w	r3, #0	; 0x0
   11ac4:	9303      	str	r3, [sp, #12]
   11ac6:	f8d7 00a4 	ldr.w	r0, [r7, #164]
   11aca:	ca06      	ldmia	r2!, {r1, r2}
   11acc:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   11ad0:	f7ff f94a 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11ad4:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   11ad8:	f8c7 30a8 	str.w	r3, [r7, #168]
   11adc:	e003      	b.n	11ae6 <_ZN9Krabi2015C1Eb+0x702>
   11ade:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   11ae2:	f8c7 30a8 	str.w	r3, [r7, #168]
   11ae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   11aea:	f8c7 377c 	str.w	r3, [r7, #1916]
    Etape* etape9 = new Etape(Position(910, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   11aee:	f507 721e 	add.w	r2, r7, #632	; 0x278
   11af2:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11af6:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   11afa:	781b      	ldrb	r3, [r3, #0]
   11afc:	4610      	mov	r0, r2
   11afe:	f8df 15ac 	ldr.w	r1, [pc, #1452]	; 120ac <_ZN9Krabi2015C1Eb+0xcc8>
   11b02:	f8df 25ac 	ldr.w	r2, [pc, #1452]	; 120b0 <_ZN9Krabi2015C1Eb+0xccc>
   11b06:	f7fd f975 	bl	edf4 <_ZN8PositionC1Effb>
   11b0a:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11b0e:	f8c7 30ac 	str.w	r3, [r7, #172]
   11b12:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11b16:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11b1a:	f8c7 3758 	str.w	r3, [r7, #1880]
   11b1e:	f04f 0038 	mov.w	r0, #56	; 0x38
   11b22:	f7fd f801 	bl	eb28 <_Znwj>
   11b26:	4603      	mov	r3, r0
   11b28:	f8c7 30b0 	str.w	r3, [r7, #176]
   11b2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]
   11b30:	2b00      	cmp	r3, #0
   11b32:	d01d      	beq.n	11b70 <_ZN9Krabi2015C1Eb+0x78c>
   11b34:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11b38:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11b3c:	681b      	ldr	r3, [r3, #0]
   11b3e:	6b5b      	ldr	r3, [r3, #52]
   11b40:	f507 721e 	add.w	r2, r7, #632	; 0x278
   11b44:	9300      	str	r3, [sp, #0]
   11b46:	f04f 0312 	mov.w	r3, #18	; 0x12
   11b4a:	9301      	str	r3, [sp, #4]
   11b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b50:	9302      	str	r3, [sp, #8]
   11b52:	f04f 0300 	mov.w	r3, #0	; 0x0
   11b56:	9303      	str	r3, [sp, #12]
   11b58:	f8d7 00b0 	ldr.w	r0, [r7, #176]
   11b5c:	ca06      	ldmia	r2!, {r1, r2}
   11b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   11b62:	f7ff f901 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11b66:	f8d7 30b0 	ldr.w	r3, [r7, #176]
   11b6a:	f8c7 30b4 	str.w	r3, [r7, #180]
   11b6e:	e003      	b.n	11b78 <_ZN9Krabi2015C1Eb+0x794>
   11b70:	f8d7 30b0 	ldr.w	r3, [r7, #176]
   11b74:	f8c7 30b4 	str.w	r3, [r7, #180]
   11b78:	f8d7 30b4 	ldr.w	r3, [r7, #180]
   11b7c:	f8c7 3780 	str.w	r3, [r7, #1920]
    Etape* etape10 = new Etape(Position(1500, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   11b80:	f507 7220 	add.w	r2, r7, #640	; 0x280
   11b84:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11b88:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   11b8c:	781b      	ldrb	r3, [r3, #0]
   11b8e:	4610      	mov	r0, r2
   11b90:	f8df 1520 	ldr.w	r1, [pc, #1312]	; 120b4 <_ZN9Krabi2015C1Eb+0xcd0>
   11b94:	f8df 2520 	ldr.w	r2, [pc, #1312]	; 120b8 <_ZN9Krabi2015C1Eb+0xcd4>
   11b98:	f7fd f92c 	bl	edf4 <_ZN8PositionC1Effb>
   11b9c:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11ba0:	f8c7 30b8 	str.w	r3, [r7, #184]
   11ba4:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11ba8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11bac:	f8c7 3758 	str.w	r3, [r7, #1880]
   11bb0:	f04f 0038 	mov.w	r0, #56	; 0x38
   11bb4:	f7fc ffb8 	bl	eb28 <_Znwj>
   11bb8:	4603      	mov	r3, r0
   11bba:	f8c7 30bc 	str.w	r3, [r7, #188]
   11bbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]
   11bc2:	2b00      	cmp	r3, #0
   11bc4:	d01d      	beq.n	11c02 <_ZN9Krabi2015C1Eb+0x81e>
   11bc6:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11bca:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11bce:	681b      	ldr	r3, [r3, #0]
   11bd0:	6b5b      	ldr	r3, [r3, #52]
   11bd2:	f507 7220 	add.w	r2, r7, #640	; 0x280
   11bd6:	9300      	str	r3, [sp, #0]
   11bd8:	f04f 0312 	mov.w	r3, #18	; 0x12
   11bdc:	9301      	str	r3, [sp, #4]
   11bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11be2:	9302      	str	r3, [sp, #8]
   11be4:	f04f 0300 	mov.w	r3, #0	; 0x0
   11be8:	9303      	str	r3, [sp, #12]
   11bea:	f8d7 00bc 	ldr.w	r0, [r7, #188]
   11bee:	ca06      	ldmia	r2!, {r1, r2}
   11bf0:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   11bf4:	f7ff f8b8 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11bf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]
   11bfc:	f8c7 30c0 	str.w	r3, [r7, #192]
   11c00:	e003      	b.n	11c0a <_ZN9Krabi2015C1Eb+0x826>
   11c02:	f8d7 30bc 	ldr.w	r3, [r7, #188]
   11c06:	f8c7 30c0 	str.w	r3, [r7, #192]
   11c0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]
   11c0e:	f8c7 3784 	str.w	r3, [r7, #1924]
    Etape* etape11 = new Etape(Position(2090, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   11c12:	f507 7222 	add.w	r2, r7, #648	; 0x288
   11c16:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11c1a:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   11c1e:	781b      	ldrb	r3, [r3, #0]
   11c20:	4610      	mov	r0, r2
   11c22:	f8df 1498 	ldr.w	r1, [pc, #1176]	; 120bc <_ZN9Krabi2015C1Eb+0xcd8>
   11c26:	f8df 2488 	ldr.w	r2, [pc, #1160]	; 120b0 <_ZN9Krabi2015C1Eb+0xccc>
   11c2a:	f7fd f8e3 	bl	edf4 <_ZN8PositionC1Effb>
   11c2e:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11c32:	f8c7 30c4 	str.w	r3, [r7, #196]
   11c36:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11c3a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11c3e:	f8c7 3758 	str.w	r3, [r7, #1880]
   11c42:	f04f 0038 	mov.w	r0, #56	; 0x38
   11c46:	f7fc ff6f 	bl	eb28 <_Znwj>
   11c4a:	4603      	mov	r3, r0
   11c4c:	f8c7 30c8 	str.w	r3, [r7, #200]
   11c50:	f8d7 30c8 	ldr.w	r3, [r7, #200]
   11c54:	2b00      	cmp	r3, #0
   11c56:	d01d      	beq.n	11c94 <_ZN9Krabi2015C1Eb+0x8b0>
   11c58:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11c5c:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11c60:	681b      	ldr	r3, [r3, #0]
   11c62:	6b5b      	ldr	r3, [r3, #52]
   11c64:	f507 7222 	add.w	r2, r7, #648	; 0x288
   11c68:	9300      	str	r3, [sp, #0]
   11c6a:	f04f 0312 	mov.w	r3, #18	; 0x12
   11c6e:	9301      	str	r3, [sp, #4]
   11c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11c74:	9302      	str	r3, [sp, #8]
   11c76:	f04f 0300 	mov.w	r3, #0	; 0x0
   11c7a:	9303      	str	r3, [sp, #12]
   11c7c:	f8d7 00c8 	ldr.w	r0, [r7, #200]
   11c80:	ca06      	ldmia	r2!, {r1, r2}
   11c82:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   11c86:	f7ff f86f 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11c8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]
   11c8e:	f8c7 30cc 	str.w	r3, [r7, #204]
   11c92:	e003      	b.n	11c9c <_ZN9Krabi2015C1Eb+0x8b8>
   11c94:	f8d7 30c8 	ldr.w	r3, [r7, #200]
   11c98:	f8c7 30cc 	str.w	r3, [r7, #204]
   11c9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]
   11ca0:	f8c7 3788 	str.w	r3, [r7, #1928]
    Etape* etape12 = new Etape(Position(2750, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   11ca4:	f507 7224 	add.w	r2, r7, #656	; 0x290
   11ca8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11cac:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   11cb0:	781b      	ldrb	r3, [r3, #0]
   11cb2:	4610      	mov	r0, r2
   11cb4:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 120c0 <_ZN9Krabi2015C1Eb+0xcdc>
   11cb8:	4afb      	ldr	r2, [pc, #1004]	(120a8 <_ZN9Krabi2015C1Eb+0xcc4>)
   11cba:	f7fd f89b 	bl	edf4 <_ZN8PositionC1Effb>
   11cbe:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11cc2:	f8c7 30d0 	str.w	r3, [r7, #208]
   11cc6:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11cca:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11cce:	f8c7 3758 	str.w	r3, [r7, #1880]
   11cd2:	f04f 0038 	mov.w	r0, #56	; 0x38
   11cd6:	f7fc ff27 	bl	eb28 <_Znwj>
   11cda:	4603      	mov	r3, r0
   11cdc:	f8c7 30d4 	str.w	r3, [r7, #212]
   11ce0:	f8d7 30d4 	ldr.w	r3, [r7, #212]
   11ce4:	2b00      	cmp	r3, #0
   11ce6:	d01d      	beq.n	11d24 <_ZN9Krabi2015C1Eb+0x940>
   11ce8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11cec:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11cf0:	681b      	ldr	r3, [r3, #0]
   11cf2:	6b5b      	ldr	r3, [r3, #52]
   11cf4:	f507 7224 	add.w	r2, r7, #656	; 0x290
   11cf8:	9300      	str	r3, [sp, #0]
   11cfa:	f04f 0312 	mov.w	r3, #18	; 0x12
   11cfe:	9301      	str	r3, [sp, #4]
   11d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11d04:	9302      	str	r3, [sp, #8]
   11d06:	f04f 0300 	mov.w	r3, #0	; 0x0
   11d0a:	9303      	str	r3, [sp, #12]
   11d0c:	f8d7 00d4 	ldr.w	r0, [r7, #212]
   11d10:	ca06      	ldmia	r2!, {r1, r2}
   11d12:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   11d16:	f7ff f827 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]
   11d1e:	f8c7 30d8 	str.w	r3, [r7, #216]
   11d22:	e003      	b.n	11d2c <_ZN9Krabi2015C1Eb+0x948>
   11d24:	f8d7 30d4 	ldr.w	r3, [r7, #212]
   11d28:	f8c7 30d8 	str.w	r3, [r7, #216]
   11d2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]
   11d30:	f8c7 378c 	str.w	r3, [r7, #1932]
    Etape* etape13 = new Etape(Position(90, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::RAMASSER_PIED, -1, 0);
   11d34:	f507 7226 	add.w	r2, r7, #664	; 0x298
   11d38:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11d3c:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   11d40:	781b      	ldrb	r3, [r3, #0]
   11d42:	4610      	mov	r0, r2
   11d44:	49df      	ldr	r1, [pc, #892]	(120c4 <_ZN9Krabi2015C1Eb+0xce0>)
   11d46:	4ad8      	ldr	r2, [pc, #864]	(120a8 <_ZN9Krabi2015C1Eb+0xcc4>)
   11d48:	f7fd f854 	bl	edf4 <_ZN8PositionC1Effb>
   11d4c:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11d50:	f8c7 30dc 	str.w	r3, [r7, #220]
   11d54:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11d58:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11d5c:	f8c7 3758 	str.w	r3, [r7, #1880]
   11d60:	f04f 0038 	mov.w	r0, #56	; 0x38
   11d64:	f7fc fee0 	bl	eb28 <_Znwj>
   11d68:	4603      	mov	r3, r0
   11d6a:	f8c7 30e0 	str.w	r3, [r7, #224]
   11d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]
   11d72:	2b00      	cmp	r3, #0
   11d74:	d01d      	beq.n	11db2 <_ZN9Krabi2015C1Eb+0x9ce>
   11d76:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11d7a:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11d7e:	681b      	ldr	r3, [r3, #0]
   11d80:	6b5b      	ldr	r3, [r3, #52]
   11d82:	f507 7226 	add.w	r2, r7, #664	; 0x298
   11d86:	9300      	str	r3, [sp, #0]
   11d88:	f04f 0313 	mov.w	r3, #19	; 0x13
   11d8c:	9301      	str	r3, [sp, #4]
   11d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11d92:	9302      	str	r3, [sp, #8]
   11d94:	f04f 0300 	mov.w	r3, #0	; 0x0
   11d98:	9303      	str	r3, [sp, #12]
   11d9a:	f8d7 00e0 	ldr.w	r0, [r7, #224]
   11d9e:	ca06      	ldmia	r2!, {r1, r2}
   11da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   11da4:	f7fe ffe0 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]
   11dac:	f8c7 30e4 	str.w	r3, [r7, #228]
   11db0:	e003      	b.n	11dba <_ZN9Krabi2015C1Eb+0x9d6>
   11db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]
   11db6:	f8c7 30e4 	str.w	r3, [r7, #228]
   11dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]
   11dbe:	f8c7 3790 	str.w	r3, [r7, #1936]
    Etape* etape14 = new Etape(Position(90, 1850, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::RAMASSER_PIED, -1, 0);
   11dc2:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   11dc6:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11dca:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   11dce:	781b      	ldrb	r3, [r3, #0]
   11dd0:	4610      	mov	r0, r2
   11dd2:	49bc      	ldr	r1, [pc, #752]	(120c4 <_ZN9Krabi2015C1Eb+0xce0>)
   11dd4:	4abc      	ldr	r2, [pc, #752]	(120c8 <_ZN9Krabi2015C1Eb+0xce4>)
   11dd6:	f7fd f80d 	bl	edf4 <_ZN8PositionC1Effb>
   11dda:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11dde:	f8c7 30e8 	str.w	r3, [r7, #232]
   11de2:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11de6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11dea:	f8c7 3758 	str.w	r3, [r7, #1880]
   11dee:	f04f 0038 	mov.w	r0, #56	; 0x38
   11df2:	f7fc fe99 	bl	eb28 <_Znwj>
   11df6:	4603      	mov	r3, r0
   11df8:	f8c7 30ec 	str.w	r3, [r7, #236]
   11dfc:	f8d7 30ec 	ldr.w	r3, [r7, #236]
   11e00:	2b00      	cmp	r3, #0
   11e02:	d01d      	beq.n	11e40 <_ZN9Krabi2015C1Eb+0xa5c>
   11e04:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11e08:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11e0c:	681b      	ldr	r3, [r3, #0]
   11e0e:	6b5b      	ldr	r3, [r3, #52]
   11e10:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   11e14:	9300      	str	r3, [sp, #0]
   11e16:	f04f 0313 	mov.w	r3, #19	; 0x13
   11e1a:	9301      	str	r3, [sp, #4]
   11e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11e20:	9302      	str	r3, [sp, #8]
   11e22:	f04f 0300 	mov.w	r3, #0	; 0x0
   11e26:	9303      	str	r3, [sp, #12]
   11e28:	f8d7 00ec 	ldr.w	r0, [r7, #236]
   11e2c:	ca06      	ldmia	r2!, {r1, r2}
   11e2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   11e32:	f7fe ff99 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11e36:	f8d7 30ec 	ldr.w	r3, [r7, #236]
   11e3a:	f8c7 30f0 	str.w	r3, [r7, #240]
   11e3e:	e003      	b.n	11e48 <_ZN9Krabi2015C1Eb+0xa64>
   11e40:	f8d7 30ec 	ldr.w	r3, [r7, #236]
   11e44:	f8c7 30f0 	str.w	r3, [r7, #240]
   11e48:	f8d7 30f0 	ldr.w	r3, [r7, #240]
   11e4c:	f8c7 3794 	str.w	r3, [r7, #1940]
    Etape* etape15 = new Etape(Position(90, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::RAMASSER_PIED, -1, 0);
   11e50:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
   11e54:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11e58:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   11e5c:	781b      	ldrb	r3, [r3, #0]
   11e5e:	4610      	mov	r0, r2
   11e60:	4998      	ldr	r1, [pc, #608]	(120c4 <_ZN9Krabi2015C1Eb+0xce0>)
   11e62:	4a9a      	ldr	r2, [pc, #616]	(120cc <_ZN9Krabi2015C1Eb+0xce8>)
   11e64:	f7fc ffc6 	bl	edf4 <_ZN8PositionC1Effb>
   11e68:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11e6c:	f8c7 30f4 	str.w	r3, [r7, #244]
   11e70:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11e74:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11e78:	f8c7 3758 	str.w	r3, [r7, #1880]
   11e7c:	f04f 0038 	mov.w	r0, #56	; 0x38
   11e80:	f7fc fe52 	bl	eb28 <_Znwj>
   11e84:	4603      	mov	r3, r0
   11e86:	f8c7 30f8 	str.w	r3, [r7, #248]
   11e8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]
   11e8e:	2b00      	cmp	r3, #0
   11e90:	d01d      	beq.n	11ece <_ZN9Krabi2015C1Eb+0xaea>
   11e92:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11e96:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11e9a:	681b      	ldr	r3, [r3, #0]
   11e9c:	6b5b      	ldr	r3, [r3, #52]
   11e9e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
   11ea2:	9300      	str	r3, [sp, #0]
   11ea4:	f04f 0313 	mov.w	r3, #19	; 0x13
   11ea8:	9301      	str	r3, [sp, #4]
   11eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11eae:	9302      	str	r3, [sp, #8]
   11eb0:	f04f 0300 	mov.w	r3, #0	; 0x0
   11eb4:	9303      	str	r3, [sp, #12]
   11eb6:	f8d7 00f8 	ldr.w	r0, [r7, #248]
   11eba:	ca06      	ldmia	r2!, {r1, r2}
   11ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   11ec0:	f7fe ff52 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11ec4:	f8d7 30f8 	ldr.w	r3, [r7, #248]
   11ec8:	f8c7 30fc 	str.w	r3, [r7, #252]
   11ecc:	e003      	b.n	11ed6 <_ZN9Krabi2015C1Eb+0xaf2>
   11ece:	f8d7 30f8 	ldr.w	r3, [r7, #248]
   11ed2:	f8c7 30fc 	str.w	r3, [r7, #252]
   11ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]
   11eda:	f8c7 3798 	str.w	r3, [r7, #1944]
    Etape* etape16 = new Etape(Position(850, 100, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::RAMASSER_PIED, -1, 0);
   11ede:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
   11ee2:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11ee6:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   11eea:	781b      	ldrb	r3, [r3, #0]
   11eec:	4610      	mov	r0, r2
   11eee:	4978      	ldr	r1, [pc, #480]	(120d0 <_ZN9Krabi2015C1Eb+0xcec>)
   11ef0:	4a78      	ldr	r2, [pc, #480]	(120d4 <_ZN9Krabi2015C1Eb+0xcf0>)
   11ef2:	f7fc ff7f 	bl	edf4 <_ZN8PositionC1Effb>
   11ef6:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11efa:	f8c7 3100 	str.w	r3, [r7, #256]
   11efe:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11f02:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11f06:	f8c7 3758 	str.w	r3, [r7, #1880]
   11f0a:	f04f 0038 	mov.w	r0, #56	; 0x38
   11f0e:	f7fc fe0b 	bl	eb28 <_Znwj>
   11f12:	4603      	mov	r3, r0
   11f14:	f8c7 3104 	str.w	r3, [r7, #260]
   11f18:	f8d7 3104 	ldr.w	r3, [r7, #260]
   11f1c:	2b00      	cmp	r3, #0
   11f1e:	d01d      	beq.n	11f5c <_ZN9Krabi2015C1Eb+0xb78>
   11f20:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11f24:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11f28:	681b      	ldr	r3, [r3, #0]
   11f2a:	6b5b      	ldr	r3, [r3, #52]
   11f2c:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
   11f30:	9300      	str	r3, [sp, #0]
   11f32:	f04f 0313 	mov.w	r3, #19	; 0x13
   11f36:	9301      	str	r3, [sp, #4]
   11f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11f3c:	9302      	str	r3, [sp, #8]
   11f3e:	f04f 0300 	mov.w	r3, #0	; 0x0
   11f42:	9303      	str	r3, [sp, #12]
   11f44:	f8d7 0104 	ldr.w	r0, [r7, #260]
   11f48:	ca06      	ldmia	r2!, {r1, r2}
   11f4a:	f8d7 3100 	ldr.w	r3, [r7, #256]
   11f4e:	f7fe ff0b 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11f52:	f8d7 3104 	ldr.w	r3, [r7, #260]
   11f56:	f8c7 3108 	str.w	r3, [r7, #264]
   11f5a:	e003      	b.n	11f64 <_ZN9Krabi2015C1Eb+0xb80>
   11f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]
   11f60:	f8c7 3108 	str.w	r3, [r7, #264]
   11f64:	f8d7 3108 	ldr.w	r3, [r7, #264]
   11f68:	f8c7 379c 	str.w	r3, [r7, #1948]
    Etape* etape17 = new Etape(Position(850, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::RAMASSER_PIED, -1, 0);
   11f6c:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
   11f70:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11f74:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   11f78:	781b      	ldrb	r3, [r3, #0]
   11f7a:	4610      	mov	r0, r2
   11f7c:	4954      	ldr	r1, [pc, #336]	(120d0 <_ZN9Krabi2015C1Eb+0xcec>)
   11f7e:	4a53      	ldr	r2, [pc, #332]	(120cc <_ZN9Krabi2015C1Eb+0xce8>)
   11f80:	f7fc ff38 	bl	edf4 <_ZN8PositionC1Effb>
   11f84:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11f88:	f8c7 310c 	str.w	r3, [r7, #268]
   11f8c:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   11f90:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11f94:	f8c7 3758 	str.w	r3, [r7, #1880]
   11f98:	f04f 0038 	mov.w	r0, #56	; 0x38
   11f9c:	f7fc fdc4 	bl	eb28 <_Znwj>
   11fa0:	4603      	mov	r3, r0
   11fa2:	f8c7 3110 	str.w	r3, [r7, #272]
   11fa6:	f8d7 3110 	ldr.w	r3, [r7, #272]
   11faa:	2b00      	cmp	r3, #0
   11fac:	d01d      	beq.n	11fea <_ZN9Krabi2015C1Eb+0xc06>
   11fae:	f507 730c 	add.w	r3, r7, #560	; 0x230
   11fb2:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   11fb6:	681b      	ldr	r3, [r3, #0]
   11fb8:	6b5b      	ldr	r3, [r3, #52]
   11fba:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
   11fbe:	9300      	str	r3, [sp, #0]
   11fc0:	f04f 0313 	mov.w	r3, #19	; 0x13
   11fc4:	9301      	str	r3, [sp, #4]
   11fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11fca:	9302      	str	r3, [sp, #8]
   11fcc:	f04f 0300 	mov.w	r3, #0	; 0x0
   11fd0:	9303      	str	r3, [sp, #12]
   11fd2:	f8d7 0110 	ldr.w	r0, [r7, #272]
   11fd6:	ca06      	ldmia	r2!, {r1, r2}
   11fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]
   11fdc:	f7fe fec4 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11fe0:	f8d7 3110 	ldr.w	r3, [r7, #272]
   11fe4:	f8c7 3114 	str.w	r3, [r7, #276]
   11fe8:	e003      	b.n	11ff2 <_ZN9Krabi2015C1Eb+0xc0e>
   11fea:	f8d7 3110 	ldr.w	r3, [r7, #272]
   11fee:	f8c7 3114 	str.w	r3, [r7, #276]
   11ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]
   11ff6:	f8c7 37a0 	str.w	r3, [r7, #1952]
    Etape* etape18 = new Etape(Position(870, 1355, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::RAMASSER_PIED, -1, 0);
   11ffa:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
   11ffe:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12002:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   12006:	781b      	ldrb	r3, [r3, #0]
   12008:	4610      	mov	r0, r2
   1200a:	4933      	ldr	r1, [pc, #204]	(120d8 <_ZN9Krabi2015C1Eb+0xcf4>)
   1200c:	4a33      	ldr	r2, [pc, #204]	(120dc <_ZN9Krabi2015C1Eb+0xcf8>)
   1200e:	f7fc fef1 	bl	edf4 <_ZN8PositionC1Effb>
   12012:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12016:	f8c7 3118 	str.w	r3, [r7, #280]
   1201a:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1201e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12022:	f8c7 3758 	str.w	r3, [r7, #1880]
   12026:	f04f 0038 	mov.w	r0, #56	; 0x38
   1202a:	f7fc fd7d 	bl	eb28 <_Znwj>
   1202e:	4603      	mov	r3, r0
   12030:	f8c7 311c 	str.w	r3, [r7, #284]
   12034:	f8d7 311c 	ldr.w	r3, [r7, #284]
   12038:	2b00      	cmp	r3, #0
   1203a:	d051      	beq.n	120e0 <_ZN9Krabi2015C1Eb+0xcfc>
   1203c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12040:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12044:	681b      	ldr	r3, [r3, #0]
   12046:	6b5b      	ldr	r3, [r3, #52]
   12048:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
   1204c:	9300      	str	r3, [sp, #0]
   1204e:	f04f 0313 	mov.w	r3, #19	; 0x13
   12052:	9301      	str	r3, [sp, #4]
   12054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12058:	9302      	str	r3, [sp, #8]
   1205a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1205e:	9303      	str	r3, [sp, #12]
   12060:	f8d7 011c 	ldr.w	r0, [r7, #284]
   12064:	ca06      	ldmia	r2!, {r1, r2}
   12066:	f8d7 3118 	ldr.w	r3, [r7, #280]
   1206a:	f7fe fe7d 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1206e:	f8d7 311c 	ldr.w	r3, [r7, #284]
   12072:	f8c7 3120 	str.w	r3, [r7, #288]
   12076:	e037      	b.n	120e8 <_ZN9Krabi2015C1Eb+0xd04>
   12078:	00024160 	.word	0x00024160
   1207c:	00000000 	.word	0x00000000
   12080:	41f00000 	.word	0x41f00000
   12084:	437a0000 	.word	0x437a0000
   12088:	447a0000 	.word	0x447a0000
   1208c:	442f0000 	.word	0x442f0000
   12090:	44510000 	.word	0x44510000
   12094:	44de8000 	.word	0x44de8000
   12098:	436c0000 	.word	0x436c0000
   1209c:	43c80000 	.word	0x43c80000
   120a0:	451c4000 	.word	0x451c4000
   120a4:	450fc000 	.word	0x450fc000
   120a8:	44dac000 	.word	0x44dac000
   120ac:	44638000 	.word	0x44638000
   120b0:	444f8000 	.word	0x444f8000
   120b4:	44bb8000 	.word	0x44bb8000
   120b8:	44ce4000 	.word	0x44ce4000
   120bc:	4502a000 	.word	0x4502a000
   120c0:	452be000 	.word	0x452be000
   120c4:	42b40000 	.word	0x42b40000
   120c8:	44e74000 	.word	0x44e74000
   120cc:	43480000 	.word	0x43480000
   120d0:	44548000 	.word	0x44548000
   120d4:	42c80000 	.word	0x42c80000
   120d8:	44598000 	.word	0x44598000
   120dc:	44a96000 	.word	0x44a96000
   120e0:	f8d7 311c 	ldr.w	r3, [r7, #284]
   120e4:	f8c7 3120 	str.w	r3, [r7, #288]
   120e8:	f8d7 3120 	ldr.w	r3, [r7, #288]
   120ec:	f8c7 37a4 	str.w	r3, [r7, #1956]
    Etape* etape19 = new Etape(Position(1100, 1770, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::RAMASSER_PIED, -1, 0);
   120f0:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
   120f4:	f507 730c 	add.w	r3, r7, #560	; 0x230
   120f8:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   120fc:	781b      	ldrb	r3, [r3, #0]
   120fe:	4610      	mov	r0, r2
   12100:	f8df 1bd8 	ldr.w	r1, [pc, #3032]	; 12cdc <_ZN9Krabi2015C1Eb+0x18f8>
   12104:	f8df 2bd8 	ldr.w	r2, [pc, #3032]	; 12ce0 <_ZN9Krabi2015C1Eb+0x18fc>
   12108:	f7fc fe74 	bl	edf4 <_ZN8PositionC1Effb>
   1210c:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12110:	f8c7 3124 	str.w	r3, [r7, #292]
   12114:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12118:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1211c:	f8c7 3758 	str.w	r3, [r7, #1880]
   12120:	f04f 0038 	mov.w	r0, #56	; 0x38
   12124:	f7fc fd00 	bl	eb28 <_Znwj>
   12128:	4603      	mov	r3, r0
   1212a:	f8c7 3128 	str.w	r3, [r7, #296]
   1212e:	f8d7 3128 	ldr.w	r3, [r7, #296]
   12132:	2b00      	cmp	r3, #0
   12134:	d01d      	beq.n	12172 <_ZN9Krabi2015C1Eb+0xd8e>
   12136:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1213a:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1213e:	681b      	ldr	r3, [r3, #0]
   12140:	6b5b      	ldr	r3, [r3, #52]
   12142:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
   12146:	9300      	str	r3, [sp, #0]
   12148:	f04f 0313 	mov.w	r3, #19	; 0x13
   1214c:	9301      	str	r3, [sp, #4]
   1214e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12152:	9302      	str	r3, [sp, #8]
   12154:	f04f 0300 	mov.w	r3, #0	; 0x0
   12158:	9303      	str	r3, [sp, #12]
   1215a:	f8d7 0128 	ldr.w	r0, [r7, #296]
   1215e:	ca06      	ldmia	r2!, {r1, r2}
   12160:	f8d7 3124 	ldr.w	r3, [r7, #292]
   12164:	f7fe fe00 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12168:	f8d7 3128 	ldr.w	r3, [r7, #296]
   1216c:	f8c7 312c 	str.w	r3, [r7, #300]
   12170:	e003      	b.n	1217a <_ZN9Krabi2015C1Eb+0xd96>
   12172:	f8d7 3128 	ldr.w	r3, [r7, #296]
   12176:	f8c7 312c 	str.w	r3, [r7, #300]
   1217a:	f8d7 312c 	ldr.w	r3, [r7, #300]
   1217e:	f8c7 37a8 	str.w	r3, [r7, #1960]
    Etape* etape20 = new Etape(Position(1300, 1400, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::RAMASSER_PIED, -1, 0);
   12182:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
   12186:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1218a:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   1218e:	781b      	ldrb	r3, [r3, #0]
   12190:	4610      	mov	r0, r2
   12192:	f8df 1b50 	ldr.w	r1, [pc, #2896]	; 12ce4 <_ZN9Krabi2015C1Eb+0x1900>
   12196:	f8df 2b50 	ldr.w	r2, [pc, #2896]	; 12ce8 <_ZN9Krabi2015C1Eb+0x1904>
   1219a:	f7fc fe2b 	bl	edf4 <_ZN8PositionC1Effb>
   1219e:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   121a2:	f8c7 3130 	str.w	r3, [r7, #304]
   121a6:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   121aa:	f103 0301 	add.w	r3, r3, #1	; 0x1
   121ae:	f8c7 3758 	str.w	r3, [r7, #1880]
   121b2:	f04f 0038 	mov.w	r0, #56	; 0x38
   121b6:	f7fc fcb7 	bl	eb28 <_Znwj>
   121ba:	4603      	mov	r3, r0
   121bc:	f8c7 3134 	str.w	r3, [r7, #308]
   121c0:	f8d7 3134 	ldr.w	r3, [r7, #308]
   121c4:	2b00      	cmp	r3, #0
   121c6:	d01d      	beq.n	12204 <_ZN9Krabi2015C1Eb+0xe20>
   121c8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   121cc:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   121d0:	681b      	ldr	r3, [r3, #0]
   121d2:	6b5b      	ldr	r3, [r3, #52]
   121d4:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
   121d8:	9300      	str	r3, [sp, #0]
   121da:	f04f 0313 	mov.w	r3, #19	; 0x13
   121de:	9301      	str	r3, [sp, #4]
   121e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   121e4:	9302      	str	r3, [sp, #8]
   121e6:	f04f 0300 	mov.w	r3, #0	; 0x0
   121ea:	9303      	str	r3, [sp, #12]
   121ec:	f8d7 0134 	ldr.w	r0, [r7, #308]
   121f0:	ca06      	ldmia	r2!, {r1, r2}
   121f2:	f8d7 3130 	ldr.w	r3, [r7, #304]
   121f6:	f7fe fdb7 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   121fa:	f8d7 3134 	ldr.w	r3, [r7, #308]
   121fe:	f8c7 3138 	str.w	r3, [r7, #312]
   12202:	e003      	b.n	1220c <_ZN9Krabi2015C1Eb+0xe28>
   12204:	f8d7 3134 	ldr.w	r3, [r7, #308]
   12208:	f8c7 3138 	str.w	r3, [r7, #312]
   1220c:	f8d7 3138 	ldr.w	r3, [r7, #312]
   12210:	f8c7 37ac 	str.w	r3, [r7, #1964]
    Etape* etape21 = new Etape(Position(1250, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   12214:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
   12218:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1221c:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   12220:	781b      	ldrb	r3, [r3, #0]
   12222:	4610      	mov	r0, r2
   12224:	f8df 1ac4 	ldr.w	r1, [pc, #2756]	; 12cec <_ZN9Krabi2015C1Eb+0x1908>
   12228:	f8df 2ac4 	ldr.w	r2, [pc, #2756]	; 12cf0 <_ZN9Krabi2015C1Eb+0x190c>
   1222c:	f7fc fde2 	bl	edf4 <_ZN8PositionC1Effb>
   12230:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12234:	f8c7 313c 	str.w	r3, [r7, #316]
   12238:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1223c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12240:	f8c7 3758 	str.w	r3, [r7, #1880]
   12244:	f04f 0038 	mov.w	r0, #56	; 0x38
   12248:	f7fc fc6e 	bl	eb28 <_Znwj>
   1224c:	4603      	mov	r3, r0
   1224e:	f8c7 3140 	str.w	r3, [r7, #320]
   12252:	f8d7 3140 	ldr.w	r3, [r7, #320]
   12256:	2b00      	cmp	r3, #0
   12258:	d01d      	beq.n	12296 <_ZN9Krabi2015C1Eb+0xeb2>
   1225a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1225e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12262:	681b      	ldr	r3, [r3, #0]
   12264:	6b5b      	ldr	r3, [r3, #52]
   12266:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
   1226a:	9300      	str	r3, [sp, #0]
   1226c:	f04f 0314 	mov.w	r3, #20	; 0x14
   12270:	9301      	str	r3, [sp, #4]
   12272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12276:	9302      	str	r3, [sp, #8]
   12278:	f04f 0300 	mov.w	r3, #0	; 0x0
   1227c:	9303      	str	r3, [sp, #12]
   1227e:	f8d7 0140 	ldr.w	r0, [r7, #320]
   12282:	ca06      	ldmia	r2!, {r1, r2}
   12284:	f8d7 313c 	ldr.w	r3, [r7, #316]
   12288:	f7fe fd6e 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1228c:	f8d7 3140 	ldr.w	r3, [r7, #320]
   12290:	f8c7 3144 	str.w	r3, [r7, #324]
   12294:	e003      	b.n	1229e <_ZN9Krabi2015C1Eb+0xeba>
   12296:	f8d7 3140 	ldr.w	r3, [r7, #320]
   1229a:	f8c7 3144 	str.w	r3, [r7, #324]
   1229e:	f8d7 3144 	ldr.w	r3, [r7, #324]
   122a2:	f8c7 37b0 	str.w	r3, [r7, #1968]
    Etape* etape22 = new Etape(Position(1750, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   122a6:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
   122aa:	f507 730c 	add.w	r3, r7, #560	; 0x230
   122ae:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   122b2:	781b      	ldrb	r3, [r3, #0]
   122b4:	4610      	mov	r0, r2
   122b6:	f8df 1a3c 	ldr.w	r1, [pc, #2620]	; 12cf4 <_ZN9Krabi2015C1Eb+0x1910>
   122ba:	f8df 2a34 	ldr.w	r2, [pc, #2612]	; 12cf0 <_ZN9Krabi2015C1Eb+0x190c>
   122be:	f7fc fd99 	bl	edf4 <_ZN8PositionC1Effb>
   122c2:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   122c6:	f8c7 3148 	str.w	r3, [r7, #328]
   122ca:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   122ce:	f103 0301 	add.w	r3, r3, #1	; 0x1
   122d2:	f8c7 3758 	str.w	r3, [r7, #1880]
   122d6:	f04f 0038 	mov.w	r0, #56	; 0x38
   122da:	f7fc fc25 	bl	eb28 <_Znwj>
   122de:	4603      	mov	r3, r0
   122e0:	f8c7 314c 	str.w	r3, [r7, #332]
   122e4:	f8d7 314c 	ldr.w	r3, [r7, #332]
   122e8:	2b00      	cmp	r3, #0
   122ea:	d01d      	beq.n	12328 <_ZN9Krabi2015C1Eb+0xf44>
   122ec:	f507 730c 	add.w	r3, r7, #560	; 0x230
   122f0:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   122f4:	681b      	ldr	r3, [r3, #0]
   122f6:	6b5b      	ldr	r3, [r3, #52]
   122f8:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
   122fc:	9300      	str	r3, [sp, #0]
   122fe:	f04f 0314 	mov.w	r3, #20	; 0x14
   12302:	9301      	str	r3, [sp, #4]
   12304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12308:	9302      	str	r3, [sp, #8]
   1230a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1230e:	9303      	str	r3, [sp, #12]
   12310:	f8d7 014c 	ldr.w	r0, [r7, #332]
   12314:	ca06      	ldmia	r2!, {r1, r2}
   12316:	f8d7 3148 	ldr.w	r3, [r7, #328]
   1231a:	f7fe fd25 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1231e:	f8d7 314c 	ldr.w	r3, [r7, #332]
   12322:	f8c7 3150 	str.w	r3, [r7, #336]
   12326:	e003      	b.n	12330 <_ZN9Krabi2015C1Eb+0xf4c>
   12328:	f8d7 314c 	ldr.w	r3, [r7, #332]
   1232c:	f8c7 3150 	str.w	r3, [r7, #336]
   12330:	f8d7 3150 	ldr.w	r3, [r7, #336]
   12334:	f8c7 37b4 	str.w	r3, [r7, #1972]
    Etape* etape23 = new Etape(Position(1500, 850, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12338:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
   1233c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12340:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   12344:	781b      	ldrb	r3, [r3, #0]
   12346:	4610      	mov	r0, r2
   12348:	f8df 19ac 	ldr.w	r1, [pc, #2476]	; 12cf8 <_ZN9Krabi2015C1Eb+0x1914>
   1234c:	f8df 29ac 	ldr.w	r2, [pc, #2476]	; 12cfc <_ZN9Krabi2015C1Eb+0x1918>
   12350:	f7fc fd50 	bl	edf4 <_ZN8PositionC1Effb>
   12354:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12358:	f8c7 3154 	str.w	r3, [r7, #340]
   1235c:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12360:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12364:	f8c7 3758 	str.w	r3, [r7, #1880]
   12368:	f04f 0038 	mov.w	r0, #56	; 0x38
   1236c:	f7fc fbdc 	bl	eb28 <_Znwj>
   12370:	4603      	mov	r3, r0
   12372:	f8c7 3158 	str.w	r3, [r7, #344]
   12376:	f8d7 3158 	ldr.w	r3, [r7, #344]
   1237a:	2b00      	cmp	r3, #0
   1237c:	d01d      	beq.n	123ba <_ZN9Krabi2015C1Eb+0xfd6>
   1237e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12382:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12386:	681b      	ldr	r3, [r3, #0]
   12388:	6b5b      	ldr	r3, [r3, #52]
   1238a:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
   1238e:	9300      	str	r3, [sp, #0]
   12390:	f04f 0300 	mov.w	r3, #0	; 0x0
   12394:	9301      	str	r3, [sp, #4]
   12396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1239a:	9302      	str	r3, [sp, #8]
   1239c:	f04f 0300 	mov.w	r3, #0	; 0x0
   123a0:	9303      	str	r3, [sp, #12]
   123a2:	f8d7 0158 	ldr.w	r0, [r7, #344]
   123a6:	ca06      	ldmia	r2!, {r1, r2}
   123a8:	f8d7 3154 	ldr.w	r3, [r7, #340]
   123ac:	f7fe fcdc 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   123b0:	f8d7 3158 	ldr.w	r3, [r7, #344]
   123b4:	f8c7 315c 	str.w	r3, [r7, #348]
   123b8:	e003      	b.n	123c2 <_ZN9Krabi2015C1Eb+0xfde>
   123ba:	f8d7 3158 	ldr.w	r3, [r7, #344]
   123be:	f8c7 315c 	str.w	r3, [r7, #348]
   123c2:	f8d7 315c 	ldr.w	r3, [r7, #348]
   123c6:	f8c7 37b8 	str.w	r3, [r7, #1976]
    Etape* etape24 = new Etape(Position(2300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   123ca:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
   123ce:	f507 730c 	add.w	r3, r7, #560	; 0x230
   123d2:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   123d6:	781b      	ldrb	r3, [r3, #0]
   123d8:	4610      	mov	r0, r2
   123da:	f8df 1924 	ldr.w	r1, [pc, #2340]	; 12d00 <_ZN9Krabi2015C1Eb+0x191c>
   123de:	f8df 2918 	ldr.w	r2, [pc, #2328]	; 12cf8 <_ZN9Krabi2015C1Eb+0x1914>
   123e2:	f7fc fd07 	bl	edf4 <_ZN8PositionC1Effb>
   123e6:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   123ea:	f8c7 3160 	str.w	r3, [r7, #352]
   123ee:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   123f2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   123f6:	f8c7 3758 	str.w	r3, [r7, #1880]
   123fa:	f04f 0038 	mov.w	r0, #56	; 0x38
   123fe:	f7fc fb93 	bl	eb28 <_Znwj>
   12402:	4603      	mov	r3, r0
   12404:	f8c7 3164 	str.w	r3, [r7, #356]
   12408:	f8d7 3164 	ldr.w	r3, [r7, #356]
   1240c:	2b00      	cmp	r3, #0
   1240e:	d01d      	beq.n	1244c <_ZN9Krabi2015C1Eb+0x1068>
   12410:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12414:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12418:	681b      	ldr	r3, [r3, #0]
   1241a:	6b5b      	ldr	r3, [r3, #52]
   1241c:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
   12420:	9300      	str	r3, [sp, #0]
   12422:	f04f 0300 	mov.w	r3, #0	; 0x0
   12426:	9301      	str	r3, [sp, #4]
   12428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1242c:	9302      	str	r3, [sp, #8]
   1242e:	f04f 0300 	mov.w	r3, #0	; 0x0
   12432:	9303      	str	r3, [sp, #12]
   12434:	f8d7 0164 	ldr.w	r0, [r7, #356]
   12438:	ca06      	ldmia	r2!, {r1, r2}
   1243a:	f8d7 3160 	ldr.w	r3, [r7, #352]
   1243e:	f7fe fc93 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12442:	f8d7 3164 	ldr.w	r3, [r7, #356]
   12446:	f8c7 3168 	str.w	r3, [r7, #360]
   1244a:	e003      	b.n	12454 <_ZN9Krabi2015C1Eb+0x1070>
   1244c:	f8d7 3164 	ldr.w	r3, [r7, #356]
   12450:	f8c7 3168 	str.w	r3, [r7, #360]
   12454:	f8d7 3168 	ldr.w	r3, [r7, #360]
   12458:	f8c7 37bc 	str.w	r3, [r7, #1980]
    Etape* etape25 = new Etape(Position(2710, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPOSE_GOBELET, -1, 0);
   1245c:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
   12460:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12464:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   12468:	781b      	ldrb	r3, [r3, #0]
   1246a:	4610      	mov	r0, r2
   1246c:	f8df 1894 	ldr.w	r1, [pc, #2196]	; 12d04 <_ZN9Krabi2015C1Eb+0x1920>
   12470:	f8df 2884 	ldr.w	r2, [pc, #2180]	; 12cf8 <_ZN9Krabi2015C1Eb+0x1914>
   12474:	f7fc fcbe 	bl	edf4 <_ZN8PositionC1Effb>
   12478:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1247c:	f8c7 316c 	str.w	r3, [r7, #364]
   12480:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12484:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12488:	f8c7 3758 	str.w	r3, [r7, #1880]
   1248c:	f04f 0038 	mov.w	r0, #56	; 0x38
   12490:	f7fc fb4a 	bl	eb28 <_Znwj>
   12494:	4603      	mov	r3, r0
   12496:	f8c7 3170 	str.w	r3, [r7, #368]
   1249a:	f8d7 3170 	ldr.w	r3, [r7, #368]
   1249e:	2b00      	cmp	r3, #0
   124a0:	d01d      	beq.n	124de <_ZN9Krabi2015C1Eb+0x10fa>
   124a2:	f507 730c 	add.w	r3, r7, #560	; 0x230
   124a6:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   124aa:	681b      	ldr	r3, [r3, #0]
   124ac:	6b5b      	ldr	r3, [r3, #52]
   124ae:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
   124b2:	9300      	str	r3, [sp, #0]
   124b4:	f04f 0316 	mov.w	r3, #22	; 0x16
   124b8:	9301      	str	r3, [sp, #4]
   124ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   124be:	9302      	str	r3, [sp, #8]
   124c0:	f04f 0300 	mov.w	r3, #0	; 0x0
   124c4:	9303      	str	r3, [sp, #12]
   124c6:	f8d7 0170 	ldr.w	r0, [r7, #368]
   124ca:	ca06      	ldmia	r2!, {r1, r2}
   124cc:	f8d7 316c 	ldr.w	r3, [r7, #364]
   124d0:	f7fe fc4a 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   124d4:	f8d7 3170 	ldr.w	r3, [r7, #368]
   124d8:	f8c7 3174 	str.w	r3, [r7, #372]
   124dc:	e003      	b.n	124e6 <_ZN9Krabi2015C1Eb+0x1102>
   124de:	f8d7 3170 	ldr.w	r3, [r7, #368]
   124e2:	f8c7 3174 	str.w	r3, [r7, #372]
   124e6:	f8d7 3174 	ldr.w	r3, [r7, #372]
   124ea:	f8c7 37c0 	str.w	r3, [r7, #1984]
    Etape* etape26 = new Etape(Position(2630, 460, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPOSE_GOBELET, -1, 0);
   124ee:	f507 7240 	add.w	r2, r7, #768	; 0x300
   124f2:	f507 730c 	add.w	r3, r7, #560	; 0x230
   124f6:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   124fa:	781b      	ldrb	r3, [r3, #0]
   124fc:	4610      	mov	r0, r2
   124fe:	f8df 1808 	ldr.w	r1, [pc, #2056]	; 12d08 <_ZN9Krabi2015C1Eb+0x1924>
   12502:	f8df 2808 	ldr.w	r2, [pc, #2056]	; 12d0c <_ZN9Krabi2015C1Eb+0x1928>
   12506:	f7fc fc75 	bl	edf4 <_ZN8PositionC1Effb>
   1250a:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1250e:	f8c7 3178 	str.w	r3, [r7, #376]
   12512:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12516:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1251a:	f8c7 3758 	str.w	r3, [r7, #1880]
   1251e:	f04f 0038 	mov.w	r0, #56	; 0x38
   12522:	f7fc fb01 	bl	eb28 <_Znwj>
   12526:	4603      	mov	r3, r0
   12528:	f8c7 317c 	str.w	r3, [r7, #380]
   1252c:	f8d7 317c 	ldr.w	r3, [r7, #380]
   12530:	2b00      	cmp	r3, #0
   12532:	d01d      	beq.n	12570 <_ZN9Krabi2015C1Eb+0x118c>
   12534:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12538:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1253c:	681b      	ldr	r3, [r3, #0]
   1253e:	6b5b      	ldr	r3, [r3, #52]
   12540:	f507 7240 	add.w	r2, r7, #768	; 0x300
   12544:	9300      	str	r3, [sp, #0]
   12546:	f04f 0316 	mov.w	r3, #22	; 0x16
   1254a:	9301      	str	r3, [sp, #4]
   1254c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12550:	9302      	str	r3, [sp, #8]
   12552:	f04f 0300 	mov.w	r3, #0	; 0x0
   12556:	9303      	str	r3, [sp, #12]
   12558:	f8d7 017c 	ldr.w	r0, [r7, #380]
   1255c:	ca06      	ldmia	r2!, {r1, r2}
   1255e:	f8d7 3178 	ldr.w	r3, [r7, #376]
   12562:	f7fe fc01 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12566:	f8d7 317c 	ldr.w	r3, [r7, #380]
   1256a:	f8c7 3180 	str.w	r3, [r7, #384]
   1256e:	e003      	b.n	12578 <_ZN9Krabi2015C1Eb+0x1194>
   12570:	f8d7 317c 	ldr.w	r3, [r7, #380]
   12574:	f8c7 3180 	str.w	r3, [r7, #384]
   12578:	f8d7 3180 	ldr.w	r3, [r7, #384]
   1257c:	f8c7 37c4 	str.w	r3, [r7, #1988]
    Etape* etape27 = new Etape(Position(1100, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12580:	f507 7242 	add.w	r2, r7, #776	; 0x308
   12584:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12588:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   1258c:	781b      	ldrb	r3, [r3, #0]
   1258e:	4610      	mov	r0, r2
   12590:	f8df 1748 	ldr.w	r1, [pc, #1864]	; 12cdc <_ZN9Krabi2015C1Eb+0x18f8>
   12594:	f8df 2778 	ldr.w	r2, [pc, #1912]	; 12d10 <_ZN9Krabi2015C1Eb+0x192c>
   12598:	f7fc fc2c 	bl	edf4 <_ZN8PositionC1Effb>
   1259c:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   125a0:	f8c7 3184 	str.w	r3, [r7, #388]
   125a4:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   125a8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   125ac:	f8c7 3758 	str.w	r3, [r7, #1880]
   125b0:	f04f 0038 	mov.w	r0, #56	; 0x38
   125b4:	f7fc fab8 	bl	eb28 <_Znwj>
   125b8:	4603      	mov	r3, r0
   125ba:	f8c7 3188 	str.w	r3, [r7, #392]
   125be:	f8d7 3188 	ldr.w	r3, [r7, #392]
   125c2:	2b00      	cmp	r3, #0
   125c4:	d01d      	beq.n	12602 <_ZN9Krabi2015C1Eb+0x121e>
   125c6:	f507 730c 	add.w	r3, r7, #560	; 0x230
   125ca:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   125ce:	681b      	ldr	r3, [r3, #0]
   125d0:	6b5b      	ldr	r3, [r3, #52]
   125d2:	f507 7242 	add.w	r2, r7, #776	; 0x308
   125d6:	9300      	str	r3, [sp, #0]
   125d8:	f04f 0300 	mov.w	r3, #0	; 0x0
   125dc:	9301      	str	r3, [sp, #4]
   125de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   125e2:	9302      	str	r3, [sp, #8]
   125e4:	f04f 0300 	mov.w	r3, #0	; 0x0
   125e8:	9303      	str	r3, [sp, #12]
   125ea:	f8d7 0188 	ldr.w	r0, [r7, #392]
   125ee:	ca06      	ldmia	r2!, {r1, r2}
   125f0:	f8d7 3184 	ldr.w	r3, [r7, #388]
   125f4:	f7fe fbb8 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   125f8:	f8d7 3188 	ldr.w	r3, [r7, #392]
   125fc:	f8c7 318c 	str.w	r3, [r7, #396]
   12600:	e003      	b.n	1260a <_ZN9Krabi2015C1Eb+0x1226>
   12602:	f8d7 3188 	ldr.w	r3, [r7, #392]
   12606:	f8c7 318c 	str.w	r3, [r7, #396]
   1260a:	f8d7 318c 	ldr.w	r3, [r7, #396]
   1260e:	f8c7 37c8 	str.w	r3, [r7, #1992]
    Etape* etape28 = new Etape(Position(560, 1290, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12612:	f507 7244 	add.w	r2, r7, #784	; 0x310
   12616:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1261a:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   1261e:	781b      	ldrb	r3, [r3, #0]
   12620:	4610      	mov	r0, r2
   12622:	f8df 16f0 	ldr.w	r1, [pc, #1776]	; 12d14 <_ZN9Krabi2015C1Eb+0x1930>
   12626:	f8df 26f0 	ldr.w	r2, [pc, #1776]	; 12d18 <_ZN9Krabi2015C1Eb+0x1934>
   1262a:	f7fc fbe3 	bl	edf4 <_ZN8PositionC1Effb>
   1262e:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12632:	f8c7 3190 	str.w	r3, [r7, #400]
   12636:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1263a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1263e:	f8c7 3758 	str.w	r3, [r7, #1880]
   12642:	f04f 0038 	mov.w	r0, #56	; 0x38
   12646:	f7fc fa6f 	bl	eb28 <_Znwj>
   1264a:	4603      	mov	r3, r0
   1264c:	f8c7 3194 	str.w	r3, [r7, #404]
   12650:	f8d7 3194 	ldr.w	r3, [r7, #404]
   12654:	2b00      	cmp	r3, #0
   12656:	d01d      	beq.n	12694 <_ZN9Krabi2015C1Eb+0x12b0>
   12658:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1265c:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12660:	681b      	ldr	r3, [r3, #0]
   12662:	6b5b      	ldr	r3, [r3, #52]
   12664:	f507 7244 	add.w	r2, r7, #784	; 0x310
   12668:	9300      	str	r3, [sp, #0]
   1266a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1266e:	9301      	str	r3, [sp, #4]
   12670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12674:	9302      	str	r3, [sp, #8]
   12676:	f04f 0300 	mov.w	r3, #0	; 0x0
   1267a:	9303      	str	r3, [sp, #12]
   1267c:	f8d7 0194 	ldr.w	r0, [r7, #404]
   12680:	ca06      	ldmia	r2!, {r1, r2}
   12682:	f8d7 3190 	ldr.w	r3, [r7, #400]
   12686:	f7fe fb6f 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1268a:	f8d7 3194 	ldr.w	r3, [r7, #404]
   1268e:	f8c7 3198 	str.w	r3, [r7, #408]
   12692:	e003      	b.n	1269c <_ZN9Krabi2015C1Eb+0x12b8>
   12694:	f8d7 3194 	ldr.w	r3, [r7, #404]
   12698:	f8c7 3198 	str.w	r3, [r7, #408]
   1269c:	f8d7 3198 	ldr.w	r3, [r7, #408]
   126a0:	f8c7 37cc 	str.w	r3, [r7, #1996]
    Etape* etape29 = new Etape(Position(720, 1600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   126a4:	f507 7246 	add.w	r2, r7, #792	; 0x318
   126a8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   126ac:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   126b0:	781b      	ldrb	r3, [r3, #0]
   126b2:	4610      	mov	r0, r2
   126b4:	f8df 1664 	ldr.w	r1, [pc, #1636]	; 12d1c <_ZN9Krabi2015C1Eb+0x1938>
   126b8:	f8df 2664 	ldr.w	r2, [pc, #1636]	; 12d20 <_ZN9Krabi2015C1Eb+0x193c>
   126bc:	f7fc fb9a 	bl	edf4 <_ZN8PositionC1Effb>
   126c0:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   126c4:	f8c7 319c 	str.w	r3, [r7, #412]
   126c8:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   126cc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   126d0:	f8c7 3758 	str.w	r3, [r7, #1880]
   126d4:	f04f 0038 	mov.w	r0, #56	; 0x38
   126d8:	f7fc fa26 	bl	eb28 <_Znwj>
   126dc:	4603      	mov	r3, r0
   126de:	f8c7 31a0 	str.w	r3, [r7, #416]
   126e2:	f8d7 31a0 	ldr.w	r3, [r7, #416]
   126e6:	2b00      	cmp	r3, #0
   126e8:	d01d      	beq.n	12726 <_ZN9Krabi2015C1Eb+0x1342>
   126ea:	f507 730c 	add.w	r3, r7, #560	; 0x230
   126ee:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   126f2:	681b      	ldr	r3, [r3, #0]
   126f4:	6b5b      	ldr	r3, [r3, #52]
   126f6:	f507 7246 	add.w	r2, r7, #792	; 0x318
   126fa:	9300      	str	r3, [sp, #0]
   126fc:	f04f 0300 	mov.w	r3, #0	; 0x0
   12700:	9301      	str	r3, [sp, #4]
   12702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12706:	9302      	str	r3, [sp, #8]
   12708:	f04f 0300 	mov.w	r3, #0	; 0x0
   1270c:	9303      	str	r3, [sp, #12]
   1270e:	f8d7 01a0 	ldr.w	r0, [r7, #416]
   12712:	ca06      	ldmia	r2!, {r1, r2}
   12714:	f8d7 319c 	ldr.w	r3, [r7, #412]
   12718:	f7fe fb26 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1271c:	f8d7 31a0 	ldr.w	r3, [r7, #416]
   12720:	f8c7 31a4 	str.w	r3, [r7, #420]
   12724:	e003      	b.n	1272e <_ZN9Krabi2015C1Eb+0x134a>
   12726:	f8d7 31a0 	ldr.w	r3, [r7, #416]
   1272a:	f8c7 31a4 	str.w	r3, [r7, #420]
   1272e:	f8d7 31a4 	ldr.w	r3, [r7, #420]
   12732:	f8c7 37d0 	str.w	r3, [r7, #2000]
    Etape* etape30 = new Etape(Position(420, 1600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12736:	f507 7248 	add.w	r2, r7, #800	; 0x320
   1273a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1273e:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   12742:	781b      	ldrb	r3, [r3, #0]
   12744:	4610      	mov	r0, r2
   12746:	f8df 15dc 	ldr.w	r1, [pc, #1500]	; 12d24 <_ZN9Krabi2015C1Eb+0x1940>
   1274a:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 12d20 <_ZN9Krabi2015C1Eb+0x193c>
   1274e:	f7fc fb51 	bl	edf4 <_ZN8PositionC1Effb>
   12752:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12756:	f8c7 31a8 	str.w	r3, [r7, #424]
   1275a:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1275e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12762:	f8c7 3758 	str.w	r3, [r7, #1880]
   12766:	f04f 0038 	mov.w	r0, #56	; 0x38
   1276a:	f7fc f9dd 	bl	eb28 <_Znwj>
   1276e:	4603      	mov	r3, r0
   12770:	f8c7 31ac 	str.w	r3, [r7, #428]
   12774:	f8d7 31ac 	ldr.w	r3, [r7, #428]
   12778:	2b00      	cmp	r3, #0
   1277a:	d01d      	beq.n	127b8 <_ZN9Krabi2015C1Eb+0x13d4>
   1277c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12780:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12784:	681b      	ldr	r3, [r3, #0]
   12786:	6b5b      	ldr	r3, [r3, #52]
   12788:	f507 7248 	add.w	r2, r7, #800	; 0x320
   1278c:	9300      	str	r3, [sp, #0]
   1278e:	f04f 0300 	mov.w	r3, #0	; 0x0
   12792:	9301      	str	r3, [sp, #4]
   12794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12798:	9302      	str	r3, [sp, #8]
   1279a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1279e:	9303      	str	r3, [sp, #12]
   127a0:	f8d7 01ac 	ldr.w	r0, [r7, #428]
   127a4:	ca06      	ldmia	r2!, {r1, r2}
   127a6:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   127aa:	f7fe fadd 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   127ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]
   127b2:	f8c7 31b0 	str.w	r3, [r7, #432]
   127b6:	e003      	b.n	127c0 <_ZN9Krabi2015C1Eb+0x13dc>
   127b8:	f8d7 31ac 	ldr.w	r3, [r7, #428]
   127bc:	f8c7 31b0 	str.w	r3, [r7, #432]
   127c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]
   127c4:	f8c7 37d4 	str.w	r3, [r7, #2004]
    Etape* etape31 = new Etape(Position(300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   127c8:	f507 724a 	add.w	r2, r7, #808	; 0x328
   127cc:	f507 730c 	add.w	r3, r7, #560	; 0x230
   127d0:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   127d4:	781b      	ldrb	r3, [r3, #0]
   127d6:	4610      	mov	r0, r2
   127d8:	f8df 154c 	ldr.w	r1, [pc, #1356]	; 12d28 <_ZN9Krabi2015C1Eb+0x1944>
   127dc:	f8df 2518 	ldr.w	r2, [pc, #1304]	; 12cf8 <_ZN9Krabi2015C1Eb+0x1914>
   127e0:	f7fc fb08 	bl	edf4 <_ZN8PositionC1Effb>
   127e4:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   127e8:	f8c7 31b4 	str.w	r3, [r7, #436]
   127ec:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   127f0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   127f4:	f8c7 3758 	str.w	r3, [r7, #1880]
   127f8:	f04f 0038 	mov.w	r0, #56	; 0x38
   127fc:	f7fc f994 	bl	eb28 <_Znwj>
   12800:	4603      	mov	r3, r0
   12802:	f8c7 31b8 	str.w	r3, [r7, #440]
   12806:	f8d7 31b8 	ldr.w	r3, [r7, #440]
   1280a:	2b00      	cmp	r3, #0
   1280c:	d01d      	beq.n	1284a <_ZN9Krabi2015C1Eb+0x1466>
   1280e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12812:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12816:	681b      	ldr	r3, [r3, #0]
   12818:	6b5b      	ldr	r3, [r3, #52]
   1281a:	f507 724a 	add.w	r2, r7, #808	; 0x328
   1281e:	9300      	str	r3, [sp, #0]
   12820:	f04f 0300 	mov.w	r3, #0	; 0x0
   12824:	9301      	str	r3, [sp, #4]
   12826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1282a:	9302      	str	r3, [sp, #8]
   1282c:	f04f 0300 	mov.w	r3, #0	; 0x0
   12830:	9303      	str	r3, [sp, #12]
   12832:	f8d7 01b8 	ldr.w	r0, [r7, #440]
   12836:	ca06      	ldmia	r2!, {r1, r2}
   12838:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   1283c:	f7fe fa94 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12840:	f8d7 31b8 	ldr.w	r3, [r7, #440]
   12844:	f8c7 31bc 	str.w	r3, [r7, #444]
   12848:	e003      	b.n	12852 <_ZN9Krabi2015C1Eb+0x146e>
   1284a:	f8d7 31b8 	ldr.w	r3, [r7, #440]
   1284e:	f8c7 31bc 	str.w	r3, [r7, #444]
   12852:	f8d7 31bc 	ldr.w	r3, [r7, #444]
   12856:	f8c7 37d8 	str.w	r3, [r7, #2008]
    Etape* etape32 = new Etape(Position(400, 430, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1285a:	f507 724c 	add.w	r2, r7, #816	; 0x330
   1285e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12862:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   12866:	781b      	ldrb	r3, [r3, #0]
   12868:	4610      	mov	r0, r2
   1286a:	f8df 14c0 	ldr.w	r1, [pc, #1216]	; 12d2c <_ZN9Krabi2015C1Eb+0x1948>
   1286e:	f8df 24c0 	ldr.w	r2, [pc, #1216]	; 12d30 <_ZN9Krabi2015C1Eb+0x194c>
   12872:	f7fc fabf 	bl	edf4 <_ZN8PositionC1Effb>
   12876:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1287a:	f8c7 31c0 	str.w	r3, [r7, #448]
   1287e:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12882:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12886:	f8c7 3758 	str.w	r3, [r7, #1880]
   1288a:	f04f 0038 	mov.w	r0, #56	; 0x38
   1288e:	f7fc f94b 	bl	eb28 <_Znwj>
   12892:	4603      	mov	r3, r0
   12894:	f8c7 31c4 	str.w	r3, [r7, #452]
   12898:	f8d7 31c4 	ldr.w	r3, [r7, #452]
   1289c:	2b00      	cmp	r3, #0
   1289e:	d01d      	beq.n	128dc <_ZN9Krabi2015C1Eb+0x14f8>
   128a0:	f507 730c 	add.w	r3, r7, #560	; 0x230
   128a4:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   128a8:	681b      	ldr	r3, [r3, #0]
   128aa:	6b5b      	ldr	r3, [r3, #52]
   128ac:	f507 724c 	add.w	r2, r7, #816	; 0x330
   128b0:	9300      	str	r3, [sp, #0]
   128b2:	f04f 0300 	mov.w	r3, #0	; 0x0
   128b6:	9301      	str	r3, [sp, #4]
   128b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   128bc:	9302      	str	r3, [sp, #8]
   128be:	f04f 0300 	mov.w	r3, #0	; 0x0
   128c2:	9303      	str	r3, [sp, #12]
   128c4:	f8d7 01c4 	ldr.w	r0, [r7, #452]
   128c8:	ca06      	ldmia	r2!, {r1, r2}
   128ca:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   128ce:	f7fe fa4b 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   128d2:	f8d7 31c4 	ldr.w	r3, [r7, #452]
   128d6:	f8c7 31c8 	str.w	r3, [r7, #456]
   128da:	e003      	b.n	128e4 <_ZN9Krabi2015C1Eb+0x1500>
   128dc:	f8d7 31c4 	ldr.w	r3, [r7, #452]
   128e0:	f8c7 31c8 	str.w	r3, [r7, #456]
   128e4:	f8d7 31c8 	ldr.w	r3, [r7, #456]
   128e8:	f8c7 37dc 	str.w	r3, [r7, #2012]
    Etape* etape33 = new Etape(Position(1110, 1130, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   128ec:	f507 724e 	add.w	r2, r7, #824	; 0x338
   128f0:	f507 730c 	add.w	r3, r7, #560	; 0x230
   128f4:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   128f8:	781b      	ldrb	r3, [r3, #0]
   128fa:	4610      	mov	r0, r2
   128fc:	f8df 1434 	ldr.w	r1, [pc, #1076]	; 12d34 <_ZN9Krabi2015C1Eb+0x1950>
   12900:	f8df 2434 	ldr.w	r2, [pc, #1076]	; 12d38 <_ZN9Krabi2015C1Eb+0x1954>
   12904:	f7fc fa76 	bl	edf4 <_ZN8PositionC1Effb>
   12908:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1290c:	f8c7 31cc 	str.w	r3, [r7, #460]
   12910:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12914:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12918:	f8c7 3758 	str.w	r3, [r7, #1880]
   1291c:	f04f 0038 	mov.w	r0, #56	; 0x38
   12920:	f7fc f902 	bl	eb28 <_Znwj>
   12924:	4603      	mov	r3, r0
   12926:	f8c7 31d0 	str.w	r3, [r7, #464]
   1292a:	f8d7 31d0 	ldr.w	r3, [r7, #464]
   1292e:	2b00      	cmp	r3, #0
   12930:	d01d      	beq.n	1296e <_ZN9Krabi2015C1Eb+0x158a>
   12932:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12936:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1293a:	681b      	ldr	r3, [r3, #0]
   1293c:	6b5b      	ldr	r3, [r3, #52]
   1293e:	f507 724e 	add.w	r2, r7, #824	; 0x338
   12942:	9300      	str	r3, [sp, #0]
   12944:	f04f 0300 	mov.w	r3, #0	; 0x0
   12948:	9301      	str	r3, [sp, #4]
   1294a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1294e:	9302      	str	r3, [sp, #8]
   12950:	f04f 0300 	mov.w	r3, #0	; 0x0
   12954:	9303      	str	r3, [sp, #12]
   12956:	f8d7 01d0 	ldr.w	r0, [r7, #464]
   1295a:	ca06      	ldmia	r2!, {r1, r2}
   1295c:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   12960:	f7fe fa02 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12964:	f8d7 31d0 	ldr.w	r3, [r7, #464]
   12968:	f8c7 31d4 	str.w	r3, [r7, #468]
   1296c:	e003      	b.n	12976 <_ZN9Krabi2015C1Eb+0x1592>
   1296e:	f8d7 31d0 	ldr.w	r3, [r7, #464]
   12972:	f8c7 31d4 	str.w	r3, [r7, #468]
   12976:	f8d7 31d4 	ldr.w	r3, [r7, #468]
   1297a:	f8c7 37e0 	str.w	r3, [r7, #2016]
    Etape* etape34 = new Etape(Position(1480, 1150, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1297e:	f507 7250 	add.w	r2, r7, #832	; 0x340
   12982:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12986:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   1298a:	781b      	ldrb	r3, [r3, #0]
   1298c:	4610      	mov	r0, r2
   1298e:	49eb      	ldr	r1, [pc, #940]	(12d3c <_ZN9Krabi2015C1Eb+0x1958>)
   12990:	4aeb      	ldr	r2, [pc, #940]	(12d40 <_ZN9Krabi2015C1Eb+0x195c>)
   12992:	f7fc fa2f 	bl	edf4 <_ZN8PositionC1Effb>
   12996:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1299a:	f8c7 31d8 	str.w	r3, [r7, #472]
   1299e:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   129a2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   129a6:	f8c7 3758 	str.w	r3, [r7, #1880]
   129aa:	f04f 0038 	mov.w	r0, #56	; 0x38
   129ae:	f7fc f8bb 	bl	eb28 <_Znwj>
   129b2:	4603      	mov	r3, r0
   129b4:	f8c7 31dc 	str.w	r3, [r7, #476]
   129b8:	f8d7 31dc 	ldr.w	r3, [r7, #476]
   129bc:	2b00      	cmp	r3, #0
   129be:	d01d      	beq.n	129fc <_ZN9Krabi2015C1Eb+0x1618>
   129c0:	f507 730c 	add.w	r3, r7, #560	; 0x230
   129c4:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   129c8:	681b      	ldr	r3, [r3, #0]
   129ca:	6b5b      	ldr	r3, [r3, #52]
   129cc:	f507 7250 	add.w	r2, r7, #832	; 0x340
   129d0:	9300      	str	r3, [sp, #0]
   129d2:	f04f 0300 	mov.w	r3, #0	; 0x0
   129d6:	9301      	str	r3, [sp, #4]
   129d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   129dc:	9302      	str	r3, [sp, #8]
   129de:	f04f 0300 	mov.w	r3, #0	; 0x0
   129e2:	9303      	str	r3, [sp, #12]
   129e4:	f8d7 01dc 	ldr.w	r0, [r7, #476]
   129e8:	ca06      	ldmia	r2!, {r1, r2}
   129ea:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   129ee:	f7fe f9bb 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   129f2:	f8d7 31dc 	ldr.w	r3, [r7, #476]
   129f6:	f8c7 31e0 	str.w	r3, [r7, #480]
   129fa:	e003      	b.n	12a04 <_ZN9Krabi2015C1Eb+0x1620>
   129fc:	f8d7 31dc 	ldr.w	r3, [r7, #476]
   12a00:	f8c7 31e0 	str.w	r3, [r7, #480]
   12a04:	f8d7 31e0 	ldr.w	r3, [r7, #480]
   12a08:	f8c7 37e4 	str.w	r3, [r7, #2020]
    Etape* etape35 = new Etape(Position(1850, 1160, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12a0c:	f507 7252 	add.w	r2, r7, #840	; 0x348
   12a10:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12a14:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   12a18:	781b      	ldrb	r3, [r3, #0]
   12a1a:	4610      	mov	r0, r2
   12a1c:	49c9      	ldr	r1, [pc, #804]	(12d44 <_ZN9Krabi2015C1Eb+0x1960>)
   12a1e:	4aca      	ldr	r2, [pc, #808]	(12d48 <_ZN9Krabi2015C1Eb+0x1964>)
   12a20:	f7fc f9e8 	bl	edf4 <_ZN8PositionC1Effb>
   12a24:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12a28:	f8c7 31e4 	str.w	r3, [r7, #484]
   12a2c:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12a30:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12a34:	f8c7 3758 	str.w	r3, [r7, #1880]
   12a38:	f04f 0038 	mov.w	r0, #56	; 0x38
   12a3c:	f7fc f874 	bl	eb28 <_Znwj>
   12a40:	4603      	mov	r3, r0
   12a42:	f8c7 31e8 	str.w	r3, [r7, #488]
   12a46:	f8d7 31e8 	ldr.w	r3, [r7, #488]
   12a4a:	2b00      	cmp	r3, #0
   12a4c:	d01d      	beq.n	12a8a <_ZN9Krabi2015C1Eb+0x16a6>
   12a4e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12a52:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12a56:	681b      	ldr	r3, [r3, #0]
   12a58:	6b5b      	ldr	r3, [r3, #52]
   12a5a:	f507 7252 	add.w	r2, r7, #840	; 0x348
   12a5e:	9300      	str	r3, [sp, #0]
   12a60:	f04f 0300 	mov.w	r3, #0	; 0x0
   12a64:	9301      	str	r3, [sp, #4]
   12a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a6a:	9302      	str	r3, [sp, #8]
   12a6c:	f04f 0300 	mov.w	r3, #0	; 0x0
   12a70:	9303      	str	r3, [sp, #12]
   12a72:	f8d7 01e8 	ldr.w	r0, [r7, #488]
   12a76:	ca06      	ldmia	r2!, {r1, r2}
   12a78:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   12a7c:	f7fe f974 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12a80:	f8d7 31e8 	ldr.w	r3, [r7, #488]
   12a84:	f8c7 31ec 	str.w	r3, [r7, #492]
   12a88:	e003      	b.n	12a92 <_ZN9Krabi2015C1Eb+0x16ae>
   12a8a:	f8d7 31e8 	ldr.w	r3, [r7, #488]
   12a8e:	f8c7 31ec 	str.w	r3, [r7, #492]
   12a92:	f8d7 31ec 	ldr.w	r3, [r7, #492]
   12a96:	f8c7 37e8 	str.w	r3, [r7, #2024]
    Etape* etape36 = new Etape(Position(1950, 1530, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12a9a:	f507 7254 	add.w	r2, r7, #848	; 0x350
   12a9e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12aa2:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   12aa6:	781b      	ldrb	r3, [r3, #0]
   12aa8:	4610      	mov	r0, r2
   12aaa:	49a8      	ldr	r1, [pc, #672]	(12d4c <_ZN9Krabi2015C1Eb+0x1968>)
   12aac:	4aa8      	ldr	r2, [pc, #672]	(12d50 <_ZN9Krabi2015C1Eb+0x196c>)
   12aae:	f7fc f9a1 	bl	edf4 <_ZN8PositionC1Effb>
   12ab2:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12ab6:	f8c7 31f0 	str.w	r3, [r7, #496]
   12aba:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12abe:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12ac2:	f8c7 3758 	str.w	r3, [r7, #1880]
   12ac6:	f04f 0038 	mov.w	r0, #56	; 0x38
   12aca:	f7fc f82d 	bl	eb28 <_Znwj>
   12ace:	4603      	mov	r3, r0
   12ad0:	f8c7 31f4 	str.w	r3, [r7, #500]
   12ad4:	f8d7 31f4 	ldr.w	r3, [r7, #500]
   12ad8:	2b00      	cmp	r3, #0
   12ada:	d01d      	beq.n	12b18 <_ZN9Krabi2015C1Eb+0x1734>
   12adc:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12ae0:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12ae4:	681b      	ldr	r3, [r3, #0]
   12ae6:	6b5b      	ldr	r3, [r3, #52]
   12ae8:	f507 7254 	add.w	r2, r7, #848	; 0x350
   12aec:	9300      	str	r3, [sp, #0]
   12aee:	f04f 0300 	mov.w	r3, #0	; 0x0
   12af2:	9301      	str	r3, [sp, #4]
   12af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12af8:	9302      	str	r3, [sp, #8]
   12afa:	f04f 0300 	mov.w	r3, #0	; 0x0
   12afe:	9303      	str	r3, [sp, #12]
   12b00:	f8d7 01f4 	ldr.w	r0, [r7, #500]
   12b04:	ca06      	ldmia	r2!, {r1, r2}
   12b06:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   12b0a:	f7fe f92d 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12b0e:	f8d7 31f4 	ldr.w	r3, [r7, #500]
   12b12:	f8c7 31f8 	str.w	r3, [r7, #504]
   12b16:	e003      	b.n	12b20 <_ZN9Krabi2015C1Eb+0x173c>
   12b18:	f8d7 31f4 	ldr.w	r3, [r7, #500]
   12b1c:	f8c7 31f8 	str.w	r3, [r7, #504]
   12b20:	f8d7 31f8 	ldr.w	r3, [r7, #504]
   12b24:	f8c7 37ec 	str.w	r3, [r7, #2028]
    Etape* etape37 = new Etape(Position(1890, 1365, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12b28:	f507 7256 	add.w	r2, r7, #856	; 0x358
   12b2c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12b30:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   12b34:	781b      	ldrb	r3, [r3, #0]
   12b36:	4610      	mov	r0, r2
   12b38:	4986      	ldr	r1, [pc, #536]	(12d54 <_ZN9Krabi2015C1Eb+0x1970>)
   12b3a:	4a87      	ldr	r2, [pc, #540]	(12d58 <_ZN9Krabi2015C1Eb+0x1974>)
   12b3c:	f7fc f95a 	bl	edf4 <_ZN8PositionC1Effb>
   12b40:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12b44:	f8c7 31fc 	str.w	r3, [r7, #508]
   12b48:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12b4c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12b50:	f8c7 3758 	str.w	r3, [r7, #1880]
   12b54:	f04f 0038 	mov.w	r0, #56	; 0x38
   12b58:	f7fb ffe6 	bl	eb28 <_Znwj>
   12b5c:	4603      	mov	r3, r0
   12b5e:	f8c7 3200 	str.w	r3, [r7, #512]
   12b62:	f8d7 3200 	ldr.w	r3, [r7, #512]
   12b66:	2b00      	cmp	r3, #0
   12b68:	d01d      	beq.n	12ba6 <_ZN9Krabi2015C1Eb+0x17c2>
   12b6a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12b6e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12b72:	681b      	ldr	r3, [r3, #0]
   12b74:	6b5b      	ldr	r3, [r3, #52]
   12b76:	f507 7256 	add.w	r2, r7, #856	; 0x358
   12b7a:	9300      	str	r3, [sp, #0]
   12b7c:	f04f 0300 	mov.w	r3, #0	; 0x0
   12b80:	9301      	str	r3, [sp, #4]
   12b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b86:	9302      	str	r3, [sp, #8]
   12b88:	f04f 0300 	mov.w	r3, #0	; 0x0
   12b8c:	9303      	str	r3, [sp, #12]
   12b8e:	f8d7 0200 	ldr.w	r0, [r7, #512]
   12b92:	ca06      	ldmia	r2!, {r1, r2}
   12b94:	f8d7 31fc 	ldr.w	r3, [r7, #508]
   12b98:	f7fe f8e6 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12b9c:	f8d7 3200 	ldr.w	r3, [r7, #512]
   12ba0:	f8c7 3204 	str.w	r3, [r7, #516]
   12ba4:	e003      	b.n	12bae <_ZN9Krabi2015C1Eb+0x17ca>
   12ba6:	f8d7 3200 	ldr.w	r3, [r7, #512]
   12baa:	f8c7 3204 	str.w	r3, [r7, #516]
   12bae:	f8d7 3204 	ldr.w	r3, [r7, #516]
   12bb2:	f8c7 37f0 	str.w	r3, [r7, #2032]
    Etape* etape38 = new Etape(Position(1000, 750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::TAPIS, -1, 0);
   12bb6:	f507 7258 	add.w	r2, r7, #864	; 0x360
   12bba:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12bbe:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   12bc2:	781b      	ldrb	r3, [r3, #0]
   12bc4:	4610      	mov	r0, r2
   12bc6:	4965      	ldr	r1, [pc, #404]	(12d5c <_ZN9Krabi2015C1Eb+0x1978>)
   12bc8:	4a65      	ldr	r2, [pc, #404]	(12d60 <_ZN9Krabi2015C1Eb+0x197c>)
   12bca:	f7fc f913 	bl	edf4 <_ZN8PositionC1Effb>
   12bce:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12bd2:	f8c7 3208 	str.w	r3, [r7, #520]
   12bd6:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12bda:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12bde:	f8c7 3758 	str.w	r3, [r7, #1880]
   12be2:	f04f 0038 	mov.w	r0, #56	; 0x38
   12be6:	f7fb ff9f 	bl	eb28 <_Znwj>
   12bea:	4603      	mov	r3, r0
   12bec:	f8c7 320c 	str.w	r3, [r7, #524]
   12bf0:	f8d7 320c 	ldr.w	r3, [r7, #524]
   12bf4:	2b00      	cmp	r3, #0
   12bf6:	d01d      	beq.n	12c34 <_ZN9Krabi2015C1Eb+0x1850>
   12bf8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12bfc:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12c00:	681b      	ldr	r3, [r3, #0]
   12c02:	6b5b      	ldr	r3, [r3, #52]
   12c04:	f507 7258 	add.w	r2, r7, #864	; 0x360
   12c08:	9300      	str	r3, [sp, #0]
   12c0a:	f04f 0315 	mov.w	r3, #21	; 0x15
   12c0e:	9301      	str	r3, [sp, #4]
   12c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12c14:	9302      	str	r3, [sp, #8]
   12c16:	f04f 0300 	mov.w	r3, #0	; 0x0
   12c1a:	9303      	str	r3, [sp, #12]
   12c1c:	f8d7 020c 	ldr.w	r0, [r7, #524]
   12c20:	ca06      	ldmia	r2!, {r1, r2}
   12c22:	f8d7 3208 	ldr.w	r3, [r7, #520]
   12c26:	f7fe f89f 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12c2a:	f8d7 320c 	ldr.w	r3, [r7, #524]
   12c2e:	f8c7 3210 	str.w	r3, [r7, #528]
   12c32:	e003      	b.n	12c3c <_ZN9Krabi2015C1Eb+0x1858>
   12c34:	f8d7 320c 	ldr.w	r3, [r7, #524]
   12c38:	f8c7 3210 	str.w	r3, [r7, #528]
   12c3c:	f8d7 3210 	ldr.w	r3, [r7, #528]
   12c40:	f8c7 37f4 	str.w	r3, [r7, #2036]
    Etape* etape39 = new Etape(Position(1450, 750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::TAPIS, -1, 0);
   12c44:	f507 725a 	add.w	r2, r7, #872	; 0x368
   12c48:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12c4c:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   12c50:	781b      	ldrb	r3, [r3, #0]
   12c52:	4610      	mov	r0, r2
   12c54:	4943      	ldr	r1, [pc, #268]	(12d64 <_ZN9Krabi2015C1Eb+0x1980>)
   12c56:	4a42      	ldr	r2, [pc, #264]	(12d60 <_ZN9Krabi2015C1Eb+0x197c>)
   12c58:	f7fc f8cc 	bl	edf4 <_ZN8PositionC1Effb>
   12c5c:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12c60:	f8c7 3214 	str.w	r3, [r7, #532]
   12c64:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   12c68:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12c6c:	f8c7 3758 	str.w	r3, [r7, #1880]
   12c70:	f04f 0038 	mov.w	r0, #56	; 0x38
   12c74:	f7fb ff58 	bl	eb28 <_Znwj>
   12c78:	4603      	mov	r3, r0
   12c7a:	f8c7 3218 	str.w	r3, [r7, #536]
   12c7e:	f8d7 3218 	ldr.w	r3, [r7, #536]
   12c82:	2b00      	cmp	r3, #0
   12c84:	d01d      	beq.n	12cc2 <_ZN9Krabi2015C1Eb+0x18de>
   12c86:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12c8a:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12c8e:	681b      	ldr	r3, [r3, #0]
   12c90:	6b5b      	ldr	r3, [r3, #52]
   12c92:	f507 725a 	add.w	r2, r7, #872	; 0x368
   12c96:	9300      	str	r3, [sp, #0]
   12c98:	f04f 0315 	mov.w	r3, #21	; 0x15
   12c9c:	9301      	str	r3, [sp, #4]
   12c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12ca2:	9302      	str	r3, [sp, #8]
   12ca4:	f04f 0300 	mov.w	r3, #0	; 0x0
   12ca8:	9303      	str	r3, [sp, #12]
   12caa:	f8d7 0218 	ldr.w	r0, [r7, #536]
   12cae:	ca06      	ldmia	r2!, {r1, r2}
   12cb0:	f8d7 3214 	ldr.w	r3, [r7, #532]
   12cb4:	f7fe f858 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12cb8:	f8d7 3218 	ldr.w	r3, [r7, #536]
   12cbc:	f8c7 321c 	str.w	r3, [r7, #540]
   12cc0:	e003      	b.n	12cca <_ZN9Krabi2015C1Eb+0x18e6>
   12cc2:	f8d7 3218 	ldr.w	r3, [r7, #536]
   12cc6:	f8c7 321c 	str.w	r3, [r7, #540]
   12cca:	f8d7 321c 	ldr.w	r3, [r7, #540]
   12cce:	f8c7 37f8 	str.w	r3, [r7, #2040]
    Etape* etape42 = new Etape(Position(1450, 750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPOSE_PIED, -1, 0);*/
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h


    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   12cd2:	f04f 0300 	mov.w	r3, #0	; 0x0
   12cd6:	f8c7 37fc 	str.w	r3, [r7, #2044]
   12cda:	e0b9      	b.n	12e50 <_ZN9Krabi2015C1Eb+0x1a6c>
   12cdc:	44898000 	.word	0x44898000
   12ce0:	44dd4000 	.word	0x44dd4000
   12ce4:	44a28000 	.word	0x44a28000
   12ce8:	44af0000 	.word	0x44af0000
   12cec:	449c4000 	.word	0x449c4000
   12cf0:	44e10000 	.word	0x44e10000
   12cf4:	44dac000 	.word	0x44dac000
   12cf8:	44bb8000 	.word	0x44bb8000
   12cfc:	44548000 	.word	0x44548000
   12d00:	450fc000 	.word	0x450fc000
   12d04:	45296000 	.word	0x45296000
   12d08:	45246000 	.word	0x45246000
   12d0c:	43e60000 	.word	0x43e60000
   12d10:	44ce4000 	.word	0x44ce4000
   12d14:	440c0000 	.word	0x440c0000
   12d18:	44a14000 	.word	0x44a14000
   12d1c:	44340000 	.word	0x44340000
   12d20:	44c80000 	.word	0x44c80000
   12d24:	43d20000 	.word	0x43d20000
   12d28:	43960000 	.word	0x43960000
   12d2c:	43c80000 	.word	0x43c80000
   12d30:	43d70000 	.word	0x43d70000
   12d34:	448ac000 	.word	0x448ac000
   12d38:	448d4000 	.word	0x448d4000
   12d3c:	44b90000 	.word	0x44b90000
   12d40:	448fc000 	.word	0x448fc000
   12d44:	44e74000 	.word	0x44e74000
   12d48:	44910000 	.word	0x44910000
   12d4c:	44f3c000 	.word	0x44f3c000
   12d50:	44bf4000 	.word	0x44bf4000
   12d54:	44ec4000 	.word	0x44ec4000
   12d58:	44aaa000 	.word	0x44aaa000
   12d5c:	447a0000 	.word	0x447a0000
   12d60:	443b8000 	.word	0x443b8000
   12d64:	44b54000 	.word	0x44b54000
    {
        if (tableauEtapesTotal[i]->getState() == -1)
   12d68:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12d6c:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12d70:	681b      	ldr	r3, [r3, #0]
   12d72:	6b5a      	ldr	r2, [r3, #52]
   12d74:	f8d7 37fc 	ldr.w	r3, [r7, #2044]
   12d78:	ea4f 0383 	mov.w	r3, r3, lsl #2
   12d7c:	4413      	add	r3, r2
   12d7e:	681b      	ldr	r3, [r3, #0]
   12d80:	4618      	mov	r0, r3
   12d82:	f7fd fdbb 	bl	108fc <_ZN5Etape8getStateEv>
   12d86:	4603      	mov	r3, r0
   12d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   12d8c:	bf14      	ite	ne
   12d8e:	2300      	movne	r3, #0
   12d90:	2301      	moveq	r3, #1
   12d92:	b2db      	uxtb	r3, r3
   12d94:	2b00      	cmp	r3, #0
   12d96:	d055      	beq.n	12e44 <_ZN9Krabi2015C1Eb+0x1a60>
        {
            actionGoto[i] = ActionGoTo(tableauEtapesTotal[i]->getPosition());
   12d98:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12d9c:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12da0:	681b      	ldr	r3, [r3, #0]
   12da2:	6a99      	ldr	r1, [r3, #40]
   12da4:	f8d7 37fc 	ldr.w	r3, [r7, #2044]
   12da8:	ea4f 1203 	mov.w	r2, r3, lsl #4
   12dac:	ea4f 0382 	mov.w	r3, r2, lsl #2
   12db0:	ebc2 0303 	rsb	r3, r2, r3
   12db4:	eb01 0403 	add.w	r4, r1, r3
   12db8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12dbc:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12dc0:	681b      	ldr	r3, [r3, #0]
   12dc2:	6b5a      	ldr	r2, [r3, #52]
   12dc4:	f8d7 37fc 	ldr.w	r3, [r7, #2044]
   12dc8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   12dcc:	4413      	add	r3, r2
   12dce:	681a      	ldr	r2, [r3, #0]
   12dd0:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
   12dd4:	4618      	mov	r0, r3
   12dd6:	4611      	mov	r1, r2
   12dd8:	f7fd fd7c 	bl	108d4 <_ZN5Etape11getPositionEv>
   12ddc:	f507 715c 	add.w	r1, r7, #880	; 0x370
   12de0:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
   12de4:	f8df 3d24 	ldr.w	r3, [pc, #3364]	; 13b0c <_ZN9Krabi2015C1Eb+0x2728>
   12de8:	9300      	str	r3, [sp, #0]
   12dea:	4608      	mov	r0, r1
   12dec:	ca06      	ldmia	r2!, {r1, r2}
   12dee:	f04f 0300 	mov.w	r3, #0	; 0x0
   12df2:	f7fc fd25 	bl	f840 <_ZN10ActionGoToC1E8Positionbf>
   12df6:	f507 735c 	add.w	r3, r7, #880	; 0x370
   12dfa:	4620      	mov	r0, r4
   12dfc:	4619      	mov	r1, r3
   12dfe:	f00c f90d 	bl	1f01c <_ZN10ActionGoToaSERKS_>
   12e02:	f507 735c 	add.w	r3, r7, #880	; 0x370
   12e06:	4618      	mov	r0, r3
   12e08:	f7fc fce2 	bl	f7d0 <_ZN10ActionGoToD1Ev>
            actionEtape[i] = &actionGoto[i];
   12e0c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12e10:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12e14:	681b      	ldr	r3, [r3, #0]
   12e16:	6a5a      	ldr	r2, [r3, #36]
   12e18:	f8d7 37fc 	ldr.w	r3, [r7, #2044]
   12e1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   12e20:	eb02 0003 	add.w	r0, r2, r3
   12e24:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12e28:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12e2c:	681b      	ldr	r3, [r3, #0]
   12e2e:	6a99      	ldr	r1, [r3, #40]
   12e30:	f8d7 37fc 	ldr.w	r3, [r7, #2044]
   12e34:	ea4f 1203 	mov.w	r2, r3, lsl #4
   12e38:	ea4f 0382 	mov.w	r3, r2, lsl #2
   12e3c:	ebc2 0303 	rsb	r3, r2, r3
   12e40:	440b      	add	r3, r1
   12e42:	6003      	str	r3, [r0, #0]
    Etape* etape42 = new Etape(Position(1450, 750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPOSE_PIED, -1, 0);*/
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h


    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   12e44:	f8d7 37fc 	ldr.w	r3, [r7, #2044]
   12e48:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12e4c:	f8c7 37fc 	str.w	r3, [r7, #2044]
   12e50:	f8d7 37fc 	ldr.w	r3, [r7, #2044]
   12e54:	2b27      	cmp	r3, #39
   12e56:	dd87      	ble.n	12d68 <_ZN9Krabi2015C1Eb+0x1984>
            actionEtape[i] = &actionGoto[i];
        }

    }

    actionClap[0]= Clap(Position(836, 1780, isYellow),Position(1000, 1780, isYellow));
   12e58:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12e5c:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12e60:	681b      	ldr	r3, [r3, #0]
   12e62:	f103 0448 	add.w	r4, r3, #72	; 0x48
   12e66:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
   12e6a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12e6e:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   12e72:	781b      	ldrb	r3, [r3, #0]
   12e74:	4610      	mov	r0, r2
   12e76:	f8df 1c98 	ldr.w	r1, [pc, #3224]	; 13b10 <_ZN9Krabi2015C1Eb+0x272c>
   12e7a:	f8df 2c98 	ldr.w	r2, [pc, #3224]	; 13b14 <_ZN9Krabi2015C1Eb+0x2730>
   12e7e:	f7fb ffb9 	bl	edf4 <_ZN8PositionC1Effb>
   12e82:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
   12e86:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12e8a:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   12e8e:	781b      	ldrb	r3, [r3, #0]
   12e90:	4610      	mov	r0, r2
   12e92:	f8df 1c84 	ldr.w	r1, [pc, #3204]	; 13b18 <_ZN9Krabi2015C1Eb+0x2734>
   12e96:	f8df 2c7c 	ldr.w	r2, [pc, #3196]	; 13b14 <_ZN9Krabi2015C1Eb+0x2730>
   12e9a:	f7fb ffab 	bl	edf4 <_ZN8PositionC1Effb>
   12e9e:	f507 706a 	add.w	r0, r7, #936	; 0x3a8
   12ea2:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
   12ea6:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
   12eaa:	6853      	ldr	r3, [r2, #4]
   12eac:	9300      	str	r3, [sp, #0]
   12eae:	6813      	ldr	r3, [r2, #0]
   12eb0:	c906      	ldmia	r1!, {r1, r2}
   12eb2:	f7fc fead 	bl	fc10 <_ZN4ClapC1E8PositionS0_>
   12eb6:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
   12eba:	4620      	mov	r0, r4
   12ebc:	4619      	mov	r1, r3
   12ebe:	f00c f8d9 	bl	1f074 <_ZN4ClapaSERKS_>
   12ec2:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
   12ec6:	4618      	mov	r0, r3
   12ec8:	f7fc fe6a 	bl	fba0 <_ZN4ClapD1Ev>
    actionEtape[2]= &actionClap[0];
   12ecc:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12ed0:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12ed4:	681b      	ldr	r3, [r3, #0]
   12ed6:	6a5b      	ldr	r3, [r3, #36]
   12ed8:	f103 0208 	add.w	r2, r3, #8	; 0x8
   12edc:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12ee0:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12ee4:	681b      	ldr	r3, [r3, #0]
   12ee6:	f103 0348 	add.w	r3, r3, #72	; 0x48
   12eea:	6013      	str	r3, [r2, #0]
    actionClap[1] = Clap(Position(236, 1780, isYellow),Position(400, 1780, isYellow));
   12eec:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12ef0:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12ef4:	681b      	ldr	r3, [r3, #0]
   12ef6:	f103 0470 	add.w	r4, r3, #112	; 0x70
   12efa:	f507 6281 	add.w	r2, r7, #1032	; 0x408
   12efe:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12f02:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   12f06:	781b      	ldrb	r3, [r3, #0]
   12f08:	4610      	mov	r0, r2
   12f0a:	f8df 1c10 	ldr.w	r1, [pc, #3088]	; 13b1c <_ZN9Krabi2015C1Eb+0x2738>
   12f0e:	f8df 2c04 	ldr.w	r2, [pc, #3076]	; 13b14 <_ZN9Krabi2015C1Eb+0x2730>
   12f12:	f7fb ff6f 	bl	edf4 <_ZN8PositionC1Effb>
   12f16:	f507 6282 	add.w	r2, r7, #1040	; 0x410
   12f1a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12f1e:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   12f22:	781b      	ldrb	r3, [r3, #0]
   12f24:	4610      	mov	r0, r2
   12f26:	f8df 1bf8 	ldr.w	r1, [pc, #3064]	; 13b20 <_ZN9Krabi2015C1Eb+0x273c>
   12f2a:	f8df 2be8 	ldr.w	r2, [pc, #3048]	; 13b14 <_ZN9Krabi2015C1Eb+0x2730>
   12f2e:	f7fb ff61 	bl	edf4 <_ZN8PositionC1Effb>
   12f32:	f507 7078 	add.w	r0, r7, #992	; 0x3e0
   12f36:	f507 6181 	add.w	r1, r7, #1032	; 0x408
   12f3a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
   12f3e:	6853      	ldr	r3, [r2, #4]
   12f40:	9300      	str	r3, [sp, #0]
   12f42:	6813      	ldr	r3, [r2, #0]
   12f44:	c906      	ldmia	r1!, {r1, r2}
   12f46:	f7fc fe63 	bl	fc10 <_ZN4ClapC1E8PositionS0_>
   12f4a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
   12f4e:	4620      	mov	r0, r4
   12f50:	4619      	mov	r1, r3
   12f52:	f00c f88f 	bl	1f074 <_ZN4ClapaSERKS_>
   12f56:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
   12f5a:	4618      	mov	r0, r3
   12f5c:	f7fc fe20 	bl	fba0 <_ZN4ClapD1Ev>
    actionEtape[4] = &actionClap[1];
   12f60:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12f64:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12f68:	681b      	ldr	r3, [r3, #0]
   12f6a:	6a5b      	ldr	r3, [r3, #36]
   12f6c:	f103 0210 	add.w	r2, r3, #16	; 0x10
   12f70:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12f74:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12f78:	681b      	ldr	r3, [r3, #0]
   12f7a:	f103 0370 	add.w	r3, r3, #112	; 0x70
   12f7e:	6013      	str	r3, [r2, #0]
    actionClap[2] = Clap(Position(2500, 1780, isYellow),Position(2300, 1780, isYellow));
   12f80:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12f84:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12f88:	681b      	ldr	r3, [r3, #0]
   12f8a:	f103 0498 	add.w	r4, r3, #152	; 0x98
   12f8e:	f507 6288 	add.w	r2, r7, #1088	; 0x440
   12f92:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12f96:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   12f9a:	781b      	ldrb	r3, [r3, #0]
   12f9c:	4610      	mov	r0, r2
   12f9e:	f8df 1b84 	ldr.w	r1, [pc, #2948]	; 13b24 <_ZN9Krabi2015C1Eb+0x2740>
   12fa2:	f8df 2b70 	ldr.w	r2, [pc, #2928]	; 13b14 <_ZN9Krabi2015C1Eb+0x2730>
   12fa6:	f7fb ff25 	bl	edf4 <_ZN8PositionC1Effb>
   12faa:	f507 6289 	add.w	r2, r7, #1096	; 0x448
   12fae:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12fb2:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   12fb6:	781b      	ldrb	r3, [r3, #0]
   12fb8:	4610      	mov	r0, r2
   12fba:	f8df 1b6c 	ldr.w	r1, [pc, #2924]	; 13b28 <_ZN9Krabi2015C1Eb+0x2744>
   12fbe:	f8df 2b54 	ldr.w	r2, [pc, #2900]	; 13b14 <_ZN9Krabi2015C1Eb+0x2730>
   12fc2:	f7fb ff17 	bl	edf4 <_ZN8PositionC1Effb>
   12fc6:	f507 6083 	add.w	r0, r7, #1048	; 0x418
   12fca:	f507 6188 	add.w	r1, r7, #1088	; 0x440
   12fce:	f507 6289 	add.w	r2, r7, #1096	; 0x448
   12fd2:	6853      	ldr	r3, [r2, #4]
   12fd4:	9300      	str	r3, [sp, #0]
   12fd6:	6813      	ldr	r3, [r2, #0]
   12fd8:	c906      	ldmia	r1!, {r1, r2}
   12fda:	f7fc fe19 	bl	fc10 <_ZN4ClapC1E8PositionS0_>
   12fde:	f507 6383 	add.w	r3, r7, #1048	; 0x418
   12fe2:	4620      	mov	r0, r4
   12fe4:	4619      	mov	r1, r3
   12fe6:	f00c f845 	bl	1f074 <_ZN4ClapaSERKS_>
   12fea:	f507 6383 	add.w	r3, r7, #1048	; 0x418
   12fee:	4618      	mov	r0, r3
   12ff0:	f7fc fdd6 	bl	fba0 <_ZN4ClapD1Ev>
    actionEtape[6] = &actionClap[2];
   12ff4:	f507 730c 	add.w	r3, r7, #560	; 0x230
   12ff8:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   12ffc:	681b      	ldr	r3, [r3, #0]
   12ffe:	6a5b      	ldr	r3, [r3, #36]
   13000:	f103 0218 	add.w	r2, r3, #24	; 0x18
   13004:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13008:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1300c:	681b      	ldr	r3, [r3, #0]
   1300e:	f103 0398 	add.w	r3, r3, #152	; 0x98
   13012:	6013      	str	r3, [r2, #0]
    actionGobelet[0] = Gobelet(Position(250, 1750, isYellow));
   13014:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13018:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1301c:	681b      	ldr	r3, [r3, #0]
   1301e:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
   13022:	f507 628e 	add.w	r2, r7, #1136	; 0x470
   13026:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1302a:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   1302e:	781b      	ldrb	r3, [r3, #0]
   13030:	4610      	mov	r0, r2
   13032:	f8df 1af8 	ldr.w	r1, [pc, #2808]	; 13b2c <_ZN9Krabi2015C1Eb+0x2748>
   13036:	f8df 2af8 	ldr.w	r2, [pc, #2808]	; 13b30 <_ZN9Krabi2015C1Eb+0x274c>
   1303a:	f7fb fedb 	bl	edf4 <_ZN8PositionC1Effb>
   1303e:	f507 628a 	add.w	r2, r7, #1104	; 0x450
   13042:	f507 638e 	add.w	r3, r7, #1136	; 0x470
   13046:	4610      	mov	r0, r2
   13048:	e893 0006 	ldmia.w	r3, {r1, r2}
   1304c:	f7fe f896 	bl	1117c <_ZN7GobeletC1E8Position>
   13050:	f507 638a 	add.w	r3, r7, #1104	; 0x450
   13054:	4620      	mov	r0, r4
   13056:	4619      	mov	r1, r3
   13058:	f00c f834 	bl	1f0c4 <_ZN7GobeletaSERKS_>
   1305c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
   13060:	4618      	mov	r0, r3
   13062:	f7fe f853 	bl	1110c <_ZN7GobeletD1Ev>
    actionEtape[8] = &actionGobelet[0];
   13066:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1306a:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1306e:	681b      	ldr	r3, [r3, #0]
   13070:	6a5b      	ldr	r3, [r3, #36]
   13072:	f103 0220 	add.w	r2, r3, #32	; 0x20
   13076:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1307a:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1307e:	681b      	ldr	r3, [r3, #0]
   13080:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   13084:	6013      	str	r3, [r2, #0]
    actionGobelet[1] = Gobelet(Position(910, 830, isYellow));
   13086:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1308a:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1308e:	681b      	ldr	r3, [r3, #0]
   13090:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
   13094:	f507 6293 	add.w	r2, r7, #1176	; 0x498
   13098:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1309c:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   130a0:	781b      	ldrb	r3, [r3, #0]
   130a2:	4610      	mov	r0, r2
   130a4:	f8df 1a8c 	ldr.w	r1, [pc, #2700]	; 13b34 <_ZN9Krabi2015C1Eb+0x2750>
   130a8:	f8df 2a8c 	ldr.w	r2, [pc, #2700]	; 13b38 <_ZN9Krabi2015C1Eb+0x2754>
   130ac:	f7fb fea2 	bl	edf4 <_ZN8PositionC1Effb>
   130b0:	f507 628f 	add.w	r2, r7, #1144	; 0x478
   130b4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
   130b8:	4610      	mov	r0, r2
   130ba:	e893 0006 	ldmia.w	r3, {r1, r2}
   130be:	f7fe f85d 	bl	1117c <_ZN7GobeletC1E8Position>
   130c2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
   130c6:	4620      	mov	r0, r4
   130c8:	4619      	mov	r1, r3
   130ca:	f00b fffb 	bl	1f0c4 <_ZN7GobeletaSERKS_>
   130ce:	f507 638f 	add.w	r3, r7, #1144	; 0x478
   130d2:	4618      	mov	r0, r3
   130d4:	f7fe f81a 	bl	1110c <_ZN7GobeletD1Ev>
    actionEtape[9] = &actionGobelet[1];
   130d8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   130dc:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   130e0:	681b      	ldr	r3, [r3, #0]
   130e2:	6a5b      	ldr	r3, [r3, #36]
   130e4:	f103 0224 	add.w	r2, r3, #36	; 0x24
   130e8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   130ec:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   130f0:	681b      	ldr	r3, [r3, #0]
   130f2:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
   130f6:	6013      	str	r3, [r2, #0]
    actionGobelet[2] = Gobelet(Position(1500, 1650, isYellow));
   130f8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   130fc:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13100:	681b      	ldr	r3, [r3, #0]
   13102:	f503 7480 	add.w	r4, r3, #256	; 0x100
   13106:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
   1310a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1310e:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   13112:	781b      	ldrb	r3, [r3, #0]
   13114:	4610      	mov	r0, r2
   13116:	f8df 1a24 	ldr.w	r1, [pc, #2596]	; 13b3c <_ZN9Krabi2015C1Eb+0x2758>
   1311a:	f8df 2a24 	ldr.w	r2, [pc, #2596]	; 13b40 <_ZN9Krabi2015C1Eb+0x275c>
   1311e:	f7fb fe69 	bl	edf4 <_ZN8PositionC1Effb>
   13122:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
   13126:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
   1312a:	4610      	mov	r0, r2
   1312c:	e893 0006 	ldmia.w	r3, {r1, r2}
   13130:	f7fe f824 	bl	1117c <_ZN7GobeletC1E8Position>
   13134:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
   13138:	4620      	mov	r0, r4
   1313a:	4619      	mov	r1, r3
   1313c:	f00b ffc2 	bl	1f0c4 <_ZN7GobeletaSERKS_>
   13140:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
   13144:	4618      	mov	r0, r3
   13146:	f7fd ffe1 	bl	1110c <_ZN7GobeletD1Ev>
    actionEtape[10] = &actionGobelet[2];
   1314a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1314e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13152:	681b      	ldr	r3, [r3, #0]
   13154:	6a5b      	ldr	r3, [r3, #36]
   13156:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1315a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1315e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13162:	681b      	ldr	r3, [r3, #0]
   13164:	f503 7380 	add.w	r3, r3, #256	; 0x100
   13168:	6013      	str	r3, [r2, #0]
    actionGobelet[3] = Gobelet(Position(2090, 830, isYellow));
   1316a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1316e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13172:	681b      	ldr	r3, [r3, #0]
   13174:	f503 7490 	add.w	r4, r3, #288	; 0x120
   13178:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
   1317c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13180:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   13184:	781b      	ldrb	r3, [r3, #0]
   13186:	4610      	mov	r0, r2
   13188:	f8df 19b8 	ldr.w	r1, [pc, #2488]	; 13b44 <_ZN9Krabi2015C1Eb+0x2760>
   1318c:	f8df 29a8 	ldr.w	r2, [pc, #2472]	; 13b38 <_ZN9Krabi2015C1Eb+0x2754>
   13190:	f7fb fe30 	bl	edf4 <_ZN8PositionC1Effb>
   13194:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
   13198:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
   1319c:	4610      	mov	r0, r2
   1319e:	e893 0006 	ldmia.w	r3, {r1, r2}
   131a2:	f7fd ffeb 	bl	1117c <_ZN7GobeletC1E8Position>
   131a6:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
   131aa:	4620      	mov	r0, r4
   131ac:	4619      	mov	r1, r3
   131ae:	f00b ff89 	bl	1f0c4 <_ZN7GobeletaSERKS_>
   131b2:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
   131b6:	4618      	mov	r0, r3
   131b8:	f7fd ffa8 	bl	1110c <_ZN7GobeletD1Ev>
    actionEtape[11] = &actionGobelet[3];
   131bc:	f507 730c 	add.w	r3, r7, #560	; 0x230
   131c0:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   131c4:	681b      	ldr	r3, [r3, #0]
   131c6:	6a5b      	ldr	r3, [r3, #36]
   131c8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   131cc:	f507 730c 	add.w	r3, r7, #560	; 0x230
   131d0:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   131d4:	681b      	ldr	r3, [r3, #0]
   131d6:	f503 7390 	add.w	r3, r3, #288	; 0x120
   131da:	6013      	str	r3, [r2, #0]
    actionGobelet[4] = Gobelet(Position(2750, 1750, isYellow));
   131dc:	f507 730c 	add.w	r3, r7, #560	; 0x230
   131e0:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   131e4:	681b      	ldr	r3, [r3, #0]
   131e6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
   131ea:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
   131ee:	f507 730c 	add.w	r3, r7, #560	; 0x230
   131f2:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   131f6:	781b      	ldrb	r3, [r3, #0]
   131f8:	4610      	mov	r0, r2
   131fa:	f8df 194c 	ldr.w	r1, [pc, #2380]	; 13b48 <_ZN9Krabi2015C1Eb+0x2764>
   131fe:	f8df 2930 	ldr.w	r2, [pc, #2352]	; 13b30 <_ZN9Krabi2015C1Eb+0x274c>
   13202:	f7fb fdf7 	bl	edf4 <_ZN8PositionC1Effb>
   13206:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
   1320a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
   1320e:	4610      	mov	r0, r2
   13210:	e893 0006 	ldmia.w	r3, {r1, r2}
   13214:	f7fd ffb2 	bl	1117c <_ZN7GobeletC1E8Position>
   13218:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
   1321c:	4620      	mov	r0, r4
   1321e:	4619      	mov	r1, r3
   13220:	f00b ff50 	bl	1f0c4 <_ZN7GobeletaSERKS_>
   13224:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
   13228:	4618      	mov	r0, r3
   1322a:	f7fd ff6f 	bl	1110c <_ZN7GobeletD1Ev>
    actionEtape[12] = &actionGobelet[4];
   1322e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13232:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13236:	681b      	ldr	r3, [r3, #0]
   13238:	6a5b      	ldr	r3, [r3, #36]
   1323a:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1323e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13242:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13246:	681b      	ldr	r3, [r3, #0]
   13248:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   1324c:	6013      	str	r3, [r2, #0]
    actionTapis[0] = Tapis(Position(1000, 750, isYellow));
   1324e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13252:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13256:	681b      	ldr	r3, [r3, #0]
   13258:	f503 74b0 	add.w	r4, r3, #352	; 0x160
   1325c:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
   13260:	f102 0204 	add.w	r2, r2, #4	; 0x4
   13264:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13268:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   1326c:	781b      	ldrb	r3, [r3, #0]
   1326e:	4610      	mov	r0, r2
   13270:	f8df 18a4 	ldr.w	r1, [pc, #2212]	; 13b18 <_ZN9Krabi2015C1Eb+0x2734>
   13274:	f8df 28d4 	ldr.w	r2, [pc, #2260]	; 13b4c <_ZN9Krabi2015C1Eb+0x2768>
   13278:	f7fb fdbc 	bl	edf4 <_ZN8PositionC1Effb>
   1327c:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
   13280:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
   13284:	f103 0304 	add.w	r3, r3, #4	; 0x4
   13288:	4610      	mov	r0, r2
   1328a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1328e:	f005 fffd 	bl	1928c <_ZN5TapisC1E8Position>
   13292:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
   13296:	4620      	mov	r0, r4
   13298:	4619      	mov	r1, r3
   1329a:	f00b ff2f 	bl	1f0fc <_ZN5TapisaSERKS_>
   1329e:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
   132a2:	4618      	mov	r0, r3
   132a4:	f005 ff5e 	bl	19164 <_ZN5TapisD1Ev>
    actionEtape[38] = &actionTapis[0];
   132a8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   132ac:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   132b0:	681b      	ldr	r3, [r3, #0]
   132b2:	6a5b      	ldr	r3, [r3, #36]
   132b4:	f103 0298 	add.w	r2, r3, #152	; 0x98
   132b8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   132bc:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   132c0:	681b      	ldr	r3, [r3, #0]
   132c2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   132c6:	6013      	str	r3, [r2, #0]
    actionTapis[1] = Tapis(Position(1450, 750, isYellow));
   132c8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   132cc:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   132d0:	681b      	ldr	r3, [r3, #0]
   132d2:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
   132d6:	f507 62af 	add.w	r2, r7, #1400	; 0x578
   132da:	f507 730c 	add.w	r3, r7, #560	; 0x230
   132de:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   132e2:	781b      	ldrb	r3, [r3, #0]
   132e4:	4610      	mov	r0, r2
   132e6:	f8df 1868 	ldr.w	r1, [pc, #2152]	; 13b50 <_ZN9Krabi2015C1Eb+0x276c>
   132ea:	f8df 2860 	ldr.w	r2, [pc, #2144]	; 13b4c <_ZN9Krabi2015C1Eb+0x2768>
   132ee:	f7fb fd81 	bl	edf4 <_ZN8PositionC1Effb>
   132f2:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
   132f6:	f102 020c 	add.w	r2, r2, #12	; 0xc
   132fa:	f507 63af 	add.w	r3, r7, #1400	; 0x578
   132fe:	4610      	mov	r0, r2
   13300:	e893 0006 	ldmia.w	r3, {r1, r2}
   13304:	f005 ffc2 	bl	1928c <_ZN5TapisC1E8Position>
   13308:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
   1330c:	f103 030c 	add.w	r3, r3, #12	; 0xc
   13310:	4620      	mov	r0, r4
   13312:	4619      	mov	r1, r3
   13314:	f00b fef2 	bl	1f0fc <_ZN5TapisaSERKS_>
   13318:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
   1331c:	f103 030c 	add.w	r3, r3, #12	; 0xc
   13320:	4618      	mov	r0, r3
   13322:	f005 ff1f 	bl	19164 <_ZN5TapisD1Ev>
    actionEtape[39] = &actionTapis[1];
   13326:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1332a:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1332e:	681b      	ldr	r3, [r3, #0]
   13330:	6a5b      	ldr	r3, [r3, #36]
   13332:	f103 029c 	add.w	r2, r3, #156	; 0x9c
   13336:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1333a:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1333e:	681b      	ldr	r3, [r3, #0]
   13340:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   13344:	6013      	str	r3, [r2, #0]
    actionDeposerGobelet[0] = DeposerGobelet(Position(700, 1000, isYellow));
   13346:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1334a:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1334e:	681b      	ldr	r3, [r3, #0]
   13350:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
   13354:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
   13358:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1335c:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   13360:	781b      	ldrb	r3, [r3, #0]
   13362:	4610      	mov	r0, r2
   13364:	f8df 17ec 	ldr.w	r1, [pc, #2028]	; 13b54 <_ZN9Krabi2015C1Eb+0x2770>
   13368:	f8df 27ac 	ldr.w	r2, [pc, #1964]	; 13b18 <_ZN9Krabi2015C1Eb+0x2734>
   1336c:	f7fb fd42 	bl	edf4 <_ZN8PositionC1Effb>
   13370:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
   13374:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
   13378:	4610      	mov	r0, r2
   1337a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1337e:	f7fc fe15 	bl	ffac <_ZN14DeposerGobeletC1E8Position>
   13382:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
   13386:	4620      	mov	r0, r4
   13388:	4619      	mov	r1, r3
   1338a:	f00b fee5 	bl	1f158 <_ZN14DeposerGobeletaSERKS_>
   1338e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
   13392:	4618      	mov	r0, r3
   13394:	f7fc fdd2 	bl	ff3c <_ZN14DeposerGobeletD1Ev>
    actionEtape[1] = &actionDeposerGobelet[0];
   13398:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1339c:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   133a0:	681b      	ldr	r3, [r3, #0]
   133a2:	6a5b      	ldr	r3, [r3, #36]
   133a4:	f103 0204 	add.w	r2, r3, #4	; 0x4
   133a8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   133ac:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   133b0:	681b      	ldr	r3, [r3, #0]
   133b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
   133b6:	6013      	str	r3, [r2, #0]
    actionDeposerGobelet[1] = DeposerGobelet(Position(2710, 1500, isYellow));
   133b8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   133bc:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   133c0:	681b      	ldr	r3, [r3, #0]
   133c2:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
   133c6:	f507 62b9 	add.w	r2, r7, #1480	; 0x5c8
   133ca:	f507 730c 	add.w	r3, r7, #560	; 0x230
   133ce:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   133d2:	781b      	ldrb	r3, [r3, #0]
   133d4:	4610      	mov	r0, r2
   133d6:	f8df 1780 	ldr.w	r1, [pc, #1920]	; 13b58 <_ZN9Krabi2015C1Eb+0x2774>
   133da:	f8df 2760 	ldr.w	r2, [pc, #1888]	; 13b3c <_ZN9Krabi2015C1Eb+0x2758>
   133de:	f7fb fd09 	bl	edf4 <_ZN8PositionC1Effb>
   133e2:	f507 62b5 	add.w	r2, r7, #1448	; 0x5a8
   133e6:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
   133ea:	4610      	mov	r0, r2
   133ec:	e893 0006 	ldmia.w	r3, {r1, r2}
   133f0:	f7fc fddc 	bl	ffac <_ZN14DeposerGobeletC1E8Position>
   133f4:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
   133f8:	4620      	mov	r0, r4
   133fa:	4619      	mov	r1, r3
   133fc:	f00b feac 	bl	1f158 <_ZN14DeposerGobeletaSERKS_>
   13400:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
   13404:	4618      	mov	r0, r3
   13406:	f7fc fd99 	bl	ff3c <_ZN14DeposerGobeletD1Ev>
    actionEtape[25] = &actionDeposerGobelet[1];
   1340a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1340e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13412:	681b      	ldr	r3, [r3, #0]
   13414:	6a5b      	ldr	r3, [r3, #36]
   13416:	f103 0264 	add.w	r2, r3, #100	; 0x64
   1341a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1341e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13422:	681b      	ldr	r3, [r3, #0]
   13424:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   13428:	6013      	str	r3, [r2, #0]
    actionDeposerGobelet[2] = DeposerGobelet(Position(2630, 460, isYellow));
   1342a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1342e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13432:	681b      	ldr	r3, [r3, #0]
   13434:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
   13438:	f507 62be 	add.w	r2, r7, #1520	; 0x5f0
   1343c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13440:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   13444:	781b      	ldrb	r3, [r3, #0]
   13446:	4610      	mov	r0, r2
   13448:	f8df 1710 	ldr.w	r1, [pc, #1808]	; 13b5c <_ZN9Krabi2015C1Eb+0x2778>
   1344c:	f8df 2710 	ldr.w	r2, [pc, #1808]	; 13b60 <_ZN9Krabi2015C1Eb+0x277c>
   13450:	f7fb fcd0 	bl	edf4 <_ZN8PositionC1Effb>
   13454:	f507 62ba 	add.w	r2, r7, #1488	; 0x5d0
   13458:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
   1345c:	4610      	mov	r0, r2
   1345e:	e893 0006 	ldmia.w	r3, {r1, r2}
   13462:	f7fc fda3 	bl	ffac <_ZN14DeposerGobeletC1E8Position>
   13466:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
   1346a:	4620      	mov	r0, r4
   1346c:	4619      	mov	r1, r3
   1346e:	f00b fe73 	bl	1f158 <_ZN14DeposerGobeletaSERKS_>
   13472:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
   13476:	4618      	mov	r0, r3
   13478:	f7fc fd60 	bl	ff3c <_ZN14DeposerGobeletD1Ev>
    actionEtape[26] = &actionDeposerGobelet[2];
   1347c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13480:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13484:	681b      	ldr	r3, [r3, #0]
   13486:	6a5b      	ldr	r3, [r3, #36]
   13488:	f103 0268 	add.w	r2, r3, #104	; 0x68
   1348c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13490:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13494:	681b      	ldr	r3, [r3, #0]
   13496:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
   1349a:	6013      	str	r3, [r2, #0]

    actionRamasserPied[0] = RamasserPied(Position(90, 1750, isYellow));
   1349c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   134a0:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   134a4:	681b      	ldr	r3, [r3, #0]
   134a6:	f503 7406 	add.w	r4, r3, #536	; 0x218
   134aa:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
   134ae:	f102 020c 	add.w	r2, r2, #12	; 0xc
   134b2:	f507 730c 	add.w	r3, r7, #560	; 0x230
   134b6:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   134ba:	781b      	ldrb	r3, [r3, #0]
   134bc:	4610      	mov	r0, r2
   134be:	f8df 16a4 	ldr.w	r1, [pc, #1700]	; 13b64 <_ZN9Krabi2015C1Eb+0x2780>
   134c2:	f8df 266c 	ldr.w	r2, [pc, #1644]	; 13b30 <_ZN9Krabi2015C1Eb+0x274c>
   134c6:	f7fb fc95 	bl	edf4 <_ZN8PositionC1Effb>
   134ca:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
   134ce:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
   134d2:	f103 030c 	add.w	r3, r3, #12	; 0xc
   134d6:	4610      	mov	r0, r2
   134d8:	e893 0006 	ldmia.w	r3, {r1, r2}
   134dc:	f003 fc28 	bl	16d30 <_ZN12RamasserPiedC1E8Position>
   134e0:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
   134e4:	4620      	mov	r0, r4
   134e6:	4619      	mov	r1, r3
   134e8:	f00b fe52 	bl	1f190 <_ZN12RamasserPiedaSERKS_>
   134ec:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
   134f0:	4618      	mov	r0, r3
   134f2:	f003 fbe5 	bl	16cc0 <_ZN12RamasserPiedD1Ev>
    actionEtape[13] = &actionRamasserPied[0];
   134f6:	f507 730c 	add.w	r3, r7, #560	; 0x230
   134fa:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   134fe:	681b      	ldr	r3, [r3, #0]
   13500:	6a5b      	ldr	r3, [r3, #36]
   13502:	f103 0234 	add.w	r2, r3, #52	; 0x34
   13506:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1350a:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1350e:	681b      	ldr	r3, [r3, #0]
   13510:	f503 7306 	add.w	r3, r3, #536	; 0x218
   13514:	6013      	str	r3, [r2, #0]
    actionRamasserPied[1] = RamasserPied(Position(90, 1850, isYellow));
   13516:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1351a:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1351e:	681b      	ldr	r3, [r3, #0]
   13520:	f503 740f 	add.w	r4, r3, #572	; 0x23c
   13524:	f507 62c9 	add.w	r2, r7, #1608	; 0x648
   13528:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1352c:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   13530:	781b      	ldrb	r3, [r3, #0]
   13532:	4610      	mov	r0, r2
   13534:	f8df 162c 	ldr.w	r1, [pc, #1580]	; 13b64 <_ZN9Krabi2015C1Eb+0x2780>
   13538:	f8df 262c 	ldr.w	r2, [pc, #1580]	; 13b68 <_ZN9Krabi2015C1Eb+0x2784>
   1353c:	f7fb fc5a 	bl	edf4 <_ZN8PositionC1Effb>
   13540:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
   13544:	f102 0204 	add.w	r2, r2, #4	; 0x4
   13548:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
   1354c:	4610      	mov	r0, r2
   1354e:	e893 0006 	ldmia.w	r3, {r1, r2}
   13552:	f003 fbed 	bl	16d30 <_ZN12RamasserPiedC1E8Position>
   13556:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
   1355a:	f103 0304 	add.w	r3, r3, #4	; 0x4
   1355e:	4620      	mov	r0, r4
   13560:	4619      	mov	r1, r3
   13562:	f00b fe15 	bl	1f190 <_ZN12RamasserPiedaSERKS_>
   13566:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
   1356a:	f103 0304 	add.w	r3, r3, #4	; 0x4
   1356e:	4618      	mov	r0, r3
   13570:	f003 fba6 	bl	16cc0 <_ZN12RamasserPiedD1Ev>
    actionEtape[14] = &actionRamasserPied[1];
   13574:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13578:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1357c:	681b      	ldr	r3, [r3, #0]
   1357e:	6a5b      	ldr	r3, [r3, #36]
   13580:	f103 0238 	add.w	r2, r3, #56	; 0x38
   13584:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13588:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1358c:	681b      	ldr	r3, [r3, #0]
   1358e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
   13592:	6013      	str	r3, [r2, #0]
    actionRamasserPied[2] = RamasserPied(Position(90, 200, isYellow));
   13594:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13598:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1359c:	681b      	ldr	r3, [r3, #0]
   1359e:	f503 7418 	add.w	r4, r3, #608	; 0x260
   135a2:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
   135a6:	f102 0204 	add.w	r2, r2, #4	; 0x4
   135aa:	f507 730c 	add.w	r3, r7, #560	; 0x230
   135ae:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   135b2:	781b      	ldrb	r3, [r3, #0]
   135b4:	4610      	mov	r0, r2
   135b6:	f8df 15ac 	ldr.w	r1, [pc, #1452]	; 13b64 <_ZN9Krabi2015C1Eb+0x2780>
   135ba:	f8df 25b0 	ldr.w	r2, [pc, #1456]	; 13b6c <_ZN9Krabi2015C1Eb+0x2788>
   135be:	f7fb fc19 	bl	edf4 <_ZN8PositionC1Effb>
   135c2:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
   135c6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
   135ca:	f103 0304 	add.w	r3, r3, #4	; 0x4
   135ce:	4610      	mov	r0, r2
   135d0:	e893 0006 	ldmia.w	r3, {r1, r2}
   135d4:	f003 fbac 	bl	16d30 <_ZN12RamasserPiedC1E8Position>
   135d8:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
   135dc:	4620      	mov	r0, r4
   135de:	4619      	mov	r1, r3
   135e0:	f00b fdd6 	bl	1f190 <_ZN12RamasserPiedaSERKS_>
   135e4:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
   135e8:	4618      	mov	r0, r3
   135ea:	f003 fb69 	bl	16cc0 <_ZN12RamasserPiedD1Ev>
    actionEtape[15] = &actionRamasserPied[2];
   135ee:	f507 730c 	add.w	r3, r7, #560	; 0x230
   135f2:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   135f6:	681b      	ldr	r3, [r3, #0]
   135f8:	6a5b      	ldr	r3, [r3, #36]
   135fa:	f103 023c 	add.w	r2, r3, #60	; 0x3c
   135fe:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13602:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13606:	681b      	ldr	r3, [r3, #0]
   13608:	f503 7318 	add.w	r3, r3, #608	; 0x260
   1360c:	6013      	str	r3, [r2, #0]
    actionRamasserPied[3] = RamasserPied(Position(850, 100, isYellow));
   1360e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13612:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13616:	681b      	ldr	r3, [r3, #0]
   13618:	f503 7421 	add.w	r4, r3, #644	; 0x284
   1361c:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
   13620:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13624:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   13628:	781b      	ldrb	r3, [r3, #0]
   1362a:	4610      	mov	r0, r2
   1362c:	f8df 1540 	ldr.w	r1, [pc, #1344]	; 13b70 <_ZN9Krabi2015C1Eb+0x278c>
   13630:	f8df 2540 	ldr.w	r2, [pc, #1344]	; 13b74 <_ZN9Krabi2015C1Eb+0x2790>
   13634:	f7fb fbde 	bl	edf4 <_ZN8PositionC1Effb>
   13638:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
   1363c:	f102 020c 	add.w	r2, r2, #12	; 0xc
   13640:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
   13644:	4610      	mov	r0, r2
   13646:	e893 0006 	ldmia.w	r3, {r1, r2}
   1364a:	f003 fb71 	bl	16d30 <_ZN12RamasserPiedC1E8Position>
   1364e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
   13652:	f103 030c 	add.w	r3, r3, #12	; 0xc
   13656:	4620      	mov	r0, r4
   13658:	4619      	mov	r1, r3
   1365a:	f00b fd99 	bl	1f190 <_ZN12RamasserPiedaSERKS_>
   1365e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
   13662:	f103 030c 	add.w	r3, r3, #12	; 0xc
   13666:	4618      	mov	r0, r3
   13668:	f003 fb2a 	bl	16cc0 <_ZN12RamasserPiedD1Ev>
    actionEtape[16] = &actionRamasserPied[3];
   1366c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13670:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13674:	681b      	ldr	r3, [r3, #0]
   13676:	6a5b      	ldr	r3, [r3, #36]
   13678:	f103 0240 	add.w	r2, r3, #64	; 0x40
   1367c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13680:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13684:	681b      	ldr	r3, [r3, #0]
   13686:	f503 7321 	add.w	r3, r3, #644	; 0x284
   1368a:	6013      	str	r3, [r2, #0]
    actionRamasserPied[4] = RamasserPied(Position(850, 200, isYellow));
   1368c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13690:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13694:	681b      	ldr	r3, [r3, #0]
   13696:	f503 742a 	add.w	r4, r3, #680	; 0x2a8
   1369a:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
   1369e:	f102 020c 	add.w	r2, r2, #12	; 0xc
   136a2:	f507 730c 	add.w	r3, r7, #560	; 0x230
   136a6:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   136aa:	781b      	ldrb	r3, [r3, #0]
   136ac:	4610      	mov	r0, r2
   136ae:	f8df 14c0 	ldr.w	r1, [pc, #1216]	; 13b70 <_ZN9Krabi2015C1Eb+0x278c>
   136b2:	f8df 24b8 	ldr.w	r2, [pc, #1208]	; 13b6c <_ZN9Krabi2015C1Eb+0x2788>
   136b6:	f7fb fb9d 	bl	edf4 <_ZN8PositionC1Effb>
   136ba:	f507 62d5 	add.w	r2, r7, #1704	; 0x6a8
   136be:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
   136c2:	f103 030c 	add.w	r3, r3, #12	; 0xc
   136c6:	4610      	mov	r0, r2
   136c8:	e893 0006 	ldmia.w	r3, {r1, r2}
   136cc:	f003 fb30 	bl	16d30 <_ZN12RamasserPiedC1E8Position>
   136d0:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
   136d4:	4620      	mov	r0, r4
   136d6:	4619      	mov	r1, r3
   136d8:	f00b fd5a 	bl	1f190 <_ZN12RamasserPiedaSERKS_>
   136dc:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
   136e0:	4618      	mov	r0, r3
   136e2:	f003 faed 	bl	16cc0 <_ZN12RamasserPiedD1Ev>
    actionEtape[17] = &actionRamasserPied[4];
   136e6:	f507 730c 	add.w	r3, r7, #560	; 0x230
   136ea:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   136ee:	681b      	ldr	r3, [r3, #0]
   136f0:	6a5b      	ldr	r3, [r3, #36]
   136f2:	f103 0244 	add.w	r2, r3, #68	; 0x44
   136f6:	f507 730c 	add.w	r3, r7, #560	; 0x230
   136fa:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   136fe:	681b      	ldr	r3, [r3, #0]
   13700:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
   13704:	6013      	str	r3, [r2, #0]
    actionRamasserPied[5] = RamasserPied(Position(870, 1355, isYellow));
   13706:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1370a:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1370e:	681b      	ldr	r3, [r3, #0]
   13710:	f503 7433 	add.w	r4, r3, #716	; 0x2cc
   13714:	f507 62df 	add.w	r2, r7, #1784	; 0x6f8
   13718:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1371c:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   13720:	781b      	ldrb	r3, [r3, #0]
   13722:	4610      	mov	r0, r2
   13724:	f8df 1450 	ldr.w	r1, [pc, #1104]	; 13b78 <_ZN9Krabi2015C1Eb+0x2794>
   13728:	f8df 2450 	ldr.w	r2, [pc, #1104]	; 13b7c <_ZN9Krabi2015C1Eb+0x2798>
   1372c:	f7fb fb62 	bl	edf4 <_ZN8PositionC1Effb>
   13730:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
   13734:	f102 0204 	add.w	r2, r2, #4	; 0x4
   13738:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
   1373c:	4610      	mov	r0, r2
   1373e:	e893 0006 	ldmia.w	r3, {r1, r2}
   13742:	f003 faf5 	bl	16d30 <_ZN12RamasserPiedC1E8Position>
   13746:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
   1374a:	f103 0304 	add.w	r3, r3, #4	; 0x4
   1374e:	4620      	mov	r0, r4
   13750:	4619      	mov	r1, r3
   13752:	f00b fd1d 	bl	1f190 <_ZN12RamasserPiedaSERKS_>
   13756:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
   1375a:	f103 0304 	add.w	r3, r3, #4	; 0x4
   1375e:	4618      	mov	r0, r3
   13760:	f003 faae 	bl	16cc0 <_ZN12RamasserPiedD1Ev>
    actionEtape[18] = &actionRamasserPied[5];
   13764:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13768:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1376c:	681b      	ldr	r3, [r3, #0]
   1376e:	6a5b      	ldr	r3, [r3, #36]
   13770:	f103 0248 	add.w	r2, r3, #72	; 0x48
   13774:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13778:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1377c:	681b      	ldr	r3, [r3, #0]
   1377e:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
   13782:	6013      	str	r3, [r2, #0]
    actionRamasserPied[6] = RamasserPied(Position(1100, 1770, isYellow));
   13784:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13788:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1378c:	681b      	ldr	r3, [r3, #0]
   1378e:	f503 743c 	add.w	r4, r3, #752	; 0x2f0
   13792:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
   13796:	f102 0204 	add.w	r2, r2, #4	; 0x4
   1379a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1379e:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   137a2:	781b      	ldrb	r3, [r3, #0]
   137a4:	4610      	mov	r0, r2
   137a6:	49f6      	ldr	r1, [pc, #984]	(13b80 <_ZN9Krabi2015C1Eb+0x279c>)
   137a8:	4af6      	ldr	r2, [pc, #984]	(13b84 <_ZN9Krabi2015C1Eb+0x27a0>)
   137aa:	f7fb fb23 	bl	edf4 <_ZN8PositionC1Effb>
   137ae:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
   137b2:	4618      	mov	r0, r3
   137b4:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
   137b8:	f103 0304 	add.w	r3, r3, #4	; 0x4
   137bc:	e893 0006 	ldmia.w	r3, {r1, r2}
   137c0:	f003 fab6 	bl	16d30 <_ZN12RamasserPiedC1E8Position>
   137c4:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
   137c8:	4620      	mov	r0, r4
   137ca:	4619      	mov	r1, r3
   137cc:	f00b fce0 	bl	1f190 <_ZN12RamasserPiedaSERKS_>
   137d0:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
   137d4:	4618      	mov	r0, r3
   137d6:	f003 fa73 	bl	16cc0 <_ZN12RamasserPiedD1Ev>
    actionEtape[19] = &actionRamasserPied[6];
   137da:	f507 730c 	add.w	r3, r7, #560	; 0x230
   137de:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   137e2:	681b      	ldr	r3, [r3, #0]
   137e4:	6a5b      	ldr	r3, [r3, #36]
   137e6:	f103 024c 	add.w	r2, r3, #76	; 0x4c
   137ea:	f507 730c 	add.w	r3, r7, #560	; 0x230
   137ee:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   137f2:	681b      	ldr	r3, [r3, #0]
   137f4:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
   137f8:	6013      	str	r3, [r2, #0]
    actionRamasserPied[7] = RamasserPied(Position(1300, 1400, isYellow));
   137fa:	f507 730c 	add.w	r3, r7, #560	; 0x230
   137fe:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13802:	681b      	ldr	r3, [r3, #0]
   13804:	f503 7445 	add.w	r4, r3, #788	; 0x314
   13808:	f507 62ea 	add.w	r2, r7, #1872	; 0x750
   1380c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13810:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   13814:	781b      	ldrb	r3, [r3, #0]
   13816:	4610      	mov	r0, r2
   13818:	49db      	ldr	r1, [pc, #876]	(13b88 <_ZN9Krabi2015C1Eb+0x27a4>)
   1381a:	4adc      	ldr	r2, [pc, #880]	(13b8c <_ZN9Krabi2015C1Eb+0x27a8>)
   1381c:	f7fb faea 	bl	edf4 <_ZN8PositionC1Effb>
   13820:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
   13824:	f103 030c 	add.w	r3, r3, #12	; 0xc
   13828:	4618      	mov	r0, r3
   1382a:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
   1382e:	e893 0006 	ldmia.w	r3, {r1, r2}
   13832:	f003 fa7d 	bl	16d30 <_ZN12RamasserPiedC1E8Position>
   13836:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
   1383a:	f103 030c 	add.w	r3, r3, #12	; 0xc
   1383e:	4620      	mov	r0, r4
   13840:	4619      	mov	r1, r3
   13842:	f00b fca5 	bl	1f190 <_ZN12RamasserPiedaSERKS_>
   13846:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
   1384a:	f103 030c 	add.w	r3, r3, #12	; 0xc
   1384e:	4618      	mov	r0, r3
   13850:	f003 fa36 	bl	16cc0 <_ZN12RamasserPiedD1Ev>
    actionEtape[20] = &actionRamasserPied[7];
   13854:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13858:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1385c:	681b      	ldr	r3, [r3, #0]
   1385e:	6a5b      	ldr	r3, [r3, #36]
   13860:	f103 0250 	add.w	r2, r3, #80	; 0x50
   13864:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13868:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1386c:	681b      	ldr	r3, [r3, #0]
   1386e:	f503 7345 	add.w	r3, r3, #788	; 0x314
   13872:	6013      	str	r3, [r2, #0]

    etape0->addVoisin(etape1, false);
   13874:	f8d7 075c 	ldr.w	r0, [r7, #1884]
   13878:	f8d7 1760 	ldr.w	r1, [r7, #1888]
   1387c:	f04f 0200 	mov.w	r2, #0	; 0x0
   13880:	f7fd f992 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape2);
   13884:	f8d7 0760 	ldr.w	r0, [r7, #1888]
   13888:	f8d7 1764 	ldr.w	r1, [r7, #1892]
   1388c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13890:	f7fd f98a 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape9);
   13894:	f8d7 0760 	ldr.w	r0, [r7, #1888]
   13898:	f8d7 1780 	ldr.w	r1, [r7, #1920]
   1389c:	f04f 0201 	mov.w	r2, #1	; 0x1
   138a0:	f7fd f982 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape33);
   138a4:	f8d7 0760 	ldr.w	r0, [r7, #1888]
   138a8:	f8d7 17e0 	ldr.w	r1, [r7, #2016]
   138ac:	f04f 0201 	mov.w	r2, #1	; 0x1
   138b0:	f7fd f97a 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape24);
   138b4:	f8d7 07e0 	ldr.w	r0, [r7, #2016]
   138b8:	f8d7 17bc 	ldr.w	r1, [r7, #1980]
   138bc:	f04f 0201 	mov.w	r2, #1	; 0x1
   138c0:	f7fd f972 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape4);
   138c4:	f8d7 07a4 	ldr.w	r0, [r7, #1956]
   138c8:	f8d7 176c 	ldr.w	r1, [r7, #1900]
   138cc:	f04f 0201 	mov.w	r2, #1	; 0x1
   138d0:	f7fd f96a 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape3);
   138d4:	f8d7 0764 	ldr.w	r0, [r7, #1892]
   138d8:	f8d7 1768 	ldr.w	r1, [r7, #1896]
   138dc:	f04f 0201 	mov.w	r2, #1	; 0x1
   138e0:	f7fd f962 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape4);
   138e4:	f8d7 0768 	ldr.w	r0, [r7, #1896]
   138e8:	f8d7 176c 	ldr.w	r1, [r7, #1900]
   138ec:	f04f 0201 	mov.w	r2, #1	; 0x1
   138f0:	f7fd f95a 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape4);
   138f4:	f8d7 0764 	ldr.w	r0, [r7, #1892]
   138f8:	f8d7 176c 	ldr.w	r1, [r7, #1900]
   138fc:	f04f 0201 	mov.w	r2, #1	; 0x1
   13900:	f7fd f952 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape5);
   13904:	f8d7 076c 	ldr.w	r0, [r7, #1900]
   13908:	f8d7 1770 	ldr.w	r1, [r7, #1904]
   1390c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13910:	f7fd f94a 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape13);
   13914:	f8d7 076c 	ldr.w	r0, [r7, #1900]
   13918:	f8d7 1790 	ldr.w	r1, [r7, #1936]
   1391c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13920:	f7fd f942 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape8);
   13924:	f8d7 076c 	ldr.w	r0, [r7, #1900]
   13928:	f8d7 177c 	ldr.w	r1, [r7, #1916]
   1392c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13930:	f7fd f93a 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape7);
   13934:	f8d7 0774 	ldr.w	r0, [r7, #1908]
   13938:	f8d7 1778 	ldr.w	r1, [r7, #1912]
   1393c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13940:	f7fd f932 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape18);
   13944:	f8d7 0760 	ldr.w	r0, [r7, #1888]
   13948:	f8d7 17a4 	ldr.w	r1, [r7, #1956]
   1394c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13950:	f7fd f92a 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape2);
   13954:	f8d7 07a4 	ldr.w	r0, [r7, #1956]
   13958:	f8d7 1764 	ldr.w	r1, [r7, #1892]
   1395c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13960:	f7fd f922 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape13->addVoisin(etape14);
   13964:	f8d7 0790 	ldr.w	r0, [r7, #1936]
   13968:	f8d7 1794 	ldr.w	r1, [r7, #1940]
   1396c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13970:	f7fd f91a 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape14->addVoisin(etape8);
   13974:	f8d7 0794 	ldr.w	r0, [r7, #1940]
   13978:	f8d7 177c 	ldr.w	r1, [r7, #1916]
   1397c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13980:	f7fd f912 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape20);
   13984:	f8d7 07a4 	ldr.w	r0, [r7, #1956]
   13988:	f8d7 17ac 	ldr.w	r1, [r7, #1964]
   1398c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13990:	f7fd f90a 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape19);
   13994:	f8d7 07a4 	ldr.w	r0, [r7, #1956]
   13998:	f8d7 17a8 	ldr.w	r1, [r7, #1960]
   1399c:	f04f 0201 	mov.w	r2, #1	; 0x1
   139a0:	f7fd f902 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape19->addVoisin(etape27);
   139a4:	f8d7 07a8 	ldr.w	r0, [r7, #1960]
   139a8:	f8d7 17c8 	ldr.w	r1, [r7, #1992]
   139ac:	f04f 0201 	mov.w	r2, #1	; 0x1
   139b0:	f7fd f8fa 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape27->addVoisin(etape21);
   139b4:	f8d7 07c8 	ldr.w	r0, [r7, #1992]
   139b8:	f8d7 17b0 	ldr.w	r1, [r7, #1968]
   139bc:	f04f 0201 	mov.w	r2, #1	; 0x1
   139c0:	f7fd f8f2 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape27);
   139c4:	f8d7 0768 	ldr.w	r0, [r7, #1896]
   139c8:	f8d7 17c8 	ldr.w	r1, [r7, #1992]
   139cc:	f04f 0201 	mov.w	r2, #1	; 0x1
   139d0:	f7fd f8ea 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape33);
   139d4:	f8d7 0780 	ldr.w	r0, [r7, #1920]
   139d8:	f8d7 17e0 	ldr.w	r1, [r7, #2016]
   139dc:	f04f 0201 	mov.w	r2, #1	; 0x1
   139e0:	f7fd f8e2 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape20);
   139e4:	f8d7 07e0 	ldr.w	r0, [r7, #2016]
   139e8:	f8d7 17ac 	ldr.w	r1, [r7, #1964]
   139ec:	f04f 0201 	mov.w	r2, #1	; 0x1
   139f0:	f7fd f8da 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape18);
   139f4:	f8d7 0780 	ldr.w	r0, [r7, #1920]
   139f8:	f8d7 17a4 	ldr.w	r1, [r7, #1956]
   139fc:	f04f 0201 	mov.w	r2, #1	; 0x1
   13a00:	f7fd f8d2 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape21->addVoisin(etape22);
   13a04:	f8d7 07b0 	ldr.w	r0, [r7, #1968]
   13a08:	f8d7 17b4 	ldr.w	r1, [r7, #1972]
   13a0c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13a10:	f7fd f8ca 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape22);
   13a14:	f8d7 0784 	ldr.w	r0, [r7, #1924]
   13a18:	f8d7 17b4 	ldr.w	r1, [r7, #1972]
   13a1c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13a20:	f7fd f8c2 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape20->addVoisin(etape10);
   13a24:	f8d7 07ac 	ldr.w	r0, [r7, #1964]
   13a28:	f8d7 1784 	ldr.w	r1, [r7, #1924]
   13a2c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13a30:	f7fd f8ba 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape35);
   13a34:	f8d7 0784 	ldr.w	r0, [r7, #1924]
   13a38:	f8d7 17e8 	ldr.w	r1, [r7, #2024]
   13a3c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13a40:	f7fd f8b2 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape11);
   13a44:	f8d7 07e8 	ldr.w	r0, [r7, #2024]
   13a48:	f8d7 1788 	ldr.w	r1, [r7, #1928]
   13a4c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13a50:	f7fd f8aa 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape31);
   13a54:	f8d7 07cc 	ldr.w	r0, [r7, #1996]
   13a58:	f8d7 17d8 	ldr.w	r1, [r7, #2008]
   13a5c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13a60:	f7fd f8a2 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape6);
   13a64:	f8d7 0784 	ldr.w	r0, [r7, #1924]
   13a68:	f8d7 1774 	ldr.w	r1, [r7, #1908]
   13a6c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13a70:	f7fd f89a 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape6);
   13a74:	f8d7 07bc 	ldr.w	r0, [r7, #1980]
   13a78:	f8d7 1774 	ldr.w	r1, [r7, #1908]
   13a7c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13a80:	f7fd f892 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape7);
   13a84:	f8d7 07bc 	ldr.w	r0, [r7, #1980]
   13a88:	f8d7 1778 	ldr.w	r1, [r7, #1912]
   13a8c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13a90:	f7fd f88a 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape12);
   13a94:	f8d7 07bc 	ldr.w	r0, [r7, #1980]
   13a98:	f8d7 178c 	ldr.w	r1, [r7, #1932]
   13a9c:	f04f 0201 	mov.w	r2, #1	; 0x1
   13aa0:	f7fd f882 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape25);
   13aa4:	f8d7 07bc 	ldr.w	r0, [r7, #1980]
   13aa8:	f8d7 17c0 	ldr.w	r1, [r7, #1984]
   13aac:	f04f 0201 	mov.w	r2, #1	; 0x1
   13ab0:	f7fd f87a 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape12);
   13ab4:	f8d7 0774 	ldr.w	r0, [r7, #1908]
   13ab8:	f8d7 178c 	ldr.w	r1, [r7, #1932]
   13abc:	f04f 0201 	mov.w	r2, #1	; 0x1
   13ac0:	f7fd f872 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape12->addVoisin(etape25);
   13ac4:	f8d7 078c 	ldr.w	r0, [r7, #1932]
   13ac8:	f8d7 17c0 	ldr.w	r1, [r7, #1984]
   13acc:	f04f 0201 	mov.w	r2, #1	; 0x1
   13ad0:	f7fd f86a 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape11);
   13ad4:	f8d7 07bc 	ldr.w	r0, [r7, #1980]
   13ad8:	f8d7 1788 	ldr.w	r1, [r7, #1928]
   13adc:	f04f 0201 	mov.w	r2, #1	; 0x1
   13ae0:	f7fd f862 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape20);
   13ae4:	f8d7 0788 	ldr.w	r0, [r7, #1928]
   13ae8:	f8d7 17ac 	ldr.w	r1, [r7, #1964]
   13aec:	f04f 0201 	mov.w	r2, #1	; 0x1
   13af0:	f7fd f85a 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape11);
   13af4:	f8d7 0784 	ldr.w	r0, [r7, #1924]
   13af8:	f8d7 1788 	ldr.w	r1, [r7, #1928]
   13afc:	f04f 0201 	mov.w	r2, #1	; 0x1
   13b00:	f7fd f852 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape11);
   13b04:	f8d7 0780 	ldr.w	r0, [r7, #1920]
   13b08:	e042      	b.n	13b90 <_ZN9Krabi2015C1Eb+0x27ac>
   13b0a:	46c0      	nop			(mov r8, r8)
   13b0c:	41f00000 	.word	0x41f00000
   13b10:	44510000 	.word	0x44510000
   13b14:	44de8000 	.word	0x44de8000
   13b18:	447a0000 	.word	0x447a0000
   13b1c:	436c0000 	.word	0x436c0000
   13b20:	43c80000 	.word	0x43c80000
   13b24:	451c4000 	.word	0x451c4000
   13b28:	450fc000 	.word	0x450fc000
   13b2c:	437a0000 	.word	0x437a0000
   13b30:	44dac000 	.word	0x44dac000
   13b34:	44638000 	.word	0x44638000
   13b38:	444f8000 	.word	0x444f8000
   13b3c:	44bb8000 	.word	0x44bb8000
   13b40:	44ce4000 	.word	0x44ce4000
   13b44:	4502a000 	.word	0x4502a000
   13b48:	452be000 	.word	0x452be000
   13b4c:	443b8000 	.word	0x443b8000
   13b50:	44b54000 	.word	0x44b54000
   13b54:	442f0000 	.word	0x442f0000
   13b58:	45296000 	.word	0x45296000
   13b5c:	45246000 	.word	0x45246000
   13b60:	43e60000 	.word	0x43e60000
   13b64:	42b40000 	.word	0x42b40000
   13b68:	44e74000 	.word	0x44e74000
   13b6c:	43480000 	.word	0x43480000
   13b70:	44548000 	.word	0x44548000
   13b74:	42c80000 	.word	0x42c80000
   13b78:	44598000 	.word	0x44598000
   13b7c:	44a96000 	.word	0x44a96000
   13b80:	44898000 	.word	0x44898000
   13b84:	44dd4000 	.word	0x44dd4000
   13b88:	44a28000 	.word	0x44a28000
   13b8c:	44af0000 	.word	0x44af0000
   13b90:	f8d7 1788 	ldr.w	r1, [r7, #1928]
   13b94:	f04f 0201 	mov.w	r2, #1	; 0x1
   13b98:	f7fd f806 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
 //   etape11->addVoisin(etape26);
    etape9->addVoisin(etape32);
   13b9c:	f8d7 0780 	ldr.w	r0, [r7, #1920]
   13ba0:	f8d7 17dc 	ldr.w	r1, [r7, #2012]
   13ba4:	f04f 0201 	mov.w	r2, #1	; 0x1
   13ba8:	f7fc fffe 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape32->addVoisin(etape15);
   13bac:	f8d7 07dc 	ldr.w	r0, [r7, #2012]
   13bb0:	f8d7 1798 	ldr.w	r1, [r7, #1944]
   13bb4:	f04f 0201 	mov.w	r2, #1	; 0x1
   13bb8:	f7fc fff6 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape17);
   13bbc:	f8d7 0780 	ldr.w	r0, [r7, #1920]
   13bc0:	f8d7 17a0 	ldr.w	r1, [r7, #1952]
   13bc4:	f04f 0201 	mov.w	r2, #1	; 0x1
   13bc8:	f7fc ffee 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape17);
   13bcc:	f8d7 079c 	ldr.w	r0, [r7, #1948]
   13bd0:	f8d7 17a0 	ldr.w	r1, [r7, #1952]
   13bd4:	f04f 0201 	mov.w	r2, #1	; 0x1
   13bd8:	f7fc ffe6 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape15);
   13bdc:	f8d7 079c 	ldr.w	r0, [r7, #1948]
   13be0:	f8d7 1798 	ldr.w	r1, [r7, #1944]
   13be4:	f04f 0201 	mov.w	r2, #1	; 0x1
   13be8:	f7fc ffde 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape15->addVoisin(etape17);
   13bec:	f8d7 0798 	ldr.w	r0, [r7, #1944]
   13bf0:	f8d7 17a0 	ldr.w	r1, [r7, #1952]
   13bf4:	f04f 0201 	mov.w	r2, #1	; 0x1
   13bf8:	f7fc ffd6 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape9);
   13bfc:	f8d7 07b8 	ldr.w	r0, [r7, #1976]
   13c00:	f8d7 1780 	ldr.w	r1, [r7, #1920]
   13c04:	f04f 0201 	mov.w	r2, #1	; 0x1
   13c08:	f7fc ffce 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape20);
   13c0c:	f8d7 07b8 	ldr.w	r0, [r7, #1976]
   13c10:	f8d7 17ac 	ldr.w	r1, [r7, #1964]
   13c14:	f04f 0201 	mov.w	r2, #1	; 0x1
   13c18:	f7fc ffc6 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape11);
   13c1c:	f8d7 07b8 	ldr.w	r0, [r7, #1976]
   13c20:	f8d7 1788 	ldr.w	r1, [r7, #1928]
   13c24:	f04f 0201 	mov.w	r2, #1	; 0x1
   13c28:	f7fc ffbe 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape28);
   13c2c:	f8d7 07a4 	ldr.w	r0, [r7, #1956]
   13c30:	f8d7 17cc 	ldr.w	r1, [r7, #1996]
   13c34:	f04f 0201 	mov.w	r2, #1	; 0x1
   13c38:	f7fc ffb6 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape29);
   13c3c:	f8d7 07a4 	ldr.w	r0, [r7, #1956]
   13c40:	f8d7 17d0 	ldr.w	r1, [r7, #2000]
   13c44:	f04f 0201 	mov.w	r2, #1	; 0x1
   13c48:	f7fc ffae 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape29->addVoisin(etape30);
   13c4c:	f8d7 07d0 	ldr.w	r0, [r7, #2000]
   13c50:	f8d7 17d4 	ldr.w	r1, [r7, #2004]
   13c54:	f04f 0201 	mov.w	r2, #1	; 0x1
   13c58:	f7fc ffa6 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape29->addVoisin(etape31);
   13c5c:	f8d7 07d0 	ldr.w	r0, [r7, #2000]
   13c60:	f8d7 17d8 	ldr.w	r1, [r7, #2008]
   13c64:	f04f 0201 	mov.w	r2, #1	; 0x1
   13c68:	f7fc ff9e 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape31);
   13c6c:	f8d7 07d4 	ldr.w	r0, [r7, #2004]
   13c70:	f8d7 17d8 	ldr.w	r1, [r7, #2008]
   13c74:	f04f 0201 	mov.w	r2, #1	; 0x1
   13c78:	f7fc ff96 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape18);
   13c7c:	f8d7 07d4 	ldr.w	r0, [r7, #2004]
   13c80:	f8d7 17a4 	ldr.w	r1, [r7, #1956]
   13c84:	f04f 0201 	mov.w	r2, #1	; 0x1
   13c88:	f7fc ff8e 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape4);
   13c8c:	f8d7 07d4 	ldr.w	r0, [r7, #2004]
   13c90:	f8d7 176c 	ldr.w	r1, [r7, #1900]
   13c94:	f04f 0201 	mov.w	r2, #1	; 0x1
   13c98:	f7fc ff86 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape29);
   13c9c:	f8d7 07cc 	ldr.w	r0, [r7, #1996]
   13ca0:	f8d7 17d0 	ldr.w	r1, [r7, #2000]
   13ca4:	f04f 0201 	mov.w	r2, #1	; 0x1
   13ca8:	f7fc ff7e 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape30);
   13cac:	f8d7 07cc 	ldr.w	r0, [r7, #1996]
   13cb0:	f8d7 17d4 	ldr.w	r1, [r7, #2004]
   13cb4:	f04f 0201 	mov.w	r2, #1	; 0x1
   13cb8:	f7fc ff76 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape31);
   13cbc:	f8d7 07cc 	ldr.w	r0, [r7, #1996]
   13cc0:	f8d7 17d8 	ldr.w	r1, [r7, #2008]
   13cc4:	f04f 0201 	mov.w	r2, #1	; 0x1
   13cc8:	f7fc ff6e 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape34);
   13ccc:	f8d7 07e0 	ldr.w	r0, [r7, #2016]
   13cd0:	f8d7 17e4 	ldr.w	r1, [r7, #2020]
   13cd4:	f04f 0201 	mov.w	r2, #1	; 0x1
   13cd8:	f7fc ff66 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape34->addVoisin(etape35);
   13cdc:	f8d7 07e4 	ldr.w	r0, [r7, #2020]
   13ce0:	f8d7 17e8 	ldr.w	r1, [r7, #2024]
   13ce4:	f04f 0201 	mov.w	r2, #1	; 0x1
   13ce8:	f7fc ff5e 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape24);
   13cec:	f8d7 07e8 	ldr.w	r0, [r7, #2024]
   13cf0:	f8d7 17bc 	ldr.w	r1, [r7, #1980]
   13cf4:	f04f 0201 	mov.w	r2, #1	; 0x1
   13cf8:	f7fc ff56 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape37);
   13cfc:	f8d7 07e8 	ldr.w	r0, [r7, #2024]
   13d00:	f8d7 17f0 	ldr.w	r1, [r7, #2032]
   13d04:	f04f 0201 	mov.w	r2, #1	; 0x1
   13d08:	f7fc ff4e 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape37->addVoisin(etape36);
   13d0c:	f8d7 07f0 	ldr.w	r0, [r7, #2032]
   13d10:	f8d7 17ec 	ldr.w	r1, [r7, #2028]
   13d14:	f04f 0201 	mov.w	r2, #1	; 0x1
   13d18:	f7fc ff46 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape36->addVoisin(etape6);
   13d1c:	f8d7 07ec 	ldr.w	r0, [r7, #2028]
   13d20:	f8d7 1774 	ldr.w	r1, [r7, #1908]
   13d24:	f04f 0201 	mov.w	r2, #1	; 0x1
   13d28:	f7fc ff3e 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape36->addVoisin(etape7);
   13d2c:	f8d7 07ec 	ldr.w	r0, [r7, #2028]
   13d30:	f8d7 1778 	ldr.w	r1, [r7, #1912]
   13d34:	f04f 0201 	mov.w	r2, #1	; 0x1
   13d38:	f7fc ff36 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape33);
   13d3c:	f8d7 07b8 	ldr.w	r0, [r7, #1976]
   13d40:	f8d7 17e0 	ldr.w	r1, [r7, #2016]
   13d44:	f04f 0201 	mov.w	r2, #1	; 0x1
   13d48:	f7fc ff2e 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape34);
   13d4c:	f8d7 07b8 	ldr.w	r0, [r7, #1976]
   13d50:	f8d7 17e4 	ldr.w	r1, [r7, #2020]
   13d54:	f04f 0201 	mov.w	r2, #1	; 0x1
   13d58:	f7fc ff26 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape35);
   13d5c:	f8d7 07b8 	ldr.w	r0, [r7, #1976]
   13d60:	f8d7 17e8 	ldr.w	r1, [r7, #2024]
   13d64:	f04f 0201 	mov.w	r2, #1	; 0x1
   13d68:	f7fc ff1e 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape33);
   13d6c:	f8d7 0788 	ldr.w	r0, [r7, #1928]
   13d70:	f8d7 17e0 	ldr.w	r1, [r7, #2016]
   13d74:	f04f 0201 	mov.w	r2, #1	; 0x1
   13d78:	f7fc ff16 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape34);
   13d7c:	f8d7 0788 	ldr.w	r0, [r7, #1928]
   13d80:	f8d7 17e4 	ldr.w	r1, [r7, #2020]
   13d84:	f04f 0201 	mov.w	r2, #1	; 0x1
   13d88:	f7fc ff0e 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape38);
   13d8c:	f8d7 07b8 	ldr.w	r0, [r7, #1976]
   13d90:	f8d7 17f4 	ldr.w	r1, [r7, #2036]
   13d94:	f04f 0201 	mov.w	r2, #1	; 0x1
   13d98:	f7fc ff06 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape39);
   13d9c:	f8d7 07b8 	ldr.w	r0, [r7, #1976]
   13da0:	f8d7 17f8 	ldr.w	r1, [r7, #2040]
   13da4:	f04f 0201 	mov.w	r2, #1	; 0x1
   13da8:	f7fc fefe 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape38);
   13dac:	f8d7 0780 	ldr.w	r0, [r7, #1920]
   13db0:	f8d7 17f4 	ldr.w	r1, [r7, #2036]
   13db4:	f04f 0201 	mov.w	r2, #1	; 0x1
   13db8:	f7fc fef6 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape38->addVoisin(etape39);
   13dbc:	f8d7 07f4 	ldr.w	r0, [r7, #2036]
   13dc0:	f8d7 17f8 	ldr.w	r1, [r7, #2040]
   13dc4:	f04f 0201 	mov.w	r2, #1	; 0x1
   13dc8:	f7fc feee 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape39->addVoisin(etape11);
   13dcc:	f8d7 07f8 	ldr.w	r0, [r7, #2040]
   13dd0:	f8d7 1788 	ldr.w	r1, [r7, #1928]
   13dd4:	f04f 0201 	mov.w	r2, #1	; 0x1
   13dd8:	f7fc fee6 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape5->addVoisin(etape29);
   13ddc:	f8d7 0770 	ldr.w	r0, [r7, #1904]
   13de0:	f8d7 17d0 	ldr.w	r1, [r7, #2000]
   13de4:	f04f 0201 	mov.w	r2, #1	; 0x1
   13de8:	f7fc fede 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>

    //Certaines actions d'étapes ne finnissent pas là où elles ont commencé :
    etape2->setNumeroEtapeFinAction(3);//Clapet notre côté vers milieu
   13dec:	f8d7 0764 	ldr.w	r0, [r7, #1892]
   13df0:	f04f 0103 	mov.w	r1, #3	; 0x3
   13df4:	f7fc febe 	bl	10b74 <_ZN5Etape23setNumeroEtapeFinActionEi>
    etape4->setNumeroEtapeFinAction(5);//Clapet notre côté vers notre bord
   13df8:	f8d7 076c 	ldr.w	r0, [r7, #1900]
   13dfc:	f04f 0105 	mov.w	r1, #5	; 0x5
   13e00:	f7fc feb8 	bl	10b74 <_ZN5Etape23setNumeroEtapeFinActionEi>
    etape6->setNumeroEtapeFinAction(7);//Clapet côté adverse
   13e04:	f8d7 0774 	ldr.w	r0, [r7, #1908]
   13e08:	f04f 0107 	mov.w	r1, #7	; 0x7
   13e0c:	f7fc feb2 	bl	10b74 <_ZN5Etape23setNumeroEtapeFinActionEi>
    // Lancer Dijkstra
    startDijkstra();
   13e10:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13e14:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13e18:	681b      	ldr	r3, [r3, #0]
   13e1a:	4618      	mov	r0, r3
   13e1c:	f004 fc8a 	bl	18734 <_ZN11StrategieV313startDijkstraEv>
}
   13e20:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13e24:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13e28:	681b      	ldr	r3, [r3, #0]
   13e2a:	4618      	mov	r0, r3
   13e2c:	f107 0704 	add.w	r7, r7, #4	; 0x4
   13e30:	f507 6700 	add.w	r7, r7, #2048	; 0x800
   13e34:	46bd      	mov	sp, r7
   13e36:	bd90      	pop	{r4, r7, pc}

00013e38 <_ZN9Krabi2015C2Eb>:
#include "krabi2015.h"

Krabi2015::Krabi2015(bool isYellow) : StrategieV3(isYellow)
   13e38:	b590      	push	{r4, r7, lr}
   13e3a:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
   13e3e:	b085      	sub	sp, #20
   13e40:	af04      	add	r7, sp, #16
   13e42:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13e46:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13e4a:	6018      	str	r0, [r3, #0]
   13e4c:	460a      	mov	r2, r1
   13e4e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13e52:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   13e56:	701a      	strb	r2, [r3, #0]
   13e58:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13e5c:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13e60:	681a      	ldr	r2, [r3, #0]
   13e62:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13e66:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   13e6a:	781b      	ldrb	r3, [r3, #0]
   13e6c:	4610      	mov	r0, r2
   13e6e:	4619      	mov	r1, r3
   13e70:	f005 f820 	bl	18eb4 <_ZN11StrategieV3C2Eb>
   13e74:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13e78:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13e7c:	681a      	ldr	r2, [r3, #0]
   13e7e:	f8df 3c4c 	ldr.w	r3, [pc, #3148]	; 14acc <_ZN9Krabi2015C2Eb+0xc94>
   13e82:	6013      	str	r3, [r2, #0]
   13e84:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13e88:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13e8c:	681b      	ldr	r3, [r3, #0]
   13e8e:	f103 0348 	add.w	r3, r3, #72	; 0x48
   13e92:	607b      	str	r3, [r7, #4]
   13e94:	f04f 0302 	mov.w	r3, #2	; 0x2
   13e98:	60bb      	str	r3, [r7, #8]
   13e9a:	e00a      	b.n	13eb2 <_ZN9Krabi2015C2Eb+0x7a>
   13e9c:	6878      	ldr	r0, [r7, #4]
   13e9e:	f7fb ff2b 	bl	fcf8 <_ZN4ClapC1Ev>
   13ea2:	687b      	ldr	r3, [r7, #4]
   13ea4:	f103 0328 	add.w	r3, r3, #40	; 0x28
   13ea8:	607b      	str	r3, [r7, #4]
   13eaa:	68bb      	ldr	r3, [r7, #8]
   13eac:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   13eb0:	60bb      	str	r3, [r7, #8]
   13eb2:	68bb      	ldr	r3, [r7, #8]
   13eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   13eb8:	d1f0      	bne.n	13e9c <_ZN9Krabi2015C2Eb+0x64>
   13eba:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13ebe:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13ec2:	681b      	ldr	r3, [r3, #0]
   13ec4:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   13ec8:	60fb      	str	r3, [r7, #12]
   13eca:	f04f 0304 	mov.w	r3, #4	; 0x4
   13ece:	613b      	str	r3, [r7, #16]
   13ed0:	e00a      	b.n	13ee8 <_ZN9Krabi2015C2Eb+0xb0>
   13ed2:	68f8      	ldr	r0, [r7, #12]
   13ed4:	f7fd f996 	bl	11204 <_ZN7GobeletC1Ev>
   13ed8:	68fb      	ldr	r3, [r7, #12]
   13eda:	f103 0320 	add.w	r3, r3, #32	; 0x20
   13ede:	60fb      	str	r3, [r7, #12]
   13ee0:	693b      	ldr	r3, [r7, #16]
   13ee2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   13ee6:	613b      	str	r3, [r7, #16]
   13ee8:	693b      	ldr	r3, [r7, #16]
   13eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   13eee:	d1f0      	bne.n	13ed2 <_ZN9Krabi2015C2Eb+0x9a>
   13ef0:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13ef4:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13ef8:	681b      	ldr	r3, [r3, #0]
   13efa:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   13efe:	617b      	str	r3, [r7, #20]
   13f00:	f04f 0301 	mov.w	r3, #1	; 0x1
   13f04:	61bb      	str	r3, [r7, #24]
   13f06:	e00a      	b.n	13f1e <_ZN9Krabi2015C2Eb+0xe6>
   13f08:	6978      	ldr	r0, [r7, #20]
   13f0a:	f005 f963 	bl	191d4 <_ZN5TapisC1Ev>
   13f0e:	697b      	ldr	r3, [r7, #20]
   13f10:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   13f14:	617b      	str	r3, [r7, #20]
   13f16:	69bb      	ldr	r3, [r7, #24]
   13f18:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   13f1c:	61bb      	str	r3, [r7, #24]
   13f1e:	69bb      	ldr	r3, [r7, #24]
   13f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   13f24:	d1f0      	bne.n	13f08 <_ZN9Krabi2015C2Eb+0xd0>
   13f26:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13f2a:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13f2e:	681b      	ldr	r3, [r3, #0]
   13f30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
   13f34:	61fb      	str	r3, [r7, #28]
   13f36:	f04f 0302 	mov.w	r3, #2	; 0x2
   13f3a:	623b      	str	r3, [r7, #32]
   13f3c:	e00a      	b.n	13f54 <_ZN9Krabi2015C2Eb+0x11c>
   13f3e:	69f8      	ldr	r0, [r7, #28]
   13f40:	f7fc f878 	bl	10034 <_ZN14DeposerGobeletC1Ev>
   13f44:	69fb      	ldr	r3, [r7, #28]
   13f46:	f103 0320 	add.w	r3, r3, #32	; 0x20
   13f4a:	61fb      	str	r3, [r7, #28]
   13f4c:	6a3b      	ldr	r3, [r7, #32]
   13f4e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   13f52:	623b      	str	r3, [r7, #32]
   13f54:	6a3b      	ldr	r3, [r7, #32]
   13f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   13f5a:	d1f0      	bne.n	13f3e <_ZN9Krabi2015C2Eb+0x106>
   13f5c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13f60:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13f64:	681b      	ldr	r3, [r3, #0]
   13f66:	f503 7306 	add.w	r3, r3, #536	; 0x218
   13f6a:	627b      	str	r3, [r7, #36]
   13f6c:	f04f 0307 	mov.w	r3, #7	; 0x7
   13f70:	62bb      	str	r3, [r7, #40]
   13f72:	e00a      	b.n	13f8a <_ZN9Krabi2015C2Eb+0x152>
   13f74:	6a78      	ldr	r0, [r7, #36]
   13f76:	f002 ff1f 	bl	16db8 <_ZN12RamasserPiedC1Ev>
   13f7a:	6a7b      	ldr	r3, [r7, #36]
   13f7c:	f103 0324 	add.w	r3, r3, #36	; 0x24
   13f80:	627b      	str	r3, [r7, #36]
   13f82:	6abb      	ldr	r3, [r7, #40]
   13f84:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   13f88:	62bb      	str	r3, [r7, #40]
   13f8a:	6abb      	ldr	r3, [r7, #40]
   13f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   13f90:	d1f0      	bne.n	13f74 <_ZN9Krabi2015C2Eb+0x13c>
{
    // Initialisation des stocks

    //Initialisation des tableaux d'étapes
    this->nombreEtapes = NOMBRE_ETAPES;
   13f92:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13f96:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13f9a:	681a      	ldr	r2, [r3, #0]
   13f9c:	f04f 0328 	mov.w	r3, #40	; 0x28
   13fa0:	61d3      	str	r3, [r2, #28]
    this->numeroEtapeGarage = ETAPE_GARAGE;
   13fa2:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13fa6:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13faa:	681a      	ldr	r2, [r3, #0]
   13fac:	f04f 0301 	mov.w	r3, #1	; 0x1
   13fb0:	6213      	str	r3, [r2, #32]
    tableauEtapesTotal = new Etape*[NOMBRE_ETAPES];
   13fb2:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   13fb6:	f7fa fe4f 	bl	ec58 <_Znaj>
   13fba:	4603      	mov	r3, r0
   13fbc:	461a      	mov	r2, r3
   13fbe:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13fc2:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13fc6:	681b      	ldr	r3, [r3, #0]
   13fc8:	635a      	str	r2, [r3, #52]
    actionEtape = new MediumLevelAction*[NOMBRE_ETAPES];
   13fca:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   13fce:	f7fa fe43 	bl	ec58 <_Znaj>
   13fd2:	4603      	mov	r3, r0
   13fd4:	461a      	mov	r2, r3
   13fd6:	f507 730c 	add.w	r3, r7, #560	; 0x230
   13fda:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   13fde:	681b      	ldr	r3, [r3, #0]
   13fe0:	625a      	str	r2, [r3, #36]
    actionGoto = new ActionGoTo[NOMBRE_ETAPES];
   13fe2:	f44f 60f1 	mov.w	r0, #1928	; 0x788
   13fe6:	f7fa fe37 	bl	ec58 <_Znaj>
   13fea:	4603      	mov	r3, r0
   13fec:	62fb      	str	r3, [r7, #44]
   13fee:	6afb      	ldr	r3, [r7, #44]
   13ff0:	2b00      	cmp	r3, #0
   13ff2:	d03c      	beq.n	1406e <_ZN9Krabi2015C2Eb+0x236>
   13ff4:	6afb      	ldr	r3, [r7, #44]
   13ff6:	f103 0308 	add.w	r3, r3, #8	; 0x8
   13ffa:	637b      	str	r3, [r7, #52]
   13ffc:	6b7b      	ldr	r3, [r7, #52]
   13ffe:	f1a3 0304 	sub.w	r3, r3, #4	; 0x4
   14002:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   14006:	f04f 0330 	mov.w	r3, #48	; 0x30
   1400a:	6013      	str	r3, [r2, #0]
   1400c:	6b7b      	ldr	r3, [r7, #52]
   1400e:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   14012:	f04f 0328 	mov.w	r3, #40	; 0x28
   14016:	6013      	str	r3, [r2, #0]
   14018:	6b7b      	ldr	r3, [r7, #52]
   1401a:	63bb      	str	r3, [r7, #56]
   1401c:	f04f 0327 	mov.w	r3, #39	; 0x27
   14020:	63fb      	str	r3, [r7, #60]
   14022:	e01d      	b.n	14060 <_ZN9Krabi2015C2Eb+0x228>
   14024:	f507 730a 	add.w	r3, r7, #552	; 0x228
   14028:	4618      	mov	r0, r3
   1402a:	f8df 1aa4 	ldr.w	r1, [pc, #2724]	; 14ad0 <_ZN9Krabi2015C2Eb+0xc98>
   1402e:	f8df 2aa0 	ldr.w	r2, [pc, #2720]	; 14ad0 <_ZN9Krabi2015C2Eb+0xc98>
   14032:	f04f 0301 	mov.w	r3, #1	; 0x1
   14036:	f7fa fedd 	bl	edf4 <_ZN8PositionC1Effb>
   1403a:	f507 720a 	add.w	r2, r7, #552	; 0x228
   1403e:	f8df 3a94 	ldr.w	r3, [pc, #2708]	; 14ad4 <_ZN9Krabi2015C2Eb+0xc9c>
   14042:	9300      	str	r3, [sp, #0]
   14044:	6bb8      	ldr	r0, [r7, #56]
   14046:	ca06      	ldmia	r2!, {r1, r2}
   14048:	f04f 0300 	mov.w	r3, #0	; 0x0
   1404c:	f7fb fbf8 	bl	f840 <_ZN10ActionGoToC1E8Positionbf>
   14050:	6bbb      	ldr	r3, [r7, #56]
   14052:	f103 0330 	add.w	r3, r3, #48	; 0x30
   14056:	63bb      	str	r3, [r7, #56]
   14058:	6bfb      	ldr	r3, [r7, #60]
   1405a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   1405e:	63fb      	str	r3, [r7, #60]
   14060:	6bfb      	ldr	r3, [r7, #60]
   14062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   14066:	d1dd      	bne.n	14024 <_ZN9Krabi2015C2Eb+0x1ec>
   14068:	6b7b      	ldr	r3, [r7, #52]
   1406a:	633b      	str	r3, [r7, #48]
   1406c:	e001      	b.n	14072 <_ZN9Krabi2015C2Eb+0x23a>
   1406e:	6afb      	ldr	r3, [r7, #44]
   14070:	633b      	str	r3, [r7, #48]
   14072:	6b3a      	ldr	r2, [r7, #48]
   14074:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14078:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1407c:	681b      	ldr	r3, [r3, #0]
   1407e:	629a      	str	r2, [r3, #40]
    // TODO: A supprimer pour une variable statique dans Etape
    int numeroEtape = 0;
   14080:	f04f 0300 	mov.w	r3, #0	; 0x0
   14084:	f8c7 3758 	str.w	r3, [r7, #1880]

    // Création des étapes
    // Arguments : Position, numéro étape, tableau des étapes, type d'étape, état de l'étape, nombre étapes liées
    Etape* etape0 = new Etape(Position(250, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPART, -1, 0); //départ au fond de la zone de départ
   14088:	f507 720c 	add.w	r2, r7, #560	; 0x230
   1408c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14090:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14094:	781b      	ldrb	r3, [r3, #0]
   14096:	4610      	mov	r0, r2
   14098:	f8df 1a3c 	ldr.w	r1, [pc, #2620]	; 14ad8 <_ZN9Krabi2015C2Eb+0xca0>
   1409c:	f8df 2a3c 	ldr.w	r2, [pc, #2620]	; 14adc <_ZN9Krabi2015C2Eb+0xca4>
   140a0:	f7fa fea8 	bl	edf4 <_ZN8PositionC1Effb>
   140a4:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   140a8:	643b      	str	r3, [r7, #64]
   140aa:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   140ae:	f103 0301 	add.w	r3, r3, #1	; 0x1
   140b2:	f8c7 3758 	str.w	r3, [r7, #1880]
   140b6:	f04f 0038 	mov.w	r0, #56	; 0x38
   140ba:	f7fa fd35 	bl	eb28 <_Znwj>
   140be:	4603      	mov	r3, r0
   140c0:	647b      	str	r3, [r7, #68]
   140c2:	6c7b      	ldr	r3, [r7, #68]
   140c4:	2b00      	cmp	r3, #0
   140c6:	d019      	beq.n	140fc <_ZN9Krabi2015C2Eb+0x2c4>
   140c8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   140cc:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   140d0:	681b      	ldr	r3, [r3, #0]
   140d2:	6b5b      	ldr	r3, [r3, #52]
   140d4:	f507 720c 	add.w	r2, r7, #560	; 0x230
   140d8:	9300      	str	r3, [sp, #0]
   140da:	f04f 0305 	mov.w	r3, #5	; 0x5
   140de:	9301      	str	r3, [sp, #4]
   140e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   140e4:	9302      	str	r3, [sp, #8]
   140e6:	f04f 0300 	mov.w	r3, #0	; 0x0
   140ea:	9303      	str	r3, [sp, #12]
   140ec:	6c78      	ldr	r0, [r7, #68]
   140ee:	ca06      	ldmia	r2!, {r1, r2}
   140f0:	6c3b      	ldr	r3, [r7, #64]
   140f2:	f7fc fe39 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   140f6:	6c7b      	ldr	r3, [r7, #68]
   140f8:	64bb      	str	r3, [r7, #72]
   140fa:	e001      	b.n	14100 <_ZN9Krabi2015C2Eb+0x2c8>
   140fc:	6c7b      	ldr	r3, [r7, #68]
   140fe:	64bb      	str	r3, [r7, #72]
   14100:	6cbb      	ldr	r3, [r7, #72]
   14102:	f8c7 375c 	str.w	r3, [r7, #1884]
    Etape* etape1 = new Etape(Position(700, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPOSE_GOBELET, -1, 0);
   14106:	f507 720e 	add.w	r2, r7, #568	; 0x238
   1410a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1410e:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14112:	781b      	ldrb	r3, [r3, #0]
   14114:	4610      	mov	r0, r2
   14116:	f8df 19c8 	ldr.w	r1, [pc, #2504]	; 14ae0 <_ZN9Krabi2015C2Eb+0xca8>
   1411a:	f8df 29c0 	ldr.w	r2, [pc, #2496]	; 14adc <_ZN9Krabi2015C2Eb+0xca4>
   1411e:	f7fa fe69 	bl	edf4 <_ZN8PositionC1Effb>
   14122:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14126:	64fb      	str	r3, [r7, #76]
   14128:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1412c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14130:	f8c7 3758 	str.w	r3, [r7, #1880]
   14134:	f04f 0038 	mov.w	r0, #56	; 0x38
   14138:	f7fa fcf6 	bl	eb28 <_Znwj>
   1413c:	4603      	mov	r3, r0
   1413e:	653b      	str	r3, [r7, #80]
   14140:	6d3b      	ldr	r3, [r7, #80]
   14142:	2b00      	cmp	r3, #0
   14144:	d019      	beq.n	1417a <_ZN9Krabi2015C2Eb+0x342>
   14146:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1414a:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1414e:	681b      	ldr	r3, [r3, #0]
   14150:	6b5b      	ldr	r3, [r3, #52]
   14152:	f507 720e 	add.w	r2, r7, #568	; 0x238
   14156:	9300      	str	r3, [sp, #0]
   14158:	f04f 0316 	mov.w	r3, #22	; 0x16
   1415c:	9301      	str	r3, [sp, #4]
   1415e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14162:	9302      	str	r3, [sp, #8]
   14164:	f04f 0300 	mov.w	r3, #0	; 0x0
   14168:	9303      	str	r3, [sp, #12]
   1416a:	6d38      	ldr	r0, [r7, #80]
   1416c:	ca06      	ldmia	r2!, {r1, r2}
   1416e:	6cfb      	ldr	r3, [r7, #76]
   14170:	f7fc fdfa 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14174:	6d3b      	ldr	r3, [r7, #80]
   14176:	657b      	str	r3, [r7, #84]
   14178:	e001      	b.n	1417e <_ZN9Krabi2015C2Eb+0x346>
   1417a:	6d3b      	ldr	r3, [r7, #80]
   1417c:	657b      	str	r3, [r7, #84]
   1417e:	6d7b      	ldr	r3, [r7, #84]
   14180:	f8c7 3760 	str.w	r3, [r7, #1888]
    Etape* etape2 = new Etape(Position(836, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   14184:	f507 7210 	add.w	r2, r7, #576	; 0x240
   14188:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1418c:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14190:	781b      	ldrb	r3, [r3, #0]
   14192:	4610      	mov	r0, r2
   14194:	f8df 194c 	ldr.w	r1, [pc, #2380]	; 14ae4 <_ZN9Krabi2015C2Eb+0xcac>
   14198:	f8df 294c 	ldr.w	r2, [pc, #2380]	; 14ae8 <_ZN9Krabi2015C2Eb+0xcb0>
   1419c:	f7fa fe2a 	bl	edf4 <_ZN8PositionC1Effb>
   141a0:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   141a4:	65bb      	str	r3, [r7, #88]
   141a6:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   141aa:	f103 0301 	add.w	r3, r3, #1	; 0x1
   141ae:	f8c7 3758 	str.w	r3, [r7, #1880]
   141b2:	f04f 0038 	mov.w	r0, #56	; 0x38
   141b6:	f7fa fcb7 	bl	eb28 <_Znwj>
   141ba:	4603      	mov	r3, r0
   141bc:	65fb      	str	r3, [r7, #92]
   141be:	6dfb      	ldr	r3, [r7, #92]
   141c0:	2b00      	cmp	r3, #0
   141c2:	d019      	beq.n	141f8 <_ZN9Krabi2015C2Eb+0x3c0>
   141c4:	f507 730c 	add.w	r3, r7, #560	; 0x230
   141c8:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   141cc:	681b      	ldr	r3, [r3, #0]
   141ce:	6b5b      	ldr	r3, [r3, #52]
   141d0:	f507 7210 	add.w	r2, r7, #576	; 0x240
   141d4:	9300      	str	r3, [sp, #0]
   141d6:	f04f 0311 	mov.w	r3, #17	; 0x11
   141da:	9301      	str	r3, [sp, #4]
   141dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   141e0:	9302      	str	r3, [sp, #8]
   141e2:	f04f 0300 	mov.w	r3, #0	; 0x0
   141e6:	9303      	str	r3, [sp, #12]
   141e8:	6df8      	ldr	r0, [r7, #92]
   141ea:	ca06      	ldmia	r2!, {r1, r2}
   141ec:	6dbb      	ldr	r3, [r7, #88]
   141ee:	f7fc fdbb 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   141f2:	6dfb      	ldr	r3, [r7, #92]
   141f4:	663b      	str	r3, [r7, #96]
   141f6:	e001      	b.n	141fc <_ZN9Krabi2015C2Eb+0x3c4>
   141f8:	6dfb      	ldr	r3, [r7, #92]
   141fa:	663b      	str	r3, [r7, #96]
   141fc:	6e3b      	ldr	r3, [r7, #96]
   141fe:	f8c7 3764 	str.w	r3, [r7, #1892]
    Etape* etape3 = new Etape(Position(1000, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   14202:	f507 7212 	add.w	r2, r7, #584	; 0x248
   14206:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1420a:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   1420e:	781b      	ldrb	r3, [r3, #0]
   14210:	4610      	mov	r0, r2
   14212:	f8df 18c8 	ldr.w	r1, [pc, #2248]	; 14adc <_ZN9Krabi2015C2Eb+0xca4>
   14216:	f8df 28d0 	ldr.w	r2, [pc, #2256]	; 14ae8 <_ZN9Krabi2015C2Eb+0xcb0>
   1421a:	f7fa fdeb 	bl	edf4 <_ZN8PositionC1Effb>
   1421e:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14222:	667b      	str	r3, [r7, #100]
   14224:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14228:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1422c:	f8c7 3758 	str.w	r3, [r7, #1880]
   14230:	f04f 0038 	mov.w	r0, #56	; 0x38
   14234:	f7fa fc78 	bl	eb28 <_Znwj>
   14238:	4603      	mov	r3, r0
   1423a:	66bb      	str	r3, [r7, #104]
   1423c:	6ebb      	ldr	r3, [r7, #104]
   1423e:	2b00      	cmp	r3, #0
   14240:	d019      	beq.n	14276 <_ZN9Krabi2015C2Eb+0x43e>
   14242:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14246:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1424a:	681b      	ldr	r3, [r3, #0]
   1424c:	6b5b      	ldr	r3, [r3, #52]
   1424e:	f507 7212 	add.w	r2, r7, #584	; 0x248
   14252:	9300      	str	r3, [sp, #0]
   14254:	f04f 0300 	mov.w	r3, #0	; 0x0
   14258:	9301      	str	r3, [sp, #4]
   1425a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1425e:	9302      	str	r3, [sp, #8]
   14260:	f04f 0300 	mov.w	r3, #0	; 0x0
   14264:	9303      	str	r3, [sp, #12]
   14266:	6eb8      	ldr	r0, [r7, #104]
   14268:	ca06      	ldmia	r2!, {r1, r2}
   1426a:	6e7b      	ldr	r3, [r7, #100]
   1426c:	f7fc fd7c 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14270:	6ebb      	ldr	r3, [r7, #104]
   14272:	66fb      	str	r3, [r7, #108]
   14274:	e001      	b.n	1427a <_ZN9Krabi2015C2Eb+0x442>
   14276:	6ebb      	ldr	r3, [r7, #104]
   14278:	66fb      	str	r3, [r7, #108]
   1427a:	6efb      	ldr	r3, [r7, #108]
   1427c:	f8c7 3768 	str.w	r3, [r7, #1896]
    Etape* etape4 = new Etape(Position(236, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   14280:	f507 7214 	add.w	r2, r7, #592	; 0x250
   14284:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14288:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   1428c:	781b      	ldrb	r3, [r3, #0]
   1428e:	4610      	mov	r0, r2
   14290:	f8df 1858 	ldr.w	r1, [pc, #2136]	; 14aec <_ZN9Krabi2015C2Eb+0xcb4>
   14294:	f8df 2850 	ldr.w	r2, [pc, #2128]	; 14ae8 <_ZN9Krabi2015C2Eb+0xcb0>
   14298:	f7fa fdac 	bl	edf4 <_ZN8PositionC1Effb>
   1429c:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   142a0:	673b      	str	r3, [r7, #112]
   142a2:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   142a6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   142aa:	f8c7 3758 	str.w	r3, [r7, #1880]
   142ae:	f04f 0038 	mov.w	r0, #56	; 0x38
   142b2:	f7fa fc39 	bl	eb28 <_Znwj>
   142b6:	4603      	mov	r3, r0
   142b8:	677b      	str	r3, [r7, #116]
   142ba:	6f7b      	ldr	r3, [r7, #116]
   142bc:	2b00      	cmp	r3, #0
   142be:	d019      	beq.n	142f4 <_ZN9Krabi2015C2Eb+0x4bc>
   142c0:	f507 730c 	add.w	r3, r7, #560	; 0x230
   142c4:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   142c8:	681b      	ldr	r3, [r3, #0]
   142ca:	6b5b      	ldr	r3, [r3, #52]
   142cc:	f507 7214 	add.w	r2, r7, #592	; 0x250
   142d0:	9300      	str	r3, [sp, #0]
   142d2:	f04f 0311 	mov.w	r3, #17	; 0x11
   142d6:	9301      	str	r3, [sp, #4]
   142d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   142dc:	9302      	str	r3, [sp, #8]
   142de:	f04f 0300 	mov.w	r3, #0	; 0x0
   142e2:	9303      	str	r3, [sp, #12]
   142e4:	6f78      	ldr	r0, [r7, #116]
   142e6:	ca06      	ldmia	r2!, {r1, r2}
   142e8:	6f3b      	ldr	r3, [r7, #112]
   142ea:	f7fc fd3d 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   142ee:	6f7b      	ldr	r3, [r7, #116]
   142f0:	67bb      	str	r3, [r7, #120]
   142f2:	e001      	b.n	142f8 <_ZN9Krabi2015C2Eb+0x4c0>
   142f4:	6f7b      	ldr	r3, [r7, #116]
   142f6:	67bb      	str	r3, [r7, #120]
   142f8:	6fbb      	ldr	r3, [r7, #120]
   142fa:	f8c7 376c 	str.w	r3, [r7, #1900]
    Etape* etape5 = new Etape(Position(400, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   142fe:	f507 7216 	add.w	r2, r7, #600	; 0x258
   14302:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14306:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   1430a:	781b      	ldrb	r3, [r3, #0]
   1430c:	4610      	mov	r0, r2
   1430e:	f8df 17e0 	ldr.w	r1, [pc, #2016]	; 14af0 <_ZN9Krabi2015C2Eb+0xcb8>
   14312:	f8df 27d4 	ldr.w	r2, [pc, #2004]	; 14ae8 <_ZN9Krabi2015C2Eb+0xcb0>
   14316:	f7fa fd6d 	bl	edf4 <_ZN8PositionC1Effb>
   1431a:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1431e:	67fb      	str	r3, [r7, #124]
   14320:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14324:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14328:	f8c7 3758 	str.w	r3, [r7, #1880]
   1432c:	f04f 0038 	mov.w	r0, #56	; 0x38
   14330:	f7fa fbfa 	bl	eb28 <_Znwj>
   14334:	4603      	mov	r3, r0
   14336:	f8c7 3080 	str.w	r3, [r7, #128]
   1433a:	f8d7 3080 	ldr.w	r3, [r7, #128]
   1433e:	2b00      	cmp	r3, #0
   14340:	d01c      	beq.n	1437c <_ZN9Krabi2015C2Eb+0x544>
   14342:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14346:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1434a:	681b      	ldr	r3, [r3, #0]
   1434c:	6b5b      	ldr	r3, [r3, #52]
   1434e:	f507 7216 	add.w	r2, r7, #600	; 0x258
   14352:	9300      	str	r3, [sp, #0]
   14354:	f04f 0300 	mov.w	r3, #0	; 0x0
   14358:	9301      	str	r3, [sp, #4]
   1435a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1435e:	9302      	str	r3, [sp, #8]
   14360:	f04f 0300 	mov.w	r3, #0	; 0x0
   14364:	9303      	str	r3, [sp, #12]
   14366:	f8d7 0080 	ldr.w	r0, [r7, #128]
   1436a:	ca06      	ldmia	r2!, {r1, r2}
   1436c:	6ffb      	ldr	r3, [r7, #124]
   1436e:	f7fc fcfb 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14372:	f8d7 3080 	ldr.w	r3, [r7, #128]
   14376:	f8c7 3084 	str.w	r3, [r7, #132]
   1437a:	e003      	b.n	14384 <_ZN9Krabi2015C2Eb+0x54c>
   1437c:	f8d7 3080 	ldr.w	r3, [r7, #128]
   14380:	f8c7 3084 	str.w	r3, [r7, #132]
   14384:	f8d7 3084 	ldr.w	r3, [r7, #132]
   14388:	f8c7 3770 	str.w	r3, [r7, #1904]
    Etape* etape6 = new Etape(Position(2500, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   1438c:	f507 7218 	add.w	r2, r7, #608	; 0x260
   14390:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14394:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14398:	781b      	ldrb	r3, [r3, #0]
   1439a:	4610      	mov	r0, r2
   1439c:	f8df 1754 	ldr.w	r1, [pc, #1876]	; 14af4 <_ZN9Krabi2015C2Eb+0xcbc>
   143a0:	f8df 2744 	ldr.w	r2, [pc, #1860]	; 14ae8 <_ZN9Krabi2015C2Eb+0xcb0>
   143a4:	f7fa fd26 	bl	edf4 <_ZN8PositionC1Effb>
   143a8:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   143ac:	f8c7 3088 	str.w	r3, [r7, #136]
   143b0:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   143b4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   143b8:	f8c7 3758 	str.w	r3, [r7, #1880]
   143bc:	f04f 0038 	mov.w	r0, #56	; 0x38
   143c0:	f7fa fbb2 	bl	eb28 <_Znwj>
   143c4:	4603      	mov	r3, r0
   143c6:	f8c7 308c 	str.w	r3, [r7, #140]
   143ca:	f8d7 308c 	ldr.w	r3, [r7, #140]
   143ce:	2b00      	cmp	r3, #0
   143d0:	d01d      	beq.n	1440e <_ZN9Krabi2015C2Eb+0x5d6>
   143d2:	f507 730c 	add.w	r3, r7, #560	; 0x230
   143d6:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   143da:	681b      	ldr	r3, [r3, #0]
   143dc:	6b5b      	ldr	r3, [r3, #52]
   143de:	f507 7218 	add.w	r2, r7, #608	; 0x260
   143e2:	9300      	str	r3, [sp, #0]
   143e4:	f04f 0311 	mov.w	r3, #17	; 0x11
   143e8:	9301      	str	r3, [sp, #4]
   143ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   143ee:	9302      	str	r3, [sp, #8]
   143f0:	f04f 0300 	mov.w	r3, #0	; 0x0
   143f4:	9303      	str	r3, [sp, #12]
   143f6:	f8d7 008c 	ldr.w	r0, [r7, #140]
   143fa:	ca06      	ldmia	r2!, {r1, r2}
   143fc:	f8d7 3088 	ldr.w	r3, [r7, #136]
   14400:	f7fc fcb2 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14404:	f8d7 308c 	ldr.w	r3, [r7, #140]
   14408:	f8c7 3090 	str.w	r3, [r7, #144]
   1440c:	e003      	b.n	14416 <_ZN9Krabi2015C2Eb+0x5de>
   1440e:	f8d7 308c 	ldr.w	r3, [r7, #140]
   14412:	f8c7 3090 	str.w	r3, [r7, #144]
   14416:	f8d7 3090 	ldr.w	r3, [r7, #144]
   1441a:	f8c7 3774 	str.w	r3, [r7, #1908]
    Etape* etape7 = new Etape(Position(2300, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1441e:	f507 721a 	add.w	r2, r7, #616	; 0x268
   14422:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14426:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   1442a:	781b      	ldrb	r3, [r3, #0]
   1442c:	4610      	mov	r0, r2
   1442e:	f8df 16c8 	ldr.w	r1, [pc, #1736]	; 14af8 <_ZN9Krabi2015C2Eb+0xcc0>
   14432:	f8df 26b4 	ldr.w	r2, [pc, #1716]	; 14ae8 <_ZN9Krabi2015C2Eb+0xcb0>
   14436:	f7fa fcdd 	bl	edf4 <_ZN8PositionC1Effb>
   1443a:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1443e:	f8c7 3094 	str.w	r3, [r7, #148]
   14442:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14446:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1444a:	f8c7 3758 	str.w	r3, [r7, #1880]
   1444e:	f04f 0038 	mov.w	r0, #56	; 0x38
   14452:	f7fa fb69 	bl	eb28 <_Znwj>
   14456:	4603      	mov	r3, r0
   14458:	f8c7 3098 	str.w	r3, [r7, #152]
   1445c:	f8d7 3098 	ldr.w	r3, [r7, #152]
   14460:	2b00      	cmp	r3, #0
   14462:	d01d      	beq.n	144a0 <_ZN9Krabi2015C2Eb+0x668>
   14464:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14468:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1446c:	681b      	ldr	r3, [r3, #0]
   1446e:	6b5b      	ldr	r3, [r3, #52]
   14470:	f507 721a 	add.w	r2, r7, #616	; 0x268
   14474:	9300      	str	r3, [sp, #0]
   14476:	f04f 0300 	mov.w	r3, #0	; 0x0
   1447a:	9301      	str	r3, [sp, #4]
   1447c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14480:	9302      	str	r3, [sp, #8]
   14482:	f04f 0300 	mov.w	r3, #0	; 0x0
   14486:	9303      	str	r3, [sp, #12]
   14488:	f8d7 0098 	ldr.w	r0, [r7, #152]
   1448c:	ca06      	ldmia	r2!, {r1, r2}
   1448e:	f8d7 3094 	ldr.w	r3, [r7, #148]
   14492:	f7fc fc69 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14496:	f8d7 3098 	ldr.w	r3, [r7, #152]
   1449a:	f8c7 309c 	str.w	r3, [r7, #156]
   1449e:	e003      	b.n	144a8 <_ZN9Krabi2015C2Eb+0x670>
   144a0:	f8d7 3098 	ldr.w	r3, [r7, #152]
   144a4:	f8c7 309c 	str.w	r3, [r7, #156]
   144a8:	f8d7 309c 	ldr.w	r3, [r7, #156]
   144ac:	f8c7 3778 	str.w	r3, [r7, #1912]
    Etape* etape8 = new Etape(Position(250, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   144b0:	f507 721c 	add.w	r2, r7, #624	; 0x270
   144b4:	f507 730c 	add.w	r3, r7, #560	; 0x230
   144b8:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   144bc:	781b      	ldrb	r3, [r3, #0]
   144be:	4610      	mov	r0, r2
   144c0:	f8df 1614 	ldr.w	r1, [pc, #1556]	; 14ad8 <_ZN9Krabi2015C2Eb+0xca0>
   144c4:	f8df 2634 	ldr.w	r2, [pc, #1588]	; 14afc <_ZN9Krabi2015C2Eb+0xcc4>
   144c8:	f7fa fc94 	bl	edf4 <_ZN8PositionC1Effb>
   144cc:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   144d0:	f8c7 30a0 	str.w	r3, [r7, #160]
   144d4:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   144d8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   144dc:	f8c7 3758 	str.w	r3, [r7, #1880]
   144e0:	f04f 0038 	mov.w	r0, #56	; 0x38
   144e4:	f7fa fb20 	bl	eb28 <_Znwj>
   144e8:	4603      	mov	r3, r0
   144ea:	f8c7 30a4 	str.w	r3, [r7, #164]
   144ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   144f2:	2b00      	cmp	r3, #0
   144f4:	d01d      	beq.n	14532 <_ZN9Krabi2015C2Eb+0x6fa>
   144f6:	f507 730c 	add.w	r3, r7, #560	; 0x230
   144fa:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   144fe:	681b      	ldr	r3, [r3, #0]
   14500:	6b5b      	ldr	r3, [r3, #52]
   14502:	f507 721c 	add.w	r2, r7, #624	; 0x270
   14506:	9300      	str	r3, [sp, #0]
   14508:	f04f 0312 	mov.w	r3, #18	; 0x12
   1450c:	9301      	str	r3, [sp, #4]
   1450e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14512:	9302      	str	r3, [sp, #8]
   14514:	f04f 0300 	mov.w	r3, #0	; 0x0
   14518:	9303      	str	r3, [sp, #12]
   1451a:	f8d7 00a4 	ldr.w	r0, [r7, #164]
   1451e:	ca06      	ldmia	r2!, {r1, r2}
   14520:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   14524:	f7fc fc20 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14528:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   1452c:	f8c7 30a8 	str.w	r3, [r7, #168]
   14530:	e003      	b.n	1453a <_ZN9Krabi2015C2Eb+0x702>
   14532:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   14536:	f8c7 30a8 	str.w	r3, [r7, #168]
   1453a:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   1453e:	f8c7 377c 	str.w	r3, [r7, #1916]
    Etape* etape9 = new Etape(Position(910, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   14542:	f507 721e 	add.w	r2, r7, #632	; 0x278
   14546:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1454a:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   1454e:	781b      	ldrb	r3, [r3, #0]
   14550:	4610      	mov	r0, r2
   14552:	f8df 15ac 	ldr.w	r1, [pc, #1452]	; 14b00 <_ZN9Krabi2015C2Eb+0xcc8>
   14556:	f8df 25ac 	ldr.w	r2, [pc, #1452]	; 14b04 <_ZN9Krabi2015C2Eb+0xccc>
   1455a:	f7fa fc4b 	bl	edf4 <_ZN8PositionC1Effb>
   1455e:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14562:	f8c7 30ac 	str.w	r3, [r7, #172]
   14566:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1456a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1456e:	f8c7 3758 	str.w	r3, [r7, #1880]
   14572:	f04f 0038 	mov.w	r0, #56	; 0x38
   14576:	f7fa fad7 	bl	eb28 <_Znwj>
   1457a:	4603      	mov	r3, r0
   1457c:	f8c7 30b0 	str.w	r3, [r7, #176]
   14580:	f8d7 30b0 	ldr.w	r3, [r7, #176]
   14584:	2b00      	cmp	r3, #0
   14586:	d01d      	beq.n	145c4 <_ZN9Krabi2015C2Eb+0x78c>
   14588:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1458c:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   14590:	681b      	ldr	r3, [r3, #0]
   14592:	6b5b      	ldr	r3, [r3, #52]
   14594:	f507 721e 	add.w	r2, r7, #632	; 0x278
   14598:	9300      	str	r3, [sp, #0]
   1459a:	f04f 0312 	mov.w	r3, #18	; 0x12
   1459e:	9301      	str	r3, [sp, #4]
   145a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   145a4:	9302      	str	r3, [sp, #8]
   145a6:	f04f 0300 	mov.w	r3, #0	; 0x0
   145aa:	9303      	str	r3, [sp, #12]
   145ac:	f8d7 00b0 	ldr.w	r0, [r7, #176]
   145b0:	ca06      	ldmia	r2!, {r1, r2}
   145b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   145b6:	f7fc fbd7 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   145ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]
   145be:	f8c7 30b4 	str.w	r3, [r7, #180]
   145c2:	e003      	b.n	145cc <_ZN9Krabi2015C2Eb+0x794>
   145c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]
   145c8:	f8c7 30b4 	str.w	r3, [r7, #180]
   145cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]
   145d0:	f8c7 3780 	str.w	r3, [r7, #1920]
    Etape* etape10 = new Etape(Position(1500, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   145d4:	f507 7220 	add.w	r2, r7, #640	; 0x280
   145d8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   145dc:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   145e0:	781b      	ldrb	r3, [r3, #0]
   145e2:	4610      	mov	r0, r2
   145e4:	f8df 1520 	ldr.w	r1, [pc, #1312]	; 14b08 <_ZN9Krabi2015C2Eb+0xcd0>
   145e8:	f8df 2520 	ldr.w	r2, [pc, #1312]	; 14b0c <_ZN9Krabi2015C2Eb+0xcd4>
   145ec:	f7fa fc02 	bl	edf4 <_ZN8PositionC1Effb>
   145f0:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   145f4:	f8c7 30b8 	str.w	r3, [r7, #184]
   145f8:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   145fc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14600:	f8c7 3758 	str.w	r3, [r7, #1880]
   14604:	f04f 0038 	mov.w	r0, #56	; 0x38
   14608:	f7fa fa8e 	bl	eb28 <_Znwj>
   1460c:	4603      	mov	r3, r0
   1460e:	f8c7 30bc 	str.w	r3, [r7, #188]
   14612:	f8d7 30bc 	ldr.w	r3, [r7, #188]
   14616:	2b00      	cmp	r3, #0
   14618:	d01d      	beq.n	14656 <_ZN9Krabi2015C2Eb+0x81e>
   1461a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1461e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   14622:	681b      	ldr	r3, [r3, #0]
   14624:	6b5b      	ldr	r3, [r3, #52]
   14626:	f507 7220 	add.w	r2, r7, #640	; 0x280
   1462a:	9300      	str	r3, [sp, #0]
   1462c:	f04f 0312 	mov.w	r3, #18	; 0x12
   14630:	9301      	str	r3, [sp, #4]
   14632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14636:	9302      	str	r3, [sp, #8]
   14638:	f04f 0300 	mov.w	r3, #0	; 0x0
   1463c:	9303      	str	r3, [sp, #12]
   1463e:	f8d7 00bc 	ldr.w	r0, [r7, #188]
   14642:	ca06      	ldmia	r2!, {r1, r2}
   14644:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   14648:	f7fc fb8e 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1464c:	f8d7 30bc 	ldr.w	r3, [r7, #188]
   14650:	f8c7 30c0 	str.w	r3, [r7, #192]
   14654:	e003      	b.n	1465e <_ZN9Krabi2015C2Eb+0x826>
   14656:	f8d7 30bc 	ldr.w	r3, [r7, #188]
   1465a:	f8c7 30c0 	str.w	r3, [r7, #192]
   1465e:	f8d7 30c0 	ldr.w	r3, [r7, #192]
   14662:	f8c7 3784 	str.w	r3, [r7, #1924]
    Etape* etape11 = new Etape(Position(2090, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   14666:	f507 7222 	add.w	r2, r7, #648	; 0x288
   1466a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1466e:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14672:	781b      	ldrb	r3, [r3, #0]
   14674:	4610      	mov	r0, r2
   14676:	f8df 1498 	ldr.w	r1, [pc, #1176]	; 14b10 <_ZN9Krabi2015C2Eb+0xcd8>
   1467a:	f8df 2488 	ldr.w	r2, [pc, #1160]	; 14b04 <_ZN9Krabi2015C2Eb+0xccc>
   1467e:	f7fa fbb9 	bl	edf4 <_ZN8PositionC1Effb>
   14682:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14686:	f8c7 30c4 	str.w	r3, [r7, #196]
   1468a:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1468e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14692:	f8c7 3758 	str.w	r3, [r7, #1880]
   14696:	f04f 0038 	mov.w	r0, #56	; 0x38
   1469a:	f7fa fa45 	bl	eb28 <_Znwj>
   1469e:	4603      	mov	r3, r0
   146a0:	f8c7 30c8 	str.w	r3, [r7, #200]
   146a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]
   146a8:	2b00      	cmp	r3, #0
   146aa:	d01d      	beq.n	146e8 <_ZN9Krabi2015C2Eb+0x8b0>
   146ac:	f507 730c 	add.w	r3, r7, #560	; 0x230
   146b0:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   146b4:	681b      	ldr	r3, [r3, #0]
   146b6:	6b5b      	ldr	r3, [r3, #52]
   146b8:	f507 7222 	add.w	r2, r7, #648	; 0x288
   146bc:	9300      	str	r3, [sp, #0]
   146be:	f04f 0312 	mov.w	r3, #18	; 0x12
   146c2:	9301      	str	r3, [sp, #4]
   146c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   146c8:	9302      	str	r3, [sp, #8]
   146ca:	f04f 0300 	mov.w	r3, #0	; 0x0
   146ce:	9303      	str	r3, [sp, #12]
   146d0:	f8d7 00c8 	ldr.w	r0, [r7, #200]
   146d4:	ca06      	ldmia	r2!, {r1, r2}
   146d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   146da:	f7fc fb45 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   146de:	f8d7 30c8 	ldr.w	r3, [r7, #200]
   146e2:	f8c7 30cc 	str.w	r3, [r7, #204]
   146e6:	e003      	b.n	146f0 <_ZN9Krabi2015C2Eb+0x8b8>
   146e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]
   146ec:	f8c7 30cc 	str.w	r3, [r7, #204]
   146f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]
   146f4:	f8c7 3788 	str.w	r3, [r7, #1928]
    Etape* etape12 = new Etape(Position(2750, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   146f8:	f507 7224 	add.w	r2, r7, #656	; 0x290
   146fc:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14700:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14704:	781b      	ldrb	r3, [r3, #0]
   14706:	4610      	mov	r0, r2
   14708:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 14b14 <_ZN9Krabi2015C2Eb+0xcdc>
   1470c:	4afb      	ldr	r2, [pc, #1004]	(14afc <_ZN9Krabi2015C2Eb+0xcc4>)
   1470e:	f7fa fb71 	bl	edf4 <_ZN8PositionC1Effb>
   14712:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14716:	f8c7 30d0 	str.w	r3, [r7, #208]
   1471a:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1471e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14722:	f8c7 3758 	str.w	r3, [r7, #1880]
   14726:	f04f 0038 	mov.w	r0, #56	; 0x38
   1472a:	f7fa f9fd 	bl	eb28 <_Znwj>
   1472e:	4603      	mov	r3, r0
   14730:	f8c7 30d4 	str.w	r3, [r7, #212]
   14734:	f8d7 30d4 	ldr.w	r3, [r7, #212]
   14738:	2b00      	cmp	r3, #0
   1473a:	d01d      	beq.n	14778 <_ZN9Krabi2015C2Eb+0x940>
   1473c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14740:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   14744:	681b      	ldr	r3, [r3, #0]
   14746:	6b5b      	ldr	r3, [r3, #52]
   14748:	f507 7224 	add.w	r2, r7, #656	; 0x290
   1474c:	9300      	str	r3, [sp, #0]
   1474e:	f04f 0312 	mov.w	r3, #18	; 0x12
   14752:	9301      	str	r3, [sp, #4]
   14754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14758:	9302      	str	r3, [sp, #8]
   1475a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1475e:	9303      	str	r3, [sp, #12]
   14760:	f8d7 00d4 	ldr.w	r0, [r7, #212]
   14764:	ca06      	ldmia	r2!, {r1, r2}
   14766:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   1476a:	f7fc fafd 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1476e:	f8d7 30d4 	ldr.w	r3, [r7, #212]
   14772:	f8c7 30d8 	str.w	r3, [r7, #216]
   14776:	e003      	b.n	14780 <_ZN9Krabi2015C2Eb+0x948>
   14778:	f8d7 30d4 	ldr.w	r3, [r7, #212]
   1477c:	f8c7 30d8 	str.w	r3, [r7, #216]
   14780:	f8d7 30d8 	ldr.w	r3, [r7, #216]
   14784:	f8c7 378c 	str.w	r3, [r7, #1932]
    Etape* etape13 = new Etape(Position(90, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::RAMASSER_PIED, -1, 0);
   14788:	f507 7226 	add.w	r2, r7, #664	; 0x298
   1478c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14790:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14794:	781b      	ldrb	r3, [r3, #0]
   14796:	4610      	mov	r0, r2
   14798:	49df      	ldr	r1, [pc, #892]	(14b18 <_ZN9Krabi2015C2Eb+0xce0>)
   1479a:	4ad8      	ldr	r2, [pc, #864]	(14afc <_ZN9Krabi2015C2Eb+0xcc4>)
   1479c:	f7fa fb2a 	bl	edf4 <_ZN8PositionC1Effb>
   147a0:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   147a4:	f8c7 30dc 	str.w	r3, [r7, #220]
   147a8:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   147ac:	f103 0301 	add.w	r3, r3, #1	; 0x1
   147b0:	f8c7 3758 	str.w	r3, [r7, #1880]
   147b4:	f04f 0038 	mov.w	r0, #56	; 0x38
   147b8:	f7fa f9b6 	bl	eb28 <_Znwj>
   147bc:	4603      	mov	r3, r0
   147be:	f8c7 30e0 	str.w	r3, [r7, #224]
   147c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]
   147c6:	2b00      	cmp	r3, #0
   147c8:	d01d      	beq.n	14806 <_ZN9Krabi2015C2Eb+0x9ce>
   147ca:	f507 730c 	add.w	r3, r7, #560	; 0x230
   147ce:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   147d2:	681b      	ldr	r3, [r3, #0]
   147d4:	6b5b      	ldr	r3, [r3, #52]
   147d6:	f507 7226 	add.w	r2, r7, #664	; 0x298
   147da:	9300      	str	r3, [sp, #0]
   147dc:	f04f 0313 	mov.w	r3, #19	; 0x13
   147e0:	9301      	str	r3, [sp, #4]
   147e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   147e6:	9302      	str	r3, [sp, #8]
   147e8:	f04f 0300 	mov.w	r3, #0	; 0x0
   147ec:	9303      	str	r3, [sp, #12]
   147ee:	f8d7 00e0 	ldr.w	r0, [r7, #224]
   147f2:	ca06      	ldmia	r2!, {r1, r2}
   147f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   147f8:	f7fc fab6 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   147fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]
   14800:	f8c7 30e4 	str.w	r3, [r7, #228]
   14804:	e003      	b.n	1480e <_ZN9Krabi2015C2Eb+0x9d6>
   14806:	f8d7 30e0 	ldr.w	r3, [r7, #224]
   1480a:	f8c7 30e4 	str.w	r3, [r7, #228]
   1480e:	f8d7 30e4 	ldr.w	r3, [r7, #228]
   14812:	f8c7 3790 	str.w	r3, [r7, #1936]
    Etape* etape14 = new Etape(Position(90, 1850, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::RAMASSER_PIED, -1, 0);
   14816:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   1481a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1481e:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14822:	781b      	ldrb	r3, [r3, #0]
   14824:	4610      	mov	r0, r2
   14826:	49bc      	ldr	r1, [pc, #752]	(14b18 <_ZN9Krabi2015C2Eb+0xce0>)
   14828:	4abc      	ldr	r2, [pc, #752]	(14b1c <_ZN9Krabi2015C2Eb+0xce4>)
   1482a:	f7fa fae3 	bl	edf4 <_ZN8PositionC1Effb>
   1482e:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14832:	f8c7 30e8 	str.w	r3, [r7, #232]
   14836:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1483a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1483e:	f8c7 3758 	str.w	r3, [r7, #1880]
   14842:	f04f 0038 	mov.w	r0, #56	; 0x38
   14846:	f7fa f96f 	bl	eb28 <_Znwj>
   1484a:	4603      	mov	r3, r0
   1484c:	f8c7 30ec 	str.w	r3, [r7, #236]
   14850:	f8d7 30ec 	ldr.w	r3, [r7, #236]
   14854:	2b00      	cmp	r3, #0
   14856:	d01d      	beq.n	14894 <_ZN9Krabi2015C2Eb+0xa5c>
   14858:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1485c:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   14860:	681b      	ldr	r3, [r3, #0]
   14862:	6b5b      	ldr	r3, [r3, #52]
   14864:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   14868:	9300      	str	r3, [sp, #0]
   1486a:	f04f 0313 	mov.w	r3, #19	; 0x13
   1486e:	9301      	str	r3, [sp, #4]
   14870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14874:	9302      	str	r3, [sp, #8]
   14876:	f04f 0300 	mov.w	r3, #0	; 0x0
   1487a:	9303      	str	r3, [sp, #12]
   1487c:	f8d7 00ec 	ldr.w	r0, [r7, #236]
   14880:	ca06      	ldmia	r2!, {r1, r2}
   14882:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   14886:	f7fc fa6f 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1488a:	f8d7 30ec 	ldr.w	r3, [r7, #236]
   1488e:	f8c7 30f0 	str.w	r3, [r7, #240]
   14892:	e003      	b.n	1489c <_ZN9Krabi2015C2Eb+0xa64>
   14894:	f8d7 30ec 	ldr.w	r3, [r7, #236]
   14898:	f8c7 30f0 	str.w	r3, [r7, #240]
   1489c:	f8d7 30f0 	ldr.w	r3, [r7, #240]
   148a0:	f8c7 3794 	str.w	r3, [r7, #1940]
    Etape* etape15 = new Etape(Position(90, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::RAMASSER_PIED, -1, 0);
   148a4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
   148a8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   148ac:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   148b0:	781b      	ldrb	r3, [r3, #0]
   148b2:	4610      	mov	r0, r2
   148b4:	4998      	ldr	r1, [pc, #608]	(14b18 <_ZN9Krabi2015C2Eb+0xce0>)
   148b6:	4a9a      	ldr	r2, [pc, #616]	(14b20 <_ZN9Krabi2015C2Eb+0xce8>)
   148b8:	f7fa fa9c 	bl	edf4 <_ZN8PositionC1Effb>
   148bc:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   148c0:	f8c7 30f4 	str.w	r3, [r7, #244]
   148c4:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   148c8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   148cc:	f8c7 3758 	str.w	r3, [r7, #1880]
   148d0:	f04f 0038 	mov.w	r0, #56	; 0x38
   148d4:	f7fa f928 	bl	eb28 <_Znwj>
   148d8:	4603      	mov	r3, r0
   148da:	f8c7 30f8 	str.w	r3, [r7, #248]
   148de:	f8d7 30f8 	ldr.w	r3, [r7, #248]
   148e2:	2b00      	cmp	r3, #0
   148e4:	d01d      	beq.n	14922 <_ZN9Krabi2015C2Eb+0xaea>
   148e6:	f507 730c 	add.w	r3, r7, #560	; 0x230
   148ea:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   148ee:	681b      	ldr	r3, [r3, #0]
   148f0:	6b5b      	ldr	r3, [r3, #52]
   148f2:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
   148f6:	9300      	str	r3, [sp, #0]
   148f8:	f04f 0313 	mov.w	r3, #19	; 0x13
   148fc:	9301      	str	r3, [sp, #4]
   148fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14902:	9302      	str	r3, [sp, #8]
   14904:	f04f 0300 	mov.w	r3, #0	; 0x0
   14908:	9303      	str	r3, [sp, #12]
   1490a:	f8d7 00f8 	ldr.w	r0, [r7, #248]
   1490e:	ca06      	ldmia	r2!, {r1, r2}
   14910:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   14914:	f7fc fa28 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14918:	f8d7 30f8 	ldr.w	r3, [r7, #248]
   1491c:	f8c7 30fc 	str.w	r3, [r7, #252]
   14920:	e003      	b.n	1492a <_ZN9Krabi2015C2Eb+0xaf2>
   14922:	f8d7 30f8 	ldr.w	r3, [r7, #248]
   14926:	f8c7 30fc 	str.w	r3, [r7, #252]
   1492a:	f8d7 30fc 	ldr.w	r3, [r7, #252]
   1492e:	f8c7 3798 	str.w	r3, [r7, #1944]
    Etape* etape16 = new Etape(Position(850, 100, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::RAMASSER_PIED, -1, 0);
   14932:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
   14936:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1493a:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   1493e:	781b      	ldrb	r3, [r3, #0]
   14940:	4610      	mov	r0, r2
   14942:	4978      	ldr	r1, [pc, #480]	(14b24 <_ZN9Krabi2015C2Eb+0xcec>)
   14944:	4a78      	ldr	r2, [pc, #480]	(14b28 <_ZN9Krabi2015C2Eb+0xcf0>)
   14946:	f7fa fa55 	bl	edf4 <_ZN8PositionC1Effb>
   1494a:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1494e:	f8c7 3100 	str.w	r3, [r7, #256]
   14952:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14956:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1495a:	f8c7 3758 	str.w	r3, [r7, #1880]
   1495e:	f04f 0038 	mov.w	r0, #56	; 0x38
   14962:	f7fa f8e1 	bl	eb28 <_Znwj>
   14966:	4603      	mov	r3, r0
   14968:	f8c7 3104 	str.w	r3, [r7, #260]
   1496c:	f8d7 3104 	ldr.w	r3, [r7, #260]
   14970:	2b00      	cmp	r3, #0
   14972:	d01d      	beq.n	149b0 <_ZN9Krabi2015C2Eb+0xb78>
   14974:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14978:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1497c:	681b      	ldr	r3, [r3, #0]
   1497e:	6b5b      	ldr	r3, [r3, #52]
   14980:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
   14984:	9300      	str	r3, [sp, #0]
   14986:	f04f 0313 	mov.w	r3, #19	; 0x13
   1498a:	9301      	str	r3, [sp, #4]
   1498c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14990:	9302      	str	r3, [sp, #8]
   14992:	f04f 0300 	mov.w	r3, #0	; 0x0
   14996:	9303      	str	r3, [sp, #12]
   14998:	f8d7 0104 	ldr.w	r0, [r7, #260]
   1499c:	ca06      	ldmia	r2!, {r1, r2}
   1499e:	f8d7 3100 	ldr.w	r3, [r7, #256]
   149a2:	f7fc f9e1 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   149a6:	f8d7 3104 	ldr.w	r3, [r7, #260]
   149aa:	f8c7 3108 	str.w	r3, [r7, #264]
   149ae:	e003      	b.n	149b8 <_ZN9Krabi2015C2Eb+0xb80>
   149b0:	f8d7 3104 	ldr.w	r3, [r7, #260]
   149b4:	f8c7 3108 	str.w	r3, [r7, #264]
   149b8:	f8d7 3108 	ldr.w	r3, [r7, #264]
   149bc:	f8c7 379c 	str.w	r3, [r7, #1948]
    Etape* etape17 = new Etape(Position(850, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::RAMASSER_PIED, -1, 0);
   149c0:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
   149c4:	f507 730c 	add.w	r3, r7, #560	; 0x230
   149c8:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   149cc:	781b      	ldrb	r3, [r3, #0]
   149ce:	4610      	mov	r0, r2
   149d0:	4954      	ldr	r1, [pc, #336]	(14b24 <_ZN9Krabi2015C2Eb+0xcec>)
   149d2:	4a53      	ldr	r2, [pc, #332]	(14b20 <_ZN9Krabi2015C2Eb+0xce8>)
   149d4:	f7fa fa0e 	bl	edf4 <_ZN8PositionC1Effb>
   149d8:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   149dc:	f8c7 310c 	str.w	r3, [r7, #268]
   149e0:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   149e4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   149e8:	f8c7 3758 	str.w	r3, [r7, #1880]
   149ec:	f04f 0038 	mov.w	r0, #56	; 0x38
   149f0:	f7fa f89a 	bl	eb28 <_Znwj>
   149f4:	4603      	mov	r3, r0
   149f6:	f8c7 3110 	str.w	r3, [r7, #272]
   149fa:	f8d7 3110 	ldr.w	r3, [r7, #272]
   149fe:	2b00      	cmp	r3, #0
   14a00:	d01d      	beq.n	14a3e <_ZN9Krabi2015C2Eb+0xc06>
   14a02:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14a06:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   14a0a:	681b      	ldr	r3, [r3, #0]
   14a0c:	6b5b      	ldr	r3, [r3, #52]
   14a0e:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
   14a12:	9300      	str	r3, [sp, #0]
   14a14:	f04f 0313 	mov.w	r3, #19	; 0x13
   14a18:	9301      	str	r3, [sp, #4]
   14a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14a1e:	9302      	str	r3, [sp, #8]
   14a20:	f04f 0300 	mov.w	r3, #0	; 0x0
   14a24:	9303      	str	r3, [sp, #12]
   14a26:	f8d7 0110 	ldr.w	r0, [r7, #272]
   14a2a:	ca06      	ldmia	r2!, {r1, r2}
   14a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]
   14a30:	f7fc f99a 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14a34:	f8d7 3110 	ldr.w	r3, [r7, #272]
   14a38:	f8c7 3114 	str.w	r3, [r7, #276]
   14a3c:	e003      	b.n	14a46 <_ZN9Krabi2015C2Eb+0xc0e>
   14a3e:	f8d7 3110 	ldr.w	r3, [r7, #272]
   14a42:	f8c7 3114 	str.w	r3, [r7, #276]
   14a46:	f8d7 3114 	ldr.w	r3, [r7, #276]
   14a4a:	f8c7 37a0 	str.w	r3, [r7, #1952]
    Etape* etape18 = new Etape(Position(870, 1355, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::RAMASSER_PIED, -1, 0);
   14a4e:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
   14a52:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14a56:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14a5a:	781b      	ldrb	r3, [r3, #0]
   14a5c:	4610      	mov	r0, r2
   14a5e:	4933      	ldr	r1, [pc, #204]	(14b2c <_ZN9Krabi2015C2Eb+0xcf4>)
   14a60:	4a33      	ldr	r2, [pc, #204]	(14b30 <_ZN9Krabi2015C2Eb+0xcf8>)
   14a62:	f7fa f9c7 	bl	edf4 <_ZN8PositionC1Effb>
   14a66:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14a6a:	f8c7 3118 	str.w	r3, [r7, #280]
   14a6e:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14a72:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14a76:	f8c7 3758 	str.w	r3, [r7, #1880]
   14a7a:	f04f 0038 	mov.w	r0, #56	; 0x38
   14a7e:	f7fa f853 	bl	eb28 <_Znwj>
   14a82:	4603      	mov	r3, r0
   14a84:	f8c7 311c 	str.w	r3, [r7, #284]
   14a88:	f8d7 311c 	ldr.w	r3, [r7, #284]
   14a8c:	2b00      	cmp	r3, #0
   14a8e:	d051      	beq.n	14b34 <_ZN9Krabi2015C2Eb+0xcfc>
   14a90:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14a94:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   14a98:	681b      	ldr	r3, [r3, #0]
   14a9a:	6b5b      	ldr	r3, [r3, #52]
   14a9c:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
   14aa0:	9300      	str	r3, [sp, #0]
   14aa2:	f04f 0313 	mov.w	r3, #19	; 0x13
   14aa6:	9301      	str	r3, [sp, #4]
   14aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14aac:	9302      	str	r3, [sp, #8]
   14aae:	f04f 0300 	mov.w	r3, #0	; 0x0
   14ab2:	9303      	str	r3, [sp, #12]
   14ab4:	f8d7 011c 	ldr.w	r0, [r7, #284]
   14ab8:	ca06      	ldmia	r2!, {r1, r2}
   14aba:	f8d7 3118 	ldr.w	r3, [r7, #280]
   14abe:	f7fc f953 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14ac2:	f8d7 311c 	ldr.w	r3, [r7, #284]
   14ac6:	f8c7 3120 	str.w	r3, [r7, #288]
   14aca:	e037      	b.n	14b3c <_ZN9Krabi2015C2Eb+0xd04>
   14acc:	00024160 	.word	0x00024160
   14ad0:	00000000 	.word	0x00000000
   14ad4:	41f00000 	.word	0x41f00000
   14ad8:	437a0000 	.word	0x437a0000
   14adc:	447a0000 	.word	0x447a0000
   14ae0:	442f0000 	.word	0x442f0000
   14ae4:	44510000 	.word	0x44510000
   14ae8:	44de8000 	.word	0x44de8000
   14aec:	436c0000 	.word	0x436c0000
   14af0:	43c80000 	.word	0x43c80000
   14af4:	451c4000 	.word	0x451c4000
   14af8:	450fc000 	.word	0x450fc000
   14afc:	44dac000 	.word	0x44dac000
   14b00:	44638000 	.word	0x44638000
   14b04:	444f8000 	.word	0x444f8000
   14b08:	44bb8000 	.word	0x44bb8000
   14b0c:	44ce4000 	.word	0x44ce4000
   14b10:	4502a000 	.word	0x4502a000
   14b14:	452be000 	.word	0x452be000
   14b18:	42b40000 	.word	0x42b40000
   14b1c:	44e74000 	.word	0x44e74000
   14b20:	43480000 	.word	0x43480000
   14b24:	44548000 	.word	0x44548000
   14b28:	42c80000 	.word	0x42c80000
   14b2c:	44598000 	.word	0x44598000
   14b30:	44a96000 	.word	0x44a96000
   14b34:	f8d7 311c 	ldr.w	r3, [r7, #284]
   14b38:	f8c7 3120 	str.w	r3, [r7, #288]
   14b3c:	f8d7 3120 	ldr.w	r3, [r7, #288]
   14b40:	f8c7 37a4 	str.w	r3, [r7, #1956]
    Etape* etape19 = new Etape(Position(1100, 1770, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::RAMASSER_PIED, -1, 0);
   14b44:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
   14b48:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14b4c:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14b50:	781b      	ldrb	r3, [r3, #0]
   14b52:	4610      	mov	r0, r2
   14b54:	f8df 1bd8 	ldr.w	r1, [pc, #3032]	; 15730 <_ZN9Krabi2015C2Eb+0x18f8>
   14b58:	f8df 2bd8 	ldr.w	r2, [pc, #3032]	; 15734 <_ZN9Krabi2015C2Eb+0x18fc>
   14b5c:	f7fa f94a 	bl	edf4 <_ZN8PositionC1Effb>
   14b60:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14b64:	f8c7 3124 	str.w	r3, [r7, #292]
   14b68:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14b6c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14b70:	f8c7 3758 	str.w	r3, [r7, #1880]
   14b74:	f04f 0038 	mov.w	r0, #56	; 0x38
   14b78:	f7f9 ffd6 	bl	eb28 <_Znwj>
   14b7c:	4603      	mov	r3, r0
   14b7e:	f8c7 3128 	str.w	r3, [r7, #296]
   14b82:	f8d7 3128 	ldr.w	r3, [r7, #296]
   14b86:	2b00      	cmp	r3, #0
   14b88:	d01d      	beq.n	14bc6 <_ZN9Krabi2015C2Eb+0xd8e>
   14b8a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14b8e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   14b92:	681b      	ldr	r3, [r3, #0]
   14b94:	6b5b      	ldr	r3, [r3, #52]
   14b96:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
   14b9a:	9300      	str	r3, [sp, #0]
   14b9c:	f04f 0313 	mov.w	r3, #19	; 0x13
   14ba0:	9301      	str	r3, [sp, #4]
   14ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14ba6:	9302      	str	r3, [sp, #8]
   14ba8:	f04f 0300 	mov.w	r3, #0	; 0x0
   14bac:	9303      	str	r3, [sp, #12]
   14bae:	f8d7 0128 	ldr.w	r0, [r7, #296]
   14bb2:	ca06      	ldmia	r2!, {r1, r2}
   14bb4:	f8d7 3124 	ldr.w	r3, [r7, #292]
   14bb8:	f7fc f8d6 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14bbc:	f8d7 3128 	ldr.w	r3, [r7, #296]
   14bc0:	f8c7 312c 	str.w	r3, [r7, #300]
   14bc4:	e003      	b.n	14bce <_ZN9Krabi2015C2Eb+0xd96>
   14bc6:	f8d7 3128 	ldr.w	r3, [r7, #296]
   14bca:	f8c7 312c 	str.w	r3, [r7, #300]
   14bce:	f8d7 312c 	ldr.w	r3, [r7, #300]
   14bd2:	f8c7 37a8 	str.w	r3, [r7, #1960]
    Etape* etape20 = new Etape(Position(1300, 1400, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::RAMASSER_PIED, -1, 0);
   14bd6:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
   14bda:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14bde:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14be2:	781b      	ldrb	r3, [r3, #0]
   14be4:	4610      	mov	r0, r2
   14be6:	f8df 1b50 	ldr.w	r1, [pc, #2896]	; 15738 <_ZN9Krabi2015C2Eb+0x1900>
   14bea:	f8df 2b50 	ldr.w	r2, [pc, #2896]	; 1573c <_ZN9Krabi2015C2Eb+0x1904>
   14bee:	f7fa f901 	bl	edf4 <_ZN8PositionC1Effb>
   14bf2:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14bf6:	f8c7 3130 	str.w	r3, [r7, #304]
   14bfa:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14bfe:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14c02:	f8c7 3758 	str.w	r3, [r7, #1880]
   14c06:	f04f 0038 	mov.w	r0, #56	; 0x38
   14c0a:	f7f9 ff8d 	bl	eb28 <_Znwj>
   14c0e:	4603      	mov	r3, r0
   14c10:	f8c7 3134 	str.w	r3, [r7, #308]
   14c14:	f8d7 3134 	ldr.w	r3, [r7, #308]
   14c18:	2b00      	cmp	r3, #0
   14c1a:	d01d      	beq.n	14c58 <_ZN9Krabi2015C2Eb+0xe20>
   14c1c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14c20:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   14c24:	681b      	ldr	r3, [r3, #0]
   14c26:	6b5b      	ldr	r3, [r3, #52]
   14c28:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
   14c2c:	9300      	str	r3, [sp, #0]
   14c2e:	f04f 0313 	mov.w	r3, #19	; 0x13
   14c32:	9301      	str	r3, [sp, #4]
   14c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14c38:	9302      	str	r3, [sp, #8]
   14c3a:	f04f 0300 	mov.w	r3, #0	; 0x0
   14c3e:	9303      	str	r3, [sp, #12]
   14c40:	f8d7 0134 	ldr.w	r0, [r7, #308]
   14c44:	ca06      	ldmia	r2!, {r1, r2}
   14c46:	f8d7 3130 	ldr.w	r3, [r7, #304]
   14c4a:	f7fc f88d 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14c4e:	f8d7 3134 	ldr.w	r3, [r7, #308]
   14c52:	f8c7 3138 	str.w	r3, [r7, #312]
   14c56:	e003      	b.n	14c60 <_ZN9Krabi2015C2Eb+0xe28>
   14c58:	f8d7 3134 	ldr.w	r3, [r7, #308]
   14c5c:	f8c7 3138 	str.w	r3, [r7, #312]
   14c60:	f8d7 3138 	ldr.w	r3, [r7, #312]
   14c64:	f8c7 37ac 	str.w	r3, [r7, #1964]
    Etape* etape21 = new Etape(Position(1250, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   14c68:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
   14c6c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14c70:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14c74:	781b      	ldrb	r3, [r3, #0]
   14c76:	4610      	mov	r0, r2
   14c78:	f8df 1ac4 	ldr.w	r1, [pc, #2756]	; 15740 <_ZN9Krabi2015C2Eb+0x1908>
   14c7c:	f8df 2ac4 	ldr.w	r2, [pc, #2756]	; 15744 <_ZN9Krabi2015C2Eb+0x190c>
   14c80:	f7fa f8b8 	bl	edf4 <_ZN8PositionC1Effb>
   14c84:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14c88:	f8c7 313c 	str.w	r3, [r7, #316]
   14c8c:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14c90:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14c94:	f8c7 3758 	str.w	r3, [r7, #1880]
   14c98:	f04f 0038 	mov.w	r0, #56	; 0x38
   14c9c:	f7f9 ff44 	bl	eb28 <_Znwj>
   14ca0:	4603      	mov	r3, r0
   14ca2:	f8c7 3140 	str.w	r3, [r7, #320]
   14ca6:	f8d7 3140 	ldr.w	r3, [r7, #320]
   14caa:	2b00      	cmp	r3, #0
   14cac:	d01d      	beq.n	14cea <_ZN9Krabi2015C2Eb+0xeb2>
   14cae:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14cb2:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   14cb6:	681b      	ldr	r3, [r3, #0]
   14cb8:	6b5b      	ldr	r3, [r3, #52]
   14cba:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
   14cbe:	9300      	str	r3, [sp, #0]
   14cc0:	f04f 0314 	mov.w	r3, #20	; 0x14
   14cc4:	9301      	str	r3, [sp, #4]
   14cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14cca:	9302      	str	r3, [sp, #8]
   14ccc:	f04f 0300 	mov.w	r3, #0	; 0x0
   14cd0:	9303      	str	r3, [sp, #12]
   14cd2:	f8d7 0140 	ldr.w	r0, [r7, #320]
   14cd6:	ca06      	ldmia	r2!, {r1, r2}
   14cd8:	f8d7 313c 	ldr.w	r3, [r7, #316]
   14cdc:	f7fc f844 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14ce0:	f8d7 3140 	ldr.w	r3, [r7, #320]
   14ce4:	f8c7 3144 	str.w	r3, [r7, #324]
   14ce8:	e003      	b.n	14cf2 <_ZN9Krabi2015C2Eb+0xeba>
   14cea:	f8d7 3140 	ldr.w	r3, [r7, #320]
   14cee:	f8c7 3144 	str.w	r3, [r7, #324]
   14cf2:	f8d7 3144 	ldr.w	r3, [r7, #324]
   14cf6:	f8c7 37b0 	str.w	r3, [r7, #1968]
    Etape* etape22 = new Etape(Position(1750, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   14cfa:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
   14cfe:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14d02:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14d06:	781b      	ldrb	r3, [r3, #0]
   14d08:	4610      	mov	r0, r2
   14d0a:	f8df 1a3c 	ldr.w	r1, [pc, #2620]	; 15748 <_ZN9Krabi2015C2Eb+0x1910>
   14d0e:	f8df 2a34 	ldr.w	r2, [pc, #2612]	; 15744 <_ZN9Krabi2015C2Eb+0x190c>
   14d12:	f7fa f86f 	bl	edf4 <_ZN8PositionC1Effb>
   14d16:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14d1a:	f8c7 3148 	str.w	r3, [r7, #328]
   14d1e:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14d22:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14d26:	f8c7 3758 	str.w	r3, [r7, #1880]
   14d2a:	f04f 0038 	mov.w	r0, #56	; 0x38
   14d2e:	f7f9 fefb 	bl	eb28 <_Znwj>
   14d32:	4603      	mov	r3, r0
   14d34:	f8c7 314c 	str.w	r3, [r7, #332]
   14d38:	f8d7 314c 	ldr.w	r3, [r7, #332]
   14d3c:	2b00      	cmp	r3, #0
   14d3e:	d01d      	beq.n	14d7c <_ZN9Krabi2015C2Eb+0xf44>
   14d40:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14d44:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   14d48:	681b      	ldr	r3, [r3, #0]
   14d4a:	6b5b      	ldr	r3, [r3, #52]
   14d4c:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
   14d50:	9300      	str	r3, [sp, #0]
   14d52:	f04f 0314 	mov.w	r3, #20	; 0x14
   14d56:	9301      	str	r3, [sp, #4]
   14d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14d5c:	9302      	str	r3, [sp, #8]
   14d5e:	f04f 0300 	mov.w	r3, #0	; 0x0
   14d62:	9303      	str	r3, [sp, #12]
   14d64:	f8d7 014c 	ldr.w	r0, [r7, #332]
   14d68:	ca06      	ldmia	r2!, {r1, r2}
   14d6a:	f8d7 3148 	ldr.w	r3, [r7, #328]
   14d6e:	f7fb fffb 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14d72:	f8d7 314c 	ldr.w	r3, [r7, #332]
   14d76:	f8c7 3150 	str.w	r3, [r7, #336]
   14d7a:	e003      	b.n	14d84 <_ZN9Krabi2015C2Eb+0xf4c>
   14d7c:	f8d7 314c 	ldr.w	r3, [r7, #332]
   14d80:	f8c7 3150 	str.w	r3, [r7, #336]
   14d84:	f8d7 3150 	ldr.w	r3, [r7, #336]
   14d88:	f8c7 37b4 	str.w	r3, [r7, #1972]
    Etape* etape23 = new Etape(Position(1500, 850, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   14d8c:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
   14d90:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14d94:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14d98:	781b      	ldrb	r3, [r3, #0]
   14d9a:	4610      	mov	r0, r2
   14d9c:	f8df 19ac 	ldr.w	r1, [pc, #2476]	; 1574c <_ZN9Krabi2015C2Eb+0x1914>
   14da0:	f8df 29ac 	ldr.w	r2, [pc, #2476]	; 15750 <_ZN9Krabi2015C2Eb+0x1918>
   14da4:	f7fa f826 	bl	edf4 <_ZN8PositionC1Effb>
   14da8:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14dac:	f8c7 3154 	str.w	r3, [r7, #340]
   14db0:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14db4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14db8:	f8c7 3758 	str.w	r3, [r7, #1880]
   14dbc:	f04f 0038 	mov.w	r0, #56	; 0x38
   14dc0:	f7f9 feb2 	bl	eb28 <_Znwj>
   14dc4:	4603      	mov	r3, r0
   14dc6:	f8c7 3158 	str.w	r3, [r7, #344]
   14dca:	f8d7 3158 	ldr.w	r3, [r7, #344]
   14dce:	2b00      	cmp	r3, #0
   14dd0:	d01d      	beq.n	14e0e <_ZN9Krabi2015C2Eb+0xfd6>
   14dd2:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14dd6:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   14dda:	681b      	ldr	r3, [r3, #0]
   14ddc:	6b5b      	ldr	r3, [r3, #52]
   14dde:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
   14de2:	9300      	str	r3, [sp, #0]
   14de4:	f04f 0300 	mov.w	r3, #0	; 0x0
   14de8:	9301      	str	r3, [sp, #4]
   14dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14dee:	9302      	str	r3, [sp, #8]
   14df0:	f04f 0300 	mov.w	r3, #0	; 0x0
   14df4:	9303      	str	r3, [sp, #12]
   14df6:	f8d7 0158 	ldr.w	r0, [r7, #344]
   14dfa:	ca06      	ldmia	r2!, {r1, r2}
   14dfc:	f8d7 3154 	ldr.w	r3, [r7, #340]
   14e00:	f7fb ffb2 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14e04:	f8d7 3158 	ldr.w	r3, [r7, #344]
   14e08:	f8c7 315c 	str.w	r3, [r7, #348]
   14e0c:	e003      	b.n	14e16 <_ZN9Krabi2015C2Eb+0xfde>
   14e0e:	f8d7 3158 	ldr.w	r3, [r7, #344]
   14e12:	f8c7 315c 	str.w	r3, [r7, #348]
   14e16:	f8d7 315c 	ldr.w	r3, [r7, #348]
   14e1a:	f8c7 37b8 	str.w	r3, [r7, #1976]
    Etape* etape24 = new Etape(Position(2300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   14e1e:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
   14e22:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14e26:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14e2a:	781b      	ldrb	r3, [r3, #0]
   14e2c:	4610      	mov	r0, r2
   14e2e:	f8df 1924 	ldr.w	r1, [pc, #2340]	; 15754 <_ZN9Krabi2015C2Eb+0x191c>
   14e32:	f8df 2918 	ldr.w	r2, [pc, #2328]	; 1574c <_ZN9Krabi2015C2Eb+0x1914>
   14e36:	f7f9 ffdd 	bl	edf4 <_ZN8PositionC1Effb>
   14e3a:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14e3e:	f8c7 3160 	str.w	r3, [r7, #352]
   14e42:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14e46:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14e4a:	f8c7 3758 	str.w	r3, [r7, #1880]
   14e4e:	f04f 0038 	mov.w	r0, #56	; 0x38
   14e52:	f7f9 fe69 	bl	eb28 <_Znwj>
   14e56:	4603      	mov	r3, r0
   14e58:	f8c7 3164 	str.w	r3, [r7, #356]
   14e5c:	f8d7 3164 	ldr.w	r3, [r7, #356]
   14e60:	2b00      	cmp	r3, #0
   14e62:	d01d      	beq.n	14ea0 <_ZN9Krabi2015C2Eb+0x1068>
   14e64:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14e68:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   14e6c:	681b      	ldr	r3, [r3, #0]
   14e6e:	6b5b      	ldr	r3, [r3, #52]
   14e70:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
   14e74:	9300      	str	r3, [sp, #0]
   14e76:	f04f 0300 	mov.w	r3, #0	; 0x0
   14e7a:	9301      	str	r3, [sp, #4]
   14e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14e80:	9302      	str	r3, [sp, #8]
   14e82:	f04f 0300 	mov.w	r3, #0	; 0x0
   14e86:	9303      	str	r3, [sp, #12]
   14e88:	f8d7 0164 	ldr.w	r0, [r7, #356]
   14e8c:	ca06      	ldmia	r2!, {r1, r2}
   14e8e:	f8d7 3160 	ldr.w	r3, [r7, #352]
   14e92:	f7fb ff69 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14e96:	f8d7 3164 	ldr.w	r3, [r7, #356]
   14e9a:	f8c7 3168 	str.w	r3, [r7, #360]
   14e9e:	e003      	b.n	14ea8 <_ZN9Krabi2015C2Eb+0x1070>
   14ea0:	f8d7 3164 	ldr.w	r3, [r7, #356]
   14ea4:	f8c7 3168 	str.w	r3, [r7, #360]
   14ea8:	f8d7 3168 	ldr.w	r3, [r7, #360]
   14eac:	f8c7 37bc 	str.w	r3, [r7, #1980]
    Etape* etape25 = new Etape(Position(2710, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPOSE_GOBELET, -1, 0);
   14eb0:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
   14eb4:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14eb8:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14ebc:	781b      	ldrb	r3, [r3, #0]
   14ebe:	4610      	mov	r0, r2
   14ec0:	f8df 1894 	ldr.w	r1, [pc, #2196]	; 15758 <_ZN9Krabi2015C2Eb+0x1920>
   14ec4:	f8df 2884 	ldr.w	r2, [pc, #2180]	; 1574c <_ZN9Krabi2015C2Eb+0x1914>
   14ec8:	f7f9 ff94 	bl	edf4 <_ZN8PositionC1Effb>
   14ecc:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14ed0:	f8c7 316c 	str.w	r3, [r7, #364]
   14ed4:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14ed8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14edc:	f8c7 3758 	str.w	r3, [r7, #1880]
   14ee0:	f04f 0038 	mov.w	r0, #56	; 0x38
   14ee4:	f7f9 fe20 	bl	eb28 <_Znwj>
   14ee8:	4603      	mov	r3, r0
   14eea:	f8c7 3170 	str.w	r3, [r7, #368]
   14eee:	f8d7 3170 	ldr.w	r3, [r7, #368]
   14ef2:	2b00      	cmp	r3, #0
   14ef4:	d01d      	beq.n	14f32 <_ZN9Krabi2015C2Eb+0x10fa>
   14ef6:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14efa:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   14efe:	681b      	ldr	r3, [r3, #0]
   14f00:	6b5b      	ldr	r3, [r3, #52]
   14f02:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
   14f06:	9300      	str	r3, [sp, #0]
   14f08:	f04f 0316 	mov.w	r3, #22	; 0x16
   14f0c:	9301      	str	r3, [sp, #4]
   14f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14f12:	9302      	str	r3, [sp, #8]
   14f14:	f04f 0300 	mov.w	r3, #0	; 0x0
   14f18:	9303      	str	r3, [sp, #12]
   14f1a:	f8d7 0170 	ldr.w	r0, [r7, #368]
   14f1e:	ca06      	ldmia	r2!, {r1, r2}
   14f20:	f8d7 316c 	ldr.w	r3, [r7, #364]
   14f24:	f7fb ff20 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14f28:	f8d7 3170 	ldr.w	r3, [r7, #368]
   14f2c:	f8c7 3174 	str.w	r3, [r7, #372]
   14f30:	e003      	b.n	14f3a <_ZN9Krabi2015C2Eb+0x1102>
   14f32:	f8d7 3170 	ldr.w	r3, [r7, #368]
   14f36:	f8c7 3174 	str.w	r3, [r7, #372]
   14f3a:	f8d7 3174 	ldr.w	r3, [r7, #372]
   14f3e:	f8c7 37c0 	str.w	r3, [r7, #1984]
    Etape* etape26 = new Etape(Position(2630, 460, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPOSE_GOBELET, -1, 0);
   14f42:	f507 7240 	add.w	r2, r7, #768	; 0x300
   14f46:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14f4a:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14f4e:	781b      	ldrb	r3, [r3, #0]
   14f50:	4610      	mov	r0, r2
   14f52:	f8df 1808 	ldr.w	r1, [pc, #2056]	; 1575c <_ZN9Krabi2015C2Eb+0x1924>
   14f56:	f8df 2808 	ldr.w	r2, [pc, #2056]	; 15760 <_ZN9Krabi2015C2Eb+0x1928>
   14f5a:	f7f9 ff4b 	bl	edf4 <_ZN8PositionC1Effb>
   14f5e:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14f62:	f8c7 3178 	str.w	r3, [r7, #376]
   14f66:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14f6a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14f6e:	f8c7 3758 	str.w	r3, [r7, #1880]
   14f72:	f04f 0038 	mov.w	r0, #56	; 0x38
   14f76:	f7f9 fdd7 	bl	eb28 <_Znwj>
   14f7a:	4603      	mov	r3, r0
   14f7c:	f8c7 317c 	str.w	r3, [r7, #380]
   14f80:	f8d7 317c 	ldr.w	r3, [r7, #380]
   14f84:	2b00      	cmp	r3, #0
   14f86:	d01d      	beq.n	14fc4 <_ZN9Krabi2015C2Eb+0x118c>
   14f88:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14f8c:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   14f90:	681b      	ldr	r3, [r3, #0]
   14f92:	6b5b      	ldr	r3, [r3, #52]
   14f94:	f507 7240 	add.w	r2, r7, #768	; 0x300
   14f98:	9300      	str	r3, [sp, #0]
   14f9a:	f04f 0316 	mov.w	r3, #22	; 0x16
   14f9e:	9301      	str	r3, [sp, #4]
   14fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14fa4:	9302      	str	r3, [sp, #8]
   14fa6:	f04f 0300 	mov.w	r3, #0	; 0x0
   14faa:	9303      	str	r3, [sp, #12]
   14fac:	f8d7 017c 	ldr.w	r0, [r7, #380]
   14fb0:	ca06      	ldmia	r2!, {r1, r2}
   14fb2:	f8d7 3178 	ldr.w	r3, [r7, #376]
   14fb6:	f7fb fed7 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14fba:	f8d7 317c 	ldr.w	r3, [r7, #380]
   14fbe:	f8c7 3180 	str.w	r3, [r7, #384]
   14fc2:	e003      	b.n	14fcc <_ZN9Krabi2015C2Eb+0x1194>
   14fc4:	f8d7 317c 	ldr.w	r3, [r7, #380]
   14fc8:	f8c7 3180 	str.w	r3, [r7, #384]
   14fcc:	f8d7 3180 	ldr.w	r3, [r7, #384]
   14fd0:	f8c7 37c4 	str.w	r3, [r7, #1988]
    Etape* etape27 = new Etape(Position(1100, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   14fd4:	f507 7242 	add.w	r2, r7, #776	; 0x308
   14fd8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   14fdc:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   14fe0:	781b      	ldrb	r3, [r3, #0]
   14fe2:	4610      	mov	r0, r2
   14fe4:	f8df 1748 	ldr.w	r1, [pc, #1864]	; 15730 <_ZN9Krabi2015C2Eb+0x18f8>
   14fe8:	f8df 2778 	ldr.w	r2, [pc, #1912]	; 15764 <_ZN9Krabi2015C2Eb+0x192c>
   14fec:	f7f9 ff02 	bl	edf4 <_ZN8PositionC1Effb>
   14ff0:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14ff4:	f8c7 3184 	str.w	r3, [r7, #388]
   14ff8:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   14ffc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   15000:	f8c7 3758 	str.w	r3, [r7, #1880]
   15004:	f04f 0038 	mov.w	r0, #56	; 0x38
   15008:	f7f9 fd8e 	bl	eb28 <_Znwj>
   1500c:	4603      	mov	r3, r0
   1500e:	f8c7 3188 	str.w	r3, [r7, #392]
   15012:	f8d7 3188 	ldr.w	r3, [r7, #392]
   15016:	2b00      	cmp	r3, #0
   15018:	d01d      	beq.n	15056 <_ZN9Krabi2015C2Eb+0x121e>
   1501a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1501e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15022:	681b      	ldr	r3, [r3, #0]
   15024:	6b5b      	ldr	r3, [r3, #52]
   15026:	f507 7242 	add.w	r2, r7, #776	; 0x308
   1502a:	9300      	str	r3, [sp, #0]
   1502c:	f04f 0300 	mov.w	r3, #0	; 0x0
   15030:	9301      	str	r3, [sp, #4]
   15032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15036:	9302      	str	r3, [sp, #8]
   15038:	f04f 0300 	mov.w	r3, #0	; 0x0
   1503c:	9303      	str	r3, [sp, #12]
   1503e:	f8d7 0188 	ldr.w	r0, [r7, #392]
   15042:	ca06      	ldmia	r2!, {r1, r2}
   15044:	f8d7 3184 	ldr.w	r3, [r7, #388]
   15048:	f7fb fe8e 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1504c:	f8d7 3188 	ldr.w	r3, [r7, #392]
   15050:	f8c7 318c 	str.w	r3, [r7, #396]
   15054:	e003      	b.n	1505e <_ZN9Krabi2015C2Eb+0x1226>
   15056:	f8d7 3188 	ldr.w	r3, [r7, #392]
   1505a:	f8c7 318c 	str.w	r3, [r7, #396]
   1505e:	f8d7 318c 	ldr.w	r3, [r7, #396]
   15062:	f8c7 37c8 	str.w	r3, [r7, #1992]
    Etape* etape28 = new Etape(Position(560, 1290, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   15066:	f507 7244 	add.w	r2, r7, #784	; 0x310
   1506a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1506e:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15072:	781b      	ldrb	r3, [r3, #0]
   15074:	4610      	mov	r0, r2
   15076:	f8df 16f0 	ldr.w	r1, [pc, #1776]	; 15768 <_ZN9Krabi2015C2Eb+0x1930>
   1507a:	f8df 26f0 	ldr.w	r2, [pc, #1776]	; 1576c <_ZN9Krabi2015C2Eb+0x1934>
   1507e:	f7f9 feb9 	bl	edf4 <_ZN8PositionC1Effb>
   15082:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   15086:	f8c7 3190 	str.w	r3, [r7, #400]
   1508a:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1508e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   15092:	f8c7 3758 	str.w	r3, [r7, #1880]
   15096:	f04f 0038 	mov.w	r0, #56	; 0x38
   1509a:	f7f9 fd45 	bl	eb28 <_Znwj>
   1509e:	4603      	mov	r3, r0
   150a0:	f8c7 3194 	str.w	r3, [r7, #404]
   150a4:	f8d7 3194 	ldr.w	r3, [r7, #404]
   150a8:	2b00      	cmp	r3, #0
   150aa:	d01d      	beq.n	150e8 <_ZN9Krabi2015C2Eb+0x12b0>
   150ac:	f507 730c 	add.w	r3, r7, #560	; 0x230
   150b0:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   150b4:	681b      	ldr	r3, [r3, #0]
   150b6:	6b5b      	ldr	r3, [r3, #52]
   150b8:	f507 7244 	add.w	r2, r7, #784	; 0x310
   150bc:	9300      	str	r3, [sp, #0]
   150be:	f04f 0300 	mov.w	r3, #0	; 0x0
   150c2:	9301      	str	r3, [sp, #4]
   150c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   150c8:	9302      	str	r3, [sp, #8]
   150ca:	f04f 0300 	mov.w	r3, #0	; 0x0
   150ce:	9303      	str	r3, [sp, #12]
   150d0:	f8d7 0194 	ldr.w	r0, [r7, #404]
   150d4:	ca06      	ldmia	r2!, {r1, r2}
   150d6:	f8d7 3190 	ldr.w	r3, [r7, #400]
   150da:	f7fb fe45 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   150de:	f8d7 3194 	ldr.w	r3, [r7, #404]
   150e2:	f8c7 3198 	str.w	r3, [r7, #408]
   150e6:	e003      	b.n	150f0 <_ZN9Krabi2015C2Eb+0x12b8>
   150e8:	f8d7 3194 	ldr.w	r3, [r7, #404]
   150ec:	f8c7 3198 	str.w	r3, [r7, #408]
   150f0:	f8d7 3198 	ldr.w	r3, [r7, #408]
   150f4:	f8c7 37cc 	str.w	r3, [r7, #1996]
    Etape* etape29 = new Etape(Position(720, 1600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   150f8:	f507 7246 	add.w	r2, r7, #792	; 0x318
   150fc:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15100:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15104:	781b      	ldrb	r3, [r3, #0]
   15106:	4610      	mov	r0, r2
   15108:	f8df 1664 	ldr.w	r1, [pc, #1636]	; 15770 <_ZN9Krabi2015C2Eb+0x1938>
   1510c:	f8df 2664 	ldr.w	r2, [pc, #1636]	; 15774 <_ZN9Krabi2015C2Eb+0x193c>
   15110:	f7f9 fe70 	bl	edf4 <_ZN8PositionC1Effb>
   15114:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   15118:	f8c7 319c 	str.w	r3, [r7, #412]
   1511c:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   15120:	f103 0301 	add.w	r3, r3, #1	; 0x1
   15124:	f8c7 3758 	str.w	r3, [r7, #1880]
   15128:	f04f 0038 	mov.w	r0, #56	; 0x38
   1512c:	f7f9 fcfc 	bl	eb28 <_Znwj>
   15130:	4603      	mov	r3, r0
   15132:	f8c7 31a0 	str.w	r3, [r7, #416]
   15136:	f8d7 31a0 	ldr.w	r3, [r7, #416]
   1513a:	2b00      	cmp	r3, #0
   1513c:	d01d      	beq.n	1517a <_ZN9Krabi2015C2Eb+0x1342>
   1513e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15142:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15146:	681b      	ldr	r3, [r3, #0]
   15148:	6b5b      	ldr	r3, [r3, #52]
   1514a:	f507 7246 	add.w	r2, r7, #792	; 0x318
   1514e:	9300      	str	r3, [sp, #0]
   15150:	f04f 0300 	mov.w	r3, #0	; 0x0
   15154:	9301      	str	r3, [sp, #4]
   15156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1515a:	9302      	str	r3, [sp, #8]
   1515c:	f04f 0300 	mov.w	r3, #0	; 0x0
   15160:	9303      	str	r3, [sp, #12]
   15162:	f8d7 01a0 	ldr.w	r0, [r7, #416]
   15166:	ca06      	ldmia	r2!, {r1, r2}
   15168:	f8d7 319c 	ldr.w	r3, [r7, #412]
   1516c:	f7fb fdfc 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   15170:	f8d7 31a0 	ldr.w	r3, [r7, #416]
   15174:	f8c7 31a4 	str.w	r3, [r7, #420]
   15178:	e003      	b.n	15182 <_ZN9Krabi2015C2Eb+0x134a>
   1517a:	f8d7 31a0 	ldr.w	r3, [r7, #416]
   1517e:	f8c7 31a4 	str.w	r3, [r7, #420]
   15182:	f8d7 31a4 	ldr.w	r3, [r7, #420]
   15186:	f8c7 37d0 	str.w	r3, [r7, #2000]
    Etape* etape30 = new Etape(Position(420, 1600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1518a:	f507 7248 	add.w	r2, r7, #800	; 0x320
   1518e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15192:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15196:	781b      	ldrb	r3, [r3, #0]
   15198:	4610      	mov	r0, r2
   1519a:	f8df 15dc 	ldr.w	r1, [pc, #1500]	; 15778 <_ZN9Krabi2015C2Eb+0x1940>
   1519e:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 15774 <_ZN9Krabi2015C2Eb+0x193c>
   151a2:	f7f9 fe27 	bl	edf4 <_ZN8PositionC1Effb>
   151a6:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   151aa:	f8c7 31a8 	str.w	r3, [r7, #424]
   151ae:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   151b2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   151b6:	f8c7 3758 	str.w	r3, [r7, #1880]
   151ba:	f04f 0038 	mov.w	r0, #56	; 0x38
   151be:	f7f9 fcb3 	bl	eb28 <_Znwj>
   151c2:	4603      	mov	r3, r0
   151c4:	f8c7 31ac 	str.w	r3, [r7, #428]
   151c8:	f8d7 31ac 	ldr.w	r3, [r7, #428]
   151cc:	2b00      	cmp	r3, #0
   151ce:	d01d      	beq.n	1520c <_ZN9Krabi2015C2Eb+0x13d4>
   151d0:	f507 730c 	add.w	r3, r7, #560	; 0x230
   151d4:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   151d8:	681b      	ldr	r3, [r3, #0]
   151da:	6b5b      	ldr	r3, [r3, #52]
   151dc:	f507 7248 	add.w	r2, r7, #800	; 0x320
   151e0:	9300      	str	r3, [sp, #0]
   151e2:	f04f 0300 	mov.w	r3, #0	; 0x0
   151e6:	9301      	str	r3, [sp, #4]
   151e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   151ec:	9302      	str	r3, [sp, #8]
   151ee:	f04f 0300 	mov.w	r3, #0	; 0x0
   151f2:	9303      	str	r3, [sp, #12]
   151f4:	f8d7 01ac 	ldr.w	r0, [r7, #428]
   151f8:	ca06      	ldmia	r2!, {r1, r2}
   151fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   151fe:	f7fb fdb3 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   15202:	f8d7 31ac 	ldr.w	r3, [r7, #428]
   15206:	f8c7 31b0 	str.w	r3, [r7, #432]
   1520a:	e003      	b.n	15214 <_ZN9Krabi2015C2Eb+0x13dc>
   1520c:	f8d7 31ac 	ldr.w	r3, [r7, #428]
   15210:	f8c7 31b0 	str.w	r3, [r7, #432]
   15214:	f8d7 31b0 	ldr.w	r3, [r7, #432]
   15218:	f8c7 37d4 	str.w	r3, [r7, #2004]
    Etape* etape31 = new Etape(Position(300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1521c:	f507 724a 	add.w	r2, r7, #808	; 0x328
   15220:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15224:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15228:	781b      	ldrb	r3, [r3, #0]
   1522a:	4610      	mov	r0, r2
   1522c:	f8df 154c 	ldr.w	r1, [pc, #1356]	; 1577c <_ZN9Krabi2015C2Eb+0x1944>
   15230:	f8df 2518 	ldr.w	r2, [pc, #1304]	; 1574c <_ZN9Krabi2015C2Eb+0x1914>
   15234:	f7f9 fdde 	bl	edf4 <_ZN8PositionC1Effb>
   15238:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1523c:	f8c7 31b4 	str.w	r3, [r7, #436]
   15240:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   15244:	f103 0301 	add.w	r3, r3, #1	; 0x1
   15248:	f8c7 3758 	str.w	r3, [r7, #1880]
   1524c:	f04f 0038 	mov.w	r0, #56	; 0x38
   15250:	f7f9 fc6a 	bl	eb28 <_Znwj>
   15254:	4603      	mov	r3, r0
   15256:	f8c7 31b8 	str.w	r3, [r7, #440]
   1525a:	f8d7 31b8 	ldr.w	r3, [r7, #440]
   1525e:	2b00      	cmp	r3, #0
   15260:	d01d      	beq.n	1529e <_ZN9Krabi2015C2Eb+0x1466>
   15262:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15266:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1526a:	681b      	ldr	r3, [r3, #0]
   1526c:	6b5b      	ldr	r3, [r3, #52]
   1526e:	f507 724a 	add.w	r2, r7, #808	; 0x328
   15272:	9300      	str	r3, [sp, #0]
   15274:	f04f 0300 	mov.w	r3, #0	; 0x0
   15278:	9301      	str	r3, [sp, #4]
   1527a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1527e:	9302      	str	r3, [sp, #8]
   15280:	f04f 0300 	mov.w	r3, #0	; 0x0
   15284:	9303      	str	r3, [sp, #12]
   15286:	f8d7 01b8 	ldr.w	r0, [r7, #440]
   1528a:	ca06      	ldmia	r2!, {r1, r2}
   1528c:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   15290:	f7fb fd6a 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   15294:	f8d7 31b8 	ldr.w	r3, [r7, #440]
   15298:	f8c7 31bc 	str.w	r3, [r7, #444]
   1529c:	e003      	b.n	152a6 <_ZN9Krabi2015C2Eb+0x146e>
   1529e:	f8d7 31b8 	ldr.w	r3, [r7, #440]
   152a2:	f8c7 31bc 	str.w	r3, [r7, #444]
   152a6:	f8d7 31bc 	ldr.w	r3, [r7, #444]
   152aa:	f8c7 37d8 	str.w	r3, [r7, #2008]
    Etape* etape32 = new Etape(Position(400, 430, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   152ae:	f507 724c 	add.w	r2, r7, #816	; 0x330
   152b2:	f507 730c 	add.w	r3, r7, #560	; 0x230
   152b6:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   152ba:	781b      	ldrb	r3, [r3, #0]
   152bc:	4610      	mov	r0, r2
   152be:	f8df 14c0 	ldr.w	r1, [pc, #1216]	; 15780 <_ZN9Krabi2015C2Eb+0x1948>
   152c2:	f8df 24c0 	ldr.w	r2, [pc, #1216]	; 15784 <_ZN9Krabi2015C2Eb+0x194c>
   152c6:	f7f9 fd95 	bl	edf4 <_ZN8PositionC1Effb>
   152ca:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   152ce:	f8c7 31c0 	str.w	r3, [r7, #448]
   152d2:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   152d6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   152da:	f8c7 3758 	str.w	r3, [r7, #1880]
   152de:	f04f 0038 	mov.w	r0, #56	; 0x38
   152e2:	f7f9 fc21 	bl	eb28 <_Znwj>
   152e6:	4603      	mov	r3, r0
   152e8:	f8c7 31c4 	str.w	r3, [r7, #452]
   152ec:	f8d7 31c4 	ldr.w	r3, [r7, #452]
   152f0:	2b00      	cmp	r3, #0
   152f2:	d01d      	beq.n	15330 <_ZN9Krabi2015C2Eb+0x14f8>
   152f4:	f507 730c 	add.w	r3, r7, #560	; 0x230
   152f8:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   152fc:	681b      	ldr	r3, [r3, #0]
   152fe:	6b5b      	ldr	r3, [r3, #52]
   15300:	f507 724c 	add.w	r2, r7, #816	; 0x330
   15304:	9300      	str	r3, [sp, #0]
   15306:	f04f 0300 	mov.w	r3, #0	; 0x0
   1530a:	9301      	str	r3, [sp, #4]
   1530c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15310:	9302      	str	r3, [sp, #8]
   15312:	f04f 0300 	mov.w	r3, #0	; 0x0
   15316:	9303      	str	r3, [sp, #12]
   15318:	f8d7 01c4 	ldr.w	r0, [r7, #452]
   1531c:	ca06      	ldmia	r2!, {r1, r2}
   1531e:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   15322:	f7fb fd21 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   15326:	f8d7 31c4 	ldr.w	r3, [r7, #452]
   1532a:	f8c7 31c8 	str.w	r3, [r7, #456]
   1532e:	e003      	b.n	15338 <_ZN9Krabi2015C2Eb+0x1500>
   15330:	f8d7 31c4 	ldr.w	r3, [r7, #452]
   15334:	f8c7 31c8 	str.w	r3, [r7, #456]
   15338:	f8d7 31c8 	ldr.w	r3, [r7, #456]
   1533c:	f8c7 37dc 	str.w	r3, [r7, #2012]
    Etape* etape33 = new Etape(Position(1110, 1130, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   15340:	f507 724e 	add.w	r2, r7, #824	; 0x338
   15344:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15348:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   1534c:	781b      	ldrb	r3, [r3, #0]
   1534e:	4610      	mov	r0, r2
   15350:	f8df 1434 	ldr.w	r1, [pc, #1076]	; 15788 <_ZN9Krabi2015C2Eb+0x1950>
   15354:	f8df 2434 	ldr.w	r2, [pc, #1076]	; 1578c <_ZN9Krabi2015C2Eb+0x1954>
   15358:	f7f9 fd4c 	bl	edf4 <_ZN8PositionC1Effb>
   1535c:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   15360:	f8c7 31cc 	str.w	r3, [r7, #460]
   15364:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   15368:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1536c:	f8c7 3758 	str.w	r3, [r7, #1880]
   15370:	f04f 0038 	mov.w	r0, #56	; 0x38
   15374:	f7f9 fbd8 	bl	eb28 <_Znwj>
   15378:	4603      	mov	r3, r0
   1537a:	f8c7 31d0 	str.w	r3, [r7, #464]
   1537e:	f8d7 31d0 	ldr.w	r3, [r7, #464]
   15382:	2b00      	cmp	r3, #0
   15384:	d01d      	beq.n	153c2 <_ZN9Krabi2015C2Eb+0x158a>
   15386:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1538a:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1538e:	681b      	ldr	r3, [r3, #0]
   15390:	6b5b      	ldr	r3, [r3, #52]
   15392:	f507 724e 	add.w	r2, r7, #824	; 0x338
   15396:	9300      	str	r3, [sp, #0]
   15398:	f04f 0300 	mov.w	r3, #0	; 0x0
   1539c:	9301      	str	r3, [sp, #4]
   1539e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   153a2:	9302      	str	r3, [sp, #8]
   153a4:	f04f 0300 	mov.w	r3, #0	; 0x0
   153a8:	9303      	str	r3, [sp, #12]
   153aa:	f8d7 01d0 	ldr.w	r0, [r7, #464]
   153ae:	ca06      	ldmia	r2!, {r1, r2}
   153b0:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   153b4:	f7fb fcd8 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   153b8:	f8d7 31d0 	ldr.w	r3, [r7, #464]
   153bc:	f8c7 31d4 	str.w	r3, [r7, #468]
   153c0:	e003      	b.n	153ca <_ZN9Krabi2015C2Eb+0x1592>
   153c2:	f8d7 31d0 	ldr.w	r3, [r7, #464]
   153c6:	f8c7 31d4 	str.w	r3, [r7, #468]
   153ca:	f8d7 31d4 	ldr.w	r3, [r7, #468]
   153ce:	f8c7 37e0 	str.w	r3, [r7, #2016]
    Etape* etape34 = new Etape(Position(1480, 1150, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   153d2:	f507 7250 	add.w	r2, r7, #832	; 0x340
   153d6:	f507 730c 	add.w	r3, r7, #560	; 0x230
   153da:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   153de:	781b      	ldrb	r3, [r3, #0]
   153e0:	4610      	mov	r0, r2
   153e2:	49eb      	ldr	r1, [pc, #940]	(15790 <_ZN9Krabi2015C2Eb+0x1958>)
   153e4:	4aeb      	ldr	r2, [pc, #940]	(15794 <_ZN9Krabi2015C2Eb+0x195c>)
   153e6:	f7f9 fd05 	bl	edf4 <_ZN8PositionC1Effb>
   153ea:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   153ee:	f8c7 31d8 	str.w	r3, [r7, #472]
   153f2:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   153f6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   153fa:	f8c7 3758 	str.w	r3, [r7, #1880]
   153fe:	f04f 0038 	mov.w	r0, #56	; 0x38
   15402:	f7f9 fb91 	bl	eb28 <_Znwj>
   15406:	4603      	mov	r3, r0
   15408:	f8c7 31dc 	str.w	r3, [r7, #476]
   1540c:	f8d7 31dc 	ldr.w	r3, [r7, #476]
   15410:	2b00      	cmp	r3, #0
   15412:	d01d      	beq.n	15450 <_ZN9Krabi2015C2Eb+0x1618>
   15414:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15418:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1541c:	681b      	ldr	r3, [r3, #0]
   1541e:	6b5b      	ldr	r3, [r3, #52]
   15420:	f507 7250 	add.w	r2, r7, #832	; 0x340
   15424:	9300      	str	r3, [sp, #0]
   15426:	f04f 0300 	mov.w	r3, #0	; 0x0
   1542a:	9301      	str	r3, [sp, #4]
   1542c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15430:	9302      	str	r3, [sp, #8]
   15432:	f04f 0300 	mov.w	r3, #0	; 0x0
   15436:	9303      	str	r3, [sp, #12]
   15438:	f8d7 01dc 	ldr.w	r0, [r7, #476]
   1543c:	ca06      	ldmia	r2!, {r1, r2}
   1543e:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   15442:	f7fb fc91 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   15446:	f8d7 31dc 	ldr.w	r3, [r7, #476]
   1544a:	f8c7 31e0 	str.w	r3, [r7, #480]
   1544e:	e003      	b.n	15458 <_ZN9Krabi2015C2Eb+0x1620>
   15450:	f8d7 31dc 	ldr.w	r3, [r7, #476]
   15454:	f8c7 31e0 	str.w	r3, [r7, #480]
   15458:	f8d7 31e0 	ldr.w	r3, [r7, #480]
   1545c:	f8c7 37e4 	str.w	r3, [r7, #2020]
    Etape* etape35 = new Etape(Position(1850, 1160, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   15460:	f507 7252 	add.w	r2, r7, #840	; 0x348
   15464:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15468:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   1546c:	781b      	ldrb	r3, [r3, #0]
   1546e:	4610      	mov	r0, r2
   15470:	49c9      	ldr	r1, [pc, #804]	(15798 <_ZN9Krabi2015C2Eb+0x1960>)
   15472:	4aca      	ldr	r2, [pc, #808]	(1579c <_ZN9Krabi2015C2Eb+0x1964>)
   15474:	f7f9 fcbe 	bl	edf4 <_ZN8PositionC1Effb>
   15478:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1547c:	f8c7 31e4 	str.w	r3, [r7, #484]
   15480:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   15484:	f103 0301 	add.w	r3, r3, #1	; 0x1
   15488:	f8c7 3758 	str.w	r3, [r7, #1880]
   1548c:	f04f 0038 	mov.w	r0, #56	; 0x38
   15490:	f7f9 fb4a 	bl	eb28 <_Znwj>
   15494:	4603      	mov	r3, r0
   15496:	f8c7 31e8 	str.w	r3, [r7, #488]
   1549a:	f8d7 31e8 	ldr.w	r3, [r7, #488]
   1549e:	2b00      	cmp	r3, #0
   154a0:	d01d      	beq.n	154de <_ZN9Krabi2015C2Eb+0x16a6>
   154a2:	f507 730c 	add.w	r3, r7, #560	; 0x230
   154a6:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   154aa:	681b      	ldr	r3, [r3, #0]
   154ac:	6b5b      	ldr	r3, [r3, #52]
   154ae:	f507 7252 	add.w	r2, r7, #840	; 0x348
   154b2:	9300      	str	r3, [sp, #0]
   154b4:	f04f 0300 	mov.w	r3, #0	; 0x0
   154b8:	9301      	str	r3, [sp, #4]
   154ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   154be:	9302      	str	r3, [sp, #8]
   154c0:	f04f 0300 	mov.w	r3, #0	; 0x0
   154c4:	9303      	str	r3, [sp, #12]
   154c6:	f8d7 01e8 	ldr.w	r0, [r7, #488]
   154ca:	ca06      	ldmia	r2!, {r1, r2}
   154cc:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   154d0:	f7fb fc4a 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   154d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]
   154d8:	f8c7 31ec 	str.w	r3, [r7, #492]
   154dc:	e003      	b.n	154e6 <_ZN9Krabi2015C2Eb+0x16ae>
   154de:	f8d7 31e8 	ldr.w	r3, [r7, #488]
   154e2:	f8c7 31ec 	str.w	r3, [r7, #492]
   154e6:	f8d7 31ec 	ldr.w	r3, [r7, #492]
   154ea:	f8c7 37e8 	str.w	r3, [r7, #2024]
    Etape* etape36 = new Etape(Position(1950, 1530, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   154ee:	f507 7254 	add.w	r2, r7, #848	; 0x350
   154f2:	f507 730c 	add.w	r3, r7, #560	; 0x230
   154f6:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   154fa:	781b      	ldrb	r3, [r3, #0]
   154fc:	4610      	mov	r0, r2
   154fe:	49a8      	ldr	r1, [pc, #672]	(157a0 <_ZN9Krabi2015C2Eb+0x1968>)
   15500:	4aa8      	ldr	r2, [pc, #672]	(157a4 <_ZN9Krabi2015C2Eb+0x196c>)
   15502:	f7f9 fc77 	bl	edf4 <_ZN8PositionC1Effb>
   15506:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1550a:	f8c7 31f0 	str.w	r3, [r7, #496]
   1550e:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   15512:	f103 0301 	add.w	r3, r3, #1	; 0x1
   15516:	f8c7 3758 	str.w	r3, [r7, #1880]
   1551a:	f04f 0038 	mov.w	r0, #56	; 0x38
   1551e:	f7f9 fb03 	bl	eb28 <_Znwj>
   15522:	4603      	mov	r3, r0
   15524:	f8c7 31f4 	str.w	r3, [r7, #500]
   15528:	f8d7 31f4 	ldr.w	r3, [r7, #500]
   1552c:	2b00      	cmp	r3, #0
   1552e:	d01d      	beq.n	1556c <_ZN9Krabi2015C2Eb+0x1734>
   15530:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15534:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15538:	681b      	ldr	r3, [r3, #0]
   1553a:	6b5b      	ldr	r3, [r3, #52]
   1553c:	f507 7254 	add.w	r2, r7, #848	; 0x350
   15540:	9300      	str	r3, [sp, #0]
   15542:	f04f 0300 	mov.w	r3, #0	; 0x0
   15546:	9301      	str	r3, [sp, #4]
   15548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1554c:	9302      	str	r3, [sp, #8]
   1554e:	f04f 0300 	mov.w	r3, #0	; 0x0
   15552:	9303      	str	r3, [sp, #12]
   15554:	f8d7 01f4 	ldr.w	r0, [r7, #500]
   15558:	ca06      	ldmia	r2!, {r1, r2}
   1555a:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   1555e:	f7fb fc03 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   15562:	f8d7 31f4 	ldr.w	r3, [r7, #500]
   15566:	f8c7 31f8 	str.w	r3, [r7, #504]
   1556a:	e003      	b.n	15574 <_ZN9Krabi2015C2Eb+0x173c>
   1556c:	f8d7 31f4 	ldr.w	r3, [r7, #500]
   15570:	f8c7 31f8 	str.w	r3, [r7, #504]
   15574:	f8d7 31f8 	ldr.w	r3, [r7, #504]
   15578:	f8c7 37ec 	str.w	r3, [r7, #2028]
    Etape* etape37 = new Etape(Position(1890, 1365, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1557c:	f507 7256 	add.w	r2, r7, #856	; 0x358
   15580:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15584:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15588:	781b      	ldrb	r3, [r3, #0]
   1558a:	4610      	mov	r0, r2
   1558c:	4986      	ldr	r1, [pc, #536]	(157a8 <_ZN9Krabi2015C2Eb+0x1970>)
   1558e:	4a87      	ldr	r2, [pc, #540]	(157ac <_ZN9Krabi2015C2Eb+0x1974>)
   15590:	f7f9 fc30 	bl	edf4 <_ZN8PositionC1Effb>
   15594:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   15598:	f8c7 31fc 	str.w	r3, [r7, #508]
   1559c:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   155a0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   155a4:	f8c7 3758 	str.w	r3, [r7, #1880]
   155a8:	f04f 0038 	mov.w	r0, #56	; 0x38
   155ac:	f7f9 fabc 	bl	eb28 <_Znwj>
   155b0:	4603      	mov	r3, r0
   155b2:	f8c7 3200 	str.w	r3, [r7, #512]
   155b6:	f8d7 3200 	ldr.w	r3, [r7, #512]
   155ba:	2b00      	cmp	r3, #0
   155bc:	d01d      	beq.n	155fa <_ZN9Krabi2015C2Eb+0x17c2>
   155be:	f507 730c 	add.w	r3, r7, #560	; 0x230
   155c2:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   155c6:	681b      	ldr	r3, [r3, #0]
   155c8:	6b5b      	ldr	r3, [r3, #52]
   155ca:	f507 7256 	add.w	r2, r7, #856	; 0x358
   155ce:	9300      	str	r3, [sp, #0]
   155d0:	f04f 0300 	mov.w	r3, #0	; 0x0
   155d4:	9301      	str	r3, [sp, #4]
   155d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   155da:	9302      	str	r3, [sp, #8]
   155dc:	f04f 0300 	mov.w	r3, #0	; 0x0
   155e0:	9303      	str	r3, [sp, #12]
   155e2:	f8d7 0200 	ldr.w	r0, [r7, #512]
   155e6:	ca06      	ldmia	r2!, {r1, r2}
   155e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]
   155ec:	f7fb fbbc 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   155f0:	f8d7 3200 	ldr.w	r3, [r7, #512]
   155f4:	f8c7 3204 	str.w	r3, [r7, #516]
   155f8:	e003      	b.n	15602 <_ZN9Krabi2015C2Eb+0x17ca>
   155fa:	f8d7 3200 	ldr.w	r3, [r7, #512]
   155fe:	f8c7 3204 	str.w	r3, [r7, #516]
   15602:	f8d7 3204 	ldr.w	r3, [r7, #516]
   15606:	f8c7 37f0 	str.w	r3, [r7, #2032]
    Etape* etape38 = new Etape(Position(1000, 750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::TAPIS, -1, 0);
   1560a:	f507 7258 	add.w	r2, r7, #864	; 0x360
   1560e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15612:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15616:	781b      	ldrb	r3, [r3, #0]
   15618:	4610      	mov	r0, r2
   1561a:	4965      	ldr	r1, [pc, #404]	(157b0 <_ZN9Krabi2015C2Eb+0x1978>)
   1561c:	4a65      	ldr	r2, [pc, #404]	(157b4 <_ZN9Krabi2015C2Eb+0x197c>)
   1561e:	f7f9 fbe9 	bl	edf4 <_ZN8PositionC1Effb>
   15622:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   15626:	f8c7 3208 	str.w	r3, [r7, #520]
   1562a:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   1562e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   15632:	f8c7 3758 	str.w	r3, [r7, #1880]
   15636:	f04f 0038 	mov.w	r0, #56	; 0x38
   1563a:	f7f9 fa75 	bl	eb28 <_Znwj>
   1563e:	4603      	mov	r3, r0
   15640:	f8c7 320c 	str.w	r3, [r7, #524]
   15644:	f8d7 320c 	ldr.w	r3, [r7, #524]
   15648:	2b00      	cmp	r3, #0
   1564a:	d01d      	beq.n	15688 <_ZN9Krabi2015C2Eb+0x1850>
   1564c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15650:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15654:	681b      	ldr	r3, [r3, #0]
   15656:	6b5b      	ldr	r3, [r3, #52]
   15658:	f507 7258 	add.w	r2, r7, #864	; 0x360
   1565c:	9300      	str	r3, [sp, #0]
   1565e:	f04f 0315 	mov.w	r3, #21	; 0x15
   15662:	9301      	str	r3, [sp, #4]
   15664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15668:	9302      	str	r3, [sp, #8]
   1566a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1566e:	9303      	str	r3, [sp, #12]
   15670:	f8d7 020c 	ldr.w	r0, [r7, #524]
   15674:	ca06      	ldmia	r2!, {r1, r2}
   15676:	f8d7 3208 	ldr.w	r3, [r7, #520]
   1567a:	f7fb fb75 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1567e:	f8d7 320c 	ldr.w	r3, [r7, #524]
   15682:	f8c7 3210 	str.w	r3, [r7, #528]
   15686:	e003      	b.n	15690 <_ZN9Krabi2015C2Eb+0x1858>
   15688:	f8d7 320c 	ldr.w	r3, [r7, #524]
   1568c:	f8c7 3210 	str.w	r3, [r7, #528]
   15690:	f8d7 3210 	ldr.w	r3, [r7, #528]
   15694:	f8c7 37f4 	str.w	r3, [r7, #2036]
    Etape* etape39 = new Etape(Position(1450, 750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::TAPIS, -1, 0);
   15698:	f507 725a 	add.w	r2, r7, #872	; 0x368
   1569c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   156a0:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   156a4:	781b      	ldrb	r3, [r3, #0]
   156a6:	4610      	mov	r0, r2
   156a8:	4943      	ldr	r1, [pc, #268]	(157b8 <_ZN9Krabi2015C2Eb+0x1980>)
   156aa:	4a42      	ldr	r2, [pc, #264]	(157b4 <_ZN9Krabi2015C2Eb+0x197c>)
   156ac:	f7f9 fba2 	bl	edf4 <_ZN8PositionC1Effb>
   156b0:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   156b4:	f8c7 3214 	str.w	r3, [r7, #532]
   156b8:	f8d7 3758 	ldr.w	r3, [r7, #1880]
   156bc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   156c0:	f8c7 3758 	str.w	r3, [r7, #1880]
   156c4:	f04f 0038 	mov.w	r0, #56	; 0x38
   156c8:	f7f9 fa2e 	bl	eb28 <_Znwj>
   156cc:	4603      	mov	r3, r0
   156ce:	f8c7 3218 	str.w	r3, [r7, #536]
   156d2:	f8d7 3218 	ldr.w	r3, [r7, #536]
   156d6:	2b00      	cmp	r3, #0
   156d8:	d01d      	beq.n	15716 <_ZN9Krabi2015C2Eb+0x18de>
   156da:	f507 730c 	add.w	r3, r7, #560	; 0x230
   156de:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   156e2:	681b      	ldr	r3, [r3, #0]
   156e4:	6b5b      	ldr	r3, [r3, #52]
   156e6:	f507 725a 	add.w	r2, r7, #872	; 0x368
   156ea:	9300      	str	r3, [sp, #0]
   156ec:	f04f 0315 	mov.w	r3, #21	; 0x15
   156f0:	9301      	str	r3, [sp, #4]
   156f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   156f6:	9302      	str	r3, [sp, #8]
   156f8:	f04f 0300 	mov.w	r3, #0	; 0x0
   156fc:	9303      	str	r3, [sp, #12]
   156fe:	f8d7 0218 	ldr.w	r0, [r7, #536]
   15702:	ca06      	ldmia	r2!, {r1, r2}
   15704:	f8d7 3214 	ldr.w	r3, [r7, #532]
   15708:	f7fb fb2e 	bl	10d68 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1570c:	f8d7 3218 	ldr.w	r3, [r7, #536]
   15710:	f8c7 321c 	str.w	r3, [r7, #540]
   15714:	e003      	b.n	1571e <_ZN9Krabi2015C2Eb+0x18e6>
   15716:	f8d7 3218 	ldr.w	r3, [r7, #536]
   1571a:	f8c7 321c 	str.w	r3, [r7, #540]
   1571e:	f8d7 321c 	ldr.w	r3, [r7, #540]
   15722:	f8c7 37f8 	str.w	r3, [r7, #2040]
    Etape* etape42 = new Etape(Position(1450, 750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPOSE_PIED, -1, 0);*/
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h


    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   15726:	f04f 0300 	mov.w	r3, #0	; 0x0
   1572a:	f8c7 37fc 	str.w	r3, [r7, #2044]
   1572e:	e0b9      	b.n	158a4 <_ZN9Krabi2015C2Eb+0x1a6c>
   15730:	44898000 	.word	0x44898000
   15734:	44dd4000 	.word	0x44dd4000
   15738:	44a28000 	.word	0x44a28000
   1573c:	44af0000 	.word	0x44af0000
   15740:	449c4000 	.word	0x449c4000
   15744:	44e10000 	.word	0x44e10000
   15748:	44dac000 	.word	0x44dac000
   1574c:	44bb8000 	.word	0x44bb8000
   15750:	44548000 	.word	0x44548000
   15754:	450fc000 	.word	0x450fc000
   15758:	45296000 	.word	0x45296000
   1575c:	45246000 	.word	0x45246000
   15760:	43e60000 	.word	0x43e60000
   15764:	44ce4000 	.word	0x44ce4000
   15768:	440c0000 	.word	0x440c0000
   1576c:	44a14000 	.word	0x44a14000
   15770:	44340000 	.word	0x44340000
   15774:	44c80000 	.word	0x44c80000
   15778:	43d20000 	.word	0x43d20000
   1577c:	43960000 	.word	0x43960000
   15780:	43c80000 	.word	0x43c80000
   15784:	43d70000 	.word	0x43d70000
   15788:	448ac000 	.word	0x448ac000
   1578c:	448d4000 	.word	0x448d4000
   15790:	44b90000 	.word	0x44b90000
   15794:	448fc000 	.word	0x448fc000
   15798:	44e74000 	.word	0x44e74000
   1579c:	44910000 	.word	0x44910000
   157a0:	44f3c000 	.word	0x44f3c000
   157a4:	44bf4000 	.word	0x44bf4000
   157a8:	44ec4000 	.word	0x44ec4000
   157ac:	44aaa000 	.word	0x44aaa000
   157b0:	447a0000 	.word	0x447a0000
   157b4:	443b8000 	.word	0x443b8000
   157b8:	44b54000 	.word	0x44b54000
    {
        if (tableauEtapesTotal[i]->getState() == -1)
   157bc:	f507 730c 	add.w	r3, r7, #560	; 0x230
   157c0:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   157c4:	681b      	ldr	r3, [r3, #0]
   157c6:	6b5a      	ldr	r2, [r3, #52]
   157c8:	f8d7 37fc 	ldr.w	r3, [r7, #2044]
   157cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   157d0:	4413      	add	r3, r2
   157d2:	681b      	ldr	r3, [r3, #0]
   157d4:	4618      	mov	r0, r3
   157d6:	f7fb f891 	bl	108fc <_ZN5Etape8getStateEv>
   157da:	4603      	mov	r3, r0
   157dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   157e0:	bf14      	ite	ne
   157e2:	2300      	movne	r3, #0
   157e4:	2301      	moveq	r3, #1
   157e6:	b2db      	uxtb	r3, r3
   157e8:	2b00      	cmp	r3, #0
   157ea:	d055      	beq.n	15898 <_ZN9Krabi2015C2Eb+0x1a60>
        {
            actionGoto[i] = ActionGoTo(tableauEtapesTotal[i]->getPosition());
   157ec:	f507 730c 	add.w	r3, r7, #560	; 0x230
   157f0:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   157f4:	681b      	ldr	r3, [r3, #0]
   157f6:	6a99      	ldr	r1, [r3, #40]
   157f8:	f8d7 37fc 	ldr.w	r3, [r7, #2044]
   157fc:	ea4f 1203 	mov.w	r2, r3, lsl #4
   15800:	ea4f 0382 	mov.w	r3, r2, lsl #2
   15804:	ebc2 0303 	rsb	r3, r2, r3
   15808:	eb01 0403 	add.w	r4, r1, r3
   1580c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15810:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15814:	681b      	ldr	r3, [r3, #0]
   15816:	6b5a      	ldr	r2, [r3, #52]
   15818:	f8d7 37fc 	ldr.w	r3, [r7, #2044]
   1581c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15820:	4413      	add	r3, r2
   15822:	681a      	ldr	r2, [r3, #0]
   15824:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
   15828:	4618      	mov	r0, r3
   1582a:	4611      	mov	r1, r2
   1582c:	f7fb f852 	bl	108d4 <_ZN5Etape11getPositionEv>
   15830:	f507 715c 	add.w	r1, r7, #880	; 0x370
   15834:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
   15838:	f8df 3d24 	ldr.w	r3, [pc, #3364]	; 16560 <_ZN9Krabi2015C2Eb+0x2728>
   1583c:	9300      	str	r3, [sp, #0]
   1583e:	4608      	mov	r0, r1
   15840:	ca06      	ldmia	r2!, {r1, r2}
   15842:	f04f 0300 	mov.w	r3, #0	; 0x0
   15846:	f7f9 fffb 	bl	f840 <_ZN10ActionGoToC1E8Positionbf>
   1584a:	f507 735c 	add.w	r3, r7, #880	; 0x370
   1584e:	4620      	mov	r0, r4
   15850:	4619      	mov	r1, r3
   15852:	f009 fbe3 	bl	1f01c <_ZN10ActionGoToaSERKS_>
   15856:	f507 735c 	add.w	r3, r7, #880	; 0x370
   1585a:	4618      	mov	r0, r3
   1585c:	f7f9 ffb8 	bl	f7d0 <_ZN10ActionGoToD1Ev>
            actionEtape[i] = &actionGoto[i];
   15860:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15864:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15868:	681b      	ldr	r3, [r3, #0]
   1586a:	6a5a      	ldr	r2, [r3, #36]
   1586c:	f8d7 37fc 	ldr.w	r3, [r7, #2044]
   15870:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15874:	eb02 0003 	add.w	r0, r2, r3
   15878:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1587c:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15880:	681b      	ldr	r3, [r3, #0]
   15882:	6a99      	ldr	r1, [r3, #40]
   15884:	f8d7 37fc 	ldr.w	r3, [r7, #2044]
   15888:	ea4f 1203 	mov.w	r2, r3, lsl #4
   1588c:	ea4f 0382 	mov.w	r3, r2, lsl #2
   15890:	ebc2 0303 	rsb	r3, r2, r3
   15894:	440b      	add	r3, r1
   15896:	6003      	str	r3, [r0, #0]
    Etape* etape42 = new Etape(Position(1450, 750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPOSE_PIED, -1, 0);*/
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h


    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   15898:	f8d7 37fc 	ldr.w	r3, [r7, #2044]
   1589c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   158a0:	f8c7 37fc 	str.w	r3, [r7, #2044]
   158a4:	f8d7 37fc 	ldr.w	r3, [r7, #2044]
   158a8:	2b27      	cmp	r3, #39
   158aa:	dd87      	ble.n	157bc <_ZN9Krabi2015C2Eb+0x1984>
            actionEtape[i] = &actionGoto[i];
        }

    }

    actionClap[0]= Clap(Position(836, 1780, isYellow),Position(1000, 1780, isYellow));
   158ac:	f507 730c 	add.w	r3, r7, #560	; 0x230
   158b0:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   158b4:	681b      	ldr	r3, [r3, #0]
   158b6:	f103 0448 	add.w	r4, r3, #72	; 0x48
   158ba:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
   158be:	f507 730c 	add.w	r3, r7, #560	; 0x230
   158c2:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   158c6:	781b      	ldrb	r3, [r3, #0]
   158c8:	4610      	mov	r0, r2
   158ca:	f8df 1c98 	ldr.w	r1, [pc, #3224]	; 16564 <_ZN9Krabi2015C2Eb+0x272c>
   158ce:	f8df 2c98 	ldr.w	r2, [pc, #3224]	; 16568 <_ZN9Krabi2015C2Eb+0x2730>
   158d2:	f7f9 fa8f 	bl	edf4 <_ZN8PositionC1Effb>
   158d6:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
   158da:	f507 730c 	add.w	r3, r7, #560	; 0x230
   158de:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   158e2:	781b      	ldrb	r3, [r3, #0]
   158e4:	4610      	mov	r0, r2
   158e6:	f8df 1c84 	ldr.w	r1, [pc, #3204]	; 1656c <_ZN9Krabi2015C2Eb+0x2734>
   158ea:	f8df 2c7c 	ldr.w	r2, [pc, #3196]	; 16568 <_ZN9Krabi2015C2Eb+0x2730>
   158ee:	f7f9 fa81 	bl	edf4 <_ZN8PositionC1Effb>
   158f2:	f507 706a 	add.w	r0, r7, #936	; 0x3a8
   158f6:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
   158fa:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
   158fe:	6853      	ldr	r3, [r2, #4]
   15900:	9300      	str	r3, [sp, #0]
   15902:	6813      	ldr	r3, [r2, #0]
   15904:	c906      	ldmia	r1!, {r1, r2}
   15906:	f7fa f983 	bl	fc10 <_ZN4ClapC1E8PositionS0_>
   1590a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
   1590e:	4620      	mov	r0, r4
   15910:	4619      	mov	r1, r3
   15912:	f009 fbaf 	bl	1f074 <_ZN4ClapaSERKS_>
   15916:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
   1591a:	4618      	mov	r0, r3
   1591c:	f7fa f940 	bl	fba0 <_ZN4ClapD1Ev>
    actionEtape[2]= &actionClap[0];
   15920:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15924:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15928:	681b      	ldr	r3, [r3, #0]
   1592a:	6a5b      	ldr	r3, [r3, #36]
   1592c:	f103 0208 	add.w	r2, r3, #8	; 0x8
   15930:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15934:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15938:	681b      	ldr	r3, [r3, #0]
   1593a:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1593e:	6013      	str	r3, [r2, #0]
    actionClap[1] = Clap(Position(236, 1780, isYellow),Position(400, 1780, isYellow));
   15940:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15944:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15948:	681b      	ldr	r3, [r3, #0]
   1594a:	f103 0470 	add.w	r4, r3, #112	; 0x70
   1594e:	f507 6281 	add.w	r2, r7, #1032	; 0x408
   15952:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15956:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   1595a:	781b      	ldrb	r3, [r3, #0]
   1595c:	4610      	mov	r0, r2
   1595e:	f8df 1c10 	ldr.w	r1, [pc, #3088]	; 16570 <_ZN9Krabi2015C2Eb+0x2738>
   15962:	f8df 2c04 	ldr.w	r2, [pc, #3076]	; 16568 <_ZN9Krabi2015C2Eb+0x2730>
   15966:	f7f9 fa45 	bl	edf4 <_ZN8PositionC1Effb>
   1596a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
   1596e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15972:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15976:	781b      	ldrb	r3, [r3, #0]
   15978:	4610      	mov	r0, r2
   1597a:	f8df 1bf8 	ldr.w	r1, [pc, #3064]	; 16574 <_ZN9Krabi2015C2Eb+0x273c>
   1597e:	f8df 2be8 	ldr.w	r2, [pc, #3048]	; 16568 <_ZN9Krabi2015C2Eb+0x2730>
   15982:	f7f9 fa37 	bl	edf4 <_ZN8PositionC1Effb>
   15986:	f507 7078 	add.w	r0, r7, #992	; 0x3e0
   1598a:	f507 6181 	add.w	r1, r7, #1032	; 0x408
   1598e:	f507 6282 	add.w	r2, r7, #1040	; 0x410
   15992:	6853      	ldr	r3, [r2, #4]
   15994:	9300      	str	r3, [sp, #0]
   15996:	6813      	ldr	r3, [r2, #0]
   15998:	c906      	ldmia	r1!, {r1, r2}
   1599a:	f7fa f939 	bl	fc10 <_ZN4ClapC1E8PositionS0_>
   1599e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
   159a2:	4620      	mov	r0, r4
   159a4:	4619      	mov	r1, r3
   159a6:	f009 fb65 	bl	1f074 <_ZN4ClapaSERKS_>
   159aa:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
   159ae:	4618      	mov	r0, r3
   159b0:	f7fa f8f6 	bl	fba0 <_ZN4ClapD1Ev>
    actionEtape[4] = &actionClap[1];
   159b4:	f507 730c 	add.w	r3, r7, #560	; 0x230
   159b8:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   159bc:	681b      	ldr	r3, [r3, #0]
   159be:	6a5b      	ldr	r3, [r3, #36]
   159c0:	f103 0210 	add.w	r2, r3, #16	; 0x10
   159c4:	f507 730c 	add.w	r3, r7, #560	; 0x230
   159c8:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   159cc:	681b      	ldr	r3, [r3, #0]
   159ce:	f103 0370 	add.w	r3, r3, #112	; 0x70
   159d2:	6013      	str	r3, [r2, #0]
    actionClap[2] = Clap(Position(2500, 1780, isYellow),Position(2300, 1780, isYellow));
   159d4:	f507 730c 	add.w	r3, r7, #560	; 0x230
   159d8:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   159dc:	681b      	ldr	r3, [r3, #0]
   159de:	f103 0498 	add.w	r4, r3, #152	; 0x98
   159e2:	f507 6288 	add.w	r2, r7, #1088	; 0x440
   159e6:	f507 730c 	add.w	r3, r7, #560	; 0x230
   159ea:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   159ee:	781b      	ldrb	r3, [r3, #0]
   159f0:	4610      	mov	r0, r2
   159f2:	f8df 1b84 	ldr.w	r1, [pc, #2948]	; 16578 <_ZN9Krabi2015C2Eb+0x2740>
   159f6:	f8df 2b70 	ldr.w	r2, [pc, #2928]	; 16568 <_ZN9Krabi2015C2Eb+0x2730>
   159fa:	f7f9 f9fb 	bl	edf4 <_ZN8PositionC1Effb>
   159fe:	f507 6289 	add.w	r2, r7, #1096	; 0x448
   15a02:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15a06:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15a0a:	781b      	ldrb	r3, [r3, #0]
   15a0c:	4610      	mov	r0, r2
   15a0e:	f8df 1b6c 	ldr.w	r1, [pc, #2924]	; 1657c <_ZN9Krabi2015C2Eb+0x2744>
   15a12:	f8df 2b54 	ldr.w	r2, [pc, #2900]	; 16568 <_ZN9Krabi2015C2Eb+0x2730>
   15a16:	f7f9 f9ed 	bl	edf4 <_ZN8PositionC1Effb>
   15a1a:	f507 6083 	add.w	r0, r7, #1048	; 0x418
   15a1e:	f507 6188 	add.w	r1, r7, #1088	; 0x440
   15a22:	f507 6289 	add.w	r2, r7, #1096	; 0x448
   15a26:	6853      	ldr	r3, [r2, #4]
   15a28:	9300      	str	r3, [sp, #0]
   15a2a:	6813      	ldr	r3, [r2, #0]
   15a2c:	c906      	ldmia	r1!, {r1, r2}
   15a2e:	f7fa f8ef 	bl	fc10 <_ZN4ClapC1E8PositionS0_>
   15a32:	f507 6383 	add.w	r3, r7, #1048	; 0x418
   15a36:	4620      	mov	r0, r4
   15a38:	4619      	mov	r1, r3
   15a3a:	f009 fb1b 	bl	1f074 <_ZN4ClapaSERKS_>
   15a3e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
   15a42:	4618      	mov	r0, r3
   15a44:	f7fa f8ac 	bl	fba0 <_ZN4ClapD1Ev>
    actionEtape[6] = &actionClap[2];
   15a48:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15a4c:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15a50:	681b      	ldr	r3, [r3, #0]
   15a52:	6a5b      	ldr	r3, [r3, #36]
   15a54:	f103 0218 	add.w	r2, r3, #24	; 0x18
   15a58:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15a5c:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15a60:	681b      	ldr	r3, [r3, #0]
   15a62:	f103 0398 	add.w	r3, r3, #152	; 0x98
   15a66:	6013      	str	r3, [r2, #0]
    actionGobelet[0] = Gobelet(Position(250, 1750, isYellow));
   15a68:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15a6c:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15a70:	681b      	ldr	r3, [r3, #0]
   15a72:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
   15a76:	f507 628e 	add.w	r2, r7, #1136	; 0x470
   15a7a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15a7e:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15a82:	781b      	ldrb	r3, [r3, #0]
   15a84:	4610      	mov	r0, r2
   15a86:	f8df 1af8 	ldr.w	r1, [pc, #2808]	; 16580 <_ZN9Krabi2015C2Eb+0x2748>
   15a8a:	f8df 2af8 	ldr.w	r2, [pc, #2808]	; 16584 <_ZN9Krabi2015C2Eb+0x274c>
   15a8e:	f7f9 f9b1 	bl	edf4 <_ZN8PositionC1Effb>
   15a92:	f507 628a 	add.w	r2, r7, #1104	; 0x450
   15a96:	f507 638e 	add.w	r3, r7, #1136	; 0x470
   15a9a:	4610      	mov	r0, r2
   15a9c:	e893 0006 	ldmia.w	r3, {r1, r2}
   15aa0:	f7fb fb6c 	bl	1117c <_ZN7GobeletC1E8Position>
   15aa4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
   15aa8:	4620      	mov	r0, r4
   15aaa:	4619      	mov	r1, r3
   15aac:	f009 fb0a 	bl	1f0c4 <_ZN7GobeletaSERKS_>
   15ab0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
   15ab4:	4618      	mov	r0, r3
   15ab6:	f7fb fb29 	bl	1110c <_ZN7GobeletD1Ev>
    actionEtape[8] = &actionGobelet[0];
   15aba:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15abe:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15ac2:	681b      	ldr	r3, [r3, #0]
   15ac4:	6a5b      	ldr	r3, [r3, #36]
   15ac6:	f103 0220 	add.w	r2, r3, #32	; 0x20
   15aca:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15ace:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15ad2:	681b      	ldr	r3, [r3, #0]
   15ad4:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   15ad8:	6013      	str	r3, [r2, #0]
    actionGobelet[1] = Gobelet(Position(910, 830, isYellow));
   15ada:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15ade:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15ae2:	681b      	ldr	r3, [r3, #0]
   15ae4:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
   15ae8:	f507 6293 	add.w	r2, r7, #1176	; 0x498
   15aec:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15af0:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15af4:	781b      	ldrb	r3, [r3, #0]
   15af6:	4610      	mov	r0, r2
   15af8:	f8df 1a8c 	ldr.w	r1, [pc, #2700]	; 16588 <_ZN9Krabi2015C2Eb+0x2750>
   15afc:	f8df 2a8c 	ldr.w	r2, [pc, #2700]	; 1658c <_ZN9Krabi2015C2Eb+0x2754>
   15b00:	f7f9 f978 	bl	edf4 <_ZN8PositionC1Effb>
   15b04:	f507 628f 	add.w	r2, r7, #1144	; 0x478
   15b08:	f507 6393 	add.w	r3, r7, #1176	; 0x498
   15b0c:	4610      	mov	r0, r2
   15b0e:	e893 0006 	ldmia.w	r3, {r1, r2}
   15b12:	f7fb fb33 	bl	1117c <_ZN7GobeletC1E8Position>
   15b16:	f507 638f 	add.w	r3, r7, #1144	; 0x478
   15b1a:	4620      	mov	r0, r4
   15b1c:	4619      	mov	r1, r3
   15b1e:	f009 fad1 	bl	1f0c4 <_ZN7GobeletaSERKS_>
   15b22:	f507 638f 	add.w	r3, r7, #1144	; 0x478
   15b26:	4618      	mov	r0, r3
   15b28:	f7fb faf0 	bl	1110c <_ZN7GobeletD1Ev>
    actionEtape[9] = &actionGobelet[1];
   15b2c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15b30:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15b34:	681b      	ldr	r3, [r3, #0]
   15b36:	6a5b      	ldr	r3, [r3, #36]
   15b38:	f103 0224 	add.w	r2, r3, #36	; 0x24
   15b3c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15b40:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15b44:	681b      	ldr	r3, [r3, #0]
   15b46:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
   15b4a:	6013      	str	r3, [r2, #0]
    actionGobelet[2] = Gobelet(Position(1500, 1650, isYellow));
   15b4c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15b50:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15b54:	681b      	ldr	r3, [r3, #0]
   15b56:	f503 7480 	add.w	r4, r3, #256	; 0x100
   15b5a:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
   15b5e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15b62:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15b66:	781b      	ldrb	r3, [r3, #0]
   15b68:	4610      	mov	r0, r2
   15b6a:	f8df 1a24 	ldr.w	r1, [pc, #2596]	; 16590 <_ZN9Krabi2015C2Eb+0x2758>
   15b6e:	f8df 2a24 	ldr.w	r2, [pc, #2596]	; 16594 <_ZN9Krabi2015C2Eb+0x275c>
   15b72:	f7f9 f93f 	bl	edf4 <_ZN8PositionC1Effb>
   15b76:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
   15b7a:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
   15b7e:	4610      	mov	r0, r2
   15b80:	e893 0006 	ldmia.w	r3, {r1, r2}
   15b84:	f7fb fafa 	bl	1117c <_ZN7GobeletC1E8Position>
   15b88:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
   15b8c:	4620      	mov	r0, r4
   15b8e:	4619      	mov	r1, r3
   15b90:	f009 fa98 	bl	1f0c4 <_ZN7GobeletaSERKS_>
   15b94:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
   15b98:	4618      	mov	r0, r3
   15b9a:	f7fb fab7 	bl	1110c <_ZN7GobeletD1Ev>
    actionEtape[10] = &actionGobelet[2];
   15b9e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15ba2:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15ba6:	681b      	ldr	r3, [r3, #0]
   15ba8:	6a5b      	ldr	r3, [r3, #36]
   15baa:	f103 0228 	add.w	r2, r3, #40	; 0x28
   15bae:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15bb2:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15bb6:	681b      	ldr	r3, [r3, #0]
   15bb8:	f503 7380 	add.w	r3, r3, #256	; 0x100
   15bbc:	6013      	str	r3, [r2, #0]
    actionGobelet[3] = Gobelet(Position(2090, 830, isYellow));
   15bbe:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15bc2:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15bc6:	681b      	ldr	r3, [r3, #0]
   15bc8:	f503 7490 	add.w	r4, r3, #288	; 0x120
   15bcc:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
   15bd0:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15bd4:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15bd8:	781b      	ldrb	r3, [r3, #0]
   15bda:	4610      	mov	r0, r2
   15bdc:	f8df 19b8 	ldr.w	r1, [pc, #2488]	; 16598 <_ZN9Krabi2015C2Eb+0x2760>
   15be0:	f8df 29a8 	ldr.w	r2, [pc, #2472]	; 1658c <_ZN9Krabi2015C2Eb+0x2754>
   15be4:	f7f9 f906 	bl	edf4 <_ZN8PositionC1Effb>
   15be8:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
   15bec:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
   15bf0:	4610      	mov	r0, r2
   15bf2:	e893 0006 	ldmia.w	r3, {r1, r2}
   15bf6:	f7fb fac1 	bl	1117c <_ZN7GobeletC1E8Position>
   15bfa:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
   15bfe:	4620      	mov	r0, r4
   15c00:	4619      	mov	r1, r3
   15c02:	f009 fa5f 	bl	1f0c4 <_ZN7GobeletaSERKS_>
   15c06:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
   15c0a:	4618      	mov	r0, r3
   15c0c:	f7fb fa7e 	bl	1110c <_ZN7GobeletD1Ev>
    actionEtape[11] = &actionGobelet[3];
   15c10:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15c14:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15c18:	681b      	ldr	r3, [r3, #0]
   15c1a:	6a5b      	ldr	r3, [r3, #36]
   15c1c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   15c20:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15c24:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15c28:	681b      	ldr	r3, [r3, #0]
   15c2a:	f503 7390 	add.w	r3, r3, #288	; 0x120
   15c2e:	6013      	str	r3, [r2, #0]
    actionGobelet[4] = Gobelet(Position(2750, 1750, isYellow));
   15c30:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15c34:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15c38:	681b      	ldr	r3, [r3, #0]
   15c3a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
   15c3e:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
   15c42:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15c46:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15c4a:	781b      	ldrb	r3, [r3, #0]
   15c4c:	4610      	mov	r0, r2
   15c4e:	f8df 194c 	ldr.w	r1, [pc, #2380]	; 1659c <_ZN9Krabi2015C2Eb+0x2764>
   15c52:	f8df 2930 	ldr.w	r2, [pc, #2352]	; 16584 <_ZN9Krabi2015C2Eb+0x274c>
   15c56:	f7f9 f8cd 	bl	edf4 <_ZN8PositionC1Effb>
   15c5a:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
   15c5e:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
   15c62:	4610      	mov	r0, r2
   15c64:	e893 0006 	ldmia.w	r3, {r1, r2}
   15c68:	f7fb fa88 	bl	1117c <_ZN7GobeletC1E8Position>
   15c6c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
   15c70:	4620      	mov	r0, r4
   15c72:	4619      	mov	r1, r3
   15c74:	f009 fa26 	bl	1f0c4 <_ZN7GobeletaSERKS_>
   15c78:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
   15c7c:	4618      	mov	r0, r3
   15c7e:	f7fb fa45 	bl	1110c <_ZN7GobeletD1Ev>
    actionEtape[12] = &actionGobelet[4];
   15c82:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15c86:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15c8a:	681b      	ldr	r3, [r3, #0]
   15c8c:	6a5b      	ldr	r3, [r3, #36]
   15c8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
   15c92:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15c96:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15c9a:	681b      	ldr	r3, [r3, #0]
   15c9c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   15ca0:	6013      	str	r3, [r2, #0]
    actionTapis[0] = Tapis(Position(1000, 750, isYellow));
   15ca2:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15ca6:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15caa:	681b      	ldr	r3, [r3, #0]
   15cac:	f503 74b0 	add.w	r4, r3, #352	; 0x160
   15cb0:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
   15cb4:	f102 0204 	add.w	r2, r2, #4	; 0x4
   15cb8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15cbc:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15cc0:	781b      	ldrb	r3, [r3, #0]
   15cc2:	4610      	mov	r0, r2
   15cc4:	f8df 18a4 	ldr.w	r1, [pc, #2212]	; 1656c <_ZN9Krabi2015C2Eb+0x2734>
   15cc8:	f8df 28d4 	ldr.w	r2, [pc, #2260]	; 165a0 <_ZN9Krabi2015C2Eb+0x2768>
   15ccc:	f7f9 f892 	bl	edf4 <_ZN8PositionC1Effb>
   15cd0:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
   15cd4:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
   15cd8:	f103 0304 	add.w	r3, r3, #4	; 0x4
   15cdc:	4610      	mov	r0, r2
   15cde:	e893 0006 	ldmia.w	r3, {r1, r2}
   15ce2:	f003 fad3 	bl	1928c <_ZN5TapisC1E8Position>
   15ce6:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
   15cea:	4620      	mov	r0, r4
   15cec:	4619      	mov	r1, r3
   15cee:	f009 fa05 	bl	1f0fc <_ZN5TapisaSERKS_>
   15cf2:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
   15cf6:	4618      	mov	r0, r3
   15cf8:	f003 fa34 	bl	19164 <_ZN5TapisD1Ev>
    actionEtape[38] = &actionTapis[0];
   15cfc:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15d00:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15d04:	681b      	ldr	r3, [r3, #0]
   15d06:	6a5b      	ldr	r3, [r3, #36]
   15d08:	f103 0298 	add.w	r2, r3, #152	; 0x98
   15d0c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15d10:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15d14:	681b      	ldr	r3, [r3, #0]
   15d16:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   15d1a:	6013      	str	r3, [r2, #0]
    actionTapis[1] = Tapis(Position(1450, 750, isYellow));
   15d1c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15d20:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15d24:	681b      	ldr	r3, [r3, #0]
   15d26:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
   15d2a:	f507 62af 	add.w	r2, r7, #1400	; 0x578
   15d2e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15d32:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15d36:	781b      	ldrb	r3, [r3, #0]
   15d38:	4610      	mov	r0, r2
   15d3a:	f8df 1868 	ldr.w	r1, [pc, #2152]	; 165a4 <_ZN9Krabi2015C2Eb+0x276c>
   15d3e:	f8df 2860 	ldr.w	r2, [pc, #2144]	; 165a0 <_ZN9Krabi2015C2Eb+0x2768>
   15d42:	f7f9 f857 	bl	edf4 <_ZN8PositionC1Effb>
   15d46:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
   15d4a:	f102 020c 	add.w	r2, r2, #12	; 0xc
   15d4e:	f507 63af 	add.w	r3, r7, #1400	; 0x578
   15d52:	4610      	mov	r0, r2
   15d54:	e893 0006 	ldmia.w	r3, {r1, r2}
   15d58:	f003 fa98 	bl	1928c <_ZN5TapisC1E8Position>
   15d5c:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
   15d60:	f103 030c 	add.w	r3, r3, #12	; 0xc
   15d64:	4620      	mov	r0, r4
   15d66:	4619      	mov	r1, r3
   15d68:	f009 f9c8 	bl	1f0fc <_ZN5TapisaSERKS_>
   15d6c:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
   15d70:	f103 030c 	add.w	r3, r3, #12	; 0xc
   15d74:	4618      	mov	r0, r3
   15d76:	f003 f9f5 	bl	19164 <_ZN5TapisD1Ev>
    actionEtape[39] = &actionTapis[1];
   15d7a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15d7e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15d82:	681b      	ldr	r3, [r3, #0]
   15d84:	6a5b      	ldr	r3, [r3, #36]
   15d86:	f103 029c 	add.w	r2, r3, #156	; 0x9c
   15d8a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15d8e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15d92:	681b      	ldr	r3, [r3, #0]
   15d94:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   15d98:	6013      	str	r3, [r2, #0]
    actionDeposerGobelet[0] = DeposerGobelet(Position(700, 1000, isYellow));
   15d9a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15d9e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15da2:	681b      	ldr	r3, [r3, #0]
   15da4:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
   15da8:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
   15dac:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15db0:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15db4:	781b      	ldrb	r3, [r3, #0]
   15db6:	4610      	mov	r0, r2
   15db8:	f8df 17ec 	ldr.w	r1, [pc, #2028]	; 165a8 <_ZN9Krabi2015C2Eb+0x2770>
   15dbc:	f8df 27ac 	ldr.w	r2, [pc, #1964]	; 1656c <_ZN9Krabi2015C2Eb+0x2734>
   15dc0:	f7f9 f818 	bl	edf4 <_ZN8PositionC1Effb>
   15dc4:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
   15dc8:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
   15dcc:	4610      	mov	r0, r2
   15dce:	e893 0006 	ldmia.w	r3, {r1, r2}
   15dd2:	f7fa f8eb 	bl	ffac <_ZN14DeposerGobeletC1E8Position>
   15dd6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
   15dda:	4620      	mov	r0, r4
   15ddc:	4619      	mov	r1, r3
   15dde:	f009 f9bb 	bl	1f158 <_ZN14DeposerGobeletaSERKS_>
   15de2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
   15de6:	4618      	mov	r0, r3
   15de8:	f7fa f8a8 	bl	ff3c <_ZN14DeposerGobeletD1Ev>
    actionEtape[1] = &actionDeposerGobelet[0];
   15dec:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15df0:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15df4:	681b      	ldr	r3, [r3, #0]
   15df6:	6a5b      	ldr	r3, [r3, #36]
   15df8:	f103 0204 	add.w	r2, r3, #4	; 0x4
   15dfc:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15e00:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15e04:	681b      	ldr	r3, [r3, #0]
   15e06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
   15e0a:	6013      	str	r3, [r2, #0]
    actionDeposerGobelet[1] = DeposerGobelet(Position(2710, 1500, isYellow));
   15e0c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15e10:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15e14:	681b      	ldr	r3, [r3, #0]
   15e16:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
   15e1a:	f507 62b9 	add.w	r2, r7, #1480	; 0x5c8
   15e1e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15e22:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15e26:	781b      	ldrb	r3, [r3, #0]
   15e28:	4610      	mov	r0, r2
   15e2a:	f8df 1780 	ldr.w	r1, [pc, #1920]	; 165ac <_ZN9Krabi2015C2Eb+0x2774>
   15e2e:	f8df 2760 	ldr.w	r2, [pc, #1888]	; 16590 <_ZN9Krabi2015C2Eb+0x2758>
   15e32:	f7f8 ffdf 	bl	edf4 <_ZN8PositionC1Effb>
   15e36:	f507 62b5 	add.w	r2, r7, #1448	; 0x5a8
   15e3a:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
   15e3e:	4610      	mov	r0, r2
   15e40:	e893 0006 	ldmia.w	r3, {r1, r2}
   15e44:	f7fa f8b2 	bl	ffac <_ZN14DeposerGobeletC1E8Position>
   15e48:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
   15e4c:	4620      	mov	r0, r4
   15e4e:	4619      	mov	r1, r3
   15e50:	f009 f982 	bl	1f158 <_ZN14DeposerGobeletaSERKS_>
   15e54:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
   15e58:	4618      	mov	r0, r3
   15e5a:	f7fa f86f 	bl	ff3c <_ZN14DeposerGobeletD1Ev>
    actionEtape[25] = &actionDeposerGobelet[1];
   15e5e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15e62:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15e66:	681b      	ldr	r3, [r3, #0]
   15e68:	6a5b      	ldr	r3, [r3, #36]
   15e6a:	f103 0264 	add.w	r2, r3, #100	; 0x64
   15e6e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15e72:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15e76:	681b      	ldr	r3, [r3, #0]
   15e78:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   15e7c:	6013      	str	r3, [r2, #0]
    actionDeposerGobelet[2] = DeposerGobelet(Position(2630, 460, isYellow));
   15e7e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15e82:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15e86:	681b      	ldr	r3, [r3, #0]
   15e88:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
   15e8c:	f507 62be 	add.w	r2, r7, #1520	; 0x5f0
   15e90:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15e94:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15e98:	781b      	ldrb	r3, [r3, #0]
   15e9a:	4610      	mov	r0, r2
   15e9c:	f8df 1710 	ldr.w	r1, [pc, #1808]	; 165b0 <_ZN9Krabi2015C2Eb+0x2778>
   15ea0:	f8df 2710 	ldr.w	r2, [pc, #1808]	; 165b4 <_ZN9Krabi2015C2Eb+0x277c>
   15ea4:	f7f8 ffa6 	bl	edf4 <_ZN8PositionC1Effb>
   15ea8:	f507 62ba 	add.w	r2, r7, #1488	; 0x5d0
   15eac:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
   15eb0:	4610      	mov	r0, r2
   15eb2:	e893 0006 	ldmia.w	r3, {r1, r2}
   15eb6:	f7fa f879 	bl	ffac <_ZN14DeposerGobeletC1E8Position>
   15eba:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
   15ebe:	4620      	mov	r0, r4
   15ec0:	4619      	mov	r1, r3
   15ec2:	f009 f949 	bl	1f158 <_ZN14DeposerGobeletaSERKS_>
   15ec6:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
   15eca:	4618      	mov	r0, r3
   15ecc:	f7fa f836 	bl	ff3c <_ZN14DeposerGobeletD1Ev>
    actionEtape[26] = &actionDeposerGobelet[2];
   15ed0:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15ed4:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15ed8:	681b      	ldr	r3, [r3, #0]
   15eda:	6a5b      	ldr	r3, [r3, #36]
   15edc:	f103 0268 	add.w	r2, r3, #104	; 0x68
   15ee0:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15ee4:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15ee8:	681b      	ldr	r3, [r3, #0]
   15eea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
   15eee:	6013      	str	r3, [r2, #0]

    actionRamasserPied[0] = RamasserPied(Position(90, 1750, isYellow));
   15ef0:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15ef4:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15ef8:	681b      	ldr	r3, [r3, #0]
   15efa:	f503 7406 	add.w	r4, r3, #536	; 0x218
   15efe:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
   15f02:	f102 020c 	add.w	r2, r2, #12	; 0xc
   15f06:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15f0a:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15f0e:	781b      	ldrb	r3, [r3, #0]
   15f10:	4610      	mov	r0, r2
   15f12:	f8df 16a4 	ldr.w	r1, [pc, #1700]	; 165b8 <_ZN9Krabi2015C2Eb+0x2780>
   15f16:	f8df 266c 	ldr.w	r2, [pc, #1644]	; 16584 <_ZN9Krabi2015C2Eb+0x274c>
   15f1a:	f7f8 ff6b 	bl	edf4 <_ZN8PositionC1Effb>
   15f1e:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
   15f22:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
   15f26:	f103 030c 	add.w	r3, r3, #12	; 0xc
   15f2a:	4610      	mov	r0, r2
   15f2c:	e893 0006 	ldmia.w	r3, {r1, r2}
   15f30:	f000 fefe 	bl	16d30 <_ZN12RamasserPiedC1E8Position>
   15f34:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
   15f38:	4620      	mov	r0, r4
   15f3a:	4619      	mov	r1, r3
   15f3c:	f009 f928 	bl	1f190 <_ZN12RamasserPiedaSERKS_>
   15f40:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
   15f44:	4618      	mov	r0, r3
   15f46:	f000 febb 	bl	16cc0 <_ZN12RamasserPiedD1Ev>
    actionEtape[13] = &actionRamasserPied[0];
   15f4a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15f4e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15f52:	681b      	ldr	r3, [r3, #0]
   15f54:	6a5b      	ldr	r3, [r3, #36]
   15f56:	f103 0234 	add.w	r2, r3, #52	; 0x34
   15f5a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15f5e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15f62:	681b      	ldr	r3, [r3, #0]
   15f64:	f503 7306 	add.w	r3, r3, #536	; 0x218
   15f68:	6013      	str	r3, [r2, #0]
    actionRamasserPied[1] = RamasserPied(Position(90, 1850, isYellow));
   15f6a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15f6e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15f72:	681b      	ldr	r3, [r3, #0]
   15f74:	f503 740f 	add.w	r4, r3, #572	; 0x23c
   15f78:	f507 62c9 	add.w	r2, r7, #1608	; 0x648
   15f7c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15f80:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   15f84:	781b      	ldrb	r3, [r3, #0]
   15f86:	4610      	mov	r0, r2
   15f88:	f8df 162c 	ldr.w	r1, [pc, #1580]	; 165b8 <_ZN9Krabi2015C2Eb+0x2780>
   15f8c:	f8df 262c 	ldr.w	r2, [pc, #1580]	; 165bc <_ZN9Krabi2015C2Eb+0x2784>
   15f90:	f7f8 ff30 	bl	edf4 <_ZN8PositionC1Effb>
   15f94:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
   15f98:	f102 0204 	add.w	r2, r2, #4	; 0x4
   15f9c:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
   15fa0:	4610      	mov	r0, r2
   15fa2:	e893 0006 	ldmia.w	r3, {r1, r2}
   15fa6:	f000 fec3 	bl	16d30 <_ZN12RamasserPiedC1E8Position>
   15faa:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
   15fae:	f103 0304 	add.w	r3, r3, #4	; 0x4
   15fb2:	4620      	mov	r0, r4
   15fb4:	4619      	mov	r1, r3
   15fb6:	f009 f8eb 	bl	1f190 <_ZN12RamasserPiedaSERKS_>
   15fba:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
   15fbe:	f103 0304 	add.w	r3, r3, #4	; 0x4
   15fc2:	4618      	mov	r0, r3
   15fc4:	f000 fe7c 	bl	16cc0 <_ZN12RamasserPiedD1Ev>
    actionEtape[14] = &actionRamasserPied[1];
   15fc8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15fcc:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15fd0:	681b      	ldr	r3, [r3, #0]
   15fd2:	6a5b      	ldr	r3, [r3, #36]
   15fd4:	f103 0238 	add.w	r2, r3, #56	; 0x38
   15fd8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15fdc:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15fe0:	681b      	ldr	r3, [r3, #0]
   15fe2:	f503 730f 	add.w	r3, r3, #572	; 0x23c
   15fe6:	6013      	str	r3, [r2, #0]
    actionRamasserPied[2] = RamasserPied(Position(90, 200, isYellow));
   15fe8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   15fec:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   15ff0:	681b      	ldr	r3, [r3, #0]
   15ff2:	f503 7418 	add.w	r4, r3, #608	; 0x260
   15ff6:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
   15ffa:	f102 0204 	add.w	r2, r2, #4	; 0x4
   15ffe:	f507 730c 	add.w	r3, r7, #560	; 0x230
   16002:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   16006:	781b      	ldrb	r3, [r3, #0]
   16008:	4610      	mov	r0, r2
   1600a:	f8df 15ac 	ldr.w	r1, [pc, #1452]	; 165b8 <_ZN9Krabi2015C2Eb+0x2780>
   1600e:	f8df 25b0 	ldr.w	r2, [pc, #1456]	; 165c0 <_ZN9Krabi2015C2Eb+0x2788>
   16012:	f7f8 feef 	bl	edf4 <_ZN8PositionC1Effb>
   16016:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
   1601a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
   1601e:	f103 0304 	add.w	r3, r3, #4	; 0x4
   16022:	4610      	mov	r0, r2
   16024:	e893 0006 	ldmia.w	r3, {r1, r2}
   16028:	f000 fe82 	bl	16d30 <_ZN12RamasserPiedC1E8Position>
   1602c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
   16030:	4620      	mov	r0, r4
   16032:	4619      	mov	r1, r3
   16034:	f009 f8ac 	bl	1f190 <_ZN12RamasserPiedaSERKS_>
   16038:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
   1603c:	4618      	mov	r0, r3
   1603e:	f000 fe3f 	bl	16cc0 <_ZN12RamasserPiedD1Ev>
    actionEtape[15] = &actionRamasserPied[2];
   16042:	f507 730c 	add.w	r3, r7, #560	; 0x230
   16046:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1604a:	681b      	ldr	r3, [r3, #0]
   1604c:	6a5b      	ldr	r3, [r3, #36]
   1604e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
   16052:	f507 730c 	add.w	r3, r7, #560	; 0x230
   16056:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1605a:	681b      	ldr	r3, [r3, #0]
   1605c:	f503 7318 	add.w	r3, r3, #608	; 0x260
   16060:	6013      	str	r3, [r2, #0]
    actionRamasserPied[3] = RamasserPied(Position(850, 100, isYellow));
   16062:	f507 730c 	add.w	r3, r7, #560	; 0x230
   16066:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1606a:	681b      	ldr	r3, [r3, #0]
   1606c:	f503 7421 	add.w	r4, r3, #644	; 0x284
   16070:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
   16074:	f507 730c 	add.w	r3, r7, #560	; 0x230
   16078:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   1607c:	781b      	ldrb	r3, [r3, #0]
   1607e:	4610      	mov	r0, r2
   16080:	f8df 1540 	ldr.w	r1, [pc, #1344]	; 165c4 <_ZN9Krabi2015C2Eb+0x278c>
   16084:	f8df 2540 	ldr.w	r2, [pc, #1344]	; 165c8 <_ZN9Krabi2015C2Eb+0x2790>
   16088:	f7f8 feb4 	bl	edf4 <_ZN8PositionC1Effb>
   1608c:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
   16090:	f102 020c 	add.w	r2, r2, #12	; 0xc
   16094:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
   16098:	4610      	mov	r0, r2
   1609a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1609e:	f000 fe47 	bl	16d30 <_ZN12RamasserPiedC1E8Position>
   160a2:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
   160a6:	f103 030c 	add.w	r3, r3, #12	; 0xc
   160aa:	4620      	mov	r0, r4
   160ac:	4619      	mov	r1, r3
   160ae:	f009 f86f 	bl	1f190 <_ZN12RamasserPiedaSERKS_>
   160b2:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
   160b6:	f103 030c 	add.w	r3, r3, #12	; 0xc
   160ba:	4618      	mov	r0, r3
   160bc:	f000 fe00 	bl	16cc0 <_ZN12RamasserPiedD1Ev>
    actionEtape[16] = &actionRamasserPied[3];
   160c0:	f507 730c 	add.w	r3, r7, #560	; 0x230
   160c4:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   160c8:	681b      	ldr	r3, [r3, #0]
   160ca:	6a5b      	ldr	r3, [r3, #36]
   160cc:	f103 0240 	add.w	r2, r3, #64	; 0x40
   160d0:	f507 730c 	add.w	r3, r7, #560	; 0x230
   160d4:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   160d8:	681b      	ldr	r3, [r3, #0]
   160da:	f503 7321 	add.w	r3, r3, #644	; 0x284
   160de:	6013      	str	r3, [r2, #0]
    actionRamasserPied[4] = RamasserPied(Position(850, 200, isYellow));
   160e0:	f507 730c 	add.w	r3, r7, #560	; 0x230
   160e4:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   160e8:	681b      	ldr	r3, [r3, #0]
   160ea:	f503 742a 	add.w	r4, r3, #680	; 0x2a8
   160ee:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
   160f2:	f102 020c 	add.w	r2, r2, #12	; 0xc
   160f6:	f507 730c 	add.w	r3, r7, #560	; 0x230
   160fa:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   160fe:	781b      	ldrb	r3, [r3, #0]
   16100:	4610      	mov	r0, r2
   16102:	f8df 14c0 	ldr.w	r1, [pc, #1216]	; 165c4 <_ZN9Krabi2015C2Eb+0x278c>
   16106:	f8df 24b8 	ldr.w	r2, [pc, #1208]	; 165c0 <_ZN9Krabi2015C2Eb+0x2788>
   1610a:	f7f8 fe73 	bl	edf4 <_ZN8PositionC1Effb>
   1610e:	f507 62d5 	add.w	r2, r7, #1704	; 0x6a8
   16112:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
   16116:	f103 030c 	add.w	r3, r3, #12	; 0xc
   1611a:	4610      	mov	r0, r2
   1611c:	e893 0006 	ldmia.w	r3, {r1, r2}
   16120:	f000 fe06 	bl	16d30 <_ZN12RamasserPiedC1E8Position>
   16124:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
   16128:	4620      	mov	r0, r4
   1612a:	4619      	mov	r1, r3
   1612c:	f009 f830 	bl	1f190 <_ZN12RamasserPiedaSERKS_>
   16130:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
   16134:	4618      	mov	r0, r3
   16136:	f000 fdc3 	bl	16cc0 <_ZN12RamasserPiedD1Ev>
    actionEtape[17] = &actionRamasserPied[4];
   1613a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1613e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   16142:	681b      	ldr	r3, [r3, #0]
   16144:	6a5b      	ldr	r3, [r3, #36]
   16146:	f103 0244 	add.w	r2, r3, #68	; 0x44
   1614a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1614e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   16152:	681b      	ldr	r3, [r3, #0]
   16154:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
   16158:	6013      	str	r3, [r2, #0]
    actionRamasserPied[5] = RamasserPied(Position(870, 1355, isYellow));
   1615a:	f507 730c 	add.w	r3, r7, #560	; 0x230
   1615e:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   16162:	681b      	ldr	r3, [r3, #0]
   16164:	f503 7433 	add.w	r4, r3, #716	; 0x2cc
   16168:	f507 62df 	add.w	r2, r7, #1784	; 0x6f8
   1616c:	f507 730c 	add.w	r3, r7, #560	; 0x230
   16170:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   16174:	781b      	ldrb	r3, [r3, #0]
   16176:	4610      	mov	r0, r2
   16178:	f8df 1450 	ldr.w	r1, [pc, #1104]	; 165cc <_ZN9Krabi2015C2Eb+0x2794>
   1617c:	f8df 2450 	ldr.w	r2, [pc, #1104]	; 165d0 <_ZN9Krabi2015C2Eb+0x2798>
   16180:	f7f8 fe38 	bl	edf4 <_ZN8PositionC1Effb>
   16184:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
   16188:	f102 0204 	add.w	r2, r2, #4	; 0x4
   1618c:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
   16190:	4610      	mov	r0, r2
   16192:	e893 0006 	ldmia.w	r3, {r1, r2}
   16196:	f000 fdcb 	bl	16d30 <_ZN12RamasserPiedC1E8Position>
   1619a:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
   1619e:	f103 0304 	add.w	r3, r3, #4	; 0x4
   161a2:	4620      	mov	r0, r4
   161a4:	4619      	mov	r1, r3
   161a6:	f008 fff3 	bl	1f190 <_ZN12RamasserPiedaSERKS_>
   161aa:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
   161ae:	f103 0304 	add.w	r3, r3, #4	; 0x4
   161b2:	4618      	mov	r0, r3
   161b4:	f000 fd84 	bl	16cc0 <_ZN12RamasserPiedD1Ev>
    actionEtape[18] = &actionRamasserPied[5];
   161b8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   161bc:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   161c0:	681b      	ldr	r3, [r3, #0]
   161c2:	6a5b      	ldr	r3, [r3, #36]
   161c4:	f103 0248 	add.w	r2, r3, #72	; 0x48
   161c8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   161cc:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   161d0:	681b      	ldr	r3, [r3, #0]
   161d2:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
   161d6:	6013      	str	r3, [r2, #0]
    actionRamasserPied[6] = RamasserPied(Position(1100, 1770, isYellow));
   161d8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   161dc:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   161e0:	681b      	ldr	r3, [r3, #0]
   161e2:	f503 743c 	add.w	r4, r3, #752	; 0x2f0
   161e6:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
   161ea:	f102 0204 	add.w	r2, r2, #4	; 0x4
   161ee:	f507 730c 	add.w	r3, r7, #560	; 0x230
   161f2:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   161f6:	781b      	ldrb	r3, [r3, #0]
   161f8:	4610      	mov	r0, r2
   161fa:	49f6      	ldr	r1, [pc, #984]	(165d4 <_ZN9Krabi2015C2Eb+0x279c>)
   161fc:	4af6      	ldr	r2, [pc, #984]	(165d8 <_ZN9Krabi2015C2Eb+0x27a0>)
   161fe:	f7f8 fdf9 	bl	edf4 <_ZN8PositionC1Effb>
   16202:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
   16206:	4618      	mov	r0, r3
   16208:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
   1620c:	f103 0304 	add.w	r3, r3, #4	; 0x4
   16210:	e893 0006 	ldmia.w	r3, {r1, r2}
   16214:	f000 fd8c 	bl	16d30 <_ZN12RamasserPiedC1E8Position>
   16218:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
   1621c:	4620      	mov	r0, r4
   1621e:	4619      	mov	r1, r3
   16220:	f008 ffb6 	bl	1f190 <_ZN12RamasserPiedaSERKS_>
   16224:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
   16228:	4618      	mov	r0, r3
   1622a:	f000 fd49 	bl	16cc0 <_ZN12RamasserPiedD1Ev>
    actionEtape[19] = &actionRamasserPied[6];
   1622e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   16232:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   16236:	681b      	ldr	r3, [r3, #0]
   16238:	6a5b      	ldr	r3, [r3, #36]
   1623a:	f103 024c 	add.w	r2, r3, #76	; 0x4c
   1623e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   16242:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   16246:	681b      	ldr	r3, [r3, #0]
   16248:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
   1624c:	6013      	str	r3, [r2, #0]
    actionRamasserPied[7] = RamasserPied(Position(1300, 1400, isYellow));
   1624e:	f507 730c 	add.w	r3, r7, #560	; 0x230
   16252:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   16256:	681b      	ldr	r3, [r3, #0]
   16258:	f503 7445 	add.w	r4, r3, #788	; 0x314
   1625c:	f507 62ea 	add.w	r2, r7, #1872	; 0x750
   16260:	f507 730c 	add.w	r3, r7, #560	; 0x230
   16264:	f1a3 030d 	sub.w	r3, r3, #13	; 0xd
   16268:	781b      	ldrb	r3, [r3, #0]
   1626a:	4610      	mov	r0, r2
   1626c:	49db      	ldr	r1, [pc, #876]	(165dc <_ZN9Krabi2015C2Eb+0x27a4>)
   1626e:	4adc      	ldr	r2, [pc, #880]	(165e0 <_ZN9Krabi2015C2Eb+0x27a8>)
   16270:	f7f8 fdc0 	bl	edf4 <_ZN8PositionC1Effb>
   16274:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
   16278:	f103 030c 	add.w	r3, r3, #12	; 0xc
   1627c:	4618      	mov	r0, r3
   1627e:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
   16282:	e893 0006 	ldmia.w	r3, {r1, r2}
   16286:	f000 fd53 	bl	16d30 <_ZN12RamasserPiedC1E8Position>
   1628a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
   1628e:	f103 030c 	add.w	r3, r3, #12	; 0xc
   16292:	4620      	mov	r0, r4
   16294:	4619      	mov	r1, r3
   16296:	f008 ff7b 	bl	1f190 <_ZN12RamasserPiedaSERKS_>
   1629a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
   1629e:	f103 030c 	add.w	r3, r3, #12	; 0xc
   162a2:	4618      	mov	r0, r3
   162a4:	f000 fd0c 	bl	16cc0 <_ZN12RamasserPiedD1Ev>
    actionEtape[20] = &actionRamasserPied[7];
   162a8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   162ac:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   162b0:	681b      	ldr	r3, [r3, #0]
   162b2:	6a5b      	ldr	r3, [r3, #36]
   162b4:	f103 0250 	add.w	r2, r3, #80	; 0x50
   162b8:	f507 730c 	add.w	r3, r7, #560	; 0x230
   162bc:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   162c0:	681b      	ldr	r3, [r3, #0]
   162c2:	f503 7345 	add.w	r3, r3, #788	; 0x314
   162c6:	6013      	str	r3, [r2, #0]

    etape0->addVoisin(etape1, false);
   162c8:	f8d7 075c 	ldr.w	r0, [r7, #1884]
   162cc:	f8d7 1760 	ldr.w	r1, [r7, #1888]
   162d0:	f04f 0200 	mov.w	r2, #0	; 0x0
   162d4:	f7fa fc68 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape2);
   162d8:	f8d7 0760 	ldr.w	r0, [r7, #1888]
   162dc:	f8d7 1764 	ldr.w	r1, [r7, #1892]
   162e0:	f04f 0201 	mov.w	r2, #1	; 0x1
   162e4:	f7fa fc60 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape9);
   162e8:	f8d7 0760 	ldr.w	r0, [r7, #1888]
   162ec:	f8d7 1780 	ldr.w	r1, [r7, #1920]
   162f0:	f04f 0201 	mov.w	r2, #1	; 0x1
   162f4:	f7fa fc58 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape33);
   162f8:	f8d7 0760 	ldr.w	r0, [r7, #1888]
   162fc:	f8d7 17e0 	ldr.w	r1, [r7, #2016]
   16300:	f04f 0201 	mov.w	r2, #1	; 0x1
   16304:	f7fa fc50 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape24);
   16308:	f8d7 07e0 	ldr.w	r0, [r7, #2016]
   1630c:	f8d7 17bc 	ldr.w	r1, [r7, #1980]
   16310:	f04f 0201 	mov.w	r2, #1	; 0x1
   16314:	f7fa fc48 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape4);
   16318:	f8d7 07a4 	ldr.w	r0, [r7, #1956]
   1631c:	f8d7 176c 	ldr.w	r1, [r7, #1900]
   16320:	f04f 0201 	mov.w	r2, #1	; 0x1
   16324:	f7fa fc40 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape3);
   16328:	f8d7 0764 	ldr.w	r0, [r7, #1892]
   1632c:	f8d7 1768 	ldr.w	r1, [r7, #1896]
   16330:	f04f 0201 	mov.w	r2, #1	; 0x1
   16334:	f7fa fc38 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape4);
   16338:	f8d7 0768 	ldr.w	r0, [r7, #1896]
   1633c:	f8d7 176c 	ldr.w	r1, [r7, #1900]
   16340:	f04f 0201 	mov.w	r2, #1	; 0x1
   16344:	f7fa fc30 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape4);
   16348:	f8d7 0764 	ldr.w	r0, [r7, #1892]
   1634c:	f8d7 176c 	ldr.w	r1, [r7, #1900]
   16350:	f04f 0201 	mov.w	r2, #1	; 0x1
   16354:	f7fa fc28 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape5);
   16358:	f8d7 076c 	ldr.w	r0, [r7, #1900]
   1635c:	f8d7 1770 	ldr.w	r1, [r7, #1904]
   16360:	f04f 0201 	mov.w	r2, #1	; 0x1
   16364:	f7fa fc20 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape13);
   16368:	f8d7 076c 	ldr.w	r0, [r7, #1900]
   1636c:	f8d7 1790 	ldr.w	r1, [r7, #1936]
   16370:	f04f 0201 	mov.w	r2, #1	; 0x1
   16374:	f7fa fc18 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape8);
   16378:	f8d7 076c 	ldr.w	r0, [r7, #1900]
   1637c:	f8d7 177c 	ldr.w	r1, [r7, #1916]
   16380:	f04f 0201 	mov.w	r2, #1	; 0x1
   16384:	f7fa fc10 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape7);
   16388:	f8d7 0774 	ldr.w	r0, [r7, #1908]
   1638c:	f8d7 1778 	ldr.w	r1, [r7, #1912]
   16390:	f04f 0201 	mov.w	r2, #1	; 0x1
   16394:	f7fa fc08 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape18);
   16398:	f8d7 0760 	ldr.w	r0, [r7, #1888]
   1639c:	f8d7 17a4 	ldr.w	r1, [r7, #1956]
   163a0:	f04f 0201 	mov.w	r2, #1	; 0x1
   163a4:	f7fa fc00 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape2);
   163a8:	f8d7 07a4 	ldr.w	r0, [r7, #1956]
   163ac:	f8d7 1764 	ldr.w	r1, [r7, #1892]
   163b0:	f04f 0201 	mov.w	r2, #1	; 0x1
   163b4:	f7fa fbf8 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape13->addVoisin(etape14);
   163b8:	f8d7 0790 	ldr.w	r0, [r7, #1936]
   163bc:	f8d7 1794 	ldr.w	r1, [r7, #1940]
   163c0:	f04f 0201 	mov.w	r2, #1	; 0x1
   163c4:	f7fa fbf0 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape14->addVoisin(etape8);
   163c8:	f8d7 0794 	ldr.w	r0, [r7, #1940]
   163cc:	f8d7 177c 	ldr.w	r1, [r7, #1916]
   163d0:	f04f 0201 	mov.w	r2, #1	; 0x1
   163d4:	f7fa fbe8 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape20);
   163d8:	f8d7 07a4 	ldr.w	r0, [r7, #1956]
   163dc:	f8d7 17ac 	ldr.w	r1, [r7, #1964]
   163e0:	f04f 0201 	mov.w	r2, #1	; 0x1
   163e4:	f7fa fbe0 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape19);
   163e8:	f8d7 07a4 	ldr.w	r0, [r7, #1956]
   163ec:	f8d7 17a8 	ldr.w	r1, [r7, #1960]
   163f0:	f04f 0201 	mov.w	r2, #1	; 0x1
   163f4:	f7fa fbd8 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape19->addVoisin(etape27);
   163f8:	f8d7 07a8 	ldr.w	r0, [r7, #1960]
   163fc:	f8d7 17c8 	ldr.w	r1, [r7, #1992]
   16400:	f04f 0201 	mov.w	r2, #1	; 0x1
   16404:	f7fa fbd0 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape27->addVoisin(etape21);
   16408:	f8d7 07c8 	ldr.w	r0, [r7, #1992]
   1640c:	f8d7 17b0 	ldr.w	r1, [r7, #1968]
   16410:	f04f 0201 	mov.w	r2, #1	; 0x1
   16414:	f7fa fbc8 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape27);
   16418:	f8d7 0768 	ldr.w	r0, [r7, #1896]
   1641c:	f8d7 17c8 	ldr.w	r1, [r7, #1992]
   16420:	f04f 0201 	mov.w	r2, #1	; 0x1
   16424:	f7fa fbc0 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape33);
   16428:	f8d7 0780 	ldr.w	r0, [r7, #1920]
   1642c:	f8d7 17e0 	ldr.w	r1, [r7, #2016]
   16430:	f04f 0201 	mov.w	r2, #1	; 0x1
   16434:	f7fa fbb8 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape20);
   16438:	f8d7 07e0 	ldr.w	r0, [r7, #2016]
   1643c:	f8d7 17ac 	ldr.w	r1, [r7, #1964]
   16440:	f04f 0201 	mov.w	r2, #1	; 0x1
   16444:	f7fa fbb0 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape18);
   16448:	f8d7 0780 	ldr.w	r0, [r7, #1920]
   1644c:	f8d7 17a4 	ldr.w	r1, [r7, #1956]
   16450:	f04f 0201 	mov.w	r2, #1	; 0x1
   16454:	f7fa fba8 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape21->addVoisin(etape22);
   16458:	f8d7 07b0 	ldr.w	r0, [r7, #1968]
   1645c:	f8d7 17b4 	ldr.w	r1, [r7, #1972]
   16460:	f04f 0201 	mov.w	r2, #1	; 0x1
   16464:	f7fa fba0 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape22);
   16468:	f8d7 0784 	ldr.w	r0, [r7, #1924]
   1646c:	f8d7 17b4 	ldr.w	r1, [r7, #1972]
   16470:	f04f 0201 	mov.w	r2, #1	; 0x1
   16474:	f7fa fb98 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape20->addVoisin(etape10);
   16478:	f8d7 07ac 	ldr.w	r0, [r7, #1964]
   1647c:	f8d7 1784 	ldr.w	r1, [r7, #1924]
   16480:	f04f 0201 	mov.w	r2, #1	; 0x1
   16484:	f7fa fb90 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape35);
   16488:	f8d7 0784 	ldr.w	r0, [r7, #1924]
   1648c:	f8d7 17e8 	ldr.w	r1, [r7, #2024]
   16490:	f04f 0201 	mov.w	r2, #1	; 0x1
   16494:	f7fa fb88 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape11);
   16498:	f8d7 07e8 	ldr.w	r0, [r7, #2024]
   1649c:	f8d7 1788 	ldr.w	r1, [r7, #1928]
   164a0:	f04f 0201 	mov.w	r2, #1	; 0x1
   164a4:	f7fa fb80 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape31);
   164a8:	f8d7 07cc 	ldr.w	r0, [r7, #1996]
   164ac:	f8d7 17d8 	ldr.w	r1, [r7, #2008]
   164b0:	f04f 0201 	mov.w	r2, #1	; 0x1
   164b4:	f7fa fb78 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape6);
   164b8:	f8d7 0784 	ldr.w	r0, [r7, #1924]
   164bc:	f8d7 1774 	ldr.w	r1, [r7, #1908]
   164c0:	f04f 0201 	mov.w	r2, #1	; 0x1
   164c4:	f7fa fb70 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape6);
   164c8:	f8d7 07bc 	ldr.w	r0, [r7, #1980]
   164cc:	f8d7 1774 	ldr.w	r1, [r7, #1908]
   164d0:	f04f 0201 	mov.w	r2, #1	; 0x1
   164d4:	f7fa fb68 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape7);
   164d8:	f8d7 07bc 	ldr.w	r0, [r7, #1980]
   164dc:	f8d7 1778 	ldr.w	r1, [r7, #1912]
   164e0:	f04f 0201 	mov.w	r2, #1	; 0x1
   164e4:	f7fa fb60 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape12);
   164e8:	f8d7 07bc 	ldr.w	r0, [r7, #1980]
   164ec:	f8d7 178c 	ldr.w	r1, [r7, #1932]
   164f0:	f04f 0201 	mov.w	r2, #1	; 0x1
   164f4:	f7fa fb58 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape25);
   164f8:	f8d7 07bc 	ldr.w	r0, [r7, #1980]
   164fc:	f8d7 17c0 	ldr.w	r1, [r7, #1984]
   16500:	f04f 0201 	mov.w	r2, #1	; 0x1
   16504:	f7fa fb50 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape12);
   16508:	f8d7 0774 	ldr.w	r0, [r7, #1908]
   1650c:	f8d7 178c 	ldr.w	r1, [r7, #1932]
   16510:	f04f 0201 	mov.w	r2, #1	; 0x1
   16514:	f7fa fb48 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape12->addVoisin(etape25);
   16518:	f8d7 078c 	ldr.w	r0, [r7, #1932]
   1651c:	f8d7 17c0 	ldr.w	r1, [r7, #1984]
   16520:	f04f 0201 	mov.w	r2, #1	; 0x1
   16524:	f7fa fb40 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape11);
   16528:	f8d7 07bc 	ldr.w	r0, [r7, #1980]
   1652c:	f8d7 1788 	ldr.w	r1, [r7, #1928]
   16530:	f04f 0201 	mov.w	r2, #1	; 0x1
   16534:	f7fa fb38 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape20);
   16538:	f8d7 0788 	ldr.w	r0, [r7, #1928]
   1653c:	f8d7 17ac 	ldr.w	r1, [r7, #1964]
   16540:	f04f 0201 	mov.w	r2, #1	; 0x1
   16544:	f7fa fb30 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape11);
   16548:	f8d7 0784 	ldr.w	r0, [r7, #1924]
   1654c:	f8d7 1788 	ldr.w	r1, [r7, #1928]
   16550:	f04f 0201 	mov.w	r2, #1	; 0x1
   16554:	f7fa fb28 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape11);
   16558:	f8d7 0780 	ldr.w	r0, [r7, #1920]
   1655c:	e042      	b.n	165e4 <_ZN9Krabi2015C2Eb+0x27ac>
   1655e:	46c0      	nop			(mov r8, r8)
   16560:	41f00000 	.word	0x41f00000
   16564:	44510000 	.word	0x44510000
   16568:	44de8000 	.word	0x44de8000
   1656c:	447a0000 	.word	0x447a0000
   16570:	436c0000 	.word	0x436c0000
   16574:	43c80000 	.word	0x43c80000
   16578:	451c4000 	.word	0x451c4000
   1657c:	450fc000 	.word	0x450fc000
   16580:	437a0000 	.word	0x437a0000
   16584:	44dac000 	.word	0x44dac000
   16588:	44638000 	.word	0x44638000
   1658c:	444f8000 	.word	0x444f8000
   16590:	44bb8000 	.word	0x44bb8000
   16594:	44ce4000 	.word	0x44ce4000
   16598:	4502a000 	.word	0x4502a000
   1659c:	452be000 	.word	0x452be000
   165a0:	443b8000 	.word	0x443b8000
   165a4:	44b54000 	.word	0x44b54000
   165a8:	442f0000 	.word	0x442f0000
   165ac:	45296000 	.word	0x45296000
   165b0:	45246000 	.word	0x45246000
   165b4:	43e60000 	.word	0x43e60000
   165b8:	42b40000 	.word	0x42b40000
   165bc:	44e74000 	.word	0x44e74000
   165c0:	43480000 	.word	0x43480000
   165c4:	44548000 	.word	0x44548000
   165c8:	42c80000 	.word	0x42c80000
   165cc:	44598000 	.word	0x44598000
   165d0:	44a96000 	.word	0x44a96000
   165d4:	44898000 	.word	0x44898000
   165d8:	44dd4000 	.word	0x44dd4000
   165dc:	44a28000 	.word	0x44a28000
   165e0:	44af0000 	.word	0x44af0000
   165e4:	f8d7 1788 	ldr.w	r1, [r7, #1928]
   165e8:	f04f 0201 	mov.w	r2, #1	; 0x1
   165ec:	f7fa fadc 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
 //   etape11->addVoisin(etape26);
    etape9->addVoisin(etape32);
   165f0:	f8d7 0780 	ldr.w	r0, [r7, #1920]
   165f4:	f8d7 17dc 	ldr.w	r1, [r7, #2012]
   165f8:	f04f 0201 	mov.w	r2, #1	; 0x1
   165fc:	f7fa fad4 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape32->addVoisin(etape15);
   16600:	f8d7 07dc 	ldr.w	r0, [r7, #2012]
   16604:	f8d7 1798 	ldr.w	r1, [r7, #1944]
   16608:	f04f 0201 	mov.w	r2, #1	; 0x1
   1660c:	f7fa facc 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape17);
   16610:	f8d7 0780 	ldr.w	r0, [r7, #1920]
   16614:	f8d7 17a0 	ldr.w	r1, [r7, #1952]
   16618:	f04f 0201 	mov.w	r2, #1	; 0x1
   1661c:	f7fa fac4 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape17);
   16620:	f8d7 079c 	ldr.w	r0, [r7, #1948]
   16624:	f8d7 17a0 	ldr.w	r1, [r7, #1952]
   16628:	f04f 0201 	mov.w	r2, #1	; 0x1
   1662c:	f7fa fabc 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape15);
   16630:	f8d7 079c 	ldr.w	r0, [r7, #1948]
   16634:	f8d7 1798 	ldr.w	r1, [r7, #1944]
   16638:	f04f 0201 	mov.w	r2, #1	; 0x1
   1663c:	f7fa fab4 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape15->addVoisin(etape17);
   16640:	f8d7 0798 	ldr.w	r0, [r7, #1944]
   16644:	f8d7 17a0 	ldr.w	r1, [r7, #1952]
   16648:	f04f 0201 	mov.w	r2, #1	; 0x1
   1664c:	f7fa faac 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape9);
   16650:	f8d7 07b8 	ldr.w	r0, [r7, #1976]
   16654:	f8d7 1780 	ldr.w	r1, [r7, #1920]
   16658:	f04f 0201 	mov.w	r2, #1	; 0x1
   1665c:	f7fa faa4 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape20);
   16660:	f8d7 07b8 	ldr.w	r0, [r7, #1976]
   16664:	f8d7 17ac 	ldr.w	r1, [r7, #1964]
   16668:	f04f 0201 	mov.w	r2, #1	; 0x1
   1666c:	f7fa fa9c 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape11);
   16670:	f8d7 07b8 	ldr.w	r0, [r7, #1976]
   16674:	f8d7 1788 	ldr.w	r1, [r7, #1928]
   16678:	f04f 0201 	mov.w	r2, #1	; 0x1
   1667c:	f7fa fa94 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape28);
   16680:	f8d7 07a4 	ldr.w	r0, [r7, #1956]
   16684:	f8d7 17cc 	ldr.w	r1, [r7, #1996]
   16688:	f04f 0201 	mov.w	r2, #1	; 0x1
   1668c:	f7fa fa8c 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape29);
   16690:	f8d7 07a4 	ldr.w	r0, [r7, #1956]
   16694:	f8d7 17d0 	ldr.w	r1, [r7, #2000]
   16698:	f04f 0201 	mov.w	r2, #1	; 0x1
   1669c:	f7fa fa84 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape29->addVoisin(etape30);
   166a0:	f8d7 07d0 	ldr.w	r0, [r7, #2000]
   166a4:	f8d7 17d4 	ldr.w	r1, [r7, #2004]
   166a8:	f04f 0201 	mov.w	r2, #1	; 0x1
   166ac:	f7fa fa7c 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape29->addVoisin(etape31);
   166b0:	f8d7 07d0 	ldr.w	r0, [r7, #2000]
   166b4:	f8d7 17d8 	ldr.w	r1, [r7, #2008]
   166b8:	f04f 0201 	mov.w	r2, #1	; 0x1
   166bc:	f7fa fa74 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape31);
   166c0:	f8d7 07d4 	ldr.w	r0, [r7, #2004]
   166c4:	f8d7 17d8 	ldr.w	r1, [r7, #2008]
   166c8:	f04f 0201 	mov.w	r2, #1	; 0x1
   166cc:	f7fa fa6c 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape18);
   166d0:	f8d7 07d4 	ldr.w	r0, [r7, #2004]
   166d4:	f8d7 17a4 	ldr.w	r1, [r7, #1956]
   166d8:	f04f 0201 	mov.w	r2, #1	; 0x1
   166dc:	f7fa fa64 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape4);
   166e0:	f8d7 07d4 	ldr.w	r0, [r7, #2004]
   166e4:	f8d7 176c 	ldr.w	r1, [r7, #1900]
   166e8:	f04f 0201 	mov.w	r2, #1	; 0x1
   166ec:	f7fa fa5c 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape29);
   166f0:	f8d7 07cc 	ldr.w	r0, [r7, #1996]
   166f4:	f8d7 17d0 	ldr.w	r1, [r7, #2000]
   166f8:	f04f 0201 	mov.w	r2, #1	; 0x1
   166fc:	f7fa fa54 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape30);
   16700:	f8d7 07cc 	ldr.w	r0, [r7, #1996]
   16704:	f8d7 17d4 	ldr.w	r1, [r7, #2004]
   16708:	f04f 0201 	mov.w	r2, #1	; 0x1
   1670c:	f7fa fa4c 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape31);
   16710:	f8d7 07cc 	ldr.w	r0, [r7, #1996]
   16714:	f8d7 17d8 	ldr.w	r1, [r7, #2008]
   16718:	f04f 0201 	mov.w	r2, #1	; 0x1
   1671c:	f7fa fa44 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape34);
   16720:	f8d7 07e0 	ldr.w	r0, [r7, #2016]
   16724:	f8d7 17e4 	ldr.w	r1, [r7, #2020]
   16728:	f04f 0201 	mov.w	r2, #1	; 0x1
   1672c:	f7fa fa3c 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape34->addVoisin(etape35);
   16730:	f8d7 07e4 	ldr.w	r0, [r7, #2020]
   16734:	f8d7 17e8 	ldr.w	r1, [r7, #2024]
   16738:	f04f 0201 	mov.w	r2, #1	; 0x1
   1673c:	f7fa fa34 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape24);
   16740:	f8d7 07e8 	ldr.w	r0, [r7, #2024]
   16744:	f8d7 17bc 	ldr.w	r1, [r7, #1980]
   16748:	f04f 0201 	mov.w	r2, #1	; 0x1
   1674c:	f7fa fa2c 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape37);
   16750:	f8d7 07e8 	ldr.w	r0, [r7, #2024]
   16754:	f8d7 17f0 	ldr.w	r1, [r7, #2032]
   16758:	f04f 0201 	mov.w	r2, #1	; 0x1
   1675c:	f7fa fa24 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape37->addVoisin(etape36);
   16760:	f8d7 07f0 	ldr.w	r0, [r7, #2032]
   16764:	f8d7 17ec 	ldr.w	r1, [r7, #2028]
   16768:	f04f 0201 	mov.w	r2, #1	; 0x1
   1676c:	f7fa fa1c 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape36->addVoisin(etape6);
   16770:	f8d7 07ec 	ldr.w	r0, [r7, #2028]
   16774:	f8d7 1774 	ldr.w	r1, [r7, #1908]
   16778:	f04f 0201 	mov.w	r2, #1	; 0x1
   1677c:	f7fa fa14 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape36->addVoisin(etape7);
   16780:	f8d7 07ec 	ldr.w	r0, [r7, #2028]
   16784:	f8d7 1778 	ldr.w	r1, [r7, #1912]
   16788:	f04f 0201 	mov.w	r2, #1	; 0x1
   1678c:	f7fa fa0c 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape33);
   16790:	f8d7 07b8 	ldr.w	r0, [r7, #1976]
   16794:	f8d7 17e0 	ldr.w	r1, [r7, #2016]
   16798:	f04f 0201 	mov.w	r2, #1	; 0x1
   1679c:	f7fa fa04 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape34);
   167a0:	f8d7 07b8 	ldr.w	r0, [r7, #1976]
   167a4:	f8d7 17e4 	ldr.w	r1, [r7, #2020]
   167a8:	f04f 0201 	mov.w	r2, #1	; 0x1
   167ac:	f7fa f9fc 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape35);
   167b0:	f8d7 07b8 	ldr.w	r0, [r7, #1976]
   167b4:	f8d7 17e8 	ldr.w	r1, [r7, #2024]
   167b8:	f04f 0201 	mov.w	r2, #1	; 0x1
   167bc:	f7fa f9f4 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape33);
   167c0:	f8d7 0788 	ldr.w	r0, [r7, #1928]
   167c4:	f8d7 17e0 	ldr.w	r1, [r7, #2016]
   167c8:	f04f 0201 	mov.w	r2, #1	; 0x1
   167cc:	f7fa f9ec 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape34);
   167d0:	f8d7 0788 	ldr.w	r0, [r7, #1928]
   167d4:	f8d7 17e4 	ldr.w	r1, [r7, #2020]
   167d8:	f04f 0201 	mov.w	r2, #1	; 0x1
   167dc:	f7fa f9e4 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape38);
   167e0:	f8d7 07b8 	ldr.w	r0, [r7, #1976]
   167e4:	f8d7 17f4 	ldr.w	r1, [r7, #2036]
   167e8:	f04f 0201 	mov.w	r2, #1	; 0x1
   167ec:	f7fa f9dc 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape39);
   167f0:	f8d7 07b8 	ldr.w	r0, [r7, #1976]
   167f4:	f8d7 17f8 	ldr.w	r1, [r7, #2040]
   167f8:	f04f 0201 	mov.w	r2, #1	; 0x1
   167fc:	f7fa f9d4 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape38);
   16800:	f8d7 0780 	ldr.w	r0, [r7, #1920]
   16804:	f8d7 17f4 	ldr.w	r1, [r7, #2036]
   16808:	f04f 0201 	mov.w	r2, #1	; 0x1
   1680c:	f7fa f9cc 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape38->addVoisin(etape39);
   16810:	f8d7 07f4 	ldr.w	r0, [r7, #2036]
   16814:	f8d7 17f8 	ldr.w	r1, [r7, #2040]
   16818:	f04f 0201 	mov.w	r2, #1	; 0x1
   1681c:	f7fa f9c4 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape39->addVoisin(etape11);
   16820:	f8d7 07f8 	ldr.w	r0, [r7, #2040]
   16824:	f8d7 1788 	ldr.w	r1, [r7, #1928]
   16828:	f04f 0201 	mov.w	r2, #1	; 0x1
   1682c:	f7fa f9bc 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>
    etape5->addVoisin(etape29);
   16830:	f8d7 0770 	ldr.w	r0, [r7, #1904]
   16834:	f8d7 17d0 	ldr.w	r1, [r7, #2000]
   16838:	f04f 0201 	mov.w	r2, #1	; 0x1
   1683c:	f7fa f9b4 	bl	10ba8 <_ZN5Etape9addVoisinEPS_b>

    //Certaines actions d'étapes ne finnissent pas là où elles ont commencé :
    etape2->setNumeroEtapeFinAction(3);//Clapet notre côté vers milieu
   16840:	f8d7 0764 	ldr.w	r0, [r7, #1892]
   16844:	f04f 0103 	mov.w	r1, #3	; 0x3
   16848:	f7fa f994 	bl	10b74 <_ZN5Etape23setNumeroEtapeFinActionEi>
    etape4->setNumeroEtapeFinAction(5);//Clapet notre côté vers notre bord
   1684c:	f8d7 076c 	ldr.w	r0, [r7, #1900]
   16850:	f04f 0105 	mov.w	r1, #5	; 0x5
   16854:	f7fa f98e 	bl	10b74 <_ZN5Etape23setNumeroEtapeFinActionEi>
    etape6->setNumeroEtapeFinAction(7);//Clapet côté adverse
   16858:	f8d7 0774 	ldr.w	r0, [r7, #1908]
   1685c:	f04f 0107 	mov.w	r1, #7	; 0x7
   16860:	f7fa f988 	bl	10b74 <_ZN5Etape23setNumeroEtapeFinActionEi>
    // Lancer Dijkstra
    startDijkstra();
   16864:	f507 730c 	add.w	r3, r7, #560	; 0x230
   16868:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1686c:	681b      	ldr	r3, [r3, #0]
   1686e:	4618      	mov	r0, r3
   16870:	f001 ff60 	bl	18734 <_ZN11StrategieV313startDijkstraEv>
}
   16874:	f507 730c 	add.w	r3, r7, #560	; 0x230
   16878:	f1a3 030c 	sub.w	r3, r3, #12	; 0xc
   1687c:	681b      	ldr	r3, [r3, #0]
   1687e:	4618      	mov	r0, r3
   16880:	f107 0704 	add.w	r7, r7, #4	; 0x4
   16884:	f507 6700 	add.w	r7, r7, #2048	; 0x800
   16888:	46bd      	mov	sp, r7
   1688a:	bd90      	pop	{r4, r7, pc}

0001688c <_ZN17MediumLevelAction15getGoalPositionEv>:
MediumLevelAction::~MediumLevelAction()
{
    //dtor
}

Position MediumLevelAction::getGoalPosition()
   1688c:	b480      	push	{r7}
   1688e:	b083      	sub	sp, #12
   16890:	af00      	add	r7, sp, #0
   16892:	4684      	mov	ip, r0
   16894:	6079      	str	r1, [r7, #4]
{
    return goalPosition;
   16896:	687b      	ldr	r3, [r7, #4]
   16898:	4662      	mov	r2, ip
   1689a:	f103 0304 	add.w	r3, r3, #4	; 0x4
   1689e:	e893 0003 	ldmia.w	r3, {r0, r1}
   168a2:	e882 0003 	stmia.w	r2, {r0, r1}
}
   168a6:	4660      	mov	r0, ip
   168a8:	f107 070c 	add.w	r7, r7, #12	; 0xc
   168ac:	46bd      	mov	sp, r7
   168ae:	bc80      	pop	{r7}
   168b0:	4770      	bx	lr
   168b2:	46c0      	nop			(mov r8, r8)

000168b4 <_ZN17MediumLevelAction9getGoBackEv>:

bool MediumLevelAction::getGoBack()
   168b4:	b480      	push	{r7}
   168b6:	b083      	sub	sp, #12
   168b8:	af00      	add	r7, sp, #0
   168ba:	6078      	str	r0, [r7, #4]
{
    return goBack;
   168bc:	687b      	ldr	r3, [r7, #4]
   168be:	7c1b      	ldrb	r3, [r3, #16]
}
   168c0:	4618      	mov	r0, r3
   168c2:	f107 070c 	add.w	r7, r7, #12	; 0xc
   168c6:	46bd      	mov	sp, r7
   168c8:	bc80      	pop	{r7}
   168ca:	4770      	bx	lr

000168cc <_ZN17MediumLevelAction16collisionAvoidedEv>:

void MediumLevelAction::collisionAvoided()
   168cc:	b480      	push	{r7}
   168ce:	b083      	sub	sp, #12
   168d0:	af00      	add	r7, sp, #0
   168d2:	6078      	str	r0, [r7, #4]
{
    status = 0; // reinitialize the status if function not overloaded
   168d4:	687a      	ldr	r2, [r7, #4]
   168d6:	f04f 0300 	mov.w	r3, #0	; 0x0
   168da:	60d3      	str	r3, [r2, #12]
}
   168dc:	f107 070c 	add.w	r7, r7, #12	; 0xc
   168e0:	46bd      	mov	sp, r7
   168e2:	bc80      	pop	{r7}
   168e4:	4770      	bx	lr
   168e6:	46c0      	nop			(mov r8, r8)

000168e8 <_ZN17MediumLevelAction9setGoBackEb>:

void MediumLevelAction::setGoBack(bool val)
   168e8:	b480      	push	{r7}
   168ea:	b083      	sub	sp, #12
   168ec:	af00      	add	r7, sp, #0
   168ee:	6078      	str	r0, [r7, #4]
   168f0:	460b      	mov	r3, r1
   168f2:	70fb      	strb	r3, [r7, #3]
{
    goBack = val;
   168f4:	687a      	ldr	r2, [r7, #4]
   168f6:	78fb      	ldrb	r3, [r7, #3]
   168f8:	7413      	strb	r3, [r2, #16]
}
   168fa:	f107 070c 	add.w	r7, r7, #12	; 0xc
   168fe:	46bd      	mov	sp, r7
   16900:	bc80      	pop	{r7}
   16902:	4770      	bx	lr

00016904 <_ZN17MediumLevelAction5resetEv>:

void MediumLevelAction::reset()
   16904:	b480      	push	{r7}
   16906:	b083      	sub	sp, #12
   16908:	af00      	add	r7, sp, #0
   1690a:	6078      	str	r0, [r7, #4]
{

}
   1690c:	f107 070c 	add.w	r7, r7, #12	; 0xc
   16910:	46bd      	mov	sp, r7
   16912:	bc80      	pop	{r7}
   16914:	4770      	bx	lr
   16916:	46c0      	nop			(mov r8, r8)

00016918 <_ZN17MediumLevelAction10updateTimeEi>:
{

}
#endif

void MediumLevelAction::updateTime(int millisecondesRestantes)
   16918:	b480      	push	{r7}
   1691a:	b083      	sub	sp, #12
   1691c:	af00      	add	r7, sp, #0
   1691e:	6078      	str	r0, [r7, #4]
   16920:	6039      	str	r1, [r7, #0]
{
    this->millisecondesRestantes = millisecondesRestantes;
   16922:	687a      	ldr	r2, [r7, #4]
   16924:	683b      	ldr	r3, [r7, #0]
   16926:	6153      	str	r3, [r2, #20]
}
   16928:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1692c:	46bd      	mov	sp, r7
   1692e:	bc80      	pop	{r7}
   16930:	4770      	bx	lr
   16932:	46c0      	nop			(mov r8, r8)

00016934 <_ZN17MediumLevelActionD0Ev>:
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
    status = 0;
}

MediumLevelAction::~MediumLevelAction()
   16934:	b580      	push	{r7, lr}
   16936:	b082      	sub	sp, #8
   16938:	af00      	add	r7, sp, #0
   1693a:	6078      	str	r0, [r7, #4]
   1693c:	687a      	ldr	r2, [r7, #4]
   1693e:	4b08      	ldr	r3, [pc, #32]	(16960 <_ZN17MediumLevelActionD0Ev+0x2c>)
   16940:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   16942:	f04f 0301 	mov.w	r3, #1	; 0x1
   16946:	b2db      	uxtb	r3, r3
   16948:	2b00      	cmp	r3, #0
   1694a:	d002      	beq.n	16952 <_ZN17MediumLevelActionD0Ev+0x1e>
   1694c:	6878      	ldr	r0, [r7, #4]
   1694e:	f7f8 f991 	bl	ec74 <_ZdlPv>
   16952:	687b      	ldr	r3, [r7, #4]
   16954:	4618      	mov	r0, r3
   16956:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1695a:	46bd      	mov	sp, r7
   1695c:	bd80      	pop	{r7, pc}
   1695e:	46c0      	nop			(mov r8, r8)
   16960:	00024188 	.word	0x00024188

00016964 <_ZN17MediumLevelActionD1Ev>:
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
    status = 0;
}

MediumLevelAction::~MediumLevelAction()
   16964:	b580      	push	{r7, lr}
   16966:	b082      	sub	sp, #8
   16968:	af00      	add	r7, sp, #0
   1696a:	6078      	str	r0, [r7, #4]
   1696c:	687a      	ldr	r2, [r7, #4]
   1696e:	4b08      	ldr	r3, [pc, #32]	(16990 <_ZN17MediumLevelActionD1Ev+0x2c>)
   16970:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   16972:	f04f 0300 	mov.w	r3, #0	; 0x0
   16976:	b2db      	uxtb	r3, r3
   16978:	2b00      	cmp	r3, #0
   1697a:	d002      	beq.n	16982 <_ZN17MediumLevelActionD1Ev+0x1e>
   1697c:	6878      	ldr	r0, [r7, #4]
   1697e:	f7f8 f979 	bl	ec74 <_ZdlPv>
   16982:	687b      	ldr	r3, [r7, #4]
   16984:	4618      	mov	r0, r3
   16986:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1698a:	46bd      	mov	sp, r7
   1698c:	bd80      	pop	{r7, pc}
   1698e:	46c0      	nop			(mov r8, r8)
   16990:	00024188 	.word	0x00024188

00016994 <_ZN17MediumLevelActionD2Ev>:
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
    status = 0;
}

MediumLevelAction::~MediumLevelAction()
   16994:	b580      	push	{r7, lr}
   16996:	b082      	sub	sp, #8
   16998:	af00      	add	r7, sp, #0
   1699a:	6078      	str	r0, [r7, #4]
   1699c:	687a      	ldr	r2, [r7, #4]
   1699e:	4b08      	ldr	r3, [pc, #32]	(169c0 <_ZN17MediumLevelActionD2Ev+0x2c>)
   169a0:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   169a2:	f04f 0300 	mov.w	r3, #0	; 0x0
   169a6:	b2db      	uxtb	r3, r3
   169a8:	2b00      	cmp	r3, #0
   169aa:	d002      	beq.n	169b2 <_ZN17MediumLevelActionD2Ev+0x1e>
   169ac:	6878      	ldr	r0, [r7, #4]
   169ae:	f7f8 f961 	bl	ec74 <_ZdlPv>
   169b2:	687b      	ldr	r3, [r7, #4]
   169b4:	4618      	mov	r0, r3
   169b6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   169ba:	46bd      	mov	sp, r7
   169bc:	bd80      	pop	{r7, pc}
   169be:	46c0      	nop			(mov r8, r8)
   169c0:	00024188 	.word	0x00024188

000169c4 <_ZN17MediumLevelActionC1E8Position>:
#include "mediumLevelAction.h"
#include "strategieV2.h"

MediumLevelAction::MediumLevelAction(Position goalPos) 
   169c4:	b580      	push	{r7, lr}
   169c6:	b084      	sub	sp, #16
   169c8:	af00      	add	r7, sp, #0
   169ca:	60f8      	str	r0, [r7, #12]
   169cc:	f107 0304 	add.w	r3, r7, #4	; 0x4
   169d0:	e883 0006 	stmia.w	r3, {r1, r2}
   169d4:	68fa      	ldr	r2, [r7, #12]
   169d6:	4b0e      	ldr	r3, [pc, #56]	(16a10 <_ZN17MediumLevelActionC1E8Position+0x4c>)
   169d8:	6013      	str	r3, [r2, #0]
   169da:	68fb      	ldr	r3, [r7, #12]
   169dc:	f103 0304 	add.w	r3, r3, #4	; 0x4
   169e0:	4618      	mov	r0, r3
   169e2:	f7f8 f9df 	bl	eda4 <_ZN8PositionC1Ev>
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
   169e6:	68fb      	ldr	r3, [r7, #12]
   169e8:	f103 0304 	add.w	r3, r3, #4	; 0x4
   169ec:	4618      	mov	r0, r3
   169ee:	f107 0304 	add.w	r3, r7, #4	; 0x4
   169f2:	e893 0006 	ldmia.w	r3, {r1, r2}
   169f6:	f7f8 fa91 	bl	ef1c <_ZN8PositionaSES_>
    status = 0;
   169fa:	68fa      	ldr	r2, [r7, #12]
   169fc:	f04f 0300 	mov.w	r3, #0	; 0x0
   16a00:	60d3      	str	r3, [r2, #12]
}
   16a02:	68fb      	ldr	r3, [r7, #12]
   16a04:	4618      	mov	r0, r3
   16a06:	f107 0710 	add.w	r7, r7, #16	; 0x10
   16a0a:	46bd      	mov	sp, r7
   16a0c:	bd80      	pop	{r7, pc}
   16a0e:	46c0      	nop			(mov r8, r8)
   16a10:	00024188 	.word	0x00024188

00016a14 <_ZN17MediumLevelActionC2E8Position>:
#include "mediumLevelAction.h"
#include "strategieV2.h"

MediumLevelAction::MediumLevelAction(Position goalPos) 
   16a14:	b580      	push	{r7, lr}
   16a16:	b084      	sub	sp, #16
   16a18:	af00      	add	r7, sp, #0
   16a1a:	60f8      	str	r0, [r7, #12]
   16a1c:	f107 0304 	add.w	r3, r7, #4	; 0x4
   16a20:	e883 0006 	stmia.w	r3, {r1, r2}
   16a24:	68fa      	ldr	r2, [r7, #12]
   16a26:	4b0e      	ldr	r3, [pc, #56]	(16a60 <_ZN17MediumLevelActionC2E8Position+0x4c>)
   16a28:	6013      	str	r3, [r2, #0]
   16a2a:	68fb      	ldr	r3, [r7, #12]
   16a2c:	f103 0304 	add.w	r3, r3, #4	; 0x4
   16a30:	4618      	mov	r0, r3
   16a32:	f7f8 f9b7 	bl	eda4 <_ZN8PositionC1Ev>
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
   16a36:	68fb      	ldr	r3, [r7, #12]
   16a38:	f103 0304 	add.w	r3, r3, #4	; 0x4
   16a3c:	4618      	mov	r0, r3
   16a3e:	f107 0304 	add.w	r3, r7, #4	; 0x4
   16a42:	e893 0006 	ldmia.w	r3, {r1, r2}
   16a46:	f7f8 fa69 	bl	ef1c <_ZN8PositionaSES_>
    status = 0;
   16a4a:	68fa      	ldr	r2, [r7, #12]
   16a4c:	f04f 0300 	mov.w	r3, #0	; 0x0
   16a50:	60d3      	str	r3, [r2, #12]
}
   16a52:	68fb      	ldr	r3, [r7, #12]
   16a54:	4618      	mov	r0, r3
   16a56:	f107 0710 	add.w	r7, r7, #16	; 0x10
   16a5a:	46bd      	mov	sp, r7
   16a5c:	bd80      	pop	{r7, pc}
   16a5e:	46c0      	nop			(mov r8, r8)
   16a60:	00024188 	.word	0x00024188

00016a64 <_ZN12RamasserPied6updateEv>:

RamasserPied::RamasserPied(Position goalposition): MediumLevelAction(goalposition){}

RamasserPied::~RamasserPied(){}

int RamasserPied::update()
   16a64:	b580      	push	{r7, lr}
   16a66:	b086      	sub	sp, #24
   16a68:	af02      	add	r7, sp, #8
   16a6a:	6078      	str	r0, [r7, #4]
{

    if (status == 0)
   16a6c:	687b      	ldr	r3, [r7, #4]
   16a6e:	68db      	ldr	r3, [r3, #12]
   16a70:	2b00      	cmp	r3, #0
   16a72:	d11a      	bne.n	16aaa <_ZN12RamasserPied6updateEv+0x46>
    {
    #ifndef ROBOTHW
            qDebug() << "action pied";
    #endif
        StrategieV2::setCurrentGoal(this->goalPosition, this->goBack);
   16a74:	687b      	ldr	r3, [r7, #4]
   16a76:	f893 c010 	ldrb.w	ip, [r3, #16]
   16a7a:	687a      	ldr	r2, [r7, #4]
   16a7c:	4b7b      	ldr	r3, [pc, #492]	(16c6c <_ZN12RamasserPied6updateEv+0x208>)
   16a7e:	9300      	str	r3, [sp, #0]
   16a80:	f102 0304 	add.w	r3, r2, #4	; 0x4
   16a84:	e893 0003 	ldmia.w	r3, {r0, r1}
   16a88:	4662      	mov	r2, ip
   16a8a:	4b79      	ldr	r3, [pc, #484]	(16c70 <_ZN12RamasserPied6updateEv+0x20c>)
   16a8c:	f001 f972 	bl	17d74 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        Ascenseur::getSingleton()->leverAscenseur();
   16a90:	f7ee faea 	bl	5068 <_ZN9Ascenseur12getSingletonEv>
   16a94:	4603      	mov	r3, r0
   16a96:	4618      	mov	r0, r3
   16a98:	f7ee fad4 	bl	5044 <_ZN9Ascenseur14leverAscenseurEv>
        status++;
   16a9c:	687b      	ldr	r3, [r7, #4]
   16a9e:	68db      	ldr	r3, [r3, #12]
   16aa0:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16aa4:	687b      	ldr	r3, [r7, #4]
   16aa6:	60da      	str	r2, [r3, #12]
   16aa8:	e0d8      	b.n	16c5c <_ZN12RamasserPied6updateEv+0x1f8>
    }

    else if (status == MLA_RAMASSER_PIED_APPROCHE)
   16aaa:	687b      	ldr	r3, [r7, #4]
   16aac:	68db      	ldr	r3, [r3, #12]
   16aae:	2b01      	cmp	r3, #1
   16ab0:	d11a      	bne.n	16ae8 <_ZN12RamasserPied6updateEv+0x84>
    {
        if (Command::isNear(goalPosition, 200.0f))
   16ab2:	687b      	ldr	r3, [r7, #4]
   16ab4:	f103 0304 	add.w	r3, r3, #4	; 0x4
   16ab8:	e893 0003 	ldmia.w	r3, {r0, r1}
   16abc:	4a6d      	ldr	r2, [pc, #436]	(16c74 <_ZN12RamasserPied6updateEv+0x210>)
   16abe:	f7f1 fc39 	bl	8334 <_ZN7Command6isNearE8Positionf>
   16ac2:	4603      	mov	r3, r0
   16ac4:	2b00      	cmp	r3, #0
   16ac6:	f000 80c9 	beq.w	16c5c <_ZN12RamasserPied6updateEv+0x1f8>
        {
            StrategieV2::lookAt(goalPosition);
   16aca:	687b      	ldr	r3, [r7, #4]
   16acc:	f103 0304 	add.w	r3, r3, #4	; 0x4
   16ad0:	e893 0003 	ldmia.w	r3, {r0, r1}
   16ad4:	4a68      	ldr	r2, [pc, #416]	(16c78 <_ZN12RamasserPied6updateEv+0x214>)
   16ad6:	f001 f8b5 	bl	17c44 <_ZN11StrategieV26lookAtE8Positionf>
            status++;
   16ada:	687b      	ldr	r3, [r7, #4]
   16adc:	68db      	ldr	r3, [r3, #12]
   16ade:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16ae2:	687b      	ldr	r3, [r7, #4]
   16ae4:	60da      	str	r2, [r3, #12]
   16ae6:	e0b9      	b.n	16c5c <_ZN12RamasserPied6updateEv+0x1f8>
        }
    }

    else if (status == MLA_RAMASSER_PIED_APPROCHE)
   16ae8:	687b      	ldr	r3, [r7, #4]
   16aea:	68db      	ldr	r3, [r3, #12]
   16aec:	2b01      	cmp	r3, #1
   16aee:	d11a      	bne.n	16b26 <_ZN12RamasserPied6updateEv+0xc2>
    {
        if (Command::isNear(goalPosition, 175.0f))
   16af0:	687b      	ldr	r3, [r7, #4]
   16af2:	f103 0304 	add.w	r3, r3, #4	; 0x4
   16af6:	e893 0003 	ldmia.w	r3, {r0, r1}
   16afa:	4a60      	ldr	r2, [pc, #384]	(16c7c <_ZN12RamasserPied6updateEv+0x218>)
   16afc:	f7f1 fc1a 	bl	8334 <_ZN7Command6isNearE8Positionf>
   16b00:	4603      	mov	r3, r0
   16b02:	2b00      	cmp	r3, #0
   16b04:	f000 80aa 	beq.w	16c5c <_ZN12RamasserPied6updateEv+0x1f8>
        {
            StrategieV2::lookAt(goalPosition);
   16b08:	687b      	ldr	r3, [r7, #4]
   16b0a:	f103 0304 	add.w	r3, r3, #4	; 0x4
   16b0e:	e893 0003 	ldmia.w	r3, {r0, r1}
   16b12:	4a59      	ldr	r2, [pc, #356]	(16c78 <_ZN12RamasserPied6updateEv+0x214>)
   16b14:	f001 f896 	bl	17c44 <_ZN11StrategieV26lookAtE8Positionf>
            status++;
   16b18:	687b      	ldr	r3, [r7, #4]
   16b1a:	68db      	ldr	r3, [r3, #12]
   16b1c:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16b20:	687b      	ldr	r3, [r7, #4]
   16b22:	60da      	str	r2, [r3, #12]
   16b24:	e09a      	b.n	16c5c <_ZN12RamasserPied6updateEv+0x1f8>
        }
    }

    else if (status == MLA_RAMASSER_PIED_REGARDE + MLA_RAMASSER_PIED_APPROCHE)
   16b26:	687b      	ldr	r3, [r7, #4]
   16b28:	68db      	ldr	r3, [r3, #12]
   16b2a:	2b02      	cmp	r3, #2
   16b2c:	d118      	bne.n	16b60 <_ZN12RamasserPied6updateEv+0xfc>
    {
        if (Command::isLookingAt(goalPosition))
   16b2e:	687b      	ldr	r3, [r7, #4]
   16b30:	f103 0304 	add.w	r3, r3, #4	; 0x4
   16b34:	e893 0003 	ldmia.w	r3, {r0, r1}
   16b38:	4a51      	ldr	r2, [pc, #324]	(16c80 <_ZN12RamasserPied6updateEv+0x21c>)
   16b3a:	f7f1 fb3f 	bl	81bc <_ZN7Command11isLookingAtE8Positionf>
   16b3e:	4603      	mov	r3, r0
   16b40:	2b00      	cmp	r3, #0
   16b42:	f000 808b 	beq.w	16c5c <_ZN12RamasserPied6updateEv+0x1f8>
        {
            Ascenseur::getSingleton()->ouvrirAscenseur();
   16b46:	f7ee fa8f 	bl	5068 <_ZN9Ascenseur12getSingletonEv>
   16b4a:	4603      	mov	r3, r0
   16b4c:	4618      	mov	r0, r3
   16b4e:	f7ee fa33 	bl	4fb8 <_ZN9Ascenseur15ouvrirAscenseurEv>
            status++;
   16b52:	687b      	ldr	r3, [r7, #4]
   16b54:	68db      	ldr	r3, [r3, #12]
   16b56:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16b5a:	687b      	ldr	r3, [r7, #4]
   16b5c:	60da      	str	r2, [r3, #12]
   16b5e:	e07d      	b.n	16c5c <_ZN12RamasserPied6updateEv+0x1f8>
        }
    }

    else if (status == MLA_RAMASSER_PIED_OUVRE + MLA_RAMASSER_PIED_REGARDE + MLA_RAMASSER_PIED_APPROCHE)
   16b60:	687b      	ldr	r3, [r7, #4]
   16b62:	68db      	ldr	r3, [r3, #12]
   16b64:	2b34      	cmp	r3, #52
   16b66:	d10c      	bne.n	16b82 <_ZN12RamasserPied6updateEv+0x11e>
    {
        Ascenseur::getSingleton()->baisserAscenseur();
   16b68:	f7ee fa7e 	bl	5068 <_ZN9Ascenseur12getSingletonEv>
   16b6c:	4603      	mov	r3, r0
   16b6e:	4618      	mov	r0, r3
   16b70:	f7ee fa3a 	bl	4fe8 <_ZN9Ascenseur16baisserAscenseurEv>
        status++;
   16b74:	687b      	ldr	r3, [r7, #4]
   16b76:	68db      	ldr	r3, [r3, #12]
   16b78:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16b7c:	687b      	ldr	r3, [r7, #4]
   16b7e:	60da      	str	r2, [r3, #12]
   16b80:	e06c      	b.n	16c5c <_ZN12RamasserPied6updateEv+0x1f8>
    }

    else if (status == MLA_RAMASSER_PIED_BAISSE + MLA_RAMASSER_PIED_OUVRE + MLA_RAMASSER_PIED_REGARDE + MLA_RAMASSER_PIED_APPROCHE)
   16b82:	687b      	ldr	r3, [r7, #4]
   16b84:	68db      	ldr	r3, [r3, #12]
   16b86:	2b66      	cmp	r3, #102
   16b88:	d106      	bne.n	16b98 <_ZN12RamasserPied6updateEv+0x134>
    {
        Ascenseur::getSingleton()->fermerAscenseur();
   16b8a:	f7ee fa6d 	bl	5068 <_ZN9Ascenseur12getSingletonEv>
   16b8e:	4603      	mov	r3, r0
   16b90:	4618      	mov	r0, r3
   16b92:	f7ee f9f9 	bl	4f88 <_ZN9Ascenseur15fermerAscenseurEv>
   16b96:	e061      	b.n	16c5c <_ZN12RamasserPied6updateEv+0x1f8>
    }

    else if (status == MLA_RAMASSER_PIED_FERME + MLA_RAMASSER_PIED_BAISSE + MLA_RAMASSER_PIED_OUVRE + MLA_RAMASSER_PIED_REGARDE + MLA_RAMASSER_PIED_APPROCHE)
   16b98:	687b      	ldr	r3, [r7, #4]
   16b9a:	68db      	ldr	r3, [r3, #12]
   16b9c:	2b98      	cmp	r3, #152
   16b9e:	d106      	bne.n	16bae <_ZN12RamasserPied6updateEv+0x14a>
    {
        Ascenseur::getSingleton()->leverAscenseur();
   16ba0:	f7ee fa62 	bl	5068 <_ZN9Ascenseur12getSingletonEv>
   16ba4:	4603      	mov	r3, r0
   16ba6:	4618      	mov	r0, r3
   16ba8:	f7ee fa4c 	bl	5044 <_ZN9Ascenseur14leverAscenseurEv>
   16bac:	e056      	b.n	16c5c <_ZN12RamasserPied6updateEv+0x1f8>
    }

    else if (status == MLA_RAMASSER_PIED_FERME + MLA_RAMASSER_PIED_BAISSE + MLA_RAMASSER_PIED_OUVRE + MLA_RAMASSER_PIED_REGARDE + MLA_RAMASSER_PIED_APPROCHE)
   16bae:	687b      	ldr	r3, [r7, #4]
   16bb0:	68db      	ldr	r3, [r3, #12]
   16bb2:	2b98      	cmp	r3, #152
   16bb4:	d125      	bne.n	16c02 <_ZN12RamasserPied6updateEv+0x19e>
    {
#ifndef ROBOTHW
        qDebug() << "Etape pied finie";
#endif
        StrategieV2::setCurrentGoal(this->goalPosition, this->goBack);
   16bb6:	687b      	ldr	r3, [r7, #4]
   16bb8:	f893 c010 	ldrb.w	ip, [r3, #16]
   16bbc:	687a      	ldr	r2, [r7, #4]
   16bbe:	4b2b      	ldr	r3, [pc, #172]	(16c6c <_ZN12RamasserPied6updateEv+0x208>)
   16bc0:	9300      	str	r3, [sp, #0]
   16bc2:	f102 0304 	add.w	r3, r2, #4	; 0x4
   16bc6:	e893 0003 	ldmia.w	r3, {r0, r1}
   16bca:	4662      	mov	r2, ip
   16bcc:	4b28      	ldr	r3, [pc, #160]	(16c70 <_ZN12RamasserPied6updateEv+0x20c>)
   16bce:	f001 f8d1 	bl	17d74 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
   16bd2:	687b      	ldr	r3, [r7, #4]
   16bd4:	68db      	ldr	r3, [r3, #12]
   16bd6:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16bda:	687b      	ldr	r3, [r7, #4]
   16bdc:	60da      	str	r2, [r3, #12]
        int nouveauNbrPiedsStockes = Ascenseur::getSingleton()->getNbrPiedsStockes() + 1;
   16bde:	f7ee fa43 	bl	5068 <_ZN9Ascenseur12getSingletonEv>
   16be2:	4603      	mov	r3, r0
   16be4:	4618      	mov	r0, r3
   16be6:	f7ee f997 	bl	4f18 <_ZN9Ascenseur18getNbrPiedsStockesEv>
   16bea:	4603      	mov	r3, r0
   16bec:	f103 0301 	add.w	r3, r3, #1	; 0x1
   16bf0:	60fb      	str	r3, [r7, #12]
        Ascenseur::getSingleton()->setNbrPiedsStockes(nouveauNbrPiedsStockes);
   16bf2:	f7ee fa39 	bl	5068 <_ZN9Ascenseur12getSingletonEv>
   16bf6:	4603      	mov	r3, r0
   16bf8:	4618      	mov	r0, r3
   16bfa:	68f9      	ldr	r1, [r7, #12]
   16bfc:	f7ee f998 	bl	4f30 <_ZN9Ascenseur18setNbrPiedsStockesEi>
   16c00:	e02c      	b.n	16c5c <_ZN12RamasserPied6updateEv+0x1f8>
    }

    else if (status == 84)
   16c02:	687b      	ldr	r3, [r7, #4]
   16c04:	68db      	ldr	r3, [r3, #12]
   16c06:	2b54      	cmp	r3, #84
   16c08:	d119      	bne.n	16c3e <_ZN12RamasserPied6updateEv+0x1da>
    {
        if (Command::isNear(goalPosition))
   16c0a:	687b      	ldr	r3, [r7, #4]
   16c0c:	f103 0304 	add.w	r3, r3, #4	; 0x4
   16c10:	e893 0003 	ldmia.w	r3, {r0, r1}
   16c14:	4a1b      	ldr	r2, [pc, #108]	(16c84 <_ZN12RamasserPied6updateEv+0x220>)
   16c16:	f7f1 fb8d 	bl	8334 <_ZN7Command6isNearE8Positionf>
   16c1a:	4603      	mov	r3, r0
   16c1c:	2b00      	cmp	r3, #0
   16c1e:	d01d      	beq.n	16c5c <_ZN12RamasserPied6updateEv+0x1f8>
        {
            StrategieV2::lookAt(goalPosition);
   16c20:	687b      	ldr	r3, [r7, #4]
   16c22:	f103 0304 	add.w	r3, r3, #4	; 0x4
   16c26:	e893 0003 	ldmia.w	r3, {r0, r1}
   16c2a:	4a13      	ldr	r2, [pc, #76]	(16c78 <_ZN12RamasserPied6updateEv+0x214>)
   16c2c:	f001 f80a 	bl	17c44 <_ZN11StrategieV26lookAtE8Positionf>
            status++;
   16c30:	687b      	ldr	r3, [r7, #4]
   16c32:	68db      	ldr	r3, [r3, #12]
   16c34:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16c38:	687b      	ldr	r3, [r7, #4]
   16c3a:	60da      	str	r2, [r3, #12]
   16c3c:	e00e      	b.n	16c5c <_ZN12RamasserPied6updateEv+0x1f8>
        }
    }

    else if (status == 85)
   16c3e:	687b      	ldr	r3, [r7, #4]
   16c40:	68db      	ldr	r3, [r3, #12]
   16c42:	2b55      	cmp	r3, #85
   16c44:	d104      	bne.n	16c50 <_ZN12RamasserPied6updateEv+0x1ec>
    {
        status = -1;
   16c46:	687a      	ldr	r2, [r7, #4]
   16c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16c4c:	60d3      	str	r3, [r2, #12]
   16c4e:	e005      	b.n	16c5c <_ZN12RamasserPied6updateEv+0x1f8>
    }
    else
    {
        status++;
   16c50:	687b      	ldr	r3, [r7, #4]
   16c52:	68db      	ldr	r3, [r3, #12]
   16c54:	f103 0201 	add.w	r2, r3, #1	; 0x1
   16c58:	687b      	ldr	r3, [r7, #4]
   16c5a:	60da      	str	r2, [r3, #12]
    }

    return status;
   16c5c:	687b      	ldr	r3, [r7, #4]
   16c5e:	68db      	ldr	r3, [r3, #12]
}
   16c60:	4618      	mov	r0, r3
   16c62:	f107 0710 	add.w	r7, r7, #16	; 0x10
   16c66:	46bd      	mov	sp, r7
   16c68:	bd80      	pop	{r7, pc}
   16c6a:	46c0      	nop			(mov r8, r8)
   16c6c:	c2c80000 	.word	0xc2c80000
   16c70:	40400000 	.word	0x40400000
   16c74:	43480000 	.word	0x43480000
   16c78:	3cf5c28f 	.word	0x3cf5c28f
   16c7c:	432f0000 	.word	0x432f0000
   16c80:	3db2b8c2 	.word	0x3db2b8c2
   16c84:	41f00000 	.word	0x41f00000

00016c88 <_ZN12RamasserPiedD0Ev>:

RamasserPied::RamasserPied(){}

RamasserPied::RamasserPied(Position goalposition): MediumLevelAction(goalposition){}

RamasserPied::~RamasserPied(){}
   16c88:	b580      	push	{r7, lr}
   16c8a:	b082      	sub	sp, #8
   16c8c:	af00      	add	r7, sp, #0
   16c8e:	6078      	str	r0, [r7, #4]
   16c90:	687a      	ldr	r2, [r7, #4]
   16c92:	4b0a      	ldr	r3, [pc, #40]	(16cbc <_ZN12RamasserPiedD0Ev+0x34>)
   16c94:	6013      	str	r3, [r2, #0]
   16c96:	687b      	ldr	r3, [r7, #4]
   16c98:	4618      	mov	r0, r3
   16c9a:	f7ff fe7b 	bl	16994 <_ZN17MediumLevelActionD2Ev>
   16c9e:	f04f 0301 	mov.w	r3, #1	; 0x1
   16ca2:	b2db      	uxtb	r3, r3
   16ca4:	2b00      	cmp	r3, #0
   16ca6:	d002      	beq.n	16cae <_ZN12RamasserPiedD0Ev+0x26>
   16ca8:	6878      	ldr	r0, [r7, #4]
   16caa:	f7f7 ffe3 	bl	ec74 <_ZdlPv>
   16cae:	687b      	ldr	r3, [r7, #4]
   16cb0:	4618      	mov	r0, r3
   16cb2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   16cb6:	46bd      	mov	sp, r7
   16cb8:	bd80      	pop	{r7, pc}
   16cba:	46c0      	nop			(mov r8, r8)
   16cbc:	000241a8 	.word	0x000241a8

00016cc0 <_ZN12RamasserPiedD1Ev>:
   16cc0:	b580      	push	{r7, lr}
   16cc2:	b082      	sub	sp, #8
   16cc4:	af00      	add	r7, sp, #0
   16cc6:	6078      	str	r0, [r7, #4]
   16cc8:	687a      	ldr	r2, [r7, #4]
   16cca:	4b0a      	ldr	r3, [pc, #40]	(16cf4 <_ZN12RamasserPiedD1Ev+0x34>)
   16ccc:	6013      	str	r3, [r2, #0]
   16cce:	687b      	ldr	r3, [r7, #4]
   16cd0:	4618      	mov	r0, r3
   16cd2:	f7ff fe5f 	bl	16994 <_ZN17MediumLevelActionD2Ev>
   16cd6:	f04f 0300 	mov.w	r3, #0	; 0x0
   16cda:	b2db      	uxtb	r3, r3
   16cdc:	2b00      	cmp	r3, #0
   16cde:	d002      	beq.n	16ce6 <_ZN12RamasserPiedD1Ev+0x26>
   16ce0:	6878      	ldr	r0, [r7, #4]
   16ce2:	f7f7 ffc7 	bl	ec74 <_ZdlPv>
   16ce6:	687b      	ldr	r3, [r7, #4]
   16ce8:	4618      	mov	r0, r3
   16cea:	f107 0708 	add.w	r7, r7, #8	; 0x8
   16cee:	46bd      	mov	sp, r7
   16cf0:	bd80      	pop	{r7, pc}
   16cf2:	46c0      	nop			(mov r8, r8)
   16cf4:	000241a8 	.word	0x000241a8

00016cf8 <_ZN12RamasserPiedD2Ev>:
   16cf8:	b580      	push	{r7, lr}
   16cfa:	b082      	sub	sp, #8
   16cfc:	af00      	add	r7, sp, #0
   16cfe:	6078      	str	r0, [r7, #4]
   16d00:	687a      	ldr	r2, [r7, #4]
   16d02:	4b0a      	ldr	r3, [pc, #40]	(16d2c <_ZN12RamasserPiedD2Ev+0x34>)
   16d04:	6013      	str	r3, [r2, #0]
   16d06:	687b      	ldr	r3, [r7, #4]
   16d08:	4618      	mov	r0, r3
   16d0a:	f7ff fe43 	bl	16994 <_ZN17MediumLevelActionD2Ev>
   16d0e:	f04f 0300 	mov.w	r3, #0	; 0x0
   16d12:	b2db      	uxtb	r3, r3
   16d14:	2b00      	cmp	r3, #0
   16d16:	d002      	beq.n	16d1e <_ZN12RamasserPiedD2Ev+0x26>
   16d18:	6878      	ldr	r0, [r7, #4]
   16d1a:	f7f7 ffab 	bl	ec74 <_ZdlPv>
   16d1e:	687b      	ldr	r3, [r7, #4]
   16d20:	4618      	mov	r0, r3
   16d22:	f107 0708 	add.w	r7, r7, #8	; 0x8
   16d26:	46bd      	mov	sp, r7
   16d28:	bd80      	pop	{r7, pc}
   16d2a:	46c0      	nop			(mov r8, r8)
   16d2c:	000241a8 	.word	0x000241a8

00016d30 <_ZN12RamasserPiedC1E8Position>:
#include <QDebug>
#endif

RamasserPied::RamasserPied(){}

RamasserPied::RamasserPied(Position goalposition): MediumLevelAction(goalposition){}
   16d30:	b580      	push	{r7, lr}
   16d32:	b084      	sub	sp, #16
   16d34:	af00      	add	r7, sp, #0
   16d36:	60f8      	str	r0, [r7, #12]
   16d38:	f107 0304 	add.w	r3, r7, #4	; 0x4
   16d3c:	e883 0006 	stmia.w	r3, {r1, r2}
   16d40:	68fb      	ldr	r3, [r7, #12]
   16d42:	4618      	mov	r0, r3
   16d44:	f107 0304 	add.w	r3, r7, #4	; 0x4
   16d48:	e893 0006 	ldmia.w	r3, {r1, r2}
   16d4c:	f7ff fe62 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   16d50:	68fa      	ldr	r2, [r7, #12]
   16d52:	4b07      	ldr	r3, [pc, #28]	(16d70 <_ZN12RamasserPiedC1E8Position+0x40>)
   16d54:	6013      	str	r3, [r2, #0]
   16d56:	68fb      	ldr	r3, [r7, #12]
   16d58:	f103 0318 	add.w	r3, r3, #24	; 0x18
   16d5c:	4618      	mov	r0, r3
   16d5e:	f7f8 f821 	bl	eda4 <_ZN8PositionC1Ev>
   16d62:	68fb      	ldr	r3, [r7, #12]
   16d64:	4618      	mov	r0, r3
   16d66:	f107 0710 	add.w	r7, r7, #16	; 0x10
   16d6a:	46bd      	mov	sp, r7
   16d6c:	bd80      	pop	{r7, pc}
   16d6e:	46c0      	nop			(mov r8, r8)
   16d70:	000241a8 	.word	0x000241a8

00016d74 <_ZN12RamasserPiedC2E8Position>:
   16d74:	b580      	push	{r7, lr}
   16d76:	b084      	sub	sp, #16
   16d78:	af00      	add	r7, sp, #0
   16d7a:	60f8      	str	r0, [r7, #12]
   16d7c:	f107 0304 	add.w	r3, r7, #4	; 0x4
   16d80:	e883 0006 	stmia.w	r3, {r1, r2}
   16d84:	68fb      	ldr	r3, [r7, #12]
   16d86:	4618      	mov	r0, r3
   16d88:	f107 0304 	add.w	r3, r7, #4	; 0x4
   16d8c:	e893 0006 	ldmia.w	r3, {r1, r2}
   16d90:	f7ff fe40 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   16d94:	68fa      	ldr	r2, [r7, #12]
   16d96:	4b07      	ldr	r3, [pc, #28]	(16db4 <_ZN12RamasserPiedC2E8Position+0x40>)
   16d98:	6013      	str	r3, [r2, #0]
   16d9a:	68fb      	ldr	r3, [r7, #12]
   16d9c:	f103 0318 	add.w	r3, r3, #24	; 0x18
   16da0:	4618      	mov	r0, r3
   16da2:	f7f7 ffff 	bl	eda4 <_ZN8PositionC1Ev>
   16da6:	68fb      	ldr	r3, [r7, #12]
   16da8:	4618      	mov	r0, r3
   16daa:	f107 0710 	add.w	r7, r7, #16	; 0x10
   16dae:	46bd      	mov	sp, r7
   16db0:	bd80      	pop	{r7, pc}
   16db2:	46c0      	nop			(mov r8, r8)
   16db4:	000241a8 	.word	0x000241a8

00016db8 <_ZN12RamasserPiedC1Ev>:

#ifndef ROBOTHW
#include <QDebug>
#endif

RamasserPied::RamasserPied(){}
   16db8:	b590      	push	{r4, r7, lr}
   16dba:	b085      	sub	sp, #20
   16dbc:	af00      	add	r7, sp, #0
   16dbe:	6078      	str	r0, [r7, #4]
   16dc0:	687c      	ldr	r4, [r7, #4]
   16dc2:	f107 0308 	add.w	r3, r7, #8	; 0x8
   16dc6:	4618      	mov	r0, r3
   16dc8:	490d      	ldr	r1, [pc, #52]	(16e00 <_ZN12RamasserPiedC1Ev+0x48>)
   16dca:	4a0d      	ldr	r2, [pc, #52]	(16e00 <_ZN12RamasserPiedC1Ev+0x48>)
   16dcc:	f04f 0301 	mov.w	r3, #1	; 0x1
   16dd0:	f7f8 f810 	bl	edf4 <_ZN8PositionC1Effb>
   16dd4:	4620      	mov	r0, r4
   16dd6:	f107 0308 	add.w	r3, r7, #8	; 0x8
   16dda:	e893 0006 	ldmia.w	r3, {r1, r2}
   16dde:	f7ff fe19 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   16de2:	687a      	ldr	r2, [r7, #4]
   16de4:	4b07      	ldr	r3, [pc, #28]	(16e04 <_ZN12RamasserPiedC1Ev+0x4c>)
   16de6:	6013      	str	r3, [r2, #0]
   16de8:	687b      	ldr	r3, [r7, #4]
   16dea:	f103 0318 	add.w	r3, r3, #24	; 0x18
   16dee:	4618      	mov	r0, r3
   16df0:	f7f7 ffd8 	bl	eda4 <_ZN8PositionC1Ev>
   16df4:	687b      	ldr	r3, [r7, #4]
   16df6:	4618      	mov	r0, r3
   16df8:	f107 0714 	add.w	r7, r7, #20	; 0x14
   16dfc:	46bd      	mov	sp, r7
   16dfe:	bd90      	pop	{r4, r7, pc}
   16e00:	00000000 	.word	0x00000000
   16e04:	000241a8 	.word	0x000241a8

00016e08 <_ZN12RamasserPiedC2Ev>:
   16e08:	b590      	push	{r4, r7, lr}
   16e0a:	b085      	sub	sp, #20
   16e0c:	af00      	add	r7, sp, #0
   16e0e:	6078      	str	r0, [r7, #4]
   16e10:	687c      	ldr	r4, [r7, #4]
   16e12:	f107 0308 	add.w	r3, r7, #8	; 0x8
   16e16:	4618      	mov	r0, r3
   16e18:	490d      	ldr	r1, [pc, #52]	(16e50 <_ZN12RamasserPiedC2Ev+0x48>)
   16e1a:	4a0d      	ldr	r2, [pc, #52]	(16e50 <_ZN12RamasserPiedC2Ev+0x48>)
   16e1c:	f04f 0301 	mov.w	r3, #1	; 0x1
   16e20:	f7f7 ffe8 	bl	edf4 <_ZN8PositionC1Effb>
   16e24:	4620      	mov	r0, r4
   16e26:	f107 0308 	add.w	r3, r7, #8	; 0x8
   16e2a:	e893 0006 	ldmia.w	r3, {r1, r2}
   16e2e:	f7ff fdf1 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   16e32:	687a      	ldr	r2, [r7, #4]
   16e34:	4b07      	ldr	r3, [pc, #28]	(16e54 <_ZN12RamasserPiedC2Ev+0x4c>)
   16e36:	6013      	str	r3, [r2, #0]
   16e38:	687b      	ldr	r3, [r7, #4]
   16e3a:	f103 0318 	add.w	r3, r3, #24	; 0x18
   16e3e:	4618      	mov	r0, r3
   16e40:	f7f7 ffb0 	bl	eda4 <_ZN8PositionC1Ev>
   16e44:	687b      	ldr	r3, [r7, #4]
   16e46:	4618      	mov	r0, r3
   16e48:	f107 0714 	add.w	r7, r7, #20	; 0x14
   16e4c:	46bd      	mov	sp, r7
   16e4e:	bd90      	pop	{r4, r7, pc}
   16e50:	00000000 	.word	0x00000000
   16e54:	000241a8 	.word	0x000241a8

00016e58 <_ZN19RecalibrerOdometrie6updateEv>:
RecalibrerOdometrie::~RecalibrerOdometrie()
{
    //dtor
}

int RecalibrerOdometrie::update()
   16e58:	b590      	push	{r4, r7, lr}
   16e5a:	b0d9      	sub	sp, #356
   16e5c:	af02      	add	r7, sp, #8
   16e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16e62:	6018      	str	r0, [r3, #0]
{
    allumerLED();
   16e64:	f7f5 fb6e 	bl	c544 <_Z10allumerLEDv>
    allumerLED2();
   16e68:	f7f5 fb64 	bl	c534 <_Z11allumerLED2v>
//#ifndef ROBOTHW
//    status = -1;
//    return -1;
//#else
    if (status == 0)
   16e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16e70:	681b      	ldr	r3, [r3, #0]
   16e72:	68db      	ldr	r3, [r3, #12]
   16e74:	2b00      	cmp	r3, #0
   16e76:	d115      	bne.n	16ea4 <_ZN19RecalibrerOdometrie6updateEv+0x4c>
    {
#ifndef ROBOTHW
        qDebug() << "recalibrerOdometrie";
#endif
        StrategieV2::setCurrentGoal(positionDepart, false);//Position(700, 1360,isBlue), false);
   16e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16e7c:	681a      	ldr	r2, [r3, #0]
   16e7e:	f8df 37bc 	ldr.w	r3, [pc, #1980]	; 1763c <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   16e82:	9300      	str	r3, [sp, #0]
   16e84:	f102 0318 	add.w	r3, r2, #24	; 0x18
   16e88:	e893 0003 	ldmia.w	r3, {r0, r1}
   16e8c:	f04f 0200 	mov.w	r2, #0	; 0x0
   16e90:	f8df 37ac 	ldr.w	r3, [pc, #1964]	; 17640 <_ZN19RecalibrerOdometrie6updateEv+0x7e8>
   16e94:	f000 ff6e 	bl	17d74 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status = 1;
   16e98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16e9c:	681a      	ldr	r2, [r3, #0]
   16e9e:	f04f 0301 	mov.w	r3, #1	; 0x1
   16ea2:	60d3      	str	r3, [r2, #12]
    }
    if (status == 1) // attend d'être replacé
   16ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16ea8:	681b      	ldr	r3, [r3, #0]
   16eaa:	68db      	ldr	r3, [r3, #12]
   16eac:	2b01      	cmp	r3, #1
   16eae:	f040 808a 	bne.w	16fc6 <_ZN19RecalibrerOdometrie6updateEv+0x16e>
    {
        Position vect = positionDepart - Odometrie::odometrie->getPos().getPosition();
   16eb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16eb6:	681b      	ldr	r3, [r3, #0]
   16eb8:	f103 0418 	add.w	r4, r3, #24	; 0x18
   16ebc:	f8df 3784 	ldr.w	r3, [pc, #1924]	; 17644 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   16ec0:	681a      	ldr	r2, [r3, #0]
   16ec2:	f107 0364 	add.w	r3, r7, #100	; 0x64
   16ec6:	4618      	mov	r0, r3
   16ec8:	4611      	mov	r1, r2
   16eca:	f7f2 ff95 	bl	9df8 <_ZNK9Odometrie6getPosEv>
   16ece:	f107 035c 	add.w	r3, r7, #92	; 0x5c
   16ed2:	f107 0264 	add.w	r2, r7, #100	; 0x64
   16ed6:	4618      	mov	r0, r3
   16ed8:	4611      	mov	r1, r2
   16eda:	f7f8 f9c7 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
   16ede:	f107 0354 	add.w	r3, r7, #84	; 0x54
   16ee2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
   16ee6:	4618      	mov	r0, r3
   16ee8:	4621      	mov	r1, r4
   16eea:	f7f7 fff1 	bl	eed0 <_ZNK8PositionmiERKS_>
        if (vect.getNorme() < 40)
   16eee:	f107 0354 	add.w	r3, r7, #84	; 0x54
   16ef2:	4618      	mov	r0, r3
   16ef4:	f7f8 f8fa 	bl	f0ec <_ZNK8Position8getNormeEv>
   16ef8:	4602      	mov	r2, r0
   16efa:	f04f 0300 	mov.w	r3, #0	; 0x0
   16efe:	72fb      	strb	r3, [r7, #11]
   16f00:	4610      	mov	r0, r2
   16f02:	f8df 1744 	ldr.w	r1, [pc, #1860]	; 17648 <_ZN19RecalibrerOdometrie6updateEv+0x7f0>
   16f06:	f006 f987 	bl	1d218 <__aeabi_fcmplt>
   16f0a:	4603      	mov	r3, r0
   16f0c:	2b00      	cmp	r3, #0
   16f0e:	d002      	beq.n	16f16 <_ZN19RecalibrerOdometrie6updateEv+0xbe>
   16f10:	f04f 0301 	mov.w	r3, #1	; 0x1
   16f14:	72fb      	strb	r3, [r7, #11]
   16f16:	7afb      	ldrb	r3, [r7, #11]
   16f18:	2b00      	cmp	r3, #0
   16f1a:	d054      	beq.n	16fc6 <_ZN19RecalibrerOdometrie6updateEv+0x16e>
        {
            if(this->coinRecalage == COTE_NOTRE_DEPART_BAS || this->coinRecalage == COTE_NOTRE_DEPART_HAUT)
   16f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16f20:	681b      	ldr	r3, [r3, #0]
   16f22:	6a9b      	ldr	r3, [r3, #40]
   16f24:	2b03      	cmp	r3, #3
   16f26:	d005      	beq.n	16f34 <_ZN19RecalibrerOdometrie6updateEv+0xdc>
   16f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16f2c:	681b      	ldr	r3, [r3, #0]
   16f2e:	6a9b      	ldr	r3, [r3, #40]
   16f30:	2b02      	cmp	r3, #2
   16f32:	d11f      	bne.n	16f74 <_ZN19RecalibrerOdometrie6updateEv+0x11c>
            {
                StrategieV2::setCurrentGoal(Position(0, positionDepart.getY()), true, 0.5);
   16f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16f38:	681b      	ldr	r3, [r3, #0]
   16f3a:	f103 0318 	add.w	r3, r3, #24	; 0x18
   16f3e:	4618      	mov	r0, r3
   16f40:	f7f7 ff78 	bl	ee34 <_ZNK8Position4getYEv>
   16f44:	4602      	mov	r2, r0
   16f46:	f107 0370 	add.w	r3, r7, #112	; 0x70
   16f4a:	4618      	mov	r0, r3
   16f4c:	f8df 16fc 	ldr.w	r1, [pc, #1788]	; 1764c <_ZN19RecalibrerOdometrie6updateEv+0x7f4>
   16f50:	f04f 0301 	mov.w	r3, #1	; 0x1
   16f54:	f7f7 ff4e 	bl	edf4 <_ZN8PositionC1Effb>
   16f58:	f8df 36e0 	ldr.w	r3, [pc, #1760]	; 1763c <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   16f5c:	9300      	str	r3, [sp, #0]
   16f5e:	f107 0370 	add.w	r3, r7, #112	; 0x70
   16f62:	e893 0003 	ldmia.w	r3, {r0, r1}
   16f66:	f04f 0201 	mov.w	r2, #1	; 0x1
   16f6a:	f8df 36e4 	ldr.w	r3, [pc, #1764]	; 17650 <_ZN19RecalibrerOdometrie6updateEv+0x7f8>
   16f6e:	f000 ff01 	bl	17d74 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
   16f72:	e01e      	b.n	16fb2 <_ZN19RecalibrerOdometrie6updateEv+0x15a>
            }
            else
            {
                StrategieV2::setCurrentGoal(Position(3000, positionDepart.getY()), true, 0.5);
   16f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16f78:	681b      	ldr	r3, [r3, #0]
   16f7a:	f103 0318 	add.w	r3, r3, #24	; 0x18
   16f7e:	4618      	mov	r0, r3
   16f80:	f7f7 ff58 	bl	ee34 <_ZNK8Position4getYEv>
   16f84:	4602      	mov	r2, r0
   16f86:	f107 0378 	add.w	r3, r7, #120	; 0x78
   16f8a:	4618      	mov	r0, r3
   16f8c:	f8df 16c4 	ldr.w	r1, [pc, #1732]	; 17654 <_ZN19RecalibrerOdometrie6updateEv+0x7fc>
   16f90:	f04f 0301 	mov.w	r3, #1	; 0x1
   16f94:	f7f7 ff2e 	bl	edf4 <_ZN8PositionC1Effb>
   16f98:	f8df 36a0 	ldr.w	r3, [pc, #1696]	; 1763c <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   16f9c:	9300      	str	r3, [sp, #0]
   16f9e:	f107 0378 	add.w	r3, r7, #120	; 0x78
   16fa2:	e893 0003 	ldmia.w	r3, {r0, r1}
   16fa6:	f04f 0201 	mov.w	r2, #1	; 0x1
   16faa:	f8df 36a4 	ldr.w	r3, [pc, #1700]	; 17650 <_ZN19RecalibrerOdometrie6updateEv+0x7f8>
   16fae:	f000 fee1 	bl	17d74 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            }
            StrategieV2::setEnTrainDeRecalibrer(true);
   16fb2:	f04f 0001 	mov.w	r0, #1	; 0x1
   16fb6:	f000 fcdd 	bl	17974 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>
            status = 2;
   16fba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16fbe:	681a      	ldr	r2, [r3, #0]
   16fc0:	f04f 0302 	mov.w	r3, #2	; 0x2
   16fc4:	60d3      	str	r3, [r2, #12]
        }
    }
    if (status == 2) // attend d'avoir synchro sur X
   16fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16fca:	681b      	ldr	r3, [r3, #0]
   16fcc:	68db      	ldr	r3, [r3, #12]
   16fce:	2b02      	cmp	r3, #2
   16fd0:	f040 8144 	bne.w	1725c <_ZN19RecalibrerOdometrie6updateEv+0x404>
    {
        static int timeBlockedY = 0;
        //if (abs(Odometrie::odometrie->getVitesseLineaire()) < 0.005f) //if (fdc1->getValue().b && fdc2->getValue().b) // distance parcourue la derniere seconde
        Position vect = candidatPositionArrete - Odometrie::odometrie->getPos().getPosition();
   16fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16fd8:	681b      	ldr	r3, [r3, #0]
   16fda:	f103 0420 	add.w	r4, r3, #32	; 0x20
   16fde:	f8df 3664 	ldr.w	r3, [pc, #1636]	; 17644 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   16fe2:	681a      	ldr	r2, [r3, #0]
   16fe4:	f107 0388 	add.w	r3, r7, #136	; 0x88
   16fe8:	4618      	mov	r0, r3
   16fea:	4611      	mov	r1, r2
   16fec:	f7f2 ff04 	bl	9df8 <_ZNK9Odometrie6getPosEv>
   16ff0:	f107 0380 	add.w	r3, r7, #128	; 0x80
   16ff4:	f107 0288 	add.w	r2, r7, #136	; 0x88
   16ff8:	4618      	mov	r0, r3
   16ffa:	4611      	mov	r1, r2
   16ffc:	f7f8 f936 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
   17000:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   17004:	f107 0280 	add.w	r2, r7, #128	; 0x80
   17008:	4618      	mov	r0, r3
   1700a:	4621      	mov	r1, r4
   1700c:	f7f7 ff60 	bl	eed0 <_ZNK8PositionmiERKS_>
        if(abs(vect.getNorme()) < 5)//Si on a pas bougé de plus de Xmm du dernier candidat de position où le robot s'est arrêté
   17010:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   17014:	4618      	mov	r0, r3
   17016:	f7f8 f869 	bl	f0ec <_ZNK8Position8getNormeEv>
   1701a:	4603      	mov	r3, r0
   1701c:	4618      	mov	r0, r3
   1701e:	f8df 162c 	ldr.w	r1, [pc, #1580]	; 1764c <_ZN19RecalibrerOdometrie6updateEv+0x7f4>
   17022:	f006 f917 	bl	1d254 <__aeabi_fcmpgt>
   17026:	4603      	mov	r3, r0
   17028:	2b00      	cmp	r3, #0
   1702a:	d016      	beq.n	1705a <_ZN19RecalibrerOdometrie6updateEv+0x202>
   1702c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   17030:	4618      	mov	r0, r3
   17032:	f7f8 f85b 	bl	f0ec <_ZNK8Position8getNormeEv>
   17036:	4602      	mov	r2, r0
   17038:	f04f 0300 	mov.w	r3, #0	; 0x0
   1703c:	72bb      	strb	r3, [r7, #10]
   1703e:	4610      	mov	r0, r2
   17040:	f8df 1608 	ldr.w	r1, [pc, #1544]	; 1764c <_ZN19RecalibrerOdometrie6updateEv+0x7f4>
   17044:	f006 f8de 	bl	1d204 <__aeabi_fcmpeq>
   17048:	4603      	mov	r3, r0
   1704a:	2b00      	cmp	r3, #0
   1704c:	d102      	bne.n	17054 <_ZN19RecalibrerOdometrie6updateEv+0x1fc>
   1704e:	f04f 0301 	mov.w	r3, #1	; 0x1
   17052:	72bb      	strb	r3, [r7, #10]
   17054:	7abb      	ldrb	r3, [r7, #10]
   17056:	60fb      	str	r3, [r7, #12]
   17058:	e015      	b.n	17086 <_ZN19RecalibrerOdometrie6updateEv+0x22e>
   1705a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1705e:	4618      	mov	r0, r3
   17060:	f7f8 f844 	bl	f0ec <_ZNK8Position8getNormeEv>
   17064:	4602      	mov	r2, r0
   17066:	f04f 0300 	mov.w	r3, #0	; 0x0
   1706a:	727b      	strb	r3, [r7, #9]
   1706c:	4610      	mov	r0, r2
   1706e:	f8df 15e8 	ldr.w	r1, [pc, #1512]	; 17658 <_ZN19RecalibrerOdometrie6updateEv+0x800>
   17072:	f006 f8ef 	bl	1d254 <__aeabi_fcmpgt>
   17076:	4603      	mov	r3, r0
   17078:	2b00      	cmp	r3, #0
   1707a:	d002      	beq.n	17082 <_ZN19RecalibrerOdometrie6updateEv+0x22a>
   1707c:	f04f 0301 	mov.w	r3, #1	; 0x1
   17080:	727b      	strb	r3, [r7, #9]
   17082:	7a7b      	ldrb	r3, [r7, #9]
   17084:	60fb      	str	r3, [r7, #12]
   17086:	68fb      	ldr	r3, [r7, #12]
   17088:	2b00      	cmp	r3, #0
   1708a:	d008      	beq.n	1709e <_ZN19RecalibrerOdometrie6updateEv+0x246>
        {
            timeBlockedY ++;
   1708c:	f8df 35cc 	ldr.w	r3, [pc, #1484]	; 1765c <_ZN19RecalibrerOdometrie6updateEv+0x804>
   17090:	681b      	ldr	r3, [r3, #0]
   17092:	f103 0201 	add.w	r2, r3, #1	; 0x1
   17096:	f8df 35c4 	ldr.w	r3, [pc, #1476]	; 1765c <_ZN19RecalibrerOdometrie6updateEv+0x804>
   1709a:	601a      	str	r2, [r3, #0]
   1709c:	e023      	b.n	170e6 <_ZN19RecalibrerOdometrie6updateEv+0x28e>
//            allumerLED2();
        }
        else {
            timeBlockedY = 0;
   1709e:	f8df 25bc 	ldr.w	r2, [pc, #1468]	; 1765c <_ZN19RecalibrerOdometrie6updateEv+0x804>
   170a2:	f04f 0300 	mov.w	r3, #0	; 0x0
   170a6:	6013      	str	r3, [r2, #0]
            candidatPositionArrete = Odometrie::odometrie->getPos().getPosition();
   170a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   170ac:	681b      	ldr	r3, [r3, #0]
   170ae:	f103 0420 	add.w	r4, r3, #32	; 0x20
   170b2:	f8df 3590 	ldr.w	r3, [pc, #1424]	; 17644 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   170b6:	681a      	ldr	r2, [r3, #0]
   170b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   170bc:	4618      	mov	r0, r3
   170be:	4611      	mov	r1, r2
   170c0:	f7f2 fe9a 	bl	9df8 <_ZNK9Odometrie6getPosEv>
   170c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
   170c8:	f107 029c 	add.w	r2, r7, #156	; 0x9c
   170cc:	4618      	mov	r0, r3
   170ce:	4611      	mov	r1, r2
   170d0:	f7f8 f8cc 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
   170d4:	4620      	mov	r0, r4
   170d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
   170da:	e893 0006 	ldmia.w	r3, {r1, r2}
   170de:	f7f7 ff1d 	bl	ef1c <_ZN8PositionaSES_>
            eteindreLED2();
   170e2:	f7f5 f9cb 	bl	c47c <_Z12eteindreLED2v>
        }
        if (timeBlockedY > 100 &&
   170e6:	f8df 3574 	ldr.w	r3, [pc, #1396]	; 1765c <_ZN19RecalibrerOdometrie6updateEv+0x804>
   170ea:	681b      	ldr	r3, [r3, #0]
   170ec:	2b64      	cmp	r3, #100
   170ee:	dd59      	ble.n	171a4 <_ZN19RecalibrerOdometrie6updateEv+0x34c>
   170f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   170f4:	681b      	ldr	r3, [r3, #0]
   170f6:	6a9b      	ldr	r3, [r3, #40]
   170f8:	2b00      	cmp	r3, #0
   170fa:	d005      	beq.n	17108 <_ZN19RecalibrerOdometrie6updateEv+0x2b0>
   170fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17100:	681b      	ldr	r3, [r3, #0]
   17102:	6a9b      	ldr	r3, [r3, #40]
   17104:	2b01      	cmp	r3, #1
   17106:	d11e      	bne.n	17146 <_ZN19RecalibrerOdometrie6updateEv+0x2ee>
   17108:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 17644 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   1710c:	681a      	ldr	r2, [r3, #0]
   1710e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
   17112:	4618      	mov	r0, r3
   17114:	4611      	mov	r1, r2
   17116:	f7f2 fe6f 	bl	9df8 <_ZNK9Odometrie6getPosEv>
   1711a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
   1711e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
   17122:	4618      	mov	r0, r3
   17124:	4611      	mov	r1, r2
   17126:	f7f8 f8a1 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
   1712a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
   1712e:	4618      	mov	r0, r3
   17130:	f7f7 fe74 	bl	ee1c <_ZNK8Position4getXEv>
   17134:	4603      	mov	r3, r0
   17136:	4618      	mov	r0, r3
   17138:	f8df 1524 	ldr.w	r1, [pc, #1316]	; 17660 <_ZN19RecalibrerOdometrie6updateEv+0x808>
   1713c:	f006 f88a 	bl	1d254 <__aeabi_fcmpgt>
   17140:	4603      	mov	r3, r0
   17142:	2b00      	cmp	r3, #0
   17144:	d12a      	bne.n	1719c <_ZN19RecalibrerOdometrie6updateEv+0x344>
   17146:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1714a:	681b      	ldr	r3, [r3, #0]
   1714c:	6a9b      	ldr	r3, [r3, #40]
   1714e:	2b02      	cmp	r3, #2
   17150:	d005      	beq.n	1715e <_ZN19RecalibrerOdometrie6updateEv+0x306>
   17152:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17156:	681b      	ldr	r3, [r3, #0]
   17158:	6a9b      	ldr	r3, [r3, #40]
   1715a:	2b03      	cmp	r3, #3
   1715c:	d122      	bne.n	171a4 <_ZN19RecalibrerOdometrie6updateEv+0x34c>
   1715e:	f8df 34e4 	ldr.w	r3, [pc, #1252]	; 17644 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   17162:	681a      	ldr	r2, [r3, #0]
   17164:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
   17168:	4618      	mov	r0, r3
   1716a:	4611      	mov	r1, r2
   1716c:	f7f2 fe44 	bl	9df8 <_ZNK9Odometrie6getPosEv>
   17170:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
   17174:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
   17178:	4618      	mov	r0, r3
   1717a:	4611      	mov	r1, r2
   1717c:	f7f8 f876 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
   17180:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
   17184:	4618      	mov	r0, r3
   17186:	f7f7 fe49 	bl	ee1c <_ZNK8Position4getXEv>
   1718a:	4603      	mov	r3, r0
   1718c:	4618      	mov	r0, r3
   1718e:	f8df 14d4 	ldr.w	r1, [pc, #1236]	; 17664 <_ZN19RecalibrerOdometrie6updateEv+0x80c>
   17192:	f006 f841 	bl	1d218 <__aeabi_fcmplt>
   17196:	4603      	mov	r3, r0
   17198:	2b00      	cmp	r3, #0
   1719a:	d003      	beq.n	171a4 <_ZN19RecalibrerOdometrie6updateEv+0x34c>
   1719c:	f04f 0301 	mov.w	r3, #1	; 0x1
   171a0:	613b      	str	r3, [r7, #16]
   171a2:	e002      	b.n	171aa <_ZN19RecalibrerOdometrie6updateEv+0x352>
   171a4:	f04f 0300 	mov.w	r3, #0	; 0x0
   171a8:	613b      	str	r3, [r7, #16]
   171aa:	693b      	ldr	r3, [r7, #16]
   171ac:	2b00      	cmp	r3, #0
   171ae:	f000 823b 	beq.w	17628 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
                || ((this->coinRecalage == COTE_NOTRE_DEPART_HAUT || this->coinRecalage == COTE_NOTRE_DEPART_BAS)
                  && Odometrie::odometrie->getPos().getPosition().getX() < 150)
                 ))// && Odometrie::odometrie->getPos().getPosition().getY() > 1500)//1850)
        {
#ifdef ROBOTHW //A adapter à la taille du robot
            if(this->coinRecalage == COTE_DEPART_ADVERSAIRE_HAUT || this->coinRecalage == COTE_DEPART_ADVERSAIRE_BAS)
   171b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   171b6:	681b      	ldr	r3, [r3, #0]
   171b8:	6a9b      	ldr	r3, [r3, #40]
   171ba:	2b00      	cmp	r3, #0
   171bc:	d005      	beq.n	171ca <_ZN19RecalibrerOdometrie6updateEv+0x372>
   171be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   171c2:	681b      	ldr	r3, [r3, #0]
   171c4:	6a9b      	ldr	r3, [r3, #40]
   171c6:	2b01      	cmp	r3, #1
   171c8:	d114      	bne.n	171f4 <_ZN19RecalibrerOdometrie6updateEv+0x39c>
                Odometrie::odometrie->setX((StrategieV2::getIsBlue() ? 95 : 2905)); // robot = 319mm de large
   171ca:	f8df 3478 	ldr.w	r3, [pc, #1144]	; 17644 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   171ce:	681b      	ldr	r3, [r3, #0]
   171d0:	617b      	str	r3, [r7, #20]
   171d2:	f000 fba9 	bl	17928 <_ZN11StrategieV29getIsBlueEv>
   171d6:	4603      	mov	r3, r0
   171d8:	2b00      	cmp	r3, #0
   171da:	d003      	beq.n	171e4 <_ZN19RecalibrerOdometrie6updateEv+0x38c>
   171dc:	f8df 3488 	ldr.w	r3, [pc, #1160]	; 17668 <_ZN19RecalibrerOdometrie6updateEv+0x810>
   171e0:	61bb      	str	r3, [r7, #24]
   171e2:	e002      	b.n	171ea <_ZN19RecalibrerOdometrie6updateEv+0x392>
   171e4:	f8df 3484 	ldr.w	r3, [pc, #1156]	; 1766c <_ZN19RecalibrerOdometrie6updateEv+0x814>
   171e8:	61bb      	str	r3, [r7, #24]
   171ea:	6978      	ldr	r0, [r7, #20]
   171ec:	69b9      	ldr	r1, [r7, #24]
   171ee:	f7f2 feb7 	bl	9f60 <_ZN9Odometrie4setXEf>
   171f2:	e013      	b.n	1721c <_ZN19RecalibrerOdometrie6updateEv+0x3c4>
            else
                Odometrie::odometrie->setX((StrategieV2::getIsBlue() ? 2905 : 95)); // robot = 319mm de large
   171f4:	f8df 344c 	ldr.w	r3, [pc, #1100]	; 17644 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   171f8:	681b      	ldr	r3, [r3, #0]
   171fa:	61fb      	str	r3, [r7, #28]
   171fc:	f000 fb94 	bl	17928 <_ZN11StrategieV29getIsBlueEv>
   17200:	4603      	mov	r3, r0
   17202:	2b00      	cmp	r3, #0
   17204:	d003      	beq.n	1720e <_ZN19RecalibrerOdometrie6updateEv+0x3b6>
   17206:	f8df 3464 	ldr.w	r3, [pc, #1124]	; 1766c <_ZN19RecalibrerOdometrie6updateEv+0x814>
   1720a:	623b      	str	r3, [r7, #32]
   1720c:	e002      	b.n	17214 <_ZN19RecalibrerOdometrie6updateEv+0x3bc>
   1720e:	f8df 3458 	ldr.w	r3, [pc, #1112]	; 17668 <_ZN19RecalibrerOdometrie6updateEv+0x810>
   17212:	623b      	str	r3, [r7, #32]
   17214:	69f8      	ldr	r0, [r7, #28]
   17216:	6a39      	ldr	r1, [r7, #32]
   17218:	f7f2 fea2 	bl	9f60 <_ZN9Odometrie4setXEf>
#endif
            //StrategieV2::setCurrentGoal(Position(goalPosition1.getX(), 1360), false);
            StrategieV2::setCurrentGoal(positionDepart, false);
   1721c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17220:	681a      	ldr	r2, [r3, #0]
   17222:	f8df 3418 	ldr.w	r3, [pc, #1048]	; 1763c <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   17226:	9300      	str	r3, [sp, #0]
   17228:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1722c:	e893 0003 	ldmia.w	r3, {r0, r1}
   17230:	f04f 0200 	mov.w	r2, #0	; 0x0
   17234:	f8df 3408 	ldr.w	r3, [pc, #1032]	; 17640 <_ZN19RecalibrerOdometrie6updateEv+0x7e8>
   17238:	f000 fd9c 	bl	17d74 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            StrategieV2::setEnTrainDeRecalibrer(false);
   1723c:	f04f 0000 	mov.w	r0, #0	; 0x0
   17240:	f000 fb98 	bl	17974 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>
            status = 3;
   17244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17248:	681a      	ldr	r2, [r3, #0]
   1724a:	f04f 0303 	mov.w	r3, #3	; 0x3
   1724e:	60d3      	str	r3, [r2, #12]
            timeBlockedY = 0;
   17250:	f8df 2408 	ldr.w	r2, [pc, #1032]	; 1765c <_ZN19RecalibrerOdometrie6updateEv+0x804>
   17254:	f04f 0300 	mov.w	r3, #0	; 0x0
   17258:	6013      	str	r3, [r2, #0]
   1725a:	e1e5      	b.n	17628 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        }
    }
    else if (status == 3) // attend d'être replacé
   1725c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17260:	681b      	ldr	r3, [r3, #0]
   17262:	68db      	ldr	r3, [r3, #12]
   17264:	2b03      	cmp	r3, #3
   17266:	f040 8082 	bne.w	1736e <_ZN19RecalibrerOdometrie6updateEv+0x516>
    {
        Position vect = positionDepart - Odometrie::odometrie->getPos().getPosition();
   1726a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1726e:	681b      	ldr	r3, [r3, #0]
   17270:	f103 0418 	add.w	r4, r3, #24	; 0x18
   17274:	4bf3      	ldr	r3, [pc, #972]	(17644 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   17276:	681a      	ldr	r2, [r3, #0]
   17278:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
   1727c:	4618      	mov	r0, r3
   1727e:	4611      	mov	r1, r2
   17280:	f7f2 fdba 	bl	9df8 <_ZNK9Odometrie6getPosEv>
   17284:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   17288:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
   1728c:	4618      	mov	r0, r3
   1728e:	4611      	mov	r1, r2
   17290:	f7f7 ffec 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
   17294:	f107 0344 	add.w	r3, r7, #68	; 0x44
   17298:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
   1729c:	4618      	mov	r0, r3
   1729e:	4621      	mov	r1, r4
   172a0:	f7f7 fe16 	bl	eed0 <_ZNK8PositionmiERKS_>
        if (vect.getNorme() < 40)
   172a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
   172a8:	4618      	mov	r0, r3
   172aa:	f7f7 ff1f 	bl	f0ec <_ZNK8Position8getNormeEv>
   172ae:	4602      	mov	r2, r0
   172b0:	f04f 0300 	mov.w	r3, #0	; 0x0
   172b4:	723b      	strb	r3, [r7, #8]
   172b6:	4610      	mov	r0, r2
   172b8:	49e3      	ldr	r1, [pc, #908]	(17648 <_ZN19RecalibrerOdometrie6updateEv+0x7f0>)
   172ba:	f005 ffad 	bl	1d218 <__aeabi_fcmplt>
   172be:	4603      	mov	r3, r0
   172c0:	2b00      	cmp	r3, #0
   172c2:	d002      	beq.n	172ca <_ZN19RecalibrerOdometrie6updateEv+0x472>
   172c4:	f04f 0301 	mov.w	r3, #1	; 0x1
   172c8:	723b      	strb	r3, [r7, #8]
   172ca:	7a3b      	ldrb	r3, [r7, #8]
   172cc:	2b00      	cmp	r3, #0
   172ce:	f000 81ab 	beq.w	17628 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        {
            if(this->coinRecalage == COTE_NOTRE_DEPART_BAS || this->coinRecalage == COTE_DEPART_ADVERSAIRE_BAS)
   172d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   172d6:	681b      	ldr	r3, [r3, #0]
   172d8:	6a9b      	ldr	r3, [r3, #40]
   172da:	2b03      	cmp	r3, #3
   172dc:	d005      	beq.n	172ea <_ZN19RecalibrerOdometrie6updateEv+0x492>
   172de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   172e2:	681b      	ldr	r3, [r3, #0]
   172e4:	6a9b      	ldr	r3, [r3, #40]
   172e6:	2b01      	cmp	r3, #1
   172e8:	d11d      	bne.n	17326 <_ZN19RecalibrerOdometrie6updateEv+0x4ce>
            {
                StrategieV2::setCurrentGoal(Position(positionDepart.getX(), 0), true, 0.5);
   172ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   172ee:	681b      	ldr	r3, [r3, #0]
   172f0:	f103 0318 	add.w	r3, r3, #24	; 0x18
   172f4:	4618      	mov	r0, r3
   172f6:	f7f7 fd91 	bl	ee1c <_ZNK8Position4getXEv>
   172fa:	4602      	mov	r2, r0
   172fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
   17300:	4618      	mov	r0, r3
   17302:	4611      	mov	r1, r2
   17304:	4ad1      	ldr	r2, [pc, #836]	(1764c <_ZN19RecalibrerOdometrie6updateEv+0x7f4>)
   17306:	f04f 0301 	mov.w	r3, #1	; 0x1
   1730a:	f7f7 fd73 	bl	edf4 <_ZN8PositionC1Effb>
   1730e:	4bcb      	ldr	r3, [pc, #812]	(1763c <_ZN19RecalibrerOdometrie6updateEv+0x7e4>)
   17310:	9300      	str	r3, [sp, #0]
   17312:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
   17316:	e893 0003 	ldmia.w	r3, {r0, r1}
   1731a:	f04f 0201 	mov.w	r2, #1	; 0x1
   1731e:	4bcc      	ldr	r3, [pc, #816]	(17650 <_ZN19RecalibrerOdometrie6updateEv+0x7f8>)
   17320:	f000 fd28 	bl	17d74 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
   17324:	e01c      	b.n	17360 <_ZN19RecalibrerOdometrie6updateEv+0x508>
            }
            else
            {
                StrategieV2::setCurrentGoal(Position(positionDepart.getX(), 2000), true, 0.5);
   17326:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1732a:	681b      	ldr	r3, [r3, #0]
   1732c:	f103 0318 	add.w	r3, r3, #24	; 0x18
   17330:	4618      	mov	r0, r3
   17332:	f7f7 fd73 	bl	ee1c <_ZNK8Position4getXEv>
   17336:	4602      	mov	r2, r0
   17338:	f107 03ec 	add.w	r3, r7, #236	; 0xec
   1733c:	4618      	mov	r0, r3
   1733e:	4611      	mov	r1, r2
   17340:	4acb      	ldr	r2, [pc, #812]	(17670 <_ZN19RecalibrerOdometrie6updateEv+0x818>)
   17342:	f04f 0301 	mov.w	r3, #1	; 0x1
   17346:	f7f7 fd55 	bl	edf4 <_ZN8PositionC1Effb>
   1734a:	4bbc      	ldr	r3, [pc, #752]	(1763c <_ZN19RecalibrerOdometrie6updateEv+0x7e4>)
   1734c:	9300      	str	r3, [sp, #0]
   1734e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
   17352:	e893 0003 	ldmia.w	r3, {r0, r1}
   17356:	f04f 0201 	mov.w	r2, #1	; 0x1
   1735a:	4bbd      	ldr	r3, [pc, #756]	(17650 <_ZN19RecalibrerOdometrie6updateEv+0x7f8>)
   1735c:	f000 fd0a 	bl	17d74 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            }
            status  = 4;
   17360:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17364:	681a      	ldr	r2, [r3, #0]
   17366:	f04f 0304 	mov.w	r3, #4	; 0x4
   1736a:	60d3      	str	r3, [r2, #12]
   1736c:	e15c      	b.n	17628 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        }
    }
    else if (status == 4) // attend d'avoir synchro sur Y
   1736e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17372:	681b      	ldr	r3, [r3, #0]
   17374:	68db      	ldr	r3, [r3, #12]
   17376:	2b04      	cmp	r3, #4
   17378:	f040 8117 	bne.w	175aa <_ZN19RecalibrerOdometrie6updateEv+0x752>
    {

        static int timeBlockedX = 0;
        //if (abs(Odometrie::odometrie->getVitesseLineaire()) < 0.005f) // if (fdc1->getValue().b && fdc2->getValue().b) // distance parcourue la derniere seconde
        Position vect = candidatPositionArrete - Odometrie::odometrie->getPos().getPosition();
   1737c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17380:	681b      	ldr	r3, [r3, #0]
   17382:	f103 0420 	add.w	r4, r3, #32	; 0x20
   17386:	4baf      	ldr	r3, [pc, #700]	(17644 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   17388:	681a      	ldr	r2, [r3, #0]
   1738a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
   1738e:	4618      	mov	r0, r3
   17390:	4611      	mov	r1, r2
   17392:	f7f2 fd31 	bl	9df8 <_ZNK9Odometrie6getPosEv>
   17396:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
   1739a:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
   1739e:	4618      	mov	r0, r3
   173a0:	4611      	mov	r1, r2
   173a2:	f7f7 ff63 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
   173a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   173aa:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
   173ae:	4618      	mov	r0, r3
   173b0:	4621      	mov	r1, r4
   173b2:	f7f7 fd8d 	bl	eed0 <_ZNK8PositionmiERKS_>
        if(abs(vect.getNorme()) < 5)//Si on a pas bougé de plus de Xmm du dernier candidat de position où le robot s'est arrêté
   173b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   173ba:	4618      	mov	r0, r3
   173bc:	f7f7 fe96 	bl	f0ec <_ZNK8Position8getNormeEv>
   173c0:	4603      	mov	r3, r0
   173c2:	4618      	mov	r0, r3
   173c4:	49a1      	ldr	r1, [pc, #644]	(1764c <_ZN19RecalibrerOdometrie6updateEv+0x7f4>)
   173c6:	f005 ff45 	bl	1d254 <__aeabi_fcmpgt>
   173ca:	4603      	mov	r3, r0
   173cc:	2b00      	cmp	r3, #0
   173ce:	d015      	beq.n	173fc <_ZN19RecalibrerOdometrie6updateEv+0x5a4>
   173d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   173d4:	4618      	mov	r0, r3
   173d6:	f7f7 fe89 	bl	f0ec <_ZNK8Position8getNormeEv>
   173da:	4602      	mov	r2, r0
   173dc:	f04f 0300 	mov.w	r3, #0	; 0x0
   173e0:	71fb      	strb	r3, [r7, #7]
   173e2:	4610      	mov	r0, r2
   173e4:	4999      	ldr	r1, [pc, #612]	(1764c <_ZN19RecalibrerOdometrie6updateEv+0x7f4>)
   173e6:	f005 ff0d 	bl	1d204 <__aeabi_fcmpeq>
   173ea:	4603      	mov	r3, r0
   173ec:	2b00      	cmp	r3, #0
   173ee:	d102      	bne.n	173f6 <_ZN19RecalibrerOdometrie6updateEv+0x59e>
   173f0:	f04f 0301 	mov.w	r3, #1	; 0x1
   173f4:	71fb      	strb	r3, [r7, #7]
   173f6:	79fb      	ldrb	r3, [r7, #7]
   173f8:	627b      	str	r3, [r7, #36]
   173fa:	e014      	b.n	17426 <_ZN19RecalibrerOdometrie6updateEv+0x5ce>
   173fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   17400:	4618      	mov	r0, r3
   17402:	f7f7 fe73 	bl	f0ec <_ZNK8Position8getNormeEv>
   17406:	4602      	mov	r2, r0
   17408:	f04f 0300 	mov.w	r3, #0	; 0x0
   1740c:	71bb      	strb	r3, [r7, #6]
   1740e:	4610      	mov	r0, r2
   17410:	4991      	ldr	r1, [pc, #580]	(17658 <_ZN19RecalibrerOdometrie6updateEv+0x800>)
   17412:	f005 ff1f 	bl	1d254 <__aeabi_fcmpgt>
   17416:	4603      	mov	r3, r0
   17418:	2b00      	cmp	r3, #0
   1741a:	d002      	beq.n	17422 <_ZN19RecalibrerOdometrie6updateEv+0x5ca>
   1741c:	f04f 0301 	mov.w	r3, #1	; 0x1
   17420:	71bb      	strb	r3, [r7, #6]
   17422:	79bb      	ldrb	r3, [r7, #6]
   17424:	627b      	str	r3, [r7, #36]
   17426:	6a7b      	ldr	r3, [r7, #36]
   17428:	2b00      	cmp	r3, #0
   1742a:	d006      	beq.n	1743a <_ZN19RecalibrerOdometrie6updateEv+0x5e2>
        {
            timeBlockedX ++;
   1742c:	4b91      	ldr	r3, [pc, #580]	(17674 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   1742e:	681b      	ldr	r3, [r3, #0]
   17430:	f103 0201 	add.w	r2, r3, #1	; 0x1
   17434:	4b8f      	ldr	r3, [pc, #572]	(17674 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   17436:	601a      	str	r2, [r3, #0]
   17438:	e021      	b.n	1747e <_ZN19RecalibrerOdometrie6updateEv+0x626>
//            allumerLED2();
        }
        else
        {
            timeBlockedX = 0;
   1743a:	4a8e      	ldr	r2, [pc, #568]	(17674 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   1743c:	f04f 0300 	mov.w	r3, #0	; 0x0
   17440:	6013      	str	r3, [r2, #0]
            candidatPositionArrete = Odometrie::odometrie->getPos().getPosition();
   17442:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17446:	681b      	ldr	r3, [r3, #0]
   17448:	f103 0420 	add.w	r4, r3, #32	; 0x20
   1744c:	4b7d      	ldr	r3, [pc, #500]	(17644 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   1744e:	681a      	ldr	r2, [r3, #0]
   17450:	f507 7388 	add.w	r3, r7, #272	; 0x110
   17454:	4618      	mov	r0, r3
   17456:	4611      	mov	r1, r2
   17458:	f7f2 fcce 	bl	9df8 <_ZNK9Odometrie6getPosEv>
   1745c:	f507 7384 	add.w	r3, r7, #264	; 0x108
   17460:	f507 7288 	add.w	r2, r7, #272	; 0x110
   17464:	4618      	mov	r0, r3
   17466:	4611      	mov	r1, r2
   17468:	f7f7 ff00 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
   1746c:	4620      	mov	r0, r4
   1746e:	f507 7384 	add.w	r3, r7, #264	; 0x108
   17472:	e893 0006 	ldmia.w	r3, {r1, r2}
   17476:	f7f7 fd51 	bl	ef1c <_ZN8PositionaSES_>
            eteindreLED2();
   1747a:	f7f4 ffff 	bl	c47c <_Z12eteindreLED2v>
        }
        if (timeBlockedX > 100 &&
   1747e:	4b7d      	ldr	r3, [pc, #500]	(17674 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   17480:	681b      	ldr	r3, [r3, #0]
   17482:	2b64      	cmp	r3, #100
   17484:	dd55      	ble.n	17532 <_ZN19RecalibrerOdometrie6updateEv+0x6da>
   17486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1748a:	681b      	ldr	r3, [r3, #0]
   1748c:	6a9b      	ldr	r3, [r3, #40]
   1748e:	2b00      	cmp	r3, #0
   17490:	d005      	beq.n	1749e <_ZN19RecalibrerOdometrie6updateEv+0x646>
   17492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17496:	681b      	ldr	r3, [r3, #0]
   17498:	6a9b      	ldr	r3, [r3, #40]
   1749a:	2b02      	cmp	r3, #2
   1749c:	d11c      	bne.n	174d8 <_ZN19RecalibrerOdometrie6updateEv+0x680>
   1749e:	4b69      	ldr	r3, [pc, #420]	(17644 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   174a0:	681a      	ldr	r2, [r3, #0]
   174a2:	f507 7392 	add.w	r3, r7, #292	; 0x124
   174a6:	4618      	mov	r0, r3
   174a8:	4611      	mov	r1, r2
   174aa:	f7f2 fca5 	bl	9df8 <_ZNK9Odometrie6getPosEv>
   174ae:	f507 738e 	add.w	r3, r7, #284	; 0x11c
   174b2:	f507 7292 	add.w	r2, r7, #292	; 0x124
   174b6:	4618      	mov	r0, r3
   174b8:	4611      	mov	r1, r2
   174ba:	f7f7 fed7 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
   174be:	f507 738e 	add.w	r3, r7, #284	; 0x11c
   174c2:	4618      	mov	r0, r3
   174c4:	f7f7 fcb6 	bl	ee34 <_ZNK8Position4getYEv>
   174c8:	4603      	mov	r3, r0
   174ca:	4618      	mov	r0, r3
   174cc:	496a      	ldr	r1, [pc, #424]	(17678 <_ZN19RecalibrerOdometrie6updateEv+0x820>)
   174ce:	f005 fec1 	bl	1d254 <__aeabi_fcmpgt>
   174d2:	4603      	mov	r3, r0
   174d4:	2b00      	cmp	r3, #0
   174d6:	d128      	bne.n	1752a <_ZN19RecalibrerOdometrie6updateEv+0x6d2>
   174d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   174dc:	681b      	ldr	r3, [r3, #0]
   174de:	6a9b      	ldr	r3, [r3, #40]
   174e0:	2b01      	cmp	r3, #1
   174e2:	d005      	beq.n	174f0 <_ZN19RecalibrerOdometrie6updateEv+0x698>
   174e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   174e8:	681b      	ldr	r3, [r3, #0]
   174ea:	6a9b      	ldr	r3, [r3, #40]
   174ec:	2b03      	cmp	r3, #3
   174ee:	d120      	bne.n	17532 <_ZN19RecalibrerOdometrie6updateEv+0x6da>
   174f0:	4b54      	ldr	r3, [pc, #336]	(17644 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   174f2:	681a      	ldr	r2, [r3, #0]
   174f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
   174f8:	4618      	mov	r0, r3
   174fa:	4611      	mov	r1, r2
   174fc:	f7f2 fc7c 	bl	9df8 <_ZNK9Odometrie6getPosEv>
   17500:	f507 7398 	add.w	r3, r7, #304	; 0x130
   17504:	f507 729c 	add.w	r2, r7, #312	; 0x138
   17508:	4618      	mov	r0, r3
   1750a:	4611      	mov	r1, r2
   1750c:	f7f7 feae 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
   17510:	f507 7398 	add.w	r3, r7, #304	; 0x130
   17514:	4618      	mov	r0, r3
   17516:	f7f7 fc8d 	bl	ee34 <_ZNK8Position4getYEv>
   1751a:	4603      	mov	r3, r0
   1751c:	4618      	mov	r0, r3
   1751e:	4951      	ldr	r1, [pc, #324]	(17664 <_ZN19RecalibrerOdometrie6updateEv+0x80c>)
   17520:	f005 fe7a 	bl	1d218 <__aeabi_fcmplt>
   17524:	4603      	mov	r3, r0
   17526:	2b00      	cmp	r3, #0
   17528:	d003      	beq.n	17532 <_ZN19RecalibrerOdometrie6updateEv+0x6da>
   1752a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1752e:	62bb      	str	r3, [r7, #40]
   17530:	e002      	b.n	17538 <_ZN19RecalibrerOdometrie6updateEv+0x6e0>
   17532:	f04f 0300 	mov.w	r3, #0	; 0x0
   17536:	62bb      	str	r3, [r7, #40]
   17538:	6abb      	ldr	r3, [r7, #40]
   1753a:	2b00      	cmp	r3, #0
   1753c:	d074      	beq.n	17628 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
              && Odometrie::odometrie->getPos().getPosition().getY() < 150)
             ))// && (StrategieV2::getIsBlue() ? Odometrie::odometrie->getPos().getPosition().getX() < 200 : Odometrie::odometrie->getPos().getPosition().getX() > 2800))
        {
#ifdef ROBOTHW //A adapter à la taille du robot

            if(this->coinRecalage == COTE_DEPART_ADVERSAIRE_HAUT || this->coinRecalage == COTE_NOTRE_DEPART_HAUT)
   1753e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17542:	681b      	ldr	r3, [r3, #0]
   17544:	6a9b      	ldr	r3, [r3, #40]
   17546:	2b00      	cmp	r3, #0
   17548:	d005      	beq.n	17556 <_ZN19RecalibrerOdometrie6updateEv+0x6fe>
   1754a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1754e:	681b      	ldr	r3, [r3, #0]
   17550:	6a9b      	ldr	r3, [r3, #40]
   17552:	2b02      	cmp	r3, #2
   17554:	d106      	bne.n	17564 <_ZN19RecalibrerOdometrie6updateEv+0x70c>
                Odometrie::odometrie->setY(2000-95);
   17556:	4b3b      	ldr	r3, [pc, #236]	(17644 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   17558:	681b      	ldr	r3, [r3, #0]
   1755a:	4618      	mov	r0, r3
   1755c:	4947      	ldr	r1, [pc, #284]	(1767c <_ZN19RecalibrerOdometrie6updateEv+0x824>)
   1755e:	f7f2 fcc9 	bl	9ef4 <_ZN9Odometrie4setYEf>
   17562:	e005      	b.n	17570 <_ZN19RecalibrerOdometrie6updateEv+0x718>
            else
                Odometrie::odometrie->setY(95);
   17564:	4b37      	ldr	r3, [pc, #220]	(17644 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   17566:	681b      	ldr	r3, [r3, #0]
   17568:	4618      	mov	r0, r3
   1756a:	493f      	ldr	r1, [pc, #252]	(17668 <_ZN19RecalibrerOdometrie6updateEv+0x810>)
   1756c:	f7f2 fcc2 	bl	9ef4 <_ZN9Odometrie4setYEf>
#endif
            StrategieV2::setEnTrainDeRecalibrer(false);
   17570:	f04f 0000 	mov.w	r0, #0	; 0x0
   17574:	f000 f9fe 	bl	17974 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>
            StrategieV2::setCurrentGoal(positionDepart, false);
   17578:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1757c:	681a      	ldr	r2, [r3, #0]
   1757e:	4b2f      	ldr	r3, [pc, #188]	(1763c <_ZN19RecalibrerOdometrie6updateEv+0x7e4>)
   17580:	9300      	str	r3, [sp, #0]
   17582:	f102 0318 	add.w	r3, r2, #24	; 0x18
   17586:	e893 0003 	ldmia.w	r3, {r0, r1}
   1758a:	f04f 0200 	mov.w	r2, #0	; 0x0
   1758e:	4b2c      	ldr	r3, [pc, #176]	(17640 <_ZN19RecalibrerOdometrie6updateEv+0x7e8>)
   17590:	f000 fbf0 	bl	17d74 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            //StrategieV2::setCurrentGoal(Odometrie::odometrie->getPos().getPosition()+Position((StrategieV2::getIsBlue()?200:-200), 0), false, 1); // on avance  encore un peu
            //goalPosition2 = Odometrie::odometrie->getPos().getPosition()+Position((StrategieV2::getIsBlue()?200:-200), 0);
            status = 5;
   17594:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17598:	681a      	ldr	r2, [r3, #0]
   1759a:	f04f 0305 	mov.w	r3, #5	; 0x5
   1759e:	60d3      	str	r3, [r2, #12]
            timeBlockedX = 0;
   175a0:	4a34      	ldr	r2, [pc, #208]	(17674 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   175a2:	f04f 0300 	mov.w	r3, #0	; 0x0
   175a6:	6013      	str	r3, [r2, #0]
   175a8:	e03e      	b.n	17628 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        }
    }
    else if (status == 5)
   175aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   175ae:	681b      	ldr	r3, [r3, #0]
   175b0:	68db      	ldr	r3, [r3, #12]
   175b2:	2b05      	cmp	r3, #5
   175b4:	d138      	bne.n	17628 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
    {
        Position vect = positionDepart - Odometrie::odometrie->getPos().getPosition();//positionGoal2 -
   175b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   175ba:	681b      	ldr	r3, [r3, #0]
   175bc:	f103 0418 	add.w	r4, r3, #24	; 0x18
   175c0:	4b20      	ldr	r3, [pc, #128]	(17644 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   175c2:	681a      	ldr	r2, [r3, #0]
   175c4:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
   175c8:	4618      	mov	r0, r3
   175ca:	4611      	mov	r1, r2
   175cc:	f7f2 fc14 	bl	9df8 <_ZNK9Odometrie6getPosEv>
   175d0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
   175d4:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
   175d8:	4618      	mov	r0, r3
   175da:	4611      	mov	r1, r2
   175dc:	f7f7 fe46 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
   175e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
   175e4:	f507 72a2 	add.w	r2, r7, #324	; 0x144
   175e8:	4618      	mov	r0, r3
   175ea:	4621      	mov	r1, r4
   175ec:	f7f7 fc70 	bl	eed0 <_ZNK8PositionmiERKS_>
        if (vect.getNorme() < 40)
   175f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
   175f4:	4618      	mov	r0, r3
   175f6:	f7f7 fd79 	bl	f0ec <_ZNK8Position8getNormeEv>
   175fa:	4602      	mov	r2, r0
   175fc:	f04f 0300 	mov.w	r3, #0	; 0x0
   17600:	717b      	strb	r3, [r7, #5]
   17602:	4610      	mov	r0, r2
   17604:	4910      	ldr	r1, [pc, #64]	(17648 <_ZN19RecalibrerOdometrie6updateEv+0x7f0>)
   17606:	f005 fe07 	bl	1d218 <__aeabi_fcmplt>
   1760a:	4603      	mov	r3, r0
   1760c:	2b00      	cmp	r3, #0
   1760e:	d002      	beq.n	17616 <_ZN19RecalibrerOdometrie6updateEv+0x7be>
   17610:	f04f 0301 	mov.w	r3, #1	; 0x1
   17614:	717b      	strb	r3, [r7, #5]
   17616:	797b      	ldrb	r3, [r7, #5]
   17618:	2b00      	cmp	r3, #0
   1761a:	d005      	beq.n	17628 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        {
            status = -1;
   1761c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17620:	681a      	ldr	r2, [r3, #0]
   17622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17626:	60d3      	str	r3, [r2, #12]
        }
    }
    return status;
   17628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1762c:	681b      	ldr	r3, [r3, #0]
   1762e:	68db      	ldr	r3, [r3, #12]
//#endif
}
   17630:	4618      	mov	r0, r3
   17632:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
   17636:	46bd      	mov	sp, r7
   17638:	bd90      	pop	{r4, r7, pc}
   1763a:	46c0      	nop			(mov r8, r8)
   1763c:	c2c80000 	.word	0xc2c80000
   17640:	40400000 	.word	0x40400000
   17644:	20000574 	.word	0x20000574
   17648:	42200000 	.word	0x42200000
   1764c:	00000000 	.word	0x00000000
   17650:	3f000000 	.word	0x3f000000
   17654:	453b8000 	.word	0x453b8000
   17658:	c0a00000 	.word	0xc0a00000
   1765c:	200005a0 	.word	0x200005a0
   17660:	45322000 	.word	0x45322000
   17664:	43160000 	.word	0x43160000
   17668:	42be0000 	.word	0x42be0000
   1766c:	45359000 	.word	0x45359000
   17670:	44fa0000 	.word	0x44fa0000
   17674:	2000059c 	.word	0x2000059c
   17678:	44e74000 	.word	0x44e74000
   1767c:	44ee2000 	.word	0x44ee2000

00017680 <_ZN19RecalibrerOdometrieD0Ev>:
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
    this->coinRecalage = coinRecalage;
}

RecalibrerOdometrie::~RecalibrerOdometrie()
   17680:	b580      	push	{r7, lr}
   17682:	b082      	sub	sp, #8
   17684:	af00      	add	r7, sp, #0
   17686:	6078      	str	r0, [r7, #4]
   17688:	687a      	ldr	r2, [r7, #4]
   1768a:	4b0a      	ldr	r3, [pc, #40]	(176b4 <_ZN19RecalibrerOdometrieD0Ev+0x34>)
   1768c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   1768e:	687b      	ldr	r3, [r7, #4]
   17690:	4618      	mov	r0, r3
   17692:	f7ff f97f 	bl	16994 <_ZN17MediumLevelActionD2Ev>
   17696:	f04f 0301 	mov.w	r3, #1	; 0x1
   1769a:	b2db      	uxtb	r3, r3
   1769c:	2b00      	cmp	r3, #0
   1769e:	d002      	beq.n	176a6 <_ZN19RecalibrerOdometrieD0Ev+0x26>
   176a0:	6878      	ldr	r0, [r7, #4]
   176a2:	f7f7 fae7 	bl	ec74 <_ZdlPv>
   176a6:	687b      	ldr	r3, [r7, #4]
   176a8:	4618      	mov	r0, r3
   176aa:	f107 0708 	add.w	r7, r7, #8	; 0x8
   176ae:	46bd      	mov	sp, r7
   176b0:	bd80      	pop	{r7, pc}
   176b2:	46c0      	nop			(mov r8, r8)
   176b4:	000241c8 	.word	0x000241c8

000176b8 <_ZN19RecalibrerOdometrieD1Ev>:
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
    this->coinRecalage = coinRecalage;
}

RecalibrerOdometrie::~RecalibrerOdometrie()
   176b8:	b580      	push	{r7, lr}
   176ba:	b082      	sub	sp, #8
   176bc:	af00      	add	r7, sp, #0
   176be:	6078      	str	r0, [r7, #4]
   176c0:	687a      	ldr	r2, [r7, #4]
   176c2:	4b0a      	ldr	r3, [pc, #40]	(176ec <_ZN19RecalibrerOdometrieD1Ev+0x34>)
   176c4:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   176c6:	687b      	ldr	r3, [r7, #4]
   176c8:	4618      	mov	r0, r3
   176ca:	f7ff f963 	bl	16994 <_ZN17MediumLevelActionD2Ev>
   176ce:	f04f 0300 	mov.w	r3, #0	; 0x0
   176d2:	b2db      	uxtb	r3, r3
   176d4:	2b00      	cmp	r3, #0
   176d6:	d002      	beq.n	176de <_ZN19RecalibrerOdometrieD1Ev+0x26>
   176d8:	6878      	ldr	r0, [r7, #4]
   176da:	f7f7 facb 	bl	ec74 <_ZdlPv>
   176de:	687b      	ldr	r3, [r7, #4]
   176e0:	4618      	mov	r0, r3
   176e2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   176e6:	46bd      	mov	sp, r7
   176e8:	bd80      	pop	{r7, pc}
   176ea:	46c0      	nop			(mov r8, r8)
   176ec:	000241c8 	.word	0x000241c8

000176f0 <_ZN19RecalibrerOdometrieD2Ev>:
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
    this->coinRecalage = coinRecalage;
}

RecalibrerOdometrie::~RecalibrerOdometrie()
   176f0:	b580      	push	{r7, lr}
   176f2:	b082      	sub	sp, #8
   176f4:	af00      	add	r7, sp, #0
   176f6:	6078      	str	r0, [r7, #4]
   176f8:	687a      	ldr	r2, [r7, #4]
   176fa:	4b0a      	ldr	r3, [pc, #40]	(17724 <_ZN19RecalibrerOdometrieD2Ev+0x34>)
   176fc:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   176fe:	687b      	ldr	r3, [r7, #4]
   17700:	4618      	mov	r0, r3
   17702:	f7ff f947 	bl	16994 <_ZN17MediumLevelActionD2Ev>
   17706:	f04f 0300 	mov.w	r3, #0	; 0x0
   1770a:	b2db      	uxtb	r3, r3
   1770c:	2b00      	cmp	r3, #0
   1770e:	d002      	beq.n	17716 <_ZN19RecalibrerOdometrieD2Ev+0x26>
   17710:	6878      	ldr	r0, [r7, #4]
   17712:	f7f7 faaf 	bl	ec74 <_ZdlPv>
   17716:	687b      	ldr	r3, [r7, #4]
   17718:	4618      	mov	r0, r3
   1771a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1771e:	46bd      	mov	sp, r7
   17720:	bd80      	pop	{r7, pc}
   17722:	46c0      	nop			(mov r8, r8)
   17724:	000241c8 	.word	0x000241c8

00017728 <_ZN19RecalibrerOdometrieC1Eb8Positioni>:
#include "leds.h"
#ifndef ROBOTHW
#include <QDebug>
#endif

RecalibrerOdometrie::RecalibrerOdometrie(bool blue, Position positionDepart, int coinRecalage) : MediumLevelAction()
   17728:	b590      	push	{r4, r7, lr}
   1772a:	b089      	sub	sp, #36
   1772c:	af00      	add	r7, sp, #0
   1772e:	60f8      	str	r0, [r7, #12]
   17730:	4608      	mov	r0, r1
   17732:	4639      	mov	r1, r7
   17734:	e881 000c 	stmia.w	r1, {r2, r3}
   17738:	4603      	mov	r3, r0
   1773a:	72fb      	strb	r3, [r7, #11]
   1773c:	68fc      	ldr	r4, [r7, #12]
   1773e:	f107 0310 	add.w	r3, r7, #16	; 0x10
   17742:	4618      	mov	r0, r3
   17744:	4923      	ldr	r1, [pc, #140]	(177d4 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   17746:	4a23      	ldr	r2, [pc, #140]	(177d4 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   17748:	f04f 0301 	mov.w	r3, #1	; 0x1
   1774c:	f7f7 fb52 	bl	edf4 <_ZN8PositionC1Effb>
   17750:	4620      	mov	r0, r4
   17752:	f107 0310 	add.w	r3, r7, #16	; 0x10
   17756:	e893 0006 	ldmia.w	r3, {r1, r2}
   1775a:	f7ff f95b 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   1775e:	68fa      	ldr	r2, [r7, #12]
   17760:	4b1d      	ldr	r3, [pc, #116]	(177d8 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xb0>)
   17762:	6013      	str	r3, [r2, #0]
   17764:	68fb      	ldr	r3, [r7, #12]
   17766:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1776a:	4618      	mov	r0, r3
   1776c:	f7f7 fb1a 	bl	eda4 <_ZN8PositionC1Ev>
   17770:	68fb      	ldr	r3, [r7, #12]
   17772:	f103 0320 	add.w	r3, r3, #32	; 0x20
   17776:	4618      	mov	r0, r3
   17778:	f7f7 fb14 	bl	eda4 <_ZN8PositionC1Ev>
{
    this->isBlue = blue;
   1777c:	68fa      	ldr	r2, [r7, #12]
   1777e:	7afb      	ldrb	r3, [r7, #11]
   17780:	f882 302c 	strb.w	r3, [r2, #44]
    this->positionDepart = positionDepart;//Position(700, 3000, isBlue);
   17784:	68fb      	ldr	r3, [r7, #12]
   17786:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1778a:	4618      	mov	r0, r3
   1778c:	463b      	mov	r3, r7
   1778e:	e893 0006 	ldmia.w	r3, {r1, r2}
   17792:	f7f7 fbc3 	bl	ef1c <_ZN8PositionaSES_>
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
   17796:	68fb      	ldr	r3, [r7, #12]
   17798:	f103 0420 	add.w	r4, r3, #32	; 0x20
   1779c:	68fb      	ldr	r3, [r7, #12]
   1779e:	f893 c02c 	ldrb.w	ip, [r3, #44]
   177a2:	f107 0318 	add.w	r3, r7, #24	; 0x18
   177a6:	4618      	mov	r0, r3
   177a8:	490a      	ldr	r1, [pc, #40]	(177d4 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   177aa:	4a0a      	ldr	r2, [pc, #40]	(177d4 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   177ac:	4663      	mov	r3, ip
   177ae:	f7f7 fb21 	bl	edf4 <_ZN8PositionC1Effb>
   177b2:	4620      	mov	r0, r4
   177b4:	f107 0318 	add.w	r3, r7, #24	; 0x18
   177b8:	e893 0006 	ldmia.w	r3, {r1, r2}
   177bc:	f7f7 fbae 	bl	ef1c <_ZN8PositionaSES_>
    this->coinRecalage = coinRecalage;
   177c0:	68fa      	ldr	r2, [r7, #12]
   177c2:	6b3b      	ldr	r3, [r7, #48]
   177c4:	6293      	str	r3, [r2, #40]
}
   177c6:	68fb      	ldr	r3, [r7, #12]
   177c8:	4618      	mov	r0, r3
   177ca:	f107 0724 	add.w	r7, r7, #36	; 0x24
   177ce:	46bd      	mov	sp, r7
   177d0:	bd90      	pop	{r4, r7, pc}
   177d2:	46c0      	nop			(mov r8, r8)
   177d4:	00000000 	.word	0x00000000
   177d8:	000241c8 	.word	0x000241c8

000177dc <_ZN19RecalibrerOdometrieC2Eb8Positioni>:
#include "leds.h"
#ifndef ROBOTHW
#include <QDebug>
#endif

RecalibrerOdometrie::RecalibrerOdometrie(bool blue, Position positionDepart, int coinRecalage) : MediumLevelAction()
   177dc:	b590      	push	{r4, r7, lr}
   177de:	b089      	sub	sp, #36
   177e0:	af00      	add	r7, sp, #0
   177e2:	60f8      	str	r0, [r7, #12]
   177e4:	4608      	mov	r0, r1
   177e6:	4639      	mov	r1, r7
   177e8:	e881 000c 	stmia.w	r1, {r2, r3}
   177ec:	4603      	mov	r3, r0
   177ee:	72fb      	strb	r3, [r7, #11]
   177f0:	68fc      	ldr	r4, [r7, #12]
   177f2:	f107 0310 	add.w	r3, r7, #16	; 0x10
   177f6:	4618      	mov	r0, r3
   177f8:	4923      	ldr	r1, [pc, #140]	(17888 <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   177fa:	4a23      	ldr	r2, [pc, #140]	(17888 <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   177fc:	f04f 0301 	mov.w	r3, #1	; 0x1
   17800:	f7f7 faf8 	bl	edf4 <_ZN8PositionC1Effb>
   17804:	4620      	mov	r0, r4
   17806:	f107 0310 	add.w	r3, r7, #16	; 0x10
   1780a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1780e:	f7ff f901 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   17812:	68fa      	ldr	r2, [r7, #12]
   17814:	4b1d      	ldr	r3, [pc, #116]	(1788c <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xb0>)
   17816:	6013      	str	r3, [r2, #0]
   17818:	68fb      	ldr	r3, [r7, #12]
   1781a:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1781e:	4618      	mov	r0, r3
   17820:	f7f7 fac0 	bl	eda4 <_ZN8PositionC1Ev>
   17824:	68fb      	ldr	r3, [r7, #12]
   17826:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1782a:	4618      	mov	r0, r3
   1782c:	f7f7 faba 	bl	eda4 <_ZN8PositionC1Ev>
{
    this->isBlue = blue;
   17830:	68fa      	ldr	r2, [r7, #12]
   17832:	7afb      	ldrb	r3, [r7, #11]
   17834:	f882 302c 	strb.w	r3, [r2, #44]
    this->positionDepart = positionDepart;//Position(700, 3000, isBlue);
   17838:	68fb      	ldr	r3, [r7, #12]
   1783a:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1783e:	4618      	mov	r0, r3
   17840:	463b      	mov	r3, r7
   17842:	e893 0006 	ldmia.w	r3, {r1, r2}
   17846:	f7f7 fb69 	bl	ef1c <_ZN8PositionaSES_>
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
   1784a:	68fb      	ldr	r3, [r7, #12]
   1784c:	f103 0420 	add.w	r4, r3, #32	; 0x20
   17850:	68fb      	ldr	r3, [r7, #12]
   17852:	f893 c02c 	ldrb.w	ip, [r3, #44]
   17856:	f107 0318 	add.w	r3, r7, #24	; 0x18
   1785a:	4618      	mov	r0, r3
   1785c:	490a      	ldr	r1, [pc, #40]	(17888 <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   1785e:	4a0a      	ldr	r2, [pc, #40]	(17888 <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   17860:	4663      	mov	r3, ip
   17862:	f7f7 fac7 	bl	edf4 <_ZN8PositionC1Effb>
   17866:	4620      	mov	r0, r4
   17868:	f107 0318 	add.w	r3, r7, #24	; 0x18
   1786c:	e893 0006 	ldmia.w	r3, {r1, r2}
   17870:	f7f7 fb54 	bl	ef1c <_ZN8PositionaSES_>
    this->coinRecalage = coinRecalage;
   17874:	68fa      	ldr	r2, [r7, #12]
   17876:	6b3b      	ldr	r3, [r7, #48]
   17878:	6293      	str	r3, [r2, #40]
}
   1787a:	68fb      	ldr	r3, [r7, #12]
   1787c:	4618      	mov	r0, r3
   1787e:	f107 0724 	add.w	r7, r7, #36	; 0x24
   17882:	46bd      	mov	sp, r7
   17884:	bd90      	pop	{r4, r7, pc}
   17886:	46c0      	nop			(mov r8, r8)
   17888:	00000000 	.word	0x00000000
   1788c:	000241c8 	.word	0x000241c8

00017890 <_ZN11StrategieV212getTimeSpentEv>:
StrategieV2::~StrategieV2()
{
    //dtor
}

long StrategieV2::getTimeSpent()
   17890:	b480      	push	{r7}
   17892:	af00      	add	r7, sp, #0
{
    return updateCount * 5;
   17894:	4b04      	ldr	r3, [pc, #16]	(178a8 <_ZN11StrategieV212getTimeSpentEv+0x18>)
   17896:	681a      	ldr	r2, [r3, #0]
   17898:	4613      	mov	r3, r2
   1789a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1789e:	4413      	add	r3, r2
}
   178a0:	4618      	mov	r0, r3
   178a2:	46bd      	mov	sp, r7
   178a4:	bc80      	pop	{r7}
   178a6:	4770      	bx	lr
   178a8:	200005a8 	.word	0x200005a8

000178ac <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>:
        delete currentCommand;
    currentCommand = new CommandTournerVers(a, maxSpeed); // create the command
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
    StrategieV2::emptySharpsToCheck();
}
void StrategieV2::addTemporaryAction(MediumLevelAction* action)
   178ac:	b480      	push	{r7}
   178ae:	b083      	sub	sp, #12
   178b0:	af00      	add	r7, sp, #0
   178b2:	6078      	str	r0, [r7, #4]
{
    currentAction = action;
   178b4:	4a05      	ldr	r2, [pc, #20]	(178cc <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction+0x20>)
   178b6:	687b      	ldr	r3, [r7, #4]
   178b8:	6013      	str	r3, [r2, #0]
    mustDeleteAction = true; // this is a temporary action that needs to be deleted
   178ba:	4a05      	ldr	r2, [pc, #20]	(178d0 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction+0x24>)
   178bc:	f04f 0301 	mov.w	r3, #1	; 0x1
   178c0:	7013      	strb	r3, [r2, #0]
}
   178c2:	f107 070c 	add.w	r7, r7, #12	; 0xc
   178c6:	46bd      	mov	sp, r7
   178c8:	bc80      	pop	{r7}
   178ca:	4770      	bx	lr
   178cc:	200005b0 	.word	0x200005b0
   178d0:	2000063e 	.word	0x2000063e

000178d4 <_ZN11StrategieV214setJustAvoidedEb>:
void StrategieV2::setJustAvoided(bool avoided)
   178d4:	b480      	push	{r7}
   178d6:	b083      	sub	sp, #12
   178d8:	af00      	add	r7, sp, #0
   178da:	4603      	mov	r3, r0
   178dc:	71fb      	strb	r3, [r7, #7]
{
    hasJustAvoided = avoided;
   178de:	4a04      	ldr	r2, [pc, #16]	(178f0 <_ZN11StrategieV214setJustAvoidedEb+0x1c>)
   178e0:	79fb      	ldrb	r3, [r7, #7]
   178e2:	7013      	strb	r3, [r2, #0]
}
   178e4:	f107 070c 	add.w	r7, r7, #12	; 0xc
   178e8:	46bd      	mov	sp, r7
   178ea:	bc80      	pop	{r7}
   178ec:	4770      	bx	lr
   178ee:	46c0      	nop			(mov r8, r8)
   178f0:	2000063d 	.word	0x2000063d

000178f4 <_ZN11StrategieV214getJustAvoidedEv>:
bool StrategieV2::getJustAvoided()
   178f4:	b480      	push	{r7}
   178f6:	af00      	add	r7, sp, #0
{
    return hasJustAvoided;
   178f8:	4b02      	ldr	r3, [pc, #8]	(17904 <_ZN11StrategieV214getJustAvoidedEv+0x10>)
   178fa:	781b      	ldrb	r3, [r3, #0]
}
   178fc:	4618      	mov	r0, r3
   178fe:	46bd      	mov	sp, r7
   17900:	bc80      	pop	{r7}
   17902:	4770      	bx	lr
   17904:	2000063d 	.word	0x2000063d

00017908 <_ZN11StrategieV29setIsBlueEb>:
    somethingDetected = true;
    Asservissement::asservissement->setCommandSpeeds(NULL); // stoppe le robot
    Asservissement::asservissement->resetAsserv();
}

void StrategieV2::setIsBlue(bool blue)
   17908:	b480      	push	{r7}
   1790a:	b083      	sub	sp, #12
   1790c:	af00      	add	r7, sp, #0
   1790e:	4603      	mov	r3, r0
   17910:	71fb      	strb	r3, [r7, #7]
{
    isBlue = blue;
   17912:	4a04      	ldr	r2, [pc, #16]	(17924 <_ZN11StrategieV29setIsBlueEb+0x1c>)
   17914:	79fb      	ldrb	r3, [r7, #7]
   17916:	7013      	strb	r3, [r2, #0]
}
   17918:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1791c:	46bd      	mov	sp, r7
   1791e:	bc80      	pop	{r7}
   17920:	4770      	bx	lr
   17922:	46c0      	nop			(mov r8, r8)
   17924:	20000649 	.word	0x20000649

00017928 <_ZN11StrategieV29getIsBlueEv>:
bool StrategieV2::getIsBlue()
   17928:	b480      	push	{r7}
   1792a:	af00      	add	r7, sp, #0
{
    return isBlue;
   1792c:	4b02      	ldr	r3, [pc, #8]	(17938 <_ZN11StrategieV29getIsBlueEv+0x10>)
   1792e:	781b      	ldrb	r3, [r3, #0]
}
   17930:	4618      	mov	r0, r3
   17932:	46bd      	mov	sp, r7
   17934:	bc80      	pop	{r7}
   17936:	4770      	bx	lr
   17938:	20000649 	.word	0x20000649

0001793c <_ZN11StrategieV211gatherGlassEv>:

void StrategieV2::gatherGlass()
   1793c:	b480      	push	{r7}
   1793e:	af00      	add	r7, sp, #0
{
    glassGathered++;
   17940:	4b0a      	ldr	r3, [pc, #40]	(1796c <_ZN11StrategieV211gatherGlassEv+0x30>)
   17942:	681b      	ldr	r3, [r3, #0]
   17944:	f103 0201 	add.w	r2, r3, #1	; 0x1
   17948:	4b08      	ldr	r3, [pc, #32]	(1796c <_ZN11StrategieV211gatherGlassEv+0x30>)
   1794a:	601a      	str	r2, [r3, #0]
    if (glassGathered > 0)
   1794c:	4b07      	ldr	r3, [pc, #28]	(1796c <_ZN11StrategieV211gatherGlassEv+0x30>)
   1794e:	681b      	ldr	r3, [r3, #0]
   17950:	2b00      	cmp	r3, #0
   17952:	dd07      	ble.n	17964 <_ZN11StrategieV211gatherGlassEv+0x28>
    {
        glassGathered = 0;
   17954:	4a05      	ldr	r2, [pc, #20]	(1796c <_ZN11StrategieV211gatherGlassEv+0x30>)
   17956:	f04f 0300 	mov.w	r3, #0	; 0x0
   1795a:	6013      	str	r3, [r2, #0]
        hasToGoBase = true;
   1795c:	4a04      	ldr	r2, [pc, #16]	(17970 <_ZN11StrategieV211gatherGlassEv+0x34>)
   1795e:	f04f 0301 	mov.w	r3, #1	; 0x1
   17962:	7013      	strb	r3, [r2, #0]
    }
}
   17964:	46bd      	mov	sp, r7
   17966:	bc80      	pop	{r7}
   17968:	4770      	bx	lr
   1796a:	46c0      	nop			(mov r8, r8)
   1796c:	20000640 	.word	0x20000640
   17970:	2000063c 	.word	0x2000063c

00017974 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>:

void StrategieV2::setEnTrainDeRecalibrer(bool recalibre)
   17974:	b480      	push	{r7}
   17976:	b083      	sub	sp, #12
   17978:	af00      	add	r7, sp, #0
   1797a:	4603      	mov	r3, r0
   1797c:	71fb      	strb	r3, [r7, #7]
{
    enTrainDeRecalibrerOdometrie = recalibre;
   1797e:	4a04      	ldr	r2, [pc, #16]	(17990 <_ZN11StrategieV222setEnTrainDeRecalibrerEb+0x1c>)
   17980:	79fb      	ldrb	r3, [r7, #7]
   17982:	7013      	strb	r3, [r2, #0]
}
   17984:	f107 070c 	add.w	r7, r7, #12	; 0xc
   17988:	46bd      	mov	sp, r7
   1798a:	bc80      	pop	{r7}
   1798c:	4770      	bx	lr
   1798e:	46c0      	nop			(mov r8, r8)
   17990:	20000658 	.word	0x20000658

00017994 <_ZN11StrategieV218emptySharpsToCheckEv>:

void StrategieV2::emptySharpsToCheck()
   17994:	b480      	push	{r7}
   17996:	b083      	sub	sp, #12
   17998:	af00      	add	r7, sp, #0
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   1799a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1799e:	607b      	str	r3, [r7, #4]
   179a0:	e008      	b.n	179b4 <_ZN11StrategieV218emptySharpsToCheckEv+0x20>
        sharpsToCheck[i] = false;
   179a2:	6879      	ldr	r1, [r7, #4]
   179a4:	4a07      	ldr	r2, [pc, #28]	(179c4 <_ZN11StrategieV218emptySharpsToCheckEv+0x30>)
   179a6:	f04f 0300 	mov.w	r3, #0	; 0x0
   179aa:	5453      	strb	r3, [r2, r1]
    enTrainDeRecalibrerOdometrie = recalibre;
}

void StrategieV2::emptySharpsToCheck()
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   179ac:	687b      	ldr	r3, [r7, #4]
   179ae:	f103 0301 	add.w	r3, r3, #1	; 0x1
   179b2:	607b      	str	r3, [r7, #4]
   179b4:	687b      	ldr	r3, [r7, #4]
   179b6:	2b07      	cmp	r3, #7
   179b8:	ddf3      	ble.n	179a2 <_ZN11StrategieV218emptySharpsToCheckEv+0xe>
        sharpsToCheck[i] = false;
}
   179ba:	f107 070c 	add.w	r7, r7, #12	; 0xc
   179be:	46bd      	mov	sp, r7
   179c0:	bc80      	pop	{r7}
   179c2:	4770      	bx	lr
   179c4:	2000064a 	.word	0x2000064a

000179c8 <_ZN11StrategieV210setCommandEP7Command>:
#endif
    }

}

void StrategieV2::setCommand(Command* command)
   179c8:	b480      	push	{r7}
   179ca:	b083      	sub	sp, #12
   179cc:	af00      	add	r7, sp, #0
   179ce:	6078      	str	r0, [r7, #4]
{
    currentCommand = command;
   179d0:	4a03      	ldr	r2, [pc, #12]	(179e0 <_ZN11StrategieV210setCommandEP7Command+0x18>)
   179d2:	687b      	ldr	r3, [r7, #4]
   179d4:	6013      	str	r3, [r2, #0]
}
   179d6:	f107 070c 	add.w	r7, r7, #12	; 0xc
   179da:	46bd      	mov	sp, r7
   179dc:	bc80      	pop	{r7}
   179de:	4770      	bx	lr
   179e0:	200005ac 	.word	0x200005ac

000179e4 <_ZN11StrategieV219setTourneSurSoiMemeEb>:
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
        if (sharps[i]->getName() == name && sharpsToCheck[i] == true && !tourneSurSoiMeme)
            return sharps[i]->getValue().b;
}

void StrategieV2::setTourneSurSoiMeme(bool tourne)
   179e4:	b480      	push	{r7}
   179e6:	b083      	sub	sp, #12
   179e8:	af00      	add	r7, sp, #0
   179ea:	4603      	mov	r3, r0
   179ec:	71fb      	strb	r3, [r7, #7]
{
    tourneSurSoiMeme = tourne;
   179ee:	4a04      	ldr	r2, [pc, #16]	(17a00 <_ZN11StrategieV219setTourneSurSoiMemeEb+0x1c>)
   179f0:	79fb      	ldrb	r3, [r7, #7]
   179f2:	7013      	strb	r3, [r2, #0]
}
   179f4:	f107 070c 	add.w	r7, r7, #12	; 0xc
   179f8:	46bd      	mov	sp, r7
   179fa:	bc80      	pop	{r7}
   179fc:	4770      	bx	lr
   179fe:	46c0      	nop			(mov r8, r8)
   17a00:	20000664 	.word	0x20000664

00017a04 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE>:
void StrategieV2::setCommand(Command* command)
{
    currentCommand = command;
}

bool StrategieV2::sharpDetects(SharpSensor::SharpName name)
   17a04:	b580      	push	{r7, lr}
   17a06:	b088      	sub	sp, #32
   17a08:	af00      	add	r7, sp, #0
   17a0a:	4603      	mov	r3, r0
   17a0c:	73fb      	strb	r3, [r7, #15]
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   17a0e:	f04f 0300 	mov.w	r3, #0	; 0x0
   17a12:	61fb      	str	r3, [r7, #28]
   17a14:	e04a      	b.n	17aac <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xa8>
        if (sharps[i]->getName() == name && sharpsToCheck[i] == true && !tourneSurSoiMeme)
   17a16:	4b29      	ldr	r3, [pc, #164]	(17abc <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xb8>)
   17a18:	681a      	ldr	r2, [r3, #0]
   17a1a:	69fb      	ldr	r3, [r7, #28]
   17a1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   17a20:	4413      	add	r3, r2
   17a22:	681b      	ldr	r3, [r3, #0]
   17a24:	4618      	mov	r0, r3
   17a26:	f7f5 fd1b 	bl	d460 <_ZN11SharpSensor7getNameEv>
   17a2a:	4603      	mov	r3, r0
   17a2c:	461a      	mov	r2, r3
   17a2e:	7bfb      	ldrb	r3, [r7, #15]
   17a30:	4293      	cmp	r3, r2
   17a32:	d115      	bne.n	17a60 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x5c>
   17a34:	69fa      	ldr	r2, [r7, #28]
   17a36:	4b22      	ldr	r3, [pc, #136]	(17ac0 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xbc>)
   17a38:	5c9b      	ldrb	r3, [r3, r2]
   17a3a:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   17a3e:	b2db      	uxtb	r3, r3
   17a40:	2b00      	cmp	r3, #0
   17a42:	d10d      	bne.n	17a60 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x5c>
   17a44:	4b1f      	ldr	r3, [pc, #124]	(17ac4 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xc0>)
   17a46:	781b      	ldrb	r3, [r3, #0]
   17a48:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   17a4c:	b2db      	uxtb	r3, r3
   17a4e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   17a52:	b2db      	uxtb	r3, r3
   17a54:	2b00      	cmp	r3, #0
   17a56:	d103      	bne.n	17a60 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x5c>
   17a58:	f04f 0301 	mov.w	r3, #1	; 0x1
   17a5c:	60bb      	str	r3, [r7, #8]
   17a5e:	e002      	b.n	17a66 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x62>
   17a60:	f04f 0300 	mov.w	r3, #0	; 0x0
   17a64:	60bb      	str	r3, [r7, #8]
   17a66:	68bb      	ldr	r3, [r7, #8]
   17a68:	2b00      	cmp	r3, #0
   17a6a:	d01b      	beq.n	17aa4 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xa0>
            return sharps[i]->getValue().b;
   17a6c:	4b13      	ldr	r3, [pc, #76]	(17abc <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xb8>)
   17a6e:	681a      	ldr	r2, [r3, #0]
   17a70:	69fb      	ldr	r3, [r7, #28]
   17a72:	ea4f 0383 	mov.w	r3, r3, lsl #2
   17a76:	4413      	add	r3, r2
   17a78:	681b      	ldr	r3, [r3, #0]
   17a7a:	681b      	ldr	r3, [r3, #0]
   17a7c:	f103 0308 	add.w	r3, r3, #8	; 0x8
   17a80:	f8d3 c000 	ldr.w	ip, [r3]
   17a84:	4b0d      	ldr	r3, [pc, #52]	(17abc <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xb8>)
   17a86:	681a      	ldr	r2, [r3, #0]
   17a88:	69fb      	ldr	r3, [r7, #28]
   17a8a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   17a8e:	4413      	add	r3, r2
   17a90:	681a      	ldr	r2, [r3, #0]
   17a92:	f107 0310 	add.w	r3, r7, #16	; 0x10
   17a96:	4618      	mov	r0, r3
   17a98:	4611      	mov	r1, r2
   17a9a:	47e0      	blx	ip
   17a9c:	7e3b      	ldrb	r3, [r7, #24]
   17a9e:	607b      	str	r3, [r7, #4]
}
   17aa0:	6878      	ldr	r0, [r7, #4]
   17aa2:	e006      	b.n	17ab2 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xae>
    currentCommand = command;
}

bool StrategieV2::sharpDetects(SharpSensor::SharpName name)
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   17aa4:	69fb      	ldr	r3, [r7, #28]
   17aa6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   17aaa:	61fb      	str	r3, [r7, #28]
   17aac:	69fb      	ldr	r3, [r7, #28]
   17aae:	2b07      	cmp	r3, #7
   17ab0:	ddb1      	ble.n	17a16 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x12>
        if (sharps[i]->getName() == name && sharpsToCheck[i] == true && !tourneSurSoiMeme)
            return sharps[i]->getValue().b;
}
   17ab2:	f107 0720 	add.w	r7, r7, #32	; 0x20
   17ab6:	46bd      	mov	sp, r7
   17ab8:	bd80      	pop	{r7, pc}
   17aba:	46c0      	nop			(mov r8, r8)
   17abc:	20000638 	.word	0x20000638
   17ac0:	2000064a 	.word	0x2000064a
   17ac4:	20000664 	.word	0x20000664

00017ac8 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>:
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
        sharpsToCheck[i] = false;
}

void StrategieV2::enableSharp(SharpSensor::SharpName name)
   17ac8:	b580      	push	{r7, lr}
   17aca:	b084      	sub	sp, #16
   17acc:	af00      	add	r7, sp, #0
   17ace:	4603      	mov	r3, r0
   17ad0:	71fb      	strb	r3, [r7, #7]
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   17ad2:	f04f 0300 	mov.w	r3, #0	; 0x0
   17ad6:	60fb      	str	r3, [r7, #12]
   17ad8:	e01c      	b.n	17b14 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x4c>
        if (sharps[i]->getName() == name)
   17ada:	4b12      	ldr	r3, [pc, #72]	(17b24 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x5c>)
   17adc:	681a      	ldr	r2, [r3, #0]
   17ade:	68fb      	ldr	r3, [r7, #12]
   17ae0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   17ae4:	4413      	add	r3, r2
   17ae6:	681b      	ldr	r3, [r3, #0]
   17ae8:	4618      	mov	r0, r3
   17aea:	f7f5 fcb9 	bl	d460 <_ZN11SharpSensor7getNameEv>
   17aee:	4603      	mov	r3, r0
   17af0:	461a      	mov	r2, r3
   17af2:	79fb      	ldrb	r3, [r7, #7]
   17af4:	4293      	cmp	r3, r2
   17af6:	bf14      	ite	ne
   17af8:	2300      	movne	r3, #0
   17afa:	2301      	moveq	r3, #1
   17afc:	b2db      	uxtb	r3, r3
   17afe:	2b00      	cmp	r3, #0
   17b00:	d004      	beq.n	17b0c <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x44>
            sharpsToCheck[i] = true;
   17b02:	68f9      	ldr	r1, [r7, #12]
   17b04:	4a08      	ldr	r2, [pc, #32]	(17b28 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x60>)
   17b06:	f04f 0301 	mov.w	r3, #1	; 0x1
   17b0a:	5453      	strb	r3, [r2, r1]
        sharpsToCheck[i] = false;
}

void StrategieV2::enableSharp(SharpSensor::SharpName name)
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   17b0c:	68fb      	ldr	r3, [r7, #12]
   17b0e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   17b12:	60fb      	str	r3, [r7, #12]
   17b14:	68fb      	ldr	r3, [r7, #12]
   17b16:	2b07      	cmp	r3, #7
   17b18:	dddf      	ble.n	17ada <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x12>
        if (sharps[i]->getName() == name)
            sharpsToCheck[i] = true;
}
   17b1a:	f107 0710 	add.w	r7, r7, #16	; 0x10
   17b1e:	46bd      	mov	sp, r7
   17b20:	bd80      	pop	{r7, pc}
   17b22:	46c0      	nop			(mov r8, r8)
   17b24:	20000638 	.word	0x20000638
   17b28:	2000064a 	.word	0x2000064a

00017b2c <_ZN11StrategieV217enableSharpsGroupEb>:

void StrategieV2::enableSharpsGroup(bool front)
   17b2c:	b580      	push	{r7, lr}
   17b2e:	b082      	sub	sp, #8
   17b30:	af00      	add	r7, sp, #0
   17b32:	4603      	mov	r3, r0
   17b34:	71fb      	strb	r3, [r7, #7]
{
    emptySharpsToCheck();
   17b36:	f7ff ff2d 	bl	17994 <_ZN11StrategieV218emptySharpsToCheckEv>

    if (front)
   17b3a:	79fb      	ldrb	r3, [r7, #7]
   17b3c:	2b00      	cmp	r3, #0
   17b3e:	d010      	beq.n	17b62 <_ZN11StrategieV217enableSharpsGroupEb+0x36>
#if defined(STM32F40_41xxx)
        enableSharp(SharpSensor::FRONT_LEFT);
        enableSharp(SharpSensor::FRONT_RIGHT);
        enableSharp(SharpSensor::FRONT_MIDDLE);
#else
        enableSharp(SharpSensor::FRONT_LEFT);
   17b40:	f04f 0002 	mov.w	r0, #2	; 0x2
   17b44:	f7ff ffc0 	bl	17ac8 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::FRONT_RIGHT);
   17b48:	f04f 0003 	mov.w	r0, #3	; 0x3
   17b4c:	f7ff ffbc 	bl	17ac8 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::LEFT_FRONT);
   17b50:	f04f 0004 	mov.w	r0, #4	; 0x4
   17b54:	f7ff ffb8 	bl	17ac8 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::RIGHT_FRONT);
   17b58:	f04f 0006 	mov.w	r0, #6	; 0x6
   17b5c:	f7ff ffb4 	bl	17ac8 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
   17b60:	e00f      	b.n	17b82 <_ZN11StrategieV217enableSharpsGroupEb+0x56>
#if defined(STM32F40_41xxx)
        enableSharp(SharpSensor::BACK_LEFT);
        enableSharp(SharpSensor::BACK_RIGHT);
        enableSharp(SharpSensor::BACK_MIDDLE);
#else
        enableSharp(SharpSensor::BACK_LEFT);
   17b62:	f04f 0001 	mov.w	r0, #1	; 0x1
   17b66:	f7ff ffaf 	bl	17ac8 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::BACK_RIGHT);
   17b6a:	f04f 0000 	mov.w	r0, #0	; 0x0
   17b6e:	f7ff ffab 	bl	17ac8 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::LEFT_BACK);
   17b72:	f04f 0005 	mov.w	r0, #5	; 0x5
   17b76:	f7ff ffa7 	bl	17ac8 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::RIGHT_BACK);
   17b7a:	f04f 0007 	mov.w	r0, #7	; 0x7
   17b7e:	f7ff ffa3 	bl	17ac8 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
#endif
    }

}
   17b82:	f107 0708 	add.w	r7, r7, #8	; 0x8
   17b86:	46bd      	mov	sp, r7
   17b88:	bd80      	pop	{r7, pc}
   17b8a:	46c0      	nop			(mov r8, r8)

00017b8c <_ZN11StrategieV211willCollideEv>:
}
bool StrategieV2::getJustAvoided()
{
    return hasJustAvoided;
}
bool StrategieV2::willCollide()
   17b8c:	b580      	push	{r7, lr}
   17b8e:	b082      	sub	sp, #8
   17b90:	af00      	add	r7, sp, #0
{
    somethingDetected = true;
   17b92:	4a0a      	ldr	r2, [pc, #40]	(17bbc <_ZN11StrategieV211willCollideEv+0x30>)
   17b94:	f04f 0301 	mov.w	r3, #1	; 0x1
   17b98:	7013      	strb	r3, [r2, #0]
    Asservissement::asservissement->setCommandSpeeds(NULL); // stoppe le robot
   17b9a:	4b09      	ldr	r3, [pc, #36]	(17bc0 <_ZN11StrategieV211willCollideEv+0x34>)
   17b9c:	681b      	ldr	r3, [r3, #0]
   17b9e:	4618      	mov	r0, r3
   17ba0:	f04f 0100 	mov.w	r1, #0	; 0x0
   17ba4:	f7ef fb04 	bl	71b0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    Asservissement::asservissement->resetAsserv();
   17ba8:	4b05      	ldr	r3, [pc, #20]	(17bc0 <_ZN11StrategieV211willCollideEv+0x34>)
   17baa:	681b      	ldr	r3, [r3, #0]
   17bac:	4618      	mov	r0, r3
   17bae:	f7ef fc53 	bl	7458 <_ZN14Asservissement11resetAsservEv>
}
   17bb2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   17bb6:	46bd      	mov	sp, r7
   17bb8:	bd80      	pop	{r7, pc}
   17bba:	46c0      	nop			(mov r8, r8)
   17bbc:	20000648 	.word	0x20000648
   17bc0:	20000564 	.word	0x20000564

00017bc4 <_ZN11StrategieV26lookAtEff>:
        delete currentCommand;
    currentCommand = new CommandTournerVers(pos, maxSpeed); // create the command
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
    StrategieV2::emptySharpsToCheck();
}
void StrategieV2::lookAt(Angle a, float maxSpeed)
   17bc4:	b580      	push	{r7, lr}
   17bc6:	b084      	sub	sp, #16
   17bc8:	af00      	add	r7, sp, #0
   17bca:	60f8      	str	r0, [r7, #12]
   17bcc:	60b9      	str	r1, [r7, #8]
{
    if (currentCommand != NULL)
   17bce:	4b1b      	ldr	r3, [pc, #108]	(17c3c <_ZN11StrategieV26lookAtEff+0x78>)
   17bd0:	681b      	ldr	r3, [r3, #0]
   17bd2:	2b00      	cmp	r3, #0
   17bd4:	d00d      	beq.n	17bf2 <_ZN11StrategieV26lookAtEff+0x2e>
        delete currentCommand;
   17bd6:	4b19      	ldr	r3, [pc, #100]	(17c3c <_ZN11StrategieV26lookAtEff+0x78>)
   17bd8:	681b      	ldr	r3, [r3, #0]
   17bda:	2b00      	cmp	r3, #0
   17bdc:	d009      	beq.n	17bf2 <_ZN11StrategieV26lookAtEff+0x2e>
   17bde:	4b17      	ldr	r3, [pc, #92]	(17c3c <_ZN11StrategieV26lookAtEff+0x78>)
   17be0:	681b      	ldr	r3, [r3, #0]
   17be2:	681b      	ldr	r3, [r3, #0]
   17be4:	f103 0304 	add.w	r3, r3, #4	; 0x4
   17be8:	681a      	ldr	r2, [r3, #0]
   17bea:	4b14      	ldr	r3, [pc, #80]	(17c3c <_ZN11StrategieV26lookAtEff+0x78>)
   17bec:	681b      	ldr	r3, [r3, #0]
   17bee:	4618      	mov	r0, r3
   17bf0:	4790      	blx	r2
    currentCommand = new CommandTournerVers(a, maxSpeed); // create the command
   17bf2:	f04f 0020 	mov.w	r0, #32	; 0x20
   17bf6:	f7f6 ff97 	bl	eb28 <_Znwj>
   17bfa:	4603      	mov	r3, r0
   17bfc:	603b      	str	r3, [r7, #0]
   17bfe:	683b      	ldr	r3, [r7, #0]
   17c00:	2b00      	cmp	r3, #0
   17c02:	d007      	beq.n	17c14 <_ZN11StrategieV26lookAtEff+0x50>
   17c04:	6838      	ldr	r0, [r7, #0]
   17c06:	68f9      	ldr	r1, [r7, #12]
   17c08:	68ba      	ldr	r2, [r7, #8]
   17c0a:	f7f1 f9a5 	bl	8f58 <_ZN18CommandTournerVersC1Eff>
   17c0e:	683b      	ldr	r3, [r7, #0]
   17c10:	607b      	str	r3, [r7, #4]
   17c12:	e001      	b.n	17c18 <_ZN11StrategieV26lookAtEff+0x54>
   17c14:	683b      	ldr	r3, [r7, #0]
   17c16:	607b      	str	r3, [r7, #4]
   17c18:	687a      	ldr	r2, [r7, #4]
   17c1a:	4b08      	ldr	r3, [pc, #32]	(17c3c <_ZN11StrategieV26lookAtEff+0x78>)
   17c1c:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
   17c1e:	4b08      	ldr	r3, [pc, #32]	(17c40 <_ZN11StrategieV26lookAtEff+0x7c>)
   17c20:	681a      	ldr	r2, [r3, #0]
   17c22:	4b06      	ldr	r3, [pc, #24]	(17c3c <_ZN11StrategieV26lookAtEff+0x78>)
   17c24:	681b      	ldr	r3, [r3, #0]
   17c26:	4610      	mov	r0, r2
   17c28:	4619      	mov	r1, r3
   17c2a:	f7ef fac1 	bl	71b0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    StrategieV2::emptySharpsToCheck();
   17c2e:	f7ff feb1 	bl	17994 <_ZN11StrategieV218emptySharpsToCheckEv>
}
   17c32:	f107 0710 	add.w	r7, r7, #16	; 0x10
   17c36:	46bd      	mov	sp, r7
   17c38:	bd80      	pop	{r7, pc}
   17c3a:	46c0      	nop			(mov r8, r8)
   17c3c:	200005ac 	.word	0x200005ac
   17c40:	20000564 	.word	0x20000564

00017c44 <_ZN11StrategieV26lookAtE8Positionf>:
    if (currentCommand != NULL)
        delete currentCommand;
    currentCommand = new CommandAllerEnArcA(goal, center, vitesse*5, goBack);
    Asservissement::asservissement->setCommandSpeeds(currentCommand);
}
void StrategieV2::lookAt(Position pos, float maxSpeed)
   17c44:	b580      	push	{r7, lr}
   17c46:	b086      	sub	sp, #24
   17c48:	af00      	add	r7, sp, #0
   17c4a:	f107 0310 	add.w	r3, r7, #16	; 0x10
   17c4e:	e883 0003 	stmia.w	r3, {r0, r1}
   17c52:	60fa      	str	r2, [r7, #12]
{
    if (currentCommand != NULL)
   17c54:	4b1c      	ldr	r3, [pc, #112]	(17cc8 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   17c56:	681b      	ldr	r3, [r3, #0]
   17c58:	2b00      	cmp	r3, #0
   17c5a:	d00d      	beq.n	17c78 <_ZN11StrategieV26lookAtE8Positionf+0x34>
        delete currentCommand;
   17c5c:	4b1a      	ldr	r3, [pc, #104]	(17cc8 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   17c5e:	681b      	ldr	r3, [r3, #0]
   17c60:	2b00      	cmp	r3, #0
   17c62:	d009      	beq.n	17c78 <_ZN11StrategieV26lookAtE8Positionf+0x34>
   17c64:	4b18      	ldr	r3, [pc, #96]	(17cc8 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   17c66:	681b      	ldr	r3, [r3, #0]
   17c68:	681b      	ldr	r3, [r3, #0]
   17c6a:	f103 0304 	add.w	r3, r3, #4	; 0x4
   17c6e:	681a      	ldr	r2, [r3, #0]
   17c70:	4b15      	ldr	r3, [pc, #84]	(17cc8 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   17c72:	681b      	ldr	r3, [r3, #0]
   17c74:	4618      	mov	r0, r3
   17c76:	4790      	blx	r2
    currentCommand = new CommandTournerVers(pos, maxSpeed); // create the command
   17c78:	f04f 0020 	mov.w	r0, #32	; 0x20
   17c7c:	f7f6 ff54 	bl	eb28 <_Znwj>
   17c80:	4603      	mov	r3, r0
   17c82:	607b      	str	r3, [r7, #4]
   17c84:	687b      	ldr	r3, [r7, #4]
   17c86:	2b00      	cmp	r3, #0
   17c88:	d00a      	beq.n	17ca0 <_ZN11StrategieV26lookAtE8Positionf+0x5c>
   17c8a:	6878      	ldr	r0, [r7, #4]
   17c8c:	f107 0310 	add.w	r3, r7, #16	; 0x10
   17c90:	e893 0006 	ldmia.w	r3, {r1, r2}
   17c94:	68fb      	ldr	r3, [r7, #12]
   17c96:	f7f1 f9e3 	bl	9060 <_ZN18CommandTournerVersC1E8Positionf>
   17c9a:	687b      	ldr	r3, [r7, #4]
   17c9c:	60bb      	str	r3, [r7, #8]
   17c9e:	e001      	b.n	17ca4 <_ZN11StrategieV26lookAtE8Positionf+0x60>
   17ca0:	687b      	ldr	r3, [r7, #4]
   17ca2:	60bb      	str	r3, [r7, #8]
   17ca4:	68ba      	ldr	r2, [r7, #8]
   17ca6:	4b08      	ldr	r3, [pc, #32]	(17cc8 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   17ca8:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
   17caa:	4b08      	ldr	r3, [pc, #32]	(17ccc <_ZN11StrategieV26lookAtE8Positionf+0x88>)
   17cac:	681a      	ldr	r2, [r3, #0]
   17cae:	4b06      	ldr	r3, [pc, #24]	(17cc8 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   17cb0:	681b      	ldr	r3, [r3, #0]
   17cb2:	4610      	mov	r0, r2
   17cb4:	4619      	mov	r1, r3
   17cb6:	f7ef fa7b 	bl	71b0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    StrategieV2::emptySharpsToCheck();
   17cba:	f7ff fe6b 	bl	17994 <_ZN11StrategieV218emptySharpsToCheckEv>
}
   17cbe:	f107 0718 	add.w	r7, r7, #24	; 0x18
   17cc2:	46bd      	mov	sp, r7
   17cc4:	bd80      	pop	{r7, pc}
   17cc6:	46c0      	nop			(mov r8, r8)
   17cc8:	200005ac 	.word	0x200005ac
   17ccc:	20000564 	.word	0x20000564

00017cd0 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf>:
        //StrategieV2::sharpsToCheck[SharpSensor::LEFT_FRONT] = true;
        //StrategieV2::sharpsToCheck[SharpSensor::RIGHT_FRONT] = true;
    }*/
#endif
}
void StrategieV2::setCurrentGoal(Position goal, Position center, float vitesse, bool goBack, Angle precisionAngle)
   17cd0:	b580      	push	{r7, lr}
   17cd2:	b08a      	sub	sp, #40
   17cd4:	af04      	add	r7, sp, #16
   17cd6:	f107 0c10 	add.w	ip, r7, #16	; 0x10
   17cda:	e88c 0003 	stmia.w	ip, {r0, r1}
   17cde:	f107 0108 	add.w	r1, r7, #8	; 0x8
   17ce2:	e881 000c 	stmia.w	r1, {r2, r3}
{
    if (currentCommand != NULL)
   17ce6:	4b20      	ldr	r3, [pc, #128]	(17d68 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   17ce8:	681b      	ldr	r3, [r3, #0]
   17cea:	2b00      	cmp	r3, #0
   17cec:	d00d      	beq.n	17d0a <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x3a>
        delete currentCommand;
   17cee:	4b1e      	ldr	r3, [pc, #120]	(17d68 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   17cf0:	681b      	ldr	r3, [r3, #0]
   17cf2:	2b00      	cmp	r3, #0
   17cf4:	d009      	beq.n	17d0a <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x3a>
   17cf6:	4b1c      	ldr	r3, [pc, #112]	(17d68 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   17cf8:	681b      	ldr	r3, [r3, #0]
   17cfa:	681b      	ldr	r3, [r3, #0]
   17cfc:	f103 0304 	add.w	r3, r3, #4	; 0x4
   17d00:	681a      	ldr	r2, [r3, #0]
   17d02:	4b19      	ldr	r3, [pc, #100]	(17d68 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   17d04:	681b      	ldr	r3, [r3, #0]
   17d06:	4618      	mov	r0, r3
   17d08:	4790      	blx	r2
    currentCommand = new CommandAllerEnArcA(goal, center, vitesse*5, goBack);
   17d0a:	f04f 0030 	mov.w	r0, #48	; 0x30
   17d0e:	f7f6 ff0b 	bl	eb28 <_Znwj>
   17d12:	4603      	mov	r3, r0
   17d14:	603b      	str	r3, [r7, #0]
   17d16:	683b      	ldr	r3, [r7, #0]
   17d18:	2b00      	cmp	r3, #0
   17d1a:	d014      	beq.n	17d46 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x76>
   17d1c:	6a38      	ldr	r0, [r7, #32]
   17d1e:	4913      	ldr	r1, [pc, #76]	(17d6c <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x9c>)
   17d20:	f005 f8de 	bl	1cee0 <__aeabi_fmul>
   17d24:	4603      	mov	r3, r0
   17d26:	9301      	str	r3, [sp, #4]
   17d28:	f897 3024 	ldrb.w	r3, [r7, #36]
   17d2c:	9302      	str	r3, [sp, #8]
   17d2e:	68fb      	ldr	r3, [r7, #12]
   17d30:	9300      	str	r3, [sp, #0]
   17d32:	68bb      	ldr	r3, [r7, #8]
   17d34:	6838      	ldr	r0, [r7, #0]
   17d36:	f107 0210 	add.w	r2, r7, #16	; 0x10
   17d3a:	ca06      	ldmia	r2!, {r1, r2}
   17d3c:	f7f1 fac0 	bl	92c0 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb>
   17d40:	683b      	ldr	r3, [r7, #0]
   17d42:	607b      	str	r3, [r7, #4]
   17d44:	e001      	b.n	17d4a <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x7a>
   17d46:	683b      	ldr	r3, [r7, #0]
   17d48:	607b      	str	r3, [r7, #4]
   17d4a:	687a      	ldr	r2, [r7, #4]
   17d4c:	4b06      	ldr	r3, [pc, #24]	(17d68 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   17d4e:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand);
   17d50:	4b07      	ldr	r3, [pc, #28]	(17d70 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0xa0>)
   17d52:	681a      	ldr	r2, [r3, #0]
   17d54:	4b04      	ldr	r3, [pc, #16]	(17d68 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   17d56:	681b      	ldr	r3, [r3, #0]
   17d58:	4610      	mov	r0, r2
   17d5a:	4619      	mov	r1, r3
   17d5c:	f7ef fa28 	bl	71b0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
}
   17d60:	f107 0718 	add.w	r7, r7, #24	; 0x18
   17d64:	46bd      	mov	sp, r7
   17d66:	bd80      	pop	{r7, pc}
   17d68:	200005ac 	.word	0x200005ac
   17d6c:	40a00000 	.word	0x40a00000
   17d70:	20000564 	.word	0x20000564

00017d74 <_ZN11StrategieV214setCurrentGoalE8Positionbff>:
//    updateCount ++;
    //eteindreLED2();
    //eteindreLED();
}

void StrategieV2::setCurrentGoal(Position goal, bool goBack, float maxSpeed, Angle precisionAngle)
   17d74:	b580      	push	{r7, lr}
   17d76:	b08a      	sub	sp, #40
   17d78:	af04      	add	r7, sp, #16
   17d7a:	f107 0c10 	add.w	ip, r7, #16	; 0x10
   17d7e:	e88c 0003 	stmia.w	ip, {r0, r1}
   17d82:	60bb      	str	r3, [r7, #8]
   17d84:	4613      	mov	r3, r2
   17d86:	73fb      	strb	r3, [r7, #15]
{
    if (currentCommand != NULL)
   17d88:	4b20      	ldr	r3, [pc, #128]	(17e0c <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   17d8a:	681b      	ldr	r3, [r3, #0]
   17d8c:	2b00      	cmp	r3, #0
   17d8e:	d00d      	beq.n	17dac <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x38>
        delete currentCommand;
   17d90:	4b1e      	ldr	r3, [pc, #120]	(17e0c <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   17d92:	681b      	ldr	r3, [r3, #0]
   17d94:	2b00      	cmp	r3, #0
   17d96:	d009      	beq.n	17dac <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x38>
   17d98:	4b1c      	ldr	r3, [pc, #112]	(17e0c <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   17d9a:	681b      	ldr	r3, [r3, #0]
   17d9c:	681b      	ldr	r3, [r3, #0]
   17d9e:	f103 0304 	add.w	r3, r3, #4	; 0x4
   17da2:	681a      	ldr	r2, [r3, #0]
   17da4:	4b19      	ldr	r3, [pc, #100]	(17e0c <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   17da6:	681b      	ldr	r3, [r3, #0]
   17da8:	4618      	mov	r0, r3
   17daa:	4790      	blx	r2
//    if (actionsCount == 0)
//        currentCommand = new CommandAllerA(goal, goBack, maxSpeed/2);
//    else
    currentCommand = new CommandAllerA(goal, goBack, maxSpeed, 0.0f, precisionAngle);
   17dac:	f04f 0030 	mov.w	r0, #48	; 0x30
   17db0:	f7f6 feba 	bl	eb28 <_Znwj>
   17db4:	4603      	mov	r3, r0
   17db6:	603b      	str	r3, [r7, #0]
   17db8:	683b      	ldr	r3, [r7, #0]
   17dba:	2b00      	cmp	r3, #0
   17dbc:	d012      	beq.n	17de4 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x70>
   17dbe:	f897 c00f 	ldrb.w	ip, [r7, #15]
   17dc2:	68bb      	ldr	r3, [r7, #8]
   17dc4:	9300      	str	r3, [sp, #0]
   17dc6:	4b12      	ldr	r3, [pc, #72]	(17e10 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x9c>)
   17dc8:	9301      	str	r3, [sp, #4]
   17dca:	6a3b      	ldr	r3, [r7, #32]
   17dcc:	9302      	str	r3, [sp, #8]
   17dce:	6838      	ldr	r0, [r7, #0]
   17dd0:	f107 0310 	add.w	r3, r7, #16	; 0x10
   17dd4:	e893 0006 	ldmia.w	r3, {r1, r2}
   17dd8:	4663      	mov	r3, ip
   17dda:	f7f1 f9c1 	bl	9160 <_ZN13CommandAllerAC1E8Positionbfff>
   17dde:	683b      	ldr	r3, [r7, #0]
   17de0:	607b      	str	r3, [r7, #4]
   17de2:	e001      	b.n	17de8 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x74>
   17de4:	683b      	ldr	r3, [r7, #0]
   17de6:	607b      	str	r3, [r7, #4]
   17de8:	687a      	ldr	r2, [r7, #4]
   17dea:	4b08      	ldr	r3, [pc, #32]	(17e0c <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   17dec:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand);
   17dee:	4b09      	ldr	r3, [pc, #36]	(17e14 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0xa0>)
   17df0:	681a      	ldr	r2, [r3, #0]
   17df2:	4b06      	ldr	r3, [pc, #24]	(17e0c <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   17df4:	681b      	ldr	r3, [r3, #0]
   17df6:	4610      	mov	r0, r2
   17df8:	4619      	mov	r1, r3
   17dfa:	f7ef f9d9 	bl	71b0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    StrategieV2::emptySharpsToCheck();
   17dfe:	f7ff fdc9 	bl	17994 <_ZN11StrategieV218emptySharpsToCheckEv>
        //StrategieV2::sharpsToCheck[SharpSensor::FRONT_RIGHT] = true;
        //StrategieV2::sharpsToCheck[SharpSensor::LEFT_FRONT] = true;
        //StrategieV2::sharpsToCheck[SharpSensor::RIGHT_FRONT] = true;
    }*/
#endif
}
   17e02:	f107 0718 	add.w	r7, r7, #24	; 0x18
   17e06:	46bd      	mov	sp, r7
   17e08:	bd80      	pop	{r7, pc}
   17e0a:	46c0      	nop			(mov r8, r8)
   17e0c:	200005ac 	.word	0x200005ac
   17e10:	00000000 	.word	0x00000000
   17e14:	20000564 	.word	0x20000564

00017e18 <_ZN11StrategieV26updateEv>:
{
    return updateCount * 5;
}


void StrategieV2::update()
   17e18:	b590      	push	{r4, r7, lr}
   17e1a:	b0af      	sub	sp, #188
   17e1c:	af02      	add	r7, sp, #8

        resultUpdate = tourelle->update();

    */

    if (StrategieV2::strategie == NULL)
   17e1e:	f8df 35a0 	ldr.w	r3, [pc, #1440]	; 183c0 <_ZN11StrategieV26updateEv+0x5a8>
   17e22:	681b      	ldr	r3, [r3, #0]
   17e24:	2b00      	cmp	r3, #0
   17e26:	f000 82c7 	beq.w	183b8 <_ZN11StrategieV26updateEv+0x5a0>
        return;
    updateCount++;
   17e2a:	f8df 3598 	ldr.w	r3, [pc, #1432]	; 183c4 <_ZN11StrategieV26updateEv+0x5ac>
   17e2e:	681b      	ldr	r3, [r3, #0]
   17e30:	f103 0201 	add.w	r2, r3, #1	; 0x1
   17e34:	f8df 358c 	ldr.w	r3, [pc, #1420]	; 183c4 <_ZN11StrategieV26updateEv+0x5ac>
   17e38:	601a      	str	r2, [r3, #0]

    currentAction->updateTime(90*1000-updateCount*5);
   17e3a:	f8df 358c 	ldr.w	r3, [pc, #1420]	; 183c8 <_ZN11StrategieV26updateEv+0x5b0>
   17e3e:	6819      	ldr	r1, [r3, #0]
   17e40:	f8df 3580 	ldr.w	r3, [pc, #1408]	; 183c4 <_ZN11StrategieV26updateEv+0x5ac>
   17e44:	681a      	ldr	r2, [r3, #0]
   17e46:	4613      	mov	r3, r2
   17e48:	ea4f 0383 	mov.w	r3, r3, lsl #2
   17e4c:	4413      	add	r3, r2
   17e4e:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   17e52:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
   17e56:	f503 7364 	add.w	r3, r3, #912	; 0x390
   17e5a:	4608      	mov	r0, r1
   17e5c:	4619      	mov	r1, r3
   17e5e:	f7fe fd5b 	bl	16918 <_ZN17MediumLevelAction10updateTimeEi>
//
//    //On donne l'ordre de ralentir, si besoin
//    currentCommand->limitSpeed(hysteresisTourelle);

#endif
    if (updateCount < 0)
   17e62:	f8df 3560 	ldr.w	r3, [pc, #1376]	; 183c4 <_ZN11StrategieV26updateEv+0x5ac>
   17e66:	681b      	ldr	r3, [r3, #0]
   17e68:	2b00      	cmp	r3, #0
   17e6a:	da04      	bge.n	17e76 <_ZN11StrategieV26updateEv+0x5e>
    {
        updateCount = 50000;
   17e6c:	f8df 2554 	ldr.w	r2, [pc, #1364]	; 183c4 <_ZN11StrategieV26updateEv+0x5ac>
   17e70:	f24c 3350 	movw	r3, #50000	; 0xc350
   17e74:	6013      	str	r3, [r2, #0]

    if (updateCount <= 18000)
    {

    }
    if (updateCount >= 18000)
   17e76:	f8df 354c 	ldr.w	r3, [pc, #1356]	; 183c4 <_ZN11StrategieV26updateEv+0x5ac>
   17e7a:	681a      	ldr	r2, [r3, #0]
   17e7c:	f244 634f 	movw	r3, #17999	; 0x464f
   17e80:	429a      	cmp	r2, r3
   17e82:	dd08      	ble.n	17e96 <_ZN11StrategieV26updateEv+0x7e>
    {
        Asservissement::asservissement->setCommandSpeeds(NULL);
   17e84:	f8df 3544 	ldr.w	r3, [pc, #1348]	; 183cc <_ZN11StrategieV26updateEv+0x5b4>
   17e88:	681b      	ldr	r3, [r3, #0]
   17e8a:	4618      	mov	r0, r3
   17e8c:	f04f 0100 	mov.w	r1, #0	; 0x0
   17e90:	f7ef f98e 	bl	71b0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
   17e94:	e290      	b.n	183b8 <_ZN11StrategieV26updateEv+0x5a0>
    //if (updateCount > 6000 && updateCount < 10000) // attendre 15 secondes
    /*{
        Asservissement::asservissement->setCommandSpeeds(NULL);
        return;
    }*/
    if (actionsCount >= 1)
   17e96:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 183d0 <_ZN11StrategieV26updateEv+0x5b8>
   17e9a:	681b      	ldr	r3, [r3, #0]
   17e9c:	2b00      	cmp	r3, #0
   17e9e:	dd05      	ble.n	17eac <_ZN11StrategieV26updateEv+0x94>
    {
        updateCount = 20000;
   17ea0:	f8df 2520 	ldr.w	r2, [pc, #1312]	; 183c4 <_ZN11StrategieV26updateEv+0x5ac>
   17ea4:	f644 6320 	movw	r3, #20000	; 0x4e20
   17ea8:	6013      	str	r3, [r2, #0]
   17eaa:	e285      	b.n	183b8 <_ZN11StrategieV26updateEv+0x5a0>
        enableSharp(SharpSensor::BACK_MIDDLE);
        enableSharp(SharpSensor::BACK_RIGHT);
        */
    //std::cout << "update" << std::endl;
    // check sensors:
    AnalogSensor::startConversion();
   17eac:	f7f2 ff0e 	bl	accc <_ZN12AnalogSensor15startConversionEv>

    //

    //allumerLED2();
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++) // update tous les sharps
   17eb0:	f04f 0300 	mov.w	r3, #0	; 0x0
   17eb4:	f8c7 30a0 	str.w	r3, [r7, #160]
   17eb8:	e011      	b.n	17ede <_ZN11StrategieV26updateEv+0xc6>
    {
        sharps[i]->updateValue();
   17eba:	f8df 3518 	ldr.w	r3, [pc, #1304]	; 183d4 <_ZN11StrategieV26updateEv+0x5bc>
   17ebe:	681a      	ldr	r2, [r3, #0]
   17ec0:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   17ec4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   17ec8:	4413      	add	r3, r2
   17eca:	681b      	ldr	r3, [r3, #0]
   17ecc:	4618      	mov	r0, r3
   17ece:	f7f5 faef 	bl	d4b0 <_ZN11SharpSensor11updateValueEv>
    AnalogSensor::startConversion();

    //

    //allumerLED2();
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++) // update tous les sharps
   17ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   17ed6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   17eda:	f8c7 30a0 	str.w	r3, [r7, #160]
   17ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   17ee2:	2b07      	cmp	r3, #7
   17ee4:	dde9      	ble.n	17eba <_ZN11StrategieV26updateEv+0xa2>
    {
        sharps[i]->updateValue();
    }
    //sharps[9]->updateValue();
    bool allume = false;
   17ee6:	f04f 0300 	mov.w	r3, #0	; 0x0
   17eea:	f887 309f 	strb.w	r3, [r7, #159]
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   17eee:	f04f 0300 	mov.w	r3, #0	; 0x0
   17ef2:	f8c7 30a4 	str.w	r3, [r7, #164]
   17ef6:	e038      	b.n	17f6a <_ZN11StrategieV26updateEv+0x152>
    {
        if (sharpsToCheck[i] && !tourneSurSoiMeme)
   17ef8:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   17efc:	f8df 24d8 	ldr.w	r2, [pc, #1240]	; 183d8 <_ZN11StrategieV26updateEv+0x5c0>
   17f00:	5cd3      	ldrb	r3, [r2, r3]
   17f02:	2b00      	cmp	r3, #0
   17f04:	d02b      	beq.n	17f5e <_ZN11StrategieV26updateEv+0x146>
   17f06:	f8df 34d4 	ldr.w	r3, [pc, #1236]	; 183dc <_ZN11StrategieV26updateEv+0x5c4>
   17f0a:	781b      	ldrb	r3, [r3, #0]
   17f0c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   17f10:	b2db      	uxtb	r3, r3
   17f12:	2b00      	cmp	r3, #0
   17f14:	d023      	beq.n	17f5e <_ZN11StrategieV26updateEv+0x146>
        {
            if (sharps[i]->getValue().b)
   17f16:	f8df 34bc 	ldr.w	r3, [pc, #1212]	; 183d4 <_ZN11StrategieV26updateEv+0x5bc>
   17f1a:	681a      	ldr	r2, [r3, #0]
   17f1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   17f20:	ea4f 0383 	mov.w	r3, r3, lsl #2
   17f24:	4413      	add	r3, r2
   17f26:	681b      	ldr	r3, [r3, #0]
   17f28:	681b      	ldr	r3, [r3, #0]
   17f2a:	f103 0308 	add.w	r3, r3, #8	; 0x8
   17f2e:	f8d3 c000 	ldr.w	ip, [r3]
   17f32:	f8df 34a0 	ldr.w	r3, [pc, #1184]	; 183d4 <_ZN11StrategieV26updateEv+0x5bc>
   17f36:	681a      	ldr	r2, [r3, #0]
   17f38:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   17f3c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   17f40:	4413      	add	r3, r2
   17f42:	681a      	ldr	r2, [r3, #0]
   17f44:	f107 0360 	add.w	r3, r7, #96	; 0x60
   17f48:	4618      	mov	r0, r3
   17f4a:	4611      	mov	r1, r2
   17f4c:	47e0      	blx	ip
   17f4e:	f897 3068 	ldrb.w	r3, [r7, #104]
   17f52:	2b00      	cmp	r3, #0
   17f54:	d003      	beq.n	17f5e <_ZN11StrategieV26updateEv+0x146>
            {
                allume = true;
   17f56:	f04f 0301 	mov.w	r3, #1	; 0x1
   17f5a:	f887 309f 	strb.w	r3, [r7, #159]
    {
        sharps[i]->updateValue();
    }
    //sharps[9]->updateValue();
    bool allume = false;
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   17f5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   17f62:	f103 0301 	add.w	r3, r3, #1	; 0x1
   17f66:	f8c7 30a4 	str.w	r3, [r7, #164]
   17f6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   17f6e:	2b07      	cmp	r3, #7
   17f70:	ddc2      	ble.n	17ef8 <_ZN11StrategieV26updateEv+0xe0>
                allume = true;
            }
        }
    }

    float values[10] = {0};
   17f72:	f107 011c 	add.w	r1, r7, #28	; 0x1c
   17f76:	60b9      	str	r1, [r7, #8]
   17f78:	f04f 0300 	mov.w	r3, #0	; 0x0
   17f7c:	68ba      	ldr	r2, [r7, #8]
   17f7e:	6013      	str	r3, [r2, #0]
   17f80:	68bb      	ldr	r3, [r7, #8]
   17f82:	f103 0304 	add.w	r3, r3, #4	; 0x4
   17f86:	60bb      	str	r3, [r7, #8]
   17f88:	f04f 0300 	mov.w	r3, #0	; 0x0
   17f8c:	68b9      	ldr	r1, [r7, #8]
   17f8e:	600b      	str	r3, [r1, #0]
   17f90:	68ba      	ldr	r2, [r7, #8]
   17f92:	f102 0204 	add.w	r2, r2, #4	; 0x4
   17f96:	60ba      	str	r2, [r7, #8]
   17f98:	f04f 0300 	mov.w	r3, #0	; 0x0
   17f9c:	68b9      	ldr	r1, [r7, #8]
   17f9e:	600b      	str	r3, [r1, #0]
   17fa0:	68ba      	ldr	r2, [r7, #8]
   17fa2:	f102 0204 	add.w	r2, r2, #4	; 0x4
   17fa6:	60ba      	str	r2, [r7, #8]
   17fa8:	f04f 0300 	mov.w	r3, #0	; 0x0
   17fac:	68b9      	ldr	r1, [r7, #8]
   17fae:	600b      	str	r3, [r1, #0]
   17fb0:	68ba      	ldr	r2, [r7, #8]
   17fb2:	f102 0204 	add.w	r2, r2, #4	; 0x4
   17fb6:	60ba      	str	r2, [r7, #8]
   17fb8:	f04f 0300 	mov.w	r3, #0	; 0x0
   17fbc:	68b9      	ldr	r1, [r7, #8]
   17fbe:	600b      	str	r3, [r1, #0]
   17fc0:	68ba      	ldr	r2, [r7, #8]
   17fc2:	f102 0204 	add.w	r2, r2, #4	; 0x4
   17fc6:	60ba      	str	r2, [r7, #8]
   17fc8:	f04f 0300 	mov.w	r3, #0	; 0x0
   17fcc:	68b9      	ldr	r1, [r7, #8]
   17fce:	600b      	str	r3, [r1, #0]
   17fd0:	68ba      	ldr	r2, [r7, #8]
   17fd2:	f102 0204 	add.w	r2, r2, #4	; 0x4
   17fd6:	60ba      	str	r2, [r7, #8]
   17fd8:	f04f 0300 	mov.w	r3, #0	; 0x0
   17fdc:	68b9      	ldr	r1, [r7, #8]
   17fde:	600b      	str	r3, [r1, #0]
   17fe0:	68ba      	ldr	r2, [r7, #8]
   17fe2:	f102 0204 	add.w	r2, r2, #4	; 0x4
   17fe6:	60ba      	str	r2, [r7, #8]
   17fe8:	f04f 0300 	mov.w	r3, #0	; 0x0
   17fec:	68b9      	ldr	r1, [r7, #8]
   17fee:	600b      	str	r3, [r1, #0]
   17ff0:	68ba      	ldr	r2, [r7, #8]
   17ff2:	f102 0204 	add.w	r2, r2, #4	; 0x4
   17ff6:	60ba      	str	r2, [r7, #8]
   17ff8:	f04f 0300 	mov.w	r3, #0	; 0x0
   17ffc:	68b9      	ldr	r1, [r7, #8]
   17ffe:	600b      	str	r3, [r1, #0]
   18000:	68ba      	ldr	r2, [r7, #8]
   18002:	f102 0204 	add.w	r2, r2, #4	; 0x4
   18006:	60ba      	str	r2, [r7, #8]
   18008:	f04f 0300 	mov.w	r3, #0	; 0x0
   1800c:	68b9      	ldr	r1, [r7, #8]
   1800e:	600b      	str	r3, [r1, #0]
   18010:	68ba      	ldr	r2, [r7, #8]
   18012:	f102 0204 	add.w	r2, r2, #4	; 0x4
    bool detected[10] = {false};
   18016:	f107 0356 	add.w	r3, r7, #86	; 0x56
   1801a:	607b      	str	r3, [r7, #4]
   1801c:	f04f 0300 	mov.w	r3, #0	; 0x0
   18020:	6879      	ldr	r1, [r7, #4]
   18022:	800b      	strh	r3, [r1, #0]
   18024:	687a      	ldr	r2, [r7, #4]
   18026:	f102 0202 	add.w	r2, r2, #2	; 0x2
   1802a:	607a      	str	r2, [r7, #4]
   1802c:	f04f 0300 	mov.w	r3, #0	; 0x0
   18030:	6879      	ldr	r1, [r7, #4]
   18032:	800b      	strh	r3, [r1, #0]
   18034:	687a      	ldr	r2, [r7, #4]
   18036:	f102 0202 	add.w	r2, r2, #2	; 0x2
   1803a:	607a      	str	r2, [r7, #4]
   1803c:	f04f 0300 	mov.w	r3, #0	; 0x0
   18040:	6879      	ldr	r1, [r7, #4]
   18042:	800b      	strh	r3, [r1, #0]
   18044:	687a      	ldr	r2, [r7, #4]
   18046:	f102 0202 	add.w	r2, r2, #2	; 0x2
   1804a:	607a      	str	r2, [r7, #4]
   1804c:	f04f 0300 	mov.w	r3, #0	; 0x0
   18050:	6879      	ldr	r1, [r7, #4]
   18052:	800b      	strh	r3, [r1, #0]
   18054:	687a      	ldr	r2, [r7, #4]
   18056:	f102 0202 	add.w	r2, r2, #2	; 0x2
   1805a:	607a      	str	r2, [r7, #4]
   1805c:	f04f 0300 	mov.w	r3, #0	; 0x0
   18060:	6879      	ldr	r1, [r7, #4]
   18062:	800b      	strh	r3, [r1, #0]
   18064:	687a      	ldr	r2, [r7, #4]
   18066:	f102 0202 	add.w	r2, r2, #2	; 0x2

    //allumerLED2();
    for (int i = 0; i < 8; i++)
   1806a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1806e:	f8c7 30a8 	str.w	r3, [r7, #168]
   18072:	e04d      	b.n	18110 <_ZN11StrategieV26updateEv+0x2f8>
    {
        values[i] = sharps[i]->getValue().f;
   18074:	f8d7 40a8 	ldr.w	r4, [r7, #168]
   18078:	4bd6      	ldr	r3, [pc, #856]	(183d4 <_ZN11StrategieV26updateEv+0x5bc>)
   1807a:	681a      	ldr	r2, [r3, #0]
   1807c:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   18080:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18084:	4413      	add	r3, r2
   18086:	681b      	ldr	r3, [r3, #0]
   18088:	681b      	ldr	r3, [r3, #0]
   1808a:	f103 0308 	add.w	r3, r3, #8	; 0x8
   1808e:	f8d3 c000 	ldr.w	ip, [r3]
   18092:	4bd0      	ldr	r3, [pc, #832]	(183d4 <_ZN11StrategieV26updateEv+0x5bc>)
   18094:	681a      	ldr	r2, [r3, #0]
   18096:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   1809a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1809e:	4413      	add	r3, r2
   180a0:	681a      	ldr	r2, [r3, #0]
   180a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   180a6:	4618      	mov	r0, r3
   180a8:	4611      	mov	r1, r2
   180aa:	47e0      	blx	ip
   180ac:	6f3a      	ldr	r2, [r7, #112]
   180ae:	ea4f 0384 	mov.w	r3, r4, lsl #2
   180b2:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
   180b6:	440b      	add	r3, r1
   180b8:	f843 2c94 	str.w	r2, [r3, #-148]
        detected[i] = sharps[i]->getValue().b;
   180bc:	f8d7 40a8 	ldr.w	r4, [r7, #168]
   180c0:	4bc4      	ldr	r3, [pc, #784]	(183d4 <_ZN11StrategieV26updateEv+0x5bc>)
   180c2:	681a      	ldr	r2, [r3, #0]
   180c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   180c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   180cc:	4413      	add	r3, r2
   180ce:	681b      	ldr	r3, [r3, #0]
   180d0:	681b      	ldr	r3, [r3, #0]
   180d2:	f103 0308 	add.w	r3, r3, #8	; 0x8
   180d6:	f8d3 c000 	ldr.w	ip, [r3]
   180da:	4bbe      	ldr	r3, [pc, #760]	(183d4 <_ZN11StrategieV26updateEv+0x5bc>)
   180dc:	681a      	ldr	r2, [r3, #0]
   180de:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   180e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
   180e6:	4413      	add	r3, r2
   180e8:	681a      	ldr	r2, [r3, #0]
   180ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
   180ee:	4618      	mov	r0, r3
   180f0:	4611      	mov	r1, r2
   180f2:	47e0      	blx	ip
   180f4:	f897 3080 	ldrb.w	r3, [r7, #128]
   180f8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
   180fc:	eb01 0204 	add.w	r2, r1, r4
   18100:	f802 3c5a 	strb.w	r3, [r2, #-90]

    float values[10] = {0};
    bool detected[10] = {false};

    //allumerLED2();
    for (int i = 0; i < 8; i++)
   18104:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   18108:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1810c:	f8c7 30a8 	str.w	r3, [r7, #168]
   18110:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   18114:	2b07      	cmp	r3, #7
   18116:	ddad      	ble.n	18074 <_ZN11StrategieV26updateEv+0x25c>
        updateCount = 10;
        Led::setOff(1);
    }
    else
    {*/
        Led::setOn(1);
   18118:	f04f 0001 	mov.w	r0, #1	; 0x1
   1811c:	f7f4 f9be 	bl	c49c <_ZN3Led5setOnEi>

        if (allume)
   18120:	f897 309f 	ldrb.w	r3, [r7, #159]
   18124:	2b00      	cmp	r3, #0
   18126:	d00e      	beq.n	18146 <_ZN11StrategieV26updateEv+0x32e>
        {
            Asservissement::asservissement->setCommandSpeeds(NULL);
   18128:	4ba8      	ldr	r3, [pc, #672]	(183cc <_ZN11StrategieV26updateEv+0x5b4>)
   1812a:	681b      	ldr	r3, [r3, #0]
   1812c:	4618      	mov	r0, r3
   1812e:	f04f 0100 	mov.w	r1, #0	; 0x0
   18132:	f7ef f83d 	bl	71b0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
            Asservissement::asservissement->update();
   18136:	4ba5      	ldr	r3, [pc, #660]	(183cc <_ZN11StrategieV26updateEv+0x5b4>)
   18138:	681b      	ldr	r3, [r3, #0]
   1813a:	4618      	mov	r0, r3
   1813c:	f7ef fbc4 	bl	78c8 <_ZN14Asservissement6updateEv>
            allumerLED2();
   18140:	f7f4 f9f8 	bl	c534 <_Z11allumerLED2v>
   18144:	e001      	b.n	1814a <_ZN11StrategieV26updateEv+0x332>
        }
        else
        {
            eteindreLED2();
   18146:	f7f4 f999 	bl	c47c <_Z12eteindreLED2v>

        //allumerLED2();

        //allume = true;//(updateCount%30==0);
        //allume = false;
        if(timeToRestart)
   1814a:	4ba5      	ldr	r3, [pc, #660]	(183e0 <_ZN11StrategieV26updateEv+0x5c8>)
   1814c:	681b      	ldr	r3, [r3, #0]
   1814e:	2b00      	cmp	r3, #0
   18150:	d005      	beq.n	1815e <_ZN11StrategieV26updateEv+0x346>
        {
            timeToRestart--;
   18152:	4ba3      	ldr	r3, [pc, #652]	(183e0 <_ZN11StrategieV26updateEv+0x5c8>)
   18154:	681b      	ldr	r3, [r3, #0]
   18156:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   1815a:	4ba1      	ldr	r3, [pc, #644]	(183e0 <_ZN11StrategieV26updateEv+0x5c8>)
   1815c:	601a      	str	r2, [r3, #0]
        }
        if(timeToRestart == 1)//Dernière boucle d'évitement avant de repartir
   1815e:	4ba0      	ldr	r3, [pc, #640]	(183e0 <_ZN11StrategieV26updateEv+0x5c8>)
   18160:	681b      	ldr	r3, [r3, #0]
   18162:	2b01      	cmp	r3, #1
   18164:	d169      	bne.n	1823a <_ZN11StrategieV26updateEv+0x422>
        {
            if (currentAction)
   18166:	4b98      	ldr	r3, [pc, #608]	(183c8 <_ZN11StrategieV26updateEv+0x5b0>)
   18168:	681b      	ldr	r3, [r3, #0]
   1816a:	2b00      	cmp	r3, #0
   1816c:	d05e      	beq.n	1822c <_ZN11StrategieV26updateEv+0x414>
            {
                //Pour changer de trajectoire, décommenter les lignes suivantes
                currentAction->collisionAvoided();
   1816e:	4b96      	ldr	r3, [pc, #600]	(183c8 <_ZN11StrategieV26updateEv+0x5b0>)
   18170:	681b      	ldr	r3, [r3, #0]
   18172:	681b      	ldr	r3, [r3, #0]
   18174:	f103 0310 	add.w	r3, r3, #16	; 0x10
   18178:	681a      	ldr	r2, [r3, #0]
   1817a:	4b93      	ldr	r3, [pc, #588]	(183c8 <_ZN11StrategieV26updateEv+0x5b0>)
   1817c:	681b      	ldr	r3, [r3, #0]
   1817e:	4618      	mov	r0, r3
   18180:	4790      	blx	r2
                actionsToDo[actionsCount]->collisionAvoided();
   18182:	4b93      	ldr	r3, [pc, #588]	(183d0 <_ZN11StrategieV26updateEv+0x5b8>)
   18184:	681a      	ldr	r2, [r3, #0]
   18186:	4b97      	ldr	r3, [pc, #604]	(183e4 <_ZN11StrategieV26updateEv+0x5cc>)
   18188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1818c:	681b      	ldr	r3, [r3, #0]
   1818e:	f103 0310 	add.w	r3, r3, #16	; 0x10
   18192:	6819      	ldr	r1, [r3, #0]
   18194:	4b8e      	ldr	r3, [pc, #568]	(183d0 <_ZN11StrategieV26updateEv+0x5b8>)
   18196:	681a      	ldr	r2, [r3, #0]
   18198:	4b92      	ldr	r3, [pc, #584]	(183e4 <_ZN11StrategieV26updateEv+0x5cc>)
   1819a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1819e:	4618      	mov	r0, r3
   181a0:	4788      	blx	r1
                //currentCommand->collisionAvoided();
                currentAction->update();
   181a2:	4b89      	ldr	r3, [pc, #548]	(183c8 <_ZN11StrategieV26updateEv+0x5b0>)
   181a4:	681b      	ldr	r3, [r3, #0]
   181a6:	681b      	ldr	r3, [r3, #0]
   181a8:	f103 0308 	add.w	r3, r3, #8	; 0x8
   181ac:	681a      	ldr	r2, [r3, #0]
   181ae:	4b86      	ldr	r3, [pc, #536]	(183c8 <_ZN11StrategieV26updateEv+0x5b0>)
   181b0:	681b      	ldr	r3, [r3, #0]
   181b2:	4618      	mov	r0, r3
   181b4:	4790      	blx	r2
                Position pos = Odometrie::odometrie->getPos().getPosition();
   181b6:	4b8c      	ldr	r3, [pc, #560]	(183e8 <_ZN11StrategieV26updateEv+0x5d0>)
   181b8:	681a      	ldr	r2, [r3, #0]
   181ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
   181be:	4618      	mov	r0, r3
   181c0:	4611      	mov	r1, r2
   181c2:	f7f1 fe19 	bl	9df8 <_ZNK9Odometrie6getPosEv>
   181c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   181ca:	f107 0284 	add.w	r2, r7, #132	; 0x84
   181ce:	4618      	mov	r0, r3
   181d0:	4611      	mov	r1, r2
   181d2:	f7f7 f84b 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
                addTemporaryAction(new ActionGoTo(pos, true));
   181d6:	f04f 0030 	mov.w	r0, #48	; 0x30
   181da:	f7f6 fca5 	bl	eb28 <_Znwj>
   181de:	4603      	mov	r3, r0
   181e0:	60fb      	str	r3, [r7, #12]
   181e2:	68fa      	ldr	r2, [r7, #12]
   181e4:	2a00      	cmp	r2, #0
   181e6:	d00d      	beq.n	18204 <_ZN11StrategieV26updateEv+0x3ec>
   181e8:	4b80      	ldr	r3, [pc, #512]	(183ec <_ZN11StrategieV26updateEv+0x5d4>)
   181ea:	9300      	str	r3, [sp, #0]
   181ec:	68f8      	ldr	r0, [r7, #12]
   181ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   181f2:	e893 0006 	ldmia.w	r3, {r1, r2}
   181f6:	f04f 0301 	mov.w	r3, #1	; 0x1
   181fa:	f7f7 fb21 	bl	f840 <_ZN10ActionGoToC1E8Positionbf>
   181fe:	68fb      	ldr	r3, [r7, #12]
   18200:	613b      	str	r3, [r7, #16]
   18202:	e001      	b.n	18208 <_ZN11StrategieV26updateEv+0x3f0>
   18204:	68f9      	ldr	r1, [r7, #12]
   18206:	6139      	str	r1, [r7, #16]
   18208:	693b      	ldr	r3, [r7, #16]
   1820a:	4618      	mov	r0, r3
   1820c:	f7ff fb4e 	bl	178ac <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>

                //On arrête le robot
                if (currentCommand)
   18210:	4b77      	ldr	r3, [pc, #476]	(183f0 <_ZN11StrategieV26updateEv+0x5d8>)
   18212:	681b      	ldr	r3, [r3, #0]
   18214:	2b00      	cmp	r3, #0
   18216:	d009      	beq.n	1822c <_ZN11StrategieV26updateEv+0x414>
                    currentCommand->resetSpeeds();
   18218:	4b75      	ldr	r3, [pc, #468]	(183f0 <_ZN11StrategieV26updateEv+0x5d8>)
   1821a:	681b      	ldr	r3, [r3, #0]
   1821c:	681b      	ldr	r3, [r3, #0]
   1821e:	f103 030c 	add.w	r3, r3, #12	; 0xc
   18222:	681a      	ldr	r2, [r3, #0]
   18224:	4b72      	ldr	r3, [pc, #456]	(183f0 <_ZN11StrategieV26updateEv+0x5d8>)
   18226:	681b      	ldr	r3, [r3, #0]
   18228:	4618      	mov	r0, r3
   1822a:	4790      	blx	r2
            }
            timeToRestart--;
   1822c:	4b6c      	ldr	r3, [pc, #432]	(183e0 <_ZN11StrategieV26updateEv+0x5c8>)
   1822e:	681b      	ldr	r3, [r3, #0]
   18230:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   18234:	4b6a      	ldr	r3, [pc, #424]	(183e0 <_ZN11StrategieV26updateEv+0x5c8>)
   18236:	601a      	str	r2, [r3, #0]
   18238:	e027      	b.n	1828a <_ZN11StrategieV26updateEv+0x472>
        }

        else if (allume || timeToRestart) // Si un des sharp voit un adversaire, ou qu'on doit être arrêté suite à une détection
   1823a:	f897 309f 	ldrb.w	r3, [r7, #159]
   1823e:	2b00      	cmp	r3, #0
   18240:	d103      	bne.n	1824a <_ZN11StrategieV26updateEv+0x432>
   18242:	4b67      	ldr	r3, [pc, #412]	(183e0 <_ZN11StrategieV26updateEv+0x5c8>)
   18244:	681b      	ldr	r3, [r3, #0]
   18246:	2b00      	cmp	r3, #0
   18248:	d01f      	beq.n	1828a <_ZN11StrategieV26updateEv+0x472>
        {
            if(!timeToRestart)//Début de l'évitement
   1824a:	4b65      	ldr	r3, [pc, #404]	(183e0 <_ZN11StrategieV26updateEv+0x5c8>)
   1824c:	681b      	ldr	r3, [r3, #0]
   1824e:	2b00      	cmp	r3, #0
   18250:	d10f      	bne.n	18272 <_ZN11StrategieV26updateEv+0x45a>
            {
                timeToRestart = 400;
   18252:	4a63      	ldr	r2, [pc, #396]	(183e0 <_ZN11StrategieV26updateEv+0x5c8>)
   18254:	f44f 73c8 	mov.w	r3, #400	; 0x190
   18258:	6013      	str	r3, [r2, #0]
                hasJustAvoided = true;
   1825a:	4a66      	ldr	r2, [pc, #408]	(183f4 <_ZN11StrategieV26updateEv+0x5dc>)
   1825c:	f04f 0301 	mov.w	r3, #1	; 0x1
   18260:	7013      	strb	r3, [r2, #0]

//            if (true) // if (canStillDoAction)
//            {

//            }
                hasJustAvoided = false;
   18262:	4a64      	ldr	r2, [pc, #400]	(183f4 <_ZN11StrategieV26updateEv+0x5dc>)
   18264:	f04f 0300 	mov.w	r3, #0	; 0x0
   18268:	7013      	strb	r3, [r2, #0]
                somethingDetected = false;
   1826a:	4a63      	ldr	r2, [pc, #396]	(183f8 <_ZN11StrategieV26updateEv+0x5e0>)
   1826c:	f04f 0300 	mov.w	r3, #0	; 0x0
   18270:	7013      	strb	r3, [r2, #0]
                // tentative d'évitement :
                //Position pos = Odometrie::odometrie->getPos().getPosition();
                //addTemporaryAction(new ActionGoTo(pos, true));

            }
            Asservissement::asservissement->setCommandSpeeds(NULL);
   18272:	4b56      	ldr	r3, [pc, #344]	(183cc <_ZN11StrategieV26updateEv+0x5b4>)
   18274:	681b      	ldr	r3, [r3, #0]
   18276:	4618      	mov	r0, r3
   18278:	f04f 0100 	mov.w	r1, #0	; 0x0
   1827c:	f7ee ff98 	bl	71b0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
            Asservissement::asservissement->resetAsserv();
   18280:	4b52      	ldr	r3, [pc, #328]	(183cc <_ZN11StrategieV26updateEv+0x5b4>)
   18282:	681b      	ldr	r3, [r3, #0]
   18284:	4618      	mov	r0, r3
   18286:	f7ef f8e7 	bl	7458 <_ZN14Asservissement11resetAsservEv>
        //std::cout << robotBloque << "\n";
    }*/

//    else
//        robotBloque = 0;
    if (currentAction->update() == -1 || (robotBloque > 50))// && !enTrainDeRecalibrerOdometrie))
   1828a:	4b4f      	ldr	r3, [pc, #316]	(183c8 <_ZN11StrategieV26updateEv+0x5b0>)
   1828c:	681b      	ldr	r3, [r3, #0]
   1828e:	681b      	ldr	r3, [r3, #0]
   18290:	f103 0308 	add.w	r3, r3, #8	; 0x8
   18294:	681a      	ldr	r2, [r3, #0]
   18296:	4b4c      	ldr	r3, [pc, #304]	(183c8 <_ZN11StrategieV26updateEv+0x5b0>)
   18298:	681b      	ldr	r3, [r3, #0]
   1829a:	4618      	mov	r0, r3
   1829c:	4790      	blx	r2
   1829e:	4603      	mov	r3, r0
   182a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   182a4:	d003      	beq.n	182ae <_ZN11StrategieV26updateEv+0x496>
   182a6:	4b55      	ldr	r3, [pc, #340]	(183fc <_ZN11StrategieV26updateEv+0x5e4>)
   182a8:	681b      	ldr	r3, [r3, #0]
   182aa:	2b32      	cmp	r3, #50
   182ac:	dd03      	ble.n	182b6 <_ZN11StrategieV26updateEv+0x49e>
   182ae:	f04f 0201 	mov.w	r2, #1	; 0x1
   182b2:	617a      	str	r2, [r7, #20]
   182b4:	e002      	b.n	182bc <_ZN11StrategieV26updateEv+0x4a4>
   182b6:	f04f 0300 	mov.w	r3, #0	; 0x0
   182ba:	617b      	str	r3, [r7, #20]
   182bc:	697b      	ldr	r3, [r7, #20]
   182be:	2b00      	cmp	r3, #0
   182c0:	d060      	beq.n	18384 <_ZN11StrategieV26updateEv+0x56c>
    {
        if (robotBloque > 1000) // si le robot est bloqué 2 secondes
   182c2:	4b4e      	ldr	r3, [pc, #312]	(183fc <_ZN11StrategieV26updateEv+0x5e4>)
   182c4:	681b      	ldr	r3, [r3, #0]
   182c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   182ca:	dd19      	ble.n	18300 <_ZN11StrategieV26updateEv+0x4e8>
        {
            // on recule de 20 cm
            Asservissement::asservissement->setCommandSpeeds(NULL);
   182cc:	4b3f      	ldr	r3, [pc, #252]	(183cc <_ZN11StrategieV26updateEv+0x5b4>)
   182ce:	681b      	ldr	r3, [r3, #0]
   182d0:	4618      	mov	r0, r3
   182d2:	f04f 0100 	mov.w	r1, #0	; 0x0
   182d6:	f7ee ff6b 	bl	71b0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
            Asservissement::asservissement->resetAsserv();
   182da:	4b3c      	ldr	r3, [pc, #240]	(183cc <_ZN11StrategieV26updateEv+0x5b4>)
   182dc:	681b      	ldr	r3, [r3, #0]
   182de:	4618      	mov	r0, r3
   182e0:	f7ef f8ba 	bl	7458 <_ZN14Asservissement11resetAsservEv>
            currentCommand = NULL;
   182e4:	4a42      	ldr	r2, [pc, #264]	(183f0 <_ZN11StrategieV26updateEv+0x5d8>)
   182e6:	f04f 0300 	mov.w	r3, #0	; 0x0
   182ea:	6013      	str	r3, [r2, #0]
            actionsCount = 2;
   182ec:	4a38      	ldr	r2, [pc, #224]	(183d0 <_ZN11StrategieV26updateEv+0x5b8>)
   182ee:	f04f 0302 	mov.w	r3, #2	; 0x2
   182f2:	6013      	str	r3, [r2, #0]
            bool mustGoBack = true;
   182f4:	f04f 0301 	mov.w	r3, #1	; 0x1
   182f8:	f887 30af 	strb.w	r3, [r7, #175]
            allumerLED();
   182fc:	f7f4 f922 	bl	c544 <_Z10allumerLEDv>
            //StrategieV2::addTemporaryAction(new ActionGoTo(Odometrie::odometrie->getPos().getPosition(), mustGoBack));
        }
        robotBloque = 0;
   18300:	4a3e      	ldr	r2, [pc, #248]	(183fc <_ZN11StrategieV26updateEv+0x5e4>)
   18302:	f04f 0300 	mov.w	r3, #0	; 0x0
   18306:	6013      	str	r3, [r2, #0]
        //std::cout << "Changing action" << std::endl;
        Position currentPos = Odometrie::odometrie->getPos().getPosition();
   18308:	4b37      	ldr	r3, [pc, #220]	(183e8 <_ZN11StrategieV26updateEv+0x5d0>)
   1830a:	681a      	ldr	r2, [r3, #0]
   1830c:	f107 0390 	add.w	r3, r7, #144	; 0x90
   18310:	4618      	mov	r0, r3
   18312:	4611      	mov	r1, r2
   18314:	f7f1 fd70 	bl	9df8 <_ZNK9Odometrie6getPosEv>
   18318:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1831c:	f107 0290 	add.w	r2, r7, #144	; 0x90
   18320:	4618      	mov	r0, r3
   18322:	4611      	mov	r1, r2
   18324:	f7f6 ffa2 	bl	f26c <_ZNK17PositionPlusAngle11getPositionEv>
            mustDeleteAction = true;
            timeSinceLastRecalibration++;
        }*/
        //else
        //{
        if (mustDeleteAction) // temporary action
   18328:	4b35      	ldr	r3, [pc, #212]	(18400 <_ZN11StrategieV26updateEv+0x5e8>)
   1832a:	781b      	ldrb	r3, [r3, #0]
   1832c:	2b00      	cmp	r3, #0
   1832e:	d004      	beq.n	1833a <_ZN11StrategieV26updateEv+0x522>
            mustDeleteAction = false;
   18330:	4b33      	ldr	r3, [pc, #204]	(18400 <_ZN11StrategieV26updateEv+0x5e8>)
   18332:	f04f 0200 	mov.w	r2, #0	; 0x0
   18336:	701a      	strb	r2, [r3, #0]
   18338:	e005      	b.n	18346 <_ZN11StrategieV26updateEv+0x52e>
        else
            actionsCount++;
   1833a:	4b25      	ldr	r3, [pc, #148]	(183d0 <_ZN11StrategieV26updateEv+0x5b8>)
   1833c:	681b      	ldr	r3, [r3, #0]
   1833e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   18342:	4b23      	ldr	r3, [pc, #140]	(183d0 <_ZN11StrategieV26updateEv+0x5b8>)
   18344:	601a      	str	r2, [r3, #0]


        if (actionsCount == 2)
   18346:	4b22      	ldr	r3, [pc, #136]	(183d0 <_ZN11StrategieV26updateEv+0x5b8>)
   18348:	681b      	ldr	r3, [r3, #0]
   1834a:	2b02      	cmp	r3, #2
   1834c:	d113      	bne.n	18376 <_ZN11StrategieV26updateEv+0x55e>
        {
            currentCommand = NULL;
   1834e:	4a28      	ldr	r2, [pc, #160]	(183f0 <_ZN11StrategieV26updateEv+0x5d8>)
   18350:	f04f 0300 	mov.w	r3, #0	; 0x0
   18354:	6013      	str	r3, [r2, #0]
            Asservissement::asservissement->setCommandSpeeds(NULL);
   18356:	4b1d      	ldr	r3, [pc, #116]	(183cc <_ZN11StrategieV26updateEv+0x5b4>)
   18358:	681b      	ldr	r3, [r3, #0]
   1835a:	4618      	mov	r0, r3
   1835c:	f04f 0100 	mov.w	r1, #0	; 0x0
   18360:	f7ee ff26 	bl	71b0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
            Asservissement::asservissement->resetAsserv();
   18364:	4b19      	ldr	r3, [pc, #100]	(183cc <_ZN11StrategieV26updateEv+0x5b4>)
   18366:	681b      	ldr	r3, [r3, #0]
   18368:	4618      	mov	r0, r3
   1836a:	f7ef f875 	bl	7458 <_ZN14Asservissement11resetAsservEv>
            updateCount = 170000;//17000;
   1836e:	4a15      	ldr	r2, [pc, #84]	(183c4 <_ZN11StrategieV26updateEv+0x5ac>)
   18370:	4b24      	ldr	r3, [pc, #144]	(18404 <_ZN11StrategieV26updateEv+0x5ec>)
   18372:	6013      	str	r3, [r2, #0]
   18374:	e020      	b.n	183b8 <_ZN11StrategieV26updateEv+0x5a0>
            return;
        }
        else
        {
            currentAction = actionsToDo[actionsCount];
   18376:	4b16      	ldr	r3, [pc, #88]	(183d0 <_ZN11StrategieV26updateEv+0x5b8>)
   18378:	681a      	ldr	r2, [r3, #0]
   1837a:	4b1a      	ldr	r3, [pc, #104]	(183e4 <_ZN11StrategieV26updateEv+0x5cc>)
   1837c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   18380:	4b11      	ldr	r3, [pc, #68]	(183c8 <_ZN11StrategieV26updateEv+0x5b0>)
   18382:	601a      	str	r2, [r3, #0]
        //delete action;
        //if (currentAction)
        // currentAction->update();

    }
    if(!timeToRestart)
   18384:	4b16      	ldr	r3, [pc, #88]	(183e0 <_ZN11StrategieV26updateEv+0x5c8>)
   18386:	681b      	ldr	r3, [r3, #0]
   18388:	2b00      	cmp	r3, #0
   1838a:	d115      	bne.n	183b8 <_ZN11StrategieV26updateEv+0x5a0>
    {
        if (currentCommand)
   1838c:	4b18      	ldr	r3, [pc, #96]	(183f0 <_ZN11StrategieV26updateEv+0x5d8>)
   1838e:	681b      	ldr	r3, [r3, #0]
   18390:	2b00      	cmp	r3, #0
   18392:	d009      	beq.n	183a8 <_ZN11StrategieV26updateEv+0x590>
            currentCommand->update();
   18394:	4b16      	ldr	r3, [pc, #88]	(183f0 <_ZN11StrategieV26updateEv+0x5d8>)
   18396:	681b      	ldr	r3, [r3, #0]
   18398:	681b      	ldr	r3, [r3, #0]
   1839a:	f103 0308 	add.w	r3, r3, #8	; 0x8
   1839e:	681a      	ldr	r2, [r3, #0]
   183a0:	4b13      	ldr	r3, [pc, #76]	(183f0 <_ZN11StrategieV26updateEv+0x5d8>)
   183a2:	681b      	ldr	r3, [r3, #0]
   183a4:	4618      	mov	r0, r3
   183a6:	4790      	blx	r2
        Asservissement::asservissement->setCommandSpeeds(currentCommand);
   183a8:	4b08      	ldr	r3, [pc, #32]	(183cc <_ZN11StrategieV26updateEv+0x5b4>)
   183aa:	681a      	ldr	r2, [r3, #0]
   183ac:	4b10      	ldr	r3, [pc, #64]	(183f0 <_ZN11StrategieV26updateEv+0x5d8>)
   183ae:	681b      	ldr	r3, [r3, #0]
   183b0:	4610      	mov	r0, r2
   183b2:	4619      	mov	r1, r3
   183b4:	f7ee fefc 	bl	71b0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    }
//    updateCount ++;
    //eteindreLED2();
    //eteindreLED();
}
   183b8:	f107 07b4 	add.w	r7, r7, #180	; 0xb4
   183bc:	46bd      	mov	sp, r7
   183be:	bd90      	pop	{r4, r7, pc}
   183c0:	200005a4 	.word	0x200005a4
   183c4:	200005a8 	.word	0x200005a8
   183c8:	200005b0 	.word	0x200005b0
   183cc:	20000564 	.word	0x20000564
   183d0:	200005b4 	.word	0x200005b4
   183d4:	20000638 	.word	0x20000638
   183d8:	2000064a 	.word	0x2000064a
   183dc:	20000664 	.word	0x20000664
   183e0:	20000668 	.word	0x20000668
   183e4:	200005b8 	.word	0x200005b8
   183e8:	20000574 	.word	0x20000574
   183ec:	41f00000 	.word	0x41f00000
   183f0:	200005ac 	.word	0x200005ac
   183f4:	2000063d 	.word	0x2000063d
   183f8:	20000648 	.word	0x20000648
   183fc:	20000654 	.word	0x20000654
   18400:	2000063e 	.word	0x2000063e
   18404:	00029810 	.word	0x00029810

00018408 <_ZN11StrategieV2D0Ev>:
#endif

    updateCount = 0;
}

StrategieV2::~StrategieV2()
   18408:	b580      	push	{r7, lr}
   1840a:	b082      	sub	sp, #8
   1840c:	af00      	add	r7, sp, #0
   1840e:	6078      	str	r0, [r7, #4]
   18410:	687a      	ldr	r2, [r7, #4]
   18412:	4b08      	ldr	r3, [pc, #32]	(18434 <_ZN11StrategieV2D0Ev+0x2c>)
   18414:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   18416:	f04f 0301 	mov.w	r3, #1	; 0x1
   1841a:	b2db      	uxtb	r3, r3
   1841c:	2b00      	cmp	r3, #0
   1841e:	d002      	beq.n	18426 <_ZN11StrategieV2D0Ev+0x1e>
   18420:	6878      	ldr	r0, [r7, #4]
   18422:	f7f6 fc27 	bl	ec74 <_ZdlPv>
   18426:	687b      	ldr	r3, [r7, #4]
   18428:	4618      	mov	r0, r3
   1842a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1842e:	46bd      	mov	sp, r7
   18430:	bd80      	pop	{r7, pc}
   18432:	46c0      	nop			(mov r8, r8)
   18434:	000241e8 	.word	0x000241e8

00018438 <_ZN11StrategieV2D1Ev>:
#endif

    updateCount = 0;
}

StrategieV2::~StrategieV2()
   18438:	b580      	push	{r7, lr}
   1843a:	b082      	sub	sp, #8
   1843c:	af00      	add	r7, sp, #0
   1843e:	6078      	str	r0, [r7, #4]
   18440:	687a      	ldr	r2, [r7, #4]
   18442:	4b08      	ldr	r3, [pc, #32]	(18464 <_ZN11StrategieV2D1Ev+0x2c>)
   18444:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   18446:	f04f 0300 	mov.w	r3, #0	; 0x0
   1844a:	b2db      	uxtb	r3, r3
   1844c:	2b00      	cmp	r3, #0
   1844e:	d002      	beq.n	18456 <_ZN11StrategieV2D1Ev+0x1e>
   18450:	6878      	ldr	r0, [r7, #4]
   18452:	f7f6 fc0f 	bl	ec74 <_ZdlPv>
   18456:	687b      	ldr	r3, [r7, #4]
   18458:	4618      	mov	r0, r3
   1845a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1845e:	46bd      	mov	sp, r7
   18460:	bd80      	pop	{r7, pc}
   18462:	46c0      	nop			(mov r8, r8)
   18464:	000241e8 	.word	0x000241e8

00018468 <_ZN11StrategieV2D2Ev>:
#endif

    updateCount = 0;
}

StrategieV2::~StrategieV2()
   18468:	b580      	push	{r7, lr}
   1846a:	b082      	sub	sp, #8
   1846c:	af00      	add	r7, sp, #0
   1846e:	6078      	str	r0, [r7, #4]
   18470:	687a      	ldr	r2, [r7, #4]
   18472:	4b08      	ldr	r3, [pc, #32]	(18494 <_ZN11StrategieV2D2Ev+0x2c>)
   18474:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   18476:	f04f 0300 	mov.w	r3, #0	; 0x0
   1847a:	b2db      	uxtb	r3, r3
   1847c:	2b00      	cmp	r3, #0
   1847e:	d002      	beq.n	18486 <_ZN11StrategieV2D2Ev+0x1e>
   18480:	6878      	ldr	r0, [r7, #4]
   18482:	f7f6 fbf7 	bl	ec74 <_ZdlPv>
   18486:	687b      	ldr	r3, [r7, #4]
   18488:	4618      	mov	r0, r3
   1848a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1848e:	46bd      	mov	sp, r7
   18490:	bd80      	pop	{r7, pc}
   18492:	46c0      	nop			(mov r8, r8)
   18494:	000241e8 	.word	0x000241e8

00018498 <_ZN11StrategieV2C1Eb>:
#ifdef ROBOTHW
Tourelle* StrategieV2::tourelle = NULL;
int StrategieV2::hysteresisTourelle = 0;
#endif

StrategieV2::StrategieV2(bool blue)
   18498:	b580      	push	{r7, lr}
   1849a:	b08a      	sub	sp, #40
   1849c:	af00      	add	r7, sp, #0
   1849e:	6178      	str	r0, [r7, #20]
   184a0:	460b      	mov	r3, r1
   184a2:	74fb      	strb	r3, [r7, #19]
   184a4:	697a      	ldr	r2, [r7, #20]
   184a6:	4b33      	ldr	r3, [pc, #204]	(18574 <_ZN11StrategieV2C1Eb+0xdc>)
   184a8:	6013      	str	r3, [r2, #0]
{
    isBlue = blue;
   184aa:	4a33      	ldr	r2, [pc, #204]	(18578 <_ZN11StrategieV2C1Eb+0xe0>)
   184ac:	7cfb      	ldrb	r3, [r7, #19]
   184ae:	7013      	strb	r3, [r2, #0]
    timeToRestart = 0;
   184b0:	4a32      	ldr	r2, [pc, #200]	(1857c <_ZN11StrategieV2C1Eb+0xe4>)
   184b2:	f04f 0300 	mov.w	r3, #0	; 0x0
   184b6:	6013      	str	r3, [r2, #0]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   184b8:	f04f 0300 	mov.w	r3, #0	; 0x0
   184bc:	627b      	str	r3, [r7, #36]
   184be:	e008      	b.n	184d2 <_ZN11StrategieV2C1Eb+0x3a>
        sharpsToCheck[i] = false;
   184c0:	6a79      	ldr	r1, [r7, #36]
   184c2:	4a2f      	ldr	r2, [pc, #188]	(18580 <_ZN11StrategieV2C1Eb+0xe8>)
   184c4:	f04f 0300 	mov.w	r3, #0	; 0x0
   184c8:	5453      	strb	r3, [r2, r1]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   184ca:	6a7b      	ldr	r3, [r7, #36]
   184cc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   184d0:	627b      	str	r3, [r7, #36]
   184d2:	6a7b      	ldr	r3, [r7, #36]
   184d4:	2b07      	cmp	r3, #7
   184d6:	ddf3      	ble.n	184c0 <_ZN11StrategieV2C1Eb+0x28>
        sharpsToCheck[i] = false;

    //actionsToDo[0] = new Evitement();
    //actionsToDo[0] = new ActionGoTo(Position(1000,230), false);
    int decalage = 0;
   184d8:	f04f 0300 	mov.w	r3, #0	; 0x0
   184dc:	61fb      	str	r3, [r7, #28]
    //actionsToDo[0] = new StrategieV3(blue);

    /* Appel des stratégies */

    //actionsToDo[0] = (MediumLevelAction*) new Krabi2014(blue);
    actionsToDo[0] = (MediumLevelAction*) new Krabi2015(blue);
   184de:	f44f 704e 	mov.w	r0, #824	; 0x338
   184e2:	f7f6 fb21 	bl	eb28 <_Znwj>
   184e6:	4603      	mov	r3, r0
   184e8:	603b      	str	r3, [r7, #0]
   184ea:	683a      	ldr	r2, [r7, #0]
   184ec:	2a00      	cmp	r2, #0
   184ee:	d007      	beq.n	18500 <_ZN11StrategieV2C1Eb+0x68>
   184f0:	7cfb      	ldrb	r3, [r7, #19]
   184f2:	6838      	ldr	r0, [r7, #0]
   184f4:	4619      	mov	r1, r3
   184f6:	f7f8 ff75 	bl	113e4 <_ZN9Krabi2015C1Eb>
   184fa:	683b      	ldr	r3, [r7, #0]
   184fc:	607b      	str	r3, [r7, #4]
   184fe:	e001      	b.n	18504 <_ZN11StrategieV2C1Eb+0x6c>
   18500:	683a      	ldr	r2, [r7, #0]
   18502:	607a      	str	r2, [r7, #4]
   18504:	687a      	ldr	r2, [r7, #4]
   18506:	4b1f      	ldr	r3, [pc, #124]	(18584 <_ZN11StrategieV2C1Eb+0xec>)
   18508:	601a      	str	r2, [r3, #0]
    actionsToDo[8] = new ActionGoTo(Position(2600,800), true);
    actionsToDo[9] = new ActionGoTo(Position(2600,1070), false);
    actionsToDo[10] = new ActionGoTo(Position(300,1070), false);*/

    //currentAction = new RecalibrerOdometrie(new LimitSwitchSensor(LimitSwitchSensor::BACK_LEFT, GPIO_Pin_14, GPIOD), new LimitSwitchSensor(LimitSwitchSensor::BACK_RIGHT, GPIO_Pin_1, GPIOD));
    currentAction = actionsToDo[actionsCount];
   1850a:	4b1f      	ldr	r3, [pc, #124]	(18588 <_ZN11StrategieV2C1Eb+0xf0>)
   1850c:	681a      	ldr	r2, [r3, #0]
   1850e:	4b1d      	ldr	r3, [pc, #116]	(18584 <_ZN11StrategieV2C1Eb+0xec>)
   18510:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   18514:	4b1d      	ldr	r3, [pc, #116]	(1858c <_ZN11StrategieV2C1Eb+0xf4>)
   18516:	601a      	str	r2, [r3, #0]
    //currentAction = new RecalibrerOdometrie();
    //hasJustAvoided = true;
    //currentAction->update();


    StrategieV2::strategie = this;
   18518:	4a1d      	ldr	r2, [pc, #116]	(18590 <_ZN11StrategieV2C1Eb+0xf8>)
   1851a:	697b      	ldr	r3, [r7, #20]
   1851c:	6013      	str	r3, [r2, #0]

    /*uint8_t channels[10] = {9,13,8,11,5,10,4,12,14,15};
    uint16_t* data = AnalogSensor::initialiserADC(10, channels);
    int nbSharp = 10;*/

    Sensors* sensors = Sensors::getSingleton();
   1851e:	f7ee fb6f 	bl	6c00 <_ZN7Sensors12getSingletonEv>
   18522:	4603      	mov	r3, r0
   18524:	623b      	str	r3, [r7, #32]
    sharps = sensors->getSharpSensorsList();
   18526:	6a38      	ldr	r0, [r7, #32]
   18528:	f7ed faec 	bl	5b04 <_ZN7Sensors19getSharpSensorsListEv>
   1852c:	4602      	mov	r2, r0
   1852e:	4b19      	ldr	r3, [pc, #100]	(18594 <_ZN11StrategieV2C1Eb+0xfc>)
   18530:	601a      	str	r2, [r3, #0]
    sharps[6] = new SharpSensor(SharpSensor::NONE, 4, data); //
    sharps[7] = new SharpSensor(SharpSensor::ELEVATOR_TOP, 12, data); // capteur haut ascenseur 12
    sharps[8] = new SharpSensor(SharpSensor::ELEVATOR_DOWN, 14, data); // capteur bas ascenseur 14
    sharps[9] = new SharpSensor(SharpSensor::BACK_RIGHT, 15, data, 2000.0); //
    #endif*/
    emptySharpsToCheck();
   18532:	f7ff fa2f 	bl	17994 <_ZN11StrategieV218emptySharpsToCheckEv>
    enableSharp(SharpSensor::BACK_MIDDLE);
    enableSharp(SharpSensor::BACK_RIGHT);*/

#ifdef ROBOTHW
//        tourelle = new Tourelle(TIM6, 0);//TIM parameter is not implemented yet
    tourelle = new Tourelle();
   18536:	f04f 0001 	mov.w	r0, #1	; 0x1
   1853a:	f7f6 faf5 	bl	eb28 <_Znwj>
   1853e:	4603      	mov	r3, r0
   18540:	60bb      	str	r3, [r7, #8]
   18542:	68bb      	ldr	r3, [r7, #8]
   18544:	2b00      	cmp	r3, #0
   18546:	d005      	beq.n	18554 <_ZN11StrategieV2C1Eb+0xbc>
   18548:	68b8      	ldr	r0, [r7, #8]
   1854a:	f7f5 fb4f 	bl	dbec <_ZN8TourelleC1Ev>
   1854e:	68ba      	ldr	r2, [r7, #8]
   18550:	60fa      	str	r2, [r7, #12]
   18552:	e001      	b.n	18558 <_ZN11StrategieV2C1Eb+0xc0>
   18554:	68bb      	ldr	r3, [r7, #8]
   18556:	60fb      	str	r3, [r7, #12]
   18558:	4b0f      	ldr	r3, [pc, #60]	(18598 <_ZN11StrategieV2C1Eb+0x100>)
   1855a:	68fa      	ldr	r2, [r7, #12]
   1855c:	601a      	str	r2, [r3, #0]
    //tourelle->setZoneCritique(10, 27000);
#endif

    updateCount = 0;
   1855e:	4a0f      	ldr	r2, [pc, #60]	(1859c <_ZN11StrategieV2C1Eb+0x104>)
   18560:	f04f 0300 	mov.w	r3, #0	; 0x0
   18564:	6013      	str	r3, [r2, #0]
}
   18566:	697b      	ldr	r3, [r7, #20]
   18568:	4618      	mov	r0, r3
   1856a:	f107 0728 	add.w	r7, r7, #40	; 0x28
   1856e:	46bd      	mov	sp, r7
   18570:	bd80      	pop	{r7, pc}
   18572:	46c0      	nop			(mov r8, r8)
   18574:	000241e8 	.word	0x000241e8
   18578:	20000649 	.word	0x20000649
   1857c:	20000668 	.word	0x20000668
   18580:	2000064a 	.word	0x2000064a
   18584:	200005b8 	.word	0x200005b8
   18588:	200005b4 	.word	0x200005b4
   1858c:	200005b0 	.word	0x200005b0
   18590:	200005a4 	.word	0x200005a4
   18594:	20000638 	.word	0x20000638
   18598:	2000066c 	.word	0x2000066c
   1859c:	200005a8 	.word	0x200005a8

000185a0 <_ZN11StrategieV2C2Eb>:
#ifdef ROBOTHW
Tourelle* StrategieV2::tourelle = NULL;
int StrategieV2::hysteresisTourelle = 0;
#endif

StrategieV2::StrategieV2(bool blue)
   185a0:	b580      	push	{r7, lr}
   185a2:	b08a      	sub	sp, #40
   185a4:	af00      	add	r7, sp, #0
   185a6:	6178      	str	r0, [r7, #20]
   185a8:	460b      	mov	r3, r1
   185aa:	74fb      	strb	r3, [r7, #19]
   185ac:	697a      	ldr	r2, [r7, #20]
   185ae:	4b33      	ldr	r3, [pc, #204]	(1867c <_ZN11StrategieV2C2Eb+0xdc>)
   185b0:	6013      	str	r3, [r2, #0]
{
    isBlue = blue;
   185b2:	4a33      	ldr	r2, [pc, #204]	(18680 <_ZN11StrategieV2C2Eb+0xe0>)
   185b4:	7cfb      	ldrb	r3, [r7, #19]
   185b6:	7013      	strb	r3, [r2, #0]
    timeToRestart = 0;
   185b8:	4a32      	ldr	r2, [pc, #200]	(18684 <_ZN11StrategieV2C2Eb+0xe4>)
   185ba:	f04f 0300 	mov.w	r3, #0	; 0x0
   185be:	6013      	str	r3, [r2, #0]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   185c0:	f04f 0300 	mov.w	r3, #0	; 0x0
   185c4:	627b      	str	r3, [r7, #36]
   185c6:	e008      	b.n	185da <_ZN11StrategieV2C2Eb+0x3a>
        sharpsToCheck[i] = false;
   185c8:	6a79      	ldr	r1, [r7, #36]
   185ca:	4a2f      	ldr	r2, [pc, #188]	(18688 <_ZN11StrategieV2C2Eb+0xe8>)
   185cc:	f04f 0300 	mov.w	r3, #0	; 0x0
   185d0:	5453      	strb	r3, [r2, r1]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   185d2:	6a7b      	ldr	r3, [r7, #36]
   185d4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   185d8:	627b      	str	r3, [r7, #36]
   185da:	6a7b      	ldr	r3, [r7, #36]
   185dc:	2b07      	cmp	r3, #7
   185de:	ddf3      	ble.n	185c8 <_ZN11StrategieV2C2Eb+0x28>
        sharpsToCheck[i] = false;

    //actionsToDo[0] = new Evitement();
    //actionsToDo[0] = new ActionGoTo(Position(1000,230), false);
    int decalage = 0;
   185e0:	f04f 0300 	mov.w	r3, #0	; 0x0
   185e4:	61fb      	str	r3, [r7, #28]
    //actionsToDo[0] = new StrategieV3(blue);

    /* Appel des stratégies */

    //actionsToDo[0] = (MediumLevelAction*) new Krabi2014(blue);
    actionsToDo[0] = (MediumLevelAction*) new Krabi2015(blue);
   185e6:	f44f 704e 	mov.w	r0, #824	; 0x338
   185ea:	f7f6 fa9d 	bl	eb28 <_Znwj>
   185ee:	4603      	mov	r3, r0
   185f0:	603b      	str	r3, [r7, #0]
   185f2:	683a      	ldr	r2, [r7, #0]
   185f4:	2a00      	cmp	r2, #0
   185f6:	d007      	beq.n	18608 <_ZN11StrategieV2C2Eb+0x68>
   185f8:	7cfb      	ldrb	r3, [r7, #19]
   185fa:	6838      	ldr	r0, [r7, #0]
   185fc:	4619      	mov	r1, r3
   185fe:	f7f8 fef1 	bl	113e4 <_ZN9Krabi2015C1Eb>
   18602:	683b      	ldr	r3, [r7, #0]
   18604:	607b      	str	r3, [r7, #4]
   18606:	e001      	b.n	1860c <_ZN11StrategieV2C2Eb+0x6c>
   18608:	683a      	ldr	r2, [r7, #0]
   1860a:	607a      	str	r2, [r7, #4]
   1860c:	687a      	ldr	r2, [r7, #4]
   1860e:	4b1f      	ldr	r3, [pc, #124]	(1868c <_ZN11StrategieV2C2Eb+0xec>)
   18610:	601a      	str	r2, [r3, #0]
    actionsToDo[8] = new ActionGoTo(Position(2600,800), true);
    actionsToDo[9] = new ActionGoTo(Position(2600,1070), false);
    actionsToDo[10] = new ActionGoTo(Position(300,1070), false);*/

    //currentAction = new RecalibrerOdometrie(new LimitSwitchSensor(LimitSwitchSensor::BACK_LEFT, GPIO_Pin_14, GPIOD), new LimitSwitchSensor(LimitSwitchSensor::BACK_RIGHT, GPIO_Pin_1, GPIOD));
    currentAction = actionsToDo[actionsCount];
   18612:	4b1f      	ldr	r3, [pc, #124]	(18690 <_ZN11StrategieV2C2Eb+0xf0>)
   18614:	681a      	ldr	r2, [r3, #0]
   18616:	4b1d      	ldr	r3, [pc, #116]	(1868c <_ZN11StrategieV2C2Eb+0xec>)
   18618:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1861c:	4b1d      	ldr	r3, [pc, #116]	(18694 <_ZN11StrategieV2C2Eb+0xf4>)
   1861e:	601a      	str	r2, [r3, #0]
    //currentAction = new RecalibrerOdometrie();
    //hasJustAvoided = true;
    //currentAction->update();


    StrategieV2::strategie = this;
   18620:	4a1d      	ldr	r2, [pc, #116]	(18698 <_ZN11StrategieV2C2Eb+0xf8>)
   18622:	697b      	ldr	r3, [r7, #20]
   18624:	6013      	str	r3, [r2, #0]

    /*uint8_t channels[10] = {9,13,8,11,5,10,4,12,14,15};
    uint16_t* data = AnalogSensor::initialiserADC(10, channels);
    int nbSharp = 10;*/

    Sensors* sensors = Sensors::getSingleton();
   18626:	f7ee faeb 	bl	6c00 <_ZN7Sensors12getSingletonEv>
   1862a:	4603      	mov	r3, r0
   1862c:	623b      	str	r3, [r7, #32]
    sharps = sensors->getSharpSensorsList();
   1862e:	6a38      	ldr	r0, [r7, #32]
   18630:	f7ed fa68 	bl	5b04 <_ZN7Sensors19getSharpSensorsListEv>
   18634:	4602      	mov	r2, r0
   18636:	4b19      	ldr	r3, [pc, #100]	(1869c <_ZN11StrategieV2C2Eb+0xfc>)
   18638:	601a      	str	r2, [r3, #0]
    sharps[6] = new SharpSensor(SharpSensor::NONE, 4, data); //
    sharps[7] = new SharpSensor(SharpSensor::ELEVATOR_TOP, 12, data); // capteur haut ascenseur 12
    sharps[8] = new SharpSensor(SharpSensor::ELEVATOR_DOWN, 14, data); // capteur bas ascenseur 14
    sharps[9] = new SharpSensor(SharpSensor::BACK_RIGHT, 15, data, 2000.0); //
    #endif*/
    emptySharpsToCheck();
   1863a:	f7ff f9ab 	bl	17994 <_ZN11StrategieV218emptySharpsToCheckEv>
    enableSharp(SharpSensor::BACK_MIDDLE);
    enableSharp(SharpSensor::BACK_RIGHT);*/

#ifdef ROBOTHW
//        tourelle = new Tourelle(TIM6, 0);//TIM parameter is not implemented yet
    tourelle = new Tourelle();
   1863e:	f04f 0001 	mov.w	r0, #1	; 0x1
   18642:	f7f6 fa71 	bl	eb28 <_Znwj>
   18646:	4603      	mov	r3, r0
   18648:	60bb      	str	r3, [r7, #8]
   1864a:	68bb      	ldr	r3, [r7, #8]
   1864c:	2b00      	cmp	r3, #0
   1864e:	d005      	beq.n	1865c <_ZN11StrategieV2C2Eb+0xbc>
   18650:	68b8      	ldr	r0, [r7, #8]
   18652:	f7f5 facb 	bl	dbec <_ZN8TourelleC1Ev>
   18656:	68ba      	ldr	r2, [r7, #8]
   18658:	60fa      	str	r2, [r7, #12]
   1865a:	e001      	b.n	18660 <_ZN11StrategieV2C2Eb+0xc0>
   1865c:	68bb      	ldr	r3, [r7, #8]
   1865e:	60fb      	str	r3, [r7, #12]
   18660:	4b0f      	ldr	r3, [pc, #60]	(186a0 <_ZN11StrategieV2C2Eb+0x100>)
   18662:	68fa      	ldr	r2, [r7, #12]
   18664:	601a      	str	r2, [r3, #0]
    //tourelle->setZoneCritique(10, 27000);
#endif

    updateCount = 0;
   18666:	4a0f      	ldr	r2, [pc, #60]	(186a4 <_ZN11StrategieV2C2Eb+0x104>)
   18668:	f04f 0300 	mov.w	r3, #0	; 0x0
   1866c:	6013      	str	r3, [r2, #0]
}
   1866e:	697b      	ldr	r3, [r7, #20]
   18670:	4618      	mov	r0, r3
   18672:	f107 0728 	add.w	r7, r7, #40	; 0x28
   18676:	46bd      	mov	sp, r7
   18678:	bd80      	pop	{r7, pc}
   1867a:	46c0      	nop			(mov r8, r8)
   1867c:	000241e8 	.word	0x000241e8
   18680:	20000649 	.word	0x20000649
   18684:	20000668 	.word	0x20000668
   18688:	2000064a 	.word	0x2000064a
   1868c:	200005b8 	.word	0x200005b8
   18690:	200005b4 	.word	0x200005b4
   18694:	200005b0 	.word	0x200005b0
   18698:	200005a4 	.word	0x200005a4
   1869c:	20000638 	.word	0x20000638
   186a0:	2000066c 	.word	0x2000066c
   186a4:	200005a8 	.word	0x200005a8

000186a8 <_ZN11StrategieV316collisionAvoidedEv>:
    for(int i = 0 ; i < 10 ; i++){
        this->tableauEtapes[i]->setState(0);
    }
}

void StrategieV3::collisionAvoided(){
   186a8:	b480      	push	{r7}
   186aa:	b083      	sub	sp, #12
   186ac:	af00      	add	r7, sp, #0
   186ae:	6078      	str	r0, [r7, #4]
    this->avoiding = true;
   186b0:	687b      	ldr	r3, [r7, #4]
   186b2:	f04f 0201 	mov.w	r2, #1	; 0x1
   186b6:	f883 2038 	strb.w	r2, [r3, #56]
}
   186ba:	f107 070c 	add.w	r7, r7, #12	; 0xc
   186be:	46bd      	mov	sp, r7
   186c0:	bc80      	pop	{r7}
   186c2:	4770      	bx	lr

000186c4 <_ZN11StrategieV312updateScoresEv>:
    // Mettre un point d'arrêt ici pour récupérer les distances dans la sortie standard du simu
    // ###########################################################################################
#endif
}

bool StrategieV3::updateScores() {
   186c4:	b580      	push	{r7, lr}
   186c6:	b086      	sub	sp, #24
   186c8:	af00      	add	r7, sp, #0
   186ca:	6078      	str	r0, [r7, #4]
    //le temps restant done
    //la trajectoire de notre autre robot
    //...
    //C'est aussi utilisé pour savoir si on est dans un sous-graphe sans objectif,
    //et qu'il faut oublier qu'on a vu des robots
    int scoreTypeEtape = 0;
   186cc:	f04f 0300 	mov.w	r3, #0	; 0x0
   186d0:	60fb      	str	r3, [r7, #12]
    //float modificateurTemporel = 1.f;

    bool resteDesChosesAFaire = false;
   186d2:	f04f 0300 	mov.w	r3, #0	; 0x0
   186d6:	74fb      	strb	r3, [r7, #19]
    for(int i = 0 ; i < this->nombreEtapes ; i++)
   186d8:	f04f 0300 	mov.w	r3, #0	; 0x0
   186dc:	617b      	str	r3, [r7, #20]
   186de:	e01e      	b.n	1871e <_ZN11StrategieV312updateScoresEv+0x5a>
    {
        scoreTypeEtape=this->getScoreEtape(i);
   186e0:	687b      	ldr	r3, [r7, #4]
   186e2:	681b      	ldr	r3, [r3, #0]
   186e4:	f103 031c 	add.w	r3, r3, #28	; 0x1c
   186e8:	681b      	ldr	r3, [r3, #0]
   186ea:	6878      	ldr	r0, [r7, #4]
   186ec:	6979      	ldr	r1, [r7, #20]
   186ee:	4798      	blx	r3
   186f0:	4603      	mov	r3, r0
   186f2:	60fb      	str	r3, [r7, #12]
        if(scoreTypeEtape)
   186f4:	68fb      	ldr	r3, [r7, #12]
   186f6:	2b00      	cmp	r3, #0
   186f8:	d002      	beq.n	18700 <_ZN11StrategieV312updateScoresEv+0x3c>
        {
            resteDesChosesAFaire = true;
   186fa:	f04f 0301 	mov.w	r3, #1	; 0x1
   186fe:	74fb      	strb	r3, [r7, #19]
        }

        this->tableauEtapes[i]->setScore(scoreTypeEtape);
   18700:	687b      	ldr	r3, [r7, #4]
   18702:	6b1a      	ldr	r2, [r3, #48]
   18704:	697b      	ldr	r3, [r7, #20]
   18706:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1870a:	4413      	add	r3, r2
   1870c:	681b      	ldr	r3, [r3, #0]
   1870e:	4618      	mov	r0, r3
   18710:	68f9      	ldr	r1, [r7, #12]
   18712:	f7f8 fa15 	bl	10b40 <_ZN5Etape8setScoreEi>
    //et qu'il faut oublier qu'on a vu des robots
    int scoreTypeEtape = 0;
    //float modificateurTemporel = 1.f;

    bool resteDesChosesAFaire = false;
    for(int i = 0 ; i < this->nombreEtapes ; i++)
   18716:	697b      	ldr	r3, [r7, #20]
   18718:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1871c:	617b      	str	r3, [r7, #20]
   1871e:	687b      	ldr	r3, [r7, #4]
   18720:	69da      	ldr	r2, [r3, #28]
   18722:	697b      	ldr	r3, [r7, #20]
   18724:	429a      	cmp	r2, r3
   18726:	dcdb      	bgt.n	186e0 <_ZN11StrategieV312updateScoresEv+0x1c>
            resteDesChosesAFaire = true;
        }

        this->tableauEtapes[i]->setScore(scoreTypeEtape);
    }
    return resteDesChosesAFaire;
   18728:	7cfb      	ldrb	r3, [r7, #19]
}
   1872a:	4618      	mov	r0, r3
   1872c:	f107 0718 	add.w	r7, r7, #24	; 0x18
   18730:	46bd      	mov	sp, r7
   18732:	bd80      	pop	{r7, pc}

00018734 <_ZN11StrategieV313startDijkstraEv>:
    }
    p->setOpacity(1);
}
#endif

void StrategieV3::startDijkstra(){
   18734:	b590      	push	{r4, r7, lr}
   18736:	b085      	sub	sp, #20
   18738:	af00      	add	r7, sp, #0
   1873a:	6078      	str	r0, [r7, #4]
    for(int i=0; i<this->nombreEtapes; i++)
   1873c:	f04f 0300 	mov.w	r3, #0	; 0x0
   18740:	60fb      	str	r3, [r7, #12]
   18742:	e00d      	b.n	18760 <_ZN11StrategieV313startDijkstraEv+0x2c>
        tableauEtapesTotal[i]->computeChildDistances();
   18744:	687b      	ldr	r3, [r7, #4]
   18746:	6b5a      	ldr	r2, [r3, #52]
   18748:	68fb      	ldr	r3, [r7, #12]
   1874a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1874e:	4413      	add	r3, r2
   18750:	681b      	ldr	r3, [r3, #0]
   18752:	4618      	mov	r0, r3
   18754:	f7f8 fab4 	bl	10cc0 <_ZN5Etape21computeChildDistancesEv>
    p->setOpacity(1);
}
#endif

void StrategieV3::startDijkstra(){
    for(int i=0; i<this->nombreEtapes; i++)
   18758:	68fb      	ldr	r3, [r7, #12]
   1875a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1875e:	60fb      	str	r3, [r7, #12]
   18760:	687b      	ldr	r3, [r7, #4]
   18762:	69da      	ldr	r2, [r3, #28]
   18764:	68fb      	ldr	r3, [r7, #12]
   18766:	429a      	cmp	r2, r3
   18768:	dcec      	bgt.n	18744 <_ZN11StrategieV313startDijkstraEv+0x10>
        tableauEtapesTotal[i]->computeChildDistances();

    this->dijkstra = new Dijkstra(tableauEtapesTotal, this->nombreEtapes);
   1876a:	f04f 0024 	mov.w	r0, #36	; 0x24
   1876e:	f7f6 f9db 	bl	eb28 <_Znwj>
   18772:	4603      	mov	r3, r0
   18774:	461c      	mov	r4, r3
   18776:	687b      	ldr	r3, [r7, #4]
   18778:	6b5a      	ldr	r2, [r3, #52]
   1877a:	687b      	ldr	r3, [r7, #4]
   1877c:	69db      	ldr	r3, [r3, #28]
   1877e:	4620      	mov	r0, r4
   18780:	4611      	mov	r1, r2
   18782:	461a      	mov	r2, r3
   18784:	f7f7 fcd2 	bl	1012c <_ZN8DijkstraC1EPP5Etapei>
   18788:	687b      	ldr	r3, [r7, #4]
   1878a:	62dc      	str	r4, [r3, #44]

    this->tableauEtapes = tableauEtapesTotal;
   1878c:	687b      	ldr	r3, [r7, #4]
   1878e:	6b5a      	ldr	r2, [r3, #52]
   18790:	687b      	ldr	r3, [r7, #4]
   18792:	631a      	str	r2, [r3, #48]
    this->tableauEtapes[0]->setParent(this->tableauEtapes[0]);// Evite de planter si on detecte dès la première boucle (dans le simu)
   18794:	687b      	ldr	r3, [r7, #4]
   18796:	6b1b      	ldr	r3, [r3, #48]
   18798:	681a      	ldr	r2, [r3, #0]
   1879a:	687b      	ldr	r3, [r7, #4]
   1879c:	6b1b      	ldr	r3, [r3, #48]
   1879e:	681b      	ldr	r3, [r3, #0]
   187a0:	4610      	mov	r0, r2
   187a2:	4619      	mov	r1, r3
   187a4:	f7f8 f8de 	bl	10964 <_ZN5Etape9setParentEPS_>

    dijkstra->setEtapeCourante(0);
   187a8:	687b      	ldr	r3, [r7, #4]
   187aa:	6adb      	ldr	r3, [r3, #44]
   187ac:	4618      	mov	r0, r3
   187ae:	f04f 0100 	mov.w	r1, #0	; 0x0
   187b2:	f7f7 fce1 	bl	10178 <_ZN8Dijkstra16setEtapeCouranteEi>
    }
    // ###########################################################################################
    // Mettre un point d'arrêt ici pour récupérer les distances dans la sortie standard du simu
    // ###########################################################################################
#endif
}
   187b6:	f107 0714 	add.w	r7, r7, #20	; 0x14
   187ba:	46bd      	mov	sp, r7
   187bc:	bd90      	pop	{r4, r7, pc}
   187be:	46c0      	nop			(mov r8, r8)

000187c0 <_ZN11StrategieV318updateIntermedaireEv>:
void StrategieV3::collisionAvoided(){
    this->avoiding = true;
}


void StrategieV3::updateIntermedaire()
   187c0:	b580      	push	{r7, lr}
   187c2:	b086      	sub	sp, #24
   187c4:	af00      	add	r7, sp, #0
   187c6:	6078      	str	r0, [r7, #4]
    //(sauf peut être le parent de l'étape d'origine, mais on s'en fout

    #ifndef ROBOTHW
        qDebug() << "updateIntermedaire\n";
    #endif
    int etapeOuOnVientDArriver = this->etapeEnCours;
   187c8:	687b      	ldr	r3, [r7, #4]
   187ca:	699b      	ldr	r3, [r3, #24]
   187cc:	60fb      	str	r3, [r7, #12]
    this->etapeEnCours = this->goal;
   187ce:	687b      	ldr	r3, [r7, #4]
   187d0:	6bda      	ldr	r2, [r3, #60]
   187d2:	687b      	ldr	r3, [r7, #4]
   187d4:	619a      	str	r2, [r3, #24]
    Etape* toto = this->tableauEtapes[1];
   187d6:	687b      	ldr	r3, [r7, #4]
   187d8:	6b1b      	ldr	r3, [r3, #48]
   187da:	f103 0304 	add.w	r3, r3, #4	; 0x4
   187de:	681b      	ldr	r3, [r3, #0]
   187e0:	613b      	str	r3, [r7, #16]
    Etape* toto2 = this->tableauEtapes[2];
   187e2:	687b      	ldr	r3, [r7, #4]
   187e4:	6b1b      	ldr	r3, [r3, #48]
   187e6:	f103 0308 	add.w	r3, r3, #8	; 0x8
   187ea:	681b      	ldr	r3, [r3, #0]
   187ec:	617b      	str	r3, [r7, #20]

    // Si la prochaine étape est le goal, alors au prochain update il faudra trouver un nouvel objectif -> status = 1;
    if(((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero())) == etapeOuOnVientDArriver)
   187ee:	687b      	ldr	r3, [r7, #4]
   187f0:	6b1a      	ldr	r2, [r3, #48]
   187f2:	687b      	ldr	r3, [r7, #4]
   187f4:	699b      	ldr	r3, [r3, #24]
   187f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
   187fa:	4413      	add	r3, r2
   187fc:	681b      	ldr	r3, [r3, #0]
   187fe:	4618      	mov	r0, r3
   18800:	f7f8 f85c 	bl	108bc <_ZN5Etape9getParentEv>
   18804:	4603      	mov	r3, r0
   18806:	4618      	mov	r0, r3
   18808:	f7f8 f8ee 	bl	109e8 <_ZN5Etape9getNumeroEv>
   1880c:	4602      	mov	r2, r0
   1880e:	68fb      	ldr	r3, [r7, #12]
   18810:	429a      	cmp	r2, r3
   18812:	bf14      	ite	ne
   18814:	2300      	movne	r3, #0
   18816:	2301      	moveq	r3, #1
   18818:	b2db      	uxtb	r3, r3
   1881a:	2b00      	cmp	r3, #0
   1881c:	d016      	beq.n	1884c <_ZN11StrategieV318updateIntermedaireEv+0x8c>
    {
        #ifndef ROBOTHW
            qDebug() << "la prochaine étape est le goal\n";
        #endif
        this->statusStrat = 1;
   1881e:	687a      	ldr	r2, [r7, #4]
   18820:	f04f 0301 	mov.w	r3, #1	; 0x1
   18824:	6413      	str	r3, [r2, #64]
   18826:	e011      	b.n	1884c <_ZN11StrategieV318updateIntermedaireEv+0x8c>
    while(((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero())) != etapeOuOnVientDArriver)
    {
        #ifndef ROBOTHW
        qDebug() << "On cherche l'étape suivant vers l'etape - but" << this->etapeEnCours << "\n";
        #endif
        this->etapeEnCours = ((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero()));
   18828:	687b      	ldr	r3, [r7, #4]
   1882a:	6b1a      	ldr	r2, [r3, #48]
   1882c:	687b      	ldr	r3, [r7, #4]
   1882e:	699b      	ldr	r3, [r3, #24]
   18830:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18834:	4413      	add	r3, r2
   18836:	681b      	ldr	r3, [r3, #0]
   18838:	4618      	mov	r0, r3
   1883a:	f7f8 f83f 	bl	108bc <_ZN5Etape9getParentEv>
   1883e:	4603      	mov	r3, r0
   18840:	4618      	mov	r0, r3
   18842:	f7f8 f8d1 	bl	109e8 <_ZN5Etape9getNumeroEv>
   18846:	4602      	mov	r2, r0
   18848:	687b      	ldr	r3, [r7, #4]
   1884a:	619a      	str	r2, [r3, #24]
        #endif
        this->statusStrat = 1;
    }

    //On cherche l'étape suivant vers l'etape - but
    while(((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero())) != etapeOuOnVientDArriver)
   1884c:	687b      	ldr	r3, [r7, #4]
   1884e:	6b1a      	ldr	r2, [r3, #48]
   18850:	687b      	ldr	r3, [r7, #4]
   18852:	699b      	ldr	r3, [r3, #24]
   18854:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18858:	4413      	add	r3, r2
   1885a:	681b      	ldr	r3, [r3, #0]
   1885c:	4618      	mov	r0, r3
   1885e:	f7f8 f82d 	bl	108bc <_ZN5Etape9getParentEv>
   18862:	4603      	mov	r3, r0
   18864:	4618      	mov	r0, r3
   18866:	f7f8 f8bf 	bl	109e8 <_ZN5Etape9getNumeroEv>
   1886a:	4602      	mov	r2, r0
   1886c:	68fb      	ldr	r3, [r7, #12]
   1886e:	429a      	cmp	r2, r3
   18870:	bf0c      	ite	eq
   18872:	2300      	moveq	r3, #0
   18874:	2301      	movne	r3, #1
   18876:	b2db      	uxtb	r3, r3
   18878:	2b00      	cmp	r3, #0
   1887a:	d1d5      	bne.n	18828 <_ZN11StrategieV318updateIntermedaireEv+0x68>
        qDebug() << "On cherche l'étape suivant vers l'etape - but" << this->etapeEnCours << "\n";
        #endif
        this->etapeEnCours = ((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero()));
    }

    if(this->statusStrat == 1)
   1887c:	687b      	ldr	r3, [r7, #4]
   1887e:	6c1b      	ldr	r3, [r3, #64]
   18880:	2b01      	cmp	r3, #1
   18882:	d10b      	bne.n	1889c <_ZN11StrategieV318updateIntermedaireEv+0xdc>
    {
        //On réalise l'action de l'étape - but
        StrategieV2::addTemporaryAction(actionEtape[this->etapeEnCours]);
   18884:	687b      	ldr	r3, [r7, #4]
   18886:	6a5a      	ldr	r2, [r3, #36]
   18888:	687b      	ldr	r3, [r7, #4]
   1888a:	699b      	ldr	r3, [r3, #24]
   1888c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18890:	4413      	add	r3, r2
   18892:	681b      	ldr	r3, [r3, #0]
   18894:	4618      	mov	r0, r3
   18896:	f7ff f809 	bl	178ac <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>
   1889a:	e00d      	b.n	188b8 <_ZN11StrategieV318updateIntermedaireEv+0xf8>
    }
    else
    {
        //On ajoute l'action d'aller en ligne droite vers cette étape intermédiaire
        StrategieV2::addTemporaryAction(&actionGoto[this->etapeEnCours]);
   1889c:	687b      	ldr	r3, [r7, #4]
   1889e:	6a99      	ldr	r1, [r3, #40]
   188a0:	687b      	ldr	r3, [r7, #4]
   188a2:	699b      	ldr	r3, [r3, #24]
   188a4:	ea4f 1203 	mov.w	r2, r3, lsl #4
   188a8:	ea4f 0382 	mov.w	r3, r2, lsl #2
   188ac:	ebc2 0303 	rsb	r3, r2, r3
   188b0:	440b      	add	r3, r1
   188b2:	4618      	mov	r0, r3
   188b4:	f7fe fffa 	bl	178ac <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>
    }
}
   188b8:	f107 0718 	add.w	r7, r7, #24	; 0x18
   188bc:	46bd      	mov	sp, r7
   188be:	bd80      	pop	{r7, pc}

000188c0 <_ZN11StrategieV315resetEverythingEv>:
        }
    }
    return this->statusStrat;
}

void StrategieV3::resetEverything(){
   188c0:	b580      	push	{r7, lr}
   188c2:	b084      	sub	sp, #16
   188c4:	af00      	add	r7, sp, #0
   188c6:	6078      	str	r0, [r7, #4]
    for(int i = 0 ; i < 10 ; i++){
   188c8:	f04f 0300 	mov.w	r3, #0	; 0x0
   188cc:	60fb      	str	r3, [r7, #12]
   188ce:	e00f      	b.n	188f0 <_ZN11StrategieV315resetEverythingEv+0x30>
        this->tableauEtapes[i]->setState(0);
   188d0:	687b      	ldr	r3, [r7, #4]
   188d2:	6b1a      	ldr	r2, [r3, #48]
   188d4:	68fb      	ldr	r3, [r7, #12]
   188d6:	ea4f 0383 	mov.w	r3, r3, lsl #2
   188da:	4413      	add	r3, r2
   188dc:	681b      	ldr	r3, [r3, #0]
   188de:	4618      	mov	r0, r3
   188e0:	f04f 0100 	mov.w	r1, #0	; 0x0
   188e4:	f7f8 f816 	bl	10914 <_ZN5Etape8setStateEi>
    }
    return this->statusStrat;
}

void StrategieV3::resetEverything(){
    for(int i = 0 ; i < 10 ; i++){
   188e8:	68fb      	ldr	r3, [r7, #12]
   188ea:	f103 0301 	add.w	r3, r3, #1	; 0x1
   188ee:	60fb      	str	r3, [r7, #12]
   188f0:	68fb      	ldr	r3, [r7, #12]
   188f2:	2b09      	cmp	r3, #9
   188f4:	ddec      	ble.n	188d0 <_ZN11StrategieV315resetEverythingEv+0x10>
        this->tableauEtapes[i]->setState(0);
    }
}
   188f6:	f107 0710 	add.w	r7, r7, #16	; 0x10
   188fa:	46bd      	mov	sp, r7
   188fc:	bd80      	pop	{r7, pc}
   188fe:	46c0      	nop			(mov r8, r8)

00018900 <_ZN11StrategieV36updateEv>:
    */


}

int StrategieV3::update()
   18900:	b580      	push	{r7, lr}
   18902:	b08e      	sub	sp, #56
   18904:	af00      	add	r7, sp, #0
   18906:	60f8      	str	r0, [r7, #12]
{

    this->actionEtape[this->etapeEnCours]->reset();
   18908:	68fb      	ldr	r3, [r7, #12]
   1890a:	6a5a      	ldr	r2, [r3, #36]
   1890c:	68fb      	ldr	r3, [r7, #12]
   1890e:	699b      	ldr	r3, [r3, #24]
   18910:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18914:	4413      	add	r3, r2
   18916:	681b      	ldr	r3, [r3, #0]
   18918:	681b      	ldr	r3, [r3, #0]
   1891a:	f103 0314 	add.w	r3, r3, #20	; 0x14
   1891e:	6819      	ldr	r1, [r3, #0]
   18920:	68fb      	ldr	r3, [r7, #12]
   18922:	6a5a      	ldr	r2, [r3, #36]
   18924:	68fb      	ldr	r3, [r7, #12]
   18926:	699b      	ldr	r3, [r3, #24]
   18928:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1892c:	4413      	add	r3, r2
   1892e:	681b      	ldr	r3, [r3, #0]
   18930:	4618      	mov	r0, r3
   18932:	4788      	blx	r1
    this->actionGoto[this->etapeEnCours].reset();
   18934:	68fb      	ldr	r3, [r7, #12]
   18936:	6a99      	ldr	r1, [r3, #40]
   18938:	68fb      	ldr	r3, [r7, #12]
   1893a:	699b      	ldr	r3, [r3, #24]
   1893c:	ea4f 1203 	mov.w	r2, r3, lsl #4
   18940:	ea4f 0382 	mov.w	r3, r2, lsl #2
   18944:	ebc2 0303 	rsb	r3, r2, r3
   18948:	440b      	add	r3, r1
   1894a:	681b      	ldr	r3, [r3, #0]
   1894c:	f103 0314 	add.w	r3, r3, #20	; 0x14
   18950:	f8d3 c000 	ldr.w	ip, [r3]
   18954:	68fb      	ldr	r3, [r7, #12]
   18956:	6a99      	ldr	r1, [r3, #40]
   18958:	68fb      	ldr	r3, [r7, #12]
   1895a:	699b      	ldr	r3, [r3, #24]
   1895c:	ea4f 1203 	mov.w	r2, r3, lsl #4
   18960:	ea4f 0382 	mov.w	r3, r2, lsl #2
   18964:	ebc2 0303 	rsb	r3, r2, r3
   18968:	440b      	add	r3, r1
   1896a:	4618      	mov	r0, r3
   1896c:	47e0      	blx	ip



    //Si on est en train d'éviter, on revient à l'étape précédente, et on marque l'étape comme à éviter
    if(this->avoiding)
   1896e:	68fb      	ldr	r3, [r7, #12]
   18970:	f893 3038 	ldrb.w	r3, [r3, #56]
   18974:	2b00      	cmp	r3, #0
   18976:	f000 80cf 	beq.w	18b18 <_ZN11StrategieV36updateEv+0x218>
    {
        this->tableauEtapes[this->etapeEnCours]->robotVu();
   1897a:	68fb      	ldr	r3, [r7, #12]
   1897c:	6b1a      	ldr	r2, [r3, #48]
   1897e:	68fb      	ldr	r3, [r7, #12]
   18980:	699b      	ldr	r3, [r3, #24]
   18982:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18986:	4413      	add	r3, r2
   18988:	681b      	ldr	r3, [r3, #0]
   1898a:	4618      	mov	r0, r3
   1898c:	f7f8 f854 	bl	10a38 <_ZN5Etape7robotVuEv>
        //this->tableauEtapes[this->etapeEnCours]->setState(-2);
        this->tableauEtapes[etapeEnCours]->getParent()->setParent(this->tableauEtapes[this->etapeEnCours]);
   18990:	68fb      	ldr	r3, [r7, #12]
   18992:	6b1a      	ldr	r2, [r3, #48]
   18994:	68fb      	ldr	r3, [r7, #12]
   18996:	699b      	ldr	r3, [r3, #24]
   18998:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1899c:	4413      	add	r3, r2
   1899e:	681b      	ldr	r3, [r3, #0]
   189a0:	4618      	mov	r0, r3
   189a2:	f7f7 ff8b 	bl	108bc <_ZN5Etape9getParentEv>
   189a6:	4601      	mov	r1, r0
   189a8:	68fb      	ldr	r3, [r7, #12]
   189aa:	6b1a      	ldr	r2, [r3, #48]
   189ac:	68fb      	ldr	r3, [r7, #12]
   189ae:	699b      	ldr	r3, [r3, #24]
   189b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   189b4:	4413      	add	r3, r2
   189b6:	681b      	ldr	r3, [r3, #0]
   189b8:	4608      	mov	r0, r1
   189ba:	4619      	mov	r1, r3
   189bc:	f7f7 ffd2 	bl	10964 <_ZN5Etape9setParentEPS_>
        this->etapeEnCours = this->tableauEtapes[etapeEnCours]->getParent()->getNumero();
   189c0:	68fb      	ldr	r3, [r7, #12]
   189c2:	6b1a      	ldr	r2, [r3, #48]
   189c4:	68fb      	ldr	r3, [r7, #12]
   189c6:	699b      	ldr	r3, [r3, #24]
   189c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   189cc:	4413      	add	r3, r2
   189ce:	681b      	ldr	r3, [r3, #0]
   189d0:	4618      	mov	r0, r3
   189d2:	f7f7 ff73 	bl	108bc <_ZN5Etape9getParentEv>
   189d6:	4603      	mov	r3, r0
   189d8:	4618      	mov	r0, r3
   189da:	f7f8 f805 	bl	109e8 <_ZN5Etape9getNumeroEv>
   189de:	4602      	mov	r2, r0
   189e0:	68fb      	ldr	r3, [r7, #12]
   189e2:	619a      	str	r2, [r3, #24]



        //On recalcul les distances par rapport à l'étape où l'on vient d'arriver
        dijkstra->setEtapeCourante(this->etapeEnCours);
   189e4:	68fb      	ldr	r3, [r7, #12]
   189e6:	6ada      	ldr	r2, [r3, #44]
   189e8:	68fb      	ldr	r3, [r7, #12]
   189ea:	699b      	ldr	r3, [r3, #24]
   189ec:	4610      	mov	r0, r2
   189ee:	4619      	mov	r1, r3
   189f0:	f7f7 fbc2 	bl	10178 <_ZN8Dijkstra16setEtapeCouranteEi>

        if(this->enTrainEviterReculant)
   189f4:	68fb      	ldr	r3, [r7, #12]
   189f6:	f893 3044 	ldrb.w	r3, [r3, #68]
   189fa:	2b00      	cmp	r3, #0
   189fc:	d01a      	beq.n	18a34 <_ZN11StrategieV36updateEv+0x134>
        {
            this->enTrainEviterReculant = false;
   189fe:	68fa      	ldr	r2, [r7, #12]
   18a00:	f04f 0300 	mov.w	r3, #0	; 0x0
   18a04:	f882 3044 	strb.w	r3, [r2, #68]
            this->enTrainEviterAvancant = true;
   18a08:	68fa      	ldr	r2, [r7, #12]
   18a0a:	f04f 0301 	mov.w	r3, #1	; 0x1
   18a0e:	f882 3045 	strb.w	r3, [r2, #69]
            actionGoto[etapeEnCours].setGoBack(false);
   18a12:	68fb      	ldr	r3, [r7, #12]
   18a14:	6a99      	ldr	r1, [r3, #40]
   18a16:	68fb      	ldr	r3, [r7, #12]
   18a18:	699b      	ldr	r3, [r3, #24]
   18a1a:	ea4f 1203 	mov.w	r2, r3, lsl #4
   18a1e:	ea4f 0382 	mov.w	r3, r2, lsl #2
   18a22:	ebc2 0303 	rsb	r3, r2, r3
   18a26:	440b      	add	r3, r1
   18a28:	4618      	mov	r0, r3
   18a2a:	f04f 0100 	mov.w	r1, #0	; 0x0
   18a2e:	f7fd ff5b 	bl	168e8 <_ZN17MediumLevelAction9setGoBackEb>
   18a32:	e019      	b.n	18a68 <_ZN11StrategieV36updateEv+0x168>
            //actionEtape[etapeEnCours]->setGoBack(false);
        }
        else
        {
            this->enTrainEviterReculant = true;
   18a34:	68fa      	ldr	r2, [r7, #12]
   18a36:	f04f 0301 	mov.w	r3, #1	; 0x1
   18a3a:	f882 3044 	strb.w	r3, [r2, #68]
            this->enTrainEviterAvancant = false;
   18a3e:	68fa      	ldr	r2, [r7, #12]
   18a40:	f04f 0300 	mov.w	r3, #0	; 0x0
   18a44:	f882 3045 	strb.w	r3, [r2, #69]
            actionGoto[etapeEnCours].setGoBack(true);
   18a48:	68fb      	ldr	r3, [r7, #12]
   18a4a:	6a99      	ldr	r1, [r3, #40]
   18a4c:	68fb      	ldr	r3, [r7, #12]
   18a4e:	699b      	ldr	r3, [r3, #24]
   18a50:	ea4f 1203 	mov.w	r2, r3, lsl #4
   18a54:	ea4f 0382 	mov.w	r3, r2, lsl #2
   18a58:	ebc2 0303 	rsb	r3, r2, r3
   18a5c:	440b      	add	r3, r1
   18a5e:	4618      	mov	r0, r3
   18a60:	f04f 0101 	mov.w	r1, #1	; 0x1
   18a64:	f7fd ff40 	bl	168e8 <_ZN17MediumLevelAction9setGoBackEb>
            //actionEtape[etapeEnCours]->setGoBack(true);
        }

        StrategieV2::addTemporaryAction(&actionGoto[etapeEnCours]);
   18a68:	68fb      	ldr	r3, [r7, #12]
   18a6a:	6a99      	ldr	r1, [r3, #40]
   18a6c:	68fb      	ldr	r3, [r7, #12]
   18a6e:	699b      	ldr	r3, [r3, #24]
   18a70:	ea4f 1203 	mov.w	r2, r3, lsl #4
   18a74:	ea4f 0382 	mov.w	r3, r2, lsl #2
   18a78:	ebc2 0303 	rsb	r3, r2, r3
   18a7c:	440b      	add	r3, r1
   18a7e:	4618      	mov	r0, r3
   18a80:	f7fe ff14 	bl	178ac <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>
        //StrategieV2::addTemporaryAction(actionEtape[etapeEnCours]);
        //dijkstra->setEtapeCourante((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero()));
        if(dijkstra->run() != 0)
   18a84:	68fb      	ldr	r3, [r7, #12]
   18a86:	6adb      	ldr	r3, [r3, #44]
   18a88:	4618      	mov	r0, r3
   18a8a:	f7f7 fde7 	bl	1065c <_ZN8Dijkstra3runEv>
   18a8e:	4603      	mov	r3, r0
   18a90:	2b00      	cmp	r3, #0
   18a92:	bf0c      	ite	eq
   18a94:	2300      	moveq	r3, #0
   18a96:	2301      	movne	r3, #1
   18a98:	b2db      	uxtb	r3, r3
   18a9a:	2b00      	cmp	r3, #0
   18a9c:	d032      	beq.n	18b04 <_ZN11StrategieV36updateEv+0x204>
        {
            // Si run renvoit autre chose que 0, c'est que l'étape en cours a changée.
            // Cela arrive pour débloquer le robot
            //Etape* ancienneEtape = this->tableauEtapes[this->etapeEnCours];
            //this->etapeEnCours = this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero();
            this->actionEtape[this->etapeEnCours]->reset();
   18a9e:	68fb      	ldr	r3, [r7, #12]
   18aa0:	6a5a      	ldr	r2, [r3, #36]
   18aa2:	68fb      	ldr	r3, [r7, #12]
   18aa4:	699b      	ldr	r3, [r3, #24]
   18aa6:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18aaa:	4413      	add	r3, r2
   18aac:	681b      	ldr	r3, [r3, #0]
   18aae:	681b      	ldr	r3, [r3, #0]
   18ab0:	f103 0314 	add.w	r3, r3, #20	; 0x14
   18ab4:	6819      	ldr	r1, [r3, #0]
   18ab6:	68fb      	ldr	r3, [r7, #12]
   18ab8:	6a5a      	ldr	r2, [r3, #36]
   18aba:	68fb      	ldr	r3, [r7, #12]
   18abc:	699b      	ldr	r3, [r3, #24]
   18abe:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18ac2:	4413      	add	r3, r2
   18ac4:	681b      	ldr	r3, [r3, #0]
   18ac6:	4618      	mov	r0, r3
   18ac8:	4788      	blx	r1
            this->actionGoto[this->etapeEnCours].reset();
   18aca:	68fb      	ldr	r3, [r7, #12]
   18acc:	6a99      	ldr	r1, [r3, #40]
   18ace:	68fb      	ldr	r3, [r7, #12]
   18ad0:	699b      	ldr	r3, [r3, #24]
   18ad2:	ea4f 1203 	mov.w	r2, r3, lsl #4
   18ad6:	ea4f 0382 	mov.w	r3, r2, lsl #2
   18ada:	ebc2 0303 	rsb	r3, r2, r3
   18ade:	440b      	add	r3, r1
   18ae0:	681b      	ldr	r3, [r3, #0]
   18ae2:	f103 0314 	add.w	r3, r3, #20	; 0x14
   18ae6:	f8d3 c000 	ldr.w	ip, [r3]
   18aea:	68fb      	ldr	r3, [r7, #12]
   18aec:	6a99      	ldr	r1, [r3, #40]
   18aee:	68fb      	ldr	r3, [r7, #12]
   18af0:	699b      	ldr	r3, [r3, #24]
   18af2:	ea4f 1203 	mov.w	r2, r3, lsl #4
   18af6:	ea4f 0382 	mov.w	r3, r2, lsl #2
   18afa:	ebc2 0303 	rsb	r3, r2, r3
   18afe:	440b      	add	r3, r1
   18b00:	4618      	mov	r0, r3
   18b02:	47e0      	blx	ip
        }

        //On retourne à l'étape intermédiaire précédente, en marche arrière

        this->avoiding = false;
   18b04:	68fa      	ldr	r2, [r7, #12]
   18b06:	f04f 0300 	mov.w	r3, #0	; 0x0
   18b0a:	f882 3038 	strb.w	r3, [r2, #56]
        statusStrat=1;
   18b0e:	68fa      	ldr	r2, [r7, #12]
   18b10:	f04f 0301 	mov.w	r3, #1	; 0x1
   18b14:	6413      	str	r3, [r2, #64]
   18b16:	e181      	b.n	18e1c <_ZN11StrategieV36updateEv+0x51c>
    }
    else
    {
        //On reset toute les directions à aller en marche avant
        for(int i = 0 ; i < this->nombreEtapes ; i++)
   18b18:	f04f 0300 	mov.w	r3, #0	; 0x0
   18b1c:	613b      	str	r3, [r7, #16]
   18b1e:	e01e      	b.n	18b5e <_ZN11StrategieV36updateEv+0x25e>
        {
            actionGoto[i].setGoBack(false);
   18b20:	68fb      	ldr	r3, [r7, #12]
   18b22:	6a99      	ldr	r1, [r3, #40]
   18b24:	693b      	ldr	r3, [r7, #16]
   18b26:	ea4f 1203 	mov.w	r2, r3, lsl #4
   18b2a:	ea4f 0382 	mov.w	r3, r2, lsl #2
   18b2e:	ebc2 0303 	rsb	r3, r2, r3
   18b32:	440b      	add	r3, r1
   18b34:	4618      	mov	r0, r3
   18b36:	f04f 0100 	mov.w	r1, #0	; 0x0
   18b3a:	f7fd fed5 	bl	168e8 <_ZN17MediumLevelAction9setGoBackEb>
            actionEtape[i]->setGoBack(false);
   18b3e:	68fb      	ldr	r3, [r7, #12]
   18b40:	6a5a      	ldr	r2, [r3, #36]
   18b42:	693b      	ldr	r3, [r7, #16]
   18b44:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18b48:	4413      	add	r3, r2
   18b4a:	681b      	ldr	r3, [r3, #0]
   18b4c:	4618      	mov	r0, r3
   18b4e:	f04f 0100 	mov.w	r1, #0	; 0x0
   18b52:	f7fd fec9 	bl	168e8 <_ZN17MediumLevelAction9setGoBackEb>
        statusStrat=1;
    }
    else
    {
        //On reset toute les directions à aller en marche avant
        for(int i = 0 ; i < this->nombreEtapes ; i++)
   18b56:	693b      	ldr	r3, [r7, #16]
   18b58:	f103 0301 	add.w	r3, r3, #1	; 0x1
   18b5c:	613b      	str	r3, [r7, #16]
   18b5e:	68fb      	ldr	r3, [r7, #12]
   18b60:	69da      	ldr	r2, [r3, #28]
   18b62:	693b      	ldr	r3, [r7, #16]
   18b64:	429a      	cmp	r2, r3
   18b66:	dcdb      	bgt.n	18b20 <_ZN11StrategieV36updateEv+0x220>
        {
            actionGoto[i].setGoBack(false);
            actionEtape[i]->setGoBack(false);
        }
        this->enTrainEviterReculant = false;
   18b68:	68fa      	ldr	r2, [r7, #12]
   18b6a:	f04f 0300 	mov.w	r3, #0	; 0x0
   18b6e:	f882 3044 	strb.w	r3, [r2, #68]
        this->enTrainEviterAvancant = false;
   18b72:	68fa      	ldr	r2, [r7, #12]
   18b74:	f04f 0300 	mov.w	r3, #0	; 0x0
   18b78:	f882 3045 	strb.w	r3, [r2, #69]

        if(this->statusStrat==2)//Si on vient d'arriver à une étape intermédiare
   18b7c:	68fb      	ldr	r3, [r7, #12]
   18b7e:	6c1b      	ldr	r3, [r3, #64]
   18b80:	2b02      	cmp	r3, #2
   18b82:	d103      	bne.n	18b8c <_ZN11StrategieV36updateEv+0x28c>
        {
            this->updateIntermedaire();
   18b84:	68f8      	ldr	r0, [r7, #12]
   18b86:	f7ff fe1b 	bl	187c0 <_ZN11StrategieV318updateIntermedaireEv>
   18b8a:	e147      	b.n	18e1c <_ZN11StrategieV36updateEv+0x51c>
        }
        else//Sinon, statusStrat==1, et il faut donc choisir un nouvel objectif
        {
            // Si on n'était pas en train d'éviter
            if(!(enTrainEviterReculant || enTrainEviterAvancant))
   18b8c:	68fb      	ldr	r3, [r7, #12]
   18b8e:	f893 3044 	ldrb.w	r3, [r3, #68]
   18b92:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   18b96:	b2db      	uxtb	r3, r3
   18b98:	2b00      	cmp	r3, #0
   18b9a:	d054      	beq.n	18c46 <_ZN11StrategieV36updateEv+0x346>
   18b9c:	68fb      	ldr	r3, [r7, #12]
   18b9e:	f893 3045 	ldrb.w	r3, [r3, #69]
   18ba2:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   18ba6:	b2db      	uxtb	r3, r3
   18ba8:	2b00      	cmp	r3, #0
   18baa:	d04c      	beq.n	18c46 <_ZN11StrategieV36updateEv+0x346>
            {
                //L'objectif qu'on vient de remplir est maintenant un simple point de passage
                //this->tableauEtapes[this->etapeEnCours]->finir();//Vieux, on utilise maintenant updateStock dans la strat de l'année en cours
                //Idem pour les autres étapes correspondant au même objectif
                for(int etapeLiee = 0 ; etapeLiee < this->tableauEtapes[this->etapeEnCours]->getNombreEtapesLieesParFinirEtape() ; etapeLiee++)
   18bac:	f04f 0300 	mov.w	r3, #0	; 0x0
   18bb0:	62bb      	str	r3, [r7, #40]
   18bb2:	e01f      	b.n	18bf4 <_ZN11StrategieV36updateEv+0x2f4>
                {
                    int numeroEtapeLiee = this->tableauEtapes[this->etapeEnCours]->getEtapesLieesParFinirEtape()[etapeLiee];
   18bb4:	68fb      	ldr	r3, [r7, #12]
   18bb6:	6b1a      	ldr	r2, [r3, #48]
   18bb8:	68fb      	ldr	r3, [r7, #12]
   18bba:	699b      	ldr	r3, [r3, #24]
   18bbc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18bc0:	4413      	add	r3, r2
   18bc2:	681b      	ldr	r3, [r3, #0]
   18bc4:	4618      	mov	r0, r3
   18bc6:	f7f7 ff83 	bl	10ad0 <_ZN5Etape27getEtapesLieesParFinirEtapeEv>
   18bca:	4602      	mov	r2, r0
   18bcc:	6abb      	ldr	r3, [r7, #40]
   18bce:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18bd2:	4413      	add	r3, r2
   18bd4:	681b      	ldr	r3, [r3, #0]
   18bd6:	62fb      	str	r3, [r7, #44]
                    this->tableauEtapes[numeroEtapeLiee]->finir();
   18bd8:	68fb      	ldr	r3, [r7, #12]
   18bda:	6b1a      	ldr	r2, [r3, #48]
   18bdc:	6afb      	ldr	r3, [r7, #44]
   18bde:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18be2:	4413      	add	r3, r2
   18be4:	681b      	ldr	r3, [r3, #0]
   18be6:	4618      	mov	r0, r3
   18be8:	f7f7 ff98 	bl	10b1c <_ZN5Etape5finirEv>
            if(!(enTrainEviterReculant || enTrainEviterAvancant))
            {
                //L'objectif qu'on vient de remplir est maintenant un simple point de passage
                //this->tableauEtapes[this->etapeEnCours]->finir();//Vieux, on utilise maintenant updateStock dans la strat de l'année en cours
                //Idem pour les autres étapes correspondant au même objectif
                for(int etapeLiee = 0 ; etapeLiee < this->tableauEtapes[this->etapeEnCours]->getNombreEtapesLieesParFinirEtape() ; etapeLiee++)
   18bec:	6abb      	ldr	r3, [r7, #40]
   18bee:	f103 0301 	add.w	r3, r3, #1	; 0x1
   18bf2:	62bb      	str	r3, [r7, #40]
   18bf4:	68fb      	ldr	r3, [r7, #12]
   18bf6:	6b1a      	ldr	r2, [r3, #48]
   18bf8:	68fb      	ldr	r3, [r7, #12]
   18bfa:	699b      	ldr	r3, [r3, #24]
   18bfc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18c00:	4413      	add	r3, r2
   18c02:	681b      	ldr	r3, [r3, #0]
   18c04:	4618      	mov	r0, r3
   18c06:	f7f7 ff7d 	bl	10b04 <_ZN5Etape33getNombreEtapesLieesParFinirEtapeEv>
   18c0a:	4602      	mov	r2, r0
   18c0c:	6abb      	ldr	r3, [r7, #40]
   18c0e:	429a      	cmp	r2, r3
   18c10:	bfd4      	ite	le
   18c12:	2300      	movle	r3, #0
   18c14:	2301      	movgt	r3, #1
   18c16:	b2db      	uxtb	r3, r3
   18c18:	2b00      	cmp	r3, #0
   18c1a:	d1cb      	bne.n	18bb4 <_ZN11StrategieV36updateEv+0x2b4>
                    int numeroEtapeLiee = this->tableauEtapes[this->etapeEnCours]->getEtapesLieesParFinirEtape()[etapeLiee];
                    this->tableauEtapes[numeroEtapeLiee]->finir();
                }

                //Mise à jour du stock et l'objectif qu'on vient de remplir est maintenant un simple point de passage
                this->updateStock();
   18c1c:	68fb      	ldr	r3, [r7, #12]
   18c1e:	681b      	ldr	r3, [r3, #0]
   18c20:	f103 0318 	add.w	r3, r3, #24	; 0x18
   18c24:	681b      	ldr	r3, [r3, #0]
   18c26:	68f8      	ldr	r0, [r7, #12]
   18c28:	4798      	blx	r3

                //On est maintenant arrivé à l'étape de fin de l'action (en général c'est la même étape, mais pas toujours, ex : les claps de 2015)
                this->etapeEnCours = this->tableauEtapes[this->etapeEnCours]->getNumeroEtapeFinAction();
   18c2a:	68fb      	ldr	r3, [r7, #12]
   18c2c:	6b1a      	ldr	r2, [r3, #48]
   18c2e:	68fb      	ldr	r3, [r7, #12]
   18c30:	699b      	ldr	r3, [r3, #24]
   18c32:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18c36:	4413      	add	r3, r2
   18c38:	681b      	ldr	r3, [r3, #0]
   18c3a:	4618      	mov	r0, r3
   18c3c:	f7f7 ffa8 	bl	10b90 <_ZN5Etape23getNumeroEtapeFinActionEv>
   18c40:	4602      	mov	r2, r0
   18c42:	68fb      	ldr	r3, [r7, #12]
   18c44:	619a      	str	r2, [r3, #24]
            }


            int score = 0;
   18c46:	f04f 0300 	mov.w	r3, #0	; 0x0
   18c4a:	617b      	str	r3, [r7, #20]
            bool resteDesChosesAFaire = updateScores();
   18c4c:	68f8      	ldr	r0, [r7, #12]
   18c4e:	f7ff fd39 	bl	186c4 <_ZN11StrategieV312updateScoresEv>
   18c52:	4603      	mov	r3, r0
   18c54:	76fb      	strb	r3, [r7, #27]

            // S'il n'y a plus d'objectif dans tout le graphe, on se replit vers une position où on ne bloque pas l'adversaire.
            // Sinon, il y a risque de prendre un avertissement pour anti-jeu (évité de peu pour le premier match de Krabi 2014)
            if(!resteDesChosesAFaire)
   18c56:	7efb      	ldrb	r3, [r7, #27]
   18c58:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   18c5c:	b2db      	uxtb	r3, r3
   18c5e:	2b00      	cmp	r3, #0
   18c60:	d03c      	beq.n	18cdc <_ZN11StrategieV36updateEv+0x3dc>
            {
                for(int i = 0 ; i < this->nombreEtapes ; i++)
   18c62:	f04f 0300 	mov.w	r3, #0	; 0x0
   18c66:	633b      	str	r3, [r7, #48]
   18c68:	e00d      	b.n	18c86 <_ZN11StrategieV36updateEv+0x386>
                {
                    this->tableauEtapesTotal[i]->oublieRobotVu();
   18c6a:	68fb      	ldr	r3, [r7, #12]
   18c6c:	6b5a      	ldr	r2, [r3, #52]
   18c6e:	6b3b      	ldr	r3, [r7, #48]
   18c70:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18c74:	4413      	add	r3, r2
   18c76:	681b      	ldr	r3, [r3, #0]
   18c78:	4618      	mov	r0, r3
   18c7a:	f7f7 fef5 	bl	10a68 <_ZN5Etape13oublieRobotVuEv>

            // S'il n'y a plus d'objectif dans tout le graphe, on se replit vers une position où on ne bloque pas l'adversaire.
            // Sinon, il y a risque de prendre un avertissement pour anti-jeu (évité de peu pour le premier match de Krabi 2014)
            if(!resteDesChosesAFaire)
            {
                for(int i = 0 ; i < this->nombreEtapes ; i++)
   18c7e:	6b3b      	ldr	r3, [r7, #48]
   18c80:	f103 0301 	add.w	r3, r3, #1	; 0x1
   18c84:	633b      	str	r3, [r7, #48]
   18c86:	68fb      	ldr	r3, [r7, #12]
   18c88:	69da      	ldr	r2, [r3, #28]
   18c8a:	6b3b      	ldr	r3, [r7, #48]
   18c8c:	429a      	cmp	r2, r3
   18c8e:	dcec      	bgt.n	18c6a <_ZN11StrategieV36updateEv+0x36a>
                {
                    this->tableauEtapesTotal[i]->oublieRobotVu();
                }
                resteDesChosesAFaire = updateScores();
   18c90:	68f8      	ldr	r0, [r7, #12]
   18c92:	f7ff fd17 	bl	186c4 <_ZN11StrategieV312updateScoresEv>
   18c96:	4603      	mov	r3, r0
   18c98:	76fb      	strb	r3, [r7, #27]

                //S'il n'y a VRAIMENT plus rien à faire
                if(!resteDesChosesAFaire)
   18c9a:	7efb      	ldrb	r3, [r7, #27]
   18c9c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   18ca0:	b2db      	uxtb	r3, r3
   18ca2:	2b00      	cmp	r3, #0
   18ca4:	d01a      	beq.n	18cdc <_ZN11StrategieV36updateEv+0x3dc>
                {
                    //Si on est au garage, on s'arrête
                    if(this->etapeEnCours == this->numeroEtapeGarage)
   18ca6:	68fb      	ldr	r3, [r7, #12]
   18ca8:	699a      	ldr	r2, [r3, #24]
   18caa:	68fb      	ldr	r3, [r7, #12]
   18cac:	6a1b      	ldr	r3, [r3, #32]
   18cae:	429a      	cmp	r2, r3
   18cb0:	d107      	bne.n	18cc2 <_ZN11StrategieV36updateEv+0x3c2>
                    {
                        this->statusStrat=-1;//Plus rien à faire, on passe à l'action suivante de stratégieV2
   18cb2:	68fb      	ldr	r3, [r7, #12]
   18cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18cb8:	641a      	str	r2, [r3, #64]
                        return this->statusStrat;
   18cba:	68fb      	ldr	r3, [r7, #12]
   18cbc:	6c1b      	ldr	r3, [r3, #64]
   18cbe:	607b      	str	r3, [r7, #4]
   18cc0:	e0af      	b.n	18e22 <_ZN11StrategieV36updateEv+0x522>
                    }
                    else
                    {
                        //Sinon on y va
                        this->tableauEtapes[this->numeroEtapeGarage]->setScore(1000);
   18cc2:	68fb      	ldr	r3, [r7, #12]
   18cc4:	6b1a      	ldr	r2, [r3, #48]
   18cc6:	68fb      	ldr	r3, [r7, #12]
   18cc8:	6a1b      	ldr	r3, [r3, #32]
   18cca:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18cce:	4413      	add	r3, r2
   18cd0:	681b      	ldr	r3, [r3, #0]
   18cd2:	4618      	mov	r0, r3
   18cd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   18cd8:	f7f7 ff32 	bl	10b40 <_ZN5Etape8setScoreEi>
                }

            }

            //On recalcul les distances par rapport à l'étape où l'on vient d'arriver
            dijkstra->setEtapeCourante(this->etapeEnCours);
   18cdc:	68fb      	ldr	r3, [r7, #12]
   18cde:	6ada      	ldr	r2, [r3, #44]
   18ce0:	68fb      	ldr	r3, [r7, #12]
   18ce2:	699b      	ldr	r3, [r3, #24]
   18ce4:	4610      	mov	r0, r2
   18ce6:	4619      	mov	r1, r3
   18ce8:	f7f7 fa46 	bl	10178 <_ZN8Dijkstra16setEtapeCouranteEi>
            if(dijkstra->run() != 0)
   18cec:	68fb      	ldr	r3, [r7, #12]
   18cee:	6adb      	ldr	r3, [r3, #44]
   18cf0:	4618      	mov	r0, r3
   18cf2:	f7f7 fcb3 	bl	1065c <_ZN8Dijkstra3runEv>
   18cf6:	4603      	mov	r3, r0
   18cf8:	2b00      	cmp	r3, #0
   18cfa:	bf0c      	ite	eq
   18cfc:	2300      	moveq	r3, #0
   18cfe:	2301      	movne	r3, #1
   18d00:	b2db      	uxtb	r3, r3
   18d02:	2b00      	cmp	r3, #0
   18d04:	d015      	beq.n	18d32 <_ZN11StrategieV36updateEv+0x432>
            {
                // Si run renvoit autre chose que 0, c'est que l'étape en cours a changée.
                // Cela arrive pour débloquer le robot
                //Etape* ancienneEtape = this->tableauEtapes[this->etapeEnCours];
                //this->etapeEnCours = this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero();
                this->actionEtape[this->etapeEnCours]->reset();
   18d06:	68fb      	ldr	r3, [r7, #12]
   18d08:	6a5a      	ldr	r2, [r3, #36]
   18d0a:	68fb      	ldr	r3, [r7, #12]
   18d0c:	699b      	ldr	r3, [r3, #24]
   18d0e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18d12:	4413      	add	r3, r2
   18d14:	681b      	ldr	r3, [r3, #0]
   18d16:	681b      	ldr	r3, [r3, #0]
   18d18:	f103 0314 	add.w	r3, r3, #20	; 0x14
   18d1c:	6819      	ldr	r1, [r3, #0]
   18d1e:	68fb      	ldr	r3, [r7, #12]
   18d20:	6a5a      	ldr	r2, [r3, #36]
   18d22:	68fb      	ldr	r3, [r7, #12]
   18d24:	699b      	ldr	r3, [r3, #24]
   18d26:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18d2a:	4413      	add	r3, r2
   18d2c:	681b      	ldr	r3, [r3, #0]
   18d2e:	4618      	mov	r0, r3
   18d30:	4788      	blx	r1
            }

            //On sélectionne l'objectif le plus prometteur : pas trop loin et qui rapporte
            int meilleurEtape = -1;
   18d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18d36:	61fb      	str	r3, [r7, #28]
            int scoreMaxi = -100000;
   18d38:	4b3d      	ldr	r3, [pc, #244]	(18e30 <_ZN11StrategieV36updateEv+0x530>)
   18d3a:	623b      	str	r3, [r7, #32]

            int scoreTypeEtape = 0;
   18d3c:	f04f 0300 	mov.w	r3, #0	; 0x0
   18d40:	627b      	str	r3, [r7, #36]
            for(int i = 0 ; i < this->nombreEtapes ; i++)
   18d42:	f04f 0300 	mov.w	r3, #0	; 0x0
   18d46:	637b      	str	r3, [r7, #52]
   18d48:	e044      	b.n	18dd4 <_ZN11StrategieV36updateEv+0x4d4>
            {
                scoreTypeEtape = this->tableauEtapes[i]->getScore();
   18d4a:	68fb      	ldr	r3, [r7, #12]
   18d4c:	6b1a      	ldr	r2, [r3, #48]
   18d4e:	6b7b      	ldr	r3, [r7, #52]
   18d50:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18d54:	4413      	add	r3, r2
   18d56:	681b      	ldr	r3, [r3, #0]
   18d58:	4618      	mov	r0, r3
   18d5a:	f7f7 feff 	bl	10b5c <_ZN5Etape8getScoreEv>
   18d5e:	4603      	mov	r3, r0
   18d60:	627b      	str	r3, [r7, #36]
        //        score = modificateurTemporel*(10000-this->tableauEtapes[i]->getDistance() + scoreTypeEtape);
                score = (10000-this->tableauEtapes[i]->getDistance() + scoreTypeEtape);
   18d62:	68fb      	ldr	r3, [r7, #12]
   18d64:	6b1a      	ldr	r2, [r3, #48]
   18d66:	6b7b      	ldr	r3, [r7, #52]
   18d68:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18d6c:	4413      	add	r3, r2
   18d6e:	681b      	ldr	r3, [r3, #0]
   18d70:	4618      	mov	r0, r3
   18d72:	f7f7 fddd 	bl	10930 <_ZN5Etape11getDistanceEv>
   18d76:	4603      	mov	r3, r0
   18d78:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
   18d7c:	f103 0310 	add.w	r3, r3, #16	; 0x10
   18d80:	6a7a      	ldr	r2, [r7, #36]
   18d82:	4413      	add	r3, r2
   18d84:	617b      	str	r3, [r7, #20]
                if((scoreMaxi < score) && scoreTypeEtape && (this->tableauEtapes[i]->getDistance() != -1))
   18d86:	6a3a      	ldr	r2, [r7, #32]
   18d88:	697b      	ldr	r3, [r7, #20]
   18d8a:	429a      	cmp	r2, r3
   18d8c:	da14      	bge.n	18db8 <_ZN11StrategieV36updateEv+0x4b8>
   18d8e:	6a7b      	ldr	r3, [r7, #36]
   18d90:	2b00      	cmp	r3, #0
   18d92:	d011      	beq.n	18db8 <_ZN11StrategieV36updateEv+0x4b8>
   18d94:	68fb      	ldr	r3, [r7, #12]
   18d96:	6b1a      	ldr	r2, [r3, #48]
   18d98:	6b7b      	ldr	r3, [r7, #52]
   18d9a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   18d9e:	4413      	add	r3, r2
   18da0:	681b      	ldr	r3, [r3, #0]
   18da2:	4618      	mov	r0, r3
   18da4:	f7f7 fdc4 	bl	10930 <_ZN5Etape11getDistanceEv>
   18da8:	4603      	mov	r3, r0
   18daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   18dae:	d003      	beq.n	18db8 <_ZN11StrategieV36updateEv+0x4b8>
   18db0:	f04f 0301 	mov.w	r3, #1	; 0x1
   18db4:	60bb      	str	r3, [r7, #8]
   18db6:	e002      	b.n	18dbe <_ZN11StrategieV36updateEv+0x4be>
   18db8:	f04f 0300 	mov.w	r3, #0	; 0x0
   18dbc:	60bb      	str	r3, [r7, #8]
   18dbe:	68bb      	ldr	r3, [r7, #8]
   18dc0:	2b00      	cmp	r3, #0
   18dc2:	d003      	beq.n	18dcc <_ZN11StrategieV36updateEv+0x4cc>
                {
                    scoreMaxi = score;
   18dc4:	697b      	ldr	r3, [r7, #20]
   18dc6:	623b      	str	r3, [r7, #32]
                    meilleurEtape = i;
   18dc8:	6b7b      	ldr	r3, [r7, #52]
   18dca:	61fb      	str	r3, [r7, #28]
            //On sélectionne l'objectif le plus prometteur : pas trop loin et qui rapporte
            int meilleurEtape = -1;
            int scoreMaxi = -100000;

            int scoreTypeEtape = 0;
            for(int i = 0 ; i < this->nombreEtapes ; i++)
   18dcc:	6b7b      	ldr	r3, [r7, #52]
   18dce:	f103 0301 	add.w	r3, r3, #1	; 0x1
   18dd2:	637b      	str	r3, [r7, #52]
   18dd4:	68fb      	ldr	r3, [r7, #12]
   18dd6:	69da      	ldr	r2, [r3, #28]
   18dd8:	6b7b      	ldr	r3, [r7, #52]
   18dda:	429a      	cmp	r2, r3
   18ddc:	dcb5      	bgt.n	18d4a <_ZN11StrategieV36updateEv+0x44a>
                    scoreMaxi = score;
                    meilleurEtape = i;
                }
            }

            if(meilleurEtape==-1)
   18dde:	69fb      	ldr	r3, [r7, #28]
   18de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   18de4:	d110      	bne.n	18e08 <_ZN11StrategieV36updateEv+0x508>
            {
                if(this->etapeEnCours == this->numeroEtapeGarage)
   18de6:	68fb      	ldr	r3, [r7, #12]
   18de8:	699a      	ldr	r2, [r3, #24]
   18dea:	68fb      	ldr	r3, [r7, #12]
   18dec:	6a1b      	ldr	r3, [r3, #32]
   18dee:	429a      	cmp	r2, r3
   18df0:	d107      	bne.n	18e02 <_ZN11StrategieV36updateEv+0x502>
                {
                    this->statusStrat=-1;//Plus rien à faire, on passe à l'action suivante de stratégieV2
   18df2:	68fb      	ldr	r3, [r7, #12]
   18df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18df8:	641a      	str	r2, [r3, #64]
                    return this->statusStrat;
   18dfa:	68fb      	ldr	r3, [r7, #12]
   18dfc:	6c1b      	ldr	r3, [r3, #64]
   18dfe:	607b      	str	r3, [r7, #4]
   18e00:	e00f      	b.n	18e22 <_ZN11StrategieV36updateEv+0x522>
                }
                else
                {
                    meilleurEtape = this->numeroEtapeGarage;
   18e02:	68fb      	ldr	r3, [r7, #12]
   18e04:	6a1b      	ldr	r3, [r3, #32]
   18e06:	61fb      	str	r3, [r7, #28]
            /*if(this->tableauEtapes[meilleurEtape]->getEtapeType()==Etape::DEPOSE_FRUIT)
            {
                this->nombreFruitsTransporte++;
            }*/

            this->goal = meilleurEtape;
   18e08:	68fa      	ldr	r2, [r7, #12]
   18e0a:	69fb      	ldr	r3, [r7, #28]
   18e0c:	63d3      	str	r3, [r2, #60]
            this->statusStrat = 2;//Jusqu'à preuve du contraire, la prochaine étape est une étape intermédiaire
   18e0e:	68fa      	ldr	r2, [r7, #12]
   18e10:	f04f 0302 	mov.w	r3, #2	; 0x2
   18e14:	6413      	str	r3, [r2, #64]
            this->updateIntermedaire();//On y va
   18e16:	68f8      	ldr	r0, [r7, #12]
   18e18:	f7ff fcd2 	bl	187c0 <_ZN11StrategieV318updateIntermedaireEv>
        }
    }
    return this->statusStrat;
   18e1c:	68fb      	ldr	r3, [r7, #12]
   18e1e:	6c1b      	ldr	r3, [r3, #64]
   18e20:	607b      	str	r3, [r7, #4]
   18e22:	687b      	ldr	r3, [r7, #4]
}
   18e24:	4618      	mov	r0, r3
   18e26:	f107 0738 	add.w	r7, r7, #56	; 0x38
   18e2a:	46bd      	mov	sp, r7
   18e2c:	bd80      	pop	{r7, pc}
   18e2e:	46c0      	nop			(mov r8, r8)
   18e30:	fffe7960 	.word	0xfffe7960

00018e34 <_ZN11StrategieV3C1Eb>:
#ifndef ROBOTHW
    #include <QDebug>
#endif
//#include <iostream>

StrategieV3::StrategieV3(bool isBlue) : MediumLevelAction()
   18e34:	b590      	push	{r4, r7, lr}
   18e36:	b085      	sub	sp, #20
   18e38:	af00      	add	r7, sp, #0
   18e3a:	6078      	str	r0, [r7, #4]
   18e3c:	460b      	mov	r3, r1
   18e3e:	70fb      	strb	r3, [r7, #3]
   18e40:	687c      	ldr	r4, [r7, #4]
   18e42:	f107 0308 	add.w	r3, r7, #8	; 0x8
   18e46:	4618      	mov	r0, r3
   18e48:	4917      	ldr	r1, [pc, #92]	(18ea8 <_ZN11StrategieV3C1Eb+0x74>)
   18e4a:	4a17      	ldr	r2, [pc, #92]	(18ea8 <_ZN11StrategieV3C1Eb+0x74>)
   18e4c:	f04f 0301 	mov.w	r3, #1	; 0x1
   18e50:	f7f5 ffd0 	bl	edf4 <_ZN8PositionC1Effb>
   18e54:	4620      	mov	r0, r4
   18e56:	f107 0308 	add.w	r3, r7, #8	; 0x8
   18e5a:	e893 0006 	ldmia.w	r3, {r1, r2}
   18e5e:	f7fd fdd9 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   18e62:	687a      	ldr	r2, [r7, #4]
   18e64:	4b11      	ldr	r3, [pc, #68]	(18eac <_ZN11StrategieV3C1Eb+0x78>)
   18e66:	6013      	str	r3, [r2, #0]
{
    this->avoiding = false;
   18e68:	687a      	ldr	r2, [r7, #4]
   18e6a:	f04f 0300 	mov.w	r3, #0	; 0x0
   18e6e:	f882 3038 	strb.w	r3, [r2, #56]
    this->etapeEnCours = 0;
   18e72:	687a      	ldr	r2, [r7, #4]
   18e74:	f04f 0300 	mov.w	r3, #0	; 0x0
   18e78:	6193      	str	r3, [r2, #24]
    this->statusStrat=1;
   18e7a:	687a      	ldr	r2, [r7, #4]
   18e7c:	f04f 0301 	mov.w	r3, #1	; 0x1
   18e80:	6413      	str	r3, [r2, #64]
    this->enTrainEviterReculant = false;
   18e82:	687a      	ldr	r2, [r7, #4]
   18e84:	f04f 0300 	mov.w	r3, #0	; 0x0
   18e88:	f882 3044 	strb.w	r3, [r2, #68]
    this->enTrainEviterAvancant = false;
   18e8c:	687a      	ldr	r2, [r7, #4]
   18e8e:	f04f 0300 	mov.w	r3, #0	; 0x0
   18e92:	f882 3045 	strb.w	r3, [r2, #69]
    this->millisecondesRestantes = 90 * 1000;
   18e96:	687a      	ldr	r2, [r7, #4]
   18e98:	4b05      	ldr	r3, [pc, #20]	(18eb0 <_ZN11StrategieV3C1Eb+0x7c>)
   18e9a:	6153      	str	r3, [r2, #20]
    this->tableauEtapes[30]->setDistances(tableauDistances30);
#endif
    */


}
   18e9c:	687b      	ldr	r3, [r7, #4]
   18e9e:	4618      	mov	r0, r3
   18ea0:	f107 0714 	add.w	r7, r7, #20	; 0x14
   18ea4:	46bd      	mov	sp, r7
   18ea6:	bd90      	pop	{r4, r7, pc}
   18ea8:	00000000 	.word	0x00000000
   18eac:	000241f8 	.word	0x000241f8
   18eb0:	00015f90 	.word	0x00015f90

00018eb4 <_ZN11StrategieV3C2Eb>:
#ifndef ROBOTHW
    #include <QDebug>
#endif
//#include <iostream>

StrategieV3::StrategieV3(bool isBlue) : MediumLevelAction()
   18eb4:	b590      	push	{r4, r7, lr}
   18eb6:	b085      	sub	sp, #20
   18eb8:	af00      	add	r7, sp, #0
   18eba:	6078      	str	r0, [r7, #4]
   18ebc:	460b      	mov	r3, r1
   18ebe:	70fb      	strb	r3, [r7, #3]
   18ec0:	687c      	ldr	r4, [r7, #4]
   18ec2:	f107 0308 	add.w	r3, r7, #8	; 0x8
   18ec6:	4618      	mov	r0, r3
   18ec8:	4917      	ldr	r1, [pc, #92]	(18f28 <_ZN11StrategieV3C2Eb+0x74>)
   18eca:	4a17      	ldr	r2, [pc, #92]	(18f28 <_ZN11StrategieV3C2Eb+0x74>)
   18ecc:	f04f 0301 	mov.w	r3, #1	; 0x1
   18ed0:	f7f5 ff90 	bl	edf4 <_ZN8PositionC1Effb>
   18ed4:	4620      	mov	r0, r4
   18ed6:	f107 0308 	add.w	r3, r7, #8	; 0x8
   18eda:	e893 0006 	ldmia.w	r3, {r1, r2}
   18ede:	f7fd fd99 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   18ee2:	687a      	ldr	r2, [r7, #4]
   18ee4:	4b11      	ldr	r3, [pc, #68]	(18f2c <_ZN11StrategieV3C2Eb+0x78>)
   18ee6:	6013      	str	r3, [r2, #0]
{
    this->avoiding = false;
   18ee8:	687a      	ldr	r2, [r7, #4]
   18eea:	f04f 0300 	mov.w	r3, #0	; 0x0
   18eee:	f882 3038 	strb.w	r3, [r2, #56]
    this->etapeEnCours = 0;
   18ef2:	687a      	ldr	r2, [r7, #4]
   18ef4:	f04f 0300 	mov.w	r3, #0	; 0x0
   18ef8:	6193      	str	r3, [r2, #24]
    this->statusStrat=1;
   18efa:	687a      	ldr	r2, [r7, #4]
   18efc:	f04f 0301 	mov.w	r3, #1	; 0x1
   18f00:	6413      	str	r3, [r2, #64]
    this->enTrainEviterReculant = false;
   18f02:	687a      	ldr	r2, [r7, #4]
   18f04:	f04f 0300 	mov.w	r3, #0	; 0x0
   18f08:	f882 3044 	strb.w	r3, [r2, #68]
    this->enTrainEviterAvancant = false;
   18f0c:	687a      	ldr	r2, [r7, #4]
   18f0e:	f04f 0300 	mov.w	r3, #0	; 0x0
   18f12:	f882 3045 	strb.w	r3, [r2, #69]
    this->millisecondesRestantes = 90 * 1000;
   18f16:	687a      	ldr	r2, [r7, #4]
   18f18:	4b05      	ldr	r3, [pc, #20]	(18f30 <_ZN11StrategieV3C2Eb+0x7c>)
   18f1a:	6153      	str	r3, [r2, #20]
    this->tableauEtapes[30]->setDistances(tableauDistances30);
#endif
    */


}
   18f1c:	687b      	ldr	r3, [r7, #4]
   18f1e:	4618      	mov	r0, r3
   18f20:	f107 0714 	add.w	r7, r7, #20	; 0x14
   18f24:	46bd      	mov	sp, r7
   18f26:	bd90      	pop	{r4, r7, pc}
   18f28:	00000000 	.word	0x00000000
   18f2c:	000241f8 	.word	0x000241f8
   18f30:	00015f90 	.word	0x00015f90

00018f34 <_ZN5Tapis6updateEv>:
}


Tapis::~Tapis(){}

int Tapis::update()
   18f34:	b580      	push	{r7, lr}
   18f36:	b084      	sub	sp, #16
   18f38:	af02      	add	r7, sp, #8
   18f3a:	6078      	str	r0, [r7, #4]
{

    if (status == 0)
   18f3c:	687b      	ldr	r3, [r7, #4]
   18f3e:	68db      	ldr	r3, [r3, #12]
   18f40:	2b00      	cmp	r3, #0
   18f42:	d106      	bne.n	18f52 <_ZN5Tapis6updateEv+0x1e>
    {
#ifndef ROBOTHW
                qDebug() << "tapis";
#endif
        status++;
   18f44:	687b      	ldr	r3, [r7, #4]
   18f46:	68db      	ldr	r3, [r3, #12]
   18f48:	f103 0201 	add.w	r2, r3, #1	; 0x1
   18f4c:	687b      	ldr	r3, [r7, #4]
   18f4e:	60da      	str	r2, [r3, #12]
   18f50:	e0db      	b.n	1910a <_ZN5Tapis6updateEv+0x1d6>
    }

    else if (status == 1)
   18f52:	687b      	ldr	r3, [r7, #4]
   18f54:	68db      	ldr	r3, [r3, #12]
   18f56:	2b01      	cmp	r3, #1
   18f58:	d114      	bne.n	18f84 <_ZN5Tapis6updateEv+0x50>
    {
        StrategieV2::setCurrentGoal(goalPosition, goBack);
   18f5a:	687b      	ldr	r3, [r7, #4]
   18f5c:	f893 c010 	ldrb.w	ip, [r3, #16]
   18f60:	687a      	ldr	r2, [r7, #4]
   18f62:	4b6d      	ldr	r3, [pc, #436]	(19118 <_ZN5Tapis6updateEv+0x1e4>)
   18f64:	9300      	str	r3, [sp, #0]
   18f66:	f102 0304 	add.w	r3, r2, #4	; 0x4
   18f6a:	e893 0003 	ldmia.w	r3, {r0, r1}
   18f6e:	4662      	mov	r2, ip
   18f70:	4b6a      	ldr	r3, [pc, #424]	(1911c <_ZN5Tapis6updateEv+0x1e8>)
   18f72:	f7fe feff 	bl	17d74 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
   18f76:	687b      	ldr	r3, [r7, #4]
   18f78:	68db      	ldr	r3, [r3, #12]
   18f7a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   18f7e:	687b      	ldr	r3, [r7, #4]
   18f80:	60da      	str	r2, [r3, #12]
   18f82:	e0c2      	b.n	1910a <_ZN5Tapis6updateEv+0x1d6>
    }

    else if (status == 2)
   18f84:	687b      	ldr	r3, [r7, #4]
   18f86:	68db      	ldr	r3, [r3, #12]
   18f88:	2b02      	cmp	r3, #2
   18f8a:	d11a      	bne.n	18fc2 <_ZN5Tapis6updateEv+0x8e>
    {
        if (Command::isNear(goalPosition))
   18f8c:	687b      	ldr	r3, [r7, #4]
   18f8e:	f103 0304 	add.w	r3, r3, #4	; 0x4
   18f92:	e893 0003 	ldmia.w	r3, {r0, r1}
   18f96:	4a62      	ldr	r2, [pc, #392]	(19120 <_ZN5Tapis6updateEv+0x1ec>)
   18f98:	f7ef f9cc 	bl	8334 <_ZN7Command6isNearE8Positionf>
   18f9c:	4603      	mov	r3, r0
   18f9e:	2b00      	cmp	r3, #0
   18fa0:	f000 80b3 	beq.w	1910a <_ZN5Tapis6updateEv+0x1d6>
        {
            StrategieV2::lookAt(positionLookAt);
   18fa4:	687b      	ldr	r3, [r7, #4]
   18fa6:	f103 0320 	add.w	r3, r3, #32	; 0x20
   18faa:	e893 0003 	ldmia.w	r3, {r0, r1}
   18fae:	4a5d      	ldr	r2, [pc, #372]	(19124 <_ZN5Tapis6updateEv+0x1f0>)
   18fb0:	f7fe fe48 	bl	17c44 <_ZN11StrategieV26lookAtE8Positionf>
            status++;
   18fb4:	687b      	ldr	r3, [r7, #4]
   18fb6:	68db      	ldr	r3, [r3, #12]
   18fb8:	f103 0201 	add.w	r2, r3, #1	; 0x1
   18fbc:	687b      	ldr	r3, [r7, #4]
   18fbe:	60da      	str	r2, [r3, #12]
   18fc0:	e0a3      	b.n	1910a <_ZN5Tapis6updateEv+0x1d6>
        }
    }

    else if (status == 3)
   18fc2:	687b      	ldr	r3, [r7, #4]
   18fc4:	68db      	ldr	r3, [r3, #12]
   18fc6:	2b03      	cmp	r3, #3
   18fc8:	d11c      	bne.n	19004 <_ZN5Tapis6updateEv+0xd0>
    {
        if (Command::isLookingAt(positionLookAt))
   18fca:	687b      	ldr	r3, [r7, #4]
   18fcc:	f103 0320 	add.w	r3, r3, #32	; 0x20
   18fd0:	e893 0003 	ldmia.w	r3, {r0, r1}
   18fd4:	4a54      	ldr	r2, [pc, #336]	(19128 <_ZN5Tapis6updateEv+0x1f4>)
   18fd6:	f7ef f8f1 	bl	81bc <_ZN7Command11isLookingAtE8Positionf>
   18fda:	4603      	mov	r3, r0
   18fdc:	2b00      	cmp	r3, #0
   18fde:	f000 8094 	beq.w	1910a <_ZN5Tapis6updateEv+0x1d6>
            //ouvrir le bras
#ifndef ROBOTHW
            qDebug() << "On ouvre le bras";
#endif

            BrasTapis::getSingleton(cote)->ouvrirBras();
   18fe2:	687b      	ldr	r3, [r7, #4]
   18fe4:	f893 3028 	ldrb.w	r3, [r3, #40]
   18fe8:	4618      	mov	r0, r3
   18fea:	f7ec fb21 	bl	5630 <_ZN9BrasTapis12getSingletonENS_4COTEE>
   18fee:	4603      	mov	r3, r0
   18ff0:	4618      	mov	r0, r3
   18ff2:	f7ec fb0b 	bl	560c <_ZN9BrasTapis10ouvrirBrasEv>
            status++;
   18ff6:	687b      	ldr	r3, [r7, #4]
   18ff8:	68db      	ldr	r3, [r3, #12]
   18ffa:	f103 0201 	add.w	r2, r3, #1	; 0x1
   18ffe:	687b      	ldr	r3, [r7, #4]
   19000:	60da      	str	r2, [r3, #12]
   19002:	e082      	b.n	1910a <_ZN5Tapis6updateEv+0x1d6>
        }
    }

    else if ((status <= 23) && (status > -1 ))    //On attend que les bras du robot s'ouvrent : 50ms par incrémentation du status
   19004:	687b      	ldr	r3, [r7, #4]
   19006:	68db      	ldr	r3, [r3, #12]
   19008:	2b17      	cmp	r3, #23
   1900a:	dc0a      	bgt.n	19022 <_ZN5Tapis6updateEv+0xee>
   1900c:	687b      	ldr	r3, [r7, #4]
   1900e:	68db      	ldr	r3, [r3, #12]
   19010:	2b00      	cmp	r3, #0
   19012:	db06      	blt.n	19022 <_ZN5Tapis6updateEv+0xee>
    {
        status++;
   19014:	687b      	ldr	r3, [r7, #4]
   19016:	68db      	ldr	r3, [r3, #12]
   19018:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1901c:	687b      	ldr	r3, [r7, #4]
   1901e:	60da      	str	r2, [r3, #12]
   19020:	e073      	b.n	1910a <_ZN5Tapis6updateEv+0x1d6>
    }

    else if (status == 24)
   19022:	687b      	ldr	r3, [r7, #4]
   19024:	68db      	ldr	r3, [r3, #12]
   19026:	2b18      	cmp	r3, #24
   19028:	d110      	bne.n	1904c <_ZN5Tapis6updateEv+0x118>
    {
        //lacher les tapis
#ifndef ROBOTHW
        qDebug() << "On ouvre les pinces pour lacher les tapis";
#endif
        BrasTapis::getSingleton(cote)->ouvrirPince();
   1902a:	687b      	ldr	r3, [r7, #4]
   1902c:	f893 3028 	ldrb.w	r3, [r3, #40]
   19030:	4618      	mov	r0, r3
   19032:	f7ec fafd 	bl	5630 <_ZN9BrasTapis12getSingletonENS_4COTEE>
   19036:	4603      	mov	r3, r0
   19038:	4618      	mov	r0, r3
   1903a:	f7ec fa1d 	bl	5478 <_ZN9BrasTapis11ouvrirPinceEv>
        status++;
   1903e:	687b      	ldr	r3, [r7, #4]
   19040:	68db      	ldr	r3, [r3, #12]
   19042:	f103 0201 	add.w	r2, r3, #1	; 0x1
   19046:	687b      	ldr	r3, [r7, #4]
   19048:	60da      	str	r2, [r3, #12]
   1904a:	e05e      	b.n	1910a <_ZN5Tapis6updateEv+0x1d6>
    }

    else if ((status <= 44) && (status > -1 ))    //On attend que la pince s'ouvre
   1904c:	687b      	ldr	r3, [r7, #4]
   1904e:	68db      	ldr	r3, [r3, #12]
   19050:	2b2c      	cmp	r3, #44
   19052:	dc0a      	bgt.n	1906a <_ZN5Tapis6updateEv+0x136>
   19054:	687b      	ldr	r3, [r7, #4]
   19056:	68db      	ldr	r3, [r3, #12]
   19058:	2b00      	cmp	r3, #0
   1905a:	db06      	blt.n	1906a <_ZN5Tapis6updateEv+0x136>
    {
        status++;
   1905c:	687b      	ldr	r3, [r7, #4]
   1905e:	68db      	ldr	r3, [r3, #12]
   19060:	f103 0201 	add.w	r2, r3, #1	; 0x1
   19064:	687b      	ldr	r3, [r7, #4]
   19066:	60da      	str	r2, [r3, #12]
   19068:	e04f      	b.n	1910a <_ZN5Tapis6updateEv+0x1d6>
    }

    else if (status == 45)
   1906a:	687b      	ldr	r3, [r7, #4]
   1906c:	68db      	ldr	r3, [r3, #12]
   1906e:	2b2d      	cmp	r3, #45
   19070:	d110      	bne.n	19094 <_ZN5Tapis6updateEv+0x160>
    {
        //fermer bras
#ifndef ROBOTHW
        qDebug() << "On ferme les Pinces";
#endif
        BrasTapis::getSingleton(cote)->fermerPince();
   19072:	687b      	ldr	r3, [r7, #4]
   19074:	f893 3028 	ldrb.w	r3, [r3, #40]
   19078:	4618      	mov	r0, r3
   1907a:	f7ec fad9 	bl	5630 <_ZN9BrasTapis12getSingletonENS_4COTEE>
   1907e:	4603      	mov	r3, r0
   19080:	4618      	mov	r0, r3
   19082:	f7ec f9dd 	bl	5440 <_ZN9BrasTapis11fermerPinceEv>
        status++;
   19086:	687b      	ldr	r3, [r7, #4]
   19088:	68db      	ldr	r3, [r3, #12]
   1908a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1908e:	687b      	ldr	r3, [r7, #4]
   19090:	60da      	str	r2, [r3, #12]
   19092:	e03a      	b.n	1910a <_ZN5Tapis6updateEv+0x1d6>
    }

    else if ((status <= 65) && (status > -1 ))    //On attend que la pince se ferme
   19094:	687b      	ldr	r3, [r7, #4]
   19096:	68db      	ldr	r3, [r3, #12]
   19098:	2b41      	cmp	r3, #65
   1909a:	dc0a      	bgt.n	190b2 <_ZN5Tapis6updateEv+0x17e>
   1909c:	687b      	ldr	r3, [r7, #4]
   1909e:	68db      	ldr	r3, [r3, #12]
   190a0:	2b00      	cmp	r3, #0
   190a2:	db06      	blt.n	190b2 <_ZN5Tapis6updateEv+0x17e>
    {
        status++;
   190a4:	687b      	ldr	r3, [r7, #4]
   190a6:	68db      	ldr	r3, [r3, #12]
   190a8:	f103 0201 	add.w	r2, r3, #1	; 0x1
   190ac:	687b      	ldr	r3, [r7, #4]
   190ae:	60da      	str	r2, [r3, #12]
   190b0:	e02b      	b.n	1910a <_ZN5Tapis6updateEv+0x1d6>
    }

    else if (status == 66)
   190b2:	687b      	ldr	r3, [r7, #4]
   190b4:	68db      	ldr	r3, [r3, #12]
   190b6:	2b42      	cmp	r3, #66
   190b8:	d110      	bne.n	190dc <_ZN5Tapis6updateEv+0x1a8>
    {
        //fermer bras
#ifndef ROBOTHW
        qDebug() << "On ferme le bras";
#endif
        BrasTapis::getSingleton(cote)->fermerBras();
   190ba:	687b      	ldr	r3, [r7, #4]
   190bc:	f893 3028 	ldrb.w	r3, [r3, #40]
   190c0:	4618      	mov	r0, r3
   190c2:	f7ec fab5 	bl	5630 <_ZN9BrasTapis12getSingletonENS_4COTEE>
   190c6:	4603      	mov	r3, r0
   190c8:	4618      	mov	r0, r3
   190ca:	f7ec f9f1 	bl	54b0 <_ZN9BrasTapis10fermerBrasEv>
        status++;
   190ce:	687b      	ldr	r3, [r7, #4]
   190d0:	68db      	ldr	r3, [r3, #12]
   190d2:	f103 0201 	add.w	r2, r3, #1	; 0x1
   190d6:	687b      	ldr	r3, [r7, #4]
   190d8:	60da      	str	r2, [r3, #12]
   190da:	e016      	b.n	1910a <_ZN5Tapis6updateEv+0x1d6>
    }

    else if ((status <= 87) && (status > -1))    //On attend que les bras se ferment.
   190dc:	687b      	ldr	r3, [r7, #4]
   190de:	68db      	ldr	r3, [r3, #12]
   190e0:	2b57      	cmp	r3, #87
   190e2:	dc0a      	bgt.n	190fa <_ZN5Tapis6updateEv+0x1c6>
   190e4:	687b      	ldr	r3, [r7, #4]
   190e6:	68db      	ldr	r3, [r3, #12]
   190e8:	2b00      	cmp	r3, #0
   190ea:	db06      	blt.n	190fa <_ZN5Tapis6updateEv+0x1c6>
    {
        status++;
   190ec:	687b      	ldr	r3, [r7, #4]
   190ee:	68db      	ldr	r3, [r3, #12]
   190f0:	f103 0201 	add.w	r2, r3, #1	; 0x1
   190f4:	687b      	ldr	r3, [r7, #4]
   190f6:	60da      	str	r2, [r3, #12]
   190f8:	e007      	b.n	1910a <_ZN5Tapis6updateEv+0x1d6>
    }

    else if (status == 88)
   190fa:	687b      	ldr	r3, [r7, #4]
   190fc:	68db      	ldr	r3, [r3, #12]
   190fe:	2b58      	cmp	r3, #88
   19100:	d103      	bne.n	1910a <_ZN5Tapis6updateEv+0x1d6>
    {
#ifndef ROBOTHW
        qDebug() << "Etape tapis finie";
#endif
        status = -1;
   19102:	687a      	ldr	r2, [r7, #4]
   19104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19108:	60d3      	str	r3, [r2, #12]
    }

    return status;
   1910a:	687b      	ldr	r3, [r7, #4]
   1910c:	68db      	ldr	r3, [r3, #12]
}
   1910e:	4618      	mov	r0, r3
   19110:	f107 0708 	add.w	r7, r7, #8	; 0x8
   19114:	46bd      	mov	sp, r7
   19116:	bd80      	pop	{r7, pc}
   19118:	c2c80000 	.word	0xc2c80000
   1911c:	40400000 	.word	0x40400000
   19120:	41f00000 	.word	0x41f00000
   19124:	3cf5c28f 	.word	0x3cf5c28f
   19128:	3db2b8c2 	.word	0x3db2b8c2

0001912c <_ZN5TapisD0Ev>:
        this->cote = BrasTapis::GAUCHE;
    };
}


Tapis::~Tapis(){}
   1912c:	b580      	push	{r7, lr}
   1912e:	b082      	sub	sp, #8
   19130:	af00      	add	r7, sp, #0
   19132:	6078      	str	r0, [r7, #4]
   19134:	687a      	ldr	r2, [r7, #4]
   19136:	4b0a      	ldr	r3, [pc, #40]	(19160 <_ZN5TapisD0Ev+0x34>)
   19138:	6013      	str	r3, [r2, #0]
   1913a:	687b      	ldr	r3, [r7, #4]
   1913c:	4618      	mov	r0, r3
   1913e:	f7fd fc29 	bl	16994 <_ZN17MediumLevelActionD2Ev>
   19142:	f04f 0301 	mov.w	r3, #1	; 0x1
   19146:	b2db      	uxtb	r3, r3
   19148:	2b00      	cmp	r3, #0
   1914a:	d002      	beq.n	19152 <_ZN5TapisD0Ev+0x26>
   1914c:	6878      	ldr	r0, [r7, #4]
   1914e:	f7f5 fd91 	bl	ec74 <_ZdlPv>
   19152:	687b      	ldr	r3, [r7, #4]
   19154:	4618      	mov	r0, r3
   19156:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1915a:	46bd      	mov	sp, r7
   1915c:	bd80      	pop	{r7, pc}
   1915e:	46c0      	nop			(mov r8, r8)
   19160:	00024220 	.word	0x00024220

00019164 <_ZN5TapisD1Ev>:
   19164:	b580      	push	{r7, lr}
   19166:	b082      	sub	sp, #8
   19168:	af00      	add	r7, sp, #0
   1916a:	6078      	str	r0, [r7, #4]
   1916c:	687a      	ldr	r2, [r7, #4]
   1916e:	4b0a      	ldr	r3, [pc, #40]	(19198 <_ZN5TapisD1Ev+0x34>)
   19170:	6013      	str	r3, [r2, #0]
   19172:	687b      	ldr	r3, [r7, #4]
   19174:	4618      	mov	r0, r3
   19176:	f7fd fc0d 	bl	16994 <_ZN17MediumLevelActionD2Ev>
   1917a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1917e:	b2db      	uxtb	r3, r3
   19180:	2b00      	cmp	r3, #0
   19182:	d002      	beq.n	1918a <_ZN5TapisD1Ev+0x26>
   19184:	6878      	ldr	r0, [r7, #4]
   19186:	f7f5 fd75 	bl	ec74 <_ZdlPv>
   1918a:	687b      	ldr	r3, [r7, #4]
   1918c:	4618      	mov	r0, r3
   1918e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   19192:	46bd      	mov	sp, r7
   19194:	bd80      	pop	{r7, pc}
   19196:	46c0      	nop			(mov r8, r8)
   19198:	00024220 	.word	0x00024220

0001919c <_ZN5TapisD2Ev>:
   1919c:	b580      	push	{r7, lr}
   1919e:	b082      	sub	sp, #8
   191a0:	af00      	add	r7, sp, #0
   191a2:	6078      	str	r0, [r7, #4]
   191a4:	687a      	ldr	r2, [r7, #4]
   191a6:	4b0a      	ldr	r3, [pc, #40]	(191d0 <_ZN5TapisD2Ev+0x34>)
   191a8:	6013      	str	r3, [r2, #0]
   191aa:	687b      	ldr	r3, [r7, #4]
   191ac:	4618      	mov	r0, r3
   191ae:	f7fd fbf1 	bl	16994 <_ZN17MediumLevelActionD2Ev>
   191b2:	f04f 0300 	mov.w	r3, #0	; 0x0
   191b6:	b2db      	uxtb	r3, r3
   191b8:	2b00      	cmp	r3, #0
   191ba:	d002      	beq.n	191c2 <_ZN5TapisD2Ev+0x26>
   191bc:	6878      	ldr	r0, [r7, #4]
   191be:	f7f5 fd59 	bl	ec74 <_ZdlPv>
   191c2:	687b      	ldr	r3, [r7, #4]
   191c4:	4618      	mov	r0, r3
   191c6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   191ca:	46bd      	mov	sp, r7
   191cc:	bd80      	pop	{r7, pc}
   191ce:	46c0      	nop			(mov r8, r8)
   191d0:	00024220 	.word	0x00024220

000191d4 <_ZN5TapisC1Ev>:

#ifndef ROBOTHW
#include <QDebug>
#endif

Tapis::Tapis(){}
   191d4:	b590      	push	{r4, r7, lr}
   191d6:	b085      	sub	sp, #20
   191d8:	af00      	add	r7, sp, #0
   191da:	6078      	str	r0, [r7, #4]
   191dc:	687c      	ldr	r4, [r7, #4]
   191de:	f107 0308 	add.w	r3, r7, #8	; 0x8
   191e2:	4618      	mov	r0, r3
   191e4:	4910      	ldr	r1, [pc, #64]	(19228 <_ZN5TapisC1Ev+0x54>)
   191e6:	4a10      	ldr	r2, [pc, #64]	(19228 <_ZN5TapisC1Ev+0x54>)
   191e8:	f04f 0301 	mov.w	r3, #1	; 0x1
   191ec:	f7f5 fe02 	bl	edf4 <_ZN8PositionC1Effb>
   191f0:	4620      	mov	r0, r4
   191f2:	f107 0308 	add.w	r3, r7, #8	; 0x8
   191f6:	e893 0006 	ldmia.w	r3, {r1, r2}
   191fa:	f7fd fc0b 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   191fe:	687a      	ldr	r2, [r7, #4]
   19200:	4b0a      	ldr	r3, [pc, #40]	(1922c <_ZN5TapisC1Ev+0x58>)
   19202:	6013      	str	r3, [r2, #0]
   19204:	687b      	ldr	r3, [r7, #4]
   19206:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1920a:	4618      	mov	r0, r3
   1920c:	f7f5 fdca 	bl	eda4 <_ZN8PositionC1Ev>
   19210:	687b      	ldr	r3, [r7, #4]
   19212:	f103 0320 	add.w	r3, r3, #32	; 0x20
   19216:	4618      	mov	r0, r3
   19218:	f7f5 fdc4 	bl	eda4 <_ZN8PositionC1Ev>
   1921c:	687b      	ldr	r3, [r7, #4]
   1921e:	4618      	mov	r0, r3
   19220:	f107 0714 	add.w	r7, r7, #20	; 0x14
   19224:	46bd      	mov	sp, r7
   19226:	bd90      	pop	{r4, r7, pc}
   19228:	00000000 	.word	0x00000000
   1922c:	00024220 	.word	0x00024220

00019230 <_ZN5TapisC2Ev>:
   19230:	b590      	push	{r4, r7, lr}
   19232:	b085      	sub	sp, #20
   19234:	af00      	add	r7, sp, #0
   19236:	6078      	str	r0, [r7, #4]
   19238:	687c      	ldr	r4, [r7, #4]
   1923a:	f107 0308 	add.w	r3, r7, #8	; 0x8
   1923e:	4618      	mov	r0, r3
   19240:	4910      	ldr	r1, [pc, #64]	(19284 <_ZN5TapisC2Ev+0x54>)
   19242:	4a10      	ldr	r2, [pc, #64]	(19284 <_ZN5TapisC2Ev+0x54>)
   19244:	f04f 0301 	mov.w	r3, #1	; 0x1
   19248:	f7f5 fdd4 	bl	edf4 <_ZN8PositionC1Effb>
   1924c:	4620      	mov	r0, r4
   1924e:	f107 0308 	add.w	r3, r7, #8	; 0x8
   19252:	e893 0006 	ldmia.w	r3, {r1, r2}
   19256:	f7fd fbdd 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   1925a:	687a      	ldr	r2, [r7, #4]
   1925c:	4b0a      	ldr	r3, [pc, #40]	(19288 <_ZN5TapisC2Ev+0x58>)
   1925e:	6013      	str	r3, [r2, #0]
   19260:	687b      	ldr	r3, [r7, #4]
   19262:	f103 0318 	add.w	r3, r3, #24	; 0x18
   19266:	4618      	mov	r0, r3
   19268:	f7f5 fd9c 	bl	eda4 <_ZN8PositionC1Ev>
   1926c:	687b      	ldr	r3, [r7, #4]
   1926e:	f103 0320 	add.w	r3, r3, #32	; 0x20
   19272:	4618      	mov	r0, r3
   19274:	f7f5 fd96 	bl	eda4 <_ZN8PositionC1Ev>
   19278:	687b      	ldr	r3, [r7, #4]
   1927a:	4618      	mov	r0, r3
   1927c:	f107 0714 	add.w	r7, r7, #20	; 0x14
   19280:	46bd      	mov	sp, r7
   19282:	bd90      	pop	{r4, r7, pc}
   19284:	00000000 	.word	0x00000000
   19288:	00024220 	.word	0x00024220

0001928c <_ZN5TapisC1E8Position>:

Tapis::Tapis(Position position):MediumLevelAction(position)  //si cote est true on veut poser le tapis droit, si non c'est le tapis gauche
   1928c:	b590      	push	{r4, r7, lr}
   1928e:	b08d      	sub	sp, #52
   19290:	af00      	add	r7, sp, #0
   19292:	60f8      	str	r0, [r7, #12]
   19294:	f107 0304 	add.w	r3, r7, #4	; 0x4
   19298:	e883 0006 	stmia.w	r3, {r1, r2}
   1929c:	68fb      	ldr	r3, [r7, #12]
   1929e:	4618      	mov	r0, r3
   192a0:	f107 0304 	add.w	r3, r7, #4	; 0x4
   192a4:	e893 0006 	ldmia.w	r3, {r1, r2}
   192a8:	f7fd fbb4 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   192ac:	68fa      	ldr	r2, [r7, #12]
   192ae:	4b36      	ldr	r3, [pc, #216]	(19388 <_ZN5TapisC1E8Position+0xfc>)
   192b0:	6013      	str	r3, [r2, #0]
   192b2:	68fb      	ldr	r3, [r7, #12]
   192b4:	f103 0318 	add.w	r3, r3, #24	; 0x18
   192b8:	4618      	mov	r0, r3
   192ba:	f7f5 fd73 	bl	eda4 <_ZN8PositionC1Ev>
   192be:	68fb      	ldr	r3, [r7, #12]
   192c0:	f103 0320 	add.w	r3, r3, #32	; 0x20
   192c4:	4618      	mov	r0, r3
   192c6:	f7f5 fd6d 	bl	eda4 <_ZN8PositionC1Ev>
{
    if (position == Position(1000, 750))
   192ca:	f107 0310 	add.w	r3, r7, #16	; 0x10
   192ce:	4618      	mov	r0, r3
   192d0:	492e      	ldr	r1, [pc, #184]	(1938c <_ZN5TapisC1E8Position+0x100>)
   192d2:	4a2f      	ldr	r2, [pc, #188]	(19390 <_ZN5TapisC1E8Position+0x104>)
   192d4:	f04f 0301 	mov.w	r3, #1	; 0x1
   192d8:	f7f5 fd8c 	bl	edf4 <_ZN8PositionC1Effb>
   192dc:	f107 0304 	add.w	r3, r7, #4	; 0x4
   192e0:	f107 0210 	add.w	r2, r7, #16	; 0x10
   192e4:	4618      	mov	r0, r3
   192e6:	4611      	mov	r1, r2
   192e8:	f7f5 fe80 	bl	efec <_ZNK8PositioneqERKS_>
   192ec:	4603      	mov	r3, r0
   192ee:	2b00      	cmp	r3, #0
   192f0:	d017      	beq.n	19322 <_ZN5TapisC1E8Position+0x96>
    {
        this->positionLookAt = Position(0, 300);
   192f2:	68fb      	ldr	r3, [r7, #12]
   192f4:	f103 0420 	add.w	r4, r3, #32	; 0x20
   192f8:	f107 0318 	add.w	r3, r7, #24	; 0x18
   192fc:	4618      	mov	r0, r3
   192fe:	4925      	ldr	r1, [pc, #148]	(19394 <_ZN5TapisC1E8Position+0x108>)
   19300:	4a25      	ldr	r2, [pc, #148]	(19398 <_ZN5TapisC1E8Position+0x10c>)
   19302:	f04f 0301 	mov.w	r3, #1	; 0x1
   19306:	f7f5 fd75 	bl	edf4 <_ZN8PositionC1Effb>
   1930a:	4620      	mov	r0, r4
   1930c:	f107 0318 	add.w	r3, r7, #24	; 0x18
   19310:	e893 0006 	ldmia.w	r3, {r1, r2}
   19314:	f7f5 fe02 	bl	ef1c <_ZN8PositionaSES_>
        this->cote = BrasTapis::DROIT;
   19318:	68fa      	ldr	r2, [r7, #12]
   1931a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1931e:	f882 3028 	strb.w	r3, [r2, #40]
    };
    if (position == Position(1450, 750))
   19322:	f107 0320 	add.w	r3, r7, #32	; 0x20
   19326:	4618      	mov	r0, r3
   19328:	491c      	ldr	r1, [pc, #112]	(1939c <_ZN5TapisC1E8Position+0x110>)
   1932a:	4a19      	ldr	r2, [pc, #100]	(19390 <_ZN5TapisC1E8Position+0x104>)
   1932c:	f04f 0301 	mov.w	r3, #1	; 0x1
   19330:	f7f5 fd60 	bl	edf4 <_ZN8PositionC1Effb>
   19334:	f107 0304 	add.w	r3, r7, #4	; 0x4
   19338:	f107 0220 	add.w	r2, r7, #32	; 0x20
   1933c:	4618      	mov	r0, r3
   1933e:	4611      	mov	r1, r2
   19340:	f7f5 fe54 	bl	efec <_ZNK8PositioneqERKS_>
   19344:	4603      	mov	r3, r0
   19346:	2b00      	cmp	r3, #0
   19348:	d017      	beq.n	1937a <_ZN5TapisC1E8Position+0xee>
    {
        this->positionLookAt = Position(3000, 200);
   1934a:	68fb      	ldr	r3, [r7, #12]
   1934c:	f103 0420 	add.w	r4, r3, #32	; 0x20
   19350:	f107 0328 	add.w	r3, r7, #40	; 0x28
   19354:	4618      	mov	r0, r3
   19356:	4912      	ldr	r1, [pc, #72]	(193a0 <_ZN5TapisC1E8Position+0x114>)
   19358:	4a12      	ldr	r2, [pc, #72]	(193a4 <_ZN5TapisC1E8Position+0x118>)
   1935a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1935e:	f7f5 fd49 	bl	edf4 <_ZN8PositionC1Effb>
   19362:	4620      	mov	r0, r4
   19364:	f107 0328 	add.w	r3, r7, #40	; 0x28
   19368:	e893 0006 	ldmia.w	r3, {r1, r2}
   1936c:	f7f5 fdd6 	bl	ef1c <_ZN8PositionaSES_>
        this->cote = BrasTapis::GAUCHE;
   19370:	68fa      	ldr	r2, [r7, #12]
   19372:	f04f 0301 	mov.w	r3, #1	; 0x1
   19376:	f882 3028 	strb.w	r3, [r2, #40]
    };
}
   1937a:	68fb      	ldr	r3, [r7, #12]
   1937c:	4618      	mov	r0, r3
   1937e:	f107 0734 	add.w	r7, r7, #52	; 0x34
   19382:	46bd      	mov	sp, r7
   19384:	bd90      	pop	{r4, r7, pc}
   19386:	46c0      	nop			(mov r8, r8)
   19388:	00024220 	.word	0x00024220
   1938c:	447a0000 	.word	0x447a0000
   19390:	443b8000 	.word	0x443b8000
   19394:	00000000 	.word	0x00000000
   19398:	43960000 	.word	0x43960000
   1939c:	44b54000 	.word	0x44b54000
   193a0:	453b8000 	.word	0x453b8000
   193a4:	43480000 	.word	0x43480000

000193a8 <_ZN5TapisC2E8Position>:
#include <QDebug>
#endif

Tapis::Tapis(){}

Tapis::Tapis(Position position):MediumLevelAction(position)  //si cote est true on veut poser le tapis droit, si non c'est le tapis gauche
   193a8:	b590      	push	{r4, r7, lr}
   193aa:	b08d      	sub	sp, #52
   193ac:	af00      	add	r7, sp, #0
   193ae:	60f8      	str	r0, [r7, #12]
   193b0:	f107 0304 	add.w	r3, r7, #4	; 0x4
   193b4:	e883 0006 	stmia.w	r3, {r1, r2}
   193b8:	68fb      	ldr	r3, [r7, #12]
   193ba:	4618      	mov	r0, r3
   193bc:	f107 0304 	add.w	r3, r7, #4	; 0x4
   193c0:	e893 0006 	ldmia.w	r3, {r1, r2}
   193c4:	f7fd fb26 	bl	16a14 <_ZN17MediumLevelActionC2E8Position>
   193c8:	68fa      	ldr	r2, [r7, #12]
   193ca:	4b36      	ldr	r3, [pc, #216]	(194a4 <_ZN5TapisC2E8Position+0xfc>)
   193cc:	6013      	str	r3, [r2, #0]
   193ce:	68fb      	ldr	r3, [r7, #12]
   193d0:	f103 0318 	add.w	r3, r3, #24	; 0x18
   193d4:	4618      	mov	r0, r3
   193d6:	f7f5 fce5 	bl	eda4 <_ZN8PositionC1Ev>
   193da:	68fb      	ldr	r3, [r7, #12]
   193dc:	f103 0320 	add.w	r3, r3, #32	; 0x20
   193e0:	4618      	mov	r0, r3
   193e2:	f7f5 fcdf 	bl	eda4 <_ZN8PositionC1Ev>
{
    if (position == Position(1000, 750))
   193e6:	f107 0310 	add.w	r3, r7, #16	; 0x10
   193ea:	4618      	mov	r0, r3
   193ec:	492e      	ldr	r1, [pc, #184]	(194a8 <_ZN5TapisC2E8Position+0x100>)
   193ee:	4a2f      	ldr	r2, [pc, #188]	(194ac <_ZN5TapisC2E8Position+0x104>)
   193f0:	f04f 0301 	mov.w	r3, #1	; 0x1
   193f4:	f7f5 fcfe 	bl	edf4 <_ZN8PositionC1Effb>
   193f8:	f107 0304 	add.w	r3, r7, #4	; 0x4
   193fc:	f107 0210 	add.w	r2, r7, #16	; 0x10
   19400:	4618      	mov	r0, r3
   19402:	4611      	mov	r1, r2
   19404:	f7f5 fdf2 	bl	efec <_ZNK8PositioneqERKS_>
   19408:	4603      	mov	r3, r0
   1940a:	2b00      	cmp	r3, #0
   1940c:	d017      	beq.n	1943e <_ZN5TapisC2E8Position+0x96>
    {
        this->positionLookAt = Position(0, 300);
   1940e:	68fb      	ldr	r3, [r7, #12]
   19410:	f103 0420 	add.w	r4, r3, #32	; 0x20
   19414:	f107 0318 	add.w	r3, r7, #24	; 0x18
   19418:	4618      	mov	r0, r3
   1941a:	4925      	ldr	r1, [pc, #148]	(194b0 <_ZN5TapisC2E8Position+0x108>)
   1941c:	4a25      	ldr	r2, [pc, #148]	(194b4 <_ZN5TapisC2E8Position+0x10c>)
   1941e:	f04f 0301 	mov.w	r3, #1	; 0x1
   19422:	f7f5 fce7 	bl	edf4 <_ZN8PositionC1Effb>
   19426:	4620      	mov	r0, r4
   19428:	f107 0318 	add.w	r3, r7, #24	; 0x18
   1942c:	e893 0006 	ldmia.w	r3, {r1, r2}
   19430:	f7f5 fd74 	bl	ef1c <_ZN8PositionaSES_>
        this->cote = BrasTapis::DROIT;
   19434:	68fa      	ldr	r2, [r7, #12]
   19436:	f04f 0300 	mov.w	r3, #0	; 0x0
   1943a:	f882 3028 	strb.w	r3, [r2, #40]
    };
    if (position == Position(1450, 750))
   1943e:	f107 0320 	add.w	r3, r7, #32	; 0x20
   19442:	4618      	mov	r0, r3
   19444:	491c      	ldr	r1, [pc, #112]	(194b8 <_ZN5TapisC2E8Position+0x110>)
   19446:	4a19      	ldr	r2, [pc, #100]	(194ac <_ZN5TapisC2E8Position+0x104>)
   19448:	f04f 0301 	mov.w	r3, #1	; 0x1
   1944c:	f7f5 fcd2 	bl	edf4 <_ZN8PositionC1Effb>
   19450:	f107 0304 	add.w	r3, r7, #4	; 0x4
   19454:	f107 0220 	add.w	r2, r7, #32	; 0x20
   19458:	4618      	mov	r0, r3
   1945a:	4611      	mov	r1, r2
   1945c:	f7f5 fdc6 	bl	efec <_ZNK8PositioneqERKS_>
   19460:	4603      	mov	r3, r0
   19462:	2b00      	cmp	r3, #0
   19464:	d017      	beq.n	19496 <_ZN5TapisC2E8Position+0xee>
    {
        this->positionLookAt = Position(3000, 200);
   19466:	68fb      	ldr	r3, [r7, #12]
   19468:	f103 0420 	add.w	r4, r3, #32	; 0x20
   1946c:	f107 0328 	add.w	r3, r7, #40	; 0x28
   19470:	4618      	mov	r0, r3
   19472:	4912      	ldr	r1, [pc, #72]	(194bc <_ZN5TapisC2E8Position+0x114>)
   19474:	4a12      	ldr	r2, [pc, #72]	(194c0 <_ZN5TapisC2E8Position+0x118>)
   19476:	f04f 0301 	mov.w	r3, #1	; 0x1
   1947a:	f7f5 fcbb 	bl	edf4 <_ZN8PositionC1Effb>
   1947e:	4620      	mov	r0, r4
   19480:	f107 0328 	add.w	r3, r7, #40	; 0x28
   19484:	e893 0006 	ldmia.w	r3, {r1, r2}
   19488:	f7f5 fd48 	bl	ef1c <_ZN8PositionaSES_>
        this->cote = BrasTapis::GAUCHE;
   1948c:	68fa      	ldr	r2, [r7, #12]
   1948e:	f04f 0301 	mov.w	r3, #1	; 0x1
   19492:	f882 3028 	strb.w	r3, [r2, #40]
    };
}
   19496:	68fb      	ldr	r3, [r7, #12]
   19498:	4618      	mov	r0, r3
   1949a:	f107 0734 	add.w	r7, r7, #52	; 0x34
   1949e:	46bd      	mov	sp, r7
   194a0:	bd90      	pop	{r4, r7, pc}
   194a2:	46c0      	nop			(mov r8, r8)
   194a4:	00024220 	.word	0x00024220
   194a8:	447a0000 	.word	0x447a0000
   194ac:	443b8000 	.word	0x443b8000
   194b0:	00000000 	.word	0x00000000
   194b4:	43960000 	.word	0x43960000
   194b8:	44b54000 	.word	0x44b54000
   194bc:	453b8000 	.word	0x453b8000
   194c0:	43480000 	.word	0x43480000

000194c4 <_exit>:

void _exit(int status)
{
    //Endless loop
    for(;;);
}
   194c4:	b480      	push	{r7}
   194c6:	b083      	sub	sp, #12
   194c8:	af00      	add	r7, sp, #0
   194ca:	6078      	str	r0, [r7, #4]
   194cc:	e7fe      	b.n	194cc <_exit+0x8>
   194ce:	46c0      	nop			(mov r8, r8)

000194d0 <_close>:

int _close(int file)
{
   194d0:	b480      	push	{r7}
   194d2:	b083      	sub	sp, #12
   194d4:	af00      	add	r7, sp, #0
   194d6:	6078      	str	r0, [r7, #4]
    return -1;
   194d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   194dc:	4618      	mov	r0, r3
   194de:	f107 070c 	add.w	r7, r7, #12	; 0xc
   194e2:	46bd      	mov	sp, r7
   194e4:	bc80      	pop	{r7}
   194e6:	4770      	bx	lr

000194e8 <_execve>:

char* __env[1] = {0};
char** environ = __env;

int _execve(char* name, char** argv, char** env)
{
   194e8:	b480      	push	{r7}
   194ea:	b085      	sub	sp, #20
   194ec:	af00      	add	r7, sp, #0
   194ee:	60f8      	str	r0, [r7, #12]
   194f0:	60b9      	str	r1, [r7, #8]
   194f2:	607a      	str	r2, [r7, #4]
    errno = ENOMEM;
   194f4:	4a05      	ldr	r2, [pc, #20]	(1950c <_execve+0x24>)
   194f6:	f04f 030c 	mov.w	r3, #12	; 0xc
   194fa:	6013      	str	r3, [r2, #0]
    return -1;
   194fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   19500:	4618      	mov	r0, r3
   19502:	f107 0714 	add.w	r7, r7, #20	; 0x14
   19506:	46bd      	mov	sp, r7
   19508:	bc80      	pop	{r7}
   1950a:	4770      	bx	lr
   1950c:	2000067c 	.word	0x2000067c

00019510 <_fork>:

int _fork(void)
{
   19510:	b480      	push	{r7}
   19512:	af00      	add	r7, sp, #0
    errno = EAGAIN;
   19514:	4a04      	ldr	r2, [pc, #16]	(19528 <_fork+0x18>)
   19516:	f04f 030b 	mov.w	r3, #11	; 0xb
   1951a:	6013      	str	r3, [r2, #0]
    return -1;
   1951c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   19520:	4618      	mov	r0, r3
   19522:	46bd      	mov	sp, r7
   19524:	bc80      	pop	{r7}
   19526:	4770      	bx	lr
   19528:	2000067c 	.word	0x2000067c

0001952c <_fstat>:

int _fstat(int file, struct stat* st)
{
   1952c:	b480      	push	{r7}
   1952e:	b083      	sub	sp, #12
   19530:	af00      	add	r7, sp, #0
   19532:	6078      	str	r0, [r7, #4]
   19534:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
   19536:	683a      	ldr	r2, [r7, #0]
   19538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1953c:	6053      	str	r3, [r2, #4]
    return 0;
   1953e:	f04f 0300 	mov.w	r3, #0	; 0x0
}
   19542:	4618      	mov	r0, r3
   19544:	f107 070c 	add.w	r7, r7, #12	; 0xc
   19548:	46bd      	mov	sp, r7
   1954a:	bc80      	pop	{r7}
   1954c:	4770      	bx	lr
   1954e:	46c0      	nop			(mov r8, r8)

00019550 <_getpid>:

int _getpid(void)
{
   19550:	b480      	push	{r7}
   19552:	af00      	add	r7, sp, #0
    return 1;
   19554:	f04f 0301 	mov.w	r3, #1	; 0x1
}
   19558:	4618      	mov	r0, r3
   1955a:	46bd      	mov	sp, r7
   1955c:	bc80      	pop	{r7}
   1955e:	4770      	bx	lr

00019560 <_isatty>:

int _isatty(int file)
{
   19560:	b480      	push	{r7}
   19562:	b083      	sub	sp, #12
   19564:	af00      	add	r7, sp, #0
   19566:	6078      	str	r0, [r7, #4]
    return 1;
   19568:	f04f 0301 	mov.w	r3, #1	; 0x1
}
   1956c:	4618      	mov	r0, r3
   1956e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   19572:	46bd      	mov	sp, r7
   19574:	bc80      	pop	{r7}
   19576:	4770      	bx	lr

00019578 <_kill>:

int _kill(int pid, int sig)
{
   19578:	b480      	push	{r7}
   1957a:	b083      	sub	sp, #12
   1957c:	af00      	add	r7, sp, #0
   1957e:	6078      	str	r0, [r7, #4]
   19580:	6039      	str	r1, [r7, #0]
    errno = EINVAL;
   19582:	4a06      	ldr	r2, [pc, #24]	(1959c <_kill+0x24>)
   19584:	f04f 0316 	mov.w	r3, #22	; 0x16
   19588:	6013      	str	r3, [r2, #0]
    return -1;
   1958a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1958e:	4618      	mov	r0, r3
   19590:	f107 070c 	add.w	r7, r7, #12	; 0xc
   19594:	46bd      	mov	sp, r7
   19596:	bc80      	pop	{r7}
   19598:	4770      	bx	lr
   1959a:	46c0      	nop			(mov r8, r8)
   1959c:	2000067c 	.word	0x2000067c

000195a0 <_link>:

int _link(char* old, char* new)
{
   195a0:	b480      	push	{r7}
   195a2:	b083      	sub	sp, #12
   195a4:	af00      	add	r7, sp, #0
   195a6:	6078      	str	r0, [r7, #4]
   195a8:	6039      	str	r1, [r7, #0]
    errno = EMLINK;
   195aa:	4a06      	ldr	r2, [pc, #24]	(195c4 <_link+0x24>)
   195ac:	f04f 031f 	mov.w	r3, #31	; 0x1f
   195b0:	6013      	str	r3, [r2, #0]
    return -1;
   195b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   195b6:	4618      	mov	r0, r3
   195b8:	f107 070c 	add.w	r7, r7, #12	; 0xc
   195bc:	46bd      	mov	sp, r7
   195be:	bc80      	pop	{r7}
   195c0:	4770      	bx	lr
   195c2:	46c0      	nop			(mov r8, r8)
   195c4:	2000067c 	.word	0x2000067c

000195c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
   195c8:	b480      	push	{r7}
   195ca:	b085      	sub	sp, #20
   195cc:	af00      	add	r7, sp, #0
   195ce:	60f8      	str	r0, [r7, #12]
   195d0:	60b9      	str	r1, [r7, #8]
   195d2:	607a      	str	r2, [r7, #4]
    return 0;
   195d4:	f04f 0300 	mov.w	r3, #0	; 0x0
}
   195d8:	4618      	mov	r0, r3
   195da:	f107 0714 	add.w	r7, r7, #20	; 0x14
   195de:	46bd      	mov	sp, r7
   195e0:	bc80      	pop	{r7}
   195e2:	4770      	bx	lr

000195e4 <_open>:

int _open(const char* name, int flags, int mode)
{
   195e4:	b480      	push	{r7}
   195e6:	b085      	sub	sp, #20
   195e8:	af00      	add	r7, sp, #0
   195ea:	60f8      	str	r0, [r7, #12]
   195ec:	60b9      	str	r1, [r7, #8]
   195ee:	607a      	str	r2, [r7, #4]
    return -1;
   195f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   195f4:	4618      	mov	r0, r3
   195f6:	f107 0714 	add.w	r7, r7, #20	; 0x14
   195fa:	46bd      	mov	sp, r7
   195fc:	bc80      	pop	{r7}
   195fe:	4770      	bx	lr

00019600 <_read>:

int _read(int file, char* ptr, int len)
{
   19600:	b480      	push	{r7}
   19602:	b085      	sub	sp, #20
   19604:	af00      	add	r7, sp, #0
   19606:	60f8      	str	r0, [r7, #12]
   19608:	60b9      	str	r1, [r7, #8]
   1960a:	607a      	str	r2, [r7, #4]
    return 0;
   1960c:	f04f 0300 	mov.w	r3, #0	; 0x0
}
   19610:	4618      	mov	r0, r3
   19612:	f107 0714 	add.w	r7, r7, #20	; 0x14
   19616:	46bd      	mov	sp, r7
   19618:	bc80      	pop	{r7}
   1961a:	4770      	bx	lr

0001961c <_sbrk>:

caddr_t _sbrk(int incr)
{
   1961c:	b580      	push	{r7, lr}
   1961e:	b084      	sub	sp, #16
   19620:	af00      	add	r7, sp, #0
   19622:	6078      	str	r0, [r7, #4]
    extern char _end;
    static char* heap_end;
    char* prev_heap_end;
    char* stack_ptr = (char*)0xffffffff;
   19624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19628:	60fb      	str	r3, [r7, #12]

    if(heap_end == 0)
   1962a:	4b12      	ldr	r3, [pc, #72]	(19674 <_sbrk+0x58>)
   1962c:	681b      	ldr	r3, [r3, #0]
   1962e:	2b00      	cmp	r3, #0
   19630:	d102      	bne.n	19638 <_sbrk+0x1c>
        heap_end = &_end;
   19632:	4a10      	ldr	r2, [pc, #64]	(19674 <_sbrk+0x58>)
   19634:	4b10      	ldr	r3, [pc, #64]	(19678 <_sbrk+0x5c>)
   19636:	6013      	str	r3, [r2, #0]
    prev_heap_end = heap_end;
   19638:	4b0e      	ldr	r3, [pc, #56]	(19674 <_sbrk+0x58>)
   1963a:	681b      	ldr	r3, [r3, #0]
   1963c:	60bb      	str	r3, [r7, #8]
    if( heap_end + incr > stack_ptr)
   1963e:	4b0d      	ldr	r3, [pc, #52]	(19674 <_sbrk+0x58>)
   19640:	681a      	ldr	r2, [r3, #0]
   19642:	687b      	ldr	r3, [r7, #4]
   19644:	441a      	add	r2, r3
   19646:	68fb      	ldr	r3, [r7, #12]
   19648:	429a      	cmp	r2, r3
   1964a:	d906      	bls.n	1965a <_sbrk+0x3e>
    {
        write(1, "Heap and stack collision\n", 25);
   1964c:	f04f 0001 	mov.w	r0, #1	; 0x1
   19650:	490a      	ldr	r1, [pc, #40]	(1967c <_sbrk+0x60>)
   19652:	f04f 0219 	mov.w	r2, #25	; 0x19
   19656:	f009 fe4f 	bl	232f8 <write>
      //  abort();
    }

    heap_end += incr;
   1965a:	4b06      	ldr	r3, [pc, #24]	(19674 <_sbrk+0x58>)
   1965c:	681a      	ldr	r2, [r3, #0]
   1965e:	687b      	ldr	r3, [r7, #4]
   19660:	441a      	add	r2, r3
   19662:	4b04      	ldr	r3, [pc, #16]	(19674 <_sbrk+0x58>)
   19664:	601a      	str	r2, [r3, #0]
    return (caddr_t)prev_heap_end;
   19666:	68bb      	ldr	r3, [r7, #8]
}
   19668:	4618      	mov	r0, r3
   1966a:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1966e:	46bd      	mov	sp, r7
   19670:	bd80      	pop	{r7, pc}
   19672:	46c0      	nop			(mov r8, r8)
   19674:	20000678 	.word	0x20000678
   19678:	20000680 	.word	0x20000680
   1967c:	00024238 	.word	0x00024238

00019680 <_times>:

typedef struct tms tms;

int _times(tms* buf)
{
   19680:	b480      	push	{r7}
   19682:	b083      	sub	sp, #12
   19684:	af00      	add	r7, sp, #0
   19686:	6078      	str	r0, [r7, #4]
    return -1;
   19688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1968c:	4618      	mov	r0, r3
   1968e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   19692:	46bd      	mov	sp, r7
   19694:	bc80      	pop	{r7}
   19696:	4770      	bx	lr

00019698 <_unlink>:

int _unlink(char* name)
{
   19698:	b480      	push	{r7}
   1969a:	b083      	sub	sp, #12
   1969c:	af00      	add	r7, sp, #0
   1969e:	6078      	str	r0, [r7, #4]
    errno = ENOENT;
   196a0:	4a05      	ldr	r2, [pc, #20]	(196b8 <_unlink+0x20>)
   196a2:	f04f 0302 	mov.w	r3, #2	; 0x2
   196a6:	6013      	str	r3, [r2, #0]
    return -1;
   196a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   196ac:	4618      	mov	r0, r3
   196ae:	f107 070c 	add.w	r7, r7, #12	; 0xc
   196b2:	46bd      	mov	sp, r7
   196b4:	bc80      	pop	{r7}
   196b6:	4770      	bx	lr
   196b8:	2000067c 	.word	0x2000067c

000196bc <_wait>:

int _wait(int* status)
{
   196bc:	b480      	push	{r7}
   196be:	b083      	sub	sp, #12
   196c0:	af00      	add	r7, sp, #0
   196c2:	6078      	str	r0, [r7, #4]
    errno = ECHILD;
   196c4:	4a05      	ldr	r2, [pc, #20]	(196dc <_wait+0x20>)
   196c6:	f04f 030a 	mov.w	r3, #10	; 0xa
   196ca:	6013      	str	r3, [r2, #0]
    return -1;
   196cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   196d0:	4618      	mov	r0, r3
   196d2:	f107 070c 	add.w	r7, r7, #12	; 0xc
   196d6:	46bd      	mov	sp, r7
   196d8:	bc80      	pop	{r7}
   196da:	4770      	bx	lr
   196dc:	2000067c 	.word	0x2000067c

000196e0 <_write>:

int _write(int file, char* ptr, int len)
{
   196e0:	b480      	push	{r7}
   196e2:	b085      	sub	sp, #20
   196e4:	af00      	add	r7, sp, #0
   196e6:	60f8      	str	r0, [r7, #12]
   196e8:	60b9      	str	r1, [r7, #8]
   196ea:	607a      	str	r2, [r7, #4]
    return len;
   196ec:	687b      	ldr	r3, [r7, #4]
}
   196ee:	4618      	mov	r0, r3
   196f0:	f107 0714 	add.w	r7, r7, #20	; 0x14
   196f4:	46bd      	mov	sp, r7
   196f6:	bc80      	pop	{r7}
   196f8:	4770      	bx	lr
   196fa:	46c0      	nop			(mov r8, r8)

000196fc <__cxa_end_cleanup>:
   196fc:	b41e      	push	{r1, r2, r3, r4}
   196fe:	f005 fe73 	bl	1f3e8 <__gnu_end_cleanup>
   19702:	bc1e      	pop	{r1, r2, r3, r4}
   19704:	f004 fbd4 	bl	1deb0 <_Unwind_Resume>

00019708 <d_make_comp>:
   19708:	b470      	push	{r4, r5, r6}
   1970a:	461d      	mov	r5, r3
   1970c:	1e4b      	subs	r3, r1, #1
   1970e:	460e      	mov	r6, r1
   19710:	4614      	mov	r4, r2
   19712:	2b34      	cmp	r3, #52
   19714:	d821      	bhi.n	1975a <d_make_comp+0x52>
   19716:	e8df f003 	tbb	[pc, r3]
   1971a:	3232      	.short	0x3232
   1971c:	20203232 	.word	0x20203232
   19720:	32414120 	.word	0x32414120
   19724:	41414141 	.word	0x41414141
   19728:	41414141 	.word	0x41414141
   1972c:	1c204141 	.word	0x1c204141
   19730:	1c1c1c1c 	.word	0x1c1c1c1c
   19734:	4141321c 	.word	0x4141321c
   19738:	20414141 	.word	0x20414141
   1973c:	321b1c41 	.word	0x321b1c41
   19740:	20204141 	.word	0x20204141
   19744:	32323241 	.word	0x32323241
   19748:	32323232 	.word	0x32323232
   1974c:	00324132 	.word	0x00324132
   19750:	b11d      	cbz	r5, 1975a <d_make_comp+0x52>
   19752:	6941      	ldr	r1, [r0, #20]
   19754:	6983      	ldr	r3, [r0, #24]
   19756:	4299      	cmp	r1, r3
   19758:	db02      	blt.n	19760 <d_make_comp+0x58>
   1975a:	2000      	movs	r0, #0
   1975c:	bc70      	pop	{r4, r5, r6}
   1975e:	4770      	bx	lr
   19760:	008b      	lsls	r3, r1, #2
   19762:	010a      	lsls	r2, r1, #4
   19764:	f8d0 c010 	ldr.w	ip, [r0, #16]
   19768:	1ad2      	subs	r2, r2, r3
   1976a:	1c4b      	adds	r3, r1, #1
   1976c:	6143      	str	r3, [r0, #20]
   1976e:	eb1c 0002 	adds.w	r0, ip, r2
   19772:	bf1e      	ittt	ne
   19774:	f80c 6002 	strbne.w	r6, [ip, r2]
   19778:	6044      	strne	r4, [r0, #4]
   1977a:	6085      	strne	r5, [r0, #8]
   1977c:	e7ee      	b.n	1975c <d_make_comp+0x54>
   1977e:	f1d5 0301 	rsbs	r3, r5, #1	; 0x1
   19782:	bf38      	it	cc
   19784:	2300      	movcc	r3, #0
   19786:	2c00      	cmp	r4, #0
   19788:	bf08      	it	eq
   1978a:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1978e:	2b00      	cmp	r3, #0
   19790:	d1e3      	bne.n	1975a <d_make_comp+0x52>
   19792:	6941      	ldr	r1, [r0, #20]
   19794:	6983      	ldr	r3, [r0, #24]
   19796:	4299      	cmp	r1, r3
   19798:	dadf      	bge.n	1975a <d_make_comp+0x52>
   1979a:	e7e1      	b.n	19760 <d_make_comp+0x58>
   1979c:	2c00      	cmp	r4, #0
   1979e:	d0dc      	beq.n	1975a <d_make_comp+0x52>
   197a0:	6941      	ldr	r1, [r0, #20]
   197a2:	6983      	ldr	r3, [r0, #24]
   197a4:	4299      	cmp	r1, r3
   197a6:	dad8      	bge.n	1975a <d_make_comp+0x52>
   197a8:	e7da      	b.n	19760 <d_make_comp+0x58>
   197aa:	46c0      	nop			(mov r8, r8)

000197ac <d_number>:
   197ac:	b410      	push	{r4}
   197ae:	68c1      	ldr	r1, [r0, #12]
   197b0:	f891 c000 	ldrb.w	ip, [r1]
   197b4:	f1bc 0f6e 	cmp.w	ip, #110	; 0x6e
   197b8:	d01c      	beq.n	197f4 <d_number+0x48>
   197ba:	2400      	movs	r4, #0
   197bc:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
   197c0:	b2db      	uxtb	r3, r3
   197c2:	2b09      	cmp	r3, #9
   197c4:	d81c      	bhi.n	19800 <d_number+0x54>
   197c6:	68c1      	ldr	r1, [r0, #12]
   197c8:	2200      	movs	r2, #0
   197ca:	0053      	lsls	r3, r2, #1
   197cc:	3101      	adds	r1, #1
   197ce:	00d2      	lsls	r2, r2, #3
   197d0:	189b      	adds	r3, r3, r2
   197d2:	60c1      	str	r1, [r0, #12]
   197d4:	4463      	add	r3, ip
   197d6:	f891 c000 	ldrb.w	ip, [r1]
   197da:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   197de:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
   197e2:	b2db      	uxtb	r3, r3
   197e4:	2b09      	cmp	r3, #9
   197e6:	d9f0      	bls.n	197ca <d_number+0x1e>
   197e8:	4610      	mov	r0, r2
   197ea:	b10c      	cbz	r4, 197f0 <d_number+0x44>
   197ec:	f1c2 0000 	rsb	r0, r2, #0	; 0x0
   197f0:	bc10      	pop	{r4}
   197f2:	4770      	bx	lr
   197f4:	1c4b      	adds	r3, r1, #1
   197f6:	60c3      	str	r3, [r0, #12]
   197f8:	f891 c001 	ldrb.w	ip, [r1, #1]
   197fc:	2401      	movs	r4, #1
   197fe:	e7dd      	b.n	197bc <d_number+0x10>
   19800:	2200      	movs	r2, #0
   19802:	e7f1      	b.n	197e8 <d_number+0x3c>

00019804 <d_call_offset>:
   19804:	b510      	push	{r4, lr}
   19806:	4604      	mov	r4, r0
   19808:	b931      	cbnz	r1, 19818 <d_call_offset+0x14>
   1980a:	68c3      	ldr	r3, [r0, #12]
   1980c:	7819      	ldrb	r1, [r3, #0]
   1980e:	b909      	cbnz	r1, 19814 <d_call_offset+0x10>
   19810:	2000      	movs	r0, #0
   19812:	bd10      	pop	{r4, pc}
   19814:	3301      	adds	r3, #1
   19816:	60c3      	str	r3, [r0, #12]
   19818:	2968      	cmp	r1, #104
   1981a:	d00a      	beq.n	19832 <d_call_offset+0x2e>
   1981c:	2976      	cmp	r1, #118
   1981e:	d1f7      	bne.n	19810 <d_call_offset+0xc>
   19820:	4620      	mov	r0, r4
   19822:	f7ff ffc3 	bl	197ac <d_number>
   19826:	68e2      	ldr	r2, [r4, #12]
   19828:	7813      	ldrb	r3, [r2, #0]
   1982a:	2b5f      	cmp	r3, #95
   1982c:	d1f0      	bne.n	19810 <d_call_offset+0xc>
   1982e:	1c53      	adds	r3, r2, #1
   19830:	60e3      	str	r3, [r4, #12]
   19832:	4620      	mov	r0, r4
   19834:	f7ff ffba 	bl	197ac <d_number>
   19838:	68e2      	ldr	r2, [r4, #12]
   1983a:	7813      	ldrb	r3, [r2, #0]
   1983c:	2b5f      	cmp	r3, #95
   1983e:	d1e7      	bne.n	19810 <d_call_offset+0xc>
   19840:	1c53      	adds	r3, r2, #1
   19842:	60e3      	str	r3, [r4, #12]
   19844:	2001      	movs	r0, #1
   19846:	e7e4      	b.n	19812 <d_call_offset+0xe>

00019848 <d_cv_qualifiers>:
   19848:	b570      	push	{r4, r5, r6, lr}
   1984a:	68c3      	ldr	r3, [r0, #12]
   1984c:	4616      	mov	r6, r2
   1984e:	781a      	ldrb	r2, [r3, #0]
   19850:	4604      	mov	r4, r0
   19852:	460d      	mov	r5, r1
   19854:	2a72      	cmp	r2, #114
   19856:	bf14      	ite	ne
   19858:	2100      	movne	r1, #0
   1985a:	2101      	moveq	r1, #1
   1985c:	2a56      	cmp	r2, #86
   1985e:	bf14      	ite	ne
   19860:	2000      	movne	r0, #0
   19862:	2001      	moveq	r0, #1
   19864:	ea51 0c00 	orrs.w	ip, r1, r0
   19868:	d128      	bne.n	198bc <d_cv_qualifiers+0x74>
   1986a:	2a4b      	cmp	r2, #75
   1986c:	d124      	bne.n	198b8 <d_cv_qualifiers+0x70>
   1986e:	3301      	adds	r3, #1
   19870:	60e3      	str	r3, [r4, #12]
   19872:	b988      	cbnz	r0, 19898 <d_cv_qualifiers+0x50>
   19874:	6b23      	ldr	r3, [r4, #48]
   19876:	2e00      	cmp	r6, #0
   19878:	bf14      	ite	ne
   1987a:	211b      	movne	r1, #27
   1987c:	2118      	moveq	r1, #24
   1987e:	3306      	adds	r3, #6
   19880:	6323      	str	r3, [r4, #48]
   19882:	2200      	movs	r2, #0
   19884:	4620      	mov	r0, r4
   19886:	4613      	mov	r3, r2
   19888:	f7ff ff3e 	bl	19708 <d_make_comp>
   1988c:	6028      	str	r0, [r5, #0]
   1988e:	b190      	cbz	r0, 198b6 <d_cv_qualifiers+0x6e>
   19890:	68e3      	ldr	r3, [r4, #12]
   19892:	1d05      	adds	r5, r0, #4
   19894:	781a      	ldrb	r2, [r3, #0]
   19896:	e7dd      	b.n	19854 <d_cv_qualifiers+0xc>
   19898:	6b23      	ldr	r3, [r4, #48]
   1989a:	2200      	movs	r2, #0
   1989c:	3309      	adds	r3, #9
   1989e:	6323      	str	r3, [r4, #48]
   198a0:	2e00      	cmp	r6, #0
   198a2:	bf14      	ite	ne
   198a4:	211a      	movne	r1, #26
   198a6:	2117      	moveq	r1, #23
   198a8:	4620      	mov	r0, r4
   198aa:	4613      	mov	r3, r2
   198ac:	f7ff ff2c 	bl	19708 <d_make_comp>
   198b0:	6028      	str	r0, [r5, #0]
   198b2:	2800      	cmp	r0, #0
   198b4:	d1ec      	bne.n	19890 <d_cv_qualifiers+0x48>
   198b6:	4605      	mov	r5, r0
   198b8:	4628      	mov	r0, r5
   198ba:	bd70      	pop	{r4, r5, r6, pc}
   198bc:	3301      	adds	r3, #1
   198be:	60e3      	str	r3, [r4, #12]
   198c0:	2900      	cmp	r1, #0
   198c2:	d0d6      	beq.n	19872 <d_cv_qualifiers+0x2a>
   198c4:	6b23      	ldr	r3, [r4, #48]
   198c6:	2e00      	cmp	r6, #0
   198c8:	bf14      	ite	ne
   198ca:	2119      	movne	r1, #25
   198cc:	2116      	moveq	r1, #22
   198ce:	3309      	adds	r3, #9
   198d0:	6323      	str	r3, [r4, #48]
   198d2:	e7d6      	b.n	19882 <d_cv_qualifiers+0x3a>

000198d4 <d_template_param>:
   198d4:	b530      	push	{r4, r5, lr}
   198d6:	68c2      	ldr	r2, [r0, #12]
   198d8:	b081      	sub	sp, #4
   198da:	7813      	ldrb	r3, [r2, #0]
   198dc:	4604      	mov	r4, r0
   198de:	2b54      	cmp	r3, #84
   198e0:	d002      	beq.n	198e8 <d_template_param+0x14>
   198e2:	2000      	movs	r0, #0
   198e4:	b001      	add	sp, #4
   198e6:	bd30      	pop	{r4, r5, pc}
   198e8:	1c51      	adds	r1, r2, #1
   198ea:	60c1      	str	r1, [r0, #12]
   198ec:	7853      	ldrb	r3, [r2, #1]
   198ee:	2b5f      	cmp	r3, #95
   198f0:	d119      	bne.n	19926 <d_template_param+0x52>
   198f2:	2500      	movs	r5, #0
   198f4:	1c4b      	adds	r3, r1, #1
   198f6:	6aa2      	ldr	r2, [r4, #40]
   198f8:	60e3      	str	r3, [r4, #12]
   198fa:	f8d4 c014 	ldr.w	ip, [r4, #20]
   198fe:	69a3      	ldr	r3, [r4, #24]
   19900:	3201      	adds	r2, #1
   19902:	459c      	cmp	ip, r3
   19904:	62a2      	str	r2, [r4, #40]
   19906:	daec      	bge.n	198e2 <d_template_param+0xe>
   19908:	ea4f 038c 	mov.w	r3, ip, lsl #2
   1990c:	ea4f 120c 	mov.w	r2, ip, lsl #4
   19910:	6921      	ldr	r1, [r4, #16]
   19912:	1ad2      	subs	r2, r2, r3
   19914:	1888      	adds	r0, r1, r2
   19916:	f10c 0301 	add.w	r3, ip, #1	; 0x1
   1991a:	6163      	str	r3, [r4, #20]
   1991c:	d0e2      	beq.n	198e4 <d_template_param+0x10>
   1991e:	2305      	movs	r3, #5
   19920:	548b      	strb	r3, [r1, r2]
   19922:	6045      	str	r5, [r0, #4]
   19924:	e7de      	b.n	198e4 <d_template_param+0x10>
   19926:	f7ff ff41 	bl	197ac <d_number>
   1992a:	2800      	cmp	r0, #0
   1992c:	dbd9      	blt.n	198e2 <d_template_param+0xe>
   1992e:	68e1      	ldr	r1, [r4, #12]
   19930:	780b      	ldrb	r3, [r1, #0]
   19932:	2b5f      	cmp	r3, #95
   19934:	d1d5      	bne.n	198e2 <d_template_param+0xe>
   19936:	1c45      	adds	r5, r0, #1
   19938:	e7dc      	b.n	198f4 <d_template_param+0x20>
   1993a:	46c0      	nop			(mov r8, r8)

0001993c <d_substitution>:
   1993c:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
   19940:	68c2      	ldr	r2, [r0, #12]
   19942:	460c      	mov	r4, r1
   19944:	7813      	ldrb	r3, [r2, #0]
   19946:	2b53      	cmp	r3, #83
   19948:	d003      	beq.n	19952 <d_substitution+0x16>
   1994a:	2000      	movs	r0, #0
   1994c:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
   19950:	4770      	bx	lr
   19952:	1c53      	adds	r3, r2, #1
   19954:	60c3      	str	r3, [r0, #12]
   19956:	7851      	ldrb	r1, [r2, #1]
   19958:	bb39      	cbnz	r1, 199aa <d_substitution+0x6e>
   1995a:	6883      	ldr	r3, [r0, #8]
   1995c:	08db      	lsrs	r3, r3, #3
   1995e:	f013 0701 	ands.w	r7, r3, #1	; 0x1
   19962:	bf14      	ite	ne
   19964:	2200      	movne	r2, #0
   19966:	2201      	moveq	r2, #1
   19968:	2c00      	cmp	r4, #0
   1996a:	bf0c      	ite	eq
   1996c:	2200      	moveq	r2, #0
   1996e:	f002 0201 	andne.w	r2, r2, #1	; 0x1
   19972:	b13a      	cbz	r2, 19984 <d_substitution+0x48>
   19974:	68c2      	ldr	r2, [r0, #12]
   19976:	7813      	ldrb	r3, [r2, #0]
   19978:	3b43      	subs	r3, #67
   1997a:	b2db      	uxtb	r3, r3
   1997c:	2b01      	cmp	r3, #1
   1997e:	bf8c      	ite	hi
   19980:	2700      	movhi	r7, #0
   19982:	2701      	movls	r7, #1
   19984:	4a51      	ldr	r2, [pc, #324]	(19acc <d_substitution+0x190>)
   19986:	f1b2 03c4 	subs.w	r3, r2, #196	; 0xc4
   1998a:	d3de      	bcc.n	1994a <d_substitution+0xe>
   1998c:	2974      	cmp	r1, #116
   1998e:	bf08      	it	eq
   19990:	469c      	moveq	ip, r3
   19992:	d04f      	beq.n	19a34 <d_substitution+0xf8>
   19994:	469c      	mov	ip, r3
   19996:	e003      	b.n	199a0 <d_substitution+0x64>
   19998:	f89c 3000 	ldrb.w	r3, [ip]
   1999c:	428b      	cmp	r3, r1
   1999e:	d049      	beq.n	19a34 <d_substitution+0xf8>
   199a0:	f10c 0c1c 	add.w	ip, ip, #28	; 0x1c
   199a4:	4594      	cmp	ip, r2
   199a6:	d1f7      	bne.n	19998 <d_substitution+0x5c>
   199a8:	e7cf      	b.n	1994a <d_substitution+0xe>
   199aa:	3301      	adds	r3, #1
   199ac:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
   199b0:	60c3      	str	r3, [r0, #12]
   199b2:	fa5f f38c 	uxtb.w	r3, ip
   199b6:	2b09      	cmp	r3, #9
   199b8:	bf8c      	ite	hi
   199ba:	2300      	movhi	r3, #0
   199bc:	2301      	movls	r3, #1
   199be:	295f      	cmp	r1, #95
   199c0:	bf08      	it	eq
   199c2:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   199c6:	2b00      	cmp	r3, #0
   199c8:	d079      	beq.n	19abe <d_substitution+0x182>
   199ca:	295f      	cmp	r1, #95
   199cc:	d030      	beq.n	19a30 <d_substitution+0xf4>
   199ce:	fa5f f38c 	uxtb.w	r3, ip
   199d2:	2200      	movs	r2, #0
   199d4:	2b09      	cmp	r3, #9
   199d6:	d814      	bhi.n	19a02 <d_substitution+0xc6>
   199d8:	0093      	lsls	r3, r2, #2
   199da:	0152      	lsls	r2, r2, #5
   199dc:	189b      	adds	r3, r3, r2
   199de:	185b      	adds	r3, r3, r1
   199e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   199e4:	2a00      	cmp	r2, #0
   199e6:	dbb0      	blt.n	1994a <d_substitution+0xe>
   199e8:	68c3      	ldr	r3, [r0, #12]
   199ea:	7819      	ldrb	r1, [r3, #0]
   199ec:	b119      	cbz	r1, 199f6 <d_substitution+0xba>
   199ee:	3301      	adds	r3, #1
   199f0:	295f      	cmp	r1, #95
   199f2:	60c3      	str	r3, [r0, #12]
   199f4:	d011      	beq.n	19a1a <d_substitution+0xde>
   199f6:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
   199fa:	fa5f f38c 	uxtb.w	r3, ip
   199fe:	2b09      	cmp	r3, #9
   19a00:	d9ea      	bls.n	199d8 <d_substitution+0x9c>
   19a02:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   19a06:	b2db      	uxtb	r3, r3
   19a08:	2b19      	cmp	r3, #25
   19a0a:	d89e      	bhi.n	1994a <d_substitution+0xe>
   19a0c:	0093      	lsls	r3, r2, #2
   19a0e:	0152      	lsls	r2, r2, #5
   19a10:	189b      	adds	r3, r3, r2
   19a12:	185b      	adds	r3, r3, r1
   19a14:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
   19a18:	e7e4      	b.n	199e4 <d_substitution+0xa8>
   19a1a:	1c51      	adds	r1, r2, #1
   19a1c:	6a03      	ldr	r3, [r0, #32]
   19a1e:	4299      	cmp	r1, r3
   19a20:	da93      	bge.n	1994a <d_substitution+0xe>
   19a22:	6a83      	ldr	r3, [r0, #40]
   19a24:	69c2      	ldr	r2, [r0, #28]
   19a26:	3301      	adds	r3, #1
   19a28:	6283      	str	r3, [r0, #40]
   19a2a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   19a2e:	e78d      	b.n	1994c <d_substitution+0x10>
   19a30:	395f      	subs	r1, #95
   19a32:	e7f3      	b.n	19a1c <d_substitution+0xe0>
   19a34:	f8dc a014 	ldr.w	sl, [ip, #20]
   19a38:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   19a3c:	d03c      	beq.n	19ab8 <d_substitution+0x17c>
   19a3e:	6945      	ldr	r5, [r0, #20]
   19a40:	6986      	ldr	r6, [r0, #24]
   19a42:	f8dc 8018 	ldr.w	r8, [ip, #24]
   19a46:	42b5      	cmp	r5, r6
   19a48:	db1c      	blt.n	19a84 <d_substitution+0x148>
   19a4a:	2200      	movs	r2, #0
   19a4c:	62c2      	str	r2, [r0, #44]
   19a4e:	2f00      	cmp	r7, #0
   19a50:	d02d      	beq.n	19aae <d_substitution+0x172>
   19a52:	f8dc 400c 	ldr.w	r4, [ip, #12]
   19a56:	f8dc c010 	ldr.w	ip, [ip, #16]
   19a5a:	6b03      	ldr	r3, [r0, #48]
   19a5c:	42b5      	cmp	r5, r6
   19a5e:	4463      	add	r3, ip
   19a60:	6303      	str	r3, [r0, #48]
   19a62:	f6bf af72 	bge.w	1994a <d_substitution+0xe>
   19a66:	00ab      	lsls	r3, r5, #2
   19a68:	012a      	lsls	r2, r5, #4
   19a6a:	6901      	ldr	r1, [r0, #16]
   19a6c:	1ad2      	subs	r2, r2, r3
   19a6e:	1c6b      	adds	r3, r5, #1
   19a70:	6143      	str	r3, [r0, #20]
   19a72:	1888      	adds	r0, r1, r2
   19a74:	f43f af6a 	beq.w	1994c <d_substitution+0x10>
   19a78:	2315      	movs	r3, #21
   19a7a:	548b      	strb	r3, [r1, r2]
   19a7c:	6044      	str	r4, [r0, #4]
   19a7e:	f8c0 c008 	str.w	ip, [r0, #8]
   19a82:	e763      	b.n	1994c <d_substitution+0x10>
   19a84:	012b      	lsls	r3, r5, #4
   19a86:	00aa      	lsls	r2, r5, #2
   19a88:	6901      	ldr	r1, [r0, #16]
   19a8a:	ebc2 0403 	rsb	r4, r2, r3
   19a8e:	1c6b      	adds	r3, r5, #1
   19a90:	190a      	adds	r2, r1, r4
   19a92:	6143      	str	r3, [r0, #20]
   19a94:	bf08      	it	eq
   19a96:	461d      	moveq	r5, r3
   19a98:	d0d8      	beq.n	19a4c <d_substitution+0x110>
   19a9a:	f8c2 a004 	str.w	sl, [r2, #4]
   19a9e:	f8c2 8008 	str.w	r8, [r2, #8]
   19aa2:	2315      	movs	r3, #21
   19aa4:	550b      	strb	r3, [r1, r4]
   19aa6:	6945      	ldr	r5, [r0, #20]
   19aa8:	6986      	ldr	r6, [r0, #24]
   19aaa:	62c2      	str	r2, [r0, #44]
   19aac:	e7cf      	b.n	19a4e <d_substitution+0x112>
   19aae:	f8dc 4004 	ldr.w	r4, [ip, #4]
   19ab2:	f8dc c008 	ldr.w	ip, [ip, #8]
   19ab6:	e7d0      	b.n	19a5a <d_substitution+0x11e>
   19ab8:	6945      	ldr	r5, [r0, #20]
   19aba:	6986      	ldr	r6, [r0, #24]
   19abc:	e7c7      	b.n	19a4e <d_substitution+0x112>
   19abe:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   19ac2:	b2db      	uxtb	r3, r3
   19ac4:	2b19      	cmp	r3, #25
   19ac6:	d982      	bls.n	199ce <d_substitution+0x92>
   19ac8:	e747      	b.n	1995a <d_substitution+0x1e>
   19aca:	46c0      	nop			(mov r8, r8)
   19acc:	00024840 	.word	0x00024840

00019ad0 <d_append_char>:
   19ad0:	b570      	push	{r4, r5, r6, lr}
   19ad2:	460e      	mov	r6, r1
   19ad4:	f8d0 1104 	ldr.w	r1, [r0, #260]
   19ad8:	4605      	mov	r5, r0
   19ada:	29ff      	cmp	r1, #255
   19adc:	d008      	beq.n	19af0 <d_append_char+0x20>
   19ade:	eb05 0301 	add.w	r3, r5, r1
   19ae2:	1c4a      	adds	r2, r1, #1
   19ae4:	711e      	strb	r6, [r3, #4]
   19ae6:	f8c5 2104 	str.w	r2, [r5, #260]
   19aea:	f885 6108 	strb.w	r6, [r5, #264]
   19aee:	bd70      	pop	{r4, r5, r6, pc}
   19af0:	2400      	movs	r4, #0
   19af2:	f880 4103 	strb.w	r4, [r0, #259]
   19af6:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19afa:	3004      	adds	r0, #4
   19afc:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19b00:	4798      	blx	r3
   19b02:	f8c5 4104 	str.w	r4, [r5, #260]
   19b06:	4621      	mov	r1, r4
   19b08:	e7e9      	b.n	19ade <d_append_char+0xe>
   19b0a:	46c0      	nop			(mov r8, r8)

00019b0c <d_source_name>:
   19b0c:	b570      	push	{r4, r5, r6, lr}
   19b0e:	4604      	mov	r4, r0
   19b10:	f7ff fe4c 	bl	197ac <d_number>
   19b14:	2800      	cmp	r0, #0
   19b16:	4605      	mov	r5, r0
   19b18:	dd30      	ble.n	19b7c <d_source_name+0x70>
   19b1a:	68e6      	ldr	r6, [r4, #12]
   19b1c:	6863      	ldr	r3, [r4, #4]
   19b1e:	1b9b      	subs	r3, r3, r6
   19b20:	4298      	cmp	r0, r3
   19b22:	dd02      	ble.n	19b2a <d_source_name+0x1e>
   19b24:	2000      	movs	r0, #0
   19b26:	62e0      	str	r0, [r4, #44]
   19b28:	bd70      	pop	{r4, r5, r6, pc}
   19b2a:	68a3      	ldr	r3, [r4, #8]
   19b2c:	eb06 0200 	add.w	r2, r6, r0
   19b30:	f013 0f04 	tst.w	r3, #4	; 0x4
   19b34:	60e2      	str	r2, [r4, #12]
   19b36:	d004      	beq.n	19b42 <d_source_name+0x36>
   19b38:	5c33      	ldrb	r3, [r6, r0]
   19b3a:	2b24      	cmp	r3, #36
   19b3c:	d101      	bne.n	19b42 <d_source_name+0x36>
   19b3e:	1c53      	adds	r3, r2, #1
   19b40:	60e3      	str	r3, [r4, #12]
   19b42:	2d09      	cmp	r5, #9
   19b44:	dc1c      	bgt.n	19b80 <d_source_name+0x74>
   19b46:	6961      	ldr	r1, [r4, #20]
   19b48:	69a3      	ldr	r3, [r4, #24]
   19b4a:	4299      	cmp	r1, r3
   19b4c:	daea      	bge.n	19b24 <d_source_name+0x18>
   19b4e:	008a      	lsls	r2, r1, #2
   19b50:	010b      	lsls	r3, r1, #4
   19b52:	ebc2 0c03 	rsb	ip, r2, r3
   19b56:	6922      	ldr	r2, [r4, #16]
   19b58:	1c4b      	adds	r3, r1, #1
   19b5a:	eb12 000c 	adds.w	r0, r2, ip
   19b5e:	6163      	str	r3, [r4, #20]
   19b60:	bf14      	ite	ne
   19b62:	2300      	movne	r3, #0
   19b64:	2301      	moveq	r3, #1
   19b66:	2e00      	cmp	r6, #0
   19b68:	bf08      	it	eq
   19b6a:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   19b6e:	2b00      	cmp	r3, #0
   19b70:	d1d8      	bne.n	19b24 <d_source_name+0x18>
   19b72:	f802 300c 	strb.w	r3, [r2, ip]
   19b76:	6046      	str	r6, [r0, #4]
   19b78:	6085      	str	r5, [r0, #8]
   19b7a:	e7d4      	b.n	19b26 <d_source_name+0x1a>
   19b7c:	2000      	movs	r0, #0
   19b7e:	e7d3      	b.n	19b28 <d_source_name+0x1c>
   19b80:	4630      	mov	r0, r6
   19b82:	4919      	ldr	r1, [pc, #100]	(19be8 <d_source_name+0xdc>)
   19b84:	2208      	movs	r2, #8
   19b86:	f008 ffc7 	bl	22b18 <memcmp>
   19b8a:	2800      	cmp	r0, #0
   19b8c:	d1db      	bne.n	19b46 <d_source_name+0x3a>
   19b8e:	7a32      	ldrb	r2, [r6, #8]
   19b90:	f106 0108 	add.w	r1, r6, #8	; 0x8
   19b94:	2a5f      	cmp	r2, #95
   19b96:	bf14      	ite	ne
   19b98:	2300      	movne	r3, #0
   19b9a:	2301      	moveq	r3, #1
   19b9c:	2a2e      	cmp	r2, #46
   19b9e:	bf08      	it	eq
   19ba0:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   19ba4:	b1e3      	cbz	r3, 19be0 <d_source_name+0xd4>
   19ba6:	784b      	ldrb	r3, [r1, #1]
   19ba8:	2b4e      	cmp	r3, #78
   19baa:	d1cc      	bne.n	19b46 <d_source_name+0x3a>
   19bac:	6b23      	ldr	r3, [r4, #48]
   19bae:	6961      	ldr	r1, [r4, #20]
   19bb0:	3316      	adds	r3, #22
   19bb2:	1b5b      	subs	r3, r3, r5
   19bb4:	6323      	str	r3, [r4, #48]
   19bb6:	69a3      	ldr	r3, [r4, #24]
   19bb8:	4299      	cmp	r1, r3
   19bba:	dab3      	bge.n	19b24 <d_source_name+0x18>
   19bbc:	008b      	lsls	r3, r1, #2
   19bbe:	010a      	lsls	r2, r1, #4
   19bc0:	f8d4 c010 	ldr.w	ip, [r4, #16]
   19bc4:	1ad2      	subs	r2, r2, r3
   19bc6:	1c4b      	adds	r3, r1, #1
   19bc8:	eb1c 0002 	adds.w	r0, ip, r2
   19bcc:	6163      	str	r3, [r4, #20]
   19bce:	d0aa      	beq.n	19b26 <d_source_name+0x1a>
   19bd0:	2300      	movs	r3, #0
   19bd2:	f80c 3002 	strb.w	r3, [ip, r2]
   19bd6:	4a05      	ldr	r2, [pc, #20]	(19bec <d_source_name+0xe0>)
   19bd8:	3315      	adds	r3, #21
   19bda:	6042      	str	r2, [r0, #4]
   19bdc:	6083      	str	r3, [r0, #8]
   19bde:	e7a2      	b.n	19b26 <d_source_name+0x1a>
   19be0:	2a24      	cmp	r2, #36
   19be2:	d1b0      	bne.n	19b46 <d_source_name+0x3a>
   19be4:	e7df      	b.n	19ba6 <d_source_name+0x9a>
   19be6:	46c0      	nop			(mov r8, r8)
   19be8:	00024f88 	.word	0x00024f88
   19bec:	00024f94 	.word	0x00024f94

00019bf0 <d_type>:
   19bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   19bf2:	4605      	mov	r5, r0
   19bf4:	68c0      	ldr	r0, [r0, #12]
   19bf6:	b083      	sub	sp, #12
   19bf8:	7801      	ldrb	r1, [r0, #0]
   19bfa:	2956      	cmp	r1, #86
   19bfc:	bf14      	ite	ne
   19bfe:	2300      	movne	r3, #0
   19c00:	2301      	moveq	r3, #1
   19c02:	2972      	cmp	r1, #114
   19c04:	bf08      	it	eq
   19c06:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   19c0a:	b90b      	cbnz	r3, 19c10 <d_type+0x20>
   19c0c:	294b      	cmp	r1, #75
   19c0e:	d11d      	bne.n	19c4c <d_type+0x5c>
   19c10:	4628      	mov	r0, r5
   19c12:	a901      	add	r1, sp, #4
   19c14:	2200      	movs	r2, #0
   19c16:	f7ff fe17 	bl	19848 <d_cv_qualifiers>
   19c1a:	4604      	mov	r4, r0
   19c1c:	b910      	cbnz	r0, 19c24 <d_type+0x34>
   19c1e:	2000      	movs	r0, #0
   19c20:	b003      	add	sp, #12
   19c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c24:	4628      	mov	r0, r5
   19c26:	f7ff ffe3 	bl	19bf0 <d_type>
   19c2a:	6020      	str	r0, [r4, #0]
   19c2c:	2800      	cmp	r0, #0
   19c2e:	d0f6      	beq.n	19c1e <d_type+0x2e>
   19c30:	9901      	ldr	r1, [sp, #4]
   19c32:	2900      	cmp	r1, #0
   19c34:	d0f3      	beq.n	19c1e <d_type+0x2e>
   19c36:	6a2a      	ldr	r2, [r5, #32]
   19c38:	6a6b      	ldr	r3, [r5, #36]
   19c3a:	429a      	cmp	r2, r3
   19c3c:	daef      	bge.n	19c1e <d_type+0x2e>
   19c3e:	69eb      	ldr	r3, [r5, #28]
   19c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   19c44:	3201      	adds	r2, #1
   19c46:	622a      	str	r2, [r5, #32]
   19c48:	9801      	ldr	r0, [sp, #4]
   19c4a:	e7e9      	b.n	19c20 <d_type+0x30>
   19c4c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   19c50:	2b4a      	cmp	r3, #74
   19c52:	d8e4      	bhi.n	19c1e <d_type+0x2e>
   19c54:	a201      	add	r2, pc, #4	(adr r2, 19c5c <d_type+0x6c>)
   19c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19c5a:	46c0      	nop			(mov r8, r8)
   19c5c:	00019ffb 	.word	0x00019ffb
   19c60:	00019ffb 	.word	0x00019ffb
   19c64:	00019ffb 	.word	0x00019ffb
   19c68:	00019ffb 	.word	0x00019ffb
   19c6c:	00019ffb 	.word	0x00019ffb
   19c70:	00019ffb 	.word	0x00019ffb
   19c74:	00019ffb 	.word	0x00019ffb
   19c78:	00019ffb 	.word	0x00019ffb
   19c7c:	00019ffb 	.word	0x00019ffb
   19c80:	00019ffb 	.word	0x00019ffb
   19c84:	00019c1f 	.word	0x00019c1f
   19c88:	00019c1f 	.word	0x00019c1f
   19c8c:	00019c1f 	.word	0x00019c1f
   19c90:	00019c1f 	.word	0x00019c1f
   19c94:	00019c1f 	.word	0x00019c1f
   19c98:	00019c1f 	.word	0x00019c1f
   19c9c:	00019c1f 	.word	0x00019c1f
   19ca0:	00019f89 	.word	0x00019f89
   19ca4:	00019c1f 	.word	0x00019c1f
   19ca8:	00019f6f 	.word	0x00019f6f
   19cac:	00019c1f 	.word	0x00019c1f
   19cb0:	00019c1f 	.word	0x00019c1f
   19cb4:	00019f4b 	.word	0x00019f4b
   19cb8:	00019f31 	.word	0x00019f31
   19cbc:	00019c1f 	.word	0x00019c1f
   19cc0:	00019c1f 	.word	0x00019c1f
   19cc4:	00019c1f 	.word	0x00019c1f
   19cc8:	00019c1f 	.word	0x00019c1f
   19ccc:	00019c1f 	.word	0x00019c1f
   19cd0:	00019f0d 	.word	0x00019f0d
   19cd4:	00019ffb 	.word	0x00019ffb
   19cd8:	00019ef3 	.word	0x00019ef3
   19cdc:	00019ed9 	.word	0x00019ed9
   19ce0:	00019c1f 	.word	0x00019c1f
   19ce4:	00019ebf 	.word	0x00019ebf
   19ce8:	00019e6f 	.word	0x00019e6f
   19cec:	00019e2d 	.word	0x00019e2d
   19cf0:	00019e0b 	.word	0x00019e0b
   19cf4:	00019c1f 	.word	0x00019c1f
   19cf8:	00019c1f 	.word	0x00019c1f
   19cfc:	00019c1f 	.word	0x00019c1f
   19d00:	00019c1f 	.word	0x00019c1f
   19d04:	00019ffb 	.word	0x00019ffb
   19d08:	00019c1f 	.word	0x00019c1f
   19d0c:	00019c1f 	.word	0x00019c1f
   19d10:	00019c1f 	.word	0x00019c1f
   19d14:	00019c1f 	.word	0x00019c1f
   19d18:	00019c1f 	.word	0x00019c1f
   19d1c:	00019c1f 	.word	0x00019c1f
   19d20:	00019dc1 	.word	0x00019dc1
   19d24:	00019dc1 	.word	0x00019dc1
   19d28:	00019dc1 	.word	0x00019dc1
   19d2c:	00019dc1 	.word	0x00019dc1
   19d30:	00019dc1 	.word	0x00019dc1
   19d34:	00019dc1 	.word	0x00019dc1
   19d38:	00019dc1 	.word	0x00019dc1
   19d3c:	00019dc1 	.word	0x00019dc1
   19d40:	00019dc1 	.word	0x00019dc1
   19d44:	00019dc1 	.word	0x00019dc1
   19d48:	00019c1f 	.word	0x00019c1f
   19d4c:	00019dc1 	.word	0x00019dc1
   19d50:	00019dc1 	.word	0x00019dc1
   19d54:	00019dc1 	.word	0x00019dc1
   19d58:	00019dc1 	.word	0x00019dc1
   19d5c:	00019c1f 	.word	0x00019c1f
   19d60:	00019c1f 	.word	0x00019c1f
   19d64:	00019c1f 	.word	0x00019c1f
   19d68:	00019dc1 	.word	0x00019dc1
   19d6c:	00019dc1 	.word	0x00019dc1
   19d70:	00019d89 	.word	0x00019d89
   19d74:	00019dc1 	.word	0x00019dc1
   19d78:	00019dc1 	.word	0x00019dc1
   19d7c:	00019dc1 	.word	0x00019dc1
   19d80:	00019dc1 	.word	0x00019dc1
   19d84:	00019dc1 	.word	0x00019dc1
   19d88:	1c43      	adds	r3, r0, #1
   19d8a:	60eb      	str	r3, [r5, #12]
   19d8c:	4628      	mov	r0, r5
   19d8e:	f7ff febd 	bl	19b0c <d_source_name>
   19d92:	2123      	movs	r1, #35
   19d94:	4602      	mov	r2, r0
   19d96:	2300      	movs	r3, #0
   19d98:	4628      	mov	r0, r5
   19d9a:	f7ff fcb5 	bl	19708 <d_make_comp>
   19d9e:	9001      	str	r0, [sp, #4]
   19da0:	9801      	ldr	r0, [sp, #4]
   19da2:	2800      	cmp	r0, #0
   19da4:	f43f af3b 	beq.w	19c1e <d_type+0x2e>
   19da8:	6a2a      	ldr	r2, [r5, #32]
   19daa:	6a6b      	ldr	r3, [r5, #36]
   19dac:	429a      	cmp	r2, r3
   19dae:	f6bf af36 	bge.w	19c1e <d_type+0x2e>
   19db2:	69eb      	ldr	r3, [r5, #28]
   19db4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
   19db8:	3201      	adds	r2, #1
   19dba:	622a      	str	r2, [r5, #32]
   19dbc:	9801      	ldr	r0, [sp, #4]
   19dbe:	e72f      	b.n	19c20 <d_type+0x30>
   19dc0:	008b      	lsls	r3, r1, #2
   19dc2:	4aaf      	ldr	r2, [pc, #700]	(1a080 <d_type+0x490>)
   19dc4:	0109      	lsls	r1, r1, #4
   19dc6:	185b      	adds	r3, r3, r1
   19dc8:	189c      	adds	r4, r3, r2
   19dca:	f000 811b 	beq.w	1a004 <d_type+0x414>
   19dce:	6969      	ldr	r1, [r5, #20]
   19dd0:	69ab      	ldr	r3, [r5, #24]
   19dd2:	4299      	cmp	r1, r3
   19dd4:	f280 8116 	bge.w	1a004 <d_type+0x414>
   19dd8:	008b      	lsls	r3, r1, #2
   19dda:	010a      	lsls	r2, r1, #4
   19ddc:	f8d5 c010 	ldr.w	ip, [r5, #16]
   19de0:	1ad2      	subs	r2, r2, r3
   19de2:	1c4b      	adds	r3, r1, #1
   19de4:	eb1c 0102 	adds.w	r1, ip, r2
   19de8:	616b      	str	r3, [r5, #20]
   19dea:	d004      	beq.n	19df6 <d_type+0x206>
   19dec:	604c      	str	r4, [r1, #4]
   19dee:	2322      	movs	r3, #34
   19df0:	68e8      	ldr	r0, [r5, #12]
   19df2:	f80c 3002 	strb.w	r3, [ip, r2]
   19df6:	9101      	str	r1, [sp, #4]
   19df8:	6849      	ldr	r1, [r1, #4]
   19dfa:	6b2b      	ldr	r3, [r5, #48]
   19dfc:	684a      	ldr	r2, [r1, #4]
   19dfe:	189b      	adds	r3, r3, r2
   19e00:	1c42      	adds	r2, r0, #1
   19e02:	632b      	str	r3, [r5, #48]
   19e04:	60ea      	str	r2, [r5, #12]
   19e06:	9801      	ldr	r0, [sp, #4]
   19e08:	e70a      	b.n	19c20 <d_type+0x30>
   19e0a:	1c43      	adds	r3, r0, #1
   19e0c:	60eb      	str	r3, [r5, #12]
   19e0e:	4628      	mov	r0, r5
   19e10:	f7ff fe7c 	bl	19b0c <d_source_name>
   19e14:	9001      	str	r0, [sp, #4]
   19e16:	4628      	mov	r0, r5
   19e18:	f7ff feea 	bl	19bf0 <d_type>
   19e1c:	211c      	movs	r1, #28
   19e1e:	4602      	mov	r2, r0
   19e20:	9b01      	ldr	r3, [sp, #4]
   19e22:	4628      	mov	r0, r5
   19e24:	f7ff fc70 	bl	19708 <d_make_comp>
   19e28:	9001      	str	r0, [sp, #4]
   19e2a:	e7b9      	b.n	19da0 <d_type+0x1b0>
   19e2c:	4628      	mov	r0, r5
   19e2e:	f7ff fd51 	bl	198d4 <d_template_param>
   19e32:	68eb      	ldr	r3, [r5, #12]
   19e34:	9001      	str	r0, [sp, #4]
   19e36:	781a      	ldrb	r2, [r3, #0]
   19e38:	2a49      	cmp	r2, #73
   19e3a:	d1b1      	bne.n	19da0 <d_type+0x1b0>
   19e3c:	2800      	cmp	r0, #0
   19e3e:	f43f aeee 	beq.w	19c1e <d_type+0x2e>
   19e42:	6a2a      	ldr	r2, [r5, #32]
   19e44:	6a6b      	ldr	r3, [r5, #36]
   19e46:	429a      	cmp	r2, r3
   19e48:	f6bf aee9 	bge.w	19c1e <d_type+0x2e>
   19e4c:	69eb      	ldr	r3, [r5, #28]
   19e4e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
   19e52:	3201      	adds	r2, #1
   19e54:	622a      	str	r2, [r5, #32]
   19e56:	4628      	mov	r0, r5
   19e58:	9c01      	ldr	r4, [sp, #4]
   19e5a:	f000 fe45 	bl	1aae8 <d_template_args>
   19e5e:	2104      	movs	r1, #4
   19e60:	4603      	mov	r3, r0
   19e62:	4622      	mov	r2, r4
   19e64:	4628      	mov	r0, r5
   19e66:	f7ff fc4f 	bl	19708 <d_make_comp>
   19e6a:	9001      	str	r0, [sp, #4]
   19e6c:	e798      	b.n	19da0 <d_type+0x1b0>
   19e6e:	7841      	ldrb	r1, [r0, #1]
   19e70:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   19e74:	b2d2      	uxtb	r2, r2
   19e76:	295f      	cmp	r1, #95
   19e78:	bf14      	ite	ne
   19e7a:	2300      	movne	r3, #0
   19e7c:	2301      	moveq	r3, #1
   19e7e:	2a09      	cmp	r2, #9
   19e80:	bf98      	it	ls
   19e82:	f043 0301 	orrls.w	r3, r3, #1	; 0x1
   19e86:	b92b      	cbnz	r3, 19e94 <d_type+0x2a4>
   19e88:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   19e8c:	b2db      	uxtb	r3, r3
   19e8e:	2b19      	cmp	r3, #25
   19e90:	f200 80cf 	bhi.w	1a032 <d_type+0x442>
   19e94:	2100      	movs	r1, #0
   19e96:	4628      	mov	r0, r5
   19e98:	f7ff fd50 	bl	1993c <d_substitution>
   19e9c:	68eb      	ldr	r3, [r5, #12]
   19e9e:	9001      	str	r0, [sp, #4]
   19ea0:	781a      	ldrb	r2, [r3, #0]
   19ea2:	4604      	mov	r4, r0
   19ea4:	2a49      	cmp	r2, #73
   19ea6:	d189      	bne.n	19dbc <d_type+0x1cc>
   19ea8:	4628      	mov	r0, r5
   19eaa:	f000 fe1d 	bl	1aae8 <d_template_args>
   19eae:	2104      	movs	r1, #4
   19eb0:	4603      	mov	r3, r0
   19eb2:	4622      	mov	r2, r4
   19eb4:	4628      	mov	r0, r5
   19eb6:	f7ff fc27 	bl	19708 <d_make_comp>
   19eba:	9001      	str	r0, [sp, #4]
   19ebc:	e770      	b.n	19da0 <d_type+0x1b0>
   19ebe:	1c43      	adds	r3, r0, #1
   19ec0:	60eb      	str	r3, [r5, #12]
   19ec2:	4628      	mov	r0, r5
   19ec4:	f7ff fe94 	bl	19bf0 <d_type>
   19ec8:	211e      	movs	r1, #30
   19eca:	4602      	mov	r2, r0
   19ecc:	2300      	movs	r3, #0
   19ece:	4628      	mov	r0, r5
   19ed0:	f7ff fc1a 	bl	19708 <d_make_comp>
   19ed4:	9001      	str	r0, [sp, #4]
   19ed6:	e763      	b.n	19da0 <d_type+0x1b0>
   19ed8:	1c43      	adds	r3, r0, #1
   19eda:	60eb      	str	r3, [r5, #12]
   19edc:	4628      	mov	r0, r5
   19ede:	f7ff fe87 	bl	19bf0 <d_type>
   19ee2:	211d      	movs	r1, #29
   19ee4:	4602      	mov	r2, r0
   19ee6:	2300      	movs	r3, #0
   19ee8:	4628      	mov	r0, r5
   19eea:	f7ff fc0d 	bl	19708 <d_make_comp>
   19eee:	9001      	str	r0, [sp, #4]
   19ef0:	e756      	b.n	19da0 <d_type+0x1b0>
   19ef2:	1c43      	adds	r3, r0, #1
   19ef4:	60eb      	str	r3, [r5, #12]
   19ef6:	4628      	mov	r0, r5
   19ef8:	f7ff fe7a 	bl	19bf0 <d_type>
   19efc:	211f      	movs	r1, #31
   19efe:	4602      	mov	r2, r0
   19f00:	2300      	movs	r3, #0
   19f02:	4628      	mov	r0, r5
   19f04:	f7ff fc00 	bl	19708 <d_make_comp>
   19f08:	9001      	str	r0, [sp, #4]
   19f0a:	e749      	b.n	19da0 <d_type+0x1b0>
   19f0c:	1c43      	adds	r3, r0, #1
   19f0e:	60eb      	str	r3, [r5, #12]
   19f10:	4628      	mov	r0, r5
   19f12:	f7ff fe6d 	bl	19bf0 <d_type>
   19f16:	4669      	mov	r1, sp
   19f18:	4607      	mov	r7, r0
   19f1a:	2201      	movs	r2, #1
   19f1c:	4628      	mov	r0, r5
   19f1e:	f7ff fc93 	bl	19848 <d_cv_qualifiers>
   19f22:	466e      	mov	r6, sp
   19f24:	4604      	mov	r4, r0
   19f26:	2800      	cmp	r0, #0
   19f28:	d16e      	bne.n	1a008 <d_type+0x418>
   19f2a:	2000      	movs	r0, #0
   19f2c:	9001      	str	r0, [sp, #4]
   19f2e:	e737      	b.n	19da0 <d_type+0x1b0>
   19f30:	1c43      	adds	r3, r0, #1
   19f32:	60eb      	str	r3, [r5, #12]
   19f34:	4628      	mov	r0, r5
   19f36:	f7ff fe5b 	bl	19bf0 <d_type>
   19f3a:	2121      	movs	r1, #33
   19f3c:	4602      	mov	r2, r0
   19f3e:	2300      	movs	r3, #0
   19f40:	4628      	mov	r0, r5
   19f42:	f7ff fbe1 	bl	19708 <d_make_comp>
   19f46:	9001      	str	r0, [sp, #4]
   19f48:	e72a      	b.n	19da0 <d_type+0x1b0>
   19f4a:	1c42      	adds	r2, r0, #1
   19f4c:	60ea      	str	r2, [r5, #12]
   19f4e:	7843      	ldrb	r3, [r0, #1]
   19f50:	2b59      	cmp	r3, #89
   19f52:	f000 8083 	beq.w	1a05c <d_type+0x46c>
   19f56:	2101      	movs	r1, #1
   19f58:	4628      	mov	r0, r5
   19f5a:	f000 f9b7 	bl	1a2cc <d_bare_function_type>
   19f5e:	68ea      	ldr	r2, [r5, #12]
   19f60:	7813      	ldrb	r3, [r2, #0]
   19f62:	2b45      	cmp	r3, #69
   19f64:	d1e1      	bne.n	19f2a <d_type+0x33a>
   19f66:	1c53      	adds	r3, r2, #1
   19f68:	60eb      	str	r3, [r5, #12]
   19f6a:	9001      	str	r0, [sp, #4]
   19f6c:	e718      	b.n	19da0 <d_type+0x1b0>
   19f6e:	1c43      	adds	r3, r0, #1
   19f70:	60eb      	str	r3, [r5, #12]
   19f72:	4628      	mov	r0, r5
   19f74:	f7ff fe3c 	bl	19bf0 <d_type>
   19f78:	2120      	movs	r1, #32
   19f7a:	4602      	mov	r2, r0
   19f7c:	2300      	movs	r3, #0
   19f7e:	4628      	mov	r0, r5
   19f80:	f7ff fbc2 	bl	19708 <d_make_comp>
   19f84:	9001      	str	r0, [sp, #4]
   19f86:	e70b      	b.n	19da0 <d_type+0x1b0>
   19f88:	1c41      	adds	r1, r0, #1
   19f8a:	60e9      	str	r1, [r5, #12]
   19f8c:	7842      	ldrb	r2, [r0, #1]
   19f8e:	2a5f      	cmp	r2, #95
   19f90:	d04d      	beq.n	1a02e <d_type+0x43e>
   19f92:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   19f96:	b2db      	uxtb	r3, r3
   19f98:	2b09      	cmp	r3, #9
   19f9a:	d857      	bhi.n	1a04c <d_type+0x45c>
   19f9c:	4608      	mov	r0, r1
   19f9e:	3001      	adds	r0, #1
   19fa0:	60e8      	str	r0, [r5, #12]
   19fa2:	7803      	ldrb	r3, [r0, #0]
   19fa4:	3b30      	subs	r3, #48
   19fa6:	b2db      	uxtb	r3, r3
   19fa8:	2b09      	cmp	r3, #9
   19faa:	d9f8      	bls.n	19f9e <d_type+0x3ae>
   19fac:	f8d5 c014 	ldr.w	ip, [r5, #20]
   19fb0:	69ab      	ldr	r3, [r5, #24]
   19fb2:	459c      	cmp	ip, r3
   19fb4:	dab9      	bge.n	19f2a <d_type+0x33a>
   19fb6:	ea4f 038c 	mov.w	r3, ip, lsl #2
   19fba:	ea4f 120c 	mov.w	r2, ip, lsl #4
   19fbe:	692c      	ldr	r4, [r5, #16]
   19fc0:	1ad2      	subs	r2, r2, r3
   19fc2:	18a6      	adds	r6, r4, r2
   19fc4:	f10c 0301 	add.w	r3, ip, #1	; 0x1
   19fc8:	616b      	str	r3, [r5, #20]
   19fca:	d0ae      	beq.n	19f2a <d_type+0x33a>
   19fcc:	1a40      	subs	r0, r0, r1
   19fce:	d0ac      	beq.n	19f2a <d_type+0x33a>
   19fd0:	2300      	movs	r3, #0
   19fd2:	54a3      	strb	r3, [r4, r2]
   19fd4:	6071      	str	r1, [r6, #4]
   19fd6:	60b0      	str	r0, [r6, #8]
   19fd8:	68e9      	ldr	r1, [r5, #12]
   19fda:	780b      	ldrb	r3, [r1, #0]
   19fdc:	2b5f      	cmp	r3, #95
   19fde:	d1a4      	bne.n	19f2a <d_type+0x33a>
   19fe0:	1c4b      	adds	r3, r1, #1
   19fe2:	60eb      	str	r3, [r5, #12]
   19fe4:	4628      	mov	r0, r5
   19fe6:	f7ff fe03 	bl	19bf0 <d_type>
   19fea:	2125      	movs	r1, #37
   19fec:	4603      	mov	r3, r0
   19fee:	4632      	mov	r2, r6
   19ff0:	4628      	mov	r0, r5
   19ff2:	f7ff fb89 	bl	19708 <d_make_comp>
   19ff6:	9001      	str	r0, [sp, #4]
   19ff8:	e6d2      	b.n	19da0 <d_type+0x1b0>
   19ffa:	4628      	mov	r0, r5
   19ffc:	f000 fdb6 	bl	1ab6c <d_name>
   1a000:	9001      	str	r0, [sp, #4]
   1a002:	e6cd      	b.n	19da0 <d_type+0x1b0>
   1a004:	2100      	movs	r1, #0
   1a006:	e6f6      	b.n	19df6 <d_type+0x206>
   1a008:	4628      	mov	r0, r5
   1a00a:	f7ff fdf1 	bl	19bf0 <d_type>
   1a00e:	6020      	str	r0, [r4, #0]
   1a010:	2800      	cmp	r0, #0
   1a012:	d08a      	beq.n	19f2a <d_type+0x33a>
   1a014:	456c      	cmp	r4, sp
   1a016:	d002      	beq.n	1a01e <d_type+0x42e>
   1a018:	7803      	ldrb	r3, [r0, #0]
   1a01a:	2b24      	cmp	r3, #36
   1a01c:	d121      	bne.n	1a062 <d_type+0x472>
   1a01e:	4628      	mov	r0, r5
   1a020:	2126      	movs	r1, #38
   1a022:	463a      	mov	r2, r7
   1a024:	9b00      	ldr	r3, [sp, #0]
   1a026:	f7ff fb6f 	bl	19708 <d_make_comp>
   1a02a:	9001      	str	r0, [sp, #4]
   1a02c:	e6b8      	b.n	19da0 <d_type+0x1b0>
   1a02e:	2600      	movs	r6, #0
   1a030:	e7d6      	b.n	19fe0 <d_type+0x3f0>
   1a032:	4628      	mov	r0, r5
   1a034:	f000 fd9a 	bl	1ab6c <d_name>
   1a038:	2800      	cmp	r0, #0
   1a03a:	f43f adf0 	beq.w	19c1e <d_type+0x2e>
   1a03e:	7803      	ldrb	r3, [r0, #0]
   1a040:	9001      	str	r0, [sp, #4]
   1a042:	2b15      	cmp	r3, #21
   1a044:	f47f aeb0 	bne.w	19da8 <d_type+0x1b8>
   1a048:	9801      	ldr	r0, [sp, #4]
   1a04a:	e5e9      	b.n	19c20 <d_type+0x30>
   1a04c:	4628      	mov	r0, r5
   1a04e:	f000 fca9 	bl	1a9a4 <d_expression>
   1a052:	4606      	mov	r6, r0
   1a054:	2800      	cmp	r0, #0
   1a056:	d1bf      	bne.n	19fd8 <d_type+0x3e8>
   1a058:	2000      	movs	r0, #0
   1a05a:	e767      	b.n	19f2c <d_type+0x33c>
   1a05c:	1c53      	adds	r3, r2, #1
   1a05e:	60eb      	str	r3, [r5, #12]
   1a060:	e779      	b.n	19f56 <d_type+0x366>
   1a062:	9900      	ldr	r1, [sp, #0]
   1a064:	2900      	cmp	r1, #0
   1a066:	f43f af60 	beq.w	19f2a <d_type+0x33a>
   1a06a:	6a2a      	ldr	r2, [r5, #32]
   1a06c:	6a6b      	ldr	r3, [r5, #36]
   1a06e:	429a      	cmp	r2, r3
   1a070:	f6bf af5b 	bge.w	19f2a <d_type+0x33a>
   1a074:	69eb      	ldr	r3, [r5, #28]
   1a076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   1a07a:	3201      	adds	r2, #1
   1a07c:	622a      	str	r2, [r5, #32]
   1a07e:	e7ce      	b.n	1a01e <d_type+0x42e>
   1a080:	00023ac0 	.word	0x00023ac0

0001a084 <d_operator_name>:
   1a084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a088:	68c2      	ldr	r2, [r0, #12]
   1a08a:	4606      	mov	r6, r0
   1a08c:	7814      	ldrb	r4, [r2, #0]
   1a08e:	2c00      	cmp	r4, #0
   1a090:	d02a      	beq.n	1a0e8 <d_operator_name+0x64>
   1a092:	1c53      	adds	r3, r2, #1
   1a094:	60c3      	str	r3, [r0, #12]
   1a096:	7855      	ldrb	r5, [r2, #1]
   1a098:	b10d      	cbz	r5, 1a09e <d_operator_name+0x1a>
   1a09a:	3301      	adds	r3, #1
   1a09c:	60c3      	str	r3, [r0, #12]
   1a09e:	2c76      	cmp	r4, #118
   1a0a0:	d143      	bne.n	1a12a <d_operator_name+0xa6>
   1a0a2:	f1a5 0730 	sub.w	r7, r5, #48	; 0x30
   1a0a6:	b2fb      	uxtb	r3, r7
   1a0a8:	2b09      	cmp	r3, #9
   1a0aa:	d81e      	bhi.n	1a0ea <d_operator_name+0x66>
   1a0ac:	4630      	mov	r0, r6
   1a0ae:	f7ff fd2d 	bl	19b0c <d_source_name>
   1a0b2:	6971      	ldr	r1, [r6, #20]
   1a0b4:	69b3      	ldr	r3, [r6, #24]
   1a0b6:	4604      	mov	r4, r0
   1a0b8:	4299      	cmp	r1, r3
   1a0ba:	da2f      	bge.n	1a11c <d_operator_name+0x98>
   1a0bc:	008a      	lsls	r2, r1, #2
   1a0be:	010b      	lsls	r3, r1, #4
   1a0c0:	ebc2 0c03 	rsb	ip, r2, r3
   1a0c4:	6932      	ldr	r2, [r6, #16]
   1a0c6:	1c4b      	adds	r3, r1, #1
   1a0c8:	eb12 000c 	adds.w	r0, r2, ip
   1a0cc:	6173      	str	r3, [r6, #20]
   1a0ce:	bf14      	ite	ne
   1a0d0:	2300      	movne	r3, #0
   1a0d2:	2301      	moveq	r3, #1
   1a0d4:	ea53 73d7 	orrs.w	r3, r3, r7, lsr #31
   1a0d8:	d120      	bne.n	1a11c <d_operator_name+0x98>
   1a0da:	b1fc      	cbz	r4, 1a11c <d_operator_name+0x98>
   1a0dc:	232a      	movs	r3, #42
   1a0de:	f802 300c 	strb.w	r3, [r2, ip]
   1a0e2:	6047      	str	r7, [r0, #4]
   1a0e4:	6084      	str	r4, [r0, #8]
   1a0e6:	e01a      	b.n	1a11e <d_operator_name+0x9a>
   1a0e8:	4625      	mov	r5, r4
   1a0ea:	4f24      	ldr	r7, [pc, #144]	(1a17c <d_operator_name+0xf8>)
   1a0ec:	2000      	movs	r0, #0
   1a0ee:	f04f 0c31 	mov.w	ip, #49	; 0x31
   1a0f2:	ebc0 030c 	rsb	r3, r0, ip
   1a0f6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1a0fa:	eb00 0163 	add.w	r1, r0, r3, asr #1
   1a0fe:	010a      	lsls	r2, r1, #4
   1a100:	58bb      	ldr	r3, [r7, r2]
   1a102:	eb07 0802 	add.w	r8, r7, r2
   1a106:	781a      	ldrb	r2, [r3, #0]
   1a108:	4294      	cmp	r4, r2
   1a10a:	d10a      	bne.n	1a122 <d_operator_name+0x9e>
   1a10c:	785b      	ldrb	r3, [r3, #1]
   1a10e:	429d      	cmp	r5, r3
   1a110:	d020      	beq.n	1a154 <d_operator_name+0xd0>
   1a112:	42ab      	cmp	r3, r5
   1a114:	d907      	bls.n	1a126 <d_operator_name+0xa2>
   1a116:	468c      	mov	ip, r1
   1a118:	4560      	cmp	r0, ip
   1a11a:	d1ea      	bne.n	1a0f2 <d_operator_name+0x6e>
   1a11c:	2000      	movs	r0, #0
   1a11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a122:	42a2      	cmp	r2, r4
   1a124:	d8f7      	bhi.n	1a116 <d_operator_name+0x92>
   1a126:	1c48      	adds	r0, r1, #1
   1a128:	e7f6      	b.n	1a118 <d_operator_name+0x94>
   1a12a:	2c63      	cmp	r4, #99
   1a12c:	bf14      	ite	ne
   1a12e:	2300      	movne	r3, #0
   1a130:	2301      	moveq	r3, #1
   1a132:	2d76      	cmp	r5, #118
   1a134:	bf14      	ite	ne
   1a136:	2300      	movne	r3, #0
   1a138:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
   1a13c:	2b00      	cmp	r3, #0
   1a13e:	d0d4      	beq.n	1a0ea <d_operator_name+0x66>
   1a140:	4630      	mov	r0, r6
   1a142:	f7ff fd55 	bl	19bf0 <d_type>
   1a146:	212b      	movs	r1, #43
   1a148:	4602      	mov	r2, r0
   1a14a:	2300      	movs	r3, #0
   1a14c:	4630      	mov	r0, r6
   1a14e:	f7ff fadb 	bl	19708 <d_make_comp>
   1a152:	e7e4      	b.n	1a11e <d_operator_name+0x9a>
   1a154:	6971      	ldr	r1, [r6, #20]
   1a156:	69b3      	ldr	r3, [r6, #24]
   1a158:	4299      	cmp	r1, r3
   1a15a:	dadf      	bge.n	1a11c <d_operator_name+0x98>
   1a15c:	008b      	lsls	r3, r1, #2
   1a15e:	010a      	lsls	r2, r1, #4
   1a160:	f8d6 c010 	ldr.w	ip, [r6, #16]
   1a164:	1ad2      	subs	r2, r2, r3
   1a166:	1c4b      	adds	r3, r1, #1
   1a168:	eb1c 0002 	adds.w	r0, ip, r2
   1a16c:	6173      	str	r3, [r6, #20]
   1a16e:	d0d6      	beq.n	1a11e <d_operator_name+0x9a>
   1a170:	2329      	movs	r3, #41
   1a172:	f80c 3002 	strb.w	r3, [ip, r2]
   1a176:	f8c0 8004 	str.w	r8, [r0, #4]
   1a17a:	e7d0      	b.n	1a11e <d_operator_name+0x9a>
   1a17c:	0002445c 	.word	0x0002445c

0001a180 <d_unqualified_name>:
   1a180:	b570      	push	{r4, r5, r6, lr}
   1a182:	68c1      	ldr	r1, [r0, #12]
   1a184:	4604      	mov	r4, r0
   1a186:	780a      	ldrb	r2, [r1, #0]
   1a188:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   1a18c:	b2db      	uxtb	r3, r3
   1a18e:	2b09      	cmp	r3, #9
   1a190:	d927      	bls.n	1a1e2 <d_unqualified_name+0x62>
   1a192:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   1a196:	b2db      	uxtb	r3, r3
   1a198:	2b19      	cmp	r3, #25
   1a19a:	d914      	bls.n	1a1c6 <d_unqualified_name+0x46>
   1a19c:	f1a2 0343 	sub.w	r3, r2, #67	; 0x43
   1a1a0:	b2db      	uxtb	r3, r3
   1a1a2:	2b01      	cmp	r3, #1
   1a1a4:	d870      	bhi.n	1a288 <d_unqualified_name+0x108>
   1a1a6:	6ac5      	ldr	r5, [r0, #44]
   1a1a8:	b13d      	cbz	r5, 1a1ba <d_unqualified_name+0x3a>
   1a1aa:	782b      	ldrb	r3, [r5, #0]
   1a1ac:	2b00      	cmp	r3, #0
   1a1ae:	d11b      	bne.n	1a1e8 <d_unqualified_name+0x68>
   1a1b0:	68aa      	ldr	r2, [r5, #8]
   1a1b2:	6b23      	ldr	r3, [r4, #48]
   1a1b4:	189b      	adds	r3, r3, r2
   1a1b6:	6323      	str	r3, [r4, #48]
   1a1b8:	780a      	ldrb	r2, [r1, #0]
   1a1ba:	2a43      	cmp	r2, #67
   1a1bc:	d018      	beq.n	1a1f0 <d_unqualified_name+0x70>
   1a1be:	2a44      	cmp	r2, #68
   1a1c0:	d03c      	beq.n	1a23c <d_unqualified_name+0xbc>
   1a1c2:	2000      	movs	r0, #0
   1a1c4:	bd70      	pop	{r4, r5, r6, pc}
   1a1c6:	f7ff ff5d 	bl	1a084 <d_operator_name>
   1a1ca:	2800      	cmp	r0, #0
   1a1cc:	d0fa      	beq.n	1a1c4 <d_unqualified_name+0x44>
   1a1ce:	7803      	ldrb	r3, [r0, #0]
   1a1d0:	2b29      	cmp	r3, #41
   1a1d2:	d1f7      	bne.n	1a1c4 <d_unqualified_name+0x44>
   1a1d4:	6843      	ldr	r3, [r0, #4]
   1a1d6:	6b22      	ldr	r2, [r4, #48]
   1a1d8:	6899      	ldr	r1, [r3, #8]
   1a1da:	1852      	adds	r2, r2, r1
   1a1dc:	3207      	adds	r2, #7
   1a1de:	6322      	str	r2, [r4, #48]
   1a1e0:	e7f0      	b.n	1a1c4 <d_unqualified_name+0x44>
   1a1e2:	f7ff fc93 	bl	19b0c <d_source_name>
   1a1e6:	e7ed      	b.n	1a1c4 <d_unqualified_name+0x44>
   1a1e8:	2b15      	cmp	r3, #21
   1a1ea:	d0e1      	beq.n	1a1b0 <d_unqualified_name+0x30>
   1a1ec:	2a43      	cmp	r2, #67
   1a1ee:	d1e6      	bne.n	1a1be <d_unqualified_name+0x3e>
   1a1f0:	784b      	ldrb	r3, [r1, #1]
   1a1f2:	2b32      	cmp	r3, #50
   1a1f4:	d05d      	beq.n	1a2b2 <d_unqualified_name+0x132>
   1a1f6:	2b33      	cmp	r3, #51
   1a1f8:	d059      	beq.n	1a2ae <d_unqualified_name+0x12e>
   1a1fa:	2b31      	cmp	r3, #49
   1a1fc:	d1e1      	bne.n	1a1c2 <d_unqualified_name+0x42>
   1a1fe:	2601      	movs	r6, #1
   1a200:	1c8b      	adds	r3, r1, #2
   1a202:	60e3      	str	r3, [r4, #12]
   1a204:	6961      	ldr	r1, [r4, #20]
   1a206:	69a3      	ldr	r3, [r4, #24]
   1a208:	4299      	cmp	r1, r3
   1a20a:	dada      	bge.n	1a1c2 <d_unqualified_name+0x42>
   1a20c:	008a      	lsls	r2, r1, #2
   1a20e:	010b      	lsls	r3, r1, #4
   1a210:	ebc2 0c03 	rsb	ip, r2, r3
   1a214:	6922      	ldr	r2, [r4, #16]
   1a216:	1c4b      	adds	r3, r1, #1
   1a218:	eb12 000c 	adds.w	r0, r2, ip
   1a21c:	6163      	str	r3, [r4, #20]
   1a21e:	bf14      	ite	ne
   1a220:	2300      	movne	r3, #0
   1a222:	2301      	moveq	r3, #1
   1a224:	2d00      	cmp	r5, #0
   1a226:	bf08      	it	eq
   1a228:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1a22c:	2b00      	cmp	r3, #0
   1a22e:	d1c8      	bne.n	1a1c2 <d_unqualified_name+0x42>
   1a230:	3306      	adds	r3, #6
   1a232:	f802 300c 	strb.w	r3, [r2, ip]
   1a236:	7106      	strb	r6, [r0, #4]
   1a238:	6085      	str	r5, [r0, #8]
   1a23a:	e7c3      	b.n	1a1c4 <d_unqualified_name+0x44>
   1a23c:	784b      	ldrb	r3, [r1, #1]
   1a23e:	2b31      	cmp	r3, #49
   1a240:	d033      	beq.n	1a2aa <d_unqualified_name+0x12a>
   1a242:	2b32      	cmp	r3, #50
   1a244:	d02f      	beq.n	1a2a6 <d_unqualified_name+0x126>
   1a246:	2b30      	cmp	r3, #48
   1a248:	d1bb      	bne.n	1a1c2 <d_unqualified_name+0x42>
   1a24a:	2601      	movs	r6, #1
   1a24c:	1c8b      	adds	r3, r1, #2
   1a24e:	60e3      	str	r3, [r4, #12]
   1a250:	6961      	ldr	r1, [r4, #20]
   1a252:	69a3      	ldr	r3, [r4, #24]
   1a254:	4299      	cmp	r1, r3
   1a256:	dab4      	bge.n	1a1c2 <d_unqualified_name+0x42>
   1a258:	008a      	lsls	r2, r1, #2
   1a25a:	010b      	lsls	r3, r1, #4
   1a25c:	ebc2 0c03 	rsb	ip, r2, r3
   1a260:	6922      	ldr	r2, [r4, #16]
   1a262:	1c4b      	adds	r3, r1, #1
   1a264:	eb12 000c 	adds.w	r0, r2, ip
   1a268:	6163      	str	r3, [r4, #20]
   1a26a:	bf14      	ite	ne
   1a26c:	2300      	movne	r3, #0
   1a26e:	2301      	moveq	r3, #1
   1a270:	2d00      	cmp	r5, #0
   1a272:	bf08      	it	eq
   1a274:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1a278:	2b00      	cmp	r3, #0
   1a27a:	d1a2      	bne.n	1a1c2 <d_unqualified_name+0x42>
   1a27c:	3307      	adds	r3, #7
   1a27e:	f802 300c 	strb.w	r3, [r2, ip]
   1a282:	7106      	strb	r6, [r0, #4]
   1a284:	6085      	str	r5, [r0, #8]
   1a286:	e79d      	b.n	1a1c4 <d_unqualified_name+0x44>
   1a288:	2a4c      	cmp	r2, #76
   1a28a:	d19a      	bne.n	1a1c2 <d_unqualified_name+0x42>
   1a28c:	1c4b      	adds	r3, r1, #1
   1a28e:	60c3      	str	r3, [r0, #12]
   1a290:	f7ff fc3c 	bl	19b0c <d_source_name>
   1a294:	4605      	mov	r5, r0
   1a296:	2800      	cmp	r0, #0
   1a298:	d093      	beq.n	1a1c2 <d_unqualified_name+0x42>
   1a29a:	68e2      	ldr	r2, [r4, #12]
   1a29c:	7813      	ldrb	r3, [r2, #0]
   1a29e:	2b5f      	cmp	r3, #95
   1a2a0:	d009      	beq.n	1a2b6 <d_unqualified_name+0x136>
   1a2a2:	4628      	mov	r0, r5
   1a2a4:	e78e      	b.n	1a1c4 <d_unqualified_name+0x44>
   1a2a6:	2603      	movs	r6, #3
   1a2a8:	e7d0      	b.n	1a24c <d_unqualified_name+0xcc>
   1a2aa:	2602      	movs	r6, #2
   1a2ac:	e7ce      	b.n	1a24c <d_unqualified_name+0xcc>
   1a2ae:	2603      	movs	r6, #3
   1a2b0:	e7a6      	b.n	1a200 <d_unqualified_name+0x80>
   1a2b2:	2602      	movs	r6, #2
   1a2b4:	e7a4      	b.n	1a200 <d_unqualified_name+0x80>
   1a2b6:	1c53      	adds	r3, r2, #1
   1a2b8:	60e3      	str	r3, [r4, #12]
   1a2ba:	4620      	mov	r0, r4
   1a2bc:	f7ff fa76 	bl	197ac <d_number>
   1a2c0:	2800      	cmp	r0, #0
   1a2c2:	f6ff af7e 	blt.w	1a1c2 <d_unqualified_name+0x42>
   1a2c6:	4628      	mov	r0, r5
   1a2c8:	e77c      	b.n	1a1c4 <d_unqualified_name+0x44>
   1a2ca:	46c0      	nop			(mov r8, r8)

0001a2cc <d_bare_function_type>:
   1a2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a2d0:	460e      	mov	r6, r1
   1a2d2:	68c1      	ldr	r1, [r0, #12]
   1a2d4:	b082      	sub	sp, #8
   1a2d6:	780b      	ldrb	r3, [r1, #0]
   1a2d8:	4605      	mov	r5, r0
   1a2da:	2b4a      	cmp	r3, #74
   1a2dc:	d035      	beq.n	1a34a <d_bare_function_type+0x7e>
   1a2de:	2300      	movs	r3, #0
   1a2e0:	af02      	add	r7, sp, #8
   1a2e2:	f847 3d04 	str.w	r3, [r7, #-4]!
   1a2e6:	4698      	mov	r8, r3
   1a2e8:	e002      	b.n	1a2f0 <d_bare_function_type+0x24>
   1a2ea:	68e9      	ldr	r1, [r5, #12]
   1a2ec:	4626      	mov	r6, r4
   1a2ee:	4680      	mov	r8, r0
   1a2f0:	780a      	ldrb	r2, [r1, #0]
   1a2f2:	2a45      	cmp	r2, #69
   1a2f4:	bf14      	ite	ne
   1a2f6:	2300      	movne	r3, #0
   1a2f8:	2301      	moveq	r3, #1
   1a2fa:	2a00      	cmp	r2, #0
   1a2fc:	bf14      	ite	ne
   1a2fe:	461c      	movne	r4, r3
   1a300:	f043 0401 	orreq.w	r4, r3, #1	; 0x1
   1a304:	b9ac      	cbnz	r4, 1a332 <d_bare_function_type+0x66>
   1a306:	4628      	mov	r0, r5
   1a308:	f7ff fc72 	bl	19bf0 <d_type>
   1a30c:	4602      	mov	r2, r0
   1a30e:	b160      	cbz	r0, 1a32a <d_bare_function_type+0x5e>
   1a310:	2e00      	cmp	r6, #0
   1a312:	d1ea      	bne.n	1a2ea <d_bare_function_type+0x1e>
   1a314:	4628      	mov	r0, r5
   1a316:	2127      	movs	r1, #39
   1a318:	4633      	mov	r3, r6
   1a31a:	f7ff f9f5 	bl	19708 <d_make_comp>
   1a31e:	6038      	str	r0, [r7, #0]
   1a320:	b118      	cbz	r0, 1a32a <d_bare_function_type+0x5e>
   1a322:	f100 0708 	add.w	r7, r0, #8	; 0x8
   1a326:	68e9      	ldr	r1, [r5, #12]
   1a328:	e7e2      	b.n	1a2f0 <d_bare_function_type+0x24>
   1a32a:	2000      	movs	r0, #0
   1a32c:	b002      	add	sp, #8
   1a32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a332:	9c01      	ldr	r4, [sp, #4]
   1a334:	2c00      	cmp	r4, #0
   1a336:	d0f8      	beq.n	1a32a <d_bare_function_type+0x5e>
   1a338:	68a1      	ldr	r1, [r4, #8]
   1a33a:	b159      	cbz	r1, 1a354 <d_bare_function_type+0x88>
   1a33c:	4628      	mov	r0, r5
   1a33e:	2124      	movs	r1, #36
   1a340:	4642      	mov	r2, r8
   1a342:	4623      	mov	r3, r4
   1a344:	f7ff f9e0 	bl	19708 <d_make_comp>
   1a348:	e7f0      	b.n	1a32c <d_bare_function_type+0x60>
   1a34a:	1c4b      	adds	r3, r1, #1
   1a34c:	60c3      	str	r3, [r0, #12]
   1a34e:	2601      	movs	r6, #1
   1a350:	4619      	mov	r1, r3
   1a352:	e7c4      	b.n	1a2de <d_bare_function_type+0x12>
   1a354:	6862      	ldr	r2, [r4, #4]
   1a356:	7813      	ldrb	r3, [r2, #0]
   1a358:	2b22      	cmp	r3, #34
   1a35a:	d1ef      	bne.n	1a33c <d_bare_function_type+0x70>
   1a35c:	6852      	ldr	r2, [r2, #4]
   1a35e:	7c13      	ldrb	r3, [r2, #16]
   1a360:	2b09      	cmp	r3, #9
   1a362:	d1eb      	bne.n	1a33c <d_bare_function_type+0x70>
   1a364:	6b2b      	ldr	r3, [r5, #48]
   1a366:	6852      	ldr	r2, [r2, #4]
   1a368:	9101      	str	r1, [sp, #4]
   1a36a:	1a9b      	subs	r3, r3, r2
   1a36c:	632b      	str	r3, [r5, #48]
   1a36e:	460c      	mov	r4, r1
   1a370:	e7e4      	b.n	1a33c <d_bare_function_type+0x70>
   1a372:	46c0      	nop			(mov r8, r8)

0001a374 <d_encoding>:
   1a374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a378:	460d      	mov	r5, r1
   1a37a:	68c1      	ldr	r1, [r0, #12]
   1a37c:	4606      	mov	r6, r0
   1a37e:	780a      	ldrb	r2, [r1, #0]
   1a380:	2a54      	cmp	r2, #84
   1a382:	bf14      	ite	ne
   1a384:	2300      	movne	r3, #0
   1a386:	2301      	moveq	r3, #1
   1a388:	2a47      	cmp	r2, #71
   1a38a:	bf08      	it	eq
   1a38c:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1a390:	2b00      	cmp	r3, #0
   1a392:	d14e      	bne.n	1a432 <d_encoding+0xbe>
   1a394:	f000 fbea 	bl	1ab6c <d_name>
   1a398:	1e2b      	subs	r3, r5, #0
   1a39a:	bf18      	it	ne
   1a39c:	2301      	movne	r3, #1
   1a39e:	2800      	cmp	r0, #0
   1a3a0:	bf0c      	ite	eq
   1a3a2:	2300      	moveq	r3, #0
   1a3a4:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   1a3a8:	4604      	mov	r4, r0
   1a3aa:	bb0b      	cbnz	r3, 1a3f0 <d_encoding+0x7c>
   1a3ac:	68f2      	ldr	r2, [r6, #12]
   1a3ae:	7812      	ldrb	r2, [r2, #0]
   1a3b0:	f1d2 0301 	rsbs	r3, r2, #1	; 0x1
   1a3b4:	bf38      	it	cc
   1a3b6:	2300      	movcc	r3, #0
   1a3b8:	2c00      	cmp	r4, #0
   1a3ba:	bf08      	it	eq
   1a3bc:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1a3c0:	2b00      	cmp	r3, #0
   1a3c2:	d133      	bne.n	1a42c <d_encoding+0xb8>
   1a3c4:	2a45      	cmp	r2, #69
   1a3c6:	d031      	beq.n	1a42c <d_encoding+0xb8>
   1a3c8:	4622      	mov	r2, r4
   1a3ca:	7813      	ldrb	r3, [r2, #0]
   1a3cc:	2b04      	cmp	r3, #4
   1a3ce:	f000 80cd 	beq.w	1a56c <d_encoding+0x1f8>
   1a3d2:	d302      	bcc.n	1a3da <d_encoding+0x66>
   1a3d4:	3b19      	subs	r3, #25
   1a3d6:	2b02      	cmp	r3, #2
   1a3d8:	d94f      	bls.n	1a47a <d_encoding+0x106>
   1a3da:	2100      	movs	r1, #0
   1a3dc:	4630      	mov	r0, r6
   1a3de:	f7ff ff75 	bl	1a2cc <d_bare_function_type>
   1a3e2:	2103      	movs	r1, #3
   1a3e4:	4603      	mov	r3, r0
   1a3e6:	4622      	mov	r2, r4
   1a3e8:	4630      	mov	r0, r6
   1a3ea:	f7ff f98d 	bl	19708 <d_make_comp>
   1a3ee:	e01e      	b.n	1a42e <d_encoding+0xba>
   1a3f0:	68b3      	ldr	r3, [r6, #8]
   1a3f2:	f013 0f01 	tst.w	r3, #1	; 0x1
   1a3f6:	d1d9      	bne.n	1a3ac <d_encoding+0x38>
   1a3f8:	7822      	ldrb	r2, [r4, #0]
   1a3fa:	f1a2 0319 	sub.w	r3, r2, #25	; 0x19
   1a3fe:	b2db      	uxtb	r3, r3
   1a400:	2b02      	cmp	r3, #2
   1a402:	d806      	bhi.n	1a412 <d_encoding+0x9e>
   1a404:	6864      	ldr	r4, [r4, #4]
   1a406:	7822      	ldrb	r2, [r4, #0]
   1a408:	f1a2 0319 	sub.w	r3, r2, #25	; 0x19
   1a40c:	b2db      	uxtb	r3, r3
   1a40e:	2b02      	cmp	r3, #2
   1a410:	d9f8      	bls.n	1a404 <d_encoding+0x90>
   1a412:	2a02      	cmp	r2, #2
   1a414:	4620      	mov	r0, r4
   1a416:	d10a      	bne.n	1a42e <d_encoding+0xba>
   1a418:	68a2      	ldr	r2, [r4, #8]
   1a41a:	e000      	b.n	1a41e <d_encoding+0xaa>
   1a41c:	6852      	ldr	r2, [r2, #4]
   1a41e:	7813      	ldrb	r3, [r2, #0]
   1a420:	3b19      	subs	r3, #25
   1a422:	b2db      	uxtb	r3, r3
   1a424:	2b02      	cmp	r3, #2
   1a426:	d9f9      	bls.n	1a41c <d_encoding+0xa8>
   1a428:	60a2      	str	r2, [r4, #8]
   1a42a:	e000      	b.n	1a42e <d_encoding+0xba>
   1a42c:	4620      	mov	r0, r4
   1a42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a432:	6b03      	ldr	r3, [r0, #48]
   1a434:	f103 0014 	add.w	r0, r3, #20	; 0x14
   1a438:	6330      	str	r0, [r6, #48]
   1a43a:	780b      	ldrb	r3, [r1, #0]
   1a43c:	2b54      	cmp	r3, #84
   1a43e:	d020      	beq.n	1a482 <d_encoding+0x10e>
   1a440:	2b47      	cmp	r3, #71
   1a442:	d001      	beq.n	1a448 <d_encoding+0xd4>
   1a444:	2000      	movs	r0, #0
   1a446:	e7f2      	b.n	1a42e <d_encoding+0xba>
   1a448:	1c4b      	adds	r3, r1, #1
   1a44a:	60f3      	str	r3, [r6, #12]
   1a44c:	784a      	ldrb	r2, [r1, #1]
   1a44e:	2a00      	cmp	r2, #0
   1a450:	d0f8      	beq.n	1a444 <d_encoding+0xd0>
   1a452:	3301      	adds	r3, #1
   1a454:	2a52      	cmp	r2, #82
   1a456:	60f3      	str	r3, [r6, #12]
   1a458:	f000 8189 	beq.w	1a76e <d_encoding+0x3fa>
   1a45c:	f200 8191 	bhi.w	1a782 <d_encoding+0x40e>
   1a460:	2a41      	cmp	r2, #65
   1a462:	d1ef      	bne.n	1a444 <d_encoding+0xd0>
   1a464:	2100      	movs	r1, #0
   1a466:	4630      	mov	r0, r6
   1a468:	f7ff ff84 	bl	1a374 <d_encoding>
   1a46c:	2114      	movs	r1, #20
   1a46e:	4602      	mov	r2, r0
   1a470:	2300      	movs	r3, #0
   1a472:	4630      	mov	r0, r6
   1a474:	f7ff f948 	bl	19708 <d_make_comp>
   1a478:	e7d9      	b.n	1a42e <d_encoding+0xba>
   1a47a:	6852      	ldr	r2, [r2, #4]
   1a47c:	2a00      	cmp	r2, #0
   1a47e:	d1a4      	bne.n	1a3ca <d_encoding+0x56>
   1a480:	e7ab      	b.n	1a3da <d_encoding+0x66>
   1a482:	1c4a      	adds	r2, r1, #1
   1a484:	60f2      	str	r2, [r6, #12]
   1a486:	784b      	ldrb	r3, [r1, #1]
   1a488:	2b00      	cmp	r3, #0
   1a48a:	d0db      	beq.n	1a444 <d_encoding+0xd0>
   1a48c:	3201      	adds	r2, #1
   1a48e:	3b43      	subs	r3, #67
   1a490:	60f2      	str	r2, [r6, #12]
   1a492:	2b33      	cmp	r3, #51
   1a494:	d8d6      	bhi.n	1a444 <d_encoding+0xd0>
   1a496:	a101      	add	r1, pc, #4	(adr r1, 1a49c <d_encoding+0x128>)
   1a498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1a49c:	0001a6b1 	.word	0x0001a6b1
   1a4a0:	0001a445 	.word	0x0001a445
   1a4a4:	0001a445 	.word	0x0001a445
   1a4a8:	0001a701 	.word	0x0001a701
   1a4ac:	0001a445 	.word	0x0001a445
   1a4b0:	0001a445 	.word	0x0001a445
   1a4b4:	0001a6ed 	.word	0x0001a6ed
   1a4b8:	0001a75b 	.word	0x0001a75b
   1a4bc:	0001a445 	.word	0x0001a445
   1a4c0:	0001a445 	.word	0x0001a445
   1a4c4:	0001a445 	.word	0x0001a445
   1a4c8:	0001a445 	.word	0x0001a445
   1a4cc:	0001a445 	.word	0x0001a445
   1a4d0:	0001a445 	.word	0x0001a445
   1a4d4:	0001a445 	.word	0x0001a445
   1a4d8:	0001a445 	.word	0x0001a445
   1a4dc:	0001a747 	.word	0x0001a747
   1a4e0:	0001a72d 	.word	0x0001a72d
   1a4e4:	0001a445 	.word	0x0001a445
   1a4e8:	0001a715 	.word	0x0001a715
   1a4ec:	0001a445 	.word	0x0001a445
   1a4f0:	0001a445 	.word	0x0001a445
   1a4f4:	0001a445 	.word	0x0001a445
   1a4f8:	0001a445 	.word	0x0001a445
   1a4fc:	0001a445 	.word	0x0001a445
   1a500:	0001a445 	.word	0x0001a445
   1a504:	0001a445 	.word	0x0001a445
   1a508:	0001a445 	.word	0x0001a445
   1a50c:	0001a445 	.word	0x0001a445
   1a510:	0001a445 	.word	0x0001a445
   1a514:	0001a445 	.word	0x0001a445
   1a518:	0001a445 	.word	0x0001a445
   1a51c:	0001a65b 	.word	0x0001a65b
   1a520:	0001a445 	.word	0x0001a445
   1a524:	0001a445 	.word	0x0001a445
   1a528:	0001a445 	.word	0x0001a445
   1a52c:	0001a445 	.word	0x0001a445
   1a530:	0001a637 	.word	0x0001a637
   1a534:	0001a445 	.word	0x0001a445
   1a538:	0001a445 	.word	0x0001a445
   1a53c:	0001a445 	.word	0x0001a445
   1a540:	0001a445 	.word	0x0001a445
   1a544:	0001a445 	.word	0x0001a445
   1a548:	0001a445 	.word	0x0001a445
   1a54c:	0001a445 	.word	0x0001a445
   1a550:	0001a445 	.word	0x0001a445
   1a554:	0001a445 	.word	0x0001a445
   1a558:	0001a445 	.word	0x0001a445
   1a55c:	0001a445 	.word	0x0001a445
   1a560:	0001a445 	.word	0x0001a445
   1a564:	0001a445 	.word	0x0001a445
   1a568:	0001a68d 	.word	0x0001a68d
   1a56c:	6852      	ldr	r2, [r2, #4]
   1a56e:	2a00      	cmp	r2, #0
   1a570:	d05f      	beq.n	1a632 <d_encoding+0x2be>
   1a572:	7813      	ldrb	r3, [r2, #0]
   1a574:	3b01      	subs	r3, #1
   1a576:	2b2a      	cmp	r3, #42
   1a578:	d85b      	bhi.n	1a632 <d_encoding+0x2be>
   1a57a:	a101      	add	r1, pc, #4	(adr r1, 1a580 <d_encoding+0x20c>)
   1a57c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1a580:	0001a62d 	.word	0x0001a62d
   1a584:	0001a62d 	.word	0x0001a62d
   1a588:	0001a633 	.word	0x0001a633
   1a58c:	0001a633 	.word	0x0001a633
   1a590:	0001a633 	.word	0x0001a633
   1a594:	0001a3db 	.word	0x0001a3db
   1a598:	0001a3db 	.word	0x0001a3db
   1a59c:	0001a633 	.word	0x0001a633
   1a5a0:	0001a633 	.word	0x0001a633
   1a5a4:	0001a633 	.word	0x0001a633
   1a5a8:	0001a633 	.word	0x0001a633
   1a5ac:	0001a633 	.word	0x0001a633
   1a5b0:	0001a633 	.word	0x0001a633
   1a5b4:	0001a633 	.word	0x0001a633
   1a5b8:	0001a633 	.word	0x0001a633
   1a5bc:	0001a633 	.word	0x0001a633
   1a5c0:	0001a633 	.word	0x0001a633
   1a5c4:	0001a633 	.word	0x0001a633
   1a5c8:	0001a633 	.word	0x0001a633
   1a5cc:	0001a633 	.word	0x0001a633
   1a5d0:	0001a633 	.word	0x0001a633
   1a5d4:	0001a633 	.word	0x0001a633
   1a5d8:	0001a633 	.word	0x0001a633
   1a5dc:	0001a633 	.word	0x0001a633
   1a5e0:	0001a633 	.word	0x0001a633
   1a5e4:	0001a633 	.word	0x0001a633
   1a5e8:	0001a633 	.word	0x0001a633
   1a5ec:	0001a633 	.word	0x0001a633
   1a5f0:	0001a633 	.word	0x0001a633
   1a5f4:	0001a633 	.word	0x0001a633
   1a5f8:	0001a633 	.word	0x0001a633
   1a5fc:	0001a633 	.word	0x0001a633
   1a600:	0001a633 	.word	0x0001a633
   1a604:	0001a633 	.word	0x0001a633
   1a608:	0001a633 	.word	0x0001a633
   1a60c:	0001a633 	.word	0x0001a633
   1a610:	0001a633 	.word	0x0001a633
   1a614:	0001a633 	.word	0x0001a633
   1a618:	0001a633 	.word	0x0001a633
   1a61c:	0001a633 	.word	0x0001a633
   1a620:	0001a633 	.word	0x0001a633
   1a624:	0001a633 	.word	0x0001a633
   1a628:	0001a3db 	.word	0x0001a3db
   1a62c:	6892      	ldr	r2, [r2, #8]
   1a62e:	2a00      	cmp	r2, #0
   1a630:	d19f      	bne.n	1a572 <d_encoding+0x1fe>
   1a632:	2101      	movs	r1, #1
   1a634:	e6d2      	b.n	1a3dc <d_encoding+0x68>
   1a636:	4630      	mov	r0, r6
   1a638:	2168      	movs	r1, #104
   1a63a:	f7ff f8e3 	bl	19804 <d_call_offset>
   1a63e:	2800      	cmp	r0, #0
   1a640:	f43f af00 	beq.w	1a444 <d_encoding+0xd0>
   1a644:	2100      	movs	r1, #0
   1a646:	4630      	mov	r0, r6
   1a648:	f7ff fe94 	bl	1a374 <d_encoding>
   1a64c:	210e      	movs	r1, #14
   1a64e:	4602      	mov	r2, r0
   1a650:	2300      	movs	r3, #0
   1a652:	4630      	mov	r0, r6
   1a654:	f7ff f858 	bl	19708 <d_make_comp>
   1a658:	e6e9      	b.n	1a42e <d_encoding+0xba>
   1a65a:	4630      	mov	r0, r6
   1a65c:	2100      	movs	r1, #0
   1a65e:	f7ff f8d1 	bl	19804 <d_call_offset>
   1a662:	2800      	cmp	r0, #0
   1a664:	f43f aeee 	beq.w	1a444 <d_encoding+0xd0>
   1a668:	4630      	mov	r0, r6
   1a66a:	2100      	movs	r1, #0
   1a66c:	f7ff f8ca 	bl	19804 <d_call_offset>
   1a670:	2800      	cmp	r0, #0
   1a672:	f43f aee7 	beq.w	1a444 <d_encoding+0xd0>
   1a676:	2100      	movs	r1, #0
   1a678:	4630      	mov	r0, r6
   1a67a:	f7ff fe7b 	bl	1a374 <d_encoding>
   1a67e:	2110      	movs	r1, #16
   1a680:	4602      	mov	r2, r0
   1a682:	2300      	movs	r3, #0
   1a684:	4630      	mov	r0, r6
   1a686:	f7ff f83f 	bl	19708 <d_make_comp>
   1a68a:	e6d0      	b.n	1a42e <d_encoding+0xba>
   1a68c:	4630      	mov	r0, r6
   1a68e:	2176      	movs	r1, #118
   1a690:	f7ff f8b8 	bl	19804 <d_call_offset>
   1a694:	2800      	cmp	r0, #0
   1a696:	f43f aed5 	beq.w	1a444 <d_encoding+0xd0>
   1a69a:	2100      	movs	r1, #0
   1a69c:	4630      	mov	r0, r6
   1a69e:	f7ff fe69 	bl	1a374 <d_encoding>
   1a6a2:	210f      	movs	r1, #15
   1a6a4:	4602      	mov	r2, r0
   1a6a6:	2300      	movs	r3, #0
   1a6a8:	4630      	mov	r0, r6
   1a6aa:	f7ff f82d 	bl	19708 <d_make_comp>
   1a6ae:	e6be      	b.n	1a42e <d_encoding+0xba>
   1a6b0:	4630      	mov	r0, r6
   1a6b2:	f7ff fa9d 	bl	19bf0 <d_type>
   1a6b6:	4604      	mov	r4, r0
   1a6b8:	4630      	mov	r0, r6
   1a6ba:	f7ff f877 	bl	197ac <d_number>
   1a6be:	2800      	cmp	r0, #0
   1a6c0:	f6ff aec0 	blt.w	1a444 <d_encoding+0xd0>
   1a6c4:	68f2      	ldr	r2, [r6, #12]
   1a6c6:	7813      	ldrb	r3, [r2, #0]
   1a6c8:	2b5f      	cmp	r3, #95
   1a6ca:	f47f aebb 	bne.w	1a444 <d_encoding+0xd0>
   1a6ce:	1c53      	adds	r3, r2, #1
   1a6d0:	60f3      	str	r3, [r6, #12]
   1a6d2:	4630      	mov	r0, r6
   1a6d4:	f7ff fa8c 	bl	19bf0 <d_type>
   1a6d8:	6b33      	ldr	r3, [r6, #48]
   1a6da:	4602      	mov	r2, r0
   1a6dc:	3305      	adds	r3, #5
   1a6de:	6333      	str	r3, [r6, #48]
   1a6e0:	4630      	mov	r0, r6
   1a6e2:	210a      	movs	r1, #10
   1a6e4:	4623      	mov	r3, r4
   1a6e6:	f7ff f80f 	bl	19708 <d_make_comp>
   1a6ea:	e6a0      	b.n	1a42e <d_encoding+0xba>
   1a6ec:	4630      	mov	r0, r6
   1a6ee:	f7ff fa7f 	bl	19bf0 <d_type>
   1a6f2:	210b      	movs	r1, #11
   1a6f4:	4602      	mov	r2, r0
   1a6f6:	2300      	movs	r3, #0
   1a6f8:	4630      	mov	r0, r6
   1a6fa:	f7ff f805 	bl	19708 <d_make_comp>
   1a6fe:	e696      	b.n	1a42e <d_encoding+0xba>
   1a700:	4630      	mov	r0, r6
   1a702:	f7ff fa75 	bl	19bf0 <d_type>
   1a706:	210d      	movs	r1, #13
   1a708:	4602      	mov	r2, r0
   1a70a:	2300      	movs	r3, #0
   1a70c:	4630      	mov	r0, r6
   1a70e:	f7fe fffb 	bl	19708 <d_make_comp>
   1a712:	e68c      	b.n	1a42e <d_encoding+0xba>
   1a714:	1f43      	subs	r3, r0, #5
   1a716:	6333      	str	r3, [r6, #48]
   1a718:	4630      	mov	r0, r6
   1a71a:	f7ff fa69 	bl	19bf0 <d_type>
   1a71e:	2108      	movs	r1, #8
   1a720:	4602      	mov	r2, r0
   1a722:	2300      	movs	r3, #0
   1a724:	4630      	mov	r0, r6
   1a726:	f7fe ffef 	bl	19708 <d_make_comp>
   1a72a:	e680      	b.n	1a42e <d_encoding+0xba>
   1a72c:	f1a0 030a 	sub.w	r3, r0, #10	; 0xa
   1a730:	6333      	str	r3, [r6, #48]
   1a732:	4630      	mov	r0, r6
   1a734:	f7ff fa5c 	bl	19bf0 <d_type>
   1a738:	2109      	movs	r1, #9
   1a73a:	4602      	mov	r2, r0
   1a73c:	2300      	movs	r3, #0
   1a73e:	4630      	mov	r0, r6
   1a740:	f7fe ffe2 	bl	19708 <d_make_comp>
   1a744:	e673      	b.n	1a42e <d_encoding+0xba>
   1a746:	4630      	mov	r0, r6
   1a748:	f7ff fa52 	bl	19bf0 <d_type>
   1a74c:	210c      	movs	r1, #12
   1a74e:	4602      	mov	r2, r0
   1a750:	2300      	movs	r3, #0
   1a752:	4630      	mov	r0, r6
   1a754:	f7fe ffd8 	bl	19708 <d_make_comp>
   1a758:	e669      	b.n	1a42e <d_encoding+0xba>
   1a75a:	4630      	mov	r0, r6
   1a75c:	f7ff fa48 	bl	19bf0 <d_type>
   1a760:	2111      	movs	r1, #17
   1a762:	4602      	mov	r2, r0
   1a764:	2300      	movs	r3, #0
   1a766:	4630      	mov	r0, r6
   1a768:	f7fe ffce 	bl	19708 <d_make_comp>
   1a76c:	e65f      	b.n	1a42e <d_encoding+0xba>
   1a76e:	4630      	mov	r0, r6
   1a770:	f000 f9fc 	bl	1ab6c <d_name>
   1a774:	2113      	movs	r1, #19
   1a776:	4602      	mov	r2, r0
   1a778:	2300      	movs	r3, #0
   1a77a:	4630      	mov	r0, r6
   1a77c:	f7fe ffc4 	bl	19708 <d_make_comp>
   1a780:	e655      	b.n	1a42e <d_encoding+0xba>
   1a782:	2a56      	cmp	r2, #86
   1a784:	d04f      	beq.n	1a826 <d_encoding+0x4b2>
   1a786:	2a72      	cmp	r2, #114
   1a788:	f47f ae5c 	bne.w	1a444 <d_encoding+0xd0>
   1a78c:	4630      	mov	r0, r6
   1a78e:	f7ff f80d 	bl	197ac <d_number>
   1a792:	2801      	cmp	r0, #1
   1a794:	f77f ae56 	ble.w	1a444 <d_encoding+0xd0>
   1a798:	68f3      	ldr	r3, [r6, #12]
   1a79a:	781a      	ldrb	r2, [r3, #0]
   1a79c:	2a00      	cmp	r2, #0
   1a79e:	f43f ae51 	beq.w	1a444 <d_encoding+0xd0>
   1a7a2:	1c5d      	adds	r5, r3, #1
   1a7a4:	2a5f      	cmp	r2, #95
   1a7a6:	60f5      	str	r5, [r6, #12]
   1a7a8:	f47f ae4c 	bne.w	1a444 <d_encoding+0xd0>
   1a7ac:	f04f 0800 	mov.w	r8, #0	; 0x0
   1a7b0:	1e47      	subs	r7, r0, #1
   1a7b2:	46c2      	mov	sl, r8
   1a7b4:	f04f 0936 	mov.w	r9, #54	; 0x36
   1a7b8:	782b      	ldrb	r3, [r5, #0]
   1a7ba:	2b00      	cmp	r3, #0
   1a7bc:	f43f ae42 	beq.w	1a444 <d_encoding+0xd0>
   1a7c0:	2b24      	cmp	r3, #36
   1a7c2:	d054      	beq.n	1a86e <d_encoding+0x4fa>
   1a7c4:	2f01      	cmp	r7, #1
   1a7c6:	dd4f      	ble.n	1a868 <d_encoding+0x4f4>
   1a7c8:	786b      	ldrb	r3, [r5, #1]
   1a7ca:	2b00      	cmp	r3, #0
   1a7cc:	d04c      	beq.n	1a868 <d_encoding+0x4f4>
   1a7ce:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1a7d2:	e007      	b.n	1a7e4 <d_encoding+0x470>
   1a7d4:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   1a7d8:	45bc      	cmp	ip, r7
   1a7da:	da05      	bge.n	1a7e8 <d_encoding+0x474>
   1a7dc:	f815 300c 	ldrb.w	r3, [r5, ip]
   1a7e0:	46e6      	mov	lr, ip
   1a7e2:	b113      	cbz	r3, 1a7ea <d_encoding+0x476>
   1a7e4:	2b24      	cmp	r3, #36
   1a7e6:	d1f5      	bne.n	1a7d4 <d_encoding+0x460>
   1a7e8:	46e6      	mov	lr, ip
   1a7ea:	6970      	ldr	r0, [r6, #20]
   1a7ec:	69b3      	ldr	r3, [r6, #24]
   1a7ee:	4298      	cmp	r0, r3
   1a7f0:	da35      	bge.n	1a85e <d_encoding+0x4ea>
   1a7f2:	0083      	lsls	r3, r0, #2
   1a7f4:	0102      	lsls	r2, r0, #4
   1a7f6:	6931      	ldr	r1, [r6, #16]
   1a7f8:	1ad2      	subs	r2, r2, r3
   1a7fa:	1c43      	adds	r3, r0, #1
   1a7fc:	188c      	adds	r4, r1, r2
   1a7fe:	6173      	str	r3, [r6, #20]
   1a800:	d02d      	beq.n	1a85e <d_encoding+0x4ea>
   1a802:	6065      	str	r5, [r4, #4]
   1a804:	f8c4 c008 	str.w	ip, [r4, #8]
   1a808:	68f3      	ldr	r3, [r6, #12]
   1a80a:	f801 a002 	strb.w	sl, [r1, r2]
   1a80e:	eb03 050e 	add.w	r5, r3, lr
   1a812:	60f5      	str	r5, [r6, #12]
   1a814:	ebcc 0707 	rsb	r7, ip, r7
   1a818:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1a81c:	d114      	bne.n	1a848 <d_encoding+0x4d4>
   1a81e:	2f00      	cmp	r7, #0
   1a820:	dd0b      	ble.n	1a83a <d_encoding+0x4c6>
   1a822:	46a0      	mov	r8, r4
   1a824:	e7c8      	b.n	1a7b8 <d_encoding+0x444>
   1a826:	4630      	mov	r0, r6
   1a828:	f000 f9a0 	bl	1ab6c <d_name>
   1a82c:	2112      	movs	r1, #18
   1a82e:	4602      	mov	r2, r0
   1a830:	2300      	movs	r3, #0
   1a832:	4630      	mov	r0, r6
   1a834:	f7fe ff68 	bl	19708 <d_make_comp>
   1a838:	e5f9      	b.n	1a42e <d_encoding+0xba>
   1a83a:	4630      	mov	r0, r6
   1a83c:	2134      	movs	r1, #52
   1a83e:	4622      	mov	r2, r4
   1a840:	2300      	movs	r3, #0
   1a842:	f7fe ff61 	bl	19708 <d_make_comp>
   1a846:	e5f2      	b.n	1a42e <d_encoding+0xba>
   1a848:	4623      	mov	r3, r4
   1a84a:	4630      	mov	r0, r6
   1a84c:	2135      	movs	r1, #53
   1a84e:	4642      	mov	r2, r8
   1a850:	f7fe ff5a 	bl	19708 <d_make_comp>
   1a854:	4604      	mov	r4, r0
   1a856:	2800      	cmp	r0, #0
   1a858:	d1e1      	bne.n	1a81e <d_encoding+0x4aa>
   1a85a:	2000      	movs	r0, #0
   1a85c:	e5e7      	b.n	1a42e <d_encoding+0xba>
   1a85e:	68f3      	ldr	r3, [r6, #12]
   1a860:	2000      	movs	r0, #0
   1a862:	4473      	add	r3, lr
   1a864:	60f3      	str	r3, [r6, #12]
   1a866:	e5e2      	b.n	1a42e <d_encoding+0xba>
   1a868:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1a86c:	e7bc      	b.n	1a7e8 <d_encoding+0x474>
   1a86e:	786b      	ldrb	r3, [r5, #1]
   1a870:	2b53      	cmp	r3, #83
   1a872:	d01a      	beq.n	1a8aa <d_encoding+0x536>
   1a874:	2b5f      	cmp	r3, #95
   1a876:	d020      	beq.n	1a8ba <d_encoding+0x546>
   1a878:	2b24      	cmp	r3, #36
   1a87a:	f47f ade3 	bne.w	1a444 <d_encoding+0xd0>
   1a87e:	469c      	mov	ip, r3
   1a880:	6970      	ldr	r0, [r6, #20]
   1a882:	69b3      	ldr	r3, [r6, #24]
   1a884:	4298      	cmp	r0, r3
   1a886:	da13      	bge.n	1a8b0 <d_encoding+0x53c>
   1a888:	0083      	lsls	r3, r0, #2
   1a88a:	0102      	lsls	r2, r0, #4
   1a88c:	6931      	ldr	r1, [r6, #16]
   1a88e:	1ad2      	subs	r2, r2, r3
   1a890:	1c43      	adds	r3, r0, #1
   1a892:	188c      	adds	r4, r1, r2
   1a894:	6173      	str	r3, [r6, #20]
   1a896:	d00b      	beq.n	1a8b0 <d_encoding+0x53c>
   1a898:	f8c4 c004 	str.w	ip, [r4, #4]
   1a89c:	68f3      	ldr	r3, [r6, #12]
   1a89e:	f801 9002 	strb.w	r9, [r1, r2]
   1a8a2:	1c9d      	adds	r5, r3, #2
   1a8a4:	60f5      	str	r5, [r6, #12]
   1a8a6:	3f02      	subs	r7, #2
   1a8a8:	e7b6      	b.n	1a818 <d_encoding+0x4a4>
   1a8aa:	f04f 0c2f 	mov.w	ip, #47	; 0x2f
   1a8ae:	e7e7      	b.n	1a880 <d_encoding+0x50c>
   1a8b0:	68f3      	ldr	r3, [r6, #12]
   1a8b2:	2000      	movs	r0, #0
   1a8b4:	3302      	adds	r3, #2
   1a8b6:	60f3      	str	r3, [r6, #12]
   1a8b8:	e5b9      	b.n	1a42e <d_encoding+0xba>
   1a8ba:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
   1a8be:	e7df      	b.n	1a880 <d_encoding+0x50c>

0001a8c0 <d_expr_primary>:
   1a8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a8c2:	68c2      	ldr	r2, [r0, #12]
   1a8c4:	b081      	sub	sp, #4
   1a8c6:	7813      	ldrb	r3, [r2, #0]
   1a8c8:	4604      	mov	r4, r0
   1a8ca:	2b4c      	cmp	r3, #76
   1a8cc:	d002      	beq.n	1a8d4 <d_expr_primary+0x14>
   1a8ce:	2000      	movs	r0, #0
   1a8d0:	b001      	add	sp, #4
   1a8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a8d4:	1c51      	adds	r1, r2, #1
   1a8d6:	60c1      	str	r1, [r0, #12]
   1a8d8:	7853      	ldrb	r3, [r2, #1]
   1a8da:	2b5f      	cmp	r3, #95
   1a8dc:	d029      	beq.n	1a932 <d_expr_primary+0x72>
   1a8de:	f7ff f987 	bl	19bf0 <d_type>
   1a8e2:	4606      	mov	r6, r0
   1a8e4:	2800      	cmp	r0, #0
   1a8e6:	d0f2      	beq.n	1a8ce <d_expr_primary+0xe>
   1a8e8:	7803      	ldrb	r3, [r0, #0]
   1a8ea:	2b22      	cmp	r3, #34
   1a8ec:	d036      	beq.n	1a95c <d_expr_primary+0x9c>
   1a8ee:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   1a8f2:	f89c 3000 	ldrb.w	r3, [ip]
   1a8f6:	2b6e      	cmp	r3, #110
   1a8f8:	d028      	beq.n	1a94c <d_expr_primary+0x8c>
   1a8fa:	2732      	movs	r7, #50
   1a8fc:	2b45      	cmp	r3, #69
   1a8fe:	d04f      	beq.n	1a9a0 <d_expr_primary+0xe0>
   1a900:	2b00      	cmp	r3, #0
   1a902:	d0e4      	beq.n	1a8ce <d_expr_primary+0xe>
   1a904:	4663      	mov	r3, ip
   1a906:	e001      	b.n	1a90c <d_expr_primary+0x4c>
   1a908:	2a00      	cmp	r2, #0
   1a90a:	d0e0      	beq.n	1a8ce <d_expr_primary+0xe>
   1a90c:	3301      	adds	r3, #1
   1a90e:	60e3      	str	r3, [r4, #12]
   1a910:	781a      	ldrb	r2, [r3, #0]
   1a912:	2a45      	cmp	r2, #69
   1a914:	d1f8      	bne.n	1a908 <d_expr_primary+0x48>
   1a916:	ebcc 0103 	rsb	r1, ip, r3
   1a91a:	6960      	ldr	r0, [r4, #20]
   1a91c:	69a3      	ldr	r3, [r4, #24]
   1a91e:	4298      	cmp	r0, r3
   1a920:	db25      	blt.n	1a96e <d_expr_primary+0xae>
   1a922:	2500      	movs	r5, #0
   1a924:	4620      	mov	r0, r4
   1a926:	4639      	mov	r1, r7
   1a928:	4632      	mov	r2, r6
   1a92a:	462b      	mov	r3, r5
   1a92c:	f7fe feec 	bl	19708 <d_make_comp>
   1a930:	e005      	b.n	1a93e <d_expr_primary+0x7e>
   1a932:	1c4a      	adds	r2, r1, #1
   1a934:	60c2      	str	r2, [r0, #12]
   1a936:	784b      	ldrb	r3, [r1, #1]
   1a938:	2b5a      	cmp	r3, #90
   1a93a:	d02b      	beq.n	1a994 <d_expr_primary+0xd4>
   1a93c:	2000      	movs	r0, #0
   1a93e:	68e2      	ldr	r2, [r4, #12]
   1a940:	7813      	ldrb	r3, [r2, #0]
   1a942:	2b45      	cmp	r3, #69
   1a944:	d1c3      	bne.n	1a8ce <d_expr_primary+0xe>
   1a946:	1c53      	adds	r3, r2, #1
   1a948:	60e3      	str	r3, [r4, #12]
   1a94a:	e7c1      	b.n	1a8d0 <d_expr_primary+0x10>
   1a94c:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   1a950:	f8c4 c00c 	str.w	ip, [r4, #12]
   1a954:	f89c 3000 	ldrb.w	r3, [ip]
   1a958:	2733      	movs	r7, #51
   1a95a:	e7cf      	b.n	1a8fc <d_expr_primary+0x3c>
   1a95c:	6842      	ldr	r2, [r0, #4]
   1a95e:	7c13      	ldrb	r3, [r2, #16]
   1a960:	2b00      	cmp	r3, #0
   1a962:	d0c4      	beq.n	1a8ee <d_expr_primary+0x2e>
   1a964:	6b23      	ldr	r3, [r4, #48]
   1a966:	6852      	ldr	r2, [r2, #4]
   1a968:	1a9b      	subs	r3, r3, r2
   1a96a:	6323      	str	r3, [r4, #48]
   1a96c:	e7bf      	b.n	1a8ee <d_expr_primary+0x2e>
   1a96e:	0083      	lsls	r3, r0, #2
   1a970:	0102      	lsls	r2, r0, #4
   1a972:	f8d4 e010 	ldr.w	lr, [r4, #16]
   1a976:	1ad2      	subs	r2, r2, r3
   1a978:	1c43      	adds	r3, r0, #1
   1a97a:	eb1e 0502 	adds.w	r5, lr, r2
   1a97e:	6163      	str	r3, [r4, #20]
   1a980:	d0cf      	beq.n	1a922 <d_expr_primary+0x62>
   1a982:	2900      	cmp	r1, #0
   1a984:	d0cd      	beq.n	1a922 <d_expr_primary+0x62>
   1a986:	2300      	movs	r3, #0
   1a988:	f80e 3002 	strb.w	r3, [lr, r2]
   1a98c:	f8c5 c004 	str.w	ip, [r5, #4]
   1a990:	60a9      	str	r1, [r5, #8]
   1a992:	e7c7      	b.n	1a924 <d_expr_primary+0x64>
   1a994:	1c53      	adds	r3, r2, #1
   1a996:	60c3      	str	r3, [r0, #12]
   1a998:	2100      	movs	r1, #0
   1a99a:	f7ff fceb 	bl	1a374 <d_encoding>
   1a99e:	e7ce      	b.n	1a93e <d_expr_primary+0x7e>
   1a9a0:	2100      	movs	r1, #0
   1a9a2:	e7ba      	b.n	1a91a <d_expr_primary+0x5a>

0001a9a4 <d_expression>:
   1a9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a9a6:	68c2      	ldr	r2, [r0, #12]
   1a9a8:	b081      	sub	sp, #4
   1a9aa:	7813      	ldrb	r3, [r2, #0]
   1a9ac:	4606      	mov	r6, r0
   1a9ae:	2b4c      	cmp	r3, #76
   1a9b0:	d03a      	beq.n	1aa28 <d_expression+0x84>
   1a9b2:	2b54      	cmp	r3, #84
   1a9b4:	d03b      	beq.n	1aa2e <d_expression+0x8a>
   1a9b6:	2b73      	cmp	r3, #115
   1a9b8:	d102      	bne.n	1a9c0 <d_expression+0x1c>
   1a9ba:	7853      	ldrb	r3, [r2, #1]
   1a9bc:	2b72      	cmp	r3, #114
   1a9be:	d039      	beq.n	1aa34 <d_expression+0x90>
   1a9c0:	4630      	mov	r0, r6
   1a9c2:	f7ff fb5f 	bl	1a084 <d_operator_name>
   1a9c6:	4607      	mov	r7, r0
   1a9c8:	b180      	cbz	r0, 1a9ec <d_expression+0x48>
   1a9ca:	7803      	ldrb	r3, [r0, #0]
   1a9cc:	2b29      	cmp	r3, #41
   1a9ce:	d010      	beq.n	1a9f2 <d_expression+0x4e>
   1a9d0:	2b2a      	cmp	r3, #42
   1a9d2:	d043      	beq.n	1aa5c <d_expression+0xb8>
   1a9d4:	2b2b      	cmp	r3, #43
   1a9d6:	d023      	beq.n	1aa20 <d_expression+0x7c>
   1a9d8:	2b29      	cmp	r3, #41
   1a9da:	d107      	bne.n	1a9ec <d_expression+0x48>
   1a9dc:	6844      	ldr	r4, [r0, #4]
   1a9de:	68e0      	ldr	r0, [r4, #12]
   1a9e0:	2802      	cmp	r0, #2
   1a9e2:	d05b      	beq.n	1aa9c <d_expression+0xf8>
   1a9e4:	2803      	cmp	r0, #3
   1a9e6:	d03b      	beq.n	1aa60 <d_expression+0xbc>
   1a9e8:	2801      	cmp	r0, #1
   1a9ea:	d019      	beq.n	1aa20 <d_expression+0x7c>
   1a9ec:	2000      	movs	r0, #0
   1a9ee:	b001      	add	sp, #4
   1a9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a9f2:	6841      	ldr	r1, [r0, #4]
   1a9f4:	6b33      	ldr	r3, [r6, #48]
   1a9f6:	688a      	ldr	r2, [r1, #8]
   1a9f8:	493a      	ldr	r1, [pc, #232]	(1aae4 <d_expression+0x140>)
   1a9fa:	189b      	adds	r3, r3, r2
   1a9fc:	3b02      	subs	r3, #2
   1a9fe:	6333      	str	r3, [r6, #48]
   1aa00:	6844      	ldr	r4, [r0, #4]
   1aa02:	6820      	ldr	r0, [r4, #0]
   1aa04:	f008 fc36 	bl	23274 <strcmp>
   1aa08:	2800      	cmp	r0, #0
   1aa0a:	d1e8      	bne.n	1a9de <d_expression+0x3a>
   1aa0c:	4630      	mov	r0, r6
   1aa0e:	f7ff f8ef 	bl	19bf0 <d_type>
   1aa12:	4603      	mov	r3, r0
   1aa14:	212c      	movs	r1, #44
   1aa16:	4630      	mov	r0, r6
   1aa18:	463a      	mov	r2, r7
   1aa1a:	f7fe fe75 	bl	19708 <d_make_comp>
   1aa1e:	e7e6      	b.n	1a9ee <d_expression+0x4a>
   1aa20:	4630      	mov	r0, r6
   1aa22:	f7ff ffbf 	bl	1a9a4 <d_expression>
   1aa26:	e7f4      	b.n	1aa12 <d_expression+0x6e>
   1aa28:	f7ff ff4a 	bl	1a8c0 <d_expr_primary>
   1aa2c:	e7df      	b.n	1a9ee <d_expression+0x4a>
   1aa2e:	f7fe ff51 	bl	198d4 <d_template_param>
   1aa32:	e7dc      	b.n	1a9ee <d_expression+0x4a>
   1aa34:	1c93      	adds	r3, r2, #2
   1aa36:	60c3      	str	r3, [r0, #12]
   1aa38:	f7ff f8da 	bl	19bf0 <d_type>
   1aa3c:	4605      	mov	r5, r0
   1aa3e:	4630      	mov	r0, r6
   1aa40:	f7ff fb9e 	bl	1a180 <d_unqualified_name>
   1aa44:	68f3      	ldr	r3, [r6, #12]
   1aa46:	4604      	mov	r4, r0
   1aa48:	781a      	ldrb	r2, [r3, #0]
   1aa4a:	2a49      	cmp	r2, #73
   1aa4c:	d03a      	beq.n	1aac4 <d_expression+0x120>
   1aa4e:	4630      	mov	r0, r6
   1aa50:	2101      	movs	r1, #1
   1aa52:	462a      	mov	r2, r5
   1aa54:	4623      	mov	r3, r4
   1aa56:	f7fe fe57 	bl	19708 <d_make_comp>
   1aa5a:	e7c8      	b.n	1a9ee <d_expression+0x4a>
   1aa5c:	6840      	ldr	r0, [r0, #4]
   1aa5e:	e7bf      	b.n	1a9e0 <d_expression+0x3c>
   1aa60:	4630      	mov	r0, r6
   1aa62:	f7ff ff9f 	bl	1a9a4 <d_expression>
   1aa66:	4605      	mov	r5, r0
   1aa68:	4630      	mov	r0, r6
   1aa6a:	f7ff ff9b 	bl	1a9a4 <d_expression>
   1aa6e:	4604      	mov	r4, r0
   1aa70:	4630      	mov	r0, r6
   1aa72:	f7ff ff97 	bl	1a9a4 <d_expression>
   1aa76:	2131      	movs	r1, #49
   1aa78:	4603      	mov	r3, r0
   1aa7a:	4622      	mov	r2, r4
   1aa7c:	4630      	mov	r0, r6
   1aa7e:	f7fe fe43 	bl	19708 <d_make_comp>
   1aa82:	2130      	movs	r1, #48
   1aa84:	4603      	mov	r3, r0
   1aa86:	462a      	mov	r2, r5
   1aa88:	4630      	mov	r0, r6
   1aa8a:	f7fe fe3d 	bl	19708 <d_make_comp>
   1aa8e:	212f      	movs	r1, #47
   1aa90:	4603      	mov	r3, r0
   1aa92:	463a      	mov	r2, r7
   1aa94:	4630      	mov	r0, r6
   1aa96:	f7fe fe37 	bl	19708 <d_make_comp>
   1aa9a:	e7a8      	b.n	1a9ee <d_expression+0x4a>
   1aa9c:	4630      	mov	r0, r6
   1aa9e:	f7ff ff81 	bl	1a9a4 <d_expression>
   1aaa2:	4604      	mov	r4, r0
   1aaa4:	4630      	mov	r0, r6
   1aaa6:	f7ff ff7d 	bl	1a9a4 <d_expression>
   1aaaa:	212e      	movs	r1, #46
   1aaac:	4603      	mov	r3, r0
   1aaae:	4622      	mov	r2, r4
   1aab0:	4630      	mov	r0, r6
   1aab2:	f7fe fe29 	bl	19708 <d_make_comp>
   1aab6:	212d      	movs	r1, #45
   1aab8:	4603      	mov	r3, r0
   1aaba:	463a      	mov	r2, r7
   1aabc:	4630      	mov	r0, r6
   1aabe:	f7fe fe23 	bl	19708 <d_make_comp>
   1aac2:	e794      	b.n	1a9ee <d_expression+0x4a>
   1aac4:	4630      	mov	r0, r6
   1aac6:	f000 f80f 	bl	1aae8 <d_template_args>
   1aaca:	2104      	movs	r1, #4
   1aacc:	4603      	mov	r3, r0
   1aace:	4622      	mov	r2, r4
   1aad0:	4630      	mov	r0, r6
   1aad2:	f7fe fe19 	bl	19708 <d_make_comp>
   1aad6:	2101      	movs	r1, #1
   1aad8:	4603      	mov	r3, r0
   1aada:	462a      	mov	r2, r5
   1aadc:	4630      	mov	r0, r6
   1aade:	f7fe fe13 	bl	19708 <d_make_comp>
   1aae2:	e784      	b.n	1a9ee <d_expression+0x4a>
   1aae4:	00025144 	.word	0x00025144

0001aae8 <d_template_args>:
   1aae8:	b570      	push	{r4, r5, r6, lr}
   1aaea:	68c2      	ldr	r2, [r0, #12]
   1aaec:	b082      	sub	sp, #8
   1aaee:	7813      	ldrb	r3, [r2, #0]
   1aaf0:	4604      	mov	r4, r0
   1aaf2:	2b49      	cmp	r3, #73
   1aaf4:	6ac6      	ldr	r6, [r0, #44]
   1aaf6:	d002      	beq.n	1aafe <d_template_args+0x16>
   1aaf8:	2000      	movs	r0, #0
   1aafa:	b002      	add	sp, #8
   1aafc:	bd70      	pop	{r4, r5, r6, pc}
   1aafe:	3b49      	subs	r3, #73
   1ab00:	1c51      	adds	r1, r2, #1
   1ab02:	ad02      	add	r5, sp, #8
   1ab04:	60c1      	str	r1, [r0, #12]
   1ab06:	f845 3d04 	str.w	r3, [r5, #-4]!
   1ab0a:	7853      	ldrb	r3, [r2, #1]
   1ab0c:	2b4c      	cmp	r3, #76
   1ab0e:	d016      	beq.n	1ab3e <d_template_args+0x56>
   1ab10:	2b58      	cmp	r3, #88
   1ab12:	d019      	beq.n	1ab48 <d_template_args+0x60>
   1ab14:	4620      	mov	r0, r4
   1ab16:	f7ff f86b 	bl	19bf0 <d_type>
   1ab1a:	4602      	mov	r2, r0
   1ab1c:	2a00      	cmp	r2, #0
   1ab1e:	d0eb      	beq.n	1aaf8 <d_template_args+0x10>
   1ab20:	4620      	mov	r0, r4
   1ab22:	2128      	movs	r1, #40
   1ab24:	2300      	movs	r3, #0
   1ab26:	f7fe fdef 	bl	19708 <d_make_comp>
   1ab2a:	6028      	str	r0, [r5, #0]
   1ab2c:	2800      	cmp	r0, #0
   1ab2e:	d0e3      	beq.n	1aaf8 <d_template_args+0x10>
   1ab30:	68e1      	ldr	r1, [r4, #12]
   1ab32:	780b      	ldrb	r3, [r1, #0]
   1ab34:	2b45      	cmp	r3, #69
   1ab36:	d014      	beq.n	1ab62 <d_template_args+0x7a>
   1ab38:	f100 0508 	add.w	r5, r0, #8	; 0x8
   1ab3c:	e7e6      	b.n	1ab0c <d_template_args+0x24>
   1ab3e:	4620      	mov	r0, r4
   1ab40:	f7ff febe 	bl	1a8c0 <d_expr_primary>
   1ab44:	4602      	mov	r2, r0
   1ab46:	e7e9      	b.n	1ab1c <d_template_args+0x34>
   1ab48:	1c4b      	adds	r3, r1, #1
   1ab4a:	60e3      	str	r3, [r4, #12]
   1ab4c:	4620      	mov	r0, r4
   1ab4e:	f7ff ff29 	bl	1a9a4 <d_expression>
   1ab52:	68e1      	ldr	r1, [r4, #12]
   1ab54:	4602      	mov	r2, r0
   1ab56:	780b      	ldrb	r3, [r1, #0]
   1ab58:	2b45      	cmp	r3, #69
   1ab5a:	d1cd      	bne.n	1aaf8 <d_template_args+0x10>
   1ab5c:	1c4b      	adds	r3, r1, #1
   1ab5e:	60e3      	str	r3, [r4, #12]
   1ab60:	e7dc      	b.n	1ab1c <d_template_args+0x34>
   1ab62:	1c4b      	adds	r3, r1, #1
   1ab64:	60e3      	str	r3, [r4, #12]
   1ab66:	62e6      	str	r6, [r4, #44]
   1ab68:	9801      	ldr	r0, [sp, #4]
   1ab6a:	e7c6      	b.n	1aafa <d_template_args+0x12>

0001ab6c <d_name>:
   1ab6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab70:	68c2      	ldr	r2, [r0, #12]
   1ab72:	b082      	sub	sp, #8
   1ab74:	7813      	ldrb	r3, [r2, #0]
   1ab76:	4606      	mov	r6, r0
   1ab78:	3b4c      	subs	r3, #76
   1ab7a:	2b0e      	cmp	r3, #14
   1ab7c:	d809      	bhi.n	1ab92 <d_name+0x26>
   1ab7e:	e8df f003 	tbb	[pc, r3]
   1ab82:	0883      	.short	0x0883
   1ab84:	0808083b 	.word	0x0808083b
   1ab88:	08082108 	.word	0x08082108
   1ab8c:	08080808 	.word	0x08080808
   1ab90:	0014      	.short	0x0014
   1ab92:	f7ff faf5 	bl	1a180 <d_unqualified_name>
   1ab96:	68f3      	ldr	r3, [r6, #12]
   1ab98:	4604      	mov	r4, r0
   1ab9a:	781a      	ldrb	r2, [r3, #0]
   1ab9c:	2a49      	cmp	r2, #73
   1ab9e:	f000 80d0 	beq.w	1ad42 <d_name+0x1d6>
   1aba2:	4620      	mov	r0, r4
   1aba4:	b002      	add	sp, #8
   1aba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1abaa:	1c53      	adds	r3, r2, #1
   1abac:	60c3      	str	r3, [r0, #12]
   1abae:	2100      	movs	r1, #0
   1abb0:	f7ff fbe0 	bl	1a374 <d_encoding>
   1abb4:	68f2      	ldr	r2, [r6, #12]
   1abb6:	4604      	mov	r4, r0
   1abb8:	7813      	ldrb	r3, [r2, #0]
   1abba:	2b45      	cmp	r3, #69
   1abbc:	f000 80a0 	beq.w	1ad00 <d_name+0x194>
   1abc0:	2400      	movs	r4, #0
   1abc2:	e7ee      	b.n	1aba2 <d_name+0x36>
   1abc4:	7853      	ldrb	r3, [r2, #1]
   1abc6:	2b74      	cmp	r3, #116
   1abc8:	d06c      	beq.n	1aca4 <d_name+0x138>
   1abca:	2100      	movs	r1, #0
   1abcc:	f7fe feb6 	bl	1993c <d_substitution>
   1abd0:	2101      	movs	r1, #1
   1abd2:	4604      	mov	r4, r0
   1abd4:	68f3      	ldr	r3, [r6, #12]
   1abd6:	781a      	ldrb	r2, [r3, #0]
   1abd8:	2a49      	cmp	r2, #73
   1abda:	d1e2      	bne.n	1aba2 <d_name+0x36>
   1abdc:	2900      	cmp	r1, #0
   1abde:	f000 80b0 	beq.w	1ad42 <d_name+0x1d6>
   1abe2:	4630      	mov	r0, r6
   1abe4:	f7ff ff80 	bl	1aae8 <d_template_args>
   1abe8:	4622      	mov	r2, r4
   1abea:	4603      	mov	r3, r0
   1abec:	2104      	movs	r1, #4
   1abee:	4630      	mov	r0, r6
   1abf0:	f7fe fd8a 	bl	19708 <d_make_comp>
   1abf4:	4604      	mov	r4, r0
   1abf6:	e7d4      	b.n	1aba2 <d_name+0x36>
   1abf8:	1c53      	adds	r3, r2, #1
   1abfa:	60c3      	str	r3, [r0, #12]
   1abfc:	a901      	add	r1, sp, #4
   1abfe:	2201      	movs	r2, #1
   1ac00:	f7fe fe22 	bl	19848 <d_cv_qualifiers>
   1ac04:	4680      	mov	r8, r0
   1ac06:	2800      	cmp	r0, #0
   1ac08:	d0da      	beq.n	1abc0 <d_name+0x54>
   1ac0a:	68f1      	ldr	r1, [r6, #12]
   1ac0c:	2700      	movs	r7, #0
   1ac0e:	780c      	ldrb	r4, [r1, #0]
   1ac10:	2c00      	cmp	r4, #0
   1ac12:	d042      	beq.n	1ac9a <d_name+0x12e>
   1ac14:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   1ac18:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
   1ac1c:	b2db      	uxtb	r3, r3
   1ac1e:	b2d2      	uxtb	r2, r2
   1ac20:	2b19      	cmp	r3, #25
   1ac22:	bf8c      	ite	hi
   1ac24:	2300      	movhi	r3, #0
   1ac26:	2301      	movls	r3, #1
   1ac28:	2a09      	cmp	r2, #9
   1ac2a:	bf98      	it	ls
   1ac2c:	f043 0301 	orrls.w	r3, r3, #1	; 0x1
   1ac30:	2b00      	cmp	r3, #0
   1ac32:	d15a      	bne.n	1acea <d_name+0x17e>
   1ac34:	2c44      	cmp	r4, #68
   1ac36:	bf14      	ite	ne
   1ac38:	2300      	movne	r3, #0
   1ac3a:	2301      	moveq	r3, #1
   1ac3c:	2c43      	cmp	r4, #67
   1ac3e:	bf08      	it	eq
   1ac40:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1ac44:	2b00      	cmp	r3, #0
   1ac46:	d150      	bne.n	1acea <d_name+0x17e>
   1ac48:	2c4c      	cmp	r4, #76
   1ac4a:	d04e      	beq.n	1acea <d_name+0x17e>
   1ac4c:	2c53      	cmp	r4, #83
   1ac4e:	d051      	beq.n	1acf4 <d_name+0x188>
   1ac50:	2c49      	cmp	r4, #73
   1ac52:	f000 8093 	beq.w	1ad7c <d_name+0x210>
   1ac56:	2c54      	cmp	r4, #84
   1ac58:	f040 8081 	bne.w	1ad5e <d_name+0x1f2>
   1ac5c:	4630      	mov	r0, r6
   1ac5e:	f7fe fe39 	bl	198d4 <d_template_param>
   1ac62:	4605      	mov	r5, r0
   1ac64:	b137      	cbz	r7, 1ac74 <d_name+0x108>
   1ac66:	2101      	movs	r1, #1
   1ac68:	462b      	mov	r3, r5
   1ac6a:	4630      	mov	r0, r6
   1ac6c:	463a      	mov	r2, r7
   1ac6e:	f7fe fd4b 	bl	19708 <d_make_comp>
   1ac72:	4605      	mov	r5, r0
   1ac74:	2c53      	cmp	r4, #83
   1ac76:	bf08      	it	eq
   1ac78:	68f1      	ldreq	r1, [r6, #12]
   1ac7a:	d003      	beq.n	1ac84 <d_name+0x118>
   1ac7c:	68f1      	ldr	r1, [r6, #12]
   1ac7e:	780b      	ldrb	r3, [r1, #0]
   1ac80:	2b45      	cmp	r3, #69
   1ac82:	d105      	bne.n	1ac90 <d_name+0x124>
   1ac84:	462f      	mov	r7, r5
   1ac86:	e7c2      	b.n	1ac0e <d_name+0xa2>
   1ac88:	f7ff fa7a 	bl	1a180 <d_unqualified_name>
   1ac8c:	4604      	mov	r4, r0
   1ac8e:	e788      	b.n	1aba2 <d_name+0x36>
   1ac90:	b11d      	cbz	r5, 1ac9a <d_name+0x12e>
   1ac92:	6a32      	ldr	r2, [r6, #32]
   1ac94:	6a73      	ldr	r3, [r6, #36]
   1ac96:	429a      	cmp	r2, r3
   1ac98:	db4c      	blt.n	1ad34 <d_name+0x1c8>
   1ac9a:	2300      	movs	r3, #0
   1ac9c:	f8c8 3000 	str.w	r3, [r8]
   1aca0:	461c      	mov	r4, r3
   1aca2:	e77e      	b.n	1aba2 <d_name+0x36>
   1aca4:	1c93      	adds	r3, r2, #2
   1aca6:	60c3      	str	r3, [r0, #12]
   1aca8:	6941      	ldr	r1, [r0, #20]
   1acaa:	6983      	ldr	r3, [r0, #24]
   1acac:	4299      	cmp	r1, r3
   1acae:	da3f      	bge.n	1ad30 <d_name+0x1c4>
   1acb0:	008b      	lsls	r3, r1, #2
   1acb2:	010a      	lsls	r2, r1, #4
   1acb4:	6900      	ldr	r0, [r0, #16]
   1acb6:	1ad2      	subs	r2, r2, r3
   1acb8:	1c4b      	adds	r3, r1, #1
   1acba:	1884      	adds	r4, r0, r2
   1acbc:	6173      	str	r3, [r6, #20]
   1acbe:	d037      	beq.n	1ad30 <d_name+0x1c4>
   1acc0:	2300      	movs	r3, #0
   1acc2:	5483      	strb	r3, [r0, r2]
   1acc4:	4a4b      	ldr	r2, [pc, #300]	(1adf4 <d_name+0x288>)
   1acc6:	3303      	adds	r3, #3
   1acc8:	6062      	str	r2, [r4, #4]
   1acca:	60a3      	str	r3, [r4, #8]
   1accc:	4630      	mov	r0, r6
   1acce:	f7ff fa57 	bl	1a180 <d_unqualified_name>
   1acd2:	2101      	movs	r1, #1
   1acd4:	4603      	mov	r3, r0
   1acd6:	4622      	mov	r2, r4
   1acd8:	4630      	mov	r0, r6
   1acda:	f7fe fd15 	bl	19708 <d_make_comp>
   1acde:	6b33      	ldr	r3, [r6, #48]
   1ace0:	4604      	mov	r4, r0
   1ace2:	3303      	adds	r3, #3
   1ace4:	6333      	str	r3, [r6, #48]
   1ace6:	2100      	movs	r1, #0
   1ace8:	e774      	b.n	1abd4 <d_name+0x68>
   1acea:	4630      	mov	r0, r6
   1acec:	f7ff fa48 	bl	1a180 <d_unqualified_name>
   1acf0:	4605      	mov	r5, r0
   1acf2:	e7b7      	b.n	1ac64 <d_name+0xf8>
   1acf4:	4630      	mov	r0, r6
   1acf6:	2101      	movs	r1, #1
   1acf8:	f7fe fe20 	bl	1993c <d_substitution>
   1acfc:	4605      	mov	r5, r0
   1acfe:	e7b1      	b.n	1ac64 <d_name+0xf8>
   1ad00:	1c51      	adds	r1, r2, #1
   1ad02:	60f1      	str	r1, [r6, #12]
   1ad04:	7853      	ldrb	r3, [r2, #1]
   1ad06:	2b73      	cmp	r3, #115
   1ad08:	d140      	bne.n	1ad8c <d_name+0x220>
   1ad0a:	1c4a      	adds	r2, r1, #1
   1ad0c:	60f2      	str	r2, [r6, #12]
   1ad0e:	784b      	ldrb	r3, [r1, #1]
   1ad10:	2b5f      	cmp	r3, #95
   1ad12:	d05d      	beq.n	1add0 <d_name+0x264>
   1ad14:	6971      	ldr	r1, [r6, #20]
   1ad16:	69b3      	ldr	r3, [r6, #24]
   1ad18:	4299      	cmp	r1, r3
   1ad1a:	db47      	blt.n	1adac <d_name+0x240>
   1ad1c:	f04f 0c00 	mov.w	ip, #0	; 0x0
   1ad20:	4622      	mov	r2, r4
   1ad22:	4630      	mov	r0, r6
   1ad24:	2102      	movs	r1, #2
   1ad26:	4663      	mov	r3, ip
   1ad28:	f7fe fcee 	bl	19708 <d_make_comp>
   1ad2c:	4604      	mov	r4, r0
   1ad2e:	e738      	b.n	1aba2 <d_name+0x36>
   1ad30:	2400      	movs	r4, #0
   1ad32:	e7cb      	b.n	1accc <d_name+0x160>
   1ad34:	69f3      	ldr	r3, [r6, #28]
   1ad36:	462f      	mov	r7, r5
   1ad38:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   1ad3c:	3201      	adds	r2, #1
   1ad3e:	6232      	str	r2, [r6, #32]
   1ad40:	e765      	b.n	1ac0e <d_name+0xa2>
   1ad42:	2c00      	cmp	r4, #0
   1ad44:	f43f af2d 	beq.w	1aba2 <d_name+0x36>
   1ad48:	6a32      	ldr	r2, [r6, #32]
   1ad4a:	6a73      	ldr	r3, [r6, #36]
   1ad4c:	429a      	cmp	r2, r3
   1ad4e:	f6bf af37 	bge.w	1abc0 <d_name+0x54>
   1ad52:	69f3      	ldr	r3, [r6, #28]
   1ad54:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   1ad58:	3201      	adds	r2, #1
   1ad5a:	6232      	str	r2, [r6, #32]
   1ad5c:	e741      	b.n	1abe2 <d_name+0x76>
   1ad5e:	2c45      	cmp	r4, #69
   1ad60:	d19b      	bne.n	1ac9a <d_name+0x12e>
   1ad62:	f8c8 7000 	str.w	r7, [r8]
   1ad66:	2f00      	cmp	r7, #0
   1ad68:	f43f af2a 	beq.w	1abc0 <d_name+0x54>
   1ad6c:	780b      	ldrb	r3, [r1, #0]
   1ad6e:	2b45      	cmp	r3, #69
   1ad70:	f47f af26 	bne.w	1abc0 <d_name+0x54>
   1ad74:	1c4b      	adds	r3, r1, #1
   1ad76:	60f3      	str	r3, [r6, #12]
   1ad78:	9c01      	ldr	r4, [sp, #4]
   1ad7a:	e712      	b.n	1aba2 <d_name+0x36>
   1ad7c:	2f00      	cmp	r7, #0
   1ad7e:	d08c      	beq.n	1ac9a <d_name+0x12e>
   1ad80:	4630      	mov	r0, r6
   1ad82:	f7ff feb1 	bl	1aae8 <d_template_args>
   1ad86:	2104      	movs	r1, #4
   1ad88:	4605      	mov	r5, r0
   1ad8a:	e76d      	b.n	1ac68 <d_name+0xfc>
   1ad8c:	4630      	mov	r0, r6
   1ad8e:	f7ff feed 	bl	1ab6c <d_name>
   1ad92:	68f2      	ldr	r2, [r6, #12]
   1ad94:	4605      	mov	r5, r0
   1ad96:	7813      	ldrb	r3, [r2, #0]
   1ad98:	2b5f      	cmp	r3, #95
   1ad9a:	d022      	beq.n	1ade2 <d_name+0x276>
   1ad9c:	4622      	mov	r2, r4
   1ad9e:	4630      	mov	r0, r6
   1ada0:	2102      	movs	r1, #2
   1ada2:	462b      	mov	r3, r5
   1ada4:	f7fe fcb0 	bl	19708 <d_make_comp>
   1ada8:	4604      	mov	r4, r0
   1adaa:	e6fa      	b.n	1aba2 <d_name+0x36>
   1adac:	008b      	lsls	r3, r1, #2
   1adae:	010a      	lsls	r2, r1, #4
   1adb0:	6930      	ldr	r0, [r6, #16]
   1adb2:	1ad2      	subs	r2, r2, r3
   1adb4:	1c4b      	adds	r3, r1, #1
   1adb6:	eb10 0c02 	adds.w	ip, r0, r2
   1adba:	6173      	str	r3, [r6, #20]
   1adbc:	d0ae      	beq.n	1ad1c <d_name+0x1b0>
   1adbe:	2300      	movs	r3, #0
   1adc0:	5483      	strb	r3, [r0, r2]
   1adc2:	4a0d      	ldr	r2, [pc, #52]	(1adf8 <d_name+0x28c>)
   1adc4:	330e      	adds	r3, #14
   1adc6:	f8cc 2004 	str.w	r2, [ip, #4]
   1adca:	f8cc 3008 	str.w	r3, [ip, #8]
   1adce:	e7a7      	b.n	1ad20 <d_name+0x1b4>
   1add0:	1c53      	adds	r3, r2, #1
   1add2:	60f3      	str	r3, [r6, #12]
   1add4:	4630      	mov	r0, r6
   1add6:	f7fe fce9 	bl	197ac <d_number>
   1adda:	2800      	cmp	r0, #0
   1addc:	da9a      	bge.n	1ad14 <d_name+0x1a8>
   1adde:	2400      	movs	r4, #0
   1ade0:	e6df      	b.n	1aba2 <d_name+0x36>
   1ade2:	1c53      	adds	r3, r2, #1
   1ade4:	60f3      	str	r3, [r6, #12]
   1ade6:	4630      	mov	r0, r6
   1ade8:	f7fe fce0 	bl	197ac <d_number>
   1adec:	2800      	cmp	r0, #0
   1adee:	dad5      	bge.n	1ad9c <d_name+0x230>
   1adf0:	2400      	movs	r4, #0
   1adf2:	e6d6      	b.n	1aba2 <d_name+0x36>
   1adf4:	00024fbc 	.word	0x00024fbc
   1adf8:	00024fac 	.word	0x00024fac

0001adfc <d_growable_string_callback_adapter>:
   1adfc:	6853      	ldr	r3, [r2, #4]
   1adfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae02:	4615      	mov	r5, r2
   1ae04:	3301      	adds	r3, #1
   1ae06:	68ac      	ldr	r4, [r5, #8]
   1ae08:	eb03 0201 	add.w	r2, r3, r1
   1ae0c:	42a2      	cmp	r2, r4
   1ae0e:	4680      	mov	r8, r0
   1ae10:	460e      	mov	r6, r1
   1ae12:	d811      	bhi.n	1ae38 <d_growable_string_callback_adapter+0x3c>
   1ae14:	68ec      	ldr	r4, [r5, #12]
   1ae16:	b96c      	cbnz	r4, 1ae34 <d_growable_string_callback_adapter+0x38>
   1ae18:	686b      	ldr	r3, [r5, #4]
   1ae1a:	6828      	ldr	r0, [r5, #0]
   1ae1c:	4641      	mov	r1, r8
   1ae1e:	18c0      	adds	r0, r0, r3
   1ae20:	4632      	mov	r2, r6
   1ae22:	f007 fe8b 	bl	22b3c <memcpy>
   1ae26:	682a      	ldr	r2, [r5, #0]
   1ae28:	6869      	ldr	r1, [r5, #4]
   1ae2a:	1992      	adds	r2, r2, r6
   1ae2c:	5454      	strb	r4, [r2, r1]
   1ae2e:	686b      	ldr	r3, [r5, #4]
   1ae30:	199b      	adds	r3, r3, r6
   1ae32:	606b      	str	r3, [r5, #4]
   1ae34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ae38:	68eb      	ldr	r3, [r5, #12]
   1ae3a:	2b00      	cmp	r3, #0
   1ae3c:	d1fa      	bne.n	1ae34 <d_growable_string_callback_adapter+0x38>
   1ae3e:	b914      	cbnz	r4, 1ae46 <d_growable_string_callback_adapter+0x4a>
   1ae40:	2a02      	cmp	r2, #2
   1ae42:	d90c      	bls.n	1ae5e <d_growable_string_callback_adapter+0x62>
   1ae44:	2402      	movs	r4, #2
   1ae46:	0064      	lsls	r4, r4, #1
   1ae48:	42a2      	cmp	r2, r4
   1ae4a:	d8fc      	bhi.n	1ae46 <d_growable_string_callback_adapter+0x4a>
   1ae4c:	6828      	ldr	r0, [r5, #0]
   1ae4e:	4621      	mov	r1, r4
   1ae50:	f007 fefa 	bl	22c48 <realloc>
   1ae54:	4607      	mov	r7, r0
   1ae56:	b120      	cbz	r0, 1ae62 <d_growable_string_callback_adapter+0x66>
   1ae58:	6028      	str	r0, [r5, #0]
   1ae5a:	60ac      	str	r4, [r5, #8]
   1ae5c:	e7da      	b.n	1ae14 <d_growable_string_callback_adapter+0x18>
   1ae5e:	3402      	adds	r4, #2
   1ae60:	e7f4      	b.n	1ae4c <d_growable_string_callback_adapter+0x50>
   1ae62:	6828      	ldr	r0, [r5, #0]
   1ae64:	f007 fbfc 	bl	22660 <free>
   1ae68:	2301      	movs	r3, #1
   1ae6a:	602f      	str	r7, [r5, #0]
   1ae6c:	606f      	str	r7, [r5, #4]
   1ae6e:	60af      	str	r7, [r5, #8]
   1ae70:	60eb      	str	r3, [r5, #12]
   1ae72:	e7df      	b.n	1ae34 <d_growable_string_callback_adapter+0x38>

0001ae74 <d_append_buffer>:
   1ae74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ae78:	4604      	mov	r4, r0
   1ae7a:	4688      	mov	r8, r1
   1ae7c:	4617      	mov	r7, r2
   1ae7e:	b35a      	cbz	r2, 1aed8 <d_append_buffer+0x64>
   1ae80:	2500      	movs	r5, #0
   1ae82:	f100 0904 	add.w	r9, r0, #4	; 0x4
   1ae86:	46aa      	mov	sl, r5
   1ae88:	e00a      	b.n	1aea0 <d_append_buffer+0x2c>
   1ae8a:	3501      	adds	r5, #1
   1ae8c:	1c4a      	adds	r2, r1, #1
   1ae8e:	eb04 0301 	add.w	r3, r4, r1
   1ae92:	42af      	cmp	r7, r5
   1ae94:	711e      	strb	r6, [r3, #4]
   1ae96:	f8c4 2104 	str.w	r2, [r4, #260]
   1ae9a:	f884 6108 	strb.w	r6, [r4, #264]
   1ae9e:	d91b      	bls.n	1aed8 <d_append_buffer+0x64>
   1aea0:	f8d4 1104 	ldr.w	r1, [r4, #260]
   1aea4:	f818 6005 	ldrb.w	r6, [r8, r5]
   1aea8:	29ff      	cmp	r1, #255
   1aeaa:	d1ee      	bne.n	1ae8a <d_append_buffer+0x16>
   1aeac:	f8d4 2110 	ldr.w	r2, [r4, #272]
   1aeb0:	f8d4 310c 	ldr.w	r3, [r4, #268]
   1aeb4:	f884 a103 	strb.w	sl, [r4, #259]
   1aeb8:	4648      	mov	r0, r9
   1aeba:	4798      	blx	r3
   1aebc:	3501      	adds	r5, #1
   1aebe:	4651      	mov	r1, sl
   1aec0:	1c4a      	adds	r2, r1, #1
   1aec2:	eb04 0301 	add.w	r3, r4, r1
   1aec6:	42af      	cmp	r7, r5
   1aec8:	f8c4 a104 	str.w	sl, [r4, #260]
   1aecc:	711e      	strb	r6, [r3, #4]
   1aece:	f8c4 2104 	str.w	r2, [r4, #260]
   1aed2:	f884 6108 	strb.w	r6, [r4, #264]
   1aed6:	d8e3      	bhi.n	1aea0 <d_append_buffer+0x2c>
   1aed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001aedc <d_append_string>:
   1aedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aee0:	4604      	mov	r4, r0
   1aee2:	4608      	mov	r0, r1
   1aee4:	4688      	mov	r8, r1
   1aee6:	f008 f9df 	bl	232a8 <strlen>
   1aeea:	4607      	mov	r7, r0
   1aeec:	b358      	cbz	r0, 1af46 <d_append_string+0x6a>
   1aeee:	2500      	movs	r5, #0
   1aef0:	f104 0904 	add.w	r9, r4, #4	; 0x4
   1aef4:	46aa      	mov	sl, r5
   1aef6:	e00a      	b.n	1af0e <d_append_string+0x32>
   1aef8:	3501      	adds	r5, #1
   1aefa:	1c4a      	adds	r2, r1, #1
   1aefc:	eb04 0301 	add.w	r3, r4, r1
   1af00:	42af      	cmp	r7, r5
   1af02:	711e      	strb	r6, [r3, #4]
   1af04:	f8c4 2104 	str.w	r2, [r4, #260]
   1af08:	f884 6108 	strb.w	r6, [r4, #264]
   1af0c:	d91b      	bls.n	1af46 <d_append_string+0x6a>
   1af0e:	f8d4 1104 	ldr.w	r1, [r4, #260]
   1af12:	f818 6005 	ldrb.w	r6, [r8, r5]
   1af16:	29ff      	cmp	r1, #255
   1af18:	d1ee      	bne.n	1aef8 <d_append_string+0x1c>
   1af1a:	f8d4 2110 	ldr.w	r2, [r4, #272]
   1af1e:	f8d4 310c 	ldr.w	r3, [r4, #268]
   1af22:	f884 a103 	strb.w	sl, [r4, #259]
   1af26:	4648      	mov	r0, r9
   1af28:	4798      	blx	r3
   1af2a:	3501      	adds	r5, #1
   1af2c:	4651      	mov	r1, sl
   1af2e:	1c4a      	adds	r2, r1, #1
   1af30:	eb04 0301 	add.w	r3, r4, r1
   1af34:	42af      	cmp	r7, r5
   1af36:	f8c4 a104 	str.w	sl, [r4, #260]
   1af3a:	711e      	strb	r6, [r3, #4]
   1af3c:	f8c4 2104 	str.w	r2, [r4, #260]
   1af40:	f884 6108 	strb.w	r6, [r4, #264]
   1af44:	d8e3      	bhi.n	1af0e <d_append_string+0x32>
   1af46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1af4a:	46c0      	nop			(mov r8, r8)

0001af4c <d_print_array_type>:
   1af4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af50:	4605      	mov	r5, r0
   1af52:	4688      	mov	r8, r1
   1af54:	4616      	mov	r6, r2
   1af56:	2a00      	cmp	r2, #0
   1af58:	d042      	beq.n	1afe0 <d_print_array_type+0x94>
   1af5a:	6894      	ldr	r4, [r2, #8]
   1af5c:	b13c      	cbz	r4, 1af6e <d_print_array_type+0x22>
   1af5e:	6812      	ldr	r2, [r2, #0]
   1af60:	2a00      	cmp	r2, #0
   1af62:	d1fa      	bne.n	1af5a <d_print_array_type+0xe>
   1af64:	4628      	mov	r0, r5
   1af66:	4631      	mov	r1, r6
   1af68:	f000 fe78 	bl	1bc5c <d_print_mod_list>
   1af6c:	e038      	b.n	1afe0 <d_print_array_type+0x94>
   1af6e:	6853      	ldr	r3, [r2, #4]
   1af70:	781a      	ldrb	r2, [r3, #0]
   1af72:	2a25      	cmp	r2, #37
   1af74:	f000 8085 	beq.w	1b082 <d_print_array_type+0x136>
   1af78:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1af7c:	1d2f      	adds	r7, r5, #4
   1af7e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1af82:	f000 8092 	beq.w	1b0aa <d_print_array_type+0x15e>
   1af86:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1af8a:	2120      	movs	r1, #32
   1af8c:	eb05 030c 	add.w	r3, r5, ip
   1af90:	2aff      	cmp	r2, #255
   1af92:	7119      	strb	r1, [r3, #4]
   1af94:	f8c5 2104 	str.w	r2, [r5, #260]
   1af98:	f885 1108 	strb.w	r1, [r5, #264]
   1af9c:	4694      	mov	ip, r2
   1af9e:	f000 8091 	beq.w	1b0c4 <d_print_array_type+0x178>
   1afa2:	2128      	movs	r1, #40
   1afa4:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1afa8:	eb05 030c 	add.w	r3, r5, ip
   1afac:	7119      	strb	r1, [r3, #4]
   1afae:	f8c5 2104 	str.w	r2, [r5, #260]
   1afb2:	f885 1108 	strb.w	r1, [r5, #264]
   1afb6:	2200      	movs	r2, #0
   1afb8:	4628      	mov	r0, r5
   1afba:	4631      	mov	r1, r6
   1afbc:	f000 fe4e 	bl	1bc5c <d_print_mod_list>
   1afc0:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1afc4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1afc8:	f000 808a 	beq.w	1b0e0 <d_print_array_type+0x194>
   1afcc:	2129      	movs	r1, #41
   1afce:	eb05 030c 	add.w	r3, r5, ip
   1afd2:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1afd6:	7119      	strb	r1, [r3, #4]
   1afd8:	f8c5 2104 	str.w	r2, [r5, #260]
   1afdc:	f885 1108 	strb.w	r1, [r5, #264]
   1afe0:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1afe4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1afe8:	d051      	beq.n	1b08e <d_print_array_type+0x142>
   1afea:	2120      	movs	r1, #32
   1afec:	eb05 030c 	add.w	r3, r5, ip
   1aff0:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1aff4:	7119      	strb	r1, [r3, #4]
   1aff6:	f8c5 2104 	str.w	r2, [r5, #260]
   1affa:	f885 1108 	strb.w	r1, [r5, #264]
   1affe:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1b002:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1b006:	d02e      	beq.n	1b066 <d_print_array_type+0x11a>
   1b008:	215b      	movs	r1, #91
   1b00a:	eb05 030c 	add.w	r3, r5, ip
   1b00e:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1b012:	7119      	strb	r1, [r3, #4]
   1b014:	f8c5 2104 	str.w	r2, [r5, #260]
   1b018:	f885 1108 	strb.w	r1, [r5, #264]
   1b01c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1b020:	b111      	cbz	r1, 1b028 <d_print_array_type+0xdc>
   1b022:	4628      	mov	r0, r5
   1b024:	f000 f86a 	bl	1b0fc <d_print_comp>
   1b028:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1b02c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1b030:	d00b      	beq.n	1b04a <d_print_array_type+0xfe>
   1b032:	215d      	movs	r1, #93
   1b034:	eb05 030c 	add.w	r3, r5, ip
   1b038:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1b03c:	7119      	strb	r1, [r3, #4]
   1b03e:	f8c5 2104 	str.w	r2, [r5, #260]
   1b042:	f885 1108 	strb.w	r1, [r5, #264]
   1b046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b04a:	2400      	movs	r4, #0
   1b04c:	4661      	mov	r1, ip
   1b04e:	f885 4103 	strb.w	r4, [r5, #259]
   1b052:	1d28      	adds	r0, r5, #4
   1b054:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1b058:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1b05c:	4798      	blx	r3
   1b05e:	f8c5 4104 	str.w	r4, [r5, #260]
   1b062:	46a4      	mov	ip, r4
   1b064:	e7e5      	b.n	1b032 <d_print_array_type+0xe6>
   1b066:	2400      	movs	r4, #0
   1b068:	4661      	mov	r1, ip
   1b06a:	f885 4103 	strb.w	r4, [r5, #259]
   1b06e:	1d28      	adds	r0, r5, #4
   1b070:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1b074:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1b078:	4798      	blx	r3
   1b07a:	f8c5 4104 	str.w	r4, [r5, #260]
   1b07e:	46a4      	mov	ip, r4
   1b080:	e7c2      	b.n	1b008 <d_print_array_type+0xbc>
   1b082:	4628      	mov	r0, r5
   1b084:	4631      	mov	r1, r6
   1b086:	4622      	mov	r2, r4
   1b088:	f000 fde8 	bl	1bc5c <d_print_mod_list>
   1b08c:	e7b7      	b.n	1affe <d_print_array_type+0xb2>
   1b08e:	2400      	movs	r4, #0
   1b090:	4661      	mov	r1, ip
   1b092:	f885 4103 	strb.w	r4, [r5, #259]
   1b096:	1d28      	adds	r0, r5, #4
   1b098:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1b09c:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1b0a0:	4798      	blx	r3
   1b0a2:	f8c5 4104 	str.w	r4, [r5, #260]
   1b0a6:	46a4      	mov	ip, r4
   1b0a8:	e79f      	b.n	1afea <d_print_array_type+0x9e>
   1b0aa:	4661      	mov	r1, ip
   1b0ac:	f885 4103 	strb.w	r4, [r5, #259]
   1b0b0:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1b0b4:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1b0b8:	4638      	mov	r0, r7
   1b0ba:	4798      	blx	r3
   1b0bc:	f8c5 4104 	str.w	r4, [r5, #260]
   1b0c0:	46a4      	mov	ip, r4
   1b0c2:	e760      	b.n	1af86 <d_print_array_type+0x3a>
   1b0c4:	2400      	movs	r4, #0
   1b0c6:	4661      	mov	r1, ip
   1b0c8:	f885 4103 	strb.w	r4, [r5, #259]
   1b0cc:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1b0d0:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1b0d4:	4638      	mov	r0, r7
   1b0d6:	4798      	blx	r3
   1b0d8:	f8c5 4104 	str.w	r4, [r5, #260]
   1b0dc:	46a4      	mov	ip, r4
   1b0de:	e760      	b.n	1afa2 <d_print_array_type+0x56>
   1b0e0:	2400      	movs	r4, #0
   1b0e2:	4661      	mov	r1, ip
   1b0e4:	f885 4103 	strb.w	r4, [r5, #259]
   1b0e8:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1b0ec:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1b0f0:	4638      	mov	r0, r7
   1b0f2:	4798      	blx	r3
   1b0f4:	f8c5 4104 	str.w	r4, [r5, #260]
   1b0f8:	46a4      	mov	ip, r4
   1b0fa:	e767      	b.n	1afcc <d_print_array_type+0x80>

0001b0fc <d_print_comp>:
   1b0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b100:	4680      	mov	r8, r0
   1b102:	b09b      	sub	sp, #108
   1b104:	460f      	mov	r7, r1
   1b106:	2900      	cmp	r1, #0
   1b108:	d06e      	beq.n	1b1e8 <d_print_comp+0xec>
   1b10a:	f8d0 311c 	ldr.w	r3, [r0, #284]
   1b10e:	2b00      	cmp	r3, #0
   1b110:	d167      	bne.n	1b1e2 <d_print_comp+0xe6>
   1b112:	7808      	ldrb	r0, [r1, #0]
   1b114:	2836      	cmp	r0, #54
   1b116:	d867      	bhi.n	1b1e8 <d_print_comp+0xec>
   1b118:	e8df f010 	tbh	[pc, r0, lsl #1]
   1b11c:	006a021a 	.word	0x006a021a
   1b120:	0127006a 	.word	0x0127006a
   1b124:	02b9028b 	.word	0x02b9028b
   1b128:	02e00079 	.word	0x02e00079
   1b12c:	03a103cc 	.word	0x03a103cc
   1b130:	03d503e7 	.word	0x03d503e7
   1b134:	023b03de 	.word	0x023b03de
   1b138:	024f0245 	.word	0x024f0245
   1b13c:	02630259 	.word	0x02630259
   1b140:	0277026d 	.word	0x0277026d
   1b144:	00880281 	.word	0x00880281
   1b148:	01c301c3 	.word	0x01c301c3
   1b14c:	031201c3 	.word	0x031201c3
   1b150:	03120312 	.word	0x03120312
   1b154:	03120312 	.word	0x03120312
   1b158:	03120312 	.word	0x03120312
   1b15c:	03120312 	.word	0x03120312
   1b160:	0083032d 	.word	0x0083032d
   1b164:	033a01da 	.word	0x033a01da
   1b168:	02e903aa 	.word	0x02e903aa
   1b16c:	02fb02e9 	.word	0x02fb02e9
   1b170:	011d0113 	.word	0x011d0113
   1b174:	00a3008e 	.word	0x00a3008e
   1b178:	00df0066 	.word	0x00df0066
   1b17c:	00660066 	.word	0x00660066
   1b180:	00370037 	.word	0x00370037
   1b184:	0211007e 	.word	0x0211007e
   1b188:	010e      	.short	0x010e
   1b18a:	684a      	ldr	r2, [r1, #4]
   1b18c:	7813      	ldrb	r3, [r2, #0]
   1b18e:	2b22      	cmp	r3, #34
   1b190:	f040 8402 	bne.w	1b998 <d_print_comp+0x89c>
   1b194:	6853      	ldr	r3, [r2, #4]
   1b196:	7c1c      	ldrb	r4, [r3, #16]
   1b198:	b12c      	cbz	r4, 1b1a6 <d_print_comp+0xaa>
   1b19a:	2c06      	cmp	r4, #6
   1b19c:	f240 843f 	bls.w	1ba1e <d_print_comp+0x922>
   1b1a0:	2c07      	cmp	r4, #7
   1b1a2:	f000 8423 	beq.w	1b9ec <d_print_comp+0x8f0>
   1b1a6:	2128      	movs	r1, #40
   1b1a8:	4640      	mov	r0, r8
   1b1aa:	f7fe fc91 	bl	19ad0 <d_append_char>
   1b1ae:	6879      	ldr	r1, [r7, #4]
   1b1b0:	4640      	mov	r0, r8
   1b1b2:	f7ff ffa3 	bl	1b0fc <d_print_comp>
   1b1b6:	2129      	movs	r1, #41
   1b1b8:	4640      	mov	r0, r8
   1b1ba:	f7fe fc89 	bl	19ad0 <d_append_char>
   1b1be:	783b      	ldrb	r3, [r7, #0]
   1b1c0:	2b33      	cmp	r3, #51
   1b1c2:	f000 8467 	beq.w	1ba94 <d_print_comp+0x998>
   1b1c6:	2c08      	cmp	r4, #8
   1b1c8:	d121      	bne.n	1b20e <d_print_comp+0x112>
   1b1ca:	4640      	mov	r0, r8
   1b1cc:	215b      	movs	r1, #91
   1b1ce:	f7fe fc7f 	bl	19ad0 <d_append_char>
   1b1d2:	68b9      	ldr	r1, [r7, #8]
   1b1d4:	4640      	mov	r0, r8
   1b1d6:	f7ff ff91 	bl	1b0fc <d_print_comp>
   1b1da:	4640      	mov	r0, r8
   1b1dc:	215d      	movs	r1, #93
   1b1de:	f7fe fc77 	bl	19ad0 <d_append_char>
   1b1e2:	b01b      	add	sp, #108
   1b1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1e8:	2301      	movs	r3, #1
   1b1ea:	f8c8 311c 	str.w	r3, [r8, #284]
   1b1ee:	e7f8      	b.n	1b1e2 <d_print_comp+0xe6>
   1b1f0:	6849      	ldr	r1, [r1, #4]
   1b1f2:	4640      	mov	r0, r8
   1b1f4:	f7ff ff82 	bl	1b0fc <d_print_comp>
   1b1f8:	f8d8 3000 	ldr.w	r3, [r8]
   1b1fc:	f013 0f04 	tst.w	r3, #4	; 0x4
   1b200:	f040 83c5 	bne.w	1b98e <d_print_comp+0x892>
   1b204:	4640      	mov	r0, r8
   1b206:	f8df 1900 	ldr.w	r1, [pc, #2304]	; 1bb08 <d_print_comp+0xa0c>
   1b20a:	f7ff fe67 	bl	1aedc <d_append_string>
   1b20e:	68b9      	ldr	r1, [r7, #8]
   1b210:	4640      	mov	r0, r8
   1b212:	f7ff ff73 	bl	1b0fc <d_print_comp>
   1b216:	e7e4      	b.n	1b1e2 <d_print_comp+0xe6>
   1b218:	4640      	mov	r0, r8
   1b21a:	f8df 18f0 	ldr.w	r1, [pc, #2288]	; 1bb0c <d_print_comp+0xa10>
   1b21e:	f7ff fe5d 	bl	1aedc <d_append_string>
   1b222:	6879      	ldr	r1, [r7, #4]
   1b224:	4640      	mov	r0, r8
   1b226:	f7ff ff69 	bl	1b0fc <d_print_comp>
   1b22a:	e7da      	b.n	1b1e2 <d_print_comp+0xe6>
   1b22c:	6879      	ldr	r1, [r7, #4]
   1b22e:	68ba      	ldr	r2, [r7, #8]
   1b230:	4640      	mov	r0, r8
   1b232:	f7ff fe1f 	bl	1ae74 <d_append_buffer>
   1b236:	e7d4      	b.n	1b1e2 <d_print_comp+0xe6>
   1b238:	6849      	ldr	r1, [r1, #4]
   1b23a:	780b      	ldrb	r3, [r1, #0]
   1b23c:	2b2b      	cmp	r3, #43
   1b23e:	f000 83ba 	beq.w	1b9b6 <d_print_comp+0x8ba>
   1b242:	4640      	mov	r0, r8
   1b244:	f000 feda 	bl	1bffc <d_print_expr_op>
   1b248:	2128      	movs	r1, #40
   1b24a:	4640      	mov	r0, r8
   1b24c:	f7fe fc40 	bl	19ad0 <d_append_char>
   1b250:	68b9      	ldr	r1, [r7, #8]
   1b252:	4640      	mov	r0, r8
   1b254:	f7ff ff52 	bl	1b0fc <d_print_comp>
   1b258:	4640      	mov	r0, r8
   1b25a:	2129      	movs	r1, #41
   1b25c:	f7fe fc38 	bl	19ad0 <d_append_char>
   1b260:	e7bf      	b.n	1b1e2 <d_print_comp+0xe6>
   1b262:	688b      	ldr	r3, [r1, #8]
   1b264:	781a      	ldrb	r2, [r3, #0]
   1b266:	2a2e      	cmp	r2, #46
   1b268:	d1be      	bne.n	1b1e8 <d_print_comp+0xec>
   1b26a:	684a      	ldr	r2, [r1, #4]
   1b26c:	7813      	ldrb	r3, [r2, #0]
   1b26e:	2b29      	cmp	r3, #41
   1b270:	f000 8416 	beq.w	1baa0 <d_print_comp+0x9a4>
   1b274:	2128      	movs	r1, #40
   1b276:	4640      	mov	r0, r8
   1b278:	f7fe fc2a 	bl	19ad0 <d_append_char>
   1b27c:	68bb      	ldr	r3, [r7, #8]
   1b27e:	4640      	mov	r0, r8
   1b280:	6859      	ldr	r1, [r3, #4]
   1b282:	f7ff ff3b 	bl	1b0fc <d_print_comp>
   1b286:	4640      	mov	r0, r8
   1b288:	f8df 1884 	ldr.w	r1, [pc, #2180]	; 1bb10 <d_print_comp+0xa14>
   1b28c:	f7ff fe26 	bl	1aedc <d_append_string>
   1b290:	6879      	ldr	r1, [r7, #4]
   1b292:	4640      	mov	r0, r8
   1b294:	f000 feb2 	bl	1bffc <d_print_expr_op>
   1b298:	4640      	mov	r0, r8
   1b29a:	f8df 1878 	ldr.w	r1, [pc, #2168]	; 1bb14 <d_print_comp+0xa18>
   1b29e:	f7ff fe1d 	bl	1aedc <d_append_string>
   1b2a2:	68bb      	ldr	r3, [r7, #8]
   1b2a4:	4640      	mov	r0, r8
   1b2a6:	6899      	ldr	r1, [r3, #8]
   1b2a8:	f7ff ff28 	bl	1b0fc <d_print_comp>
   1b2ac:	2129      	movs	r1, #41
   1b2ae:	4640      	mov	r0, r8
   1b2b0:	f7fe fc0e 	bl	19ad0 <d_append_char>
   1b2b4:	6879      	ldr	r1, [r7, #4]
   1b2b6:	f891 c000 	ldrb.w	ip, [r1]
   1b2ba:	f1bc 0f29 	cmp.w	ip, #41	; 0x29
   1b2be:	d190      	bne.n	1b1e2 <d_print_comp+0xe6>
   1b2c0:	6849      	ldr	r1, [r1, #4]
   1b2c2:	688b      	ldr	r3, [r1, #8]
   1b2c4:	2b01      	cmp	r3, #1
   1b2c6:	d18c      	bne.n	1b1e2 <d_print_comp+0xe6>
   1b2c8:	684b      	ldr	r3, [r1, #4]
   1b2ca:	781a      	ldrb	r2, [r3, #0]
   1b2cc:	2a3e      	cmp	r2, #62
   1b2ce:	d188      	bne.n	1b1e2 <d_print_comp+0xe6>
   1b2d0:	4640      	mov	r0, r8
   1b2d2:	4661      	mov	r1, ip
   1b2d4:	f7fe fbfc 	bl	19ad0 <d_append_char>
   1b2d8:	e783      	b.n	1b1e2 <d_print_comp+0xe6>
   1b2da:	688a      	ldr	r2, [r1, #8]
   1b2dc:	7813      	ldrb	r3, [r2, #0]
   1b2de:	2b30      	cmp	r3, #48
   1b2e0:	d182      	bne.n	1b1e8 <d_print_comp+0xec>
   1b2e2:	6893      	ldr	r3, [r2, #8]
   1b2e4:	781a      	ldrb	r2, [r3, #0]
   1b2e6:	2a31      	cmp	r2, #49
   1b2e8:	f47f af7e 	bne.w	1b1e8 <d_print_comp+0xec>
   1b2ec:	4640      	mov	r0, r8
   1b2ee:	2128      	movs	r1, #40
   1b2f0:	f7fe fbee 	bl	19ad0 <d_append_char>
   1b2f4:	68bb      	ldr	r3, [r7, #8]
   1b2f6:	4640      	mov	r0, r8
   1b2f8:	6859      	ldr	r1, [r3, #4]
   1b2fa:	f7ff feff 	bl	1b0fc <d_print_comp>
   1b2fe:	4640      	mov	r0, r8
   1b300:	f8df 180c 	ldr.w	r1, [pc, #2060]	; 1bb10 <d_print_comp+0xa14>
   1b304:	f7ff fdea 	bl	1aedc <d_append_string>
   1b308:	6879      	ldr	r1, [r7, #4]
   1b30a:	4640      	mov	r0, r8
   1b30c:	f000 fe76 	bl	1bffc <d_print_expr_op>
   1b310:	4640      	mov	r0, r8
   1b312:	f8df 1800 	ldr.w	r1, [pc, #2048]	; 1bb14 <d_print_comp+0xa18>
   1b316:	f7ff fde1 	bl	1aedc <d_append_string>
   1b31a:	68bb      	ldr	r3, [r7, #8]
   1b31c:	4640      	mov	r0, r8
   1b31e:	689a      	ldr	r2, [r3, #8]
   1b320:	6851      	ldr	r1, [r2, #4]
   1b322:	f7ff feeb 	bl	1b0fc <d_print_comp>
   1b326:	f8df 17f0 	ldr.w	r1, [pc, #2032]	; 1bb18 <d_print_comp+0xa1c>
   1b32a:	4640      	mov	r0, r8
   1b32c:	f7ff fdd6 	bl	1aedc <d_append_string>
   1b330:	68bb      	ldr	r3, [r7, #8]
   1b332:	689a      	ldr	r2, [r3, #8]
   1b334:	6891      	ldr	r1, [r2, #8]
   1b336:	e78c      	b.n	1b252 <d_print_comp+0x156>
   1b338:	7909      	ldrb	r1, [r1, #4]
   1b33a:	4640      	mov	r0, r8
   1b33c:	f7fe fbc8 	bl	19ad0 <d_append_char>
   1b340:	e74f      	b.n	1b1e2 <d_print_comp+0xe6>
   1b342:	4640      	mov	r0, r8
   1b344:	f8df 17d4 	ldr.w	r1, [pc, #2004]	; 1bb1c <d_print_comp+0xa20>
   1b348:	f7ff fdc8 	bl	1aedc <d_append_string>
   1b34c:	68b9      	ldr	r1, [r7, #8]
   1b34e:	4640      	mov	r0, r8
   1b350:	f7ff fed4 	bl	1b0fc <d_print_comp>
   1b354:	e745      	b.n	1b1e2 <d_print_comp+0xe6>
   1b356:	4640      	mov	r0, r8
   1b358:	f8df 17c0 	ldr.w	r1, [pc, #1984]	; 1bb1c <d_print_comp+0xa20>
   1b35c:	f7ff fdbe 	bl	1aedc <d_append_string>
   1b360:	4640      	mov	r0, r8
   1b362:	4639      	mov	r1, r7
   1b364:	f000 fdd6 	bl	1bf14 <d_print_cast>
   1b368:	e73b      	b.n	1b1e2 <d_print_comp+0xe6>
   1b36a:	f8d8 3118 	ldr.w	r3, [r8, #280]
   1b36e:	9302      	str	r3, [sp, #8]
   1b370:	684d      	ldr	r5, [r1, #4]
   1b372:	2d00      	cmp	r5, #0
   1b374:	f43f af38 	beq.w	1b1e8 <d_print_comp+0xec>
   1b378:	7829      	ldrb	r1, [r5, #0]
   1b37a:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
   1b37e:	f84b 3d58 	str.w	r3, [fp, #-88]!
   1b382:	f1a1 0319 	sub.w	r3, r1, #25	; 0x19
   1b386:	f8d8 0114 	ldr.w	r0, [r8, #276]
   1b38a:	b2db      	uxtb	r3, r3
   1b38c:	f04f 0c00 	mov.w	ip, #0	; 0x0
   1b390:	2b02      	cmp	r3, #2
   1b392:	f8c8 b118 	str.w	fp, [r8, #280]
   1b396:	9505      	str	r5, [sp, #20]
   1b398:	f8cd c018 	str.w	ip, [sp, #24]
   1b39c:	9007      	str	r0, [sp, #28]
   1b39e:	f200 83a5 	bhi.w	1baec <d_print_comp+0x9f0>
   1b3a2:	aa08      	add	r2, sp, #32
   1b3a4:	2601      	movs	r6, #1
   1b3a6:	686d      	ldr	r5, [r5, #4]
   1b3a8:	2d00      	cmp	r5, #0
   1b3aa:	f43f af1d 	beq.w	1b1e8 <d_print_comp+0xec>
   1b3ae:	2e04      	cmp	r6, #4
   1b3b0:	f43f af1a 	beq.w	1b1e8 <d_print_comp+0xec>
   1b3b4:	f8d8 3118 	ldr.w	r3, [r8, #280]
   1b3b8:	7829      	ldrb	r1, [r5, #0]
   1b3ba:	6013      	str	r3, [r2, #0]
   1b3bc:	f1a1 0319 	sub.w	r3, r1, #25	; 0x19
   1b3c0:	b2db      	uxtb	r3, r3
   1b3c2:	f8c8 2118 	str.w	r2, [r8, #280]
   1b3c6:	6055      	str	r5, [r2, #4]
   1b3c8:	f8c2 c008 	str.w	ip, [r2, #8]
   1b3cc:	60d0      	str	r0, [r2, #12]
   1b3ce:	3601      	adds	r6, #1
   1b3d0:	3210      	adds	r2, #16
   1b3d2:	2b02      	cmp	r3, #2
   1b3d4:	d9e7      	bls.n	1b3a6 <d_print_comp+0x2aa>
   1b3d6:	2904      	cmp	r1, #4
   1b3d8:	bf01      	itttt	eq
   1b3da:	ab1a      	addeq	r3, sp, #104
   1b3dc:	f843 0d08 	streq.w	r0, [r3, #-8]!
   1b3e0:	f8c8 3114 	streq.w	r3, [r8, #276]
   1b3e4:	9519      	streq	r5, [sp, #100]
   1b3e6:	d042      	beq.n	1b46e <d_print_comp+0x372>
   1b3e8:	2902      	cmp	r1, #2
   1b3ea:	d140      	bne.n	1b46e <d_print_comp+0x372>
   1b3ec:	f8d5 c008 	ldr.w	ip, [r5, #8]
   1b3f0:	f89c 3000 	ldrb.w	r3, [ip]
   1b3f4:	3b19      	subs	r3, #25
   1b3f6:	b2db      	uxtb	r3, r3
   1b3f8:	2b02      	cmp	r3, #2
   1b3fa:	d838      	bhi.n	1b46e <d_print_comp+0x372>
   1b3fc:	2e03      	cmp	r6, #3
   1b3fe:	f63f aef3 	bhi.w	1b1e8 <d_print_comp+0xec>
   1b402:	f106 5380 	add.w	r3, r6, #268435456	; 0x10000000
   1b406:	3b01      	subs	r3, #1
   1b408:	011b      	lsls	r3, r3, #4
   1b40a:	1e72      	subs	r2, r6, #1
   1b40c:	eb0b 0403 	add.w	r4, fp, r3
   1b410:	0112      	lsls	r2, r2, #4
   1b412:	0133      	lsls	r3, r6, #4
   1b414:	eb0b 0902 	add.w	r9, fp, r2
   1b418:	eb0b 0a03 	add.w	sl, fp, r3
   1b41c:	e007      	b.n	1b42e <d_print_comp+0x332>
   1b41e:	2e03      	cmp	r6, #3
   1b420:	9c01      	ldr	r4, [sp, #4]
   1b422:	f109 0910 	add.w	r9, r9, #16	; 0x10
   1b426:	f10a 0a10 	add.w	sl, sl, #16	; 0x10
   1b42a:	f63f aedd 	bhi.w	1b1e8 <d_print_comp+0xec>
   1b42e:	f104 0210 	add.w	r2, r4, #16	; 0x10
   1b432:	9201      	str	r2, [sp, #4]
   1b434:	4610      	mov	r0, r2
   1b436:	4621      	mov	r1, r4
   1b438:	2210      	movs	r2, #16
   1b43a:	f8cd c000 	str.w	ip, [sp]
   1b43e:	f007 fb7d 	bl	22b3c <memcpy>
   1b442:	2300      	movs	r3, #0
   1b444:	f8dd c000 	ldr.w	ip, [sp]
   1b448:	60a3      	str	r3, [r4, #8]
   1b44a:	f8d8 3114 	ldr.w	r3, [r8, #276]
   1b44e:	f8c4 9010 	str.w	r9, [r4, #16]
   1b452:	60e3      	str	r3, [r4, #12]
   1b454:	f8c8 a118 	str.w	sl, [r8, #280]
   1b458:	f8c4 c004 	str.w	ip, [r4, #4]
   1b45c:	f8dc c004 	ldr.w	ip, [ip, #4]
   1b460:	3601      	adds	r6, #1
   1b462:	f89c 3000 	ldrb.w	r3, [ip]
   1b466:	3b19      	subs	r3, #25
   1b468:	b2db      	uxtb	r3, r3
   1b46a:	2b02      	cmp	r3, #2
   1b46c:	d9d7      	bls.n	1b41e <d_print_comp+0x322>
   1b46e:	68b9      	ldr	r1, [r7, #8]
   1b470:	4640      	mov	r0, r8
   1b472:	f7ff fe43 	bl	1b0fc <d_print_comp>
   1b476:	782b      	ldrb	r3, [r5, #0]
   1b478:	2b04      	cmp	r3, #4
   1b47a:	bf04      	itt	eq
   1b47c:	9b18      	ldreq	r3, [sp, #96]
   1b47e:	f8c8 3114 	streq.w	r3, [r8, #276]
   1b482:	b156      	cbz	r6, 1b49a <d_print_comp+0x39e>
   1b484:	0133      	lsls	r3, r6, #4
   1b486:	eb0b 0403 	add.w	r4, fp, r3
   1b48a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1b48e:	2b00      	cmp	r3, #0
   1b490:	f000 82a2 	beq.w	1b9d8 <d_print_comp+0x8dc>
   1b494:	3c10      	subs	r4, #16
   1b496:	455c      	cmp	r4, fp
   1b498:	d1f7      	bne.n	1b48a <d_print_comp+0x38e>
   1b49a:	9a02      	ldr	r2, [sp, #8]
   1b49c:	f8c8 2118 	str.w	r2, [r8, #280]
   1b4a0:	e69f      	b.n	1b1e2 <d_print_comp+0xe6>
   1b4a2:	f8d8 4118 	ldr.w	r4, [r8, #280]
   1b4a6:	2c00      	cmp	r4, #0
   1b4a8:	f000 814c 	beq.w	1b744 <d_print_comp+0x648>
   1b4ac:	4621      	mov	r1, r4
   1b4ae:	688b      	ldr	r3, [r1, #8]
   1b4b0:	b953      	cbnz	r3, 1b4c8 <d_print_comp+0x3cc>
   1b4b2:	684a      	ldr	r2, [r1, #4]
   1b4b4:	7812      	ldrb	r2, [r2, #0]
   1b4b6:	f1a2 0316 	sub.w	r3, r2, #22	; 0x16
   1b4ba:	b2db      	uxtb	r3, r3
   1b4bc:	2b02      	cmp	r3, #2
   1b4be:	f200 8141 	bhi.w	1b744 <d_print_comp+0x648>
   1b4c2:	4290      	cmp	r0, r2
   1b4c4:	f43f aead 	beq.w	1b222 <d_print_comp+0x126>
   1b4c8:	6809      	ldr	r1, [r1, #0]
   1b4ca:	2900      	cmp	r1, #0
   1b4cc:	d1ef      	bne.n	1b4ae <d_print_comp+0x3b2>
   1b4ce:	e139      	b.n	1b744 <d_print_comp+0x648>
   1b4d0:	f8d8 3000 	ldr.w	r3, [r8]
   1b4d4:	f013 0f20 	tst.w	r3, #32	; 0x20
   1b4d8:	f040 8267 	bne.w	1b9aa <d_print_comp+0x8ae>
   1b4dc:	687b      	ldr	r3, [r7, #4]
   1b4de:	b30b      	cbz	r3, 1b524 <d_print_comp+0x428>
   1b4e0:	f8d8 2118 	ldr.w	r2, [r8, #280]
   1b4e4:	ab1a      	add	r3, sp, #104
   1b4e6:	f843 2d18 	str.w	r2, [r3, #-24]!
   1b4ea:	f8d8 2114 	ldr.w	r2, [r8, #276]
   1b4ee:	f8c8 3118 	str.w	r3, [r8, #280]
   1b4f2:	2300      	movs	r3, #0
   1b4f4:	9316      	str	r3, [sp, #88]
   1b4f6:	9217      	str	r2, [sp, #92]
   1b4f8:	9715      	str	r7, [sp, #84]
   1b4fa:	6879      	ldr	r1, [r7, #4]
   1b4fc:	4640      	mov	r0, r8
   1b4fe:	f7ff fdfd 	bl	1b0fc <d_print_comp>
   1b502:	9b14      	ldr	r3, [sp, #80]
   1b504:	9a16      	ldr	r2, [sp, #88]
   1b506:	f8c8 3118 	str.w	r3, [r8, #280]
   1b50a:	2a00      	cmp	r2, #0
   1b50c:	f47f ae69 	bne.w	1b1e2 <d_print_comp+0xe6>
   1b510:	f8d8 3000 	ldr.w	r3, [r8]
   1b514:	f013 0f20 	tst.w	r3, #32	; 0x20
   1b518:	f47f ae63 	bne.w	1b1e2 <d_print_comp+0xe6>
   1b51c:	4640      	mov	r0, r8
   1b51e:	2120      	movs	r1, #32
   1b520:	f7fe fad6 	bl	19ad0 <d_append_char>
   1b524:	f8d8 3000 	ldr.w	r3, [r8]
   1b528:	f013 0f20 	tst.w	r3, #32	; 0x20
   1b52c:	f47f ae59 	bne.w	1b1e2 <d_print_comp+0xe6>
   1b530:	f8d8 2118 	ldr.w	r2, [r8, #280]
   1b534:	4640      	mov	r0, r8
   1b536:	4639      	mov	r1, r7
   1b538:	f000 fbfe 	bl	1bd38 <d_print_function_type>
   1b53c:	e651      	b.n	1b1e2 <d_print_comp+0xe6>
   1b53e:	4640      	mov	r0, r8
   1b540:	6849      	ldr	r1, [r1, #4]
   1b542:	f7ff fddb 	bl	1b0fc <d_print_comp>
   1b546:	68b9      	ldr	r1, [r7, #8]
   1b548:	4640      	mov	r0, r8
   1b54a:	f7ff fdd7 	bl	1b0fc <d_print_comp>
   1b54e:	e648      	b.n	1b1e2 <d_print_comp+0xe6>
   1b550:	f8d8 3000 	ldr.w	r3, [r8]
   1b554:	f013 0f04 	tst.w	r3, #4	; 0x4
   1b558:	f43f ae68 	beq.w	1b22c <d_print_comp+0x130>
   1b55c:	684a      	ldr	r2, [r1, #4]
   1b55e:	688b      	ldr	r3, [r1, #8]
   1b560:	eb02 0503 	add.w	r5, r2, r3
   1b564:	42aa      	cmp	r2, r5
   1b566:	d30c      	bcc.n	1b582 <d_print_comp+0x486>
   1b568:	e63b      	b.n	1b1e2 <d_print_comp+0xe6>
   1b56a:	7811      	ldrb	r1, [r2, #0]
   1b56c:	295f      	cmp	r1, #95
   1b56e:	f000 81cd 	beq.w	1b90c <d_print_comp+0x810>
   1b572:	1c54      	adds	r4, r2, #1
   1b574:	4640      	mov	r0, r8
   1b576:	f7fe faab 	bl	19ad0 <d_append_char>
   1b57a:	42a5      	cmp	r5, r4
   1b57c:	f67f ae31 	bls.w	1b1e2 <d_print_comp+0xe6>
   1b580:	4622      	mov	r2, r4
   1b582:	ebc2 0305 	rsb	r3, r2, r5
   1b586:	2b03      	cmp	r3, #3
   1b588:	dcef      	bgt.n	1b56a <d_print_comp+0x46e>
   1b58a:	4614      	mov	r4, r2
   1b58c:	f814 1b01 	ldrb.w	r1, [r4], #1
   1b590:	e7f0      	b.n	1b574 <d_print_comp+0x478>
   1b592:	4640      	mov	r0, r8
   1b594:	f8df 1588 	ldr.w	r1, [pc, #1416]	; 1bb20 <d_print_comp+0xa24>
   1b598:	f7ff fca0 	bl	1aedc <d_append_string>
   1b59c:	6879      	ldr	r1, [r7, #4]
   1b59e:	4640      	mov	r0, r8
   1b5a0:	f7ff fdac 	bl	1b0fc <d_print_comp>
   1b5a4:	e61d      	b.n	1b1e2 <d_print_comp+0xe6>
   1b5a6:	4640      	mov	r0, r8
   1b5a8:	f8df 1578 	ldr.w	r1, [pc, #1400]	; 1bb24 <d_print_comp+0xa28>
   1b5ac:	f7ff fc96 	bl	1aedc <d_append_string>
   1b5b0:	6879      	ldr	r1, [r7, #4]
   1b5b2:	4640      	mov	r0, r8
   1b5b4:	f7ff fda2 	bl	1b0fc <d_print_comp>
   1b5b8:	e613      	b.n	1b1e2 <d_print_comp+0xe6>
   1b5ba:	4640      	mov	r0, r8
   1b5bc:	f8df 1568 	ldr.w	r1, [pc, #1384]	; 1bb28 <d_print_comp+0xa2c>
   1b5c0:	f7ff fc8c 	bl	1aedc <d_append_string>
   1b5c4:	6879      	ldr	r1, [r7, #4]
   1b5c6:	4640      	mov	r0, r8
   1b5c8:	f7ff fd98 	bl	1b0fc <d_print_comp>
   1b5cc:	e609      	b.n	1b1e2 <d_print_comp+0xe6>
   1b5ce:	4640      	mov	r0, r8
   1b5d0:	f8df 1558 	ldr.w	r1, [pc, #1368]	; 1bb2c <d_print_comp+0xa30>
   1b5d4:	f7ff fc82 	bl	1aedc <d_append_string>
   1b5d8:	6879      	ldr	r1, [r7, #4]
   1b5da:	4640      	mov	r0, r8
   1b5dc:	f7ff fd8e 	bl	1b0fc <d_print_comp>
   1b5e0:	e5ff      	b.n	1b1e2 <d_print_comp+0xe6>
   1b5e2:	4640      	mov	r0, r8
   1b5e4:	f8df 1548 	ldr.w	r1, [pc, #1352]	; 1bb30 <d_print_comp+0xa34>
   1b5e8:	f7ff fc78 	bl	1aedc <d_append_string>
   1b5ec:	6879      	ldr	r1, [r7, #4]
   1b5ee:	4640      	mov	r0, r8
   1b5f0:	f7ff fd84 	bl	1b0fc <d_print_comp>
   1b5f4:	e5f5      	b.n	1b1e2 <d_print_comp+0xe6>
   1b5f6:	4640      	mov	r0, r8
   1b5f8:	f8df 1538 	ldr.w	r1, [pc, #1336]	; 1bb34 <d_print_comp+0xa38>
   1b5fc:	f7ff fc6e 	bl	1aedc <d_append_string>
   1b600:	6879      	ldr	r1, [r7, #4]
   1b602:	4640      	mov	r0, r8
   1b604:	f7ff fd7a 	bl	1b0fc <d_print_comp>
   1b608:	e5eb      	b.n	1b1e2 <d_print_comp+0xe6>
   1b60a:	4640      	mov	r0, r8
   1b60c:	f8df 1528 	ldr.w	r1, [pc, #1320]	; 1bb38 <d_print_comp+0xa3c>
   1b610:	f7ff fc64 	bl	1aedc <d_append_string>
   1b614:	6879      	ldr	r1, [r7, #4]
   1b616:	4640      	mov	r0, r8
   1b618:	f7ff fd70 	bl	1b0fc <d_print_comp>
   1b61c:	e5e1      	b.n	1b1e2 <d_print_comp+0xe6>
   1b61e:	4640      	mov	r0, r8
   1b620:	f8df 1518 	ldr.w	r1, [pc, #1304]	; 1bb3c <d_print_comp+0xa40>
   1b624:	f7ff fc5a 	bl	1aedc <d_append_string>
   1b628:	6879      	ldr	r1, [r7, #4]
   1b62a:	4640      	mov	r0, r8
   1b62c:	f7ff fd66 	bl	1b0fc <d_print_comp>
   1b630:	e5d7      	b.n	1b1e2 <d_print_comp+0xe6>
   1b632:	2300      	movs	r3, #0
   1b634:	f8d8 5118 	ldr.w	r5, [r8, #280]
   1b638:	f8c8 3118 	str.w	r3, [r8, #280]
   1b63c:	f8d8 3000 	ldr.w	r3, [r8]
   1b640:	684c      	ldr	r4, [r1, #4]
   1b642:	f013 0f04 	tst.w	r3, #4	; 0x4
   1b646:	d005      	beq.n	1b654 <d_print_comp+0x558>
   1b648:	7823      	ldrb	r3, [r4, #0]
   1b64a:	b91b      	cbnz	r3, 1b654 <d_print_comp+0x558>
   1b64c:	68a2      	ldr	r2, [r4, #8]
   1b64e:	2a06      	cmp	r2, #6
   1b650:	f000 8239 	beq.w	1bac6 <d_print_comp+0x9ca>
   1b654:	4640      	mov	r0, r8
   1b656:	4621      	mov	r1, r4
   1b658:	f7ff fd50 	bl	1b0fc <d_print_comp>
   1b65c:	f898 3108 	ldrb.w	r3, [r8, #264]
   1b660:	2b3c      	cmp	r3, #60
   1b662:	f000 8212 	beq.w	1ba8a <d_print_comp+0x98e>
   1b666:	213c      	movs	r1, #60
   1b668:	4640      	mov	r0, r8
   1b66a:	f7fe fa31 	bl	19ad0 <d_append_char>
   1b66e:	68b9      	ldr	r1, [r7, #8]
   1b670:	4640      	mov	r0, r8
   1b672:	f7ff fd43 	bl	1b0fc <d_print_comp>
   1b676:	f898 3108 	ldrb.w	r3, [r8, #264]
   1b67a:	2b3e      	cmp	r3, #62
   1b67c:	f000 8200 	beq.w	1ba80 <d_print_comp+0x984>
   1b680:	4640      	mov	r0, r8
   1b682:	213e      	movs	r1, #62
   1b684:	f7fe fa24 	bl	19ad0 <d_append_char>
   1b688:	f8c8 5118 	str.w	r5, [r8, #280]
   1b68c:	e5a9      	b.n	1b1e2 <d_print_comp+0xe6>
   1b68e:	f8d8 4114 	ldr.w	r4, [r8, #276]
   1b692:	2c00      	cmp	r4, #0
   1b694:	f43f ada8 	beq.w	1b1e8 <d_print_comp+0xec>
   1b698:	6863      	ldr	r3, [r4, #4]
   1b69a:	6849      	ldr	r1, [r1, #4]
   1b69c:	689a      	ldr	r2, [r3, #8]
   1b69e:	2a00      	cmp	r2, #0
   1b6a0:	f43f ada2 	beq.w	1b1e8 <d_print_comp+0xec>
   1b6a4:	7813      	ldrb	r3, [r2, #0]
   1b6a6:	2b28      	cmp	r3, #40
   1b6a8:	d009      	beq.n	1b6be <d_print_comp+0x5c2>
   1b6aa:	e59d      	b.n	1b1e8 <d_print_comp+0xec>
   1b6ac:	6892      	ldr	r2, [r2, #8]
   1b6ae:	2a00      	cmp	r2, #0
   1b6b0:	f43f ad9a 	beq.w	1b1e8 <d_print_comp+0xec>
   1b6b4:	7813      	ldrb	r3, [r2, #0]
   1b6b6:	2b28      	cmp	r3, #40
   1b6b8:	f47f ad96 	bne.w	1b1e8 <d_print_comp+0xec>
   1b6bc:	3901      	subs	r1, #1
   1b6be:	2900      	cmp	r1, #0
   1b6c0:	dcf4      	bgt.n	1b6ac <d_print_comp+0x5b0>
   1b6c2:	2900      	cmp	r1, #0
   1b6c4:	f47f ad90 	bne.w	1b1e8 <d_print_comp+0xec>
   1b6c8:	6823      	ldr	r3, [r4, #0]
   1b6ca:	4640      	mov	r0, r8
   1b6cc:	f8c8 3114 	str.w	r3, [r8, #276]
   1b6d0:	6851      	ldr	r1, [r2, #4]
   1b6d2:	f7ff fd13 	bl	1b0fc <d_print_comp>
   1b6d6:	f8c8 4114 	str.w	r4, [r8, #276]
   1b6da:	e582      	b.n	1b1e2 <d_print_comp+0xe6>
   1b6dc:	4640      	mov	r0, r8
   1b6de:	217e      	movs	r1, #126
   1b6e0:	f7fe f9f6 	bl	19ad0 <d_append_char>
   1b6e4:	68b9      	ldr	r1, [r7, #8]
   1b6e6:	4640      	mov	r0, r8
   1b6e8:	f7ff fd08 	bl	1b0fc <d_print_comp>
   1b6ec:	e579      	b.n	1b1e2 <d_print_comp+0xe6>
   1b6ee:	6849      	ldr	r1, [r1, #4]
   1b6f0:	4640      	mov	r0, r8
   1b6f2:	f7ff fd03 	bl	1b0fc <d_print_comp>
   1b6f6:	68bb      	ldr	r3, [r7, #8]
   1b6f8:	2b00      	cmp	r3, #0
   1b6fa:	f43f ad72 	beq.w	1b1e2 <d_print_comp+0xe6>
   1b6fe:	4640      	mov	r0, r8
   1b700:	f8df 143c 	ldr.w	r1, [pc, #1084]	; 1bb40 <d_print_comp+0xa44>
   1b704:	f7ff fbea 	bl	1aedc <d_append_string>
   1b708:	68b9      	ldr	r1, [r7, #8]
   1b70a:	4640      	mov	r0, r8
   1b70c:	f7ff fcf6 	bl	1b0fc <d_print_comp>
   1b710:	e567      	b.n	1b1e2 <d_print_comp+0xe6>
   1b712:	f8df 1430 	ldr.w	r1, [pc, #1072]	; 1bb44 <d_print_comp+0xa48>
   1b716:	4640      	mov	r0, r8
   1b718:	f7ff fbe0 	bl	1aedc <d_append_string>
   1b71c:	687a      	ldr	r2, [r7, #4]
   1b71e:	6851      	ldr	r1, [r2, #4]
   1b720:	780b      	ldrb	r3, [r1, #0]
   1b722:	3b61      	subs	r3, #97
   1b724:	b2db      	uxtb	r3, r3
   1b726:	2b19      	cmp	r3, #25
   1b728:	d805      	bhi.n	1b736 <d_print_comp+0x63a>
   1b72a:	2120      	movs	r1, #32
   1b72c:	4640      	mov	r0, r8
   1b72e:	f7fe f9cf 	bl	19ad0 <d_append_char>
   1b732:	687a      	ldr	r2, [r7, #4]
   1b734:	6851      	ldr	r1, [r2, #4]
   1b736:	6892      	ldr	r2, [r2, #8]
   1b738:	4640      	mov	r0, r8
   1b73a:	f7ff fb9b 	bl	1ae74 <d_append_buffer>
   1b73e:	e550      	b.n	1b1e2 <d_print_comp+0xe6>
   1b740:	f8d8 4118 	ldr.w	r4, [r8, #280]
   1b744:	ab1a      	add	r3, sp, #104
   1b746:	f843 4d18 	str.w	r4, [r3, #-24]!
   1b74a:	f8d8 2114 	ldr.w	r2, [r8, #276]
   1b74e:	f8c8 3118 	str.w	r3, [r8, #280]
   1b752:	2300      	movs	r3, #0
   1b754:	9316      	str	r3, [sp, #88]
   1b756:	9715      	str	r7, [sp, #84]
   1b758:	9217      	str	r2, [sp, #92]
   1b75a:	6879      	ldr	r1, [r7, #4]
   1b75c:	4640      	mov	r0, r8
   1b75e:	f7ff fccd 	bl	1b0fc <d_print_comp>
   1b762:	9b16      	ldr	r3, [sp, #88]
   1b764:	b91b      	cbnz	r3, 1b76e <d_print_comp+0x672>
   1b766:	4640      	mov	r0, r8
   1b768:	4639      	mov	r1, r7
   1b76a:	f000 fa09 	bl	1bb80 <d_print_mod>
   1b76e:	9b14      	ldr	r3, [sp, #80]
   1b770:	f8c8 3118 	str.w	r3, [r8, #280]
   1b774:	e535      	b.n	1b1e2 <d_print_comp+0xe6>
   1b776:	f8d8 3000 	ldr.w	r3, [r8]
   1b77a:	f013 0f04 	tst.w	r3, #4	; 0x4
   1b77e:	f040 810d 	bne.w	1b99c <d_print_comp+0x8a0>
   1b782:	684b      	ldr	r3, [r1, #4]
   1b784:	4640      	mov	r0, r8
   1b786:	6819      	ldr	r1, [r3, #0]
   1b788:	685a      	ldr	r2, [r3, #4]
   1b78a:	f7ff fb73 	bl	1ae74 <d_append_buffer>
   1b78e:	e528      	b.n	1b1e2 <d_print_comp+0xe6>
   1b790:	f8d8 9118 	ldr.w	r9, [r8, #280]
   1b794:	f8d8 2114 	ldr.w	r2, [r8, #276]
   1b798:	f8cd 900c 	str.w	r9, [sp, #12]
   1b79c:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
   1b7a0:	9207      	str	r2, [sp, #28]
   1b7a2:	9a03      	ldr	r2, [sp, #12]
   1b7a4:	f84b 9d58 	str.w	r9, [fp, #-88]!
   1b7a8:	2300      	movs	r3, #0
   1b7aa:	46d9      	mov	r9, fp
   1b7ac:	f8c8 b118 	str.w	fp, [r8, #280]
   1b7b0:	9105      	str	r1, [sp, #20]
   1b7b2:	9306      	str	r3, [sp, #24]
   1b7b4:	2a00      	cmp	r2, #0
   1b7b6:	f000 8183 	beq.w	1bac0 <d_print_comp+0x9c4>
   1b7ba:	6852      	ldr	r2, [r2, #4]
   1b7bc:	7813      	ldrb	r3, [r2, #0]
   1b7be:	3b16      	subs	r3, #22
   1b7c0:	b2db      	uxtb	r3, r3
   1b7c2:	2b02      	cmp	r3, #2
   1b7c4:	f200 817c 	bhi.w	1bac0 <d_print_comp+0x9c4>
   1b7c8:	9e03      	ldr	r6, [sp, #12]
   1b7ca:	f04f 0a01 	mov.w	sl, #1	; 0x1
   1b7ce:	e005      	b.n	1b7dc <d_print_comp+0x6e0>
   1b7d0:	6872      	ldr	r2, [r6, #4]
   1b7d2:	7813      	ldrb	r3, [r2, #0]
   1b7d4:	3b16      	subs	r3, #22
   1b7d6:	b2db      	uxtb	r3, r3
   1b7d8:	2b02      	cmp	r3, #2
   1b7da:	d81c      	bhi.n	1b816 <d_print_comp+0x71a>
   1b7dc:	68b3      	ldr	r3, [r6, #8]
   1b7de:	b9bb      	cbnz	r3, 1b810 <d_print_comp+0x714>
   1b7e0:	f1ba 0f03 	cmp.w	sl, #3	; 0x3
   1b7e4:	f200 80f4 	bhi.w	1b9d0 <d_print_comp+0x8d4>
   1b7e8:	ea4f 150a 	mov.w	r5, sl, lsl #4
   1b7ec:	ab1a      	add	r3, sp, #104
   1b7ee:	eb03 0405 	add.w	r4, r3, r5
   1b7f2:	f1a4 0c58 	sub.w	ip, r4, #88	; 0x58
   1b7f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1b7fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   1b7fe:	f844 9c58 	str.w	r9, [r4, #-88]
   1b802:	2201      	movs	r2, #1
   1b804:	eb0b 0905 	add.w	r9, fp, r5
   1b808:	f8c8 9118 	str.w	r9, [r8, #280]
   1b80c:	60b2      	str	r2, [r6, #8]
   1b80e:	4492      	add	sl, r2
   1b810:	6836      	ldr	r6, [r6, #0]
   1b812:	2e00      	cmp	r6, #0
   1b814:	d1dc      	bne.n	1b7d0 <d_print_comp+0x6d4>
   1b816:	68b9      	ldr	r1, [r7, #8]
   1b818:	4640      	mov	r0, r8
   1b81a:	f7ff fc6f 	bl	1b0fc <d_print_comp>
   1b81e:	9b03      	ldr	r3, [sp, #12]
   1b820:	f8c8 3118 	str.w	r3, [r8, #280]
   1b824:	9b06      	ldr	r3, [sp, #24]
   1b826:	2b00      	cmp	r3, #0
   1b828:	f47f acdb 	bne.w	1b1e2 <d_print_comp+0xe6>
   1b82c:	f1ba 0f01 	cmp.w	sl, #1	; 0x1
   1b830:	d00e      	beq.n	1b850 <d_print_comp+0x754>
   1b832:	ea4f 130a 	mov.w	r3, sl, lsl #4
   1b836:	eb0b 0403 	add.w	r4, fp, r3
   1b83a:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   1b83e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1b842:	4640      	mov	r0, r8
   1b844:	f000 f99c 	bl	1bb80 <d_print_mod>
   1b848:	3c10      	subs	r4, #16
   1b84a:	f1ba 0f01 	cmp.w	sl, #1	; 0x1
   1b84e:	d8f4      	bhi.n	1b83a <d_print_comp+0x73e>
   1b850:	f8d8 2118 	ldr.w	r2, [r8, #280]
   1b854:	4640      	mov	r0, r8
   1b856:	4639      	mov	r1, r7
   1b858:	f7ff fb78 	bl	1af4c <d_print_array_type>
   1b85c:	e4c1      	b.n	1b1e2 <d_print_comp+0xe6>
   1b85e:	4640      	mov	r0, r8
   1b860:	49b9      	ldr	r1, [pc, #740]	(1bb48 <d_print_comp+0xa4c>)
   1b862:	f7ff fb3b 	bl	1aedc <d_append_string>
   1b866:	6879      	ldr	r1, [r7, #4]
   1b868:	4640      	mov	r0, r8
   1b86a:	f7ff fc47 	bl	1b0fc <d_print_comp>
   1b86e:	e4b8      	b.n	1b1e2 <d_print_comp+0xe6>
   1b870:	f8d8 2118 	ldr.w	r2, [r8, #280]
   1b874:	ab1a      	add	r3, sp, #104
   1b876:	f843 2d18 	str.w	r2, [r3, #-24]!
   1b87a:	f8d8 2114 	ldr.w	r2, [r8, #276]
   1b87e:	f8c8 3118 	str.w	r3, [r8, #280]
   1b882:	2300      	movs	r3, #0
   1b884:	9316      	str	r3, [sp, #88]
   1b886:	9115      	str	r1, [sp, #84]
   1b888:	9217      	str	r2, [sp, #92]
   1b88a:	6889      	ldr	r1, [r1, #8]
   1b88c:	4640      	mov	r0, r8
   1b88e:	f7ff fc35 	bl	1b0fc <d_print_comp>
   1b892:	9b16      	ldr	r3, [sp, #88]
   1b894:	2b00      	cmp	r3, #0
   1b896:	f47f af6a 	bne.w	1b76e <d_print_comp+0x672>
   1b89a:	4640      	mov	r0, r8
   1b89c:	2120      	movs	r1, #32
   1b89e:	f7fe f917 	bl	19ad0 <d_append_char>
   1b8a2:	6879      	ldr	r1, [r7, #4]
   1b8a4:	4640      	mov	r0, r8
   1b8a6:	f7ff fc29 	bl	1b0fc <d_print_comp>
   1b8aa:	4640      	mov	r0, r8
   1b8ac:	49a7      	ldr	r1, [pc, #668]	(1bb4c <d_print_comp+0xa50>)
   1b8ae:	f7ff fb15 	bl	1aedc <d_append_string>
   1b8b2:	e75c      	b.n	1b76e <d_print_comp+0x672>
   1b8b4:	4640      	mov	r0, r8
   1b8b6:	49a6      	ldr	r1, [pc, #664]	(1bb50 <d_print_comp+0xa54>)
   1b8b8:	f7ff fb10 	bl	1aedc <d_append_string>
   1b8bc:	6879      	ldr	r1, [r7, #4]
   1b8be:	4640      	mov	r0, r8
   1b8c0:	f7ff fc1c 	bl	1b0fc <d_print_comp>
   1b8c4:	e48d      	b.n	1b1e2 <d_print_comp+0xe6>
   1b8c6:	4640      	mov	r0, r8
   1b8c8:	49a2      	ldr	r1, [pc, #648]	(1bb54 <d_print_comp+0xa58>)
   1b8ca:	f7ff fb07 	bl	1aedc <d_append_string>
   1b8ce:	6879      	ldr	r1, [r7, #4]
   1b8d0:	4640      	mov	r0, r8
   1b8d2:	f7ff fc13 	bl	1b0fc <d_print_comp>
   1b8d6:	e484      	b.n	1b1e2 <d_print_comp+0xe6>
   1b8d8:	4640      	mov	r0, r8
   1b8da:	499f      	ldr	r1, [pc, #636]	(1bb58 <d_print_comp+0xa5c>)
   1b8dc:	f7ff fafe 	bl	1aedc <d_append_string>
   1b8e0:	6879      	ldr	r1, [r7, #4]
   1b8e2:	4640      	mov	r0, r8
   1b8e4:	f7ff fc0a 	bl	1b0fc <d_print_comp>
   1b8e8:	e47b      	b.n	1b1e2 <d_print_comp+0xe6>
   1b8ea:	4640      	mov	r0, r8
   1b8ec:	499b      	ldr	r1, [pc, #620]	(1bb5c <d_print_comp+0xa60>)
   1b8ee:	f7ff faf5 	bl	1aedc <d_append_string>
   1b8f2:	6879      	ldr	r1, [r7, #4]
   1b8f4:	4640      	mov	r0, r8
   1b8f6:	f7ff fc01 	bl	1b0fc <d_print_comp>
   1b8fa:	4640      	mov	r0, r8
   1b8fc:	4998      	ldr	r1, [pc, #608]	(1bb60 <d_print_comp+0xa64>)
   1b8fe:	f7ff faed 	bl	1aedc <d_append_string>
   1b902:	68b9      	ldr	r1, [r7, #8]
   1b904:	4640      	mov	r0, r8
   1b906:	f7ff fbf9 	bl	1b0fc <d_print_comp>
   1b90a:	e46a      	b.n	1b1e2 <d_print_comp+0xe6>
   1b90c:	7853      	ldrb	r3, [r2, #1]
   1b90e:	1c54      	adds	r4, r2, #1
   1b910:	2b5f      	cmp	r3, #95
   1b912:	f47f ae2f 	bne.w	1b574 <d_print_comp+0x478>
   1b916:	7893      	ldrb	r3, [r2, #2]
   1b918:	2b55      	cmp	r3, #85
   1b91a:	f47f ae2b 	bne.w	1b574 <d_print_comp+0x478>
   1b91e:	1cd6      	adds	r6, r2, #3
   1b920:	42b5      	cmp	r5, r6
   1b922:	f67f ae27 	bls.w	1b574 <d_print_comp+0x478>
   1b926:	f04f 0c00 	mov.w	ip, #0	; 0x0
   1b92a:	e009      	b.n	1b940 <d_print_comp+0x844>
   1b92c:	f1a0 0257 	sub.w	r2, r0, #87	; 0x57
   1b930:	3601      	adds	r6, #1
   1b932:	42b5      	cmp	r5, r6
   1b934:	f67f ae1e 	bls.w	1b574 <d_print_comp+0x478>
   1b938:	ea4f 130c 	mov.w	r3, ip, lsl #4
   1b93c:	eb02 0c03 	add.w	ip, r2, r3
   1b940:	7830      	ldrb	r0, [r6, #0]
   1b942:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   1b946:	b2d3      	uxtb	r3, r2
   1b948:	2b09      	cmp	r3, #9
   1b94a:	d9f1      	bls.n	1b930 <d_print_comp+0x834>
   1b94c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1b950:	b2db      	uxtb	r3, r3
   1b952:	2b05      	cmp	r3, #5
   1b954:	bf98      	it	ls
   1b956:	f1a0 0237 	subls.w	r2, r0, #55	; 0x37
   1b95a:	d9e9      	bls.n	1b930 <d_print_comp+0x834>
   1b95c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1b960:	b2db      	uxtb	r3, r3
   1b962:	2b05      	cmp	r3, #5
   1b964:	d9e2      	bls.n	1b92c <d_print_comp+0x830>
   1b966:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1b96a:	bf8c      	ite	hi
   1b96c:	2300      	movhi	r3, #0
   1b96e:	2301      	movls	r3, #1
   1b970:	285f      	cmp	r0, #95
   1b972:	bf14      	ite	ne
   1b974:	2300      	movne	r3, #0
   1b976:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
   1b97a:	2b00      	cmp	r3, #0
   1b97c:	f43f adfa 	beq.w	1b574 <d_print_comp+0x478>
   1b980:	fa5f f18c 	uxtb.w	r1, ip
   1b984:	4640      	mov	r0, r8
   1b986:	f7fe f8a3 	bl	19ad0 <d_append_char>
   1b98a:	1c74      	adds	r4, r6, #1
   1b98c:	e5f5      	b.n	1b57a <d_print_comp+0x47e>
   1b98e:	4640      	mov	r0, r8
   1b990:	212e      	movs	r1, #46
   1b992:	f7fe f89d 	bl	19ad0 <d_append_char>
   1b996:	e43a      	b.n	1b20e <d_print_comp+0x112>
   1b998:	2400      	movs	r4, #0
   1b99a:	e404      	b.n	1b1a6 <d_print_comp+0xaa>
   1b99c:	684b      	ldr	r3, [r1, #4]
   1b99e:	4640      	mov	r0, r8
   1b9a0:	6899      	ldr	r1, [r3, #8]
   1b9a2:	68da      	ldr	r2, [r3, #12]
   1b9a4:	f7ff fa66 	bl	1ae74 <d_append_buffer>
   1b9a8:	e41b      	b.n	1b1e2 <d_print_comp+0xe6>
   1b9aa:	f8d8 2118 	ldr.w	r2, [r8, #280]
   1b9ae:	4640      	mov	r0, r8
   1b9b0:	f000 f9c2 	bl	1bd38 <d_print_function_type>
   1b9b4:	e592      	b.n	1b4dc <d_print_comp+0x3e0>
   1b9b6:	4640      	mov	r0, r8
   1b9b8:	2128      	movs	r1, #40
   1b9ba:	f7fe f889 	bl	19ad0 <d_append_char>
   1b9be:	6879      	ldr	r1, [r7, #4]
   1b9c0:	4640      	mov	r0, r8
   1b9c2:	f000 faa7 	bl	1bf14 <d_print_cast>
   1b9c6:	4640      	mov	r0, r8
   1b9c8:	2129      	movs	r1, #41
   1b9ca:	f7fe f881 	bl	19ad0 <d_append_char>
   1b9ce:	e43b      	b.n	1b248 <d_print_comp+0x14c>
   1b9d0:	3301      	adds	r3, #1
   1b9d2:	f8c8 311c 	str.w	r3, [r8, #284]
   1b9d6:	e404      	b.n	1b1e2 <d_print_comp+0xe6>
   1b9d8:	4640      	mov	r0, r8
   1b9da:	2120      	movs	r1, #32
   1b9dc:	f7fe f878 	bl	19ad0 <d_append_char>
   1b9e0:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   1b9e4:	4640      	mov	r0, r8
   1b9e6:	f000 f8cb 	bl	1bb80 <d_print_mod>
   1b9ea:	e553      	b.n	1b494 <d_print_comp+0x398>
   1b9ec:	688a      	ldr	r2, [r1, #8]
   1b9ee:	7813      	ldrb	r3, [r2, #0]
   1b9f0:	2b00      	cmp	r3, #0
   1b9f2:	f47f abd8 	bne.w	1b1a6 <d_print_comp+0xaa>
   1b9f6:	6893      	ldr	r3, [r2, #8]
   1b9f8:	2b01      	cmp	r3, #1
   1b9fa:	f47f abd4 	bne.w	1b1a6 <d_print_comp+0xaa>
   1b9fe:	2832      	cmp	r0, #50
   1ba00:	f47f abd1 	bne.w	1b1a6 <d_print_comp+0xaa>
   1ba04:	6853      	ldr	r3, [r2, #4]
   1ba06:	781b      	ldrb	r3, [r3, #0]
   1ba08:	2b30      	cmp	r3, #48
   1ba0a:	d077      	beq.n	1bafc <d_print_comp+0xa00>
   1ba0c:	2b31      	cmp	r3, #49
   1ba0e:	f47f abca 	bne.w	1b1a6 <d_print_comp+0xaa>
   1ba12:	4640      	mov	r0, r8
   1ba14:	4953      	ldr	r1, [pc, #332]	(1bb64 <d_print_comp+0xa68>)
   1ba16:	f7ff fa61 	bl	1aedc <d_append_string>
   1ba1a:	f7ff bbe2 	b.w	1b1e2 <d_print_comp+0xe6>
   1ba1e:	6889      	ldr	r1, [r1, #8]
   1ba20:	780b      	ldrb	r3, [r1, #0]
   1ba22:	2b00      	cmp	r3, #0
   1ba24:	f47f abbf 	bne.w	1b1a6 <d_print_comp+0xaa>
   1ba28:	2833      	cmp	r0, #51
   1ba2a:	d061      	beq.n	1baf0 <d_print_comp+0x9f4>
   1ba2c:	4640      	mov	r0, r8
   1ba2e:	f7ff fb65 	bl	1b0fc <d_print_comp>
   1ba32:	1ea3      	subs	r3, r4, #2
   1ba34:	2b04      	cmp	r3, #4
   1ba36:	f63f abd4 	bhi.w	1b1e2 <d_print_comp+0xe6>
   1ba3a:	e8df f003 	tbb	[pc, r3]
   1ba3e:	151b      	.short	0x151b
   1ba40:	0003090f 	.word	0x0003090f
   1ba44:	4640      	mov	r0, r8
   1ba46:	4948      	ldr	r1, [pc, #288]	(1bb68 <d_print_comp+0xa6c>)
   1ba48:	f7ff fa48 	bl	1aedc <d_append_string>
   1ba4c:	f7ff bbc9 	b.w	1b1e2 <d_print_comp+0xe6>
   1ba50:	4640      	mov	r0, r8
   1ba52:	4946      	ldr	r1, [pc, #280]	(1bb6c <d_print_comp+0xa70>)
   1ba54:	f7ff fa42 	bl	1aedc <d_append_string>
   1ba58:	f7ff bbc3 	b.w	1b1e2 <d_print_comp+0xe6>
   1ba5c:	4640      	mov	r0, r8
   1ba5e:	4944      	ldr	r1, [pc, #272]	(1bb70 <d_print_comp+0xa74>)
   1ba60:	f7ff fa3c 	bl	1aedc <d_append_string>
   1ba64:	f7ff bbbd 	b.w	1b1e2 <d_print_comp+0xe6>
   1ba68:	4640      	mov	r0, r8
   1ba6a:	216c      	movs	r1, #108
   1ba6c:	f7fe f830 	bl	19ad0 <d_append_char>
   1ba70:	f7ff bbb7 	b.w	1b1e2 <d_print_comp+0xe6>
   1ba74:	4640      	mov	r0, r8
   1ba76:	2175      	movs	r1, #117
   1ba78:	f7fe f82a 	bl	19ad0 <d_append_char>
   1ba7c:	f7ff bbb1 	b.w	1b1e2 <d_print_comp+0xe6>
   1ba80:	4640      	mov	r0, r8
   1ba82:	2120      	movs	r1, #32
   1ba84:	f7fe f824 	bl	19ad0 <d_append_char>
   1ba88:	e5fa      	b.n	1b680 <d_print_comp+0x584>
   1ba8a:	4640      	mov	r0, r8
   1ba8c:	2120      	movs	r1, #32
   1ba8e:	f7fe f81f 	bl	19ad0 <d_append_char>
   1ba92:	e5e8      	b.n	1b666 <d_print_comp+0x56a>
   1ba94:	4640      	mov	r0, r8
   1ba96:	212d      	movs	r1, #45
   1ba98:	f7fe f81a 	bl	19ad0 <d_append_char>
   1ba9c:	f7ff bb93 	b.w	1b1c6 <d_print_comp+0xca>
   1baa0:	6852      	ldr	r2, [r2, #4]
   1baa2:	6893      	ldr	r3, [r2, #8]
   1baa4:	2b01      	cmp	r3, #1
   1baa6:	f47f abe5 	bne.w	1b274 <d_print_comp+0x178>
   1baaa:	6853      	ldr	r3, [r2, #4]
   1baac:	781a      	ldrb	r2, [r3, #0]
   1baae:	2a3e      	cmp	r2, #62
   1bab0:	f47f abe0 	bne.w	1b274 <d_print_comp+0x178>
   1bab4:	4640      	mov	r0, r8
   1bab6:	2128      	movs	r1, #40
   1bab8:	f7fe f80a 	bl	19ad0 <d_append_char>
   1babc:	f7ff bbda 	b.w	1b274 <d_print_comp+0x178>
   1bac0:	f04f 0a01 	mov.w	sl, #1	; 0x1
   1bac4:	e6a7      	b.n	1b816 <d_print_comp+0x71a>
   1bac6:	6860      	ldr	r0, [r4, #4]
   1bac8:	492a      	ldr	r1, [pc, #168]	(1bb74 <d_print_comp+0xa78>)
   1baca:	f007 fbf5 	bl	232b8 <strncmp>
   1bace:	2800      	cmp	r0, #0
   1bad0:	f47f adc0 	bne.w	1b654 <d_print_comp+0x558>
   1bad4:	68b9      	ldr	r1, [r7, #8]
   1bad6:	4640      	mov	r0, r8
   1bad8:	f7ff fb10 	bl	1b0fc <d_print_comp>
   1badc:	4640      	mov	r0, r8
   1bade:	4926      	ldr	r1, [pc, #152]	(1bb78 <d_print_comp+0xa7c>)
   1bae0:	f7ff f9fc 	bl	1aedc <d_append_string>
   1bae4:	f8c8 5118 	str.w	r5, [r8, #280]
   1bae8:	f7ff bb7b 	b.w	1b1e2 <d_print_comp+0xe6>
   1baec:	2601      	movs	r6, #1
   1baee:	e472      	b.n	1b3d6 <d_print_comp+0x2da>
   1baf0:	212d      	movs	r1, #45
   1baf2:	4640      	mov	r0, r8
   1baf4:	f7fd ffec 	bl	19ad0 <d_append_char>
   1baf8:	68b9      	ldr	r1, [r7, #8]
   1bafa:	e797      	b.n	1ba2c <d_print_comp+0x930>
   1bafc:	4640      	mov	r0, r8
   1bafe:	491f      	ldr	r1, [pc, #124]	(1bb7c <d_print_comp+0xa80>)
   1bb00:	f7ff f9ec 	bl	1aedc <d_append_string>
   1bb04:	f7ff bb6d 	b.w	1b1e2 <d_print_comp+0xe6>
   1bb08:	00024fc0 	.word	0x00024fc0
   1bb0c:	00025118 	.word	0x00025118
   1bb10:	000250ec 	.word	0x000250ec
   1bb14:	000250f0 	.word	0x000250f0
   1bb18:	000250f4 	.word	0x000250f4
   1bb1c:	000250e0 	.word	0x000250e0
   1bb20:	00025030 	.word	0x00025030
   1bb24:	00025044 	.word	0x00025044
   1bb28:	00025048 	.word	0x00025048
   1bb2c:	0002505c 	.word	0x0002505c
   1bb30:	00025078 	.word	0x00025078
   1bb34:	00025088 	.word	0x00025088
   1bb38:	0002509c 	.word	0x0002509c
   1bb3c:	000250b8 	.word	0x000250b8
   1bb40:	000250d0 	.word	0x000250d0
   1bb44:	000250d4 	.word	0x000250d4
   1bb48:	00024fdc 	.word	0x00024fdc
   1bb4c:	000250cc 	.word	0x000250cc
   1bb50:	00024fd0 	.word	0x00024fd0
   1bb54:	0002500c 	.word	0x0002500c
   1bb58:	0002501c 	.word	0x0002501c
   1bb5c:	00024fe8 	.word	0x00024fe8
   1bb60:	00025004 	.word	0x00025004
   1bb64:	00025110 	.word	0x00025110
   1bb68:	00025104 	.word	0x00025104
   1bb6c:	00025100 	.word	0x00025100
   1bb70:	000250fc 	.word	0x000250fc
   1bb74:	00024fc4 	.word	0x00024fc4
   1bb78:	00024fcc 	.word	0x00024fcc
   1bb7c:	00025108 	.word	0x00025108

0001bb80 <d_print_mod>:
   1bb80:	b530      	push	{r4, r5, lr}
   1bb82:	780b      	ldrb	r3, [r1, #0]
   1bb84:	b081      	sub	sp, #4
   1bb86:	3b03      	subs	r3, #3
   1bb88:	4604      	mov	r4, r0
   1bb8a:	460d      	mov	r5, r1
   1bb8c:	2b23      	cmp	r3, #35
   1bb8e:	d813      	bhi.n	1bbb8 <d_print_mod+0x38>
   1bb90:	e8df f003 	tbb	[pc, r3]
   1bb94:	12121216 	.word	0x12121216
   1bb98:	12121212 	.word	0x12121212
   1bb9c:	12121212 	.word	0x12121212
   1bba0:	12121212 	.word	0x12121212
   1bba4:	1a121212 	.word	0x1a121212
   1bba8:	1e1a221e 	.word	0x1e1a221e
   1bbac:	362e2622 	.word	0x362e2622
   1bbb0:	12423e3a 	.word	0x12423e3a
   1bbb4:	46121212 	.word	0x46121212
   1bbb8:	f7ff faa0 	bl	1b0fc <d_print_comp>
   1bbbc:	b001      	add	sp, #4
   1bbbe:	bd30      	pop	{r4, r5, pc}
   1bbc0:	6849      	ldr	r1, [r1, #4]
   1bbc2:	f7ff fa9b 	bl	1b0fc <d_print_comp>
   1bbc6:	e7f9      	b.n	1bbbc <d_print_mod+0x3c>
   1bbc8:	491d      	ldr	r1, [pc, #116]	(1bc40 <d_print_mod+0xc0>)
   1bbca:	f7ff f987 	bl	1aedc <d_append_string>
   1bbce:	e7f5      	b.n	1bbbc <d_print_mod+0x3c>
   1bbd0:	491c      	ldr	r1, [pc, #112]	(1bc44 <d_print_mod+0xc4>)
   1bbd2:	f7ff f983 	bl	1aedc <d_append_string>
   1bbd6:	e7f1      	b.n	1bbbc <d_print_mod+0x3c>
   1bbd8:	491b      	ldr	r1, [pc, #108]	(1bc48 <d_print_mod+0xc8>)
   1bbda:	f7ff f97f 	bl	1aedc <d_append_string>
   1bbde:	e7ed      	b.n	1bbbc <d_print_mod+0x3c>
   1bbe0:	2120      	movs	r1, #32
   1bbe2:	f7fd ff75 	bl	19ad0 <d_append_char>
   1bbe6:	68a9      	ldr	r1, [r5, #8]
   1bbe8:	4620      	mov	r0, r4
   1bbea:	f7ff fa87 	bl	1b0fc <d_print_comp>
   1bbee:	e7e5      	b.n	1bbbc <d_print_mod+0x3c>
   1bbf0:	6803      	ldr	r3, [r0, #0]
   1bbf2:	f013 0f04 	tst.w	r3, #4	; 0x4
   1bbf6:	d1e1      	bne.n	1bbbc <d_print_mod+0x3c>
   1bbf8:	212a      	movs	r1, #42
   1bbfa:	f7fd ff69 	bl	19ad0 <d_append_char>
   1bbfe:	e7dd      	b.n	1bbbc <d_print_mod+0x3c>
   1bc00:	2126      	movs	r1, #38
   1bc02:	f7fd ff65 	bl	19ad0 <d_append_char>
   1bc06:	e7d9      	b.n	1bbbc <d_print_mod+0x3c>
   1bc08:	4910      	ldr	r1, [pc, #64]	(1bc4c <d_print_mod+0xcc>)
   1bc0a:	f7ff f967 	bl	1aedc <d_append_string>
   1bc0e:	e7d5      	b.n	1bbbc <d_print_mod+0x3c>
   1bc10:	490f      	ldr	r1, [pc, #60]	(1bc50 <d_print_mod+0xd0>)
   1bc12:	f7ff f963 	bl	1aedc <d_append_string>
   1bc16:	e7d1      	b.n	1bbbc <d_print_mod+0x3c>
   1bc18:	490e      	ldr	r1, [pc, #56]	(1bc54 <d_print_mod+0xd4>)
   1bc1a:	f7ff f95f 	bl	1aedc <d_append_string>
   1bc1e:	e7cd      	b.n	1bbbc <d_print_mod+0x3c>
   1bc20:	f890 3108 	ldrb.w	r3, [r0, #264]
   1bc24:	2b28      	cmp	r3, #40
   1bc26:	d002      	beq.n	1bc2e <d_print_mod+0xae>
   1bc28:	2120      	movs	r1, #32
   1bc2a:	f7fd ff51 	bl	19ad0 <d_append_char>
   1bc2e:	6869      	ldr	r1, [r5, #4]
   1bc30:	4620      	mov	r0, r4
   1bc32:	f7ff fa63 	bl	1b0fc <d_print_comp>
   1bc36:	4620      	mov	r0, r4
   1bc38:	4907      	ldr	r1, [pc, #28]	(1bc58 <d_print_mod+0xd8>)
   1bc3a:	f7ff f94f 	bl	1aedc <d_append_string>
   1bc3e:	e7bd      	b.n	1bbbc <d_print_mod+0x3c>
   1bc40:	00025128 	.word	0x00025128
   1bc44:	00025134 	.word	0x00025134
   1bc48:	00025140 	.word	0x00025140
   1bc4c:	00025148 	.word	0x00025148
   1bc50:	0002514c 	.word	0x0002514c
   1bc54:	00025158 	.word	0x00025158
   1bc58:	000250cc 	.word	0x000250cc

0001bc5c <d_print_mod_list>:
   1bc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc60:	4606      	mov	r6, r0
   1bc62:	460d      	mov	r5, r1
   1bc64:	4614      	mov	r4, r2
   1bc66:	2900      	cmp	r1, #0
   1bc68:	d02d      	beq.n	1bcc6 <d_print_mod_list+0x6a>
   1bc6a:	f8d0 311c 	ldr.w	r3, [r0, #284]
   1bc6e:	2b00      	cmp	r3, #0
   1bc70:	d129      	bne.n	1bcc6 <d_print_mod_list+0x6a>
   1bc72:	f04f 0801 	mov.w	r8, #1	; 0x1
   1bc76:	e018      	b.n	1bcaa <d_print_mod_list+0x4e>
   1bc78:	6869      	ldr	r1, [r5, #4]
   1bc7a:	68eb      	ldr	r3, [r5, #12]
   1bc7c:	f8d6 7114 	ldr.w	r7, [r6, #276]
   1bc80:	f8c6 3114 	str.w	r3, [r6, #276]
   1bc84:	780b      	ldrb	r3, [r1, #0]
   1bc86:	f8c5 8008 	str.w	r8, [r5, #8]
   1bc8a:	2b24      	cmp	r3, #36
   1bc8c:	d01d      	beq.n	1bcca <d_print_mod_list+0x6e>
   1bc8e:	2b25      	cmp	r3, #37
   1bc90:	d022      	beq.n	1bcd8 <d_print_mod_list+0x7c>
   1bc92:	2b02      	cmp	r3, #2
   1bc94:	d027      	beq.n	1bce6 <d_print_mod_list+0x8a>
   1bc96:	4630      	mov	r0, r6
   1bc98:	f7ff ff72 	bl	1bb80 <d_print_mod>
   1bc9c:	f8c6 7114 	str.w	r7, [r6, #276]
   1bca0:	682d      	ldr	r5, [r5, #0]
   1bca2:	b185      	cbz	r5, 1bcc6 <d_print_mod_list+0x6a>
   1bca4:	f8d6 311c 	ldr.w	r3, [r6, #284]
   1bca8:	b96b      	cbnz	r3, 1bcc6 <d_print_mod_list+0x6a>
   1bcaa:	68ab      	ldr	r3, [r5, #8]
   1bcac:	2b00      	cmp	r3, #0
   1bcae:	d1f7      	bne.n	1bca0 <d_print_mod_list+0x44>
   1bcb0:	2c00      	cmp	r4, #0
   1bcb2:	d1e1      	bne.n	1bc78 <d_print_mod_list+0x1c>
   1bcb4:	6869      	ldr	r1, [r5, #4]
   1bcb6:	780b      	ldrb	r3, [r1, #0]
   1bcb8:	3b19      	subs	r3, #25
   1bcba:	b2db      	uxtb	r3, r3
   1bcbc:	2b02      	cmp	r3, #2
   1bcbe:	d8dc      	bhi.n	1bc7a <d_print_mod_list+0x1e>
   1bcc0:	682d      	ldr	r5, [r5, #0]
   1bcc2:	2d00      	cmp	r5, #0
   1bcc4:	d1ee      	bne.n	1bca4 <d_print_mod_list+0x48>
   1bcc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bcca:	682a      	ldr	r2, [r5, #0]
   1bccc:	4630      	mov	r0, r6
   1bcce:	f000 f833 	bl	1bd38 <d_print_function_type>
   1bcd2:	f8c6 7114 	str.w	r7, [r6, #276]
   1bcd6:	e7f6      	b.n	1bcc6 <d_print_mod_list+0x6a>
   1bcd8:	682a      	ldr	r2, [r5, #0]
   1bcda:	4630      	mov	r0, r6
   1bcdc:	f7ff f936 	bl	1af4c <d_print_array_type>
   1bce0:	f8c6 7114 	str.w	r7, [r6, #276]
   1bce4:	e7ef      	b.n	1bcc6 <d_print_mod_list+0x6a>
   1bce6:	3b02      	subs	r3, #2
   1bce8:	f8d6 4118 	ldr.w	r4, [r6, #280]
   1bcec:	f8c6 3118 	str.w	r3, [r6, #280]
   1bcf0:	6849      	ldr	r1, [r1, #4]
   1bcf2:	4630      	mov	r0, r6
   1bcf4:	f7ff fa02 	bl	1b0fc <d_print_comp>
   1bcf8:	6833      	ldr	r3, [r6, #0]
   1bcfa:	f8c6 4118 	str.w	r4, [r6, #280]
   1bcfe:	f013 0f04 	tst.w	r3, #4	; 0x4
   1bd02:	d112      	bne.n	1bd2a <d_print_mod_list+0xce>
   1bd04:	4630      	mov	r0, r6
   1bd06:	490b      	ldr	r1, [pc, #44]	(1bd34 <d_print_mod_list+0xd8>)
   1bd08:	f7ff f8e8 	bl	1aedc <d_append_string>
   1bd0c:	686a      	ldr	r2, [r5, #4]
   1bd0e:	6891      	ldr	r1, [r2, #8]
   1bd10:	e000      	b.n	1bd14 <d_print_mod_list+0xb8>
   1bd12:	6849      	ldr	r1, [r1, #4]
   1bd14:	780b      	ldrb	r3, [r1, #0]
   1bd16:	3b19      	subs	r3, #25
   1bd18:	b2db      	uxtb	r3, r3
   1bd1a:	2b02      	cmp	r3, #2
   1bd1c:	d9f9      	bls.n	1bd12 <d_print_mod_list+0xb6>
   1bd1e:	4630      	mov	r0, r6
   1bd20:	f7ff f9ec 	bl	1b0fc <d_print_comp>
   1bd24:	f8c6 7114 	str.w	r7, [r6, #276]
   1bd28:	e7cd      	b.n	1bcc6 <d_print_mod_list+0x6a>
   1bd2a:	4630      	mov	r0, r6
   1bd2c:	212e      	movs	r1, #46
   1bd2e:	f7fd fecf 	bl	19ad0 <d_append_char>
   1bd32:	e7eb      	b.n	1bd0c <d_print_mod_list+0xb0>
   1bd34:	00024fc0 	.word	0x00024fc0

0001bd38 <d_print_function_type>:
   1bd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd3c:	4605      	mov	r5, r0
   1bd3e:	4688      	mov	r8, r1
   1bd40:	4616      	mov	r6, r2
   1bd42:	2a00      	cmp	r2, #0
   1bd44:	f000 80de 	beq.w	1bf04 <d_print_function_type+0x1cc>
   1bd48:	6893      	ldr	r3, [r2, #8]
   1bd4a:	2b00      	cmp	r3, #0
   1bd4c:	f040 80da 	bne.w	1bf04 <d_print_function_type+0x1cc>
   1bd50:	4611      	mov	r1, r2
   1bd52:	2001      	movs	r0, #1
   1bd54:	684b      	ldr	r3, [r1, #4]
   1bd56:	781a      	ldrb	r2, [r3, #0]
   1bd58:	3a16      	subs	r2, #22
   1bd5a:	b2d3      	uxtb	r3, r2
   1bd5c:	2b10      	cmp	r3, #16
   1bd5e:	d865      	bhi.n	1be2c <d_print_function_type+0xf4>
   1bd60:	b252      	sxtb	r2, r2
   1bd62:	fa10 f202 	lsls.w	r2, r0, r2
   1bd66:	4b6a      	ldr	r3, [pc, #424]	(1bf10 <d_print_function_type+0x1d8>)
   1bd68:	ea02 0303 	and.w	r3, r2, r3
   1bd6c:	2b00      	cmp	r3, #0
   1bd6e:	d16c      	bne.n	1be4a <d_print_function_type+0x112>
   1bd70:	f412 7f60 	tst.w	r2, #896	; 0x380
   1bd74:	d05a      	beq.n	1be2c <d_print_function_type+0xf4>
   1bd76:	f895 3108 	ldrb.w	r3, [r5, #264]
   1bd7a:	2b28      	cmp	r3, #40
   1bd7c:	d001      	beq.n	1bd82 <d_print_function_type+0x4a>
   1bd7e:	2b2a      	cmp	r3, #42
   1bd80:	d165      	bne.n	1be4e <d_print_function_type+0x116>
   1bd82:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1bd86:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1bd8a:	d076      	beq.n	1be7a <d_print_function_type+0x142>
   1bd8c:	2128      	movs	r1, #40
   1bd8e:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1bd92:	eb05 030c 	add.w	r3, r5, ip
   1bd96:	2400      	movs	r4, #0
   1bd98:	7119      	strb	r1, [r3, #4]
   1bd9a:	f8c5 2104 	str.w	r2, [r5, #260]
   1bd9e:	f885 1108 	strb.w	r1, [r5, #264]
   1bda2:	f8d5 7118 	ldr.w	r7, [r5, #280]
   1bda6:	4628      	mov	r0, r5
   1bda8:	f8c5 4118 	str.w	r4, [r5, #280]
   1bdac:	4631      	mov	r1, r6
   1bdae:	4622      	mov	r2, r4
   1bdb0:	f7ff ff54 	bl	1bc5c <d_print_mod_list>
   1bdb4:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1bdb8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1bdbc:	d06b      	beq.n	1be96 <d_print_function_type+0x15e>
   1bdbe:	2129      	movs	r1, #41
   1bdc0:	eb05 030c 	add.w	r3, r5, ip
   1bdc4:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1bdc8:	7119      	strb	r1, [r3, #4]
   1bdca:	f8c5 2104 	str.w	r2, [r5, #260]
   1bdce:	f885 1108 	strb.w	r1, [r5, #264]
   1bdd2:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1bdd6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1bdda:	d077      	beq.n	1becc <d_print_function_type+0x194>
   1bddc:	2128      	movs	r1, #40
   1bdde:	eb05 030c 	add.w	r3, r5, ip
   1bde2:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1bde6:	7119      	strb	r1, [r3, #4]
   1bde8:	f8c5 2104 	str.w	r2, [r5, #260]
   1bdec:	f885 1108 	strb.w	r1, [r5, #264]
   1bdf0:	f8d8 1008 	ldr.w	r1, [r8, #8]
   1bdf4:	b111      	cbz	r1, 1bdfc <d_print_function_type+0xc4>
   1bdf6:	4628      	mov	r0, r5
   1bdf8:	f7ff f980 	bl	1b0fc <d_print_comp>
   1bdfc:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1be00:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1be04:	d054      	beq.n	1beb0 <d_print_function_type+0x178>
   1be06:	2129      	movs	r1, #41
   1be08:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1be0c:	eb05 030c 	add.w	r3, r5, ip
   1be10:	7119      	strb	r1, [r3, #4]
   1be12:	f8c5 2104 	str.w	r2, [r5, #260]
   1be16:	f885 1108 	strb.w	r1, [r5, #264]
   1be1a:	4628      	mov	r0, r5
   1be1c:	4631      	mov	r1, r6
   1be1e:	2201      	movs	r2, #1
   1be20:	f7ff ff1c 	bl	1bc5c <d_print_mod_list>
   1be24:	f8c5 7118 	str.w	r7, [r5, #280]
   1be28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1be2c:	6809      	ldr	r1, [r1, #0]
   1be2e:	b111      	cbz	r1, 1be36 <d_print_function_type+0xfe>
   1be30:	688b      	ldr	r3, [r1, #8]
   1be32:	2b00      	cmp	r3, #0
   1be34:	d08e      	beq.n	1bd54 <d_print_function_type+0x1c>
   1be36:	2200      	movs	r2, #0
   1be38:	f8d5 7118 	ldr.w	r7, [r5, #280]
   1be3c:	4628      	mov	r0, r5
   1be3e:	f8c5 2118 	str.w	r2, [r5, #280]
   1be42:	4631      	mov	r1, r6
   1be44:	f7ff ff0a 	bl	1bc5c <d_print_mod_list>
   1be48:	e7c3      	b.n	1bdd2 <d_print_function_type+0x9a>
   1be4a:	f895 3108 	ldrb.w	r3, [r5, #264]
   1be4e:	2b20      	cmp	r3, #32
   1be50:	d097      	beq.n	1bd82 <d_print_function_type+0x4a>
   1be52:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1be56:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1be5a:	d045      	beq.n	1bee8 <d_print_function_type+0x1b0>
   1be5c:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1be60:	f8c5 2104 	str.w	r2, [r5, #260]
   1be64:	eb05 030c 	add.w	r3, r5, ip
   1be68:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1be6c:	2120      	movs	r1, #32
   1be6e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1be72:	7119      	strb	r1, [r3, #4]
   1be74:	f885 1108 	strb.w	r1, [r5, #264]
   1be78:	d188      	bne.n	1bd8c <d_print_function_type+0x54>
   1be7a:	2400      	movs	r4, #0
   1be7c:	4661      	mov	r1, ip
   1be7e:	f885 4103 	strb.w	r4, [r5, #259]
   1be82:	1d28      	adds	r0, r5, #4
   1be84:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1be88:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1be8c:	4798      	blx	r3
   1be8e:	f8c5 4104 	str.w	r4, [r5, #260]
   1be92:	46a4      	mov	ip, r4
   1be94:	e77a      	b.n	1bd8c <d_print_function_type+0x54>
   1be96:	4661      	mov	r1, ip
   1be98:	f885 4103 	strb.w	r4, [r5, #259]
   1be9c:	1d28      	adds	r0, r5, #4
   1be9e:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1bea2:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1bea6:	4798      	blx	r3
   1bea8:	f8c5 4104 	str.w	r4, [r5, #260]
   1beac:	46a4      	mov	ip, r4
   1beae:	e786      	b.n	1bdbe <d_print_function_type+0x86>
   1beb0:	2400      	movs	r4, #0
   1beb2:	4661      	mov	r1, ip
   1beb4:	f885 4103 	strb.w	r4, [r5, #259]
   1beb8:	1d28      	adds	r0, r5, #4
   1beba:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1bebe:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1bec2:	4798      	blx	r3
   1bec4:	f8c5 4104 	str.w	r4, [r5, #260]
   1bec8:	46a4      	mov	ip, r4
   1beca:	e79c      	b.n	1be06 <d_print_function_type+0xce>
   1becc:	2400      	movs	r4, #0
   1bece:	4661      	mov	r1, ip
   1bed0:	f885 4103 	strb.w	r4, [r5, #259]
   1bed4:	1d28      	adds	r0, r5, #4
   1bed6:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1beda:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1bede:	4798      	blx	r3
   1bee0:	f8c5 4104 	str.w	r4, [r5, #260]
   1bee4:	46a4      	mov	ip, r4
   1bee6:	e779      	b.n	1bddc <d_print_function_type+0xa4>
   1bee8:	2400      	movs	r4, #0
   1beea:	4661      	mov	r1, ip
   1beec:	f885 4103 	strb.w	r4, [r5, #259]
   1bef0:	1d28      	adds	r0, r5, #4
   1bef2:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1bef6:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1befa:	4798      	blx	r3
   1befc:	f8c5 4104 	str.w	r4, [r5, #260]
   1bf00:	46a4      	mov	ip, r4
   1bf02:	e7ab      	b.n	1be5c <d_print_function_type+0x124>
   1bf04:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1bf08:	2b00      	cmp	r3, #0
   1bf0a:	f47f af34 	bne.w	1bd76 <d_print_function_type+0x3e>
   1bf0e:	e792      	b.n	1be36 <d_print_function_type+0xfe>
   1bf10:	00010c47 	.word	0x00010c47

0001bf14 <d_print_cast>:
   1bf14:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf16:	460e      	mov	r6, r1
   1bf18:	6849      	ldr	r1, [r1, #4]
   1bf1a:	b083      	sub	sp, #12
   1bf1c:	780b      	ldrb	r3, [r1, #0]
   1bf1e:	4605      	mov	r5, r0
   1bf20:	2b04      	cmp	r3, #4
   1bf22:	d003      	beq.n	1bf2c <d_print_cast+0x18>
   1bf24:	f7ff f8ea 	bl	1b0fc <d_print_comp>
   1bf28:	b003      	add	sp, #12
   1bf2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bf2c:	f8d0 2114 	ldr.w	r2, [r0, #276]
   1bf30:	2300      	movs	r3, #0
   1bf32:	f8d0 7118 	ldr.w	r7, [r0, #280]
   1bf36:	f8c0 3118 	str.w	r3, [r0, #280]
   1bf3a:	ab02      	add	r3, sp, #8
   1bf3c:	f843 2d08 	str.w	r2, [r3, #-8]!
   1bf40:	f8c0 3114 	str.w	r3, [r0, #276]
   1bf44:	9101      	str	r1, [sp, #4]
   1bf46:	6849      	ldr	r1, [r1, #4]
   1bf48:	f7ff f8d8 	bl	1b0fc <d_print_comp>
   1bf4c:	f895 2108 	ldrb.w	r2, [r5, #264]
   1bf50:	9b00      	ldr	r3, [sp, #0]
   1bf52:	2a3c      	cmp	r2, #60
   1bf54:	f8c5 3114 	str.w	r3, [r5, #276]
   1bf58:	d045      	beq.n	1bfe6 <d_print_cast+0xd2>
   1bf5a:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1bf5e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1bf62:	d024      	beq.n	1bfae <d_print_cast+0x9a>
   1bf64:	213c      	movs	r1, #60
   1bf66:	f10c 0301 	add.w	r3, ip, #1	; 0x1
   1bf6a:	eb05 020c 	add.w	r2, r5, ip
   1bf6e:	7111      	strb	r1, [r2, #4]
   1bf70:	f8c5 3104 	str.w	r3, [r5, #260]
   1bf74:	f885 1108 	strb.w	r1, [r5, #264]
   1bf78:	6873      	ldr	r3, [r6, #4]
   1bf7a:	4628      	mov	r0, r5
   1bf7c:	6899      	ldr	r1, [r3, #8]
   1bf7e:	f7ff f8bd 	bl	1b0fc <d_print_comp>
   1bf82:	f895 3108 	ldrb.w	r3, [r5, #264]
   1bf86:	2b3e      	cmp	r3, #62
   1bf88:	d032      	beq.n	1bff0 <d_print_cast+0xdc>
   1bf8a:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1bf8e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1bf92:	d01a      	beq.n	1bfca <d_print_cast+0xb6>
   1bf94:	213e      	movs	r1, #62
   1bf96:	eb05 030c 	add.w	r3, r5, ip
   1bf9a:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1bf9e:	7119      	strb	r1, [r3, #4]
   1bfa0:	f8c5 2104 	str.w	r2, [r5, #260]
   1bfa4:	f885 1108 	strb.w	r1, [r5, #264]
   1bfa8:	f8c5 7118 	str.w	r7, [r5, #280]
   1bfac:	e7bc      	b.n	1bf28 <d_print_cast+0x14>
   1bfae:	2400      	movs	r4, #0
   1bfb0:	4661      	mov	r1, ip
   1bfb2:	f885 4103 	strb.w	r4, [r5, #259]
   1bfb6:	1d28      	adds	r0, r5, #4
   1bfb8:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1bfbc:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1bfc0:	4798      	blx	r3
   1bfc2:	f8c5 4104 	str.w	r4, [r5, #260]
   1bfc6:	46a4      	mov	ip, r4
   1bfc8:	e7cc      	b.n	1bf64 <d_print_cast+0x50>
   1bfca:	2400      	movs	r4, #0
   1bfcc:	4661      	mov	r1, ip
   1bfce:	f885 4103 	strb.w	r4, [r5, #259]
   1bfd2:	1d28      	adds	r0, r5, #4
   1bfd4:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1bfd8:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1bfdc:	4798      	blx	r3
   1bfde:	f8c5 4104 	str.w	r4, [r5, #260]
   1bfe2:	46a4      	mov	ip, r4
   1bfe4:	e7d6      	b.n	1bf94 <d_print_cast+0x80>
   1bfe6:	4628      	mov	r0, r5
   1bfe8:	2120      	movs	r1, #32
   1bfea:	f7fd fd71 	bl	19ad0 <d_append_char>
   1bfee:	e7b4      	b.n	1bf5a <d_print_cast+0x46>
   1bff0:	4628      	mov	r0, r5
   1bff2:	2120      	movs	r1, #32
   1bff4:	f7fd fd6c 	bl	19ad0 <d_append_char>
   1bff8:	e7c7      	b.n	1bf8a <d_print_cast+0x76>
   1bffa:	46c0      	nop			(mov r8, r8)

0001bffc <d_print_expr_op>:
   1bffc:	780b      	ldrb	r3, [r1, #0]
   1bffe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c002:	2b29      	cmp	r3, #41
   1c004:	4604      	mov	r4, r0
   1c006:	d003      	beq.n	1c010 <d_print_expr_op+0x14>
   1c008:	f7ff f878 	bl	1b0fc <d_print_comp>
   1c00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c010:	684b      	ldr	r3, [r1, #4]
   1c012:	689f      	ldr	r7, [r3, #8]
   1c014:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1c018:	2f00      	cmp	r7, #0
   1c01a:	d0f7      	beq.n	1c00c <d_print_expr_op+0x10>
   1c01c:	2500      	movs	r5, #0
   1c01e:	f100 0904 	add.w	r9, r0, #4	; 0x4
   1c022:	46aa      	mov	sl, r5
   1c024:	e00a      	b.n	1c03c <d_print_expr_op+0x40>
   1c026:	3501      	adds	r5, #1
   1c028:	1c4a      	adds	r2, r1, #1
   1c02a:	eb04 0301 	add.w	r3, r4, r1
   1c02e:	42af      	cmp	r7, r5
   1c030:	711e      	strb	r6, [r3, #4]
   1c032:	f8c4 2104 	str.w	r2, [r4, #260]
   1c036:	f884 6108 	strb.w	r6, [r4, #264]
   1c03a:	d9e7      	bls.n	1c00c <d_print_expr_op+0x10>
   1c03c:	f8d4 1104 	ldr.w	r1, [r4, #260]
   1c040:	f818 6005 	ldrb.w	r6, [r8, r5]
   1c044:	29ff      	cmp	r1, #255
   1c046:	d1ee      	bne.n	1c026 <d_print_expr_op+0x2a>
   1c048:	f884 a103 	strb.w	sl, [r4, #259]
   1c04c:	f8d4 2110 	ldr.w	r2, [r4, #272]
   1c050:	f8d4 310c 	ldr.w	r3, [r4, #268]
   1c054:	4648      	mov	r0, r9
   1c056:	4798      	blx	r3
   1c058:	f8c4 a104 	str.w	sl, [r4, #260]
   1c05c:	4651      	mov	r1, sl
   1c05e:	e7e2      	b.n	1c026 <d_print_expr_op+0x2a>

0001c060 <d_demangle_callback>:
   1c060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c064:	b0d7      	sub	sp, #348
   1c066:	7806      	ldrb	r6, [r0, #0]
   1c068:	af00      	add	r7, sp, #0
   1c06a:	2e5f      	cmp	r6, #95
   1c06c:	4604      	mov	r4, r0
   1c06e:	460d      	mov	r5, r1
   1c070:	4691      	mov	r9, r2
   1c072:	469a      	mov	sl, r3
   1c074:	d105      	bne.n	1c082 <d_demangle_callback+0x22>
   1c076:	7843      	ldrb	r3, [r0, #1]
   1c078:	2b5a      	cmp	r3, #90
   1c07a:	bf08      	it	eq
   1c07c:	f04f 0800 	moveq.w	r8, #0	; 0x0
   1c080:	d017      	beq.n	1c0b2 <d_demangle_callback+0x52>
   1c082:	4620      	mov	r0, r4
   1c084:	4961      	ldr	r1, [pc, #388]	(1c20c <d_demangle_callback+0x1ac>)
   1c086:	2208      	movs	r2, #8
   1c088:	f007 f916 	bl	232b8 <strncmp>
   1c08c:	b960      	cbnz	r0, 1c0a8 <d_demangle_callback+0x48>
   1c08e:	7a22      	ldrb	r2, [r4, #8]
   1c090:	2a5f      	cmp	r2, #95
   1c092:	bf14      	ite	ne
   1c094:	2300      	movne	r3, #0
   1c096:	2301      	moveq	r3, #1
   1c098:	2a2e      	cmp	r2, #46
   1c09a:	bf08      	it	eq
   1c09c:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1c0a0:	2b00      	cmp	r3, #0
   1c0a2:	d175      	bne.n	1c190 <d_demangle_callback+0x130>
   1c0a4:	2a24      	cmp	r2, #36
   1c0a6:	d073      	beq.n	1c190 <d_demangle_callback+0x130>
   1c0a8:	f015 0010 	ands.w	r0, r5, #16	; 0x10
   1c0ac:	d06b      	beq.n	1c186 <d_demangle_callback+0x126>
   1c0ae:	f04f 0801 	mov.w	r8, #1	; 0x1
   1c0b2:	4620      	mov	r0, r4
   1c0b4:	f007 f8f8 	bl	232a8 <strlen>
   1c0b8:	eb04 0300 	add.w	r3, r4, r0
   1c0bc:	2200      	movs	r2, #0
   1c0be:	f8c7 3128 	str.w	r3, [r7, #296]
   1c0c2:	0043      	lsls	r3, r0, #1
   1c0c4:	f8c7 313c 	str.w	r3, [r7, #316]
   1c0c8:	f8c7 2138 	str.w	r2, [r7, #312]
   1c0cc:	0143      	lsls	r3, r0, #5
   1c0ce:	f8c7 2144 	str.w	r2, [r7, #324]
   1c0d2:	f8c7 214c 	str.w	r2, [r7, #332]
   1c0d6:	f8c7 2150 	str.w	r2, [r7, #336]
   1c0da:	f8c7 2154 	str.w	r2, [r7, #340]
   1c0de:	00c2      	lsls	r2, r0, #3
   1c0e0:	1a9b      	subs	r3, r3, r2
   1c0e2:	f8c7 0148 	str.w	r0, [r7, #328]
   1c0e6:	3308      	adds	r3, #8
   1c0e8:	0080      	lsls	r0, r0, #2
   1c0ea:	46eb      	mov	fp, sp
   1c0ec:	300e      	adds	r0, #14
   1c0ee:	ebc3 0d0d 	rsb	sp, r3, sp
   1c0f2:	ea4f 02dd 	mov.w	r2, sp, lsr #3
   1c0f6:	f020 0007 	bic.w	r0, r0, #7	; 0x7
   1c0fa:	00d2      	lsls	r2, r2, #3
   1c0fc:	ebc0 0d0d 	rsb	sp, r0, sp
   1c100:	f8c7 4124 	str.w	r4, [r7, #292]
   1c104:	f8c7 512c 	str.w	r5, [r7, #300]
   1c108:	f8c7 4130 	str.w	r4, [r7, #304]
   1c10c:	f8c7 2134 	str.w	r2, [r7, #308]
   1c110:	f8c7 d140 	str.w	sp, [r7, #320]
   1c114:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1c118:	d15f      	bne.n	1c1da <d_demangle_callback+0x17a>
   1c11a:	2e5f      	cmp	r6, #95
   1c11c:	d066      	beq.n	1c1ec <d_demangle_callback+0x18c>
   1c11e:	2100      	movs	r1, #0
   1c120:	f015 0f01 	tst.w	r5, #1	; 0x1
   1c124:	d004      	beq.n	1c130 <d_demangle_callback+0xd0>
   1c126:	f8d7 3130 	ldr.w	r3, [r7, #304]
   1c12a:	781a      	ldrb	r2, [r3, #0]
   1c12c:	2a00      	cmp	r2, #0
   1c12e:	d15a      	bne.n	1c1e6 <d_demangle_callback+0x186>
   1c130:	2900      	cmp	r1, #0
   1c132:	d058      	beq.n	1c1e6 <d_demangle_callback+0x186>
   1c134:	1d3c      	adds	r4, r7, #4
   1c136:	6025      	str	r5, [r4, #0]
   1c138:	2500      	movs	r5, #0
   1c13a:	4620      	mov	r0, r4
   1c13c:	f8c4 5104 	str.w	r5, [r4, #260]
   1c140:	f884 5108 	strb.w	r5, [r4, #264]
   1c144:	f8c4 5114 	str.w	r5, [r4, #276]
   1c148:	f8c4 5118 	str.w	r5, [r4, #280]
   1c14c:	f8c4 910c 	str.w	r9, [r4, #268]
   1c150:	f8c4 a110 	str.w	sl, [r4, #272]
   1c154:	f8c4 511c 	str.w	r5, [r4, #284]
   1c158:	f7fe ffd0 	bl	1b0fc <d_print_comp>
   1c15c:	f8d4 1104 	ldr.w	r1, [r4, #260]
   1c160:	f107 0008 	add.w	r0, r7, #8	; 0x8
   1c164:	eb04 0301 	add.w	r3, r4, r1
   1c168:	711d      	strb	r5, [r3, #4]
   1c16a:	f8d4 2110 	ldr.w	r2, [r4, #272]
   1c16e:	f8d4 310c 	ldr.w	r3, [r4, #268]
   1c172:	4798      	blx	r3
   1c174:	f8d4 311c 	ldr.w	r3, [r4, #284]
   1c178:	f8c4 5104 	str.w	r5, [r4, #260]
   1c17c:	42ab      	cmp	r3, r5
   1c17e:	bf14      	ite	ne
   1c180:	2000      	movne	r0, #0
   1c182:	2001      	moveq	r0, #1
   1c184:	46dd      	mov	sp, fp
   1c186:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
   1c18a:	46bd      	mov	sp, r7
   1c18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c190:	7a63      	ldrb	r3, [r4, #9]
   1c192:	2b49      	cmp	r3, #73
   1c194:	bf14      	ite	ne
   1c196:	2200      	movne	r2, #0
   1c198:	2201      	moveq	r2, #1
   1c19a:	2b44      	cmp	r3, #68
   1c19c:	bf14      	ite	ne
   1c19e:	4613      	movne	r3, r2
   1c1a0:	f042 0301 	orreq.w	r3, r2, #1	; 0x1
   1c1a4:	2b00      	cmp	r3, #0
   1c1a6:	f43f af7f 	beq.w	1c0a8 <d_demangle_callback+0x48>
   1c1aa:	7aa3      	ldrb	r3, [r4, #10]
   1c1ac:	2b5f      	cmp	r3, #95
   1c1ae:	f47f af7b 	bne.w	1c0a8 <d_demangle_callback+0x48>
   1c1b2:	4b17      	ldr	r3, [pc, #92]	(1c210 <d_demangle_callback+0x1b0>)
   1c1b4:	4817      	ldr	r0, [pc, #92]	(1c214 <d_demangle_callback+0x1b4>)
   1c1b6:	2a00      	cmp	r2, #0
   1c1b8:	bf08      	it	eq
   1c1ba:	4618      	moveq	r0, r3
   1c1bc:	bf14      	ite	ne
   1c1be:	211d      	movne	r1, #29
   1c1c0:	211c      	moveq	r1, #28
   1c1c2:	4652      	mov	r2, sl
   1c1c4:	340b      	adds	r4, #11
   1c1c6:	47c8      	blx	r9
   1c1c8:	4620      	mov	r0, r4
   1c1ca:	f007 f86d 	bl	232a8 <strlen>
   1c1ce:	4652      	mov	r2, sl
   1c1d0:	4601      	mov	r1, r0
   1c1d2:	4620      	mov	r0, r4
   1c1d4:	47c8      	blx	r9
   1c1d6:	2001      	movs	r0, #1
   1c1d8:	e7d5      	b.n	1c186 <d_demangle_callback+0x126>
   1c1da:	f507 7092 	add.w	r0, r7, #292	; 0x124
   1c1de:	f7fd fd07 	bl	19bf0 <d_type>
   1c1e2:	4601      	mov	r1, r0
   1c1e4:	e79c      	b.n	1c120 <d_demangle_callback+0xc0>
   1c1e6:	2000      	movs	r0, #0
   1c1e8:	46dd      	mov	sp, fp
   1c1ea:	e7cc      	b.n	1c186 <d_demangle_callback+0x126>
   1c1ec:	1c62      	adds	r2, r4, #1
   1c1ee:	f8c7 2130 	str.w	r2, [r7, #304]
   1c1f2:	7863      	ldrb	r3, [r4, #1]
   1c1f4:	2b5a      	cmp	r3, #90
   1c1f6:	d192      	bne.n	1c11e <d_demangle_callback+0xbe>
   1c1f8:	1c53      	adds	r3, r2, #1
   1c1fa:	2101      	movs	r1, #1
   1c1fc:	f507 7092 	add.w	r0, r7, #292	; 0x124
   1c200:	f8c7 3130 	str.w	r3, [r7, #304]
   1c204:	f7fe f8b6 	bl	1a374 <d_encoding>
   1c208:	4601      	mov	r1, r0
   1c20a:	e789      	b.n	1c120 <d_demangle_callback+0xc0>
   1c20c:	00024f88 	.word	0x00024f88
   1c210:	00025164 	.word	0x00025164
   1c214:	00025184 	.word	0x00025184

0001c218 <__gcclibcxx_demangle_callback>:
   1c218:	f1d1 0301 	rsbs	r3, r1, #1	; 0x1
   1c21c:	bf38      	it	cc
   1c21e:	2300      	movcc	r3, #0
   1c220:	2800      	cmp	r0, #0
   1c222:	bf08      	it	eq
   1c224:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1c228:	b510      	push	{r4, lr}
   1c22a:	468c      	mov	ip, r1
   1c22c:	4614      	mov	r4, r2
   1c22e:	b113      	cbz	r3, 1c236 <__gcclibcxx_demangle_callback+0x1e>
   1c230:	f06f 0002 	mvn.w	r0, #2	; 0x2
   1c234:	bd10      	pop	{r4, pc}
   1c236:	2111      	movs	r1, #17
   1c238:	4662      	mov	r2, ip
   1c23a:	4623      	mov	r3, r4
   1c23c:	f7ff ff10 	bl	1c060 <d_demangle_callback>
   1c240:	2800      	cmp	r0, #0
   1c242:	bf0c      	ite	eq
   1c244:	f06f 0001 	mvneq.w	r0, #1	; 0x1
   1c248:	2000      	movne	r0, #0
   1c24a:	e7f3      	b.n	1c234 <__gcclibcxx_demangle_callback+0x1c>

0001c24c <__cxa_demangle>:
   1c24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c250:	460e      	mov	r6, r1
   1c252:	b084      	sub	sp, #16
   1c254:	4617      	mov	r7, r2
   1c256:	4698      	mov	r8, r3
   1c258:	2800      	cmp	r0, #0
   1c25a:	d05b      	beq.n	1c314 <__cxa_demangle+0xc8>
   1c25c:	f1d2 0301 	rsbs	r3, r2, #1	; 0x1
   1c260:	bf38      	it	cc
   1c262:	2300      	movcc	r3, #0
   1c264:	2900      	cmp	r1, #0
   1c266:	bf0c      	ite	eq
   1c268:	2300      	moveq	r3, #0
   1c26a:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   1c26e:	2b00      	cmp	r3, #0
   1c270:	d145      	bne.n	1c2fe <__cxa_demangle+0xb2>
   1c272:	9300      	str	r3, [sp, #0]
   1c274:	9301      	str	r3, [sp, #4]
   1c276:	9302      	str	r3, [sp, #8]
   1c278:	9303      	str	r3, [sp, #12]
   1c27a:	2111      	movs	r1, #17
   1c27c:	4a2c      	ldr	r2, [pc, #176]	(1c330 <__cxa_demangle+0xe4>)
   1c27e:	466b      	mov	r3, sp
   1c280:	f7ff feee 	bl	1c060 <d_demangle_callback>
   1c284:	4604      	mov	r4, r0
   1c286:	2800      	cmp	r0, #0
   1c288:	d026      	beq.n	1c2d8 <__cxa_demangle+0x8c>
   1c28a:	9b03      	ldr	r3, [sp, #12]
   1c28c:	9c00      	ldr	r4, [sp, #0]
   1c28e:	1e1d      	subs	r5, r3, #0
   1c290:	bf18      	it	ne
   1c292:	2501      	movne	r5, #1
   1c294:	4628      	mov	r0, r5
   1c296:	2c00      	cmp	r4, #0
   1c298:	d022      	beq.n	1c2e0 <__cxa_demangle+0x94>
   1c29a:	2e00      	cmp	r6, #0
   1c29c:	d02b      	beq.n	1c2f6 <__cxa_demangle+0xaa>
   1c29e:	4620      	mov	r0, r4
   1c2a0:	f007 f802 	bl	232a8 <strlen>
   1c2a4:	683b      	ldr	r3, [r7, #0]
   1c2a6:	4298      	cmp	r0, r3
   1c2a8:	d211      	bcs.n	1c2ce <__cxa_demangle+0x82>
   1c2aa:	4621      	mov	r1, r4
   1c2ac:	4630      	mov	r0, r6
   1c2ae:	f006 fff3 	bl	23298 <strcpy>
   1c2b2:	4620      	mov	r0, r4
   1c2b4:	f006 f9d4 	bl	22660 <free>
   1c2b8:	4634      	mov	r4, r6
   1c2ba:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1c2be:	d002      	beq.n	1c2c6 <__cxa_demangle+0x7a>
   1c2c0:	2300      	movs	r3, #0
   1c2c2:	f8c8 3000 	str.w	r3, [r8]
   1c2c6:	4620      	mov	r0, r4
   1c2c8:	b004      	add	sp, #16
   1c2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c2ce:	4630      	mov	r0, r6
   1c2d0:	f006 f9c6 	bl	22660 <free>
   1c2d4:	603d      	str	r5, [r7, #0]
   1c2d6:	e7f0      	b.n	1c2ba <__cxa_demangle+0x6e>
   1c2d8:	9800      	ldr	r0, [sp, #0]
   1c2da:	f006 f9c1 	bl	22660 <free>
   1c2de:	4620      	mov	r0, r4
   1c2e0:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1c2e4:	d00e      	beq.n	1c304 <__cxa_demangle+0xb8>
   1c2e6:	2801      	cmp	r0, #1
   1c2e8:	d01c      	beq.n	1c324 <__cxa_demangle+0xd8>
   1c2ea:	f06f 0301 	mvn.w	r3, #1	; 0x1
   1c2ee:	f8c8 3000 	str.w	r3, [r8]
   1c2f2:	2400      	movs	r4, #0
   1c2f4:	e7e7      	b.n	1c2c6 <__cxa_demangle+0x7a>
   1c2f6:	2f00      	cmp	r7, #0
   1c2f8:	d0df      	beq.n	1c2ba <__cxa_demangle+0x6e>
   1c2fa:	603d      	str	r5, [r7, #0]
   1c2fc:	e7dd      	b.n	1c2ba <__cxa_demangle+0x6e>
   1c2fe:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1c302:	d101      	bne.n	1c308 <__cxa_demangle+0xbc>
   1c304:	2400      	movs	r4, #0
   1c306:	e7de      	b.n	1c2c6 <__cxa_demangle+0x7a>
   1c308:	f06f 0302 	mvn.w	r3, #2	; 0x2
   1c30c:	f8c8 3000 	str.w	r3, [r8]
   1c310:	2400      	movs	r4, #0
   1c312:	e7d8      	b.n	1c2c6 <__cxa_demangle+0x7a>
   1c314:	2b00      	cmp	r3, #0
   1c316:	d0f5      	beq.n	1c304 <__cxa_demangle+0xb8>
   1c318:	f06f 0302 	mvn.w	r3, #2	; 0x2
   1c31c:	f8c8 3000 	str.w	r3, [r8]
   1c320:	4604      	mov	r4, r0
   1c322:	e7d0      	b.n	1c2c6 <__cxa_demangle+0x7a>
   1c324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c328:	f8c8 3000 	str.w	r3, [r8]
   1c32c:	2400      	movs	r4, #0
   1c32e:	e7ca      	b.n	1c2c6 <__cxa_demangle+0x7a>
   1c330:	0001adfd 	.word	0x0001adfd

0001c334 <__aeabi_drsub>:
   1c334:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c338:	e002      	b.n	1c340 <__adddf3>
   1c33a:	46c0      	nop			(mov r8, r8)

0001c33c <__aeabi_dsub>:
   1c33c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c340 <__adddf3>:
   1c340:	b530      	push	{r4, r5, lr}
   1c342:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c346:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c34a:	ea94 0f05 	teq	r4, r5
   1c34e:	bf08      	it	eq
   1c350:	ea90 0f02 	teqeq	r0, r2
   1c354:	bf1f      	itttt	ne
   1c356:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c35a:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c35e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c362:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c366:	f000 80e2 	beq.w	1c52e <__adddf3+0x1ee>
   1c36a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c36e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c372:	bfb8      	it	lt
   1c374:	426d      	neglt	r5, r5
   1c376:	dd0c      	ble.n	1c392 <__adddf3+0x52>
   1c378:	442c      	add	r4, r5
   1c37a:	ea80 0202 	eor.w	r2, r0, r2
   1c37e:	ea81 0303 	eor.w	r3, r1, r3
   1c382:	ea82 0000 	eor.w	r0, r2, r0
   1c386:	ea83 0101 	eor.w	r1, r3, r1
   1c38a:	ea80 0202 	eor.w	r2, r0, r2
   1c38e:	ea81 0303 	eor.w	r3, r1, r3
   1c392:	2d36      	cmp	r5, #54
   1c394:	bf88      	it	hi
   1c396:	bd30      	pophi	{r4, r5, pc}
   1c398:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c39c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c3a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c3a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c3a8:	d002      	beq.n	1c3b0 <__adddf3+0x70>
   1c3aa:	4240      	negs	r0, r0
   1c3ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c3b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c3b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c3b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c3bc:	d002      	beq.n	1c3c4 <__adddf3+0x84>
   1c3be:	4252      	negs	r2, r2
   1c3c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c3c4:	ea94 0f05 	teq	r4, r5
   1c3c8:	f000 80a7 	beq.w	1c51a <__adddf3+0x1da>
   1c3cc:	f1a4 0401 	sub.w	r4, r4, #1	; 0x1
   1c3d0:	f1d5 0e20 	rsbs	lr, r5, #32	; 0x20
   1c3d4:	db0d      	blt.n	1c3f2 <__adddf3+0xb2>
   1c3d6:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c3da:	fa22 f205 	lsr.w	r2, r2, r5
   1c3de:	1880      	adds	r0, r0, r2
   1c3e0:	f141 0100 	adc.w	r1, r1, #0	; 0x0
   1c3e4:	fa03 f20e 	lsl.w	r2, r3, lr
   1c3e8:	1880      	adds	r0, r0, r2
   1c3ea:	fa43 f305 	asr.w	r3, r3, r5
   1c3ee:	4159      	adcs	r1, r3
   1c3f0:	e00e      	b.n	1c410 <__adddf3+0xd0>
   1c3f2:	f1a5 0520 	sub.w	r5, r5, #32	; 0x20
   1c3f6:	f10e 0e20 	add.w	lr, lr, #32	; 0x20
   1c3fa:	2a01      	cmp	r2, #1
   1c3fc:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c400:	bf28      	it	cs
   1c402:	f04c 0c02 	orrcs.w	ip, ip, #2	; 0x2
   1c406:	fa43 f305 	asr.w	r3, r3, r5
   1c40a:	18c0      	adds	r0, r0, r3
   1c40c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c414:	d507      	bpl.n	1c426 <__adddf3+0xe6>
   1c416:	f04f 0e00 	mov.w	lr, #0	; 0x0
   1c41a:	f1dc 0c00 	rsbs	ip, ip, #0	; 0x0
   1c41e:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c422:	eb6e 0101 	sbc.w	r1, lr, r1
   1c426:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c42a:	d31b      	bcc.n	1c464 <__adddf3+0x124>
   1c42c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c430:	d30c      	bcc.n	1c44c <__adddf3+0x10c>
   1c432:	0849      	lsrs	r1, r1, #1
   1c434:	ea5f 0030 	movs.w	r0, r0, rrx
   1c438:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c43c:	f104 0401 	add.w	r4, r4, #1	; 0x1
   1c440:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c444:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c448:	f080 809a 	bcs.w	1c580 <__adddf3+0x240>
   1c44c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c450:	bf08      	it	eq
   1c452:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c456:	f150 0000 	adcs.w	r0, r0, #0	; 0x0
   1c45a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c45e:	ea41 0105 	orr.w	r1, r1, r5
   1c462:	bd30      	pop	{r4, r5, pc}
   1c464:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c468:	4140      	adcs	r0, r0
   1c46a:	eb41 0101 	adc.w	r1, r1, r1
   1c46e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c472:	f1a4 0401 	sub.w	r4, r4, #1	; 0x1
   1c476:	d1e9      	bne.n	1c44c <__adddf3+0x10c>
   1c478:	f091 0f00 	teq	r1, #0	; 0x0
   1c47c:	bf04      	itt	eq
   1c47e:	4601      	moveq	r1, r0
   1c480:	2000      	moveq	r0, #0
   1c482:	fab1 f381 	clz	r3, r1
   1c486:	bf08      	it	eq
   1c488:	3320      	addeq	r3, #32
   1c48a:	f1a3 030b 	sub.w	r3, r3, #11	; 0xb
   1c48e:	f1b3 0220 	subs.w	r2, r3, #32	; 0x20
   1c492:	da0c      	bge.n	1c4ae <__adddf3+0x16e>
   1c494:	320c      	adds	r2, #12
   1c496:	dd08      	ble.n	1c4aa <__adddf3+0x16a>
   1c498:	f102 0c14 	add.w	ip, r2, #20	; 0x14
   1c49c:	f1c2 020c 	rsb	r2, r2, #12	; 0xc
   1c4a0:	fa01 f00c 	lsl.w	r0, r1, ip
   1c4a4:	fa21 f102 	lsr.w	r1, r1, r2
   1c4a8:	e00c      	b.n	1c4c4 <__adddf3+0x184>
   1c4aa:	f102 0214 	add.w	r2, r2, #20	; 0x14
   1c4ae:	bfd8      	it	le
   1c4b0:	f1c2 0c20 	rsble	ip, r2, #32	; 0x20
   1c4b4:	fa01 f102 	lsl.w	r1, r1, r2
   1c4b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c4bc:	bfdc      	itt	le
   1c4be:	ea41 010c 	orrle.w	r1, r1, ip
   1c4c2:	4090      	lslle	r0, r2
   1c4c4:	1ae4      	subs	r4, r4, r3
   1c4c6:	bfa2      	ittt	ge
   1c4c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c4cc:	4329      	orrge	r1, r5
   1c4ce:	bd30      	popge	{r4, r5, pc}
   1c4d0:	ea6f 0404 	mvn.w	r4, r4
   1c4d4:	3c1f      	subs	r4, #31
   1c4d6:	da1c      	bge.n	1c512 <__adddf3+0x1d2>
   1c4d8:	340c      	adds	r4, #12
   1c4da:	dc0e      	bgt.n	1c4fa <__adddf3+0x1ba>
   1c4dc:	f104 0414 	add.w	r4, r4, #20	; 0x14
   1c4e0:	f1c4 0220 	rsb	r2, r4, #32	; 0x20
   1c4e4:	fa20 f004 	lsr.w	r0, r0, r4
   1c4e8:	fa01 f302 	lsl.w	r3, r1, r2
   1c4ec:	ea40 0003 	orr.w	r0, r0, r3
   1c4f0:	fa21 f304 	lsr.w	r3, r1, r4
   1c4f4:	ea45 0103 	orr.w	r1, r5, r3
   1c4f8:	bd30      	pop	{r4, r5, pc}
   1c4fa:	f1c4 040c 	rsb	r4, r4, #12	; 0xc
   1c4fe:	f1c4 0220 	rsb	r2, r4, #32	; 0x20
   1c502:	fa20 f002 	lsr.w	r0, r0, r2
   1c506:	fa01 f304 	lsl.w	r3, r1, r4
   1c50a:	ea40 0003 	orr.w	r0, r0, r3
   1c50e:	4629      	mov	r1, r5
   1c510:	bd30      	pop	{r4, r5, pc}
   1c512:	fa21 f004 	lsr.w	r0, r1, r4
   1c516:	4629      	mov	r1, r5
   1c518:	bd30      	pop	{r4, r5, pc}
   1c51a:	f094 0f00 	teq	r4, #0	; 0x0
   1c51e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c522:	bf06      	itte	eq
   1c524:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c528:	3401      	addeq	r4, #1
   1c52a:	3d01      	subne	r5, #1
   1c52c:	e74e      	b.n	1c3cc <__adddf3+0x8c>
   1c52e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c532:	bf18      	it	ne
   1c534:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c538:	d029      	beq.n	1c58e <__adddf3+0x24e>
   1c53a:	ea94 0f05 	teq	r4, r5
   1c53e:	bf08      	it	eq
   1c540:	ea90 0f02 	teqeq	r0, r2
   1c544:	d005      	beq.n	1c552 <__adddf3+0x212>
   1c546:	ea54 0c00 	orrs.w	ip, r4, r0
   1c54a:	bf04      	itt	eq
   1c54c:	4619      	moveq	r1, r3
   1c54e:	4610      	moveq	r0, r2
   1c550:	bd30      	pop	{r4, r5, pc}
   1c552:	ea91 0f03 	teq	r1, r3
   1c556:	bf1e      	ittt	ne
   1c558:	2100      	movne	r1, #0
   1c55a:	2000      	movne	r0, #0
   1c55c:	bd30      	popne	{r4, r5, pc}
   1c55e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c562:	d105      	bne.n	1c570 <__adddf3+0x230>
   1c564:	0040      	lsls	r0, r0, #1
   1c566:	4149      	adcs	r1, r1
   1c568:	bf28      	it	cs
   1c56a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c56e:	bd30      	pop	{r4, r5, pc}
   1c570:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c574:	bf3c      	itt	cc
   1c576:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c57a:	bd30      	popcc	{r4, r5, pc}
   1c57c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c580:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c584:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c588:	f04f 0000 	mov.w	r0, #0	; 0x0
   1c58c:	bd30      	pop	{r4, r5, pc}
   1c58e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c592:	bf1a      	itte	ne
   1c594:	4619      	movne	r1, r3
   1c596:	4610      	movne	r0, r2
   1c598:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c59c:	bf1c      	itt	ne
   1c59e:	460b      	movne	r3, r1
   1c5a0:	4602      	movne	r2, r0
   1c5a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c5a6:	bf06      	itte	eq
   1c5a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c5ac:	ea91 0f03 	teqeq	r1, r3
   1c5b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c5b4:	bd30      	pop	{r4, r5, pc}
   1c5b6:	46c0      	nop			(mov r8, r8)

0001c5b8 <__aeabi_ui2d>:
   1c5b8:	f090 0f00 	teq	r0, #0	; 0x0
   1c5bc:	bf04      	itt	eq
   1c5be:	2100      	moveq	r1, #0
   1c5c0:	4770      	bxeq	lr
   1c5c2:	b530      	push	{r4, r5, lr}
   1c5c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c5c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c5cc:	f04f 0500 	mov.w	r5, #0	; 0x0
   1c5d0:	f04f 0100 	mov.w	r1, #0	; 0x0
   1c5d4:	e750      	b.n	1c478 <__adddf3+0x138>
   1c5d6:	46c0      	nop			(mov r8, r8)

0001c5d8 <__aeabi_i2d>:
   1c5d8:	f090 0f00 	teq	r0, #0	; 0x0
   1c5dc:	bf04      	itt	eq
   1c5de:	2100      	moveq	r1, #0
   1c5e0:	4770      	bxeq	lr
   1c5e2:	b530      	push	{r4, r5, lr}
   1c5e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c5e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c5ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c5f0:	bf48      	it	mi
   1c5f2:	4240      	negmi	r0, r0
   1c5f4:	f04f 0100 	mov.w	r1, #0	; 0x0
   1c5f8:	e73e      	b.n	1c478 <__adddf3+0x138>
   1c5fa:	46c0      	nop			(mov r8, r8)

0001c5fc <__aeabi_f2d>:
   1c5fc:	0042      	lsls	r2, r0, #1
   1c5fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c602:	ea4f 0131 	mov.w	r1, r1, rrx
   1c606:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c60a:	bf1f      	itttt	ne
   1c60c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c610:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c614:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c618:	4770      	bxne	lr
   1c61a:	f092 0f00 	teq	r2, #0	; 0x0
   1c61e:	bf14      	ite	ne
   1c620:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c624:	4770      	bxeq	lr
   1c626:	b530      	push	{r4, r5, lr}
   1c628:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c62c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c634:	e720      	b.n	1c478 <__adddf3+0x138>
   1c636:	46c0      	nop			(mov r8, r8)

0001c638 <__aeabi_ul2d>:
   1c638:	ea50 0201 	orrs.w	r2, r0, r1
   1c63c:	bf08      	it	eq
   1c63e:	4770      	bxeq	lr
   1c640:	b530      	push	{r4, r5, lr}
   1c642:	f04f 0500 	mov.w	r5, #0	; 0x0
   1c646:	e00a      	b.n	1c65e <__aeabi_l2d+0x16>

0001c648 <__aeabi_l2d>:
   1c648:	ea50 0201 	orrs.w	r2, r0, r1
   1c64c:	bf08      	it	eq
   1c64e:	4770      	bxeq	lr
   1c650:	b530      	push	{r4, r5, lr}
   1c652:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c656:	d502      	bpl.n	1c65e <__aeabi_l2d+0x16>
   1c658:	4240      	negs	r0, r0
   1c65a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c65e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c662:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c666:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c66a:	f43f aedc 	beq.w	1c426 <__adddf3+0xe6>
   1c66e:	f04f 0203 	mov.w	r2, #3	; 0x3
   1c672:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c676:	bf18      	it	ne
   1c678:	3203      	addne	r2, #3
   1c67a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c67e:	bf18      	it	ne
   1c680:	3203      	addne	r2, #3
   1c682:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c686:	f1c2 0320 	rsb	r3, r2, #32	; 0x20
   1c68a:	fa00 fc03 	lsl.w	ip, r0, r3
   1c68e:	fa20 f002 	lsr.w	r0, r0, r2
   1c692:	fa01 fe03 	lsl.w	lr, r1, r3
   1c696:	ea40 000e 	orr.w	r0, r0, lr
   1c69a:	fa21 f102 	lsr.w	r1, r1, r2
   1c69e:	4414      	add	r4, r2
   1c6a0:	e6c1      	b.n	1c426 <__adddf3+0xe6>
   1c6a2:	46c0      	nop			(mov r8, r8)

0001c6a4 <__aeabi_dmul>:
   1c6a4:	b570      	push	{r4, r5, r6, lr}
   1c6a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c6aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c6ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c6b2:	bf1d      	ittte	ne
   1c6b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c6b8:	ea94 0f0c 	teqne	r4, ip
   1c6bc:	ea95 0f0c 	teqne	r5, ip
   1c6c0:	f000 f8de 	bleq	1c880 <__aeabi_dmul+0x1dc>
   1c6c4:	442c      	add	r4, r5
   1c6c6:	ea81 0603 	eor.w	r6, r1, r3
   1c6ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1c6ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1c6d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1c6d6:	bf18      	it	ne
   1c6d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1c6dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c6e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c6e4:	d038      	beq.n	1c758 <__aeabi_dmul+0xb4>
   1c6e6:	fba0 ce02 	umull	ip, lr, r0, r2
   1c6ea:	f04f 0500 	mov.w	r5, #0	; 0x0
   1c6ee:	fbe1 e502 	umlal	lr, r5, r1, r2
   1c6f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1c6f6:	fbe0 e503 	umlal	lr, r5, r0, r3
   1c6fa:	f04f 0600 	mov.w	r6, #0	; 0x0
   1c6fe:	fbe1 5603 	umlal	r5, r6, r1, r3
   1c702:	f09c 0f00 	teq	ip, #0	; 0x0
   1c706:	bf18      	it	ne
   1c708:	f04e 0e01 	orrne.w	lr, lr, #1	; 0x1
   1c70c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1c710:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1c714:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1c718:	d204      	bcs.n	1c724 <__aeabi_dmul+0x80>
   1c71a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1c71e:	416d      	adcs	r5, r5
   1c720:	eb46 0606 	adc.w	r6, r6, r6
   1c724:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1c728:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1c72c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1c730:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1c734:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1c738:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c73c:	bf88      	it	hi
   1c73e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c742:	d81e      	bhi.n	1c782 <__aeabi_dmul+0xde>
   1c744:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1c748:	bf08      	it	eq
   1c74a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1c74e:	f150 0000 	adcs.w	r0, r0, #0	; 0x0
   1c752:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c756:	bd70      	pop	{r4, r5, r6, pc}
   1c758:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1c75c:	ea46 0101 	orr.w	r1, r6, r1
   1c760:	ea40 0002 	orr.w	r0, r0, r2
   1c764:	ea81 0103 	eor.w	r1, r1, r3
   1c768:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1c76c:	bfc2      	ittt	gt
   1c76e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c772:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c776:	bd70      	popgt	{r4, r5, r6, pc}
   1c778:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c77c:	f04f 0e00 	mov.w	lr, #0	; 0x0
   1c780:	3c01      	subs	r4, #1
   1c782:	f300 80ab 	bgt.w	1c8dc <__aeabi_dmul+0x238>
   1c786:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1c78a:	bfde      	ittt	le
   1c78c:	2000      	movle	r0, #0
   1c78e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1c792:	bd70      	pople	{r4, r5, r6, pc}
   1c794:	f1c4 0400 	rsb	r4, r4, #0	; 0x0
   1c798:	3c20      	subs	r4, #32
   1c79a:	da35      	bge.n	1c808 <__aeabi_dmul+0x164>
   1c79c:	340c      	adds	r4, #12
   1c79e:	dc1b      	bgt.n	1c7d8 <__aeabi_dmul+0x134>
   1c7a0:	f104 0414 	add.w	r4, r4, #20	; 0x14
   1c7a4:	f1c4 0520 	rsb	r5, r4, #32	; 0x20
   1c7a8:	fa00 f305 	lsl.w	r3, r0, r5
   1c7ac:	fa20 f004 	lsr.w	r0, r0, r4
   1c7b0:	fa01 f205 	lsl.w	r2, r1, r5
   1c7b4:	ea40 0002 	orr.w	r0, r0, r2
   1c7b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1c7bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c7c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c7c4:	fa21 f604 	lsr.w	r6, r1, r4
   1c7c8:	eb42 0106 	adc.w	r1, r2, r6
   1c7cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c7d0:	bf08      	it	eq
   1c7d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c7d6:	bd70      	pop	{r4, r5, r6, pc}
   1c7d8:	f1c4 040c 	rsb	r4, r4, #12	; 0xc
   1c7dc:	f1c4 0520 	rsb	r5, r4, #32	; 0x20
   1c7e0:	fa00 f304 	lsl.w	r3, r0, r4
   1c7e4:	fa20 f005 	lsr.w	r0, r0, r5
   1c7e8:	fa01 f204 	lsl.w	r2, r1, r4
   1c7ec:	ea40 0002 	orr.w	r0, r0, r2
   1c7f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c7f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c7f8:	f141 0100 	adc.w	r1, r1, #0	; 0x0
   1c7fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c800:	bf08      	it	eq
   1c802:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c806:	bd70      	pop	{r4, r5, r6, pc}
   1c808:	f1c4 0520 	rsb	r5, r4, #32	; 0x20
   1c80c:	fa00 f205 	lsl.w	r2, r0, r5
   1c810:	ea4e 0e02 	orr.w	lr, lr, r2
   1c814:	fa20 f304 	lsr.w	r3, r0, r4
   1c818:	fa01 f205 	lsl.w	r2, r1, r5
   1c81c:	ea43 0302 	orr.w	r3, r3, r2
   1c820:	fa21 f004 	lsr.w	r0, r1, r4
   1c824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c828:	fa21 f204 	lsr.w	r2, r1, r4
   1c82c:	ea20 0002 	bic.w	r0, r0, r2
   1c830:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1c834:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c838:	bf08      	it	eq
   1c83a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c83e:	bd70      	pop	{r4, r5, r6, pc}
   1c840:	f094 0f00 	teq	r4, #0	; 0x0
   1c844:	d10f      	bne.n	1c866 <__aeabi_dmul+0x1c2>
   1c846:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1c84a:	0040      	lsls	r0, r0, #1
   1c84c:	eb41 0101 	adc.w	r1, r1, r1
   1c850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c854:	bf08      	it	eq
   1c856:	3c01      	subeq	r4, #1
   1c858:	d0f7      	beq.n	1c84a <__aeabi_dmul+0x1a6>
   1c85a:	ea41 0106 	orr.w	r1, r1, r6
   1c85e:	f095 0f00 	teq	r5, #0	; 0x0
   1c862:	bf18      	it	ne
   1c864:	46f7      	movne	pc, lr
   1c866:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c86a:	0052      	lsls	r2, r2, #1
   1c86c:	eb43 0303 	adc.w	r3, r3, r3
   1c870:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c874:	bf08      	it	eq
   1c876:	3d01      	subeq	r5, #1
   1c878:	d0f7      	beq.n	1c86a <__aeabi_dmul+0x1c6>
   1c87a:	ea43 0306 	orr.w	r3, r3, r6
   1c87e:	46f7      	mov	pc, lr
   1c880:	ea94 0f0c 	teq	r4, ip
   1c884:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c888:	bf18      	it	ne
   1c88a:	ea95 0f0c 	teqne	r5, ip
   1c88e:	d00c      	beq.n	1c8aa <__aeabi_dmul+0x206>
   1c890:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c894:	bf18      	it	ne
   1c896:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c89a:	d1d1      	bne.n	1c840 <__aeabi_dmul+0x19c>
   1c89c:	ea81 0103 	eor.w	r1, r1, r3
   1c8a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c8a4:	f04f 0000 	mov.w	r0, #0	; 0x0
   1c8a8:	bd70      	pop	{r4, r5, r6, pc}
   1c8aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c8ae:	bf06      	itte	eq
   1c8b0:	4610      	moveq	r0, r2
   1c8b2:	4619      	moveq	r1, r3
   1c8b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c8b8:	d019      	beq.n	1c8ee <__aeabi_dmul+0x24a>
   1c8ba:	ea94 0f0c 	teq	r4, ip
   1c8be:	d102      	bne.n	1c8c6 <__aeabi_dmul+0x222>
   1c8c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c8c4:	d113      	bne.n	1c8ee <__aeabi_dmul+0x24a>
   1c8c6:	ea95 0f0c 	teq	r5, ip
   1c8ca:	d105      	bne.n	1c8d8 <__aeabi_dmul+0x234>
   1c8cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c8d0:	bf1c      	itt	ne
   1c8d2:	4610      	movne	r0, r2
   1c8d4:	4619      	movne	r1, r3
   1c8d6:	d10a      	bne.n	1c8ee <__aeabi_dmul+0x24a>
   1c8d8:	ea81 0103 	eor.w	r1, r1, r3
   1c8dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c8e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c8e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c8e8:	f04f 0000 	mov.w	r0, #0	; 0x0
   1c8ec:	bd70      	pop	{r4, r5, r6, pc}
   1c8ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c8f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1c8f6:	bd70      	pop	{r4, r5, r6, pc}

0001c8f8 <__aeabi_ddiv>:
   1c8f8:	b570      	push	{r4, r5, r6, lr}
   1c8fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c8fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c902:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c906:	bf1d      	ittte	ne
   1c908:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c90c:	ea94 0f0c 	teqne	r4, ip
   1c910:	ea95 0f0c 	teqne	r5, ip
   1c914:	f000 f8a7 	bleq	1ca66 <__aeabi_ddiv+0x16e>
   1c918:	eba4 0405 	sub.w	r4, r4, r5
   1c91c:	ea81 0e03 	eor.w	lr, r1, r3
   1c920:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1c924:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c928:	f000 8088 	beq.w	1ca3c <__aeabi_ddiv+0x144>
   1c92c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c930:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1c934:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1c938:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1c93c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1c940:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1c944:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1c948:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1c94c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1c950:	429d      	cmp	r5, r3
   1c952:	bf08      	it	eq
   1c954:	4296      	cmpeq	r6, r2
   1c956:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1c95a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1c95e:	d202      	bcs.n	1c966 <__aeabi_ddiv+0x6e>
   1c960:	085b      	lsrs	r3, r3, #1
   1c962:	ea4f 0232 	mov.w	r2, r2, rrx
   1c966:	1ab6      	subs	r6, r6, r2
   1c968:	eb65 0503 	sbc.w	r5, r5, r3
   1c96c:	085b      	lsrs	r3, r3, #1
   1c96e:	ea4f 0232 	mov.w	r2, r2, rrx
   1c972:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1c976:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1c97a:	ebb6 0e02 	subs.w	lr, r6, r2
   1c97e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c982:	bf22      	ittt	cs
   1c984:	1ab6      	subcs	r6, r6, r2
   1c986:	4675      	movcs	r5, lr
   1c988:	ea40 000c 	orrcs.w	r0, r0, ip
   1c98c:	085b      	lsrs	r3, r3, #1
   1c98e:	ea4f 0232 	mov.w	r2, r2, rrx
   1c992:	ebb6 0e02 	subs.w	lr, r6, r2
   1c996:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c99a:	bf22      	ittt	cs
   1c99c:	1ab6      	subcs	r6, r6, r2
   1c99e:	4675      	movcs	r5, lr
   1c9a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1c9a4:	085b      	lsrs	r3, r3, #1
   1c9a6:	ea4f 0232 	mov.w	r2, r2, rrx
   1c9aa:	ebb6 0e02 	subs.w	lr, r6, r2
   1c9ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c9b2:	bf22      	ittt	cs
   1c9b4:	1ab6      	subcs	r6, r6, r2
   1c9b6:	4675      	movcs	r5, lr
   1c9b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1c9bc:	085b      	lsrs	r3, r3, #1
   1c9be:	ea4f 0232 	mov.w	r2, r2, rrx
   1c9c2:	ebb6 0e02 	subs.w	lr, r6, r2
   1c9c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c9ca:	bf22      	ittt	cs
   1c9cc:	1ab6      	subcs	r6, r6, r2
   1c9ce:	4675      	movcs	r5, lr
   1c9d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1c9d4:	ea55 0e06 	orrs.w	lr, r5, r6
   1c9d8:	d018      	beq.n	1ca0c <__aeabi_ddiv+0x114>
   1c9da:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1c9de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1c9e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1c9e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1c9ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1c9ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1c9f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1c9f6:	d1c0      	bne.n	1c97a <__aeabi_ddiv+0x82>
   1c9f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c9fc:	d10b      	bne.n	1ca16 <__aeabi_ddiv+0x11e>
   1c9fe:	ea41 0100 	orr.w	r1, r1, r0
   1ca02:	f04f 0000 	mov.w	r0, #0	; 0x0
   1ca06:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1ca0a:	e7b6      	b.n	1c97a <__aeabi_ddiv+0x82>
   1ca0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1ca10:	bf04      	itt	eq
   1ca12:	4301      	orreq	r1, r0
   1ca14:	2000      	moveq	r0, #0
   1ca16:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1ca1a:	bf88      	it	hi
   1ca1c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1ca20:	f63f aeaf 	bhi.w	1c782 <__aeabi_dmul+0xde>
   1ca24:	ebb5 0c03 	subs.w	ip, r5, r3
   1ca28:	bf04      	itt	eq
   1ca2a:	ebb6 0c02 	subseq.w	ip, r6, r2
   1ca2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1ca32:	f150 0000 	adcs.w	r0, r0, #0	; 0x0
   1ca36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1ca3a:	bd70      	pop	{r4, r5, r6, pc}
   1ca3c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1ca40:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1ca44:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1ca48:	bfc2      	ittt	gt
   1ca4a:	ebd4 050c 	rsbsgt	r5, r4, ip
   1ca4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1ca52:	bd70      	popgt	{r4, r5, r6, pc}
   1ca54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1ca58:	f04f 0e00 	mov.w	lr, #0	; 0x0
   1ca5c:	3c01      	subs	r4, #1
   1ca5e:	e690      	b.n	1c782 <__aeabi_dmul+0xde>
   1ca60:	ea45 0e06 	orr.w	lr, r5, r6
   1ca64:	e68d      	b.n	1c782 <__aeabi_dmul+0xde>
   1ca66:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1ca6a:	ea94 0f0c 	teq	r4, ip
   1ca6e:	bf08      	it	eq
   1ca70:	ea95 0f0c 	teqeq	r5, ip
   1ca74:	f43f af3b 	beq.w	1c8ee <__aeabi_dmul+0x24a>
   1ca78:	ea94 0f0c 	teq	r4, ip
   1ca7c:	d10a      	bne.n	1ca94 <__aeabi_ddiv+0x19c>
   1ca7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1ca82:	f47f af34 	bne.w	1c8ee <__aeabi_dmul+0x24a>
   1ca86:	ea95 0f0c 	teq	r5, ip
   1ca8a:	f47f af25 	bne.w	1c8d8 <__aeabi_dmul+0x234>
   1ca8e:	4610      	mov	r0, r2
   1ca90:	4619      	mov	r1, r3
   1ca92:	e72c      	b.n	1c8ee <__aeabi_dmul+0x24a>
   1ca94:	ea95 0f0c 	teq	r5, ip
   1ca98:	d106      	bne.n	1caa8 <__aeabi_ddiv+0x1b0>
   1ca9a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ca9e:	f43f aefd 	beq.w	1c89c <__aeabi_dmul+0x1f8>
   1caa2:	4610      	mov	r0, r2
   1caa4:	4619      	mov	r1, r3
   1caa6:	e722      	b.n	1c8ee <__aeabi_dmul+0x24a>
   1caa8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1caac:	bf18      	it	ne
   1caae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1cab2:	f47f aec5 	bne.w	1c840 <__aeabi_dmul+0x19c>
   1cab6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1caba:	f47f af0d 	bne.w	1c8d8 <__aeabi_dmul+0x234>
   1cabe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1cac2:	f47f aeeb 	bne.w	1c89c <__aeabi_dmul+0x1f8>
   1cac6:	e712      	b.n	1c8ee <__aeabi_dmul+0x24a>

0001cac8 <__gedf2>:
   1cac8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1cacc:	e006      	b.n	1cadc <__cmpdf2+0x4>
   1cace:	46c0      	nop			(mov r8, r8)

0001cad0 <__ledf2>:
   1cad0:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1cad4:	e002      	b.n	1cadc <__cmpdf2+0x4>
   1cad6:	46c0      	nop			(mov r8, r8)

0001cad8 <__cmpdf2>:
   1cad8:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1cadc:	f84d cc04 	str.w	ip, [sp, #-4]
   1cae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1caec:	bf18      	it	ne
   1caee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1caf2:	d01a      	beq.n	1cb2a <__cmpdf2+0x52>
   1caf4:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1caf8:	bf0c      	ite	eq
   1cafa:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1cafe:	ea91 0f03 	teqne	r1, r3
   1cb02:	bf02      	ittt	eq
   1cb04:	ea90 0f02 	teqeq	r0, r2
   1cb08:	2000      	moveq	r0, #0
   1cb0a:	4770      	bxeq	lr
   1cb0c:	f110 0f00 	cmn.w	r0, #0	; 0x0
   1cb10:	ea91 0f03 	teq	r1, r3
   1cb14:	bf58      	it	pl
   1cb16:	4299      	cmppl	r1, r3
   1cb18:	bf08      	it	eq
   1cb1a:	4290      	cmpeq	r0, r2
   1cb1c:	bf2c      	ite	cs
   1cb1e:	17d8      	asrcs	r0, r3, #31
   1cb20:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cb24:	f040 0001 	orr.w	r0, r0, #1	; 0x1
   1cb28:	4770      	bx	lr
   1cb2a:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cb2e:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cb32:	d102      	bne.n	1cb3a <__cmpdf2+0x62>
   1cb34:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cb38:	d107      	bne.n	1cb4a <__cmpdf2+0x72>
   1cb3a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cb3e:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cb42:	d1d7      	bne.n	1caf4 <__cmpdf2+0x1c>
   1cb44:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cb48:	d0d4      	beq.n	1caf4 <__cmpdf2+0x1c>
   1cb4a:	f85d 0c04 	ldr.w	r0, [sp, #-4]
   1cb4e:	4770      	bx	lr

0001cb50 <__aeabi_cdrcmple>:
   1cb50:	4684      	mov	ip, r0
   1cb52:	4610      	mov	r0, r2
   1cb54:	4662      	mov	r2, ip
   1cb56:	468c      	mov	ip, r1
   1cb58:	4619      	mov	r1, r3
   1cb5a:	4663      	mov	r3, ip
   1cb5c:	e000      	b.n	1cb60 <__aeabi_cdcmpeq>
   1cb5e:	46c0      	nop			(mov r8, r8)

0001cb60 <__aeabi_cdcmpeq>:
   1cb60:	b501      	push	{r0, lr}
   1cb62:	f7ff ffb9 	bl	1cad8 <__cmpdf2>
   1cb66:	2800      	cmp	r0, #0
   1cb68:	bf48      	it	mi
   1cb6a:	f110 0f00 	cmnmi.w	r0, #0	; 0x0
   1cb6e:	bd01      	pop	{r0, pc}

0001cb70 <__aeabi_dcmpeq>:
   1cb70:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cb74:	f7ff fff4 	bl	1cb60 <__aeabi_cdcmpeq>
   1cb78:	bf0c      	ite	eq
   1cb7a:	2001      	moveq	r0, #1
   1cb7c:	2000      	movne	r0, #0
   1cb7e:	f85d fb08 	ldr.w	pc, [sp], #8
   1cb82:	46c0      	nop			(mov r8, r8)

0001cb84 <__aeabi_dcmplt>:
   1cb84:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cb88:	f7ff ffea 	bl	1cb60 <__aeabi_cdcmpeq>
   1cb8c:	bf34      	ite	cc
   1cb8e:	2001      	movcc	r0, #1
   1cb90:	2000      	movcs	r0, #0
   1cb92:	f85d fb08 	ldr.w	pc, [sp], #8
   1cb96:	46c0      	nop			(mov r8, r8)

0001cb98 <__aeabi_dcmple>:
   1cb98:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cb9c:	f7ff ffe0 	bl	1cb60 <__aeabi_cdcmpeq>
   1cba0:	bf94      	ite	ls
   1cba2:	2001      	movls	r0, #1
   1cba4:	2000      	movhi	r0, #0
   1cba6:	f85d fb08 	ldr.w	pc, [sp], #8
   1cbaa:	46c0      	nop			(mov r8, r8)

0001cbac <__aeabi_dcmpge>:
   1cbac:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cbb0:	f7ff ffce 	bl	1cb50 <__aeabi_cdrcmple>
   1cbb4:	bf94      	ite	ls
   1cbb6:	2001      	movls	r0, #1
   1cbb8:	2000      	movhi	r0, #0
   1cbba:	f85d fb08 	ldr.w	pc, [sp], #8
   1cbbe:	46c0      	nop			(mov r8, r8)

0001cbc0 <__aeabi_dcmpgt>:
   1cbc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cbc4:	f7ff ffc4 	bl	1cb50 <__aeabi_cdrcmple>
   1cbc8:	bf34      	ite	cc
   1cbca:	2001      	movcc	r0, #1
   1cbcc:	2000      	movcs	r0, #0
   1cbce:	f85d fb08 	ldr.w	pc, [sp], #8
   1cbd2:	46c0      	nop			(mov r8, r8)

0001cbd4 <__aeabi_d2iz>:
   1cbd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cbd8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cbdc:	d215      	bcs.n	1cc0a <__aeabi_d2iz+0x36>
   1cbde:	d511      	bpl.n	1cc04 <__aeabi_d2iz+0x30>
   1cbe0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cbe4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cbe8:	d912      	bls.n	1cc10 <__aeabi_d2iz+0x3c>
   1cbea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cbee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cbf2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cbf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1cbfa:	fa23 f002 	lsr.w	r0, r3, r2
   1cbfe:	bf18      	it	ne
   1cc00:	4240      	negne	r0, r0
   1cc02:	4770      	bx	lr
   1cc04:	f04f 0000 	mov.w	r0, #0	; 0x0
   1cc08:	4770      	bx	lr
   1cc0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cc0e:	d105      	bne.n	1cc1c <__aeabi_d2iz+0x48>
   1cc10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1cc14:	bf08      	it	eq
   1cc16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1cc1a:	4770      	bx	lr
   1cc1c:	f04f 0000 	mov.w	r0, #0	; 0x0
   1cc20:	4770      	bx	lr
   1cc22:	46c0      	nop			(mov r8, r8)

0001cc24 <__aeabi_d2f>:
   1cc24:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cc28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1cc2c:	bf24      	itt	cs
   1cc2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1cc32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1cc36:	d90d      	bls.n	1cc54 <__aeabi_d2f+0x30>
   1cc38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1cc3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1cc40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1cc44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1cc48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1cc4c:	bf08      	it	eq
   1cc4e:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1cc52:	4770      	bx	lr
   1cc54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1cc58:	d121      	bne.n	1cc9e <__aeabi_d2f+0x7a>
   1cc5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1cc5e:	bfbc      	itt	lt
   1cc60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1cc64:	4770      	bxlt	lr
   1cc66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cc6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1cc6e:	f1c2 0218 	rsb	r2, r2, #24	; 0x18
   1cc72:	f1c2 0c20 	rsb	ip, r2, #32	; 0x20
   1cc76:	fa10 f30c 	lsls.w	r3, r0, ip
   1cc7a:	fa20 f002 	lsr.w	r0, r0, r2
   1cc7e:	bf18      	it	ne
   1cc80:	f040 0001 	orrne.w	r0, r0, #1	; 0x1
   1cc84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cc88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1cc8c:	fa03 fc0c 	lsl.w	ip, r3, ip
   1cc90:	ea40 000c 	orr.w	r0, r0, ip
   1cc94:	fa23 f302 	lsr.w	r3, r3, r2
   1cc98:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1cc9c:	e7cc      	b.n	1cc38 <__aeabi_d2f+0x14>
   1cc9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1cca2:	d107      	bne.n	1ccb4 <__aeabi_d2f+0x90>
   1cca4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1cca8:	bf1e      	ittt	ne
   1ccaa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1ccae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1ccb2:	4770      	bxne	lr
   1ccb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1ccb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1ccbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ccc0:	4770      	bx	lr
   1ccc2:	46c0      	nop			(mov r8, r8)

0001ccc4 <__aeabi_frsub>:
   1ccc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1ccc8:	e002      	b.n	1ccd0 <__addsf3>
   1ccca:	46c0      	nop			(mov r8, r8)

0001cccc <__aeabi_fsub>:
   1cccc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001ccd0 <__addsf3>:
   1ccd0:	0042      	lsls	r2, r0, #1
   1ccd2:	bf1f      	itttt	ne
   1ccd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1ccd8:	ea92 0f03 	teqne	r2, r3
   1ccdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1cce0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1cce4:	d06a      	beq.n	1cdbc <__addsf3+0xec>
   1cce6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1ccea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1ccee:	bfc1      	itttt	gt
   1ccf0:	18d2      	addgt	r2, r2, r3
   1ccf2:	4041      	eorgt	r1, r0
   1ccf4:	4048      	eorgt	r0, r1
   1ccf6:	4041      	eorgt	r1, r0
   1ccf8:	bfb8      	it	lt
   1ccfa:	425b      	neglt	r3, r3
   1ccfc:	2b19      	cmp	r3, #25
   1ccfe:	bf88      	it	hi
   1cd00:	4770      	bxhi	lr
   1cd02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1cd06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1cd0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1cd0e:	bf18      	it	ne
   1cd10:	4240      	negne	r0, r0
   1cd12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1cd16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1cd1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1cd1e:	bf18      	it	ne
   1cd20:	4249      	negne	r1, r1
   1cd22:	ea92 0f03 	teq	r2, r3
   1cd26:	d03f      	beq.n	1cda8 <__addsf3+0xd8>
   1cd28:	f1a2 0201 	sub.w	r2, r2, #1	; 0x1
   1cd2c:	fa41 fc03 	asr.w	ip, r1, r3
   1cd30:	eb10 000c 	adds.w	r0, r0, ip
   1cd34:	f1c3 0320 	rsb	r3, r3, #32	; 0x20
   1cd38:	fa01 f103 	lsl.w	r1, r1, r3
   1cd3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1cd40:	d502      	bpl.n	1cd48 <__addsf3+0x78>
   1cd42:	4249      	negs	r1, r1
   1cd44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1cd48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1cd4c:	d313      	bcc.n	1cd76 <__addsf3+0xa6>
   1cd4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1cd52:	d306      	bcc.n	1cd62 <__addsf3+0x92>
   1cd54:	0840      	lsrs	r0, r0, #1
   1cd56:	ea4f 0131 	mov.w	r1, r1, rrx
   1cd5a:	f102 0201 	add.w	r2, r2, #1	; 0x1
   1cd5e:	2afe      	cmp	r2, #254
   1cd60:	d251      	bcs.n	1ce06 <__addsf3+0x136>
   1cd62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1cd66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1cd6a:	bf08      	it	eq
   1cd6c:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1cd70:	ea40 0003 	orr.w	r0, r0, r3
   1cd74:	4770      	bx	lr
   1cd76:	0049      	lsls	r1, r1, #1
   1cd78:	eb40 0000 	adc.w	r0, r0, r0
   1cd7c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1cd80:	f1a2 0201 	sub.w	r2, r2, #1	; 0x1
   1cd84:	d1ed      	bne.n	1cd62 <__addsf3+0x92>
   1cd86:	fab0 fc80 	clz	ip, r0
   1cd8a:	f1ac 0c08 	sub.w	ip, ip, #8	; 0x8
   1cd8e:	ebb2 020c 	subs.w	r2, r2, ip
   1cd92:	fa00 f00c 	lsl.w	r0, r0, ip
   1cd96:	bfaa      	itet	ge
   1cd98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1cd9c:	4252      	neglt	r2, r2
   1cd9e:	4318      	orrge	r0, r3
   1cda0:	bfbc      	itt	lt
   1cda2:	40d0      	lsrlt	r0, r2
   1cda4:	4318      	orrlt	r0, r3
   1cda6:	4770      	bx	lr
   1cda8:	f092 0f00 	teq	r2, #0	; 0x0
   1cdac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1cdb0:	bf06      	itte	eq
   1cdb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1cdb6:	3201      	addeq	r2, #1
   1cdb8:	3b01      	subne	r3, #1
   1cdba:	e7b5      	b.n	1cd28 <__addsf3+0x58>
   1cdbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1cdc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1cdc4:	bf18      	it	ne
   1cdc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1cdca:	d021      	beq.n	1ce10 <__addsf3+0x140>
   1cdcc:	ea92 0f03 	teq	r2, r3
   1cdd0:	d004      	beq.n	1cddc <__addsf3+0x10c>
   1cdd2:	f092 0f00 	teq	r2, #0	; 0x0
   1cdd6:	bf08      	it	eq
   1cdd8:	4608      	moveq	r0, r1
   1cdda:	4770      	bx	lr
   1cddc:	ea90 0f01 	teq	r0, r1
   1cde0:	bf1c      	itt	ne
   1cde2:	2000      	movne	r0, #0
   1cde4:	4770      	bxne	lr
   1cde6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1cdea:	d104      	bne.n	1cdf6 <__addsf3+0x126>
   1cdec:	0040      	lsls	r0, r0, #1
   1cdee:	bf28      	it	cs
   1cdf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1cdf4:	4770      	bx	lr
   1cdf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1cdfa:	bf3c      	itt	cc
   1cdfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1ce00:	4770      	bxcc	lr
   1ce02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1ce06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1ce0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ce0e:	4770      	bx	lr
   1ce10:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1ce14:	bf16      	itet	ne
   1ce16:	4608      	movne	r0, r1
   1ce18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1ce1c:	4601      	movne	r1, r0
   1ce1e:	0242      	lsls	r2, r0, #9
   1ce20:	bf06      	itte	eq
   1ce22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1ce26:	ea90 0f01 	teqeq	r0, r1
   1ce2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1ce2e:	4770      	bx	lr

0001ce30 <__aeabi_ui2f>:
   1ce30:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ce34:	e004      	b.n	1ce40 <__aeabi_i2f+0x8>
   1ce36:	46c0      	nop			(mov r8, r8)

0001ce38 <__aeabi_i2f>:
   1ce38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1ce3c:	bf48      	it	mi
   1ce3e:	4240      	negmi	r0, r0
   1ce40:	ea5f 0c00 	movs.w	ip, r0
   1ce44:	bf08      	it	eq
   1ce46:	4770      	bxeq	lr
   1ce48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1ce4c:	4601      	mov	r1, r0
   1ce4e:	f04f 0000 	mov.w	r0, #0	; 0x0
   1ce52:	e01c      	b.n	1ce8e <__aeabi_l2f+0x2a>

0001ce54 <__aeabi_ul2f>:
   1ce54:	ea50 0201 	orrs.w	r2, r0, r1
   1ce58:	bf08      	it	eq
   1ce5a:	4770      	bxeq	lr
   1ce5c:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ce60:	e00a      	b.n	1ce78 <__aeabi_l2f+0x14>
   1ce62:	46c0      	nop			(mov r8, r8)

0001ce64 <__aeabi_l2f>:
   1ce64:	ea50 0201 	orrs.w	r2, r0, r1
   1ce68:	bf08      	it	eq
   1ce6a:	4770      	bxeq	lr
   1ce6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1ce70:	d502      	bpl.n	1ce78 <__aeabi_l2f+0x14>
   1ce72:	4240      	negs	r0, r0
   1ce74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce78:	ea5f 0c01 	movs.w	ip, r1
   1ce7c:	bf02      	ittt	eq
   1ce7e:	4684      	moveq	ip, r0
   1ce80:	4601      	moveq	r1, r0
   1ce82:	2000      	moveq	r0, #0
   1ce84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1ce88:	bf08      	it	eq
   1ce8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1ce8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1ce92:	fabc f28c 	clz	r2, ip
   1ce96:	3a08      	subs	r2, #8
   1ce98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1ce9c:	db10      	blt.n	1cec0 <__aeabi_l2f+0x5c>
   1ce9e:	fa01 fc02 	lsl.w	ip, r1, r2
   1cea2:	4463      	add	r3, ip
   1cea4:	fa00 fc02 	lsl.w	ip, r0, r2
   1cea8:	f1c2 0220 	rsb	r2, r2, #32	; 0x20
   1ceac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1ceb0:	fa20 f202 	lsr.w	r2, r0, r2
   1ceb4:	eb43 0002 	adc.w	r0, r3, r2
   1ceb8:	bf08      	it	eq
   1ceba:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1cebe:	4770      	bx	lr
   1cec0:	f102 0220 	add.w	r2, r2, #32	; 0x20
   1cec4:	fa01 fc02 	lsl.w	ip, r1, r2
   1cec8:	f1c2 0220 	rsb	r2, r2, #32	; 0x20
   1cecc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1ced0:	fa21 f202 	lsr.w	r2, r1, r2
   1ced4:	eb43 0002 	adc.w	r0, r3, r2
   1ced8:	bf08      	it	eq
   1ceda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1cede:	4770      	bx	lr

0001cee0 <__aeabi_fmul>:
   1cee0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1cee4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1cee8:	bf1e      	ittt	ne
   1ceea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1ceee:	ea92 0f0c 	teqne	r2, ip
   1cef2:	ea93 0f0c 	teqne	r3, ip
   1cef6:	d06f      	beq.n	1cfd8 <__aeabi_fmul+0xf8>
   1cef8:	441a      	add	r2, r3
   1cefa:	ea80 0c01 	eor.w	ip, r0, r1
   1cefe:	0240      	lsls	r0, r0, #9
   1cf00:	bf18      	it	ne
   1cf02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1cf06:	d01e      	beq.n	1cf46 <__aeabi_fmul+0x66>
   1cf08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1cf0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1cf10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1cf14:	fba0 3101 	umull	r3, r1, r0, r1
   1cf18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1cf1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1cf20:	bf3e      	ittt	cc
   1cf22:	0049      	lslcc	r1, r1, #1
   1cf24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1cf28:	005b      	lslcc	r3, r3, #1
   1cf2a:	ea40 0001 	orr.w	r0, r0, r1
   1cf2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1cf32:	2afd      	cmp	r2, #253
   1cf34:	d81d      	bhi.n	1cf72 <__aeabi_fmul+0x92>
   1cf36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1cf3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1cf3e:	bf08      	it	eq
   1cf40:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1cf44:	4770      	bx	lr
   1cf46:	f090 0f00 	teq	r0, #0	; 0x0
   1cf4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1cf4e:	bf08      	it	eq
   1cf50:	0249      	lsleq	r1, r1, #9
   1cf52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1cf56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1cf5a:	3a7f      	subs	r2, #127
   1cf5c:	bfc2      	ittt	gt
   1cf5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1cf62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1cf66:	4770      	bxgt	lr
   1cf68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1cf6c:	f04f 0300 	mov.w	r3, #0	; 0x0
   1cf70:	3a01      	subs	r2, #1
   1cf72:	dc5d      	bgt.n	1d030 <__aeabi_fmul+0x150>
   1cf74:	f112 0f19 	cmn.w	r2, #25	; 0x19
   1cf78:	bfdc      	itt	le
   1cf7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1cf7e:	4770      	bxle	lr
   1cf80:	f1c2 0200 	rsb	r2, r2, #0	; 0x0
   1cf84:	0041      	lsls	r1, r0, #1
   1cf86:	fa21 f102 	lsr.w	r1, r1, r2
   1cf8a:	f1c2 0220 	rsb	r2, r2, #32	; 0x20
   1cf8e:	fa00 fc02 	lsl.w	ip, r0, r2
   1cf92:	ea5f 0031 	movs.w	r0, r1, rrx
   1cf96:	f140 0000 	adc.w	r0, r0, #0	; 0x0
   1cf9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1cf9e:	bf08      	it	eq
   1cfa0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1cfa4:	4770      	bx	lr
   1cfa6:	f092 0f00 	teq	r2, #0	; 0x0
   1cfaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1cfae:	bf02      	ittt	eq
   1cfb0:	0040      	lsleq	r0, r0, #1
   1cfb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1cfb6:	3a01      	subeq	r2, #1
   1cfb8:	d0f9      	beq.n	1cfae <__aeabi_fmul+0xce>
   1cfba:	ea40 000c 	orr.w	r0, r0, ip
   1cfbe:	f093 0f00 	teq	r3, #0	; 0x0
   1cfc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1cfc6:	bf02      	ittt	eq
   1cfc8:	0049      	lsleq	r1, r1, #1
   1cfca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1cfce:	3b01      	subeq	r3, #1
   1cfd0:	d0f9      	beq.n	1cfc6 <__aeabi_fmul+0xe6>
   1cfd2:	ea41 010c 	orr.w	r1, r1, ip
   1cfd6:	e78f      	b.n	1cef8 <__aeabi_fmul+0x18>
   1cfd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1cfdc:	ea92 0f0c 	teq	r2, ip
   1cfe0:	bf18      	it	ne
   1cfe2:	ea93 0f0c 	teqne	r3, ip
   1cfe6:	d00a      	beq.n	1cffe <__aeabi_fmul+0x11e>
   1cfe8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1cfec:	bf18      	it	ne
   1cfee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1cff2:	d1d8      	bne.n	1cfa6 <__aeabi_fmul+0xc6>
   1cff4:	ea80 0001 	eor.w	r0, r0, r1
   1cff8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1cffc:	4770      	bx	lr
   1cffe:	f090 0f00 	teq	r0, #0	; 0x0
   1d002:	bf17      	itett	ne
   1d004:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1d008:	4608      	moveq	r0, r1
   1d00a:	f091 0f00 	teqne	r1, #0	; 0x0
   1d00e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1d012:	d014      	beq.n	1d03e <__aeabi_fmul+0x15e>
   1d014:	ea92 0f0c 	teq	r2, ip
   1d018:	d101      	bne.n	1d01e <__aeabi_fmul+0x13e>
   1d01a:	0242      	lsls	r2, r0, #9
   1d01c:	d10f      	bne.n	1d03e <__aeabi_fmul+0x15e>
   1d01e:	ea93 0f0c 	teq	r3, ip
   1d022:	d103      	bne.n	1d02c <__aeabi_fmul+0x14c>
   1d024:	024b      	lsls	r3, r1, #9
   1d026:	bf18      	it	ne
   1d028:	4608      	movne	r0, r1
   1d02a:	d108      	bne.n	1d03e <__aeabi_fmul+0x15e>
   1d02c:	ea80 0001 	eor.w	r0, r0, r1
   1d030:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1d034:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1d038:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1d03c:	4770      	bx	lr
   1d03e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1d042:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1d046:	4770      	bx	lr

0001d048 <__aeabi_fdiv>:
   1d048:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1d04c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1d050:	bf1e      	ittt	ne
   1d052:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1d056:	ea92 0f0c 	teqne	r2, ip
   1d05a:	ea93 0f0c 	teqne	r3, ip
   1d05e:	d069      	beq.n	1d134 <__aeabi_fdiv+0xec>
   1d060:	eba2 0203 	sub.w	r2, r2, r3
   1d064:	ea80 0c01 	eor.w	ip, r0, r1
   1d068:	0249      	lsls	r1, r1, #9
   1d06a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1d06e:	d037      	beq.n	1d0e0 <__aeabi_fdiv+0x98>
   1d070:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d074:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1d078:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1d07c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1d080:	428b      	cmp	r3, r1
   1d082:	bf38      	it	cc
   1d084:	005b      	lslcc	r3, r3, #1
   1d086:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1d08a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1d08e:	428b      	cmp	r3, r1
   1d090:	bf24      	itt	cs
   1d092:	1a5b      	subcs	r3, r3, r1
   1d094:	ea40 000c 	orrcs.w	r0, r0, ip
   1d098:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1d09c:	bf24      	itt	cs
   1d09e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1d0a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1d0a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1d0aa:	bf24      	itt	cs
   1d0ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1d0b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1d0b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1d0b8:	bf24      	itt	cs
   1d0ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1d0be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1d0c2:	011b      	lsls	r3, r3, #4
   1d0c4:	bf18      	it	ne
   1d0c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1d0ca:	d1e0      	bne.n	1d08e <__aeabi_fdiv+0x46>
   1d0cc:	2afd      	cmp	r2, #253
   1d0ce:	f63f af50 	bhi.w	1cf72 <__aeabi_fmul+0x92>
   1d0d2:	428b      	cmp	r3, r1
   1d0d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1d0d8:	bf08      	it	eq
   1d0da:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1d0de:	4770      	bx	lr
   1d0e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1d0e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1d0e8:	327f      	adds	r2, #127
   1d0ea:	bfc2      	ittt	gt
   1d0ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1d0f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1d0f4:	4770      	bxgt	lr
   1d0f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1d0fa:	f04f 0300 	mov.w	r3, #0	; 0x0
   1d0fe:	3a01      	subs	r2, #1
   1d100:	e737      	b.n	1cf72 <__aeabi_fmul+0x92>
   1d102:	f092 0f00 	teq	r2, #0	; 0x0
   1d106:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1d10a:	bf02      	ittt	eq
   1d10c:	0040      	lsleq	r0, r0, #1
   1d10e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1d112:	3a01      	subeq	r2, #1
   1d114:	d0f9      	beq.n	1d10a <__aeabi_fdiv+0xc2>
   1d116:	ea40 000c 	orr.w	r0, r0, ip
   1d11a:	f093 0f00 	teq	r3, #0	; 0x0
   1d11e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1d122:	bf02      	ittt	eq
   1d124:	0049      	lsleq	r1, r1, #1
   1d126:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1d12a:	3b01      	subeq	r3, #1
   1d12c:	d0f9      	beq.n	1d122 <__aeabi_fdiv+0xda>
   1d12e:	ea41 010c 	orr.w	r1, r1, ip
   1d132:	e795      	b.n	1d060 <__aeabi_fdiv+0x18>
   1d134:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1d138:	ea92 0f0c 	teq	r2, ip
   1d13c:	d108      	bne.n	1d150 <__aeabi_fdiv+0x108>
   1d13e:	0242      	lsls	r2, r0, #9
   1d140:	f47f af7d 	bne.w	1d03e <__aeabi_fmul+0x15e>
   1d144:	ea93 0f0c 	teq	r3, ip
   1d148:	f47f af70 	bne.w	1d02c <__aeabi_fmul+0x14c>
   1d14c:	4608      	mov	r0, r1
   1d14e:	e776      	b.n	1d03e <__aeabi_fmul+0x15e>
   1d150:	ea93 0f0c 	teq	r3, ip
   1d154:	d104      	bne.n	1d160 <__aeabi_fdiv+0x118>
   1d156:	024b      	lsls	r3, r1, #9
   1d158:	f43f af4c 	beq.w	1cff4 <__aeabi_fmul+0x114>
   1d15c:	4608      	mov	r0, r1
   1d15e:	e76e      	b.n	1d03e <__aeabi_fmul+0x15e>
   1d160:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1d164:	bf18      	it	ne
   1d166:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1d16a:	d1ca      	bne.n	1d102 <__aeabi_fdiv+0xba>
   1d16c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1d170:	f47f af5c 	bne.w	1d02c <__aeabi_fmul+0x14c>
   1d174:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1d178:	f47f af3c 	bne.w	1cff4 <__aeabi_fmul+0x114>
   1d17c:	e75f      	b.n	1d03e <__aeabi_fmul+0x15e>
   1d17e:	46c0      	nop			(mov r8, r8)

0001d180 <__gesf2>:
   1d180:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1d184:	e006      	b.n	1d194 <__cmpsf2+0x4>
   1d186:	46c0      	nop			(mov r8, r8)

0001d188 <__lesf2>:
   1d188:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1d18c:	e002      	b.n	1d194 <__cmpsf2+0x4>
   1d18e:	46c0      	nop			(mov r8, r8)

0001d190 <__cmpsf2>:
   1d190:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1d194:	f84d cc04 	str.w	ip, [sp, #-4]
   1d198:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1d19c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1d1a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1d1a4:	bf18      	it	ne
   1d1a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1d1aa:	d010      	beq.n	1d1ce <__cmpsf2+0x3e>
   1d1ac:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1d1b0:	bf18      	it	ne
   1d1b2:	ea90 0f01 	teqne	r0, r1
   1d1b6:	bf58      	it	pl
   1d1b8:	ebb2 0003 	subspl.w	r0, r2, r3
   1d1bc:	bf88      	it	hi
   1d1be:	17c8      	asrhi	r0, r1, #31
   1d1c0:	bf38      	it	cc
   1d1c2:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   1d1c6:	bf18      	it	ne
   1d1c8:	f040 0001 	orrne.w	r0, r0, #1	; 0x1
   1d1cc:	4770      	bx	lr
   1d1ce:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1d1d2:	d102      	bne.n	1d1da <__cmpsf2+0x4a>
   1d1d4:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1d1d8:	d105      	bne.n	1d1e6 <__cmpsf2+0x56>
   1d1da:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   1d1de:	d1e5      	bne.n	1d1ac <__cmpsf2+0x1c>
   1d1e0:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1d1e4:	d0e2      	beq.n	1d1ac <__cmpsf2+0x1c>
   1d1e6:	f85d 0c04 	ldr.w	r0, [sp, #-4]
   1d1ea:	4770      	bx	lr

0001d1ec <__aeabi_cfrcmple>:
   1d1ec:	4684      	mov	ip, r0
   1d1ee:	4608      	mov	r0, r1
   1d1f0:	4661      	mov	r1, ip
   1d1f2:	e7ff      	b.n	1d1f4 <__aeabi_cfcmpeq>

0001d1f4 <__aeabi_cfcmpeq>:
   1d1f4:	b50f      	push	{r0, r1, r2, r3, lr}
   1d1f6:	f7ff ffcb 	bl	1d190 <__cmpsf2>
   1d1fa:	2800      	cmp	r0, #0
   1d1fc:	bf48      	it	mi
   1d1fe:	f110 0f00 	cmnmi.w	r0, #0	; 0x0
   1d202:	bd0f      	pop	{r0, r1, r2, r3, pc}

0001d204 <__aeabi_fcmpeq>:
   1d204:	f84d ed08 	str.w	lr, [sp, #-8]!
   1d208:	f7ff fff4 	bl	1d1f4 <__aeabi_cfcmpeq>
   1d20c:	bf0c      	ite	eq
   1d20e:	2001      	moveq	r0, #1
   1d210:	2000      	movne	r0, #0
   1d212:	f85d fb08 	ldr.w	pc, [sp], #8
   1d216:	46c0      	nop			(mov r8, r8)

0001d218 <__aeabi_fcmplt>:
   1d218:	f84d ed08 	str.w	lr, [sp, #-8]!
   1d21c:	f7ff ffea 	bl	1d1f4 <__aeabi_cfcmpeq>
   1d220:	bf34      	ite	cc
   1d222:	2001      	movcc	r0, #1
   1d224:	2000      	movcs	r0, #0
   1d226:	f85d fb08 	ldr.w	pc, [sp], #8
   1d22a:	46c0      	nop			(mov r8, r8)

0001d22c <__aeabi_fcmple>:
   1d22c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1d230:	f7ff ffe0 	bl	1d1f4 <__aeabi_cfcmpeq>
   1d234:	bf94      	ite	ls
   1d236:	2001      	movls	r0, #1
   1d238:	2000      	movhi	r0, #0
   1d23a:	f85d fb08 	ldr.w	pc, [sp], #8
   1d23e:	46c0      	nop			(mov r8, r8)

0001d240 <__aeabi_fcmpge>:
   1d240:	f84d ed08 	str.w	lr, [sp, #-8]!
   1d244:	f7ff ffd2 	bl	1d1ec <__aeabi_cfrcmple>
   1d248:	bf94      	ite	ls
   1d24a:	2001      	movls	r0, #1
   1d24c:	2000      	movhi	r0, #0
   1d24e:	f85d fb08 	ldr.w	pc, [sp], #8
   1d252:	46c0      	nop			(mov r8, r8)

0001d254 <__aeabi_fcmpgt>:
   1d254:	f84d ed08 	str.w	lr, [sp, #-8]!
   1d258:	f7ff ffc8 	bl	1d1ec <__aeabi_cfrcmple>
   1d25c:	bf34      	ite	cc
   1d25e:	2001      	movcc	r0, #1
   1d260:	2000      	movcs	r0, #0
   1d262:	f85d fb08 	ldr.w	pc, [sp], #8
   1d266:	46c0      	nop			(mov r8, r8)

0001d268 <__aeabi_f2iz>:
   1d268:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1d26c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1d270:	d30f      	bcc.n	1d292 <__aeabi_f2iz+0x2a>
   1d272:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1d276:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1d27a:	d90d      	bls.n	1d298 <__aeabi_f2iz+0x30>
   1d27c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1d280:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d284:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1d288:	fa23 f002 	lsr.w	r0, r3, r2
   1d28c:	bf18      	it	ne
   1d28e:	4240      	negne	r0, r0
   1d290:	4770      	bx	lr
   1d292:	f04f 0000 	mov.w	r0, #0	; 0x0
   1d296:	4770      	bx	lr
   1d298:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1d29c:	d101      	bne.n	1d2a2 <__aeabi_f2iz+0x3a>
   1d29e:	0242      	lsls	r2, r0, #9
   1d2a0:	d105      	bne.n	1d2ae <__aeabi_f2iz+0x46>
   1d2a2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   1d2a6:	bf08      	it	eq
   1d2a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1d2ac:	4770      	bx	lr
   1d2ae:	f04f 0000 	mov.w	r0, #0	; 0x0
   1d2b2:	4770      	bx	lr

0001d2b4 <__aeabi_f2uiz>:
   1d2b4:	0042      	lsls	r2, r0, #1
   1d2b6:	d20e      	bcs.n	1d2d6 <__aeabi_f2uiz+0x22>
   1d2b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1d2bc:	d30b      	bcc.n	1d2d6 <__aeabi_f2uiz+0x22>
   1d2be:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1d2c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1d2c6:	d409      	bmi.n	1d2dc <__aeabi_f2uiz+0x28>
   1d2c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1d2cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d2d0:	fa23 f002 	lsr.w	r0, r3, r2
   1d2d4:	4770      	bx	lr
   1d2d6:	f04f 0000 	mov.w	r0, #0	; 0x0
   1d2da:	4770      	bx	lr
   1d2dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1d2e0:	d101      	bne.n	1d2e6 <__aeabi_f2uiz+0x32>
   1d2e2:	0242      	lsls	r2, r0, #9
   1d2e4:	d102      	bne.n	1d2ec <__aeabi_f2uiz+0x38>
   1d2e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d2ea:	4770      	bx	lr
   1d2ec:	f04f 0000 	mov.w	r0, #0	; 0x0
   1d2f0:	4770      	bx	lr
   1d2f2:	46c0      	nop			(mov r8, r8)

0001d2f4 <_Unwind_decode_target2>:
   1d2f4:	4603      	mov	r3, r0
   1d2f6:	6800      	ldr	r0, [r0, #0]
   1d2f8:	b100      	cbz	r0, 1d2fc <_Unwind_decode_target2+0x8>
   1d2fa:	18c0      	adds	r0, r0, r3
   1d2fc:	4770      	bx	lr
   1d2fe:	46c0      	nop			(mov r8, r8)

0001d300 <_Unwind_VRS_Get>:
   1d300:	b410      	push	{r4}
   1d302:	469c      	mov	ip, r3
   1d304:	4604      	mov	r4, r0
   1d306:	b969      	cbnz	r1, 1d324 <_Unwind_VRS_Get+0x24>
   1d308:	2a0f      	cmp	r2, #15
   1d30a:	bf94      	ite	ls
   1d30c:	2300      	movls	r3, #0
   1d30e:	2301      	movhi	r3, #1
   1d310:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   1d314:	bf0c      	ite	eq
   1d316:	4618      	moveq	r0, r3
   1d318:	f043 0001 	orrne.w	r0, r3, #1	; 0x1
   1d31c:	b130      	cbz	r0, 1d32c <_Unwind_VRS_Get+0x2c>
   1d31e:	2002      	movs	r0, #2
   1d320:	bc10      	pop	{r4}
   1d322:	4770      	bx	lr
   1d324:	2904      	cmp	r1, #4
   1d326:	d8fa      	bhi.n	1d31e <_Unwind_VRS_Get+0x1e>
   1d328:	2001      	movs	r0, #1
   1d32a:	e7f9      	b.n	1d320 <_Unwind_VRS_Get+0x20>
   1d32c:	0093      	lsls	r3, r2, #2
   1d32e:	4423      	add	r3, r4
   1d330:	685a      	ldr	r2, [r3, #4]
   1d332:	9b01      	ldr	r3, [sp, #4]
   1d334:	601a      	str	r2, [r3, #0]
   1d336:	e7f3      	b.n	1d320 <_Unwind_VRS_Get+0x20>

0001d338 <_Unwind_GetGR>:
   1d338:	b500      	push	{lr}
   1d33a:	b085      	sub	sp, #20
   1d33c:	460a      	mov	r2, r1
   1d33e:	ab03      	add	r3, sp, #12
   1d340:	2100      	movs	r1, #0
   1d342:	9300      	str	r3, [sp, #0]
   1d344:	460b      	mov	r3, r1
   1d346:	f7ff ffdb 	bl	1d300 <_Unwind_VRS_Get>
   1d34a:	9803      	ldr	r0, [sp, #12]
   1d34c:	b005      	add	sp, #20
   1d34e:	bd00      	pop	{pc}

0001d350 <_Unwind_VRS_Set>:
   1d350:	b410      	push	{r4}
   1d352:	469c      	mov	ip, r3
   1d354:	4604      	mov	r4, r0
   1d356:	b969      	cbnz	r1, 1d374 <_Unwind_VRS_Set+0x24>
   1d358:	2a0f      	cmp	r2, #15
   1d35a:	bf94      	ite	ls
   1d35c:	2300      	movls	r3, #0
   1d35e:	2301      	movhi	r3, #1
   1d360:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   1d364:	bf0c      	ite	eq
   1d366:	4618      	moveq	r0, r3
   1d368:	f043 0001 	orrne.w	r0, r3, #1	; 0x1
   1d36c:	b130      	cbz	r0, 1d37c <_Unwind_VRS_Set+0x2c>
   1d36e:	2002      	movs	r0, #2
   1d370:	bc10      	pop	{r4}
   1d372:	4770      	bx	lr
   1d374:	2904      	cmp	r1, #4
   1d376:	d8fa      	bhi.n	1d36e <_Unwind_VRS_Set+0x1e>
   1d378:	2001      	movs	r0, #1
   1d37a:	e7f9      	b.n	1d370 <_Unwind_VRS_Set+0x20>
   1d37c:	9901      	ldr	r1, [sp, #4]
   1d37e:	0093      	lsls	r3, r2, #2
   1d380:	680a      	ldr	r2, [r1, #0]
   1d382:	4423      	add	r3, r4
   1d384:	605a      	str	r2, [r3, #4]
   1d386:	e7f3      	b.n	1d370 <_Unwind_VRS_Set+0x20>

0001d388 <_Unwind_SetGR>:
   1d388:	b500      	push	{lr}
   1d38a:	b085      	sub	sp, #20
   1d38c:	ab04      	add	r3, sp, #16
   1d38e:	468c      	mov	ip, r1
   1d390:	f843 2d04 	str.w	r2, [r3, #-4]!
   1d394:	2100      	movs	r1, #0
   1d396:	9300      	str	r3, [sp, #0]
   1d398:	4662      	mov	r2, ip
   1d39a:	460b      	mov	r3, r1
   1d39c:	f7ff ffd8 	bl	1d350 <_Unwind_VRS_Set>
   1d3a0:	b005      	add	sp, #20
   1d3a2:	bd00      	pop	{pc}

0001d3a4 <selfrel_offset31>:
   1d3a4:	6803      	ldr	r3, [r0, #0]
   1d3a6:	4602      	mov	r2, r0
   1d3a8:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1d3ac:	bf14      	ite	ne
   1d3ae:	f043 4000 	orrne.w	r0, r3, #2147483648	; 0x80000000
   1d3b2:	f023 4000 	biceq.w	r0, r3, #2147483648	; 0x80000000
   1d3b6:	4410      	add	r0, r2
   1d3b8:	4770      	bx	lr
   1d3ba:	46c0      	nop			(mov r8, r8)

0001d3bc <search_EIT_table>:
   1d3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d3c0:	4682      	mov	sl, r0
   1d3c2:	b081      	sub	sp, #4
   1d3c4:	4690      	mov	r8, r2
   1d3c6:	2900      	cmp	r1, #0
   1d3c8:	d024      	beq.n	1d414 <search_EIT_table+0x58>
   1d3ca:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
   1d3ce:	46d9      	mov	r9, fp
   1d3d0:	2700      	movs	r7, #0
   1d3d2:	e000      	b.n	1d3d6 <search_EIT_table+0x1a>
   1d3d4:	1c67      	adds	r7, r4, #1
   1d3d6:	eb09 0307 	add.w	r3, r9, r7
   1d3da:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1d3de:	105c      	asrs	r4, r3, #1
   1d3e0:	00e2      	lsls	r2, r4, #3
   1d3e2:	eb0a 0502 	add.w	r5, sl, r2
   1d3e6:	4628      	mov	r0, r5
   1d3e8:	f7ff ffdc 	bl	1d3a4 <selfrel_offset31>
   1d3ec:	45a3      	cmp	fp, r4
   1d3ee:	4606      	mov	r6, r0
   1d3f0:	bf08      	it	eq
   1d3f2:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   1d3f6:	d005      	beq.n	1d404 <search_EIT_table+0x48>
   1d3f8:	1c60      	adds	r0, r4, #1
   1d3fa:	00c0      	lsls	r0, r0, #3
   1d3fc:	4450      	add	r0, sl
   1d3fe:	f7ff ffd1 	bl	1d3a4 <selfrel_offset31>
   1d402:	3801      	subs	r0, #1
   1d404:	4546      	cmp	r6, r8
   1d406:	d807      	bhi.n	1d418 <search_EIT_table+0x5c>
   1d408:	4540      	cmp	r0, r8
   1d40a:	d3e3      	bcc.n	1d3d4 <search_EIT_table+0x18>
   1d40c:	4628      	mov	r0, r5
   1d40e:	b001      	add	sp, #4
   1d410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d414:	2500      	movs	r5, #0
   1d416:	e7f9      	b.n	1d40c <search_EIT_table+0x50>
   1d418:	42bc      	cmp	r4, r7
   1d41a:	d0fb      	beq.n	1d414 <search_EIT_table+0x58>
   1d41c:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
   1d420:	e7d9      	b.n	1d3d6 <search_EIT_table+0x1a>
   1d422:	46c0      	nop			(mov r8, r8)

0001d424 <_Unwind_GetCFA>:
   1d424:	6c40      	ldr	r0, [r0, #68]
   1d426:	4770      	bx	lr

0001d428 <_Unwind_Complete>:
   1d428:	4770      	bx	lr
   1d42a:	46c0      	nop			(mov r8, r8)

0001d42c <_Unwind_DeleteException>:
   1d42c:	b500      	push	{lr}
   1d42e:	6883      	ldr	r3, [r0, #8]
   1d430:	b081      	sub	sp, #4
   1d432:	4601      	mov	r1, r0
   1d434:	b10b      	cbz	r3, 1d43a <_Unwind_DeleteException+0xe>
   1d436:	2001      	movs	r0, #1
   1d438:	4798      	blx	r3
   1d43a:	b001      	add	sp, #4
   1d43c:	bd00      	pop	{pc}
   1d43e:	46c0      	nop			(mov r8, r8)

0001d440 <__gnu_unwind_pr_common>:
   1d440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d444:	4688      	mov	r8, r1
   1d446:	b089      	sub	sp, #36
   1d448:	f000 0108 	and.w	r1, r0, #8	; 0x8
   1d44c:	f000 0003 	and.w	r0, r0, #3	; 0x3
   1d450:	9003      	str	r0, [sp, #12]
   1d452:	f8d8 004c 	ldr.w	r0, [r8, #76]
   1d456:	4691      	mov	r9, r2
   1d458:	f850 2b04 	ldr.w	r2, [r0], #4
   1d45c:	469b      	mov	fp, r3
   1d45e:	9102      	str	r1, [sp, #8]
   1d460:	9005      	str	r0, [sp, #20]
   1d462:	2b00      	cmp	r3, #0
   1d464:	f040 80c1 	bne.w	1d5ea <__gnu_unwind_pr_common+0x1aa>
   1d468:	0213      	lsls	r3, r2, #8
   1d46a:	9304      	str	r3, [sp, #16]
   1d46c:	2303      	movs	r3, #3
   1d46e:	f88d b019 	strb.w	fp, [sp, #25]
   1d472:	f88d 3018 	strb.w	r3, [sp, #24]
   1d476:	9a03      	ldr	r2, [sp, #12]
   1d478:	f8d8 3050 	ldr.w	r3, [r8, #80]
   1d47c:	2a02      	cmp	r2, #2
   1d47e:	bf08      	it	eq
   1d480:	f8d8 0038 	ldreq.w	r0, [r8, #56]
   1d484:	f013 0301 	ands.w	r3, r3, #1	; 0x1
   1d488:	bf02      	ittt	eq
   1d48a:	f108 0158 	addeq.w	r1, r8, #88	; 0x58
   1d48e:	9301      	streq	r3, [sp, #4]
   1d490:	9100      	streq	r1, [sp, #0]
   1d492:	f040 80b6 	bne.w	1d602 <__gnu_unwind_pr_common+0x1c2>
   1d496:	6803      	ldr	r3, [r0, #0]
   1d498:	2b00      	cmp	r3, #0
   1d49a:	d02e      	beq.n	1d4fa <__gnu_unwind_pr_common+0xba>
   1d49c:	f1bb 0f02 	cmp.w	fp, #2	; 0x2
   1d4a0:	bf0a      	itet	eq
   1d4a2:	6844      	ldreq	r4, [r0, #4]
   1d4a4:	8844      	ldrhne	r4, [r0, #2]
   1d4a6:	461e      	moveq	r6, r3
   1d4a8:	f8d8 3048 	ldr.w	r3, [r8, #72]
   1d4ac:	bf0c      	ite	eq
   1d4ae:	f100 0708 	addeq.w	r7, r0, #8	; 0x8
   1d4b2:	8806      	ldrhne	r6, [r0, #0]
   1d4b4:	f024 0201 	bic.w	r2, r4, #1	; 0x1
   1d4b8:	bf18      	it	ne
   1d4ba:	1d07      	addne	r7, r0, #4
   1d4bc:	210f      	movs	r1, #15
   1d4be:	4648      	mov	r0, r9
   1d4c0:	eb02 0503 	add.w	r5, r2, r3
   1d4c4:	f7ff ff38 	bl	1d338 <_Unwind_GetGR>
   1d4c8:	4285      	cmp	r5, r0
   1d4ca:	d922      	bls.n	1d512 <__gnu_unwind_pr_common+0xd2>
   1d4cc:	f004 0201 	and.w	r2, r4, #1	; 0x1
   1d4d0:	f006 0301 	and.w	r3, r6, #1	; 0x1
   1d4d4:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
   1d4d8:	2000      	movs	r0, #0
   1d4da:	2a01      	cmp	r2, #1
   1d4dc:	d028      	beq.n	1d530 <__gnu_unwind_pr_common+0xf0>
   1d4de:	d248      	bcs.n	1d572 <__gnu_unwind_pr_common+0x132>
   1d4e0:	9a03      	ldr	r2, [sp, #12]
   1d4e2:	2a00      	cmp	r2, #0
   1d4e4:	bf0c      	ite	eq
   1d4e6:	2300      	moveq	r3, #0
   1d4e8:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   1d4ec:	2b00      	cmp	r3, #0
   1d4ee:	f040 80ec 	bne.w	1d6ca <__gnu_unwind_pr_common+0x28a>
   1d4f2:	1d38      	adds	r0, r7, #4
   1d4f4:	6803      	ldr	r3, [r0, #0]
   1d4f6:	2b00      	cmp	r3, #0
   1d4f8:	d1d0      	bne.n	1d49c <__gnu_unwind_pr_common+0x5c>
   1d4fa:	4648      	mov	r0, r9
   1d4fc:	a904      	add	r1, sp, #16
   1d4fe:	f000 fd67 	bl	1dfd0 <__gnu_unwind_execute>
   1d502:	2800      	cmp	r0, #0
   1d504:	d137      	bne.n	1d576 <__gnu_unwind_pr_common+0x136>
   1d506:	9b01      	ldr	r3, [sp, #4]
   1d508:	2b00      	cmp	r3, #0
   1d50a:	f040 80ce 	bne.w	1d6aa <__gnu_unwind_pr_common+0x26a>
   1d50e:	3008      	adds	r0, #8
   1d510:	e032      	b.n	1d578 <__gnu_unwind_pr_common+0x138>
   1d512:	f026 0301 	bic.w	r3, r6, #1	; 0x1
   1d516:	442b      	add	r3, r5
   1d518:	4298      	cmp	r0, r3
   1d51a:	bf2c      	ite	cs
   1d51c:	2000      	movcs	r0, #0
   1d51e:	2001      	movcc	r0, #1
   1d520:	f004 0201 	and.w	r2, r4, #1	; 0x1
   1d524:	f006 0301 	and.w	r3, r6, #1	; 0x1
   1d528:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
   1d52c:	2a01      	cmp	r2, #1
   1d52e:	d1d6      	bne.n	1d4de <__gnu_unwind_pr_common+0x9e>
   1d530:	9b03      	ldr	r3, [sp, #12]
   1d532:	2b00      	cmp	r3, #0
   1d534:	d16f      	bne.n	1d616 <__gnu_unwind_pr_common+0x1d6>
   1d536:	b1c8      	cbz	r0, 1d56c <__gnu_unwind_pr_common+0x12c>
   1d538:	687b      	ldr	r3, [r7, #4]
   1d53a:	4638      	mov	r0, r7
   1d53c:	f113 0f02 	cmn.w	r3, #2	; 0x2
   1d540:	f850 4b04 	ldr.w	r4, [r0], #4
   1d544:	d017      	beq.n	1d576 <__gnu_unwind_pr_common+0x136>
   1d546:	9900      	ldr	r1, [sp, #0]
   1d548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1d54c:	9107      	str	r1, [sp, #28]
   1d54e:	f000 809b 	beq.w	1d688 <__gnu_unwind_pr_common+0x248>
   1d552:	f7ff fecf 	bl	1d2f4 <_Unwind_decode_target2>
   1d556:	0fe2      	lsrs	r2, r4, #31
   1d558:	4601      	mov	r1, r0
   1d55a:	ab07      	add	r3, sp, #28
   1d55c:	4640      	mov	r0, r8
   1d55e:	f001 fee7 	bl	1f330 <__cxa_type_match>
   1d562:	2800      	cmp	r0, #0
   1d564:	f040 8090 	bne.w	1d688 <__gnu_unwind_pr_common+0x248>
   1d568:	9a03      	ldr	r2, [sp, #12]
   1d56a:	9207      	str	r2, [sp, #28]
   1d56c:	f107 0008 	add.w	r0, r7, #8	; 0x8
   1d570:	e791      	b.n	1d496 <__gnu_unwind_pr_common+0x56>
   1d572:	2a02      	cmp	r2, #2
   1d574:	d003      	beq.n	1d57e <__gnu_unwind_pr_common+0x13e>
   1d576:	2009      	movs	r0, #9
   1d578:	b009      	add	sp, #36
   1d57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d57e:	683a      	ldr	r2, [r7, #0]
   1d580:	9b03      	ldr	r3, [sp, #12]
   1d582:	f022 4a00 	bic.w	sl, r2, #2147483648	; 0x80000000
   1d586:	2b00      	cmp	r3, #0
   1d588:	d160      	bne.n	1d64c <__gnu_unwind_pr_common+0x20c>
   1d58a:	b328      	cbz	r0, 1d5d8 <__gnu_unwind_pr_common+0x198>
   1d58c:	9902      	ldr	r1, [sp, #8]
   1d58e:	f1da 0301 	rsbs	r3, sl, #1	; 0x1
   1d592:	bf38      	it	cc
   1d594:	2300      	movcc	r3, #0
   1d596:	2900      	cmp	r1, #0
   1d598:	bf08      	it	eq
   1d59a:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1d59e:	b1db      	cbz	r3, 1d5d8 <__gnu_unwind_pr_common+0x198>
   1d5a0:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   1d5a4:	d074      	beq.n	1d690 <__gnu_unwind_pr_common+0x250>
   1d5a6:	1d3d      	adds	r5, r7, #4
   1d5a8:	9e03      	ldr	r6, [sp, #12]
   1d5aa:	e003      	b.n	1d5b4 <__gnu_unwind_pr_common+0x174>
   1d5ac:	3504      	adds	r5, #4
   1d5ae:	45a2      	cmp	sl, r4
   1d5b0:	d90f      	bls.n	1d5d2 <__gnu_unwind_pr_common+0x192>
   1d5b2:	4626      	mov	r6, r4
   1d5b4:	9a00      	ldr	r2, [sp, #0]
   1d5b6:	4628      	mov	r0, r5
   1d5b8:	9207      	str	r2, [sp, #28]
   1d5ba:	f7ff fe9b 	bl	1d2f4 <_Unwind_decode_target2>
   1d5be:	2200      	movs	r2, #0
   1d5c0:	4601      	mov	r1, r0
   1d5c2:	ab07      	add	r3, sp, #28
   1d5c4:	4640      	mov	r0, r8
   1d5c6:	1c74      	adds	r4, r6, #1
   1d5c8:	f001 feb2 	bl	1f330 <__cxa_type_match>
   1d5cc:	2800      	cmp	r0, #0
   1d5ce:	d0ed      	beq.n	1d5ac <__gnu_unwind_pr_common+0x16c>
   1d5d0:	4634      	mov	r4, r6
   1d5d2:	4554      	cmp	r4, sl
   1d5d4:	d05c      	beq.n	1d690 <__gnu_unwind_pr_common+0x250>
   1d5d6:	683a      	ldr	r2, [r7, #0]
   1d5d8:	2a00      	cmp	r2, #0
   1d5da:	bfac      	ite	ge
   1d5dc:	4638      	movge	r0, r7
   1d5de:	1d38      	addlt	r0, r7, #4
   1d5e0:	f10a 0301 	add.w	r3, sl, #1	; 0x1
   1d5e4:	009b      	lsls	r3, r3, #2
   1d5e6:	18c0      	adds	r0, r0, r3
   1d5e8:	e755      	b.n	1d496 <__gnu_unwind_pr_common+0x56>
   1d5ea:	0c13      	lsrs	r3, r2, #16
   1d5ec:	b2db      	uxtb	r3, r3
   1d5ee:	2102      	movs	r1, #2
   1d5f0:	f88d 3019 	strb.w	r3, [sp, #25]
   1d5f4:	408b      	lsls	r3, r1
   1d5f6:	0412      	lsls	r2, r2, #16
   1d5f8:	9204      	str	r2, [sp, #16]
   1d5fa:	f88d 1018 	strb.w	r1, [sp, #24]
   1d5fe:	18c0      	adds	r0, r0, r3
   1d600:	e739      	b.n	1d476 <__gnu_unwind_pr_common+0x36>
   1d602:	2300      	movs	r3, #0
   1d604:	4648      	mov	r0, r9
   1d606:	a904      	add	r1, sp, #16
   1d608:	9301      	str	r3, [sp, #4]
   1d60a:	f000 fce1 	bl	1dfd0 <__gnu_unwind_execute>
   1d60e:	2800      	cmp	r0, #0
   1d610:	f43f af79 	beq.w	1d506 <__gnu_unwind_pr_common+0xc6>
   1d614:	e7af      	b.n	1d576 <__gnu_unwind_pr_common+0x136>
   1d616:	210d      	movs	r1, #13
   1d618:	4648      	mov	r0, r9
   1d61a:	f8d8 4020 	ldr.w	r4, [r8, #32]
   1d61e:	f7ff fe8b 	bl	1d338 <_Unwind_GetGR>
   1d622:	4284      	cmp	r4, r0
   1d624:	d1a2      	bne.n	1d56c <__gnu_unwind_pr_common+0x12c>
   1d626:	f8d8 3028 	ldr.w	r3, [r8, #40]
   1d62a:	429f      	cmp	r7, r3
   1d62c:	d19e      	bne.n	1d56c <__gnu_unwind_pr_common+0x12c>
   1d62e:	4638      	mov	r0, r7
   1d630:	f7ff feb8 	bl	1d3a4 <selfrel_offset31>
   1d634:	4602      	mov	r2, r0
   1d636:	210f      	movs	r1, #15
   1d638:	4648      	mov	r0, r9
   1d63a:	f7ff fea5 	bl	1d388 <_Unwind_SetGR>
   1d63e:	4648      	mov	r0, r9
   1d640:	2100      	movs	r1, #0
   1d642:	4642      	mov	r2, r8
   1d644:	f7ff fea0 	bl	1d388 <_Unwind_SetGR>
   1d648:	2007      	movs	r0, #7
   1d64a:	e795      	b.n	1d578 <__gnu_unwind_pr_common+0x138>
   1d64c:	210d      	movs	r1, #13
   1d64e:	4648      	mov	r0, r9
   1d650:	f8d8 4020 	ldr.w	r4, [r8, #32]
   1d654:	f7ff fe70 	bl	1d338 <_Unwind_GetGR>
   1d658:	4284      	cmp	r4, r0
   1d65a:	d1bc      	bne.n	1d5d6 <__gnu_unwind_pr_common+0x196>
   1d65c:	f8d8 3028 	ldr.w	r3, [r8, #40]
   1d660:	429f      	cmp	r7, r3
   1d662:	d1b8      	bne.n	1d5d6 <__gnu_unwind_pr_common+0x196>
   1d664:	2104      	movs	r1, #4
   1d666:	2300      	movs	r3, #0
   1d668:	eb07 0001 	add.w	r0, r7, r1
   1d66c:	f8c8 a028 	str.w	sl, [r8, #40]
   1d670:	f8c8 302c 	str.w	r3, [r8, #44]
   1d674:	f8c8 1030 	str.w	r1, [r8, #48]
   1d678:	f8c8 0034 	str.w	r0, [r8, #52]
   1d67c:	683b      	ldr	r3, [r7, #0]
   1d67e:	2b00      	cmp	r3, #0
   1d680:	da37      	bge.n	1d6f2 <__gnu_unwind_pr_common+0x2b2>
   1d682:	2201      	movs	r2, #1
   1d684:	9201      	str	r2, [sp, #4]
   1d686:	e7ab      	b.n	1d5e0 <__gnu_unwind_pr_common+0x1a0>
   1d688:	9b07      	ldr	r3, [sp, #28]
   1d68a:	2b00      	cmp	r3, #0
   1d68c:	f43f af6e 	beq.w	1d56c <__gnu_unwind_pr_common+0x12c>
   1d690:	4648      	mov	r0, r9
   1d692:	210d      	movs	r1, #13
   1d694:	f7ff fe50 	bl	1d338 <_Unwind_GetGR>
   1d698:	9b07      	ldr	r3, [sp, #28]
   1d69a:	f8c8 0020 	str.w	r0, [r8, #32]
   1d69e:	f8c8 3024 	str.w	r3, [r8, #36]
   1d6a2:	f8c8 7028 	str.w	r7, [r8, #40]
   1d6a6:	2006      	movs	r0, #6
   1d6a8:	e766      	b.n	1d578 <__gnu_unwind_pr_common+0x138>
   1d6aa:	210f      	movs	r1, #15
   1d6ac:	4648      	mov	r0, r9
   1d6ae:	f7ff fe43 	bl	1d338 <_Unwind_GetGR>
   1d6b2:	210e      	movs	r1, #14
   1d6b4:	4602      	mov	r2, r0
   1d6b6:	4648      	mov	r0, r9
   1d6b8:	f7ff fe66 	bl	1d388 <_Unwind_SetGR>
   1d6bc:	4648      	mov	r0, r9
   1d6be:	210f      	movs	r1, #15
   1d6c0:	4a0f      	ldr	r2, [pc, #60]	(1d700 <__gnu_unwind_pr_common+0x2c0>)
   1d6c2:	f7ff fe61 	bl	1d388 <_Unwind_SetGR>
   1d6c6:	2007      	movs	r0, #7
   1d6c8:	e756      	b.n	1d578 <__gnu_unwind_pr_common+0x138>
   1d6ca:	4638      	mov	r0, r7
   1d6cc:	f7ff fe6a 	bl	1d3a4 <selfrel_offset31>
   1d6d0:	1d3b      	adds	r3, r7, #4
   1d6d2:	4604      	mov	r4, r0
   1d6d4:	f8c8 3038 	str.w	r3, [r8, #56]
   1d6d8:	4640      	mov	r0, r8
   1d6da:	f001 fdf3 	bl	1f2c4 <__cxa_begin_cleanup>
   1d6de:	2800      	cmp	r0, #0
   1d6e0:	f43f af49 	beq.w	1d576 <__gnu_unwind_pr_common+0x136>
   1d6e4:	4648      	mov	r0, r9
   1d6e6:	210f      	movs	r1, #15
   1d6e8:	4622      	mov	r2, r4
   1d6ea:	f7ff fe4d 	bl	1d388 <_Unwind_SetGR>
   1d6ee:	2007      	movs	r0, #7
   1d6f0:	e742      	b.n	1d578 <__gnu_unwind_pr_common+0x138>
   1d6f2:	f10a 0001 	add.w	r0, sl, #1	; 0x1
   1d6f6:	0080      	lsls	r0, r0, #2
   1d6f8:	4438      	add	r0, r7
   1d6fa:	f7ff fe53 	bl	1d3a4 <selfrel_offset31>
   1d6fe:	e799      	b.n	1d634 <__gnu_unwind_pr_common+0x1f4>
   1d700:	0001ff4d 	.word	0x0001ff4d

0001d704 <__aeabi_unwind_cpp_pr2>:
   1d704:	b500      	push	{lr}
   1d706:	2302      	movs	r3, #2
   1d708:	b081      	sub	sp, #4
   1d70a:	f7ff fe99 	bl	1d440 <__gnu_unwind_pr_common>
   1d70e:	b001      	add	sp, #4
   1d710:	bd00      	pop	{pc}
   1d712:	46c0      	nop			(mov r8, r8)

0001d714 <__aeabi_unwind_cpp_pr1>:
   1d714:	b500      	push	{lr}
   1d716:	2301      	movs	r3, #1
   1d718:	b081      	sub	sp, #4
   1d71a:	f7ff fe91 	bl	1d440 <__gnu_unwind_pr_common>
   1d71e:	b001      	add	sp, #4
   1d720:	bd00      	pop	{pc}
   1d722:	46c0      	nop			(mov r8, r8)

0001d724 <__aeabi_unwind_cpp_pr0>:
   1d724:	b500      	push	{lr}
   1d726:	2300      	movs	r3, #0
   1d728:	b081      	sub	sp, #4
   1d72a:	f7ff fe89 	bl	1d440 <__gnu_unwind_pr_common>
   1d72e:	b001      	add	sp, #4
   1d730:	bd00      	pop	{pc}
   1d732:	46c0      	nop			(mov r8, r8)

0001d734 <get_eit_entry>:
   1d734:	b530      	push	{r4, r5, lr}
   1d736:	4b2d      	ldr	r3, [pc, #180]	(1d7ec <get_eit_entry+0xb8>)
   1d738:	b083      	sub	sp, #12
   1d73a:	4605      	mov	r5, r0
   1d73c:	1e8c      	subs	r4, r1, #2
   1d73e:	2b00      	cmp	r3, #0
   1d740:	d04a      	beq.n	1d7d8 <get_eit_entry+0xa4>
   1d742:	4620      	mov	r0, r4
   1d744:	a901      	add	r1, sp, #4
   1d746:	e000      	b.n	1d74a <get_eit_entry+0x16>
   1d748:	bf00      	nop
   1d74a:	4602      	mov	r2, r0
   1d74c:	2800      	cmp	r0, #0
   1d74e:	d02b      	beq.n	1d7a8 <get_eit_entry+0x74>
   1d750:	4610      	mov	r0, r2
   1d752:	9901      	ldr	r1, [sp, #4]
   1d754:	4622      	mov	r2, r4
   1d756:	f7ff fe31 	bl	1d3bc <search_EIT_table>
   1d75a:	4604      	mov	r4, r0
   1d75c:	b300      	cbz	r0, 1d7a0 <get_eit_entry+0x6c>
   1d75e:	f7ff fe21 	bl	1d3a4 <selfrel_offset31>
   1d762:	64a8      	str	r0, [r5, #72]
   1d764:	6863      	ldr	r3, [r4, #4]
   1d766:	2b01      	cmp	r3, #1
   1d768:	d02e      	beq.n	1d7c8 <get_eit_entry+0x94>
   1d76a:	2b00      	cmp	r3, #0
   1d76c:	db1f      	blt.n	1d7ae <get_eit_entry+0x7a>
   1d76e:	1d20      	adds	r0, r4, #4
   1d770:	f7ff fe18 	bl	1d3a4 <selfrel_offset31>
   1d774:	64e8      	str	r0, [r5, #76]
   1d776:	2300      	movs	r3, #0
   1d778:	6ce8      	ldr	r0, [r5, #76]
   1d77a:	652b      	str	r3, [r5, #80]
   1d77c:	6803      	ldr	r3, [r0, #0]
   1d77e:	2b00      	cmp	r3, #0
   1d780:	da1d      	bge.n	1d7be <get_eit_entry+0x8a>
   1d782:	0e1b      	lsrs	r3, r3, #24
   1d784:	f013 000f 	ands.w	r0, r3, #15	; 0xf
   1d788:	bf04      	itt	eq
   1d78a:	4b19      	ldreq	r3, [pc, #100]	(1d7f0 <get_eit_entry+0xbc>)
   1d78c:	612b      	streq	r3, [r5, #16]
   1d78e:	d009      	beq.n	1d7a4 <get_eit_entry+0x70>
   1d790:	2801      	cmp	r0, #1
   1d792:	d01d      	beq.n	1d7d0 <get_eit_entry+0x9c>
   1d794:	2802      	cmp	r0, #2
   1d796:	d025      	beq.n	1d7e4 <get_eit_entry+0xb0>
   1d798:	2300      	movs	r3, #0
   1d79a:	612b      	str	r3, [r5, #16]
   1d79c:	2009      	movs	r0, #9
   1d79e:	e001      	b.n	1d7a4 <get_eit_entry+0x70>
   1d7a0:	6128      	str	r0, [r5, #16]
   1d7a2:	2009      	movs	r0, #9
   1d7a4:	b003      	add	sp, #12
   1d7a6:	bd30      	pop	{r4, r5, pc}
   1d7a8:	6128      	str	r0, [r5, #16]
   1d7aa:	3009      	adds	r0, #9
   1d7ac:	e7fa      	b.n	1d7a4 <get_eit_entry+0x70>
   1d7ae:	1d23      	adds	r3, r4, #4
   1d7b0:	64eb      	str	r3, [r5, #76]
   1d7b2:	2201      	movs	r2, #1
   1d7b4:	6ce8      	ldr	r0, [r5, #76]
   1d7b6:	652a      	str	r2, [r5, #80]
   1d7b8:	6803      	ldr	r3, [r0, #0]
   1d7ba:	2b00      	cmp	r3, #0
   1d7bc:	dbe1      	blt.n	1d782 <get_eit_entry+0x4e>
   1d7be:	f7ff fdf1 	bl	1d3a4 <selfrel_offset31>
   1d7c2:	6128      	str	r0, [r5, #16]
   1d7c4:	2000      	movs	r0, #0
   1d7c6:	e7ed      	b.n	1d7a4 <get_eit_entry+0x70>
   1d7c8:	3b01      	subs	r3, #1
   1d7ca:	612b      	str	r3, [r5, #16]
   1d7cc:	2005      	movs	r0, #5
   1d7ce:	e7e9      	b.n	1d7a4 <get_eit_entry+0x70>
   1d7d0:	4b08      	ldr	r3, [pc, #32]	(1d7f4 <get_eit_entry+0xc0>)
   1d7d2:	3801      	subs	r0, #1
   1d7d4:	612b      	str	r3, [r5, #16]
   1d7d6:	e7e5      	b.n	1d7a4 <get_eit_entry+0x70>
   1d7d8:	4a07      	ldr	r2, [pc, #28]	(1d7f8 <get_eit_entry+0xc4>)
   1d7da:	4b08      	ldr	r3, [pc, #32]	(1d7fc <get_eit_entry+0xc8>)
   1d7dc:	1a9b      	subs	r3, r3, r2
   1d7de:	10db      	asrs	r3, r3, #3
   1d7e0:	9301      	str	r3, [sp, #4]
   1d7e2:	e7b5      	b.n	1d750 <get_eit_entry+0x1c>
   1d7e4:	4b06      	ldr	r3, [pc, #24]	(1d800 <get_eit_entry+0xcc>)
   1d7e6:	3802      	subs	r0, #2
   1d7e8:	612b      	str	r3, [r5, #16]
   1d7ea:	e7db      	b.n	1d7a4 <get_eit_entry+0x70>
   1d7ec:	00000000 	.word	0x00000000
   1d7f0:	0001d725 	.word	0x0001d725
   1d7f4:	0001d715 	.word	0x0001d715
   1d7f8:	000258e0 	.word	0x000258e0
   1d7fc:	00025ca8 	.word	0x00025ca8
   1d800:	0001d705 	.word	0x0001d705

0001d804 <restore_non_core_regs>:
   1d804:	6803      	ldr	r3, [r0, #0]
   1d806:	b510      	push	{r4, lr}
   1d808:	f013 0f01 	tst.w	r3, #1	; 0x1
   1d80c:	4604      	mov	r4, r0
   1d80e:	d107      	bne.n	1d820 <restore_non_core_regs+0x1c>
   1d810:	f013 0f02 	tst.w	r3, #2	; 0x2
   1d814:	d012      	beq.n	1d83c <restore_non_core_regs+0x38>
   1d816:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1d81a:	f000 facf 	bl	1ddbc <__gnu_Unwind_Restore_VFP_D>
   1d81e:	6823      	ldr	r3, [r4, #0]
   1d820:	f013 0f04 	tst.w	r3, #4	; 0x4
   1d824:	d012      	beq.n	1d84c <restore_non_core_regs+0x48>
   1d826:	f013 0f08 	tst.w	r3, #8	; 0x8
   1d82a:	d017      	beq.n	1d85c <restore_non_core_regs+0x58>
   1d82c:	f013 0f10 	tst.w	r3, #16	; 0x10
   1d830:	d103      	bne.n	1d83a <restore_non_core_regs+0x36>
   1d832:	f504 700c 	add.w	r0, r4, #560	; 0x230
   1d836:	f000 fb15 	bl	1de64 <__gnu_Unwind_Restore_WMMXC>
   1d83a:	bd10      	pop	{r4, pc}
   1d83c:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1d840:	f000 fab4 	bl	1ddac <__gnu_Unwind_Restore_VFP>
   1d844:	6823      	ldr	r3, [r4, #0]
   1d846:	f013 0f04 	tst.w	r3, #4	; 0x4
   1d84a:	d1ec      	bne.n	1d826 <restore_non_core_regs+0x22>
   1d84c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1d850:	f000 fabc 	bl	1ddcc <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1d854:	6823      	ldr	r3, [r4, #0]
   1d856:	f013 0f08 	tst.w	r3, #8	; 0x8
   1d85a:	d1e7      	bne.n	1d82c <restore_non_core_regs+0x28>
   1d85c:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   1d860:	f000 fabc 	bl	1dddc <__gnu_Unwind_Restore_WMMXD>
   1d864:	6823      	ldr	r3, [r4, #0]
   1d866:	e7e1      	b.n	1d82c <restore_non_core_regs+0x28>

0001d868 <__gnu_Unwind_Backtrace>:
   1d868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d86c:	6bd3      	ldr	r3, [r2, #60]
   1d86e:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
   1d872:	6413      	str	r3, [r2, #64]
   1d874:	f10d 0c04 	add.w	ip, sp, #4	; 0x4
   1d878:	f102 0e04 	add.w	lr, r2, #4	; 0x4
   1d87c:	4680      	mov	r8, r0
   1d87e:	460f      	mov	r7, r1
   1d880:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1d884:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1d888:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1d88c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1d890:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1d894:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1d898:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   1d89c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   1d8a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d8a4:	466e      	mov	r6, sp
   1d8a6:	9300      	str	r3, [sp, #0]
   1d8a8:	ad90      	add	r5, sp, #576
   1d8aa:	6c31      	ldr	r1, [r6, #64]
   1d8ac:	4628      	mov	r0, r5
   1d8ae:	f7ff ff41 	bl	1d734 <get_eit_entry>
   1d8b2:	2800      	cmp	r0, #0
   1d8b4:	d121      	bne.n	1d8fa <__gnu_Unwind_Backtrace+0x92>
   1d8b6:	4668      	mov	r0, sp
   1d8b8:	210c      	movs	r1, #12
   1d8ba:	462a      	mov	r2, r5
   1d8bc:	f7ff fd64 	bl	1d388 <_Unwind_SetGR>
   1d8c0:	4668      	mov	r0, sp
   1d8c2:	4639      	mov	r1, r7
   1d8c4:	47c0      	blx	r8
   1d8c6:	b9c0      	cbnz	r0, 1d8fa <__gnu_Unwind_Backtrace+0x92>
   1d8c8:	9b94      	ldr	r3, [sp, #592]
   1d8ca:	3008      	adds	r0, #8
   1d8cc:	4629      	mov	r1, r5
   1d8ce:	466a      	mov	r2, sp
   1d8d0:	4798      	blx	r3
   1d8d2:	f1b0 0309 	subs.w	r3, r0, #9	; 0x9
   1d8d6:	bf18      	it	ne
   1d8d8:	2301      	movne	r3, #1
   1d8da:	2805      	cmp	r0, #5
   1d8dc:	bf0c      	ite	eq
   1d8de:	2300      	moveq	r3, #0
   1d8e0:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   1d8e4:	4604      	mov	r4, r0
   1d8e6:	2b00      	cmp	r3, #0
   1d8e8:	d1df      	bne.n	1d8aa <__gnu_Unwind_Backtrace+0x42>
   1d8ea:	4668      	mov	r0, sp
   1d8ec:	f7ff ff8a 	bl	1d804 <restore_non_core_regs>
   1d8f0:	4620      	mov	r0, r4
   1d8f2:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
   1d8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d8fa:	2409      	movs	r4, #9
   1d8fc:	e7f5      	b.n	1d8ea <__gnu_Unwind_Backtrace+0x82>
   1d8fe:	46c0      	nop			(mov r8, r8)

0001d900 <unwind_phase2_forced>:
   1d900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d904:	68c3      	ldr	r3, [r0, #12]
   1d906:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
   1d90a:	b083      	sub	sp, #12
   1d90c:	6984      	ldr	r4, [r0, #24]
   1d90e:	9304      	str	r3, [sp, #16]
   1d910:	ab97      	add	r3, sp, #604
   1d912:	9303      	str	r3, [sp, #12]
   1d914:	9405      	str	r4, [sp, #20]
   1d916:	9c03      	ldr	r4, [sp, #12]
   1d918:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   1d91c:	4606      	mov	r6, r0
   1d91e:	4693      	mov	fp, r2
   1d920:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1d924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d926:	46a6      	mov	lr, r4
   1d928:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1d92c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1d930:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1d934:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1d938:	af96      	add	r7, sp, #600
   1d93a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   1d93e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   1d942:	2300      	movs	r3, #0
   1d944:	603b      	str	r3, [r7, #0]
   1d946:	4698      	mov	r8, r3
   1d948:	f10d 0a18 	add.w	sl, sp, #24	; 0x18
   1d94c:	6c39      	ldr	r1, [r7, #64]
   1d94e:	4630      	mov	r0, r6
   1d950:	f7ff fef0 	bl	1d734 <get_eit_entry>
   1d954:	4605      	mov	r5, r0
   1d956:	4681      	mov	r9, r0
   1d958:	f1bb 0f00 	cmp.w	fp, #0	; 0x0
   1d95c:	d125      	bne.n	1d9aa <unwind_phase2_forced+0xaa>
   1d95e:	2409      	movs	r4, #9
   1d960:	2d00      	cmp	r5, #0
   1d962:	d027      	beq.n	1d9b4 <unwind_phase2_forced+0xb4>
   1d964:	6bbb      	ldr	r3, [r7, #56]
   1d966:	f044 0410 	orr.w	r4, r4, #16	; 0x10
   1d96a:	647b      	str	r3, [r7, #68]
   1d96c:	9b05      	ldr	r3, [sp, #20]
   1d96e:	4621      	mov	r1, r4
   1d970:	9301      	str	r3, [sp, #4]
   1d972:	9700      	str	r7, [sp, #0]
   1d974:	2001      	movs	r0, #1
   1d976:	4632      	mov	r2, r6
   1d978:	4633      	mov	r3, r6
   1d97a:	9c04      	ldr	r4, [sp, #16]
   1d97c:	47a0      	blx	r4
   1d97e:	b960      	cbnz	r0, 1d99a <unwind_phase2_forced+0x9a>
   1d980:	b96d      	cbnz	r5, 1d99e <unwind_phase2_forced+0x9e>
   1d982:	4638      	mov	r0, r7
   1d984:	4651      	mov	r1, sl
   1d986:	f44f 7210 	mov.w	r2, #576	; 0x240
   1d98a:	f005 f8d7 	bl	22b3c <memcpy>
   1d98e:	f1b8 0f08 	cmp.w	r8, #8	; 0x8
   1d992:	d0db      	beq.n	1d94c <unwind_phase2_forced+0x4c>
   1d994:	f1b8 0f07 	cmp.w	r8, #7	; 0x7
   1d998:	d01e      	beq.n	1d9d8 <unwind_phase2_forced+0xd8>
   1d99a:	f04f 0909 	mov.w	r9, #9	; 0x9
   1d99e:	4648      	mov	r0, r9
   1d9a0:	b027      	add	sp, #156
   1d9a2:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   1d9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9aa:	240a      	movs	r4, #10
   1d9ac:	f04f 0b00 	mov.w	fp, #0	; 0x0
   1d9b0:	2d00      	cmp	r5, #0
   1d9b2:	d1d7      	bne.n	1d964 <unwind_phase2_forced+0x64>
   1d9b4:	6c3b      	ldr	r3, [r7, #64]
   1d9b6:	4639      	mov	r1, r7
   1d9b8:	6173      	str	r3, [r6, #20]
   1d9ba:	f44f 7210 	mov.w	r2, #576	; 0x240
   1d9be:	4650      	mov	r0, sl
   1d9c0:	f005 f8bc 	bl	22b3c <memcpy>
   1d9c4:	6933      	ldr	r3, [r6, #16]
   1d9c6:	4620      	mov	r0, r4
   1d9c8:	4631      	mov	r1, r6
   1d9ca:	4652      	mov	r2, sl
   1d9cc:	4798      	blx	r3
   1d9ce:	f8da 3038 	ldr.w	r3, [sl, #56]
   1d9d2:	4680      	mov	r8, r0
   1d9d4:	647b      	str	r3, [r7, #68]
   1d9d6:	e7c9      	b.n	1d96c <unwind_phase2_forced+0x6c>
   1d9d8:	a897      	add	r0, sp, #604
   1d9da:	f000 f9db 	bl	1dd94 <__restore_core_regs>
   1d9de:	46c0      	nop			(mov r8, r8)

0001d9e0 <__gnu_Unwind_ForcedUnwind>:
   1d9e0:	b500      	push	{lr}
   1d9e2:	60c1      	str	r1, [r0, #12]
   1d9e4:	6182      	str	r2, [r0, #24]
   1d9e6:	6bda      	ldr	r2, [r3, #60]
   1d9e8:	b081      	sub	sp, #4
   1d9ea:	641a      	str	r2, [r3, #64]
   1d9ec:	4619      	mov	r1, r3
   1d9ee:	2200      	movs	r2, #0
   1d9f0:	f7ff ff86 	bl	1d900 <unwind_phase2_forced>
   1d9f4:	b001      	add	sp, #4
   1d9f6:	bd00      	pop	{pc}

0001d9f8 <unwind_phase2>:
   1d9f8:	b570      	push	{r4, r5, r6, lr}
   1d9fa:	4605      	mov	r5, r0
   1d9fc:	460e      	mov	r6, r1
   1d9fe:	6c31      	ldr	r1, [r6, #64]
   1da00:	4628      	mov	r0, r5
   1da02:	f7ff fe97 	bl	1d734 <get_eit_entry>
   1da06:	b950      	cbnz	r0, 1da1e <unwind_phase2+0x26>
   1da08:	6c33      	ldr	r3, [r6, #64]
   1da0a:	2001      	movs	r0, #1
   1da0c:	616b      	str	r3, [r5, #20]
   1da0e:	692c      	ldr	r4, [r5, #16]
   1da10:	4629      	mov	r1, r5
   1da12:	4632      	mov	r2, r6
   1da14:	47a0      	blx	r4
   1da16:	2808      	cmp	r0, #8
   1da18:	d0f1      	beq.n	1d9fe <unwind_phase2+0x6>
   1da1a:	2807      	cmp	r0, #7
   1da1c:	d001      	beq.n	1da22 <unwind_phase2+0x2a>
   1da1e:	f004 fbd9 	bl	221d4 <abort>
   1da22:	1d30      	adds	r0, r6, #4
   1da24:	f000 f9b6 	bl	1dd94 <__restore_core_regs>

0001da28 <__gnu_Unwind_RaiseException>:
   1da28:	b5f0      	push	{r4, r5, r6, r7, lr}
   1da2a:	6bcb      	ldr	r3, [r1, #60]
   1da2c:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
   1da30:	640b      	str	r3, [r1, #64]
   1da32:	f10d 0e04 	add.w	lr, sp, #4	; 0x4
   1da36:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   1da3a:	4605      	mov	r5, r0
   1da3c:	460f      	mov	r7, r1
   1da3e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1da42:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1da46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1da4a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1da4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1da52:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1da56:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   1da5a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   1da5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1da62:	466e      	mov	r6, sp
   1da64:	9300      	str	r3, [sp, #0]
   1da66:	6c31      	ldr	r1, [r6, #64]
   1da68:	4628      	mov	r0, r5
   1da6a:	f7ff fe63 	bl	1d734 <get_eit_entry>
   1da6e:	b958      	cbnz	r0, 1da88 <__gnu_Unwind_RaiseException+0x60>
   1da70:	692b      	ldr	r3, [r5, #16]
   1da72:	4629      	mov	r1, r5
   1da74:	466a      	mov	r2, sp
   1da76:	4798      	blx	r3
   1da78:	2808      	cmp	r0, #8
   1da7a:	4604      	mov	r4, r0
   1da7c:	d0f3      	beq.n	1da66 <__gnu_Unwind_RaiseException+0x3e>
   1da7e:	4668      	mov	r0, sp
   1da80:	f7ff fec0 	bl	1d804 <restore_non_core_regs>
   1da84:	2c06      	cmp	r4, #6
   1da86:	d003      	beq.n	1da90 <__gnu_Unwind_RaiseException+0x68>
   1da88:	2009      	movs	r0, #9
   1da8a:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
   1da8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1da90:	4628      	mov	r0, r5
   1da92:	4639      	mov	r1, r7
   1da94:	f7ff ffb0 	bl	1d9f8 <unwind_phase2>

0001da98 <__gnu_Unwind_Resume_or_Rethrow>:
   1da98:	b500      	push	{lr}
   1da9a:	68c3      	ldr	r3, [r0, #12]
   1da9c:	b081      	sub	sp, #4
   1da9e:	b133      	cbz	r3, 1daae <__gnu_Unwind_Resume_or_Rethrow+0x16>
   1daa0:	6bcb      	ldr	r3, [r1, #60]
   1daa2:	2200      	movs	r2, #0
   1daa4:	640b      	str	r3, [r1, #64]
   1daa6:	f7ff ff2b 	bl	1d900 <unwind_phase2_forced>
   1daaa:	b001      	add	sp, #4
   1daac:	bd00      	pop	{pc}
   1daae:	f7ff ffbb 	bl	1da28 <__gnu_Unwind_RaiseException>
   1dab2:	e7fa      	b.n	1daaa <__gnu_Unwind_Resume_or_Rethrow+0x12>

0001dab4 <__gnu_Unwind_Resume>:
   1dab4:	b530      	push	{r4, r5, lr}
   1dab6:	6943      	ldr	r3, [r0, #20]
   1dab8:	b081      	sub	sp, #4
   1daba:	640b      	str	r3, [r1, #64]
   1dabc:	68c2      	ldr	r2, [r0, #12]
   1dabe:	4604      	mov	r4, r0
   1dac0:	460d      	mov	r5, r1
   1dac2:	b98a      	cbnz	r2, 1dae8 <__gnu_Unwind_Resume+0x34>
   1dac4:	6903      	ldr	r3, [r0, #16]
   1dac6:	4621      	mov	r1, r4
   1dac8:	2002      	movs	r0, #2
   1daca:	462a      	mov	r2, r5
   1dacc:	4798      	blx	r3
   1dace:	2807      	cmp	r0, #7
   1dad0:	d007      	beq.n	1dae2 <__gnu_Unwind_Resume+0x2e>
   1dad2:	2808      	cmp	r0, #8
   1dad4:	d001      	beq.n	1dada <__gnu_Unwind_Resume+0x26>
   1dad6:	f004 fb7d 	bl	221d4 <abort>
   1dada:	4620      	mov	r0, r4
   1dadc:	4629      	mov	r1, r5
   1dade:	f7ff ff8b 	bl	1d9f8 <unwind_phase2>
   1dae2:	1d28      	adds	r0, r5, #4
   1dae4:	f000 f956 	bl	1dd94 <__restore_core_regs>
   1dae8:	2201      	movs	r2, #1
   1daea:	f7ff ff09 	bl	1d900 <unwind_phase2_forced>
   1daee:	f004 fb71 	bl	221d4 <abort>
   1daf2:	46c0      	nop			(mov r8, r8)

0001daf4 <_Unwind_VRS_Pop>:
   1daf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1daf8:	4614      	mov	r4, r2
   1dafa:	b0e6      	sub	sp, #408
   1dafc:	4605      	mov	r5, r0
   1dafe:	461a      	mov	r2, r3
   1db00:	2904      	cmp	r1, #4
   1db02:	d80e      	bhi.n	1db22 <_Unwind_VRS_Pop+0x2e>
   1db04:	e8df f001 	tbb	[pc, r1]
   1db08:	03545638 	.word	0x03545638
   1db0c:	0011      	.short	0x0011
   1db0e:	2a03      	cmp	r2, #3
   1db10:	d107      	bne.n	1db22 <_Unwind_VRS_Pop+0x2e>
   1db12:	0c26      	lsrs	r6, r4, #16
   1db14:	0424      	lsls	r4, r4, #16
   1db16:	0c24      	lsrs	r4, r4, #16
   1db18:	eb04 0306 	add.w	r3, r4, r6
   1db1c:	2b10      	cmp	r3, #16
   1db1e:	f240 80d9 	bls.w	1dcd4 <_Unwind_VRS_Pop+0x1e0>
   1db22:	2002      	movs	r0, #2
   1db24:	b066      	add	sp, #408
   1db26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1db2a:	2c10      	cmp	r4, #16
   1db2c:	bf94      	ite	ls
   1db2e:	2300      	movls	r3, #0
   1db30:	2301      	movhi	r3, #1
   1db32:	2a00      	cmp	r2, #0
   1db34:	bf18      	it	ne
   1db36:	f043 0301 	orrne.w	r3, r3, #1	; 0x1
   1db3a:	2b00      	cmp	r3, #0
   1db3c:	d1f1      	bne.n	1db22 <_Unwind_VRS_Pop+0x2e>
   1db3e:	6803      	ldr	r3, [r0, #0]
   1db40:	f013 0f10 	tst.w	r3, #16	; 0x10
   1db44:	f040 8101 	bne.w	1dd4a <_Unwind_VRS_Pop+0x256>
   1db48:	ae62      	add	r6, sp, #392
   1db4a:	4630      	mov	r0, r6
   1db4c:	f000 f994 	bl	1de78 <__gnu_Unwind_Save_WMMXC>
   1db50:	6ba9      	ldr	r1, [r5, #56]
   1db52:	2200      	movs	r2, #0
   1db54:	2001      	movs	r0, #1
   1db56:	fa10 f302 	lsls.w	r3, r0, r2
   1db5a:	4223      	tst	r3, r4
   1db5c:	bf1c      	itt	ne
   1db5e:	f851 3b04 	ldrne.w	r3, [r1], #4
   1db62:	f846 3022 	strne.w	r3, [r6, r2, lsl #2]
   1db66:	3201      	adds	r2, #1
   1db68:	2a04      	cmp	r2, #4
   1db6a:	d1f4      	bne.n	1db56 <_Unwind_VRS_Pop+0x62>
   1db6c:	4630      	mov	r0, r6
   1db6e:	63a9      	str	r1, [r5, #56]
   1db70:	f000 f978 	bl	1de64 <__gnu_Unwind_Restore_WMMXC>
   1db74:	2000      	movs	r0, #0
   1db76:	e7d5      	b.n	1db24 <_Unwind_VRS_Pop+0x30>
   1db78:	2a00      	cmp	r2, #0
   1db7a:	d1d2      	bne.n	1db22 <_Unwind_VRS_Pop+0x2e>
   1db7c:	0420      	lsls	r0, r4, #16
   1db7e:	f8d5 c038 	ldr.w	ip, [r5, #56]
   1db82:	0c00      	lsrs	r0, r0, #16
   1db84:	4611      	mov	r1, r2
   1db86:	2401      	movs	r4, #1
   1db88:	fa14 f301 	lsls.w	r3, r4, r1
   1db8c:	4203      	tst	r3, r0
   1db8e:	d004      	beq.n	1db9a <_Unwind_VRS_Pop+0xa6>
   1db90:	008b      	lsls	r3, r1, #2
   1db92:	f85c 2b04 	ldr.w	r2, [ip], #4
   1db96:	442b      	add	r3, r5
   1db98:	605a      	str	r2, [r3, #4]
   1db9a:	3101      	adds	r1, #1
   1db9c:	2910      	cmp	r1, #16
   1db9e:	d1f3      	bne.n	1db88 <_Unwind_VRS_Pop+0x94>
   1dba0:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
   1dba4:	bf08      	it	eq
   1dba6:	f8c5 c038 	streq.w	ip, [r5, #56]
   1dbaa:	d0bb      	beq.n	1db24 <_Unwind_VRS_Pop+0x30>
   1dbac:	2000      	movs	r0, #0
   1dbae:	e7b9      	b.n	1db24 <_Unwind_VRS_Pop+0x30>
   1dbb0:	2001      	movs	r0, #1
   1dbb2:	e7b7      	b.n	1db24 <_Unwind_VRS_Pop+0x30>
   1dbb4:	1f50      	subs	r0, r2, #5
   1dbb6:	bf18      	it	ne
   1dbb8:	2001      	movne	r0, #1
   1dbba:	2a01      	cmp	r2, #1
   1dbbc:	bf0c      	ite	eq
   1dbbe:	2300      	moveq	r3, #0
   1dbc0:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   1dbc4:	2b00      	cmp	r3, #0
   1dbc6:	d1ac      	bne.n	1db22 <_Unwind_VRS_Pop+0x2e>
   1dbc8:	0c26      	lsrs	r6, r4, #16
   1dbca:	0424      	lsls	r4, r4, #16
   1dbcc:	0c24      	lsrs	r4, r4, #16
   1dbce:	eb04 0106 	add.w	r1, r4, r6
   1dbd2:	2a01      	cmp	r2, #1
   1dbd4:	bf0c      	ite	eq
   1dbd6:	2310      	moveq	r3, #16
   1dbd8:	2320      	movne	r3, #32
   1dbda:	428b      	cmp	r3, r1
   1dbdc:	d3a1      	bcc.n	1db22 <_Unwind_VRS_Pop+0x2e>
   1dbde:	2a01      	cmp	r2, #1
   1dbe0:	bf14      	ite	ne
   1dbe2:	f04f 0800 	movne.w	r8, #0	; 0x0
   1dbe6:	f04f 0801 	moveq.w	r8, #1	; 0x1
   1dbea:	2e0f      	cmp	r6, #15
   1dbec:	bf94      	ite	ls
   1dbee:	2300      	movls	r3, #0
   1dbf0:	2301      	movhi	r3, #1
   1dbf2:	ea18 0f03 	tst.w	r8, r3
   1dbf6:	d194      	bne.n	1db22 <_Unwind_VRS_Pop+0x2e>
   1dbf8:	2b00      	cmp	r3, #0
   1dbfa:	f040 808d 	bne.w	1dd18 <_Unwind_VRS_Pop+0x224>
   1dbfe:	2910      	cmp	r1, #16
   1dc00:	bf98      	it	ls
   1dc02:	461f      	movls	r7, r3
   1dc04:	d908      	bls.n	1dc18 <_Unwind_VRS_Pop+0x124>
   1dc06:	f1a1 0710 	sub.w	r7, r1, #16	; 0x10
   1dc0a:	2f00      	cmp	r7, #0
   1dc0c:	bf0c      	ite	eq
   1dc0e:	2300      	moveq	r3, #0
   1dc10:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   1dc14:	2b00      	cmp	r3, #0
   1dc16:	d184      	bne.n	1db22 <_Unwind_VRS_Pop+0x2e>
   1dc18:	2e0f      	cmp	r6, #15
   1dc1a:	d810      	bhi.n	1dc3e <_Unwind_VRS_Pop+0x14a>
   1dc1c:	682b      	ldr	r3, [r5, #0]
   1dc1e:	f013 0f01 	tst.w	r3, #1	; 0x1
   1dc22:	d00c      	beq.n	1dc3e <_Unwind_VRS_Pop+0x14a>
   1dc24:	f023 0101 	bic.w	r1, r3, #1	; 0x1
   1dc28:	2a05      	cmp	r2, #5
   1dc2a:	6029      	str	r1, [r5, #0]
   1dc2c:	f000 80a9 	beq.w	1dd82 <_Unwind_VRS_Pop+0x28e>
   1dc30:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   1dc34:	4628      	mov	r0, r5
   1dc36:	f840 3b48 	str.w	r3, [r0], #72
   1dc3a:	f000 f8bb 	bl	1ddb4 <__gnu_Unwind_Save_VFP>
   1dc3e:	2f00      	cmp	r7, #0
   1dc40:	dd03      	ble.n	1dc4a <_Unwind_VRS_Pop+0x156>
   1dc42:	682b      	ldr	r3, [r5, #0]
   1dc44:	f013 0f04 	tst.w	r3, #4	; 0x4
   1dc48:	d177      	bne.n	1dd3a <_Unwind_VRS_Pop+0x246>
   1dc4a:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1dc4e:	f040 8094 	bne.w	1dd7a <_Unwind_VRS_Pop+0x286>
   1dc52:	2e0f      	cmp	r6, #15
   1dc54:	d96b      	bls.n	1dd2e <_Unwind_VRS_Pop+0x23a>
   1dc56:	2f00      	cmp	r7, #0
   1dc58:	d160      	bne.n	1dd1c <_Unwind_VRS_Pop+0x228>
   1dc5a:	4622      	mov	r2, r4
   1dc5c:	6ba8      	ldr	r0, [r5, #56]
   1dc5e:	2a00      	cmp	r2, #0
   1dc60:	4684      	mov	ip, r0
   1dc62:	dd0f      	ble.n	1dc84 <_Unwind_VRS_Pop+0x190>
   1dc64:	0054      	lsls	r4, r2, #1
   1dc66:	2100      	movs	r1, #0
   1dc68:	00f2      	lsls	r2, r6, #3
   1dc6a:	eb0d 0c02 	add.w	ip, sp, r2
   1dc6e:	460a      	mov	r2, r1
   1dc70:	5813      	ldr	r3, [r2, r0]
   1dc72:	3101      	adds	r1, #1
   1dc74:	f84c 3002 	str.w	r3, [ip, r2]
   1dc78:	3204      	adds	r2, #4
   1dc7a:	42a1      	cmp	r1, r4
   1dc7c:	d1f8      	bne.n	1dc70 <_Unwind_VRS_Pop+0x17c>
   1dc7e:	008b      	lsls	r3, r1, #2
   1dc80:	eb00 0c03 	add.w	ip, r0, r3
   1dc84:	2f00      	cmp	r7, #0
   1dc86:	dd13      	ble.n	1dcb0 <_Unwind_VRS_Pop+0x1bc>
   1dc88:	2e10      	cmp	r6, #16
   1dc8a:	bf2c      	ite	cs
   1dc8c:	4633      	movcs	r3, r6
   1dc8e:	2310      	movcc	r3, #16
   1dc90:	3b10      	subs	r3, #16
   1dc92:	00db      	lsls	r3, r3, #3
   1dc94:	aa42      	add	r2, sp, #264
   1dc96:	2000      	movs	r0, #0
   1dc98:	007c      	lsls	r4, r7, #1
   1dc9a:	18d2      	adds	r2, r2, r3
   1dc9c:	4601      	mov	r1, r0
   1dc9e:	f85c 3001 	ldr.w	r3, [ip, r1]
   1dca2:	3001      	adds	r0, #1
   1dca4:	5053      	str	r3, [r2, r1]
   1dca6:	3104      	adds	r1, #4
   1dca8:	42a0      	cmp	r0, r4
   1dcaa:	d1f8      	bne.n	1dc9e <_Unwind_VRS_Pop+0x1aa>
   1dcac:	0083      	lsls	r3, r0, #2
   1dcae:	449c      	add	ip, r3
   1dcb0:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1dcb4:	d159      	bne.n	1dd6a <_Unwind_VRS_Pop+0x276>
   1dcb6:	2e0f      	cmp	r6, #15
   1dcb8:	f8c5 c038 	str.w	ip, [r5, #56]
   1dcbc:	d802      	bhi.n	1dcc4 <_Unwind_VRS_Pop+0x1d0>
   1dcbe:	4668      	mov	r0, sp
   1dcc0:	f000 f87c 	bl	1ddbc <__gnu_Unwind_Restore_VFP_D>
   1dcc4:	2f00      	cmp	r7, #0
   1dcc6:	f77f af71 	ble.w	1dbac <_Unwind_VRS_Pop+0xb8>
   1dcca:	a842      	add	r0, sp, #264
   1dccc:	f000 f87e 	bl	1ddcc <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1dcd0:	2000      	movs	r0, #0
   1dcd2:	e727      	b.n	1db24 <_Unwind_VRS_Pop+0x30>
   1dcd4:	6803      	ldr	r3, [r0, #0]
   1dcd6:	f013 0f08 	tst.w	r3, #8	; 0x8
   1dcda:	d13e      	bne.n	1dd5a <_Unwind_VRS_Pop+0x266>
   1dcdc:	af22      	add	r7, sp, #136
   1dcde:	4638      	mov	r0, r7
   1dce0:	f000 f89e 	bl	1de20 <__gnu_Unwind_Save_WMMXD>
   1dce4:	6ba8      	ldr	r0, [r5, #56]
   1dce6:	ea4f 0e44 	mov.w	lr, r4, lsl #1
   1dcea:	4603      	mov	r3, r0
   1dcec:	b174      	cbz	r4, 1dd0c <_Unwind_VRS_Pop+0x218>
   1dcee:	00f3      	lsls	r3, r6, #3
   1dcf0:	eb07 0c03 	add.w	ip, r7, r3
   1dcf4:	4671      	mov	r1, lr
   1dcf6:	2200      	movs	r2, #0
   1dcf8:	5813      	ldr	r3, [r2, r0]
   1dcfa:	f84c 3002 	str.w	r3, [ip, r2]
   1dcfe:	3204      	adds	r2, #4
   1dd00:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
   1dd04:	d1f8      	bne.n	1dcf8 <_Unwind_VRS_Pop+0x204>
   1dd06:	ea4f 038e 	mov.w	r3, lr, lsl #2
   1dd0a:	4403      	add	r3, r0
   1dd0c:	4638      	mov	r0, r7
   1dd0e:	63ab      	str	r3, [r5, #56]
   1dd10:	f000 f864 	bl	1dddc <__gnu_Unwind_Restore_WMMXD>
   1dd14:	2000      	movs	r0, #0
   1dd16:	e705      	b.n	1db24 <_Unwind_VRS_Pop+0x30>
   1dd18:	4627      	mov	r7, r4
   1dd1a:	e776      	b.n	1dc0a <_Unwind_VRS_Pop+0x116>
   1dd1c:	a842      	add	r0, sp, #264
   1dd1e:	f000 f859 	bl	1ddd4 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1dd22:	2f00      	cmp	r7, #0
   1dd24:	bfc8      	it	gt
   1dd26:	f1c6 0210 	rsbgt	r2, r6, #16	; 0x10
   1dd2a:	dc97      	bgt.n	1dc5c <_Unwind_VRS_Pop+0x168>
   1dd2c:	e795      	b.n	1dc5a <_Unwind_VRS_Pop+0x166>
   1dd2e:	4668      	mov	r0, sp
   1dd30:	f000 f848 	bl	1ddc4 <__gnu_Unwind_Save_VFP_D>
   1dd34:	2f00      	cmp	r7, #0
   1dd36:	d090      	beq.n	1dc5a <_Unwind_VRS_Pop+0x166>
   1dd38:	e7f0      	b.n	1dd1c <_Unwind_VRS_Pop+0x228>
   1dd3a:	f023 0304 	bic.w	r3, r3, #4	; 0x4
   1dd3e:	4628      	mov	r0, r5
   1dd40:	f840 3bd0 	str.w	r3, [r0], #208
   1dd44:	f000 f846 	bl	1ddd4 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1dd48:	e77f      	b.n	1dc4a <_Unwind_VRS_Pop+0x156>
   1dd4a:	f023 0310 	bic.w	r3, r3, #16	; 0x10
   1dd4e:	6003      	str	r3, [r0, #0]
   1dd50:	f500 700c 	add.w	r0, r0, #560	; 0x230
   1dd54:	f000 f890 	bl	1de78 <__gnu_Unwind_Save_WMMXC>
   1dd58:	e6f6      	b.n	1db48 <_Unwind_VRS_Pop+0x54>
   1dd5a:	f023 0308 	bic.w	r3, r3, #8	; 0x8
   1dd5e:	6003      	str	r3, [r0, #0]
   1dd60:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   1dd64:	f000 f85c 	bl	1de20 <__gnu_Unwind_Save_WMMXD>
   1dd68:	e7b8      	b.n	1dcdc <_Unwind_VRS_Pop+0x1e8>
   1dd6a:	f10c 0304 	add.w	r3, ip, #4	; 0x4
   1dd6e:	4668      	mov	r0, sp
   1dd70:	63ab      	str	r3, [r5, #56]
   1dd72:	f000 f81b 	bl	1ddac <__gnu_Unwind_Restore_VFP>
   1dd76:	2000      	movs	r0, #0
   1dd78:	e6d4      	b.n	1db24 <_Unwind_VRS_Pop+0x30>
   1dd7a:	4668      	mov	r0, sp
   1dd7c:	f000 f81a 	bl	1ddb4 <__gnu_Unwind_Save_VFP>
   1dd80:	e7cf      	b.n	1dd22 <_Unwind_VRS_Pop+0x22e>
   1dd82:	f041 0302 	orr.w	r3, r1, #2	; 0x2
   1dd86:	4628      	mov	r0, r5
   1dd88:	f840 3b48 	str.w	r3, [r0], #72
   1dd8c:	f000 f81a 	bl	1ddc4 <__gnu_Unwind_Save_VFP_D>
   1dd90:	e755      	b.n	1dc3e <_Unwind_VRS_Pop+0x14a>
   1dd92:	46c0      	nop			(mov r8, r8)

0001dd94 <__restore_core_regs>:
   1dd94:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1dd98:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1dd9c:	469c      	mov	ip, r3
   1dd9e:	46a6      	mov	lr, r4
   1dda0:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1dda4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1dda8:	46e5      	mov	sp, ip
   1ddaa:	bd00      	pop	{pc}

0001ddac <__gnu_Unwind_Restore_VFP>:
   1ddac:	ec90 0b21 	fldmiax	r0, {d0-d15}
   1ddb0:	4770      	bx	lr
   1ddb2:	46c0      	nop			(mov r8, r8)

0001ddb4 <__gnu_Unwind_Save_VFP>:
   1ddb4:	ec80 0b21 	fstmiax	r0, {d0-d15}
   1ddb8:	4770      	bx	lr
   1ddba:	46c0      	nop			(mov r8, r8)

0001ddbc <__gnu_Unwind_Restore_VFP_D>:
   1ddbc:	ec90 0b20 	vldmia	r0, {d0-d15}
   1ddc0:	4770      	bx	lr
   1ddc2:	46c0      	nop			(mov r8, r8)

0001ddc4 <__gnu_Unwind_Save_VFP_D>:
   1ddc4:	ec80 0b20 	vstmia	r0, {d0-d15}
   1ddc8:	4770      	bx	lr
   1ddca:	46c0      	nop			(mov r8, r8)

0001ddcc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1ddcc:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1ddd0:	4770      	bx	lr
   1ddd2:	46c0      	nop			(mov r8, r8)

0001ddd4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1ddd4:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1ddd8:	4770      	bx	lr
   1ddda:	46c0      	nop			(mov r8, r8)

0001dddc <__gnu_Unwind_Restore_WMMXD>:
   1dddc:	ecf0 0102 	ldfe	f0, [r0], #8
   1dde0:	ecf0 1102 	ldfe	f1, [r0], #8
   1dde4:	ecf0 2102 	ldfe	f2, [r0], #8
   1dde8:	ecf0 3102 	ldfe	f3, [r0], #8
   1ddec:	ecf0 4102 	ldfe	f4, [r0], #8
   1ddf0:	ecf0 5102 	ldfe	f5, [r0], #8
   1ddf4:	ecf0 6102 	ldfe	f6, [r0], #8
   1ddf8:	ecf0 7102 	ldfe	f7, [r0], #8
   1ddfc:	ecf0 8102 	ldfp	f0, [r0], #8
   1de00:	ecf0 9102 	ldfp	f1, [r0], #8
   1de04:	ecf0 a102 	ldfp	f2, [r0], #8
   1de08:	ecf0 b102 	ldfp	f3, [r0], #8
   1de0c:	ecf0 c102 	ldfp	f4, [r0], #8
   1de10:	ecf0 d102 	ldfp	f5, [r0], #8
   1de14:	ecf0 e102 	ldfp	f6, [r0], #8
   1de18:	ecf0 f102 	ldfp	f7, [r0], #8
   1de1c:	4770      	bx	lr
   1de1e:	46c0      	nop			(mov r8, r8)

0001de20 <__gnu_Unwind_Save_WMMXD>:
   1de20:	ece0 0102 	stfe	f0, [r0], #8
   1de24:	ece0 1102 	stfe	f1, [r0], #8
   1de28:	ece0 2102 	stfe	f2, [r0], #8
   1de2c:	ece0 3102 	stfe	f3, [r0], #8
   1de30:	ece0 4102 	stfe	f4, [r0], #8
   1de34:	ece0 5102 	stfe	f5, [r0], #8
   1de38:	ece0 6102 	stfe	f6, [r0], #8
   1de3c:	ece0 7102 	stfe	f7, [r0], #8
   1de40:	ece0 8102 	stfp	f0, [r0], #8
   1de44:	ece0 9102 	stfp	f1, [r0], #8
   1de48:	ece0 a102 	stfp	f2, [r0], #8
   1de4c:	ece0 b102 	stfp	f3, [r0], #8
   1de50:	ece0 c102 	stfp	f4, [r0], #8
   1de54:	ece0 d102 	stfp	f5, [r0], #8
   1de58:	ece0 e102 	stfp	f6, [r0], #8
   1de5c:	ece0 f102 	stfp	f7, [r0], #8
   1de60:	4770      	bx	lr
   1de62:	46c0      	nop			(mov r8, r8)

0001de64 <__gnu_Unwind_Restore_WMMXC>:
   1de64:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1de68:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1de6c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1de70:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1de74:	4770      	bx	lr
   1de76:	46c0      	nop			(mov r8, r8)

0001de78 <__gnu_Unwind_Save_WMMXC>:
   1de78:	fca0 8101 	stc2	1, cr8, [r0], #4
   1de7c:	fca0 9101 	stc2	1, cr9, [r0], #4
   1de80:	fca0 a101 	stc2	1, cr10, [r0], #4
   1de84:	fca0 b101 	stc2	1, cr11, [r0], #4
   1de88:	4770      	bx	lr
   1de8a:	46c0      	nop			(mov r8, r8)

0001de8c <_Unwind_RaiseException>:
   1de8c:	46ec      	mov	ip, sp
   1de8e:	b500      	push	{lr}
   1de90:	e92d 5000 	stmdb	sp!, {ip, lr}
   1de94:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1de98:	f04f 0300 	mov.w	r3, #0	; 0x0
   1de9c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1dea0:	a901      	add	r1, sp, #4
   1dea2:	f7ff fdc1 	bl	1da28 <__gnu_Unwind_RaiseException>
   1dea6:	f8dd e040 	ldr.w	lr, [sp, #64]
   1deaa:	b012      	add	sp, #72
   1deac:	4770      	bx	lr
   1deae:	46c0      	nop			(mov r8, r8)

0001deb0 <_Unwind_Resume>:
   1deb0:	46ec      	mov	ip, sp
   1deb2:	b500      	push	{lr}
   1deb4:	e92d 5000 	stmdb	sp!, {ip, lr}
   1deb8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1debc:	f04f 0300 	mov.w	r3, #0	; 0x0
   1dec0:	e92d 000c 	stmdb	sp!, {r2, r3}
   1dec4:	a901      	add	r1, sp, #4
   1dec6:	f7ff fdf5 	bl	1dab4 <__gnu_Unwind_Resume>
   1deca:	f8dd e040 	ldr.w	lr, [sp, #64]
   1dece:	b012      	add	sp, #72
   1ded0:	4770      	bx	lr
   1ded2:	46c0      	nop			(mov r8, r8)

0001ded4 <_Unwind_Resume_or_Rethrow>:
   1ded4:	46ec      	mov	ip, sp
   1ded6:	b500      	push	{lr}
   1ded8:	e92d 5000 	stmdb	sp!, {ip, lr}
   1dedc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1dee0:	f04f 0300 	mov.w	r3, #0	; 0x0
   1dee4:	e92d 000c 	stmdb	sp!, {r2, r3}
   1dee8:	a901      	add	r1, sp, #4
   1deea:	f7ff fdd5 	bl	1da98 <__gnu_Unwind_Resume_or_Rethrow>
   1deee:	f8dd e040 	ldr.w	lr, [sp, #64]
   1def2:	b012      	add	sp, #72
   1def4:	4770      	bx	lr
   1def6:	46c0      	nop			(mov r8, r8)

0001def8 <_Unwind_ForcedUnwind>:
   1def8:	46ec      	mov	ip, sp
   1defa:	b500      	push	{lr}
   1defc:	e92d 5000 	stmdb	sp!, {ip, lr}
   1df00:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1df04:	f04f 0300 	mov.w	r3, #0	; 0x0
   1df08:	e92d 000c 	stmdb	sp!, {r2, r3}
   1df0c:	ab01      	add	r3, sp, #4
   1df0e:	f7ff fd67 	bl	1d9e0 <__gnu_Unwind_ForcedUnwind>
   1df12:	f8dd e040 	ldr.w	lr, [sp, #64]
   1df16:	b012      	add	sp, #72
   1df18:	4770      	bx	lr
   1df1a:	46c0      	nop			(mov r8, r8)

0001df1c <_Unwind_Backtrace>:
   1df1c:	46ec      	mov	ip, sp
   1df1e:	b500      	push	{lr}
   1df20:	e92d 5000 	stmdb	sp!, {ip, lr}
   1df24:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1df28:	f04f 0300 	mov.w	r3, #0	; 0x0
   1df2c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1df30:	aa01      	add	r2, sp, #4
   1df32:	f7ff fc99 	bl	1d868 <__gnu_Unwind_Backtrace>
   1df36:	f8dd e040 	ldr.w	lr, [sp, #64]
   1df3a:	b012      	add	sp, #72
   1df3c:	4770      	bx	lr
   1df3e:	46c0      	nop			(mov r8, r8)

0001df40 <next_unwind_byte>:
   1df40:	7a03      	ldrb	r3, [r0, #8]
   1df42:	b993      	cbnz	r3, 1df6a <next_unwind_byte+0x2a>
   1df44:	7a42      	ldrb	r2, [r0, #9]
   1df46:	b172      	cbz	r2, 1df66 <next_unwind_byte+0x26>
   1df48:	3a01      	subs	r2, #1
   1df4a:	6843      	ldr	r3, [r0, #4]
   1df4c:	7242      	strb	r2, [r0, #9]
   1df4e:	f853 2b04 	ldr.w	r2, [r3], #4
   1df52:	6002      	str	r2, [r0, #0]
   1df54:	2203      	movs	r2, #3
   1df56:	6043      	str	r3, [r0, #4]
   1df58:	7202      	strb	r2, [r0, #8]
   1df5a:	6803      	ldr	r3, [r0, #0]
   1df5c:	0e1a      	lsrs	r2, r3, #24
   1df5e:	021b      	lsls	r3, r3, #8
   1df60:	6003      	str	r3, [r0, #0]
   1df62:	4610      	mov	r0, r2
   1df64:	4770      	bx	lr
   1df66:	32b0      	adds	r2, #176
   1df68:	e7fb      	b.n	1df62 <next_unwind_byte+0x22>
   1df6a:	3b01      	subs	r3, #1
   1df6c:	7203      	strb	r3, [r0, #8]
   1df6e:	e7f4      	b.n	1df5a <next_unwind_byte+0x1a>

0001df70 <_Unwind_GetTextRelBase>:
   1df70:	b500      	push	{lr}
   1df72:	b081      	sub	sp, #4
   1df74:	f004 f92e 	bl	221d4 <abort>

0001df78 <_Unwind_GetDataRelBase>:
   1df78:	b500      	push	{lr}
   1df7a:	b081      	sub	sp, #4
   1df7c:	f004 f92a 	bl	221d4 <abort>

0001df80 <_Unwind_GetGR>:
   1df80:	b500      	push	{lr}
   1df82:	b085      	sub	sp, #20
   1df84:	460a      	mov	r2, r1
   1df86:	ab03      	add	r3, sp, #12
   1df88:	2100      	movs	r1, #0
   1df8a:	9300      	str	r3, [sp, #0]
   1df8c:	460b      	mov	r3, r1
   1df8e:	f7ff f9b7 	bl	1d300 <_Unwind_VRS_Get>
   1df92:	9803      	ldr	r0, [sp, #12]
   1df94:	b005      	add	sp, #20
   1df96:	bd00      	pop	{pc}

0001df98 <unwind_UCB_from_context>:
   1df98:	b500      	push	{lr}
   1df9a:	210c      	movs	r1, #12
   1df9c:	b081      	sub	sp, #4
   1df9e:	f7ff ffef 	bl	1df80 <_Unwind_GetGR>
   1dfa2:	b001      	add	sp, #4
   1dfa4:	bd00      	pop	{pc}
   1dfa6:	46c0      	nop			(mov r8, r8)

0001dfa8 <_Unwind_GetLanguageSpecificData>:
   1dfa8:	b500      	push	{lr}
   1dfaa:	b081      	sub	sp, #4
   1dfac:	f7ff fff4 	bl	1df98 <unwind_UCB_from_context>
   1dfb0:	6cc2      	ldr	r2, [r0, #76]
   1dfb2:	79d3      	ldrb	r3, [r2, #7]
   1dfb4:	1d10      	adds	r0, r2, #4
   1dfb6:	3301      	adds	r3, #1
   1dfb8:	009b      	lsls	r3, r3, #2
   1dfba:	18c0      	adds	r0, r0, r3
   1dfbc:	b001      	add	sp, #4
   1dfbe:	bd00      	pop	{pc}

0001dfc0 <_Unwind_GetRegionStart>:
   1dfc0:	b500      	push	{lr}
   1dfc2:	b081      	sub	sp, #4
   1dfc4:	f7ff ffe8 	bl	1df98 <unwind_UCB_from_context>
   1dfc8:	6c80      	ldr	r0, [r0, #72]
   1dfca:	b001      	add	sp, #4
   1dfcc:	bd00      	pop	{pc}
   1dfce:	46c0      	nop			(mov r8, r8)

0001dfd0 <__gnu_unwind_execute>:
   1dfd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dfd4:	b084      	sub	sp, #16
   1dfd6:	4606      	mov	r6, r0
   1dfd8:	460f      	mov	r7, r1
   1dfda:	f04f 0800 	mov.w	r8, #0	; 0x0
   1dfde:	f10d 0a0c 	add.w	sl, sp, #12	; 0xc
   1dfe2:	f44f 697f 	mov.w	r9, #4080	; 0xff0
   1dfe6:	4638      	mov	r0, r7
   1dfe8:	f7ff ffaa 	bl	1df40 <next_unwind_byte>
   1dfec:	28b0      	cmp	r0, #176
   1dfee:	4604      	mov	r4, r0
   1dff0:	d02a      	beq.n	1e048 <__gnu_unwind_execute+0x78>
   1dff2:	f010 0180 	ands.w	r1, r0, #128	; 0x80
   1dff6:	d02f      	beq.n	1e058 <__gnu_unwind_execute+0x88>
   1dff8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1dffc:	2b80      	cmp	r3, #128
   1dffe:	d05d      	beq.n	1e0bc <__gnu_unwind_execute+0xec>
   1e000:	2b90      	cmp	r3, #144
   1e002:	d143      	bne.n	1e08c <__gnu_unwind_execute+0xbc>
   1e004:	f000 020f 	and.w	r2, r0, #15	; 0xf
   1e008:	2a0f      	cmp	r2, #15
   1e00a:	bf14      	ite	ne
   1e00c:	2300      	movne	r3, #0
   1e00e:	2301      	moveq	r3, #1
   1e010:	2a0d      	cmp	r2, #13
   1e012:	bf14      	ite	ne
   1e014:	461c      	movne	r4, r3
   1e016:	f043 0401 	orreq.w	r4, r3, #1	; 0x1
   1e01a:	2c00      	cmp	r4, #0
   1e01c:	d14c      	bne.n	1e0b8 <__gnu_unwind_execute+0xe8>
   1e01e:	4621      	mov	r1, r4
   1e020:	4623      	mov	r3, r4
   1e022:	4630      	mov	r0, r6
   1e024:	f8cd a000 	str.w	sl, [sp]
   1e028:	f7ff f96a 	bl	1d300 <_Unwind_VRS_Get>
   1e02c:	4621      	mov	r1, r4
   1e02e:	220d      	movs	r2, #13
   1e030:	4623      	mov	r3, r4
   1e032:	4630      	mov	r0, r6
   1e034:	f8cd a000 	str.w	sl, [sp]
   1e038:	f7ff f98a 	bl	1d350 <_Unwind_VRS_Set>
   1e03c:	4638      	mov	r0, r7
   1e03e:	f7ff ff7f 	bl	1df40 <next_unwind_byte>
   1e042:	28b0      	cmp	r0, #176
   1e044:	4604      	mov	r4, r0
   1e046:	d1d4      	bne.n	1dff2 <__gnu_unwind_execute+0x22>
   1e048:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1e04c:	f000 80c3 	beq.w	1e1d6 <__gnu_unwind_execute+0x206>
   1e050:	2000      	movs	r0, #0
   1e052:	b004      	add	sp, #16
   1e054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e058:	0083      	lsls	r3, r0, #2
   1e05a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1e05e:	1d1d      	adds	r5, r3, #4
   1e060:	220d      	movs	r2, #13
   1e062:	4630      	mov	r0, r6
   1e064:	460b      	mov	r3, r1
   1e066:	f8cd a000 	str.w	sl, [sp]
   1e06a:	f7ff f949 	bl	1d300 <_Unwind_VRS_Get>
   1e06e:	f014 0f40 	tst.w	r4, #64	; 0x40
   1e072:	d03b      	beq.n	1e0ec <__gnu_unwind_execute+0x11c>
   1e074:	9b03      	ldr	r3, [sp, #12]
   1e076:	1b5b      	subs	r3, r3, r5
   1e078:	9303      	str	r3, [sp, #12]
   1e07a:	2100      	movs	r1, #0
   1e07c:	4630      	mov	r0, r6
   1e07e:	220d      	movs	r2, #13
   1e080:	460b      	mov	r3, r1
   1e082:	f8cd a000 	str.w	sl, [sp]
   1e086:	f7ff f963 	bl	1d350 <_Unwind_VRS_Set>
   1e08a:	e7ac      	b.n	1dfe6 <__gnu_unwind_execute+0x16>
   1e08c:	2ba0      	cmp	r3, #160
   1e08e:	d131      	bne.n	1e0f4 <__gnu_unwind_execute+0x124>
   1e090:	ea6f 0300 	mvn.w	r3, r0
   1e094:	f003 0307 	and.w	r3, r3, #7	; 0x7
   1e098:	fa49 f303 	asr.w	r3, r9, r3
   1e09c:	f010 0f08 	tst.w	r0, #8	; 0x8
   1e0a0:	f403 627f 	and.w	r2, r3, #4080	; 0xff0
   1e0a4:	bf18      	it	ne
   1e0a6:	f442 4280 	orrne.w	r2, r2, #16384	; 0x4000
   1e0aa:	2100      	movs	r1, #0
   1e0ac:	4630      	mov	r0, r6
   1e0ae:	460b      	mov	r3, r1
   1e0b0:	f7ff fd20 	bl	1daf4 <_Unwind_VRS_Pop>
   1e0b4:	2800      	cmp	r0, #0
   1e0b6:	d096      	beq.n	1dfe6 <__gnu_unwind_execute+0x16>
   1e0b8:	2009      	movs	r0, #9
   1e0ba:	e7ca      	b.n	1e052 <__gnu_unwind_execute+0x82>
   1e0bc:	0204      	lsls	r4, r0, #8
   1e0be:	4638      	mov	r0, r7
   1e0c0:	f7ff ff3e 	bl	1df40 <next_unwind_byte>
   1e0c4:	4320      	orrs	r0, r4
   1e0c6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1e0ca:	d0f5      	beq.n	1e0b8 <__gnu_unwind_execute+0xe8>
   1e0cc:	0104      	lsls	r4, r0, #4
   1e0ce:	0422      	lsls	r2, r4, #16
   1e0d0:	2100      	movs	r1, #0
   1e0d2:	0c12      	lsrs	r2, r2, #16
   1e0d4:	4630      	mov	r0, r6
   1e0d6:	460b      	mov	r3, r1
   1e0d8:	f7ff fd0c 	bl	1daf4 <_Unwind_VRS_Pop>
   1e0dc:	2800      	cmp	r0, #0
   1e0de:	d1eb      	bne.n	1e0b8 <__gnu_unwind_execute+0xe8>
   1e0e0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1e0e4:	bf18      	it	ne
   1e0e6:	f04f 0801 	movne.w	r8, #1	; 0x1
   1e0ea:	e77c      	b.n	1dfe6 <__gnu_unwind_execute+0x16>
   1e0ec:	9b03      	ldr	r3, [sp, #12]
   1e0ee:	195b      	adds	r3, r3, r5
   1e0f0:	9303      	str	r3, [sp, #12]
   1e0f2:	e7c2      	b.n	1e07a <__gnu_unwind_execute+0xaa>
   1e0f4:	2bb0      	cmp	r3, #176
   1e0f6:	d014      	beq.n	1e122 <__gnu_unwind_execute+0x152>
   1e0f8:	2bc0      	cmp	r3, #192
   1e0fa:	d02c      	beq.n	1e156 <__gnu_unwind_execute+0x186>
   1e0fc:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1e100:	2bd0      	cmp	r3, #208
   1e102:	d1d9      	bne.n	1e0b8 <__gnu_unwind_execute+0xe8>
   1e104:	f000 0207 	and.w	r2, r0, #7	; 0x7
   1e108:	3201      	adds	r2, #1
   1e10a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1e10e:	4630      	mov	r0, r6
   1e110:	2101      	movs	r1, #1
   1e112:	3bcb      	subs	r3, #203
   1e114:	f7ff fcee 	bl	1daf4 <_Unwind_VRS_Pop>
   1e118:	2800      	cmp	r0, #0
   1e11a:	f43f af64 	beq.w	1dfe6 <__gnu_unwind_execute+0x16>
   1e11e:	2009      	movs	r0, #9
   1e120:	e797      	b.n	1e052 <__gnu_unwind_execute+0x82>
   1e122:	28b1      	cmp	r0, #177
   1e124:	d03a      	beq.n	1e19c <__gnu_unwind_execute+0x1cc>
   1e126:	28b2      	cmp	r0, #178
   1e128:	f000 808f 	beq.w	1e24a <__gnu_unwind_execute+0x27a>
   1e12c:	28b3      	cmp	r0, #179
   1e12e:	d047      	beq.n	1e1c0 <__gnu_unwind_execute+0x1f0>
   1e130:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1e134:	2bb4      	cmp	r3, #180
   1e136:	d06e      	beq.n	1e216 <__gnu_unwind_execute+0x246>
   1e138:	f000 0207 	and.w	r2, r0, #7	; 0x7
   1e13c:	3201      	adds	r2, #1
   1e13e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1e142:	2101      	movs	r1, #1
   1e144:	4630      	mov	r0, r6
   1e146:	460b      	mov	r3, r1
   1e148:	f7ff fcd4 	bl	1daf4 <_Unwind_VRS_Pop>
   1e14c:	2800      	cmp	r0, #0
   1e14e:	f43f af4a 	beq.w	1dfe6 <__gnu_unwind_execute+0x16>
   1e152:	2009      	movs	r0, #9
   1e154:	e77d      	b.n	1e052 <__gnu_unwind_execute+0x82>
   1e156:	28c6      	cmp	r0, #198
   1e158:	d06c      	beq.n	1e234 <__gnu_unwind_execute+0x264>
   1e15a:	28c7      	cmp	r0, #199
   1e15c:	f000 809a 	beq.w	1e294 <__gnu_unwind_execute+0x2c4>
   1e160:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1e164:	2bc0      	cmp	r3, #192
   1e166:	d047      	beq.n	1e1f8 <__gnu_unwind_execute+0x228>
   1e168:	28c8      	cmp	r0, #200
   1e16a:	f000 80a7 	beq.w	1e2bc <__gnu_unwind_execute+0x2ec>
   1e16e:	28c9      	cmp	r0, #201
   1e170:	d1a2      	bne.n	1e0b8 <__gnu_unwind_execute+0xe8>
   1e172:	4638      	mov	r0, r7
   1e174:	f7ff fee4 	bl	1df40 <next_unwind_byte>
   1e178:	4602      	mov	r2, r0
   1e17a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1e17e:	f002 020f 	and.w	r2, r2, #15	; 0xf
   1e182:	3201      	adds	r2, #1
   1e184:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   1e188:	4630      	mov	r0, r6
   1e18a:	2101      	movs	r1, #1
   1e18c:	2305      	movs	r3, #5
   1e18e:	f7ff fcb1 	bl	1daf4 <_Unwind_VRS_Pop>
   1e192:	2800      	cmp	r0, #0
   1e194:	f43f af27 	beq.w	1dfe6 <__gnu_unwind_execute+0x16>
   1e198:	2009      	movs	r0, #9
   1e19a:	e75a      	b.n	1e052 <__gnu_unwind_execute+0x82>
   1e19c:	4638      	mov	r0, r7
   1e19e:	f7ff fecf 	bl	1df40 <next_unwind_byte>
   1e1a2:	4602      	mov	r2, r0
   1e1a4:	2800      	cmp	r0, #0
   1e1a6:	d087      	beq.n	1e0b8 <__gnu_unwind_execute+0xe8>
   1e1a8:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
   1e1ac:	d184      	bne.n	1e0b8 <__gnu_unwind_execute+0xe8>
   1e1ae:	4630      	mov	r0, r6
   1e1b0:	460b      	mov	r3, r1
   1e1b2:	f7ff fc9f 	bl	1daf4 <_Unwind_VRS_Pop>
   1e1b6:	2800      	cmp	r0, #0
   1e1b8:	f43f af15 	beq.w	1dfe6 <__gnu_unwind_execute+0x16>
   1e1bc:	2009      	movs	r0, #9
   1e1be:	e748      	b.n	1e052 <__gnu_unwind_execute+0x82>
   1e1c0:	4638      	mov	r0, r7
   1e1c2:	f7ff febd 	bl	1df40 <next_unwind_byte>
   1e1c6:	f000 020f 	and.w	r2, r0, #15	; 0xf
   1e1ca:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1e1ce:	3201      	adds	r2, #1
   1e1d0:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   1e1d4:	e7b5      	b.n	1e142 <__gnu_unwind_execute+0x172>
   1e1d6:	ac03      	add	r4, sp, #12
   1e1d8:	4641      	mov	r1, r8
   1e1da:	220e      	movs	r2, #14
   1e1dc:	4643      	mov	r3, r8
   1e1de:	4630      	mov	r0, r6
   1e1e0:	9400      	str	r4, [sp, #0]
   1e1e2:	f7ff f88d 	bl	1d300 <_Unwind_VRS_Get>
   1e1e6:	4630      	mov	r0, r6
   1e1e8:	4641      	mov	r1, r8
   1e1ea:	220f      	movs	r2, #15
   1e1ec:	4643      	mov	r3, r8
   1e1ee:	9400      	str	r4, [sp, #0]
   1e1f0:	f7ff f8ae 	bl	1d350 <_Unwind_VRS_Set>
   1e1f4:	4640      	mov	r0, r8
   1e1f6:	e72c      	b.n	1e052 <__gnu_unwind_execute+0x82>
   1e1f8:	f000 020f 	and.w	r2, r0, #15	; 0xf
   1e1fc:	3201      	adds	r2, #1
   1e1fe:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1e202:	2103      	movs	r1, #3
   1e204:	4630      	mov	r0, r6
   1e206:	460b      	mov	r3, r1
   1e208:	f7ff fc74 	bl	1daf4 <_Unwind_VRS_Pop>
   1e20c:	2800      	cmp	r0, #0
   1e20e:	f43f aeea 	beq.w	1dfe6 <__gnu_unwind_execute+0x16>
   1e212:	2009      	movs	r0, #9
   1e214:	e71d      	b.n	1e052 <__gnu_unwind_execute+0x82>
   1e216:	f000 0203 	and.w	r2, r0, #3	; 0x3
   1e21a:	3201      	adds	r2, #1
   1e21c:	2102      	movs	r1, #2
   1e21e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   1e222:	4630      	mov	r0, r6
   1e224:	460b      	mov	r3, r1
   1e226:	f7ff fc65 	bl	1daf4 <_Unwind_VRS_Pop>
   1e22a:	2800      	cmp	r0, #0
   1e22c:	f43f aedb 	beq.w	1dfe6 <__gnu_unwind_execute+0x16>
   1e230:	2009      	movs	r0, #9
   1e232:	e70e      	b.n	1e052 <__gnu_unwind_execute+0x82>
   1e234:	4638      	mov	r0, r7
   1e236:	f7ff fe83 	bl	1df40 <next_unwind_byte>
   1e23a:	f000 020f 	and.w	r2, r0, #15	; 0xf
   1e23e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1e242:	3201      	adds	r2, #1
   1e244:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   1e248:	e7db      	b.n	1e202 <__gnu_unwind_execute+0x232>
   1e24a:	2100      	movs	r1, #0
   1e24c:	220d      	movs	r2, #13
   1e24e:	460b      	mov	r3, r1
   1e250:	4630      	mov	r0, r6
   1e252:	f8cd a000 	str.w	sl, [sp]
   1e256:	f7ff f853 	bl	1d300 <_Unwind_VRS_Get>
   1e25a:	4638      	mov	r0, r7
   1e25c:	f7ff fe70 	bl	1df40 <next_unwind_byte>
   1e260:	f010 0f80 	tst.w	r0, #128	; 0x80
   1e264:	d032      	beq.n	1e2cc <__gnu_unwind_execute+0x2fc>
   1e266:	2402      	movs	r4, #2
   1e268:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1e26c:	40a2      	lsls	r2, r4
   1e26e:	9b03      	ldr	r3, [sp, #12]
   1e270:	4638      	mov	r0, r7
   1e272:	189b      	adds	r3, r3, r2
   1e274:	9303      	str	r3, [sp, #12]
   1e276:	f7ff fe63 	bl	1df40 <next_unwind_byte>
   1e27a:	3407      	adds	r4, #7
   1e27c:	f010 0f80 	tst.w	r0, #128	; 0x80
   1e280:	d1f2      	bne.n	1e268 <__gnu_unwind_execute+0x298>
   1e282:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1e286:	40a3      	lsls	r3, r4
   1e288:	9a03      	ldr	r2, [sp, #12]
   1e28a:	f502 7201 	add.w	r2, r2, #516	; 0x204
   1e28e:	18d2      	adds	r2, r2, r3
   1e290:	9203      	str	r2, [sp, #12]
   1e292:	e6f2      	b.n	1e07a <__gnu_unwind_execute+0xaa>
   1e294:	4638      	mov	r0, r7
   1e296:	f7ff fe53 	bl	1df40 <next_unwind_byte>
   1e29a:	4602      	mov	r2, r0
   1e29c:	2800      	cmp	r0, #0
   1e29e:	f43f af0b 	beq.w	1e0b8 <__gnu_unwind_execute+0xe8>
   1e2a2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1e2a6:	f47f af07 	bne.w	1e0b8 <__gnu_unwind_execute+0xe8>
   1e2aa:	4630      	mov	r0, r6
   1e2ac:	2104      	movs	r1, #4
   1e2ae:	f7ff fc21 	bl	1daf4 <_Unwind_VRS_Pop>
   1e2b2:	2800      	cmp	r0, #0
   1e2b4:	f43f ae97 	beq.w	1dfe6 <__gnu_unwind_execute+0x16>
   1e2b8:	2009      	movs	r0, #9
   1e2ba:	e6ca      	b.n	1e052 <__gnu_unwind_execute+0x82>
   1e2bc:	4638      	mov	r0, r7
   1e2be:	f7ff fe3f 	bl	1df40 <next_unwind_byte>
   1e2c2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1e2c6:	4602      	mov	r2, r0
   1e2c8:	3310      	adds	r3, #16
   1e2ca:	e758      	b.n	1e17e <__gnu_unwind_execute+0x1ae>
   1e2cc:	3cb0      	subs	r4, #176
   1e2ce:	e7d8      	b.n	1e282 <__gnu_unwind_execute+0x2b2>

0001e2d0 <__gnu_unwind_frame>:
   1e2d0:	b500      	push	{lr}
   1e2d2:	f8d0 c04c 	ldr.w	ip, [r0, #76]
   1e2d6:	b085      	sub	sp, #20
   1e2d8:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1e2dc:	f10c 0208 	add.w	r2, ip, #8	; 0x8
   1e2e0:	021b      	lsls	r3, r3, #8
   1e2e2:	9301      	str	r3, [sp, #4]
   1e2e4:	2303      	movs	r3, #3
   1e2e6:	f88d 300c 	strb.w	r3, [sp, #12]
   1e2ea:	9202      	str	r2, [sp, #8]
   1e2ec:	f89c 2007 	ldrb.w	r2, [ip, #7]
   1e2f0:	4608      	mov	r0, r1
   1e2f2:	a901      	add	r1, sp, #4
   1e2f4:	f88d 200d 	strb.w	r2, [sp, #13]
   1e2f8:	f7ff fe6a 	bl	1dfd0 <__gnu_unwind_execute>
   1e2fc:	b005      	add	sp, #20
   1e2fe:	bd00      	pop	{pc}

0001e300 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
   1e300:	2100      	movs	r1, #0
  b  LoopCopyDataInit
   1e302:	e003      	b.n	1e30c <LoopCopyDataInit>

0001e304 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
   1e304:	4b09      	ldr	r3, [pc, #36]	(1e32c <LoopFillZerobss+0xc>)
  ldr  r3, [r3, r1]
   1e306:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
   1e308:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
   1e30a:	3104      	adds	r1, #4

0001e30c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
   1e30c:	4808      	ldr	r0, [pc, #32]	(1e330 <LoopFillZerobss+0x10>)
  ldr  r3, =_edata
   1e30e:	4b09      	ldr	r3, [pc, #36]	(1e334 <LoopFillZerobss+0x14>)
  adds  r2, r0, r1
   1e310:	1842      	adds	r2, r0, r1
  cmp  r2, r3
   1e312:	429a      	cmp	r2, r3
  bcc  CopyDataInit
   1e314:	d3f6      	bcc.n	1e304 <CopyDataInit>
  ldr  r2, =_sbss
   1e316:	4a08      	ldr	r2, [pc, #32]	(1e338 <LoopFillZerobss+0x18>)
  b  LoopFillZerobss
   1e318:	e002      	b.n	1e320 <LoopFillZerobss>

0001e31a <FillZerobss>:

/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
   1e31a:	2300      	movs	r3, #0
  str  r3, [r2], #4
   1e31c:	f842 3b04 	str.w	r3, [r2], #4

0001e320 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
   1e320:	4b06      	ldr	r3, [pc, #24]	(1e33c <LoopFillZerobss+0x1c>)
  cmp  r2, r3
   1e322:	429a      	cmp	r2, r3
  bcc  FillZerobss
   1e324:	d3f9      	bcc.n	1e31a <FillZerobss>
/* Call the application's entry point.*/
  bl  main
   1e326:	f7f0 fadf 	bl	e8e8 <main>
  bx  lr    
   1e32a:	4770      	bx	lr
   1e32c:	00025da8 	.word	0x00025da8
   1e330:	20000000 	.word	0x20000000
   1e334:	20000034 	.word	0x20000034
   1e338:	20000548 	.word	0x20000548
   1e33c:	2000067c 	.word	0x2000067c

0001e340 <ADC1_2_IRQHandler>:
 * @retval : None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
   1e340:	e7fe      	b.n	1e340 <ADC1_2_IRQHandler>
	...

0001e344 <_ZN6vectorIN11SharpSensor9SharpNameEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1e344:	b480      	push	{r7}
   1e346:	b083      	sub	sp, #12
   1e348:	af00      	add	r7, sp, #0
   1e34a:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1e34c:	687a      	ldr	r2, [r7, #4]
   1e34e:	f04f 0300 	mov.w	r3, #0	; 0x0
   1e352:	6093      	str	r3, [r2, #8]
}
   1e354:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1e358:	46bd      	mov	sp, r7
   1e35a:	bc80      	pop	{r7}
   1e35c:	4770      	bx	lr
   1e35e:	46c0      	nop			(mov r8, r8)

0001e360 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1e360:	b480      	push	{r7}
   1e362:	b083      	sub	sp, #12
   1e364:	af00      	add	r7, sp, #0
   1e366:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1e368:	687a      	ldr	r2, [r7, #4]
   1e36a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1e36e:	6093      	str	r3, [r2, #8]
}
   1e370:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1e374:	46bd      	mov	sp, r7
   1e376:	bc80      	pop	{r7}
   1e378:	4770      	bx	lr
   1e37a:	46c0      	nop			(mov r8, r8)

0001e37c <_ZN6vectorIN6Sensor12OutputSensorEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1e37c:	b480      	push	{r7}
   1e37e:	b083      	sub	sp, #12
   1e380:	af00      	add	r7, sp, #0
   1e382:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1e384:	687a      	ldr	r2, [r7, #4]
   1e386:	f04f 0300 	mov.w	r3, #0	; 0x0
   1e38a:	6093      	str	r3, [r2, #8]
}
   1e38c:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1e390:	46bd      	mov	sp, r7
   1e392:	bc80      	pop	{r7}
   1e394:	4770      	bx	lr
   1e396:	46c0      	nop			(mov r8, r8)

0001e398 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1e398:	b480      	push	{r7}
   1e39a:	b083      	sub	sp, #12
   1e39c:	af00      	add	r7, sp, #0
   1e39e:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1e3a0:	687a      	ldr	r2, [r7, #4]
   1e3a2:	f04f 0300 	mov.w	r3, #0	; 0x0
   1e3a6:	6093      	str	r3, [r2, #8]
}
   1e3a8:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1e3ac:	46bd      	mov	sp, r7
   1e3ae:	bc80      	pop	{r7}
   1e3b0:	4770      	bx	lr
   1e3b2:	46c0      	nop			(mov r8, r8)

0001e3b4 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei>:
    size = 0;
    table = 0x0;
}

template <typename T>
vector<T>::vector(int allocatedSize)
   1e3b4:	b580      	push	{r7, lr}
   1e3b6:	b082      	sub	sp, #8
   1e3b8:	af00      	add	r7, sp, #0
   1e3ba:	6078      	str	r0, [r7, #4]
   1e3bc:	6039      	str	r1, [r7, #0]
   1e3be:	687a      	ldr	r2, [r7, #4]
   1e3c0:	4b0e      	ldr	r3, [pc, #56]	(1e3fc <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei+0x48>)
   1e3c2:	6013      	str	r3, [r2, #0]
{
    this->allocatedSize = allocatedSize;
   1e3c4:	687a      	ldr	r2, [r7, #4]
   1e3c6:	683b      	ldr	r3, [r7, #0]
   1e3c8:	60d3      	str	r3, [r2, #12]
    table = new T[allocatedSize];
   1e3ca:	683b      	ldr	r3, [r7, #0]
   1e3cc:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1e3d0:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1e3d4:	ebc2 0303 	rsb	r3, r2, r3
   1e3d8:	4618      	mov	r0, r3
   1e3da:	f7f0 fc3d 	bl	ec58 <_Znaj>
   1e3de:	4603      	mov	r3, r0
   1e3e0:	461a      	mov	r2, r3
   1e3e2:	687b      	ldr	r3, [r7, #4]
   1e3e4:	605a      	str	r2, [r3, #4]
    size = 0;
   1e3e6:	687a      	ldr	r2, [r7, #4]
   1e3e8:	f04f 0300 	mov.w	r3, #0	; 0x0
   1e3ec:	6093      	str	r3, [r2, #8]
   1e3ee:	687b      	ldr	r3, [r7, #4]
}
   1e3f0:	4618      	mov	r0, r3
   1e3f2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1e3f6:	46bd      	mov	sp, r7
   1e3f8:	bd80      	pop	{r7, pc}
   1e3fa:	46c0      	nop			(mov r8, r8)
   1e3fc:	00024848 	.word	0x00024848

0001e400 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei>:
    size = 0;
    table = 0x0;
}

template <typename T>
vector<T>::vector(int allocatedSize)
   1e400:	b580      	push	{r7, lr}
   1e402:	b082      	sub	sp, #8
   1e404:	af00      	add	r7, sp, #0
   1e406:	6078      	str	r0, [r7, #4]
   1e408:	6039      	str	r1, [r7, #0]
   1e40a:	687a      	ldr	r2, [r7, #4]
   1e40c:	4b0b      	ldr	r3, [pc, #44]	(1e43c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei+0x3c>)
   1e40e:	6013      	str	r3, [r2, #0]
{
    this->allocatedSize = allocatedSize;
   1e410:	687a      	ldr	r2, [r7, #4]
   1e412:	683b      	ldr	r3, [r7, #0]
   1e414:	60d3      	str	r3, [r2, #12]
    table = new T[allocatedSize];
   1e416:	683b      	ldr	r3, [r7, #0]
   1e418:	4618      	mov	r0, r3
   1e41a:	f7f0 fc1d 	bl	ec58 <_Znaj>
   1e41e:	4603      	mov	r3, r0
   1e420:	461a      	mov	r2, r3
   1e422:	687b      	ldr	r3, [r7, #4]
   1e424:	605a      	str	r2, [r3, #4]
    size = 0;
   1e426:	687a      	ldr	r2, [r7, #4]
   1e428:	f04f 0300 	mov.w	r3, #0	; 0x0
   1e42c:	6093      	str	r3, [r2, #8]
   1e42e:	687b      	ldr	r3, [r7, #4]
}
   1e430:	4618      	mov	r0, r3
   1e432:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1e436:	46bd      	mov	sp, r7
   1e438:	bd80      	pop	{r7, pc}
   1e43a:	46c0      	nop			(mov r8, r8)
   1e43c:	00024858 	.word	0x00024858

0001e440 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei>:
    size = 0;
    table = 0x0;
}

template <typename T>
vector<T>::vector(int allocatedSize)
   1e440:	b580      	push	{r7, lr}
   1e442:	b082      	sub	sp, #8
   1e444:	af00      	add	r7, sp, #0
   1e446:	6078      	str	r0, [r7, #4]
   1e448:	6039      	str	r1, [r7, #0]
   1e44a:	687a      	ldr	r2, [r7, #4]
   1e44c:	4b0b      	ldr	r3, [pc, #44]	(1e47c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei+0x3c>)
   1e44e:	6013      	str	r3, [r2, #0]
{
    this->allocatedSize = allocatedSize;
   1e450:	687a      	ldr	r2, [r7, #4]
   1e452:	683b      	ldr	r3, [r7, #0]
   1e454:	60d3      	str	r3, [r2, #12]
    table = new T[allocatedSize];
   1e456:	683b      	ldr	r3, [r7, #0]
   1e458:	4618      	mov	r0, r3
   1e45a:	f7f0 fbfd 	bl	ec58 <_Znaj>
   1e45e:	4603      	mov	r3, r0
   1e460:	461a      	mov	r2, r3
   1e462:	687b      	ldr	r3, [r7, #4]
   1e464:	605a      	str	r2, [r3, #4]
    size = 0;
   1e466:	687a      	ldr	r2, [r7, #4]
   1e468:	f04f 0300 	mov.w	r3, #0	; 0x0
   1e46c:	6093      	str	r3, [r2, #8]
   1e46e:	687b      	ldr	r3, [r7, #4]
}
   1e470:	4618      	mov	r0, r3
   1e472:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1e476:	46bd      	mov	sp, r7
   1e478:	bd80      	pop	{r7, pc}
   1e47a:	46c0      	nop			(mov r8, r8)
   1e47c:	00024868 	.word	0x00024868

0001e480 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1e480:	b580      	push	{r7, lr}
   1e482:	b084      	sub	sp, #16
   1e484:	af00      	add	r7, sp, #0
   1e486:	6078      	str	r0, [r7, #4]
   1e488:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1e48a:	687b      	ldr	r3, [r7, #4]
   1e48c:	689a      	ldr	r2, [r3, #8]
   1e48e:	687b      	ldr	r3, [r7, #4]
   1e490:	68db      	ldr	r3, [r3, #12]
   1e492:	429a      	cmp	r2, r3
   1e494:	da0e      	bge.n	1e4b4 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x34>
    {
        table[size] = value;
   1e496:	687b      	ldr	r3, [r7, #4]
   1e498:	685a      	ldr	r2, [r3, #4]
   1e49a:	687b      	ldr	r3, [r7, #4]
   1e49c:	689b      	ldr	r3, [r3, #8]
   1e49e:	441a      	add	r2, r3
   1e4a0:	683b      	ldr	r3, [r7, #0]
   1e4a2:	781b      	ldrb	r3, [r3, #0]
   1e4a4:	7013      	strb	r3, [r2, #0]
        size++;
   1e4a6:	687b      	ldr	r3, [r7, #4]
   1e4a8:	689b      	ldr	r3, [r3, #8]
   1e4aa:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1e4ae:	687b      	ldr	r3, [r7, #4]
   1e4b0:	609a      	str	r2, [r3, #8]
   1e4b2:	e03c      	b.n	1e52e <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0xae>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1e4b4:	687b      	ldr	r3, [r7, #4]
   1e4b6:	685b      	ldr	r3, [r3, #4]
   1e4b8:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1e4ba:	687b      	ldr	r3, [r7, #4]
   1e4bc:	68db      	ldr	r3, [r3, #12]
   1e4be:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1e4c2:	687b      	ldr	r3, [r7, #4]
   1e4c4:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1e4c6:	687b      	ldr	r3, [r7, #4]
   1e4c8:	68db      	ldr	r3, [r3, #12]
   1e4ca:	4618      	mov	r0, r3
   1e4cc:	f7f0 fbc4 	bl	ec58 <_Znaj>
   1e4d0:	4603      	mov	r3, r0
   1e4d2:	461a      	mov	r2, r3
   1e4d4:	687b      	ldr	r3, [r7, #4]
   1e4d6:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1e4d8:	f04f 0300 	mov.w	r3, #0	; 0x0
   1e4dc:	60fb      	str	r3, [r7, #12]
   1e4de:	e00d      	b.n	1e4fc <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x7c>
            table[i] = oldTable[i];
   1e4e0:	687b      	ldr	r3, [r7, #4]
   1e4e2:	685a      	ldr	r2, [r3, #4]
   1e4e4:	68fb      	ldr	r3, [r7, #12]
   1e4e6:	eb02 0103 	add.w	r1, r2, r3
   1e4ea:	68fa      	ldr	r2, [r7, #12]
   1e4ec:	68bb      	ldr	r3, [r7, #8]
   1e4ee:	4413      	add	r3, r2
   1e4f0:	781b      	ldrb	r3, [r3, #0]
   1e4f2:	700b      	strb	r3, [r1, #0]
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1e4f4:	68fb      	ldr	r3, [r7, #12]
   1e4f6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1e4fa:	60fb      	str	r3, [r7, #12]
   1e4fc:	687b      	ldr	r3, [r7, #4]
   1e4fe:	689a      	ldr	r2, [r3, #8]
   1e500:	68fb      	ldr	r3, [r7, #12]
   1e502:	429a      	cmp	r2, r3
   1e504:	dcec      	bgt.n	1e4e0 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x60>
            table[i] = oldTable[i];
        delete[] oldTable;
   1e506:	68bb      	ldr	r3, [r7, #8]
   1e508:	2b00      	cmp	r3, #0
   1e50a:	d002      	beq.n	1e512 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x92>
   1e50c:	68b8      	ldr	r0, [r7, #8]
   1e50e:	f7f0 fc29 	bl	ed64 <_ZdaPv>
        table[size] = value;
   1e512:	687b      	ldr	r3, [r7, #4]
   1e514:	685a      	ldr	r2, [r3, #4]
   1e516:	687b      	ldr	r3, [r7, #4]
   1e518:	689b      	ldr	r3, [r3, #8]
   1e51a:	441a      	add	r2, r3
   1e51c:	683b      	ldr	r3, [r7, #0]
   1e51e:	781b      	ldrb	r3, [r3, #0]
   1e520:	7013      	strb	r3, [r2, #0]
        size++;
   1e522:	687b      	ldr	r3, [r7, #4]
   1e524:	689b      	ldr	r3, [r3, #8]
   1e526:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1e52a:	687b      	ldr	r3, [r7, #4]
   1e52c:	609a      	str	r2, [r3, #8]
    }
}
   1e52e:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1e532:	46bd      	mov	sp, r7
   1e534:	bd80      	pop	{r7, pc}
   1e536:	46c0      	nop			(mov r8, r8)

0001e538 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1e538:	b580      	push	{r7, lr}
   1e53a:	b084      	sub	sp, #16
   1e53c:	af00      	add	r7, sp, #0
   1e53e:	6078      	str	r0, [r7, #4]
   1e540:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1e542:	687b      	ldr	r3, [r7, #4]
   1e544:	689a      	ldr	r2, [r3, #8]
   1e546:	687b      	ldr	r3, [r7, #4]
   1e548:	68db      	ldr	r3, [r3, #12]
   1e54a:	429a      	cmp	r2, r3
   1e54c:	da18      	bge.n	1e580 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0x48>
    {
        table[size] = value;
   1e54e:	687b      	ldr	r3, [r7, #4]
   1e550:	6859      	ldr	r1, [r3, #4]
   1e552:	687b      	ldr	r3, [r7, #4]
   1e554:	689b      	ldr	r3, [r3, #8]
   1e556:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1e55a:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1e55e:	ebc2 0303 	rsb	r3, r2, r3
   1e562:	440b      	add	r3, r1
   1e564:	683a      	ldr	r2, [r7, #0]
   1e566:	469c      	mov	ip, r3
   1e568:	4613      	mov	r3, r2
   1e56a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1e56e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        size++;
   1e572:	687b      	ldr	r3, [r7, #4]
   1e574:	689b      	ldr	r3, [r3, #8]
   1e576:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1e57a:	687b      	ldr	r3, [r7, #4]
   1e57c:	609a      	str	r2, [r3, #8]
   1e57e:	e05a      	b.n	1e636 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0xfe>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1e580:	687b      	ldr	r3, [r7, #4]
   1e582:	685b      	ldr	r3, [r3, #4]
   1e584:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1e586:	687b      	ldr	r3, [r7, #4]
   1e588:	68db      	ldr	r3, [r3, #12]
   1e58a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1e58e:	687b      	ldr	r3, [r7, #4]
   1e590:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1e592:	687b      	ldr	r3, [r7, #4]
   1e594:	68db      	ldr	r3, [r3, #12]
   1e596:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1e59a:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1e59e:	ebc2 0303 	rsb	r3, r2, r3
   1e5a2:	4618      	mov	r0, r3
   1e5a4:	f7f0 fb58 	bl	ec58 <_Znaj>
   1e5a8:	4603      	mov	r3, r0
   1e5aa:	461a      	mov	r2, r3
   1e5ac:	687b      	ldr	r3, [r7, #4]
   1e5ae:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1e5b0:	f04f 0300 	mov.w	r3, #0	; 0x0
   1e5b4:	60fb      	str	r3, [r7, #12]
   1e5b6:	e01b      	b.n	1e5f0 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0xb8>
            table[i] = oldTable[i];
   1e5b8:	687b      	ldr	r3, [r7, #4]
   1e5ba:	6859      	ldr	r1, [r3, #4]
   1e5bc:	68fb      	ldr	r3, [r7, #12]
   1e5be:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1e5c2:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1e5c6:	ebc2 0303 	rsb	r3, r2, r3
   1e5ca:	4419      	add	r1, r3
   1e5cc:	68fb      	ldr	r3, [r7, #12]
   1e5ce:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1e5d2:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1e5d6:	ebc2 0203 	rsb	r2, r2, r3
   1e5da:	68bb      	ldr	r3, [r7, #8]
   1e5dc:	4413      	add	r3, r2
   1e5de:	468c      	mov	ip, r1
   1e5e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1e5e4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1e5e8:	68fb      	ldr	r3, [r7, #12]
   1e5ea:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1e5ee:	60fb      	str	r3, [r7, #12]
   1e5f0:	687b      	ldr	r3, [r7, #4]
   1e5f2:	689a      	ldr	r2, [r3, #8]
   1e5f4:	68fb      	ldr	r3, [r7, #12]
   1e5f6:	429a      	cmp	r2, r3
   1e5f8:	dcde      	bgt.n	1e5b8 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0x80>
            table[i] = oldTable[i];
        delete[] oldTable;
   1e5fa:	68bb      	ldr	r3, [r7, #8]
   1e5fc:	2b00      	cmp	r3, #0
   1e5fe:	d002      	beq.n	1e606 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0xce>
   1e600:	68b8      	ldr	r0, [r7, #8]
   1e602:	f7f0 fbaf 	bl	ed64 <_ZdaPv>
        table[size] = value;
   1e606:	687b      	ldr	r3, [r7, #4]
   1e608:	6859      	ldr	r1, [r3, #4]
   1e60a:	687b      	ldr	r3, [r7, #4]
   1e60c:	689b      	ldr	r3, [r3, #8]
   1e60e:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1e612:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1e616:	ebc2 0303 	rsb	r3, r2, r3
   1e61a:	440b      	add	r3, r1
   1e61c:	683a      	ldr	r2, [r7, #0]
   1e61e:	469c      	mov	ip, r3
   1e620:	4613      	mov	r3, r2
   1e622:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1e626:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        size++;
   1e62a:	687b      	ldr	r3, [r7, #4]
   1e62c:	689b      	ldr	r3, [r3, #8]
   1e62e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1e632:	687b      	ldr	r3, [r7, #4]
   1e634:	609a      	str	r2, [r3, #8]
    }
}
   1e636:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1e63a:	46bd      	mov	sp, r7
   1e63c:	bd80      	pop	{r7, pc}
   1e63e:	46c0      	nop			(mov r8, r8)

0001e640 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1e640:	b580      	push	{r7, lr}
   1e642:	b084      	sub	sp, #16
   1e644:	af00      	add	r7, sp, #0
   1e646:	6078      	str	r0, [r7, #4]
   1e648:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1e64a:	687b      	ldr	r3, [r7, #4]
   1e64c:	689a      	ldr	r2, [r3, #8]
   1e64e:	687b      	ldr	r3, [r7, #4]
   1e650:	68db      	ldr	r3, [r3, #12]
   1e652:	429a      	cmp	r2, r3
   1e654:	da0e      	bge.n	1e674 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x34>
    {
        table[size] = value;
   1e656:	687b      	ldr	r3, [r7, #4]
   1e658:	685a      	ldr	r2, [r3, #4]
   1e65a:	687b      	ldr	r3, [r7, #4]
   1e65c:	689b      	ldr	r3, [r3, #8]
   1e65e:	441a      	add	r2, r3
   1e660:	683b      	ldr	r3, [r7, #0]
   1e662:	781b      	ldrb	r3, [r3, #0]
   1e664:	7013      	strb	r3, [r2, #0]
        size++;
   1e666:	687b      	ldr	r3, [r7, #4]
   1e668:	689b      	ldr	r3, [r3, #8]
   1e66a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1e66e:	687b      	ldr	r3, [r7, #4]
   1e670:	609a      	str	r2, [r3, #8]
   1e672:	e03c      	b.n	1e6ee <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0xae>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1e674:	687b      	ldr	r3, [r7, #4]
   1e676:	685b      	ldr	r3, [r3, #4]
   1e678:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1e67a:	687b      	ldr	r3, [r7, #4]
   1e67c:	68db      	ldr	r3, [r3, #12]
   1e67e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1e682:	687b      	ldr	r3, [r7, #4]
   1e684:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1e686:	687b      	ldr	r3, [r7, #4]
   1e688:	68db      	ldr	r3, [r3, #12]
   1e68a:	4618      	mov	r0, r3
   1e68c:	f7f0 fae4 	bl	ec58 <_Znaj>
   1e690:	4603      	mov	r3, r0
   1e692:	461a      	mov	r2, r3
   1e694:	687b      	ldr	r3, [r7, #4]
   1e696:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1e698:	f04f 0300 	mov.w	r3, #0	; 0x0
   1e69c:	60fb      	str	r3, [r7, #12]
   1e69e:	e00d      	b.n	1e6bc <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x7c>
            table[i] = oldTable[i];
   1e6a0:	687b      	ldr	r3, [r7, #4]
   1e6a2:	685a      	ldr	r2, [r3, #4]
   1e6a4:	68fb      	ldr	r3, [r7, #12]
   1e6a6:	eb02 0103 	add.w	r1, r2, r3
   1e6aa:	68fa      	ldr	r2, [r7, #12]
   1e6ac:	68bb      	ldr	r3, [r7, #8]
   1e6ae:	4413      	add	r3, r2
   1e6b0:	781b      	ldrb	r3, [r3, #0]
   1e6b2:	700b      	strb	r3, [r1, #0]
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1e6b4:	68fb      	ldr	r3, [r7, #12]
   1e6b6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1e6ba:	60fb      	str	r3, [r7, #12]
   1e6bc:	687b      	ldr	r3, [r7, #4]
   1e6be:	689a      	ldr	r2, [r3, #8]
   1e6c0:	68fb      	ldr	r3, [r7, #12]
   1e6c2:	429a      	cmp	r2, r3
   1e6c4:	dcec      	bgt.n	1e6a0 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x60>
            table[i] = oldTable[i];
        delete[] oldTable;
   1e6c6:	68bb      	ldr	r3, [r7, #8]
   1e6c8:	2b00      	cmp	r3, #0
   1e6ca:	d002      	beq.n	1e6d2 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x92>
   1e6cc:	68b8      	ldr	r0, [r7, #8]
   1e6ce:	f7f0 fb49 	bl	ed64 <_ZdaPv>
        table[size] = value;
   1e6d2:	687b      	ldr	r3, [r7, #4]
   1e6d4:	685a      	ldr	r2, [r3, #4]
   1e6d6:	687b      	ldr	r3, [r7, #4]
   1e6d8:	689b      	ldr	r3, [r3, #8]
   1e6da:	441a      	add	r2, r3
   1e6dc:	683b      	ldr	r3, [r7, #0]
   1e6de:	781b      	ldrb	r3, [r3, #0]
   1e6e0:	7013      	strb	r3, [r2, #0]
        size++;
   1e6e2:	687b      	ldr	r3, [r7, #4]
   1e6e4:	689b      	ldr	r3, [r3, #8]
   1e6e6:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1e6ea:	687b      	ldr	r3, [r7, #4]
   1e6ec:	609a      	str	r2, [r3, #8]
    }
}
   1e6ee:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1e6f2:	46bd      	mov	sp, r7
   1e6f4:	bd80      	pop	{r7, pc}
   1e6f6:	46c0      	nop			(mov r8, r8)

0001e6f8 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1e6f8:	b580      	push	{r7, lr}
   1e6fa:	b084      	sub	sp, #16
   1e6fc:	af00      	add	r7, sp, #0
   1e6fe:	6078      	str	r0, [r7, #4]
   1e700:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1e702:	687b      	ldr	r3, [r7, #4]
   1e704:	689a      	ldr	r2, [r3, #8]
   1e706:	687b      	ldr	r3, [r7, #4]
   1e708:	68db      	ldr	r3, [r3, #12]
   1e70a:	429a      	cmp	r2, r3
   1e70c:	da0e      	bge.n	1e72c <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x34>
    {
        table[size] = value;
   1e70e:	687b      	ldr	r3, [r7, #4]
   1e710:	685a      	ldr	r2, [r3, #4]
   1e712:	687b      	ldr	r3, [r7, #4]
   1e714:	689b      	ldr	r3, [r3, #8]
   1e716:	441a      	add	r2, r3
   1e718:	683b      	ldr	r3, [r7, #0]
   1e71a:	781b      	ldrb	r3, [r3, #0]
   1e71c:	7013      	strb	r3, [r2, #0]
        size++;
   1e71e:	687b      	ldr	r3, [r7, #4]
   1e720:	689b      	ldr	r3, [r3, #8]
   1e722:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1e726:	687b      	ldr	r3, [r7, #4]
   1e728:	609a      	str	r2, [r3, #8]
   1e72a:	e03c      	b.n	1e7a6 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0xae>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1e72c:	687b      	ldr	r3, [r7, #4]
   1e72e:	685b      	ldr	r3, [r3, #4]
   1e730:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1e732:	687b      	ldr	r3, [r7, #4]
   1e734:	68db      	ldr	r3, [r3, #12]
   1e736:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1e73a:	687b      	ldr	r3, [r7, #4]
   1e73c:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1e73e:	687b      	ldr	r3, [r7, #4]
   1e740:	68db      	ldr	r3, [r3, #12]
   1e742:	4618      	mov	r0, r3
   1e744:	f7f0 fa88 	bl	ec58 <_Znaj>
   1e748:	4603      	mov	r3, r0
   1e74a:	461a      	mov	r2, r3
   1e74c:	687b      	ldr	r3, [r7, #4]
   1e74e:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1e750:	f04f 0300 	mov.w	r3, #0	; 0x0
   1e754:	60fb      	str	r3, [r7, #12]
   1e756:	e00d      	b.n	1e774 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x7c>
            table[i] = oldTable[i];
   1e758:	687b      	ldr	r3, [r7, #4]
   1e75a:	685a      	ldr	r2, [r3, #4]
   1e75c:	68fb      	ldr	r3, [r7, #12]
   1e75e:	eb02 0103 	add.w	r1, r2, r3
   1e762:	68fa      	ldr	r2, [r7, #12]
   1e764:	68bb      	ldr	r3, [r7, #8]
   1e766:	4413      	add	r3, r2
   1e768:	781b      	ldrb	r3, [r3, #0]
   1e76a:	700b      	strb	r3, [r1, #0]
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1e76c:	68fb      	ldr	r3, [r7, #12]
   1e76e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1e772:	60fb      	str	r3, [r7, #12]
   1e774:	687b      	ldr	r3, [r7, #4]
   1e776:	689a      	ldr	r2, [r3, #8]
   1e778:	68fb      	ldr	r3, [r7, #12]
   1e77a:	429a      	cmp	r2, r3
   1e77c:	dcec      	bgt.n	1e758 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x60>
            table[i] = oldTable[i];
        delete[] oldTable;
   1e77e:	68bb      	ldr	r3, [r7, #8]
   1e780:	2b00      	cmp	r3, #0
   1e782:	d002      	beq.n	1e78a <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x92>
   1e784:	68b8      	ldr	r0, [r7, #8]
   1e786:	f7f0 faed 	bl	ed64 <_ZdaPv>
        table[size] = value;
   1e78a:	687b      	ldr	r3, [r7, #4]
   1e78c:	685a      	ldr	r2, [r3, #4]
   1e78e:	687b      	ldr	r3, [r7, #4]
   1e790:	689b      	ldr	r3, [r3, #8]
   1e792:	441a      	add	r2, r3
   1e794:	683b      	ldr	r3, [r7, #0]
   1e796:	781b      	ldrb	r3, [r3, #0]
   1e798:	7013      	strb	r3, [r2, #0]
        size++;
   1e79a:	687b      	ldr	r3, [r7, #4]
   1e79c:	689b      	ldr	r3, [r3, #8]
   1e79e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1e7a2:	687b      	ldr	r3, [r7, #4]
   1e7a4:	609a      	str	r2, [r3, #8]
    }
}
   1e7a6:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1e7aa:	46bd      	mov	sp, r7
   1e7ac:	bd80      	pop	{r7, pc}
   1e7ae:	46c0      	nop			(mov r8, r8)

0001e7b0 <_ZN6vectorIN6Sensor12OutputSensorEED0Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1e7b0:	b580      	push	{r7, lr}
   1e7b2:	b082      	sub	sp, #8
   1e7b4:	af00      	add	r7, sp, #0
   1e7b6:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1e7b8:	687a      	ldr	r2, [r7, #4]
   1e7ba:	4b0c      	ldr	r3, [pc, #48]	(1e7ec <_ZN6vectorIN6Sensor12OutputSensorEED0Ev+0x3c>)
   1e7bc:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1e7be:	687b      	ldr	r3, [r7, #4]
   1e7c0:	685b      	ldr	r3, [r3, #4]
   1e7c2:	2b00      	cmp	r3, #0
   1e7c4:	d004      	beq.n	1e7d0 <_ZN6vectorIN6Sensor12OutputSensorEED0Ev+0x20>
   1e7c6:	687b      	ldr	r3, [r7, #4]
   1e7c8:	685b      	ldr	r3, [r3, #4]
   1e7ca:	4618      	mov	r0, r3
   1e7cc:	f7f0 faca 	bl	ed64 <_ZdaPv>
   1e7d0:	f04f 0301 	mov.w	r3, #1	; 0x1
   1e7d4:	b2db      	uxtb	r3, r3
   1e7d6:	2b00      	cmp	r3, #0
   1e7d8:	d002      	beq.n	1e7e0 <_ZN6vectorIN6Sensor12OutputSensorEED0Ev+0x30>
   1e7da:	6878      	ldr	r0, [r7, #4]
   1e7dc:	f7f0 fa4a 	bl	ec74 <_ZdlPv>
   1e7e0:	687b      	ldr	r3, [r7, #4]
}
   1e7e2:	4618      	mov	r0, r3
   1e7e4:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1e7e8:	46bd      	mov	sp, r7
   1e7ea:	bd80      	pop	{r7, pc}
   1e7ec:	00024848 	.word	0x00024848

0001e7f0 <_ZN6vectorIN6Sensor12OutputSensorEED1Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1e7f0:	b580      	push	{r7, lr}
   1e7f2:	b082      	sub	sp, #8
   1e7f4:	af00      	add	r7, sp, #0
   1e7f6:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1e7f8:	687a      	ldr	r2, [r7, #4]
   1e7fa:	4b0c      	ldr	r3, [pc, #48]	(1e82c <_ZN6vectorIN6Sensor12OutputSensorEED1Ev+0x3c>)
   1e7fc:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1e7fe:	687b      	ldr	r3, [r7, #4]
   1e800:	685b      	ldr	r3, [r3, #4]
   1e802:	2b00      	cmp	r3, #0
   1e804:	d004      	beq.n	1e810 <_ZN6vectorIN6Sensor12OutputSensorEED1Ev+0x20>
   1e806:	687b      	ldr	r3, [r7, #4]
   1e808:	685b      	ldr	r3, [r3, #4]
   1e80a:	4618      	mov	r0, r3
   1e80c:	f7f0 faaa 	bl	ed64 <_ZdaPv>
   1e810:	f04f 0300 	mov.w	r3, #0	; 0x0
   1e814:	b2db      	uxtb	r3, r3
   1e816:	2b00      	cmp	r3, #0
   1e818:	d002      	beq.n	1e820 <_ZN6vectorIN6Sensor12OutputSensorEED1Ev+0x30>
   1e81a:	6878      	ldr	r0, [r7, #4]
   1e81c:	f7f0 fa2a 	bl	ec74 <_ZdlPv>
   1e820:	687b      	ldr	r3, [r7, #4]
}
   1e822:	4618      	mov	r0, r3
   1e824:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1e828:	46bd      	mov	sp, r7
   1e82a:	bd80      	pop	{r7, pc}
   1e82c:	00024848 	.word	0x00024848

0001e830 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1e830:	b580      	push	{r7, lr}
   1e832:	b082      	sub	sp, #8
   1e834:	af00      	add	r7, sp, #0
   1e836:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1e838:	687a      	ldr	r2, [r7, #4]
   1e83a:	4b0c      	ldr	r3, [pc, #48]	(1e86c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev+0x3c>)
   1e83c:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1e83e:	687b      	ldr	r3, [r7, #4]
   1e840:	685b      	ldr	r3, [r3, #4]
   1e842:	2b00      	cmp	r3, #0
   1e844:	d004      	beq.n	1e850 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev+0x20>
   1e846:	687b      	ldr	r3, [r7, #4]
   1e848:	685b      	ldr	r3, [r3, #4]
   1e84a:	4618      	mov	r0, r3
   1e84c:	f7f0 fa8a 	bl	ed64 <_ZdaPv>
   1e850:	f04f 0301 	mov.w	r3, #1	; 0x1
   1e854:	b2db      	uxtb	r3, r3
   1e856:	2b00      	cmp	r3, #0
   1e858:	d002      	beq.n	1e860 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev+0x30>
   1e85a:	6878      	ldr	r0, [r7, #4]
   1e85c:	f7f0 fa0a 	bl	ec74 <_ZdlPv>
   1e860:	687b      	ldr	r3, [r7, #4]
}
   1e862:	4618      	mov	r0, r3
   1e864:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1e868:	46bd      	mov	sp, r7
   1e86a:	bd80      	pop	{r7, pc}
   1e86c:	00024858 	.word	0x00024858

0001e870 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1e870:	b580      	push	{r7, lr}
   1e872:	b082      	sub	sp, #8
   1e874:	af00      	add	r7, sp, #0
   1e876:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1e878:	687a      	ldr	r2, [r7, #4]
   1e87a:	4b0c      	ldr	r3, [pc, #48]	(1e8ac <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev+0x3c>)
   1e87c:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1e87e:	687b      	ldr	r3, [r7, #4]
   1e880:	685b      	ldr	r3, [r3, #4]
   1e882:	2b00      	cmp	r3, #0
   1e884:	d004      	beq.n	1e890 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev+0x20>
   1e886:	687b      	ldr	r3, [r7, #4]
   1e888:	685b      	ldr	r3, [r3, #4]
   1e88a:	4618      	mov	r0, r3
   1e88c:	f7f0 fa6a 	bl	ed64 <_ZdaPv>
   1e890:	f04f 0300 	mov.w	r3, #0	; 0x0
   1e894:	b2db      	uxtb	r3, r3
   1e896:	2b00      	cmp	r3, #0
   1e898:	d002      	beq.n	1e8a0 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev+0x30>
   1e89a:	6878      	ldr	r0, [r7, #4]
   1e89c:	f7f0 f9ea 	bl	ec74 <_ZdlPv>
   1e8a0:	687b      	ldr	r3, [r7, #4]
}
   1e8a2:	4618      	mov	r0, r3
   1e8a4:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1e8a8:	46bd      	mov	sp, r7
   1e8aa:	bd80      	pop	{r7, pc}
   1e8ac:	00024858 	.word	0x00024858

0001e8b0 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1e8b0:	b580      	push	{r7, lr}
   1e8b2:	b082      	sub	sp, #8
   1e8b4:	af00      	add	r7, sp, #0
   1e8b6:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1e8b8:	687a      	ldr	r2, [r7, #4]
   1e8ba:	4b0c      	ldr	r3, [pc, #48]	(1e8ec <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev+0x3c>)
   1e8bc:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1e8be:	687b      	ldr	r3, [r7, #4]
   1e8c0:	685b      	ldr	r3, [r3, #4]
   1e8c2:	2b00      	cmp	r3, #0
   1e8c4:	d004      	beq.n	1e8d0 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev+0x20>
   1e8c6:	687b      	ldr	r3, [r7, #4]
   1e8c8:	685b      	ldr	r3, [r3, #4]
   1e8ca:	4618      	mov	r0, r3
   1e8cc:	f7f0 fa4a 	bl	ed64 <_ZdaPv>
   1e8d0:	f04f 0301 	mov.w	r3, #1	; 0x1
   1e8d4:	b2db      	uxtb	r3, r3
   1e8d6:	2b00      	cmp	r3, #0
   1e8d8:	d002      	beq.n	1e8e0 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev+0x30>
   1e8da:	6878      	ldr	r0, [r7, #4]
   1e8dc:	f7f0 f9ca 	bl	ec74 <_ZdlPv>
   1e8e0:	687b      	ldr	r3, [r7, #4]
}
   1e8e2:	4618      	mov	r0, r3
   1e8e4:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1e8e8:	46bd      	mov	sp, r7
   1e8ea:	bd80      	pop	{r7, pc}
   1e8ec:	00024868 	.word	0x00024868

0001e8f0 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1e8f0:	b580      	push	{r7, lr}
   1e8f2:	b082      	sub	sp, #8
   1e8f4:	af00      	add	r7, sp, #0
   1e8f6:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1e8f8:	687a      	ldr	r2, [r7, #4]
   1e8fa:	4b0c      	ldr	r3, [pc, #48]	(1e92c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev+0x3c>)
   1e8fc:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1e8fe:	687b      	ldr	r3, [r7, #4]
   1e900:	685b      	ldr	r3, [r3, #4]
   1e902:	2b00      	cmp	r3, #0
   1e904:	d004      	beq.n	1e910 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev+0x20>
   1e906:	687b      	ldr	r3, [r7, #4]
   1e908:	685b      	ldr	r3, [r3, #4]
   1e90a:	4618      	mov	r0, r3
   1e90c:	f7f0 fa2a 	bl	ed64 <_ZdaPv>
   1e910:	f04f 0300 	mov.w	r3, #0	; 0x0
   1e914:	b2db      	uxtb	r3, r3
   1e916:	2b00      	cmp	r3, #0
   1e918:	d002      	beq.n	1e920 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev+0x30>
   1e91a:	6878      	ldr	r0, [r7, #4]
   1e91c:	f7f0 f9aa 	bl	ec74 <_ZdlPv>
   1e920:	687b      	ldr	r3, [r7, #4]
}
   1e922:	4618      	mov	r0, r3
   1e924:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1e928:	46bd      	mov	sp, r7
   1e92a:	bd80      	pop	{r7, pc}
   1e92c:	00024868 	.word	0x00024868

0001e930 <_ZN18CommandAllerEnArcAD0Ev>:
    ////////////////////////////////
    //    CommandAllerEnArcA      //
    ////////////////////////////////

class CommandAllerEnArcA : public Command
{
   1e930:	b580      	push	{r7, lr}
   1e932:	b082      	sub	sp, #8
   1e934:	af00      	add	r7, sp, #0
   1e936:	6078      	str	r0, [r7, #4]
   1e938:	687a      	ldr	r2, [r7, #4]
   1e93a:	4b0a      	ldr	r3, [pc, #40]	(1e964 <_ZN18CommandAllerEnArcAD0Ev+0x34>)
   1e93c:	6013      	str	r3, [r2, #0]
   1e93e:	687b      	ldr	r3, [r7, #4]
   1e940:	4618      	mov	r0, r3
   1e942:	f7e9 fd6d 	bl	8420 <_ZN7CommandD2Ev>
   1e946:	f04f 0301 	mov.w	r3, #1	; 0x1
   1e94a:	b2db      	uxtb	r3, r3
   1e94c:	2b00      	cmp	r3, #0
   1e94e:	d002      	beq.n	1e956 <_ZN18CommandAllerEnArcAD0Ev+0x26>
   1e950:	6878      	ldr	r0, [r7, #4]
   1e952:	f7f0 f98f 	bl	ec74 <_ZdlPv>
   1e956:	687b      	ldr	r3, [r7, #4]
   1e958:	4618      	mov	r0, r3
   1e95a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1e95e:	46bd      	mov	sp, r7
   1e960:	bd80      	pop	{r7, pc}
   1e962:	46c0      	nop			(mov r8, r8)
   1e964:	00023fa0 	.word	0x00023fa0

0001e968 <_ZN18CommandAllerEnArcAD1Ev>:
   1e968:	b580      	push	{r7, lr}
   1e96a:	b082      	sub	sp, #8
   1e96c:	af00      	add	r7, sp, #0
   1e96e:	6078      	str	r0, [r7, #4]
   1e970:	687a      	ldr	r2, [r7, #4]
   1e972:	4b0a      	ldr	r3, [pc, #40]	(1e99c <_ZN18CommandAllerEnArcAD1Ev+0x34>)
   1e974:	6013      	str	r3, [r2, #0]
   1e976:	687b      	ldr	r3, [r7, #4]
   1e978:	4618      	mov	r0, r3
   1e97a:	f7e9 fd51 	bl	8420 <_ZN7CommandD2Ev>
   1e97e:	f04f 0300 	mov.w	r3, #0	; 0x0
   1e982:	b2db      	uxtb	r3, r3
   1e984:	2b00      	cmp	r3, #0
   1e986:	d002      	beq.n	1e98e <_ZN18CommandAllerEnArcAD1Ev+0x26>
   1e988:	6878      	ldr	r0, [r7, #4]
   1e98a:	f7f0 f973 	bl	ec74 <_ZdlPv>
   1e98e:	687b      	ldr	r3, [r7, #4]
   1e990:	4618      	mov	r0, r3
   1e992:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1e996:	46bd      	mov	sp, r7
   1e998:	bd80      	pop	{r7, pc}
   1e99a:	46c0      	nop			(mov r8, r8)
   1e99c:	00023fa0 	.word	0x00023fa0

0001e9a0 <_ZN13CommandAllerAD0Ev>:
    ////////////////////////////////
    //       CommandAllerA        //
    ////////////////////////////////

class CommandAllerA : public Command
{
   1e9a0:	b580      	push	{r7, lr}
   1e9a2:	b082      	sub	sp, #8
   1e9a4:	af00      	add	r7, sp, #0
   1e9a6:	6078      	str	r0, [r7, #4]
   1e9a8:	687a      	ldr	r2, [r7, #4]
   1e9aa:	4b0a      	ldr	r3, [pc, #40]	(1e9d4 <_ZN13CommandAllerAD0Ev+0x34>)
   1e9ac:	6013      	str	r3, [r2, #0]
   1e9ae:	687b      	ldr	r3, [r7, #4]
   1e9b0:	4618      	mov	r0, r3
   1e9b2:	f7e9 fd35 	bl	8420 <_ZN7CommandD2Ev>
   1e9b6:	f04f 0301 	mov.w	r3, #1	; 0x1
   1e9ba:	b2db      	uxtb	r3, r3
   1e9bc:	2b00      	cmp	r3, #0
   1e9be:	d002      	beq.n	1e9c6 <_ZN13CommandAllerAD0Ev+0x26>
   1e9c0:	6878      	ldr	r0, [r7, #4]
   1e9c2:	f7f0 f957 	bl	ec74 <_ZdlPv>
   1e9c6:	687b      	ldr	r3, [r7, #4]
   1e9c8:	4618      	mov	r0, r3
   1e9ca:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1e9ce:	46bd      	mov	sp, r7
   1e9d0:	bd80      	pop	{r7, pc}
   1e9d2:	46c0      	nop			(mov r8, r8)
   1e9d4:	00023f78 	.word	0x00023f78

0001e9d8 <_ZN13CommandAllerAD1Ev>:
   1e9d8:	b580      	push	{r7, lr}
   1e9da:	b082      	sub	sp, #8
   1e9dc:	af00      	add	r7, sp, #0
   1e9de:	6078      	str	r0, [r7, #4]
   1e9e0:	687a      	ldr	r2, [r7, #4]
   1e9e2:	4b0a      	ldr	r3, [pc, #40]	(1ea0c <_ZN13CommandAllerAD1Ev+0x34>)
   1e9e4:	6013      	str	r3, [r2, #0]
   1e9e6:	687b      	ldr	r3, [r7, #4]
   1e9e8:	4618      	mov	r0, r3
   1e9ea:	f7e9 fd19 	bl	8420 <_ZN7CommandD2Ev>
   1e9ee:	f04f 0300 	mov.w	r3, #0	; 0x0
   1e9f2:	b2db      	uxtb	r3, r3
   1e9f4:	2b00      	cmp	r3, #0
   1e9f6:	d002      	beq.n	1e9fe <_ZN13CommandAllerAD1Ev+0x26>
   1e9f8:	6878      	ldr	r0, [r7, #4]
   1e9fa:	f7f0 f93b 	bl	ec74 <_ZdlPv>
   1e9fe:	687b      	ldr	r3, [r7, #4]
   1ea00:	4618      	mov	r0, r3
   1ea02:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ea06:	46bd      	mov	sp, r7
   1ea08:	bd80      	pop	{r7, pc}
   1ea0a:	46c0      	nop			(mov r8, r8)
   1ea0c:	00023f78 	.word	0x00023f78

0001ea10 <_ZN18CommandTournerVersD0Ev>:
    ////////////////////////////////
    //    CommandTournerVers      //
    ////////////////////////////////

class CommandTournerVers : public Command
{
   1ea10:	b580      	push	{r7, lr}
   1ea12:	b082      	sub	sp, #8
   1ea14:	af00      	add	r7, sp, #0
   1ea16:	6078      	str	r0, [r7, #4]
   1ea18:	687a      	ldr	r2, [r7, #4]
   1ea1a:	4b0a      	ldr	r3, [pc, #40]	(1ea44 <_ZN18CommandTournerVersD0Ev+0x34>)
   1ea1c:	6013      	str	r3, [r2, #0]
   1ea1e:	687b      	ldr	r3, [r7, #4]
   1ea20:	4618      	mov	r0, r3
   1ea22:	f7e9 fcfd 	bl	8420 <_ZN7CommandD2Ev>
   1ea26:	f04f 0301 	mov.w	r3, #1	; 0x1
   1ea2a:	b2db      	uxtb	r3, r3
   1ea2c:	2b00      	cmp	r3, #0
   1ea2e:	d002      	beq.n	1ea36 <_ZN18CommandTournerVersD0Ev+0x26>
   1ea30:	6878      	ldr	r0, [r7, #4]
   1ea32:	f7f0 f91f 	bl	ec74 <_ZdlPv>
   1ea36:	687b      	ldr	r3, [r7, #4]
   1ea38:	4618      	mov	r0, r3
   1ea3a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ea3e:	46bd      	mov	sp, r7
   1ea40:	bd80      	pop	{r7, pc}
   1ea42:	46c0      	nop			(mov r8, r8)
   1ea44:	00023f50 	.word	0x00023f50

0001ea48 <_ZN18CommandTournerVersD1Ev>:
   1ea48:	b580      	push	{r7, lr}
   1ea4a:	b082      	sub	sp, #8
   1ea4c:	af00      	add	r7, sp, #0
   1ea4e:	6078      	str	r0, [r7, #4]
   1ea50:	687a      	ldr	r2, [r7, #4]
   1ea52:	4b0a      	ldr	r3, [pc, #40]	(1ea7c <_ZN18CommandTournerVersD1Ev+0x34>)
   1ea54:	6013      	str	r3, [r2, #0]
   1ea56:	687b      	ldr	r3, [r7, #4]
   1ea58:	4618      	mov	r0, r3
   1ea5a:	f7e9 fce1 	bl	8420 <_ZN7CommandD2Ev>
   1ea5e:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ea62:	b2db      	uxtb	r3, r3
   1ea64:	2b00      	cmp	r3, #0
   1ea66:	d002      	beq.n	1ea6e <_ZN18CommandTournerVersD1Ev+0x26>
   1ea68:	6878      	ldr	r0, [r7, #4]
   1ea6a:	f7f0 f903 	bl	ec74 <_ZdlPv>
   1ea6e:	687b      	ldr	r3, [r7, #4]
   1ea70:	4618      	mov	r0, r3
   1ea72:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ea76:	46bd      	mov	sp, r7
   1ea78:	bd80      	pop	{r7, pc}
   1ea7a:	46c0      	nop			(mov r8, r8)
   1ea7c:	00023f50 	.word	0x00023f50

0001ea80 <_ZN13CommandVirageD0Ev>:

// fait un virage d'un certain angle à la vitesse max suivant un certain rayon de courbure
// arrive avec un certaine vitesse de fin
// marche que vers l'avant
class CommandVirage : public Command
{
   1ea80:	b580      	push	{r7, lr}
   1ea82:	b082      	sub	sp, #8
   1ea84:	af00      	add	r7, sp, #0
   1ea86:	6078      	str	r0, [r7, #4]
   1ea88:	687a      	ldr	r2, [r7, #4]
   1ea8a:	4b0a      	ldr	r3, [pc, #40]	(1eab4 <_ZN13CommandVirageD0Ev+0x34>)
   1ea8c:	6013      	str	r3, [r2, #0]
   1ea8e:	687b      	ldr	r3, [r7, #4]
   1ea90:	4618      	mov	r0, r3
   1ea92:	f7e9 fcc5 	bl	8420 <_ZN7CommandD2Ev>
   1ea96:	f04f 0301 	mov.w	r3, #1	; 0x1
   1ea9a:	b2db      	uxtb	r3, r3
   1ea9c:	2b00      	cmp	r3, #0
   1ea9e:	d002      	beq.n	1eaa6 <_ZN13CommandVirageD0Ev+0x26>
   1eaa0:	6878      	ldr	r0, [r7, #4]
   1eaa2:	f7f0 f8e7 	bl	ec74 <_ZdlPv>
   1eaa6:	687b      	ldr	r3, [r7, #4]
   1eaa8:	4618      	mov	r0, r3
   1eaaa:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1eaae:	46bd      	mov	sp, r7
   1eab0:	bd80      	pop	{r7, pc}
   1eab2:	46c0      	nop			(mov r8, r8)
   1eab4:	00023f28 	.word	0x00023f28

0001eab8 <_ZN13CommandVirageD1Ev>:
   1eab8:	b580      	push	{r7, lr}
   1eaba:	b082      	sub	sp, #8
   1eabc:	af00      	add	r7, sp, #0
   1eabe:	6078      	str	r0, [r7, #4]
   1eac0:	687a      	ldr	r2, [r7, #4]
   1eac2:	4b0a      	ldr	r3, [pc, #40]	(1eaec <_ZN13CommandVirageD1Ev+0x34>)
   1eac4:	6013      	str	r3, [r2, #0]
   1eac6:	687b      	ldr	r3, [r7, #4]
   1eac8:	4618      	mov	r0, r3
   1eaca:	f7e9 fca9 	bl	8420 <_ZN7CommandD2Ev>
   1eace:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ead2:	b2db      	uxtb	r3, r3
   1ead4:	2b00      	cmp	r3, #0
   1ead6:	d002      	beq.n	1eade <_ZN13CommandVirageD1Ev+0x26>
   1ead8:	6878      	ldr	r0, [r7, #4]
   1eada:	f7f0 f8cb 	bl	ec74 <_ZdlPv>
   1eade:	687b      	ldr	r3, [r7, #4]
   1eae0:	4618      	mov	r0, r3
   1eae2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1eae6:	46bd      	mov	sp, r7
   1eae8:	bd80      	pop	{r7, pc}
   1eaea:	46c0      	nop			(mov r8, r8)
   1eaec:	00023f28 	.word	0x00023f28

0001eaf0 <_ZN15CommandAttendreD0Ev>:
    ////////////////////////////////
    //      CommandAttendre       //
    ////////////////////////////////

class CommandAttendre : public Command
{
   1eaf0:	b580      	push	{r7, lr}
   1eaf2:	b082      	sub	sp, #8
   1eaf4:	af00      	add	r7, sp, #0
   1eaf6:	6078      	str	r0, [r7, #4]
   1eaf8:	687a      	ldr	r2, [r7, #4]
   1eafa:	4b0a      	ldr	r3, [pc, #40]	(1eb24 <_ZN15CommandAttendreD0Ev+0x34>)
   1eafc:	6013      	str	r3, [r2, #0]
   1eafe:	687b      	ldr	r3, [r7, #4]
   1eb00:	4618      	mov	r0, r3
   1eb02:	f7e9 fc8d 	bl	8420 <_ZN7CommandD2Ev>
   1eb06:	f04f 0301 	mov.w	r3, #1	; 0x1
   1eb0a:	b2db      	uxtb	r3, r3
   1eb0c:	2b00      	cmp	r3, #0
   1eb0e:	d002      	beq.n	1eb16 <_ZN15CommandAttendreD0Ev+0x26>
   1eb10:	6878      	ldr	r0, [r7, #4]
   1eb12:	f7f0 f8af 	bl	ec74 <_ZdlPv>
   1eb16:	687b      	ldr	r3, [r7, #4]
   1eb18:	4618      	mov	r0, r3
   1eb1a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1eb1e:	46bd      	mov	sp, r7
   1eb20:	bd80      	pop	{r7, pc}
   1eb22:	46c0      	nop			(mov r8, r8)
   1eb24:	00023f00 	.word	0x00023f00

0001eb28 <_ZN15CommandAttendreD1Ev>:
   1eb28:	b580      	push	{r7, lr}
   1eb2a:	b082      	sub	sp, #8
   1eb2c:	af00      	add	r7, sp, #0
   1eb2e:	6078      	str	r0, [r7, #4]
   1eb30:	687a      	ldr	r2, [r7, #4]
   1eb32:	4b0a      	ldr	r3, [pc, #40]	(1eb5c <_ZN15CommandAttendreD1Ev+0x34>)
   1eb34:	6013      	str	r3, [r2, #0]
   1eb36:	687b      	ldr	r3, [r7, #4]
   1eb38:	4618      	mov	r0, r3
   1eb3a:	f7e9 fc71 	bl	8420 <_ZN7CommandD2Ev>
   1eb3e:	f04f 0300 	mov.w	r3, #0	; 0x0
   1eb42:	b2db      	uxtb	r3, r3
   1eb44:	2b00      	cmp	r3, #0
   1eb46:	d002      	beq.n	1eb4e <_ZN15CommandAttendreD1Ev+0x26>
   1eb48:	6878      	ldr	r0, [r7, #4]
   1eb4a:	f7f0 f893 	bl	ec74 <_ZdlPv>
   1eb4e:	687b      	ldr	r3, [r7, #4]
   1eb50:	4618      	mov	r0, r3
   1eb52:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1eb56:	46bd      	mov	sp, r7
   1eb58:	bd80      	pop	{r7, pc}
   1eb5a:	46c0      	nop			(mov r8, r8)
   1eb5c:	00023f00 	.word	0x00023f00

0001eb60 <_ZN18CommandTestAvancerD0Ev>:
    ////////////////////////////////
    //    CommandTestAvancer      //
    ////////////////////////////////

class CommandTestAvancer : public Command
{
   1eb60:	b580      	push	{r7, lr}
   1eb62:	b082      	sub	sp, #8
   1eb64:	af00      	add	r7, sp, #0
   1eb66:	6078      	str	r0, [r7, #4]
   1eb68:	687a      	ldr	r2, [r7, #4]
   1eb6a:	4b0a      	ldr	r3, [pc, #40]	(1eb94 <_ZN18CommandTestAvancerD0Ev+0x34>)
   1eb6c:	6013      	str	r3, [r2, #0]
   1eb6e:	687b      	ldr	r3, [r7, #4]
   1eb70:	4618      	mov	r0, r3
   1eb72:	f7e9 fc55 	bl	8420 <_ZN7CommandD2Ev>
   1eb76:	f04f 0301 	mov.w	r3, #1	; 0x1
   1eb7a:	b2db      	uxtb	r3, r3
   1eb7c:	2b00      	cmp	r3, #0
   1eb7e:	d002      	beq.n	1eb86 <_ZN18CommandTestAvancerD0Ev+0x26>
   1eb80:	6878      	ldr	r0, [r7, #4]
   1eb82:	f7f0 f877 	bl	ec74 <_ZdlPv>
   1eb86:	687b      	ldr	r3, [r7, #4]
   1eb88:	4618      	mov	r0, r3
   1eb8a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1eb8e:	46bd      	mov	sp, r7
   1eb90:	bd80      	pop	{r7, pc}
   1eb92:	46c0      	nop			(mov r8, r8)
   1eb94:	00023ed8 	.word	0x00023ed8

0001eb98 <_ZN18CommandTestAvancerD1Ev>:
   1eb98:	b580      	push	{r7, lr}
   1eb9a:	b082      	sub	sp, #8
   1eb9c:	af00      	add	r7, sp, #0
   1eb9e:	6078      	str	r0, [r7, #4]
   1eba0:	687a      	ldr	r2, [r7, #4]
   1eba2:	4b0a      	ldr	r3, [pc, #40]	(1ebcc <_ZN18CommandTestAvancerD1Ev+0x34>)
   1eba4:	6013      	str	r3, [r2, #0]
   1eba6:	687b      	ldr	r3, [r7, #4]
   1eba8:	4618      	mov	r0, r3
   1ebaa:	f7e9 fc39 	bl	8420 <_ZN7CommandD2Ev>
   1ebae:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ebb2:	b2db      	uxtb	r3, r3
   1ebb4:	2b00      	cmp	r3, #0
   1ebb6:	d002      	beq.n	1ebbe <_ZN18CommandTestAvancerD1Ev+0x26>
   1ebb8:	6878      	ldr	r0, [r7, #4]
   1ebba:	f7f0 f85b 	bl	ec74 <_ZdlPv>
   1ebbe:	687b      	ldr	r3, [r7, #4]
   1ebc0:	4618      	mov	r0, r3
   1ebc2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ebc6:	46bd      	mov	sp, r7
   1ebc8:	bd80      	pop	{r7, pc}
   1ebca:	46c0      	nop			(mov r8, r8)
   1ebcc:	00023ed8 	.word	0x00023ed8

0001ebd0 <_ZN24CommandTestTournerGaucheD0Ev>:
    ////////////////////////////////
    //  CommandTestTournerGauche  //
    ////////////////////////////////

class CommandTestTournerGauche : public Command
{
   1ebd0:	b580      	push	{r7, lr}
   1ebd2:	b082      	sub	sp, #8
   1ebd4:	af00      	add	r7, sp, #0
   1ebd6:	6078      	str	r0, [r7, #4]
   1ebd8:	687a      	ldr	r2, [r7, #4]
   1ebda:	4b0a      	ldr	r3, [pc, #40]	(1ec04 <_ZN24CommandTestTournerGaucheD0Ev+0x34>)
   1ebdc:	6013      	str	r3, [r2, #0]
   1ebde:	687b      	ldr	r3, [r7, #4]
   1ebe0:	4618      	mov	r0, r3
   1ebe2:	f7e9 fc1d 	bl	8420 <_ZN7CommandD2Ev>
   1ebe6:	f04f 0301 	mov.w	r3, #1	; 0x1
   1ebea:	b2db      	uxtb	r3, r3
   1ebec:	2b00      	cmp	r3, #0
   1ebee:	d002      	beq.n	1ebf6 <_ZN24CommandTestTournerGaucheD0Ev+0x26>
   1ebf0:	6878      	ldr	r0, [r7, #4]
   1ebf2:	f7f0 f83f 	bl	ec74 <_ZdlPv>
   1ebf6:	687b      	ldr	r3, [r7, #4]
   1ebf8:	4618      	mov	r0, r3
   1ebfa:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ebfe:	46bd      	mov	sp, r7
   1ec00:	bd80      	pop	{r7, pc}
   1ec02:	46c0      	nop			(mov r8, r8)
   1ec04:	00023eb0 	.word	0x00023eb0

0001ec08 <_ZN24CommandTestTournerGaucheD1Ev>:
   1ec08:	b580      	push	{r7, lr}
   1ec0a:	b082      	sub	sp, #8
   1ec0c:	af00      	add	r7, sp, #0
   1ec0e:	6078      	str	r0, [r7, #4]
   1ec10:	687a      	ldr	r2, [r7, #4]
   1ec12:	4b0a      	ldr	r3, [pc, #40]	(1ec3c <_ZN24CommandTestTournerGaucheD1Ev+0x34>)
   1ec14:	6013      	str	r3, [r2, #0]
   1ec16:	687b      	ldr	r3, [r7, #4]
   1ec18:	4618      	mov	r0, r3
   1ec1a:	f7e9 fc01 	bl	8420 <_ZN7CommandD2Ev>
   1ec1e:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ec22:	b2db      	uxtb	r3, r3
   1ec24:	2b00      	cmp	r3, #0
   1ec26:	d002      	beq.n	1ec2e <_ZN24CommandTestTournerGaucheD1Ev+0x26>
   1ec28:	6878      	ldr	r0, [r7, #4]
   1ec2a:	f7f0 f823 	bl	ec74 <_ZdlPv>
   1ec2e:	687b      	ldr	r3, [r7, #4]
   1ec30:	4618      	mov	r0, r3
   1ec32:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ec36:	46bd      	mov	sp, r7
   1ec38:	bd80      	pop	{r7, pc}
   1ec3a:	46c0      	nop			(mov r8, r8)
   1ec3c:	00023eb0 	.word	0x00023eb0

0001ec40 <_ZN29CommandCalibrerCapteurCouleurD0Ev>:
        // ou depuis le dernier appel de la selection du capteur
        uint16_t getTickValue();
};

class CommandCalibrerCapteurCouleur : public Command
{
   1ec40:	b580      	push	{r7, lr}
   1ec42:	b082      	sub	sp, #8
   1ec44:	af00      	add	r7, sp, #0
   1ec46:	6078      	str	r0, [r7, #4]
   1ec48:	687a      	ldr	r2, [r7, #4]
   1ec4a:	4b0a      	ldr	r3, [pc, #40]	(1ec74 <_ZN29CommandCalibrerCapteurCouleurD0Ev+0x34>)
   1ec4c:	6013      	str	r3, [r2, #0]
   1ec4e:	687b      	ldr	r3, [r7, #4]
   1ec50:	4618      	mov	r0, r3
   1ec52:	f7e9 fbe5 	bl	8420 <_ZN7CommandD2Ev>
   1ec56:	f04f 0301 	mov.w	r3, #1	; 0x1
   1ec5a:	b2db      	uxtb	r3, r3
   1ec5c:	2b00      	cmp	r3, #0
   1ec5e:	d002      	beq.n	1ec66 <_ZN29CommandCalibrerCapteurCouleurD0Ev+0x26>
   1ec60:	6878      	ldr	r0, [r7, #4]
   1ec62:	f7f0 f807 	bl	ec74 <_ZdlPv>
   1ec66:	687b      	ldr	r3, [r7, #4]
   1ec68:	4618      	mov	r0, r3
   1ec6a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ec6e:	46bd      	mov	sp, r7
   1ec70:	bd80      	pop	{r7, pc}
   1ec72:	46c0      	nop			(mov r8, r8)
   1ec74:	00024020 	.word	0x00024020

0001ec78 <_ZN29CommandCalibrerCapteurCouleurD1Ev>:
   1ec78:	b580      	push	{r7, lr}
   1ec7a:	b082      	sub	sp, #8
   1ec7c:	af00      	add	r7, sp, #0
   1ec7e:	6078      	str	r0, [r7, #4]
   1ec80:	687a      	ldr	r2, [r7, #4]
   1ec82:	4b0a      	ldr	r3, [pc, #40]	(1ecac <_ZN29CommandCalibrerCapteurCouleurD1Ev+0x34>)
   1ec84:	6013      	str	r3, [r2, #0]
   1ec86:	687b      	ldr	r3, [r7, #4]
   1ec88:	4618      	mov	r0, r3
   1ec8a:	f7e9 fbc9 	bl	8420 <_ZN7CommandD2Ev>
   1ec8e:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ec92:	b2db      	uxtb	r3, r3
   1ec94:	2b00      	cmp	r3, #0
   1ec96:	d002      	beq.n	1ec9e <_ZN29CommandCalibrerCapteurCouleurD1Ev+0x26>
   1ec98:	6878      	ldr	r0, [r7, #4]
   1ec9a:	f7ef ffeb 	bl	ec74 <_ZdlPv>
   1ec9e:	687b      	ldr	r3, [r7, #4]
   1eca0:	4618      	mov	r0, r3
   1eca2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1eca6:	46bd      	mov	sp, r7
   1eca8:	bd80      	pop	{r7, pc}
   1ecaa:	46c0      	nop			(mov r8, r8)
   1ecac:	00024020 	.word	0x00024020

0001ecb0 <_ZN19CommandCheckCouleurD0Ev>:

        uint16_t resultat;
};

class CommandCheckCouleur : public Command
{
   1ecb0:	b580      	push	{r7, lr}
   1ecb2:	b082      	sub	sp, #8
   1ecb4:	af00      	add	r7, sp, #0
   1ecb6:	6078      	str	r0, [r7, #4]
   1ecb8:	687a      	ldr	r2, [r7, #4]
   1ecba:	4b0a      	ldr	r3, [pc, #40]	(1ece4 <_ZN19CommandCheckCouleurD0Ev+0x34>)
   1ecbc:	6013      	str	r3, [r2, #0]
   1ecbe:	687b      	ldr	r3, [r7, #4]
   1ecc0:	4618      	mov	r0, r3
   1ecc2:	f7e9 fbad 	bl	8420 <_ZN7CommandD2Ev>
   1ecc6:	f04f 0301 	mov.w	r3, #1	; 0x1
   1ecca:	b2db      	uxtb	r3, r3
   1eccc:	2b00      	cmp	r3, #0
   1ecce:	d002      	beq.n	1ecd6 <_ZN19CommandCheckCouleurD0Ev+0x26>
   1ecd0:	6878      	ldr	r0, [r7, #4]
   1ecd2:	f7ef ffcf 	bl	ec74 <_ZdlPv>
   1ecd6:	687b      	ldr	r3, [r7, #4]
   1ecd8:	4618      	mov	r0, r3
   1ecda:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ecde:	46bd      	mov	sp, r7
   1ece0:	bd80      	pop	{r7, pc}
   1ece2:	46c0      	nop			(mov r8, r8)
   1ece4:	00023ff8 	.word	0x00023ff8

0001ece8 <_ZN19CommandCheckCouleurD1Ev>:
   1ece8:	b580      	push	{r7, lr}
   1ecea:	b082      	sub	sp, #8
   1ecec:	af00      	add	r7, sp, #0
   1ecee:	6078      	str	r0, [r7, #4]
   1ecf0:	687a      	ldr	r2, [r7, #4]
   1ecf2:	4b0a      	ldr	r3, [pc, #40]	(1ed1c <_ZN19CommandCheckCouleurD1Ev+0x34>)
   1ecf4:	6013      	str	r3, [r2, #0]
   1ecf6:	687b      	ldr	r3, [r7, #4]
   1ecf8:	4618      	mov	r0, r3
   1ecfa:	f7e9 fb91 	bl	8420 <_ZN7CommandD2Ev>
   1ecfe:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ed02:	b2db      	uxtb	r3, r3
   1ed04:	2b00      	cmp	r3, #0
   1ed06:	d002      	beq.n	1ed0e <_ZN19CommandCheckCouleurD1Ev+0x26>
   1ed08:	6878      	ldr	r0, [r7, #4]
   1ed0a:	f7ef ffb3 	bl	ec74 <_ZdlPv>
   1ed0e:	687b      	ldr	r3, [r7, #4]
   1ed10:	4618      	mov	r0, r3
   1ed12:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ed16:	46bd      	mov	sp, r7
   1ed18:	bd80      	pop	{r7, pc}
   1ed1a:	46c0      	nop			(mov r8, r8)
   1ed1c:	00023ff8 	.word	0x00023ff8

0001ed20 <_ZN11StrategieV3D2Ev>:

#endif*/
//#define ETAPE_GARAGE 1
//#define NOMBRE_ETAPES 10
class StrategieV3 : public MediumLevelAction
{
   1ed20:	b580      	push	{r7, lr}
   1ed22:	b082      	sub	sp, #8
   1ed24:	af00      	add	r7, sp, #0
   1ed26:	6078      	str	r0, [r7, #4]
   1ed28:	687a      	ldr	r2, [r7, #4]
   1ed2a:	4b0a      	ldr	r3, [pc, #40]	(1ed54 <_ZN11StrategieV3D2Ev+0x34>)
   1ed2c:	6013      	str	r3, [r2, #0]
   1ed2e:	687b      	ldr	r3, [r7, #4]
   1ed30:	4618      	mov	r0, r3
   1ed32:	f7f7 fe2f 	bl	16994 <_ZN17MediumLevelActionD2Ev>
   1ed36:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ed3a:	b2db      	uxtb	r3, r3
   1ed3c:	2b00      	cmp	r3, #0
   1ed3e:	d002      	beq.n	1ed46 <_ZN11StrategieV3D2Ev+0x26>
   1ed40:	6878      	ldr	r0, [r7, #4]
   1ed42:	f7ef ff97 	bl	ec74 <_ZdlPv>
   1ed46:	687b      	ldr	r3, [r7, #4]
   1ed48:	4618      	mov	r0, r3
   1ed4a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ed4e:	46bd      	mov	sp, r7
   1ed50:	bd80      	pop	{r7, pc}
   1ed52:	46c0      	nop			(mov r8, r8)
   1ed54:	000241f8 	.word	0x000241f8

0001ed58 <_ZN9Krabi2015D0Ev>:
#include "tapis.h"
#include "ramasserPied.h"
#include "deposerGobelet.h"

class Krabi2015 : public StrategieV3
{
   1ed58:	b580      	push	{r7, lr}
   1ed5a:	b086      	sub	sp, #24
   1ed5c:	af00      	add	r7, sp, #0
   1ed5e:	6178      	str	r0, [r7, #20]
   1ed60:	697a      	ldr	r2, [r7, #20]
   1ed62:	4b4c      	ldr	r3, [pc, #304]	(1ee94 <_ZN9Krabi2015D0Ev+0x13c>)
   1ed64:	6013      	str	r3, [r2, #0]
   1ed66:	697b      	ldr	r3, [r7, #20]
   1ed68:	f503 7306 	add.w	r3, r3, #536	; 0x218
   1ed6c:	2b00      	cmp	r3, #0
   1ed6e:	d015      	beq.n	1ed9c <_ZN9Krabi2015D0Ev+0x44>
   1ed70:	697b      	ldr	r3, [r7, #20]
   1ed72:	f503 7306 	add.w	r3, r3, #536	; 0x218
   1ed76:	f503 7390 	add.w	r3, r3, #288	; 0x120
   1ed7a:	603b      	str	r3, [r7, #0]
   1ed7c:	697b      	ldr	r3, [r7, #20]
   1ed7e:	f503 7306 	add.w	r3, r3, #536	; 0x218
   1ed82:	683a      	ldr	r2, [r7, #0]
   1ed84:	429a      	cmp	r2, r3
   1ed86:	d009      	beq.n	1ed9c <_ZN9Krabi2015D0Ev+0x44>
   1ed88:	683b      	ldr	r3, [r7, #0]
   1ed8a:	f1a3 0324 	sub.w	r3, r3, #36	; 0x24
   1ed8e:	603b      	str	r3, [r7, #0]
   1ed90:	683a      	ldr	r2, [r7, #0]
   1ed92:	6813      	ldr	r3, [r2, #0]
   1ed94:	681b      	ldr	r3, [r3, #0]
   1ed96:	6838      	ldr	r0, [r7, #0]
   1ed98:	4798      	blx	r3
   1ed9a:	e7ef      	b.n	1ed7c <_ZN9Krabi2015D0Ev+0x24>
   1ed9c:	697b      	ldr	r3, [r7, #20]
   1ed9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
   1eda2:	2b00      	cmp	r3, #0
   1eda4:	d015      	beq.n	1edd2 <_ZN9Krabi2015D0Ev+0x7a>
   1eda6:	697b      	ldr	r3, [r7, #20]
   1eda8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
   1edac:	f103 0360 	add.w	r3, r3, #96	; 0x60
   1edb0:	607b      	str	r3, [r7, #4]
   1edb2:	697b      	ldr	r3, [r7, #20]
   1edb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
   1edb8:	687a      	ldr	r2, [r7, #4]
   1edba:	429a      	cmp	r2, r3
   1edbc:	d009      	beq.n	1edd2 <_ZN9Krabi2015D0Ev+0x7a>
   1edbe:	687b      	ldr	r3, [r7, #4]
   1edc0:	f1a3 0320 	sub.w	r3, r3, #32	; 0x20
   1edc4:	607b      	str	r3, [r7, #4]
   1edc6:	687a      	ldr	r2, [r7, #4]
   1edc8:	6813      	ldr	r3, [r2, #0]
   1edca:	681b      	ldr	r3, [r3, #0]
   1edcc:	6878      	ldr	r0, [r7, #4]
   1edce:	4798      	blx	r3
   1edd0:	e7ef      	b.n	1edb2 <_ZN9Krabi2015D0Ev+0x5a>
   1edd2:	697b      	ldr	r3, [r7, #20]
   1edd4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1edd8:	2b00      	cmp	r3, #0
   1edda:	d013      	beq.n	1ee04 <_ZN9Krabi2015D0Ev+0xac>
   1eddc:	697b      	ldr	r3, [r7, #20]
   1edde:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
   1ede2:	60bb      	str	r3, [r7, #8]
   1ede4:	697b      	ldr	r3, [r7, #20]
   1ede6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1edea:	68ba      	ldr	r2, [r7, #8]
   1edec:	429a      	cmp	r2, r3
   1edee:	d009      	beq.n	1ee04 <_ZN9Krabi2015D0Ev+0xac>
   1edf0:	68bb      	ldr	r3, [r7, #8]
   1edf2:	f1a3 032c 	sub.w	r3, r3, #44	; 0x2c
   1edf6:	60bb      	str	r3, [r7, #8]
   1edf8:	68ba      	ldr	r2, [r7, #8]
   1edfa:	6813      	ldr	r3, [r2, #0]
   1edfc:	681b      	ldr	r3, [r3, #0]
   1edfe:	68b8      	ldr	r0, [r7, #8]
   1ee00:	4798      	blx	r3
   1ee02:	e7ef      	b.n	1ede4 <_ZN9Krabi2015D0Ev+0x8c>
   1ee04:	697b      	ldr	r3, [r7, #20]
   1ee06:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1ee0a:	2b00      	cmp	r3, #0
   1ee0c:	d015      	beq.n	1ee3a <_ZN9Krabi2015D0Ev+0xe2>
   1ee0e:	697b      	ldr	r3, [r7, #20]
   1ee10:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1ee14:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
   1ee18:	60fb      	str	r3, [r7, #12]
   1ee1a:	697b      	ldr	r3, [r7, #20]
   1ee1c:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1ee20:	68fa      	ldr	r2, [r7, #12]
   1ee22:	429a      	cmp	r2, r3
   1ee24:	d009      	beq.n	1ee3a <_ZN9Krabi2015D0Ev+0xe2>
   1ee26:	68fb      	ldr	r3, [r7, #12]
   1ee28:	f1a3 0320 	sub.w	r3, r3, #32	; 0x20
   1ee2c:	60fb      	str	r3, [r7, #12]
   1ee2e:	68fa      	ldr	r2, [r7, #12]
   1ee30:	6813      	ldr	r3, [r2, #0]
   1ee32:	681b      	ldr	r3, [r3, #0]
   1ee34:	68f8      	ldr	r0, [r7, #12]
   1ee36:	4798      	blx	r3
   1ee38:	e7ef      	b.n	1ee1a <_ZN9Krabi2015D0Ev+0xc2>
   1ee3a:	697b      	ldr	r3, [r7, #20]
   1ee3c:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1ee40:	2b00      	cmp	r3, #0
   1ee42:	d015      	beq.n	1ee70 <_ZN9Krabi2015D0Ev+0x118>
   1ee44:	697b      	ldr	r3, [r7, #20]
   1ee46:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1ee4a:	f103 0378 	add.w	r3, r3, #120	; 0x78
   1ee4e:	613b      	str	r3, [r7, #16]
   1ee50:	697b      	ldr	r3, [r7, #20]
   1ee52:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1ee56:	693a      	ldr	r2, [r7, #16]
   1ee58:	429a      	cmp	r2, r3
   1ee5a:	d009      	beq.n	1ee70 <_ZN9Krabi2015D0Ev+0x118>
   1ee5c:	693b      	ldr	r3, [r7, #16]
   1ee5e:	f1a3 0328 	sub.w	r3, r3, #40	; 0x28
   1ee62:	613b      	str	r3, [r7, #16]
   1ee64:	693a      	ldr	r2, [r7, #16]
   1ee66:	6813      	ldr	r3, [r2, #0]
   1ee68:	681b      	ldr	r3, [r3, #0]
   1ee6a:	6938      	ldr	r0, [r7, #16]
   1ee6c:	4798      	blx	r3
   1ee6e:	e7ef      	b.n	1ee50 <_ZN9Krabi2015D0Ev+0xf8>
   1ee70:	697b      	ldr	r3, [r7, #20]
   1ee72:	4618      	mov	r0, r3
   1ee74:	f7ff ff54 	bl	1ed20 <_ZN11StrategieV3D2Ev>
   1ee78:	f04f 0301 	mov.w	r3, #1	; 0x1
   1ee7c:	b2db      	uxtb	r3, r3
   1ee7e:	2b00      	cmp	r3, #0
   1ee80:	d002      	beq.n	1ee88 <_ZN9Krabi2015D0Ev+0x130>
   1ee82:	6978      	ldr	r0, [r7, #20]
   1ee84:	f7ef fef6 	bl	ec74 <_ZdlPv>
   1ee88:	697b      	ldr	r3, [r7, #20]
   1ee8a:	4618      	mov	r0, r3
   1ee8c:	f107 0718 	add.w	r7, r7, #24	; 0x18
   1ee90:	46bd      	mov	sp, r7
   1ee92:	bd80      	pop	{r7, pc}
   1ee94:	00024160 	.word	0x00024160

0001ee98 <_ZN9Krabi2015D1Ev>:
   1ee98:	b580      	push	{r7, lr}
   1ee9a:	b086      	sub	sp, #24
   1ee9c:	af00      	add	r7, sp, #0
   1ee9e:	6178      	str	r0, [r7, #20]
   1eea0:	697a      	ldr	r2, [r7, #20]
   1eea2:	4b4c      	ldr	r3, [pc, #304]	(1efd4 <_ZN9Krabi2015D1Ev+0x13c>)
   1eea4:	6013      	str	r3, [r2, #0]
   1eea6:	697b      	ldr	r3, [r7, #20]
   1eea8:	f503 7306 	add.w	r3, r3, #536	; 0x218
   1eeac:	2b00      	cmp	r3, #0
   1eeae:	d015      	beq.n	1eedc <_ZN9Krabi2015D1Ev+0x44>
   1eeb0:	697b      	ldr	r3, [r7, #20]
   1eeb2:	f503 7306 	add.w	r3, r3, #536	; 0x218
   1eeb6:	f503 7390 	add.w	r3, r3, #288	; 0x120
   1eeba:	603b      	str	r3, [r7, #0]
   1eebc:	697b      	ldr	r3, [r7, #20]
   1eebe:	f503 7306 	add.w	r3, r3, #536	; 0x218
   1eec2:	683a      	ldr	r2, [r7, #0]
   1eec4:	429a      	cmp	r2, r3
   1eec6:	d009      	beq.n	1eedc <_ZN9Krabi2015D1Ev+0x44>
   1eec8:	683b      	ldr	r3, [r7, #0]
   1eeca:	f1a3 0324 	sub.w	r3, r3, #36	; 0x24
   1eece:	603b      	str	r3, [r7, #0]
   1eed0:	683a      	ldr	r2, [r7, #0]
   1eed2:	6813      	ldr	r3, [r2, #0]
   1eed4:	681b      	ldr	r3, [r3, #0]
   1eed6:	6838      	ldr	r0, [r7, #0]
   1eed8:	4798      	blx	r3
   1eeda:	e7ef      	b.n	1eebc <_ZN9Krabi2015D1Ev+0x24>
   1eedc:	697b      	ldr	r3, [r7, #20]
   1eede:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
   1eee2:	2b00      	cmp	r3, #0
   1eee4:	d015      	beq.n	1ef12 <_ZN9Krabi2015D1Ev+0x7a>
   1eee6:	697b      	ldr	r3, [r7, #20]
   1eee8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
   1eeec:	f103 0360 	add.w	r3, r3, #96	; 0x60
   1eef0:	607b      	str	r3, [r7, #4]
   1eef2:	697b      	ldr	r3, [r7, #20]
   1eef4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
   1eef8:	687a      	ldr	r2, [r7, #4]
   1eefa:	429a      	cmp	r2, r3
   1eefc:	d009      	beq.n	1ef12 <_ZN9Krabi2015D1Ev+0x7a>
   1eefe:	687b      	ldr	r3, [r7, #4]
   1ef00:	f1a3 0320 	sub.w	r3, r3, #32	; 0x20
   1ef04:	607b      	str	r3, [r7, #4]
   1ef06:	687a      	ldr	r2, [r7, #4]
   1ef08:	6813      	ldr	r3, [r2, #0]
   1ef0a:	681b      	ldr	r3, [r3, #0]
   1ef0c:	6878      	ldr	r0, [r7, #4]
   1ef0e:	4798      	blx	r3
   1ef10:	e7ef      	b.n	1eef2 <_ZN9Krabi2015D1Ev+0x5a>
   1ef12:	697b      	ldr	r3, [r7, #20]
   1ef14:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1ef18:	2b00      	cmp	r3, #0
   1ef1a:	d013      	beq.n	1ef44 <_ZN9Krabi2015D1Ev+0xac>
   1ef1c:	697b      	ldr	r3, [r7, #20]
   1ef1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
   1ef22:	60bb      	str	r3, [r7, #8]
   1ef24:	697b      	ldr	r3, [r7, #20]
   1ef26:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1ef2a:	68ba      	ldr	r2, [r7, #8]
   1ef2c:	429a      	cmp	r2, r3
   1ef2e:	d009      	beq.n	1ef44 <_ZN9Krabi2015D1Ev+0xac>
   1ef30:	68bb      	ldr	r3, [r7, #8]
   1ef32:	f1a3 032c 	sub.w	r3, r3, #44	; 0x2c
   1ef36:	60bb      	str	r3, [r7, #8]
   1ef38:	68ba      	ldr	r2, [r7, #8]
   1ef3a:	6813      	ldr	r3, [r2, #0]
   1ef3c:	681b      	ldr	r3, [r3, #0]
   1ef3e:	68b8      	ldr	r0, [r7, #8]
   1ef40:	4798      	blx	r3
   1ef42:	e7ef      	b.n	1ef24 <_ZN9Krabi2015D1Ev+0x8c>
   1ef44:	697b      	ldr	r3, [r7, #20]
   1ef46:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1ef4a:	2b00      	cmp	r3, #0
   1ef4c:	d015      	beq.n	1ef7a <_ZN9Krabi2015D1Ev+0xe2>
   1ef4e:	697b      	ldr	r3, [r7, #20]
   1ef50:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1ef54:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
   1ef58:	60fb      	str	r3, [r7, #12]
   1ef5a:	697b      	ldr	r3, [r7, #20]
   1ef5c:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1ef60:	68fa      	ldr	r2, [r7, #12]
   1ef62:	429a      	cmp	r2, r3
   1ef64:	d009      	beq.n	1ef7a <_ZN9Krabi2015D1Ev+0xe2>
   1ef66:	68fb      	ldr	r3, [r7, #12]
   1ef68:	f1a3 0320 	sub.w	r3, r3, #32	; 0x20
   1ef6c:	60fb      	str	r3, [r7, #12]
   1ef6e:	68fa      	ldr	r2, [r7, #12]
   1ef70:	6813      	ldr	r3, [r2, #0]
   1ef72:	681b      	ldr	r3, [r3, #0]
   1ef74:	68f8      	ldr	r0, [r7, #12]
   1ef76:	4798      	blx	r3
   1ef78:	e7ef      	b.n	1ef5a <_ZN9Krabi2015D1Ev+0xc2>
   1ef7a:	697b      	ldr	r3, [r7, #20]
   1ef7c:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1ef80:	2b00      	cmp	r3, #0
   1ef82:	d015      	beq.n	1efb0 <_ZN9Krabi2015D1Ev+0x118>
   1ef84:	697b      	ldr	r3, [r7, #20]
   1ef86:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1ef8a:	f103 0378 	add.w	r3, r3, #120	; 0x78
   1ef8e:	613b      	str	r3, [r7, #16]
   1ef90:	697b      	ldr	r3, [r7, #20]
   1ef92:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1ef96:	693a      	ldr	r2, [r7, #16]
   1ef98:	429a      	cmp	r2, r3
   1ef9a:	d009      	beq.n	1efb0 <_ZN9Krabi2015D1Ev+0x118>
   1ef9c:	693b      	ldr	r3, [r7, #16]
   1ef9e:	f1a3 0328 	sub.w	r3, r3, #40	; 0x28
   1efa2:	613b      	str	r3, [r7, #16]
   1efa4:	693a      	ldr	r2, [r7, #16]
   1efa6:	6813      	ldr	r3, [r2, #0]
   1efa8:	681b      	ldr	r3, [r3, #0]
   1efaa:	6938      	ldr	r0, [r7, #16]
   1efac:	4798      	blx	r3
   1efae:	e7ef      	b.n	1ef90 <_ZN9Krabi2015D1Ev+0xf8>
   1efb0:	697b      	ldr	r3, [r7, #20]
   1efb2:	4618      	mov	r0, r3
   1efb4:	f7ff feb4 	bl	1ed20 <_ZN11StrategieV3D2Ev>
   1efb8:	f04f 0300 	mov.w	r3, #0	; 0x0
   1efbc:	b2db      	uxtb	r3, r3
   1efbe:	2b00      	cmp	r3, #0
   1efc0:	d002      	beq.n	1efc8 <_ZN9Krabi2015D1Ev+0x130>
   1efc2:	6978      	ldr	r0, [r7, #20]
   1efc4:	f7ef fe56 	bl	ec74 <_ZdlPv>
   1efc8:	697b      	ldr	r3, [r7, #20]
   1efca:	4618      	mov	r0, r3
   1efcc:	f107 0718 	add.w	r7, r7, #24	; 0x18
   1efd0:	46bd      	mov	sp, r7
   1efd2:	bd80      	pop	{r7, pc}
   1efd4:	00024160 	.word	0x00024160

0001efd8 <_ZN17MediumLevelActionaSERKS_>:
#ifndef ROBOTHW
#include <QPainter>;
#endif

class MediumLevelAction
{
   1efd8:	b580      	push	{r7, lr}
   1efda:	b082      	sub	sp, #8
   1efdc:	af00      	add	r7, sp, #0
   1efde:	6078      	str	r0, [r7, #4]
   1efe0:	6039      	str	r1, [r7, #0]
   1efe2:	687b      	ldr	r3, [r7, #4]
   1efe4:	f103 0304 	add.w	r3, r3, #4	; 0x4
   1efe8:	683a      	ldr	r2, [r7, #0]
   1efea:	4618      	mov	r0, r3
   1efec:	f102 0304 	add.w	r3, r2, #4	; 0x4
   1eff0:	e893 0006 	ldmia.w	r3, {r1, r2}
   1eff4:	f7ef ff92 	bl	ef1c <_ZN8PositionaSES_>
   1eff8:	683b      	ldr	r3, [r7, #0]
   1effa:	68da      	ldr	r2, [r3, #12]
   1effc:	687b      	ldr	r3, [r7, #4]
   1effe:	60da      	str	r2, [r3, #12]
   1f000:	683b      	ldr	r3, [r7, #0]
   1f002:	7c1b      	ldrb	r3, [r3, #16]
   1f004:	687a      	ldr	r2, [r7, #4]
   1f006:	7413      	strb	r3, [r2, #16]
   1f008:	683b      	ldr	r3, [r7, #0]
   1f00a:	695a      	ldr	r2, [r3, #20]
   1f00c:	687b      	ldr	r3, [r7, #4]
   1f00e:	615a      	str	r2, [r3, #20]
   1f010:	687b      	ldr	r3, [r7, #4]
   1f012:	4618      	mov	r0, r3
   1f014:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1f018:	46bd      	mov	sp, r7
   1f01a:	bd80      	pop	{r7, pc}

0001f01c <_ZN10ActionGoToaSERKS_>:
#include "position.h"
//#include <stdint.h>


class ActionGoTo : public MediumLevelAction
{
   1f01c:	b580      	push	{r7, lr}
   1f01e:	b082      	sub	sp, #8
   1f020:	af00      	add	r7, sp, #0
   1f022:	6078      	str	r0, [r7, #4]
   1f024:	6039      	str	r1, [r7, #0]
   1f026:	687b      	ldr	r3, [r7, #4]
   1f028:	683a      	ldr	r2, [r7, #0]
   1f02a:	4618      	mov	r0, r3
   1f02c:	4611      	mov	r1, r2
   1f02e:	f7ff ffd3 	bl	1efd8 <_ZN17MediumLevelActionaSERKS_>
   1f032:	683b      	ldr	r3, [r7, #0]
   1f034:	699a      	ldr	r2, [r3, #24]
   1f036:	687b      	ldr	r3, [r7, #4]
   1f038:	619a      	str	r2, [r3, #24]
   1f03a:	683b      	ldr	r3, [r7, #0]
   1f03c:	7f1b      	ldrb	r3, [r3, #28]
   1f03e:	687a      	ldr	r2, [r7, #4]
   1f040:	7713      	strb	r3, [r2, #28]
   1f042:	683b      	ldr	r3, [r7, #0]
   1f044:	6a1a      	ldr	r2, [r3, #32]
   1f046:	687b      	ldr	r3, [r7, #4]
   1f048:	621a      	str	r2, [r3, #32]
   1f04a:	683b      	ldr	r3, [r7, #0]
   1f04c:	6a5a      	ldr	r2, [r3, #36]
   1f04e:	687b      	ldr	r3, [r7, #4]
   1f050:	625a      	str	r2, [r3, #36]
   1f052:	687b      	ldr	r3, [r7, #4]
   1f054:	f103 0328 	add.w	r3, r3, #40	; 0x28
   1f058:	683a      	ldr	r2, [r7, #0]
   1f05a:	4618      	mov	r0, r3
   1f05c:	f102 0328 	add.w	r3, r2, #40	; 0x28
   1f060:	e893 0006 	ldmia.w	r3, {r1, r2}
   1f064:	f7ef ff5a 	bl	ef1c <_ZN8PositionaSES_>
   1f068:	687b      	ldr	r3, [r7, #4]
   1f06a:	4618      	mov	r0, r3
   1f06c:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1f070:	46bd      	mov	sp, r7
   1f072:	bd80      	pop	{r7, pc}

0001f074 <_ZN4ClapaSERKS_>:

/** @class clap : le robot doit fermer 3 claps du bord de la table
*/

class Clap : public MediumLevelAction
{
   1f074:	b580      	push	{r7, lr}
   1f076:	b082      	sub	sp, #8
   1f078:	af00      	add	r7, sp, #0
   1f07a:	6078      	str	r0, [r7, #4]
   1f07c:	6039      	str	r1, [r7, #0]
   1f07e:	687b      	ldr	r3, [r7, #4]
   1f080:	683a      	ldr	r2, [r7, #0]
   1f082:	4618      	mov	r0, r3
   1f084:	4611      	mov	r1, r2
   1f086:	f7ff ffa7 	bl	1efd8 <_ZN17MediumLevelActionaSERKS_>
   1f08a:	687b      	ldr	r3, [r7, #4]
   1f08c:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1f090:	683a      	ldr	r2, [r7, #0]
   1f092:	4618      	mov	r0, r3
   1f094:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1f098:	e893 0006 	ldmia.w	r3, {r1, r2}
   1f09c:	f7ef ff3e 	bl	ef1c <_ZN8PositionaSES_>
   1f0a0:	687b      	ldr	r3, [r7, #4]
   1f0a2:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1f0a6:	683a      	ldr	r2, [r7, #0]
   1f0a8:	4618      	mov	r0, r3
   1f0aa:	f102 0320 	add.w	r3, r2, #32	; 0x20
   1f0ae:	e893 0006 	ldmia.w	r3, {r1, r2}
   1f0b2:	f7ef ff33 	bl	ef1c <_ZN8PositionaSES_>
   1f0b6:	687b      	ldr	r3, [r7, #4]
   1f0b8:	4618      	mov	r0, r3
   1f0ba:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1f0be:	46bd      	mov	sp, r7
   1f0c0:	bd80      	pop	{r7, pc}
   1f0c2:	46c0      	nop			(mov r8, r8)

0001f0c4 <_ZN7GobeletaSERKS_>:
#include "position.h"
#include "mediumLevelAction.h"
#include "command.h"

class Gobelet : public MediumLevelAction
{
   1f0c4:	b580      	push	{r7, lr}
   1f0c6:	b082      	sub	sp, #8
   1f0c8:	af00      	add	r7, sp, #0
   1f0ca:	6078      	str	r0, [r7, #4]
   1f0cc:	6039      	str	r1, [r7, #0]
   1f0ce:	687b      	ldr	r3, [r7, #4]
   1f0d0:	683a      	ldr	r2, [r7, #0]
   1f0d2:	4618      	mov	r0, r3
   1f0d4:	4611      	mov	r1, r2
   1f0d6:	f7ff ff7f 	bl	1efd8 <_ZN17MediumLevelActionaSERKS_>
   1f0da:	687b      	ldr	r3, [r7, #4]
   1f0dc:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1f0e0:	683a      	ldr	r2, [r7, #0]
   1f0e2:	4618      	mov	r0, r3
   1f0e4:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1f0e8:	e893 0006 	ldmia.w	r3, {r1, r2}
   1f0ec:	f7ef ff16 	bl	ef1c <_ZN8PositionaSES_>
   1f0f0:	687b      	ldr	r3, [r7, #4]
   1f0f2:	4618      	mov	r0, r3
   1f0f4:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1f0f8:	46bd      	mov	sp, r7
   1f0fa:	bd80      	pop	{r7, pc}

0001f0fc <_ZN5TapisaSERKS_>:

/** @class Tapis : le robot doit poser 2 tapis sur les marches.
*/

class Tapis : public MediumLevelAction
{
   1f0fc:	b580      	push	{r7, lr}
   1f0fe:	b082      	sub	sp, #8
   1f100:	af00      	add	r7, sp, #0
   1f102:	6078      	str	r0, [r7, #4]
   1f104:	6039      	str	r1, [r7, #0]
   1f106:	687b      	ldr	r3, [r7, #4]
   1f108:	683a      	ldr	r2, [r7, #0]
   1f10a:	4618      	mov	r0, r3
   1f10c:	4611      	mov	r1, r2
   1f10e:	f7ff ff63 	bl	1efd8 <_ZN17MediumLevelActionaSERKS_>
   1f112:	687b      	ldr	r3, [r7, #4]
   1f114:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1f118:	683a      	ldr	r2, [r7, #0]
   1f11a:	4618      	mov	r0, r3
   1f11c:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1f120:	e893 0006 	ldmia.w	r3, {r1, r2}
   1f124:	f7ef fefa 	bl	ef1c <_ZN8PositionaSES_>
   1f128:	687b      	ldr	r3, [r7, #4]
   1f12a:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1f12e:	683a      	ldr	r2, [r7, #0]
   1f130:	4618      	mov	r0, r3
   1f132:	f102 0320 	add.w	r3, r2, #32	; 0x20
   1f136:	e893 0006 	ldmia.w	r3, {r1, r2}
   1f13a:	f7ef feef 	bl	ef1c <_ZN8PositionaSES_>
   1f13e:	683b      	ldr	r3, [r7, #0]
   1f140:	f893 3028 	ldrb.w	r3, [r3, #40]
   1f144:	687a      	ldr	r2, [r7, #4]
   1f146:	f882 3028 	strb.w	r3, [r2, #40]
   1f14a:	687b      	ldr	r3, [r7, #4]
   1f14c:	4618      	mov	r0, r3
   1f14e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1f152:	46bd      	mov	sp, r7
   1f154:	bd80      	pop	{r7, pc}
   1f156:	46c0      	nop			(mov r8, r8)

0001f158 <_ZN14DeposerGobeletaSERKS_>:
#include "position.h"
#include "mediumLevelAction.h"
#include "command.h"

class DeposerGobelet : public MediumLevelAction
{
   1f158:	b580      	push	{r7, lr}
   1f15a:	b082      	sub	sp, #8
   1f15c:	af00      	add	r7, sp, #0
   1f15e:	6078      	str	r0, [r7, #4]
   1f160:	6039      	str	r1, [r7, #0]
   1f162:	687b      	ldr	r3, [r7, #4]
   1f164:	683a      	ldr	r2, [r7, #0]
   1f166:	4618      	mov	r0, r3
   1f168:	4611      	mov	r1, r2
   1f16a:	f7ff ff35 	bl	1efd8 <_ZN17MediumLevelActionaSERKS_>
   1f16e:	687b      	ldr	r3, [r7, #4]
   1f170:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1f174:	683a      	ldr	r2, [r7, #0]
   1f176:	4618      	mov	r0, r3
   1f178:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1f17c:	e893 0006 	ldmia.w	r3, {r1, r2}
   1f180:	f7ef fecc 	bl	ef1c <_ZN8PositionaSES_>
   1f184:	687b      	ldr	r3, [r7, #4]
   1f186:	4618      	mov	r0, r3
   1f188:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1f18c:	46bd      	mov	sp, r7
   1f18e:	bd80      	pop	{r7, pc}

0001f190 <_ZN12RamasserPiedaSERKS_>:
#include "position.h"
#include "mediumLevelAction.h"
#include "command.h"

class RamasserPied : public MediumLevelAction
{
   1f190:	b580      	push	{r7, lr}
   1f192:	b082      	sub	sp, #8
   1f194:	af00      	add	r7, sp, #0
   1f196:	6078      	str	r0, [r7, #4]
   1f198:	6039      	str	r1, [r7, #0]
   1f19a:	687b      	ldr	r3, [r7, #4]
   1f19c:	683a      	ldr	r2, [r7, #0]
   1f19e:	4618      	mov	r0, r3
   1f1a0:	4611      	mov	r1, r2
   1f1a2:	f7ff ff19 	bl	1efd8 <_ZN17MediumLevelActionaSERKS_>
   1f1a6:	687b      	ldr	r3, [r7, #4]
   1f1a8:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1f1ac:	683a      	ldr	r2, [r7, #0]
   1f1ae:	4618      	mov	r0, r3
   1f1b0:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1f1b4:	e893 0006 	ldmia.w	r3, {r1, r2}
   1f1b8:	f7ef feb0 	bl	ef1c <_ZN8PositionaSES_>
   1f1bc:	683b      	ldr	r3, [r7, #0]
   1f1be:	f893 3020 	ldrb.w	r3, [r3, #32]
   1f1c2:	687a      	ldr	r2, [r7, #4]
   1f1c4:	f882 3020 	strb.w	r3, [r2, #32]
   1f1c8:	687b      	ldr	r3, [r7, #4]
   1f1ca:	4618      	mov	r0, r3
   1f1cc:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1f1d0:	46bd      	mov	sp, r7
   1f1d2:	bd80      	pop	{r7, pc}

0001f1d4 <_ZN11StrategieV3D0Ev>:
   1f1d4:	b580      	push	{r7, lr}
   1f1d6:	b082      	sub	sp, #8
   1f1d8:	af00      	add	r7, sp, #0
   1f1da:	6078      	str	r0, [r7, #4]
   1f1dc:	687a      	ldr	r2, [r7, #4]
   1f1de:	4b0a      	ldr	r3, [pc, #40]	(1f208 <_ZN11StrategieV3D0Ev+0x34>)
   1f1e0:	6013      	str	r3, [r2, #0]
   1f1e2:	687b      	ldr	r3, [r7, #4]
   1f1e4:	4618      	mov	r0, r3
   1f1e6:	f7f7 fbd5 	bl	16994 <_ZN17MediumLevelActionD2Ev>
   1f1ea:	f04f 0301 	mov.w	r3, #1	; 0x1
   1f1ee:	b2db      	uxtb	r3, r3
   1f1f0:	2b00      	cmp	r3, #0
   1f1f2:	d002      	beq.n	1f1fa <_ZN11StrategieV3D0Ev+0x26>
   1f1f4:	6878      	ldr	r0, [r7, #4]
   1f1f6:	f7ef fd3d 	bl	ec74 <_ZdlPv>
   1f1fa:	687b      	ldr	r3, [r7, #4]
   1f1fc:	4618      	mov	r0, r3
   1f1fe:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1f202:	46bd      	mov	sp, r7
   1f204:	bd80      	pop	{r7, pc}
   1f206:	46c0      	nop			(mov r8, r8)
   1f208:	000241f8 	.word	0x000241f8

0001f20c <_ZN11StrategieV3D1Ev>:
   1f20c:	b580      	push	{r7, lr}
   1f20e:	b082      	sub	sp, #8
   1f210:	af00      	add	r7, sp, #0
   1f212:	6078      	str	r0, [r7, #4]
   1f214:	687a      	ldr	r2, [r7, #4]
   1f216:	4b0a      	ldr	r3, [pc, #40]	(1f240 <_ZN11StrategieV3D1Ev+0x34>)
   1f218:	6013      	str	r3, [r2, #0]
   1f21a:	687b      	ldr	r3, [r7, #4]
   1f21c:	4618      	mov	r0, r3
   1f21e:	f7f7 fbb9 	bl	16994 <_ZN17MediumLevelActionD2Ev>
   1f222:	f04f 0300 	mov.w	r3, #0	; 0x0
   1f226:	b2db      	uxtb	r3, r3
   1f228:	2b00      	cmp	r3, #0
   1f22a:	d002      	beq.n	1f232 <_ZN11StrategieV3D1Ev+0x26>
   1f22c:	6878      	ldr	r0, [r7, #4]
   1f22e:	f7ef fd21 	bl	ec74 <_ZdlPv>
   1f232:	687b      	ldr	r3, [r7, #4]
   1f234:	4618      	mov	r0, r3
   1f236:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1f23a:	46bd      	mov	sp, r7
   1f23c:	bd80      	pop	{r7, pc}
   1f23e:	46c0      	nop			(mov r8, r8)
   1f240:	000241f8 	.word	0x000241f8

0001f244 <__cxa_pure_virtual>:
   1f244:	b500      	push	{lr}
   1f246:	4904      	ldr	r1, [pc, #16]	(1f258 <__cxa_pure_virtual+0x14>)
   1f248:	b081      	sub	sp, #4
   1f24a:	221b      	movs	r2, #27
   1f24c:	2002      	movs	r0, #2
   1f24e:	f004 f853 	bl	232f8 <write>
   1f252:	f000 f821 	bl	1f298 <_ZSt9terminatev>
   1f256:	46c0      	nop			(mov r8, r8)
   1f258:	00024870 	.word	0x00024870

0001f25c <_ZSt13set_terminatePFvvE>:
   1f25c:	4b02      	ldr	r3, [pc, #8]	(1f268 <_ZSt13set_terminatePFvvE+0xc>)
   1f25e:	681a      	ldr	r2, [r3, #0]
   1f260:	6018      	str	r0, [r3, #0]
   1f262:	4610      	mov	r0, r2
   1f264:	4770      	bx	lr
   1f266:	46c0      	nop			(mov r8, r8)
   1f268:	20000038 	.word	0x20000038

0001f26c <_ZSt14set_unexpectedPFvvE>:
   1f26c:	4b02      	ldr	r3, [pc, #8]	(1f278 <_ZSt14set_unexpectedPFvvE+0xc>)
   1f26e:	681a      	ldr	r2, [r3, #0]
   1f270:	6018      	str	r0, [r3, #0]
   1f272:	4610      	mov	r0, r2
   1f274:	4770      	bx	lr
   1f276:	46c0      	nop			(mov r8, r8)
   1f278:	20000034 	.word	0x20000034

0001f27c <_ZN10__cxxabiv111__terminateEPFvvE>:
   1f27c:	b510      	push	{r4, lr}
   1f27e:	4780      	blx	r0
   1f280:	f002 ffa8 	bl	221d4 <abort>
   1f284:	f000 ff3c 	bl	20100 <__cxa_begin_catch>
   1f288:	f002 ffa4 	bl	221d4 <abort>
   1f28c:	4604      	mov	r4, r0
   1f28e:	f000 feef 	bl	20070 <__cxa_end_catch>
   1f292:	4620      	mov	r0, r4
   1f294:	f7fa fa32 	bl	196fc <__cxa_end_cleanup>

0001f298 <_ZSt9terminatev>:
   1f298:	b500      	push	{lr}
   1f29a:	4b02      	ldr	r3, [pc, #8]	(1f2a4 <_ZSt9terminatev+0xc>)
   1f29c:	b081      	sub	sp, #4
   1f29e:	6818      	ldr	r0, [r3, #0]
   1f2a0:	f7ff ffec 	bl	1f27c <_ZN10__cxxabiv111__terminateEPFvvE>
   1f2a4:	20000038 	.word	0x20000038

0001f2a8 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   1f2a8:	b500      	push	{lr}
   1f2aa:	b081      	sub	sp, #4
   1f2ac:	4780      	blx	r0
   1f2ae:	f7ff fff3 	bl	1f298 <_ZSt9terminatev>
   1f2b2:	46c0      	nop			(mov r8, r8)

0001f2b4 <_ZSt10unexpectedv>:
   1f2b4:	b500      	push	{lr}
   1f2b6:	4b02      	ldr	r3, [pc, #8]	(1f2c0 <_ZSt10unexpectedv+0xc>)
   1f2b8:	b081      	sub	sp, #4
   1f2ba:	6818      	ldr	r0, [r3, #0]
   1f2bc:	f7ff fff4 	bl	1f2a8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1f2c0:	20000034 	.word	0x20000034

0001f2c4 <__cxa_begin_cleanup>:
   1f2c4:	b510      	push	{r4, lr}
   1f2c6:	4604      	mov	r4, r0
   1f2c8:	f001 f9f0 	bl	206ac <__cxa_get_globals>
   1f2cc:	f814 3920 	ldrb.w	r3, [r4], #-32
   1f2d0:	2b47      	cmp	r3, #71
   1f2d2:	d005      	beq.n	1f2e0 <__cxa_begin_cleanup+0x1c>
   1f2d4:	6883      	ldr	r3, [r0, #8]
   1f2d6:	2b00      	cmp	r3, #0
   1f2d8:	d127      	bne.n	1f32a <__cxa_begin_cleanup+0x66>
   1f2da:	6084      	str	r4, [r0, #8]
   1f2dc:	2001      	movs	r0, #1
   1f2de:	bd10      	pop	{r4, pc}
   1f2e0:	f894 3021 	ldrb.w	r3, [r4, #33]
   1f2e4:	2b4e      	cmp	r3, #78
   1f2e6:	d1f5      	bne.n	1f2d4 <__cxa_begin_cleanup+0x10>
   1f2e8:	f894 3022 	ldrb.w	r3, [r4, #34]
   1f2ec:	2b55      	cmp	r3, #85
   1f2ee:	d1f1      	bne.n	1f2d4 <__cxa_begin_cleanup+0x10>
   1f2f0:	f894 3023 	ldrb.w	r3, [r4, #35]
   1f2f4:	2b43      	cmp	r3, #67
   1f2f6:	d1ed      	bne.n	1f2d4 <__cxa_begin_cleanup+0x10>
   1f2f8:	f894 3024 	ldrb.w	r3, [r4, #36]
   1f2fc:	2b43      	cmp	r3, #67
   1f2fe:	d1e9      	bne.n	1f2d4 <__cxa_begin_cleanup+0x10>
   1f300:	f894 3025 	ldrb.w	r3, [r4, #37]
   1f304:	2b2b      	cmp	r3, #43
   1f306:	d1e5      	bne.n	1f2d4 <__cxa_begin_cleanup+0x10>
   1f308:	f894 3026 	ldrb.w	r3, [r4, #38]
   1f30c:	2b2b      	cmp	r3, #43
   1f30e:	d1e1      	bne.n	1f2d4 <__cxa_begin_cleanup+0x10>
   1f310:	f894 3027 	ldrb.w	r3, [r4, #39]
   1f314:	2b00      	cmp	r3, #0
   1f316:	d1dd      	bne.n	1f2d4 <__cxa_begin_cleanup+0x10>
   1f318:	69e3      	ldr	r3, [r4, #28]
   1f31a:	3301      	adds	r3, #1
   1f31c:	2b01      	cmp	r3, #1
   1f31e:	61e3      	str	r3, [r4, #28]
   1f320:	d1dc      	bne.n	1f2dc <__cxa_begin_cleanup+0x18>
   1f322:	6883      	ldr	r3, [r0, #8]
   1f324:	61a3      	str	r3, [r4, #24]
   1f326:	6084      	str	r4, [r0, #8]
   1f328:	e7d8      	b.n	1f2dc <__cxa_begin_cleanup+0x18>
   1f32a:	f7ff ffb5 	bl	1f298 <_ZSt9terminatev>
   1f32e:	46c0      	nop			(mov r8, r8)

0001f330 <__cxa_type_match>:
   1f330:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f332:	461f      	mov	r7, r3
   1f334:	7803      	ldrb	r3, [r0, #0]
   1f336:	b083      	sub	sp, #12
   1f338:	2b47      	cmp	r3, #71
   1f33a:	460e      	mov	r6, r1
   1f33c:	d02c      	beq.n	1f398 <__cxa_type_match+0x68>
   1f33e:	4d27      	ldr	r5, [pc, #156]	(1f3dc <__cxa_type_match+0xac>)
   1f340:	683b      	ldr	r3, [r7, #0]
   1f342:	682a      	ldr	r2, [r5, #0]
   1f344:	9301      	str	r3, [sp, #4]
   1f346:	4628      	mov	r0, r5
   1f348:	6893      	ldr	r3, [r2, #8]
   1f34a:	4798      	blx	r3
   1f34c:	b110      	cbz	r0, 1f354 <__cxa_type_match+0x24>
   1f34e:	9b01      	ldr	r3, [sp, #4]
   1f350:	681a      	ldr	r2, [r3, #0]
   1f352:	9201      	str	r2, [sp, #4]
   1f354:	6833      	ldr	r3, [r6, #0]
   1f356:	4630      	mov	r0, r6
   1f358:	691c      	ldr	r4, [r3, #16]
   1f35a:	4629      	mov	r1, r5
   1f35c:	aa01      	add	r2, sp, #4
   1f35e:	2301      	movs	r3, #1
   1f360:	47a0      	blx	r4
   1f362:	b1b8      	cbz	r0, 1f394 <__cxa_type_match+0x64>
   1f364:	9b01      	ldr	r3, [sp, #4]
   1f366:	6832      	ldr	r2, [r6, #0]
   1f368:	603b      	str	r3, [r7, #0]
   1f36a:	4b1d      	ldr	r3, [pc, #116]	(1f3e0 <__cxa_type_match+0xb0>)
   1f36c:	f852 0c04 	ldr.w	r0, [r2, #-4]
   1f370:	681a      	ldr	r2, [r3, #0]
   1f372:	f852 1c04 	ldr.w	r1, [r2, #-4]
   1f376:	f001 f8e9 	bl	2054c <_ZNKSt9type_infoeqERKS_>
   1f37a:	b150      	cbz	r0, 1f392 <__cxa_type_match+0x62>
   1f37c:	68f3      	ldr	r3, [r6, #12]
   1f37e:	2b00      	cmp	r3, #0
   1f380:	d02a      	beq.n	1f3d8 <__cxa_type_match+0xa8>
   1f382:	681b      	ldr	r3, [r3, #0]
   1f384:	4917      	ldr	r1, [pc, #92]	(1f3e4 <__cxa_type_match+0xb4>)
   1f386:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1f38a:	f001 f8df 	bl	2054c <_ZNKSt9type_infoeqERKS_>
   1f38e:	2800      	cmp	r0, #0
   1f390:	d01a      	beq.n	1f3c8 <__cxa_type_match+0x98>
   1f392:	2001      	movs	r0, #1
   1f394:	b003      	add	sp, #12
   1f396:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f398:	7843      	ldrb	r3, [r0, #1]
   1f39a:	2b4e      	cmp	r3, #78
   1f39c:	d1cf      	bne.n	1f33e <__cxa_type_match+0xe>
   1f39e:	7883      	ldrb	r3, [r0, #2]
   1f3a0:	2b55      	cmp	r3, #85
   1f3a2:	d1cc      	bne.n	1f33e <__cxa_type_match+0xe>
   1f3a4:	78c3      	ldrb	r3, [r0, #3]
   1f3a6:	2b43      	cmp	r3, #67
   1f3a8:	d1c9      	bne.n	1f33e <__cxa_type_match+0xe>
   1f3aa:	7903      	ldrb	r3, [r0, #4]
   1f3ac:	2b43      	cmp	r3, #67
   1f3ae:	d1c6      	bne.n	1f33e <__cxa_type_match+0xe>
   1f3b0:	7943      	ldrb	r3, [r0, #5]
   1f3b2:	2b2b      	cmp	r3, #43
   1f3b4:	d1c3      	bne.n	1f33e <__cxa_type_match+0xe>
   1f3b6:	7983      	ldrb	r3, [r0, #6]
   1f3b8:	2b2b      	cmp	r3, #43
   1f3ba:	d1c0      	bne.n	1f33e <__cxa_type_match+0xe>
   1f3bc:	79c3      	ldrb	r3, [r0, #7]
   1f3be:	2b00      	cmp	r3, #0
   1f3c0:	d1bd      	bne.n	1f33e <__cxa_type_match+0xe>
   1f3c2:	f850 5c20 	ldr.w	r5, [r0, #-32]
   1f3c6:	e7bb      	b.n	1f340 <__cxa_type_match+0x10>
   1f3c8:	68f0      	ldr	r0, [r6, #12]
   1f3ca:	68e9      	ldr	r1, [r5, #12]
   1f3cc:	f001 f8be 	bl	2054c <_ZNKSt9type_infoeqERKS_>
   1f3d0:	2800      	cmp	r0, #0
   1f3d2:	d1de      	bne.n	1f392 <__cxa_type_match+0x62>
   1f3d4:	3002      	adds	r0, #2
   1f3d6:	e7dd      	b.n	1f394 <__cxa_type_match+0x64>
   1f3d8:	f000 fcbc 	bl	1fd54 <__cxa_bad_typeid>
   1f3dc:	00024e84 	.word	0x00024e84
   1f3e0:	00024cc0 	.word	0x00024cc0
   1f3e4:	00024cd0 	.word	0x00024cd0

0001f3e8 <__gnu_end_cleanup>:
   1f3e8:	b500      	push	{lr}
   1f3ea:	b081      	sub	sp, #4
   1f3ec:	f001 f95e 	bl	206ac <__cxa_get_globals>
   1f3f0:	4602      	mov	r2, r0
   1f3f2:	6880      	ldr	r0, [r0, #8]
   1f3f4:	2800      	cmp	r0, #0
   1f3f6:	d02e      	beq.n	1f456 <__gnu_end_cleanup+0x6e>
   1f3f8:	f890 3020 	ldrb.w	r3, [r0, #32]
   1f3fc:	2b47      	cmp	r3, #71
   1f3fe:	d004      	beq.n	1f40a <__gnu_end_cleanup+0x22>
   1f400:	2300      	movs	r3, #0
   1f402:	6093      	str	r3, [r2, #8]
   1f404:	3020      	adds	r0, #32
   1f406:	b001      	add	sp, #4
   1f408:	bd00      	pop	{pc}
   1f40a:	f890 3021 	ldrb.w	r3, [r0, #33]
   1f40e:	2b4e      	cmp	r3, #78
   1f410:	d1f6      	bne.n	1f400 <__gnu_end_cleanup+0x18>
   1f412:	f890 3022 	ldrb.w	r3, [r0, #34]
   1f416:	2b55      	cmp	r3, #85
   1f418:	d1f2      	bne.n	1f400 <__gnu_end_cleanup+0x18>
   1f41a:	f890 3023 	ldrb.w	r3, [r0, #35]
   1f41e:	2b43      	cmp	r3, #67
   1f420:	d1ee      	bne.n	1f400 <__gnu_end_cleanup+0x18>
   1f422:	f890 3024 	ldrb.w	r3, [r0, #36]
   1f426:	2b43      	cmp	r3, #67
   1f428:	d1ea      	bne.n	1f400 <__gnu_end_cleanup+0x18>
   1f42a:	f890 3025 	ldrb.w	r3, [r0, #37]
   1f42e:	2b2b      	cmp	r3, #43
   1f430:	d1e6      	bne.n	1f400 <__gnu_end_cleanup+0x18>
   1f432:	f890 3026 	ldrb.w	r3, [r0, #38]
   1f436:	2b2b      	cmp	r3, #43
   1f438:	d1e2      	bne.n	1f400 <__gnu_end_cleanup+0x18>
   1f43a:	f890 3027 	ldrb.w	r3, [r0, #39]
   1f43e:	2b00      	cmp	r3, #0
   1f440:	d1de      	bne.n	1f400 <__gnu_end_cleanup+0x18>
   1f442:	69c3      	ldr	r3, [r0, #28]
   1f444:	3b01      	subs	r3, #1
   1f446:	61c3      	str	r3, [r0, #28]
   1f448:	2b00      	cmp	r3, #0
   1f44a:	d1db      	bne.n	1f404 <__gnu_end_cleanup+0x1c>
   1f44c:	6983      	ldr	r3, [r0, #24]
   1f44e:	6093      	str	r3, [r2, #8]
   1f450:	2200      	movs	r2, #0
   1f452:	6182      	str	r2, [r0, #24]
   1f454:	e7d6      	b.n	1f404 <__gnu_end_cleanup+0x1c>
   1f456:	f7ff ff1f 	bl	1f298 <_ZSt9terminatev>
   1f45a:	46c0      	nop			(mov r8, r8)

0001f45c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   1f45c:	b500      	push	{lr}
   1f45e:	28ff      	cmp	r0, #255
   1f460:	b081      	sub	sp, #4
   1f462:	d00d      	beq.n	1f480 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1f464:	f000 0070 	and.w	r0, r0, #112	; 0x70
   1f468:	2820      	cmp	r0, #32
   1f46a:	d018      	beq.n	1f49e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x42>
   1f46c:	dd07      	ble.n	1f47e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
   1f46e:	2840      	cmp	r0, #64
   1f470:	d00d      	beq.n	1f48e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   1f472:	2850      	cmp	r0, #80
   1f474:	d004      	beq.n	1f480 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1f476:	2830      	cmp	r0, #48
   1f478:	d00d      	beq.n	1f496 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
   1f47a:	f002 feab 	bl	221d4 <abort>
   1f47e:	b910      	cbnz	r0, 1f486 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
   1f480:	2000      	movs	r0, #0
   1f482:	b001      	add	sp, #4
   1f484:	bd00      	pop	{pc}
   1f486:	2810      	cmp	r0, #16
   1f488:	d0fa      	beq.n	1f480 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1f48a:	f002 fea3 	bl	221d4 <abort>
   1f48e:	4608      	mov	r0, r1
   1f490:	f7fe fd96 	bl	1dfc0 <_Unwind_GetRegionStart>
   1f494:	e7f5      	b.n	1f482 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
   1f496:	4608      	mov	r0, r1
   1f498:	f7fe fd6e 	bl	1df78 <_Unwind_GetDataRelBase>
   1f49c:	e7f1      	b.n	1f482 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
   1f49e:	4608      	mov	r0, r1
   1f4a0:	f7fe fd66 	bl	1df70 <_Unwind_GetTextRelBase>
   1f4a4:	e7ed      	b.n	1f482 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
   1f4a6:	46c0      	nop			(mov r8, r8)

0001f4a8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   1f4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f4ac:	4604      	mov	r4, r0
   1f4ae:	460e      	mov	r6, r1
   1f4b0:	4617      	mov	r7, r2
   1f4b2:	b108      	cbz	r0, 1f4b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
   1f4b4:	f7fe fd84 	bl	1dfc0 <_Unwind_GetRegionStart>
   1f4b8:	6038      	str	r0, [r7, #0]
   1f4ba:	4635      	mov	r5, r6
   1f4bc:	f815 8b01 	ldrb.w	r8, [r5], #1
   1f4c0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1f4c4:	bf08      	it	eq
   1f4c6:	6078      	streq	r0, [r7, #4]
   1f4c8:	d03d      	beq.n	1f546 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x9e>
   1f4ca:	4640      	mov	r0, r8
   1f4cc:	4621      	mov	r1, r4
   1f4ce:	f7ff ffc5 	bl	1f45c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1f4d2:	f1b8 0f50 	cmp.w	r8, #80	; 0x50
   1f4d6:	d06d      	beq.n	1f5b4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10c>
   1f4d8:	f008 030f 	and.w	r3, r8, #15	; 0xf
   1f4dc:	46ae      	mov	lr, r5
   1f4de:	2b0c      	cmp	r3, #12
   1f4e0:	f200 808d 	bhi.w	1f5fe <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x156>
   1f4e4:	e8df f003 	tbb	[pc, r3]
   1f4e8:	6d858d6d 	.word	0x6d858d6d
   1f4ec:	8b8b8b79 	.word	0x8b8b8b79
   1f4f0:	6d9f078b 	.word	0x6d9f078b
   1f4f4:	0079      	.short	0x0079
   1f4f6:	2400      	movs	r4, #0
   1f4f8:	1cb1      	adds	r1, r6, #2
   1f4fa:	46a4      	mov	ip, r4
   1f4fc:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1f500:	460d      	mov	r5, r1
   1f502:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1f506:	fa03 f30c 	lsl.w	r3, r3, ip
   1f50a:	3101      	adds	r1, #1
   1f50c:	431c      	orrs	r4, r3
   1f50e:	f012 0f80 	tst.w	r2, #128	; 0x80
   1f512:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1f516:	d1f1      	bne.n	1f4fc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
   1f518:	f1bc 0f1f 	cmp.w	ip, #31	; 0x1f
   1f51c:	d807      	bhi.n	1f52e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1f51e:	f012 0f40 	tst.w	r2, #64	; 0x40
   1f522:	bf1e      	ittt	ne
   1f524:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   1f528:	fa03 f30c 	lslne.w	r3, r3, ip
   1f52c:	431c      	orrne	r4, r3
   1f52e:	b14c      	cbz	r4, 1f544 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x9c>
   1f530:	f008 0370 	and.w	r3, r8, #112	; 0x70
   1f534:	2b10      	cmp	r3, #16
   1f536:	bf08      	it	eq
   1f538:	4670      	moveq	r0, lr
   1f53a:	1824      	adds	r4, r4, r0
   1f53c:	f018 0f80 	tst.w	r8, #128	; 0x80
   1f540:	bf18      	it	ne
   1f542:	6824      	ldrne	r4, [r4, #0]
   1f544:	607c      	str	r4, [r7, #4]
   1f546:	462c      	mov	r4, r5
   1f548:	f814 3b01 	ldrb.w	r3, [r4], #1
   1f54c:	2bff      	cmp	r3, #255
   1f54e:	753b      	strb	r3, [r7, #20]
   1f550:	d02d      	beq.n	1f5ae <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x106>
   1f552:	f04f 0c00 	mov.w	ip, #0	; 0x0
   1f556:	1ca9      	adds	r1, r5, #2
   1f558:	4660      	mov	r0, ip
   1f55a:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1f55e:	460c      	mov	r4, r1
   1f560:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1f564:	4083      	lsls	r3, r0
   1f566:	3101      	adds	r1, #1
   1f568:	3007      	adds	r0, #7
   1f56a:	f012 0f80 	tst.w	r2, #128	; 0x80
   1f56e:	ea4c 0c03 	orr.w	ip, ip, r3
   1f572:	d1f2      	bne.n	1f55a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xb2>
   1f574:	eb04 030c 	add.w	r3, r4, ip
   1f578:	60fb      	str	r3, [r7, #12]
   1f57a:	4621      	mov	r1, r4
   1f57c:	f811 3b02 	ldrb.w	r3, [r1], #2
   1f580:	2000      	movs	r0, #0
   1f582:	757b      	strb	r3, [r7, #21]
   1f584:	4684      	mov	ip, r0
   1f586:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1f58a:	460c      	mov	r4, r1
   1f58c:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1f590:	fa03 f30c 	lsl.w	r3, r3, ip
   1f594:	3101      	adds	r1, #1
   1f596:	4318      	orrs	r0, r3
   1f598:	f012 0f80 	tst.w	r2, #128	; 0x80
   1f59c:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1f5a0:	d1f1      	bne.n	1f586 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xde>
   1f5a2:	eb04 0300 	add.w	r3, r4, r0
   1f5a6:	613b      	str	r3, [r7, #16]
   1f5a8:	4620      	mov	r0, r4
   1f5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f5ae:	2300      	movs	r3, #0
   1f5b0:	60fb      	str	r3, [r7, #12]
   1f5b2:	e7e2      	b.n	1f57a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd2>
   1f5b4:	1d33      	adds	r3, r6, #4
   1f5b6:	f023 0503 	bic.w	r5, r3, #3	; 0x3
   1f5ba:	f855 4b04 	ldr.w	r4, [r5], #4
   1f5be:	607c      	str	r4, [r7, #4]
   1f5c0:	e7c1      	b.n	1f546 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x9e>
   1f5c2:	786a      	ldrb	r2, [r5, #1]
   1f5c4:	7873      	ldrb	r3, [r6, #1]
   1f5c6:	78a9      	ldrb	r1, [r5, #2]
   1f5c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1f5cc:	78ea      	ldrb	r2, [r5, #3]
   1f5ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1f5d2:	ea43 6402 	orr.w	r4, r3, r2, lsl #24
   1f5d6:	3504      	adds	r5, #4
   1f5d8:	e7a9      	b.n	1f52e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1f5da:	786a      	ldrb	r2, [r5, #1]
   1f5dc:	7873      	ldrb	r3, [r6, #1]
   1f5de:	78a9      	ldrb	r1, [r5, #2]
   1f5e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1f5e4:	78ea      	ldrb	r2, [r5, #3]
   1f5e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1f5ea:	ea43 6402 	orr.w	r4, r3, r2, lsl #24
   1f5ee:	3508      	adds	r5, #8
   1f5f0:	e79d      	b.n	1f52e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1f5f2:	786b      	ldrb	r3, [r5, #1]
   1f5f4:	7872      	ldrb	r2, [r6, #1]
   1f5f6:	3502      	adds	r5, #2
   1f5f8:	ea42 2403 	orr.w	r4, r2, r3, lsl #8
   1f5fc:	e797      	b.n	1f52e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1f5fe:	f002 fde9 	bl	221d4 <abort>
   1f602:	2400      	movs	r4, #0
   1f604:	1cb1      	adds	r1, r6, #2
   1f606:	46a4      	mov	ip, r4
   1f608:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1f60c:	460d      	mov	r5, r1
   1f60e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1f612:	fa03 f30c 	lsl.w	r3, r3, ip
   1f616:	3101      	adds	r1, #1
   1f618:	431c      	orrs	r4, r3
   1f61a:	f012 0f80 	tst.w	r2, #128	; 0x80
   1f61e:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1f622:	d1f1      	bne.n	1f608 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x160>
   1f624:	e783      	b.n	1f52e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1f626:	786a      	ldrb	r2, [r5, #1]
   1f628:	7873      	ldrb	r3, [r6, #1]
   1f62a:	3502      	adds	r5, #2
   1f62c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1f630:	041b      	lsls	r3, r3, #16
   1f632:	141c      	asrs	r4, r3, #16
   1f634:	e77b      	b.n	1f52e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1f636:	46c0      	nop			(mov r8, r8)

0001f638 <__gxx_personality_v0>:
   1f638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f63c:	f101 0358 	add.w	r3, r1, #88	; 0x58
   1f640:	b093      	sub	sp, #76
   1f642:	9311      	str	r3, [sp, #68]
   1f644:	f000 0303 	and.w	r3, r0, #3	; 0x3
   1f648:	2b01      	cmp	r3, #1
   1f64a:	468a      	mov	sl, r1
   1f64c:	4691      	mov	r9, r2
   1f64e:	f000 813f 	beq.w	1f8d0 <__gxx_personality_v0+0x298>
   1f652:	2b02      	cmp	r3, #2
   1f654:	f000 8132 	beq.w	1f8bc <__gxx_personality_v0+0x284>
   1f658:	2b00      	cmp	r3, #0
   1f65a:	d156      	bne.n	1f70a <__gxx_personality_v0+0xd2>
   1f65c:	f000 0508 	and.w	r5, r0, #8	; 0x8
   1f660:	2301      	movs	r3, #1
   1f662:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   1f666:	2100      	movs	r1, #0
   1f668:	ea45 0303 	orr.w	r3, r5, r3
   1f66c:	220c      	movs	r2, #12
   1f66e:	9306      	str	r3, [sp, #24]
   1f670:	4648      	mov	r0, r9
   1f672:	460b      	mov	r3, r1
   1f674:	f8cd a03c 	str.w	sl, [sp, #60]
   1f678:	f8cd b000 	str.w	fp, [sp]
   1f67c:	f7fd fe68 	bl	1d350 <_Unwind_VRS_Set>
   1f680:	9a06      	ldr	r2, [sp, #24]
   1f682:	2a06      	cmp	r2, #6
   1f684:	f000 8144 	beq.w	1f910 <__gxx_personality_v0+0x2d8>
   1f688:	4648      	mov	r0, r9
   1f68a:	f7fe fc8d 	bl	1dfa8 <_Unwind_GetLanguageSpecificData>
   1f68e:	9004      	str	r0, [sp, #16]
   1f690:	2800      	cmp	r0, #0
   1f692:	f000 8113 	beq.w	1f8bc <__gxx_personality_v0+0x284>
   1f696:	aa09      	add	r2, sp, #36
   1f698:	9904      	ldr	r1, [sp, #16]
   1f69a:	4648      	mov	r0, r9
   1f69c:	f7ff ff04 	bl	1f4a8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1f6a0:	4649      	mov	r1, r9
   1f6a2:	4604      	mov	r4, r0
   1f6a4:	f89d 0038 	ldrb.w	r0, [sp, #56]
   1f6a8:	f7ff fed8 	bl	1f45c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1f6ac:	2100      	movs	r1, #0
   1f6ae:	900b      	str	r0, [sp, #44]
   1f6b0:	460b      	mov	r3, r1
   1f6b2:	4648      	mov	r0, r9
   1f6b4:	220f      	movs	r2, #15
   1f6b6:	f8cd b000 	str.w	fp, [sp]
   1f6ba:	f7fd fe21 	bl	1d300 <_Unwind_VRS_Get>
   1f6be:	9b0f      	ldr	r3, [sp, #60]
   1f6c0:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   1f6c4:	3b01      	subs	r3, #1
   1f6c6:	9307      	str	r3, [sp, #28]
   1f6c8:	9b0d      	ldr	r3, [sp, #52]
   1f6ca:	429c      	cmp	r4, r3
   1f6cc:	f080 8230 	bcs.w	1fb30 <__gxx_personality_v0+0x4f8>
   1f6d0:	f89d 5039 	ldrb.w	r5, [sp, #57]
   1f6d4:	2100      	movs	r1, #0
   1f6d6:	4628      	mov	r0, r5
   1f6d8:	f7ff fec0 	bl	1f45c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1f6dc:	2d50      	cmp	r5, #80
   1f6de:	f000 80cb 	beq.w	1f878 <__gxx_personality_v0+0x240>
   1f6e2:	f005 030f 	and.w	r3, r5, #15	; 0xf
   1f6e6:	46a4      	mov	ip, r4
   1f6e8:	2b0c      	cmp	r3, #12
   1f6ea:	d80e      	bhi.n	1f70a <__gxx_personality_v0+0xd2>
   1f6ec:	e8df f013 	tbh	[pc, r3, lsl #1]
   1f6f0:	017e000f 	.word	0x017e000f
   1f6f4:	000f018b 	.word	0x000f018b
   1f6f8:	000d0158 	.word	0x000d0158
   1f6fc:	000d000d 	.word	0x000d000d
   1f700:	0199000d 	.word	0x0199000d
   1f704:	000f0191 	.word	0x000f0191
   1f708:	0158      	.short	0x0158
   1f70a:	f002 fd63 	bl	221d4 <abort>
   1f70e:	7862      	ldrb	r2, [r4, #1]
   1f710:	7823      	ldrb	r3, [r4, #0]
   1f712:	78a1      	ldrb	r1, [r4, #2]
   1f714:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1f718:	78e2      	ldrb	r2, [r4, #3]
   1f71a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1f71e:	ea43 6702 	orr.w	r7, r3, r2, lsl #24
   1f722:	3404      	adds	r4, #4
   1f724:	b14f      	cbz	r7, 1f73a <__gxx_personality_v0+0x102>
   1f726:	f005 0370 	and.w	r3, r5, #112	; 0x70
   1f72a:	2b10      	cmp	r3, #16
   1f72c:	bf08      	it	eq
   1f72e:	4660      	moveq	r0, ip
   1f730:	183f      	adds	r7, r7, r0
   1f732:	f015 0f80 	tst.w	r5, #128	; 0x80
   1f736:	bf18      	it	ne
   1f738:	683f      	ldrne	r7, [r7, #0]
   1f73a:	f89d 5039 	ldrb.w	r5, [sp, #57]
   1f73e:	2100      	movs	r1, #0
   1f740:	4628      	mov	r0, r5
   1f742:	f7ff fe8b 	bl	1f45c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1f746:	2d50      	cmp	r5, #80
   1f748:	f000 80a4 	beq.w	1f894 <__gxx_personality_v0+0x25c>
   1f74c:	f005 030f 	and.w	r3, r5, #15	; 0xf
   1f750:	46a4      	mov	ip, r4
   1f752:	2b0c      	cmp	r3, #12
   1f754:	d8d9      	bhi.n	1f70a <__gxx_personality_v0+0xd2>
   1f756:	a201      	add	r2, pc, #4	(adr r2, 1f75c <__gxx_personality_v0+0x124>)
   1f758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f75c:	0001f791 	.word	0x0001f791
   1f760:	0001fa65 	.word	0x0001fa65
   1f764:	0001fa59 	.word	0x0001fa59
   1f768:	0001f791 	.word	0x0001f791
   1f76c:	0001f9bd 	.word	0x0001f9bd
   1f770:	0001f70b 	.word	0x0001f70b
   1f774:	0001f70b 	.word	0x0001f70b
   1f778:	0001f70b 	.word	0x0001f70b
   1f77c:	0001f70b 	.word	0x0001f70b
   1f780:	0001fa8f 	.word	0x0001fa8f
   1f784:	0001fa7f 	.word	0x0001fa7f
   1f788:	0001f791 	.word	0x0001f791
   1f78c:	0001f9bd 	.word	0x0001f9bd
   1f790:	7862      	ldrb	r2, [r4, #1]
   1f792:	7823      	ldrb	r3, [r4, #0]
   1f794:	78a1      	ldrb	r1, [r4, #2]
   1f796:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1f79a:	78e2      	ldrb	r2, [r4, #3]
   1f79c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1f7a0:	ea43 6602 	orr.w	r6, r3, r2, lsl #24
   1f7a4:	3404      	adds	r4, #4
   1f7a6:	b14e      	cbz	r6, 1f7bc <__gxx_personality_v0+0x184>
   1f7a8:	f005 0370 	and.w	r3, r5, #112	; 0x70
   1f7ac:	2b10      	cmp	r3, #16
   1f7ae:	bf08      	it	eq
   1f7b0:	4660      	moveq	r0, ip
   1f7b2:	1836      	adds	r6, r6, r0
   1f7b4:	f015 0f80 	tst.w	r5, #128	; 0x80
   1f7b8:	bf18      	it	ne
   1f7ba:	6836      	ldrne	r6, [r6, #0]
   1f7bc:	f89d 8039 	ldrb.w	r8, [sp, #57]
   1f7c0:	2100      	movs	r1, #0
   1f7c2:	4640      	mov	r0, r8
   1f7c4:	f7ff fe4a 	bl	1f45c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1f7c8:	f1b8 0f50 	cmp.w	r8, #80	; 0x50
   1f7cc:	d070      	beq.n	1f8b0 <__gxx_personality_v0+0x278>
   1f7ce:	f008 030f 	and.w	r3, r8, #15	; 0xf
   1f7d2:	46a4      	mov	ip, r4
   1f7d4:	2b0c      	cmp	r3, #12
   1f7d6:	d898      	bhi.n	1f70a <__gxx_personality_v0+0xd2>
   1f7d8:	a201      	add	r2, pc, #4	(adr r2, 1f7e0 <__gxx_personality_v0+0x1a8>)
   1f7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f7de:	46c0      	nop			(mov r8, r8)
   1f7e0:	0001f815 	.word	0x0001f815
   1f7e4:	0001fad1 	.word	0x0001fad1
   1f7e8:	0001fac5 	.word	0x0001fac5
   1f7ec:	0001f815 	.word	0x0001f815
   1f7f0:	0001f9d5 	.word	0x0001f9d5
   1f7f4:	0001f70b 	.word	0x0001f70b
   1f7f8:	0001f70b 	.word	0x0001f70b
   1f7fc:	0001f70b 	.word	0x0001f70b
   1f800:	0001f70b 	.word	0x0001f70b
   1f804:	0001fafb 	.word	0x0001fafb
   1f808:	0001faeb 	.word	0x0001faeb
   1f80c:	0001f815 	.word	0x0001f815
   1f810:	0001f9d5 	.word	0x0001f9d5
   1f814:	7862      	ldrb	r2, [r4, #1]
   1f816:	7823      	ldrb	r3, [r4, #0]
   1f818:	78a1      	ldrb	r1, [r4, #2]
   1f81a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1f81e:	78e2      	ldrb	r2, [r4, #3]
   1f820:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1f824:	ea43 6502 	orr.w	r5, r3, r2, lsl #24
   1f828:	3404      	adds	r4, #4
   1f82a:	b14d      	cbz	r5, 1f840 <__gxx_personality_v0+0x208>
   1f82c:	f008 0370 	and.w	r3, r8, #112	; 0x70
   1f830:	2b10      	cmp	r3, #16
   1f832:	bf08      	it	eq
   1f834:	4660      	moveq	r0, ip
   1f836:	182d      	adds	r5, r5, r0
   1f838:	f018 0f80 	tst.w	r8, #128	; 0x80
   1f83c:	bf18      	it	ne
   1f83e:	682d      	ldrne	r5, [r5, #0]
   1f840:	2000      	movs	r0, #0
   1f842:	4601      	mov	r1, r0
   1f844:	f814 2b01 	ldrb.w	r2, [r4], #1
   1f848:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1f84c:	408b      	lsls	r3, r1
   1f84e:	3107      	adds	r1, #7
   1f850:	4318      	orrs	r0, r3
   1f852:	f012 0f80 	tst.w	r2, #128	; 0x80
   1f856:	d1f5      	bne.n	1f844 <__gxx_personality_v0+0x20c>
   1f858:	9b09      	ldr	r3, [sp, #36]
   1f85a:	9a07      	ldr	r2, [sp, #28]
   1f85c:	443b      	add	r3, r7
   1f85e:	429a      	cmp	r2, r3
   1f860:	bf3c      	itt	cc
   1f862:	9c0d      	ldrcc	r4, [sp, #52]
   1f864:	4623      	movcc	r3, r4
   1f866:	f4ff af30 	bcc.w	1f6ca <__gxx_personality_v0+0x92>
   1f86a:	9a07      	ldr	r2, [sp, #28]
   1f86c:	4433      	add	r3, r6
   1f86e:	429a      	cmp	r2, r3
   1f870:	f0c0 8189 	bcc.w	1fb86 <__gxx_personality_v0+0x54e>
   1f874:	9b0d      	ldr	r3, [sp, #52]
   1f876:	e728      	b.n	1f6ca <__gxx_personality_v0+0x92>
   1f878:	f89d 5039 	ldrb.w	r5, [sp, #57]
   1f87c:	1ce3      	adds	r3, r4, #3
   1f87e:	f023 0403 	bic.w	r4, r3, #3	; 0x3
   1f882:	2100      	movs	r1, #0
   1f884:	4628      	mov	r0, r5
   1f886:	f854 7b04 	ldr.w	r7, [r4], #4
   1f88a:	f7ff fde7 	bl	1f45c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1f88e:	2d50      	cmp	r5, #80
   1f890:	f47f af5c 	bne.w	1f74c <__gxx_personality_v0+0x114>
   1f894:	f89d 8039 	ldrb.w	r8, [sp, #57]
   1f898:	1ce3      	adds	r3, r4, #3
   1f89a:	f023 0403 	bic.w	r4, r3, #3	; 0x3
   1f89e:	2100      	movs	r1, #0
   1f8a0:	4640      	mov	r0, r8
   1f8a2:	f854 6b04 	ldr.w	r6, [r4], #4
   1f8a6:	f7ff fdd9 	bl	1f45c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1f8aa:	f1b8 0f50 	cmp.w	r8, #80	; 0x50
   1f8ae:	d18e      	bne.n	1f7ce <__gxx_personality_v0+0x196>
   1f8b0:	1ce3      	adds	r3, r4, #3
   1f8b2:	f023 0403 	bic.w	r4, r3, #3	; 0x3
   1f8b6:	f854 5b04 	ldr.w	r5, [r4], #4
   1f8ba:	e7c1      	b.n	1f840 <__gxx_personality_v0+0x208>
   1f8bc:	4650      	mov	r0, sl
   1f8be:	4649      	mov	r1, r9
   1f8c0:	f7fe fd06 	bl	1e2d0 <__gnu_unwind_frame>
   1f8c4:	2800      	cmp	r0, #0
   1f8c6:	d077      	beq.n	1f9b8 <__gxx_personality_v0+0x380>
   1f8c8:	2009      	movs	r0, #9
   1f8ca:	b013      	add	sp, #76
   1f8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8d0:	f010 0508 	ands.w	r5, r0, #8	; 0x8
   1f8d4:	bf18      	it	ne
   1f8d6:	f10d 0b3c 	addne.w	fp, sp, #60	; 0x3c
   1f8da:	d15f      	bne.n	1f99c <__gxx_personality_v0+0x364>
   1f8dc:	6a0c      	ldr	r4, [r1, #32]
   1f8de:	4610      	mov	r0, r2
   1f8e0:	462b      	mov	r3, r5
   1f8e2:	220d      	movs	r2, #13
   1f8e4:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   1f8e8:	4629      	mov	r1, r5
   1f8ea:	f8cd b000 	str.w	fp, [sp]
   1f8ee:	f7fd fd07 	bl	1d300 <_Unwind_VRS_Get>
   1f8f2:	9b0f      	ldr	r3, [sp, #60]
   1f8f4:	429c      	cmp	r4, r3
   1f8f6:	d151      	bne.n	1f99c <__gxx_personality_v0+0x364>
   1f8f8:	462b      	mov	r3, r5
   1f8fa:	4648      	mov	r0, r9
   1f8fc:	4629      	mov	r1, r5
   1f8fe:	220c      	movs	r2, #12
   1f900:	f8cd a03c 	str.w	sl, [sp, #60]
   1f904:	f8cd b000 	str.w	fp, [sp]
   1f908:	f7fd fd22 	bl	1d350 <_Unwind_VRS_Set>
   1f90c:	2306      	movs	r3, #6
   1f90e:	9306      	str	r3, [sp, #24]
   1f910:	f8da 8030 	ldr.w	r8, [sl, #48]
   1f914:	f8da 1028 	ldr.w	r1, [sl, #40]
   1f918:	f8da 002c 	ldr.w	r0, [sl, #44]
   1f91c:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1f920:	f000 8129 	beq.w	1fb76 <__gxx_personality_v0+0x53e>
   1f924:	460f      	mov	r7, r1
   1f926:	9004      	str	r0, [sp, #16]
   1f928:	2403      	movs	r4, #3
   1f92a:	9b06      	ldr	r3, [sp, #24]
   1f92c:	f013 0508 	ands.w	r5, r3, #8	; 0x8
   1f930:	f000 81df 	beq.w	1fcf2 <__gxx_personality_v0+0x6ba>
   1f934:	2c01      	cmp	r4, #1
   1f936:	f000 81da 	beq.w	1fcee <__gxx_personality_v0+0x6b6>
   1f93a:	2f00      	cmp	r7, #0
   1f93c:	f2c0 81d5 	blt.w	1fcea <__gxx_personality_v0+0x6b2>
   1f940:	2100      	movs	r1, #0
   1f942:	460a      	mov	r2, r1
   1f944:	460b      	mov	r3, r1
   1f946:	4648      	mov	r0, r9
   1f948:	f8cd a03c 	str.w	sl, [sp, #60]
   1f94c:	f8cd b000 	str.w	fp, [sp]
   1f950:	f7fd fcfe 	bl	1d350 <_Unwind_VRS_Set>
   1f954:	2100      	movs	r1, #0
   1f956:	2201      	movs	r2, #1
   1f958:	460b      	mov	r3, r1
   1f95a:	4648      	mov	r0, r9
   1f95c:	970f      	str	r7, [sp, #60]
   1f95e:	f8cd b000 	str.w	fp, [sp]
   1f962:	f7fd fcf5 	bl	1d350 <_Unwind_VRS_Set>
   1f966:	2100      	movs	r1, #0
   1f968:	220f      	movs	r2, #15
   1f96a:	460b      	mov	r3, r1
   1f96c:	4648      	mov	r0, r9
   1f96e:	f8cd b000 	str.w	fp, [sp]
   1f972:	f7fd fcc5 	bl	1d300 <_Unwind_VRS_Get>
   1f976:	9b0f      	ldr	r3, [sp, #60]
   1f978:	2100      	movs	r1, #0
   1f97a:	f003 0301 	and.w	r3, r3, #1	; 0x1
   1f97e:	ea48 0303 	orr.w	r3, r8, r3
   1f982:	930f      	str	r3, [sp, #60]
   1f984:	220f      	movs	r2, #15
   1f986:	4648      	mov	r0, r9
   1f988:	460b      	mov	r3, r1
   1f98a:	f8cd b000 	str.w	fp, [sp]
   1f98e:	f7fd fcdf 	bl	1d350 <_Unwind_VRS_Set>
   1f992:	2c02      	cmp	r4, #2
   1f994:	f000 80f2 	beq.w	1fb7c <__gxx_personality_v0+0x544>
   1f998:	2007      	movs	r0, #7
   1f99a:	e796      	b.n	1f8ca <__gxx_personality_v0+0x292>
   1f99c:	2302      	movs	r3, #2
   1f99e:	e662      	b.n	1f666 <__gxx_personality_v0+0x2e>
   1f9a0:	7862      	ldrb	r2, [r4, #1]
   1f9a2:	7823      	ldrb	r3, [r4, #0]
   1f9a4:	78a1      	ldrb	r1, [r4, #2]
   1f9a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1f9aa:	78e2      	ldrb	r2, [r4, #3]
   1f9ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1f9b0:	ea43 6702 	orr.w	r7, r3, r2, lsl #24
   1f9b4:	3408      	adds	r4, #8
   1f9b6:	e6b5      	b.n	1f724 <__gxx_personality_v0+0xec>
   1f9b8:	2008      	movs	r0, #8
   1f9ba:	e786      	b.n	1f8ca <__gxx_personality_v0+0x292>
   1f9bc:	7862      	ldrb	r2, [r4, #1]
   1f9be:	7823      	ldrb	r3, [r4, #0]
   1f9c0:	78a1      	ldrb	r1, [r4, #2]
   1f9c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1f9c6:	78e2      	ldrb	r2, [r4, #3]
   1f9c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1f9cc:	ea43 6602 	orr.w	r6, r3, r2, lsl #24
   1f9d0:	3408      	adds	r4, #8
   1f9d2:	e6e8      	b.n	1f7a6 <__gxx_personality_v0+0x16e>
   1f9d4:	7862      	ldrb	r2, [r4, #1]
   1f9d6:	7823      	ldrb	r3, [r4, #0]
   1f9d8:	78a1      	ldrb	r1, [r4, #2]
   1f9da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1f9de:	78e2      	ldrb	r2, [r4, #3]
   1f9e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1f9e4:	ea43 6502 	orr.w	r5, r3, r2, lsl #24
   1f9e8:	3408      	adds	r4, #8
   1f9ea:	e71e      	b.n	1f82a <__gxx_personality_v0+0x1f2>
   1f9ec:	2700      	movs	r7, #0
   1f9ee:	4639      	mov	r1, r7
   1f9f0:	f814 2b01 	ldrb.w	r2, [r4], #1
   1f9f4:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1f9f8:	408b      	lsls	r3, r1
   1f9fa:	3107      	adds	r1, #7
   1f9fc:	431f      	orrs	r7, r3
   1f9fe:	f012 0f80 	tst.w	r2, #128	; 0x80
   1fa02:	d1f5      	bne.n	1f9f0 <__gxx_personality_v0+0x3b8>
   1fa04:	e68e      	b.n	1f724 <__gxx_personality_v0+0xec>
   1fa06:	7822      	ldrb	r2, [r4, #0]
   1fa08:	7863      	ldrb	r3, [r4, #1]
   1fa0a:	3402      	adds	r4, #2
   1fa0c:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   1fa10:	e688      	b.n	1f724 <__gxx_personality_v0+0xec>
   1fa12:	7823      	ldrb	r3, [r4, #0]
   1fa14:	7862      	ldrb	r2, [r4, #1]
   1fa16:	3402      	adds	r4, #2
   1fa18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1fa1c:	041b      	lsls	r3, r3, #16
   1fa1e:	141f      	asrs	r7, r3, #16
   1fa20:	e680      	b.n	1f724 <__gxx_personality_v0+0xec>
   1fa22:	2700      	movs	r7, #0
   1fa24:	4639      	mov	r1, r7
   1fa26:	f814 2b01 	ldrb.w	r2, [r4], #1
   1fa2a:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1fa2e:	408b      	lsls	r3, r1
   1fa30:	3107      	adds	r1, #7
   1fa32:	431f      	orrs	r7, r3
   1fa34:	f012 0f80 	tst.w	r2, #128	; 0x80
   1fa38:	d1f5      	bne.n	1fa26 <__gxx_personality_v0+0x3ee>
   1fa3a:	291f      	cmp	r1, #31
   1fa3c:	f63f ae72 	bhi.w	1f724 <__gxx_personality_v0+0xec>
   1fa40:	f012 0f40 	tst.w	r2, #64	; 0x40
   1fa44:	f43f ae6e 	beq.w	1f724 <__gxx_personality_v0+0xec>
   1fa48:	2201      	movs	r2, #1
   1fa4a:	fa12 f301 	lsls.w	r3, r2, r1
   1fa4e:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1fa52:	ea43 0707 	orr.w	r7, r3, r7
   1fa56:	e665      	b.n	1f724 <__gxx_personality_v0+0xec>
   1fa58:	7822      	ldrb	r2, [r4, #0]
   1fa5a:	7863      	ldrb	r3, [r4, #1]
   1fa5c:	3402      	adds	r4, #2
   1fa5e:	ea42 2603 	orr.w	r6, r2, r3, lsl #8
   1fa62:	e6a0      	b.n	1f7a6 <__gxx_personality_v0+0x16e>
   1fa64:	2600      	movs	r6, #0
   1fa66:	4631      	mov	r1, r6
   1fa68:	f814 2b01 	ldrb.w	r2, [r4], #1
   1fa6c:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1fa70:	408b      	lsls	r3, r1
   1fa72:	3107      	adds	r1, #7
   1fa74:	431e      	orrs	r6, r3
   1fa76:	f012 0f80 	tst.w	r2, #128	; 0x80
   1fa7a:	d1f5      	bne.n	1fa68 <__gxx_personality_v0+0x430>
   1fa7c:	e693      	b.n	1f7a6 <__gxx_personality_v0+0x16e>
   1fa7e:	7823      	ldrb	r3, [r4, #0]
   1fa80:	7862      	ldrb	r2, [r4, #1]
   1fa82:	3402      	adds	r4, #2
   1fa84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1fa88:	041b      	lsls	r3, r3, #16
   1fa8a:	141e      	asrs	r6, r3, #16
   1fa8c:	e68b      	b.n	1f7a6 <__gxx_personality_v0+0x16e>
   1fa8e:	2600      	movs	r6, #0
   1fa90:	4631      	mov	r1, r6
   1fa92:	f814 2b01 	ldrb.w	r2, [r4], #1
   1fa96:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1fa9a:	408b      	lsls	r3, r1
   1fa9c:	3107      	adds	r1, #7
   1fa9e:	431e      	orrs	r6, r3
   1faa0:	f012 0f80 	tst.w	r2, #128	; 0x80
   1faa4:	d1f5      	bne.n	1fa92 <__gxx_personality_v0+0x45a>
   1faa6:	291f      	cmp	r1, #31
   1faa8:	f63f ae7d 	bhi.w	1f7a6 <__gxx_personality_v0+0x16e>
   1faac:	f012 0f40 	tst.w	r2, #64	; 0x40
   1fab0:	f43f ae79 	beq.w	1f7a6 <__gxx_personality_v0+0x16e>
   1fab4:	2201      	movs	r2, #1
   1fab6:	fa12 f301 	lsls.w	r3, r2, r1
   1faba:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1fabe:	ea43 0606 	orr.w	r6, r3, r6
   1fac2:	e670      	b.n	1f7a6 <__gxx_personality_v0+0x16e>
   1fac4:	7822      	ldrb	r2, [r4, #0]
   1fac6:	7863      	ldrb	r3, [r4, #1]
   1fac8:	3402      	adds	r4, #2
   1faca:	ea42 2503 	orr.w	r5, r2, r3, lsl #8
   1face:	e6ac      	b.n	1f82a <__gxx_personality_v0+0x1f2>
   1fad0:	2500      	movs	r5, #0
   1fad2:	4629      	mov	r1, r5
   1fad4:	f814 2b01 	ldrb.w	r2, [r4], #1
   1fad8:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1fadc:	408b      	lsls	r3, r1
   1fade:	3107      	adds	r1, #7
   1fae0:	431d      	orrs	r5, r3
   1fae2:	f012 0f80 	tst.w	r2, #128	; 0x80
   1fae6:	d1f5      	bne.n	1fad4 <__gxx_personality_v0+0x49c>
   1fae8:	e69f      	b.n	1f82a <__gxx_personality_v0+0x1f2>
   1faea:	7823      	ldrb	r3, [r4, #0]
   1faec:	7862      	ldrb	r2, [r4, #1]
   1faee:	3402      	adds	r4, #2
   1faf0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1faf4:	041b      	lsls	r3, r3, #16
   1faf6:	141d      	asrs	r5, r3, #16
   1faf8:	e697      	b.n	1f82a <__gxx_personality_v0+0x1f2>
   1fafa:	2500      	movs	r5, #0
   1fafc:	4629      	mov	r1, r5
   1fafe:	f814 2b01 	ldrb.w	r2, [r4], #1
   1fb02:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1fb06:	408b      	lsls	r3, r1
   1fb08:	3107      	adds	r1, #7
   1fb0a:	431d      	orrs	r5, r3
   1fb0c:	f012 0f80 	tst.w	r2, #128	; 0x80
   1fb10:	d1f5      	bne.n	1fafe <__gxx_personality_v0+0x4c6>
   1fb12:	291f      	cmp	r1, #31
   1fb14:	f63f ae89 	bhi.w	1f82a <__gxx_personality_v0+0x1f2>
   1fb18:	f012 0f40 	tst.w	r2, #64	; 0x40
   1fb1c:	f43f ae85 	beq.w	1f82a <__gxx_personality_v0+0x1f2>
   1fb20:	2201      	movs	r2, #1
   1fb22:	fa12 f301 	lsls.w	r3, r2, r1
   1fb26:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1fb2a:	ea43 0505 	orr.w	r5, r3, r5
   1fb2e:	e67c      	b.n	1f82a <__gxx_personality_v0+0x1f2>
   1fb30:	f04f 0800 	mov.w	r8, #0	; 0x0
   1fb34:	2401      	movs	r4, #1
   1fb36:	4647      	mov	r7, r8
   1fb38:	9b06      	ldr	r3, [sp, #24]
   1fb3a:	f013 0f01 	tst.w	r3, #1	; 0x1
   1fb3e:	f43f aef4 	beq.w	1f92a <__gxx_personality_v0+0x2f2>
   1fb42:	2c02      	cmp	r4, #2
   1fb44:	f43f aeba 	beq.w	1f8bc <__gxx_personality_v0+0x284>
   1fb48:	2100      	movs	r1, #0
   1fb4a:	220d      	movs	r2, #13
   1fb4c:	460b      	mov	r3, r1
   1fb4e:	4648      	mov	r0, r9
   1fb50:	9c11      	ldr	r4, [sp, #68]
   1fb52:	f8cd b000 	str.w	fp, [sp]
   1fb56:	f7fd fbd3 	bl	1d300 <_Unwind_VRS_Get>
   1fb5a:	9b0f      	ldr	r3, [sp, #60]
   1fb5c:	9a04      	ldr	r2, [sp, #16]
   1fb5e:	f8ca 3020 	str.w	r3, [sl, #32]
   1fb62:	f8ca 4024 	str.w	r4, [sl, #36]
   1fb66:	f8ca 7028 	str.w	r7, [sl, #40]
   1fb6a:	f8ca 202c 	str.w	r2, [sl, #44]
   1fb6e:	f8ca 8030 	str.w	r8, [sl, #48]
   1fb72:	2006      	movs	r0, #6
   1fb74:	e6a9      	b.n	1f8ca <__gxx_personality_v0+0x292>
   1fb76:	4650      	mov	r0, sl
   1fb78:	f000 f9c4 	bl	1ff04 <__cxa_call_terminate>
   1fb7c:	4650      	mov	r0, sl
   1fb7e:	f7ff fba1 	bl	1f2c4 <__cxa_begin_cleanup>
   1fb82:	2007      	movs	r0, #7
   1fb84:	e6a1      	b.n	1f8ca <__gxx_personality_v0+0x292>
   1fb86:	2d00      	cmp	r5, #0
   1fb88:	f040 80a0 	bne.w	1fccc <__gxx_personality_v0+0x694>
   1fb8c:	46a8      	mov	r8, r5
   1fb8e:	2800      	cmp	r0, #0
   1fb90:	f000 809a 	beq.w	1fcc8 <__gxx_personality_v0+0x690>
   1fb94:	9b0d      	ldr	r3, [sp, #52]
   1fb96:	1e42      	subs	r2, r0, #1
   1fb98:	441a      	add	r2, r3
   1fb9a:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1fb9e:	f43f ae8d 	beq.w	1f8bc <__gxx_personality_v0+0x284>
   1fba2:	2a00      	cmp	r2, #0
   1fba4:	f000 809e 	beq.w	1fce4 <__gxx_personality_v0+0x6ac>
   1fba8:	9b06      	ldr	r3, [sp, #24]
   1fbaa:	f013 0308 	ands.w	r3, r3, #8	; 0x8
   1fbae:	9303      	str	r3, [sp, #12]
   1fbb0:	d001      	beq.n	1fbb6 <__gxx_personality_v0+0x57e>
   1fbb2:	2300      	movs	r3, #0
   1fbb4:	9311      	str	r3, [sp, #68]
   1fbb6:	2300      	movs	r3, #0
   1fbb8:	9305      	str	r3, [sp, #20]
   1fbba:	2000      	movs	r0, #0
   1fbbc:	4615      	mov	r5, r2
   1fbbe:	4601      	mov	r1, r0
   1fbc0:	f815 2b01 	ldrb.w	r2, [r5], #1
   1fbc4:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1fbc8:	408b      	lsls	r3, r1
   1fbca:	3107      	adds	r1, #7
   1fbcc:	4318      	orrs	r0, r3
   1fbce:	f012 0f80 	tst.w	r2, #128	; 0x80
   1fbd2:	d1f5      	bne.n	1fbc0 <__gxx_personality_v0+0x588>
   1fbd4:	291f      	cmp	r1, #31
   1fbd6:	d809      	bhi.n	1fbec <__gxx_personality_v0+0x5b4>
   1fbd8:	f012 0f40 	tst.w	r2, #64	; 0x40
   1fbdc:	d006      	beq.n	1fbec <__gxx_personality_v0+0x5b4>
   1fbde:	2201      	movs	r2, #1
   1fbe0:	fa12 f301 	lsls.w	r3, r2, r1
   1fbe4:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1fbe8:	ea43 0000 	orr.w	r0, r3, r0
   1fbec:	2400      	movs	r4, #0
   1fbee:	4607      	mov	r7, r0
   1fbf0:	46a4      	mov	ip, r4
   1fbf2:	4622      	mov	r2, r4
   1fbf4:	5ca9      	ldrb	r1, [r5, r2]
   1fbf6:	3201      	adds	r2, #1
   1fbf8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   1fbfc:	fa03 f30c 	lsl.w	r3, r3, ip
   1fc00:	431c      	orrs	r4, r3
   1fc02:	f011 0f80 	tst.w	r1, #128	; 0x80
   1fc06:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1fc0a:	d1f3      	bne.n	1fbf4 <__gxx_personality_v0+0x5bc>
   1fc0c:	f1bc 0f1f 	cmp.w	ip, #31	; 0x1f
   1fc10:	d809      	bhi.n	1fc26 <__gxx_personality_v0+0x5ee>
   1fc12:	f011 0f40 	tst.w	r1, #64	; 0x40
   1fc16:	d006      	beq.n	1fc26 <__gxx_personality_v0+0x5ee>
   1fc18:	2201      	movs	r2, #1
   1fc1a:	fa02 f30c 	lsl.w	r3, r2, ip
   1fc1e:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1fc22:	ea43 0404 	orr.w	r4, r3, r4
   1fc26:	2800      	cmp	r0, #0
   1fc28:	d106      	bne.n	1fc38 <__gxx_personality_v0+0x600>
   1fc2a:	2301      	movs	r3, #1
   1fc2c:	9305      	str	r3, [sp, #20]
   1fc2e:	2c00      	cmp	r4, #0
   1fc30:	d054      	beq.n	1fcdc <__gxx_personality_v0+0x6a4>
   1fc32:	eb05 0204 	add.w	r2, r5, r4
   1fc36:	e7c0      	b.n	1fbba <__gxx_personality_v0+0x582>
   1fc38:	dd15      	ble.n	1fc66 <__gxx_personality_v0+0x62e>
   1fc3a:	0083      	lsls	r3, r0, #2
   1fc3c:	9a0c      	ldr	r2, [sp, #48]
   1fc3e:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1fc42:	58d0      	ldr	r0, [r2, r3]
   1fc44:	eb02 0103 	add.w	r1, r2, r3
   1fc48:	b158      	cbz	r0, 1fc62 <__gxx_personality_v0+0x62a>
   1fc4a:	1841      	adds	r1, r0, r1
   1fc4c:	d009      	beq.n	1fc62 <__gxx_personality_v0+0x62a>
   1fc4e:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   1fc52:	d0ec      	beq.n	1fc2e <__gxx_personality_v0+0x5f6>
   1fc54:	4650      	mov	r0, sl
   1fc56:	2200      	movs	r2, #0
   1fc58:	ab11      	add	r3, sp, #68
   1fc5a:	f7ff fb69 	bl	1f330 <__cxa_type_match>
   1fc5e:	2800      	cmp	r0, #0
   1fc60:	d0e5      	beq.n	1fc2e <__gxx_personality_v0+0x5f6>
   1fc62:	2403      	movs	r4, #3
   1fc64:	e768      	b.n	1fb38 <__gxx_personality_v0+0x500>
   1fc66:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   1fc6a:	d021      	beq.n	1fcb0 <__gxx_personality_v0+0x678>
   1fc6c:	9a03      	ldr	r2, [sp, #12]
   1fc6e:	b9fa      	cbnz	r2, 1fcb0 <__gxx_personality_v0+0x678>
   1fc70:	9b11      	ldr	r3, [sp, #68]
   1fc72:	9a0c      	ldr	r2, [sp, #48]
   1fc74:	ea6f 0000 	mvn.w	r0, r0
   1fc78:	9310      	str	r3, [sp, #64]
   1fc7a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   1fc7e:	0081      	lsls	r1, r0, #2
   1fc80:	4411      	add	r1, r2
   1fc82:	b33b      	cbz	r3, 1fcd4 <__gxx_personality_v0+0x69c>
   1fc84:	460e      	mov	r6, r1
   1fc86:	e002      	b.n	1fc8e <__gxx_personality_v0+0x656>
   1fc88:	f856 3f04 	ldr.w	r3, [r6, #4]!
   1fc8c:	b313      	cbz	r3, 1fcd4 <__gxx_personality_v0+0x69c>
   1fc8e:	6831      	ldr	r1, [r6, #0]
   1fc90:	b101      	cbz	r1, 1fc94 <__gxx_personality_v0+0x65c>
   1fc92:	4431      	add	r1, r6
   1fc94:	4650      	mov	r0, sl
   1fc96:	2200      	movs	r2, #0
   1fc98:	ab10      	add	r3, sp, #64
   1fc9a:	f7ff fb49 	bl	1f330 <__cxa_type_match>
   1fc9e:	2800      	cmp	r0, #0
   1fca0:	d0f2      	beq.n	1fc88 <__gxx_personality_v0+0x650>
   1fca2:	2101      	movs	r1, #1
   1fca4:	f081 0001 	eor.w	r0, r1, #1	; 0x1
   1fca8:	2800      	cmp	r0, #0
   1fcaa:	d0c0      	beq.n	1fc2e <__gxx_personality_v0+0x5f6>
   1fcac:	2403      	movs	r4, #3
   1fcae:	e743      	b.n	1fb38 <__gxx_personality_v0+0x500>
   1fcb0:	9a0c      	ldr	r2, [sp, #48]
   1fcb2:	ea6f 0300 	mvn.w	r3, r0
   1fcb6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1fcba:	f1d1 0001 	rsbs	r0, r1, #1	; 0x1
   1fcbe:	bf38      	it	cc
   1fcc0:	2000      	movcc	r0, #0
   1fcc2:	2800      	cmp	r0, #0
   1fcc4:	d0b3      	beq.n	1fc2e <__gxx_personality_v0+0x5f6>
   1fcc6:	e7f1      	b.n	1fcac <__gxx_personality_v0+0x674>
   1fcc8:	4602      	mov	r2, r0
   1fcca:	e766      	b.n	1fb9a <__gxx_personality_v0+0x562>
   1fccc:	9b0a      	ldr	r3, [sp, #40]
   1fcce:	eb05 0803 	add.w	r8, r5, r3
   1fcd2:	e75c      	b.n	1fb8e <__gxx_personality_v0+0x556>
   1fcd4:	2100      	movs	r1, #0
   1fcd6:	f081 0001 	eor.w	r0, r1, #1	; 0x1
   1fcda:	e7e5      	b.n	1fca8 <__gxx_personality_v0+0x670>
   1fcdc:	9a05      	ldr	r2, [sp, #20]
   1fcde:	2a00      	cmp	r2, #0
   1fce0:	f43f adec 	beq.w	1f8bc <__gxx_personality_v0+0x284>
   1fce4:	2402      	movs	r4, #2
   1fce6:	2700      	movs	r7, #0
   1fce8:	e726      	b.n	1fb38 <__gxx_personality_v0+0x500>
   1fcea:	f7ff fae3 	bl	1f2b4 <_ZSt10unexpectedv>
   1fcee:	f7ff fad3 	bl	1f298 <_ZSt9terminatev>
   1fcf2:	2c01      	cmp	r4, #1
   1fcf4:	f43f af3f 	beq.w	1fb76 <__gxx_personality_v0+0x53e>
   1fcf8:	2f00      	cmp	r7, #0
   1fcfa:	f6bf ae21 	bge.w	1f940 <__gxx_personality_v0+0x308>
   1fcfe:	9904      	ldr	r1, [sp, #16]
   1fd00:	aa09      	add	r2, sp, #36
   1fd02:	4648      	mov	r0, r9
   1fd04:	f7ff fbd0 	bl	1f4a8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1fd08:	ea6f 0107 	mvn.w	r1, r7
   1fd0c:	9b0c      	ldr	r3, [sp, #48]
   1fd0e:	008a      	lsls	r2, r1, #2
   1fd10:	eb03 0002 	add.w	r0, r3, r2
   1fd14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1fd18:	b183      	cbz	r3, 1fd3c <__gxx_personality_v0+0x704>
   1fd1a:	462a      	mov	r2, r5
   1fd1c:	3201      	adds	r2, #1
   1fd1e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   1fd22:	2b00      	cmp	r3, #0
   1fd24:	d1fa      	bne.n	1fd1c <__gxx_personality_v0+0x6e4>
   1fd26:	f8ca 2028 	str.w	r2, [sl, #40]
   1fd2a:	2300      	movs	r3, #0
   1fd2c:	2204      	movs	r2, #4
   1fd2e:	f8ca 302c 	str.w	r3, [sl, #44]
   1fd32:	f8ca 2030 	str.w	r2, [sl, #48]
   1fd36:	f8ca 0034 	str.w	r0, [sl, #52]
   1fd3a:	e601      	b.n	1f940 <__gxx_personality_v0+0x308>
   1fd3c:	461a      	mov	r2, r3
   1fd3e:	e7f2      	b.n	1fd26 <__gxx_personality_v0+0x6ee>
   1fd40:	f000 f9de 	bl	20100 <__cxa_begin_catch>
   1fd44:	f7ff faa8 	bl	1f298 <_ZSt9terminatev>
   1fd48:	4604      	mov	r4, r0
   1fd4a:	f000 f991 	bl	20070 <__cxa_end_catch>
   1fd4e:	4620      	mov	r0, r4
   1fd50:	f7f9 fcd4 	bl	196fc <__cxa_end_cleanup>

0001fd54 <__cxa_bad_typeid>:
   1fd54:	b500      	push	{lr}
   1fd56:	2004      	movs	r0, #4
   1fd58:	b081      	sub	sp, #4
   1fd5a:	f000 fccb 	bl	206f4 <__cxa_allocate_exception>
   1fd5e:	4b03      	ldr	r3, [pc, #12]	(1fd6c <__cxa_bad_typeid+0x18>)
   1fd60:	4903      	ldr	r1, [pc, #12]	(1fd70 <__cxa_bad_typeid+0x1c>)
   1fd62:	6003      	str	r3, [r0, #0]
   1fd64:	4a03      	ldr	r2, [pc, #12]	(1fd74 <__cxa_bad_typeid+0x20>)
   1fd66:	f000 fc53 	bl	20610 <__cxa_throw>
   1fd6a:	46c0      	nop			(mov r8, r8)
   1fd6c:	000248a8 	.word	0x000248a8
   1fd70:	000248c8 	.word	0x000248c8
   1fd74:	0001fda5 	.word	0x0001fda5

0001fd78 <__cxa_bad_cast>:
   1fd78:	b500      	push	{lr}
   1fd7a:	2004      	movs	r0, #4
   1fd7c:	b081      	sub	sp, #4
   1fd7e:	f000 fcb9 	bl	206f4 <__cxa_allocate_exception>
   1fd82:	4b03      	ldr	r3, [pc, #12]	(1fd90 <__cxa_bad_cast+0x18>)
   1fd84:	4903      	ldr	r1, [pc, #12]	(1fd94 <__cxa_bad_cast+0x1c>)
   1fd86:	6003      	str	r3, [r0, #0]
   1fd88:	4a03      	ldr	r2, [pc, #12]	(1fd98 <__cxa_bad_cast+0x20>)
   1fd8a:	f000 fc41 	bl	20610 <__cxa_throw>
   1fd8e:	46c0      	nop			(mov r8, r8)
   1fd90:	00024980 	.word	0x00024980
   1fd94:	0002499c 	.word	0x0002499c
   1fd98:	000201a1 	.word	0x000201a1

0001fd9c <_ZNKSt10bad_typeid4whatEv>:
   1fd9c:	4800      	ldr	r0, [pc, #0]	(1fda0 <_ZNKSt10bad_typeid4whatEv+0x4>)
   1fd9e:	4770      	bx	lr
   1fda0:	0002488c 	.word	0x0002488c

0001fda4 <_ZNSt10bad_typeidD1Ev>:
   1fda4:	4b03      	ldr	r3, [pc, #12]	(1fdb4 <_ZNSt10bad_typeidD1Ev+0x10>)
   1fda6:	b510      	push	{r4, lr}
   1fda8:	6003      	str	r3, [r0, #0]
   1fdaa:	4604      	mov	r4, r0
   1fdac:	f000 fad8 	bl	20360 <_ZNSt9exceptionD2Ev>
   1fdb0:	4620      	mov	r0, r4
   1fdb2:	bd10      	pop	{r4, pc}
   1fdb4:	000248a8 	.word	0x000248a8

0001fdb8 <_ZNSt10bad_typeidD2Ev>:
   1fdb8:	4b03      	ldr	r3, [pc, #12]	(1fdc8 <_ZNSt10bad_typeidD2Ev+0x10>)
   1fdba:	b510      	push	{r4, lr}
   1fdbc:	6003      	str	r3, [r0, #0]
   1fdbe:	4604      	mov	r4, r0
   1fdc0:	f000 face 	bl	20360 <_ZNSt9exceptionD2Ev>
   1fdc4:	4620      	mov	r0, r4
   1fdc6:	bd10      	pop	{r4, pc}
   1fdc8:	000248a8 	.word	0x000248a8

0001fdcc <_ZNSt10bad_typeidD0Ev>:
   1fdcc:	4b05      	ldr	r3, [pc, #20]	(1fde4 <_ZNSt10bad_typeidD0Ev+0x18>)
   1fdce:	b510      	push	{r4, lr}
   1fdd0:	6003      	str	r3, [r0, #0]
   1fdd2:	4604      	mov	r4, r0
   1fdd4:	f000 fac4 	bl	20360 <_ZNSt9exceptionD2Ev>
   1fdd8:	4620      	mov	r0, r4
   1fdda:	f7ee ff4b 	bl	ec74 <_ZdlPv>
   1fdde:	4620      	mov	r0, r4
   1fde0:	bd10      	pop	{r4, pc}
   1fde2:	46c0      	nop			(mov r8, r8)
   1fde4:	000248a8 	.word	0x000248a8

0001fde8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   1fde8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fdea:	4b3f      	ldr	r3, [pc, #252]	(1fee8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   1fdec:	b083      	sub	sp, #12
   1fdee:	781c      	ldrb	r4, [r3, #0]
   1fdf0:	2c00      	cmp	r4, #0
   1fdf2:	d13f      	bne.n	1fe74 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   1fdf4:	2501      	movs	r5, #1
   1fdf6:	701d      	strb	r5, [r3, #0]
   1fdf8:	f000 fbc8 	bl	2058c <__cxa_current_exception_type>
   1fdfc:	2800      	cmp	r0, #0
   1fdfe:	d043      	beq.n	1fe88 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa0>
   1fe00:	6846      	ldr	r6, [r0, #4]
   1fe02:	ab02      	add	r3, sp, #8
   1fe04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fe08:	f843 2d04 	str.w	r2, [r3, #-4]!
   1fe0c:	4621      	mov	r1, r4
   1fe0e:	4622      	mov	r2, r4
   1fe10:	4630      	mov	r0, r6
   1fe12:	f7fc fa1b 	bl	1c24c <__cxa_demangle>
   1fe16:	4c35      	ldr	r4, [pc, #212]	(1feec <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   1fe18:	4607      	mov	r7, r0
   1fe1a:	6822      	ldr	r2, [r4, #0]
   1fe1c:	4834      	ldr	r0, [pc, #208]	(1fef0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   1fe1e:	6893      	ldr	r3, [r2, #8]
   1fe20:	4629      	mov	r1, r5
   1fe22:	2230      	movs	r2, #48
   1fe24:	f002 fc0a 	bl	2263c <fwrite>
   1fe28:	9b01      	ldr	r3, [sp, #4]
   1fe2a:	b17b      	cbz	r3, 1fe4c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x64>
   1fe2c:	6823      	ldr	r3, [r4, #0]
   1fe2e:	4630      	mov	r0, r6
   1fe30:	6899      	ldr	r1, [r3, #8]
   1fe32:	f002 fa49 	bl	222c8 <fputs>
   1fe36:	6822      	ldr	r2, [r4, #0]
   1fe38:	482e      	ldr	r0, [pc, #184]	(1fef4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   1fe3a:	6893      	ldr	r3, [r2, #8]
   1fe3c:	2101      	movs	r1, #1
   1fe3e:	2202      	movs	r2, #2
   1fe40:	f002 fbfc 	bl	2263c <fwrite>
   1fe44:	9b01      	ldr	r3, [sp, #4]
   1fe46:	b183      	cbz	r3, 1fe6a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x82>
   1fe48:	f000 fbaa 	bl	205a0 <__cxa_rethrow>
   1fe4c:	6823      	ldr	r3, [r4, #0]
   1fe4e:	4638      	mov	r0, r7
   1fe50:	6899      	ldr	r1, [r3, #8]
   1fe52:	f002 fa39 	bl	222c8 <fputs>
   1fe56:	6822      	ldr	r2, [r4, #0]
   1fe58:	4826      	ldr	r0, [pc, #152]	(1fef4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   1fe5a:	6893      	ldr	r3, [r2, #8]
   1fe5c:	2101      	movs	r1, #1
   1fe5e:	2202      	movs	r2, #2
   1fe60:	f002 fbec 	bl	2263c <fwrite>
   1fe64:	9b01      	ldr	r3, [sp, #4]
   1fe66:	2b00      	cmp	r3, #0
   1fe68:	d1ee      	bne.n	1fe48 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x60>
   1fe6a:	4638      	mov	r0, r7
   1fe6c:	f002 fbf8 	bl	22660 <free>
   1fe70:	f000 fb96 	bl	205a0 <__cxa_rethrow>
   1fe74:	4b1d      	ldr	r3, [pc, #116]	(1feec <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   1fe76:	2101      	movs	r1, #1
   1fe78:	681a      	ldr	r2, [r3, #0]
   1fe7a:	481f      	ldr	r0, [pc, #124]	(1fef8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x110>)
   1fe7c:	6893      	ldr	r3, [r2, #8]
   1fe7e:	221d      	movs	r2, #29
   1fe80:	f002 fbdc 	bl	2263c <fwrite>
   1fe84:	f002 f9a6 	bl	221d4 <abort>
   1fe88:	4b18      	ldr	r3, [pc, #96]	(1feec <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   1fe8a:	4629      	mov	r1, r5
   1fe8c:	681a      	ldr	r2, [r3, #0]
   1fe8e:	481b      	ldr	r0, [pc, #108]	(1fefc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x114>)
   1fe90:	6893      	ldr	r3, [r2, #8]
   1fe92:	222d      	movs	r2, #45
   1fe94:	f002 fbd2 	bl	2263c <fwrite>
   1fe98:	f002 f99c 	bl	221d4 <abort>
   1fe9c:	2902      	cmp	r1, #2
   1fe9e:	d005      	beq.n	1feac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xc4>
   1fea0:	f000 f92e 	bl	20100 <__cxa_begin_catch>
   1fea4:	f000 f8e4 	bl	20070 <__cxa_end_catch>
   1fea8:	f002 f994 	bl	221d4 <abort>
   1feac:	f000 f928 	bl	20100 <__cxa_begin_catch>
   1feb0:	6803      	ldr	r3, [r0, #0]
   1feb2:	689a      	ldr	r2, [r3, #8]
   1feb4:	4790      	blx	r2
   1feb6:	6822      	ldr	r2, [r4, #0]
   1feb8:	4605      	mov	r5, r0
   1feba:	6893      	ldr	r3, [r2, #8]
   1febc:	4810      	ldr	r0, [pc, #64]	(1ff00 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x118>)
   1febe:	2101      	movs	r1, #1
   1fec0:	220b      	movs	r2, #11
   1fec2:	f002 fbbb 	bl	2263c <fwrite>
   1fec6:	6823      	ldr	r3, [r4, #0]
   1fec8:	4628      	mov	r0, r5
   1feca:	6899      	ldr	r1, [r3, #8]
   1fecc:	f002 f9fc 	bl	222c8 <fputs>
   1fed0:	6823      	ldr	r3, [r4, #0]
   1fed2:	200a      	movs	r0, #10
   1fed4:	6899      	ldr	r1, [r3, #8]
   1fed6:	f002 f9ad 	bl	22234 <fputc>
   1feda:	e7e3      	b.n	1fea4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xbc>
   1fedc:	4605      	mov	r5, r0
   1fede:	f000 f8c7 	bl	20070 <__cxa_end_catch>
   1fee2:	4628      	mov	r0, r5
   1fee4:	f7f9 fc0a 	bl	196fc <__cxa_end_cleanup>
   1fee8:	20000680 	.word	0x20000680
   1feec:	20000044 	.word	0x20000044
   1fef0:	000248f4 	.word	0x000248f4
   1fef4:	00024928 	.word	0x00024928
   1fef8:	000248d4 	.word	0x000248d4
   1fefc:	00024938 	.word	0x00024938
   1ff00:	0002492c 	.word	0x0002492c

0001ff04 <__cxa_call_terminate>:
   1ff04:	b510      	push	{r4, lr}
   1ff06:	4604      	mov	r4, r0
   1ff08:	b120      	cbz	r0, 1ff14 <__cxa_call_terminate+0x10>
   1ff0a:	f000 f8f9 	bl	20100 <__cxa_begin_catch>
   1ff0e:	7823      	ldrb	r3, [r4, #0]
   1ff10:	2b47      	cmp	r3, #71
   1ff12:	d001      	beq.n	1ff18 <__cxa_call_terminate+0x14>
   1ff14:	f7ff f9c0 	bl	1f298 <_ZSt9terminatev>
   1ff18:	7863      	ldrb	r3, [r4, #1]
   1ff1a:	2b4e      	cmp	r3, #78
   1ff1c:	d1fa      	bne.n	1ff14 <__cxa_call_terminate+0x10>
   1ff1e:	78a3      	ldrb	r3, [r4, #2]
   1ff20:	2b55      	cmp	r3, #85
   1ff22:	d1f7      	bne.n	1ff14 <__cxa_call_terminate+0x10>
   1ff24:	78e3      	ldrb	r3, [r4, #3]
   1ff26:	2b43      	cmp	r3, #67
   1ff28:	d1f4      	bne.n	1ff14 <__cxa_call_terminate+0x10>
   1ff2a:	7923      	ldrb	r3, [r4, #4]
   1ff2c:	2b43      	cmp	r3, #67
   1ff2e:	d1f1      	bne.n	1ff14 <__cxa_call_terminate+0x10>
   1ff30:	7963      	ldrb	r3, [r4, #5]
   1ff32:	2b2b      	cmp	r3, #43
   1ff34:	d1ee      	bne.n	1ff14 <__cxa_call_terminate+0x10>
   1ff36:	79a3      	ldrb	r3, [r4, #6]
   1ff38:	2b2b      	cmp	r3, #43
   1ff3a:	d1eb      	bne.n	1ff14 <__cxa_call_terminate+0x10>
   1ff3c:	79e3      	ldrb	r3, [r4, #7]
   1ff3e:	2b00      	cmp	r3, #0
   1ff40:	d1e8      	bne.n	1ff14 <__cxa_call_terminate+0x10>
   1ff42:	f854 0c14 	ldr.w	r0, [r4, #-20]
   1ff46:	f7ff f999 	bl	1f27c <_ZN10__cxxabiv111__terminateEPFvvE>
   1ff4a:	46c0      	nop			(mov r8, r8)

0001ff4c <__cxa_call_unexpected>:
   1ff4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff50:	7803      	ldrb	r3, [r0, #0]
   1ff52:	b085      	sub	sp, #20
   1ff54:	2b47      	cmp	r3, #71
   1ff56:	d00a      	beq.n	1ff6e <__cxa_call_unexpected+0x22>
   1ff58:	2400      	movs	r4, #0
   1ff5a:	4627      	mov	r7, r4
   1ff5c:	46a2      	mov	sl, r4
   1ff5e:	46a0      	mov	r8, r4
   1ff60:	2501      	movs	r5, #1
   1ff62:	4626      	mov	r6, r4
   1ff64:	f000 f8cc 	bl	20100 <__cxa_begin_catch>
   1ff68:	b30d      	cbz	r5, 1ffae <__cxa_call_unexpected+0x62>
   1ff6a:	f7ff f9a3 	bl	1f2b4 <_ZSt10unexpectedv>
   1ff6e:	7843      	ldrb	r3, [r0, #1]
   1ff70:	2b4e      	cmp	r3, #78
   1ff72:	d1f1      	bne.n	1ff58 <__cxa_call_unexpected+0xc>
   1ff74:	7883      	ldrb	r3, [r0, #2]
   1ff76:	2b55      	cmp	r3, #85
   1ff78:	d1ee      	bne.n	1ff58 <__cxa_call_unexpected+0xc>
   1ff7a:	78c3      	ldrb	r3, [r0, #3]
   1ff7c:	2b43      	cmp	r3, #67
   1ff7e:	d1eb      	bne.n	1ff58 <__cxa_call_unexpected+0xc>
   1ff80:	7903      	ldrb	r3, [r0, #4]
   1ff82:	2b43      	cmp	r3, #67
   1ff84:	d1e8      	bne.n	1ff58 <__cxa_call_unexpected+0xc>
   1ff86:	7943      	ldrb	r3, [r0, #5]
   1ff88:	2b2b      	cmp	r3, #43
   1ff8a:	d1e5      	bne.n	1ff58 <__cxa_call_unexpected+0xc>
   1ff8c:	7983      	ldrb	r3, [r0, #6]
   1ff8e:	2b2b      	cmp	r3, #43
   1ff90:	d1e2      	bne.n	1ff58 <__cxa_call_unexpected+0xc>
   1ff92:	79c2      	ldrb	r2, [r0, #7]
   1ff94:	2a00      	cmp	r2, #0
   1ff96:	d1df      	bne.n	1ff58 <__cxa_call_unexpected+0xc>
   1ff98:	f1a0 0320 	sub.w	r3, r0, #32	; 0x20
   1ff9c:	689e      	ldr	r6, [r3, #8]
   1ff9e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   1ffa2:	f8d0 8028 	ldr.w	r8, [r0, #40]
   1ffa6:	6b04      	ldr	r4, [r0, #48]
   1ffa8:	6b47      	ldr	r7, [r0, #52]
   1ffaa:	4615      	mov	r5, r2
   1ffac:	e7da      	b.n	1ff64 <__cxa_call_unexpected+0x18>
   1ffae:	4630      	mov	r0, r6
   1ffb0:	f7ff f97a 	bl	1f2a8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1ffb4:	f000 f8a4 	bl	20100 <__cxa_begin_catch>
   1ffb8:	2d00      	cmp	r5, #0
   1ffba:	d135      	bne.n	20028 <__cxa_call_unexpected+0xdc>
   1ffbc:	f000 fb72 	bl	206a4 <__cxa_get_globals_fast>
   1ffc0:	6800      	ldr	r0, [r0, #0]
   1ffc2:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1ffc6:	f100 0378 	add.w	r3, r0, #120	; 0x78
   1ffca:	9303      	str	r3, [sp, #12]
   1ffcc:	dd3b      	ble.n	20046 <__cxa_call_unexpected+0xfa>
   1ffce:	3020      	adds	r0, #32
   1ffd0:	463e      	mov	r6, r7
   1ffd2:	f024 0b03 	bic.w	fp, r4, #3	; 0x3
   1ffd6:	9001      	str	r0, [sp, #4]
   1ffd8:	462f      	mov	r7, r5
   1ffda:	46a9      	mov	r9, r5
   1ffdc:	6830      	ldr	r0, [r6, #0]
   1ffde:	2800      	cmp	r0, #0
   1ffe0:	d12e      	bne.n	20040 <__cxa_call_unexpected+0xf4>
   1ffe2:	4605      	mov	r5, r0
   1ffe4:	9801      	ldr	r0, [sp, #4]
   1ffe6:	4629      	mov	r1, r5
   1ffe8:	2200      	movs	r2, #0
   1ffea:	ab03      	add	r3, sp, #12
   1ffec:	f7ff f9a0 	bl	1f330 <__cxa_type_match>
   1fff0:	4602      	mov	r2, r0
   1fff2:	b9d8      	cbnz	r0, 2002c <__cxa_call_unexpected+0xe0>
   1fff4:	682b      	ldr	r3, [r5, #0]
   1fff6:	4628      	mov	r0, r5
   1fff8:	691c      	ldr	r4, [r3, #16]
   1fffa:	4914      	ldr	r1, [pc, #80]	(2004c <__cxa_call_unexpected+0x100>)
   1fffc:	2301      	movs	r3, #1
   1fffe:	47a0      	blx	r4
   20000:	3701      	adds	r7, #1
   20002:	2800      	cmp	r0, #0
   20004:	bf18      	it	ne
   20006:	f04f 0901 	movne.w	r9, #1	; 0x1
   2000a:	45b8      	cmp	r8, r7
   2000c:	445e      	add	r6, fp
   2000e:	dce5      	bgt.n	1ffdc <__cxa_call_unexpected+0x90>
   20010:	f1b9 0f00 	cmp.w	r9, #0	; 0x0
   20014:	d017      	beq.n	20046 <__cxa_call_unexpected+0xfa>
   20016:	2004      	movs	r0, #4
   20018:	f000 fb6c 	bl	206f4 <__cxa_allocate_exception>
   2001c:	4b0c      	ldr	r3, [pc, #48]	(20050 <__cxa_call_unexpected+0x104>)
   2001e:	490b      	ldr	r1, [pc, #44]	(2004c <__cxa_call_unexpected+0x100>)
   20020:	6003      	str	r3, [r0, #0]
   20022:	4a0c      	ldr	r2, [pc, #48]	(20054 <__cxa_call_unexpected+0x108>)
   20024:	f000 faf4 	bl	20610 <__cxa_throw>
   20028:	f7ff f936 	bl	1f298 <_ZSt9terminatev>
   2002c:	f000 fab8 	bl	205a0 <__cxa_rethrow>
   20030:	4606      	mov	r6, r0
   20032:	f000 f81d 	bl	20070 <__cxa_end_catch>
   20036:	f000 f81b 	bl	20070 <__cxa_end_catch>
   2003a:	4630      	mov	r0, r6
   2003c:	f7f9 fb5e 	bl	196fc <__cxa_end_cleanup>
   20040:	eb06 0500 	add.w	r5, r6, r0
   20044:	e7ce      	b.n	1ffe4 <__cxa_call_unexpected+0x98>
   20046:	4650      	mov	r0, sl
   20048:	f7ff f918 	bl	1f27c <_ZN10__cxxabiv111__terminateEPFvvE>
   2004c:	00024ec8 	.word	0x00024ec8
   20050:	00024e38 	.word	0x00024e38
   20054:	00020385 	.word	0x00020385

00020058 <__cxa_get_exception_ptr>:
   20058:	6a40      	ldr	r0, [r0, #36]
   2005a:	4770      	bx	lr

0002005c <_ZSt18uncaught_exceptionv>:
   2005c:	b500      	push	{lr}
   2005e:	b081      	sub	sp, #4
   20060:	f000 fb24 	bl	206ac <__cxa_get_globals>
   20064:	6840      	ldr	r0, [r0, #4]
   20066:	3800      	subs	r0, #0
   20068:	bf18      	it	ne
   2006a:	2001      	movne	r0, #1
   2006c:	b001      	add	sp, #4
   2006e:	bd00      	pop	{pc}

00020070 <__cxa_end_catch>:
   20070:	b500      	push	{lr}
   20072:	b081      	sub	sp, #4
   20074:	f000 fb16 	bl	206a4 <__cxa_get_globals_fast>
   20078:	4601      	mov	r1, r0
   2007a:	6800      	ldr	r0, [r0, #0]
   2007c:	b140      	cbz	r0, 20090 <__cxa_end_catch+0x20>
   2007e:	f890 3020 	ldrb.w	r3, [r0, #32]
   20082:	2b47      	cmp	r3, #71
   20084:	d006      	beq.n	20094 <__cxa_end_catch+0x24>
   20086:	2300      	movs	r3, #0
   20088:	600b      	str	r3, [r1, #0]
   2008a:	3020      	adds	r0, #32
   2008c:	f7fd f9ce 	bl	1d42c <_Unwind_DeleteException>
   20090:	b001      	add	sp, #4
   20092:	bd00      	pop	{pc}
   20094:	f890 3021 	ldrb.w	r3, [r0, #33]
   20098:	2b4e      	cmp	r3, #78
   2009a:	d1f4      	bne.n	20086 <__cxa_end_catch+0x16>
   2009c:	f890 3022 	ldrb.w	r3, [r0, #34]
   200a0:	2b55      	cmp	r3, #85
   200a2:	d1f0      	bne.n	20086 <__cxa_end_catch+0x16>
   200a4:	f890 3023 	ldrb.w	r3, [r0, #35]
   200a8:	2b43      	cmp	r3, #67
   200aa:	d1ec      	bne.n	20086 <__cxa_end_catch+0x16>
   200ac:	f890 3024 	ldrb.w	r3, [r0, #36]
   200b0:	2b43      	cmp	r3, #67
   200b2:	d1e8      	bne.n	20086 <__cxa_end_catch+0x16>
   200b4:	f890 3025 	ldrb.w	r3, [r0, #37]
   200b8:	2b2b      	cmp	r3, #43
   200ba:	d1e4      	bne.n	20086 <__cxa_end_catch+0x16>
   200bc:	f890 3026 	ldrb.w	r3, [r0, #38]
   200c0:	2b2b      	cmp	r3, #43
   200c2:	d1e0      	bne.n	20086 <__cxa_end_catch+0x16>
   200c4:	f890 3027 	ldrb.w	r3, [r0, #39]
   200c8:	2b00      	cmp	r3, #0
   200ca:	d1dc      	bne.n	20086 <__cxa_end_catch+0x16>
   200cc:	6943      	ldr	r3, [r0, #20]
   200ce:	2b00      	cmp	r3, #0
   200d0:	db09      	blt.n	200e6 <__cxa_end_catch+0x76>
   200d2:	f113 32ff 	adds.w	r2, r3, #4294967295	; 0xffffffff
   200d6:	d00d      	beq.n	200f4 <__cxa_end_catch+0x84>
   200d8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   200dc:	d001      	beq.n	200e2 <__cxa_end_catch+0x72>
   200de:	6142      	str	r2, [r0, #20]
   200e0:	e7d6      	b.n	20090 <__cxa_end_catch+0x20>
   200e2:	f7ff f8d9 	bl	1f298 <_ZSt9terminatev>
   200e6:	1c5a      	adds	r2, r3, #1
   200e8:	bf08      	it	eq
   200ea:	6903      	ldreq	r3, [r0, #16]
   200ec:	6142      	str	r2, [r0, #20]
   200ee:	bf08      	it	eq
   200f0:	600b      	streq	r3, [r1, #0]
   200f2:	e7cd      	b.n	20090 <__cxa_end_catch+0x20>
   200f4:	6903      	ldr	r3, [r0, #16]
   200f6:	3020      	adds	r0, #32
   200f8:	600b      	str	r3, [r1, #0]
   200fa:	f7fd f997 	bl	1d42c <_Unwind_DeleteException>
   200fe:	e7c7      	b.n	20090 <__cxa_end_catch+0x20>

00020100 <__cxa_begin_catch>:
   20100:	b530      	push	{r4, r5, lr}
   20102:	b081      	sub	sp, #4
   20104:	4605      	mov	r5, r0
   20106:	f000 fad1 	bl	206ac <__cxa_get_globals>
   2010a:	462a      	mov	r2, r5
   2010c:	f812 3920 	ldrb.w	r3, [r2], #-32
   20110:	6801      	ldr	r1, [r0, #0]
   20112:	2b47      	cmp	r3, #71
   20114:	d006      	beq.n	20124 <__cxa_begin_catch+0x24>
   20116:	2900      	cmp	r1, #0
   20118:	d134      	bne.n	20184 <__cxa_begin_catch+0x84>
   2011a:	6002      	str	r2, [r0, #0]
   2011c:	460c      	mov	r4, r1
   2011e:	4620      	mov	r0, r4
   20120:	b001      	add	sp, #4
   20122:	bd30      	pop	{r4, r5, pc}
   20124:	f892 3021 	ldrb.w	r3, [r2, #33]
   20128:	2b4e      	cmp	r3, #78
   2012a:	d1f4      	bne.n	20116 <__cxa_begin_catch+0x16>
   2012c:	f892 3022 	ldrb.w	r3, [r2, #34]
   20130:	2b55      	cmp	r3, #85
   20132:	d1f0      	bne.n	20116 <__cxa_begin_catch+0x16>
   20134:	f892 3023 	ldrb.w	r3, [r2, #35]
   20138:	2b43      	cmp	r3, #67
   2013a:	d1ec      	bne.n	20116 <__cxa_begin_catch+0x16>
   2013c:	f892 3024 	ldrb.w	r3, [r2, #36]
   20140:	2b43      	cmp	r3, #67
   20142:	d1e8      	bne.n	20116 <__cxa_begin_catch+0x16>
   20144:	f892 3025 	ldrb.w	r3, [r2, #37]
   20148:	2b2b      	cmp	r3, #43
   2014a:	d1e4      	bne.n	20116 <__cxa_begin_catch+0x16>
   2014c:	f892 3026 	ldrb.w	r3, [r2, #38]
   20150:	2b2b      	cmp	r3, #43
   20152:	d1e0      	bne.n	20116 <__cxa_begin_catch+0x16>
   20154:	f892 3027 	ldrb.w	r3, [r2, #39]
   20158:	2b00      	cmp	r3, #0
   2015a:	d1dc      	bne.n	20116 <__cxa_begin_catch+0x16>
   2015c:	6953      	ldr	r3, [r2, #20]
   2015e:	2b00      	cmp	r3, #0
   20160:	db0d      	blt.n	2017e <__cxa_begin_catch+0x7e>
   20162:	3301      	adds	r3, #1
   20164:	6153      	str	r3, [r2, #20]
   20166:	6843      	ldr	r3, [r0, #4]
   20168:	3b01      	subs	r3, #1
   2016a:	4291      	cmp	r1, r2
   2016c:	6043      	str	r3, [r0, #4]
   2016e:	bf1c      	itt	ne
   20170:	6111      	strne	r1, [r2, #16]
   20172:	6002      	strne	r2, [r0, #0]
   20174:	4628      	mov	r0, r5
   20176:	6a6c      	ldr	r4, [r5, #36]
   20178:	f7fd f956 	bl	1d428 <_Unwind_Complete>
   2017c:	e7cf      	b.n	2011e <__cxa_begin_catch+0x1e>
   2017e:	f1c3 0301 	rsb	r3, r3, #1	; 0x1
   20182:	e7ef      	b.n	20164 <__cxa_begin_catch+0x64>
   20184:	f7ff f888 	bl	1f298 <_ZSt9terminatev>
   20188:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2018c:	d001      	beq.n	20192 <__cxa_begin_catch+0x92>
   2018e:	f7f9 fab5 	bl	196fc <__cxa_end_cleanup>
   20192:	f7ff fedb 	bl	1ff4c <__cxa_call_unexpected>
   20196:	46c0      	nop			(mov r8, r8)

00020198 <_ZNKSt8bad_cast4whatEv>:
   20198:	4800      	ldr	r0, [pc, #0]	(2019c <_ZNKSt8bad_cast4whatEv+0x4>)
   2019a:	4770      	bx	lr
   2019c:	00024968 	.word	0x00024968

000201a0 <_ZNSt8bad_castD1Ev>:
   201a0:	4b03      	ldr	r3, [pc, #12]	(201b0 <_ZNSt8bad_castD1Ev+0x10>)
   201a2:	b510      	push	{r4, lr}
   201a4:	6003      	str	r3, [r0, #0]
   201a6:	4604      	mov	r4, r0
   201a8:	f000 f8da 	bl	20360 <_ZNSt9exceptionD2Ev>
   201ac:	4620      	mov	r0, r4
   201ae:	bd10      	pop	{r4, pc}
   201b0:	00024980 	.word	0x00024980

000201b4 <_ZNSt8bad_castD2Ev>:
   201b4:	4b03      	ldr	r3, [pc, #12]	(201c4 <_ZNSt8bad_castD2Ev+0x10>)
   201b6:	b510      	push	{r4, lr}
   201b8:	6003      	str	r3, [r0, #0]
   201ba:	4604      	mov	r4, r0
   201bc:	f000 f8d0 	bl	20360 <_ZNSt9exceptionD2Ev>
   201c0:	4620      	mov	r0, r4
   201c2:	bd10      	pop	{r4, pc}
   201c4:	00024980 	.word	0x00024980

000201c8 <_ZNSt8bad_castD0Ev>:
   201c8:	4b05      	ldr	r3, [pc, #20]	(201e0 <_ZNSt8bad_castD0Ev+0x18>)
   201ca:	b510      	push	{r4, lr}
   201cc:	6003      	str	r3, [r0, #0]
   201ce:	4604      	mov	r4, r0
   201d0:	f000 f8c6 	bl	20360 <_ZNSt9exceptionD2Ev>
   201d4:	4620      	mov	r0, r4
   201d6:	f7ee fd4d 	bl	ec74 <_ZdlPv>
   201da:	4620      	mov	r0, r4
   201dc:	bd10      	pop	{r4, pc}
   201de:	46c0      	nop			(mov r8, r8)
   201e0:	00024980 	.word	0x00024980

000201e4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   201e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   201e6:	b081      	sub	sp, #4
   201e8:	4604      	mov	r4, r0
   201ea:	460d      	mov	r5, r1
   201ec:	4616      	mov	r6, r2
   201ee:	461f      	mov	r7, r3
   201f0:	f000 f938 	bl	20464 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   201f4:	b110      	cbz	r0, 201fc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x18>
   201f6:	2001      	movs	r0, #1
   201f8:	b001      	add	sp, #4
   201fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   201fc:	68a0      	ldr	r0, [r4, #8]
   201fe:	4629      	mov	r1, r5
   20200:	6803      	ldr	r3, [r0, #0]
   20202:	4632      	mov	r2, r6
   20204:	699c      	ldr	r4, [r3, #24]
   20206:	463b      	mov	r3, r7
   20208:	47a0      	blx	r4
   2020a:	e7f5      	b.n	201f8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x14>

0002020c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   2020c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20210:	460e      	mov	r6, r1
   20212:	b085      	sub	sp, #20
   20214:	4619      	mov	r1, r3
   20216:	4604      	mov	r4, r0
   20218:	4617      	mov	r7, r2
   2021a:	469b      	mov	fp, r3
   2021c:	f8dd 8038 	ldr.w	r8, [sp, #56]
   20220:	f8dd 9040 	ldr.w	r9, [sp, #64]
   20224:	f8dd a044 	ldr.w	sl, [sp, #68]
   20228:	f000 f990 	bl	2054c <_ZNKSt9type_infoeqERKS_>
   2022c:	4605      	mov	r5, r0
   2022e:	b178      	cbz	r0, 20250 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   20230:	2e00      	cmp	r6, #0
   20232:	f8ca 8000 	str.w	r8, [sl]
   20236:	f88a 7004 	strb.w	r7, [sl, #4]
   2023a:	db1d      	blt.n	20278 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
   2023c:	eb08 0306 	add.w	r3, r8, r6
   20240:	4599      	cmp	r9, r3
   20242:	bf0c      	ite	eq
   20244:	2306      	moveq	r3, #6
   20246:	2301      	movne	r3, #1
   20248:	f88a 3006 	strb.w	r3, [sl, #6]
   2024c:	2000      	movs	r0, #0
   2024e:	e010      	b.n	20272 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
   20250:	45c8      	cmp	r8, r9
   20252:	d01b      	beq.n	2028c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x80>
   20254:	68a0      	ldr	r0, [r4, #8]
   20256:	9a0f      	ldr	r2, [sp, #60]
   20258:	6803      	ldr	r3, [r0, #0]
   2025a:	9201      	str	r2, [sp, #4]
   2025c:	f8cd 8000 	str.w	r8, [sp]
   20260:	f8cd 9008 	str.w	r9, [sp, #8]
   20264:	f8cd a00c 	str.w	sl, [sp, #12]
   20268:	69dc      	ldr	r4, [r3, #28]
   2026a:	4631      	mov	r1, r6
   2026c:	463a      	mov	r2, r7
   2026e:	465b      	mov	r3, fp
   20270:	47a0      	blx	r4
   20272:	b005      	add	sp, #20
   20274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20278:	f116 0f02 	cmn.w	r6, #2	; 0x2
   2027c:	d001      	beq.n	20282 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
   2027e:	2000      	movs	r0, #0
   20280:	e7f7      	b.n	20272 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
   20282:	2301      	movs	r3, #1
   20284:	f88a 3006 	strb.w	r3, [sl, #6]
   20288:	2000      	movs	r0, #0
   2028a:	e7f2      	b.n	20272 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
   2028c:	4620      	mov	r0, r4
   2028e:	990f      	ldr	r1, [sp, #60]
   20290:	f000 f95c 	bl	2054c <_ZNKSt9type_infoeqERKS_>
   20294:	2800      	cmp	r0, #0
   20296:	d0dd      	beq.n	20254 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
   20298:	f88a 7005 	strb.w	r7, [sl, #5]
   2029c:	4628      	mov	r0, r5
   2029e:	e7e8      	b.n	20272 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>

000202a0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   202a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   202a4:	b082      	sub	sp, #8
   202a6:	9e08      	ldr	r6, [sp, #32]
   202a8:	4604      	mov	r4, r0
   202aa:	4296      	cmp	r6, r2
   202ac:	4688      	mov	r8, r1
   202ae:	4615      	mov	r5, r2
   202b0:	461f      	mov	r7, r3
   202b2:	d00a      	beq.n	202ca <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2a>
   202b4:	68a0      	ldr	r0, [r4, #8]
   202b6:	4641      	mov	r1, r8
   202b8:	6803      	ldr	r3, [r0, #0]
   202ba:	9600      	str	r6, [sp, #0]
   202bc:	6a1c      	ldr	r4, [r3, #32]
   202be:	462a      	mov	r2, r5
   202c0:	463b      	mov	r3, r7
   202c2:	47a0      	blx	r4
   202c4:	b002      	add	sp, #8
   202c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   202ca:	4619      	mov	r1, r3
   202cc:	f000 f93e 	bl	2054c <_ZNKSt9type_infoeqERKS_>
   202d0:	2800      	cmp	r0, #0
   202d2:	d0ef      	beq.n	202b4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
   202d4:	2006      	movs	r0, #6
   202d6:	e7f5      	b.n	202c4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>

000202d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   202d8:	4b03      	ldr	r3, [pc, #12]	(202e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   202da:	b510      	push	{r4, lr}
   202dc:	6003      	str	r3, [r0, #0]
   202de:	4604      	mov	r4, r0
   202e0:	f000 f910 	bl	20504 <_ZN10__cxxabiv117__class_type_infoD2Ev>
   202e4:	4620      	mov	r0, r4
   202e6:	bd10      	pop	{r4, pc}
   202e8:	000249b0 	.word	0x000249b0

000202ec <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
   202ec:	4b03      	ldr	r3, [pc, #12]	(202fc <_ZN10__cxxabiv120__si_class_type_infoD2Ev+0x10>)
   202ee:	b510      	push	{r4, lr}
   202f0:	6003      	str	r3, [r0, #0]
   202f2:	4604      	mov	r4, r0
   202f4:	f000 f906 	bl	20504 <_ZN10__cxxabiv117__class_type_infoD2Ev>
   202f8:	4620      	mov	r0, r4
   202fa:	bd10      	pop	{r4, pc}
   202fc:	000249b0 	.word	0x000249b0

00020300 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   20300:	4b05      	ldr	r3, [pc, #20]	(20318 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   20302:	b510      	push	{r4, lr}
   20304:	6003      	str	r3, [r0, #0]
   20306:	4604      	mov	r4, r0
   20308:	f000 f8fc 	bl	20504 <_ZN10__cxxabiv117__class_type_infoD2Ev>
   2030c:	4620      	mov	r0, r4
   2030e:	f7ee fcb1 	bl	ec74 <_ZdlPv>
   20312:	4620      	mov	r0, r4
   20314:	bd10      	pop	{r4, pc}
   20316:	46c0      	nop			(mov r8, r8)
   20318:	000249b0 	.word	0x000249b0

0002031c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
   2031c:	4b03      	ldr	r3, [pc, #12]	(2032c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
   2031e:	b510      	push	{r4, lr}
   20320:	6003      	str	r3, [r0, #0]
   20322:	4604      	mov	r4, r0
   20324:	f000 f906 	bl	20534 <_ZNSt9type_infoD2Ev>
   20328:	4620      	mov	r0, r4
   2032a:	bd10      	pop	{r4, pc}
   2032c:	00024a18 	.word	0x00024a18

00020330 <_ZN10__cxxabiv123__fundamental_type_infoD2Ev>:
   20330:	4b03      	ldr	r3, [pc, #12]	(20340 <_ZN10__cxxabiv123__fundamental_type_infoD2Ev+0x10>)
   20332:	b510      	push	{r4, lr}
   20334:	6003      	str	r3, [r0, #0]
   20336:	4604      	mov	r4, r0
   20338:	f000 f8fc 	bl	20534 <_ZNSt9type_infoD2Ev>
   2033c:	4620      	mov	r0, r4
   2033e:	bd10      	pop	{r4, pc}
   20340:	00024a18 	.word	0x00024a18

00020344 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
   20344:	4b05      	ldr	r3, [pc, #20]	(2035c <_ZN10__cxxabiv123__fundamental_type_infoD0Ev+0x18>)
   20346:	b510      	push	{r4, lr}
   20348:	6003      	str	r3, [r0, #0]
   2034a:	4604      	mov	r4, r0
   2034c:	f000 f8f2 	bl	20534 <_ZNSt9type_infoD2Ev>
   20350:	4620      	mov	r0, r4
   20352:	f7ee fc8f 	bl	ec74 <_ZdlPv>
   20356:	4620      	mov	r0, r4
   20358:	bd10      	pop	{r4, pc}
   2035a:	46c0      	nop			(mov r8, r8)
   2035c:	00024a18 	.word	0x00024a18

00020360 <_ZNSt9exceptionD2Ev>:
   20360:	4b01      	ldr	r3, [pc, #4]	(20368 <_ZNSt9exceptionD2Ev+0x8>)
   20362:	6003      	str	r3, [r0, #0]
   20364:	4770      	bx	lr
   20366:	46c0      	nop			(mov r8, r8)
   20368:	00024e50 	.word	0x00024e50

0002036c <_ZNSt9exceptionD1Ev>:
   2036c:	4b01      	ldr	r3, [pc, #4]	(20374 <_ZNSt9exceptionD1Ev+0x8>)
   2036e:	6003      	str	r3, [r0, #0]
   20370:	4770      	bx	lr
   20372:	46c0      	nop			(mov r8, r8)
   20374:	00024e50 	.word	0x00024e50

00020378 <_ZNSt13bad_exceptionD2Ev>:
   20378:	4b01      	ldr	r3, [pc, #4]	(20380 <_ZNSt13bad_exceptionD2Ev+0x8>)
   2037a:	6003      	str	r3, [r0, #0]
   2037c:	4770      	bx	lr
   2037e:	46c0      	nop			(mov r8, r8)
   20380:	00024e50 	.word	0x00024e50

00020384 <_ZNSt13bad_exceptionD1Ev>:
   20384:	4b01      	ldr	r3, [pc, #4]	(2038c <_ZNSt13bad_exceptionD1Ev+0x8>)
   20386:	6003      	str	r3, [r0, #0]
   20388:	4770      	bx	lr
   2038a:	46c0      	nop			(mov r8, r8)
   2038c:	00024e50 	.word	0x00024e50

00020390 <_ZN10__cxxabiv115__forced_unwindD2Ev>:
   20390:	4b01      	ldr	r3, [pc, #4]	(20398 <_ZN10__cxxabiv115__forced_unwindD2Ev+0x8>)
   20392:	6003      	str	r3, [r0, #0]
   20394:	4770      	bx	lr
   20396:	46c0      	nop			(mov r8, r8)
   20398:	00024e20 	.word	0x00024e20

0002039c <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   2039c:	4b01      	ldr	r3, [pc, #4]	(203a4 <_ZN10__cxxabiv115__forced_unwindD1Ev+0x8>)
   2039e:	6003      	str	r3, [r0, #0]
   203a0:	4770      	bx	lr
   203a2:	46c0      	nop			(mov r8, r8)
   203a4:	00024e20 	.word	0x00024e20

000203a8 <_ZN10__cxxabiv119__foreign_exceptionD2Ev>:
   203a8:	4b01      	ldr	r3, [pc, #4]	(203b0 <_ZN10__cxxabiv119__foreign_exceptionD2Ev+0x8>)
   203aa:	6003      	str	r3, [r0, #0]
   203ac:	4770      	bx	lr
   203ae:	46c0      	nop			(mov r8, r8)
   203b0:	00024e08 	.word	0x00024e08

000203b4 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   203b4:	4b01      	ldr	r3, [pc, #4]	(203bc <_ZN10__cxxabiv119__foreign_exceptionD1Ev+0x8>)
   203b6:	6003      	str	r3, [r0, #0]
   203b8:	4770      	bx	lr
   203ba:	46c0      	nop			(mov r8, r8)
   203bc:	00024e08 	.word	0x00024e08

000203c0 <_ZNKSt9exception4whatEv>:
   203c0:	4800      	ldr	r0, [pc, #0]	(203c4 <_ZNKSt9exception4whatEv+0x4>)
   203c2:	4770      	bx	lr
   203c4:	00024dd8 	.word	0x00024dd8

000203c8 <_ZNKSt13bad_exception4whatEv>:
   203c8:	4800      	ldr	r0, [pc, #0]	(203cc <_ZNKSt13bad_exception4whatEv+0x4>)
   203ca:	4770      	bx	lr
   203cc:	00024de8 	.word	0x00024de8

000203d0 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   203d0:	4b03      	ldr	r3, [pc, #12]	(203e0 <_ZN10__cxxabiv119__foreign_exceptionD0Ev+0x10>)
   203d2:	b510      	push	{r4, lr}
   203d4:	6003      	str	r3, [r0, #0]
   203d6:	4604      	mov	r4, r0
   203d8:	f7ee fc4c 	bl	ec74 <_ZdlPv>
   203dc:	4620      	mov	r0, r4
   203de:	bd10      	pop	{r4, pc}
   203e0:	00024e08 	.word	0x00024e08

000203e4 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   203e4:	4b03      	ldr	r3, [pc, #12]	(203f4 <_ZN10__cxxabiv115__forced_unwindD0Ev+0x10>)
   203e6:	b510      	push	{r4, lr}
   203e8:	6003      	str	r3, [r0, #0]
   203ea:	4604      	mov	r4, r0
   203ec:	f7ee fc42 	bl	ec74 <_ZdlPv>
   203f0:	4620      	mov	r0, r4
   203f2:	bd10      	pop	{r4, pc}
   203f4:	00024e20 	.word	0x00024e20

000203f8 <_ZNSt9exceptionD0Ev>:
   203f8:	4b03      	ldr	r3, [pc, #12]	(20408 <_ZNSt9exceptionD0Ev+0x10>)
   203fa:	b510      	push	{r4, lr}
   203fc:	6003      	str	r3, [r0, #0]
   203fe:	4604      	mov	r4, r0
   20400:	f7ee fc38 	bl	ec74 <_ZdlPv>
   20404:	4620      	mov	r0, r4
   20406:	bd10      	pop	{r4, pc}
   20408:	00024e50 	.word	0x00024e50

0002040c <_ZNSt13bad_exceptionD0Ev>:
   2040c:	4b03      	ldr	r3, [pc, #12]	(2041c <_ZNSt13bad_exceptionD0Ev+0x10>)
   2040e:	b510      	push	{r4, lr}
   20410:	6003      	str	r3, [r0, #0]
   20412:	4604      	mov	r4, r0
   20414:	f7ee fc2e 	bl	ec74 <_ZdlPv>
   20418:	4620      	mov	r0, r4
   2041a:	bd10      	pop	{r4, pc}
   2041c:	00024e50 	.word	0x00024e50

00020420 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   20420:	b570      	push	{r4, r5, r6, lr}
   20422:	2310      	movs	r3, #16
   20424:	b084      	sub	sp, #16
   20426:	2500      	movs	r5, #0
   20428:	9302      	str	r3, [sp, #8]
   2042a:	6803      	ldr	r3, [r0, #0]
   2042c:	9500      	str	r5, [sp, #0]
   2042e:	4616      	mov	r6, r2
   20430:	699c      	ldr	r4, [r3, #24]
   20432:	f88d 5004 	strb.w	r5, [sp, #4]
   20436:	466b      	mov	r3, sp
   20438:	9503      	str	r5, [sp, #12]
   2043a:	6812      	ldr	r2, [r2, #0]
   2043c:	47a0      	blx	r4
   2043e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   20442:	f003 0306 	and.w	r3, r3, #6	; 0x6
   20446:	2b06      	cmp	r3, #6
   20448:	bf09      	itett	eq
   2044a:	9b00      	ldreq	r3, [sp, #0]
   2044c:	4628      	movne	r0, r5
   2044e:	6033      	streq	r3, [r6, #0]
   20450:	2001      	moveq	r0, #1
   20452:	b004      	add	sp, #16
   20454:	bd70      	pop	{r4, r5, r6, pc}
   20456:	46c0      	nop			(mov r8, r8)

00020458 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   20458:	9800      	ldr	r0, [sp, #0]
   2045a:	4290      	cmp	r0, r2
   2045c:	bf0c      	ite	eq
   2045e:	2006      	moveq	r0, #6
   20460:	2001      	movne	r0, #1
   20462:	4770      	bx	lr

00020464 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   20464:	b530      	push	{r4, r5, lr}
   20466:	b081      	sub	sp, #4
   20468:	4615      	mov	r5, r2
   2046a:	461c      	mov	r4, r3
   2046c:	f000 f86e 	bl	2054c <_ZNKSt9type_infoeqERKS_>
   20470:	b128      	cbz	r0, 2047e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x1a>
   20472:	2308      	movs	r3, #8
   20474:	2206      	movs	r2, #6
   20476:	6025      	str	r5, [r4, #0]
   20478:	60e3      	str	r3, [r4, #12]
   2047a:	7122      	strb	r2, [r4, #4]
   2047c:	2001      	movs	r0, #1
   2047e:	b001      	add	sp, #4
   20480:	bd30      	pop	{r4, r5, pc}
   20482:	46c0      	nop			(mov r8, r8)

00020484 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   20484:	b5f0      	push	{r4, r5, r6, r7, lr}
   20486:	b081      	sub	sp, #4
   20488:	461c      	mov	r4, r3
   2048a:	9e06      	ldr	r6, [sp, #24]
   2048c:	9b08      	ldr	r3, [sp, #32]
   2048e:	4605      	mov	r5, r0
   20490:	429e      	cmp	r6, r3
   20492:	4617      	mov	r7, r2
   20494:	d00d      	beq.n	204b2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
   20496:	4628      	mov	r0, r5
   20498:	4621      	mov	r1, r4
   2049a:	f000 f857 	bl	2054c <_ZNKSt9type_infoeqERKS_>
   2049e:	b128      	cbz	r0, 204ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
   204a0:	9b09      	ldr	r3, [sp, #36]
   204a2:	9a09      	ldr	r2, [sp, #36]
   204a4:	601e      	str	r6, [r3, #0]
   204a6:	711f      	strb	r7, [r3, #4]
   204a8:	2301      	movs	r3, #1
   204aa:	7193      	strb	r3, [r2, #6]
   204ac:	2000      	movs	r0, #0
   204ae:	b001      	add	sp, #4
   204b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   204b2:	9907      	ldr	r1, [sp, #28]
   204b4:	f000 f84a 	bl	2054c <_ZNKSt9type_infoeqERKS_>
   204b8:	2800      	cmp	r0, #0
   204ba:	d0ec      	beq.n	20496 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>
   204bc:	9a09      	ldr	r2, [sp, #36]
   204be:	7157      	strb	r7, [r2, #5]
   204c0:	e7f4      	b.n	204ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
   204c2:	46c0      	nop			(mov r8, r8)

000204c4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   204c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   204c6:	b081      	sub	sp, #4
   204c8:	4606      	mov	r6, r0
   204ca:	460d      	mov	r5, r1
   204cc:	4617      	mov	r7, r2
   204ce:	461c      	mov	r4, r3
   204d0:	f000 f83c 	bl	2054c <_ZNKSt9type_infoeqERKS_>
   204d4:	b918      	cbnz	r0, 204de <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   204d6:	2c03      	cmp	r4, #3
   204d8:	d903      	bls.n	204e2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1e>
   204da:	b001      	add	sp, #4
   204dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   204de:	2001      	movs	r0, #1
   204e0:	e7fb      	b.n	204da <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
   204e2:	682b      	ldr	r3, [r5, #0]
   204e4:	4628      	mov	r0, r5
   204e6:	695c      	ldr	r4, [r3, #20]
   204e8:	4631      	mov	r1, r6
   204ea:	463a      	mov	r2, r7
   204ec:	47a0      	blx	r4
   204ee:	e7f4      	b.n	204da <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>

000204f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   204f0:	4b03      	ldr	r3, [pc, #12]	(20500 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   204f2:	b510      	push	{r4, lr}
   204f4:	6003      	str	r3, [r0, #0]
   204f6:	4604      	mov	r4, r0
   204f8:	f000 f81c 	bl	20534 <_ZNSt9type_infoD2Ev>
   204fc:	4620      	mov	r0, r4
   204fe:	bd10      	pop	{r4, pc}
   20500:	00024ef8 	.word	0x00024ef8

00020504 <_ZN10__cxxabiv117__class_type_infoD2Ev>:
   20504:	4b03      	ldr	r3, [pc, #12]	(20514 <_ZN10__cxxabiv117__class_type_infoD2Ev+0x10>)
   20506:	b510      	push	{r4, lr}
   20508:	6003      	str	r3, [r0, #0]
   2050a:	4604      	mov	r4, r0
   2050c:	f000 f812 	bl	20534 <_ZNSt9type_infoD2Ev>
   20510:	4620      	mov	r0, r4
   20512:	bd10      	pop	{r4, pc}
   20514:	00024ef8 	.word	0x00024ef8

00020518 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   20518:	4b05      	ldr	r3, [pc, #20]	(20530 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   2051a:	b510      	push	{r4, lr}
   2051c:	6003      	str	r3, [r0, #0]
   2051e:	4604      	mov	r4, r0
   20520:	f000 f808 	bl	20534 <_ZNSt9type_infoD2Ev>
   20524:	4620      	mov	r0, r4
   20526:	f7ee fba5 	bl	ec74 <_ZdlPv>
   2052a:	4620      	mov	r0, r4
   2052c:	bd10      	pop	{r4, pc}
   2052e:	46c0      	nop			(mov r8, r8)
   20530:	00024ef8 	.word	0x00024ef8

00020534 <_ZNSt9type_infoD2Ev>:
   20534:	4b01      	ldr	r3, [pc, #4]	(2053c <_ZNSt9type_infoD2Ev+0x8>)
   20536:	6003      	str	r3, [r0, #0]
   20538:	4770      	bx	lr
   2053a:	46c0      	nop			(mov r8, r8)
   2053c:	00024f58 	.word	0x00024f58

00020540 <_ZNSt9type_infoD1Ev>:
   20540:	4b01      	ldr	r3, [pc, #4]	(20548 <_ZNSt9type_infoD1Ev+0x8>)
   20542:	6003      	str	r3, [r0, #0]
   20544:	4770      	bx	lr
   20546:	46c0      	nop			(mov r8, r8)
   20548:	00024f58 	.word	0x00024f58

0002054c <_ZNKSt9type_infoeqERKS_>:
   2054c:	6840      	ldr	r0, [r0, #4]
   2054e:	684b      	ldr	r3, [r1, #4]
   20550:	4298      	cmp	r0, r3
   20552:	bf14      	ite	ne
   20554:	2000      	movne	r0, #0
   20556:	2001      	moveq	r0, #1
   20558:	4770      	bx	lr
   2055a:	46c0      	nop			(mov r8, r8)

0002055c <_ZNKSt9type_info14__is_pointer_pEv>:
   2055c:	2000      	movs	r0, #0
   2055e:	4770      	bx	lr

00020560 <_ZNKSt9type_info15__is_function_pEv>:
   20560:	2000      	movs	r0, #0
   20562:	4770      	bx	lr

00020564 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   20564:	6840      	ldr	r0, [r0, #4]
   20566:	684b      	ldr	r3, [r1, #4]
   20568:	4298      	cmp	r0, r3
   2056a:	bf14      	ite	ne
   2056c:	2000      	movne	r0, #0
   2056e:	2001      	moveq	r0, #1
   20570:	4770      	bx	lr
   20572:	46c0      	nop			(mov r8, r8)

00020574 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   20574:	2000      	movs	r0, #0
   20576:	4770      	bx	lr

00020578 <_ZNSt9type_infoD0Ev>:
   20578:	4b03      	ldr	r3, [pc, #12]	(20588 <_ZNSt9type_infoD0Ev+0x10>)
   2057a:	b510      	push	{r4, lr}
   2057c:	6003      	str	r3, [r0, #0]
   2057e:	4604      	mov	r4, r0
   20580:	f7ee fb78 	bl	ec74 <_ZdlPv>
   20584:	4620      	mov	r0, r4
   20586:	bd10      	pop	{r4, pc}
   20588:	00024f58 	.word	0x00024f58

0002058c <__cxa_current_exception_type>:
   2058c:	b500      	push	{lr}
   2058e:	b081      	sub	sp, #4
   20590:	f000 f88c 	bl	206ac <__cxa_get_globals>
   20594:	6800      	ldr	r0, [r0, #0]
   20596:	b100      	cbz	r0, 2059a <__cxa_current_exception_type+0xe>
   20598:	6800      	ldr	r0, [r0, #0]
   2059a:	b001      	add	sp, #4
   2059c:	bd00      	pop	{pc}
   2059e:	46c0      	nop			(mov r8, r8)

000205a0 <__cxa_rethrow>:
   205a0:	b510      	push	{r4, lr}
   205a2:	f000 f883 	bl	206ac <__cxa_get_globals>
   205a6:	6843      	ldr	r3, [r0, #4]
   205a8:	6804      	ldr	r4, [r0, #0]
   205aa:	3301      	adds	r3, #1
   205ac:	6043      	str	r3, [r0, #4]
   205ae:	b164      	cbz	r4, 205ca <__cxa_rethrow+0x2a>
   205b0:	f894 3020 	ldrb.w	r3, [r4, #32]
   205b4:	2b47      	cmp	r3, #71
   205b6:	d00a      	beq.n	205ce <__cxa_rethrow+0x2e>
   205b8:	2300      	movs	r3, #0
   205ba:	6003      	str	r3, [r0, #0]
   205bc:	3420      	adds	r4, #32
   205be:	4620      	mov	r0, r4
   205c0:	f7fd fc88 	bl	1ded4 <_Unwind_Resume_or_Rethrow>
   205c4:	4620      	mov	r0, r4
   205c6:	f7ff fd9b 	bl	20100 <__cxa_begin_catch>
   205ca:	f7fe fe65 	bl	1f298 <_ZSt9terminatev>
   205ce:	f894 3021 	ldrb.w	r3, [r4, #33]
   205d2:	2b4e      	cmp	r3, #78
   205d4:	d1f0      	bne.n	205b8 <__cxa_rethrow+0x18>
   205d6:	f894 3022 	ldrb.w	r3, [r4, #34]
   205da:	2b55      	cmp	r3, #85
   205dc:	d1ec      	bne.n	205b8 <__cxa_rethrow+0x18>
   205de:	f894 3023 	ldrb.w	r3, [r4, #35]
   205e2:	2b43      	cmp	r3, #67
   205e4:	d1e8      	bne.n	205b8 <__cxa_rethrow+0x18>
   205e6:	f894 3024 	ldrb.w	r3, [r4, #36]
   205ea:	2b43      	cmp	r3, #67
   205ec:	d1e4      	bne.n	205b8 <__cxa_rethrow+0x18>
   205ee:	f894 3025 	ldrb.w	r3, [r4, #37]
   205f2:	2b2b      	cmp	r3, #43
   205f4:	d1e0      	bne.n	205b8 <__cxa_rethrow+0x18>
   205f6:	f894 3026 	ldrb.w	r3, [r4, #38]
   205fa:	2b2b      	cmp	r3, #43
   205fc:	d1dc      	bne.n	205b8 <__cxa_rethrow+0x18>
   205fe:	f894 3027 	ldrb.w	r3, [r4, #39]
   20602:	2b00      	cmp	r3, #0
   20604:	d1d8      	bne.n	205b8 <__cxa_rethrow+0x18>
   20606:	6963      	ldr	r3, [r4, #20]
   20608:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   2060c:	6163      	str	r3, [r4, #20]
   2060e:	e7d5      	b.n	205bc <__cxa_rethrow+0x1c>

00020610 <__cxa_throw>:
   20610:	4b16      	ldr	r3, [pc, #88]	(2066c <__cxa_throw+0x5c>)
   20612:	b510      	push	{r4, lr}
   20614:	4604      	mov	r4, r0
   20616:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
   2061a:	6042      	str	r2, [r0, #4]
   2061c:	681a      	ldr	r2, [r3, #0]
   2061e:	4b14      	ldr	r3, [pc, #80]	(20670 <__cxa_throw+0x60>)
   20620:	6082      	str	r2, [r0, #8]
   20622:	681a      	ldr	r2, [r3, #0]
   20624:	2347      	movs	r3, #71
   20626:	60c2      	str	r2, [r0, #12]
   20628:	224e      	movs	r2, #78
   2062a:	f880 2021 	strb.w	r2, [r0, #33]
   2062e:	3a0b      	subs	r2, #11
   20630:	f880 3020 	strb.w	r3, [r0, #32]
   20634:	f880 2023 	strb.w	r2, [r0, #35]
   20638:	f880 2024 	strb.w	r2, [r0, #36]
   2063c:	330e      	adds	r3, #14
   2063e:	4a0d      	ldr	r2, [pc, #52]	(20674 <__cxa_throw+0x64>)
   20640:	f844 1c78 	str.w	r1, [r4, #-120]
   20644:	f880 3022 	strb.w	r3, [r0, #34]
   20648:	212b      	movs	r1, #43
   2064a:	3b55      	subs	r3, #85
   2064c:	3c58      	subs	r4, #88
   2064e:	f880 1025 	strb.w	r1, [r0, #37]
   20652:	f880 1026 	strb.w	r1, [r0, #38]
   20656:	f880 3027 	strb.w	r3, [r0, #39]
   2065a:	6282      	str	r2, [r0, #40]
   2065c:	4620      	mov	r0, r4
   2065e:	f7fd fc15 	bl	1de8c <_Unwind_RaiseException>
   20662:	4620      	mov	r0, r4
   20664:	f7ff fd4c 	bl	20100 <__cxa_begin_catch>
   20668:	f7fe fe16 	bl	1f298 <_ZSt9terminatev>
   2066c:	20000034 	.word	0x20000034
   20670:	20000038 	.word	0x20000038
   20674:	00020679 	.word	0x00020679

00020678 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   20678:	2801      	cmp	r0, #1
   2067a:	b510      	push	{r4, lr}
   2067c:	f1a1 0320 	sub.w	r3, r1, #32	; 0x20
   20680:	d80c      	bhi.n	2069c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x24>
   20682:	685b      	ldr	r3, [r3, #4]
   20684:	b13b      	cbz	r3, 20696 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x1e>
   20686:	f101 0458 	add.w	r4, r1, #88	; 0x58
   2068a:	4620      	mov	r0, r4
   2068c:	4798      	blx	r3
   2068e:	4620      	mov	r0, r4
   20690:	f000 f812 	bl	206b8 <__cxa_free_exception>
   20694:	bd10      	pop	{r4, pc}
   20696:	f101 0458 	add.w	r4, r1, #88	; 0x58
   2069a:	e7f8      	b.n	2068e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
   2069c:	68d8      	ldr	r0, [r3, #12]
   2069e:	f7fe fded 	bl	1f27c <_ZN10__cxxabiv111__terminateEPFvvE>
   206a2:	46c0      	nop			(mov r8, r8)

000206a4 <__cxa_get_globals_fast>:
   206a4:	4800      	ldr	r0, [pc, #0]	(206a8 <__cxa_get_globals_fast+0x4>)
   206a6:	4770      	bx	lr
   206a8:	20000684 	.word	0x20000684

000206ac <__cxa_get_globals>:
   206ac:	4800      	ldr	r0, [pc, #0]	(206b0 <__cxa_get_globals+0x4>)
   206ae:	4770      	bx	lr
   206b0:	20000684 	.word	0x20000684

000206b4 <_GLOBAL__I___cxa_allocate_exception>:
   206b4:	4770      	bx	lr
   206b6:	46c0      	nop			(mov r8, r8)

000206b8 <__cxa_free_exception>:
   206b8:	b500      	push	{lr}
   206ba:	4a0c      	ldr	r2, [pc, #48]	(206ec <__cxa_free_exception+0x34>)
   206bc:	b081      	sub	sp, #4
   206be:	4282      	cmp	r2, r0
   206c0:	d803      	bhi.n	206ca <__cxa_free_exception+0x12>
   206c2:	f502 6300 	add.w	r3, r2, #2048	; 0x800
   206c6:	4298      	cmp	r0, r3
   206c8:	d304      	bcc.n	206d4 <__cxa_free_exception+0x1c>
   206ca:	3878      	subs	r0, #120
   206cc:	f001 ffc8 	bl	22660 <free>
   206d0:	b001      	add	sp, #4
   206d2:	bd00      	pop	{pc}
   206d4:	ebc2 0200 	rsb	r2, r2, r0
   206d8:	0a52      	lsrs	r2, r2, #9
   206da:	2301      	movs	r3, #1
   206dc:	4093      	lsls	r3, r2
   206de:	4904      	ldr	r1, [pc, #16]	(206f0 <__cxa_free_exception+0x38>)
   206e0:	ea6f 0303 	mvn.w	r3, r3
   206e4:	680a      	ldr	r2, [r1, #0]
   206e6:	4013      	ands	r3, r2
   206e8:	600b      	str	r3, [r1, #0]
   206ea:	e7f1      	b.n	206d0 <__cxa_free_exception+0x18>
   206ec:	20000690 	.word	0x20000690
   206f0:	20000e90 	.word	0x20000e90

000206f4 <__cxa_allocate_exception>:
   206f4:	b530      	push	{r4, r5, lr}
   206f6:	f100 0578 	add.w	r5, r0, #120	; 0x78
   206fa:	b081      	sub	sp, #4
   206fc:	4628      	mov	r0, r5
   206fe:	f001 ffbb 	bl	22678 <malloc>
   20702:	4604      	mov	r4, r0
   20704:	b168      	cbz	r0, 20722 <__cxa_allocate_exception+0x2e>
   20706:	f7ff ffd1 	bl	206ac <__cxa_get_globals>
   2070a:	6843      	ldr	r3, [r0, #4]
   2070c:	2100      	movs	r1, #0
   2070e:	3301      	adds	r3, #1
   20710:	6043      	str	r3, [r0, #4]
   20712:	2278      	movs	r2, #120
   20714:	4620      	mov	r0, r4
   20716:	f002 fa3f 	bl	22b98 <memset>
   2071a:	f104 0078 	add.w	r0, r4, #120	; 0x78
   2071e:	b001      	add	sp, #4
   20720:	bd30      	pop	{r4, r5, pc}
   20722:	4912      	ldr	r1, [pc, #72]	(2076c <__cxa_allocate_exception+0x78>)
   20724:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   20728:	680a      	ldr	r2, [r1, #0]
   2072a:	bf9c      	itt	ls
   2072c:	4600      	movls	r0, r0
   2072e:	4613      	movls	r3, r2
   20730:	d812      	bhi.n	20758 <__cxa_allocate_exception+0x64>
   20732:	f013 0f01 	tst.w	r3, #1	; 0x1
   20736:	d006      	beq.n	20746 <__cxa_allocate_exception+0x52>
   20738:	3001      	adds	r0, #1
   2073a:	2804      	cmp	r0, #4
   2073c:	d00c      	beq.n	20758 <__cxa_allocate_exception+0x64>
   2073e:	085b      	lsrs	r3, r3, #1
   20740:	f013 0f01 	tst.w	r3, #1	; 0x1
   20744:	d1f8      	bne.n	20738 <__cxa_allocate_exception+0x44>
   20746:	2301      	movs	r3, #1
   20748:	4083      	lsls	r3, r0
   2074a:	4313      	orrs	r3, r2
   2074c:	600b      	str	r3, [r1, #0]
   2074e:	4b08      	ldr	r3, [pc, #32]	(20770 <__cxa_allocate_exception+0x7c>)
   20750:	0242      	lsls	r2, r0, #9
   20752:	eb03 0402 	add.w	r4, r3, r2
   20756:	e7d6      	b.n	20706 <__cxa_allocate_exception+0x12>
   20758:	f7fe fd9e 	bl	1f298 <_ZSt9terminatev>
   2075c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   20760:	d001      	beq.n	20766 <__cxa_allocate_exception+0x72>
   20762:	f7f8 ffcb 	bl	196fc <__cxa_end_cleanup>
   20766:	f7ff fbf1 	bl	1ff4c <__cxa_call_unexpected>
   2076a:	46c0      	nop			(mov r8, r8)
   2076c:	20000e90 	.word	0x20000e90
   20770:	20000690 	.word	0x20000690

00020774 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
   20774:	2001      	movs	r0, #1
   20776:	4770      	bx	lr

00020778 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   20778:	b5f0      	push	{r4, r5, r6, r7, lr}
   2077a:	2b01      	cmp	r3, #1
   2077c:	b081      	sub	sp, #4
   2077e:	4605      	mov	r5, r0
   20780:	460e      	mov	r6, r1
   20782:	4617      	mov	r7, r2
   20784:	461c      	mov	r4, r3
   20786:	d908      	bls.n	2079a <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x22>
   20788:	68e8      	ldr	r0, [r5, #12]
   2078a:	1ca3      	adds	r3, r4, #2
   2078c:	6802      	ldr	r2, [r0, #0]
   2078e:	68f1      	ldr	r1, [r6, #12]
   20790:	6914      	ldr	r4, [r2, #16]
   20792:	463a      	mov	r2, r7
   20794:	47a0      	blx	r4
   20796:	b001      	add	sp, #4
   20798:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2079a:	68c0      	ldr	r0, [r0, #12]
   2079c:	4906      	ldr	r1, [pc, #24]	(207b8 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x40>)
   2079e:	f7ff fed5 	bl	2054c <_ZNKSt9type_infoeqERKS_>
   207a2:	2800      	cmp	r0, #0
   207a4:	d0f0      	beq.n	20788 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x10>
   207a6:	68f0      	ldr	r0, [r6, #12]
   207a8:	6803      	ldr	r3, [r0, #0]
   207aa:	68da      	ldr	r2, [r3, #12]
   207ac:	4790      	blx	r2
   207ae:	f080 0001 	eor.w	r0, r0, #1	; 0x1
   207b2:	b2c0      	uxtb	r0, r0
   207b4:	e7ef      	b.n	20796 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1e>
   207b6:	46c0      	nop			(mov r8, r8)
   207b8:	00024cd0 	.word	0x00024cd0

000207bc <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
   207bc:	4b03      	ldr	r3, [pc, #12]	(207cc <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
   207be:	b510      	push	{r4, lr}
   207c0:	6003      	str	r3, [r0, #0]
   207c2:	4604      	mov	r4, r0
   207c4:	f000 f860 	bl	20888 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
   207c8:	4620      	mov	r0, r4
   207ca:	bd10      	pop	{r4, pc}
   207cc:	000255b0 	.word	0x000255b0

000207d0 <_ZN10__cxxabiv119__pointer_type_infoD2Ev>:
   207d0:	4b03      	ldr	r3, [pc, #12]	(207e0 <_ZN10__cxxabiv119__pointer_type_infoD2Ev+0x10>)
   207d2:	b510      	push	{r4, lr}
   207d4:	6003      	str	r3, [r0, #0]
   207d6:	4604      	mov	r4, r0
   207d8:	f000 f856 	bl	20888 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
   207dc:	4620      	mov	r0, r4
   207de:	bd10      	pop	{r4, pc}
   207e0:	000255b0 	.word	0x000255b0

000207e4 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
   207e4:	4b05      	ldr	r3, [pc, #20]	(207fc <_ZN10__cxxabiv119__pointer_type_infoD0Ev+0x18>)
   207e6:	b510      	push	{r4, lr}
   207e8:	6003      	str	r3, [r0, #0]
   207ea:	4604      	mov	r4, r0
   207ec:	f000 f84c 	bl	20888 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
   207f0:	4620      	mov	r0, r4
   207f2:	f7ee fa3f 	bl	ec74 <_ZdlPv>
   207f6:	4620      	mov	r0, r4
   207f8:	bd10      	pop	{r4, pc}
   207fa:	46c0      	nop			(mov r8, r8)
   207fc:	000255b0 	.word	0x000255b0

00020800 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   20800:	68c0      	ldr	r0, [r0, #12]
   20802:	b510      	push	{r4, lr}
   20804:	f8d0 c000 	ldr.w	ip, [r0]
   20808:	68c9      	ldr	r1, [r1, #12]
   2080a:	3302      	adds	r3, #2
   2080c:	f8dc 4010 	ldr.w	r4, [ip, #16]
   20810:	47a0      	blx	r4
   20812:	bd10      	pop	{r4, pc}

00020814 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
   20814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20818:	4606      	mov	r6, r0
   2081a:	460d      	mov	r5, r1
   2081c:	4690      	mov	r8, r2
   2081e:	461f      	mov	r7, r3
   20820:	f7ff fe94 	bl	2054c <_ZNKSt9type_infoeqERKS_>
   20824:	2800      	cmp	r0, #0
   20826:	d121      	bne.n	2086c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
   20828:	6833      	ldr	r3, [r6, #0]
   2082a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   2082e:	2d00      	cmp	r5, #0
   20830:	d01e      	beq.n	20870 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   20832:	682b      	ldr	r3, [r5, #0]
   20834:	f853 1c04 	ldr.w	r1, [r3, #-4]
   20838:	f7ff fe88 	bl	2054c <_ZNKSt9type_infoeqERKS_>
   2083c:	b198      	cbz	r0, 20866 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
   2083e:	f017 0f01 	tst.w	r7, #1	; 0x1
   20842:	d010      	beq.n	20866 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
   20844:	68b2      	ldr	r2, [r6, #8]
   20846:	68ab      	ldr	r3, [r5, #8]
   20848:	4393      	bics	r3, r2
   2084a:	d10c      	bne.n	20866 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
   2084c:	f012 0f01 	tst.w	r2, #1	; 0x1
   20850:	6833      	ldr	r3, [r6, #0]
   20852:	bf08      	it	eq
   20854:	f027 0701 	biceq.w	r7, r7, #1	; 0x1
   20858:	699c      	ldr	r4, [r3, #24]
   2085a:	4630      	mov	r0, r6
   2085c:	4629      	mov	r1, r5
   2085e:	4642      	mov	r2, r8
   20860:	463b      	mov	r3, r7
   20862:	47a0      	blx	r4
   20864:	e000      	b.n	20868 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x54>
   20866:	2000      	movs	r0, #0
   20868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2086c:	2001      	movs	r0, #1
   2086e:	e7fb      	b.n	20868 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x54>
   20870:	f7ff fa70 	bl	1fd54 <__cxa_bad_typeid>

00020874 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
   20874:	4b03      	ldr	r3, [pc, #12]	(20884 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
   20876:	b510      	push	{r4, lr}
   20878:	6003      	str	r3, [r0, #0]
   2087a:	4604      	mov	r4, r0
   2087c:	f7ff fe5a 	bl	20534 <_ZNSt9type_infoD2Ev>
   20880:	4620      	mov	r0, r4
   20882:	bd10      	pop	{r4, pc}
   20884:	00025608 	.word	0x00025608

00020888 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>:
   20888:	4b03      	ldr	r3, [pc, #12]	(20898 <_ZN10__cxxabiv117__pbase_type_infoD2Ev+0x10>)
   2088a:	b510      	push	{r4, lr}
   2088c:	6003      	str	r3, [r0, #0]
   2088e:	4604      	mov	r4, r0
   20890:	f7ff fe50 	bl	20534 <_ZNSt9type_infoD2Ev>
   20894:	4620      	mov	r0, r4
   20896:	bd10      	pop	{r4, pc}
   20898:	00025608 	.word	0x00025608

0002089c <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
   2089c:	4b05      	ldr	r3, [pc, #20]	(208b4 <_ZN10__cxxabiv117__pbase_type_infoD0Ev+0x18>)
   2089e:	b510      	push	{r4, lr}
   208a0:	6003      	str	r3, [r0, #0]
   208a2:	4604      	mov	r4, r0
   208a4:	f7ff fe46 	bl	20534 <_ZNSt9type_infoD2Ev>
   208a8:	4620      	mov	r0, r4
   208aa:	f7ee f9e3 	bl	ec74 <_ZdlPv>
   208ae:	4620      	mov	r0, r4
   208b0:	bd10      	pop	{r4, pc}
   208b2:	46c0      	nop			(mov r8, r8)
   208b4:	00025608 	.word	0x00025608

000208b8 <cos>:
   208b8:	b530      	push	{r4, r5, lr}
   208ba:	4b1e      	ldr	r3, [pc, #120]	(20934 <cos+0x7c>)
   208bc:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   208c0:	429a      	cmp	r2, r3
   208c2:	b087      	sub	sp, #28
   208c4:	dc02      	bgt.n	208cc <cos+0x14>
   208c6:	2200      	movs	r2, #0
   208c8:	2300      	movs	r3, #0
   208ca:	e017      	b.n	208fc <cos+0x44>
   208cc:	4b1a      	ldr	r3, [pc, #104]	(20938 <cos+0x80>)
   208ce:	429a      	cmp	r2, r3
   208d0:	dd04      	ble.n	208dc <cos+0x24>
   208d2:	4602      	mov	r2, r0
   208d4:	460b      	mov	r3, r1
   208d6:	f7fb fd31 	bl	1c33c <__aeabi_dsub>
   208da:	e029      	b.n	20930 <cos+0x78>
   208dc:	aa02      	add	r2, sp, #8
   208de:	f000 f9ab 	bl	20c38 <__ieee754_rem_pio2>
   208e2:	f000 0303 	and.w	r3, r0, #3	; 0x3
   208e6:	2b01      	cmp	r3, #1
   208e8:	d00b      	beq.n	20902 <cos+0x4a>
   208ea:	2b02      	cmp	r3, #2
   208ec:	d011      	beq.n	20912 <cos+0x5a>
   208ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   208f2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   208f6:	b9ab      	cbnz	r3, 20924 <cos+0x6c>
   208f8:	4622      	mov	r2, r4
   208fa:	462b      	mov	r3, r5
   208fc:	f000 fc84 	bl	21208 <__kernel_cos>
   20900:	e016      	b.n	20930 <cos+0x78>
   20902:	9300      	str	r3, [sp, #0]
   20904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   20908:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2090c:	f001 f8ec 	bl	21ae8 <__kernel_sin>
   20910:	e005      	b.n	2091e <cos+0x66>
   20912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   20916:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2091a:	f000 fc75 	bl	21208 <__kernel_cos>
   2091e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   20922:	e005      	b.n	20930 <cos+0x78>
   20924:	2301      	movs	r3, #1
   20926:	9300      	str	r3, [sp, #0]
   20928:	4622      	mov	r2, r4
   2092a:	462b      	mov	r3, r5
   2092c:	f001 f8dc 	bl	21ae8 <__kernel_sin>
   20930:	b007      	add	sp, #28
   20932:	bd30      	pop	{r4, r5, pc}
   20934:	3fe921fb 	.word	0x3fe921fb
   20938:	7fefffff 	.word	0x7fefffff

0002093c <sin>:
   2093c:	b530      	push	{r4, r5, lr}
   2093e:	4b20      	ldr	r3, [pc, #128]	(209c0 <sin+0x84>)
   20940:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   20944:	429a      	cmp	r2, r3
   20946:	b087      	sub	sp, #28
   20948:	dc04      	bgt.n	20954 <sin+0x18>
   2094a:	2300      	movs	r3, #0
   2094c:	9300      	str	r3, [sp, #0]
   2094e:	2200      	movs	r2, #0
   20950:	2300      	movs	r3, #0
   20952:	e019      	b.n	20988 <sin+0x4c>
   20954:	4b1b      	ldr	r3, [pc, #108]	(209c4 <sin+0x88>)
   20956:	429a      	cmp	r2, r3
   20958:	dd04      	ble.n	20964 <sin+0x28>
   2095a:	4602      	mov	r2, r0
   2095c:	460b      	mov	r3, r1
   2095e:	f7fb fced 	bl	1c33c <__aeabi_dsub>
   20962:	e02a      	b.n	209ba <sin+0x7e>
   20964:	aa02      	add	r2, sp, #8
   20966:	f000 f967 	bl	20c38 <__ieee754_rem_pio2>
   2096a:	f000 0303 	and.w	r3, r0, #3	; 0x3
   2096e:	2b01      	cmp	r3, #1
   20970:	d00d      	beq.n	2098e <sin+0x52>
   20972:	2b02      	cmp	r3, #2
   20974:	d012      	beq.n	2099c <sin+0x60>
   20976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2097a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   2097e:	b9b3      	cbnz	r3, 209ae <sin+0x72>
   20980:	2301      	movs	r3, #1
   20982:	9300      	str	r3, [sp, #0]
   20984:	4622      	mov	r2, r4
   20986:	462b      	mov	r3, r5
   20988:	f001 f8ae 	bl	21ae8 <__kernel_sin>
   2098c:	e015      	b.n	209ba <sin+0x7e>
   2098e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   20992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   20996:	f000 fc37 	bl	21208 <__kernel_cos>
   2099a:	e00e      	b.n	209ba <sin+0x7e>
   2099c:	2301      	movs	r3, #1
   2099e:	9300      	str	r3, [sp, #0]
   209a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   209a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   209a8:	f001 f89e 	bl	21ae8 <__kernel_sin>
   209ac:	e003      	b.n	209b6 <sin+0x7a>
   209ae:	4622      	mov	r2, r4
   209b0:	462b      	mov	r3, r5
   209b2:	f000 fc29 	bl	21208 <__kernel_cos>
   209b6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   209ba:	b007      	add	sp, #28
   209bc:	bd30      	pop	{r4, r5, pc}
   209be:	46c0      	nop			(mov r8, r8)
   209c0:	3fe921fb 	.word	0x3fe921fb
   209c4:	7fefffff 	.word	0x7fefffff

000209c8 <atan2>:
   209c8:	b500      	push	{lr}
   209ca:	b081      	sub	sp, #4
   209cc:	f000 f858 	bl	20a80 <__ieee754_atan2>
   209d0:	b001      	add	sp, #4
   209d2:	bd00      	pop	{pc}

000209d4 <sqrt>:
   209d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   209d6:	b08f      	sub	sp, #60
   209d8:	4604      	mov	r4, r0
   209da:	460d      	mov	r5, r1
   209dc:	f000 fb40 	bl	21060 <__ieee754_sqrt>
   209e0:	4a24      	ldr	r2, [pc, #144]	(20a74 <sqrt+0xa0>)
   209e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   209e6:	f992 3000 	ldrsb.w	r3, [r2]
   209ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   209ee:	d03c      	beq.n	20a6a <sqrt+0x96>
   209f0:	4620      	mov	r0, r4
   209f2:	4629      	mov	r1, r5
   209f4:	f001 fb58 	bl	220a8 <__isnand>
   209f8:	9001      	str	r0, [sp, #4]
   209fa:	2800      	cmp	r0, #0
   209fc:	d135      	bne.n	20a6a <sqrt+0x96>
   209fe:	2600      	movs	r6, #0
   20a00:	2700      	movs	r7, #0
   20a02:	4620      	mov	r0, r4
   20a04:	4629      	mov	r1, r5
   20a06:	4632      	mov	r2, r6
   20a08:	463b      	mov	r3, r7
   20a0a:	f7fc f8bb 	bl	1cb84 <__aeabi_dcmplt>
   20a0e:	2800      	cmp	r0, #0
   20a10:	d02b      	beq.n	20a6a <sqrt+0x96>
   20a12:	2301      	movs	r3, #1
   20a14:	9304      	str	r3, [sp, #16]
   20a16:	4a17      	ldr	r2, [pc, #92]	(20a74 <sqrt+0xa0>)
   20a18:	4b17      	ldr	r3, [pc, #92]	(20a78 <sqrt+0xa4>)
   20a1a:	e9cd 4508 	strd	r4, r5, [sp, #32]
   20a1e:	9305      	str	r3, [sp, #20]
   20a20:	e9cd 4506 	strd	r4, r5, [sp, #24]
   20a24:	9b01      	ldr	r3, [sp, #4]
   20a26:	7814      	ldrb	r4, [r2, #0]
   20a28:	930c      	str	r3, [sp, #48]
   20a2a:	b914      	cbnz	r4, 20a32 <sqrt+0x5e>
   20a2c:	e9cd 670a 	strd	r6, r7, [sp, #40]
   20a30:	e009      	b.n	20a46 <sqrt+0x72>
   20a32:	4630      	mov	r0, r6
   20a34:	4639      	mov	r1, r7
   20a36:	4632      	mov	r2, r6
   20a38:	463b      	mov	r3, r7
   20a3a:	f7fb ff5d 	bl	1c8f8 <__aeabi_ddiv>
   20a3e:	2c02      	cmp	r4, #2
   20a40:	e9cd 010a 	strd	r0, r1, [sp, #40]
   20a44:	d003      	beq.n	20a4e <sqrt+0x7a>
   20a46:	a804      	add	r0, sp, #16
   20a48:	f001 fb3c 	bl	220c4 <matherr>
   20a4c:	b918      	cbnz	r0, 20a56 <sqrt+0x82>
   20a4e:	f001 fbc7 	bl	221e0 <__errno>
   20a52:	2321      	movs	r3, #33
   20a54:	6003      	str	r3, [r0, #0]
   20a56:	9b0c      	ldr	r3, [sp, #48]
   20a58:	b11b      	cbz	r3, 20a62 <sqrt+0x8e>
   20a5a:	f001 fbc1 	bl	221e0 <__errno>
   20a5e:	9b0c      	ldr	r3, [sp, #48]
   20a60:	6003      	str	r3, [r0, #0]
   20a62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]
   20a66:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   20a6e:	b00f      	add	sp, #60
   20a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20a72:	46c0      	nop			(mov r8, r8)
   20a74:	20000040 	.word	0x20000040
   20a78:	00025658 	.word	0x00025658
   20a7c:	00000000 	.word	0x00000000

00020a80 <__ieee754_atan2>:
   20a80:	b5f0      	push	{r4, r5, r6, r7, lr}
   20a82:	b089      	sub	sp, #36
   20a84:	e9cd 2304 	strd	r2, r3, [sp, #16]
   20a88:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   20a8c:	9307      	str	r3, [sp, #28]
   20a8e:	f1c2 0300 	rsb	r3, r2, #0	; 0x0
   20a92:	4313      	orrs	r3, r2
   20a94:	4616      	mov	r6, r2
   20a96:	4a66      	ldr	r2, [pc, #408]	(20c30 <__ieee754_atan2+0x1b0>)
   20a98:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
   20a9c:	4293      	cmp	r3, r2
   20a9e:	4604      	mov	r4, r0
   20aa0:	460d      	mov	r5, r1
   20aa2:	9001      	str	r0, [sp, #4]
   20aa4:	d808      	bhi.n	20ab8 <__ieee754_atan2+0x38>
   20aa6:	f1c0 0300 	rsb	r3, r0, #0	; 0x0
   20aaa:	4303      	orrs	r3, r0
   20aac:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   20ab0:	ea4c 73d3 	orr.w	r3, ip, r3, lsr #31
   20ab4:	4293      	cmp	r3, r2
   20ab6:	d904      	bls.n	20ac2 <__ieee754_atan2+0x42>
   20ab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   20abc:	f7fb fc40 	bl	1c340 <__adddf3>
   20ac0:	e08e      	b.n	20be0 <__ieee754_atan2+0x160>
   20ac2:	9c07      	ldr	r4, [sp, #28]
   20ac4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   20ac8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   20acc:	4333      	orrs	r3, r6
   20ace:	d102      	bne.n	20ad6 <__ieee754_atan2+0x56>
   20ad0:	f001 f8c2 	bl	21c58 <atan>
   20ad4:	e084      	b.n	20be0 <__ieee754_atan2+0x160>
   20ad6:	9a07      	ldr	r2, [sp, #28]
   20ad8:	1793      	asrs	r3, r2, #30
   20ada:	f003 0302 	and.w	r3, r3, #2	; 0x2
   20ade:	ea43 74d1 	orr.w	r4, r3, r1, lsr #31
   20ae2:	9b01      	ldr	r3, [sp, #4]
   20ae4:	ea5c 0303 	orrs.w	r3, ip, r3
   20ae8:	d105      	bne.n	20af6 <__ieee754_atan2+0x76>
   20aea:	2c03      	cmp	r4, #3
   20aec:	d803      	bhi.n	20af6 <__ieee754_atan2+0x76>
   20aee:	e8df f004 	tbb	[pc, r4]
   20af2:	7777      	.short	0x7777
   20af4:	2b28      	.short	0x2b28
   20af6:	433e      	orrs	r6, r7
   20af8:	d02c      	beq.n	20b54 <__ieee754_atan2+0xd4>
   20afa:	4b4d      	ldr	r3, [pc, #308]	(20c30 <__ieee754_atan2+0x1b0>)
   20afc:	429f      	cmp	r7, r3
   20afe:	d126      	bne.n	20b4e <__ieee754_atan2+0xce>
   20b00:	45bc      	cmp	ip, r7
   20b02:	d111      	bne.n	20b28 <__ieee754_atan2+0xa8>
   20b04:	2c03      	cmp	r4, #3
   20b06:	d822      	bhi.n	20b4e <__ieee754_atan2+0xce>
   20b08:	e8df f004 	tbb	[pc, r4]
   20b0c:	0b080205 	.word	0x0b080205
   20b10:	a035      	add	r0, pc, #212	(adr r0, 20be8 <__ieee754_atan2+0x168>)
   20b12:	c803      	ldmia	r0!, {r0, r1}
   20b14:	e064      	b.n	20be0 <__ieee754_atan2+0x160>
   20b16:	a036      	add	r0, pc, #216	(adr r0, 20bf0 <__ieee754_atan2+0x170>)
   20b18:	c803      	ldmia	r0!, {r0, r1}
   20b1a:	e061      	b.n	20be0 <__ieee754_atan2+0x160>
   20b1c:	a036      	add	r0, pc, #216	(adr r0, 20bf8 <__ieee754_atan2+0x178>)
   20b1e:	c803      	ldmia	r0!, {r0, r1}
   20b20:	e05e      	b.n	20be0 <__ieee754_atan2+0x160>
   20b22:	a037      	add	r0, pc, #220	(adr r0, 20c00 <__ieee754_atan2+0x180>)
   20b24:	c803      	ldmia	r0!, {r0, r1}
   20b26:	e05b      	b.n	20be0 <__ieee754_atan2+0x160>
   20b28:	2c03      	cmp	r4, #3
   20b2a:	d810      	bhi.n	20b4e <__ieee754_atan2+0xce>
   20b2c:	e8df f004 	tbb	[pc, r4]
   20b30:	0c090206 	.word	0x0c090206
   20b34:	2000      	movs	r0, #0
   20b36:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   20b3a:	e051      	b.n	20be0 <__ieee754_atan2+0x160>
   20b3c:	2000      	movs	r0, #0
   20b3e:	2100      	movs	r1, #0
   20b40:	e04e      	b.n	20be0 <__ieee754_atan2+0x160>
   20b42:	a031      	add	r0, pc, #196	(adr r0, 20c08 <__ieee754_atan2+0x188>)
   20b44:	c803      	ldmia	r0!, {r0, r1}
   20b46:	e04b      	b.n	20be0 <__ieee754_atan2+0x160>
   20b48:	a031      	add	r0, pc, #196	(adr r0, 20c10 <__ieee754_atan2+0x190>)
   20b4a:	c803      	ldmia	r0!, {r0, r1}
   20b4c:	e048      	b.n	20be0 <__ieee754_atan2+0x160>
   20b4e:	4b38      	ldr	r3, [pc, #224]	(20c30 <__ieee754_atan2+0x1b0>)
   20b50:	459c      	cmp	ip, r3
   20b52:	d107      	bne.n	20b64 <__ieee754_atan2+0xe4>
   20b54:	2d00      	cmp	r5, #0
   20b56:	db02      	blt.n	20b5e <__ieee754_atan2+0xde>
   20b58:	a02f      	add	r0, pc, #188	(adr r0, 20c18 <__ieee754_atan2+0x198>)
   20b5a:	c803      	ldmia	r0!, {r0, r1}
   20b5c:	e040      	b.n	20be0 <__ieee754_atan2+0x160>
   20b5e:	a030      	add	r0, pc, #192	(adr r0, 20c20 <__ieee754_atan2+0x1a0>)
   20b60:	c803      	ldmia	r0!, {r0, r1}
   20b62:	e03d      	b.n	20be0 <__ieee754_atan2+0x160>
   20b64:	ebc7 030c 	rsb	r3, r7, ip
   20b68:	151b      	asrs	r3, r3, #20
   20b6a:	2b3c      	cmp	r3, #60
   20b6c:	dd02      	ble.n	20b74 <__ieee754_atan2+0xf4>
   20b6e:	a22a      	add	r2, pc, #168	(adr r2, 20c18 <__ieee754_atan2+0x198>)
   20b70:	ca0c      	ldmia	r2!, {r2, r3}
   20b72:	e015      	b.n	20ba0 <__ieee754_atan2+0x120>
   20b74:	9a07      	ldr	r2, [sp, #28]
   20b76:	f113 0f3c 	cmn.w	r3, #60	; 0x3c
   20b7a:	bfac      	ite	ge
   20b7c:	2300      	movge	r3, #0
   20b7e:	2301      	movlt	r3, #1
   20b80:	ea13 72d2 	ands.w	r2, r3, r2, lsr #31
   20b84:	d002      	beq.n	20b8c <__ieee754_atan2+0x10c>
   20b86:	2200      	movs	r2, #0
   20b88:	2300      	movs	r3, #0
   20b8a:	e009      	b.n	20ba0 <__ieee754_atan2+0x120>
   20b8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   20b90:	f7fb feb2 	bl	1c8f8 <__aeabi_ddiv>
   20b94:	f001 fa08 	bl	21fa8 <fabs>
   20b98:	f001 f85e 	bl	21c58 <atan>
   20b9c:	4602      	mov	r2, r0
   20b9e:	460b      	mov	r3, r1
   20ba0:	2c01      	cmp	r4, #1
   20ba2:	d003      	beq.n	20bac <__ieee754_atan2+0x12c>
   20ba4:	2c02      	cmp	r4, #2
   20ba6:	d006      	beq.n	20bb6 <__ieee754_atan2+0x136>
   20ba8:	b984      	cbnz	r4, 20bcc <__ieee754_atan2+0x14c>
   20baa:	e001      	b.n	20bb0 <__ieee754_atan2+0x130>
   20bac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   20bb0:	4610      	mov	r0, r2
   20bb2:	4619      	mov	r1, r3
   20bb4:	e014      	b.n	20be0 <__ieee754_atan2+0x160>
   20bb6:	4610      	mov	r0, r2
   20bb8:	4619      	mov	r1, r3
   20bba:	a21b      	add	r2, pc, #108	(adr r2, 20c28 <__ieee754_atan2+0x1a8>)
   20bbc:	ca0c      	ldmia	r2!, {r2, r3}
   20bbe:	f7fb fbbd 	bl	1c33c <__aeabi_dsub>
   20bc2:	4602      	mov	r2, r0
   20bc4:	460b      	mov	r3, r1
   20bc6:	a010      	add	r0, pc, #64	(adr r0, 20c08 <__ieee754_atan2+0x188>)
   20bc8:	c803      	ldmia	r0!, {r0, r1}
   20bca:	e007      	b.n	20bdc <__ieee754_atan2+0x15c>
   20bcc:	4610      	mov	r0, r2
   20bce:	4619      	mov	r1, r3
   20bd0:	a215      	add	r2, pc, #84	(adr r2, 20c28 <__ieee754_atan2+0x1a8>)
   20bd2:	ca0c      	ldmia	r2!, {r2, r3}
   20bd4:	f7fb fbb2 	bl	1c33c <__aeabi_dsub>
   20bd8:	a20b      	add	r2, pc, #44	(adr r2, 20c08 <__ieee754_atan2+0x188>)
   20bda:	ca0c      	ldmia	r2!, {r2, r3}
   20bdc:	f7fb fbae 	bl	1c33c <__aeabi_dsub>
   20be0:	b009      	add	sp, #36
   20be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20be4:	46c0      	nop			(mov r8, r8)
   20be6:	46c0      	nop			(mov r8, r8)
   20be8:	54442d18 	.word	0x54442d18
   20bec:	bfe921fb 	.word	0xbfe921fb
   20bf0:	54442d18 	.word	0x54442d18
   20bf4:	3fe921fb 	.word	0x3fe921fb
   20bf8:	7f3321d2 	.word	0x7f3321d2
   20bfc:	4002d97c 	.word	0x4002d97c
   20c00:	7f3321d2 	.word	0x7f3321d2
   20c04:	c002d97c 	.word	0xc002d97c
   20c08:	54442d18 	.word	0x54442d18
   20c0c:	400921fb 	.word	0x400921fb
   20c10:	54442d18 	.word	0x54442d18
   20c14:	c00921fb 	.word	0xc00921fb
   20c18:	54442d18 	.word	0x54442d18
   20c1c:	3ff921fb 	.word	0x3ff921fb
   20c20:	54442d18 	.word	0x54442d18
   20c24:	bff921fb 	.word	0xbff921fb
   20c28:	33145c07 	.word	0x33145c07
   20c2c:	3ca1a626 	.word	0x3ca1a626
   20c30:	7ff00000 	.word	0x7ff00000
   20c34:	46c046c0 	.word	0x46c046c0

00020c38 <__ieee754_rem_pio2>:
   20c38:	b5f0      	push	{r4, r5, r6, r7, lr}
   20c3a:	4b9b      	ldr	r3, [pc, #620]	(20ea8 <__ieee754_rem_pio2+0x270>)
   20c3c:	b093      	sub	sp, #76
   20c3e:	9206      	str	r2, [sp, #24]
   20c40:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   20c44:	429a      	cmp	r2, r3
   20c46:	910a      	str	r1, [sp, #40]
   20c48:	9209      	str	r2, [sp, #36]
   20c4a:	dc09      	bgt.n	20c60 <__ieee754_rem_pio2+0x28>
   20c4c:	9b06      	ldr	r3, [sp, #24]
   20c4e:	9e06      	ldr	r6, [sp, #24]
   20c50:	e883 0003 	stmia.w	r3, {r0, r1}
   20c54:	2200      	movs	r2, #0
   20c56:	2300      	movs	r3, #0
   20c58:	e9c6 2302 	strd	r2, r3, [r6, #8]
   20c5c:	2200      	movs	r2, #0
   20c5e:	e17f      	b.n	20f60 <__ieee754_rem_pio2+0x328>
   20c60:	4b92      	ldr	r3, [pc, #584]	(20eac <__ieee754_rem_pio2+0x274>)
   20c62:	9a09      	ldr	r2, [sp, #36]
   20c64:	429a      	cmp	r2, r3
   20c66:	dc7e      	bgt.n	20d66 <__ieee754_rem_pio2+0x12e>
   20c68:	9b0a      	ldr	r3, [sp, #40]
   20c6a:	2b00      	cmp	r3, #0
   20c6c:	dd3a      	ble.n	20ce4 <__ieee754_rem_pio2+0xac>
   20c6e:	a282      	add	r2, pc, #520	(adr r2, 20e78 <__ieee754_rem_pio2+0x240>)
   20c70:	ca0c      	ldmia	r2!, {r2, r3}
   20c72:	f7fb fb63 	bl	1c33c <__aeabi_dsub>
   20c76:	4b8e      	ldr	r3, [pc, #568]	(20eb0 <__ieee754_rem_pio2+0x278>)
   20c78:	9e09      	ldr	r6, [sp, #36]
   20c7a:	4604      	mov	r4, r0
   20c7c:	429e      	cmp	r6, r3
   20c7e:	460d      	mov	r5, r1
   20c80:	d015      	beq.n	20cae <__ieee754_rem_pio2+0x76>
   20c82:	a27f      	add	r2, pc, #508	(adr r2, 20e80 <__ieee754_rem_pio2+0x248>)
   20c84:	ca0c      	ldmia	r2!, {r2, r3}
   20c86:	f7fb fb59 	bl	1c33c <__aeabi_dsub>
   20c8a:	4602      	mov	r2, r0
   20c8c:	9806      	ldr	r0, [sp, #24]
   20c8e:	460b      	mov	r3, r1
   20c90:	e880 000c 	stmia.w	r0, {r2, r3}
   20c94:	4629      	mov	r1, r5
   20c96:	4620      	mov	r0, r4
   20c98:	f7fb fb50 	bl	1c33c <__aeabi_dsub>
   20c9c:	a278      	add	r2, pc, #480	(adr r2, 20e80 <__ieee754_rem_pio2+0x248>)
   20c9e:	ca0c      	ldmia	r2!, {r2, r3}
   20ca0:	f7fb fb4c 	bl	1c33c <__aeabi_dsub>
   20ca4:	9a06      	ldr	r2, [sp, #24]
   20ca6:	2301      	movs	r3, #1
   20ca8:	e9c2 0102 	strd	r0, r1, [r2, #8]
   20cac:	e168      	b.n	20f80 <__ieee754_rem_pio2+0x348>
   20cae:	a276      	add	r2, pc, #472	(adr r2, 20e88 <__ieee754_rem_pio2+0x250>)
   20cb0:	ca0c      	ldmia	r2!, {r2, r3}
   20cb2:	f7fb fb43 	bl	1c33c <__aeabi_dsub>
   20cb6:	a276      	add	r2, pc, #472	(adr r2, 20e90 <__ieee754_rem_pio2+0x258>)
   20cb8:	ca0c      	ldmia	r2!, {r2, r3}
   20cba:	4604      	mov	r4, r0
   20cbc:	460d      	mov	r5, r1
   20cbe:	f7fb fb3d 	bl	1c33c <__aeabi_dsub>
   20cc2:	9e06      	ldr	r6, [sp, #24]
   20cc4:	4602      	mov	r2, r0
   20cc6:	460b      	mov	r3, r1
   20cc8:	e886 000c 	stmia.w	r6, {r2, r3}
   20ccc:	4620      	mov	r0, r4
   20cce:	4629      	mov	r1, r5
   20cd0:	f7fb fb34 	bl	1c33c <__aeabi_dsub>
   20cd4:	a26e      	add	r2, pc, #440	(adr r2, 20e90 <__ieee754_rem_pio2+0x258>)
   20cd6:	ca0c      	ldmia	r2!, {r2, r3}
   20cd8:	f7fb fb30 	bl	1c33c <__aeabi_dsub>
   20cdc:	e9c6 0102 	strd	r0, r1, [r6, #8]
   20ce0:	2001      	movs	r0, #1
   20ce2:	e1a8      	b.n	21036 <__ieee754_rem_pio2+0x3fe>
   20ce4:	a264      	add	r2, pc, #400	(adr r2, 20e78 <__ieee754_rem_pio2+0x240>)
   20ce6:	ca0c      	ldmia	r2!, {r2, r3}
   20ce8:	f7fb fb2a 	bl	1c340 <__adddf3>
   20cec:	4b70      	ldr	r3, [pc, #448]	(20eb0 <__ieee754_rem_pio2+0x278>)
   20cee:	460d      	mov	r5, r1
   20cf0:	9909      	ldr	r1, [sp, #36]
   20cf2:	4604      	mov	r4, r0
   20cf4:	4299      	cmp	r1, r3
   20cf6:	d017      	beq.n	20d28 <__ieee754_rem_pio2+0xf0>
   20cf8:	a261      	add	r2, pc, #388	(adr r2, 20e80 <__ieee754_rem_pio2+0x248>)
   20cfa:	ca0c      	ldmia	r2!, {r2, r3}
   20cfc:	4620      	mov	r0, r4
   20cfe:	4629      	mov	r1, r5
   20d00:	f7fb fb1e 	bl	1c340 <__adddf3>
   20d04:	9e06      	ldr	r6, [sp, #24]
   20d06:	4602      	mov	r2, r0
   20d08:	460b      	mov	r3, r1
   20d0a:	e886 000c 	stmia.w	r6, {r2, r3}
   20d0e:	4620      	mov	r0, r4
   20d10:	4629      	mov	r1, r5
   20d12:	f7fb fb13 	bl	1c33c <__aeabi_dsub>
   20d16:	a25a      	add	r2, pc, #360	(adr r2, 20e80 <__ieee754_rem_pio2+0x248>)
   20d18:	ca0c      	ldmia	r2!, {r2, r3}
   20d1a:	f7fb fb11 	bl	1c340 <__adddf3>
   20d1e:	e9c6 0102 	strd	r0, r1, [r6, #8]
   20d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20d26:	e186      	b.n	21036 <__ieee754_rem_pio2+0x3fe>
   20d28:	4620      	mov	r0, r4
   20d2a:	4629      	mov	r1, r5
   20d2c:	a256      	add	r2, pc, #344	(adr r2, 20e88 <__ieee754_rem_pio2+0x250>)
   20d2e:	ca0c      	ldmia	r2!, {r2, r3}
   20d30:	f7fb fb06 	bl	1c340 <__adddf3>
   20d34:	a256      	add	r2, pc, #344	(adr r2, 20e90 <__ieee754_rem_pio2+0x258>)
   20d36:	ca0c      	ldmia	r2!, {r2, r3}
   20d38:	4604      	mov	r4, r0
   20d3a:	460d      	mov	r5, r1
   20d3c:	f7fb fb00 	bl	1c340 <__adddf3>
   20d40:	460b      	mov	r3, r1
   20d42:	9906      	ldr	r1, [sp, #24]
   20d44:	4602      	mov	r2, r0
   20d46:	e881 000c 	stmia.w	r1, {r2, r3}
   20d4a:	4620      	mov	r0, r4
   20d4c:	4629      	mov	r1, r5
   20d4e:	f7fb faf5 	bl	1c33c <__aeabi_dsub>
   20d52:	a24f      	add	r2, pc, #316	(adr r2, 20e90 <__ieee754_rem_pio2+0x258>)
   20d54:	ca0c      	ldmia	r2!, {r2, r3}
   20d56:	f7fb faf3 	bl	1c340 <__adddf3>
   20d5a:	9a06      	ldr	r2, [sp, #24]
   20d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20d60:	e9c2 0102 	strd	r0, r1, [r2, #8]
   20d64:	e10c      	b.n	20f80 <__ieee754_rem_pio2+0x348>
   20d66:	4b53      	ldr	r3, [pc, #332]	(20eb4 <__ieee754_rem_pio2+0x27c>)
   20d68:	9e09      	ldr	r6, [sp, #36]
   20d6a:	429e      	cmp	r6, r3
   20d6c:	f300 80fa 	bgt.w	20f64 <__ieee754_rem_pio2+0x32c>
   20d70:	f001 f91a 	bl	21fa8 <fabs>
   20d74:	a248      	add	r2, pc, #288	(adr r2, 20e98 <__ieee754_rem_pio2+0x260>)
   20d76:	ca0c      	ldmia	r2!, {r2, r3}
   20d78:	4604      	mov	r4, r0
   20d7a:	460d      	mov	r5, r1
   20d7c:	f7fb fc92 	bl	1c6a4 <__aeabi_dmul>
   20d80:	2200      	movs	r2, #0
   20d82:	4b4d      	ldr	r3, [pc, #308]	(20eb8 <__ieee754_rem_pio2+0x280>)
   20d84:	f7fb fadc 	bl	1c340 <__adddf3>
   20d88:	f7fb ff24 	bl	1cbd4 <__aeabi_d2iz>
   20d8c:	9008      	str	r0, [sp, #32]
   20d8e:	f7fb fc23 	bl	1c5d8 <__aeabi_i2d>
   20d92:	a243      	add	r2, pc, #268	(adr r2, 20ea0 <__ieee754_rem_pio2+0x268>)
   20d94:	ca0c      	ldmia	r2!, {r2, r3}
   20d96:	e9cd 0104 	strd	r0, r1, [sp, #16]
   20d9a:	f7fb fc83 	bl	1c6a4 <__aeabi_dmul>
   20d9e:	4602      	mov	r2, r0
   20da0:	460b      	mov	r3, r1
   20da2:	4620      	mov	r0, r4
   20da4:	4629      	mov	r1, r5
   20da6:	f7fb facb 	bl	1c340 <__adddf3>
   20daa:	a235      	add	r2, pc, #212	(adr r2, 20e80 <__ieee754_rem_pio2+0x248>)
   20dac:	ca0c      	ldmia	r2!, {r2, r3}
   20dae:	4606      	mov	r6, r0
   20db0:	460f      	mov	r7, r1
   20db2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   20db6:	f7fb fc75 	bl	1c6a4 <__aeabi_dmul>
   20dba:	4604      	mov	r4, r0
   20dbc:	9808      	ldr	r0, [sp, #32]
   20dbe:	460d      	mov	r5, r1
   20dc0:	281f      	cmp	r0, #31
   20dc2:	dc07      	bgt.n	20dd4 <__ieee754_rem_pio2+0x19c>
   20dc4:	4a3d      	ldr	r2, [pc, #244]	(20ebc <__ieee754_rem_pio2+0x284>)
   20dc6:	1e43      	subs	r3, r0, #1
   20dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   20dcc:	9909      	ldr	r1, [sp, #36]
   20dce:	4299      	cmp	r1, r3
   20dd0:	f040 809e 	bne.w	20f10 <__ieee754_rem_pio2+0x2d8>
   20dd4:	462b      	mov	r3, r5
   20dd6:	4630      	mov	r0, r6
   20dd8:	4639      	mov	r1, r7
   20dda:	4622      	mov	r2, r4
   20ddc:	f7fb faae 	bl	1c33c <__aeabi_dsub>
   20de0:	9b06      	ldr	r3, [sp, #24]
   20de2:	e883 0003 	stmia.w	r3, {r0, r1}
   20de6:	0d0b      	lsrs	r3, r1, #20
   20de8:	9809      	ldr	r0, [sp, #36]
   20dea:	055b      	lsls	r3, r3, #21
   20dec:	1500      	asrs	r0, r0, #20
   20dee:	0d5b      	lsrs	r3, r3, #21
   20df0:	ebc3 0300 	rsb	r3, r3, r0
   20df4:	2b10      	cmp	r3, #16
   20df6:	9007      	str	r0, [sp, #28]
   20df8:	f340 8093 	ble.w	20f22 <__ieee754_rem_pio2+0x2ea>
   20dfc:	a222      	add	r2, pc, #136	(adr r2, 20e88 <__ieee754_rem_pio2+0x250>)
   20dfe:	ca0c      	ldmia	r2!, {r2, r3}
   20e00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   20e04:	f7fb fc4e 	bl	1c6a4 <__aeabi_dmul>
   20e08:	4604      	mov	r4, r0
   20e0a:	460d      	mov	r5, r1
   20e0c:	4622      	mov	r2, r4
   20e0e:	462b      	mov	r3, r5
   20e10:	4630      	mov	r0, r6
   20e12:	4639      	mov	r1, r7
   20e14:	f7fb fa92 	bl	1c33c <__aeabi_dsub>
   20e18:	e9cd 0102 	strd	r0, r1, [sp, #8]
   20e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20e20:	4630      	mov	r0, r6
   20e22:	4639      	mov	r1, r7
   20e24:	f7fb fa8a 	bl	1c33c <__aeabi_dsub>
   20e28:	4622      	mov	r2, r4
   20e2a:	462b      	mov	r3, r5
   20e2c:	f7fb fa86 	bl	1c33c <__aeabi_dsub>
   20e30:	a217      	add	r2, pc, #92	(adr r2, 20e90 <__ieee754_rem_pio2+0x258>)
   20e32:	ca0c      	ldmia	r2!, {r2, r3}
   20e34:	4604      	mov	r4, r0
   20e36:	460d      	mov	r5, r1
   20e38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   20e3c:	f7fb fc32 	bl	1c6a4 <__aeabi_dmul>
   20e40:	4622      	mov	r2, r4
   20e42:	462b      	mov	r3, r5
   20e44:	f7fb fa7a 	bl	1c33c <__aeabi_dsub>
   20e48:	4604      	mov	r4, r0
   20e4a:	460d      	mov	r5, r1
   20e4c:	4622      	mov	r2, r4
   20e4e:	462b      	mov	r3, r5
   20e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   20e54:	f7fb fa72 	bl	1c33c <__aeabi_dsub>
   20e58:	0d0b      	lsrs	r3, r1, #20
   20e5a:	055b      	lsls	r3, r3, #21
   20e5c:	9e07      	ldr	r6, [sp, #28]
   20e5e:	0d5b      	lsrs	r3, r3, #21
   20e60:	9a06      	ldr	r2, [sp, #24]
   20e62:	ebc3 0306 	rsb	r3, r3, r6
   20e66:	2b31      	cmp	r3, #49
   20e68:	e882 0003 	stmia.w	r2, {r0, r1}
   20e6c:	dc28      	bgt.n	20ec0 <__ieee754_rem_pio2+0x288>
   20e6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   20e72:	e056      	b.n	20f22 <__ieee754_rem_pio2+0x2ea>
   20e74:	46c0      	nop			(mov r8, r8)
   20e76:	46c0      	nop			(mov r8, r8)
   20e78:	54400000 	.word	0x54400000
   20e7c:	3ff921fb 	.word	0x3ff921fb
   20e80:	1a626331 	.word	0x1a626331
   20e84:	3dd0b461 	.word	0x3dd0b461
   20e88:	1a600000 	.word	0x1a600000
   20e8c:	3dd0b461 	.word	0x3dd0b461
   20e90:	2e037073 	.word	0x2e037073
   20e94:	3ba3198a 	.word	0x3ba3198a
   20e98:	6dc9c883 	.word	0x6dc9c883
   20e9c:	3fe45f30 	.word	0x3fe45f30
   20ea0:	54400000 	.word	0x54400000
   20ea4:	bff921fb 	.word	0xbff921fb
   20ea8:	3fe921fb 	.word	0x3fe921fb
   20eac:	4002d97b 	.word	0x4002d97b
   20eb0:	3ff921fb 	.word	0x3ff921fb
   20eb4:	413921fb 	.word	0x413921fb
   20eb8:	3fe00000 	.word	0x3fe00000
   20ebc:	00025660 	.word	0x00025660
   20ec0:	a25f      	add	r2, pc, #380	(adr r2, 21040 <__ieee754_rem_pio2+0x408>)
   20ec2:	ca0c      	ldmia	r2!, {r2, r3}
   20ec4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   20ec8:	f7fb fbec 	bl	1c6a4 <__aeabi_dmul>
   20ecc:	4604      	mov	r4, r0
   20ece:	460d      	mov	r5, r1
   20ed0:	4622      	mov	r2, r4
   20ed2:	462b      	mov	r3, r5
   20ed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   20ed8:	f7fb fa30 	bl	1c33c <__aeabi_dsub>
   20edc:	4606      	mov	r6, r0
   20ede:	460f      	mov	r7, r1
   20ee0:	4632      	mov	r2, r6
   20ee2:	463b      	mov	r3, r7
   20ee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   20ee8:	f7fb fa28 	bl	1c33c <__aeabi_dsub>
   20eec:	4622      	mov	r2, r4
   20eee:	462b      	mov	r3, r5
   20ef0:	f7fb fa24 	bl	1c33c <__aeabi_dsub>
   20ef4:	a254      	add	r2, pc, #336	(adr r2, 21048 <__ieee754_rem_pio2+0x410>)
   20ef6:	ca0c      	ldmia	r2!, {r2, r3}
   20ef8:	4604      	mov	r4, r0
   20efa:	460d      	mov	r5, r1
   20efc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   20f00:	f7fb fbd0 	bl	1c6a4 <__aeabi_dmul>
   20f04:	4622      	mov	r2, r4
   20f06:	462b      	mov	r3, r5
   20f08:	f7fb fa18 	bl	1c33c <__aeabi_dsub>
   20f0c:	4604      	mov	r4, r0
   20f0e:	460d      	mov	r5, r1
   20f10:	4622      	mov	r2, r4
   20f12:	4630      	mov	r0, r6
   20f14:	4639      	mov	r1, r7
   20f16:	462b      	mov	r3, r5
   20f18:	f7fb fa10 	bl	1c33c <__aeabi_dsub>
   20f1c:	9a06      	ldr	r2, [sp, #24]
   20f1e:	e882 0003 	stmia.w	r2, {r0, r1}
   20f22:	9b06      	ldr	r3, [sp, #24]
   20f24:	4630      	mov	r0, r6
   20f26:	9e06      	ldr	r6, [sp, #24]
   20f28:	3308      	adds	r3, #8
   20f2a:	930b      	str	r3, [sp, #44]
   20f2c:	4639      	mov	r1, r7
   20f2e:	e896 000c 	ldmia.w	r6, {r2, r3}
   20f32:	f7fb fa03 	bl	1c33c <__aeabi_dsub>
   20f36:	4622      	mov	r2, r4
   20f38:	462b      	mov	r3, r5
   20f3a:	f7fb f9ff 	bl	1c33c <__aeabi_dsub>
   20f3e:	e9c6 0102 	strd	r0, r1, [r6, #8]
   20f42:	980a      	ldr	r0, [sp, #40]
   20f44:	2800      	cmp	r0, #0
   20f46:	da77      	bge.n	21038 <__ieee754_rem_pio2+0x400>
   20f48:	6873      	ldr	r3, [r6, #4]
   20f4a:	990b      	ldr	r1, [sp, #44]
   20f4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   20f50:	6073      	str	r3, [r6, #4]
   20f52:	684b      	ldr	r3, [r1, #4]
   20f54:	9a08      	ldr	r2, [sp, #32]
   20f56:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   20f5a:	604b      	str	r3, [r1, #4]
   20f5c:	f1c2 0200 	rsb	r2, r2, #0	; 0x0
   20f60:	9208      	str	r2, [sp, #32]
   20f62:	e069      	b.n	21038 <__ieee754_rem_pio2+0x400>
   20f64:	4b3a      	ldr	r3, [pc, #232]	(21050 <__ieee754_rem_pio2+0x418>)
   20f66:	9e09      	ldr	r6, [sp, #36]
   20f68:	429e      	cmp	r6, r3
   20f6a:	dd0b      	ble.n	20f84 <__ieee754_rem_pio2+0x34c>
   20f6c:	4602      	mov	r2, r0
   20f6e:	460b      	mov	r3, r1
   20f70:	f7fb f9e4 	bl	1c33c <__aeabi_dsub>
   20f74:	9a06      	ldr	r2, [sp, #24]
   20f76:	2300      	movs	r3, #0
   20f78:	e9c2 0102 	strd	r0, r1, [r2, #8]
   20f7c:	e882 0003 	stmia.w	r2, {r0, r1}
   20f80:	9308      	str	r3, [sp, #32]
   20f82:	e059      	b.n	21038 <__ieee754_rem_pio2+0x400>
   20f84:	9e09      	ldr	r6, [sp, #36]
   20f86:	4602      	mov	r2, r0
   20f88:	1531      	asrs	r1, r6, #20
   20f8a:	f5a1 6682 	sub.w	r6, r1, #1040	; 0x410
   20f8e:	9809      	ldr	r0, [sp, #36]
   20f90:	3e06      	subs	r6, #6
   20f92:	eba0 5306 	sub.w	r3, r0, r6, lsl #20
   20f96:	4619      	mov	r1, r3
   20f98:	4610      	mov	r0, r2
   20f9a:	4614      	mov	r4, r2
   20f9c:	461d      	mov	r5, r3
   20f9e:	f7fb fe19 	bl	1cbd4 <__aeabi_d2iz>
   20fa2:	f7fb fb19 	bl	1c5d8 <__aeabi_i2d>
   20fa6:	4602      	mov	r2, r0
   20fa8:	460b      	mov	r3, r1
   20faa:	4620      	mov	r0, r4
   20fac:	4629      	mov	r1, r5
   20fae:	e9cd 230c 	strd	r2, r3, [sp, #48]
   20fb2:	f7fb f9c3 	bl	1c33c <__aeabi_dsub>
   20fb6:	2200      	movs	r2, #0
   20fb8:	4b26      	ldr	r3, [pc, #152]	(21054 <__ieee754_rem_pio2+0x41c>)
   20fba:	f7fb fb73 	bl	1c6a4 <__aeabi_dmul>
   20fbe:	460d      	mov	r5, r1
   20fc0:	4604      	mov	r4, r0
   20fc2:	f7fb fe07 	bl	1cbd4 <__aeabi_d2iz>
   20fc6:	f7fb fb07 	bl	1c5d8 <__aeabi_i2d>
   20fca:	4602      	mov	r2, r0
   20fcc:	460b      	mov	r3, r1
   20fce:	4620      	mov	r0, r4
   20fd0:	4629      	mov	r1, r5
   20fd2:	e9cd 230e 	strd	r2, r3, [sp, #56]
   20fd6:	f7fb f9b1 	bl	1c33c <__aeabi_dsub>
   20fda:	2200      	movs	r2, #0
   20fdc:	4b1d      	ldr	r3, [pc, #116]	(21054 <__ieee754_rem_pio2+0x41c>)
   20fde:	f7fb fb61 	bl	1c6a4 <__aeabi_dmul>
   20fe2:	e9cd 0110 	strd	r0, r1, [sp, #64]
   20fe6:	ad0c      	add	r5, sp, #48
   20fe8:	2403      	movs	r4, #3
   20fea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   20fee:	2200      	movs	r2, #0
   20ff0:	2300      	movs	r3, #0
   20ff2:	4627      	mov	r7, r4
   20ff4:	3d08      	subs	r5, #8
   20ff6:	3c01      	subs	r4, #1
   20ff8:	f7fb fdba 	bl	1cb70 <__aeabi_dcmpeq>
   20ffc:	2800      	cmp	r0, #0
   20ffe:	d1f4      	bne.n	20fea <__ieee754_rem_pio2+0x3b2>
   21000:	2302      	movs	r3, #2
   21002:	9300      	str	r3, [sp, #0]
   21004:	4b14      	ldr	r3, [pc, #80]	(21058 <__ieee754_rem_pio2+0x420>)
   21006:	9906      	ldr	r1, [sp, #24]
   21008:	9301      	str	r3, [sp, #4]
   2100a:	a80c      	add	r0, sp, #48
   2100c:	4632      	mov	r2, r6
   2100e:	463b      	mov	r3, r7
   21010:	f000 f9da 	bl	213c8 <__kernel_rem_pio2>
   21014:	990a      	ldr	r1, [sp, #40]
   21016:	9008      	str	r0, [sp, #32]
   21018:	2900      	cmp	r1, #0
   2101a:	da0d      	bge.n	21038 <__ieee754_rem_pio2+0x400>
   2101c:	9a06      	ldr	r2, [sp, #24]
   2101e:	f1c0 0000 	rsb	r0, r0, #0	; 0x0
   21022:	6853      	ldr	r3, [r2, #4]
   21024:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   21028:	6053      	str	r3, [r2, #4]
   2102a:	f102 0208 	add.w	r2, r2, #8	; 0x8
   2102e:	6853      	ldr	r3, [r2, #4]
   21030:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   21034:	6053      	str	r3, [r2, #4]
   21036:	9008      	str	r0, [sp, #32]
   21038:	9808      	ldr	r0, [sp, #32]
   2103a:	b013      	add	sp, #76
   2103c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2103e:	46c0      	nop			(mov r8, r8)
   21040:	2e000000 	.word	0x2e000000
   21044:	3ba3198a 	.word	0x3ba3198a
   21048:	252049c1 	.word	0x252049c1
   2104c:	397b839a 	.word	0x397b839a
   21050:	7fefffff 	.word	0x7fefffff
   21054:	41700000 	.word	0x41700000
   21058:	000256e0 	.word	0x000256e0
   2105c:	46c046c0 	.word	0x46c046c0

00021060 <__ieee754_sqrt>:
   21060:	b5f0      	push	{r4, r5, r6, r7, lr}
   21062:	4b67      	ldr	r3, [pc, #412]	(21200 <__ieee754_sqrt+0x1a0>)
   21064:	4a66      	ldr	r2, [pc, #408]	(21200 <__ieee754_sqrt+0x1a0>)
   21066:	ea01 0303 	and.w	r3, r1, r3
   2106a:	4604      	mov	r4, r0
   2106c:	4293      	cmp	r3, r2
   2106e:	b083      	sub	sp, #12
   21070:	460d      	mov	r5, r1
   21072:	4608      	mov	r0, r1
   21074:	46a4      	mov	ip, r4
   21076:	d10b      	bne.n	21090 <__ieee754_sqrt+0x30>
   21078:	4622      	mov	r2, r4
   2107a:	462b      	mov	r3, r5
   2107c:	4620      	mov	r0, r4
   2107e:	f7fb fb11 	bl	1c6a4 <__aeabi_dmul>
   21082:	4602      	mov	r2, r0
   21084:	460b      	mov	r3, r1
   21086:	4620      	mov	r0, r4
   21088:	4629      	mov	r1, r5
   2108a:	f7fb f959 	bl	1c340 <__adddf3>
   2108e:	e010      	b.n	210b2 <__ieee754_sqrt+0x52>
   21090:	2900      	cmp	r1, #0
   21092:	dc11      	bgt.n	210b8 <__ieee754_sqrt+0x58>
   21094:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   21098:	4323      	orrs	r3, r4
   2109a:	f000 80ad 	beq.w	211f8 <__ieee754_sqrt+0x198>
   2109e:	b159      	cbz	r1, 210b8 <__ieee754_sqrt+0x58>
   210a0:	4622      	mov	r2, r4
   210a2:	460b      	mov	r3, r1
   210a4:	4620      	mov	r0, r4
   210a6:	f7fb f949 	bl	1c33c <__aeabi_dsub>
   210aa:	4602      	mov	r2, r0
   210ac:	460b      	mov	r3, r1
   210ae:	f7fb fc23 	bl	1c8f8 <__aeabi_ddiv>
   210b2:	4604      	mov	r4, r0
   210b4:	460d      	mov	r5, r1
   210b6:	e09f      	b.n	211f8 <__ieee754_sqrt+0x198>
   210b8:	1501      	asrs	r1, r0, #20
   210ba:	d005      	beq.n	210c8 <__ieee754_sqrt+0x68>
   210bc:	e018      	b.n	210f0 <__ieee754_sqrt+0x90>
   210be:	ea4f 20dc 	mov.w	r0, ip, lsr #11
   210c2:	3915      	subs	r1, #21
   210c4:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   210c8:	2800      	cmp	r0, #0
   210ca:	d0f8      	beq.n	210be <__ieee754_sqrt+0x5e>
   210cc:	2200      	movs	r2, #0
   210ce:	e001      	b.n	210d4 <__ieee754_sqrt+0x74>
   210d0:	0040      	lsls	r0, r0, #1
   210d2:	3201      	adds	r2, #1
   210d4:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
   210d8:	d0fa      	beq.n	210d0 <__ieee754_sqrt+0x70>
   210da:	1c4b      	adds	r3, r1, #1
   210dc:	ebc2 0103 	rsb	r1, r2, r3
   210e0:	f1c2 0320 	rsb	r3, r2, #32	; 0x20
   210e4:	fa2c f303 	lsr.w	r3, ip, r3
   210e8:	fa0c fc02 	lsl.w	ip, ip, r2
   210ec:	ea43 0000 	orr.w	r0, r3, r0
   210f0:	f5a1 717e 	sub.w	r1, r1, #1016	; 0x3f8
   210f4:	1fcb      	subs	r3, r1, #7
   210f6:	9301      	str	r3, [sp, #4]
   210f8:	9c01      	ldr	r4, [sp, #4]
   210fa:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   210fe:	f014 0f01 	tst.w	r4, #1	; 0x1
   21102:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   21106:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
   2110a:	bf1e      	ittt	ne
   2110c:	ea4f 73dc 	movne.w	r3, ip, lsr #31
   21110:	ea4f 0c4c 	movne.w	ip, ip, lsl #1
   21114:	eb03 0242 	addne.w	r2, r3, r2, lsl #1
   21118:	ea4f 73dc 	mov.w	r3, ip, lsr #31
   2111c:	2500      	movs	r5, #0
   2111e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   21122:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   21126:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   2112a:	9500      	str	r5, [sp, #0]
   2112c:	2400      	movs	r4, #0
   2112e:	eb05 0300 	add.w	r3, r5, r0
   21132:	4293      	cmp	r3, r2
   21134:	dc05      	bgt.n	21142 <__ieee754_sqrt+0xe2>
   21136:	eb03 0500 	add.w	r5, r3, r0
   2113a:	1ad2      	subs	r2, r2, r3
   2113c:	9b00      	ldr	r3, [sp, #0]
   2113e:	181b      	adds	r3, r3, r0
   21140:	9300      	str	r3, [sp, #0]
   21142:	3401      	adds	r4, #1
   21144:	ea4f 73dc 	mov.w	r3, ip, lsr #31
   21148:	0840      	lsrs	r0, r0, #1
   2114a:	2c16      	cmp	r4, #22
   2114c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   21150:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   21154:	d1eb      	bne.n	2112e <__ieee754_sqrt+0xce>
   21156:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   2115a:	2700      	movs	r7, #0
   2115c:	2000      	movs	r0, #0
   2115e:	2600      	movs	r6, #0
   21160:	4295      	cmp	r5, r2
   21162:	eb01 0407 	add.w	r4, r1, r7
   21166:	db08      	blt.n	2117a <__ieee754_sqrt+0x11a>
   21168:	bf14      	ite	ne
   2116a:	2300      	movne	r3, #0
   2116c:	2301      	moveq	r3, #1
   2116e:	4564      	cmp	r4, ip
   21170:	bf8c      	ite	hi
   21172:	2300      	movhi	r3, #0
   21174:	f003 0301 	andls.w	r3, r3, #1	; 0x1
   21178:	b19b      	cbz	r3, 211a2 <__ieee754_sqrt+0x142>
   2117a:	f004 4300 	and.w	r3, r4, #2147483648	; 0x80000000
   2117e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   21182:	eb04 0701 	add.w	r7, r4, r1
   21186:	d103      	bne.n	21190 <__ieee754_sqrt+0x130>
   21188:	421f      	tst	r7, r3
   2118a:	d101      	bne.n	21190 <__ieee754_sqrt+0x130>
   2118c:	1c6b      	adds	r3, r5, #1
   2118e:	e000      	b.n	21192 <__ieee754_sqrt+0x132>
   21190:	462b      	mov	r3, r5
   21192:	1b52      	subs	r2, r2, r5
   21194:	45a4      	cmp	ip, r4
   21196:	bf38      	it	cc
   21198:	3a01      	subcc	r2, #1
   2119a:	ebc4 0c0c 	rsb	ip, r4, ip
   2119e:	1840      	adds	r0, r0, r1
   211a0:	461d      	mov	r5, r3
   211a2:	3601      	adds	r6, #1
   211a4:	ea4f 73dc 	mov.w	r3, ip, lsr #31
   211a8:	0849      	lsrs	r1, r1, #1
   211aa:	2e20      	cmp	r6, #32
   211ac:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   211b0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   211b4:	d1d4      	bne.n	21160 <__ieee754_sqrt+0x100>
   211b6:	ea52 020c 	orrs.w	r2, r2, ip
   211ba:	d00a      	beq.n	211d2 <__ieee754_sqrt+0x172>
   211bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   211c0:	bf1c      	itt	ne
   211c2:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   211c6:	1818      	addne	r0, r3, r0
   211c8:	d103      	bne.n	211d2 <__ieee754_sqrt+0x172>
   211ca:	9c00      	ldr	r4, [sp, #0]
   211cc:	2000      	movs	r0, #0
   211ce:	3401      	adds	r4, #1
   211d0:	9400      	str	r4, [sp, #0]
   211d2:	9b00      	ldr	r3, [sp, #0]
   211d4:	9c01      	ldr	r4, [sp, #4]
   211d6:	0840      	lsrs	r0, r0, #1
   211d8:	f013 0f01 	tst.w	r3, #1	; 0x1
   211dc:	bf18      	it	ne
   211de:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   211e2:	1061      	asrs	r1, r4, #1
   211e4:	0509      	lsls	r1, r1, #20
   211e6:	9c00      	ldr	r4, [sp, #0]
   211e8:	f101 517e 	add.w	r1, r1, #1065353216	; 0x3f800000
   211ec:	f501 01c0 	add.w	r1, r1, #6291456	; 0x600000
   211f0:	eb01 0364 	add.w	r3, r1, r4, asr #1
   211f4:	461d      	mov	r5, r3
   211f6:	4604      	mov	r4, r0
   211f8:	4620      	mov	r0, r4
   211fa:	4629      	mov	r1, r5
   211fc:	b003      	add	sp, #12
   211fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21200:	7ff00000 	.word	0x7ff00000
   21204:	00000000 	.word	0x00000000

00021208 <__kernel_cos>:
   21208:	b5f0      	push	{r4, r5, r6, r7, lr}
   2120a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   2120e:	b08d      	sub	sp, #52
   21210:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
   21214:	e9cd 0108 	strd	r0, r1, [sp, #32]
   21218:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2121c:	da05      	bge.n	2122a <__kernel_cos+0x22>
   2121e:	f7fb fcd9 	bl	1cbd4 <__aeabi_d2iz>
   21222:	b910      	cbnz	r0, 2122a <__kernel_cos+0x22>
   21224:	2000      	movs	r0, #0
   21226:	4962      	ldr	r1, [pc, #392]	(213b0 <__kernel_cos+0x1a8>)
   21228:	e0a8      	b.n	2137c <__kernel_cos+0x174>
   2122a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2122e:	4602      	mov	r2, r0
   21230:	460b      	mov	r3, r1
   21232:	f7fb fa37 	bl	1c6a4 <__aeabi_dmul>
   21236:	a252      	add	r2, pc, #328	(adr r2, 21380 <__kernel_cos+0x178>)
   21238:	ca0c      	ldmia	r2!, {r2, r3}
   2123a:	4606      	mov	r6, r0
   2123c:	460f      	mov	r7, r1
   2123e:	f7fb fa31 	bl	1c6a4 <__aeabi_dmul>
   21242:	a251      	add	r2, pc, #324	(adr r2, 21388 <__kernel_cos+0x180>)
   21244:	ca0c      	ldmia	r2!, {r2, r3}
   21246:	f7fb f87b 	bl	1c340 <__adddf3>
   2124a:	4602      	mov	r2, r0
   2124c:	460b      	mov	r3, r1
   2124e:	4630      	mov	r0, r6
   21250:	4639      	mov	r1, r7
   21252:	f7fb fa27 	bl	1c6a4 <__aeabi_dmul>
   21256:	a24e      	add	r2, pc, #312	(adr r2, 21390 <__kernel_cos+0x188>)
   21258:	ca0c      	ldmia	r2!, {r2, r3}
   2125a:	f7fb f86f 	bl	1c33c <__aeabi_dsub>
   2125e:	4602      	mov	r2, r0
   21260:	460b      	mov	r3, r1
   21262:	4630      	mov	r0, r6
   21264:	4639      	mov	r1, r7
   21266:	f7fb fa1d 	bl	1c6a4 <__aeabi_dmul>
   2126a:	a24b      	add	r2, pc, #300	(adr r2, 21398 <__kernel_cos+0x190>)
   2126c:	ca0c      	ldmia	r2!, {r2, r3}
   2126e:	f7fb f867 	bl	1c340 <__adddf3>
   21272:	4602      	mov	r2, r0
   21274:	460b      	mov	r3, r1
   21276:	4630      	mov	r0, r6
   21278:	4639      	mov	r1, r7
   2127a:	f7fb fa13 	bl	1c6a4 <__aeabi_dmul>
   2127e:	a248      	add	r2, pc, #288	(adr r2, 213a0 <__kernel_cos+0x198>)
   21280:	ca0c      	ldmia	r2!, {r2, r3}
   21282:	f7fb f85b 	bl	1c33c <__aeabi_dsub>
   21286:	4602      	mov	r2, r0
   21288:	460b      	mov	r3, r1
   2128a:	4630      	mov	r0, r6
   2128c:	4639      	mov	r1, r7
   2128e:	f7fb fa09 	bl	1c6a4 <__aeabi_dmul>
   21292:	a245      	add	r2, pc, #276	(adr r2, 213a8 <__kernel_cos+0x1a0>)
   21294:	ca0c      	ldmia	r2!, {r2, r3}
   21296:	f7fb f853 	bl	1c340 <__adddf3>
   2129a:	460b      	mov	r3, r1
   2129c:	4602      	mov	r2, r0
   2129e:	4639      	mov	r1, r7
   212a0:	4630      	mov	r0, r6
   212a2:	f7fb f9ff 	bl	1c6a4 <__aeabi_dmul>
   212a6:	4b43      	ldr	r3, [pc, #268]	(213b4 <__kernel_cos+0x1ac>)
   212a8:	e9cd 010a 	strd	r0, r1, [sp, #40]
   212ac:	429c      	cmp	r4, r3
   212ae:	dc26      	bgt.n	212fe <__kernel_cos+0xf6>
   212b0:	2200      	movs	r2, #0
   212b2:	4b41      	ldr	r3, [pc, #260]	(213b8 <__kernel_cos+0x1b0>)
   212b4:	4630      	mov	r0, r6
   212b6:	4639      	mov	r1, r7
   212b8:	f7fb f9f4 	bl	1c6a4 <__aeabi_dmul>
   212bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]
   212c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   212c4:	4630      	mov	r0, r6
   212c6:	4639      	mov	r1, r7
   212c8:	f7fb f9ec 	bl	1c6a4 <__aeabi_dmul>
   212cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   212d0:	4604      	mov	r4, r0
   212d2:	460d      	mov	r5, r1
   212d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   212d8:	f7fb f9e4 	bl	1c6a4 <__aeabi_dmul>
   212dc:	4602      	mov	r2, r0
   212de:	460b      	mov	r3, r1
   212e0:	4620      	mov	r0, r4
   212e2:	4629      	mov	r1, r5
   212e4:	f7fb f82a 	bl	1c33c <__aeabi_dsub>
   212e8:	4602      	mov	r2, r0
   212ea:	460b      	mov	r3, r1
   212ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   212f0:	f7fb f824 	bl	1c33c <__aeabi_dsub>
   212f4:	4602      	mov	r2, r0
   212f6:	460b      	mov	r3, r1
   212f8:	2000      	movs	r0, #0
   212fa:	492d      	ldr	r1, [pc, #180]	(213b0 <__kernel_cos+0x1a8>)
   212fc:	e03c      	b.n	21378 <__kernel_cos+0x170>
   212fe:	4b2f      	ldr	r3, [pc, #188]	(213bc <__kernel_cos+0x1b4>)
   21300:	429c      	cmp	r4, r3
   21302:	dd02      	ble.n	2130a <__kernel_cos+0x102>
   21304:	2400      	movs	r4, #0
   21306:	4d2e      	ldr	r5, [pc, #184]	(213c0 <__kernel_cos+0x1b8>)
   21308:	e004      	b.n	21314 <__kernel_cos+0x10c>
   2130a:	f5a4 1300 	sub.w	r3, r4, #2097152	; 0x200000
   2130e:	2200      	movs	r2, #0
   21310:	4614      	mov	r4, r2
   21312:	461d      	mov	r5, r3
   21314:	4622      	mov	r2, r4
   21316:	462b      	mov	r3, r5
   21318:	2000      	movs	r0, #0
   2131a:	4925      	ldr	r1, [pc, #148]	(213b0 <__kernel_cos+0x1a8>)
   2131c:	f7fb f80e 	bl	1c33c <__aeabi_dsub>
   21320:	2200      	movs	r2, #0
   21322:	e9cd 0102 	strd	r0, r1, [sp, #8]
   21326:	4b24      	ldr	r3, [pc, #144]	(213b8 <__kernel_cos+0x1b0>)
   21328:	4630      	mov	r0, r6
   2132a:	4639      	mov	r1, r7
   2132c:	f7fb f9ba 	bl	1c6a4 <__aeabi_dmul>
   21330:	4622      	mov	r2, r4
   21332:	462b      	mov	r3, r5
   21334:	f7fb f802 	bl	1c33c <__aeabi_dsub>
   21338:	e9dd 230a 	ldrd	r2, r3, [sp, #40]
   2133c:	e88d 0003 	stmia.w	sp, {r0, r1}
   21340:	4630      	mov	r0, r6
   21342:	4639      	mov	r1, r7
   21344:	f7fb f9ae 	bl	1c6a4 <__aeabi_dmul>
   21348:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2134c:	4604      	mov	r4, r0
   2134e:	460d      	mov	r5, r1
   21350:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   21354:	f7fb f9a6 	bl	1c6a4 <__aeabi_dmul>
   21358:	4602      	mov	r2, r0
   2135a:	460b      	mov	r3, r1
   2135c:	4620      	mov	r0, r4
   2135e:	4629      	mov	r1, r5
   21360:	f7fa ffec 	bl	1c33c <__aeabi_dsub>
   21364:	4602      	mov	r2, r0
   21366:	460b      	mov	r3, r1
   21368:	e89d 0003 	ldmia.w	sp, {r0, r1}
   2136c:	f7fa ffe6 	bl	1c33c <__aeabi_dsub>
   21370:	4602      	mov	r2, r0
   21372:	460b      	mov	r3, r1
   21374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   21378:	f7fa ffe0 	bl	1c33c <__aeabi_dsub>
   2137c:	b00d      	add	sp, #52
   2137e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21380:	be8838d4 	.word	0xbe8838d4
   21384:	bda8fae9 	.word	0xbda8fae9
   21388:	bdb4b1c4 	.word	0xbdb4b1c4
   2138c:	3e21ee9e 	.word	0x3e21ee9e
   21390:	809c52ad 	.word	0x809c52ad
   21394:	3e927e4f 	.word	0x3e927e4f
   21398:	19cb1590 	.word	0x19cb1590
   2139c:	3efa01a0 	.word	0x3efa01a0
   213a0:	16c15177 	.word	0x16c15177
   213a4:	3f56c16c 	.word	0x3f56c16c
   213a8:	5555554c 	.word	0x5555554c
   213ac:	3fa55555 	.word	0x3fa55555
   213b0:	3ff00000 	.word	0x3ff00000
   213b4:	3fd33332 	.word	0x3fd33332
   213b8:	3fe00000 	.word	0x3fe00000
   213bc:	3fe90000 	.word	0x3fe90000
   213c0:	3fd20000 	.word	0x3fd20000
   213c4:	46c046c0 	.word	0x46c046c0

000213c8 <__kernel_rem_pio2>:
   213c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   213ca:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
   213ce:	930a      	str	r3, [sp, #40]
   213d0:	900c      	str	r0, [sp, #48]
   213d2:	f8df 36f0 	ldr.w	r3, [pc, #1776]	; 21ac4 <__kernel_rem_pio2+0x6fc>
   213d6:	98ba      	ldr	r0, [sp, #744]
   213d8:	910b      	str	r1, [sp, #44]
   213da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   213de:	990a      	ldr	r1, [sp, #40]
   213e0:	f8df 06e4 	ldr.w	r0, [pc, #1764]	; 21ac8 <__kernel_rem_pio2+0x700>
   213e4:	930f      	str	r3, [sp, #60]
   213e6:	3901      	subs	r1, #1
   213e8:	1ed3      	subs	r3, r2, #3
   213ea:	910e      	str	r1, [sp, #56]
   213ec:	fb83 0100 	smull	r0, r1, r3, r0
   213f0:	17db      	asrs	r3, r3, #31
   213f2:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   213f6:	2b00      	cmp	r3, #0
   213f8:	bfb8      	it	lt
   213fa:	2300      	movlt	r3, #0
   213fc:	9327      	str	r3, [sp, #156]
   213fe:	ea6f 0303 	mvn.w	r3, r3
   21402:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   21406:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2140a:	9c27      	ldr	r4, [sp, #156]
   2140c:	9312      	str	r3, [sp, #72]
   2140e:	9a0f      	ldr	r2, [sp, #60]
   21410:	9b0e      	ldr	r3, [sp, #56]
   21412:	98bb      	ldr	r0, [sp, #748]
   21414:	ebc3 0604 	rsb	r6, r3, r4
   21418:	18d2      	adds	r2, r2, r3
   2141a:	9211      	str	r2, [sp, #68]
   2141c:	af78      	add	r7, sp, #480
   2141e:	eb00 0586 	add.w	r5, r0, r6, lsl #2
   21422:	2400      	movs	r4, #0
   21424:	e00a      	b.n	2143c <__kernel_rem_pio2+0x74>
   21426:	42f4      	cmn	r4, r6
   21428:	d502      	bpl.n	21430 <__kernel_rem_pio2+0x68>
   2142a:	2000      	movs	r0, #0
   2142c:	2100      	movs	r1, #0
   2142e:	e002      	b.n	21436 <__kernel_rem_pio2+0x6e>
   21430:	6828      	ldr	r0, [r5, #0]
   21432:	f7fb f8d1 	bl	1c5d8 <__aeabi_i2d>
   21436:	c703      	stmia	r7!, {r0, r1}
   21438:	3401      	adds	r4, #1
   2143a:	3504      	adds	r5, #4
   2143c:	9911      	ldr	r1, [sp, #68]
   2143e:	428c      	cmp	r4, r1
   21440:	ddf1      	ble.n	21426 <__kernel_rem_pio2+0x5e>
   21442:	9b0e      	ldr	r3, [sp, #56]
   21444:	aa28      	add	r2, sp, #160
   21446:	2400      	movs	r4, #0
   21448:	921f      	str	r2, [sp, #124]
   2144a:	9320      	str	r3, [sp, #128]
   2144c:	9421      	str	r4, [sp, #132]
   2144e:	e01f      	b.n	21490 <__kernel_rem_pio2+0xc8>
   21450:	9a1e      	ldr	r2, [sp, #120]
   21452:	3601      	adds	r6, #1
   21454:	e912 0003 	ldmdb	r2, {r0, r1}
   21458:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   2145c:	f7fb f922 	bl	1c6a4 <__aeabi_dmul>
   21460:	4602      	mov	r2, r0
   21462:	460b      	mov	r3, r1
   21464:	4620      	mov	r0, r4
   21466:	4629      	mov	r1, r5
   21468:	f7fa ff6a 	bl	1c340 <__adddf3>
   2146c:	4604      	mov	r4, r0
   2146e:	460d      	mov	r5, r1
   21470:	9b1e      	ldr	r3, [sp, #120]
   21472:	980e      	ldr	r0, [sp, #56]
   21474:	3308      	adds	r3, #8
   21476:	3f08      	subs	r7, #8
   21478:	4286      	cmp	r6, r0
   2147a:	931e      	str	r3, [sp, #120]
   2147c:	dde8      	ble.n	21450 <__kernel_rem_pio2+0x88>
   2147e:	991f      	ldr	r1, [sp, #124]
   21480:	9a21      	ldr	r2, [sp, #132]
   21482:	9b20      	ldr	r3, [sp, #128]
   21484:	c130      	stmia	r1!, {r4, r5}
   21486:	3201      	adds	r2, #1
   21488:	3301      	adds	r3, #1
   2148a:	911f      	str	r1, [sp, #124]
   2148c:	9221      	str	r2, [sp, #132]
   2148e:	9320      	str	r3, [sp, #128]
   21490:	9c21      	ldr	r4, [sp, #132]
   21492:	9e0f      	ldr	r6, [sp, #60]
   21494:	42b4      	cmp	r4, r6
   21496:	dc09      	bgt.n	214ac <__kernel_rem_pio2+0xe4>
   21498:	980c      	ldr	r0, [sp, #48]
   2149a:	9a20      	ldr	r2, [sp, #128]
   2149c:	a978      	add	r1, sp, #480
   2149e:	901e      	str	r0, [sp, #120]
   214a0:	eb01 07c2 	add.w	r7, r1, r2, lsl #3
   214a4:	2600      	movs	r6, #0
   214a6:	2400      	movs	r4, #0
   214a8:	2500      	movs	r5, #0
   214aa:	e7e1      	b.n	21470 <__kernel_rem_pio2+0xa8>
   214ac:	9b0f      	ldr	r3, [sp, #60]
   214ae:	930d      	str	r3, [sp, #52]
   214b0:	9c0d      	ldr	r4, [sp, #52]
   214b2:	aa28      	add	r2, sp, #160
   214b4:	1e60      	subs	r0, r4, #1
   214b6:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
   214ba:	2100      	movs	r1, #0
   214bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   214c0:	e893 00c0 	ldmia.w	r3, {r6, r7}
   214c4:	9022      	str	r0, [sp, #136]
   214c6:	921d      	str	r2, [sp, #116]
   214c8:	9425      	str	r4, [sp, #148]
   214ca:	911c      	str	r1, [sp, #112]
   214cc:	e02b      	b.n	21526 <__kernel_rem_pio2+0x15e>
   214ce:	2200      	movs	r2, #0
   214d0:	f8df 35f8 	ldr.w	r3, [pc, #1528]	; 21acc <__kernel_rem_pio2+0x704>
   214d4:	4630      	mov	r0, r6
   214d6:	4639      	mov	r1, r7
   214d8:	f7fb f8e4 	bl	1c6a4 <__aeabi_dmul>
   214dc:	f7fb fb7a 	bl	1cbd4 <__aeabi_d2iz>
   214e0:	f7fb f87a 	bl	1c5d8 <__aeabi_i2d>
   214e4:	2200      	movs	r2, #0
   214e6:	f8df 35e8 	ldr.w	r3, [pc, #1512]	; 21ad0 <__kernel_rem_pio2+0x708>
   214ea:	4604      	mov	r4, r0
   214ec:	460d      	mov	r5, r1
   214ee:	f7fb f8d9 	bl	1c6a4 <__aeabi_dmul>
   214f2:	4602      	mov	r2, r0
   214f4:	460b      	mov	r3, r1
   214f6:	4630      	mov	r0, r6
   214f8:	4639      	mov	r1, r7
   214fa:	f7fa ff21 	bl	1c340 <__adddf3>
   214fe:	f7fb fb69 	bl	1cbd4 <__aeabi_d2iz>
   21502:	9b1c      	ldr	r3, [sp, #112]
   21504:	aaa0      	add	r2, sp, #640
   21506:	50d0      	str	r0, [r2, r3]
   21508:	9e25      	ldr	r6, [sp, #148]
   2150a:	4620      	mov	r0, r4
   2150c:	9c1d      	ldr	r4, [sp, #116]
   2150e:	3e01      	subs	r6, #1
   21510:	4629      	mov	r1, r5
   21512:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   21516:	9625      	str	r6, [sp, #148]
   21518:	f7fa ff12 	bl	1c340 <__adddf3>
   2151c:	4606      	mov	r6, r0
   2151e:	981c      	ldr	r0, [sp, #112]
   21520:	460f      	mov	r7, r1
   21522:	3004      	adds	r0, #4
   21524:	901c      	str	r0, [sp, #112]
   21526:	991d      	ldr	r1, [sp, #116]
   21528:	9a25      	ldr	r2, [sp, #148]
   2152a:	3908      	subs	r1, #8
   2152c:	2a00      	cmp	r2, #0
   2152e:	911d      	str	r1, [sp, #116]
   21530:	dccd      	bgt.n	214ce <__kernel_rem_pio2+0x106>
   21532:	9a12      	ldr	r2, [sp, #72]
   21534:	4630      	mov	r0, r6
   21536:	4639      	mov	r1, r7
   21538:	f000 fdc6 	bl	220c8 <scalbn>
   2153c:	2200      	movs	r2, #0
   2153e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   21542:	4604      	mov	r4, r0
   21544:	460d      	mov	r5, r1
   21546:	f7fb f8ad 	bl	1c6a4 <__aeabi_dmul>
   2154a:	f000 fd35 	bl	21fb8 <floor>
   2154e:	2200      	movs	r2, #0
   21550:	f8df 3580 	ldr.w	r3, [pc, #1408]	; 21ad4 <__kernel_rem_pio2+0x70c>
   21554:	f7fb f8a6 	bl	1c6a4 <__aeabi_dmul>
   21558:	4602      	mov	r2, r0
   2155a:	460b      	mov	r3, r1
   2155c:	4620      	mov	r0, r4
   2155e:	4629      	mov	r1, r5
   21560:	f7fa feee 	bl	1c340 <__adddf3>
   21564:	460d      	mov	r5, r1
   21566:	4604      	mov	r4, r0
   21568:	f7fb fb34 	bl	1cbd4 <__aeabi_d2iz>
   2156c:	9010      	str	r0, [sp, #64]
   2156e:	f7fb f833 	bl	1c5d8 <__aeabi_i2d>
   21572:	460b      	mov	r3, r1
   21574:	4602      	mov	r2, r0
   21576:	4629      	mov	r1, r5
   21578:	4620      	mov	r0, r4
   2157a:	f7fa fedf 	bl	1c33c <__aeabi_dsub>
   2157e:	9b12      	ldr	r3, [sp, #72]
   21580:	4604      	mov	r4, r0
   21582:	2b00      	cmp	r3, #0
   21584:	460d      	mov	r5, r1
   21586:	dd16      	ble.n	215b6 <__kernel_rem_pio2+0x1ee>
   21588:	9922      	ldr	r1, [sp, #136]
   2158a:	aeb4      	add	r6, sp, #720
   2158c:	eb06 0081 	add.w	r0, r6, r1, lsl #2
   21590:	f850 2c50 	ldr.w	r2, [r0, #-80]
   21594:	f1c3 0118 	rsb	r1, r3, #24	; 0x18
   21598:	fa52 f301 	asrs.w	r3, r2, r1
   2159c:	9e10      	ldr	r6, [sp, #64]
   2159e:	18f6      	adds	r6, r6, r3
   215a0:	408b      	lsls	r3, r1
   215a2:	1ad2      	subs	r2, r2, r3
   215a4:	f840 2c50 	str.w	r2, [r0, #-80]
   215a8:	9812      	ldr	r0, [sp, #72]
   215aa:	9610      	str	r6, [sp, #64]
   215ac:	f1c0 0317 	rsb	r3, r0, #23	; 0x17
   215b0:	fa52 f303 	asrs.w	r3, r2, r3
   215b4:	e007      	b.n	215c6 <__kernel_rem_pio2+0x1fe>
   215b6:	d10b      	bne.n	215d0 <__kernel_rem_pio2+0x208>
   215b8:	9a22      	ldr	r2, [sp, #136]
   215ba:	a9b4      	add	r1, sp, #720
   215bc:	eb01 0382 	add.w	r3, r1, r2, lsl #2
   215c0:	f853 3c50 	ldr.w	r3, [r3, #-80]
   215c4:	15db      	asrs	r3, r3, #23
   215c6:	9313      	str	r3, [sp, #76]
   215c8:	9813      	ldr	r0, [sp, #76]
   215ca:	2800      	cmp	r0, #0
   215cc:	dc0b      	bgt.n	215e6 <__kernel_rem_pio2+0x21e>
   215ce:	e061      	b.n	21694 <__kernel_rem_pio2+0x2cc>
   215d0:	2200      	movs	r2, #0
   215d2:	f8df 3504 	ldr.w	r3, [pc, #1284]	; 21ad8 <__kernel_rem_pio2+0x710>
   215d6:	f7fb fae9 	bl	1cbac <__aeabi_dcmpge>
   215da:	b910      	cbnz	r0, 215e2 <__kernel_rem_pio2+0x21a>
   215dc:	2300      	movs	r3, #0
   215de:	9313      	str	r3, [sp, #76]
   215e0:	e058      	b.n	21694 <__kernel_rem_pio2+0x2cc>
   215e2:	2602      	movs	r6, #2
   215e4:	9613      	str	r6, [sp, #76]
   215e6:	9910      	ldr	r1, [sp, #64]
   215e8:	2600      	movs	r6, #0
   215ea:	3101      	adds	r1, #1
   215ec:	9110      	str	r1, [sp, #64]
   215ee:	2000      	movs	r0, #0
   215f0:	2100      	movs	r1, #0
   215f2:	f50d 7c20 	add.w	ip, sp, #640	; 0x280
   215f6:	e010      	b.n	2161a <__kernel_rem_pio2+0x252>
   215f8:	f85c 2001 	ldr.w	r2, [ip, r1]
   215fc:	b936      	cbnz	r6, 2160c <__kernel_rem_pio2+0x244>
   215fe:	b152      	cbz	r2, 21616 <__kernel_rem_pio2+0x24e>
   21600:	f1c2 7380 	rsb	r3, r2, #16777216	; 0x1000000
   21604:	f84c 3001 	str.w	r3, [ip, r1]
   21608:	2601      	movs	r6, #1
   2160a:	e004      	b.n	21616 <__kernel_rem_pio2+0x24e>
   2160c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   21610:	1a9b      	subs	r3, r3, r2
   21612:	f84c 3001 	str.w	r3, [ip, r1]
   21616:	3001      	adds	r0, #1
   21618:	3104      	adds	r1, #4
   2161a:	9a0d      	ldr	r2, [sp, #52]
   2161c:	4290      	cmp	r0, r2
   2161e:	dbeb      	blt.n	215f8 <__kernel_rem_pio2+0x230>
   21620:	9b12      	ldr	r3, [sp, #72]
   21622:	2b00      	cmp	r3, #0
   21624:	dd1b      	ble.n	2165e <__kernel_rem_pio2+0x296>
   21626:	2b01      	cmp	r3, #1
   21628:	d002      	beq.n	21630 <__kernel_rem_pio2+0x268>
   2162a:	2b02      	cmp	r3, #2
   2162c:	d117      	bne.n	2165e <__kernel_rem_pio2+0x296>
   2162e:	e00a      	b.n	21646 <__kernel_rem_pio2+0x27e>
   21630:	9922      	ldr	r1, [sp, #136]
   21632:	a8b4      	add	r0, sp, #720
   21634:	eb00 0281 	add.w	r2, r0, r1, lsl #2
   21638:	f852 3c50 	ldr.w	r3, [r2, #-80]
   2163c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   21640:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   21644:	e009      	b.n	2165a <__kernel_rem_pio2+0x292>
   21646:	9822      	ldr	r0, [sp, #136]
   21648:	abb4      	add	r3, sp, #720
   2164a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
   2164e:	f852 3c50 	ldr.w	r3, [r2, #-80]
   21652:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   21656:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
   2165a:	f842 3c50 	str.w	r3, [r2, #-80]
   2165e:	9913      	ldr	r1, [sp, #76]
   21660:	2902      	cmp	r1, #2
   21662:	d117      	bne.n	21694 <__kernel_rem_pio2+0x2cc>
   21664:	4622      	mov	r2, r4
   21666:	462b      	mov	r3, r5
   21668:	2000      	movs	r0, #0
   2166a:	f8df 1470 	ldr.w	r1, [pc, #1136]	; 21adc <__kernel_rem_pio2+0x714>
   2166e:	f7fa fe65 	bl	1c33c <__aeabi_dsub>
   21672:	4604      	mov	r4, r0
   21674:	460d      	mov	r5, r1
   21676:	b16e      	cbz	r6, 21694 <__kernel_rem_pio2+0x2cc>
   21678:	9a12      	ldr	r2, [sp, #72]
   2167a:	2000      	movs	r0, #0
   2167c:	f8df 145c 	ldr.w	r1, [pc, #1116]	; 21adc <__kernel_rem_pio2+0x714>
   21680:	f000 fd22 	bl	220c8 <scalbn>
   21684:	4602      	mov	r2, r0
   21686:	460b      	mov	r3, r1
   21688:	4620      	mov	r0, r4
   2168a:	4629      	mov	r1, r5
   2168c:	f7fa fe56 	bl	1c33c <__aeabi_dsub>
   21690:	4604      	mov	r4, r0
   21692:	460d      	mov	r5, r1
   21694:	2200      	movs	r2, #0
   21696:	2300      	movs	r3, #0
   21698:	4620      	mov	r0, r4
   2169a:	4629      	mov	r1, r5
   2169c:	f7fb fa68 	bl	1cb70 <__aeabi_dcmpeq>
   216a0:	2800      	cmp	r0, #0
   216a2:	d073      	beq.n	2178c <__kernel_rem_pio2+0x3c4>
   216a4:	9a22      	ldr	r2, [sp, #136]
   216a6:	aba0      	add	r3, sp, #640
   216a8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   216ac:	2200      	movs	r2, #0
   216ae:	e004      	b.n	216ba <__kernel_rem_pio2+0x2f2>
   216b0:	684b      	ldr	r3, [r1, #4]
   216b2:	431a      	orrs	r2, r3
   216b4:	9b22      	ldr	r3, [sp, #136]
   216b6:	3b01      	subs	r3, #1
   216b8:	9322      	str	r3, [sp, #136]
   216ba:	9c22      	ldr	r4, [sp, #136]
   216bc:	9e0f      	ldr	r6, [sp, #60]
   216be:	3904      	subs	r1, #4
   216c0:	42b4      	cmp	r4, r6
   216c2:	daf5      	bge.n	216b0 <__kernel_rem_pio2+0x2e8>
   216c4:	2a00      	cmp	r2, #0
   216c6:	d162      	bne.n	2178e <__kernel_rem_pio2+0x3c6>
   216c8:	aba0      	add	r3, sp, #640
   216ca:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   216ce:	2201      	movs	r2, #1
   216d0:	e000      	b.n	216d4 <__kernel_rem_pio2+0x30c>
   216d2:	3201      	adds	r2, #1
   216d4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   216d8:	2b00      	cmp	r3, #0
   216da:	d0fa      	beq.n	216d2 <__kernel_rem_pio2+0x30a>
   216dc:	980d      	ldr	r0, [sp, #52]
   216de:	9927      	ldr	r1, [sp, #156]
   216e0:	ab28      	add	r3, sp, #160
   216e2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   216e6:	931a      	str	r3, [sp, #104]
   216e8:	1c4b      	adds	r3, r1, #1
   216ea:	990a      	ldr	r1, [sp, #40]
   216ec:	1812      	adds	r2, r2, r0
   216ee:	9cbb      	ldr	r4, [sp, #748]
   216f0:	4401      	add	r1, r0
   216f2:	181b      	adds	r3, r3, r0
   216f4:	9205      	str	r2, [sp, #20]
   216f6:	aa78      	add	r2, sp, #480
   216f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   216fc:	2600      	movs	r6, #0
   216fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   21702:	931b      	str	r3, [sp, #108]
   21704:	9619      	str	r6, [sp, #100]
   21706:	9104      	str	r1, [sp, #16]
   21708:	9203      	str	r2, [sp, #12]
   2170a:	e036      	b.n	2177a <__kernel_rem_pio2+0x3b2>
   2170c:	991b      	ldr	r1, [sp, #108]
   2170e:	9b03      	ldr	r3, [sp, #12]
   21710:	9e19      	ldr	r6, [sp, #100]
   21712:	6808      	ldr	r0, [r1, #0]
   21714:	eb03 04c6 	add.w	r4, r3, r6, lsl #3
   21718:	f7fa ff5e 	bl	1c5d8 <__aeabi_i2d>
   2171c:	e884 0003 	stmia.w	r4, {r0, r1}
   21720:	9c04      	ldr	r4, [sp, #16]
   21722:	9a0c      	ldr	r2, [sp, #48]
   21724:	eb04 0306 	add.w	r3, r4, r6
   21728:	ae78      	add	r6, sp, #480
   2172a:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
   2172e:	9218      	str	r2, [sp, #96]
   21730:	2600      	movs	r6, #0
   21732:	2400      	movs	r4, #0
   21734:	2500      	movs	r5, #0
   21736:	e00f      	b.n	21758 <__kernel_rem_pio2+0x390>
   21738:	9a18      	ldr	r2, [sp, #96]
   2173a:	3601      	adds	r6, #1
   2173c:	e912 0003 	ldmdb	r2, {r0, r1}
   21740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   21744:	f7fa ffae 	bl	1c6a4 <__aeabi_dmul>
   21748:	4602      	mov	r2, r0
   2174a:	460b      	mov	r3, r1
   2174c:	4620      	mov	r0, r4
   2174e:	4629      	mov	r1, r5
   21750:	f7fa fdf6 	bl	1c340 <__adddf3>
   21754:	4604      	mov	r4, r0
   21756:	460d      	mov	r5, r1
   21758:	9b18      	ldr	r3, [sp, #96]
   2175a:	980e      	ldr	r0, [sp, #56]
   2175c:	3308      	adds	r3, #8
   2175e:	3f08      	subs	r7, #8
   21760:	4286      	cmp	r6, r0
   21762:	9318      	str	r3, [sp, #96]
   21764:	dde8      	ble.n	21738 <__kernel_rem_pio2+0x370>
   21766:	991a      	ldr	r1, [sp, #104]
   21768:	9a19      	ldr	r2, [sp, #100]
   2176a:	9b1b      	ldr	r3, [sp, #108]
   2176c:	e9e1 4502 	strd	r4, r5, [r1, #8]!
   21770:	3201      	adds	r2, #1
   21772:	3304      	adds	r3, #4
   21774:	911a      	str	r1, [sp, #104]
   21776:	9219      	str	r2, [sp, #100]
   21778:	931b      	str	r3, [sp, #108]
   2177a:	9c0d      	ldr	r4, [sp, #52]
   2177c:	9e19      	ldr	r6, [sp, #100]
   2177e:	1c63      	adds	r3, r4, #1
   21780:	9805      	ldr	r0, [sp, #20]
   21782:	199b      	adds	r3, r3, r6
   21784:	4283      	cmp	r3, r0
   21786:	ddc1      	ble.n	2170c <__kernel_rem_pio2+0x344>
   21788:	900d      	str	r0, [sp, #52]
   2178a:	e691      	b.n	214b0 <__kernel_rem_pio2+0xe8>
   2178c:	d014      	beq.n	217b8 <__kernel_rem_pio2+0x3f0>
   2178e:	9c0d      	ldr	r4, [sp, #52]
   21790:	9912      	ldr	r1, [sp, #72]
   21792:	aba0      	add	r3, sp, #640
   21794:	3918      	subs	r1, #24
   21796:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   2179a:	3c01      	subs	r4, #1
   2179c:	9112      	str	r1, [sp, #72]
   2179e:	940d      	str	r4, [sp, #52]
   217a0:	e005      	b.n	217ae <__kernel_rem_pio2+0x3e6>
   217a2:	9e0d      	ldr	r6, [sp, #52]
   217a4:	9812      	ldr	r0, [sp, #72]
   217a6:	3e01      	subs	r6, #1
   217a8:	3818      	subs	r0, #24
   217aa:	960d      	str	r6, [sp, #52]
   217ac:	9012      	str	r0, [sp, #72]
   217ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   217b2:	2b00      	cmp	r3, #0
   217b4:	d0f5      	beq.n	217a2 <__kernel_rem_pio2+0x3da>
   217b6:	e03f      	b.n	21838 <__kernel_rem_pio2+0x470>
   217b8:	9912      	ldr	r1, [sp, #72]
   217ba:	4620      	mov	r0, r4
   217bc:	f1c1 0200 	rsb	r2, r1, #0	; 0x0
   217c0:	4629      	mov	r1, r5
   217c2:	f000 fc81 	bl	220c8 <scalbn>
   217c6:	2200      	movs	r2, #0
   217c8:	4bc5      	ldr	r3, [pc, #788]	(21ae0 <__kernel_rem_pio2+0x718>)
   217ca:	4606      	mov	r6, r0
   217cc:	460f      	mov	r7, r1
   217ce:	f7fb f9ed 	bl	1cbac <__aeabi_dcmpge>
   217d2:	9a0d      	ldr	r2, [sp, #52]
   217d4:	0094      	lsls	r4, r2, #2
   217d6:	b338      	cbz	r0, 21828 <__kernel_rem_pio2+0x460>
   217d8:	2200      	movs	r2, #0
   217da:	4bbc      	ldr	r3, [pc, #752]	(21acc <__kernel_rem_pio2+0x704>)
   217dc:	4630      	mov	r0, r6
   217de:	4639      	mov	r1, r7
   217e0:	f7fa ff60 	bl	1c6a4 <__aeabi_dmul>
   217e4:	f7fb f9f6 	bl	1cbd4 <__aeabi_d2iz>
   217e8:	f7fa fef6 	bl	1c5d8 <__aeabi_i2d>
   217ec:	abb4      	add	r3, sp, #720
   217ee:	441c      	add	r4, r3
   217f0:	2200      	movs	r2, #0
   217f2:	4bb7      	ldr	r3, [pc, #732]	(21ad0 <__kernel_rem_pio2+0x708>)
   217f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
   217f8:	f7fa ff54 	bl	1c6a4 <__aeabi_dmul>
   217fc:	4602      	mov	r2, r0
   217fe:	460b      	mov	r3, r1
   21800:	4630      	mov	r0, r6
   21802:	4639      	mov	r1, r7
   21804:	f7fa fd9c 	bl	1c340 <__adddf3>
   21808:	f7fb f9e4 	bl	1cbd4 <__aeabi_d2iz>
   2180c:	9e12      	ldr	r6, [sp, #72]
   2180e:	f844 0c50 	str.w	r0, [r4, #-80]
   21812:	9c0d      	ldr	r4, [sp, #52]
   21814:	a8b4      	add	r0, sp, #720
   21816:	3401      	adds	r4, #1
   21818:	3618      	adds	r6, #24
   2181a:	940d      	str	r4, [sp, #52]
   2181c:	9612      	str	r6, [sp, #72]
   2181e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   21822:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   21826:	e003      	b.n	21830 <__kernel_rem_pio2+0x468>
   21828:	a9b4      	add	r1, sp, #720
   2182a:	440c      	add	r4, r1
   2182c:	4630      	mov	r0, r6
   2182e:	4639      	mov	r1, r7
   21830:	f7fb f9d0 	bl	1cbd4 <__aeabi_d2iz>
   21834:	f844 0c50 	str.w	r0, [r4, #-80]
   21838:	9a12      	ldr	r2, [sp, #72]
   2183a:	2000      	movs	r0, #0
   2183c:	49a7      	ldr	r1, [pc, #668]	(21adc <__kernel_rem_pio2+0x714>)
   2183e:	f000 fc43 	bl	220c8 <scalbn>
   21842:	9a0d      	ldr	r2, [sp, #52]
   21844:	aba0      	add	r3, sp, #640
   21846:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   2184a:	9317      	str	r3, [sp, #92]
   2184c:	ab28      	add	r3, sp, #160
   2184e:	4604      	mov	r4, r0
   21850:	460d      	mov	r5, r1
   21852:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
   21856:	4616      	mov	r6, r2
   21858:	e014      	b.n	21884 <__kernel_rem_pio2+0x4bc>
   2185a:	9b17      	ldr	r3, [sp, #92]
   2185c:	3e01      	subs	r6, #1
   2185e:	6858      	ldr	r0, [r3, #4]
   21860:	f7fa feba 	bl	1c5d8 <__aeabi_i2d>
   21864:	4602      	mov	r2, r0
   21866:	460b      	mov	r3, r1
   21868:	4620      	mov	r0, r4
   2186a:	4629      	mov	r1, r5
   2186c:	f7fa ff1a 	bl	1c6a4 <__aeabi_dmul>
   21870:	2200      	movs	r2, #0
   21872:	e9c7 0102 	strd	r0, r1, [r7, #8]
   21876:	4b95      	ldr	r3, [pc, #596]	(21acc <__kernel_rem_pio2+0x704>)
   21878:	4620      	mov	r0, r4
   2187a:	4629      	mov	r1, r5
   2187c:	f7fa ff12 	bl	1c6a4 <__aeabi_dmul>
   21880:	4604      	mov	r4, r0
   21882:	460d      	mov	r5, r1
   21884:	9817      	ldr	r0, [sp, #92]
   21886:	3f08      	subs	r7, #8
   21888:	3804      	subs	r0, #4
   2188a:	2e00      	cmp	r6, #0
   2188c:	9017      	str	r0, [sp, #92]
   2188e:	dae4      	bge.n	2185a <__kernel_rem_pio2+0x492>
   21890:	9a0d      	ldr	r2, [sp, #52]
   21892:	a950      	add	r1, sp, #320
   21894:	2300      	movs	r3, #0
   21896:	9116      	str	r1, [sp, #88]
   21898:	9223      	str	r2, [sp, #140]
   2189a:	9315      	str	r3, [sp, #84]
   2189c:	e022      	b.n	218e4 <__kernel_rem_pio2+0x51c>
   2189e:	9a14      	ldr	r2, [sp, #80]
   218a0:	3601      	adds	r6, #1
   218a2:	e912 0003 	ldmdb	r2, {r0, r1}
   218a6:	e917 000c 	ldmdb	r7, {r2, r3}
   218aa:	f7fa fefb 	bl	1c6a4 <__aeabi_dmul>
   218ae:	4602      	mov	r2, r0
   218b0:	460b      	mov	r3, r1
   218b2:	4620      	mov	r0, r4
   218b4:	4629      	mov	r1, r5
   218b6:	f7fa fd43 	bl	1c340 <__adddf3>
   218ba:	4604      	mov	r4, r0
   218bc:	460d      	mov	r5, r1
   218be:	9b0f      	ldr	r3, [sp, #60]
   218c0:	429e      	cmp	r6, r3
   218c2:	dc06      	bgt.n	218d2 <__kernel_rem_pio2+0x50a>
   218c4:	9814      	ldr	r0, [sp, #80]
   218c6:	9915      	ldr	r1, [sp, #84]
   218c8:	3008      	adds	r0, #8
   218ca:	3708      	adds	r7, #8
   218cc:	428e      	cmp	r6, r1
   218ce:	9014      	str	r0, [sp, #80]
   218d0:	dde5      	ble.n	2189e <__kernel_rem_pio2+0x4d6>
   218d2:	9a16      	ldr	r2, [sp, #88]
   218d4:	9b23      	ldr	r3, [sp, #140]
   218d6:	c230      	stmia	r2!, {r4, r5}
   218d8:	9c15      	ldr	r4, [sp, #84]
   218da:	3b01      	subs	r3, #1
   218dc:	3401      	adds	r4, #1
   218de:	9216      	str	r2, [sp, #88]
   218e0:	9323      	str	r3, [sp, #140]
   218e2:	9415      	str	r4, [sp, #84]
   218e4:	9e23      	ldr	r6, [sp, #140]
   218e6:	2e00      	cmp	r6, #0
   218e8:	db08      	blt.n	218fc <__kernel_rem_pio2+0x534>
   218ea:	487e      	ldr	r0, [pc, #504]	(21ae4 <__kernel_rem_pio2+0x71c>)
   218ec:	a928      	add	r1, sp, #160
   218ee:	eb01 07c6 	add.w	r7, r1, r6, lsl #3
   218f2:	9014      	str	r0, [sp, #80]
   218f4:	2600      	movs	r6, #0
   218f6:	2400      	movs	r4, #0
   218f8:	2500      	movs	r5, #0
   218fa:	e7e0      	b.n	218be <__kernel_rem_pio2+0x4f6>
   218fc:	9aba      	ldr	r2, [sp, #744]
   218fe:	2a03      	cmp	r2, #3
   21900:	f200 80d9 	bhi.w	21ab6 <__kernel_rem_pio2+0x6ee>
   21904:	e8df f002 	tbb	[pc, r2]
   21908:	020b0b12 	.word	0x020b0b12
   2190c:	9b0d      	ldr	r3, [sp, #52]
   2190e:	9f0d      	ldr	r7, [sp, #52]
   21910:	1e5a      	subs	r2, r3, #1
   21912:	ab50      	add	r3, sp, #320
   21914:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   21918:	9226      	str	r2, [sp, #152]
   2191a:	4616      	mov	r6, r2
   2191c:	e067      	b.n	219ee <__kernel_rem_pio2+0x626>
   2191e:	9c0d      	ldr	r4, [sp, #52]
   21920:	ab50      	add	r3, sp, #320
   21922:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   21926:	2000      	movs	r0, #0
   21928:	2100      	movs	r1, #0
   2192a:	e01c      	b.n	21966 <__kernel_rem_pio2+0x59e>
   2192c:	9e0d      	ldr	r6, [sp, #52]
   2192e:	ab50      	add	r3, sp, #320
   21930:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
   21934:	4634      	mov	r4, r6
   21936:	2000      	movs	r0, #0
   21938:	2100      	movs	r1, #0
   2193a:	e004      	b.n	21946 <__kernel_rem_pio2+0x57e>
   2193c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   21940:	f7fa fcfe 	bl	1c340 <__adddf3>
   21944:	3c01      	subs	r4, #1
   21946:	3d08      	subs	r5, #8
   21948:	2c00      	cmp	r4, #0
   2194a:	daf7      	bge.n	2193c <__kernel_rem_pio2+0x574>
   2194c:	9c13      	ldr	r4, [sp, #76]
   2194e:	b10c      	cbz	r4, 21954 <__kernel_rem_pio2+0x58c>
   21950:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   21954:	9e0b      	ldr	r6, [sp, #44]
   21956:	e886 0003 	stmia.w	r6, {r0, r1}
   2195a:	e0ac      	b.n	21ab6 <__kernel_rem_pio2+0x6ee>
   2195c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   21960:	f7fa fcee 	bl	1c340 <__adddf3>
   21964:	3c01      	subs	r4, #1
   21966:	3d08      	subs	r5, #8
   21968:	2c00      	cmp	r4, #0
   2196a:	daf7      	bge.n	2195c <__kernel_rem_pio2+0x594>
   2196c:	9a13      	ldr	r2, [sp, #76]
   2196e:	4604      	mov	r4, r0
   21970:	460d      	mov	r5, r1
   21972:	b10a      	cbz	r2, 21978 <__kernel_rem_pio2+0x5b0>
   21974:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   21978:	9b0b      	ldr	r3, [sp, #44]
   2197a:	4622      	mov	r2, r4
   2197c:	e883 0003 	stmia.w	r3, {r0, r1}
   21980:	ab50      	add	r3, sp, #320
   21982:	e893 0003 	ldmia.w	r3, {r0, r1}
   21986:	462b      	mov	r3, r5
   21988:	f7fa fcd8 	bl	1c33c <__aeabi_dsub>
   2198c:	ad52      	add	r5, sp, #328
   2198e:	2401      	movs	r4, #1
   21990:	e004      	b.n	2199c <__kernel_rem_pio2+0x5d4>
   21992:	e915 000c 	ldmdb	r5, {r2, r3}
   21996:	f7fa fcd3 	bl	1c340 <__adddf3>
   2199a:	3401      	adds	r4, #1
   2199c:	9e0d      	ldr	r6, [sp, #52]
   2199e:	3508      	adds	r5, #8
   219a0:	42b4      	cmp	r4, r6
   219a2:	ddf6      	ble.n	21992 <__kernel_rem_pio2+0x5ca>
   219a4:	9c13      	ldr	r4, [sp, #76]
   219a6:	b10c      	cbz	r4, 219ac <__kernel_rem_pio2+0x5e4>
   219a8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   219ac:	9e0b      	ldr	r6, [sp, #44]
   219ae:	e9c6 0102 	strd	r0, r1, [r6, #8]
   219b2:	e080      	b.n	21ab6 <__kernel_rem_pio2+0x6ee>
   219b4:	e9d6 4502 	ldrd	r4, r5, [r6, #8]
   219b8:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   219bc:	4620      	mov	r0, r4
   219be:	4629      	mov	r1, r5
   219c0:	f7fa fcbe 	bl	1c340 <__adddf3>
   219c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   219c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   219cc:	4620      	mov	r0, r4
   219ce:	4629      	mov	r1, r5
   219d0:	f7fa fcb4 	bl	1c33c <__aeabi_dsub>
   219d4:	4602      	mov	r2, r0
   219d6:	460b      	mov	r3, r1
   219d8:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   219dc:	f7fa fcb0 	bl	1c340 <__adddf3>
   219e0:	e9c6 0104 	strd	r0, r1, [r6, #16]
   219e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   219e8:	e9c6 0102 	strd	r0, r1, [r6, #8]
   219ec:	3f01      	subs	r7, #1
   219ee:	3e08      	subs	r6, #8
   219f0:	2f00      	cmp	r7, #0
   219f2:	dcdf      	bgt.n	219b4 <__kernel_rem_pio2+0x5ec>
   219f4:	990d      	ldr	r1, [sp, #52]
   219f6:	9124      	str	r1, [sp, #144]
   219f8:	e022      	b.n	21a40 <__kernel_rem_pio2+0x678>
   219fa:	9b26      	ldr	r3, [sp, #152]
   219fc:	9a24      	ldr	r2, [sp, #144]
   219fe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   21a02:	3a01      	subs	r2, #1
   21a04:	e88d 0003 	stmia.w	sp, {r0, r1}
   21a08:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
   21a0c:	9224      	str	r2, [sp, #144]
   21a0e:	4620      	mov	r0, r4
   21a10:	e89d 000c 	ldmia.w	sp, {r2, r3}
   21a14:	4629      	mov	r1, r5
   21a16:	f7fa fc93 	bl	1c340 <__adddf3>
   21a1a:	4606      	mov	r6, r0
   21a1c:	460f      	mov	r7, r1
   21a1e:	4632      	mov	r2, r6
   21a20:	463b      	mov	r3, r7
   21a22:	4620      	mov	r0, r4
   21a24:	4629      	mov	r1, r5
   21a26:	f7fa fc89 	bl	1c33c <__aeabi_dsub>
   21a2a:	4602      	mov	r2, r0
   21a2c:	460b      	mov	r3, r1
   21a2e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   21a32:	f7fa fc85 	bl	1c340 <__adddf3>
   21a36:	9a26      	ldr	r2, [sp, #152]
   21a38:	e9c2 0104 	strd	r0, r1, [r2, #16]
   21a3c:	e9c2 6702 	strd	r6, r7, [r2, #8]
   21a40:	9b26      	ldr	r3, [sp, #152]
   21a42:	9c24      	ldr	r4, [sp, #144]
   21a44:	3b08      	subs	r3, #8
   21a46:	2c01      	cmp	r4, #1
   21a48:	9326      	str	r3, [sp, #152]
   21a4a:	dcd6      	bgt.n	219fa <__kernel_rem_pio2+0x632>
   21a4c:	9e0d      	ldr	r6, [sp, #52]
   21a4e:	ab50      	add	r3, sp, #320
   21a50:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
   21a54:	4634      	mov	r4, r6
   21a56:	2000      	movs	r0, #0
   21a58:	2100      	movs	r1, #0
   21a5a:	e004      	b.n	21a66 <__kernel_rem_pio2+0x69e>
   21a5c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   21a60:	f7fa fc6e 	bl	1c340 <__adddf3>
   21a64:	3c01      	subs	r4, #1
   21a66:	3d08      	subs	r5, #8
   21a68:	2c01      	cmp	r4, #1
   21a6a:	dcf7      	bgt.n	21a5c <__kernel_rem_pio2+0x694>
   21a6c:	9a13      	ldr	r2, [sp, #76]
   21a6e:	f50d 7ca0 	add.w	ip, sp, #320	; 0x140
   21a72:	b95a      	cbnz	r2, 21a8c <__kernel_rem_pio2+0x6c4>
   21a74:	9c0b      	ldr	r4, [sp, #44]
   21a76:	e89c 000c 	ldmia.w	ip, {r2, r3}
   21a7a:	e884 000c 	stmia.w	r4, {r2, r3}
   21a7e:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
   21a82:	e9c4 0104 	strd	r0, r1, [r4, #16]
   21a86:	e9c4 2302 	strd	r2, r3, [r4, #8]
   21a8a:	e014      	b.n	21ab6 <__kernel_rem_pio2+0x6ee>
   21a8c:	f8dc 3000 	ldr.w	r3, [ip]
   21a90:	9e0b      	ldr	r6, [sp, #44]
   21a92:	6033      	str	r3, [r6, #0]
   21a94:	f8dc 3004 	ldr.w	r3, [ip, #4]
   21a98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   21a9c:	6073      	str	r3, [r6, #4]
   21a9e:	f8dc 3008 	ldr.w	r3, [ip, #8]
   21aa2:	60b3      	str	r3, [r6, #8]
   21aa4:	f8dc 300c 	ldr.w	r3, [ip, #12]
   21aa8:	6130      	str	r0, [r6, #16]
   21aaa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   21aae:	60f3      	str	r3, [r6, #12]
   21ab0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   21ab4:	6173      	str	r3, [r6, #20]
   21ab6:	9910      	ldr	r1, [sp, #64]
   21ab8:	f001 0007 	and.w	r0, r1, #7	; 0x7
   21abc:	f50d 7d35 	add.w	sp, sp, #724	; 0x2d4
   21ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21ac2:	46c0      	nop			(mov r8, r8)
   21ac4:	000257e8 	.word	0x000257e8
   21ac8:	2aaaaaab 	.word	0x2aaaaaab
   21acc:	3e700000 	.word	0x3e700000
   21ad0:	c1700000 	.word	0xc1700000
   21ad4:	c0200000 	.word	0xc0200000
   21ad8:	3fe00000 	.word	0x3fe00000
   21adc:	3ff00000 	.word	0x3ff00000
   21ae0:	41700000 	.word	0x41700000
   21ae4:	000257f8 	.word	0x000257f8

00021ae8 <__kernel_sin>:
   21ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
   21aea:	b089      	sub	sp, #36
   21aec:	e9cd 2304 	strd	r2, r3, [sp, #16]
   21af0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   21af4:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   21af8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   21afc:	da04      	bge.n	21b08 <__kernel_sin+0x20>
   21afe:	f7fb f869 	bl	1cbd4 <__aeabi_d2iz>
   21b02:	2800      	cmp	r0, #0
   21b04:	f000 8085 	beq.w	21c12 <__kernel_sin+0x12a>
   21b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   21b0c:	4602      	mov	r2, r0
   21b0e:	460b      	mov	r3, r1
   21b10:	f7fa fdc8 	bl	1c6a4 <__aeabi_dmul>
   21b14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   21b18:	4606      	mov	r6, r0
   21b1a:	460f      	mov	r7, r1
   21b1c:	f7fa fdc2 	bl	1c6a4 <__aeabi_dmul>
   21b20:	a23f      	add	r2, pc, #252	(adr r2, 21c20 <__kernel_sin+0x138>)
   21b22:	ca0c      	ldmia	r2!, {r2, r3}
   21b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
   21b28:	4630      	mov	r0, r6
   21b2a:	4639      	mov	r1, r7
   21b2c:	f7fa fdba 	bl	1c6a4 <__aeabi_dmul>
   21b30:	a23d      	add	r2, pc, #244	(adr r2, 21c28 <__kernel_sin+0x140>)
   21b32:	ca0c      	ldmia	r2!, {r2, r3}
   21b34:	f7fa fc02 	bl	1c33c <__aeabi_dsub>
   21b38:	4602      	mov	r2, r0
   21b3a:	460b      	mov	r3, r1
   21b3c:	4630      	mov	r0, r6
   21b3e:	4639      	mov	r1, r7
   21b40:	f7fa fdb0 	bl	1c6a4 <__aeabi_dmul>
   21b44:	a23a      	add	r2, pc, #232	(adr r2, 21c30 <__kernel_sin+0x148>)
   21b46:	ca0c      	ldmia	r2!, {r2, r3}
   21b48:	f7fa fbfa 	bl	1c340 <__adddf3>
   21b4c:	4602      	mov	r2, r0
   21b4e:	460b      	mov	r3, r1
   21b50:	4630      	mov	r0, r6
   21b52:	4639      	mov	r1, r7
   21b54:	f7fa fda6 	bl	1c6a4 <__aeabi_dmul>
   21b58:	a237      	add	r2, pc, #220	(adr r2, 21c38 <__kernel_sin+0x150>)
   21b5a:	ca0c      	ldmia	r2!, {r2, r3}
   21b5c:	f7fa fbee 	bl	1c33c <__aeabi_dsub>
   21b60:	4602      	mov	r2, r0
   21b62:	460b      	mov	r3, r1
   21b64:	4630      	mov	r0, r6
   21b66:	4639      	mov	r1, r7
   21b68:	f7fa fd9c 	bl	1c6a4 <__aeabi_dmul>
   21b6c:	a234      	add	r2, pc, #208	(adr r2, 21c40 <__kernel_sin+0x158>)
   21b6e:	ca0c      	ldmia	r2!, {r2, r3}
   21b70:	f7fa fbe6 	bl	1c340 <__adddf3>
   21b74:	9b0e      	ldr	r3, [sp, #56]
   21b76:	e88d 0003 	stmia.w	sp, {r0, r1}
   21b7a:	b9b3      	cbnz	r3, 21baa <__kernel_sin+0xc2>
   21b7c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   21b80:	4630      	mov	r0, r6
   21b82:	4639      	mov	r1, r7
   21b84:	f7fa fd8e 	bl	1c6a4 <__aeabi_dmul>
   21b88:	a22f      	add	r2, pc, #188	(adr r2, 21c48 <__kernel_sin+0x160>)
   21b8a:	ca0c      	ldmia	r2!, {r2, r3}
   21b8c:	f7fa fbd6 	bl	1c33c <__aeabi_dsub>
   21b90:	4602      	mov	r2, r0
   21b92:	460b      	mov	r3, r1
   21b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   21b98:	f7fa fd84 	bl	1c6a4 <__aeabi_dmul>
   21b9c:	4602      	mov	r2, r0
   21b9e:	460b      	mov	r3, r1
   21ba0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   21ba4:	f7fa fbcc 	bl	1c340 <__adddf3>
   21ba8:	e031      	b.n	21c0e <__kernel_sin+0x126>
   21baa:	2200      	movs	r2, #0
   21bac:	4b28      	ldr	r3, [pc, #160]	(21c50 <__kernel_sin+0x168>)
   21bae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   21bb2:	f7fa fd77 	bl	1c6a4 <__aeabi_dmul>
   21bb6:	e89d 000c 	ldmia.w	sp, {r2, r3}
   21bba:	4604      	mov	r4, r0
   21bbc:	460d      	mov	r5, r1
   21bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   21bc2:	f7fa fd6f 	bl	1c6a4 <__aeabi_dmul>
   21bc6:	4602      	mov	r2, r0
   21bc8:	460b      	mov	r3, r1
   21bca:	4620      	mov	r0, r4
   21bcc:	4629      	mov	r1, r5
   21bce:	f7fa fbb5 	bl	1c33c <__aeabi_dsub>
   21bd2:	4602      	mov	r2, r0
   21bd4:	460b      	mov	r3, r1
   21bd6:	4630      	mov	r0, r6
   21bd8:	4639      	mov	r1, r7
   21bda:	f7fa fd63 	bl	1c6a4 <__aeabi_dmul>
   21bde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   21be2:	f7fa fbab 	bl	1c33c <__aeabi_dsub>
   21be6:	a218      	add	r2, pc, #96	(adr r2, 21c48 <__kernel_sin+0x160>)
   21be8:	ca0c      	ldmia	r2!, {r2, r3}
   21bea:	4604      	mov	r4, r0
   21bec:	460d      	mov	r5, r1
   21bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   21bf2:	f7fa fd57 	bl	1c6a4 <__aeabi_dmul>
   21bf6:	4602      	mov	r2, r0
   21bf8:	460b      	mov	r3, r1
   21bfa:	4620      	mov	r0, r4
   21bfc:	4629      	mov	r1, r5
   21bfe:	f7fa fb9f 	bl	1c340 <__adddf3>
   21c02:	4602      	mov	r2, r0
   21c04:	460b      	mov	r3, r1
   21c06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   21c0a:	f7fa fb97 	bl	1c33c <__aeabi_dsub>
   21c0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   21c12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   21c16:	b009      	add	sp, #36
   21c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21c1a:	46c0      	nop			(mov r8, r8)
   21c1c:	46c0      	nop			(mov r8, r8)
   21c1e:	46c0      	nop			(mov r8, r8)
   21c20:	5acfd57c 	.word	0x5acfd57c
   21c24:	3de5d93a 	.word	0x3de5d93a
   21c28:	8a2b9ceb 	.word	0x8a2b9ceb
   21c2c:	3e5ae5e6 	.word	0x3e5ae5e6
   21c30:	57b1fe7d 	.word	0x57b1fe7d
   21c34:	3ec71de3 	.word	0x3ec71de3
   21c38:	19c161d5 	.word	0x19c161d5
   21c3c:	3f2a01a0 	.word	0x3f2a01a0
   21c40:	1110f8a6 	.word	0x1110f8a6
   21c44:	3f811111 	.word	0x3f811111
   21c48:	55555549 	.word	0x55555549
   21c4c:	3fc55555 	.word	0x3fc55555
   21c50:	3fe00000 	.word	0x3fe00000
   21c54:	46c046c0 	.word	0x46c046c0

00021c58 <atan>:
   21c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   21c5a:	4bb3      	ldr	r3, [pc, #716]	(21f28 <atan+0x2d0>)
   21c5c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   21c60:	b087      	sub	sp, #28
   21c62:	429c      	cmp	r4, r3
   21c64:	4606      	mov	r6, r0
   21c66:	460f      	mov	r7, r1
   21c68:	9104      	str	r1, [sp, #16]
   21c6a:	dd1b      	ble.n	21ca4 <atan+0x4c>
   21c6c:	4baf      	ldr	r3, [pc, #700]	(21f2c <atan+0x2d4>)
   21c6e:	429c      	cmp	r4, r3
   21c70:	dc08      	bgt.n	21c84 <atan+0x2c>
   21c72:	bf14      	ite	ne
   21c74:	2300      	movne	r3, #0
   21c76:	2301      	moveq	r3, #1
   21c78:	2800      	cmp	r0, #0
   21c7a:	bf0c      	ite	eq
   21c7c:	2300      	moveq	r3, #0
   21c7e:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   21c82:	b133      	cbz	r3, 21c92 <atan+0x3a>
   21c84:	4630      	mov	r0, r6
   21c86:	4639      	mov	r1, r7
   21c88:	4632      	mov	r2, r6
   21c8a:	463b      	mov	r3, r7
   21c8c:	f7fa fb58 	bl	1c340 <__adddf3>
   21c90:	e10c      	b.n	21eac <atan+0x254>
   21c92:	9904      	ldr	r1, [sp, #16]
   21c94:	2900      	cmp	r1, #0
   21c96:	dd02      	ble.n	21c9e <atan+0x46>
   21c98:	a687      	add	r6, pc, #540	(adr r6, 21eb8 <atan+0x260>)
   21c9a:	cec0      	ldmia	r6!, {r6, r7}
   21c9c:	e17b      	b.n	21f96 <atan+0x33e>
   21c9e:	a688      	add	r6, pc, #544	(adr r6, 21ec0 <atan+0x268>)
   21ca0:	cec0      	ldmia	r6!, {r6, r7}
   21ca2:	e178      	b.n	21f96 <atan+0x33e>
   21ca4:	4ba2      	ldr	r3, [pc, #648]	(21f30 <atan+0x2d8>)
   21ca6:	429c      	cmp	r4, r3
   21ca8:	dc0f      	bgt.n	21cca <atan+0x72>
   21caa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   21cae:	429c      	cmp	r4, r3
   21cb0:	dc6f      	bgt.n	21d92 <atan+0x13a>
   21cb2:	a285      	add	r2, pc, #532	(adr r2, 21ec8 <atan+0x270>)
   21cb4:	ca0c      	ldmia	r2!, {r2, r3}
   21cb6:	f7fa fb43 	bl	1c340 <__adddf3>
   21cba:	2200      	movs	r2, #0
   21cbc:	4b9d      	ldr	r3, [pc, #628]	(21f34 <atan+0x2dc>)
   21cbe:	f7fa ff7f 	bl	1cbc0 <__aeabi_dcmpgt>
   21cc2:	2800      	cmp	r0, #0
   21cc4:	f040 8167 	bne.w	21f96 <atan+0x33e>
   21cc8:	e063      	b.n	21d92 <atan+0x13a>
   21cca:	f000 f96d 	bl	21fa8 <fabs>
   21cce:	4b9a      	ldr	r3, [pc, #616]	(21f38 <atan+0x2e0>)
   21cd0:	4606      	mov	r6, r0
   21cd2:	429c      	cmp	r4, r3
   21cd4:	460f      	mov	r7, r1
   21cd6:	dc34      	bgt.n	21d42 <atan+0xea>
   21cd8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   21cdc:	429c      	cmp	r4, r3
   21cde:	dc1a      	bgt.n	21d16 <atan+0xbe>
   21ce0:	4632      	mov	r2, r6
   21ce2:	463b      	mov	r3, r7
   21ce4:	f7fa fb2c 	bl	1c340 <__adddf3>
   21ce8:	2200      	movs	r2, #0
   21cea:	4b92      	ldr	r3, [pc, #584]	(21f34 <atan+0x2dc>)
   21cec:	f7fa fb26 	bl	1c33c <__aeabi_dsub>
   21cf0:	2200      	movs	r2, #0
   21cf2:	4604      	mov	r4, r0
   21cf4:	460d      	mov	r5, r1
   21cf6:	4630      	mov	r0, r6
   21cf8:	4639      	mov	r1, r7
   21cfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21cfe:	f7fa fb1f 	bl	1c340 <__adddf3>
   21d02:	460b      	mov	r3, r1
   21d04:	4602      	mov	r2, r0
   21d06:	4629      	mov	r1, r5
   21d08:	4620      	mov	r0, r4
   21d0a:	f7fa fdf5 	bl	1c8f8 <__aeabi_ddiv>
   21d0e:	2300      	movs	r3, #0
   21d10:	4606      	mov	r6, r0
   21d12:	460f      	mov	r7, r1
   21d14:	e03f      	b.n	21d96 <atan+0x13e>
   21d16:	2200      	movs	r2, #0
   21d18:	4b86      	ldr	r3, [pc, #536]	(21f34 <atan+0x2dc>)
   21d1a:	f7fa fb0f 	bl	1c33c <__aeabi_dsub>
   21d1e:	2200      	movs	r2, #0
   21d20:	4604      	mov	r4, r0
   21d22:	460d      	mov	r5, r1
   21d24:	4630      	mov	r0, r6
   21d26:	4639      	mov	r1, r7
   21d28:	4b82      	ldr	r3, [pc, #520]	(21f34 <atan+0x2dc>)
   21d2a:	f7fa fb09 	bl	1c340 <__adddf3>
   21d2e:	4602      	mov	r2, r0
   21d30:	460b      	mov	r3, r1
   21d32:	4620      	mov	r0, r4
   21d34:	4629      	mov	r1, r5
   21d36:	f7fa fddf 	bl	1c8f8 <__aeabi_ddiv>
   21d3a:	460f      	mov	r7, r1
   21d3c:	4606      	mov	r6, r0
   21d3e:	2101      	movs	r1, #1
   21d40:	e025      	b.n	21d8e <atan+0x136>
   21d42:	4b7e      	ldr	r3, [pc, #504]	(21f3c <atan+0x2e4>)
   21d44:	429c      	cmp	r4, r3
   21d46:	dc19      	bgt.n	21d7c <atan+0x124>
   21d48:	2200      	movs	r2, #0
   21d4a:	4b7d      	ldr	r3, [pc, #500]	(21f40 <atan+0x2e8>)
   21d4c:	f7fa faf6 	bl	1c33c <__aeabi_dsub>
   21d50:	2200      	movs	r2, #0
   21d52:	4604      	mov	r4, r0
   21d54:	460d      	mov	r5, r1
   21d56:	4630      	mov	r0, r6
   21d58:	4639      	mov	r1, r7
   21d5a:	4b79      	ldr	r3, [pc, #484]	(21f40 <atan+0x2e8>)
   21d5c:	f7fa fca2 	bl	1c6a4 <__aeabi_dmul>
   21d60:	2200      	movs	r2, #0
   21d62:	4b74      	ldr	r3, [pc, #464]	(21f34 <atan+0x2dc>)
   21d64:	f7fa faec 	bl	1c340 <__adddf3>
   21d68:	460b      	mov	r3, r1
   21d6a:	4602      	mov	r2, r0
   21d6c:	4629      	mov	r1, r5
   21d6e:	4620      	mov	r0, r4
   21d70:	f7fa fdc2 	bl	1c8f8 <__aeabi_ddiv>
   21d74:	2302      	movs	r3, #2
   21d76:	4606      	mov	r6, r0
   21d78:	460f      	mov	r7, r1
   21d7a:	e00c      	b.n	21d96 <atan+0x13e>
   21d7c:	4632      	mov	r2, r6
   21d7e:	463b      	mov	r3, r7
   21d80:	2000      	movs	r0, #0
   21d82:	4970      	ldr	r1, [pc, #448]	(21f44 <atan+0x2ec>)
   21d84:	f7fa fdb8 	bl	1c8f8 <__aeabi_ddiv>
   21d88:	460f      	mov	r7, r1
   21d8a:	4606      	mov	r6, r0
   21d8c:	2103      	movs	r1, #3
   21d8e:	9105      	str	r1, [sp, #20]
   21d90:	e002      	b.n	21d98 <atan+0x140>
   21d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21d96:	9305      	str	r3, [sp, #20]
   21d98:	4632      	mov	r2, r6
   21d9a:	463b      	mov	r3, r7
   21d9c:	4630      	mov	r0, r6
   21d9e:	4639      	mov	r1, r7
   21da0:	f7fa fc80 	bl	1c6a4 <__aeabi_dmul>
   21da4:	4602      	mov	r2, r0
   21da6:	460b      	mov	r3, r1
   21da8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   21dac:	f7fa fc7a 	bl	1c6a4 <__aeabi_dmul>
   21db0:	a247      	add	r2, pc, #284	(adr r2, 21ed0 <atan+0x278>)
   21db2:	ca0c      	ldmia	r2!, {r2, r3}
   21db4:	4604      	mov	r4, r0
   21db6:	460d      	mov	r5, r1
   21db8:	f7fa fc74 	bl	1c6a4 <__aeabi_dmul>
   21dbc:	a246      	add	r2, pc, #280	(adr r2, 21ed8 <atan+0x280>)
   21dbe:	ca0c      	ldmia	r2!, {r2, r3}
   21dc0:	f7fa fabe 	bl	1c340 <__adddf3>
   21dc4:	4602      	mov	r2, r0
   21dc6:	460b      	mov	r3, r1
   21dc8:	4620      	mov	r0, r4
   21dca:	4629      	mov	r1, r5
   21dcc:	f7fa fc6a 	bl	1c6a4 <__aeabi_dmul>
   21dd0:	a243      	add	r2, pc, #268	(adr r2, 21ee0 <atan+0x288>)
   21dd2:	ca0c      	ldmia	r2!, {r2, r3}
   21dd4:	f7fa fab4 	bl	1c340 <__adddf3>
   21dd8:	4602      	mov	r2, r0
   21dda:	460b      	mov	r3, r1
   21ddc:	4620      	mov	r0, r4
   21dde:	4629      	mov	r1, r5
   21de0:	f7fa fc60 	bl	1c6a4 <__aeabi_dmul>
   21de4:	a240      	add	r2, pc, #256	(adr r2, 21ee8 <atan+0x290>)
   21de6:	ca0c      	ldmia	r2!, {r2, r3}
   21de8:	f7fa faaa 	bl	1c340 <__adddf3>
   21dec:	4602      	mov	r2, r0
   21dee:	460b      	mov	r3, r1
   21df0:	4620      	mov	r0, r4
   21df2:	4629      	mov	r1, r5
   21df4:	f7fa fc56 	bl	1c6a4 <__aeabi_dmul>
   21df8:	a23d      	add	r2, pc, #244	(adr r2, 21ef0 <atan+0x298>)
   21dfa:	ca0c      	ldmia	r2!, {r2, r3}
   21dfc:	f7fa faa0 	bl	1c340 <__adddf3>
   21e00:	4602      	mov	r2, r0
   21e02:	460b      	mov	r3, r1
   21e04:	4620      	mov	r0, r4
   21e06:	4629      	mov	r1, r5
   21e08:	f7fa fc4c 	bl	1c6a4 <__aeabi_dmul>
   21e0c:	a23a      	add	r2, pc, #232	(adr r2, 21ef8 <atan+0x2a0>)
   21e0e:	ca0c      	ldmia	r2!, {r2, r3}
   21e10:	f7fa fa96 	bl	1c340 <__adddf3>
   21e14:	4602      	mov	r2, r0
   21e16:	460b      	mov	r3, r1
   21e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   21e1c:	f7fa fc42 	bl	1c6a4 <__aeabi_dmul>
   21e20:	a237      	add	r2, pc, #220	(adr r2, 21f00 <atan+0x2a8>)
   21e22:	ca0c      	ldmia	r2!, {r2, r3}
   21e24:	e88d 0003 	stmia.w	sp, {r0, r1}
   21e28:	4620      	mov	r0, r4
   21e2a:	4629      	mov	r1, r5
   21e2c:	f7fa fc3a 	bl	1c6a4 <__aeabi_dmul>
   21e30:	a235      	add	r2, pc, #212	(adr r2, 21f08 <atan+0x2b0>)
   21e32:	ca0c      	ldmia	r2!, {r2, r3}
   21e34:	f7fa fa82 	bl	1c33c <__aeabi_dsub>
   21e38:	4602      	mov	r2, r0
   21e3a:	460b      	mov	r3, r1
   21e3c:	4620      	mov	r0, r4
   21e3e:	4629      	mov	r1, r5
   21e40:	f7fa fc30 	bl	1c6a4 <__aeabi_dmul>
   21e44:	a232      	add	r2, pc, #200	(adr r2, 21f10 <atan+0x2b8>)
   21e46:	ca0c      	ldmia	r2!, {r2, r3}
   21e48:	f7fa fa78 	bl	1c33c <__aeabi_dsub>
   21e4c:	4602      	mov	r2, r0
   21e4e:	460b      	mov	r3, r1
   21e50:	4620      	mov	r0, r4
   21e52:	4629      	mov	r1, r5
   21e54:	f7fa fc26 	bl	1c6a4 <__aeabi_dmul>
   21e58:	a22f      	add	r2, pc, #188	(adr r2, 21f18 <atan+0x2c0>)
   21e5a:	ca0c      	ldmia	r2!, {r2, r3}
   21e5c:	f7fa fa6e 	bl	1c33c <__aeabi_dsub>
   21e60:	4602      	mov	r2, r0
   21e62:	460b      	mov	r3, r1
   21e64:	4620      	mov	r0, r4
   21e66:	4629      	mov	r1, r5
   21e68:	f7fa fc1c 	bl	1c6a4 <__aeabi_dmul>
   21e6c:	a22c      	add	r2, pc, #176	(adr r2, 21f20 <atan+0x2c8>)
   21e6e:	ca0c      	ldmia	r2!, {r2, r3}
   21e70:	f7fa fa64 	bl	1c33c <__aeabi_dsub>
   21e74:	4602      	mov	r2, r0
   21e76:	460b      	mov	r3, r1
   21e78:	4620      	mov	r0, r4
   21e7a:	4629      	mov	r1, r5
   21e7c:	f7fa fc12 	bl	1c6a4 <__aeabi_dmul>
   21e80:	460b      	mov	r3, r1
   21e82:	9905      	ldr	r1, [sp, #20]
   21e84:	4602      	mov	r2, r0
   21e86:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   21e8a:	d15d      	bne.n	21f48 <atan+0x2f0>
   21e8c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   21e90:	f7fa fa56 	bl	1c340 <__adddf3>
   21e94:	4602      	mov	r2, r0
   21e96:	460b      	mov	r3, r1
   21e98:	4630      	mov	r0, r6
   21e9a:	4639      	mov	r1, r7
   21e9c:	f7fa fc02 	bl	1c6a4 <__aeabi_dmul>
   21ea0:	4602      	mov	r2, r0
   21ea2:	460b      	mov	r3, r1
   21ea4:	4630      	mov	r0, r6
   21ea6:	4639      	mov	r1, r7
   21ea8:	f7fa fa48 	bl	1c33c <__aeabi_dsub>
   21eac:	4606      	mov	r6, r0
   21eae:	460f      	mov	r7, r1
   21eb0:	e071      	b.n	21f96 <atan+0x33e>
   21eb2:	46c0      	nop			(mov r8, r8)
   21eb4:	46c0      	nop			(mov r8, r8)
   21eb6:	46c0      	nop			(mov r8, r8)
   21eb8:	54442d18 	.word	0x54442d18
   21ebc:	3ff921fb 	.word	0x3ff921fb
   21ec0:	54442d18 	.word	0x54442d18
   21ec4:	bff921fb 	.word	0xbff921fb
   21ec8:	8800759c 	.word	0x8800759c
   21ecc:	7e37e43c 	.word	0x7e37e43c
   21ed0:	e322da11 	.word	0xe322da11
   21ed4:	3f90ad3a 	.word	0x3f90ad3a
   21ed8:	24760deb 	.word	0x24760deb
   21edc:	3fa97b4b 	.word	0x3fa97b4b
   21ee0:	a0d03d51 	.word	0xa0d03d51
   21ee4:	3fb10d66 	.word	0x3fb10d66
   21ee8:	c54c206e 	.word	0xc54c206e
   21eec:	3fb745cd 	.word	0x3fb745cd
   21ef0:	920083ff 	.word	0x920083ff
   21ef4:	3fc24924 	.word	0x3fc24924
   21ef8:	5555550d 	.word	0x5555550d
   21efc:	3fd55555 	.word	0x3fd55555
   21f00:	2c6a6c2f 	.word	0x2c6a6c2f
   21f04:	bfa2b444 	.word	0xbfa2b444
   21f08:	52defd9a 	.word	0x52defd9a
   21f0c:	3fadde2d 	.word	0x3fadde2d
   21f10:	af749a6d 	.word	0xaf749a6d
   21f14:	3fb3b0f2 	.word	0x3fb3b0f2
   21f18:	fe231671 	.word	0xfe231671
   21f1c:	3fbc71c6 	.word	0x3fbc71c6
   21f20:	9998ebc4 	.word	0x9998ebc4
   21f24:	3fc99999 	.word	0x3fc99999
   21f28:	440fffff 	.word	0x440fffff
   21f2c:	7ff00000 	.word	0x7ff00000
   21f30:	3fdbffff 	.word	0x3fdbffff
   21f34:	3ff00000 	.word	0x3ff00000
   21f38:	3ff2ffff 	.word	0x3ff2ffff
   21f3c:	40037fff 	.word	0x40037fff
   21f40:	3ff80000 	.word	0x3ff80000
   21f44:	bff00000 	.word	0xbff00000
   21f48:	9905      	ldr	r1, [sp, #20]
   21f4a:	4c15      	ldr	r4, [pc, #84]	(21fa0 <atan+0x348>)
   21f4c:	00cd      	lsls	r5, r1, #3
   21f4e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   21f52:	f7fa f9f5 	bl	1c340 <__adddf3>
   21f56:	4602      	mov	r2, r0
   21f58:	460b      	mov	r3, r1
   21f5a:	4630      	mov	r0, r6
   21f5c:	4639      	mov	r1, r7
   21f5e:	f7fa fba1 	bl	1c6a4 <__aeabi_dmul>
   21f62:	4b10      	ldr	r3, [pc, #64]	(21fa4 <atan+0x34c>)
   21f64:	1964      	adds	r4, r4, r5
   21f66:	195b      	adds	r3, r3, r5
   21f68:	cb0c      	ldmia	r3!, {r2, r3}
   21f6a:	f7fa f9e7 	bl	1c33c <__aeabi_dsub>
   21f6e:	4632      	mov	r2, r6
   21f70:	463b      	mov	r3, r7
   21f72:	f7fa f9e3 	bl	1c33c <__aeabi_dsub>
   21f76:	4602      	mov	r2, r0
   21f78:	460b      	mov	r3, r1
   21f7a:	e894 0003 	ldmia.w	r4, {r0, r1}
   21f7e:	f7fa f9dd 	bl	1c33c <__aeabi_dsub>
   21f82:	9b04      	ldr	r3, [sp, #16]
   21f84:	2b00      	cmp	r3, #0
   21f86:	bfa7      	ittee	ge
   21f88:	4602      	movge	r2, r0
   21f8a:	460b      	movge	r3, r1
   21f8c:	4602      	movlt	r2, r0
   21f8e:	f101 4300 	addlt.w	r3, r1, #2147483648	; 0x80000000
   21f92:	4616      	mov	r6, r2
   21f94:	461f      	mov	r7, r3
   21f96:	4630      	mov	r0, r6
   21f98:	4639      	mov	r1, r7
   21f9a:	b007      	add	sp, #28
   21f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21f9e:	46c0      	nop			(mov r8, r8)
   21fa0:	00025838 	.word	0x00025838
   21fa4:	00025858 	.word	0x00025858

00021fa8 <fabs>:
   21fa8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   21fac:	b530      	push	{r4, r5, lr}
   21fae:	460d      	mov	r5, r1
   21fb0:	4604      	mov	r4, r0
   21fb2:	4619      	mov	r1, r3
   21fb4:	bd30      	pop	{r4, r5, pc}
   21fb6:	46c0      	nop			(mov r8, r8)

00021fb8 <floor>:
   21fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   21fba:	150b      	asrs	r3, r1, #20
   21fbc:	055b      	lsls	r3, r3, #21
   21fbe:	0d5b      	lsrs	r3, r3, #21
   21fc0:	f5a3 757e 	sub.w	r5, r3, #1016	; 0x3f8
   21fc4:	3d07      	subs	r5, #7
   21fc6:	b083      	sub	sp, #12
   21fc8:	2d13      	cmp	r5, #19
   21fca:	460c      	mov	r4, r1
   21fcc:	9001      	str	r0, [sp, #4]
   21fce:	4606      	mov	r6, r0
   21fd0:	dc32      	bgt.n	22038 <floor+0x80>
   21fd2:	2d00      	cmp	r5, #0
   21fd4:	da14      	bge.n	22000 <floor+0x48>
   21fd6:	a230      	add	r2, pc, #192	(adr r2, 22098 <floor+0xe0>)
   21fd8:	ca0c      	ldmia	r2!, {r2, r3}
   21fda:	f7fa f9b1 	bl	1c340 <__adddf3>
   21fde:	2200      	movs	r2, #0
   21fe0:	2300      	movs	r3, #0
   21fe2:	f7fa fded 	bl	1cbc0 <__aeabi_dcmpgt>
   21fe6:	2800      	cmp	r0, #0
   21fe8:	d051      	beq.n	2208e <floor+0xd6>
   21fea:	2c00      	cmp	r4, #0
   21fec:	db01      	blt.n	21ff2 <floor+0x3a>
   21fee:	2400      	movs	r4, #0
   21ff0:	e020      	b.n	22034 <floor+0x7c>
   21ff2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   21ff6:	4333      	orrs	r3, r6
   21ff8:	4b29      	ldr	r3, [pc, #164]	(220a0 <floor+0xe8>)
   21ffa:	bf18      	it	ne
   21ffc:	461c      	movne	r4, r3
   21ffe:	e019      	b.n	22034 <floor+0x7c>
   22000:	4b28      	ldr	r3, [pc, #160]	(220a4 <floor+0xec>)
   22002:	9a01      	ldr	r2, [sp, #4]
   22004:	fa53 f705 	asrs.w	r7, r3, r5
   22008:	ea07 0301 	and.w	r3, r7, r1
   2200c:	431a      	orrs	r2, r3
   2200e:	d040      	beq.n	22092 <floor+0xda>
   22010:	a221      	add	r2, pc, #132	(adr r2, 22098 <floor+0xe0>)
   22012:	ca0c      	ldmia	r2!, {r2, r3}
   22014:	f7fa f994 	bl	1c340 <__adddf3>
   22018:	2200      	movs	r2, #0
   2201a:	2300      	movs	r3, #0
   2201c:	f7fa fdd0 	bl	1cbc0 <__aeabi_dcmpgt>
   22020:	2800      	cmp	r0, #0
   22022:	d034      	beq.n	2208e <floor+0xd6>
   22024:	2c00      	cmp	r4, #0
   22026:	da03      	bge.n	22030 <floor+0x78>
   22028:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   2202c:	412b      	asrs	r3, r5
   2202e:	18e4      	adds	r4, r4, r3
   22030:	ea24 0407 	bic.w	r4, r4, r7
   22034:	2600      	movs	r6, #0
   22036:	e02a      	b.n	2208e <floor+0xd6>
   22038:	2d33      	cmp	r5, #51
   2203a:	dd07      	ble.n	2204c <floor+0x94>
   2203c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   22040:	d127      	bne.n	22092 <floor+0xda>
   22042:	4602      	mov	r2, r0
   22044:	460b      	mov	r3, r1
   22046:	f7fa f97b 	bl	1c340 <__adddf3>
   2204a:	e022      	b.n	22092 <floor+0xda>
   2204c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
   22050:	3b03      	subs	r3, #3
   22052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22056:	fa32 f703 	lsrs.w	r7, r2, r3
   2205a:	4207      	tst	r7, r0
   2205c:	d019      	beq.n	22092 <floor+0xda>
   2205e:	a20e      	add	r2, pc, #56	(adr r2, 22098 <floor+0xe0>)
   22060:	ca0c      	ldmia	r2!, {r2, r3}
   22062:	f7fa f96d 	bl	1c340 <__adddf3>
   22066:	2200      	movs	r2, #0
   22068:	2300      	movs	r3, #0
   2206a:	f7fa fda9 	bl	1cbc0 <__aeabi_dcmpgt>
   2206e:	b170      	cbz	r0, 2208e <floor+0xd6>
   22070:	2c00      	cmp	r4, #0
   22072:	da0a      	bge.n	2208a <floor+0xd2>
   22074:	2d14      	cmp	r5, #20
   22076:	d007      	beq.n	22088 <floor+0xd0>
   22078:	2301      	movs	r3, #1
   2207a:	f1c5 0234 	rsb	r2, r5, #52	; 0x34
   2207e:	4093      	lsls	r3, r2
   22080:	18f6      	adds	r6, r6, r3
   22082:	9b01      	ldr	r3, [sp, #4]
   22084:	429e      	cmp	r6, r3
   22086:	d200      	bcs.n	2208a <floor+0xd2>
   22088:	3401      	adds	r4, #1
   2208a:	ea26 0607 	bic.w	r6, r6, r7
   2208e:	4630      	mov	r0, r6
   22090:	4621      	mov	r1, r4
   22092:	b003      	add	sp, #12
   22094:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22096:	46c0      	nop			(mov r8, r8)
   22098:	8800759c 	.word	0x8800759c
   2209c:	7e37e43c 	.word	0x7e37e43c
   220a0:	bff00000 	.word	0xbff00000
   220a4:	000fffff 	.word	0x000fffff

000220a8 <__isnand>:
   220a8:	460b      	mov	r3, r1
   220aa:	f1c0 0100 	rsb	r1, r0, #0	; 0x0
   220ae:	4301      	orrs	r1, r0
   220b0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   220b4:	ea40 70d1 	orr.w	r0, r0, r1, lsr #31
   220b8:	f1c0 40fe 	rsb	r0, r0, #2130706432	; 0x7f000000
   220bc:	f500 0070 	add.w	r0, r0, #15728640	; 0xf00000
   220c0:	0fc0      	lsrs	r0, r0, #31
   220c2:	4770      	bx	lr

000220c4 <matherr>:
   220c4:	2000      	movs	r0, #0
   220c6:	4770      	bx	lr

000220c8 <scalbn>:
   220c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   220ca:	4b37      	ldr	r3, [pc, #220]	(221a8 <scalbn+0xe0>)
   220cc:	460d      	mov	r5, r1
   220ce:	ea05 0303 	and.w	r3, r5, r3
   220d2:	4617      	mov	r7, r2
   220d4:	b081      	sub	sp, #4
   220d6:	4604      	mov	r4, r0
   220d8:	460e      	mov	r6, r1
   220da:	151a      	asrs	r2, r3, #20
   220dc:	b973      	cbnz	r3, 220fc <scalbn+0x34>
   220de:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   220e2:	4303      	orrs	r3, r0
   220e4:	d054      	beq.n	22190 <scalbn+0xc8>
   220e6:	4629      	mov	r1, r5
   220e8:	2200      	movs	r2, #0
   220ea:	4b30      	ldr	r3, [pc, #192]	(221ac <scalbn+0xe4>)
   220ec:	f7fa fada 	bl	1c6a4 <__aeabi_dmul>
   220f0:	4b2f      	ldr	r3, [pc, #188]	(221b0 <scalbn+0xe8>)
   220f2:	4604      	mov	r4, r0
   220f4:	429f      	cmp	r7, r3
   220f6:	460d      	mov	r5, r1
   220f8:	da0a      	bge.n	22110 <scalbn+0x48>
   220fa:	e037      	b.n	2216c <scalbn+0xa4>
   220fc:	f240 73ff 	movw	r3, #2047	; 0x7ff
   22100:	429a      	cmp	r2, r3
   22102:	d10c      	bne.n	2211e <scalbn+0x56>
   22104:	4629      	mov	r1, r5
   22106:	4602      	mov	r2, r0
   22108:	462b      	mov	r3, r5
   2210a:	f7fa f919 	bl	1c340 <__adddf3>
   2210e:	e03d      	b.n	2218c <scalbn+0xc4>
   22110:	4b25      	ldr	r3, [pc, #148]	(221a8 <scalbn+0xe0>)
   22112:	460e      	mov	r6, r1
   22114:	ea01 0303 	and.w	r3, r1, r3
   22118:	151b      	asrs	r3, r3, #20
   2211a:	f1a3 0236 	sub.w	r2, r3, #54	; 0x36
   2211e:	eb02 0c07 	add.w	ip, r2, r7
   22122:	f240 73fe 	movw	r3, #2046	; 0x7fe
   22126:	459c      	cmp	ip, r3
   22128:	dc11      	bgt.n	2214e <scalbn+0x86>
   2212a:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   2212e:	dd07      	ble.n	22140 <scalbn+0x78>
   22130:	f026 41fe 	bic.w	r1, r6, #2130706432	; 0x7f000000
   22134:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
   22138:	ea41 530c 	orr.w	r3, r1, ip, lsl #20
   2213c:	461d      	mov	r5, r3
   2213e:	e027      	b.n	22190 <scalbn+0xc8>
   22140:	f11c 0f35 	cmn.w	ip, #53	; 0x35
   22144:	da15      	bge.n	22172 <scalbn+0xaa>
   22146:	f24c 3350 	movw	r3, #50000	; 0xc350
   2214a:	429f      	cmp	r7, r3
   2214c:	dd08      	ble.n	22160 <scalbn+0x98>
   2214e:	4622      	mov	r2, r4
   22150:	462b      	mov	r3, r5
   22152:	a011      	add	r0, pc, #68	(adr r0, 22198 <scalbn+0xd0>)
   22154:	c803      	ldmia	r0!, {r0, r1}
   22156:	f000 f82f 	bl	221b8 <copysign>
   2215a:	a20f      	add	r2, pc, #60	(adr r2, 22198 <scalbn+0xd0>)
   2215c:	ca0c      	ldmia	r2!, {r2, r3}
   2215e:	e013      	b.n	22188 <scalbn+0xc0>
   22160:	a00f      	add	r0, pc, #60	(adr r0, 221a0 <scalbn+0xd8>)
   22162:	c803      	ldmia	r0!, {r0, r1}
   22164:	4622      	mov	r2, r4
   22166:	462b      	mov	r3, r5
   22168:	f000 f826 	bl	221b8 <copysign>
   2216c:	a20c      	add	r2, pc, #48	(adr r2, 221a0 <scalbn+0xd8>)
   2216e:	ca0c      	ldmia	r2!, {r2, r3}
   22170:	e00a      	b.n	22188 <scalbn+0xc0>
   22172:	f026 43fe 	bic.w	r3, r6, #2130706432	; 0x7f000000
   22176:	f10c 0236 	add.w	r2, ip, #54	; 0x36
   2217a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   2217e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
   22182:	4b0c      	ldr	r3, [pc, #48]	(221b4 <scalbn+0xec>)
   22184:	4620      	mov	r0, r4
   22186:	2200      	movs	r2, #0
   22188:	f7fa fa8c 	bl	1c6a4 <__aeabi_dmul>
   2218c:	4604      	mov	r4, r0
   2218e:	460d      	mov	r5, r1
   22190:	4620      	mov	r0, r4
   22192:	4629      	mov	r1, r5
   22194:	b001      	add	sp, #4
   22196:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22198:	8800759c 	.word	0x8800759c
   2219c:	7e37e43c 	.word	0x7e37e43c
   221a0:	c2f8f359 	.word	0xc2f8f359
   221a4:	01a56e1f 	.word	0x01a56e1f
   221a8:	7ff00000 	.word	0x7ff00000
   221ac:	43500000 	.word	0x43500000
   221b0:	ffff3cb0 	.word	0xffff3cb0
   221b4:	3c900000 	.word	0x3c900000

000221b8 <copysign>:
   221b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   221ba:	4606      	mov	r6, r0
   221bc:	460f      	mov	r7, r1
   221be:	f003 4000 	and.w	r0, r3, #2147483648	; 0x80000000
   221c2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   221c6:	461d      	mov	r5, r3
   221c8:	ea40 0301 	orr.w	r3, r0, r1
   221cc:	4614      	mov	r4, r2
   221ce:	4630      	mov	r0, r6
   221d0:	4619      	mov	r1, r3
   221d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000221d4 <abort>:
   221d4:	2006      	movs	r0, #6
   221d6:	f000 ffb1 	bl	2313c <raise>
   221da:	2001      	movs	r0, #1
   221dc:	f7f7 f972 	bl	194c4 <_exit>

000221e0 <__errno>:
   221e0:	4b01      	ldr	r3, [pc, #4]	(221e8 <__errno+0x8>)
   221e2:	6818      	ldr	r0, [r3, #0]
   221e4:	300c      	adds	r0, #12
   221e6:	4770      	bx	lr
   221e8:	20000044 	.word	0x20000044

000221ec <_fputc_r>:
   221ec:	b570      	push	{r4, r5, r6, lr}
   221ee:	4604      	mov	r4, r0
   221f0:	460e      	mov	r6, r1
   221f2:	4615      	mov	r5, r2
   221f4:	b118      	cbz	r0, 221fe <_fputc_r+0x12>
   221f6:	6983      	ldr	r3, [r0, #24]
   221f8:	b90b      	cbnz	r3, 221fe <_fputc_r+0x12>
   221fa:	f001 faf9 	bl	237f0 <__sinit>
   221fe:	4b0a      	ldr	r3, [pc, #40]	(22228 <_fputc_r+0x3c>)
   22200:	429d      	cmp	r5, r3
   22202:	bf08      	it	eq
   22204:	6825      	ldreq	r5, [r4, #0]
   22206:	d008      	beq.n	2221a <_fputc_r+0x2e>
   22208:	4b08      	ldr	r3, [pc, #32]	(2222c <_fputc_r+0x40>)
   2220a:	429d      	cmp	r5, r3
   2220c:	bf08      	it	eq
   2220e:	6865      	ldreq	r5, [r4, #4]
   22210:	d003      	beq.n	2221a <_fputc_r+0x2e>
   22212:	4b07      	ldr	r3, [pc, #28]	(22230 <_fputc_r+0x44>)
   22214:	429d      	cmp	r5, r3
   22216:	bf08      	it	eq
   22218:	68a5      	ldreq	r5, [r4, #8]
   2221a:	4620      	mov	r0, r4
   2221c:	4631      	mov	r1, r6
   2221e:	462a      	mov	r2, r5
   22220:	f000 fcc6 	bl	22bb0 <_putc_r>
   22224:	bd70      	pop	{r4, r5, r6, pc}
   22226:	46c0      	nop			(mov r8, r8)
   22228:	00025880 	.word	0x00025880
   2222c:	000258a0 	.word	0x000258a0
   22230:	000258c0 	.word	0x000258c0

00022234 <fputc>:
   22234:	b500      	push	{lr}
   22236:	4b05      	ldr	r3, [pc, #20]	(2224c <fputc+0x18>)
   22238:	4684      	mov	ip, r0
   2223a:	460a      	mov	r2, r1
   2223c:	b081      	sub	sp, #4
   2223e:	6818      	ldr	r0, [r3, #0]
   22240:	4661      	mov	r1, ip
   22242:	f7ff ffd3 	bl	221ec <_fputc_r>
   22246:	b001      	add	sp, #4
   22248:	bd00      	pop	{pc}
   2224a:	46c0      	nop			(mov r8, r8)
   2224c:	20000044 	.word	0x20000044

00022250 <_fputs_r>:
   22250:	b530      	push	{r4, r5, lr}
   22252:	4605      	mov	r5, r0
   22254:	b087      	sub	sp, #28
   22256:	4608      	mov	r0, r1
   22258:	4614      	mov	r4, r2
   2225a:	9104      	str	r1, [sp, #16]
   2225c:	f001 f824 	bl	232a8 <strlen>
   22260:	ab04      	add	r3, sp, #16
   22262:	9301      	str	r3, [sp, #4]
   22264:	2301      	movs	r3, #1
   22266:	9003      	str	r0, [sp, #12]
   22268:	9005      	str	r0, [sp, #20]
   2226a:	9302      	str	r3, [sp, #8]
   2226c:	b125      	cbz	r5, 22278 <_fputs_r+0x28>
   2226e:	69ab      	ldr	r3, [r5, #24]
   22270:	b913      	cbnz	r3, 22278 <_fputs_r+0x28>
   22272:	4628      	mov	r0, r5
   22274:	f001 fabc 	bl	237f0 <__sinit>
   22278:	4b10      	ldr	r3, [pc, #64]	(222bc <_fputs_r+0x6c>)
   2227a:	429c      	cmp	r4, r3
   2227c:	bf08      	it	eq
   2227e:	682c      	ldreq	r4, [r5, #0]
   22280:	d008      	beq.n	22294 <_fputs_r+0x44>
   22282:	4b0f      	ldr	r3, [pc, #60]	(222c0 <_fputs_r+0x70>)
   22284:	429c      	cmp	r4, r3
   22286:	bf08      	it	eq
   22288:	686c      	ldreq	r4, [r5, #4]
   2228a:	d003      	beq.n	22294 <_fputs_r+0x44>
   2228c:	4b0d      	ldr	r3, [pc, #52]	(222c4 <_fputs_r+0x74>)
   2228e:	429c      	cmp	r4, r3
   22290:	bf08      	it	eq
   22292:	68ac      	ldreq	r4, [r5, #8]
   22294:	89a3      	ldrh	r3, [r4, #12]
   22296:	4628      	mov	r0, r5
   22298:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2229c:	bf02      	ittt	eq
   2229e:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
   222a2:	81a3      	strheq	r3, [r4, #12]
   222a4:	6e63      	ldreq	r3, [r4, #100]
   222a6:	4621      	mov	r1, r4
   222a8:	bf04      	itt	eq
   222aa:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
   222ae:	6663      	streq	r3, [r4, #100]
   222b0:	aa01      	add	r2, sp, #4
   222b2:	f000 f817 	bl	222e4 <__sfvwrite_r>
   222b6:	b007      	add	sp, #28
   222b8:	bd30      	pop	{r4, r5, pc}
   222ba:	46c0      	nop			(mov r8, r8)
   222bc:	00025880 	.word	0x00025880
   222c0:	000258a0 	.word	0x000258a0
   222c4:	000258c0 	.word	0x000258c0

000222c8 <fputs>:
   222c8:	b500      	push	{lr}
   222ca:	4b05      	ldr	r3, [pc, #20]	(222e0 <fputs+0x18>)
   222cc:	4684      	mov	ip, r0
   222ce:	460a      	mov	r2, r1
   222d0:	b081      	sub	sp, #4
   222d2:	6818      	ldr	r0, [r3, #0]
   222d4:	4661      	mov	r1, ip
   222d6:	f7ff ffbb 	bl	22250 <_fputs_r>
   222da:	b001      	add	sp, #4
   222dc:	bd00      	pop	{pc}
   222de:	46c0      	nop			(mov r8, r8)
   222e0:	20000044 	.word	0x20000044

000222e4 <__sfvwrite_r>:
   222e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   222e6:	6893      	ldr	r3, [r2, #8]
   222e8:	b089      	sub	sp, #36
   222ea:	9001      	str	r0, [sp, #4]
   222ec:	460d      	mov	r5, r1
   222ee:	9200      	str	r2, [sp, #0]
   222f0:	2b00      	cmp	r3, #0
   222f2:	f000 815b 	beq.w	225ac <__sfvwrite_r+0x2c8>
   222f6:	898b      	ldrh	r3, [r1, #12]
   222f8:	f013 0f08 	tst.w	r3, #8	; 0x8
   222fc:	d001      	beq.n	22302 <__sfvwrite_r+0x1e>
   222fe:	690b      	ldr	r3, [r1, #16]
   22300:	b963      	cbnz	r3, 2231c <__sfvwrite_r+0x38>
   22302:	9801      	ldr	r0, [sp, #4]
   22304:	4629      	mov	r1, r5
   22306:	f001 f891 	bl	2342c <__swsetup_r>
   2230a:	b138      	cbz	r0, 2231c <__sfvwrite_r+0x38>
   2230c:	89ab      	ldrh	r3, [r5, #12]
   2230e:	9801      	ldr	r0, [sp, #4]
   22310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22314:	81ab      	strh	r3, [r5, #12]
   22316:	2309      	movs	r3, #9
   22318:	60c3      	str	r3, [r0, #12]
   2231a:	e144      	b.n	225a6 <__sfvwrite_r+0x2c2>
   2231c:	9a00      	ldr	r2, [sp, #0]
   2231e:	89ab      	ldrh	r3, [r5, #12]
   22320:	6812      	ldr	r2, [r2, #0]
   22322:	f013 0f02 	tst.w	r3, #2	; 0x2
   22326:	9202      	str	r2, [sp, #8]
   22328:	d021      	beq.n	2236e <__sfvwrite_r+0x8a>
   2232a:	2600      	movs	r6, #0
   2232c:	2700      	movs	r7, #0
   2232e:	e004      	b.n	2233a <__sfvwrite_r+0x56>
   22330:	9b02      	ldr	r3, [sp, #8]
   22332:	681f      	ldr	r7, [r3, #0]
   22334:	685e      	ldr	r6, [r3, #4]
   22336:	3308      	adds	r3, #8
   22338:	9302      	str	r3, [sp, #8]
   2233a:	2e00      	cmp	r6, #0
   2233c:	d0f8      	beq.n	22330 <__sfvwrite_r+0x4c>
   2233e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   22342:	bf34      	ite	cc
   22344:	4633      	movcc	r3, r6
   22346:	f44f 7380 	movcs.w	r3, #256	; 0x100
   2234a:	6a29      	ldr	r1, [r5, #32]
   2234c:	6aac      	ldr	r4, [r5, #40]
   2234e:	9801      	ldr	r0, [sp, #4]
   22350:	463a      	mov	r2, r7
   22352:	47a0      	blx	r4
   22354:	2800      	cmp	r0, #0
   22356:	f340 8122 	ble.w	2259e <__sfvwrite_r+0x2ba>
   2235a:	9a00      	ldr	r2, [sp, #0]
   2235c:	6893      	ldr	r3, [r2, #8]
   2235e:	1a1b      	subs	r3, r3, r0
   22360:	6093      	str	r3, [r2, #8]
   22362:	2b00      	cmp	r3, #0
   22364:	f000 8122 	beq.w	225ac <__sfvwrite_r+0x2c8>
   22368:	183f      	adds	r7, r7, r0
   2236a:	1a36      	subs	r6, r6, r0
   2236c:	e7e5      	b.n	2233a <__sfvwrite_r+0x56>
   2236e:	f013 0f01 	tst.w	r3, #1	; 0x1
   22372:	d005      	beq.n	22380 <__sfvwrite_r+0x9c>
   22374:	2700      	movs	r7, #0
   22376:	2300      	movs	r3, #0
   22378:	9306      	str	r3, [sp, #24]
   2237a:	9703      	str	r7, [sp, #12]
   2237c:	9704      	str	r7, [sp, #16]
   2237e:	e0aa      	b.n	224d6 <__sfvwrite_r+0x1f2>
   22380:	2600      	movs	r6, #0
   22382:	9607      	str	r6, [sp, #28]
   22384:	e006      	b.n	22394 <__sfvwrite_r+0xb0>
   22386:	9802      	ldr	r0, [sp, #8]
   22388:	9a02      	ldr	r2, [sp, #8]
   2238a:	6800      	ldr	r0, [r0, #0]
   2238c:	6856      	ldr	r6, [r2, #4]
   2238e:	3208      	adds	r2, #8
   22390:	9007      	str	r0, [sp, #28]
   22392:	9202      	str	r2, [sp, #8]
   22394:	2e00      	cmp	r6, #0
   22396:	d0f6      	beq.n	22386 <__sfvwrite_r+0xa2>
   22398:	89aa      	ldrh	r2, [r5, #12]
   2239a:	68ac      	ldr	r4, [r5, #8]
   2239c:	f412 7f00 	tst.w	r2, #512	; 0x200
   223a0:	d056      	beq.n	22450 <__sfvwrite_r+0x16c>
   223a2:	42a6      	cmp	r6, r4
   223a4:	d346      	bcc.n	22434 <__sfvwrite_r+0x150>
   223a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
   223aa:	d041      	beq.n	22430 <__sfvwrite_r+0x14c>
   223ac:	6929      	ldr	r1, [r5, #16]
   223ae:	682b      	ldr	r3, [r5, #0]
   223b0:	1a5b      	subs	r3, r3, r1
   223b2:	9305      	str	r3, [sp, #20]
   223b4:	696b      	ldr	r3, [r5, #20]
   223b6:	9805      	ldr	r0, [sp, #20]
   223b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   223bc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   223c0:	105f      	asrs	r7, r3, #1
   223c2:	1c43      	adds	r3, r0, #1
   223c4:	199b      	adds	r3, r3, r6
   223c6:	429f      	cmp	r7, r3
   223c8:	bf38      	it	cc
   223ca:	461f      	movcc	r7, r3
   223cc:	f412 6f80 	tst.w	r2, #1024	; 0x400
   223d0:	d016      	beq.n	22400 <__sfvwrite_r+0x11c>
   223d2:	9801      	ldr	r0, [sp, #4]
   223d4:	4639      	mov	r1, r7
   223d6:	f000 f95b 	bl	22690 <_malloc_r>
   223da:	4604      	mov	r4, r0
   223dc:	b918      	cbnz	r0, 223e6 <__sfvwrite_r+0x102>
   223de:	9a01      	ldr	r2, [sp, #4]
   223e0:	230c      	movs	r3, #12
   223e2:	60d3      	str	r3, [r2, #12]
   223e4:	e0db      	b.n	2259e <__sfvwrite_r+0x2ba>
   223e6:	6929      	ldr	r1, [r5, #16]
   223e8:	9a05      	ldr	r2, [sp, #20]
   223ea:	f000 fba7 	bl	22b3c <memcpy>
   223ee:	89ab      	ldrh	r3, [r5, #12]
   223f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   223f4:	041b      	lsls	r3, r3, #16
   223f6:	0c1b      	lsrs	r3, r3, #16
   223f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   223fc:	81ab      	strh	r3, [r5, #12]
   223fe:	e00d      	b.n	2241c <__sfvwrite_r+0x138>
   22400:	9801      	ldr	r0, [sp, #4]
   22402:	463a      	mov	r2, r7
   22404:	f000 fc2e 	bl	22c64 <_realloc_r>
   22408:	4604      	mov	r4, r0
   2240a:	b938      	cbnz	r0, 2241c <__sfvwrite_r+0x138>
   2240c:	9801      	ldr	r0, [sp, #4]
   2240e:	6929      	ldr	r1, [r5, #16]
   22410:	f001 fa74 	bl	238fc <_free_r>
   22414:	9801      	ldr	r0, [sp, #4]
   22416:	230c      	movs	r3, #12
   22418:	60c3      	str	r3, [r0, #12]
   2241a:	e0c0      	b.n	2259e <__sfvwrite_r+0x2ba>
   2241c:	9a05      	ldr	r2, [sp, #20]
   2241e:	612c      	str	r4, [r5, #16]
   22420:	eb04 0302 	add.w	r3, r4, r2
   22424:	602b      	str	r3, [r5, #0]
   22426:	ebc2 0307 	rsb	r3, r2, r7
   2242a:	616f      	str	r7, [r5, #20]
   2242c:	4634      	mov	r4, r6
   2242e:	60ab      	str	r3, [r5, #8]
   22430:	42a6      	cmp	r6, r4
   22432:	d200      	bcs.n	22436 <__sfvwrite_r+0x152>
   22434:	4634      	mov	r4, r6
   22436:	4622      	mov	r2, r4
   22438:	6828      	ldr	r0, [r5, #0]
   2243a:	9907      	ldr	r1, [sp, #28]
   2243c:	f000 fb8c 	bl	22b58 <memmove>
   22440:	68ab      	ldr	r3, [r5, #8]
   22442:	1b1b      	subs	r3, r3, r4
   22444:	60ab      	str	r3, [r5, #8]
   22446:	682b      	ldr	r3, [r5, #0]
   22448:	191b      	adds	r3, r3, r4
   2244a:	602b      	str	r3, [r5, #0]
   2244c:	4634      	mov	r4, r6
   2244e:	e02f      	b.n	224b0 <__sfvwrite_r+0x1cc>
   22450:	6828      	ldr	r0, [r5, #0]
   22452:	692a      	ldr	r2, [r5, #16]
   22454:	42a6      	cmp	r6, r4
   22456:	bf94      	ite	ls
   22458:	2300      	movls	r3, #0
   2245a:	2301      	movhi	r3, #1
   2245c:	4290      	cmp	r0, r2
   2245e:	bf94      	ite	ls
   22460:	2300      	movls	r3, #0
   22462:	f003 0301 	andhi.w	r3, r3, #1	; 0x1
   22466:	b163      	cbz	r3, 22482 <__sfvwrite_r+0x19e>
   22468:	9907      	ldr	r1, [sp, #28]
   2246a:	4622      	mov	r2, r4
   2246c:	f000 fb74 	bl	22b58 <memmove>
   22470:	682b      	ldr	r3, [r5, #0]
   22472:	9801      	ldr	r0, [sp, #4]
   22474:	191b      	adds	r3, r3, r4
   22476:	602b      	str	r3, [r5, #0]
   22478:	4629      	mov	r1, r5
   2247a:	f001 f849 	bl	23510 <_fflush_r>
   2247e:	b1b8      	cbz	r0, 224b0 <__sfvwrite_r+0x1cc>
   22480:	e08d      	b.n	2259e <__sfvwrite_r+0x2ba>
   22482:	696b      	ldr	r3, [r5, #20]
   22484:	429e      	cmp	r6, r3
   22486:	d308      	bcc.n	2249a <__sfvwrite_r+0x1b6>
   22488:	6aac      	ldr	r4, [r5, #40]
   2248a:	6a29      	ldr	r1, [r5, #32]
   2248c:	9801      	ldr	r0, [sp, #4]
   2248e:	9a07      	ldr	r2, [sp, #28]
   22490:	47a0      	blx	r4
   22492:	2800      	cmp	r0, #0
   22494:	4604      	mov	r4, r0
   22496:	dc0b      	bgt.n	224b0 <__sfvwrite_r+0x1cc>
   22498:	e081      	b.n	2259e <__sfvwrite_r+0x2ba>
   2249a:	9907      	ldr	r1, [sp, #28]
   2249c:	4632      	mov	r2, r6
   2249e:	f000 fb5b 	bl	22b58 <memmove>
   224a2:	68ab      	ldr	r3, [r5, #8]
   224a4:	4634      	mov	r4, r6
   224a6:	1b9b      	subs	r3, r3, r6
   224a8:	60ab      	str	r3, [r5, #8]
   224aa:	682b      	ldr	r3, [r5, #0]
   224ac:	199b      	adds	r3, r3, r6
   224ae:	602b      	str	r3, [r5, #0]
   224b0:	9800      	ldr	r0, [sp, #0]
   224b2:	6883      	ldr	r3, [r0, #8]
   224b4:	1b1b      	subs	r3, r3, r4
   224b6:	6083      	str	r3, [r0, #8]
   224b8:	2b00      	cmp	r3, #0
   224ba:	d077      	beq.n	225ac <__sfvwrite_r+0x2c8>
   224bc:	9a07      	ldr	r2, [sp, #28]
   224be:	1b36      	subs	r6, r6, r4
   224c0:	1912      	adds	r2, r2, r4
   224c2:	9207      	str	r2, [sp, #28]
   224c4:	e766      	b.n	22394 <__sfvwrite_r+0xb0>
   224c6:	9b02      	ldr	r3, [sp, #8]
   224c8:	2200      	movs	r2, #0
   224ca:	6858      	ldr	r0, [r3, #4]
   224cc:	681f      	ldr	r7, [r3, #0]
   224ce:	3308      	adds	r3, #8
   224d0:	9006      	str	r0, [sp, #24]
   224d2:	9302      	str	r3, [sp, #8]
   224d4:	9203      	str	r2, [sp, #12]
   224d6:	9b06      	ldr	r3, [sp, #24]
   224d8:	2b00      	cmp	r3, #0
   224da:	d0f4      	beq.n	224c6 <__sfvwrite_r+0x1e2>
   224dc:	9803      	ldr	r0, [sp, #12]
   224de:	b980      	cbnz	r0, 22502 <__sfvwrite_r+0x21e>
   224e0:	4638      	mov	r0, r7
   224e2:	210a      	movs	r1, #10
   224e4:	461a      	mov	r2, r3
   224e6:	f000 fb0b 	bl	22b00 <memchr>
   224ea:	b128      	cbz	r0, 224f8 <__sfvwrite_r+0x214>
   224ec:	1c43      	adds	r3, r0, #1
   224ee:	1bdb      	subs	r3, r3, r7
   224f0:	2201      	movs	r2, #1
   224f2:	9304      	str	r3, [sp, #16]
   224f4:	9203      	str	r2, [sp, #12]
   224f6:	e004      	b.n	22502 <__sfvwrite_r+0x21e>
   224f8:	9b06      	ldr	r3, [sp, #24]
   224fa:	2001      	movs	r0, #1
   224fc:	3301      	adds	r3, #1
   224fe:	9304      	str	r3, [sp, #16]
   22500:	9003      	str	r0, [sp, #12]
   22502:	9a06      	ldr	r2, [sp, #24]
   22504:	68ab      	ldr	r3, [r5, #8]
   22506:	9e04      	ldr	r6, [sp, #16]
   22508:	f8d5 c014 	ldr.w	ip, [r5, #20]
   2250c:	4296      	cmp	r6, r2
   2250e:	bf28      	it	cs
   22510:	4616      	movcs	r6, r2
   22512:	eb0c 0403 	add.w	r4, ip, r3
   22516:	6828      	ldr	r0, [r5, #0]
   22518:	692a      	ldr	r2, [r5, #16]
   2251a:	42a6      	cmp	r6, r4
   2251c:	bfd4      	ite	le
   2251e:	2300      	movle	r3, #0
   22520:	2301      	movgt	r3, #1
   22522:	4290      	cmp	r0, r2
   22524:	bf94      	ite	ls
   22526:	2300      	movls	r3, #0
   22528:	f003 0301 	andhi.w	r3, r3, #1	; 0x1
   2252c:	b163      	cbz	r3, 22548 <__sfvwrite_r+0x264>
   2252e:	4639      	mov	r1, r7
   22530:	4622      	mov	r2, r4
   22532:	f000 fb11 	bl	22b58 <memmove>
   22536:	682b      	ldr	r3, [r5, #0]
   22538:	9801      	ldr	r0, [sp, #4]
   2253a:	191b      	adds	r3, r3, r4
   2253c:	602b      	str	r3, [r5, #0]
   2253e:	4629      	mov	r1, r5
   22540:	f000 ffe6 	bl	23510 <_fflush_r>
   22544:	b1b8      	cbz	r0, 22576 <__sfvwrite_r+0x292>
   22546:	e02a      	b.n	2259e <__sfvwrite_r+0x2ba>
   22548:	4566      	cmp	r6, ip
   2254a:	db09      	blt.n	22560 <__sfvwrite_r+0x27c>
   2254c:	6aac      	ldr	r4, [r5, #40]
   2254e:	6a29      	ldr	r1, [r5, #32]
   22550:	9801      	ldr	r0, [sp, #4]
   22552:	463a      	mov	r2, r7
   22554:	4663      	mov	r3, ip
   22556:	47a0      	blx	r4
   22558:	2800      	cmp	r0, #0
   2255a:	4604      	mov	r4, r0
   2255c:	dc0b      	bgt.n	22576 <__sfvwrite_r+0x292>
   2255e:	e01e      	b.n	2259e <__sfvwrite_r+0x2ba>
   22560:	4639      	mov	r1, r7
   22562:	4632      	mov	r2, r6
   22564:	f000 faf8 	bl	22b58 <memmove>
   22568:	68ab      	ldr	r3, [r5, #8]
   2256a:	4634      	mov	r4, r6
   2256c:	1b9b      	subs	r3, r3, r6
   2256e:	60ab      	str	r3, [r5, #8]
   22570:	682b      	ldr	r3, [r5, #0]
   22572:	199b      	adds	r3, r3, r6
   22574:	602b      	str	r3, [r5, #0]
   22576:	9b04      	ldr	r3, [sp, #16]
   22578:	1b1b      	subs	r3, r3, r4
   2257a:	9304      	str	r3, [sp, #16]
   2257c:	d105      	bne.n	2258a <__sfvwrite_r+0x2a6>
   2257e:	9801      	ldr	r0, [sp, #4]
   22580:	4629      	mov	r1, r5
   22582:	f000 ffc5 	bl	23510 <_fflush_r>
   22586:	b950      	cbnz	r0, 2259e <__sfvwrite_r+0x2ba>
   22588:	9003      	str	r0, [sp, #12]
   2258a:	9a00      	ldr	r2, [sp, #0]
   2258c:	6893      	ldr	r3, [r2, #8]
   2258e:	1b1b      	subs	r3, r3, r4
   22590:	6093      	str	r3, [r2, #8]
   22592:	b15b      	cbz	r3, 225ac <__sfvwrite_r+0x2c8>
   22594:	9b06      	ldr	r3, [sp, #24]
   22596:	193f      	adds	r7, r7, r4
   22598:	1b1b      	subs	r3, r3, r4
   2259a:	9306      	str	r3, [sp, #24]
   2259c:	e79b      	b.n	224d6 <__sfvwrite_r+0x1f2>
   2259e:	89ab      	ldrh	r3, [r5, #12]
   225a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   225a4:	81ab      	strh	r3, [r5, #12]
   225a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   225aa:	e000      	b.n	225ae <__sfvwrite_r+0x2ca>
   225ac:	2000      	movs	r0, #0
   225ae:	b009      	add	sp, #36
   225b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   225b2:	46c0      	nop			(mov r8, r8)

000225b4 <_fwrite_r>:
   225b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   225b6:	fb02 f603 	mul.w	r6, r2, r3
   225ba:	b089      	sub	sp, #36
   225bc:	461f      	mov	r7, r3
   225be:	ab06      	add	r3, sp, #24
   225c0:	9303      	str	r3, [sp, #12]
   225c2:	2301      	movs	r3, #1
   225c4:	4605      	mov	r5, r0
   225c6:	9201      	str	r2, [sp, #4]
   225c8:	9c0e      	ldr	r4, [sp, #56]
   225ca:	9106      	str	r1, [sp, #24]
   225cc:	9607      	str	r6, [sp, #28]
   225ce:	9605      	str	r6, [sp, #20]
   225d0:	9304      	str	r3, [sp, #16]
   225d2:	b118      	cbz	r0, 225dc <_fwrite_r+0x28>
   225d4:	6983      	ldr	r3, [r0, #24]
   225d6:	b90b      	cbnz	r3, 225dc <_fwrite_r+0x28>
   225d8:	f001 f90a 	bl	237f0 <__sinit>
   225dc:	4b14      	ldr	r3, [pc, #80]	(22630 <_fwrite_r+0x7c>)
   225de:	429c      	cmp	r4, r3
   225e0:	bf08      	it	eq
   225e2:	682c      	ldreq	r4, [r5, #0]
   225e4:	d008      	beq.n	225f8 <_fwrite_r+0x44>
   225e6:	4b13      	ldr	r3, [pc, #76]	(22634 <_fwrite_r+0x80>)
   225e8:	429c      	cmp	r4, r3
   225ea:	bf08      	it	eq
   225ec:	686c      	ldreq	r4, [r5, #4]
   225ee:	d003      	beq.n	225f8 <_fwrite_r+0x44>
   225f0:	4b11      	ldr	r3, [pc, #68]	(22638 <_fwrite_r+0x84>)
   225f2:	429c      	cmp	r4, r3
   225f4:	bf08      	it	eq
   225f6:	68ac      	ldreq	r4, [r5, #8]
   225f8:	89a3      	ldrh	r3, [r4, #12]
   225fa:	4628      	mov	r0, r5
   225fc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   22600:	bf02      	ittt	eq
   22602:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
   22606:	81a3      	strheq	r3, [r4, #12]
   22608:	6e63      	ldreq	r3, [r4, #100]
   2260a:	4621      	mov	r1, r4
   2260c:	bf04      	itt	eq
   2260e:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
   22612:	6663      	streq	r3, [r4, #100]
   22614:	aa03      	add	r2, sp, #12
   22616:	f7ff fe65 	bl	222e4 <__sfvwrite_r>
   2261a:	b128      	cbz	r0, 22628 <_fwrite_r+0x74>
   2261c:	9b05      	ldr	r3, [sp, #20]
   2261e:	9a01      	ldr	r2, [sp, #4]
   22620:	ebc3 0306 	rsb	r3, r3, r6
   22624:	fbb3 f7f2 	udiv	r7, r3, r2
   22628:	4638      	mov	r0, r7
   2262a:	b009      	add	sp, #36
   2262c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2262e:	46c0      	nop			(mov r8, r8)
   22630:	00025880 	.word	0x00025880
   22634:	000258a0 	.word	0x000258a0
   22638:	000258c0 	.word	0x000258c0

0002263c <fwrite>:
   2263c:	b510      	push	{r4, lr}
   2263e:	4614      	mov	r4, r2
   22640:	4a06      	ldr	r2, [pc, #24]	(2265c <fwrite+0x20>)
   22642:	4684      	mov	ip, r0
   22644:	468e      	mov	lr, r1
   22646:	b082      	sub	sp, #8
   22648:	6810      	ldr	r0, [r2, #0]
   2264a:	4661      	mov	r1, ip
   2264c:	9300      	str	r3, [sp, #0]
   2264e:	4672      	mov	r2, lr
   22650:	4623      	mov	r3, r4
   22652:	f7ff ffaf 	bl	225b4 <_fwrite_r>
   22656:	b002      	add	sp, #8
   22658:	bd10      	pop	{r4, pc}
   2265a:	46c0      	nop			(mov r8, r8)
   2265c:	20000044 	.word	0x20000044

00022660 <free>:
   22660:	b500      	push	{lr}
   22662:	4b04      	ldr	r3, [pc, #16]	(22674 <free+0x14>)
   22664:	4601      	mov	r1, r0
   22666:	b081      	sub	sp, #4
   22668:	6818      	ldr	r0, [r3, #0]
   2266a:	f001 f947 	bl	238fc <_free_r>
   2266e:	b001      	add	sp, #4
   22670:	bd00      	pop	{pc}
   22672:	46c0      	nop			(mov r8, r8)
   22674:	20000044 	.word	0x20000044

00022678 <malloc>:
   22678:	b500      	push	{lr}
   2267a:	4b04      	ldr	r3, [pc, #16]	(2268c <malloc+0x14>)
   2267c:	4601      	mov	r1, r0
   2267e:	b081      	sub	sp, #4
   22680:	6818      	ldr	r0, [r3, #0]
   22682:	f000 f805 	bl	22690 <_malloc_r>
   22686:	b001      	add	sp, #4
   22688:	bd00      	pop	{pc}
   2268a:	46c0      	nop			(mov r8, r8)
   2268c:	20000044 	.word	0x20000044

00022690 <_malloc_r>:
   22690:	b5f0      	push	{r4, r5, r6, r7, lr}
   22692:	f101 020b 	add.w	r2, r1, #11	; 0xb
   22696:	2a16      	cmp	r2, #22
   22698:	bf8c      	ite	hi
   2269a:	f022 0607 	bichi.w	r6, r2, #7	; 0x7
   2269e:	2610      	movls	r6, #16
   226a0:	428e      	cmp	r6, r1
   226a2:	bf2c      	ite	cs
   226a4:	2300      	movcs	r3, #0
   226a6:	2301      	movcc	r3, #1
   226a8:	b083      	sub	sp, #12
   226aa:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
   226ae:	9000      	str	r0, [sp, #0]
   226b0:	d003      	beq.n	226ba <_malloc_r+0x2a>
   226b2:	9900      	ldr	r1, [sp, #0]
   226b4:	230c      	movs	r3, #12
   226b6:	60cb      	str	r3, [r1, #12]
   226b8:	e1fe      	b.n	22ab8 <_malloc_r+0x428>
   226ba:	9800      	ldr	r0, [sp, #0]
   226bc:	f000 fa74 	bl	22ba8 <__malloc_lock>
   226c0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   226c4:	d218      	bcs.n	226f8 <_malloc_r+0x68>
   226c6:	f8df 341c 	ldr.w	r3, [pc, #1052]	; 22ae4 <_malloc_r+0x454>
   226ca:	08f2      	lsrs	r2, r6, #3
   226cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   226d0:	68dc      	ldr	r4, [r3, #12]
   226d2:	429c      	cmp	r4, r3
   226d4:	d107      	bne.n	226e6 <_malloc_r+0x56>
   226d6:	f104 0308 	add.w	r3, r4, #8	; 0x8
   226da:	68dc      	ldr	r4, [r3, #12]
   226dc:	429c      	cmp	r4, r3
   226de:	bf08      	it	eq
   226e0:	f102 0e02 	addeq.w	lr, r2, #2	; 0x2
   226e4:	d04c      	beq.n	22780 <_malloc_r+0xf0>
   226e6:	6862      	ldr	r2, [r4, #4]
   226e8:	68e1      	ldr	r1, [r4, #12]
   226ea:	68a3      	ldr	r3, [r4, #8]
   226ec:	f022 0203 	bic.w	r2, r2, #3	; 0x3
   226f0:	60d9      	str	r1, [r3, #12]
   226f2:	608b      	str	r3, [r1, #8]
   226f4:	4422      	add	r2, r4
   226f6:	e03a      	b.n	2276e <_malloc_r+0xde>
   226f8:	0a72      	lsrs	r2, r6, #9
   226fa:	d101      	bne.n	22700 <_malloc_r+0x70>
   226fc:	08f2      	lsrs	r2, r6, #3
   226fe:	e01f      	b.n	22740 <_malloc_r+0xb0>
   22700:	2a04      	cmp	r2, #4
   22702:	d803      	bhi.n	2270c <_malloc_r+0x7c>
   22704:	09b3      	lsrs	r3, r6, #6
   22706:	f103 0238 	add.w	r2, r3, #56	; 0x38
   2270a:	e019      	b.n	22740 <_malloc_r+0xb0>
   2270c:	2a14      	cmp	r2, #20
   2270e:	d801      	bhi.n	22714 <_malloc_r+0x84>
   22710:	325b      	adds	r2, #91
   22712:	e015      	b.n	22740 <_malloc_r+0xb0>
   22714:	2a54      	cmp	r2, #84
   22716:	d803      	bhi.n	22720 <_malloc_r+0x90>
   22718:	0b33      	lsrs	r3, r6, #12
   2271a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   2271e:	e00f      	b.n	22740 <_malloc_r+0xb0>
   22720:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   22724:	d803      	bhi.n	2272e <_malloc_r+0x9e>
   22726:	0bf3      	lsrs	r3, r6, #15
   22728:	f103 0277 	add.w	r2, r3, #119	; 0x77
   2272c:	e008      	b.n	22740 <_malloc_r+0xb0>
   2272e:	f240 5354 	movw	r3, #1364	; 0x554
   22732:	429a      	cmp	r2, r3
   22734:	d901      	bls.n	2273a <_malloc_r+0xaa>
   22736:	227e      	movs	r2, #126
   22738:	e002      	b.n	22740 <_malloc_r+0xb0>
   2273a:	0cb3      	lsrs	r3, r6, #18
   2273c:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   22740:	4be8      	ldr	r3, [pc, #928]	(22ae4 <_malloc_r+0x454>)
   22742:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   22746:	f8dc 400c 	ldr.w	r4, [ip, #12]
   2274a:	e015      	b.n	22778 <_malloc_r+0xe8>
   2274c:	6863      	ldr	r3, [r4, #4]
   2274e:	f023 0003 	bic.w	r0, r3, #3	; 0x3
   22752:	ebc6 0300 	rsb	r3, r6, r0
   22756:	2b0f      	cmp	r3, #15
   22758:	dd01      	ble.n	2275e <_malloc_r+0xce>
   2275a:	3a01      	subs	r2, #1
   2275c:	e00e      	b.n	2277c <_malloc_r+0xec>
   2275e:	2b00      	cmp	r3, #0
   22760:	68e1      	ldr	r1, [r4, #12]
   22762:	db08      	blt.n	22776 <_malloc_r+0xe6>
   22764:	68a3      	ldr	r3, [r4, #8]
   22766:	60d9      	str	r1, [r3, #12]
   22768:	608b      	str	r3, [r1, #8]
   2276a:	eb04 0200 	add.w	r2, r4, r0
   2276e:	6853      	ldr	r3, [r2, #4]
   22770:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   22774:	e1ad      	b.n	22ad2 <_malloc_r+0x442>
   22776:	460c      	mov	r4, r1
   22778:	4564      	cmp	r4, ip
   2277a:	d1e7      	bne.n	2274c <_malloc_r+0xbc>
   2277c:	f102 0e01 	add.w	lr, r2, #1	; 0x1
   22780:	4dd9      	ldr	r5, [pc, #868]	(22ae8 <_malloc_r+0x458>)
   22782:	68ac      	ldr	r4, [r5, #8]
   22784:	42ac      	cmp	r4, r5
   22786:	d068      	beq.n	2285a <_malloc_r+0x1ca>
   22788:	6863      	ldr	r3, [r4, #4]
   2278a:	f023 0003 	bic.w	r0, r3, #3	; 0x3
   2278e:	ebc6 0100 	rsb	r1, r6, r0
   22792:	290f      	cmp	r1, #15
   22794:	dd0d      	ble.n	227b2 <_malloc_r+0x122>
   22796:	f046 0201 	orr.w	r2, r6, #1	; 0x1
   2279a:	eb04 0306 	add.w	r3, r4, r6
   2279e:	6062      	str	r2, [r4, #4]
   227a0:	f041 0201 	orr.w	r2, r1, #1	; 0x1
   227a4:	60eb      	str	r3, [r5, #12]
   227a6:	60ab      	str	r3, [r5, #8]
   227a8:	60dd      	str	r5, [r3, #12]
   227aa:	609d      	str	r5, [r3, #8]
   227ac:	605a      	str	r2, [r3, #4]
   227ae:	5059      	str	r1, [r3, r1]
   227b0:	e190      	b.n	22ad4 <_malloc_r+0x444>
   227b2:	2900      	cmp	r1, #0
   227b4:	60ed      	str	r5, [r5, #12]
   227b6:	60ad      	str	r5, [r5, #8]
   227b8:	dad7      	bge.n	2276a <_malloc_r+0xda>
   227ba:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   227be:	d210      	bcs.n	227e2 <_malloc_r+0x152>
   227c0:	08c0      	lsrs	r0, r0, #3
   227c2:	1083      	asrs	r3, r0, #2
   227c4:	2201      	movs	r2, #1
   227c6:	409a      	lsls	r2, r3
   227c8:	f1a5 0108 	sub.w	r1, r5, #8	; 0x8
   227cc:	684b      	ldr	r3, [r1, #4]
   227ce:	4313      	orrs	r3, r2
   227d0:	604b      	str	r3, [r1, #4]
   227d2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   227d6:	688b      	ldr	r3, [r1, #8]
   227d8:	60e1      	str	r1, [r4, #12]
   227da:	60a3      	str	r3, [r4, #8]
   227dc:	60dc      	str	r4, [r3, #12]
   227de:	608c      	str	r4, [r1, #8]
   227e0:	e03b      	b.n	2285a <_malloc_r+0x1ca>
   227e2:	0a42      	lsrs	r2, r0, #9
   227e4:	2a04      	cmp	r2, #4
   227e6:	d802      	bhi.n	227ee <_malloc_r+0x15e>
   227e8:	0983      	lsrs	r3, r0, #6
   227ea:	3338      	adds	r3, #56
   227ec:	e017      	b.n	2281e <_malloc_r+0x18e>
   227ee:	2a14      	cmp	r2, #20
   227f0:	bf98      	it	ls
   227f2:	f102 035b 	addls.w	r3, r2, #91	; 0x5b
   227f6:	d912      	bls.n	2281e <_malloc_r+0x18e>
   227f8:	2a54      	cmp	r2, #84
   227fa:	d802      	bhi.n	22802 <_malloc_r+0x172>
   227fc:	0b03      	lsrs	r3, r0, #12
   227fe:	336e      	adds	r3, #110
   22800:	e00d      	b.n	2281e <_malloc_r+0x18e>
   22802:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   22806:	d802      	bhi.n	2280e <_malloc_r+0x17e>
   22808:	0bc3      	lsrs	r3, r0, #15
   2280a:	3377      	adds	r3, #119
   2280c:	e007      	b.n	2281e <_malloc_r+0x18e>
   2280e:	f240 5354 	movw	r3, #1364	; 0x554
   22812:	429a      	cmp	r2, r3
   22814:	d901      	bls.n	2281a <_malloc_r+0x18a>
   22816:	237e      	movs	r3, #126
   22818:	e001      	b.n	2281e <_malloc_r+0x18e>
   2281a:	0c83      	lsrs	r3, r0, #18
   2281c:	337c      	adds	r3, #124
   2281e:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 22ae4 <_malloc_r+0x454>
   22822:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   22826:	6891      	ldr	r1, [r2, #8]
   22828:	4291      	cmp	r1, r2
   2282a:	d10c      	bne.n	22846 <_malloc_r+0x1b6>
   2282c:	109b      	asrs	r3, r3, #2
   2282e:	2201      	movs	r2, #1
   22830:	409a      	lsls	r2, r3
   22832:	f8dc 3004 	ldr.w	r3, [ip, #4]
   22836:	4313      	orrs	r3, r2
   22838:	f8cc 3004 	str.w	r3, [ip, #4]
   2283c:	460b      	mov	r3, r1
   2283e:	e008      	b.n	22852 <_malloc_r+0x1c2>
   22840:	6889      	ldr	r1, [r1, #8]
   22842:	4291      	cmp	r1, r2
   22844:	d004      	beq.n	22850 <_malloc_r+0x1c0>
   22846:	684b      	ldr	r3, [r1, #4]
   22848:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   2284c:	4298      	cmp	r0, r3
   2284e:	d3f7      	bcc.n	22840 <_malloc_r+0x1b0>
   22850:	68cb      	ldr	r3, [r1, #12]
   22852:	60e3      	str	r3, [r4, #12]
   22854:	60a1      	str	r1, [r4, #8]
   22856:	60cc      	str	r4, [r1, #12]
   22858:	609c      	str	r4, [r3, #8]
   2285a:	2301      	movs	r3, #1
   2285c:	ea4f 02ae 	mov.w	r2, lr, asr #2
   22860:	fa13 f102 	lsls.w	r1, r3, r2
   22864:	4b9f      	ldr	r3, [pc, #636]	(22ae4 <_malloc_r+0x454>)
   22866:	685a      	ldr	r2, [r3, #4]
   22868:	4291      	cmp	r1, r2
   2286a:	d86e      	bhi.n	2294a <_malloc_r+0x2ba>
   2286c:	4211      	tst	r1, r2
   2286e:	bf04      	itt	eq
   22870:	f02e 0303 	biceq.w	r3, lr, #3	; 0x3
   22874:	f103 0e04 	addeq.w	lr, r3, #4	; 0x4
   22878:	d002      	beq.n	22880 <_malloc_r+0x1f0>
   2287a:	e004      	b.n	22886 <_malloc_r+0x1f6>
   2287c:	f10e 0e04 	add.w	lr, lr, #4	; 0x4
   22880:	0049      	lsls	r1, r1, #1
   22882:	4211      	tst	r1, r2
   22884:	d0fa      	beq.n	2287c <_malloc_r+0x1ec>
   22886:	4a97      	ldr	r2, [pc, #604]	(22ae4 <_malloc_r+0x454>)
   22888:	4674      	mov	r4, lr
   2288a:	eb02 07ce 	add.w	r7, r2, lr, lsl #3
   2288e:	463a      	mov	r2, r7
   22890:	68d0      	ldr	r0, [r2, #12]
   22892:	e032      	b.n	228fa <_malloc_r+0x26a>
   22894:	6843      	ldr	r3, [r0, #4]
   22896:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   2289a:	ebc6 0c03 	rsb	ip, r6, r3
   2289e:	f1bc 0f0f 	cmp.w	ip, #15	; 0xf
   228a2:	dd14      	ble.n	228ce <_malloc_r+0x23e>
   228a4:	f046 0301 	orr.w	r3, r6, #1	; 0x1
   228a8:	4604      	mov	r4, r0
   228aa:	68c1      	ldr	r1, [r0, #12]
   228ac:	6043      	str	r3, [r0, #4]
   228ae:	f854 3f08 	ldr.w	r3, [r4, #8]!
   228b2:	eb00 0206 	add.w	r2, r0, r6
   228b6:	60d9      	str	r1, [r3, #12]
   228b8:	608b      	str	r3, [r1, #8]
   228ba:	f04c 0301 	orr.w	r3, ip, #1	; 0x1
   228be:	60ea      	str	r2, [r5, #12]
   228c0:	60aa      	str	r2, [r5, #8]
   228c2:	60d5      	str	r5, [r2, #12]
   228c4:	6095      	str	r5, [r2, #8]
   228c6:	6053      	str	r3, [r2, #4]
   228c8:	f842 c00c 	str.w	ip, [r2, ip]
   228cc:	e010      	b.n	228f0 <_malloc_r+0x260>
   228ce:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   228d2:	f8d0 c00c 	ldr.w	ip, [r0, #12]
   228d6:	db0f      	blt.n	228f8 <_malloc_r+0x268>
   228d8:	4403      	add	r3, r0
   228da:	685a      	ldr	r2, [r3, #4]
   228dc:	4604      	mov	r4, r0
   228de:	f042 0201 	orr.w	r2, r2, #1	; 0x1
   228e2:	605a      	str	r2, [r3, #4]
   228e4:	f854 3f08 	ldr.w	r3, [r4, #8]!
   228e8:	f8c3 c00c 	str.w	ip, [r3, #12]
   228ec:	f8cc 3008 	str.w	r3, [ip, #8]
   228f0:	9800      	ldr	r0, [sp, #0]
   228f2:	f000 f95b 	bl	22bac <__malloc_unlock>
   228f6:	e0f1      	b.n	22adc <_malloc_r+0x44c>
   228f8:	4660      	mov	r0, ip
   228fa:	4290      	cmp	r0, r2
   228fc:	d1ca      	bne.n	22894 <_malloc_r+0x204>
   228fe:	3401      	adds	r4, #1
   22900:	f014 0f03 	tst.w	r4, #3	; 0x3
   22904:	d001      	beq.n	2290a <_malloc_r+0x27a>
   22906:	3208      	adds	r2, #8
   22908:	e7c2      	b.n	22890 <_malloc_r+0x200>
   2290a:	4672      	mov	r2, lr
   2290c:	4638      	mov	r0, r7
   2290e:	f012 0f03 	tst.w	r2, #3	; 0x3
   22912:	d105      	bne.n	22920 <_malloc_r+0x290>
   22914:	4a73      	ldr	r2, [pc, #460]	(22ae4 <_malloc_r+0x454>)
   22916:	6853      	ldr	r3, [r2, #4]
   22918:	ea23 0301 	bic.w	r3, r3, r1
   2291c:	6053      	str	r3, [r2, #4]
   2291e:	e006      	b.n	2292e <_malloc_r+0x29e>
   22920:	4603      	mov	r3, r0
   22922:	f853 0908 	ldr.w	r0, [r3], #-8
   22926:	4298      	cmp	r0, r3
   22928:	d101      	bne.n	2292e <_malloc_r+0x29e>
   2292a:	3a01      	subs	r2, #1
   2292c:	e7ef      	b.n	2290e <_malloc_r+0x27e>
   2292e:	4a6d      	ldr	r2, [pc, #436]	(22ae4 <_malloc_r+0x454>)
   22930:	0049      	lsls	r1, r1, #1
   22932:	6853      	ldr	r3, [r2, #4]
   22934:	4299      	cmp	r1, r3
   22936:	d808      	bhi.n	2294a <_malloc_r+0x2ba>
   22938:	b139      	cbz	r1, 2294a <_malloc_r+0x2ba>
   2293a:	46a6      	mov	lr, r4
   2293c:	e002      	b.n	22944 <_malloc_r+0x2b4>
   2293e:	f10e 0e04 	add.w	lr, lr, #4	; 0x4
   22942:	0049      	lsls	r1, r1, #1
   22944:	4219      	tst	r1, r3
   22946:	d19e      	bne.n	22886 <_malloc_r+0x1f6>
   22948:	e7f9      	b.n	2293e <_malloc_r+0x2ae>
   2294a:	4b66      	ldr	r3, [pc, #408]	(22ae4 <_malloc_r+0x454>)
   2294c:	689f      	ldr	r7, [r3, #8]
   2294e:	687b      	ldr	r3, [r7, #4]
   22950:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   22954:	9301      	str	r3, [sp, #4]
   22956:	ebc6 0103 	rsb	r1, r6, r3
   2295a:	9a01      	ldr	r2, [sp, #4]
   2295c:	290f      	cmp	r1, #15
   2295e:	bfcc      	ite	gt
   22960:	2300      	movgt	r3, #0
   22962:	2301      	movle	r3, #1
   22964:	42b2      	cmp	r2, r6
   22966:	bf38      	it	cc
   22968:	f043 0301 	orrcc.w	r3, r3, #1	; 0x1
   2296c:	2b00      	cmp	r3, #0
   2296e:	f000 80a5 	beq.w	22abc <_malloc_r+0x42c>
   22972:	4b5e      	ldr	r3, [pc, #376]	(22aec <_malloc_r+0x45c>)
   22974:	681b      	ldr	r3, [r3, #0]
   22976:	3310      	adds	r3, #16
   22978:	eb03 0506 	add.w	r5, r3, r6
   2297c:	4b5c      	ldr	r3, [pc, #368]	(22af0 <_malloc_r+0x460>)
   2297e:	681b      	ldr	r3, [r3, #0]
   22980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   22984:	d006      	beq.n	22994 <_malloc_r+0x304>
   22986:	f505 637e 	add.w	r3, r5, #4064	; 0xfe0
   2298a:	331f      	adds	r3, #31
   2298c:	f423 657e 	bic.w	r5, r3, #4064	; 0xfe0
   22990:	f025 051f 	bic.w	r5, r5, #31	; 0x1f
   22994:	9800      	ldr	r0, [sp, #0]
   22996:	4629      	mov	r1, r5
   22998:	f000 fb92 	bl	230c0 <_sbrk_r>
   2299c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   229a0:	4604      	mov	r4, r0
   229a2:	d076      	beq.n	22a92 <_malloc_r+0x402>
   229a4:	9b01      	ldr	r3, [sp, #4]
   229a6:	eb07 0103 	add.w	r1, r7, r3
   229aa:	4288      	cmp	r0, r1
   229ac:	d202      	bcs.n	229b4 <_malloc_r+0x324>
   229ae:	4a4d      	ldr	r2, [pc, #308]	(22ae4 <_malloc_r+0x454>)
   229b0:	4297      	cmp	r7, r2
   229b2:	d16e      	bne.n	22a92 <_malloc_r+0x402>
   229b4:	4a4f      	ldr	r2, [pc, #316]	(22af4 <_malloc_r+0x464>)
   229b6:	428c      	cmp	r4, r1
   229b8:	6813      	ldr	r3, [r2, #0]
   229ba:	eb05 0003 	add.w	r0, r5, r3
   229be:	6010      	str	r0, [r2, #0]
   229c0:	d10b      	bne.n	229da <_malloc_r+0x34a>
   229c2:	0523      	lsls	r3, r4, #20
   229c4:	0d1b      	lsrs	r3, r3, #20
   229c6:	b943      	cbnz	r3, 229da <_malloc_r+0x34a>
   229c8:	4b46      	ldr	r3, [pc, #280]	(22ae4 <_malloc_r+0x454>)
   229ca:	9901      	ldr	r1, [sp, #4]
   229cc:	689a      	ldr	r2, [r3, #8]
   229ce:	eb05 0301 	add.w	r3, r5, r1
   229d2:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   229d6:	6053      	str	r3, [r2, #4]
   229d8:	e04f      	b.n	22a7a <_malloc_r+0x3ea>
   229da:	4a45      	ldr	r2, [pc, #276]	(22af0 <_malloc_r+0x460>)
   229dc:	6813      	ldr	r3, [r2, #0]
   229de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   229e2:	bf08      	it	eq
   229e4:	6014      	streq	r4, [r2, #0]
   229e6:	d004      	beq.n	229f2 <_malloc_r+0x362>
   229e8:	eb04 0300 	add.w	r3, r4, r0
   229ec:	4a41      	ldr	r2, [pc, #260]	(22af4 <_malloc_r+0x464>)
   229ee:	1a5b      	subs	r3, r3, r1
   229f0:	6013      	str	r3, [r2, #0]
   229f2:	f014 0207 	ands.w	r2, r4, #7	; 0x7
   229f6:	d101      	bne.n	229fc <_malloc_r+0x36c>
   229f8:	2200      	movs	r2, #0
   229fa:	e002      	b.n	22a02 <_malloc_r+0x372>
   229fc:	f1c2 0208 	rsb	r2, r2, #8	; 0x8
   22a00:	18a4      	adds	r4, r4, r2
   22a02:	eb04 0305 	add.w	r3, r4, r5
   22a06:	051b      	lsls	r3, r3, #20
   22a08:	0d1b      	lsrs	r3, r3, #20
   22a0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   22a0e:	ebc3 0502 	rsb	r5, r3, r2
   22a12:	4629      	mov	r1, r5
   22a14:	9800      	ldr	r0, [sp, #0]
   22a16:	f000 fb53 	bl	230c0 <_sbrk_r>
   22a1a:	4b36      	ldr	r3, [pc, #216]	(22af4 <_malloc_r+0x464>)
   22a1c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   22a20:	681a      	ldr	r2, [r3, #0]
   22a22:	bf04      	itt	eq
   22a24:	4620      	moveq	r0, r4
   22a26:	2500      	moveq	r5, #0
   22a28:	442a      	add	r2, r5
   22a2a:	601a      	str	r2, [r3, #0]
   22a2c:	4a2d      	ldr	r2, [pc, #180]	(22ae4 <_malloc_r+0x454>)
   22a2e:	ebc4 0300 	rsb	r3, r4, r0
   22a32:	195b      	adds	r3, r3, r5
   22a34:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   22a38:	4297      	cmp	r7, r2
   22a3a:	6094      	str	r4, [r2, #8]
   22a3c:	6063      	str	r3, [r4, #4]
   22a3e:	d01c      	beq.n	22a7a <_malloc_r+0x3ea>
   22a40:	9b01      	ldr	r3, [sp, #4]
   22a42:	2b0f      	cmp	r3, #15
   22a44:	d802      	bhi.n	22a4c <_malloc_r+0x3bc>
   22a46:	2301      	movs	r3, #1
   22a48:	6063      	str	r3, [r4, #4]
   22a4a:	e022      	b.n	22a92 <_malloc_r+0x402>
   22a4c:	9901      	ldr	r1, [sp, #4]
   22a4e:	2305      	movs	r3, #5
   22a50:	f1a1 020c 	sub.w	r2, r1, #12	; 0xc
   22a54:	f022 0207 	bic.w	r2, r2, #7	; 0x7
   22a58:	eb07 0102 	add.w	r1, r7, r2
   22a5c:	604b      	str	r3, [r1, #4]
   22a5e:	608b      	str	r3, [r1, #8]
   22a60:	687b      	ldr	r3, [r7, #4]
   22a62:	2a0f      	cmp	r2, #15
   22a64:	f003 0301 	and.w	r3, r3, #1	; 0x1
   22a68:	ea42 0303 	orr.w	r3, r2, r3
   22a6c:	607b      	str	r3, [r7, #4]
   22a6e:	d904      	bls.n	22a7a <_malloc_r+0x3ea>
   22a70:	f107 0108 	add.w	r1, r7, #8	; 0x8
   22a74:	9800      	ldr	r0, [sp, #0]
   22a76:	f000 ff41 	bl	238fc <_free_r>
   22a7a:	491f      	ldr	r1, [pc, #124]	(22af8 <_malloc_r+0x468>)
   22a7c:	4b1d      	ldr	r3, [pc, #116]	(22af4 <_malloc_r+0x464>)
   22a7e:	681a      	ldr	r2, [r3, #0]
   22a80:	680b      	ldr	r3, [r1, #0]
   22a82:	429a      	cmp	r2, r3
   22a84:	bf88      	it	hi
   22a86:	600a      	strhi	r2, [r1, #0]
   22a88:	491c      	ldr	r1, [pc, #112]	(22afc <_malloc_r+0x46c>)
   22a8a:	680b      	ldr	r3, [r1, #0]
   22a8c:	429a      	cmp	r2, r3
   22a8e:	bf88      	it	hi
   22a90:	600a      	strhi	r2, [r1, #0]
   22a92:	4a14      	ldr	r2, [pc, #80]	(22ae4 <_malloc_r+0x454>)
   22a94:	6893      	ldr	r3, [r2, #8]
   22a96:	685a      	ldr	r2, [r3, #4]
   22a98:	f022 0203 	bic.w	r2, r2, #3	; 0x3
   22a9c:	ebc6 0102 	rsb	r1, r6, r2
   22aa0:	290f      	cmp	r1, #15
   22aa2:	bfcc      	ite	gt
   22aa4:	2300      	movgt	r3, #0
   22aa6:	2301      	movle	r3, #1
   22aa8:	42b2      	cmp	r2, r6
   22aaa:	bf38      	it	cc
   22aac:	f043 0301 	orrcc.w	r3, r3, #1	; 0x1
   22ab0:	b123      	cbz	r3, 22abc <_malloc_r+0x42c>
   22ab2:	9800      	ldr	r0, [sp, #0]
   22ab4:	f000 f87a 	bl	22bac <__malloc_unlock>
   22ab8:	2400      	movs	r4, #0
   22aba:	e00f      	b.n	22adc <_malloc_r+0x44c>
   22abc:	4b09      	ldr	r3, [pc, #36]	(22ae4 <_malloc_r+0x454>)
   22abe:	689c      	ldr	r4, [r3, #8]
   22ac0:	f046 0301 	orr.w	r3, r6, #1	; 0x1
   22ac4:	6063      	str	r3, [r4, #4]
   22ac6:	4b07      	ldr	r3, [pc, #28]	(22ae4 <_malloc_r+0x454>)
   22ac8:	eb04 0206 	add.w	r2, r4, r6
   22acc:	609a      	str	r2, [r3, #8]
   22ace:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   22ad2:	6053      	str	r3, [r2, #4]
   22ad4:	9800      	ldr	r0, [sp, #0]
   22ad6:	f000 f869 	bl	22bac <__malloc_unlock>
   22ada:	3408      	adds	r4, #8
   22adc:	4620      	mov	r0, r4
   22ade:	b003      	add	sp, #12
   22ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22ae2:	46c0      	nop			(mov r8, r8)
   22ae4:	20000138 	.word	0x20000138
   22ae8:	20000140 	.word	0x20000140
   22aec:	20000e94 	.word	0x20000e94
   22af0:	20000544 	.word	0x20000544
   22af4:	20000ea0 	.word	0x20000ea0
   22af8:	20000e98 	.word	0x20000e98
   22afc:	20000e9c 	.word	0x20000e9c

00022b00 <memchr>:
   22b00:	b2c9      	uxtb	r1, r1
   22b02:	e004      	b.n	22b0e <memchr+0xe>
   22b04:	7803      	ldrb	r3, [r0, #0]
   22b06:	3a01      	subs	r2, #1
   22b08:	428b      	cmp	r3, r1
   22b0a:	d003      	beq.n	22b14 <memchr+0x14>
   22b0c:	3001      	adds	r0, #1
   22b0e:	2a00      	cmp	r2, #0
   22b10:	d1f8      	bne.n	22b04 <memchr+0x4>
   22b12:	2000      	movs	r0, #0
   22b14:	4770      	bx	lr
   22b16:	46c0      	nop			(mov r8, r8)

00022b18 <memcmp>:
   22b18:	b510      	push	{r4, lr}
   22b1a:	2300      	movs	r3, #0
   22b1c:	4604      	mov	r4, r0
   22b1e:	e009      	b.n	22b34 <memcmp+0x1c>
   22b20:	f814 c003 	ldrb.w	ip, [r4, r3]
   22b24:	5cc8      	ldrb	r0, [r1, r3]
   22b26:	3a01      	subs	r2, #1
   22b28:	3301      	adds	r3, #1
   22b2a:	4584      	cmp	ip, r0
   22b2c:	d002      	beq.n	22b34 <memcmp+0x1c>
   22b2e:	ebc0 000c 	rsb	r0, r0, ip
   22b32:	e002      	b.n	22b3a <memcmp+0x22>
   22b34:	2a00      	cmp	r2, #0
   22b36:	d1f3      	bne.n	22b20 <memcmp+0x8>
   22b38:	2000      	movs	r0, #0
   22b3a:	bd10      	pop	{r4, pc}

00022b3c <memcpy>:
   22b3c:	f04f 0c00 	mov.w	ip, #0	; 0x0
   22b40:	e006      	b.n	22b50 <memcpy+0x14>
   22b42:	f811 300c 	ldrb.w	r3, [r1, ip]
   22b46:	3a01      	subs	r2, #1
   22b48:	f800 300c 	strb.w	r3, [r0, ip]
   22b4c:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   22b50:	2a00      	cmp	r2, #0
   22b52:	d1f6      	bne.n	22b42 <memcpy+0x6>
   22b54:	4770      	bx	lr
   22b56:	46c0      	nop			(mov r8, r8)

00022b58 <memmove>:
   22b58:	4281      	cmp	r1, r0
   22b5a:	b510      	push	{r4, lr}
   22b5c:	d217      	bcs.n	22b8e <memmove+0x36>
   22b5e:	eb01 0c02 	add.w	ip, r1, r2
   22b62:	4560      	cmp	r0, ip
   22b64:	d213      	bcs.n	22b8e <memmove+0x36>
   22b66:	eb00 0402 	add.w	r4, r0, r2
   22b6a:	2100      	movs	r1, #0
   22b6c:	e003      	b.n	22b76 <memmove+0x1e>
   22b6e:	f81c 3001 	ldrb.w	r3, [ip, r1]
   22b72:	3a01      	subs	r2, #1
   22b74:	5463      	strb	r3, [r4, r1]
   22b76:	3901      	subs	r1, #1
   22b78:	2a00      	cmp	r2, #0
   22b7a:	d1f8      	bne.n	22b6e <memmove+0x16>
   22b7c:	e00b      	b.n	22b96 <memmove+0x3e>
   22b7e:	f811 300c 	ldrb.w	r3, [r1, ip]
   22b82:	3a01      	subs	r2, #1
   22b84:	f800 300c 	strb.w	r3, [r0, ip]
   22b88:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   22b8c:	e001      	b.n	22b92 <memmove+0x3a>
   22b8e:	f04f 0c00 	mov.w	ip, #0	; 0x0
   22b92:	2a00      	cmp	r2, #0
   22b94:	d1f3      	bne.n	22b7e <memmove+0x26>
   22b96:	bd10      	pop	{r4, pc}

00022b98 <memset>:
   22b98:	2300      	movs	r3, #0
   22b9a:	e002      	b.n	22ba2 <memset+0xa>
   22b9c:	54c1      	strb	r1, [r0, r3]
   22b9e:	3a01      	subs	r2, #1
   22ba0:	3301      	adds	r3, #1
   22ba2:	2a00      	cmp	r2, #0
   22ba4:	d1fa      	bne.n	22b9c <memset+0x4>
   22ba6:	4770      	bx	lr

00022ba8 <__malloc_lock>:
   22ba8:	4770      	bx	lr
   22baa:	46c0      	nop			(mov r8, r8)

00022bac <__malloc_unlock>:
   22bac:	4770      	bx	lr
   22bae:	46c0      	nop			(mov r8, r8)

00022bb0 <_putc_r>:
   22bb0:	b570      	push	{r4, r5, r6, lr}
   22bb2:	4605      	mov	r5, r0
   22bb4:	460e      	mov	r6, r1
   22bb6:	4614      	mov	r4, r2
   22bb8:	b118      	cbz	r0, 22bc2 <_putc_r+0x12>
   22bba:	6983      	ldr	r3, [r0, #24]
   22bbc:	b90b      	cbnz	r3, 22bc2 <_putc_r+0x12>
   22bbe:	f000 fe17 	bl	237f0 <__sinit>
   22bc2:	4b17      	ldr	r3, [pc, #92]	(22c20 <_putc_r+0x70>)
   22bc4:	429c      	cmp	r4, r3
   22bc6:	bf08      	it	eq
   22bc8:	682c      	ldreq	r4, [r5, #0]
   22bca:	d008      	beq.n	22bde <_putc_r+0x2e>
   22bcc:	4b15      	ldr	r3, [pc, #84]	(22c24 <_putc_r+0x74>)
   22bce:	429c      	cmp	r4, r3
   22bd0:	bf08      	it	eq
   22bd2:	686c      	ldreq	r4, [r5, #4]
   22bd4:	d003      	beq.n	22bde <_putc_r+0x2e>
   22bd6:	4b14      	ldr	r3, [pc, #80]	(22c28 <_putc_r+0x78>)
   22bd8:	429c      	cmp	r4, r3
   22bda:	bf08      	it	eq
   22bdc:	68ac      	ldreq	r4, [r5, #8]
   22bde:	68a3      	ldr	r3, [r4, #8]
   22be0:	1e5a      	subs	r2, r3, #1
   22be2:	2a00      	cmp	r2, #0
   22be4:	60a2      	str	r2, [r4, #8]
   22be6:	da13      	bge.n	22c10 <_putc_r+0x60>
   22be8:	69a3      	ldr	r3, [r4, #24]
   22bea:	429a      	cmp	r2, r3
   22bec:	db0a      	blt.n	22c04 <_putc_r+0x54>
   22bee:	6823      	ldr	r3, [r4, #0]
   22bf0:	701e      	strb	r6, [r3, #0]
   22bf2:	6823      	ldr	r3, [r4, #0]
   22bf4:	7818      	ldrb	r0, [r3, #0]
   22bf6:	280a      	cmp	r0, #10
   22bf8:	d001      	beq.n	22bfe <_putc_r+0x4e>
   22bfa:	3301      	adds	r3, #1
   22bfc:	e00d      	b.n	22c1a <_putc_r+0x6a>
   22bfe:	4628      	mov	r0, r5
   22c00:	210a      	movs	r1, #10
   22c02:	e001      	b.n	22c08 <_putc_r+0x58>
   22c04:	4628      	mov	r0, r5
   22c06:	4631      	mov	r1, r6
   22c08:	4622      	mov	r2, r4
   22c0a:	f000 fb85 	bl	23318 <__swbuf_r>
   22c0e:	e005      	b.n	22c1c <_putc_r+0x6c>
   22c10:	6823      	ldr	r3, [r4, #0]
   22c12:	701e      	strb	r6, [r3, #0]
   22c14:	6823      	ldr	r3, [r4, #0]
   22c16:	f813 0b01 	ldrb.w	r0, [r3], #1
   22c1a:	6023      	str	r3, [r4, #0]
   22c1c:	bd70      	pop	{r4, r5, r6, pc}
   22c1e:	46c0      	nop			(mov r8, r8)
   22c20:	00025880 	.word	0x00025880
   22c24:	000258a0 	.word	0x000258a0
   22c28:	000258c0 	.word	0x000258c0

00022c2c <putc>:
   22c2c:	b500      	push	{lr}
   22c2e:	4b05      	ldr	r3, [pc, #20]	(22c44 <putc+0x18>)
   22c30:	4684      	mov	ip, r0
   22c32:	460a      	mov	r2, r1
   22c34:	b081      	sub	sp, #4
   22c36:	6818      	ldr	r0, [r3, #0]
   22c38:	4661      	mov	r1, ip
   22c3a:	f7ff ffb9 	bl	22bb0 <_putc_r>
   22c3e:	b001      	add	sp, #4
   22c40:	bd00      	pop	{pc}
   22c42:	46c0      	nop			(mov r8, r8)
   22c44:	20000044 	.word	0x20000044

00022c48 <realloc>:
   22c48:	b500      	push	{lr}
   22c4a:	4b05      	ldr	r3, [pc, #20]	(22c60 <realloc+0x18>)
   22c4c:	4684      	mov	ip, r0
   22c4e:	460a      	mov	r2, r1
   22c50:	b081      	sub	sp, #4
   22c52:	6818      	ldr	r0, [r3, #0]
   22c54:	4661      	mov	r1, ip
   22c56:	f000 f805 	bl	22c64 <_realloc_r>
   22c5a:	b001      	add	sp, #4
   22c5c:	bd00      	pop	{pc}
   22c5e:	46c0      	nop			(mov r8, r8)
   22c60:	20000044 	.word	0x20000044

00022c64 <_realloc_r>:
   22c64:	b5f0      	push	{r4, r5, r6, r7, lr}
   22c66:	b087      	sub	sp, #28
   22c68:	9002      	str	r0, [sp, #8]
   22c6a:	460e      	mov	r6, r1
   22c6c:	9201      	str	r2, [sp, #4]
   22c6e:	b921      	cbnz	r1, 22c7a <_realloc_r+0x16>
   22c70:	4611      	mov	r1, r2
   22c72:	f7ff fd0d 	bl	22690 <_malloc_r>
   22c76:	4605      	mov	r5, r0
   22c78:	e19d      	b.n	22fb6 <_realloc_r+0x352>
   22c7a:	9802      	ldr	r0, [sp, #8]
   22c7c:	f7ff ff94 	bl	22ba8 <__malloc_lock>
   22c80:	9801      	ldr	r0, [sp, #4]
   22c82:	f1a6 0708 	sub.w	r7, r6, #8	; 0x8
   22c86:	f100 030b 	add.w	r3, r0, #11	; 0xb
   22c8a:	2b16      	cmp	r3, #22
   22c8c:	bf88      	it	hi
   22c8e:	f023 0307 	bichi.w	r3, r3, #7	; 0x7
   22c92:	687c      	ldr	r4, [r7, #4]
   22c94:	bf88      	it	hi
   22c96:	9303      	strhi	r3, [sp, #12]
   22c98:	d801      	bhi.n	22c9e <_realloc_r+0x3a>
   22c9a:	2110      	movs	r1, #16
   22c9c:	9103      	str	r1, [sp, #12]
   22c9e:	9a03      	ldr	r2, [sp, #12]
   22ca0:	9d01      	ldr	r5, [sp, #4]
   22ca2:	42aa      	cmp	r2, r5
   22ca4:	bf2c      	ite	cs
   22ca6:	2300      	movcs	r3, #0
   22ca8:	2301      	movcc	r3, #1
   22caa:	ea53 72d2 	orrs.w	r2, r3, r2, lsr #31
   22cae:	d004      	beq.n	22cba <_realloc_r+0x56>
   22cb0:	9802      	ldr	r0, [sp, #8]
   22cb2:	230c      	movs	r3, #12
   22cb4:	60c3      	str	r3, [r0, #12]
   22cb6:	2500      	movs	r5, #0
   22cb8:	e17d      	b.n	22fb6 <_realloc_r+0x352>
   22cba:	9903      	ldr	r1, [sp, #12]
   22cbc:	f024 0c03 	bic.w	ip, r4, #3	; 0x3
   22cc0:	458c      	cmp	ip, r1
   22cc2:	bfa4      	itt	ge
   22cc4:	463c      	movge	r4, r7
   22cc6:	4665      	movge	r5, ip
   22cc8:	f280 814b 	bge.w	22f62 <_realloc_r+0x2fe>
   22ccc:	4abb      	ldr	r2, [pc, #748]	(22fbc <_realloc_r+0x358>)
   22cce:	eb07 010c 	add.w	r1, r7, ip
   22cd2:	f8d2 e008 	ldr.w	lr, [r2, #8]
   22cd6:	4571      	cmp	r1, lr
   22cd8:	d007      	beq.n	22cea <_realloc_r+0x86>
   22cda:	684b      	ldr	r3, [r1, #4]
   22cdc:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   22ce0:	440b      	add	r3, r1
   22ce2:	685b      	ldr	r3, [r3, #4]
   22ce4:	f013 0f01 	tst.w	r3, #1	; 0x1
   22ce8:	d128      	bne.n	22d3c <_realloc_r+0xd8>
   22cea:	684b      	ldr	r3, [r1, #4]
   22cec:	4571      	cmp	r1, lr
   22cee:	f023 0003 	bic.w	r0, r3, #3	; 0x3
   22cf2:	eb00 020c 	add.w	r2, r0, ip
   22cf6:	d118      	bne.n	22d2a <_realloc_r+0xc6>
   22cf8:	9d03      	ldr	r5, [sp, #12]
   22cfa:	f105 0310 	add.w	r3, r5, #16	; 0x10
   22cfe:	429a      	cmp	r2, r3
   22d00:	db1e      	blt.n	22d40 <_realloc_r+0xdc>
   22d02:	1b52      	subs	r2, r2, r5
   22d04:	eb07 0305 	add.w	r3, r7, r5
   22d08:	48ac      	ldr	r0, [pc, #688]	(22fbc <_realloc_r+0x358>)
   22d0a:	f042 0201 	orr.w	r2, r2, #1	; 0x1
   22d0e:	605a      	str	r2, [r3, #4]
   22d10:	6083      	str	r3, [r0, #8]
   22d12:	687b      	ldr	r3, [r7, #4]
   22d14:	9802      	ldr	r0, [sp, #8]
   22d16:	f003 0301 	and.w	r3, r3, #1	; 0x1
   22d1a:	ea45 0303 	orr.w	r3, r5, r3
   22d1e:	607b      	str	r3, [r7, #4]
   22d20:	f7ff ff44 	bl	22bac <__malloc_unlock>
   22d24:	f107 0508 	add.w	r5, r7, #8	; 0x8
   22d28:	e145      	b.n	22fb6 <_realloc_r+0x352>
   22d2a:	4615      	mov	r5, r2
   22d2c:	9a03      	ldr	r2, [sp, #12]
   22d2e:	4295      	cmp	r5, r2
   22d30:	db06      	blt.n	22d40 <_realloc_r+0xdc>
   22d32:	68ca      	ldr	r2, [r1, #12]
   22d34:	688b      	ldr	r3, [r1, #8]
   22d36:	60da      	str	r2, [r3, #12]
   22d38:	6093      	str	r3, [r2, #8]
   22d3a:	e0cc      	b.n	22ed6 <_realloc_r+0x272>
   22d3c:	2100      	movs	r1, #0
   22d3e:	2000      	movs	r0, #0
   22d40:	f014 0f01 	tst.w	r4, #1	; 0x1
   22d44:	f040 80af 	bne.w	22ea6 <_realloc_r+0x242>
   22d48:	f856 3c08 	ldr.w	r3, [r6, #-8]
   22d4c:	ebc3 0407 	rsb	r4, r3, r7
   22d50:	6863      	ldr	r3, [r4, #4]
   22d52:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   22d56:	9304      	str	r3, [sp, #16]
   22d58:	2900      	cmp	r1, #0
   22d5a:	d05f      	beq.n	22e1c <_realloc_r+0x1b8>
   22d5c:	4571      	cmp	r1, lr
   22d5e:	eb03 020c 	add.w	r2, r3, ip
   22d62:	d151      	bne.n	22e08 <_realloc_r+0x1a4>
   22d64:	9d03      	ldr	r5, [sp, #12]
   22d66:	1812      	adds	r2, r2, r0
   22d68:	f105 0310 	add.w	r3, r5, #16	; 0x10
   22d6c:	429a      	cmp	r2, r3
   22d6e:	9205      	str	r2, [sp, #20]
   22d70:	db54      	blt.n	22e1c <_realloc_r+0x1b8>
   22d72:	4625      	mov	r5, r4
   22d74:	68e2      	ldr	r2, [r4, #12]
   22d76:	f855 3f08 	ldr.w	r3, [r5, #8]!
   22d7a:	60da      	str	r2, [r3, #12]
   22d7c:	6093      	str	r3, [r2, #8]
   22d7e:	f1ac 0204 	sub.w	r2, ip, #4	; 0x4
   22d82:	2a24      	cmp	r2, #36
   22d84:	d82a      	bhi.n	22ddc <_realloc_r+0x178>
   22d86:	2a13      	cmp	r2, #19
   22d88:	4630      	mov	r0, r6
   22d8a:	46ac      	mov	ip, r5
   22d8c:	d91a      	bls.n	22dc4 <_realloc_r+0x160>
   22d8e:	6833      	ldr	r3, [r6, #0]
   22d90:	1d31      	adds	r1, r6, #4
   22d92:	60a3      	str	r3, [r4, #8]
   22d94:	6873      	ldr	r3, [r6, #4]
   22d96:	1d08      	adds	r0, r1, #4
   22d98:	2a1b      	cmp	r2, #27
   22d9a:	60e3      	str	r3, [r4, #12]
   22d9c:	f104 0c10 	add.w	ip, r4, #16	; 0x10
   22da0:	d910      	bls.n	22dc4 <_realloc_r+0x160>
   22da2:	684b      	ldr	r3, [r1, #4]
   22da4:	1d01      	adds	r1, r0, #4
   22da6:	6123      	str	r3, [r4, #16]
   22da8:	6843      	ldr	r3, [r0, #4]
   22daa:	1d08      	adds	r0, r1, #4
   22dac:	2a24      	cmp	r2, #36
   22dae:	6163      	str	r3, [r4, #20]
   22db0:	f104 0c18 	add.w	ip, r4, #24	; 0x18
   22db4:	d106      	bne.n	22dc4 <_realloc_r+0x160>
   22db6:	684b      	ldr	r3, [r1, #4]
   22db8:	f104 0c20 	add.w	ip, r4, #32	; 0x20
   22dbc:	61a3      	str	r3, [r4, #24]
   22dbe:	6843      	ldr	r3, [r0, #4]
   22dc0:	3008      	adds	r0, #8
   22dc2:	61e3      	str	r3, [r4, #28]
   22dc4:	4601      	mov	r1, r0
   22dc6:	f851 3b04 	ldr.w	r3, [r1], #4
   22dca:	4662      	mov	r2, ip
   22dcc:	f842 3b04 	str.w	r3, [r2], #4
   22dd0:	6843      	ldr	r3, [r0, #4]
   22dd2:	f8cc 3004 	str.w	r3, [ip, #4]
   22dd6:	684b      	ldr	r3, [r1, #4]
   22dd8:	6053      	str	r3, [r2, #4]
   22dda:	e003      	b.n	22de4 <_realloc_r+0x180>
   22ddc:	4628      	mov	r0, r5
   22dde:	4631      	mov	r1, r6
   22de0:	f7ff feba 	bl	22b58 <memmove>
   22de4:	9803      	ldr	r0, [sp, #12]
   22de6:	4975      	ldr	r1, [pc, #468]	(22fbc <_realloc_r+0x358>)
   22de8:	eb04 0300 	add.w	r3, r4, r0
   22dec:	608b      	str	r3, [r1, #8]
   22dee:	9905      	ldr	r1, [sp, #20]
   22df0:	ebc0 0201 	rsb	r2, r0, r1
   22df4:	f042 0201 	orr.w	r2, r2, #1	; 0x1
   22df8:	605a      	str	r2, [r3, #4]
   22dfa:	6863      	ldr	r3, [r4, #4]
   22dfc:	f003 0301 	and.w	r3, r3, #1	; 0x1
   22e00:	ea40 0303 	orr.w	r3, r0, r3
   22e04:	6063      	str	r3, [r4, #4]
   22e06:	e0a8      	b.n	22f5a <_realloc_r+0x2f6>
   22e08:	eb02 0500 	add.w	r5, r2, r0
   22e0c:	9a03      	ldr	r2, [sp, #12]
   22e0e:	4295      	cmp	r5, r2
   22e10:	db04      	blt.n	22e1c <_realloc_r+0x1b8>
   22e12:	68ca      	ldr	r2, [r1, #12]
   22e14:	688b      	ldr	r3, [r1, #8]
   22e16:	60da      	str	r2, [r3, #12]
   22e18:	6093      	str	r3, [r2, #8]
   22e1a:	e005      	b.n	22e28 <_realloc_r+0x1c4>
   22e1c:	9b04      	ldr	r3, [sp, #16]
   22e1e:	9803      	ldr	r0, [sp, #12]
   22e20:	eb03 050c 	add.w	r5, r3, ip
   22e24:	4285      	cmp	r5, r0
   22e26:	db3e      	blt.n	22ea6 <_realloc_r+0x242>
   22e28:	4620      	mov	r0, r4
   22e2a:	68e2      	ldr	r2, [r4, #12]
   22e2c:	f850 3f08 	ldr.w	r3, [r0, #8]!
   22e30:	60da      	str	r2, [r3, #12]
   22e32:	6093      	str	r3, [r2, #8]
   22e34:	f1ac 0204 	sub.w	r2, ip, #4	; 0x4
   22e38:	2a24      	cmp	r2, #36
   22e3a:	d830      	bhi.n	22e9e <_realloc_r+0x23a>
   22e3c:	2a13      	cmp	r2, #19
   22e3e:	46b4      	mov	ip, r6
   22e40:	d921      	bls.n	22e86 <_realloc_r+0x222>
   22e42:	6833      	ldr	r3, [r6, #0]
   22e44:	f106 0104 	add.w	r1, r6, #4	; 0x4
   22e48:	60a3      	str	r3, [r4, #8]
   22e4a:	6873      	ldr	r3, [r6, #4]
   22e4c:	2a1b      	cmp	r2, #27
   22e4e:	60e3      	str	r3, [r4, #12]
   22e50:	f104 0010 	add.w	r0, r4, #16	; 0x10
   22e54:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   22e58:	d915      	bls.n	22e86 <_realloc_r+0x222>
   22e5a:	684b      	ldr	r3, [r1, #4]
   22e5c:	2a24      	cmp	r2, #36
   22e5e:	6123      	str	r3, [r4, #16]
   22e60:	f8dc 3004 	ldr.w	r3, [ip, #4]
   22e64:	f10c 0104 	add.w	r1, ip, #4	; 0x4
   22e68:	6163      	str	r3, [r4, #20]
   22e6a:	f104 0018 	add.w	r0, r4, #24	; 0x18
   22e6e:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   22e72:	d108      	bne.n	22e86 <_realloc_r+0x222>
   22e74:	684b      	ldr	r3, [r1, #4]
   22e76:	f104 0020 	add.w	r0, r4, #32	; 0x20
   22e7a:	61a3      	str	r3, [r4, #24]
   22e7c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   22e80:	f10c 0c08 	add.w	ip, ip, #8	; 0x8
   22e84:	61e3      	str	r3, [r4, #28]
   22e86:	4661      	mov	r1, ip
   22e88:	f851 3b04 	ldr.w	r3, [r1], #4
   22e8c:	4602      	mov	r2, r0
   22e8e:	f842 3b04 	str.w	r3, [r2], #4
   22e92:	f8dc 3004 	ldr.w	r3, [ip, #4]
   22e96:	6043      	str	r3, [r0, #4]
   22e98:	684b      	ldr	r3, [r1, #4]
   22e9a:	6053      	str	r3, [r2, #4]
   22e9c:	e061      	b.n	22f62 <_realloc_r+0x2fe>
   22e9e:	4631      	mov	r1, r6
   22ea0:	f7ff fe5a 	bl	22b58 <memmove>
   22ea4:	e05d      	b.n	22f62 <_realloc_r+0x2fe>
   22ea6:	9802      	ldr	r0, [sp, #8]
   22ea8:	9901      	ldr	r1, [sp, #4]
   22eaa:	f8cd c000 	str.w	ip, [sp]
   22eae:	f7ff fbef 	bl	22690 <_malloc_r>
   22eb2:	f8dd c000 	ldr.w	ip, [sp]
   22eb6:	4605      	mov	r5, r0
   22eb8:	2800      	cmp	r0, #0
   22eba:	d04e      	beq.n	22f5a <_realloc_r+0x2f6>
   22ebc:	687b      	ldr	r3, [r7, #4]
   22ebe:	f1a0 0208 	sub.w	r2, r0, #8	; 0x8
   22ec2:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   22ec6:	443b      	add	r3, r7
   22ec8:	429a      	cmp	r2, r3
   22eca:	d106      	bne.n	22eda <_realloc_r+0x276>
   22ecc:	6853      	ldr	r3, [r2, #4]
   22ece:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   22ed2:	eb03 050c 	add.w	r5, r3, ip
   22ed6:	463c      	mov	r4, r7
   22ed8:	e043      	b.n	22f62 <_realloc_r+0x2fe>
   22eda:	f1ac 0204 	sub.w	r2, ip, #4	; 0x4
   22ede:	2a24      	cmp	r2, #36
   22ee0:	d834      	bhi.n	22f4c <_realloc_r+0x2e8>
   22ee2:	2a13      	cmp	r2, #19
   22ee4:	4630      	mov	r0, r6
   22ee6:	46ac      	mov	ip, r5
   22ee8:	d924      	bls.n	22f34 <_realloc_r+0x2d0>
   22eea:	46b6      	mov	lr, r6
   22eec:	f85e 3b04 	ldr.w	r3, [lr], #4
   22ef0:	4629      	mov	r1, r5
   22ef2:	f841 3b04 	str.w	r3, [r1], #4
   22ef6:	6873      	ldr	r3, [r6, #4]
   22ef8:	2a1b      	cmp	r2, #27
   22efa:	606b      	str	r3, [r5, #4]
   22efc:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   22f00:	f10e 0004 	add.w	r0, lr, #4	; 0x4
   22f04:	d916      	bls.n	22f34 <_realloc_r+0x2d0>
   22f06:	f8de 3004 	ldr.w	r3, [lr, #4]
   22f0a:	f10c 0e04 	add.w	lr, ip, #4	; 0x4
   22f0e:	604b      	str	r3, [r1, #4]
   22f10:	6843      	ldr	r3, [r0, #4]
   22f12:	1d01      	adds	r1, r0, #4
   22f14:	1d08      	adds	r0, r1, #4
   22f16:	2a24      	cmp	r2, #36
   22f18:	f8cc 3004 	str.w	r3, [ip, #4]
   22f1c:	f10e 0c04 	add.w	ip, lr, #4	; 0x4
   22f20:	d108      	bne.n	22f34 <_realloc_r+0x2d0>
   22f22:	684b      	ldr	r3, [r1, #4]
   22f24:	f8ce 3004 	str.w	r3, [lr, #4]
   22f28:	6843      	ldr	r3, [r0, #4]
   22f2a:	3008      	adds	r0, #8
   22f2c:	f8cc 3004 	str.w	r3, [ip, #4]
   22f30:	f10c 0c08 	add.w	ip, ip, #8	; 0x8
   22f34:	4601      	mov	r1, r0
   22f36:	f851 3b04 	ldr.w	r3, [r1], #4
   22f3a:	4662      	mov	r2, ip
   22f3c:	f842 3b04 	str.w	r3, [r2], #4
   22f40:	6843      	ldr	r3, [r0, #4]
   22f42:	f8cc 3004 	str.w	r3, [ip, #4]
   22f46:	684b      	ldr	r3, [r1, #4]
   22f48:	6053      	str	r3, [r2, #4]
   22f4a:	e002      	b.n	22f52 <_realloc_r+0x2ee>
   22f4c:	4631      	mov	r1, r6
   22f4e:	f7ff fe03 	bl	22b58 <memmove>
   22f52:	9802      	ldr	r0, [sp, #8]
   22f54:	4631      	mov	r1, r6
   22f56:	f000 fcd1 	bl	238fc <_free_r>
   22f5a:	9802      	ldr	r0, [sp, #8]
   22f5c:	f7ff fe26 	bl	22bac <__malloc_unlock>
   22f60:	e029      	b.n	22fb6 <_realloc_r+0x352>
   22f62:	9903      	ldr	r1, [sp, #12]
   22f64:	6863      	ldr	r3, [r4, #4]
   22f66:	ebc1 0205 	rsb	r2, r1, r5
   22f6a:	2a0f      	cmp	r2, #15
   22f6c:	d913      	bls.n	22f96 <_realloc_r+0x332>
   22f6e:	9d03      	ldr	r5, [sp, #12]
   22f70:	f003 0301 	and.w	r3, r3, #1	; 0x1
   22f74:	ea45 0303 	orr.w	r3, r5, r3
   22f78:	6063      	str	r3, [r4, #4]
   22f7a:	4421      	add	r1, r4
   22f7c:	f042 0301 	orr.w	r3, r2, #1	; 0x1
   22f80:	604b      	str	r3, [r1, #4]
   22f82:	440a      	add	r2, r1
   22f84:	6853      	ldr	r3, [r2, #4]
   22f86:	3108      	adds	r1, #8
   22f88:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   22f8c:	6053      	str	r3, [r2, #4]
   22f8e:	9802      	ldr	r0, [sp, #8]
   22f90:	f000 fcb4 	bl	238fc <_free_r>
   22f94:	e00a      	b.n	22fac <_realloc_r+0x348>
   22f96:	f003 0301 	and.w	r3, r3, #1	; 0x1
   22f9a:	ea45 0303 	orr.w	r3, r5, r3
   22f9e:	6063      	str	r3, [r4, #4]
   22fa0:	eb04 0205 	add.w	r2, r4, r5
   22fa4:	6853      	ldr	r3, [r2, #4]
   22fa6:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   22faa:	6053      	str	r3, [r2, #4]
   22fac:	9802      	ldr	r0, [sp, #8]
   22fae:	f7ff fdfd 	bl	22bac <__malloc_unlock>
   22fb2:	f104 0508 	add.w	r5, r4, #8	; 0x8
   22fb6:	4628      	mov	r0, r5
   22fb8:	b007      	add	sp, #28
   22fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22fbc:	20000138 	.word	0x20000138

00022fc0 <_wrapup_reent>:
   22fc0:	b570      	push	{r4, r5, r6, lr}
   22fc2:	4606      	mov	r6, r0
   22fc4:	b908      	cbnz	r0, 22fca <_wrapup_reent+0xa>
   22fc6:	4b0a      	ldr	r3, [pc, #40]	(22ff0 <_wrapup_reent+0x30>)
   22fc8:	681e      	ldr	r6, [r3, #0]
   22fca:	f106 0248 	add.w	r2, r6, #72	; 0x48
   22fce:	6855      	ldr	r5, [r2, #4]
   22fd0:	1c6b      	adds	r3, r5, #1
   22fd2:	eb02 0483 	add.w	r4, r2, r3, lsl #2
   22fd6:	e001      	b.n	22fdc <_wrapup_reent+0x1c>
   22fd8:	6863      	ldr	r3, [r4, #4]
   22fda:	4798      	blx	r3
   22fdc:	3c04      	subs	r4, #4
   22fde:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
   22fe2:	d5f9      	bpl.n	22fd8 <_wrapup_reent+0x18>
   22fe4:	6ab3      	ldr	r3, [r6, #40]
   22fe6:	b10b      	cbz	r3, 22fec <_wrapup_reent+0x2c>
   22fe8:	4630      	mov	r0, r6
   22fea:	4798      	blx	r3
   22fec:	bd70      	pop	{r4, r5, r6, pc}
   22fee:	46c0      	nop			(mov r8, r8)
   22ff0:	20000044 	.word	0x20000044

00022ff4 <cleanup_glue>:
   22ff4:	b530      	push	{r4, r5, lr}
   22ff6:	460d      	mov	r5, r1
   22ff8:	6809      	ldr	r1, [r1, #0]
   22ffa:	b081      	sub	sp, #4
   22ffc:	4604      	mov	r4, r0
   22ffe:	b109      	cbz	r1, 23004 <cleanup_glue+0x10>
   23000:	f7ff fff8 	bl	22ff4 <cleanup_glue>
   23004:	4620      	mov	r0, r4
   23006:	4629      	mov	r1, r5
   23008:	f000 fc78 	bl	238fc <_free_r>
   2300c:	b001      	add	sp, #4
   2300e:	bd30      	pop	{r4, r5, pc}

00023010 <_reclaim_reent>:
   23010:	4b2a      	ldr	r3, [pc, #168]	(230bc <_reclaim_reent+0xac>)
   23012:	b570      	push	{r4, r5, r6, lr}
   23014:	681b      	ldr	r3, [r3, #0]
   23016:	4605      	mov	r5, r0
   23018:	4298      	cmp	r0, r3
   2301a:	d04d      	beq.n	230b8 <_reclaim_reent+0xa8>
   2301c:	6a43      	ldr	r3, [r0, #36]
   2301e:	b1ab      	cbz	r3, 2304c <_reclaim_reent+0x3c>
   23020:	68db      	ldr	r3, [r3, #12]
   23022:	b19b      	cbz	r3, 2304c <_reclaim_reent+0x3c>
   23024:	2600      	movs	r6, #0
   23026:	6a6b      	ldr	r3, [r5, #36]
   23028:	68db      	ldr	r3, [r3, #12]
   2302a:	5999      	ldr	r1, [r3, r6]
   2302c:	e004      	b.n	23038 <_reclaim_reent+0x28>
   2302e:	680c      	ldr	r4, [r1, #0]
   23030:	4628      	mov	r0, r5
   23032:	f000 fc63 	bl	238fc <_free_r>
   23036:	4621      	mov	r1, r4
   23038:	2900      	cmp	r1, #0
   2303a:	d1f8      	bne.n	2302e <_reclaim_reent+0x1e>
   2303c:	3604      	adds	r6, #4
   2303e:	2e3c      	cmp	r6, #60
   23040:	d1f1      	bne.n	23026 <_reclaim_reent+0x16>
   23042:	6a6b      	ldr	r3, [r5, #36]
   23044:	4628      	mov	r0, r5
   23046:	68d9      	ldr	r1, [r3, #12]
   23048:	f000 fc58 	bl	238fc <_free_r>
   2304c:	6a6b      	ldr	r3, [r5, #36]
   2304e:	6819      	ldr	r1, [r3, #0]
   23050:	b111      	cbz	r1, 23058 <_reclaim_reent+0x48>
   23052:	4628      	mov	r0, r5
   23054:	f000 fc52 	bl	238fc <_free_r>
   23058:	6969      	ldr	r1, [r5, #20]
   2305a:	b111      	cbz	r1, 23062 <_reclaim_reent+0x52>
   2305c:	4628      	mov	r0, r5
   2305e:	f000 fc4d 	bl	238fc <_free_r>
   23062:	6a69      	ldr	r1, [r5, #36]
   23064:	b111      	cbz	r1, 2306c <_reclaim_reent+0x5c>
   23066:	4628      	mov	r0, r5
   23068:	f000 fc48 	bl	238fc <_free_r>
   2306c:	6ba9      	ldr	r1, [r5, #56]
   2306e:	b111      	cbz	r1, 23076 <_reclaim_reent+0x66>
   23070:	4628      	mov	r0, r5
   23072:	f000 fc43 	bl	238fc <_free_r>
   23076:	6be9      	ldr	r1, [r5, #60]
   23078:	b111      	cbz	r1, 23080 <_reclaim_reent+0x70>
   2307a:	4628      	mov	r0, r5
   2307c:	f000 fc3e 	bl	238fc <_free_r>
   23080:	6c29      	ldr	r1, [r5, #64]
   23082:	b111      	cbz	r1, 2308a <_reclaim_reent+0x7a>
   23084:	4628      	mov	r0, r5
   23086:	f000 fc39 	bl	238fc <_free_r>
   2308a:	6cab      	ldr	r3, [r5, #72]
   2308c:	f8d3 1088 	ldr.w	r1, [r3, #136]
   23090:	b111      	cbz	r1, 23098 <_reclaim_reent+0x88>
   23092:	4628      	mov	r0, r5
   23094:	f000 fc32 	bl	238fc <_free_r>
   23098:	6b69      	ldr	r1, [r5, #52]
   2309a:	b111      	cbz	r1, 230a2 <_reclaim_reent+0x92>
   2309c:	4628      	mov	r0, r5
   2309e:	f000 fc2d 	bl	238fc <_free_r>
   230a2:	69ab      	ldr	r3, [r5, #24]
   230a4:	b143      	cbz	r3, 230b8 <_reclaim_reent+0xa8>
   230a6:	6aab      	ldr	r3, [r5, #40]
   230a8:	4628      	mov	r0, r5
   230aa:	4798      	blx	r3
   230ac:	f8d5 10d8 	ldr.w	r1, [r5, #216]
   230b0:	b111      	cbz	r1, 230b8 <_reclaim_reent+0xa8>
   230b2:	4628      	mov	r0, r5
   230b4:	f7ff ff9e 	bl	22ff4 <cleanup_glue>
   230b8:	bd70      	pop	{r4, r5, r6, pc}
   230ba:	46c0      	nop			(mov r8, r8)
   230bc:	20000044 	.word	0x20000044

000230c0 <_sbrk_r>:
   230c0:	b530      	push	{r4, r5, lr}
   230c2:	4c08      	ldr	r4, [pc, #32]	(230e4 <_sbrk_r+0x24>)
   230c4:	2300      	movs	r3, #0
   230c6:	b081      	sub	sp, #4
   230c8:	4605      	mov	r5, r0
   230ca:	4608      	mov	r0, r1
   230cc:	6023      	str	r3, [r4, #0]
   230ce:	f7f6 faa5 	bl	1961c <_sbrk>
   230d2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   230d6:	d102      	bne.n	230de <_sbrk_r+0x1e>
   230d8:	6823      	ldr	r3, [r4, #0]
   230da:	b103      	cbz	r3, 230de <_sbrk_r+0x1e>
   230dc:	60eb      	str	r3, [r5, #12]
   230de:	b001      	add	sp, #4
   230e0:	bd30      	pop	{r4, r5, pc}
   230e2:	46c0      	nop			(mov r8, r8)
   230e4:	2000067c 	.word	0x2000067c

000230e8 <_raise_r>:
   230e8:	b530      	push	{r4, r5, lr}
   230ea:	291f      	cmp	r1, #31
   230ec:	b081      	sub	sp, #4
   230ee:	4604      	mov	r4, r0
   230f0:	460d      	mov	r5, r1
   230f2:	d904      	bls.n	230fe <_raise_r+0x16>
   230f4:	2316      	movs	r3, #22
   230f6:	60c3      	str	r3, [r0, #12]
   230f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   230fc:	e01c      	b.n	23138 <_raise_r+0x50>
   230fe:	6c41      	ldr	r1, [r0, #68]
   23100:	b111      	cbz	r1, 23108 <_raise_r+0x20>
   23102:	f851 2025 	ldr.w	r2, [r1, r5, lsl #2]
   23106:	b942      	cbnz	r2, 2311a <_raise_r+0x32>
   23108:	4620      	mov	r0, r4
   2310a:	f000 f899 	bl	23240 <_getpid_r>
   2310e:	462a      	mov	r2, r5
   23110:	4601      	mov	r1, r0
   23112:	4620      	mov	r0, r4
   23114:	f000 f89a 	bl	2324c <_kill_r>
   23118:	e00e      	b.n	23138 <_raise_r+0x50>
   2311a:	2a01      	cmp	r2, #1
   2311c:	d00b      	beq.n	23136 <_raise_r+0x4e>
   2311e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   23122:	d103      	bne.n	2312c <_raise_r+0x44>
   23124:	2316      	movs	r3, #22
   23126:	60c3      	str	r3, [r0, #12]
   23128:	2001      	movs	r0, #1
   2312a:	e005      	b.n	23138 <_raise_r+0x50>
   2312c:	2300      	movs	r3, #0
   2312e:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
   23132:	4628      	mov	r0, r5
   23134:	4790      	blx	r2
   23136:	2000      	movs	r0, #0
   23138:	b001      	add	sp, #4
   2313a:	bd30      	pop	{r4, r5, pc}

0002313c <raise>:
   2313c:	b500      	push	{lr}
   2313e:	4b04      	ldr	r3, [pc, #16]	(23150 <raise+0x14>)
   23140:	4601      	mov	r1, r0
   23142:	b081      	sub	sp, #4
   23144:	6818      	ldr	r0, [r3, #0]
   23146:	f7ff ffcf 	bl	230e8 <_raise_r>
   2314a:	b001      	add	sp, #4
   2314c:	bd00      	pop	{pc}
   2314e:	46c0      	nop			(mov r8, r8)
   23150:	20000044 	.word	0x20000044

00023154 <_init_signal_r>:
   23154:	6c43      	ldr	r3, [r0, #68]
   23156:	b510      	push	{r4, lr}
   23158:	4604      	mov	r4, r0
   2315a:	b963      	cbnz	r3, 23176 <_init_signal_r+0x22>
   2315c:	2180      	movs	r1, #128
   2315e:	f7ff fa97 	bl	22690 <_malloc_r>
   23162:	6460      	str	r0, [r4, #68]
   23164:	b908      	cbnz	r0, 2316a <_init_signal_r+0x16>
   23166:	3801      	subs	r0, #1
   23168:	e006      	b.n	23178 <_init_signal_r+0x24>
   2316a:	2300      	movs	r3, #0
   2316c:	2200      	movs	r2, #0
   2316e:	50c2      	str	r2, [r0, r3]
   23170:	3304      	adds	r3, #4
   23172:	2b80      	cmp	r3, #128
   23174:	d1fb      	bne.n	2316e <_init_signal_r+0x1a>
   23176:	2000      	movs	r0, #0
   23178:	bd10      	pop	{r4, pc}
   2317a:	46c0      	nop			(mov r8, r8)

0002317c <_init_signal>:
   2317c:	b500      	push	{lr}
   2317e:	4b03      	ldr	r3, [pc, #12]	(2318c <_init_signal+0x10>)
   23180:	b081      	sub	sp, #4
   23182:	6818      	ldr	r0, [r3, #0]
   23184:	f7ff ffe6 	bl	23154 <_init_signal_r>
   23188:	b001      	add	sp, #4
   2318a:	bd00      	pop	{pc}
   2318c:	20000044 	.word	0x20000044

00023190 <__sigtramp_r>:
   23190:	b530      	push	{r4, r5, lr}
   23192:	291f      	cmp	r1, #31
   23194:	b081      	sub	sp, #4
   23196:	4604      	mov	r4, r0
   23198:	460d      	mov	r5, r1
   2319a:	d81a      	bhi.n	231d2 <__sigtramp_r+0x42>
   2319c:	6c43      	ldr	r3, [r0, #68]
   2319e:	b913      	cbnz	r3, 231a6 <__sigtramp_r+0x16>
   231a0:	f7ff ffd8 	bl	23154 <_init_signal_r>
   231a4:	b9a8      	cbnz	r0, 231d2 <__sigtramp_r+0x42>
   231a6:	6c60      	ldr	r0, [r4, #68]
   231a8:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
   231ac:	b90a      	cbnz	r2, 231b2 <__sigtramp_r+0x22>
   231ae:	2001      	movs	r0, #1
   231b0:	e011      	b.n	231d6 <__sigtramp_r+0x46>
   231b2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   231b6:	d101      	bne.n	231bc <__sigtramp_r+0x2c>
   231b8:	2002      	movs	r0, #2
   231ba:	e00c      	b.n	231d6 <__sigtramp_r+0x46>
   231bc:	2a01      	cmp	r2, #1
   231be:	d101      	bne.n	231c4 <__sigtramp_r+0x34>
   231c0:	2003      	movs	r0, #3
   231c2:	e008      	b.n	231d6 <__sigtramp_r+0x46>
   231c4:	2300      	movs	r3, #0
   231c6:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   231ca:	4628      	mov	r0, r5
   231cc:	4790      	blx	r2
   231ce:	2000      	movs	r0, #0
   231d0:	e001      	b.n	231d6 <__sigtramp_r+0x46>
   231d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   231d6:	b001      	add	sp, #4
   231d8:	bd30      	pop	{r4, r5, pc}
   231da:	46c0      	nop			(mov r8, r8)

000231dc <__sigtramp>:
   231dc:	b500      	push	{lr}
   231de:	4b04      	ldr	r3, [pc, #16]	(231f0 <__sigtramp+0x14>)
   231e0:	4601      	mov	r1, r0
   231e2:	b081      	sub	sp, #4
   231e4:	6818      	ldr	r0, [r3, #0]
   231e6:	f7ff ffd3 	bl	23190 <__sigtramp_r>
   231ea:	b001      	add	sp, #4
   231ec:	bd00      	pop	{pc}
   231ee:	46c0      	nop			(mov r8, r8)
   231f0:	20000044 	.word	0x20000044

000231f4 <_signal_r>:
   231f4:	291f      	cmp	r1, #31
   231f6:	b570      	push	{r4, r5, r6, lr}
   231f8:	4604      	mov	r4, r0
   231fa:	460d      	mov	r5, r1
   231fc:	4616      	mov	r6, r2
   231fe:	d902      	bls.n	23206 <_signal_r+0x12>
   23200:	2316      	movs	r3, #22
   23202:	60c3      	str	r3, [r0, #12]
   23204:	e004      	b.n	23210 <_signal_r+0x1c>
   23206:	6c43      	ldr	r3, [r0, #68]
   23208:	b92b      	cbnz	r3, 23216 <_signal_r+0x22>
   2320a:	f7ff ffa3 	bl	23154 <_init_signal_r>
   2320e:	b110      	cbz	r0, 23216 <_signal_r+0x22>
   23210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23214:	e004      	b.n	23220 <_signal_r+0x2c>
   23216:	6c63      	ldr	r3, [r4, #68]
   23218:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2321c:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
   23220:	bd70      	pop	{r4, r5, r6, pc}
   23222:	46c0      	nop			(mov r8, r8)

00023224 <signal>:
   23224:	b500      	push	{lr}
   23226:	4b05      	ldr	r3, [pc, #20]	(2323c <signal+0x18>)
   23228:	4684      	mov	ip, r0
   2322a:	460a      	mov	r2, r1
   2322c:	b081      	sub	sp, #4
   2322e:	6818      	ldr	r0, [r3, #0]
   23230:	4661      	mov	r1, ip
   23232:	f7ff ffdf 	bl	231f4 <_signal_r>
   23236:	b001      	add	sp, #4
   23238:	bd00      	pop	{pc}
   2323a:	46c0      	nop			(mov r8, r8)
   2323c:	20000044 	.word	0x20000044

00023240 <_getpid_r>:
   23240:	b500      	push	{lr}
   23242:	b081      	sub	sp, #4
   23244:	f7f6 f984 	bl	19550 <_getpid>
   23248:	b001      	add	sp, #4
   2324a:	bd00      	pop	{pc}

0002324c <_kill_r>:
   2324c:	b530      	push	{r4, r5, lr}
   2324e:	4c08      	ldr	r4, [pc, #32]	(23270 <_kill_r+0x24>)
   23250:	2300      	movs	r3, #0
   23252:	b081      	sub	sp, #4
   23254:	4605      	mov	r5, r0
   23256:	4608      	mov	r0, r1
   23258:	4611      	mov	r1, r2
   2325a:	6023      	str	r3, [r4, #0]
   2325c:	f7f6 f98c 	bl	19578 <_kill>
   23260:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   23264:	d102      	bne.n	2326c <_kill_r+0x20>
   23266:	6823      	ldr	r3, [r4, #0]
   23268:	b103      	cbz	r3, 2326c <_kill_r+0x20>
   2326a:	60eb      	str	r3, [r5, #12]
   2326c:	b001      	add	sp, #4
   2326e:	bd30      	pop	{r4, r5, pc}
   23270:	2000067c 	.word	0x2000067c

00023274 <strcmp>:
   23274:	b530      	push	{r4, r5, lr}
   23276:	468c      	mov	ip, r1
   23278:	2200      	movs	r2, #0
   2327a:	5c81      	ldrb	r1, [r0, r2]
   2327c:	eb00 0402 	add.w	r4, r0, r2
   23280:	eb0c 0502 	add.w	r5, ip, r2
   23284:	b121      	cbz	r1, 23290 <strcmp+0x1c>
   23286:	f81c 3002 	ldrb.w	r3, [ip, r2]
   2328a:	3201      	adds	r2, #1
   2328c:	4299      	cmp	r1, r3
   2328e:	d0f4      	beq.n	2327a <strcmp+0x6>
   23290:	7820      	ldrb	r0, [r4, #0]
   23292:	782b      	ldrb	r3, [r5, #0]
   23294:	1ac0      	subs	r0, r0, r3
   23296:	bd30      	pop	{r4, r5, pc}

00023298 <strcpy>:
   23298:	2200      	movs	r2, #0
   2329a:	5c8b      	ldrb	r3, [r1, r2]
   2329c:	5483      	strb	r3, [r0, r2]
   2329e:	3201      	adds	r2, #1
   232a0:	2b00      	cmp	r3, #0
   232a2:	d1fa      	bne.n	2329a <strcpy+0x2>
   232a4:	4770      	bx	lr
   232a6:	46c0      	nop			(mov r8, r8)

000232a8 <strlen>:
   232a8:	4602      	mov	r2, r0
   232aa:	e000      	b.n	232ae <strlen+0x6>
   232ac:	3001      	adds	r0, #1
   232ae:	7803      	ldrb	r3, [r0, #0]
   232b0:	2b00      	cmp	r3, #0
   232b2:	d1fb      	bne.n	232ac <strlen+0x4>
   232b4:	1a80      	subs	r0, r0, r2
   232b6:	4770      	bx	lr

000232b8 <strncmp>:
   232b8:	b570      	push	{r4, r5, r6, lr}
   232ba:	4604      	mov	r4, r0
   232bc:	4608      	mov	r0, r1
   232be:	b90a      	cbnz	r2, 232c4 <strncmp+0xc>
   232c0:	2000      	movs	r0, #0
   232c2:	e017      	b.n	232f4 <strncmp+0x3c>
   232c4:	f04f 0c00 	mov.w	ip, #0	; 0x0
   232c8:	e005      	b.n	232d6 <strncmp+0x1e>
   232ca:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   232ce:	d00d      	beq.n	232ec <strncmp+0x34>
   232d0:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   232d4:	b151      	cbz	r1, 232ec <strncmp+0x34>
   232d6:	eb04 050c 	add.w	r5, r4, ip
   232da:	eb00 060c 	add.w	r6, r0, ip
   232de:	b12a      	cbz	r2, 232ec <strncmp+0x34>
   232e0:	f814 300c 	ldrb.w	r3, [r4, ip]
   232e4:	f810 100c 	ldrb.w	r1, [r0, ip]
   232e8:	4299      	cmp	r1, r3
   232ea:	d0ee      	beq.n	232ca <strncmp+0x12>
   232ec:	782a      	ldrb	r2, [r5, #0]
   232ee:	7833      	ldrb	r3, [r6, #0]
   232f0:	ebc3 0002 	rsb	r0, r3, r2
   232f4:	bd70      	pop	{r4, r5, r6, pc}
   232f6:	46c0      	nop			(mov r8, r8)

000232f8 <write>:
   232f8:	b500      	push	{lr}
   232fa:	4613      	mov	r3, r2
   232fc:	4a05      	ldr	r2, [pc, #20]	(23314 <write+0x1c>)
   232fe:	4684      	mov	ip, r0
   23300:	468e      	mov	lr, r1
   23302:	b081      	sub	sp, #4
   23304:	6810      	ldr	r0, [r2, #0]
   23306:	4661      	mov	r1, ip
   23308:	4672      	mov	r2, lr
   2330a:	f000 f879 	bl	23400 <_write_r>
   2330e:	b001      	add	sp, #4
   23310:	bd00      	pop	{pc}
   23312:	46c0      	nop			(mov r8, r8)
   23314:	20000044 	.word	0x20000044

00023318 <__swbuf_r>:
   23318:	b570      	push	{r4, r5, r6, lr}
   2331a:	4606      	mov	r6, r0
   2331c:	460d      	mov	r5, r1
   2331e:	4614      	mov	r4, r2
   23320:	b118      	cbz	r0, 2332a <__swbuf_r+0x12>
   23322:	6983      	ldr	r3, [r0, #24]
   23324:	b90b      	cbnz	r3, 2332a <__swbuf_r+0x12>
   23326:	f000 fa63 	bl	237f0 <__sinit>
   2332a:	4b2b      	ldr	r3, [pc, #172]	(233d8 <__swbuf_r+0xc0>)
   2332c:	429c      	cmp	r4, r3
   2332e:	bf08      	it	eq
   23330:	6834      	ldreq	r4, [r6, #0]
   23332:	d008      	beq.n	23346 <__swbuf_r+0x2e>
   23334:	4b29      	ldr	r3, [pc, #164]	(233dc <__swbuf_r+0xc4>)
   23336:	429c      	cmp	r4, r3
   23338:	bf08      	it	eq
   2333a:	6874      	ldreq	r4, [r6, #4]
   2333c:	d003      	beq.n	23346 <__swbuf_r+0x2e>
   2333e:	4b28      	ldr	r3, [pc, #160]	(233e0 <__swbuf_r+0xc8>)
   23340:	429c      	cmp	r4, r3
   23342:	bf08      	it	eq
   23344:	68b4      	ldreq	r4, [r6, #8]
   23346:	69a3      	ldr	r3, [r4, #24]
   23348:	60a3      	str	r3, [r4, #8]
   2334a:	89a3      	ldrh	r3, [r4, #12]
   2334c:	f013 0f08 	tst.w	r3, #8	; 0x8
   23350:	d001      	beq.n	23356 <__swbuf_r+0x3e>
   23352:	6923      	ldr	r3, [r4, #16]
   23354:	b95b      	cbnz	r3, 2336e <__swbuf_r+0x56>
   23356:	4630      	mov	r0, r6
   23358:	4621      	mov	r1, r4
   2335a:	f000 f867 	bl	2342c <__swsetup_r>
   2335e:	b130      	cbz	r0, 2336e <__swbuf_r+0x56>
   23360:	89a3      	ldrh	r3, [r4, #12]
   23362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23366:	81a3      	strh	r3, [r4, #12]
   23368:	2309      	movs	r3, #9
   2336a:	60f3      	str	r3, [r6, #12]
   2336c:	e030      	b.n	233d0 <__swbuf_r+0xb8>
   2336e:	89a3      	ldrh	r3, [r4, #12]
   23370:	6922      	ldr	r2, [r4, #16]
   23372:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   23376:	bf01      	itttt	eq
   23378:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
   2337c:	81a3      	strheq	r3, [r4, #12]
   2337e:	6e63      	ldreq	r3, [r4, #100]
   23380:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
   23384:	bf08      	it	eq
   23386:	6663      	streq	r3, [r4, #100]
   23388:	6823      	ldr	r3, [r4, #0]
   2338a:	ebc2 0203 	rsb	r2, r2, r3
   2338e:	6963      	ldr	r3, [r4, #20]
   23390:	429a      	cmp	r2, r3
   23392:	db05      	blt.n	233a0 <__swbuf_r+0x88>
   23394:	4630      	mov	r0, r6
   23396:	4621      	mov	r1, r4
   23398:	f000 f8ba 	bl	23510 <_fflush_r>
   2339c:	b9c0      	cbnz	r0, 233d0 <__swbuf_r+0xb8>
   2339e:	2200      	movs	r2, #0
   233a0:	68a3      	ldr	r3, [r4, #8]
   233a2:	b2ed      	uxtb	r5, r5
   233a4:	3b01      	subs	r3, #1
   233a6:	60a3      	str	r3, [r4, #8]
   233a8:	6823      	ldr	r3, [r4, #0]
   233aa:	3201      	adds	r2, #1
   233ac:	f803 5b01 	strb.w	r5, [r3], #1
   233b0:	6023      	str	r3, [r4, #0]
   233b2:	6963      	ldr	r3, [r4, #20]
   233b4:	429a      	cmp	r2, r3
   233b6:	d006      	beq.n	233c6 <__swbuf_r+0xae>
   233b8:	7b23      	ldrb	r3, [r4, #12]
   233ba:	2d0a      	cmp	r5, #10
   233bc:	bf14      	ite	ne
   233be:	2300      	movne	r3, #0
   233c0:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
   233c4:	b133      	cbz	r3, 233d4 <__swbuf_r+0xbc>
   233c6:	4630      	mov	r0, r6
   233c8:	4621      	mov	r1, r4
   233ca:	f000 f8a1 	bl	23510 <_fflush_r>
   233ce:	b108      	cbz	r0, 233d4 <__swbuf_r+0xbc>
   233d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   233d4:	4628      	mov	r0, r5
   233d6:	bd70      	pop	{r4, r5, r6, pc}
   233d8:	00025880 	.word	0x00025880
   233dc:	000258a0 	.word	0x000258a0
   233e0:	000258c0 	.word	0x000258c0

000233e4 <__swbuf>:
   233e4:	b500      	push	{lr}
   233e6:	4b05      	ldr	r3, [pc, #20]	(233fc <__swbuf+0x18>)
   233e8:	4684      	mov	ip, r0
   233ea:	460a      	mov	r2, r1
   233ec:	b081      	sub	sp, #4
   233ee:	6818      	ldr	r0, [r3, #0]
   233f0:	4661      	mov	r1, ip
   233f2:	f7ff ff91 	bl	23318 <__swbuf_r>
   233f6:	b001      	add	sp, #4
   233f8:	bd00      	pop	{pc}
   233fa:	46c0      	nop			(mov r8, r8)
   233fc:	20000044 	.word	0x20000044

00023400 <_write_r>:
   23400:	b530      	push	{r4, r5, lr}
   23402:	4c09      	ldr	r4, [pc, #36]	(23428 <_write_r+0x28>)
   23404:	4605      	mov	r5, r0
   23406:	2000      	movs	r0, #0
   23408:	6020      	str	r0, [r4, #0]
   2340a:	b081      	sub	sp, #4
   2340c:	4608      	mov	r0, r1
   2340e:	4611      	mov	r1, r2
   23410:	461a      	mov	r2, r3
   23412:	f7f6 f965 	bl	196e0 <_write>
   23416:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2341a:	d102      	bne.n	23422 <_write_r+0x22>
   2341c:	6823      	ldr	r3, [r4, #0]
   2341e:	b103      	cbz	r3, 23422 <_write_r+0x22>
   23420:	60eb      	str	r3, [r5, #12]
   23422:	b001      	add	sp, #4
   23424:	bd30      	pop	{r4, r5, pc}
   23426:	46c0      	nop			(mov r8, r8)
   23428:	2000067c 	.word	0x2000067c

0002342c <__swsetup_r>:
   2342c:	b530      	push	{r4, r5, lr}
   2342e:	4b34      	ldr	r3, [pc, #208]	(23500 <__swsetup_r+0xd4>)
   23430:	4605      	mov	r5, r0
   23432:	6818      	ldr	r0, [r3, #0]
   23434:	b081      	sub	sp, #4
   23436:	460c      	mov	r4, r1
   23438:	b118      	cbz	r0, 23442 <__swsetup_r+0x16>
   2343a:	6983      	ldr	r3, [r0, #24]
   2343c:	b90b      	cbnz	r3, 23442 <__swsetup_r+0x16>
   2343e:	f000 f9d7 	bl	237f0 <__sinit>
   23442:	4b30      	ldr	r3, [pc, #192]	(23504 <__swsetup_r+0xd8>)
   23444:	429c      	cmp	r4, r3
   23446:	d103      	bne.n	23450 <__swsetup_r+0x24>
   23448:	4b2d      	ldr	r3, [pc, #180]	(23500 <__swsetup_r+0xd4>)
   2344a:	681b      	ldr	r3, [r3, #0]
   2344c:	681c      	ldr	r4, [r3, #0]
   2344e:	e00c      	b.n	2346a <__swsetup_r+0x3e>
   23450:	4b2d      	ldr	r3, [pc, #180]	(23508 <__swsetup_r+0xdc>)
   23452:	429c      	cmp	r4, r3
   23454:	d103      	bne.n	2345e <__swsetup_r+0x32>
   23456:	4b2a      	ldr	r3, [pc, #168]	(23500 <__swsetup_r+0xd4>)
   23458:	681b      	ldr	r3, [r3, #0]
   2345a:	685c      	ldr	r4, [r3, #4]
   2345c:	e005      	b.n	2346a <__swsetup_r+0x3e>
   2345e:	4b2b      	ldr	r3, [pc, #172]	(2350c <__swsetup_r+0xe0>)
   23460:	429c      	cmp	r4, r3
   23462:	bf02      	ittt	eq
   23464:	4b26      	ldreq	r3, [pc, #152]	(23500 <__swsetup_r+0xd4>)
   23466:	681b      	ldreq	r3, [r3, #0]
   23468:	689c      	ldreq	r4, [r3, #8]
   2346a:	89a3      	ldrh	r3, [r4, #12]
   2346c:	f013 0f08 	tst.w	r3, #8	; 0x8
   23470:	d11c      	bne.n	234ac <__swsetup_r+0x80>
   23472:	f013 0f10 	tst.w	r3, #16	; 0x10
   23476:	d03c      	beq.n	234f2 <__swsetup_r+0xc6>
   23478:	f013 0f04 	tst.w	r3, #4	; 0x4
   2347c:	d012      	beq.n	234a4 <__swsetup_r+0x78>
   2347e:	6b61      	ldr	r1, [r4, #52]
   23480:	b141      	cbz	r1, 23494 <__swsetup_r+0x68>
   23482:	f104 0344 	add.w	r3, r4, #68	; 0x44
   23486:	4299      	cmp	r1, r3
   23488:	d002      	beq.n	23490 <__swsetup_r+0x64>
   2348a:	4628      	mov	r0, r5
   2348c:	f000 fa36 	bl	238fc <_free_r>
   23490:	2300      	movs	r3, #0
   23492:	6363      	str	r3, [r4, #52]
   23494:	89a3      	ldrh	r3, [r4, #12]
   23496:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2349a:	81a3      	strh	r3, [r4, #12]
   2349c:	2300      	movs	r3, #0
   2349e:	6063      	str	r3, [r4, #4]
   234a0:	6923      	ldr	r3, [r4, #16]
   234a2:	6023      	str	r3, [r4, #0]
   234a4:	89a3      	ldrh	r3, [r4, #12]
   234a6:	f043 0308 	orr.w	r3, r3, #8	; 0x8
   234aa:	81a3      	strh	r3, [r4, #12]
   234ac:	6923      	ldr	r3, [r4, #16]
   234ae:	b94b      	cbnz	r3, 234c4 <__swsetup_r+0x98>
   234b0:	89a3      	ldrh	r3, [r4, #12]
   234b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
   234b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   234ba:	d003      	beq.n	234c4 <__swsetup_r+0x98>
   234bc:	4628      	mov	r0, r5
   234be:	4621      	mov	r1, r4
   234c0:	f000 fb36 	bl	23b30 <__smakebuf_r>
   234c4:	89a3      	ldrh	r3, [r4, #12]
   234c6:	f013 0f01 	tst.w	r3, #1	; 0x1
   234ca:	d006      	beq.n	234da <__swsetup_r+0xae>
   234cc:	2300      	movs	r3, #0
   234ce:	60a3      	str	r3, [r4, #8]
   234d0:	6963      	ldr	r3, [r4, #20]
   234d2:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   234d6:	61a3      	str	r3, [r4, #24]
   234d8:	e005      	b.n	234e6 <__swsetup_r+0xba>
   234da:	f013 0f02 	tst.w	r3, #2	; 0x2
   234de:	bf0c      	ite	eq
   234e0:	6963      	ldreq	r3, [r4, #20]
   234e2:	2300      	movne	r3, #0
   234e4:	60a3      	str	r3, [r4, #8]
   234e6:	6923      	ldr	r3, [r4, #16]
   234e8:	b933      	cbnz	r3, 234f8 <__swsetup_r+0xcc>
   234ea:	89a3      	ldrh	r3, [r4, #12]
   234ec:	f013 0f80 	tst.w	r3, #128	; 0x80
   234f0:	d002      	beq.n	234f8 <__swsetup_r+0xcc>
   234f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   234f6:	e000      	b.n	234fa <__swsetup_r+0xce>
   234f8:	2000      	movs	r0, #0
   234fa:	b001      	add	sp, #4
   234fc:	bd30      	pop	{r4, r5, pc}
   234fe:	46c0      	nop			(mov r8, r8)
   23500:	20000044 	.word	0x20000044
   23504:	00025880 	.word	0x00025880
   23508:	000258a0 	.word	0x000258a0
   2350c:	000258c0 	.word	0x000258c0

00023510 <_fflush_r>:
   23510:	b5f0      	push	{r4, r5, r6, r7, lr}
   23512:	690b      	ldr	r3, [r1, #16]
   23514:	b083      	sub	sp, #12
   23516:	9001      	str	r0, [sp, #4]
   23518:	460d      	mov	r5, r1
   2351a:	2b00      	cmp	r3, #0
   2351c:	f000 808c 	beq.w	23638 <_fflush_r+0x128>
   23520:	b118      	cbz	r0, 2352a <_fflush_r+0x1a>
   23522:	6983      	ldr	r3, [r0, #24]
   23524:	b90b      	cbnz	r3, 2352a <_fflush_r+0x1a>
   23526:	f000 f963 	bl	237f0 <__sinit>
   2352a:	4b45      	ldr	r3, [pc, #276]	(23640 <_fflush_r+0x130>)
   2352c:	429d      	cmp	r5, r3
   2352e:	d102      	bne.n	23536 <_fflush_r+0x26>
   23530:	9a01      	ldr	r2, [sp, #4]
   23532:	6815      	ldr	r5, [r2, #0]
   23534:	e00a      	b.n	2354c <_fflush_r+0x3c>
   23536:	4b43      	ldr	r3, [pc, #268]	(23644 <_fflush_r+0x134>)
   23538:	429d      	cmp	r5, r3
   2353a:	d102      	bne.n	23542 <_fflush_r+0x32>
   2353c:	9b01      	ldr	r3, [sp, #4]
   2353e:	685d      	ldr	r5, [r3, #4]
   23540:	e004      	b.n	2354c <_fflush_r+0x3c>
   23542:	4b41      	ldr	r3, [pc, #260]	(23648 <_fflush_r+0x138>)
   23544:	429d      	cmp	r5, r3
   23546:	bf04      	itt	eq
   23548:	9a01      	ldreq	r2, [sp, #4]
   2354a:	6895      	ldreq	r5, [r2, #8]
   2354c:	89ab      	ldrh	r3, [r5, #12]
   2354e:	b21a      	sxth	r2, r3
   23550:	f012 0f08 	tst.w	r2, #8	; 0x8
   23554:	d150      	bne.n	235f8 <_fflush_r+0xe8>
   23556:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
   2355a:	686b      	ldr	r3, [r5, #4]
   2355c:	81aa      	strh	r2, [r5, #12]
   2355e:	2b00      	cmp	r3, #0
   23560:	dc02      	bgt.n	23568 <_fflush_r+0x58>
   23562:	6c2b      	ldr	r3, [r5, #64]
   23564:	2b00      	cmp	r3, #0
   23566:	dd67      	ble.n	23638 <_fflush_r+0x128>
   23568:	6aec      	ldr	r4, [r5, #44]
   2356a:	2c00      	cmp	r4, #0
   2356c:	d064      	beq.n	23638 <_fflush_r+0x128>
   2356e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   23572:	bf18      	it	ne
   23574:	6d6e      	ldrne	r6, [r5, #84]
   23576:	d111      	bne.n	2359c <_fflush_r+0x8c>
   23578:	2200      	movs	r2, #0
   2357a:	2301      	movs	r3, #1
   2357c:	6a29      	ldr	r1, [r5, #32]
   2357e:	9801      	ldr	r0, [sp, #4]
   23580:	47a0      	blx	r4
   23582:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   23586:	4606      	mov	r6, r0
   23588:	d108      	bne.n	2359c <_fflush_r+0x8c>
   2358a:	9a01      	ldr	r2, [sp, #4]
   2358c:	68d3      	ldr	r3, [r2, #12]
   2358e:	2b1d      	cmp	r3, #29
   23590:	d052      	beq.n	23638 <_fflush_r+0x128>
   23592:	89ab      	ldrh	r3, [r5, #12]
   23594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23598:	81ab      	strh	r3, [r5, #12]
   2359a:	e04e      	b.n	2363a <_fflush_r+0x12a>
   2359c:	89ab      	ldrh	r3, [r5, #12]
   2359e:	f013 0f04 	tst.w	r3, #4	; 0x4
   235a2:	d005      	beq.n	235b0 <_fflush_r+0xa0>
   235a4:	686b      	ldr	r3, [r5, #4]
   235a6:	1af6      	subs	r6, r6, r3
   235a8:	6b6b      	ldr	r3, [r5, #52]
   235aa:	b10b      	cbz	r3, 235b0 <_fflush_r+0xa0>
   235ac:	6c2b      	ldr	r3, [r5, #64]
   235ae:	1af6      	subs	r6, r6, r3
   235b0:	2300      	movs	r3, #0
   235b2:	6a29      	ldr	r1, [r5, #32]
   235b4:	6aec      	ldr	r4, [r5, #44]
   235b6:	9801      	ldr	r0, [sp, #4]
   235b8:	4632      	mov	r2, r6
   235ba:	47a0      	blx	r4
   235bc:	42b0      	cmp	r0, r6
   235be:	89ab      	ldrh	r3, [r5, #12]
   235c0:	d130      	bne.n	23624 <_fflush_r+0x114>
   235c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   235c6:	041b      	lsls	r3, r3, #16
   235c8:	0c1b      	lsrs	r3, r3, #16
   235ca:	81ab      	strh	r3, [r5, #12]
   235cc:	2300      	movs	r3, #0
   235ce:	606b      	str	r3, [r5, #4]
   235d0:	692b      	ldr	r3, [r5, #16]
   235d2:	6b69      	ldr	r1, [r5, #52]
   235d4:	602b      	str	r3, [r5, #0]
   235d6:	89ab      	ldrh	r3, [r5, #12]
   235d8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   235dc:	bf18      	it	ne
   235de:	656e      	strne	r6, [r5, #84]
   235e0:	2900      	cmp	r1, #0
   235e2:	d029      	beq.n	23638 <_fflush_r+0x128>
   235e4:	f105 0344 	add.w	r3, r5, #68	; 0x44
   235e8:	4299      	cmp	r1, r3
   235ea:	d002      	beq.n	235f2 <_fflush_r+0xe2>
   235ec:	9801      	ldr	r0, [sp, #4]
   235ee:	f000 f985 	bl	238fc <_free_r>
   235f2:	2300      	movs	r3, #0
   235f4:	636b      	str	r3, [r5, #52]
   235f6:	e01f      	b.n	23638 <_fflush_r+0x128>
   235f8:	692f      	ldr	r7, [r5, #16]
   235fa:	b1ef      	cbz	r7, 23638 <_fflush_r+0x128>
   235fc:	f012 0f03 	tst.w	r2, #3	; 0x3
   23600:	682b      	ldr	r3, [r5, #0]
   23602:	bf0c      	ite	eq
   23604:	696a      	ldreq	r2, [r5, #20]
   23606:	2200      	movne	r2, #0
   23608:	602f      	str	r7, [r5, #0]
   2360a:	ebc7 0603 	rsb	r6, r7, r3
   2360e:	60aa      	str	r2, [r5, #8]
   23610:	e010      	b.n	23634 <_fflush_r+0x124>
   23612:	6a29      	ldr	r1, [r5, #32]
   23614:	6aac      	ldr	r4, [r5, #40]
   23616:	9801      	ldr	r0, [sp, #4]
   23618:	463a      	mov	r2, r7
   2361a:	4633      	mov	r3, r6
   2361c:	47a0      	blx	r4
   2361e:	2800      	cmp	r0, #0
   23620:	dc06      	bgt.n	23630 <_fflush_r+0x120>
   23622:	89ab      	ldrh	r3, [r5, #12]
   23624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23628:	81ab      	strh	r3, [r5, #12]
   2362a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2362e:	e004      	b.n	2363a <_fflush_r+0x12a>
   23630:	183f      	adds	r7, r7, r0
   23632:	1a36      	subs	r6, r6, r0
   23634:	2e00      	cmp	r6, #0
   23636:	dcec      	bgt.n	23612 <_fflush_r+0x102>
   23638:	2000      	movs	r0, #0
   2363a:	b003      	add	sp, #12
   2363c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2363e:	46c0      	nop			(mov r8, r8)
   23640:	00025880 	.word	0x00025880
   23644:	000258a0 	.word	0x000258a0
   23648:	000258c0 	.word	0x000258c0

0002364c <fflush>:
   2364c:	b500      	push	{lr}
   2364e:	4601      	mov	r1, r0
   23650:	b081      	sub	sp, #4
   23652:	b928      	cbnz	r0, 23660 <fflush+0x14>
   23654:	4b05      	ldr	r3, [pc, #20]	(2366c <fflush+0x20>)
   23656:	4906      	ldr	r1, [pc, #24]	(23670 <fflush+0x24>)
   23658:	6818      	ldr	r0, [r3, #0]
   2365a:	f000 fa1b 	bl	23a94 <_fwalk_reent>
   2365e:	e003      	b.n	23668 <fflush+0x1c>
   23660:	4b04      	ldr	r3, [pc, #16]	(23674 <fflush+0x28>)
   23662:	6818      	ldr	r0, [r3, #0]
   23664:	f7ff ff54 	bl	23510 <_fflush_r>
   23668:	b001      	add	sp, #4
   2366a:	bd00      	pop	{pc}
   2366c:	00025878 	.word	0x00025878
   23670:	00023511 	.word	0x00023511
   23674:	20000044 	.word	0x20000044

00023678 <__sfp_lock_acquire>:
   23678:	4770      	bx	lr
   2367a:	46c0      	nop			(mov r8, r8)

0002367c <__sfp_lock_release>:
   2367c:	4770      	bx	lr
   2367e:	46c0      	nop			(mov r8, r8)

00023680 <__sinit_lock_acquire>:
   23680:	4770      	bx	lr
   23682:	46c0      	nop			(mov r8, r8)

00023684 <__sinit_lock_release>:
   23684:	4770      	bx	lr
   23686:	46c0      	nop			(mov r8, r8)

00023688 <__fp_lock>:
   23688:	2000      	movs	r0, #0
   2368a:	4770      	bx	lr

0002368c <__fp_unlock>:
   2368c:	2000      	movs	r0, #0
   2368e:	4770      	bx	lr

00023690 <__fp_unlock_all>:
   23690:	b500      	push	{lr}
   23692:	4b04      	ldr	r3, [pc, #16]	(236a4 <__fp_unlock_all+0x14>)
   23694:	b081      	sub	sp, #4
   23696:	6818      	ldr	r0, [r3, #0]
   23698:	4903      	ldr	r1, [pc, #12]	(236a8 <__fp_unlock_all+0x18>)
   2369a:	f000 fa23 	bl	23ae4 <_fwalk>
   2369e:	b001      	add	sp, #4
   236a0:	bd00      	pop	{pc}
   236a2:	46c0      	nop			(mov r8, r8)
   236a4:	20000044 	.word	0x20000044
   236a8:	0002368d 	.word	0x0002368d

000236ac <__fp_lock_all>:
   236ac:	b500      	push	{lr}
   236ae:	4b04      	ldr	r3, [pc, #16]	(236c0 <__fp_lock_all+0x14>)
   236b0:	b081      	sub	sp, #4
   236b2:	6818      	ldr	r0, [r3, #0]
   236b4:	4903      	ldr	r1, [pc, #12]	(236c4 <__fp_lock_all+0x18>)
   236b6:	f000 fa15 	bl	23ae4 <_fwalk>
   236ba:	b001      	add	sp, #4
   236bc:	bd00      	pop	{pc}
   236be:	46c0      	nop			(mov r8, r8)
   236c0:	20000044 	.word	0x20000044
   236c4:	00023689 	.word	0x00023689

000236c8 <_cleanup_r>:
   236c8:	b500      	push	{lr}
   236ca:	4903      	ldr	r1, [pc, #12]	(236d8 <_cleanup_r+0x10>)
   236cc:	b081      	sub	sp, #4
   236ce:	f000 fa09 	bl	23ae4 <_fwalk>
   236d2:	b001      	add	sp, #4
   236d4:	bd00      	pop	{pc}
   236d6:	46c0      	nop			(mov r8, r8)
   236d8:	00023d7d 	.word	0x00023d7d

000236dc <_cleanup>:
   236dc:	b500      	push	{lr}
   236de:	4b04      	ldr	r3, [pc, #16]	(236f0 <_cleanup+0x14>)
   236e0:	b081      	sub	sp, #4
   236e2:	6818      	ldr	r0, [r3, #0]
   236e4:	4903      	ldr	r1, [pc, #12]	(236f4 <_cleanup+0x18>)
   236e6:	f000 f9fd 	bl	23ae4 <_fwalk>
   236ea:	b001      	add	sp, #4
   236ec:	bd00      	pop	{pc}
   236ee:	46c0      	nop			(mov r8, r8)
   236f0:	00025878 	.word	0x00025878
   236f4:	00023d7d 	.word	0x00023d7d

000236f8 <std>:
   236f8:	2300      	movs	r3, #0
   236fa:	6003      	str	r3, [r0, #0]
   236fc:	6043      	str	r3, [r0, #4]
   236fe:	6083      	str	r3, [r0, #8]
   23700:	8181      	strh	r1, [r0, #12]
   23702:	6643      	str	r3, [r0, #100]
   23704:	81c2      	strh	r2, [r0, #14]
   23706:	6103      	str	r3, [r0, #16]
   23708:	6143      	str	r3, [r0, #20]
   2370a:	6183      	str	r3, [r0, #24]
   2370c:	b510      	push	{r4, lr}
   2370e:	2100      	movs	r1, #0
   23710:	4604      	mov	r4, r0
   23712:	2208      	movs	r2, #8
   23714:	f100 005c 	add.w	r0, r0, #92	; 0x5c
   23718:	f7ff fa3e 	bl	22b98 <memset>
   2371c:	4b04      	ldr	r3, [pc, #16]	(23730 <std+0x38>)
   2371e:	6224      	str	r4, [r4, #32]
   23720:	6263      	str	r3, [r4, #36]
   23722:	4b04      	ldr	r3, [pc, #16]	(23734 <std+0x3c>)
   23724:	62a3      	str	r3, [r4, #40]
   23726:	4b04      	ldr	r3, [pc, #16]	(23738 <std+0x40>)
   23728:	62e3      	str	r3, [r4, #44]
   2372a:	4b04      	ldr	r3, [pc, #16]	(2373c <std+0x44>)
   2372c:	6323      	str	r3, [r4, #48]
   2372e:	bd10      	pop	{r4, pc}
   23730:	00023c7d 	.word	0x00023c7d
   23734:	00023c3d 	.word	0x00023c3d
   23738:	00023c11 	.word	0x00023c11
   2373c:	00023c01 	.word	0x00023c01

00023740 <__sfmoreglue>:
   23740:	2368      	movs	r3, #104
   23742:	b570      	push	{r4, r5, r6, lr}
   23744:	fb03 f601 	mul.w	r6, r3, r1
   23748:	460d      	mov	r5, r1
   2374a:	f106 010c 	add.w	r1, r6, #12	; 0xc
   2374e:	f7fe ff9f 	bl	22690 <_malloc_r>
   23752:	4604      	mov	r4, r0
   23754:	b148      	cbz	r0, 2376a <__sfmoreglue+0x2a>
   23756:	f100 000c 	add.w	r0, r0, #12	; 0xc
   2375a:	2300      	movs	r3, #0
   2375c:	6023      	str	r3, [r4, #0]
   2375e:	6065      	str	r5, [r4, #4]
   23760:	60a0      	str	r0, [r4, #8]
   23762:	2100      	movs	r1, #0
   23764:	4632      	mov	r2, r6
   23766:	f7ff fa17 	bl	22b98 <memset>
   2376a:	4620      	mov	r0, r4
   2376c:	bd70      	pop	{r4, r5, r6, pc}
   2376e:	46c0      	nop			(mov r8, r8)

00023770 <__sfp>:
   23770:	4b1e      	ldr	r3, [pc, #120]	(237ec <__sfp+0x7c>)
   23772:	b5f0      	push	{r4, r5, r6, r7, lr}
   23774:	681c      	ldr	r4, [r3, #0]
   23776:	b081      	sub	sp, #4
   23778:	69a3      	ldr	r3, [r4, #24]
   2377a:	4607      	mov	r7, r0
   2377c:	b913      	cbnz	r3, 23784 <__sfp+0x14>
   2377e:	4620      	mov	r0, r4
   23780:	f000 f836 	bl	237f0 <__sinit>
   23784:	f104 06d8 	add.w	r6, r4, #216	; 0xd8
   23788:	68b4      	ldr	r4, [r6, #8]
   2378a:	6873      	ldr	r3, [r6, #4]
   2378c:	e003      	b.n	23796 <__sfp+0x26>
   2378e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   23792:	b18d      	cbz	r5, 237b8 <__sfp+0x48>
   23794:	3468      	adds	r4, #104
   23796:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   2379a:	d5f8      	bpl.n	2378e <__sfp+0x1e>
   2379c:	6833      	ldr	r3, [r6, #0]
   2379e:	b92b      	cbnz	r3, 237ac <__sfp+0x3c>
   237a0:	4638      	mov	r0, r7
   237a2:	2104      	movs	r1, #4
   237a4:	f7ff ffcc 	bl	23740 <__sfmoreglue>
   237a8:	6030      	str	r0, [r6, #0]
   237aa:	b108      	cbz	r0, 237b0 <__sfp+0x40>
   237ac:	6836      	ldr	r6, [r6, #0]
   237ae:	e7eb      	b.n	23788 <__sfp+0x18>
   237b0:	230c      	movs	r3, #12
   237b2:	60fb      	str	r3, [r7, #12]
   237b4:	2400      	movs	r4, #0
   237b6:	e016      	b.n	237e6 <__sfp+0x76>
   237b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   237bc:	81e3      	strh	r3, [r4, #14]
   237be:	f04f 0301 	mov.w	r3, #1	; 0x1
   237c2:	81a3      	strh	r3, [r4, #12]
   237c4:	6665      	str	r5, [r4, #100]
   237c6:	6025      	str	r5, [r4, #0]
   237c8:	60a5      	str	r5, [r4, #8]
   237ca:	6065      	str	r5, [r4, #4]
   237cc:	6125      	str	r5, [r4, #16]
   237ce:	6165      	str	r5, [r4, #20]
   237d0:	61a5      	str	r5, [r4, #24]
   237d2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   237d6:	2100      	movs	r1, #0
   237d8:	2208      	movs	r2, #8
   237da:	f7ff f9dd 	bl	22b98 <memset>
   237de:	6365      	str	r5, [r4, #52]
   237e0:	63a5      	str	r5, [r4, #56]
   237e2:	64a5      	str	r5, [r4, #72]
   237e4:	64e5      	str	r5, [r4, #76]
   237e6:	4620      	mov	r0, r4
   237e8:	b001      	add	sp, #4
   237ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   237ec:	00025878 	.word	0x00025878

000237f0 <__sinit>:
   237f0:	6982      	ldr	r2, [r0, #24]
   237f2:	b510      	push	{r4, lr}
   237f4:	4604      	mov	r4, r0
   237f6:	bb32      	cbnz	r2, 23846 <__sinit+0x56>
   237f8:	4b13      	ldr	r3, [pc, #76]	(23848 <__sinit+0x58>)
   237fa:	f8c0 20d8 	str.w	r2, [r0, #216]
   237fe:	6283      	str	r3, [r0, #40]
   23800:	2301      	movs	r3, #1
   23802:	6183      	str	r3, [r0, #24]
   23804:	f8c0 20dc 	str.w	r2, [r0, #220]
   23808:	f8c0 20e0 	str.w	r2, [r0, #224]
   2380c:	f7ff ffb0 	bl	23770 <__sfp>
   23810:	6020      	str	r0, [r4, #0]
   23812:	4620      	mov	r0, r4
   23814:	f7ff ffac 	bl	23770 <__sfp>
   23818:	6060      	str	r0, [r4, #4]
   2381a:	4620      	mov	r0, r4
   2381c:	f7ff ffa8 	bl	23770 <__sfp>
   23820:	2104      	movs	r1, #4
   23822:	60a0      	str	r0, [r4, #8]
   23824:	2200      	movs	r2, #0
   23826:	6820      	ldr	r0, [r4, #0]
   23828:	4623      	mov	r3, r4
   2382a:	f7ff ff65 	bl	236f8 <std>
   2382e:	6860      	ldr	r0, [r4, #4]
   23830:	2109      	movs	r1, #9
   23832:	2201      	movs	r2, #1
   23834:	4623      	mov	r3, r4
   23836:	f7ff ff5f 	bl	236f8 <std>
   2383a:	68a0      	ldr	r0, [r4, #8]
   2383c:	2112      	movs	r1, #18
   2383e:	2202      	movs	r2, #2
   23840:	4623      	mov	r3, r4
   23842:	f7ff ff59 	bl	236f8 <std>
   23846:	bd10      	pop	{r4, pc}
   23848:	000236c9 	.word	0x000236c9

0002384c <_malloc_trim_r>:
   2384c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2384e:	4f28      	ldr	r7, [pc, #160]	(238f0 <_malloc_trim_r+0xa4>)
   23850:	b081      	sub	sp, #4
   23852:	460c      	mov	r4, r1
   23854:	4605      	mov	r5, r0
   23856:	f7ff f9a7 	bl	22ba8 <__malloc_lock>
   2385a:	68bb      	ldr	r3, [r7, #8]
   2385c:	685b      	ldr	r3, [r3, #4]
   2385e:	f023 0603 	bic.w	r6, r3, #3	; 0x3
   23862:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
   23866:	330f      	adds	r3, #15
   23868:	1b1b      	subs	r3, r3, r4
   2386a:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
   2386e:	f023 031f 	bic.w	r3, r3, #31	; 0x1f
   23872:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   23876:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   2387a:	db23      	blt.n	238c4 <_malloc_trim_r+0x78>
   2387c:	2100      	movs	r1, #0
   2387e:	4628      	mov	r0, r5
   23880:	f7ff fc1e 	bl	230c0 <_sbrk_r>
   23884:	68bb      	ldr	r3, [r7, #8]
   23886:	199b      	adds	r3, r3, r6
   23888:	4298      	cmp	r0, r3
   2388a:	d11b      	bne.n	238c4 <_malloc_trim_r+0x78>
   2388c:	f1c4 0100 	rsb	r1, r4, #0	; 0x0
   23890:	4628      	mov	r0, r5
   23892:	f7ff fc15 	bl	230c0 <_sbrk_r>
   23896:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2389a:	d118      	bne.n	238ce <_malloc_trim_r+0x82>
   2389c:	2100      	movs	r1, #0
   2389e:	4628      	mov	r0, r5
   238a0:	f7ff fc0e 	bl	230c0 <_sbrk_r>
   238a4:	f8d7 c008 	ldr.w	ip, [r7, #8]
   238a8:	ebcc 0100 	rsb	r1, ip, r0
   238ac:	290f      	cmp	r1, #15
   238ae:	dd09      	ble.n	238c4 <_malloc_trim_r+0x78>
   238b0:	4b10      	ldr	r3, [pc, #64]	(238f4 <_malloc_trim_r+0xa8>)
   238b2:	4a11      	ldr	r2, [pc, #68]	(238f8 <_malloc_trim_r+0xac>)
   238b4:	681b      	ldr	r3, [r3, #0]
   238b6:	ebc3 0300 	rsb	r3, r3, r0
   238ba:	6013      	str	r3, [r2, #0]
   238bc:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   238c0:	f8cc 3004 	str.w	r3, [ip, #4]
   238c4:	4628      	mov	r0, r5
   238c6:	f7ff f971 	bl	22bac <__malloc_unlock>
   238ca:	2000      	movs	r0, #0
   238cc:	e00d      	b.n	238ea <_malloc_trim_r+0x9e>
   238ce:	68ba      	ldr	r2, [r7, #8]
   238d0:	ebc4 0306 	rsb	r3, r4, r6
   238d4:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   238d8:	6053      	str	r3, [r2, #4]
   238da:	4a07      	ldr	r2, [pc, #28]	(238f8 <_malloc_trim_r+0xac>)
   238dc:	4628      	mov	r0, r5
   238de:	6813      	ldr	r3, [r2, #0]
   238e0:	1b1b      	subs	r3, r3, r4
   238e2:	6013      	str	r3, [r2, #0]
   238e4:	f7ff f962 	bl	22bac <__malloc_unlock>
   238e8:	2001      	movs	r0, #1
   238ea:	b001      	add	sp, #4
   238ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   238ee:	46c0      	nop			(mov r8, r8)
   238f0:	20000138 	.word	0x20000138
   238f4:	20000544 	.word	0x20000544
   238f8:	20000ea0 	.word	0x20000ea0

000238fc <_free_r>:
   238fc:	b570      	push	{r4, r5, r6, lr}
   238fe:	4606      	mov	r6, r0
   23900:	460c      	mov	r4, r1
   23902:	2900      	cmp	r1, #0
   23904:	f000 80bd 	beq.w	23a82 <_free_r+0x186>
   23908:	f7ff f94e 	bl	22ba8 <__malloc_lock>
   2390c:	f1a4 0c08 	sub.w	ip, r4, #8	; 0x8
   23910:	f8dc 3004 	ldr.w	r3, [ip, #4]
   23914:	4d5b      	ldr	r5, [pc, #364]	(23a84 <_free_r+0x188>)
   23916:	f023 0101 	bic.w	r1, r3, #1	; 0x1
   2391a:	eb0c 0001 	add.w	r0, ip, r1
   2391e:	6842      	ldr	r2, [r0, #4]
   23920:	f003 0301 	and.w	r3, r3, #1	; 0x1
   23924:	f022 0e03 	bic.w	lr, r2, #3	; 0x3
   23928:	68aa      	ldr	r2, [r5, #8]
   2392a:	4290      	cmp	r0, r2
   2392c:	d11d      	bne.n	2396a <_free_r+0x6e>
   2392e:	4471      	add	r1, lr
   23930:	b953      	cbnz	r3, 23948 <_free_r+0x4c>
   23932:	f854 3c08 	ldr.w	r3, [r4, #-8]
   23936:	ebc3 0c0c 	rsb	ip, r3, ip
   2393a:	f8dc 200c 	ldr.w	r2, [ip, #12]
   2393e:	18c9      	adds	r1, r1, r3
   23940:	f8dc 3008 	ldr.w	r3, [ip, #8]
   23944:	60da      	str	r2, [r3, #12]
   23946:	6093      	str	r3, [r2, #8]
   23948:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   2394c:	f8cc 3004 	str.w	r3, [ip, #4]
   23950:	4b4d      	ldr	r3, [pc, #308]	(23a88 <_free_r+0x18c>)
   23952:	f8c5 c008 	str.w	ip, [r5, #8]
   23956:	681b      	ldr	r3, [r3, #0]
   23958:	4299      	cmp	r1, r3
   2395a:	f0c0 808f 	bcc.w	23a7c <_free_r+0x180>
   2395e:	4b4b      	ldr	r3, [pc, #300]	(23a8c <_free_r+0x190>)
   23960:	4630      	mov	r0, r6
   23962:	6819      	ldr	r1, [r3, #0]
   23964:	f7ff ff72 	bl	2384c <_malloc_trim_r>
   23968:	e088      	b.n	23a7c <_free_r+0x180>
   2396a:	f8c0 e004 	str.w	lr, [r0, #4]
   2396e:	b983      	cbnz	r3, 23992 <_free_r+0x96>
   23970:	f854 3c08 	ldr.w	r3, [r4, #-8]
   23974:	ebc3 0c0c 	rsb	ip, r3, ip
   23978:	f8dc 2008 	ldr.w	r2, [ip, #8]
   2397c:	18c9      	adds	r1, r1, r3
   2397e:	f105 0308 	add.w	r3, r5, #8	; 0x8
   23982:	429a      	cmp	r2, r3
   23984:	d101      	bne.n	2398a <_free_r+0x8e>
   23986:	2401      	movs	r4, #1
   23988:	e004      	b.n	23994 <_free_r+0x98>
   2398a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   2398e:	60d3      	str	r3, [r2, #12]
   23990:	609a      	str	r2, [r3, #8]
   23992:	2400      	movs	r4, #0
   23994:	eb00 030e 	add.w	r3, r0, lr
   23998:	685b      	ldr	r3, [r3, #4]
   2399a:	f013 0f01 	tst.w	r3, #1	; 0x1
   2399e:	d113      	bne.n	239c8 <_free_r+0xcc>
   239a0:	4471      	add	r1, lr
   239a2:	b96c      	cbnz	r4, 239c0 <_free_r+0xc4>
   239a4:	6882      	ldr	r2, [r0, #8]
   239a6:	4b3a      	ldr	r3, [pc, #232]	(23a90 <_free_r+0x194>)
   239a8:	429a      	cmp	r2, r3
   239aa:	d109      	bne.n	239c0 <_free_r+0xc4>
   239ac:	f8c2 c00c 	str.w	ip, [r2, #12]
   239b0:	f8c2 c008 	str.w	ip, [r2, #8]
   239b4:	f8cc 200c 	str.w	r2, [ip, #12]
   239b8:	f8cc 2008 	str.w	r2, [ip, #8]
   239bc:	2401      	movs	r4, #1
   239be:	e003      	b.n	239c8 <_free_r+0xcc>
   239c0:	68c2      	ldr	r2, [r0, #12]
   239c2:	6883      	ldr	r3, [r0, #8]
   239c4:	60da      	str	r2, [r3, #12]
   239c6:	6093      	str	r3, [r2, #8]
   239c8:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   239cc:	f8cc 3004 	str.w	r3, [ip, #4]
   239d0:	f84c 1001 	str.w	r1, [ip, r1]
   239d4:	2c00      	cmp	r4, #0
   239d6:	d151      	bne.n	23a7c <_free_r+0x180>
   239d8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   239dc:	d212      	bcs.n	23a04 <_free_r+0x108>
   239de:	08c9      	lsrs	r1, r1, #3
   239e0:	108b      	asrs	r3, r1, #2
   239e2:	2201      	movs	r2, #1
   239e4:	409a      	lsls	r2, r3
   239e6:	686b      	ldr	r3, [r5, #4]
   239e8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   239ec:	4313      	orrs	r3, r2
   239ee:	606b      	str	r3, [r5, #4]
   239f0:	688b      	ldr	r3, [r1, #8]
   239f2:	f8cc 100c 	str.w	r1, [ip, #12]
   239f6:	f8cc 3008 	str.w	r3, [ip, #8]
   239fa:	f8c3 c00c 	str.w	ip, [r3, #12]
   239fe:	f8c1 c008 	str.w	ip, [r1, #8]
   23a02:	e03b      	b.n	23a7c <_free_r+0x180>
   23a04:	0a4a      	lsrs	r2, r1, #9
   23a06:	2a04      	cmp	r2, #4
   23a08:	d802      	bhi.n	23a10 <_free_r+0x114>
   23a0a:	098b      	lsrs	r3, r1, #6
   23a0c:	3338      	adds	r3, #56
   23a0e:	e017      	b.n	23a40 <_free_r+0x144>
   23a10:	2a14      	cmp	r2, #20
   23a12:	bf98      	it	ls
   23a14:	f102 035b 	addls.w	r3, r2, #91	; 0x5b
   23a18:	d912      	bls.n	23a40 <_free_r+0x144>
   23a1a:	2a54      	cmp	r2, #84
   23a1c:	d802      	bhi.n	23a24 <_free_r+0x128>
   23a1e:	0b0b      	lsrs	r3, r1, #12
   23a20:	336e      	adds	r3, #110
   23a22:	e00d      	b.n	23a40 <_free_r+0x144>
   23a24:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   23a28:	d802      	bhi.n	23a30 <_free_r+0x134>
   23a2a:	0bcb      	lsrs	r3, r1, #15
   23a2c:	3377      	adds	r3, #119
   23a2e:	e007      	b.n	23a40 <_free_r+0x144>
   23a30:	f240 5354 	movw	r3, #1364	; 0x554
   23a34:	429a      	cmp	r2, r3
   23a36:	d901      	bls.n	23a3c <_free_r+0x140>
   23a38:	237e      	movs	r3, #126
   23a3a:	e001      	b.n	23a40 <_free_r+0x144>
   23a3c:	0c8b      	lsrs	r3, r1, #18
   23a3e:	337c      	adds	r3, #124
   23a40:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
   23a44:	6890      	ldr	r0, [r2, #8]
   23a46:	4290      	cmp	r0, r2
   23a48:	d10a      	bne.n	23a60 <_free_r+0x164>
   23a4a:	109b      	asrs	r3, r3, #2
   23a4c:	2201      	movs	r2, #1
   23a4e:	409a      	lsls	r2, r3
   23a50:	686b      	ldr	r3, [r5, #4]
   23a52:	4313      	orrs	r3, r2
   23a54:	606b      	str	r3, [r5, #4]
   23a56:	4603      	mov	r3, r0
   23a58:	e008      	b.n	23a6c <_free_r+0x170>
   23a5a:	6880      	ldr	r0, [r0, #8]
   23a5c:	4290      	cmp	r0, r2
   23a5e:	d004      	beq.n	23a6a <_free_r+0x16e>
   23a60:	6843      	ldr	r3, [r0, #4]
   23a62:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   23a66:	4299      	cmp	r1, r3
   23a68:	d3f7      	bcc.n	23a5a <_free_r+0x15e>
   23a6a:	68c3      	ldr	r3, [r0, #12]
   23a6c:	f8cc 300c 	str.w	r3, [ip, #12]
   23a70:	f8cc 0008 	str.w	r0, [ip, #8]
   23a74:	f8c0 c00c 	str.w	ip, [r0, #12]
   23a78:	f8c3 c008 	str.w	ip, [r3, #8]
   23a7c:	4630      	mov	r0, r6
   23a7e:	f7ff f895 	bl	22bac <__malloc_unlock>
   23a82:	bd70      	pop	{r4, r5, r6, pc}
   23a84:	20000138 	.word	0x20000138
   23a88:	20000540 	.word	0x20000540
   23a8c:	20000e94 	.word	0x20000e94
   23a90:	20000140 	.word	0x20000140

00023a94 <_fwalk_reent>:
   23a94:	b5f0      	push	{r4, r5, r6, r7, lr}
   23a96:	b083      	sub	sp, #12
   23a98:	9001      	str	r0, [sp, #4]
   23a9a:	9100      	str	r1, [sp, #0]
   23a9c:	f7ff fdec 	bl	23678 <__sfp_lock_acquire>
   23aa0:	9b01      	ldr	r3, [sp, #4]
   23aa2:	2700      	movs	r7, #0
   23aa4:	f103 05d8 	add.w	r5, r3, #216	; 0xd8
   23aa8:	e014      	b.n	23ad4 <_fwalk_reent+0x40>
   23aaa:	68ac      	ldr	r4, [r5, #8]
   23aac:	686e      	ldr	r6, [r5, #4]
   23aae:	e00d      	b.n	23acc <_fwalk_reent+0x38>
   23ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23ab4:	b14b      	cbz	r3, 23aca <_fwalk_reent+0x36>
   23ab6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   23aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   23abe:	d004      	beq.n	23aca <_fwalk_reent+0x36>
   23ac0:	9801      	ldr	r0, [sp, #4]
   23ac2:	4621      	mov	r1, r4
   23ac4:	9b00      	ldr	r3, [sp, #0]
   23ac6:	4798      	blx	r3
   23ac8:	4307      	orrs	r7, r0
   23aca:	3468      	adds	r4, #104
   23acc:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   23ad0:	d5ee      	bpl.n	23ab0 <_fwalk_reent+0x1c>
   23ad2:	682d      	ldr	r5, [r5, #0]
   23ad4:	2d00      	cmp	r5, #0
   23ad6:	d1e8      	bne.n	23aaa <_fwalk_reent+0x16>
   23ad8:	f7ff fdd0 	bl	2367c <__sfp_lock_release>
   23adc:	4638      	mov	r0, r7
   23ade:	b003      	add	sp, #12
   23ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23ae2:	46c0      	nop			(mov r8, r8)

00023ae4 <_fwalk>:
   23ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   23ae6:	4604      	mov	r4, r0
   23ae8:	b083      	sub	sp, #12
   23aea:	9101      	str	r1, [sp, #4]
   23aec:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
   23af0:	f7ff fdc2 	bl	23678 <__sfp_lock_acquire>
   23af4:	2700      	movs	r7, #0
   23af6:	e013      	b.n	23b20 <_fwalk+0x3c>
   23af8:	68ac      	ldr	r4, [r5, #8]
   23afa:	686e      	ldr	r6, [r5, #4]
   23afc:	e00c      	b.n	23b18 <_fwalk+0x34>
   23afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23b02:	b143      	cbz	r3, 23b16 <_fwalk+0x32>
   23b04:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   23b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   23b0c:	d003      	beq.n	23b16 <_fwalk+0x32>
   23b0e:	4620      	mov	r0, r4
   23b10:	9b01      	ldr	r3, [sp, #4]
   23b12:	4798      	blx	r3
   23b14:	4307      	orrs	r7, r0
   23b16:	3468      	adds	r4, #104
   23b18:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   23b1c:	d5ef      	bpl.n	23afe <_fwalk+0x1a>
   23b1e:	682d      	ldr	r5, [r5, #0]
   23b20:	2d00      	cmp	r5, #0
   23b22:	d1e9      	bne.n	23af8 <_fwalk+0x14>
   23b24:	f7ff fdaa 	bl	2367c <__sfp_lock_release>
   23b28:	4638      	mov	r0, r7
   23b2a:	b003      	add	sp, #12
   23b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23b2e:	46c0      	nop			(mov r8, r8)

00023b30 <__smakebuf_r>:
   23b30:	b5f0      	push	{r4, r5, r6, r7, lr}
   23b32:	898b      	ldrh	r3, [r1, #12]
   23b34:	b091      	sub	sp, #68
   23b36:	f013 0f02 	tst.w	r3, #2	; 0x2
   23b3a:	4606      	mov	r6, r0
   23b3c:	460c      	mov	r4, r1
   23b3e:	d13d      	bne.n	23bbc <__smakebuf_r+0x8c>
   23b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   23b44:	2900      	cmp	r1, #0
   23b46:	db04      	blt.n	23b52 <__smakebuf_r+0x22>
   23b48:	aa01      	add	r2, sp, #4
   23b4a:	f000 f923 	bl	23d94 <_fstat_r>
   23b4e:	2800      	cmp	r0, #0
   23b50:	da0b      	bge.n	23b6a <__smakebuf_r+0x3a>
   23b52:	89a3      	ldrh	r3, [r4, #12]
   23b54:	f013 0f80 	tst.w	r3, #128	; 0x80
   23b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   23b5c:	bf14      	ite	ne
   23b5e:	2540      	movne	r5, #64
   23b60:	f44f 7580 	moveq.w	r5, #256	; 0x100
   23b64:	81a3      	strh	r3, [r4, #12]
   23b66:	2700      	movs	r7, #0
   23b68:	e01c      	b.n	23ba4 <__smakebuf_r+0x74>
   23b6a:	9b02      	ldr	r3, [sp, #8]
   23b6c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   23b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   23b74:	bf14      	ite	ne
   23b76:	2700      	movne	r7, #0
   23b78:	2701      	moveq	r7, #1
   23b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   23b7e:	d10b      	bne.n	23b98 <__smakebuf_r+0x68>
   23b80:	6ae2      	ldr	r2, [r4, #44]
   23b82:	4b1d      	ldr	r3, [pc, #116]	(23bf8 <__smakebuf_r+0xc8>)
   23b84:	429a      	cmp	r2, r3
   23b86:	d107      	bne.n	23b98 <__smakebuf_r+0x68>
   23b88:	89a3      	ldrh	r3, [r4, #12]
   23b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   23b8e:	81a3      	strh	r3, [r4, #12]
   23b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
   23b94:	6523      	str	r3, [r4, #80]
   23b96:	e003      	b.n	23ba0 <__smakebuf_r+0x70>
   23b98:	89a3      	ldrh	r3, [r4, #12]
   23b9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   23b9e:	81a3      	strh	r3, [r4, #12]
   23ba0:	f44f 7580 	mov.w	r5, #256	; 0x100
   23ba4:	4630      	mov	r0, r6
   23ba6:	4629      	mov	r1, r5
   23ba8:	f7fe fd72 	bl	22690 <_malloc_r>
   23bac:	b968      	cbnz	r0, 23bca <__smakebuf_r+0x9a>
   23bae:	89a3      	ldrh	r3, [r4, #12]
   23bb0:	f413 7f00 	tst.w	r3, #512	; 0x200
   23bb4:	d11d      	bne.n	23bf2 <__smakebuf_r+0xc2>
   23bb6:	f043 0302 	orr.w	r3, r3, #2	; 0x2
   23bba:	81a3      	strh	r3, [r4, #12]
   23bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
   23bc0:	6023      	str	r3, [r4, #0]
   23bc2:	6123      	str	r3, [r4, #16]
   23bc4:	2301      	movs	r3, #1
   23bc6:	6163      	str	r3, [r4, #20]
   23bc8:	e013      	b.n	23bf2 <__smakebuf_r+0xc2>
   23bca:	4b0c      	ldr	r3, [pc, #48]	(23bfc <__smakebuf_r+0xcc>)
   23bcc:	6020      	str	r0, [r4, #0]
   23bce:	62b3      	str	r3, [r6, #40]
   23bd0:	89a3      	ldrh	r3, [r4, #12]
   23bd2:	6120      	str	r0, [r4, #16]
   23bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   23bd8:	81a3      	strh	r3, [r4, #12]
   23bda:	6165      	str	r5, [r4, #20]
   23bdc:	b14f      	cbz	r7, 23bf2 <__smakebuf_r+0xc2>
   23bde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   23be2:	4630      	mov	r0, r6
   23be4:	f000 f8ea 	bl	23dbc <_isatty_r>
   23be8:	b118      	cbz	r0, 23bf2 <__smakebuf_r+0xc2>
   23bea:	89a3      	ldrh	r3, [r4, #12]
   23bec:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   23bf0:	81a3      	strh	r3, [r4, #12]
   23bf2:	b011      	add	sp, #68
   23bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23bf6:	46c0      	nop			(mov r8, r8)
   23bf8:	00023c11 	.word	0x00023c11
   23bfc:	000236c9 	.word	0x000236c9

00023c00 <__sclose>:
   23c00:	b500      	push	{lr}
   23c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   23c06:	b081      	sub	sp, #4
   23c08:	f000 f84c 	bl	23ca4 <_close_r>
   23c0c:	b001      	add	sp, #4
   23c0e:	bd00      	pop	{pc}

00023c10 <__sseek>:
   23c10:	b510      	push	{r4, lr}
   23c12:	460c      	mov	r4, r1
   23c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   23c18:	f000 f8e4 	bl	23de4 <_lseek_r>
   23c1c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   23c20:	89a3      	ldrh	r3, [r4, #12]
   23c22:	d105      	bne.n	23c30 <__sseek+0x20>
   23c24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   23c28:	041b      	lsls	r3, r3, #16
   23c2a:	0c1b      	lsrs	r3, r3, #16
   23c2c:	81a3      	strh	r3, [r4, #12]
   23c2e:	e003      	b.n	23c38 <__sseek+0x28>
   23c30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   23c34:	81a3      	strh	r3, [r4, #12]
   23c36:	6560      	str	r0, [r4, #84]
   23c38:	bd10      	pop	{r4, pc}
   23c3a:	46c0      	nop			(mov r8, r8)

00023c3c <__swrite>:
   23c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   23c3e:	461f      	mov	r7, r3
   23c40:	898b      	ldrh	r3, [r1, #12]
   23c42:	b081      	sub	sp, #4
   23c44:	f413 7f80 	tst.w	r3, #256	; 0x100
   23c48:	4605      	mov	r5, r0
   23c4a:	460c      	mov	r4, r1
   23c4c:	4616      	mov	r6, r2
   23c4e:	d005      	beq.n	23c5c <__swrite+0x20>
   23c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   23c54:	2200      	movs	r2, #0
   23c56:	2302      	movs	r3, #2
   23c58:	f000 f8c4 	bl	23de4 <_lseek_r>
   23c5c:	89a3      	ldrh	r3, [r4, #12]
   23c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   23c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   23c66:	041b      	lsls	r3, r3, #16
   23c68:	0c1b      	lsrs	r3, r3, #16
   23c6a:	81a3      	strh	r3, [r4, #12]
   23c6c:	4628      	mov	r0, r5
   23c6e:	4632      	mov	r2, r6
   23c70:	463b      	mov	r3, r7
   23c72:	f7ff fbc5 	bl	23400 <_write_r>
   23c76:	b001      	add	sp, #4
   23c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23c7a:	46c0      	nop			(mov r8, r8)

00023c7c <__sread>:
   23c7c:	b510      	push	{r4, lr}
   23c7e:	460c      	mov	r4, r1
   23c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   23c84:	f000 f8c4 	bl	23e10 <_read_r>
   23c88:	2800      	cmp	r0, #0
   23c8a:	db03      	blt.n	23c94 <__sread+0x18>
   23c8c:	6d63      	ldr	r3, [r4, #84]
   23c8e:	181b      	adds	r3, r3, r0
   23c90:	6563      	str	r3, [r4, #84]
   23c92:	e005      	b.n	23ca0 <__sread+0x24>
   23c94:	89a3      	ldrh	r3, [r4, #12]
   23c96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   23c9a:	041b      	lsls	r3, r3, #16
   23c9c:	0c1b      	lsrs	r3, r3, #16
   23c9e:	81a3      	strh	r3, [r4, #12]
   23ca0:	bd10      	pop	{r4, pc}
   23ca2:	46c0      	nop			(mov r8, r8)

00023ca4 <_close_r>:
   23ca4:	b530      	push	{r4, r5, lr}
   23ca6:	4c08      	ldr	r4, [pc, #32]	(23cc8 <_close_r+0x24>)
   23ca8:	2300      	movs	r3, #0
   23caa:	b081      	sub	sp, #4
   23cac:	4605      	mov	r5, r0
   23cae:	4608      	mov	r0, r1
   23cb0:	6023      	str	r3, [r4, #0]
   23cb2:	f7f5 fc0d 	bl	194d0 <_close>
   23cb6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   23cba:	d102      	bne.n	23cc2 <_close_r+0x1e>
   23cbc:	6823      	ldr	r3, [r4, #0]
   23cbe:	b103      	cbz	r3, 23cc2 <_close_r+0x1e>
   23cc0:	60eb      	str	r3, [r5, #12]
   23cc2:	b001      	add	sp, #4
   23cc4:	bd30      	pop	{r4, r5, pc}
   23cc6:	46c0      	nop			(mov r8, r8)
   23cc8:	2000067c 	.word	0x2000067c

00023ccc <_fclose_r>:
   23ccc:	b570      	push	{r4, r5, r6, lr}
   23cce:	4605      	mov	r5, r0
   23cd0:	460c      	mov	r4, r1
   23cd2:	b1d1      	cbz	r1, 23d0a <_fclose_r+0x3e>
   23cd4:	f7ff fcd0 	bl	23678 <__sfp_lock_acquire>
   23cd8:	b125      	cbz	r5, 23ce4 <_fclose_r+0x18>
   23cda:	69ab      	ldr	r3, [r5, #24]
   23cdc:	b913      	cbnz	r3, 23ce4 <_fclose_r+0x18>
   23cde:	4628      	mov	r0, r5
   23ce0:	f7ff fd86 	bl	237f0 <__sinit>
   23ce4:	4b22      	ldr	r3, [pc, #136]	(23d70 <_fclose_r+0xa4>)
   23ce6:	429c      	cmp	r4, r3
   23ce8:	bf08      	it	eq
   23cea:	682c      	ldreq	r4, [r5, #0]
   23cec:	d008      	beq.n	23d00 <_fclose_r+0x34>
   23cee:	4b21      	ldr	r3, [pc, #132]	(23d74 <_fclose_r+0xa8>)
   23cf0:	429c      	cmp	r4, r3
   23cf2:	bf08      	it	eq
   23cf4:	686c      	ldreq	r4, [r5, #4]
   23cf6:	d003      	beq.n	23d00 <_fclose_r+0x34>
   23cf8:	4b1f      	ldr	r3, [pc, #124]	(23d78 <_fclose_r+0xac>)
   23cfa:	429c      	cmp	r4, r3
   23cfc:	bf08      	it	eq
   23cfe:	68ac      	ldreq	r4, [r5, #8]
   23d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23d04:	b91b      	cbnz	r3, 23d0e <_fclose_r+0x42>
   23d06:	f7ff fcb9 	bl	2367c <__sfp_lock_release>
   23d0a:	2600      	movs	r6, #0
   23d0c:	e02d      	b.n	23d6a <_fclose_r+0x9e>
   23d0e:	4628      	mov	r0, r5
   23d10:	4621      	mov	r1, r4
   23d12:	f7ff fbfd 	bl	23510 <_fflush_r>
   23d16:	6b23      	ldr	r3, [r4, #48]
   23d18:	4606      	mov	r6, r0
   23d1a:	b13b      	cbz	r3, 23d2c <_fclose_r+0x60>
   23d1c:	6a21      	ldr	r1, [r4, #32]
   23d1e:	4628      	mov	r0, r5
   23d20:	4798      	blx	r3
   23d22:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   23d26:	bf28      	it	cs
   23d28:	f04f 36ff 	movcs.w	r6, #4294967295	; 0xffffffff
   23d2c:	89a3      	ldrh	r3, [r4, #12]
   23d2e:	f013 0f80 	tst.w	r3, #128	; 0x80
   23d32:	d003      	beq.n	23d3c <_fclose_r+0x70>
   23d34:	6921      	ldr	r1, [r4, #16]
   23d36:	4628      	mov	r0, r5
   23d38:	f7ff fde0 	bl	238fc <_free_r>
   23d3c:	6b61      	ldr	r1, [r4, #52]
   23d3e:	b141      	cbz	r1, 23d52 <_fclose_r+0x86>
   23d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
   23d44:	4299      	cmp	r1, r3
   23d46:	d002      	beq.n	23d4e <_fclose_r+0x82>
   23d48:	4628      	mov	r0, r5
   23d4a:	f7ff fdd7 	bl	238fc <_free_r>
   23d4e:	2300      	movs	r3, #0
   23d50:	6363      	str	r3, [r4, #52]
   23d52:	6ca1      	ldr	r1, [r4, #72]
   23d54:	b121      	cbz	r1, 23d60 <_fclose_r+0x94>
   23d56:	4628      	mov	r0, r5
   23d58:	f7ff fdd0 	bl	238fc <_free_r>
   23d5c:	2300      	movs	r3, #0
   23d5e:	64a3      	str	r3, [r4, #72]
   23d60:	f04f 0300 	mov.w	r3, #0	; 0x0
   23d64:	81a3      	strh	r3, [r4, #12]
   23d66:	f7ff fc89 	bl	2367c <__sfp_lock_release>
   23d6a:	4630      	mov	r0, r6
   23d6c:	bd70      	pop	{r4, r5, r6, pc}
   23d6e:	46c0      	nop			(mov r8, r8)
   23d70:	00025880 	.word	0x00025880
   23d74:	000258a0 	.word	0x000258a0
   23d78:	000258c0 	.word	0x000258c0

00023d7c <fclose>:
   23d7c:	b500      	push	{lr}
   23d7e:	4b04      	ldr	r3, [pc, #16]	(23d90 <fclose+0x14>)
   23d80:	4601      	mov	r1, r0
   23d82:	b081      	sub	sp, #4
   23d84:	6818      	ldr	r0, [r3, #0]
   23d86:	f7ff ffa1 	bl	23ccc <_fclose_r>
   23d8a:	b001      	add	sp, #4
   23d8c:	bd00      	pop	{pc}
   23d8e:	46c0      	nop			(mov r8, r8)
   23d90:	20000044 	.word	0x20000044

00023d94 <_fstat_r>:
   23d94:	b530      	push	{r4, r5, lr}
   23d96:	4c08      	ldr	r4, [pc, #32]	(23db8 <_fstat_r+0x24>)
   23d98:	2300      	movs	r3, #0
   23d9a:	b081      	sub	sp, #4
   23d9c:	4605      	mov	r5, r0
   23d9e:	4608      	mov	r0, r1
   23da0:	4611      	mov	r1, r2
   23da2:	6023      	str	r3, [r4, #0]
   23da4:	f7f5 fbc2 	bl	1952c <_fstat>
   23da8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   23dac:	d102      	bne.n	23db4 <_fstat_r+0x20>
   23dae:	6823      	ldr	r3, [r4, #0]
   23db0:	b103      	cbz	r3, 23db4 <_fstat_r+0x20>
   23db2:	60eb      	str	r3, [r5, #12]
   23db4:	b001      	add	sp, #4
   23db6:	bd30      	pop	{r4, r5, pc}
   23db8:	2000067c 	.word	0x2000067c

00023dbc <_isatty_r>:
   23dbc:	b530      	push	{r4, r5, lr}
   23dbe:	4c08      	ldr	r4, [pc, #32]	(23de0 <_isatty_r+0x24>)
   23dc0:	2300      	movs	r3, #0
   23dc2:	b081      	sub	sp, #4
   23dc4:	4605      	mov	r5, r0
   23dc6:	4608      	mov	r0, r1
   23dc8:	6023      	str	r3, [r4, #0]
   23dca:	f7f5 fbc9 	bl	19560 <_isatty>
   23dce:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   23dd2:	d102      	bne.n	23dda <_isatty_r+0x1e>
   23dd4:	6823      	ldr	r3, [r4, #0]
   23dd6:	b103      	cbz	r3, 23dda <_isatty_r+0x1e>
   23dd8:	60eb      	str	r3, [r5, #12]
   23dda:	b001      	add	sp, #4
   23ddc:	bd30      	pop	{r4, r5, pc}
   23dde:	46c0      	nop			(mov r8, r8)
   23de0:	2000067c 	.word	0x2000067c

00023de4 <_lseek_r>:
   23de4:	b530      	push	{r4, r5, lr}
   23de6:	4c09      	ldr	r4, [pc, #36]	(23e0c <_lseek_r+0x28>)
   23de8:	4605      	mov	r5, r0
   23dea:	2000      	movs	r0, #0
   23dec:	6020      	str	r0, [r4, #0]
   23dee:	b081      	sub	sp, #4
   23df0:	4608      	mov	r0, r1
   23df2:	4611      	mov	r1, r2
   23df4:	461a      	mov	r2, r3
   23df6:	f7f5 fbe7 	bl	195c8 <_lseek>
   23dfa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   23dfe:	d102      	bne.n	23e06 <_lseek_r+0x22>
   23e00:	6823      	ldr	r3, [r4, #0]
   23e02:	b103      	cbz	r3, 23e06 <_lseek_r+0x22>
   23e04:	60eb      	str	r3, [r5, #12]
   23e06:	b001      	add	sp, #4
   23e08:	bd30      	pop	{r4, r5, pc}
   23e0a:	46c0      	nop			(mov r8, r8)
   23e0c:	2000067c 	.word	0x2000067c

00023e10 <_read_r>:
   23e10:	b530      	push	{r4, r5, lr}
   23e12:	4c09      	ldr	r4, [pc, #36]	(23e38 <_read_r+0x28>)
   23e14:	4605      	mov	r5, r0
   23e16:	2000      	movs	r0, #0
   23e18:	6020      	str	r0, [r4, #0]
   23e1a:	b081      	sub	sp, #4
   23e1c:	4608      	mov	r0, r1
   23e1e:	4611      	mov	r1, r2
   23e20:	461a      	mov	r2, r3
   23e22:	f7f5 fbed 	bl	19600 <_read>
   23e26:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   23e2a:	d102      	bne.n	23e32 <_read_r+0x22>
   23e2c:	6823      	ldr	r3, [r4, #0]
   23e2e:	b103      	cbz	r3, 23e32 <_read_r+0x22>
   23e30:	60eb      	str	r3, [r5, #12]
   23e32:	b001      	add	sp, #4
   23e34:	bd30      	pop	{r4, r5, pc}
   23e36:	46c0      	nop			(mov r8, r8)
   23e38:	2000067c 	.word	0x2000067c
   23e3c:	00000000 	.word	0x00000000

00023e40 <_ZTV6Sensor>:
	...
   23e48:	00005a1d 000059ed 0001f245 00000000     .Z...Y..E.......

00023e58 <_ZTV7Sensors>:
	...
   23e60:	00006495 0000623d                       .d..=b..

00023e68 <_ZZN7SensorsC1EvE4C.23>:
   23e68:	0b0d0e09 0c0f0405 00000a08 00000000     ................

00023e78 <_ZN14Asservissement21nb_ms_between_updatesE>:
   23e78:	00000005 00000000                       ........

00023e80 <_ZTV7Command>:
	...
   23e88:	000083f1 000083c1 0001f245 00008045     ........E...E...
   23e98:	0001f245 0001f245 00008079 00000000     E...E...y.......

00023ea8 <_ZTV24CommandTestTournerGauche>:
	...
   23eb0:	0001ec09 0001ebd1 0000870d 00008045     ............E...
   23ec0:	00008721 0000873d 00008079 00000000     !...=...y.......

00023ed0 <_ZTV18CommandTestAvancer>:
	...
   23ed8:	0001eb99 0001eb61 000086c1 00008045     ....a.......E...
   23ee8:	000086d5 000086f1 00008079 00000000     ........y.......

00023ef8 <_ZTV15CommandAttendre>:
	...
   23f00:	0001eb29 0001eaf1 00008645 00008045     ).......E...E...
   23f10:	00008665 00008681 0000869d 00000000     e...............

00023f20 <_ZTV13CommandVirage>:
	...
   23f28:	0001eab9 0001ea81 00008859 00008045     ........Y...E...
   23f38:	000085fd 00008615 0000862d 00000000     ........-.......

00023f48 <_ZTV18CommandTournerVers>:
	...
   23f50:	0001ea49 0001ea11 00008c41 00008045     I.......A...E...
   23f60:	000085b1 000085cd 000085e5 00000000     ................

00023f70 <_ZTV13CommandAllerA>:
	...
   23f78:	0001e9d9 0001e9a1 00009599 00008c0d     ................
   23f88:	00008565 0000857d 00008595 00000000     e...}...........

00023f98 <_ZTV18CommandAllerEnArcA>:
	...
   23fa0:	0001e969 0001e931 00009d11 00008045     i...1.......E...
   23fb0:	00008519 00008531 00008549 00000000     ....1...I.......

00023fc0 <_ZN14PIDFilterAngle2KpE>:
   23fc0:	42960000                                ...B

00023fc4 <_ZN14PIDFilterAngle2KdE>:
   23fc4:	3f000000                                ...?

00023fc8 <_ZN14PIDFilterAngle2KiE>:
   23fc8:	3f333333                                333?

00023fcc <_ZN17PIDFilterDistance2KpE>:
   23fcc:	3e4ccccd                                ..L>

00023fd0 <_ZN17PIDFilterDistance2KdE>:
   23fd0:	3f333333                                333?

00023fd4 <_ZN17PIDFilterDistance2KiE>:
   23fd4:	3ba3d70a                                ...;

00023fd8 <_ZTV12AnalogSensor>:
	...
   23fe0:	0000ae5d 0000ae25 0001f245 00000000     ]...%...E.......

00023ff0 <_ZTV19CommandCheckCouleur>:
	...
   23ff8:	0001ece9 0001ecb1 0000ba79 00008045     ........y...E...
   24008:	0000b561 0000b57d 0000b599 00000000     a...}...........

00024018 <_ZTV29CommandCalibrerCapteurCouleur>:
	...
   24020:	0001ec79 0001ec41 0000b801 00008045     y...A.......E...
   24030:	0000b4ed 0000b509 0000b525 00000000     ........%.......

00024040 <_ZZN8CapteursC1EvE4C.21>:
   24040:	0d0c0b0a 0000000f                       ........

00024048 <_ZTV18LigthBarrierSensor>:
	...
   24050:	0000c659 0000c621 0000c555 00000000     Y...!...U.......

00024060 <_ZTV17LimitSwitchSensor>:
	...
   24068:	0000c885 0000c84d 0000c7a9 00000000     ....M...........
   24078:	a7c36552 61202c75 746e6176 756f7420     Re..u, avant tou
   24088:	63206574 616d6d6f 6e61646e 00212074     te commandant !.
   24098:	3a746f47 00000000                       Got:....

000240a0 <_ZTV11SharpSensor>:
	...
   240a8:	0000d579 0000d541 0000d401 00000000     y...A...........

000240b8 <_ZTV16UltrasoundSensor>:
	...
   240c0:	0000dcfd 0000dcc5 0000dc5d 00000000     ........].......
   240d0:	74696e49 00000000                       Init....

000240d8 <_ZTV10ActionGoTo>:
	...
   240e0:	0000f7d1 0000f799 0000f649 000168b5     ........I....h..
   240f0:	0000f611 0000f62d                       ....-...

000240f8 <_ZTV4Clap>:
	...
   24100:	0000fba1 0000fb69 0000f919 000168b5     ....i........h..
   24110:	000168cd 00016905                       .h...i..

00024118 <_ZTV14DeposerGobelet>:
	...
   24120:	0000ff3d 0000ff05 0000fdb1 000168b5     =............h..
   24130:	000168cd 00016905                       .h...i..

00024138 <_ZTV7Gobelet>:
	...
   24140:	0001110d 000110d5 00010ec9 000168b5     .............h..
   24150:	000168cd 00016905                       .h...i..

00024158 <_ZTV9Krabi2015>:
	...
   24160:	0001ee99 0001ed59 00018901 000168b5     ....Y........h..
   24170:	000186a9 00016905 00011381 000112a5     .....i..........

00024180 <_ZTV17MediumLevelAction>:
	...
   24188:	00016965 00016935 0001f245 000168b5     ei..5i..E....h..
   24198:	000168cd 00016905                       .h...i..

000241a0 <_ZTV12RamasserPied>:
	...
   241a8:	00016cc1 00016c89 00016a65 000168b5     .l...l..ej...h..
   241b8:	000168cd 00016905                       .h...i..

000241c0 <_ZTV19RecalibrerOdometrie>:
	...
   241c8:	000176b9 00017681 00016e59 000168b5     .v...v..Yn...h..
   241d8:	000168cd 00016905                       .h...i..

000241e0 <_ZTV11StrategieV2>:
	...
   241e8:	00018439 00018409                       9.......

000241f0 <_ZTV11StrategieV3>:
	...
   241f8:	0001f20d 0001f1d5 00018901 000168b5     .............h..
   24208:	000186a9 00016905 0001f245 0001f245     .....i..E...E...

00024218 <_ZTV5Tapis>:
	...
   24220:	00019165 0001912d 00018f35 000168b5     e...-...5....h..
   24230:	000168cd 00016905 70616548 646e6120     .h...i..Heap and
   24240:	61747320 63206b63 696c6c6f 6e6f6973      stack collision
   24250:	0000000a                                ....

00024254 <cplus_demangle_builtin_types>:
   24254:	000251a4 0000000b 000251a4 0000000b     .Q.......Q......
   24264:	00000000 000251b0 00000004 000251b8     .....Q.......Q..
   24274:	00000007 00000007 000251c0 00000004     .........Q......
   24284:	000251c8 00000004 00000000 000251d0     .Q...........Q..
   24294:	00000006 000251d0 00000006 00000008     .....Q..........
   242a4:	000251d8 0000000b 000251d8 0000000b     .Q.......Q......
   242b4:	00000008 000251e4 00000005 000251e4     .....Q.......Q..
   242c4:	00000005 00000008 000251ec 0000000a     .........Q......
   242d4:	000251ec 0000000a 00000008 000251f8     .Q...........Q..
   242e4:	0000000d 000251f8 0000000d 00000000     .....Q..........
   242f4:	00025208 00000003 00025208 00000003     .R.......R......
   24304:	00000001 0002520c 0000000c 0002521c     .....R.......R..
   24314:	00000008 00000002 00000000 00000000     ................
	...
   24330:	00025228 00000004 00025228 00000004     (R......(R......
   24340:	00000003 00025230 0000000d 00025230     ....0R......0R..
   24350:	0000000d 00000004 00025240 00000008     ........@R......
   24360:	00025240 00000008 00000000 0002524c     @R..........LR..
   24370:	00000011 0002524c 00000011 00000000     ....LR..........
	...
   243bc:	00025260 00000005 00025260 00000005     `R......`R......
   243cc:	00000000 00025268 0000000e 00025268     ....hR......hR..
   243dc:	0000000e 00000000 00000000 00000000     ................
	...
   243f8:	00025278 00000004 00025278 00000004     xR......xR......
   24408:	00000009 00025280 00000007 000251c0     .....R.......Q..
   24418:	00000004 00000000 00025288 00000009     .........R......
   24428:	00025228 00000004 00000005 00025294     (R...........R..
   24438:	00000012 00025294 00000012 00000006     .....R..........
   24448:	000252a8 00000003 000252a8 00000003     .R.......R......
   24458:	00000000                                ....

0002445c <cplus_demangle_operators>:
   2445c:	000252ac 000252b0 00000002 00000002     .R...R..........
   2446c:	000252b4 000252b8 00000001 00000002     .R...R..........
   2447c:	000252bc 00025148 00000002 00000002     .R..HQ..........
   2448c:	000252c0 000252c4 00000001 00000001     .R...R..........
   2449c:	000252c8 000252c4 00000001 00000002     .R...R..........
   244ac:	000252cc 000252d0 00000002 00000000     .R...R..........
   244bc:	000252d4 000252d8 00000001 00000002     .R...R..........
   244cc:	000252dc 000252e0 00000001 00000001     .R...R..........
   244dc:	000252e4 000252e8 00000002 00000002     .R...R..........
   244ec:	000252ec 000252f0 00000008 00000001     .R...R..........
   244fc:	000252fc 00025300 00000001 00000001     .R...S..........
   2450c:	00025304 00025308 00000006 00000001     .S...S..........
   2451c:	00025310 00025314 00000001 00000002     .S...S..........
   2452c:	00025318 0002531c 00000002 00000002     .S...S..........
   2453c:	00025320 00025324 00000001 00000002      S..$S..........
   2454c:	00025328 0002532c 00000002 00000002     (S..,S..........
   2455c:	00025330 00025334 00000002 00000002     0S..4S..........
   2456c:	00025338 000254ec 00000001 00000002     8S...T..........
   2457c:	0002533c 00024fcc 00000002 00000002     <S...O..........
   2458c:	00025340 00025344 00000003 00000002     @S..DS..........
   2459c:	000251d4 00025348 00000002 00000002     .Q..HS..........
   245ac:	0002534c 00025350 00000002 00000002     LS..PS..........
   245bc:	00025354 00025358 00000001 00000002     TS..XS..........
   245cc:	0002535c 00025360 00000002 00000002     \S..`S..........
   245dc:	00025364 00025368 00000002 00000002     dS..hS..........
   245ec:	0002536c 00025370 00000001 00000002     lS..pS..........
   245fc:	00025374 00025300 00000001 00000002     tS...S..........
   2460c:	00025378 0002537c 00000002 00000001     xS..|S..........
   2461c:	00025380 00025384 00000005 00000001     .S...S..........
   2462c:	0002538c 00025390 00000002 00000002     .S...S..........
   2463c:	000252a4 00025370 00000001 00000001     .R..pS..........
   2464c:	00025394 00025398 00000001 00000001     .S...S..........
   2465c:	0002539c 000253a0 00000003 00000001     .S...S..........
   2466c:	000253a4 000253a8 00000002 00000002     .S...S..........
   2467c:	000253ac 000253b0 00000002 00000002     .S...S..........
   2468c:	00025424 000253b4 00000001 00000002     $T...S..........
   2469c:	000253b8 000253bc 00000002 00000002     .S...S..........
   246ac:	000253c0 000253c4 00000001 00000002     .S...S..........
   246bc:	000253c8 000253cc 00000003 00000002     .S...S..........
   246cc:	000253d0 000253d4 00000002 00000001     .S...S..........
   246dc:	000253d8 000253c4 00000001 00000001     .S...S..........
   246ec:	000253dc 000253e0 00000002 00000002     .S...S..........
   246fc:	000253e4 000253e8 00000001 00000003     .S...S..........
   2470c:	000253ec 000253f0 00000002 00000002     .S...S..........
   2471c:	000253f4 000253f8 00000003 00000002     .S...S..........
   2472c:	000253fc 00025400 00000001 00000002     .S...T..........
   2473c:	00025404 00025408 00000002 00000002     .T...T..........
   2474c:	00025144 0002540c 00000007 00000001     DQ...T..........
   2475c:	00025414 0002540c 00000007 00000001     .T...T..........
	...

0002477c <standard_subs>:
   2477c:	00000074 00024fbc 00000003 00024fbc     t....O.......O..
   2478c:	00000003 00000000 00000000 00000061     ............a...
   2479c:	00025418 0000000e 00025418 0000000e     .T.......T......
   247ac:	00025428 00000009 00000062 00025434     (T......b...4T..
   247bc:	00000011 00025434 00000011 00025448     ....4T......HT..
   247cc:	0000000c 00000073 00025458 0000000b     ....s...XT......
   247dc:	00025464 00000046 00025448 0000000c     dT..F...HT......
   247ec:	00000069 000254ac 0000000c 000254bc     i....T.......T..
   247fc:	00000031 000254f0 0000000d 0000006f     1....T......o...
   2480c:	00025500 0000000c 00025510 00000031     .U.......U..1...
   2481c:	00025544 0000000d 00000064 00025554     DU......d...TU..
   2482c:	0000000d 00025564 00000032 00025598     ....dU..2....U..
   2483c:	0000000e                                ....

00024840 <_ZTV6vectorIN6Sensor12OutputSensorEE>:
	...
   24848:	0001e7f1 0001e7b1                       ........

00024850 <_ZTV6vectorIN17LimitSwitchSensor15LimitSwitchNameEE>:
	...
   24858:	0001e871 0001e831                       q...1...

00024860 <_ZTV6vectorIN18LigthBarrierSensor16LigthBarrierNameEE>:
	...
   24868:	0001e8f1 0001e8b1 65727570 72697620     ........pure vir
   24878:	6c617574 74656d20 20646f68 6c6c6163     tual method call
   24888:	000a6465 3a647473 6461623a 7079745f     ed..std::bad_typ
   24898:	00646965 00000000                       eid.....

000248a0 <_ZTVSt10bad_typeid>:
   248a0:	00000000 000248c8 0001fda5 0001fdcd     .....H..........
   248b0:	0001fd9d 00000000                       ........

000248b8 <_ZTSSt10bad_typeid>:
   248b8:	30317453 5f646162 65707974 00006469     St10bad_typeid..

000248c8 <_ZTISt10bad_typeid>:
   248c8:	000249b0 000248b8 00024ee4 6d726574     .I...H...N..term
   248d8:	74616e69 61632065 64656c6c 63657220     inate called rec
   248e8:	69737275 796c6576 0000000a 6d726574     ursively....term
   248f8:	74616e69 61632065 64656c6c 74666120     inate called aft
   24908:	74207265 776f7268 20676e69 69206e61     er throwing an i
   24918:	6174736e 2065636e 2720666f 00000000     nstance of '....
   24928:	00000a27 68772020 29287461 0020203a     '...  what():  .
   24938:	6d726574 74616e69 61632065 64656c6c     terminate called
   24948:	74697720 74756f68 206e6120 69746361      without an acti
   24958:	65206576 70656378 6e6f6974 0000000a     ve exception....
   24968:	3a647473 6461623a 7361635f 00000074     std::bad_cast...

00024978 <_ZTVSt8bad_cast>:
   24978:	00000000 0002499c 000201a1 000201c9     .....I..........
   24988:	00020199 00000000                       ........

00024990 <_ZTSSt8bad_cast>:
   24990:	62387453 635f6461 00747361              St8bad_cast.

0002499c <_ZTISt8bad_cast>:
   2499c:	000249b0 00024990 00024ee4              .I...I...N..

000249a8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   249a8:	00000000 00024a00 000202d9 00020301     .....J..........
   249b8:	0002055d 00020561 000204c5 00020421     ]...a.......!...
   249c8:	000201e5 0002020d 000202a1 00000000     ................

000249d8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   249d8:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   249e8:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   249f8:	456f666e 00000000                       nfoE....

00024a00 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   24a00:	000249b0 000249d8 00024f44 00000000     .I...I..DO......

00024a10 <_ZTVN10__cxxabiv123__fundamental_type_infoE>:
   24a10:	00000000 00024d00 0002031d 00020345     .....M......E...
   24a20:	0002055d 00020561 00020565 00020575     ]...a...e...u...

00024a30 <_ZTIPKe>:
   24a30:	000255b0 00024d0c 00000001 00024a50     .U...M......PJ..

00024a40 <_ZTIPe>:
   24a40:	000255b0 00024d10 00000000 00024a50     .U...M......PJ..

00024a50 <_ZTIe>:
   24a50:	00024a18 00024d14                       .J...M..

00024a58 <_ZTIPKd>:
   24a58:	000255b0 00024d18 00000001 00024a78     .U...M......xJ..

00024a68 <_ZTIPd>:
   24a68:	000255b0 00024d1c 00000000 00024a78     .U...M......xJ..

00024a78 <_ZTId>:
   24a78:	00024a18 00024d20                       .J.. M..

00024a80 <_ZTIPKf>:
   24a80:	000255b0 00024d24 00000001 00024aa0     .U..$M.......J..

00024a90 <_ZTIPf>:
   24a90:	000255b0 00024d28 00000000 00024aa0     .U..(M.......J..

00024aa0 <_ZTIf>:
   24aa0:	00024a18 00024d2c                       .J..,M..

00024aa8 <_ZTIPKy>:
   24aa8:	000255b0 00024d30 00000001 00024ac8     .U..0M.......J..

00024ab8 <_ZTIPy>:
   24ab8:	000255b0 00024d34 00000000 00024ac8     .U..4M.......J..

00024ac8 <_ZTIy>:
   24ac8:	00024a18 00024d38                       .J..8M..

00024ad0 <_ZTIPKx>:
   24ad0:	000255b0 00024d3c 00000001 00024af0     .U..<M.......J..

00024ae0 <_ZTIPx>:
   24ae0:	000255b0 00024d40 00000000 00024af0     .U..@M.......J..

00024af0 <_ZTIx>:
   24af0:	00024a18 00024d44                       .J..DM..

00024af8 <_ZTIPKm>:
   24af8:	000255b0 00024d48 00000001 00024b18     .U..HM.......K..

00024b08 <_ZTIPm>:
   24b08:	000255b0 00024d4c 00000000 00024b18     .U..LM.......K..

00024b18 <_ZTIm>:
   24b18:	00024a18 00024d50                       .J..PM..

00024b20 <_ZTIPKl>:
   24b20:	000255b0 00024d54 00000001 00024b40     .U..TM......@K..

00024b30 <_ZTIPl>:
   24b30:	000255b0 00024d58 00000000 00024b40     .U..XM......@K..

00024b40 <_ZTIl>:
   24b40:	00024a18 00024d5c                       .J..\M..

00024b48 <_ZTIPKj>:
   24b48:	000255b0 00024d60 00000001 00024b68     .U..`M......hK..

00024b58 <_ZTIPj>:
   24b58:	000255b0 00024d64 00000000 00024b68     .U..dM......hK..

00024b68 <_ZTIj>:
   24b68:	00024a18 00024d68                       .J..hM..

00024b70 <_ZTIPKi>:
   24b70:	000255b0 00024d6c 00000001 00024b90     .U..lM.......K..

00024b80 <_ZTIPi>:
   24b80:	000255b0 00024d70 00000000 00024b90     .U..pM.......K..

00024b90 <_ZTIi>:
   24b90:	00024a18 00024d74                       .J..tM..

00024b98 <_ZTIPKt>:
   24b98:	000255b0 00024d78 00000001 00024bb8     .U..xM.......K..

00024ba8 <_ZTIPt>:
   24ba8:	000255b0 00024d7c 00000000 00024bb8     .U..|M.......K..

00024bb8 <_ZTIt>:
   24bb8:	00024a18 00024d80                       .J...M..

00024bc0 <_ZTIPKs>:
   24bc0:	000255b0 00024d84 00000001 00024be0     .U...M.......K..

00024bd0 <_ZTIPs>:
   24bd0:	000255b0 00024d88 00000000 00024be0     .U...M.......K..

00024be0 <_ZTIs>:
   24be0:	00024a18 00024d8c                       .J...M..

00024be8 <_ZTIPKh>:
   24be8:	000255b0 00024d90 00000001 00024c08     .U...M.......L..

00024bf8 <_ZTIPh>:
   24bf8:	000255b0 00024d94 00000000 00024c08     .U...M.......L..

00024c08 <_ZTIh>:
   24c08:	00024a18 00024d98                       .J...M..

00024c10 <_ZTIPKa>:
   24c10:	000255b0 00024d9c 00000001 00024c30     .U...M......0L..

00024c20 <_ZTIPa>:
   24c20:	000255b0 00024da0 00000000 00024c30     .U...M......0L..

00024c30 <_ZTIa>:
   24c30:	00024a18 00024da4                       .J...M..

00024c38 <_ZTIPKc>:
   24c38:	000255b0 00024da8 00000001 00024c58     .U...M......XL..

00024c48 <_ZTIPc>:
   24c48:	000255b0 00024dac 00000000 00024c58     .U...M......XL..

00024c58 <_ZTIc>:
   24c58:	00024a18 00024db0                       .J...M..

00024c60 <_ZTIPKw>:
   24c60:	000255b0 00024db4 00000001 00024c80     .U...M.......L..

00024c70 <_ZTIPw>:
   24c70:	000255b0 00024db8 00000000 00024c80     .U...M.......L..

00024c80 <_ZTIw>:
   24c80:	00024a18 00024dbc                       .J...M..

00024c88 <_ZTIPKb>:
   24c88:	000255b0 00024dc0 00000001 00024ca8     .U...M.......L..

00024c98 <_ZTIPb>:
   24c98:	000255b0 00024dc4 00000000 00024ca8     .U...M.......L..

00024ca8 <_ZTIb>:
   24ca8:	00024a18 00024dc8                       .J...M..

00024cb0 <_ZTIPKv>:
   24cb0:	000255b0 00024dcc 00000001 00024cd0     .U...M.......L..

00024cc0 <_ZTIPv>:
   24cc0:	000255b0 00024dd0 00000000 00024cd0     .U...M.......L..

00024cd0 <_ZTIv>:
   24cd0:	00024a18 00024dd4                       .J...M..

00024cd8 <_ZTSN10__cxxabiv123__fundamental_type_infoE>:
   24cd8:	5f30314e 7878635f 76696261 5f333231     N10__cxxabiv123_
   24ce8:	6e75665f 656d6164 6c61746e 7079745f     _fundamental_typ
   24cf8:	6e695f65 00456f66                       e_infoE.

00024d00 <_ZTIN10__cxxabiv123__fundamental_type_infoE>:
   24d00:	000249b0 00024cd8 00024f80              .I...L...O..

00024d0c <_ZTSPKe>:
   24d0c:	00654b50                                PKe.

00024d10 <_ZTSPe>:
   24d10:	00006550                                Pe..

00024d14 <_ZTSe>:
   24d14:	00000065                                e...

00024d18 <_ZTSPKd>:
   24d18:	00644b50                                PKd.

00024d1c <_ZTSPd>:
   24d1c:	00006450                                Pd..

00024d20 <_ZTSd>:
   24d20:	00000064                                d...

00024d24 <_ZTSPKf>:
   24d24:	00664b50                                PKf.

00024d28 <_ZTSPf>:
   24d28:	00006650                                Pf..

00024d2c <_ZTSf>:
   24d2c:	00000066                                f...

00024d30 <_ZTSPKy>:
   24d30:	00794b50                                PKy.

00024d34 <_ZTSPy>:
   24d34:	00007950                                Py..

00024d38 <_ZTSy>:
   24d38:	00000079                                y...

00024d3c <_ZTSPKx>:
   24d3c:	00784b50                                PKx.

00024d40 <_ZTSPx>:
   24d40:	00007850                                Px..

00024d44 <_ZTSx>:
   24d44:	00000078                                x...

00024d48 <_ZTSPKm>:
   24d48:	006d4b50                                PKm.

00024d4c <_ZTSPm>:
   24d4c:	00006d50                                Pm..

00024d50 <_ZTSm>:
   24d50:	0000006d                                m...

00024d54 <_ZTSPKl>:
   24d54:	006c4b50                                PKl.

00024d58 <_ZTSPl>:
   24d58:	00006c50                                Pl..

00024d5c <_ZTSl>:
   24d5c:	0000006c                                l...

00024d60 <_ZTSPKj>:
   24d60:	006a4b50                                PKj.

00024d64 <_ZTSPj>:
   24d64:	00006a50                                Pj..

00024d68 <_ZTSj>:
   24d68:	0000006a                                j...

00024d6c <_ZTSPKi>:
   24d6c:	00694b50                                PKi.

00024d70 <_ZTSPi>:
   24d70:	00006950                                Pi..

00024d74 <_ZTSi>:
   24d74:	00000069                                i...

00024d78 <_ZTSPKt>:
   24d78:	00744b50                                PKt.

00024d7c <_ZTSPt>:
   24d7c:	00007450                                Pt..

00024d80 <_ZTSt>:
   24d80:	00000074                                t...

00024d84 <_ZTSPKs>:
   24d84:	00734b50                                PKs.

00024d88 <_ZTSPs>:
   24d88:	00007350                                Ps..

00024d8c <_ZTSs>:
   24d8c:	00000073                                s...

00024d90 <_ZTSPKh>:
   24d90:	00684b50                                PKh.

00024d94 <_ZTSPh>:
   24d94:	00006850                                Ph..

00024d98 <_ZTSh>:
   24d98:	00000068                                h...

00024d9c <_ZTSPKa>:
   24d9c:	00614b50                                PKa.

00024da0 <_ZTSPa>:
   24da0:	00006150                                Pa..

00024da4 <_ZTSa>:
   24da4:	00000061                                a...

00024da8 <_ZTSPKc>:
   24da8:	00634b50                                PKc.

00024dac <_ZTSPc>:
   24dac:	00006350                                Pc..

00024db0 <_ZTSc>:
   24db0:	00000063                                c...

00024db4 <_ZTSPKw>:
   24db4:	00774b50                                PKw.

00024db8 <_ZTSPw>:
   24db8:	00007750                                Pw..

00024dbc <_ZTSw>:
   24dbc:	00000077                                w...

00024dc0 <_ZTSPKb>:
   24dc0:	00624b50                                PKb.

00024dc4 <_ZTSPb>:
   24dc4:	00006250                                Pb..

00024dc8 <_ZTSb>:
   24dc8:	00000062                                b...

00024dcc <_ZTSPKv>:
   24dcc:	00764b50                                PKv.

00024dd0 <_ZTSPv>:
   24dd0:	00007650                                Pv..

00024dd4 <_ZTSv>:
   24dd4:	00000076 3a647473 6378653a 69747065     v...std::excepti
   24de4:	00006e6f 3a647473 6461623a 6378655f     on..std::bad_exc
   24df4:	69747065 00006e6f 00000000              eption......

00024e00 <_ZTVN10__cxxabiv119__foreign_exceptionE>:
   24e00:	00000000 00024e84 000203b5 000203d1     .....N..........
   24e10:	0001f245 00000000                       E.......

00024e18 <_ZTVN10__cxxabiv115__forced_unwindE>:
   24e18:	00000000 00024eac 0002039d 000203e5     .....N..........
   24e28:	0001f245 00000000                       E.......

00024e30 <_ZTVSt13bad_exception>:
   24e30:	00000000 00024ec8 00020385 0002040d     .....N..........
   24e40:	000203c9 00000000                       ........

00024e48 <_ZTVSt9exception>:
   24e48:	00000000 00024ee4 0002036d 000203f9     .....N..m.......
   24e58:	000203c1 00000000                       ........

00024e60 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   24e60:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   24e70:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   24e80:	00456e6f                                onE.

00024e84 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   24e84:	00024ef8 00024e60                       .N..`N..

00024e8c <_ZTSN10__cxxabiv115__forced_unwindE>:
   24e8c:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   24e9c:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

00024eac <_ZTIN10__cxxabiv115__forced_unwindE>:
   24eac:	00024ef8 00024e8c                       .N...N..

00024eb4 <_ZTSSt13bad_exception>:
   24eb4:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   24ec4:	0000006e                                n...

00024ec8 <_ZTISt13bad_exception>:
   24ec8:	000249b0 00024eb4 00024ee4              .I...N...N..

00024ed4 <_ZTSSt9exception>:
   24ed4:	65397453 70656378 6e6f6974 00000000     St9exception....

00024ee4 <_ZTISt9exception>:
   24ee4:	00024ef8 00024ed4 00000000              .N...N......

00024ef0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   24ef0:	00000000 00024f44 000204f1 00020519     ....DO..........
   24f00:	0002055d 00020561 000204c5 00020421     ]...a.......!...
   24f10:	00020465 00020485 00020459 00000000     e.......Y.......

00024f20 <_ZTSN10__cxxabiv117__class_type_infoE>:
   24f20:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   24f30:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   24f40:	00000045                                E...

00024f44 <_ZTIN10__cxxabiv117__class_type_infoE>:
   24f44:	000249b0 00024f20 00024f80              .I.. O...O..

00024f50 <_ZTVSt9type_info>:
   24f50:	00000000 00024f80 00020541 00020579     .....O..A...y...
   24f60:	0002055d 00020561 00020565 00020575     ]...a...e...u...

00024f70 <_ZTSSt9type_info>:
   24f70:	74397453 5f657079 6f666e69 00000000     St9type_info....

00024f80 <_ZTISt9type_info>:
   24f80:	00024ef8 00024f70 4f4c475f 5f4c4142     .N..pO.._GLOBAL_
   24f90:	00000000 6f6e6128 6f6d796e 6e207375     ....(anonymous n
   24fa0:	73656d61 65636170 00000029 69727473     amespace)...stri
   24fb0:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   24fc0:	00003a3a 7272414a 00007961 00005d5b     ::..JArray..[]..
   24fd0:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   24fe0:	20726f66 00000000 736e6f63 63757274     for ....construc
   24ff0:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   25000:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   25010:	6f666e69 726f6620 00000020 65707974     info for ...type
   25020:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   25030:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   25040:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   25050:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   25060:	6e616972 65722074 6e727574 75687420     riant return thu
   25070:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   25080:	66207373 0020726f 72617567 61762064     ss for .guard va
   25090:	62616972 6620656c 0020726f 65666572     riable for .refe
   250a0:	636e6572 65742065 726f706d 20797261     rence temporary 
   250b0:	20726f66 00000000 64646968 61206e65     for ....hidden a
   250c0:	7361696c 726f6620 00000020 002a3a3a     lias for ...::*.
   250d0:	0000202c 7265706f 726f7461 00000000     , ..operator....
   250e0:	7265706f 726f7461 00000020 00002029     operator ...) ..
   250f0:	00002820 203a2029 00000028 00006c75      (..) : (...ul..
   25100:	00006c6c 006c6c75 736c6166 00000065     ll..ull.false...
   25110:	65757274 00000000 6176616a 73657220     true....java res
   25120:	6372756f 00002065 73657220 63697274     ource .. restric
   25130:	00000074 6c6f7620 6c697461 00000065     t... volatile...
   25140:	6e6f6320 00007473 00002626 706d6f63      const..&&..comp
   25150:	2078656c 00000000 67616d69 72616e69     lex ....imaginar
   25160:	00002079 626f6c67 64206c61 72747365     y ..global destr
   25170:	6f746375 6b207372 64657965 206f7420     uctors keyed to 
   25180:	00000000 626f6c67 63206c61 74736e6f     ....global const
   25190:	74637572 2073726f 6579656b 6f742064     ructors keyed to
   251a0:	00000020 6e676973 63206465 00726168      ...signed char.
   251b0:	6c6f6f62 00000000 6c6f6f62 006e6165     bool....boolean.
   251c0:	72616863 00000000 65747962 00000000     char....byte....
   251d0:	62756f64 0000656c 676e6f6c 756f6420     double..long dou
   251e0:	00656c62 616f6c66 00000074 6c665f5f     ble.float...__fl
   251f0:	3174616f 00003832 69736e75 64656e67     oat128..unsigned
   25200:	61686320 00000072 00746e69 69736e75      char...int.unsi
   25210:	64656e67 746e6920 00000000 69736e75     gned int....unsi
   25220:	64656e67 00000000 676e6f6c 00000000     gned....long....
   25230:	69736e75 64656e67 6e6f6c20 00000067     unsigned long...
   25240:	6e695f5f 38323174 00000000 69736e75     __int128....unsi
   25250:	64656e67 695f5f20 3231746e 00000038     gned __int128...
   25260:	726f6873 00000074 69736e75 64656e67     short...unsigned
   25270:	6f687320 00007472 64696f76 00000000      short..void....
   25280:	61686377 00745f72 676e6f6c 6e6f6c20     wchar_t.long lon
   25290:	00000067 69736e75 64656e67 6e6f6c20     g...unsigned lon
   252a0:	6f6c2067 0000676e 002e2e2e 00004e61     g long......aN..
   252b0:	00003d26 00005361 0000003d 00006161     &=..aS..=...aa..
   252c0:	00006461 00000026 00006e61 00006c63     ad..&...an..cl..
   252d0:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   252e0:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
   252f0:	656c6564 5d5b6574 00000000 00006564     delete[]....de..
   25300:	0000002a 00006c64 656c6564 00006574     *...dl..delete..
   25310:	00007664 0000002f 00004f65 00003d5e     dv../...eO..^=..
   25320:	00006f65 0000005e 00007165 00003d3d     eo..^...eq..==..
   25330:	00006567 00003d3e 00007467 00007869     ge..>=..gt..ix..
   25340:	0000536c 003d3c3c 00003d3c 0000736c     lS..<<=.<=..ls..
   25350:	00003c3c 0000746c 0000003c 0000496d     <<..lt..<...mI..
   25360:	00003d2d 00004c6d 00003d2a 0000696d     -=..mL..*=..mi..
   25370:	0000002d 00006c6d 00006d6d 00002d2d     -...ml..mm..--..
   25380:	0000616e 5b77656e 0000005d 0000656e     na..new[]...ne..
   25390:	00003d21 0000746e 00000021 0000776e     !=..nt..!...nw..
   253a0:	0077656e 0000526f 00003d7c 00006f6f     new.oR..|=..oo..
   253b0:	00007c7c 0000007c 00004c70 00003d2b     ||..|...pL..+=..
   253c0:	00006c70 0000002b 00006d70 002a3e2d     pl..+...pm..->*.
   253d0:	00007070 00002b2b 00007370 00007470     pp..++..ps..pt..
   253e0:	00003e2d 00007571 0000003f 00004d72     ->..qu..?...rM..
   253f0:	00003d25 00005372 003d3e3e 00006d72     %=..rS..>>=.rm..
   25400:	00000025 00007372 00003e3e 657a6973     %...rs..>>..size
   25410:	0020666f 00007a73 3a647473 6c6c613a     of .sz..std::all
   25420:	7461636f 0000726f 6f6c6c61 6f746163     ocator..allocato
   25430:	00000072 3a647473 7361623a 735f6369     r...std::basic_s
   25440:	6e697274 00000067 69736162 74735f63     tring...basic_st
   25450:	676e6972 00000000 3a647473 7274733a     ring....std::str
   25460:	00676e69 3a647473 7361623a 735f6369     ing.std::basic_s
   25470:	6e697274 68633c67 202c7261 3a647473     tring<char, std:
   25480:	6168633a 72745f72 73746961 6168633c     :char_traits<cha
   25490:	202c3e72 3a647473 6c6c613a 7461636f     r>, std::allocat
   254a0:	633c726f 3e726168 00003e20 3a647473     or<char> >..std:
   254b0:	7473693a 6d616572 00000000 3a647473     :istream....std:
   254c0:	7361623a 695f6369 65727473 633c6d61     :basic_istream<c
   254d0:	2c726168 64747320 68633a3a 745f7261     har, std::char_t
   254e0:	74696172 68633c73 203e7261 0000003e     raits<char> >...
   254f0:	69736162 73695f63 61657274 0000006d     basic_istream...
   25500:	3a647473 74736f3a 6d616572 00000000     std::ostream....
   25510:	3a647473 7361623a 6f5f6369 65727473     std::basic_ostre
   25520:	633c6d61 2c726168 64747320 68633a3a     am<char, std::ch
   25530:	745f7261 74696172 68633c73 203e7261     ar_traits<char> 
   25540:	0000003e 69736162 736f5f63 61657274     >...basic_ostrea
   25550:	0000006d 3a647473 736f693a 61657274     m...std::iostrea
   25560:	0000006d 3a647473 7361623a 695f6369     m...std::basic_i
   25570:	7274736f 3c6d6165 72616863 7473202c     ostream<char, st
   25580:	633a3a64 5f726168 69617274 633c7374     d::char_traits<c
   25590:	3e726168 00003e20 69736162 6f695f63     har> >..basic_io
   255a0:	65727473 00006d61                       stream..

000255a8 <_ZTVN10__cxxabiv119__pointer_type_infoE>:
   255a8:	00000000 000255f4 000207bd 000207e5     .....U..........
   255b8:	00020775 00020561 00020815 00020575     u...a.......u...
   255c8:	00020779 00000000                       y.......

000255d0 <_ZTSN10__cxxabiv119__pointer_type_infoE>:
   255d0:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   255e0:	696f705f 7265746e 7079745f 6e695f65     _pointer_type_in
   255f0:	00456f66                                foE.

000255f4 <_ZTIN10__cxxabiv119__pointer_type_infoE>:
   255f4:	000249b0 000255d0 0002564c              .I...U..LV..

00025600 <_ZTVN10__cxxabiv117__pbase_type_infoE>:
   25600:	00000000 0002564c 00020875 0002089d     ....LV..u.......
   25610:	0002055d 00020561 00020815 00020575     ]...a.......u...
   25620:	00020801 00000000                       ........

00025628 <_ZTSN10__cxxabiv117__pbase_type_infoE>:
   25628:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   25638:	6162705f 745f6573 5f657079 6f666e69     _pbase_type_info
   25648:	00000045                                E...

0002564c <_ZTIN10__cxxabiv117__pbase_type_infoE>:
   2564c:	000249b0 00025628 00024f80 74727173     .I..(V...O..sqrt
   2565c:	00000000                                ....

00025660 <npio2_hw>:
   25660:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
   25670:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
   25680:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
   25690:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
   256a0:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
   256b0:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
   256c0:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
   256d0:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

000256e0 <two_over_pi>:
   256e0:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
   256f0:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
   25700:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
   25710:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
   25720:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
   25730:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
   25740:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
   25750:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
   25760:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
   25770:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
   25780:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
   25790:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
   257a0:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
   257b0:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
   257c0:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
   257d0:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
   257e0:	0060e27b 00c08c6b                       {.`.k...

000257e8 <init_jk>:
   257e8:	00000002 00000003 00000004 00000006     ................

000257f8 <PIo2>:
   257f8:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
   25808:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
   25818:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
   25828:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00025838 <atanhi>:
   25838:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   25848:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00025858 <atanlo>:
   25858:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   25868:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00025878 <_global_impure_ptr>:
   25878:	20000048 00000043                       H.. C...

00025880 <__sf_fake_stdin>:
	...

000258a0 <__sf_fake_stdout>:
	...

000258c0 <__sf_fake_stderr>:
	...
