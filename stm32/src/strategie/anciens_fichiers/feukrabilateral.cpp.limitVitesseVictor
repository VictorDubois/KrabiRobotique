#include "feukrabilateral.h"
#include "strategieV2.h"
#ifndef ROBOTHW
#include <QDebug>
#endif

FeuKrabiLateral::FeuKrabiLateral(){}

FeuKrabiLateral::FeuKrabiLateral(bool isBlue, Position positionDepart, Angle angleBefore, ARM_SIDE arm, float precision) : MediumLevelAction()
{
    this->isBlue = isBlue;
    this->positionDepart = positionDepart;
    this->positionFeu = positionFeu;
    this->precision = precision;
    this->angleBefore = (StrategieV2::getIsBlue() ? angleBefore : wrapAngle(M_PI-angleBefore));
    this->angleAfter = (StrategieV2::getIsBlue() ? wrapAngle(angleBefore+M_PI/2) : wrapAngle(M_PI/2-angleBefore));//3*M_PI/2+angleBefore));//angleBefore + DEGTORAD(90.);
    this->arm = arm;
    status = 0;
    bracquemart = Brak::getSingleton();
    positionEtape = Position(positionDepart.getX() + 150, positionDepart.getY(), isBlue);
}

int FeuKrabiLateral::update()
{
    if (status == 0)
        status++;

    else if (status == 1)
    {
        StrategieV2::setCurrentGoal(positionDepart, false);
        status++;
    }

    else if (status == 2)
    {
        if (Command::isNear(positionDepart))
        {
            StrategieV2::lookAt(angleBefore);
            status++;
        }
    }

    else if (status == 3)
    {
        if (Command::isLookingAt(angleBefore))
        {
            if (arm==LEFT)
                BrasLateral::getLeft()->expand();
            else
                BrasLateral::getRight()->expand();
            status++;
        }
    }

    else if (status < 150)
    {
        status++;
    }

    else if (status == 150)
    {
        StrategieV2::lookAt(angleAfter);
        status++;
    }

    else if (status == 151)
    {
        if (Command::isLookingAt(angleAfter))
        {
            if (arm==LEFT)
                BrasLateral::getLeft()->collapse();
            else
                BrasLateral::getRight()->collapse();
            status++;
        }
    }

    else if (status < 300)
    {
        status++;
    }

    else if (status == 300)
    {
        status = -1;
    }

    /*else if (status == 1) // mise en place du robot
    {
        StrategieV2::setCurrentGoal(positionDepart, false);
        bracquemart->positionFeuBasTorche();
#ifndef ROBOTHW
            qDebug() << "abaissage du bras";
#endif
        status++;
    }
    else if (status == 2)
    {
        Position vect = positionDepart - Odometrie::odometrie->getPos().getPosition();

        if(vect.getNorme() < (int) this->precision)
        {
            StrategieV2::setCurrentGoal(this->positionEtape, false, 1.0, 3.0f);
#ifndef ROBOTHW
            qDebug() << "arrivé en étape 3, direction vers la 4";
#endif
            status++;
        }
    }
    else if (status == 3)
    {
        Position vect = positionEtape - Odometrie::odometrie->getPos().getPosition();

        if(vect.getNorme() < (int) this-> precision)
        {
            //StrategieV2::lookAt(this->positionFeu, 0.01);
#ifndef ROBOTHW
            qDebug() << "regardage du feu";
#endif
            status++;
        }
    }
    else if (status < 103)
    {
        bracquemart->positionBasse();
        bracquemart->attraperFeu();
#ifndef ROBOTHW
            qDebug() << "attrapage du feu";
#endif
            status++;
    }
    else if (status < 203)
    {
        status++;
    }
    else if (status == 203)
    {
        bracquemart->positionIntermediaire();
#ifndef ROBOTHW
            qDebug() << "remontage du bras avec le feu";
#endif
        status++;
    }
    else if (status < 253)
    {
        status++;
    }
    else if (status == 253)
    {
        status = -1;
    }*/

    return status;
}

FeuKrabiLateral::~FeuKrabiLateral()
{
    //dtor
}
